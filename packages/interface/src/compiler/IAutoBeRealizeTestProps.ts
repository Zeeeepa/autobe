import { IAutoBeRealizeTestConfig } from "./IAutoBeRealizeTestConfig";

/**
 * Configuration interface defining all necessary parameters and resources
 * required to execute comprehensive E2E test suite validation against the fully
 * implemented backend application.
 *
 * This interface encapsulates all the essential components needed to set up and
 * execute the final validation phase of the AutoBE development pipeline. It
 * brings together the generated implementation files, database schemas,
 * execution configuration, and environmental parameters necessary to perform
 * thorough testing of the complete backend application stack.
 *
 * The props structure enables the Realize agent to orchestrate comprehensive
 * test execution by providing access to all generated artifacts, database
 * configuration, and execution parameters in a unified, type-safe interface
 * that ensures consistent and reliable test environment setup.
 *
 * @author Samchon
 */
export interface IAutoBeRealizeTestProps extends IAutoBeRealizeTestConfig {
  /**
   * Complete collection of generated backend implementation files as key-value
   * pairs ready for test execution.
   *
   * Contains the entire set of TypeScript implementation files generated by the
   * Realize agent, including service classes, business logic methods, data
   * access objects, API controllers, DTOs, client SDK library, and all
   * supporting code that comprises the functional backend application. Each key
   * represents the file path within the project structure and each value
   * contains the actual TypeScript source code.
   *
   * These files represent the complete, production-ready backend implementation
   * that will be tested against the Test agent's E2E test suite. The
   * implementation files must be syntactically correct, properly integrated
   * with the NestJS application framework, maintain type safety, and follow
   * established coding standards to ensure successful test execution and
   * validation.
   */
  files: Record<string, string>;

  // /**
  //  * Generated Prisma schema files for database integration context during test
  //  * execution.
  //  *
  //  * Contains the Prisma schema files generated by the Prisma agent, organized
  //  * by business domains following the `schema-{number}-{domain}.prisma` naming
  //  * convention. Each key represents the schema filename and each value contains
  //  * the complete Prisma schema content including models, relationships,
  //  * constraints, indexes, and comprehensive documentation.
  //  *
  //  * The Prisma schemas provide database integration context that enables proper
  //  * validation of TypeScript implementation code against the generated Prisma
  //  * client APIs. During test execution, these schemas ensure that database
  //  * operations maintain type safety and compatibility with the established data
  //  * model, preventing runtime errors related to database access and
  //  * manipulation.
  //  */
  // prisma: Record<string, string>;

  /**
   * Package name for the generated SDK library used in test execution.
   *
   * Specifies the package name used for the generated client SDK library that
   * enables type-safe API consumption during E2E test execution. This package
   * name is used in import statements throughout the test code and must match
   * the SDK package configuration to ensure proper module resolution and
   * integration within the test environment.
   *
   * The package name should follow standard npm naming conventions and reflect
   * the organization and project structure. When not provided, defaults to the
   * standard AutoBE convention for SDK package naming.
   *
   * @default "@ORGANIZATION/PROJECT-api"
   */
  package?: string;
}
