import { IAgenticaHistoryJson } from "@agentica/core";
import { AutoBeOpenApi } from "@autobe/interface";
import { v4 } from "uuid";

import { AutoBeSystemPromptConstant } from "../../constants/AutoBeSystemPromptConstant";
import { IAutoBeRealizeCoderApplication } from "./structures/IAutoBeRealizeCoderApplication";

export const transformRealizeIntegratorHistories = (
  code: string,
  props: IAutoBeRealizeCoderApplication.RealizeCoderOutput,
  operation: AutoBeOpenApi.IOperation,
): Array<
  IAgenticaHistoryJson.IAssistantMessage | IAgenticaHistoryJson.ISystemMessage
> => {
  return [
    {
      id: v4(),
      created_at: new Date().toISOString(),
      type: "systemMessage",
      text: AutoBeSystemPromptConstant.REALIZE_INTEGRATOR,
    },
    {
      id: v4(),
      created_at: new Date().toISOString(),
      type: "assistantMessage",
      text: [
        "You need to integrate a function into a NestJS controller method and provide three outputs: original, example, and final result.",
        "",
        "## Task Overview",
        "1. Find the specific method that matches the OpenAPI operation",
        "2. Show how that method should be transformed (method-level change)",
        "3. Apply the transformation to the complete controller file",
        "",
        "## Target Function to Integrate",
        "",
        "```typescript",
        props.implementationCode,
        "```",
        "",
        `**Function name to call:** \`${props.functionName}\``,
        "",
        "## OpenAPI Operation",
        "",
        "```json",
        JSON.stringify(operation),
        "```",
        "",
        "## Original Controller Code",
        "",
        "```typescript",
        code,
        "```",
        "",
        "## Your Task",
        "",
        "You must return THREE outputs:",
        "",
        "### 1. targetCode",
        "Extract ONLY the target method that matches the operation:",
        "- Find the method with matching HTTP method and path",
        "- Return just that method (decorators + signature + body)",
        "- Do not include any other parts of the controller",
        "",
        "### 2. modifiedCode",
        "Show how the target method should look after modification:",
        "- Take the exact method from targetCode",
        "- Keep the signature completely unchanged",
        "- Replace only the method body with:",
        "",
        "```typescript",
        `return ${props.functionName}(/* parameters in order */);`,
        "```",
        "",
        "- Use parameter names from the method signature:",
        "  - @TypedParam parameters first (in declaration order)",
        "  - @TypedBody parameter last (if present)",
        "",
        "### 3. code",
        "Apply the transformation to the complete controller file:",
        "- Take the complete original controller code",
        "- Replace the target method with the modified version",
        "- Keep everything else unchanged",
        "",
        "## Example",
        "",
        "**targetCode (method only):**",
        "```typescript",
        "@TypedRoute.Post()",
        "public async post(@TypedBody() body: CreateType): Promise<ResponseType> {",
        "  body;",
        "  return typia.random<ResponseType>();",
        "}",
        "```",
        "",
        "**modifiedCode (same method, modified body):**",
        "```typescript",
        "@TypedRoute.Post()",
        "public async post(@TypedBody() body: CreateType): Promise<ResponseType> {",
        `  return ${props.functionName}(body);`,
        "}",
        "```",
        "",
        "**code (complete file with method replaced)**",
        "",
        "**Important**: targetCode and modifiedCode should contain ONLY the specific method, not the entire file.",
      ].join("\n"),
    },
  ];
};
