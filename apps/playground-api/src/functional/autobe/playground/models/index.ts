/**
 * @packageDocumentation
 * @module api.functional.autobe.playground.models
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IAutoBePlaygroundModel, IPage } from "@autobe/interface";
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive } from "typia";
import type typia from "typia";

/**
 * @controller AutoBePlaygroundModelController.index
 * @path PATCH /autobe/playground/models
 * @accessor api.functional.autobe.playground.models.index
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  body: index.Body,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(),
    },
    body,
  );
}
export namespace index {
  export type Body = Primitive<IPage.IRequest>;
  export type Output = Primitive<IPage<IAutoBePlaygroundModel>>;

  export const METADATA = {
    method: "PATCH",
    path: "/autobe/playground/models",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/autobe/playground/models";
}

/**
 * @controller AutoBePlaygroundModelController.at
 * @path GET /autobe/playground/models/:id
 * @accessor api.functional.autobe.playground.models.at
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  id: string & typia.tags.Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(id),
  });
}
export namespace at {
  export type Output = Primitive<IAutoBePlaygroundModel>;

  export const METADATA = {
    method: "GET",
    path: "/autobe/playground/models/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & typia.tags.Format<"uuid">) =>
    `/autobe/playground/models/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * @controller AutoBePlaygroundModelController.create
 * @path POST /autobe/playground/models
 * @accessor api.functional.autobe.playground.models.create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  body: create.Body,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    body,
  );
}
export namespace create {
  export type Body = Primitive<IAutoBePlaygroundModel.ICreate>;
  export type Output = Primitive<IAutoBePlaygroundModel>;

  export const METADATA = {
    method: "POST",
    path: "/autobe/playground/models",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/autobe/playground/models";
}

/**
 * @controller AutoBePlaygroundModelController.update
 * @path PUT /autobe/playground/models/:id
 * @accessor api.functional.autobe.playground.models.update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string & typia.tags.Format<"uuid">,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...update.METADATA,
    template: update.METADATA.path,
    path: update.path(id),
  });
}
export namespace update {
  export const METADATA = {
    method: "PUT",
    path: "/autobe/playground/models/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & typia.tags.Format<"uuid">) =>
    `/autobe/playground/models/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * @controller AutoBePlaygroundModelController.erase
 * @path DELETE /autobe/playground/models/:id
 * @accessor api.functional.autobe.playground.models.erase
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
  connection: IConnection,
  id: string & typia.tags.Format<"uuid">,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...erase.METADATA,
    template: erase.METADATA.path,
    path: erase.path(id),
  });
}
export namespace erase {
  export const METADATA = {
    method: "DELETE",
    path: "/autobe/playground/models/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & typia.tags.Format<"uuid">) =>
    `/autobe/playground/models/${encodeURIComponent(id?.toString() ?? "null")}`;
}
