/**
 * @packageDocumentation
 * @module api.functional.autobe.playground.sessions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IAutoBePlaygroundSession, IPage } from "@autobe/interface";
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive } from "typia";
import type typia from "typia";

/**
 * @controller AutoBePlaygroundSessionController.index
 * @path PATCH /autobe/playground/sessions
 * @accessor api.functional.autobe.playground.sessions.index
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  body: index.Body,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(),
    },
    body,
  );
}
export namespace index {
  export type Body = Primitive<IPage.IRequest>;
  export type Output = Primitive<IPage<IAutoBePlaygroundSession.ISummary>>;

  export const METADATA = {
    method: "PATCH",
    path: "/autobe/playground/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/autobe/playground/sessions";
}

/**
 * @controller AutoBePlaygroundSessionController.at
 * @path GET /autobe/playground/sessions/:id
 * @accessor api.functional.autobe.playground.sessions.at
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  id: string & typia.tags.Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(id),
  });
}
export namespace at {
  export type Output = Primitive<IAutoBePlaygroundSession>;

  export const METADATA = {
    method: "GET",
    path: "/autobe/playground/sessions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & typia.tags.Format<"uuid">) =>
    `/autobe/playground/sessions/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * @controller AutoBePlaygroundSessionController.update
 * @path POST /autobe/playground/sessions/:id
 * @accessor api.functional.autobe.playground.sessions.update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string & typia.tags.Format<"uuid">,
  body: update.Body,
): Promise<void> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(id),
    },
    body,
  );
}
export namespace update {
  export type Body = Primitive<IAutoBePlaygroundSession.IUpdate>;

  export const METADATA = {
    method: "POST",
    path: "/autobe/playground/sessions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (id: string & typia.tags.Format<"uuid">) =>
    `/autobe/playground/sessions/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * @controller AutoBePlaygroundSessionController.erase
 * @path DELETE /autobe/playground/sessions/:id
 * @accessor api.functional.autobe.playground.sessions.erase
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
  connection: IConnection,
  id: string & typia.tags.Format<"uuid">,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...erase.METADATA,
    template: erase.METADATA.path,
    path: erase.path(id),
  });
}
export namespace erase {
  export const METADATA = {
    method: "DELETE",
    path: "/autobe/playground/sessions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & typia.tags.Format<"uuid">) =>
    `/autobe/playground/sessions/${encodeURIComponent(id?.toString() ?? "null")}`;
}
