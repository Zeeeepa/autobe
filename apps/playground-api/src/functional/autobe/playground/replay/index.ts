/**
 * @packageDocumentation
 * @module api.functional.autobe.playground.replay
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IAutoBePlaygroundReplay,
  IAutoBeRpcListener,
  IAutoBeRpcService,
} from "@autobe/interface";
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import { WebSocketConnector } from "tgrid";
import type { Driver } from "tgrid";
import type { Primitive } from "typia";

/**
 * @controller AutoBePlaygroundReplayController.index
 * @path GET /autobe/playground/replay
 * @accessor api.functional.autobe.playground.replay.index
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(connection: IConnection): Promise<index.Output> {
  return PlainFetcher.fetch(connection, {
    ...index.METADATA,
    template: index.METADATA.path,
    path: index.path(),
  });
}
export namespace index {
  export type Output = Primitive<IAutoBePlaygroundReplay.ISummary[]>;

  export const METADATA = {
    method: "GET",
    path: "/autobe/playground/replay",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/autobe/playground/replay";
}

/**
 * @controller AutoBePlaygroundReplayController.get
 * @path /autobe/playground/replay/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection<get.Header>,
  query: get.Query,
  provider: get.Provider,
): Promise<get.Output> {
  const url: string = `${connection.host.endsWith("/") ? connection.host.substring(0, connection.host.length - 1) : connection.host}${get.path(query)}`;
  const connector: WebSocketConnector<get.Header, get.Provider, get.Listener> =
    new WebSocketConnector(connection.headers ?? ({} as any), provider);
  await connector.connect(url);
  const driver: Driver<get.Listener> = connector.getDriver();
  return {
    connector,
    driver,
    reconnect: async () => await connector.connect(url),
  };
}
export namespace get {
  export type Output = {
    connector: WebSocketConnector<Header, Provider, Listener>;
    driver: Driver<Listener>;
    reconnect: () => Promise<void>;
  };
  export type Header = undefined;
  export type Provider = IAutoBeRpcListener;
  export type Listener = IAutoBeRpcService;
  export type Query = IAutoBePlaygroundReplay.IProps;

  export const path = (query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/autobe/playground/replay/get";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
