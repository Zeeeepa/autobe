/**
 * @module api.functional.autobe.hackathon.moderators.sessions
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IAutoBeHackathonSession,
  IAutoBeRpcListener,
  IAutoBeRpcService,
  IPage,
} from "@autobe/interface";
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Driver } from "tgrid";
import { WebSocketConnector } from "tgrid";
import type { tags } from "typia";

/**
 * @controller AutoBeHackathonModeratorSessionController.index
 * @path PATCH /autobe/hackathon/:hackathonCode/moderators/sessions
 * @accessor api.functional.autobe.hackathon.moderators.sessions.index
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  hackathonCode: string,
  body: index.Body,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(hackathonCode),
    },
    body,
  );
}
export namespace index {
  export type Body = IPage.IRequest;
  export type Output = IPage<IAutoBeHackathonSession.ISummary>;

  export const METADATA = {
    method: "PATCH",
    path: "/autobe/hackathon/:hackathonCode/moderators/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (hackathonCode: string) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/moderators/sessions`;
}

/**
 * @controller AutoBeHackathonModeratorSessionController.at
 * @path GET /autobe/hackathon/:hackathonCode/moderators/sessions/:id
 * @accessor api.functional.autobe.hackathon.moderators.sessions.at
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  hackathonCode: string,
  id: string & tags.Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(hackathonCode, id),
  });
}
export namespace at {
  export type Output = IAutoBeHackathonSession;

  export const METADATA = {
    method: "GET",
    path: "/autobe/hackathon/:hackathonCode/moderators/sessions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    hackathonCode: string,
    id: string & tags.Format<"uuid">,
  ) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/moderators/sessions/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * @controller AutoBeHackathonModeratorSessionController.replay
 * @path /autobe/hackathon/:hackathonCode/moderators/sessions/:id/replay
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function replay(
  connection: IConnection<replay.Header>,
  hackathonCode: string,
  id: string & tags.Format<"uuid">,
  provider: replay.Provider,
): Promise<replay.Output> {
  const connector: WebSocketConnector<
    replay.Header,
    replay.Provider,
    replay.Listener
  > = new WebSocketConnector(connection.headers ?? ({} as any), provider);
  await connector.connect(
    `${connection.host.endsWith("/") ? connection.host.substring(0, connection.host.length - 1) : connection.host}${replay.path(hackathonCode, id)}`,
  );
  const driver: Driver<replay.Listener> = connector.getDriver();
  return {
    connector,
    driver,
  };
}
export namespace replay {
  export type Output = {
    connector: WebSocketConnector<Header, Provider, Listener>;
    driver: Driver<Listener>;
  };
  export type Header = IAutoBeHackathonSession.IHeader;
  export type Provider = IAutoBeRpcListener;
  export type Listener = IAutoBeRpcService;

  export const path = (
    hackathonCode: string,
    id: string & tags.Format<"uuid">,
  ) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/moderators/sessions/${encodeURIComponent(id?.toString() ?? "null")}/replay`;
}
