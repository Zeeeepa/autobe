/**
 * @packageDocumentation
 * @module api.functional.autobe.hackathon.moderators.authenticate
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IAutoBeHackathonModerator } from "@autobe/interface";
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

/**
 * @assignHeaders setHeaders
 * @controller AutoBeHackathonModeratorAuthenticateController.login
 * @path POST /autobe/hackathon/:hackathonCode/moderators/authenticate/login
 * @accessor api.functional.autobe.hackathon.moderators.authenticate.login
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function login(
  connection: IConnection,
  hackathonCode: string,
  body: login.Body,
): Promise<login.Output> {
  const output: IAutoBeHackathonModerator.IAuthorized =
    await PlainFetcher.fetch(
      {
        ...connection,
        headers: {
          ...connection.headers,
          "Content-Type": "application/json",
        },
      },
      {
        ...login.METADATA,
        template: login.METADATA.path,
        path: login.path(hackathonCode),
      },
      body,
    );
  connection.headers ??= {};
  Object.assign(connection.headers, output.setHeaders);
  return output;
}
export namespace login {
  export type Body = IAutoBeHackathonModerator.ILogin;
  export type Output = IAutoBeHackathonModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/autobe/hackathon/:hackathonCode/moderators/authenticate/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (hackathonCode: string) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/moderators/authenticate/login`;
}

/**
 * @assignHeaders setHeaders
 * @controller AutoBeHackathonModeratorAuthenticateController.refresh
 * @path PATCH /autobe/hackathon/:hackathonCode/moderators/authenticate/refresh
 * @accessor api.functional.autobe.hackathon.moderators.authenticate.refresh
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function refresh(
  connection: IConnection,
  hackathonCode: string,
  body: refresh.Body,
): Promise<refresh.Output> {
  const output: IAutoBeHackathonModerator.IAuthorized =
    await PlainFetcher.fetch(
      {
        ...connection,
        headers: {
          ...connection.headers,
          "Content-Type": "application/json",
        },
      },
      {
        ...refresh.METADATA,
        template: refresh.METADATA.path,
        path: refresh.path(hackathonCode),
      },
      body,
    );
  connection.headers ??= {};
  Object.assign(connection.headers, output.setHeaders);
  return output;
}
export namespace refresh {
  export type Body = IAutoBeHackathonModerator.IRefresh;
  export type Output = IAutoBeHackathonModerator.IAuthorized;

  export const METADATA = {
    method: "PATCH",
    path: "/autobe/hackathon/:hackathonCode/moderators/authenticate/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (hackathonCode: string) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/moderators/authenticate/refresh`;
}
