/**
 * @module api.functional.autobe.hackathon.participants.sessions
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IAutoBeHackathonSession, IPage } from "@autobe/hackathon-api";
import type { IAutoBeRpcListener, IAutoBeRpcService } from "@autobe/interface";
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Driver } from "tgrid";
import { WebSocketConnector } from "tgrid";
import type { Primitive, tags } from "typia";

/**
 * @controller AutoBeHackathonParticipantSessionController.index
 * @path PATCH /autobe/hackathon/:hackathonCode/participants/sessions
 * @accessor api.functional.autobe.hackathon.participants.sessions.index
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  hackathonCode: string,
  body: index.Body,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(hackathonCode),
    },
    body,
  );
}
export namespace index {
  export type Body = Primitive<IPage.IRequest>;
  export type Output = Primitive<IPage<IAutoBeHackathonSession.ISummary>>;

  export const METADATA = {
    method: "PATCH",
    path: "/autobe/hackathon/:hackathonCode/participants/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (hackathonCode: string) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/participants/sessions`;
}

/**
 * @controller AutoBeHackathonParticipantSessionController.at
 * @path GET /autobe/hackathon/:hackathonCode/participants/sessions/:id
 * @accessor api.functional.autobe.hackathon.participants.sessions.at
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  hackathonCode: string,
  id: string & tags.Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(hackathonCode, id),
  });
}
export namespace at {
  export type Output = Primitive<IAutoBeHackathonSession>;

  export const METADATA = {
    method: "GET",
    path: "/autobe/hackathon/:hackathonCode/participants/sessions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    hackathonCode: string,
    id: string & tags.Format<"uuid">,
  ) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/participants/sessions/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * @controller AutoBeHackathonParticipantSessionController.create
 * @path POST /autobe/hackathon/:hackathonCode/participants/sessions
 * @accessor api.functional.autobe.hackathon.participants.sessions.create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  hackathonCode: string,
  body: create.Body,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(hackathonCode),
    },
    body,
  );
}
export namespace create {
  export type Body = Primitive<IAutoBeHackathonSession.ICreate>;
  export type Output = Primitive<IAutoBeHackathonSession.ISummary>;

  export const METADATA = {
    method: "POST",
    path: "/autobe/hackathon/:hackathonCode/participants/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (hackathonCode: string) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/participants/sessions`;
}

/**
 * @controller AutoBeHackathonParticipantSessionController.update
 * @path PUT /autobe/hackathon/:hackathonCode/participants/sessions/:id
 * @accessor api.functional.autobe.hackathon.participants.sessions.update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  hackathonCode: string,
  id: string & tags.Format<"uuid">,
  body: update.Body,
): Promise<void> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(hackathonCode, id),
    },
    body,
  );
}
export namespace update {
  export type Body = Primitive<IAutoBeHackathonSession.IUpdate>;

  export const METADATA = {
    method: "PUT",
    path: "/autobe/hackathon/:hackathonCode/participants/sessions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    hackathonCode: string,
    id: string & tags.Format<"uuid">,
  ) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/participants/sessions/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * @controller AutoBeHackathonParticipantSessionController.review
 * @path PUT /autobe/hackathon/:hackathonCode/participants/sessions/:id/review
 * @accessor api.functional.autobe.hackathon.participants.sessions.review
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function review(
  connection: IConnection,
  hackathonCode: string,
  id: string & tags.Format<"uuid">,
  body: review.Body,
): Promise<void> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...review.METADATA,
      template: review.METADATA.path,
      path: review.path(hackathonCode, id),
    },
    body,
  );
}
export namespace review {
  export type Body = Primitive<IAutoBeHackathonSession.IReview>;

  export const METADATA = {
    method: "PUT",
    path: "/autobe/hackathon/:hackathonCode/participants/sessions/:id/review",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    hackathonCode: string,
    id: string & tags.Format<"uuid">,
  ) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/participants/sessions/${encodeURIComponent(id?.toString() ?? "null")}/review`;
}

/**
 * @controller AutoBeHackathonParticipantSessionSocketController.connect
 * @path /autobe/hackathon/:hackathonCode/participants/sessions/:id/connect
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function connect(
  connection: IConnection<connect.Header>,
  hackathonCode: string,
  id: string & tags.Format<"uuid">,
  provider: connect.Provider,
): Promise<connect.Output> {
  const connector: WebSocketConnector<
    connect.Header,
    connect.Provider,
    connect.Listener
  > = new WebSocketConnector(connection.headers ?? ({} as any), provider);
  await connector.connect(
    `${connection.host.endsWith("/") ? connection.host.substring(0, connection.host.length - 1) : connection.host}${connect.path(hackathonCode, id)}`,
  );
  const driver: Driver<connect.Listener> = connector.getDriver();
  return {
    connector,
    driver,
  };
}
export namespace connect {
  export type Output = {
    connector: WebSocketConnector<Header, Provider, Listener>;
    driver: Driver<Listener>;
  };
  export type Header = IAutoBeHackathonSession.IHeader;
  export type Provider = IAutoBeRpcListener;
  export type Listener = IAutoBeRpcService;

  export const path = (
    hackathonCode: string,
    id: string & tags.Format<"uuid">,
  ) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/participants/sessions/${encodeURIComponent(id?.toString() ?? "null")}/connect`;
}

/**
 * @controller AutoBeHackathonParticipantSessionSocketController.replay
 * @path /autobe/hackathon/:hackathonCode/participants/sessions/:id/replay
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function replay(
  connection: IConnection<replay.Header>,
  hackathonCode: string,
  id: string & tags.Format<"uuid">,
  provider: replay.Provider,
): Promise<replay.Output> {
  const connector: WebSocketConnector<
    replay.Header,
    replay.Provider,
    replay.Listener
  > = new WebSocketConnector(connection.headers ?? ({} as any), provider);
  await connector.connect(
    `${connection.host.endsWith("/") ? connection.host.substring(0, connection.host.length - 1) : connection.host}${replay.path(hackathonCode, id)}`,
  );
  const driver: Driver<replay.Listener> = connector.getDriver();
  return {
    connector,
    driver,
  };
}
export namespace replay {
  export type Output = {
    connector: WebSocketConnector<Header, Provider, Listener>;
    driver: Driver<Listener>;
  };
  export type Header = IAutoBeHackathonSession.IHeader;
  export type Provider = IAutoBeRpcListener;
  export type Listener = IAutoBeRpcService;

  export const path = (
    hackathonCode: string,
    id: string & tags.Format<"uuid">,
  ) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/participants/sessions/${encodeURIComponent(id?.toString() ?? "null")}/replay`;
}
