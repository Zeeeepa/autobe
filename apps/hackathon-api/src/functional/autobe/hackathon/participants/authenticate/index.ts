/**
 * @packageDocumentation
 * @module api.functional.autobe.hackathon.participants.authenticate
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IAutobeHackathonParticipant } from "@autobe/hackathon-api";
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive } from "typia";

/**
 * @controller AutoBeHackathonParticipantAuthenticateController.login
 * @path POST /autobe/hackathon/:hackathonCode/participants/authenticate/login
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function login(
  connection: IConnection,
  hackathonCode: string,
  body: login.Body,
): Promise<login.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...login.METADATA,
      template: login.METADATA.path,
      path: login.path(hackathonCode),
    },
    body,
  );
}
export namespace login {
  export type Body = Primitive<IAutobeHackathonParticipant.ILogin>;
  export type Output = Primitive<IAutobeHackathonParticipant.IAuthorized>;

  export const METADATA = {
    method: "POST",
    path: "/autobe/hackathon/:hackathonCode/participants/authenticate/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (hackathonCode: string) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/participants/authenticate/login`;
}

/**
 * @controller AutoBeHackathonParticipantAuthenticateController.refresh
 * @path PATCH /autobe/hackathon/:hackathonCode/participants/authenticate/refresh
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function refresh(
  connection: IConnection,
  hackathonCode: string,
  body: refresh.Body,
): Promise<refresh.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...refresh.METADATA,
      template: refresh.METADATA.path,
      path: refresh.path(hackathonCode),
    },
    body,
  );
}
export namespace refresh {
  export type Body = Primitive<IAutobeHackathonParticipant.IRefresh>;
  export type Output = Primitive<IAutobeHackathonParticipant.IAuthorized>;

  export const METADATA = {
    method: "PATCH",
    path: "/autobe/hackathon/:hackathonCode/participants/authenticate/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (hackathonCode: string) =>
    `/autobe/hackathon/${encodeURIComponent(hackathonCode?.toString() ?? "null")}/participants/authenticate/refresh`;
}
