{
  "src/api/structures/IShoppingSaleInquiryComment.ts": "import { tags } from \"typia\";\n\nimport { IShoppingAdministrator } from \"./IShoppingAdministrator\";\nimport { IShoppingCustomer } from \"./IShoppingCustomer\";\nimport { IShoppingSeller } from \"./IShoppingSeller\";\nimport { IBbsArticleComment } from \"./IBbsArticleComment\";\nimport { IAttachmentFile } from \"./IAttachmentFile\";\n\n/**\n * A comment written on an inquiry article.\n *\n * `IShoppingSaleInquiryComment` is a subtype entity of\n * {@link IBbsArticleComment}, and is used when you want to communicate with\n * multiple people about an {@link IShoppingSaleInquiry inquiry} written by a\n * {@link IShoppingCustomer customer}.\n *\n * For reference, only related parties can write comments for\n * {@link IShoppingSeller sellers}, but there is no limit to\n * {@link IShoppingCustomer customers}. In other words, anyone customer can\n * freely write a comment, even if they are not the person who wrote the\n * inquiry.\n *\n * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe\n */\nexport type IShoppingSaleInquiryComment = {\n  /**\n   * Writer of the comment.\n   *\n   * Both customer and seller can write comment on the sale inquiry.\n   *\n   * By the way, no restriction on the customer, but seller must be the person\n   * who've registered the sale.\n   *\n   * @title Writer of the comment\n   */\n  writer:\n    | IShoppingAdministrator.IInvert\n    | IShoppingCustomer\n    | IShoppingSeller.IInvert;\n\n  /**\n   * Primary Key.\n   *\n   * @title Primary Key\n   */\n  id: string & tags.Format<\"uuid\">;\n\n  /**\n   * Parent comment's ID.\n   *\n   * @title Parent comment's ID\n   */\n  parent_id: null | (string & tags.Format<\"uuid\">);\n\n  /**\n   * List of snapshot contents.\n   *\n   * It is created for the first time when a comment being created, and is\n   * accumulated every time the comment is modified.\n   *\n   * @title List of snapshot contents\n   */\n  snapshots: IBbsArticleComment.ISnapshot[] & tags.MinItems<1>;\n\n  /**\n   * Creation time of comment.\n   *\n   * @title Creation time of comment\n   */\n  created_at: string & tags.Format<\"date-time\">;\n};\nexport namespace IShoppingSaleInquiryComment {\n  /** Request of the comments with pagination and searching/sorting options. */\n  export type IRequest = {\n    search?: null | IShoppingSaleInquiryComment.IRequest.ISearch;\n    sort?: null | (\"-created_at\" | \"+created_at\")[];\n\n    /**\n     * Page number.\n     *\n     * @title Page number\n     */\n    page?: null | (number & tags.Type<\"int32\"> & tags.Minimum<0>);\n\n    /**\n     * Limitation of records per a page.\n     *\n     * @title Limitation of records per a page\n     */\n    limit?: null | (number & tags.Type<\"int32\"> & tags.Minimum<0>);\n  };\n  export namespace IRequest {\n    export type ISearch = {\n      name?: null | string;\n      nickname?: null | string;\n      body?: null | string;\n    };\n  }\n\n  /** Creation information of the comment. */\n  export type ICreate = {\n    /**\n     * Format of body.\n     *\n     * Same meaning with extension like `html`, `md`, `txt`.\n     *\n     * @title Format of body\n     */\n    format: \"html\" | \"md\" | \"txt\";\n\n    /**\n     * Content body of comment.\n     *\n     * @title Content body of comment\n     */\n    body: string;\n\n    /**\n     * List of attachment files.\n     *\n     * @title List of attachment files\n     */\n    files: IAttachmentFile.ICreate[];\n  };\n\n  /** Snapshot content of the comment. */\n  export type ISnapshot = {\n    /**\n     * Primary Key.\n     *\n     * @title Primary Key\n     */\n    id: string & tags.Format<\"uuid\">;\n\n    /**\n     * Creation time of snapshot record.\n     *\n     * In other words, creation time or update time or comment.\n     *\n     * @title Creation time of snapshot record\n     */\n    created_at: string & tags.Format<\"date-time\">;\n\n    /**\n     * Format of body.\n     *\n     * Same meaning with extension like `html`, `md`, `txt`.\n     *\n     * @title Format of body\n     */\n    format: \"html\" | \"md\" | \"txt\";\n\n    /**\n     * Content body of comment.\n     *\n     * @title Content body of comment\n     */\n    body: string;\n\n    /**\n     * List of attachment files.\n     *\n     * @title List of attachment files\n     */\n    files: IAttachmentFile.ICreate[];\n  };\n}\n",
  "test/features/api/review-comment/test_list_review_comments_for_inquiry.ts": "import { TestValidator } from \"@nestia/e2e\";\nimport api from \"@ORGANIZATION/PROJECT-api\";\nimport { IShoppingCartCommodity } from \"@ORGANIZATION/PROJECT-api/lib/structures/IShoppingCartCommodity\";\nimport { IShoppingCartCommodityStock } from \"@ORGANIZATION/PROJECT-api/lib/structures/IShoppingCartCommodityStock\";\nimport { IShoppingCartCommodityStockChoice } from \"@ORGANIZATION/PROJECT-api/lib/structures/IShoppingCartCommodityStockChoice\";\nimport { IShoppingOrder } from \"@ORGANIZATION/PROJECT-api/lib/structures/IShoppingOrder\";\nimport { IShoppingSaleReview } from \"@ORGANIZATION/PROJECT-api/lib/structures/IShoppingSaleReview\";\nimport { IShoppingSaleReview_ICreate } from \"@ORGANIZATION/PROJECT-api/lib/structures/IShoppingSaleReview\";\nimport { IShoppingSaleInquiryComment } from \"@ORGANIZATION/PROJECT-api/lib/structures/IShoppingSaleInquiryComment\";\nimport { IShoppingSaleInquiryComment_ICreate } from \"@ORGANIZATION/PROJECT-api/lib/structures/IShoppingSaleInquiryComment\";\nimport { IShoppingSaleInquiryComment_IRequest } from \"@ORGANIZATION/PROJECT-api/lib/structures/IShoppingSaleInquiryComment\";\nimport { IPageIShoppingSaleInquiryComment } from \"@ORGANIZATION/PROJECT-api/lib/structures/IPageIShoppingSaleInquiryComment\";\nimport typia from \"typia\";\n\nexport async function test_api_review_comment_list_patch(connection: api.IConnection): Promise<void> {\n  // 1. Create an order directly\n  const goodId = \"00000000-0000-4000-8000-000000000001\";\n  const saleId = \"00000000-0000-4000-8000-000000000002\";\n  const unitId = \"00000000-0000-4000-8000-000000000003\";\n  const stockId = \"00000000-0000-4000-8000-000000000004\";\n\n  const createOrderInput = {\n    sale_id: saleId,\n    stocks: [\n      {\n        unit_id: unitId,\n        stock_id: stockId,\n        choices: [] as IShoppingCartCommodityStockChoice.ICreate[],\n        quantity: 1,\n      },\n    ],\n    volume: 1,\n    accumulate: false,\n  };\n  const order: IShoppingOrder = await api.functional.shoppings.customers.orders.direct.post(\n    connection,\n    createOrderInput\n  );\n  typia.assert<IShoppingOrder>(order);\n  TestValidator.predicate(\"Order should contain goods\")(order.goods.length > 0);\n\n  // 2. Write a review article\n  const reviewInput: IShoppingSaleReview_ICreate = {\n    good_id: order.goods[0].id,\n    score: 95,\n    format: \"txt\",\n    title: \"Test Review Title\",\n    body: \"Test review content\",\n    files: [],\n  };\n  const review: IShoppingSaleReview = await api.functional.shoppings.customers.sales[\"{saleId}\"].reviews.post(\n    connection,\n    saleId,\n    reviewInput\n  );\n  typia.assert<IShoppingSaleReview>(review);\n\n  const inquiryId = review.id;\n\n  // 3. Check comment list initially empty\n  const req: IShoppingSaleInquiryComment_IRequest = {};\n  const listEmpty: IPageIShoppingSaleInquiryComment = await api.functional.shoppings.customers.sales[\"{saleId}\"].reviews[\"{inquiryId}\"].comments.patch(\n    connection,\n    saleId,\n    inquiryId,\n    req\n  );\n  typia.assert<IPageIShoppingSaleInquiryComment>(listEmpty);\n  TestValidator.equals(\"empty comment list\")([] as IShoppingSaleInquiryComment[])(listEmpty.data);\n\n  // 4. Register multiple comments\n  const commentInputs: IShoppingSaleInquiryComment_ICreate[] = [\n    {\n      format: \"txt\",\n      body: \"Comment #1\",\n      files: [],\n    },\n    {\n      format: \"txt\",\n      body: \"Comment #2\",\n      files: [],\n    },\n  ];\n  const comment1: IShoppingSaleInquiryComment = await api.functional.shoppings.customers.sales[\"{saleId}\"].reviews[\"{inquiryId}\"].comments.post(\n    connection,\n    saleId,\n    inquiryId,\n    commentInputs[0]\n  );\n  const comment2: IShoppingSaleInquiryComment = await api.functional.shoppings.customers.sales[\"{saleId}\"].reviews[\"{inquiryId}\"].comments.post(\n    connection,\n    saleId,\n    inquiryId,\n    commentInputs[1]\n  );\n  typia.assert<IShoppingSaleInquiryComment>(comment1);\n  typia.assert<IShoppingSaleInquiryComment>(comment2);\n\n  // 5. Fetch the comment list again\n  const listResult: IPageIShoppingSaleInquiryComment = await api.functional.shoppings.customers.sales[\"{saleId}\"].reviews[\"{inquiryId}\"].comments.patch(\n    connection,\n    saleId,\n    inquiryId,\n    req\n  );\n  typia.assert<IPageIShoppingSaleInquiryComment>(listResult);\n  TestValidator.predicate(\"comment list has all comments\")(() =>\n    listResult.data.some((c) => c.id === comment1.id) &&\n    listResult.data.some((c) => c.id === comment2.id)\n  );\n\n  // 6. Negative cases: invalid saleId and inquiryId\n  const fakeSaleId = \"00000000-0000-4000-8000-ffffffffffff\";\n  const fakeInquiryId = \"00000000-0000-4000-8000-eeeeeeeeeeee\";\n\n  await TestValidator.httpError(\"invalid saleId\")(404)(() =>\n    api.functional.shoppings.customers.sales[\"{saleId}\"].reviews[\"{inquiryId}\"].comments.patch(\n      connection,\n      fakeSaleId,\n      inquiryId,\n      req\n    )\n  );\n  await TestValidator.httpError(\"invalid inquiryId\")(404)(() =>\n    api.functional.shoppings.customers.sales[\"{saleId}\"].reviews[\"{inquiryId}\"].comments.patch(\n      connection,\n      saleId,\n      fakeInquiryId,\n      req\n    )\n  );\n}\n"
}