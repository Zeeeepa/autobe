[{"specification":"Retrieve a filtered and paginated list of todo list configurations. This operation operates on the todo_list_configurations table and supports searching, filtering, and sorting by name, creation date, or update date. The results are returned with pagination metadata to support large datasets.","path":"/todoList/todoListConfigurations","method":"patch","description":"Retrieve a filtered and paginated list of todo list configurations. This operation supports searching, filtering, and sorting by name, creation date, or update date. The results are returned with pagination metadata to support large datasets.\n\nThe operation integrates with the todo_list_configurations table as defined in the Prisma schema, utilizing database indexes on created_at and updated_at fields for optimal query performance. The implementation supports full-text search capabilities on the name field to enhance discoverability of configuration settings.\n\nThis operation requires admin authorization as configuration settings are system-level parameters that could impact application behavior. Only users with the admin role can access this endpoint to prevent unauthorized modification of system settings.","summary":"Search and retrieve paginated todo list configurations","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering configurations","typeName":"ITodoListConfiguration.IRequest"},"responseBody":{"description":"Paginated list of configuration summaries","typeName":"IPageITodoListConfiguration.ISummary"},"authorizationRole":"admin","name":"search"},{"specification":"Create a new configuration setting in the todo list application. This operation inserts a new record into the todo_list_configurations table with the provided name, value, and optional description. The id, created_at, and updated_at fields are automatically generated by the system.","path":"/todoList/todoListConfigurations","method":"post","description":"Create a new configuration setting in the todo list application. This operation inserts a new record into the todo_list_configurations table with the provided name, value, and optional description. The id, created_at, and updated_at fields are automatically generated by the system.\n\nThe configuration must have a unique name (business key) to prevent duplication. The value field can store various data types as strings, including numbers, booleans, or JSON objects. The operation corresponds directly to the todo_list_configurations table in the Prisma schema, with all fields except id, created_at, updated_at, and deleted_at being provided in the request.\n\nThis operation requires admin authorization as creating new configuration settings could potentially introduce security vulnerabilities or system instability. Only privileged administrative users should have the ability to modify system configurations.","summary":"Create a new todo list configuration","parameters":[],"requestBody":{"description":"Configuration data for creation","typeName":"ITodoListConfiguration.ICreate"},"responseBody":{"description":"Created configuration details","typeName":"ITodoListConfiguration"},"authorizationRole":"admin","name":"create"},{"specification":"Retrieve a specific configuration setting by its unique identifier. This operation fetches a single record from the todo_list_configurations table based on the provided id path parameter, returning the complete configuration details including name, value, description, and timestamps.","path":"/todoList/todoListConfigurations/{id}","method":"get","description":"Retrieve a specific configuration setting by its unique identifier. This operation fetches a single record from the todo_list_configurations table based on the provided id path parameter, returning the complete configuration details including name, value, description, and timestamps.\n\nThe id path parameter must be a valid UUID corresponding to an existing configuration record. The operation performs a direct lookup using the primary key index for optimal performance. This operation provides the full details of a configuration setting, complementing the search operation which returns summaries.\n\nAccess to configuration details is restricted to admin users only, as configuration values may contain sensitive information that could be exploited if exposed to unauthorized users. This ensures proper security boundary enforcement for system-level settings.","summary":"Get details of a specific todo list configuration","parameters":[{"name":"id","description":"Unique identifier of the configuration setting to retrieve","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Complete configuration details","typeName":"ITodoListConfiguration"},"authorizationRole":"admin","name":"at"},{"specification":"Update an existing configuration setting by its unique identifier. This operation modifies the name, value, and/or description fields of a record in the todo_list_configurations table. The updated_at timestamp is automatically updated to reflect the modification time.","path":"/todoList/todoListConfigurations/{id}","method":"put","description":"Update an existing configuration setting by its unique identifier. This operation modifies the name, value, and/or description fields of a record in the todo_list_configurations table. The updated_at timestamp is automatically updated to reflect the modification time.\n\nThe id path parameter must match an existing, non-deleted configuration record. The operation performs a full update of the specified fields, replacing their current values. The updated_at timestamp is automatically set to the current time, while the created_at timestamp remains unchanged from the original creation.\n\nConfiguration updates require admin privileges as they can alter system behavior and potentially introduce security risks. All update attempts are audited and require proper authorization to prevent unauthorized modifications to critical system parameters.","summary":"Update an existing todo list configuration","parameters":[{"name":"id","description":"Unique identifier of the configuration setting to update","schema":{"type":"string"}}],"requestBody":{"description":"Configuration data for update","typeName":"ITodoListConfiguration.IUpdate"},"responseBody":{"description":"Updated configuration details","typeName":"ITodoListConfiguration"},"authorizationRole":"admin","name":"update"},{"specification":"Delete a configuration setting by its unique identifier. This operation performs a soft delete by setting the deleted_at timestamp on the record in the todo_list_configurations table, rather than permanently removing it from the database.","path":"/todoList/todoListConfigurations/{id}","method":"delete","description":"Delete a configuration setting by its unique identifier. This operation performs a soft delete by setting the deleted_at timestamp on the record in the todo_list_configurations table, rather than permanently removing it from the database.\n\nThe id path parameter must correspond to an existing configuration record. The operation verifies the record exists and has not already been deleted before proceeding. Upon successful deletion, the deleted_at field is set to the current timestamp, and the record will no longer appear in standard queries or search results.\n\nDeletion of configuration settings is restricted to admin users only, as removing system configurations could destabilize the application. The soft delete approach allows for potential recovery of accidentally deleted settings within a defined retention period.","summary":"Soft delete a todo list configuration","parameters":[{"name":"id","description":"Unique identifier of the configuration setting to delete","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Retrieve a filtered and paginated list of todo list channels. This operation operates on the todo_list_channels table and supports searching by name or description, filtering by user, and sorting by creation date or name. The results are returned with pagination metadata.","path":"/todoList/todoListChannels","method":"patch","description":"Retrieve a filtered and paginated list of todo list channels. This operation operates on the todo_list_channels table and supports searching by name or description, filtering by user, and sorting by creation date or name. The results are returned with pagination metadata.\n\nThe operation utilizes database indexes on created_at, updated_at, todo_list_user_id, and the GIN indexes on name and description for efficient text search. The implementation supports trigram-based similarity searches to enhance result relevance when users make spelling mistakes.\n\nAccess to channel discovery requires authenticated user access to prevent unauthorized scraping of channel information. This ensures that only legitimate users can search for and discover channels within the application.","summary":"Search and retrieve paginated todo list channels","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering channels","typeName":"ITodoListChannel.IRequest"},"responseBody":{"description":"Paginated list of channel summaries","typeName":"IPageITodoListChannel.ISummary"},"authorizationRole":"user","name":"search"},{"specification":"Create a new todo list channel. This operation inserts a new record into the todo_list_channels table with the provided details, associating it with the authenticated user. The id, code, created_at, and updated_at fields are automatically generated by the system.","path":"/todoList/todoListChannels","method":"post","description":"Create a new todo list channel. This operation inserts a new record into the todo_list_channels table with the provided details, associating it with the authenticated user. The id, code, created_at, and updated_at fields are automatically generated by the system.\n\nThe channel is automatically associated with the authenticated user as the owner. The system generates a unique code identifier for sharing and API access, along with a UUID for the primary key. This operation corresponds to the todo_list_channels table in the Prisma schema, with the todo_list_user_id field populated from the authenticated user context.\n\nChannel creation requires authenticated user access to prevent abuse and spam. Each user can create channels within the system, which are then owned by that user and can be shared with others as needed.","summary":"Create a new todo list channel","parameters":[],"requestBody":{"description":"Channel data for creation","typeName":"ITodoListChannel.ICreate"},"responseBody":{"description":"Created channel details","typeName":"ITodoListChannel"},"authorizationRole":"user","name":"create"},{"specification":"Retrieve a specific channel by its unique identifier. This operation fetches a single record from the todo_list_channels table based on the provided id path parameter, returning the complete channel details.","path":"/todoList/todoListChannels/{id}","method":"get","description":"Retrieve a specific channel by its unique identifier. This operation fetches a single record from the todo_list_channels table based on the provided id path parameter, returning the channel details such as name, description, color, icon, and timestamps.\n\nThe id path parameter must be a valid UUID corresponding to an existing channel record. The operation performs a direct lookup using the primary key index for optimal performance. Access to channel details requires authenticated user access to prevent unauthorized enumeration of channel information.\n\nFor privacy reasons, the response does not include the todo_list_user_id field that identifies the channel owner. This prevents potential discovery of user relationships and channel ownership patterns within the system.","summary":"Get details of a specific todo list channel","parameters":[{"name":"id","description":"Unique identifier of the channel to retrieve","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Channel details without owner information","typeName":"ITodoListChannel.ISummary"},"authorizationRole":"user","name":"at"},{"specification":"Update an existing channel by its unique identifier. This operation modifies the name, description, color, and/or icon fields of a record in the todo_list_channels table. The updated_at timestamp is automatically updated.","path":"/todoList/todoListChannels/{id}","method":"put","description":"Update an existing channel by its unique identifier. This operation modifies the name, description, color, and/or icon fields of a record in the todo_list_channels table. The updated_at timestamp is automatically updated to reflect the modification time.\n\nThe id path parameter must match an existing, non-deleted channel record. The operation performs a full update of the specified fields, replacing their current values. The updated_at timestamp is automatically set to the current time.\n\nChannel updates require authenticated user access and additional validation to ensure the user owns the channel being modified. This prevents unauthorized modification of channels owned by other users.","summary":"Update an existing todo list channel","parameters":[{"name":"id","description":"Unique identifier of the channel to update","schema":{"type":"string"}}],"requestBody":{"description":"Channel data for update","typeName":"ITodoListChannel.IUpdate"},"responseBody":{"description":"Updated channel details without owner information","typeName":"ITodoListChannel.ISummary"},"authorizationRole":"user","name":"update"},{"specification":"Delete a channel by its unique identifier. This operation performs a soft delete by setting the deleted_at timestamp on the record in the todo_list_channels table.","path":"/todoList/todoListChannels/{id}","method":"delete","description":"Delete a channel by its unique identifier. This operation performs a soft delete by setting the deleted_at timestamp on the record in the todo_list_channels table, rather than permanently removing it from the database.\n\nThe id path parameter must correspond to an existing channel record. The operation verifies the record exists, is not already deleted, and is owned by the authenticated user before proceeding. Upon successful deletion, the deleted_at field is set to the current timestamp, and the channel will no longer appear in standard queries or search results.\n\nChannel deletion requires authenticated user access and ownership verification to prevent unauthorized removal of channels created by other users. The soft delete approach allows for potential recovery of accidentally deleted channels within a retention period.","summary":"Soft delete a todo list channel","parameters":[{"name":"id","description":"Unique identifier of the channel to delete","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"authorizationRole":"user","name":"erase"},{"authorizationRoles":["user"],"description":"Retrieve a specific todo list channel by its unique identifier. This operation fetches complete channel information including its metadata, creation details, and relationship to the user who created it.\n\nThe operation requires authentication and verifies that the requesting user has appropriate access to the channel. Access control ensures users can only retrieve channels they own or have been explicitly granted access to through sharing mechanisms.\n\nThis operation directly queries the todo_list_channels table as defined in the Prisma schema, returning all defined fields except relational data. The response includes core channel attributes such as name, description, visual properties (color, icon), and timestamps (created_at, updated_at, deleted_at).\n\nSecurity considerations include validating the UUID format of the id parameter to prevent injection attacks and ensuring proper error handling for non-existent or unauthorized channels. The operation should return appropriate HTTP status codes: 200 for successful retrieval, 404 for non-existent channels, and 403 for unauthorized access attempts.\n\nRelated operations include PATCH /todoListChannels for searching channels and POST /todoListChannels for creating new channels. This GET operation is typically used after searching to retrieve detailed information about a specific channel of interest.","specification":"This operation retrieves a specific todo list channel entity from the database using its unique identifier. It operates on the todo_list_channels table from the Prisma schema and returns the complete channel record with all its attributes. The operation implements proper authentication and authorization checks to ensure data privacy and security.","summary":"Retrieve a specific todo list channel by ID","path":"/todoList/channels/{id}","parameters":[{"name":"id","description":"Unique identifier of the target channel","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Requested channel information","typeName":"ITodoListChannels"},"name":"at","method":"get","authorizationRole":"user"},{"authorizationRoles":["user"],"description":"Update an existing todo list channel with new information. This operation modifies the specified channel's attributes such as name, description, color, and icon based on the provided update data.\n\nThe operation first verifies that the requesting user has ownership or appropriate permissions to modify the channel. It retrieves the existing channel record from the todo_list_channels table and applies the updates only to the fields provided in the request body, leaving unspecified fields unchanged.\n\nBusiness logic includes validating that the channel name remains unique within the user's channels and that the provided color (if specified) is a valid hex color code. The operation automatically updates the updated_at timestamp to reflect the modification time.\n\nThe implementation handles soft deletion semantics by preserving the deleted_at field if the channel was previously soft-deleted. Users cannot modify system-managed fields such as id, todo_list_user_id, created_at, or deleted_at through this interface.\n\nError handling includes returning appropriate HTTP status codes: 200 for successful updates, 400 for validation errors (e.g., invalid color format), 403 for unauthorized modification attempts, and 404 for non-existent channels. The operation ensures data consistency by using database transactions for the update operation.\n\nThis operation is typically used after creating a channel to refine its properties or when users want to reorganize their task management structure by updating channel metadata.","specification":"This operation updates an existing todo list channel record in the database. It operates on the todo_list_channels table from the Prisma schema and modifies the specified fields while preserving unchanged fields. The operation implements ownership verification and returns the updated channel record.","summary":"Update an existing todo list channel","path":"/todoList/channels/{id}","parameters":[{"name":"id","description":"Unique identifier of the target channel","schema":{"type":"string"}}],"requestBody":{"description":"Channel update information","typeName":"ITodoListChannels.IUpdate"},"responseBody":{"description":"Updated channel information","typeName":"ITodoListChannels"},"name":"update","method":"put","authorizationRole":"user"},{"authorizationRoles":["user"],"description":"Delete a todo list channel by its unique identifier. This operation removes the specified channel from active use by setting its deleted_at timestamp, implementing soft delete semantics as defined in the Prisma schema.\n\nThe operation first verifies that the requesting user has ownership or appropriate permissions to delete the channel. It locates the channel record in the todo_list_channels table and updates the deleted_at field with the current timestamp, preserving all other data for potential recovery.\n\nSoft delete implementation allows for future restoration of accidentally deleted channels and maintains referential integrity with related data. The operation does not permanently remove the record from the database, ensuring data consistency and audit trail preservation.\n\nSecurity considerations include preventing unauthorized deletion attempts and validating the UUID format of the id parameter. The operation should return appropriate HTTP status codes: 204 for successful deletion, 403 for unauthorized attempts, and 404 for non-existent channels.\n\nRelated operations include GET /todoListChannels/{id} for retrieving channel details before deletion and potential future operations for restoring soft-deleted channels. This delete operation is typically used when users want to clean up their channel organization or remove obsolete categories.\n\nThe operation ensures data integrity by executing within a database transaction and may include validation to prevent deletion of channels that contain active todo items, depending on application business rules.","specification":"This operation soft deletes a todo list channel by setting its deleted_at timestamp. It operates on the todo_list_channels table from the Prisma schema and preserves the record for potential recovery while removing it from normal queries.","summary":"Delete a todo list channel (soft delete)","path":"/todoList/channels/{id}","parameters":[{"name":"id","description":"Unique identifier of the target channel","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"name":"erase","method":"delete","authorizationRole":"user"},{"authorizationRoles":["user"],"description":"Search and retrieve a filtered, paginated list of users in the todo list application. This operation supports complex queries to find users based on various criteria such as name, email, registration date, and account status.\n\nThe operation requires authentication to prevent user enumeration attacks. It provides comprehensive pagination with configurable page sizes and sorting options. Users can sort by registration date, last activity, name, or other relevant fields in ascending or descending order.\n\nSecurity considerations include rate limiting for search operations and appropriate filtering of sensitive user information based on the requesting user's authorization level. Only authenticated users can search for other users, preventing public access to user data.\n\nThis operation integrates with the todo_list_user table as defined in the Prisma schema, incorporating all available user fields and relationships. The response includes user summary information optimized for list displays, with options to include additional details based on authorization level.\n\nThe operation supports advanced search capabilities through the request body, allowing for complex filtering with AND/OR conditions, range queries, and text search with fuzzy matching. Search results are returned in a standardized paginated format that includes metadata about the total count and pagination state.\n\nError handling includes validation of search parameters and appropriate HTTP status codes for various scenarios: 200 for successful searches, 400 for invalid search criteria, and 500 for server errors during complex query execution.","specification":"This operation retrieves a filtered and paginated list of todo list users with advanced searching, filtering, and sorting capabilities. It operates on the todo_list_user table from the Prisma schema and supports complex queries to find users based on multiple criteria. Authentication is required to access this endpoint.","summary":"Search and retrieve a filtered, paginated list of users","path":"/todoList/users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for user filtering","typeName":"ITodoListUser.IRequest"},"responseBody":{"description":"Paginated list of user summary information matching search criteria","typeName":"IPageITodoListUser.ISummary"},"name":"search","method":"patch","authorizationRole":"user"},{"authorizationRoles":["user"],"description":"Retrieve detailed information about a specific user by their unique identifier. This operation fetches complete user profile information from the system.\n\nThe operation requires authentication and may implement additional authorization checks to ensure privacy. While basic user information might be accessible to other users in certain contexts, sensitive details are only available to the user themselves or administrators.\n\nThis operation directly queries the todo_list_user table as defined in the Prisma schema, returning all defined fields. The response includes core user attributes such as identification, creation details, and timestamps (created_at, updated_at, deleted_at).\n\nSecurity considerations include validating the UUID format of the userId parameter to prevent injection attacks and ensuring proper error handling for non-existent or unauthorized users. The operation should return appropriate HTTP status codes: 200 for successful retrieval, 404 for non-existent users, and 403 for unauthorized access attempts.\n\nThe operation may include related data based on the user's authorization level, such as their owned channels (todo_list_channels) or other associated entities. This is particularly relevant for administrative users viewing other users' information.\n\nRelated operations include PATCH /users for searching users and PUT /users/{userId} for updating user information. This GET operation is typically used to view user profiles, check account status, or retrieve user details for collaboration features.","specification":"This operation retrieves a specific user entity from the database using their unique identifier. It operates on the todo_list_user table from the Prisma schema and returns the complete user record with all its attributes. The operation implements proper authentication and may include authorization checks based on user roles.","summary":"Retrieve detailed information about a specific user","path":"/todoList/users/{userId}","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Requested user information","typeName":"ITodoListUser"},"name":"at","method":"get","authorizationRole":"user"},{"authorizationRoles":["user"],"description":"Update an existing user's profile information. This operation modifies the specified user's attributes based on the provided update data.\n\nThe operation first verifies that the requesting user has permission to modify the target user profile. Typically, users can only update their own profile, while administrators may update any user. It retrieves the existing user record from the todo_list_user table and applies the updates only to the fields provided in the request body.\n\nBusiness logic includes validating any updated fields according to their constraints and ensuring data consistency. The operation automatically updates the updated_at timestamp to reflect the modification time.\n\nThe implementation handles soft deletion semantics by preserving the deleted_at field if the user was previously soft-deleted. Users cannot modify system-managed fields such as id, created_at, or deleted_at through this interface.\n\nError handling includes returning appropriate HTTP status codes: 200 for successful updates, 400 for validation errors, 403 for unauthorized modification attempts, and 404 for non-existent users. The operation ensures data consistency by using database transactions for the update operation.\n\nThis operation is typically used when users want to update their profile information, change account settings, or administrators need to modify user details for management purposes.","specification":"This operation updates an existing user record in the database. It operates on the todo_list_user table from the Prisma schema and modifies the specified fields while preserving unchanged fields. The operation implements permission verification and returns the updated user record.","summary":"Update an existing user's profile","path":"/todoList/users/{userId}","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string"}}],"requestBody":{"description":"User profile update information","typeName":"ITodoListUser.IUpdate"},"responseBody":{"description":"Updated user information","typeName":"ITodoListUser"},"name":"update","method":"put","authorizationRole":"user"},{"authorizationRoles":["user"],"description":"Delete a user account by its unique identifier. This operation removes the specified user from active use by setting its deleted_at timestamp, implementing soft delete semantics as defined in the Prisma schema.\n\nThe operation first verifies that the requesting user has appropriate permissions to delete the target account. Users can typically only delete their own account, while administrators may delete any user. It locates the user record in the todo_list_user table and updates the deleted_at field with the current timestamp.\n\nSoft delete implementation allows for future restoration of accidentally deleted accounts and maintains referential integrity with related data such as owned channels. The operation does not permanently remove the record from the database, ensuring data consistency and audit trail preservation.\n\nSecurity considerations include preventing unauthorized deletion attempts and validating the UUID format of the userId parameter. The operation should return appropriate HTTP status codes: 204 for successful deletion, 403 for unauthorized attempts, and 404 for non-existent users.\n\nBefore deletion, the operation may include validation checks to handle related data, such as transferring ownership of user-owned channels or archiving associated todo items, depending on application business rules. This ensures data integrity across the system.\n\nThe operation ensures data consistency by executing within a database transaction and may trigger cleanup processes for related resources that are no longer accessible after the user's deletion.","specification":"This operation soft deletes a user account by setting its deleted_at timestamp. It operates on the todo_list_user table from the Prisma schema and preserves the record for potential recovery while removing it from normal queries.","summary":"Delete a user account (soft delete)","path":"/todoList/users/{userId}","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"name":"erase","method":"delete","authorizationRole":"user"},{"specification":"This API operation allows a new user to register an account in the todo list application. It creates a new record in the todo_list_user table with the provided information. This endpoint is the entry point for new users to join the system and is associated with the todo_list_user table in the Prisma DB schema.","description":"The registration endpoint allows new users to create an account in the todo list application by providing their authentication credentials and personal information. This operation creates a new record in the todo_list_user table with timestamp information for creation and initial update.\n\nSecurity considerations include password hashing before storage and protection against common attacks like brute force attempts and enumeration attacks. The endpoint should implement rate limiting and input validation to prevent abuse.\n\nThis operation directly creates a new user entity in the todo_list_user table, which serves as the foundation for all user-related operations in the application. The user ID generated here becomes the primary key for establishing relationships with other entities like todo lists, channels, and configurations.\n\nThe registration process follows standard application flow where users first sign up, then verify their identity (if email verification is implemented), and finally sign in to access the application. This endpoint should return success indicators without revealing whether an email/username is already registered to prevent user enumeration.\n\nAfter successful registration, the client should receive authentication tokens to maintain the user's session, allowing immediate access to authenticated features without requiring a separate login step.","summary":"Register a new user account","parameters":[],"requestBody":{"description":"User registration information","typeName":"ITodoListUser.ICreate"},"responseBody":{"description":"Registration result with authentication tokens","typeName":"ITodoListUser"},"authorizationRole":null,"name":"signUp","path":"/auth/user/register","method":"post"},{"specification":"This API operation authenticates an existing user by validating their credentials and issuing JWT tokens for subsequent requests. It verifies the user's identity against the todo_list_user table and returns authentication tokens. This endpoint is associated with the todo_list_user table in the Prisma DB schema.","description":"The login endpoint authenticates existing users by verifying their credentials against the stored information in the todo_list_user table. Upon successful authentication, the system issues JWT tokens that the client can use for subsequent authorized requests to protected endpoints.\n\nSecurity is paramount for this operation, requiring secure transmission (HTTPS), protection against brute force attacks through rate limiting, and proper handling of authentication failures without revealing whether the username or password was incorrect to prevent account enumeration.\n\nThis operation validates credentials against the todo_list_user entity and, upon success, generates time-limited JWT tokens for session management. The tokens contain user identification and authorization information that will be validated by authentication middleware on subsequent requests.\n\nThe authentication process follows industry standards for token-based authentication, ensuring that sensitive operations require valid tokens. The system should also monitor for suspicious login patterns and potentially implement multi-factor authentication for enhanced security.\n\nRelated operations include token refresh (to extend session duration without re-entering credentials) and logout (to invalidate tokens). Failed login attempts should be logged for security monitoring while ensuring user privacy.","summary":"Authenticate user and return JWT tokens","parameters":[],"requestBody":{"description":"User login credentials","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Authentication result with JWT tokens","typeName":"ITodoListUser"},"authorizationRole":null,"name":"signIn","path":"/auth/user/login","method":"post"},{"specification":"This API operation validates an existing JWT token to determine if it is still valid and hasn't been revoked. It checks the token's signature, expiration, and validity against the current system state. This endpoint is associated with the todo_list_user table in the Prisma DB schema.","description":"The token validation endpoint allows clients to verify the validity of a JWT token without requiring a full authentication process. This is useful for client-side applications to determine if a stored token is still valid before making protected API calls, improving user experience by avoiding failed requests due to expired tokens.\n\nSecurity considerations include checking the token's digital signature to ensure it hasn't been tampered with, validating the expiration timestamp to prevent use of expired tokens, and potentially checking against a revocation list if the system implements token invalidation.\n\nThis operation interacts with the authentication system that is tied to the todo_list_user entity. While the token itself contains encoded user information, this validation ensures the token remains trustworthy according to the current security policies of the system.\n\nThe response typically includes information about the token's validity period, the associated user, and potentially refreshed claims if the system implements token refresh during validation. This helps clients make informed decisions about when to request a new token.\n\nRelated operations include the login endpoint (which issues new tokens) and the token refresh endpoint (which extends the validity of existing tokens). This validation process is typically performed by authentication middleware on protected routes as well.","summary":"Validate JWT token and return authentication status","parameters":[],"requestBody":{"description":"Token to validate","typeName":"ITokenValidationRequest"},"responseBody":{"description":"Token validation result","typeName":"ITokenValidationResponse"},"authorizationRole":null,"name":"validateToken","path":"/auth/user/validate","method":"post"},{"specification":"This API operation allows an authenticated user to change their password. It requires the user to provide their current password for verification before accepting the new password. This endpoint updates the user's authentication credentials in the todo_list_user table. This operation is associated with the todo_list_user table in the Prisma DB schema.","description":"The change password endpoint enables authenticated users to update their account password for security purposes. The operation requires the user to provide their current password to verify their identity before accepting the new password, preventing unauthorized password changes even if an attacker gains limited access to the user's session.\n\nSecurity considerations are critical for this operation, including requiring the current password, enforcing strong password policies for the new password, automatically invalidating existing tokens after password change, and sending security notifications to the user's registered contact method.\n\nThis operation modifies the authentication credentials associated with the todo_list_user entity. While the Prisma schema doesn't explicitly show a password field, it's implied as a fundamental requirement for authentication. The system should hash the new password using a secure algorithm (like bcrypt) before storing it.\n\nAfter successfully changing the password, the system should invalidate all active sessions for that user to ensure that potentially compromised sessions are terminated. This enhances security by requiring re-authentication with the new password.\n\nRelated operations include the password reset flow (for when users forget their password) and account recovery processes. This change password operation is part of maintaining good security hygiene by allowing users to periodically update their credentials.","summary":"Change user password with current password verification","parameters":[],"requestBody":{"description":"Password change information including current and new password","typeName":"IChangePasswordRequest"},"responseBody":{"description":"Password change result","typeName":"IChangePasswordResponse"},"authorizationRole":"user","name":"changePassword","path":"/auth/user/password","method":"put"}]