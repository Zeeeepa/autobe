[{"specification":"This operation enables authenticated users—each identified as a 'basicUser' in the todolist_basicusers table—to query their list of todo items with advanced filtering, sorting, and pagination. The underlying todolist_todos table supports fields for title, optional description, completed status, due date, and timestamps (created_at, updated_at, completed_at, deleted_at for soft delete). Filtering includes querying by completion state, due date, title partial match, and exclusion of soft-deleted items. Results are paginated for usability, allowing users to see their latest todos first. Only the authenticated user's own todos are ever returned by business rule.","description":"Retrieve a customized list of the authenticated user's personal todos, supporting advanced search, status filtering (completed/incomplete), due date filtering, and title text search. Results are limited strictly to the current user's own todos as ownership is enforced at all steps. Pagination and sort order (typically created_at descending) ensures user can navigate large sets efficiently. Security is paramount: any attempts to query another user's todos are denied. Soft-deleted records are excluded by default. Validation rules ensure input criteria is within business-accepted limits (e.g., not exceeding allowed page size). Business rules are implemented according to strict privacy, ownership, and security principles—see the todolist_todos and todolist_basicusers schema comments for further details. Error handling includes validation for query constraints and forbidden access attempts.","summary":"Search and retrieve a filtered, paginated list of the user's todos from todolist_todos.","parameters":[],"requestBody":{"description":"Advanced search/filtering and pagination request for user's todo items.","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated list of matching todos belonging to the authenticated user, does not include soft-deleted records.","typeName":"IPageITodoListTodo"},"authorizationRole":"basicUser","name":"search","path":"/todoList/basicUser/todos","method":"patch"},{"specification":"This operation retrieves the detailed information for a single todo, identified by its unique ID, only if it is owned by the authenticated user. The operation queries the underlying todolist_todos table, returning all available fields—including title, description, completion status, due date, and timestamps (created_at, updated_at, completed_at, deleted_at). Ownership is strictly enforced by matching the authenticated user's ID to the todolist_basicuser_id foreign key. Business rules prevent access to todos not owned by the user; a 403 forbidden or 404 not found is returned where a mismatch exists or record is absent. Soft-deleted items (deleted_at set) are also protected and not visible to the user.","description":"Fetch the complete information of a specific todo item belonging to the authenticated user, identified by the unique todoId. The response will include all business fields on the todo (title, description, completion status, due date, all timestamps). Access is permitted only for the user's own todos; attempts to access others' todos return forbidden or not found errors without information leak. Soft-deleted todos are not displayed; only non-deleted, owned todos are visible. Input is validated to ensure the todoId is a well-formed UUID and error handling covers both not found and not owned cases based on business rules from todolist_todos and todolist_basicusers schema.","summary":"Get detailed information of an owned todo from todolist_todos by ID.","parameters":[{"name":"todoId","description":"Unique identifier (UUID) of the target todo item to retrieve. Must reference a todo owned by the authenticated user.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed representation of the requested todo on success.","typeName":"ITodoListTodo"},"authorizationRole":"basicUser","name":"at","path":"/todoList/basicUser/todos/{todoId}","method":"get"},{"specification":"This endpoint creates a new todo item for the authenticated user, inserting a row into the todolist_todos table. Business rules require the title (1–255 chars, not all whitespace), optional description (up to 2000 chars), optional due_date (must be current or future), and all system-generated timestamps (created_at, updated_at) set in UTC. Completion status must default to false; completed and completed_at may not be provided at creation. Ownership is enforced via the authenticated user's ID; user cannot create todos for others or specify owner manually. Quotas (e.g., maximum 100 active todos) and all validation rules are checked. Soft-delete mechanics are supported after creation but not at create time. On success, the full todo record is returned as confirmation.","description":"Create a new todo item for the current user, supplying title (required), optional description, and optional due date. The todo is created in an incomplete/open state by business rule and all timestamps are handled server-side. Ownership is automatically assigned to the creator and no cross-user creation is allowed. Validation ensures all fields meet business and schema constraints (title presence and length, due_date in future, description length). Soft-delete fields (deleted_at) remain null at creation. The returned object provides all fields populated. Errors may result if quota is exceeded, required fields are missing/invalid, or unauthorized create attempts are made. Operations implement business rules and field constraints per the todolist_todos schema.","summary":"Create a new user-owned todo item (insert into todolist_todos).","parameters":[],"requestBody":{"description":"Todo creation payload: includes title (required), optional description, and optional future due_date.","typeName":"ITodoListTodo.ICreate"},"responseBody":{"description":"Full todo record after creation, reflecting all assigned business/system fields.","typeName":"ITodoListTodo"},"authorizationRole":"basicUser","name":"create","path":"/todoList/basicUser/todos","method":"post"},{"specification":"This operation updates fields on a specific todo (by todoId), but only if owned by the authenticated user. It updates the existing record in todolist_todos, supporting mutations to title (1–255 chars), description (optional, ≤2000 chars), due_date (optional, must not be past), as well as completed status. If the completed field transitions from false to true (open to completed), completed_at is set to the current timestamp. If changing from true to false, completed_at is cleared. The update also always refreshes updated_at. All fields/updates are validated per todolist_todos schema and business rules, including permission checks. Soft-deleted todos (deleted_at not null) cannot be updated. Returns the updated todo or error codes (ownership, validation, or not found issues).","description":"Modify the fields of an existing todo controlled by the authenticated user. Permitted fields for update include title, description, due_date, and completed status. Business rules enforce string length, due date validity, and status transitions (toggle completed/incomplete with timestamp changes). Requests operate only on non-soft-deleted todos; forbidden if the record is not owned by the user or no longer exists. The endpoint always updates updated_at and, if completed status changes, also updates completed_at accordingly. Ownership enforcement, field validation, and update audit are driven by the underlying todolist_todos and todolist_basicusers schema. Comprehensive error handling for invalid, unauthorized, or blocked actions.","summary":"Update single owned todo item in todolist_todos by ID.","parameters":[{"name":"todoId","description":"Unique identifier (UUID) of the todo to update. Must reference a todo owned by the user.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified todo: permitted fields are title, description, due_date, and completed status.","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"Updated todo record with all new and unchanged fields after update.","typeName":"ITodoListTodo"},"authorizationRole":"basicUser","name":"update","path":"/todoList/basicUser/todos/{todoId}","method":"put"},{"specification":"This operation will soft-delete a user's own todo by setting its deleted_at field to the current UTC timestamp. The operation affects only a single todoId that must be owned by the current authenticated user, referencing todolist_todos. The item must not be already soft-deleted. Hard-deletes are not used; deleted_at null means active, non-null means logically deleted/hidden. Actual row remains for business retention/compliance. All access is denied to deleted todos for future operations. Non-owners, not-found, or already-deleted cases return 404/forbidden errors. Ownership and authorization are enforced before deletion; operation is auditable and covered by business logic for user deletion and privacy. Only authenticated 'basicUser' role is permitted to operate this endpoint.","description":"Perform a logical (soft) delete on a specific todo item owned by the authenticated user by setting its deleted_at field to the current timestamp. Post-deletion, the todo is hidden from all user queries and cannot be recovered through normal means. Actual row is retained for compliance purposes as per business logic. Only non-deleted, owned todos can be deleted; any attempt to delete another user's todo or a previously soft-deleted todo results in forbidden/not found errors. Strict permission checking and field validation are conducted in accordance with todolist_todos and todolist_basicusers schema. Error scenarios are clearly handled and all changes are properly recorded for audit and privacy retention.","summary":"Soft-delete an owned todo item by marking deleted_at in todolist_todos.","parameters":[{"name":"todoId","description":"Unique identifier (UUID) of the todo item to be soft-deleted. Must belong to the user, not already deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"basicUser","name":"erase","path":"/todoList/basicUser/todos/{todoId}","method":"delete"},{"specification":"Registration — Creates a new basicUser account in the system using unique email and password, as enforced by todolist_basicusers table in the Prisma schema. The operation expects valid email (must be unique, format-checked) and password (minimum requirements must be verified; the password_hash will be securely generated and stored for this user). If email is already present, registration is forbidden. Upon success, returns the newly created user and sets the JWT Authorization header. The response includes a setHeaders property to provide the issued JWT token. All registration/audit fields (created_at, updated_at) are handled, lockout and deletion fields are left null. This operation is critical for onboarding and required by business rules; it does not require authentication.","description":"This endpoint enables new users to register for the service. It maps directly to the todolist_basicusers table's email (unique, required) and password_hash (required) columns, enforcing all business and technical constraints documented in the database schema. The registration process includes email uniqueness enforcement, password strength checks, creation of audit fields (created_at, updated_at), and initial account state (locked_until and deleted_at null, signifying an active account). The password supplied is hashed and stored only in password_hash, never as plaintext.\n\nJWT access token is generated upon successful registration and is returned in the setHeaders field ({ Authorization: string }) to allow the new user to begin an authenticated session immediately after sign-up. This aligns with privacy and audit requirements, and reduces onboarding friction.\n\nNo permissions are needed to access this endpoint, making it a public operation, but registration is locked out by business rules if email already exists or the user's previous account is still under lockout (locked_until in the future).\n\nSecurity: No rate limits or email verification required by schema, but duplicate suppression and weak password rejection are strictly enforced. All error cases (duplicate, invalid, weak) return explicit error messages. Related operations: signIn, validateToken.\n\nThis workflow is essential for user onboarding and is the first step for any workflow under the basicUser role. ","summary":"Register a new basicUser account (todolist_basicusers table).","parameters":[],"requestBody":{"description":"Registration form: new user email and password.","typeName":"IBasicUserAuth.ISignUp"},"responseBody":{"description":"Account details and issued authentication token (setHeaders field with JWT).","typeName":"IBasicUserAuth.ISignUpResult"},"authorizationRole":null,"name":"signUp","path":"/auth/basicUser/register","method":"post"},{"specification":"Login — Authenticates a basicUser using email and password, as defined in the todolist_basicusers table (email, password_hash fields). Compares supplied password against hashed value stored in DB. If credentials are correct, issues a new JWT access token. Handles account lockout state by checking the locked_until field. On success, returns authentication result including issued tokens; on failure, returns informative error for invalid credentials or lockout. Audit and lifecycle fields are updated on successful login (updated_at). No authentication is required for login endpoint access.","description":"This endpoint authenticates an existing user by verifying email (must exist in todolist_basicusers, case-insensitive) and password (supplied value compared after hashing to DB's password_hash). Handles all lockout and lifecycle fields as required by authentication business rules: rejects login when locked_until is set in the future, allows login if lockout elapsed. Sets auditing updated_at on successful login. No password hash is ever returned to the client for security.\n\nJWT access token is generated and returned for successful authentication, in accordance with session management requirements for basicUser role. Access is denied for missing, invalid, or non-matching email/password combination, and for accounts currently suspended by lockout policy.\n\nAll error cases are explicit and reference the existence of relevant DB fields (email, password_hash, locked_until). Login does NOT activate or change locked_until if successful; failed attempts SHOULD update locked_until in business logic if max failures are tracked externally.\n\nIntegrates with registration, password change, and password reset flows. It is the entry point for session creation and is required for all further authenticated operations.","summary":"Authenticate basicUser and issue JWT token (todolist_basicusers table).","parameters":[],"requestBody":{"description":"Login credentials: email and password.","typeName":"IBasicUserAuth.ISignIn"},"responseBody":{"description":"Authentication result, JWT issued if successful.","typeName":"IBasicUserAuth.ISignInResult"},"authorizationRole":null,"name":"signIn","path":"/auth/basicUser/login","method":"post"},{"specification":"Logout — Invalidates the currently authenticated session for a basicUser. Accesses session state by JWT (not DB); does not alter todolist_basicusers fields but ensures the supplied token is no longer accepted for subsequent requests. Only available to authenticated users with a valid JWT.","description":"This operation ends the user's authenticated session. Token invalidation is managed in the JWT/session layer; user-state columns in todolist_basicusers (locked_until, deleted_at, etc.) are not modified by this action. Only available to authenticated users—a valid JWT must be provided. After logout, subsequent requests with the same token are denied.\n\nImplements required business rule for user-initiated session termination, supporting privacy and compliance objectives without modifying persistent actor data.\n\nNo request body is needed. Upon successful logout, returns a confirmation with no body (null). Errors result if no valid JWT is present. This endpoint is closely related to signIn and validateToken operations.\n\nUsed for user-initiated logout; mass revocation of all sessions is not implemented unless schema supports advanced token tracking (not present here).","summary":"Logout, invalidate current user session (basicUser JWT).","parameters":[],"requestBody":null,"responseBody":null,"authorizationRole":"basicUser","name":"signOut","path":"/auth/basicUser/logout","method":"post"},{"specification":"Token validation — Validates a supplied JWT token for the basicUser role by decoding and checking claims, issuer, and expiry. This operation does not require authentication and is used to check the validity of a presented token. No todolist_basicusers schema fields are modified.","description":"This endpoint allows external clients or system processes to verify if a presented JWT token is valid and non-expired. The operation accepts the JWT as part of the Authorization header (in standard Bearer format). No changes are made to the todolist_basicusers schema; this is purely a stateless validation.\n\nIf the token is valid (correctly signed, not expired, contains required claims including user ID, email, role), the operation returns a confirmation (typically status 200 and user information embedded in the token). If not, responds with an error indicating invalid or expired credentials.\n\nNo authentication is needed to invoke this endpoint; it does not alter DB state, does not check password_hash, or modify lockout state (locked_until). This is an essential part of the authentication system to allow status checks and token-based access enforcement.\n\nRelated business flows: used by all API endpoints for guard checks, shutdown paths, and conditional UI rendering based on authentication state.","summary":"Validate a JWT for basicUser and return token/user status.","parameters":[],"requestBody":null,"responseBody":{"description":"Validation result, token claims if valid.","typeName":"IBasicUserAuth.IValidateResult"},"authorizationRole":null,"name":"validateToken","path":"/auth/basicUser/validate","method":"post"},{"specification":"Change password for the currently authenticated basicUser, as modeled in todolist_basicusers schema (password_hash, updated_at fields). User supplies their current and new desired password. Validates current password and updates hash if correct (password_hash), sets updated_at. Access is authenticated by JWT; operation is forbidden if credentials do not match. Returns confirmation/result only, never password hashes.","description":"Allows an authenticated basicUser to update their account password. Requires current password for verification (compared to password_hash) and new password (subject to strength validation). If current password matches, password_hash and updated_at are updated; operation is rejected otherwise. Lockout, auditing, and deletion fields are unaffected. After a successful password change, clients should encourage the user to log out and revoke sessions as the schema does not support mass revocation.\n\nOperation is only available to authenticated users (JWT required). No password contents are ever returned in response—only result or error. The process is closely related to signIn and registration flows, and fulfils critical security requirements for ownership and privacy maintenance.","summary":"Change password for authenticated basicUser (todolist_basicusers table).","parameters":[],"requestBody":{"description":"Old and new password, for in-session change. Both required.","typeName":"IBasicUserAuth.IChangePassword"},"responseBody":{"description":"Password change confirmation/result, never returns password.","typeName":"IBasicUserAuth.IChangePasswordResult"},"authorizationRole":"basicUser","name":"changePassword","path":"/auth/basicUser/password","method":"put"}]