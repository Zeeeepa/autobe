[{"specification":"This operation retrieves a paginated list of todo tasks belonging to the authenticated user, supporting search, filtering, and sorting. It operates on the todolist_tasks table in the Prisma schema, allowing users to filter by status (active, completed, deleted), partial title matches, due date ranges, and order results by creation date or other allowable fields. Only tasks owned by the requesting user are included. Supports page size up to 50 and returns total/filtered counts for accurate UI pagination. Soft-deleted tasks can be listed by filtering status. This endpoint enforces strict per-user data separation and enforces all relevant input validation.","path":"/todoList/user/tasks","method":"patch","description":"Retrieve a paginated and filtered list of todo tasks for the authenticated user. Only the requesting user's own tasks are included, and various filters such as status (active, completed, deleted), title substring (case-insensitive), and due date range are supported.\n\nPagination parameters such as page index and page size (up to 50) enable efficient client-side browsing. Sorting by creation date (most recent first by default) or other supported fields is available. If requested, only soft-deleted tasks (created by the user and not permanently deleted) will be returned. All queries are securely scoped to the requesting user; cross-user data access is forbidden.\n\nAuthorization is enforced via the user's session and JWT token. All request fields are validated for type, length, and range according to business and schema rules. Rate limiting and result count for listing are transparently provided to support client UX and abuse prevention.","summary":"Search and retrieve a paginated, filtered list of the authenticated user's todo tasks (todolist_tasks table).","parameters":[],"requestBody":{"description":"Search and pagination parameters for filtering the user's todo tasks.","typeName":"ITodoListTask.IRequest"},"responseBody":{"description":"Paginated list of todo task summaries matching the search and filter criteria.","typeName":"IPageITodoListTask.ISummary"},"authorizationRoles":["user"],"name":"search","authorizationRole":"user"},{"specification":"Retrieve the detailed information of a single todo task by its unique identifier, provided it belongs to the authenticated user. This operation reads from the todolist_tasks table as described in the Prisma schema. The operation enforces strict per-user access control: a user can only access their own tasks, and attempting to access another user's tasks will result in a forbidden or not found error. Supports returning all key task fields: title, description, status, due date, timestamps for creation, update, completion, and soft deletion state. Soft-deleted tasks may be retrieved if within retention, enabling restore workflows.","path":"/todoList/user/tasks/{taskId}","method":"get","description":"Retrieves full detail of a single todo task, including all schema fields, by unique task identifier. Only the owner user may access their own tasksâ€”attempts to access a task not owned by requester or not existing are denied with appropriate error handling.\n\nReturned data includes: title, description, due date, status, completion and deletion timestamps, and associations, matching todolist_tasks schema definitions. Enforcement of task ownership and handling of soft-deleted states for tasks scheduled for permanent removal is performed. Access is strictly scoped to the authenticated user's own data.","summary":"Get complete details of a single todo task by ID, if owned by the authenticated user (todolist_tasks table).","parameters":[{"name":"taskId","description":"Unique identifier of the task to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the todo task, if authorized and found.","typeName":"ITodoListTask"},"authorizationRoles":["user"],"name":"at","authorizationRole":"user"},{"specification":"Allows an authenticated user to create a new todo task and associate it with their account. Operates on the todolist_tasks table as defined in the Prisma schema. Requires at minimum a task title (1-200 chars, trimmed) and accepts optional description (max 1000 chars) and due date (ISO 8601, not in past). New tasks are created in 'active' state by default, with initial timestamps set. Business rules enforced: per-user creation rate limit, title and description validation, prevention of markup/control code, and association with owning user. Duplicate titles are permitted; each task is uniquely identified. The server assigns a unique task id upon creation.","path":"/todoList/user/tasks","method":"post","description":"Creates a new todo task owned by the authenticated user. Requires a valid task title, and optionally a description and due date. All inputs are validated for length, allowed content, and ownership. New tasks default to 'active' status and are stamped with the creation timestamp in UTC.\n\nUpon success, the full created task is returned including its unique identifier, status, and all timestamps. Title uniqueness is not enforced but all other business and input validations apply as described in the todolist_tasks schema. Permissions, ownership, and rate limits (100 creations/hour/user) are checked at creation time.","summary":"Create a new todo task (todolist_tasks table) for the authenticated user.","parameters":[],"requestBody":{"description":"Task creation data: minimally, a title. Optionally, description and due date.","typeName":"ITodoListTask.ICreate"},"responseBody":{"description":"The fully created todo task with assigned id and all properties.","typeName":"ITodoListTask"},"authorizationRoles":["user"],"name":"create","authorizationRole":"user"},{"specification":"Update key properties of an existing todo task by its unique identifier. This endpoint modifies records in the todolist_tasks table for the authenticated user. Permitted updates are title (1-200 chars), description (max 1000), due date (optional, future or present). Attempting to update deleted or non-owned tasks fails. The operation enforces all validation and per-user constraints as per schema and business rules. Status changes (mark as completed/uncompleted) are also possible, updating completed_at timestamp accordingly. The full updated task is returned. All changes are audited for validation and ownership.","path":"/todoList/user/tasks/{taskId}","method":"put","description":"Update properties (title, description, due date, or status) of a todo task belonging to the authenticated user. Only allowed fields may be modified; updates to deleted, completed, or unowned tasks are denied per business rules and schema validation.\n\nAll input values are re-validated by length, content, and date rules. Attempts with no actual change return a warning; forbidden field changes or edits to deleted/completed tasks return errors. Returns the full updated task on success. Record-level timestamps (updated_at) are always refreshed upon successful update.","summary":"Edit or update an existing todo task (todolist_tasks table), by id, if owned by the authenticated user.","parameters":[{"name":"taskId","description":"Unique identifier of the task to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Modified task data: new title, description, due date, or status.","typeName":"ITodoListTask.IUpdate"},"responseBody":{"description":"The updated todo task record with all data fields.","typeName":"ITodoListTask"},"authorizationRoles":["user"],"name":"update","authorizationRole":"user"},{"specification":"Soft-deletes (marks as deleted) a todo task uniquely identified by id if it belongs to the authenticated user, per todolist_tasks schema. The operation changes the status to 'deleted', records deleted_at timestamp, and removes task from normal listing, retaining for restoration/policy period. If the task is already deleted, not owned by the user, or not found, an appropriate error is returned. Permanent deletion is controlled by retention policies and background jobs. Operation is strictly per-user; cross-user actions are forbidden. No business logic field updates beyond marking as deleted occur in this operation.","path":"/todoList/user/tasks/{taskId}","method":"delete","description":"Marks the specified todo task as deleted (soft-deletion) for the authenticated user. The status is set to 'deleted', and the deleted_at timestamp is populated. Task will be excluded from active/completed listings but can be restored within the allowed policy window (30 days). No data is physically removed at this step; permanent deletion is handled by background processes after retention period. The operation checks ownership, task existence, and non-already-deleted state before marking for deletion. Errors are returned if task does not exist, is not owned, or was already deleted.","summary":"Soft-delete a todo task (todolist_tasks table) for the authenticated user by id.","parameters":[{"name":"taskId","description":"Unique identifier of the task to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","authorizationRole":"user"},{"specification":"User registration endpoint for the todoList service. Associated with the 'todolist_users' Prisma DB table. Registers a new user account by accepting an email and password, creates a new user record, issues a verification challenge, and returns JWT tokens with setHeaders for the Authorization field. Registration is only allowed if the email does not already exist (unique constraint on email), the email format is valid, and a secure password is provided. On success, 'email_verified' is initially set to false, and the user must verify their email before gaining full access. The operation is designed to enforce privacy policy and security standards, ensure strong credential storage via 'password_hash', and audit trail via 'registration_completed_at'. It relies on strict business rules: password must be minimum 8 characters, mixed case, number, special char, and not on a banned list; email must fully comply with business validation. Rate-limits registration to avoid abuse. Related Prisma columns: email, password_hash, email_verified, registration_completed_at, created_at, updated_at. Does NOT allow direct setting of 'email_verified' (system-controlled).","description":"This endpoint handles creation of a new user account using the fields defined in the 'todolist_users' table. The operation requires a unique, valid email address (as per the 'email' column and its unique constraint) and a secure password, which will be hashed and stored in the 'password_hash' column. Upon successful registration, 'email_verified' is set to false and the user receives a verification email. The field 'registration_completed_at' will be set upon verification, but is not immediately returned to the user. Security is enforced: the endpoint will not expose sensitive details such as 'password_hash'. Business rules such as email uniqueness, password complexity, rate limiting, and privacy compliance are all enforced as specified in the schema comments. Only upon successful registration does the system issue JWT tokens and the 'setHeaders' return value to allow for immediate client Authorization header population.\n\nThis endpoint issues JWT tokens in response. The JWT will encode the user's 'id' (from 'id' PK), the 'role' ('user'), and permissions per policy matrix. Tokens are only valid for accounts where 'email_verified' becomes true.\n\nOperations related: signIn (login), validateToken, signOut, confirmEmailVerification. This operation is not available to authenticated users.","summary":"Register new user account (todolist_users) and issue login tokens","parameters":[],"requestBody":{"description":"User registration details (email and password) for account creation","typeName":"ITodoListUser.SignUp"},"responseBody":{"description":"Token payload and headers to set Authorization for authenticated requests","typeName":"ITodoListUser.AuthResultWithSetHeaders"},"authorizationRole":null,"name":"signUp","path":"/auth/user/register","method":"post"},{"specification":"User login (authentication) endpoint for the todoList service. Associated with the 'todolist_users' Prisma DB table. Accepts an email and password, verifies credentials against 'email', 'password_hash', and requires 'email_verified' to be true. On success, issues JWT tokens for authentication. The endpoint updates 'last_login_at' for successful logins. Rate-limits failed attempts and logs audit events for abuse prevention. This operation only exposes minimal non-sensitive user data and returns tokens required for secure session establishment. It is critical for the JWT-based authentication flow and unlocking all authorized business operations for the user. Related Prisma columns: email, password_hash, email_verified, last_login_at.","description":"Processes user login by validating the provided email and password against stored values in the 'todolist_users' table. Requires 'email_verified' to be true before authentication is allowed (as per the 'email_verified' schema comment). Updates 'last_login_at' on success. If credentials are invalid, or if rate limits are exceeded, returns business-compliant error messages without leaking account existence. Ensures secure handling of failed attempts in line with business logic for audit, anti-abuse, and temporary lockout.\n\nTokens issued on successful authentication contain info according to session policy: user id, role, permission matrix as described in requirements. Operation is closely related to signUp (user registration), signOut (logout), and validateToken endpoints. All JWT-based session management flows require this as entrypoint. This endpoint is public, available to unauthenticated users only. Authenticated users should use token validation or signOut endpoints for session handling.","summary":"Authenticate user and issue JWT tokens (todolist_users)","parameters":[],"requestBody":{"description":"User login credentials (email and password)","typeName":"ITodoListUser.SignIn"},"responseBody":{"description":"JWT access and refresh tokens on successful authentication","typeName":"ITodoListUser.AuthResult"},"authorizationRole":null,"name":"signIn","path":"/auth/user/login","method":"post"},{"specification":"User logout endpoint for securely terminating authenticated sessions in the todoList service. Associated with the 'todolist_users' table, but does NOT perform a table update; instead, it invalidates the current session/token on the backend. The operation enforces session/token blacklisting per policy, removes all server-side token validity for the user session (including in case of password change or suspicious activity), and prevents further use of issued tokens. All JWT tokens issued to the client for this session become invalid. This complements login, registration, and token refresh endpoints for session lifecycle management. Permission is strictly enforced: only the authenticated user can log themselves out. No data returned.","description":"Provides a secure logout mechanism for users authenticated via JWT. When invoked by an authenticated user, invalidates that session's JWT access and refresh tokens at the server as required by business and security policy. No direct change to the 'todolist_users' DB table is needed, since tokens are not tracked per-session in a column, but audit logs may be recorded per business rules. Operation guards against session reuse and enforces immediate logout on all subsequent API calls from the invalidated token.\n\nThis endpoint does not return any user dataâ€”success is indicated by HTTP status/code only. Related operations: signIn, signUp, validateToken, changePassword, and token refresh. Permissioned for 'user' role only, must be called with an authenticated session.","summary":"Sign out and invalidate JWT session (todolist_users)","parameters":[],"requestBody":null,"responseBody":{"description":"No content; success is defined by session invalidation and HTTP status","typeName":"void"},"authorizationRole":"user","name":"signOut","path":"/auth/user/logout","method":"post"},{"specification":"JWT validation endpoint for the todoList's 'user' role. Enables the validation of a JWT token supplied by the clientâ€”typically via the Authorization headerâ€”without requiring authentication of the route itself. Checks token signature, expiry, and claim integrity (user id, role, permissions) and returns authentication status information. Does not access the 'todolist_users' DB directly unless extra validation (such as existence or ban state) is configured by business logic. Used by client-side code to check if a session is alive, valid, and still authorized. Complements signIn, signUp, and signOut flows.","description":"This endpoint allows a client to validate the status of a JWT token, including expiration, signature, and core claims (user id, role, permissions). No authentication decorator is required as token is provided in the request headers, not from a credentialed session context. Returns a result indicating token validity, any parsed information for the current session (role, permissions, expiry timestamp), and advice on the need for re-authentication if the token is invalid/expired. Does not directly read the 'todolist_users' table unless advanced validation is required.\n\nThis operation is essential for client-driven session renewal workflows, allows detection of session timeout, forced logout, or required re-authentication. Related operations: signIn, signUp, signOut, refreshToken, and changePassword. It is publicly accessible, for use by both authenticated clients (for session confirmation) and unauthenticated clients (to check a token before login).","summary":"Validate JWT token for user authentication (no auth required)","parameters":[],"requestBody":null,"responseBody":{"description":"Result of validation and token claims information","typeName":"ITodoListUser.TokenValidationResult"},"authorizationRole":null,"name":"validateToken","path":"/auth/user/validate","method":"post"},{"specification":"Change password endpoint for authenticated users in the todoList service. Relates to the 'todolist_users' table, which contains fields for 'password_hash' and tracks update history ('updated_at'). Ensures the current password is verified before allowing an update, enforces all password complexity and security policies, and updates 'password_hash' atomically. On success, all active sessions and tokens are invalidated. Business rules prohibit reuse of prior ban-listed passwords. Operation allows the user to update their own password without exposing sensitive credential data. Audit/logging per privacy and security policy. Related columns in schema: password_hash, updated_at. Action is permissioned for 'user' role and requires authentication.","description":"Enables authenticated users to update their account password securely. Requires the user to submit their current password and new password (both validated per business rules) before updating the 'password_hash' in the 'todolist_users' table. All session tokens (access and refresh) are invalidated on success, requiring re-authentication. Operation never exposes the password hash and does not permit changing other user details. Audit trails ensure accountability for all password changes in compliance with privacy and security requirements. Related operations: signIn, signUp, signOut, password reset, and refreshToken. Permissioned for 'user' role; must be called with valid authentication.","summary":"Change current user password (todolist_users, authenticated only)","parameters":[],"requestBody":{"description":"Password change request (current and new password)","typeName":"ITodoListUser.ChangePassword"},"responseBody":{"description":"Confirmation of successful password change (no sensitive data returned)","typeName":"IResult.Success"},"authorizationRole":"user","name":"changePassword","path":"/auth/user/password","method":"put"},{"specification":"Password reset request endpoint for users who have forgotten their password in the todoList service. Related to the 'todolist_users' Prisma DB table. Initiates the password reset process by accepting a registered email, generating a secure one-time token ('password_reset_token'), and storing it alongside a time-limited expiry ('password_reset_token_expires_at'). Sends a reset link or code via email to the user. No indication is provided if the email exists, to avoid user enumeration attacks. The operation must comply with rate limiting and audit log policies. Related table fields: email, password_reset_token, password_reset_token_expires_at, updated_at. Does NOT modify user password at this stage.","description":"Starts the password reset process for a user account by accepting a registered email address. If found in 'todolist_users', the system generates a cryptographically secure password reset token and expiry, updates the user's record, and initiates email notification. Does not reveal if the email exists in the system (response always generic) to prevent enumeration. Token validity periods and rate limiting are enforced per business rules. Operation never touches 'password_hash' and does not perform actual password change; use confirmPasswordReset for final reset. All related actions are logged for audit. Related operations: signIn, changePassword, confirmPasswordReset, account recovery. Publicly accessible endpoint.","summary":"Request password reset for user (issue reset token, 'todolist_users')","parameters":[],"requestBody":{"description":"Request password reset by email","typeName":"ITodoListUser.RequestPasswordReset"},"responseBody":{"description":"Confirmation that reset email was processed (no sensitive info)","typeName":"IResult.Generic"},"authorizationRole":null,"name":"requestPasswordReset","path":"/auth/user/password/reset","method":"post"},{"specification":"Password reset confirmation endpoint for finalizing a forgotten password change in the todoList service. Associated with 'todolist_users' DB table fields: 'password_reset_token', 'password_reset_token_expires_at', and 'password_hash'. Accepts the reset token, new password, and (optionally) updated audit details. Atomically verifies token, checks expiry, complexity, and rate limits before updating 'password_hash'. Upon success, clears the reset token fields, finalizes the password change, and invalidates all user sessions/tokens. Enforces audit trail. Does NOT expose any sensitive user or credential information. Related to requestPasswordReset, changePassword operations.","description":"Completes the password reset workflow by accepting the password reset token (from email), the new password, and user identification. Verifies that the provided token exists, has not expired, and matches the intended user. If all checks pass and the new password is valid, updates the 'password_hash' for the account, nulls out the token fields, and invalidates existing auth tokens. Security and business rules dictate password complexity and prevent reuse of previous passwords as required. No sensitive fields or hashes are exposed in the response. Related operations: signIn, requestPasswordReset, changePassword. Publicly accessible; must be called with token issued from requestPasswordReset operation.","summary":"Finalize password reset, given valid token and new password ('todolist_users')","parameters":[],"requestBody":{"description":"Password reset confirmation request (token and new password)","typeName":"ITodoListUser.ConfirmPasswordReset"},"responseBody":{"description":"Confirmation of password reset success (no sensitive data returned)","typeName":"IResult.Success"},"authorizationRole":null,"name":"confirmPasswordReset","path":"/auth/user/password/reset/confirm","method":"post"},{"specification":"Email verification confirmation endpoint for the todoList service, relating to the 'todolist_users' table. Confirms a user's email address using a secure verification token that was provided at registration or via a re-verification request. Once the token is accepted and validated (including expiry and tampering check), 'email_verified' is set to true and 'registration_completed_at' is updated, enabling the account for login. Token is cleared on success. This endpoint is essential for enforcing business policy that unverified emails cannot sign in. Audit, expiry, and rate limits strictly enforced. Related fields: email_verified, registration_completed_at, updated_at, (token fieldsâ€”see implementation for actual column or in-memory tracking).","description":"Handles completion of the email verification workflow by accepting the verification token sent to the user's email at registration. The endpoint verifies the token's validity and expiry, compares to the intended user, and updates the 'email_verified' status to true in 'todolist_users'. On success, enables login for the user. Security policies and audit logs enforced as mandated by business requirements. Does NOT expose or reveal any sensitive data. Related operations: signUp, signIn, requestEmailVerification. Publicly accessible endpoint as required for onboarding flow.","summary":"Confirm user email verification using verification token ('todolist_users')","parameters":[],"requestBody":{"description":"Email verification confirmation (token only)","typeName":"ITodoListUser.ConfirmEmailVerification"},"responseBody":{"description":"Confirmation of successful email verification","typeName":"IResult.Success"},"authorizationRole":null,"name":"confirmEmailVerification","path":"/auth/user/verify/email/confirm","method":"post"}]