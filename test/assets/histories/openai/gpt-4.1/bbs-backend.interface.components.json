{
  "schemas": {
    "IDiscussionboardUser.IRequest": {
      "type": "object",
      "description": "유저 검색 및 목록 조회 요청 DTO.\n\n필터링, 페이징, 정렬 옵션을 포함한다. 이메일/닉네임/활성상태 등을 기반으로 검색할 때 사용한다.\n\nPrisma discussionboard_user 모델의 관리용 검색 조건과 3NF 준수 설계 참고.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "닉네임 기반 검색. 사용자의 표시 이름(글쓴이 란 등에서 보임, 부분일치/완전일치 검색 지원). Prisma: display_name 컬럼. 예시: '정치매니아'"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "이메일 주소로 검색. 로그인/고유 식별 목적. Prisma: email 컬럼. 예시: 'user@example.com'"
        },
        "isActive": {
          "type": "boolean",
          "description": "활성화 상태(계정 유효/잠금 등)을 기준으로 필터링. Prisma: is_active 컬럼."
        },
        "isBanned": {
          "type": "boolean",
          "description": "전체 플랫폼 벤 여부로 필터. Prisma: is_banned 컬럼."
        },
        "registeredFrom": {
          "type": "string",
          "format": "date-time",
          "description": "가입일 시작(이 이후 가입한 유저 조회). Prisma: created_at 컬럼. ISO8601 datetime 사용."
        },
        "registeredTo": {
          "type": "string",
          "format": "date-time",
          "description": "가입일 종료(이전에 가입한 유저 조회). Prisma: created_at 컬럼. ISO8601 datetime 사용."
        },
        "sort": {
          "type": "string",
          "description": "정렬 필드. 예: 'created_at desc', 'display_name asc' 등. 지원 필드는 쿼리 사양에 참고, 사용자가 선택."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "요청 페이지 번호. 1부터 시작."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "페이지당 결과 수. 시스템 기본값/최대값 참고. (ex: 50, 100 등)"
        },
        "cursor": {
          "type": "string",
          "description": "커서 기반 페이지네이션을 사용할 때 이전 페이지의 마지막 ID 등."
        }
      },
      "required": []
    },
    "IPageDiscussionboardUser.ISummary": {
      "type": "object",
      "description": "유저 목록 요약형 페이지 컨테이너.\n\ndiscussionboard_user 요약 DTO 리스트와 페이지 메타 정보를 포함한다.\n\nPrisma discussionboard_user 테이블에서 제공하는 최소한의 주요 필드만 응답함.\n\n3NF 데이터베이스 설계, API 표준 Pagination 구조 참고.",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardUser.ISummary"
          },
          "description": "유저 요약 리스트."
        }
      },
      "required": [
        "pagination",
        "data"
      ]
    },
    "IPage.IPagination": {
      "type": "object",
      "properties": {
        "current": {
          "type": "integer",
          "format": "uint32",
          "description": "현재 페이지 번호입니다. 1부터 시작하며, 클라이언트가 페이징 네비게이션을 구현할 때 사용됩니다.\n\n페이지 기반 API에서 필수적으로 사용되는 메타 정보로, 서버가 반환하는 페이지의 실제 번호입니다."
        },
        "limit": {
          "type": "integer",
          "format": "uint32",
          "description": "페이지마다 최대 몇 개의 레코드를 반환할지 나타냅니다.\n\n많은 API에서 100을 기본값으로 하지만, 클라이언트에서 요청 시 바꿀 수 있으며 최대 제한은 비즈니스 로직에서 관리합니다. 체계적인 데이터 노출과 네트워크 효율을 위해 필요합니다."
        },
        "records": {
          "type": "integer",
          "format": "uint32",
          "description": "전체 데이터베이스 기준으로 검색된 레코드의 총 개수입니다. 페이징 UI, 페이지 갯수 계산 등에 활용합니다.\n\nAPI 응답이 페이징될 때, 전체 피드 또는 목록에 몇 개의 결과가 있는지 제공하는 핵심적인 메타정보입니다."
        },
        "pages": {
          "type": "integer",
          "format": "uint32",
          "description": "전체 페이지의 총 개수입니다.\n\nrecords/limit의 올림(ceiling) 값으로 산정합니다(0.1 페이지도 하나의 페이지로 처리해야 하기 때문입니다). 클라이언트에서 마지막 네비게이션 버튼, 범위 체크 등에 활용됩니다."
        }
      },
      "required": [
        "current",
        "limit",
        "records",
        "pages"
      ],
      "description": "페이지 정보. 레코드 리스트에 대한 페이징 메타데이터로, 클라이언트의 UI 페이징, 네비게이션, 전체 범위 계산 등에 사용됩니다."
    },
    "IDiscussionboardUser.ISummary": {
      "type": "object",
      "description": "API 목록(요약)에서 사용하는 핵심 유저 정보 DTO.\n\ndiscussionboard_user 모델의 주요 필드(닉네임, ID, 활성여부, 아바타 등)만 포함.\n\n대용량 목록에 효율적으로 최소 정보만 노출.\n\n일반적으로, 유저 전체 세부 정보를 원하지 않고 리스트에 표기 용으로 사용.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "유저 UUID. 고유 식별자. Prisma: id"
        },
        "displayName": {
          "type": "string",
          "description": "닉네임. 타 유저 화면, 포스트 등에서 노출. Prisma: display_name"
        },
        "avatarUrl": {
          "type": "string",
          "description": "아바타 이미지 URL(있을 때만). Prisma: avatar_url"
        },
        "isActive": {
          "type": "boolean",
          "description": "계정 활성 상태. Prisma: is_active."
        },
        "isBanned": {
          "type": "boolean",
          "description": "유저 전체 벤 여부. Prisma: is_banned."
        }
      },
      "required": [
        "id",
        "displayName",
        "isActive",
        "isBanned"
      ]
    },
    "IDiscussionboardUser": {
      "type": "object",
      "description": "모든 discussionboard_user 엔터티 전체 세부 정보 DTO. 관리, 프로필, 단일 상세 조회 등에 사용함.\n\nPrisma discussionboard_user 3NF 테이블 전체 속성 기반 설계. 인증/프로필/권한관리/등록일/수정일 등 모두 보존.\n\n아바타, 삭제 여부, 밴, 활성 플래그 등 추가 정보 포함. password_hash는 NEVER 응답에 직접 포함하지 않음.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "유저 PK (UUID). 고유 비즈니스/논리적 식별자 X, 시스템 추적용. Prisma: id"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "계정 이메일. 중복 불가, 로그인/알림/식별 등 멀티 용도. Prisma: email"
        },
        "displayName": {
          "type": "string",
          "description": "닉네임. 타 유저 화면, 포스트 등에서 노출. Prisma: display_name"
        },
        "avatarUrl": {
          "type": "string",
          "description": "아바타 이미지 절대 URL. Nullable/option. Prisma: avatar_url"
        },
        "isActive": {
          "type": "boolean",
          "description": "활성 중인 계정 여부. Prisma: is_active."
        },
        "isBanned": {
          "type": "boolean",
          "description": "전체 벤. Prisma: is_banned."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "계정 등록일. ISO8601 datetime. Prisma: created_at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "프로필/계정 최종 수정일. Prisma: updated_at"
        },
        "deletedAt": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "삭제 일시(Soft delete). 없으면 null. Prisma: deleted_at"
            },
            {
              "type": "null"
            }
          ],
          "description": "삭제 일시(Soft delete). 없으면 null. Prisma: deleted_at"
        }
      },
      "required": [
        "id",
        "email",
        "displayName",
        "isActive",
        "isBanned",
        "createdAt",
        "updatedAt"
      ]
    },
    "IDiscussionboardUser.ICreate": {
      "type": "object",
      "description": "유저 신규 생성(회원가입) API 요청 DTO.\n\n이메일, 비밀번호(해시), 닉네임, 아바타 등 회원 정보 입력. 유니크 필드/필수/옵션 명확히 구분.\n\n관리자 추가, 일반 회원가입 모두 대응. password_hash 필드는 API 입력 단계에서는 실비밀번호가 아니라 API 내부 해시됨.",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "회원 이메일. 시스템 전체에서 고유해야 함. Prisma: email"
        },
        "password": {
          "type": "string",
          "format": "password",
          "description": "사용자 원시 패스워드(입력 전송 시만 보류, 저장은 hash 후). 절대 API 응답에 노출 X."
        },
        "displayName": {
          "type": "string",
          "description": "유저 별명/닉네임. Prisma: display_name"
        },
        "avatarUrl": {
          "type": "string",
          "description": "아바타 이미지 URL (옵션)"
        },
        "isActive": {
          "type": "boolean",
          "description": "계정 활성화 여부. 기본 true; 관리자용 생성시 비활성 가능(옵션). Prisma: is_active"
        }
      },
      "required": [
        "email",
        "password",
        "displayName"
      ]
    },
    "IDiscussionboardUser.IUpdate": {
      "type": "object",
      "description": "유저 전체 정보 변경(일괄 수정/PUT) API 요청 DTO.\n\n이메일, 닉네임 등 수정용. 각 필드는 모두 nullable/optional이며, 입력된 필드만 업데이트됨. Prisma discussionboard_user 구조 기반.\n\n비밀번호와 같이 인증 구간에서만 교체되는 필드는 별도 password_change API분리 권장.",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "새 이메일. 시스템 전체에서 고유해야 함. Prisma: email"
        },
        "displayName": {
          "type": "string",
          "description": "닉네임 변경. Prisma: display_name"
        },
        "avatarUrl": {
          "type": "string",
          "description": "아바타 이미지 URL. Prisma: avatar_url"
        },
        "isActive": {
          "type": "boolean",
          "description": "활성/비활성 여부 플래그."
        },
        "isBanned": {
          "type": "boolean",
          "description": "플랫폼 차단 메뉴얼 조작. Prisma: is_banned."
        }
      },
      "required": []
    },
    "IDiscussionboardUserProfile.IRequest": {
      "type": "object",
      "description": "유저 프로필 목록/검색용 요청 DTO.\n\n바이오/지역/웹사이트 등 프로필 메타 필터, 페이징 등 포함.\n\ndiscussionboard_user_profile 3NF 구조 기반 검색/관리/통계/운영 대시보드 등에서 사용.",
      "properties": {
        "bio": {
          "type": "string",
          "description": "프리텍스트 바이오 키워드. 부분검색 지원. Prisma: bio"
        },
        "location": {
          "type": "string",
          "description": "프로필 위치 필터. Prisma: location"
        },
        "websiteUrl": {
          "type": "string",
          "description": "웹사이트 주소 키워드 필터(부분검색 지원). Prisma: website_url"
        },
        "twitterHandle": {
          "type": "string",
          "description": "트위터(혹은 X) 핸들 검색조건. Prisma: twitter_handle"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "요청 페이지."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "페이지당 결과수."
        },
        "sort": {
          "type": "string",
          "description": "정렬 필드/옵션. 예: created_at desc"
        }
      },
      "required": []
    },
    "IPageDiscussionboardUserProfile.ISummary": {
      "type": "object",
      "description": "프로필 목록 요약형 페이지 컨테이너.\n\ndiscussionboard_user_profile 요약 DTO 리스트와 페이지 메타 정보 포함.\n\n운영/관리 통합 검색, 통계 등에서 사용. 내부 필드 구성은 목록전용 최소 프로필 정보만 반영.\n\n표준 IPage 구조와 호환.",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardUserProfile.ISummary"
          },
          "description": "프로필 요약 리스트."
        }
      },
      "required": [
        "pagination",
        "data"
      ]
    },
    "IDiscussionboardUserProfile.ISummary": {
      "type": "object",
      "description": "유저 프로필 요약형 데이터. 리스트 노출 목적.\n\n1:1 discussionboard_user_profile 주요/핵심 필드만 포함. ex) 프로필 ID, user_id, bio 등 핵심값 중심. DB 3NF/개별 관리.\n\n운영 대시보드 등에서 대량 노출 시 데이터 절약 및 성능 개선용 설계.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "프로필 고유 ID(실질적으로 user_id와 동일). Prisma: id"
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "참조 유저 ID. Prisma: user_id"
        },
        "bio": {
          "type": "string",
          "description": "한 줄 자기소개. Prisma: bio"
        },
        "location": {
          "type": "string",
          "description": "지역. Prisma: location"
        },
        "websiteUrl": {
          "type": "string",
          "description": "웹사이트 주소. Prisma: website_url"
        },
        "twitterHandle": {
          "type": "string",
          "description": "트위터(X) 계정 정보. Prisma: twitter_handle"
        }
      },
      "required": [
        "id",
        "userId"
      ]
    },
    "IDiscussionboardUserProfile": {
      "type": "object",
      "description": "discussionboard_user_profile 전체 엔터티 세부 정보 DTO.\n\n유저의 1:1 프로필 정보 전체 세트. 바이오, 지역, 웹사이트, 트위터와 생성/수정일 등 모두 포함.\n\n프로필 미존재 시 id/userId 기준으로 신규 생성 가능.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "프로필 고유 ID(UUID). 유저 ID와 1:1, Prisma: id"
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "참조 유저 ID(UUID), Prisma: user_id"
        },
        "bio": {
          "type": "string",
          "description": "자기소개/바이오. Prisma: bio"
        },
        "location": {
          "type": "string",
          "description": "위치(지역). Prisma: location"
        },
        "websiteUrl": {
          "type": "string",
          "description": "개인/외부 웹사이트 URL. Prisma: website_url"
        },
        "twitterHandle": {
          "type": "string",
          "description": "트위터(X) 프로필 주소/핸들. Prisma: twitter_handle"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "프로필 생성일. Prisma: created_at"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "프로필 마지막 수정일. Prisma: updated_at"
        }
      },
      "required": [
        "id",
        "userId",
        "createdAt",
        "updatedAt"
      ]
    },
    "IDiscussionboardUserProfile.ICreate": {
      "type": "object",
      "description": "신규 프로필 생성 요청 DTO.\n\n바이오, 위치, 웹사이트, 트위터, 소속 유저 ID 필수.\n\nDB 무결성 1:1 관계(존재 유저/프로필 페어만 생성 허용). 생성일/수정일은 자동처리.\n\n입력 시 중복 userId는 에러 발생.",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "프로필 주인 유저 ID. Prisma: user_id"
        },
        "bio": {
          "type": "string",
          "description": "자기소개/바이오. Prisma: bio"
        },
        "location": {
          "type": "string",
          "description": "지역. Prisma: location"
        },
        "websiteUrl": {
          "type": "string",
          "description": "웹사이트 주소. Prisma: website_url"
        },
        "twitterHandle": {
          "type": "string",
          "description": "트위터(X) 핸들. Prisma: twitter_handle"
        }
      },
      "required": [
        "userId"
      ]
    },
    "IDiscussionboardUserProfile.IUpdate": {
      "type": "object",
      "description": "프로필 정보 전체 수정 요청 DTO\n\n가능한 모든 필드 optional(부분 수정 PD 권장). 변경 불가 필드는 userId/id 등 기본키 정보 제외.\n\n바이오, 웹사이트, 지역, 트위터, 기타 신규 확장 필드 OK.\n\n수정일(최종 업데이트 타임스탬프)는 서버단 자동 처리.",
      "properties": {
        "bio": {
          "type": "string",
          "description": "바이오. Prisma: bio"
        },
        "location": {
          "type": "string",
          "description": "지역. Prisma: location"
        },
        "websiteUrl": {
          "type": "string",
          "description": "웹사이트 주소. Prisma: website_url"
        },
        "twitterHandle": {
          "type": "string",
          "description": "트위터(X) 핸들. Prisma: twitter_handle"
        }
      },
      "required": []
    },
    "IDiscussionboardModerator.IRequest": {
      "type": "object",
      "description": "모더레이터 역할 배정 및 검색 API용 요청 DTO.\n\n배정 유저, 담당보드, 상태, 페이징, 정렬 옵션 등 관리필터 포함.\n\nPrisma discussionboard_moderator 테이블의 배정 이력/활동 기록 파악 목적.",
      "properties": {
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "배정 대상 유저 ID 검색 조건. Prisma: user_id"
        },
        "boardId": {
          "type": "string",
          "format": "uuid",
          "description": "담당 보드 ID로 필터. Prisma: board_id"
        },
        "assignedByAdminId": {
          "type": "string",
          "format": "uuid",
          "description": "배정 처리 관리자 ID. Prisma: assigned_by_admin_id"
        },
        "activeOnly": {
          "type": "boolean",
          "description": "현직/재직 모더레이터만 필터. (revoked_at==null)"
        }
      },
      "required": []
    },
    "IPageDiscussionboardModerator.ISummary": {
      "type": "object",
      "description": "모더레이터 배정 목록 요약 페이지 DTO.\n\n모더레이터 최소 정보(배정ID, user, board, 배정일, 만료일 등) 및 페이지네이션 정보 포함.\n\n대량 모더레이터 현황, 활동 통계 등 관리용 표준 반환 포맷.",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardModerator.ISummary"
          },
          "description": "모더레이터 배정 요약 리스트."
        }
      },
      "required": [
        "pagination",
        "data"
      ]
    },
    "IDiscussionboardModerator.ISummary": {
      "type": "object",
      "description": "모더레이터 배정 기록 요약.\n\n배정ID, 유저ID, 보드ID, 배정일/만료일/관리자ID 등 주요 필드만 포함.\n\n운영 대시보드·관리 패널·통계 등 페이징 목록에서 사용하는 경량 정보.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "모더레이터 배정 레코드 PK"
        },
        "userId": {
          "type": "string",
          "format": "uuid",
          "description": "대상 유저 ID"
        },
        "boardId": {
          "type": "string",
          "format": "uuid",
          "description": "담당 보드 ID"
        },
        "assignedByAdminId": {
          "type": "string",
          "format": "uuid",
          "description": "배정 관리자/주체 관리자 ID"
        },
        "assignedAt": {
          "type": "string",
          "format": "date-time",
          "description": "배정 일시"
        },
        "revokedAt": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "만료/해제 일시(null=활성직 무제한)"
            },
            {
              "type": "null"
            }
          ],
          "description": "만료/해제 일시(null=활성직 무제한)"
        }
      },
      "required": [
        "id",
        "userId",
        "assignedByAdminId",
        "assignedAt"
      ]
    },
    "IDiscussionboardModerator": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "고유한 모더레이터 지정 레코드 ID\n\n모더레이터 권한 할당의 각 인스턴스를 식별합니다. (Prisma: Primary key for moderator assignment, uniquely identifies each moderation instance.)"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "모더레이터 권한을 가진 사용자의 고유 식별자\n\n사용자가 플랫폼 또는 특정 보드의 모더레이터로 지정되었음을 나타냅니다. (Prisma: User assigned moderator privileges, implements role mapping per business rules.)"
        },
        "board_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "해당 모더레이터가 속한 게시판의 고유 식별자(옵션)\n\n플랫폼 전체 모더레이터가 아니면 특정 게시판에 할당됩니다. null일 경우 전체 플랫폼. (Prisma: Optional reference to a specific board. Implements per-board moderator scoping. Nullable if platform-wide.)"
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "해당 모더레이터가 속한 게시판의 고유 식별자(옵션)\n\n플랫폼 전체 모더레이터가 아니면 특정 게시판에 할당됩니다. null일 경우 전체 플랫폼. (Prisma: Optional reference to a specific board. Implements per-board moderator scoping. Nullable if platform-wide.)"
            }
          ],
          "description": "해당 모더레이터가 속한 게시판의 고유 식별자(옵션)\n\n플랫폼 전체 모더레이터가 아니면 특정 게시판에 할당됩니다. null일 경우 전체 플랫폼. (Prisma: Optional reference to a specific board. Implements per-board moderator scoping. Nullable if platform-wide.)"
        },
        "assigned_by_admin_id": {
          "type": "string",
          "format": "uuid",
          "description": "모더레이터 권한을 부여한 관리자(사용자)의 ID\n\n권한 부여의 감사 추적 및 관리 목적으로 사용됩니다. (Prisma: Admin user who assigned moderator rights.)"
        },
        "assigned_at": {
          "type": "string",
          "format": "date-time",
          "description": "모더레이터 권한이 할당된 일시 (ISO 8601)\n\n사후 감사, 권한 기간 추적, 이력 용도. (Prisma: Timestamp for moderator assignment)"
        },
        "revoked_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "권한 해지(취소) 시간, null이면 현재 활성\n\n권한 박탈, 임시 지정 등 상태 관리에 필요. (Prisma: Timestamp when moderation privileges ended (null if active).)"
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "권한 해지(취소) 시간, null이면 현재 활성\n\n권한 박탈, 임시 지정 등 상태 관리에 필요. (Prisma: Timestamp when moderation privileges ended (null if active).)"
            }
          ],
          "description": "권한 해지(취소) 시간, null이면 현재 활성\n\n권한 박탈, 임시 지정 등 상태 관리에 필요. (Prisma: Timestamp when moderation privileges ended (null if active).)"
        }
      },
      "required": [
        "id",
        "user_id",
        "assigned_by_admin_id",
        "assigned_at"
      ],
      "description": "모더레이터 지정 엔터티 (discussionboard_moderator)\n\n플랫폼 또는 특정 게시판의 모더레이터 권한 할당 내역을 관리합니다. 사용자별, 보드별 권한 지정/변경에 대한 모든 중요 정보를 저장하여, 감사·권한관리·역할 변경시 참조합니다.\n\nPrisma의 discussionboard_moderator 테이블과 정합성을 유지하며, 모든 필드는 DB 컬럼의 주요 규칙·범용 요구사항을 따라갑니다."
    },
    "IDiscussionboardModerator.ICreate": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "모더레이터로 지정할 사용자 ID"
        },
        "board_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "모더레이터 권한이 지정된 게시판 ID (전체 플랫폼 모더레이터면 null)"
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "모더레이터 권한이 지정된 게시판 ID (전체 플랫폼 모더레이터면 null)"
            }
          ],
          "description": "모더레이터 권한이 지정된 게시판 ID (전체 플랫폼 모더레이터면 null)"
        },
        "assigned_by_admin_id": {
          "type": "string",
          "format": "uuid",
          "description": "권한을 부여하는 관리자(사용자) ID"
        },
        "assigned_at": {
          "type": "string",
          "format": "date-time",
          "description": "권한 할당 타임스탬프 (ISO 8601)"
        }
      },
      "required": [
        "user_id",
        "assigned_by_admin_id",
        "assigned_at"
      ],
      "description": "모더레이터 권한 할당을 생성하기 위한 요청 DTO\n\n사용자, 게시판(옵션), 지정 관리자의 정보 및 타임스탬프를 포함합니다. Prisma discussionboard_moderator 테이블의 생성 엔드포인트를 위한 구조입니다."
    },
    "IDiscussionboardModerator.IUpdate": {
      "type": "object",
      "properties": {
        "board_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "모더레이터 권한의 소속 게시판 ID(변경 가능); null일 경우 전체 플랫폼"
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "모더레이터 권한의 소속 게시판 ID(변경 가능); null일 경우 전체 플랫폼"
            }
          ],
          "description": "모더레이터 권한의 소속 게시판 ID(변경 가능); null일 경우 전체 플랫폼"
        },
        "revoked_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "권한 해지 시각(필요 시 갱신); null이면 여전히 활성"
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "권한 해지 시각(필요 시 갱신); null이면 여전히 활성"
            }
          ],
          "description": "권한 해지 시각(필요 시 갱신); null이면 여전히 활성"
        }
      },
      "required": [],
      "description": "모더레이터 지정의 속성을 변경/취소(해지)하기 위한 DTO.\n\n게시판 전환, 권한 해지 시각 등을 갱신 가능하며, Prisma의 discussionboard_moderator 테이블 갱신에 사용합니다."
    },
    "IDiscussionboardAdmin.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "description": "페이징: 검색 페이지 번호 (1부터)"
            },
            {
              "type": "null",
              "format": "int32",
              "description": "페이징: 검색 페이지 번호 (1부터)"
            }
          ],
          "description": "페이징: 검색 페이지 번호 (1부터)"
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "description": "한 페이지당 결과 개수 (기본값 100)"
            },
            {
              "type": "null",
              "format": "int32",
              "description": "한 페이지당 결과 개수 (기본값 100)"
            }
          ],
          "description": "한 페이지당 결과 개수 (기본값 100)"
        },
        "sort": {
          "oneOf": [
            {
              "type": "string",
              "description": "정렬 필드 및 방향 (예: 'assigned_at desc', 'user_id asc')"
            },
            {
              "type": "null",
              "description": "정렬 필드 및 방향 (예: 'assigned_at desc', 'user_id asc')"
            }
          ],
          "description": "정렬 필드 및 방향 (예: 'assigned_at desc', 'user_id asc')"
        },
        "user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "특정 사용자의 관리자 권한 지정 내역 검색"
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "특정 사용자의 관리자 권한 지정 내역 검색"
            }
          ],
          "description": "특정 사용자의 관리자 권한 지정 내역 검색"
        },
        "is_revoked": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "해지 혹은 현재 활성 상태 필터 (true: 해지, false: 활성)"
            },
            {
              "type": "null",
              "description": "해지 혹은 현재 활성 상태 필터 (true: 해지, false: 활성)"
            }
          ],
          "description": "해지 혹은 현재 활성 상태 필터 (true: 해지, false: 활성)"
        }
      },
      "required": [],
      "description": "관리자 권한 할당 목록 조회에 사용되는 검색/필터/페이징 DTO.\n\nPrisma discussionboard_admin 서브시스템의 다양한 검색 요구를 반영합니다."
    },
    "IPageIDiscussionboardAdmin": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardAdmin"
          }
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "관리자 권한 지정 엔터티 목록 페이징 결과\n\nresults 파트에는 각 관리자 권한 지정 엔터티의 핵심 정보가 배열로 포함됨. pagination 파트는 전체 결과에 대한 정보(현재 페이지, 총 페이지 등)를 담고 있음.\n\nIPage 도메인 컨테이너와 동일 인터페이스로, 재사용성 및 일관성을 보장합니다."
    },
    "IDiscussionboardAdmin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "관리자 권한 지정 내역 고유 ID (PK)\n\n각 관리자 지정 이벤트를 식별하는 원자적 레코드"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "관리자 권한이 부여된 사용자의 식별자\n\n플랫폼 내에서 관리자 지정/변경 이력 추적 시 중요"
        },
        "assigned_by_admin_id": {
          "type": "string",
          "format": "uuid",
          "description": "권한 부여 관리자(사용자) ID\n\n회사 규칙, 접근 통제 및 감사 로그와 연계"
        },
        "assigned_at": {
          "type": "string",
          "format": "date-time",
          "description": "관리자 권한이 처음 부여된 시각 (ISO 8601)"
        },
        "revoked_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "권한 해지 시각 (null이면 현재 관리자)"
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "권한 해지 시각 (null이면 현재 관리자)"
            }
          ],
          "description": "권한 해지 시각 (null이면 현재 관리자)"
        }
      },
      "required": [
        "id",
        "user_id",
        "assigned_by_admin_id",
        "assigned_at"
      ],
      "description": "관리자 권한 부여 엔터티 (discussionboard_admin)\n\n플랫폼 내 관리자 권한의 부여/해지 이력을 관장하며, 감사, 롤 관리 등 다양한 관리 기능의 핵심 도메인을 이룹니다.\n\nPrisma discussionboard_admin 테이블 및 역할 관리 정책에 맞추어 구조화되어 있습니다."
    },
    "IDiscussionboardAdmin.ICreate": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "관리자 권한을 부여할 사용자 ID"
        },
        "assigned_by_admin_id": {
          "type": "string",
          "format": "uuid",
          "description": "권한을 부여하는 관리자(사용자) ID"
        },
        "assigned_at": {
          "type": "string",
          "format": "date-time",
          "description": "권한 지정을 반영하는 시점 (ISO 8601)"
        }
      },
      "required": [
        "user_id",
        "assigned_by_admin_id",
        "assigned_at"
      ],
      "description": "관리자 권한 부여 내역 생성 요청 DTO\n\n사용자, 권한 지정 관리자, 지정 시점 정보를 포함합니다. Prisma discussionboard_admin 테이블의 생성 용도에 사용됨."
    },
    "IDiscussionboardAdmin.IUpdate": {
      "type": "object",
      "properties": {
        "revoked_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "관리자 권한 해지 시각 (필요 시 지정됨); null이면 현재 활성"
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "관리자 권한 해지 시각 (필요 시 지정됨); null이면 현재 활성"
            }
          ],
          "description": "관리자 권한 해지 시각 (필요 시 지정됨); null이면 현재 활성"
        }
      },
      "required": [],
      "description": "관리자 권한 지정의 해지(또는 전환) 등의 속성 갱신 DTO\n\n보통 권한 해지(즉시/미래 시점) 등 업무 플로우용으로 제한 필드만 허용함."
    },
    "IDiscussionboardRoleAssignment.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "description": "페이지 번호 (1-base)"
            },
            {
              "type": "null",
              "format": "int32",
              "description": "페이지 번호 (1-base)"
            }
          ],
          "description": "페이지 번호 (1-base)"
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "description": "한 페이지 결과 개수 (기본 100)"
            },
            {
              "type": "null",
              "format": "int32",
              "description": "한 페이지 결과 개수 (기본 100)"
            }
          ],
          "description": "한 페이지 결과 개수 (기본 100)"
        },
        "sort": {
          "oneOf": [
            {
              "type": "string",
              "description": "정렬 컬럼/방향 (예: assigned_at desc)"
            },
            {
              "type": "null",
              "description": "정렬 컬럼/방향 (예: assigned_at desc)"
            }
          ],
          "description": "정렬 컬럼/방향 (예: assigned_at desc)"
        },
        "user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "지정 유저로 필터"
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "지정 유저로 필터"
            }
          ],
          "description": "지정 유저로 필터"
        },
        "assigned_by_admin_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "권한 변경 처리한 관리자(사용자)로 필터"
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "권한 변경 처리한 관리자(사용자)로 필터"
            }
          ],
          "description": "권한 변경 처리한 관리자(사용자)로 필터"
        },
        "role": {
          "oneOf": [
            {
              "type": "string",
              "description": "할당된 역할(user/moderator/admin) 필터"
            },
            {
              "type": "null",
              "description": "할당된 역할(user/moderator/admin) 필터"
            }
          ],
          "description": "할당된 역할(user/moderator/admin) 필터"
        },
        "is_revoked": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "현재 활성/종료 여부 필터"
            },
            {
              "type": "null",
              "description": "현재 활성/종료 여부 필터"
            }
          ],
          "description": "현재 활성/종료 여부 필터"
        }
      },
      "required": [],
      "description": "역할 변경/이력 조회 검색 및 페이징/정렬에 사용되는 요청 DTO\n\n자세한 필터링 요구와 대규모 시스템을 위한 페이지네이션 지원을 포괄함. Prisma discussionboard_role_assignment와 완전 일치."
    },
    "IPageIDiscussionboardRoleAssignment": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardRoleAssignment"
          }
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "역할 부여 이력(Journal) 엔터티의 페이징된 목록 반환 DTO\n\nresults 배열은 역할변경 상세 엔터티를, pagination은 paged meta를 제공합니다."
    },
    "IDiscussionboardRoleAssignment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "역할 부여 이력(저널) 고유 식별자\n\n모든 권한/역할 이력 변동을 원자적으로 추적합니다."
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "변경 대상 사용자 식별자"
        },
        "assigned_by_admin_id": {
          "type": "string",
          "format": "uuid",
          "description": "권한(역할) 변경을 진행한 관리자/사용자 식별자"
        },
        "role": {
          "type": "string",
          "description": "지정된 역할명 ('user', 'moderator', 'admin' 중 하나)"
        },
        "assigned_at": {
          "type": "string",
          "format": "date-time",
          "description": "권한 부여 시각 (ISO 8601 ; 항상 존재)"
        },
        "revoked_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "해당 권한이 해지된 시점; null이면 현재 활성"
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "해당 권한이 해지된 시점; null이면 현재 활성"
            }
          ],
          "description": "해당 권한이 해지된 시점; null이면 현재 활성"
        }
      },
      "required": [
        "id",
        "user_id",
        "assigned_by_admin_id",
        "role",
        "assigned_at"
      ],
      "description": "역할 부여/해지 이력(Journal) 도메인\n\n모든 플랫폼 상의 권한 변동 내역을 원자적으로 기록·감사하며, 실시간/과거 이력 모두에 대한 타임라인, 감사, 컴플라이언스 분석에 사용됩니다. Prisma discussionboard_role_assignment 모델이 1:1 반영됩니다."
    },
    "IDiscussionboardRoleAssignment.ICreate": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "역할을 변경(부여)할 사용자 식별자"
        },
        "assigned_by_admin_id": {
          "type": "string",
          "format": "uuid",
          "description": "역할 부여/해지 처리를 한 관리자의 ID"
        },
        "role": {
          "type": "string",
          "description": "부여할 역할('user','moderator','admin' 중 하나)"
        },
        "assigned_at": {
          "type": "string",
          "format": "date-time",
          "description": "부여 일시(ISO8601)"
        },
        "revoked_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "해지 시각(옵션); null이면 부여 시점 기준 활성"
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "해지 시각(옵션); null이면 부여 시점 기준 활성"
            }
          ],
          "description": "해지 시각(옵션); null이면 부여 시점 기준 활성"
        }
      },
      "required": [
        "user_id",
        "assigned_by_admin_id",
        "role",
        "assigned_at"
      ],
      "description": "역할 변경/부여를 위한 생성 요청 DTO.\n\n사용자, 행위 관리자, 역할, 시각 등 Prisma discussionboard_role_assignment의 생성 요구와 일치합니다."
    },
    "IDiscussionboardRoleAssignment.IUpdate": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the user whose role is being updated. This refers to the column user_id in discussionboard_role_assignment and is required to track which user is the subject of role escalation or demotion.\n\nThis field maintains referential integrity and connects to the user entity for privilege management."
        },
        "assigned_by_admin_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the admin user who is performing the update action. Refers to assigned_by_admin_id column in discussionboard_role_assignment and is used for full audit trail of role changes.\n\nEnsures the action is attributable and supports compliance reporting."
        },
        "role": {
          "type": "string",
          "description": "The new role to be assigned to the user. This property corresponds to the role column in discussionboard_role_assignment and should be one of 'user', 'moderator', or 'admin'.\n\nDictates the permissions granted as a result of the assignment."
        },
        "assigned_at": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp for when the new role assignment takes effect. Linked to assigned_at in discussionboard_role_assignment and should respect ISO 8601 format.\n\nCritical for temporal queries and compliance."
        },
        "revoked_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the role assignment was revoked, if applicable. Nullable – left null for currently active assignments.\n\nSupports role demotion, assignment lifecycle management, and compliance reporting."
            },
            {
              "type": "null"
            }
          ],
          "description": "The timestamp when the role assignment was revoked, if applicable. Nullable – left null for currently active assignments.\n\nSupports role demotion, assignment lifecycle management, and compliance reporting."
        }
      },
      "required": [
        "user_id",
        "assigned_by_admin_id",
        "role",
        "assigned_at"
      ],
      "description": "Update specification for discussionboard_role_assignment records.\n\nCorresponds to mutable fields in Prisma's discussionboard_role_assignment model and is used to record changes in role privilege, admin attribution, timing, and status. For example, used when revoking or changing a user's role by an administrator."
    },
    "IDiscussionboardOrganization.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number for paginated requests. Starts at 1.\n\nRequired for navigating through large organization listings."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "The number of records to return per page. Typically capped by default (e.g., 50).\n\nSupports pagination for scalable queries."
        },
        "name": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional filter for organization name. Implements query/indexing convenience when searching for organizations by label.\n\nSupports partial match/search UI."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional filter for organization name. Implements query/indexing convenience when searching for organizations by label.\n\nSupports partial match/search UI."
        },
        "created_at_from": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Optional minimum (inclusive) creation timestamp for filtering records.\n\nUseful for range/date filtering in analytics or audit UIs."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional minimum (inclusive) creation timestamp for filtering records.\n\nUseful for range/date filtering in analytics or audit UIs."
        },
        "created_at_to": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Optional maximum (inclusive) creation timestamp for filtering records.\n\nAllows users to constrain results to a date range when querying organizations."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional maximum (inclusive) creation timestamp for filtering records.\n\nAllows users to constrain results to a date range when querying organizations."
        }
      },
      "required": [
        "page",
        "limit"
      ],
      "description": "Request object for searching, paginating, and filtering discussionboard_organization records.\n\nRepresents query parameters for batch organization search, supporting name-based, date-range, and paginated queries as found in admin tools and compliance dashboards."
    },
    "IPageIDiscussionboardOrganization": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardOrganization"
          },
          "description": "Array of organization records for the current page."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Paginated result set for discussionboard_organization list operations.\n\nImplements standard pattern for records with a pagination summary and entity data array. Designed for platform-scale admin UIs, analytics, and integration scenarios."
    },
    "IDiscussionboardOrganization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique primary key identifier for each organization entry. Implements the id column in discussionboard_organization.\n\nEnsures referential and normalization compliance."
        },
        "name": {
          "type": "string",
          "description": "Business name or label of the organization. Represents the name field in discussionboard_organization and is used to group users, boards, or roles under a logical unit.\n\nEnforces uniqueness system-wide and is available for search."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp indicating when the organization entity was created. Tracks historical entries and supports compliance/audit reporting."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for the last modification of the organization entity. Used for admin/audit trails and organization state monitoring."
        }
      },
      "required": [
        "id",
        "name",
        "created_at",
        "updated_at"
      ],
      "description": "Represents an organization entity on the political/economic discussion board platform.\n\nImplements logical user grouping for extensibility and admin/enterprise features. Enforces unique organization names and maintains normalized, atomic records for audit, analytics, and stakeholder reporting."
    },
    "IDiscussionboardOrganization.ICreate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Business name or label for the new organization. This property must be provided and is required to be unique in the platform.\n\nUsed for logical grouping in user and moderation flows."
        }
      },
      "required": [
        "name"
      ],
      "description": "Request payload for creating a new discussionboard_organization entity.\n\nIncludes only fields needed at creation time; timestamps set by system. Used for admin-driven organization onboarding or initial setup."
    },
    "IDiscussionboardOrganization.IUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "New/updated organization name, which must remain unique in the system. Admins use this for correcting or renaming existing organizational entities.\n\nDirectly updates the name column of the organization's record."
        }
      },
      "required": [
        "name"
      ],
      "description": "Payload for updating an existing organization entity's metadata.\n\nUsed in admin UI for renaming, merging, or correcting organizational data. Updates only atomic metadata fields—children (users, boards) are unaffected."
    },
    "IDiscussionboardBoard.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number for paginated board requests (starts at 1). Required in order to navigate to a specific result page."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Number of records per paginated page. Used to control result set size and tune frontend performance."
        },
        "name": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional filter for board name. Allows searching or filtering by board label (e.g., \"Economics\", \"Policy\")."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional filter for board name. Allows searching or filtering by board label (e.g., \"Economics\", \"Policy\")."
        },
        "created_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional filter for board creator. Filters boards by the admin/moderator/user who originated the forum."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional filter for board creator. Filters boards by the admin/moderator/user who originated the forum."
        },
        "is_archived": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Optional filter for finding archived boards. Used for admin tools and lifecycle management—null returns all."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional filter for finding archived boards. Used for admin tools and lifecycle management—null returns all."
        }
      },
      "required": [
        "page",
        "limit"
      ],
      "description": "Request object for listing, searching, and paginating discussionboard_board entities.\n\nEnables navigation, filtering (by label, owner, archived state), and serves as the standard for management tools, analytics, or end-user discovery screens."
    },
    "IPageIDiscussionboardBoard": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardBoard"
          },
          "description": "Subset of boards corresponding to the pagination specification."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Paginated response wrapper for bulk board (discussionboard_board) queries.\n\nImplements the listing pattern across boards for administration and analytics UIs, with meta-data required for frontend pagination."
    },
    "IDiscussionboardBoard": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unambiguous identifier for the board entity. Primary key as defined in Prisma's discussionboard_board.\n\nCritical for FK lookup, admin updates, navigation, and lifecycle management."
        },
        "created_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "User ID of the board's creator. Allows traceability, audit, and accountability for board instantiation and management.\n\nNullable to support legacy scenarios."
            },
            {
              "type": "null"
            }
          ],
          "description": "User ID of the board's creator. Allows traceability, audit, and accountability for board instantiation and management.\n\nNullable to support legacy scenarios."
        },
        "name": {
          "type": "string",
          "description": "Human-readable label of the board (forum). Used throughout UI navigation, search, and analytics, as defined by the name column in discussionboard_board.\n\nEnforces display and logical grouping standards for threads/posts."
        },
        "slug": {
          "type": "string",
          "description": "URL- and API-friendly unique string identifying this board. Enables direct navigation and SEO-friendly URLs. Must be unique per board and should match the slug column in discussionboard_board."
        },
        "description": {
          "type": "string",
          "description": "Short summary describing the board's purpose or intended audience. Sourced from the description column in the schema. Shown in listings and detail views."
        },
        "is_archived": {
          "type": "boolean",
          "description": "Identifies boards that are no longer active but kept for audit or historical reference. Linked to is_archived column in discussionboard_board."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp indicating board creation. Enables sorting, analytics, and historical trace."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp for last metadata update. Supports lifecycle audits, admin review, and UI state updates."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp of soft-deletion if board has been logically removed. Supports compliance, retention, and rollback. Often null for active boards."
            },
            {
              "type": "null"
            }
          ],
          "description": "Timestamp of soft-deletion if board has been logically removed. Supports compliance, retention, and rollback. Often null for active boards."
        }
      },
      "required": [
        "id",
        "name",
        "slug",
        "description",
        "is_archived",
        "created_at",
        "updated_at"
      ],
      "description": "Metadata for a discussion board (forum/category) entity.\n\nImplements naming, identification, and audit requirements for navigation, analytics, and admin use-cases. All fields strictly atomic for 3NF compliance; links to other entities via keys only."
    },
    "IDiscussionboardBoard.ICreate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Label to assign to the new discussion board. This must be unique per board and is used to display, search, and reference forums."
        },
        "slug": {
          "type": "string",
          "description": "Unique, URL-safe string used for board navigation and API reference. Must be unique across all boards."
        },
        "description": {
          "type": "string",
          "description": "Summary description for the new board, displayed for end-users and in management UIs."
        }
      },
      "required": [
        "name",
        "slug",
        "description"
      ],
      "description": "Payload for creating a new discussionboard_board entity.\n\nUsed by admins or automation to instantiate discussion contexts. Timestamps and state fields are managed by the system."
    },
    "IDiscussionboardBoard.IUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "oneOf": [
            {
              "type": "string",
              "description": "Changed display name for the board. Optional, but if present must be unique. Used for admin corrections, renames, or branding updates."
            },
            {
              "type": "null"
            }
          ],
          "description": "Changed display name for the board. Optional, but if present must be unique. Used for admin corrections, renames, or branding updates."
        },
        "slug": {
          "oneOf": [
            {
              "type": "string",
              "description": "New board slug, if changing the URL-friendly identifier for routing/navigation. Must be unique per board. Optional; not always changed."
            },
            {
              "type": "null"
            }
          ],
          "description": "New board slug, if changing the URL-friendly identifier for routing/navigation. Must be unique per board. Optional; not always changed."
        },
        "description": {
          "oneOf": [
            {
              "type": "string",
              "description": "Revision for the board's description, used by admins or auto-generated UI to reflect board mission/audience. Optional update."
            },
            {
              "type": "null"
            }
          ],
          "description": "Revision for the board's description, used by admins or auto-generated UI to reflect board mission/audience. Optional update."
        },
        "is_archived": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "If set, changes the archive status of the board—inactivating/disabling end-user access, or restoring to active. Used in lifecycle administration."
            },
            {
              "type": "null"
            }
          ],
          "description": "If set, changes the archive status of the board—inactivating/disabling end-user access, or restoring to active. Used in lifecycle administration."
        }
      },
      "description": "Request object for updating board (discussionboard_board) metadata fields. Allows partial or full admin-driven revision for name, slug, description, and archival status, supporting board lifecycle and audit flows.",
      "required": []
    },
    "IDiscussionboardBoardSettings.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Pagination control: page number (base 1). Required for scalable administration UIs and audits."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "Pagination control: maximum number of records per page (enforced at application level)."
        },
        "board_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional board identifier for filtering settings records by parent board."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional board identifier for filtering settings records by parent board."
        },
        "modified_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter for settings modified by specific user/admin; e.g., for audits or compliance review."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter for settings modified by specific user/admin; e.g., for audits or compliance review."
        },
        "settings_version": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "description": "Optional version number for filtering by configuration revision. Supports rollback/version analysis UIs."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional version number for filtering by configuration revision. Supports rollback/version analysis UIs."
        }
      },
      "required": [
        "page",
        "limit"
      ],
      "description": "Request schema for listing/searching board settings (discussionboard_board_settings). Supports filtering by board, modifier, settings revision, and full pagination for admin/analytics tools."
    },
    "IPageIDiscussionboardBoardSettings": {
      "type": "object",
      "description": "Paging container for board settings retrieval results. Derived from platform-wide settings and per-board configuration audit trails. Always includes pagination metadata and a list of board settings result objects.\n\nSee business context in discussionboard_board_settings for most use cases: batch settings listing, admin config review, settings audit/compliance, or rollback snapshot navigation.",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Pagination and meta-information about the settings list.\n\nIncludes current page, limit, total records, and page count."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IBoardSettings"
          },
          "description": "List of board settings records for this page/result.\n\nSee IBoardSettings for full structure."
        }
      },
      "required": [
        "pagination",
        "data"
      ]
    },
    "IBoardSettings": {
      "type": "object",
      "description": "Discussion board settings/configuration model. Implements audit/compliance and granular platform/board configuration as described in the discussionboard_board_settings Prisma schema.\n\nRepresents a single configuration version for a board—immutable after creation. Used for feature toggles, permission flags, content policy markers, and versioning/audit tracking.\n\nCommonly used for board admin panels, compliance review, or rollback/version selection in board settings flow.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the board settings record (UUID).\nAtomic, guaranteed unique for every version/instance."
        },
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "Foreign key referencing the associated board (UUID).\nNull means global settings, otherwise links to a board for scoping."
        },
        "modified_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "User who last modified/created this settings record (UUID).\nNullable for system-generated or legacy records."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "User who last modified/created this settings record (UUID).\nNullable for system-generated or legacy records."
            }
          ],
          "description": "User who last modified/created this settings record (UUID).\nNullable for system-generated or legacy records."
        },
        "can_users_post": {
          "type": "boolean",
          "description": "Feature toggle for general user posting (true if allowed, false for mod/admin only).\nCritical for public/private/community configuration; defaults are board-specific."
        },
        "default_topic_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "References the default topic for new threads (UUID).\nNull if none set."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "References the default topic for new threads (UUID).\nNull if none set."
            }
          ],
          "description": "References the default topic for new threads (UUID).\nNull if none set."
        },
        "min_post_length": {
          "type": "integer",
          "description": "Minimum character count for posts in this board. Enforced server-side. Typically enforced to values such as 20."
        },
        "max_post_length": {
          "type": "integer",
          "description": "Maximum allowed character count for posts—enforced by app and storage layer. Board-level override possible. Example constraint: 10000."
        },
        "allow_image_uploads": {
          "type": "boolean",
          "description": "Whether this board allows image uploads in posts. Controls frontend and file handling logic; enforced at content ingest."
        },
        "allow_file_attachments": {
          "type": "boolean",
          "description": "Enables file attachments in posts for this board. Used for per-board or global file upload policies."
        },
        "settings_version": {
          "type": "integer",
          "description": "Version number of this settings block—incremented on every change or major edit. Used for audit and rollback."
        },
        "effective_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for when this version of the settings becomes effective (ISO8601). Supports future-dated deployment or retroactive audit."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Record creation timestamp (ISO8601); immutable after insertion."
        }
      },
      "required": [
        "id",
        "board_id",
        "can_users_post",
        "min_post_length",
        "max_post_length",
        "allow_image_uploads",
        "allow_file_attachments",
        "settings_version",
        "effective_at",
        "created_at"
      ]
    },
    "IBoardSettings.ICreate": {
      "type": "object",
      "description": "Request payload for creating a new board settings record. Derived from the discussionboard_board_settings table—see detailed business rules for required and optional field rules.\n\nCreates a new settings version for a target board (or platform, if board_id is null), initializing configuration flags and policy values. Used in admin/board manager flows for onboarding, board setup, or bulk config import.\n\nAll fields are validated per business logic. Only allowed to be created by authorized users, typically system admin or board managers.",
      "properties": {
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "Target board for settings, required for per-board config; null for platform-level."
        },
        "modified_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "User setting up this version; null for system processes."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "User setting up this version; null for system processes."
            }
          ],
          "description": "User setting up this version; null for system processes."
        },
        "can_users_post": {
          "type": "boolean",
          "description": "Whether users (non-moderator/admin) can create posts. Initial default for community boards is true."
        },
        "default_topic_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional default topic for new threads, null if not set."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional default topic for new threads, null if not set."
            }
          ],
          "description": "Optional default topic for new threads, null if not set."
        },
        "min_post_length": {
          "type": "integer",
          "description": "Minimum allowed post length for this configuration block."
        },
        "max_post_length": {
          "type": "integer",
          "description": "Maximum allowed post length for this configuration block."
        },
        "allow_image_uploads": {
          "type": "boolean",
          "description": "Toggle for image-upload enablement by board policy."
        },
        "allow_file_attachments": {
          "type": "boolean",
          "description": "Toggle for allowing file attachments by board policy."
        },
        "settings_version": {
          "type": "integer",
          "description": "Version number for this settings addition. Usually 1 for first config, incremented for each board change."
        },
        "effective_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO8601 timestamp for when config becomes active (may be future/retroactive)."
        }
      },
      "required": [
        "board_id",
        "can_users_post",
        "min_post_length",
        "max_post_length",
        "allow_image_uploads",
        "allow_file_attachments",
        "settings_version",
        "effective_at"
      ]
    },
    "IBoardSettings.IUpdate": {
      "type": "object",
      "description": "Payload for updating a board settings record. Allows partial/full update of settings fields—metadata like created_at or id is not patchable. Aligned with discussionboard_board_settings model.\n\nUsed for admin/manager adjustment to board policy, major config change, or bugfix patch. Only patchable by authorized users; most updates require a version increment. Tracked via audit log/meta fields.",
      "properties": {
        "modified_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "ID of user making this update; null for system automation."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "ID of user making this update; null for system automation."
            }
          ],
          "description": "ID of user making this update; null for system automation."
        },
        "can_users_post": {
          "type": "boolean",
          "description": "Whether to allow user posts after update (toggle)."
        },
        "default_topic_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "New default topic, null disables."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "New default topic, null disables."
            }
          ],
          "description": "New default topic, null disables."
        },
        "min_post_length": {
          "type": "integer",
          "description": "Updated minimum allowed post length."
        },
        "max_post_length": {
          "type": "integer",
          "description": "Updated maximum allowed post length."
        },
        "allow_image_uploads": {
          "type": "boolean",
          "description": "Enable/disable image upload after update."
        },
        "allow_file_attachments": {
          "type": "boolean",
          "description": "Enable/disable file attachment after update."
        },
        "settings_version": {
          "type": "integer",
          "description": "New version number after update; must be incremented from prior version."
        },
        "effective_at": {
          "type": "string",
          "format": "date-time",
          "description": "New effective date for policy. ISO8601 timestamp."
        }
      },
      "required": []
    },
    "IBoardTopic.IRequest": {
      "type": "object",
      "description": "Filtering, searching, and pagination request payload for board topic batch retrieval.\n\nUsed for admin/board moderation panels and topic management/search screens; supports advanced per-board, per-topic, fuzzy, and status filtering on names or content.\n\nPagination meta is required for nearly all batch retrieval endpoints. See discussionboard_topic ERD for filterable properties.",
      "properties": {
        "board_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Restricts result to a single board's topics (if set), or all boards (if null)."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Restricts result to a single board's topics (if set), or all boards (if null)."
            }
          ],
          "description": "Restricts result to a single board's topics (if set), or all boards (if null)."
        },
        "name": {
          "oneOf": [
            {
              "type": "string",
              "description": "Full or partial match filter on topic name (case insensitive, supports LIKE/fuzzy)."
            },
            {
              "type": "null",
              "description": "Full or partial match filter on topic name (case insensitive, supports LIKE/fuzzy)."
            }
          ],
          "description": "Full or partial match filter on topic name (case insensitive, supports LIKE/fuzzy)."
        },
        "slug": {
          "oneOf": [
            {
              "type": "string",
              "description": "Unique slug filter—exact match within board."
            },
            {
              "type": "null",
              "description": "Unique slug filter—exact match within board."
            }
          ],
          "description": "Unique slug filter—exact match within board."
        },
        "is_deleted": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Restricts to (not) soft-deleted topics as needed."
            },
            {
              "type": "null",
              "description": "Restricts to (not) soft-deleted topics as needed."
            }
          ],
          "description": "Restricts to (not) soft-deleted topics as needed."
        },
        "page": {
          "type": "integer",
          "description": "Page number for paging controls. Starts at 1."
        },
        "limit": {
          "type": "integer",
          "description": "Pagination records per page (e.g., 20, 50)."
        }
      },
      "required": []
    },
    "IPageIBoardTopic": {
      "type": "object",
      "description": "Paging wrapper for topic list output. Includes pagination meta and matching topic result records.\n\nImplements 'list/search topics' endpoint result format. Supports admin-side and general consumption flows for board topic screens.",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Current pagination meta—required for UI and flow control."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IBoardTopic"
          },
          "description": "List of topics included in this result page, see IBoardTopic for structure."
        }
      },
      "required": [
        "pagination",
        "data"
      ]
    },
    "IBoardTopic": {
      "type": "object",
      "description": "Board topic metadata entity model as defined in the discussionboard_topic Prisma schema.\n\nCaptures topic reference for thread classification in board forums. Used mainly for presenting options to thread creation UIs, searching, filtering, and auditing topic categories.\n\nBusiness constraints: each topic is board-scoped, must have unique name+slug within board, and soft deletes must not conflict with current topic usage or history maintenance.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique topic identifier row (UUID PK); atomic non-meaningful."
        },
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "Board this topic applies to (FK/pointer to parent board).\nCritical for board/forum topic trees."
        },
        "name": {
          "type": "string",
          "description": "Topic name for search/select/management, not unique system-wide but unique within board/scope."
        },
        "slug": {
          "type": "string",
          "description": "URL-safe slug for direct navigation and unique within board context."
        },
        "description": {
          "type": "string",
          "description": "Topic summary for admins and search/UX, also used for visibility rationale. May be empty."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO8601 timestamp for topic creation (audit/traceable)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO8601 timestamp when topic last modified."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Soft-deletion removal time, if currently deleted/null if active topic."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Soft-deletion removal time, if currently deleted/null if active topic."
            }
          ],
          "description": "Soft-deletion removal time, if currently deleted/null if active topic."
        }
      },
      "required": [
        "id",
        "board_id",
        "name",
        "slug",
        "description",
        "created_at",
        "updated_at"
      ]
    },
    "IBoardTopic.ICreate": {
      "type": "object",
      "description": "Request payload for creating a new board topic. Enforces required and optional field structure per discussionboard_topic schema constraints.\n\nCreates a typed forum category for use in thread grouping, search, and board organization. For admin-level and board manager operations to maintain taxonomy/categorization structures.\n\nBusiness rules require unique (name,slug) within board, must link to existing board, and non-blank strings.",
      "properties": {
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "Assign board this topic belongs to—MUST reference valid board."
        },
        "name": {
          "type": "string",
          "description": "Name of the topic, unique in board."
        },
        "slug": {
          "type": "string",
          "description": "Unique URL slug for topic navigation, must be unique for this board."
        },
        "description": {
          "type": "string",
          "description": "Description/summary of topic; used for context and search filtering."
        }
      },
      "required": [
        "board_id",
        "name",
        "slug",
        "description"
      ]
    },
    "IBoardTopic.IUpdate": {
      "type": "object",
      "description": "Editing payload for an existing board topic. Allows updating name, slug, description, and possibly board reference (admin-only).\n\nUsed in admin flows for correcting errors, merging, or rationalizing board topic structure. Soft deletes handled in separate update or delete call, not via this type.\n\nAll changes subject to business-level validation and unique constraints.",
      "properties": {
        "name": {
          "type": "string",
          "description": "New display name for the topic."
        },
        "slug": {
          "type": "string",
          "description": "New URL/navigation slug for topic."
        },
        "description": {
          "type": "string",
          "description": "Updated summary/context for this category."
        }
      },
      "required": []
    },
    "IBoardArchive.IRequest": {
      "type": "object",
      "description": "Search/filter/pagination request payload for board archival snapshot records.\n\nUsed for audit trails, admin/archive management, rollback candidate lists, and compliance reconciling of board state/history.\n\nSupports filtering by board, user, time, and name/description details with pagination controls. All field constraints per board archival snapshot model definition.",
      "properties": {
        "board_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "If given, restricts to archives for one board."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "If given, restricts to archives for one board."
            }
          ],
          "description": "If given, restricts to archives for one board."
        },
        "archived_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "If supplied, filters by who archived (moderator/admin-user id)."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "If supplied, filters by who archived (moderator/admin-user id)."
            }
          ],
          "description": "If supplied, filters by who archived (moderator/admin-user id)."
        },
        "archived_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Filters for archive snapshots at/timestamp (ISO8601)."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Filters for archive snapshots at/timestamp (ISO8601)."
            }
          ],
          "description": "Filters for archive snapshots at/timestamp (ISO8601)."
        },
        "name_snapshot": {
          "oneOf": [
            {
              "type": "string",
              "description": "Filters archived boards for name snapshot (partial/fuzzymatch permitted by backend)."
            },
            {
              "type": "null",
              "description": "Filters archived boards for name snapshot (partial/fuzzymatch permitted by backend)."
            }
          ],
          "description": "Filters archived boards for name snapshot (partial/fuzzymatch permitted by backend)."
        },
        "slug_snapshot": {
          "oneOf": [
            {
              "type": "string",
              "description": "Filter on archived board's slug value at time."
            },
            {
              "type": "null",
              "description": "Filter on archived board's slug value at time."
            }
          ],
          "description": "Filter on archived board's slug value at time."
        },
        "page": {
          "type": "integer",
          "description": "Results page number (starts at 1 or 0 depending on implementation)."
        },
        "limit": {
          "type": "integer",
          "description": "Number of records per page returned."
        }
      },
      "required": []
    },
    "IPageIBoardArchive": {
      "type": "object",
      "description": "Paging wrapper output for batch/filtered archival board snapshot retrieval operations.\n\nAlways includes paging meta and board archive snapshot data for present page. Used for audit, rollback provisioning, and compliance reporting.",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Current pagination metadata, matches request page/limit; see IPage.IPagination for structure."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IBoardArchive"
          },
          "description": "Array of board archive snapshots for this page; see IBoardArchive for details."
        }
      },
      "required": [
        "pagination",
        "data"
      ]
    },
    "IBoardArchive": {
      "type": "object",
      "description": "Board archive snapshot—immutable record of board metadata captured for audit, rollback, or compliance reference as specified in the 'discussionboard_board_archive' entity.\n\nContains board state as at time of archival, including responsible user, and is used for restoring deprecated boards, rollback of incident events, and audit trail verification. Each snapshot is atomic, 1:1 with archive insertion time, and unique for recovery operations.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique board archive entry identifier (UUID PK)."
        },
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "FK to archived board (not necessarily active in system); supports audit/rollback workflows."
        },
        "archived_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "References moderator/admin user who archived this board (not the board creator). Critical for accountability/audit."
        },
        "archived_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (ISO8601) when snapshot/archive event occurred."
        },
        "name_snapshot": {
          "type": "string",
          "description": "Board name at time of archive—used for rollback, version display, and compliance."
        },
        "description_snapshot": {
          "type": "string",
          "description": "Board description at time of archive—immutable for this event."
        },
        "slug_snapshot": {
          "type": "string",
          "description": "Board slug value as captured on this archive event; critical for rollback/index reconstruction."
        }
      },
      "required": [
        "id",
        "board_id",
        "archived_by_user_id",
        "archived_at",
        "name_snapshot",
        "description_snapshot",
        "slug_snapshot"
      ]
    },
    "IBoardArchive.ICreate": {
      "type": "object",
      "properties": {
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier of the board being archived at this moment.\n\nThis references the original discussion board (discussionboard_board.id) whose current state is being captured for rollback, audit, and historicization.\n\nRequired for traceability; must point to a board that exists and is eligible for archival in terms of system logic and business rules."
        },
        "archived_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier for the user (admin or moderator) performing the archival.\n\nReferences the user who is responsible for the archive snapshot.\n\nUsed for audit, rollback tracking, and compliance. Must exist as a valid user id with elevated permissions."
        },
        "archived_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (in ISO 8601 format) of when the board was archived.\n\nRepresents the exact point in time at which the metadata snapshot is taken for compliance and system rollback."
        },
        "name_snapshot": {
          "type": "string",
          "description": "Snapshot of the board's display name at the time of archive.\n\nA human-readable label, as shown in the main board list and navigation.\n\nThis captures the board name as it was at the time of archival for rollback and audit history."
        },
        "description_snapshot": {
          "type": "string",
          "description": "Snapshot of the board's description at the time of archival.\n\nDescribes the purpose or content focus of the board as seen by users at time of archival. For example, 'A forum for global economic discussions.'"
        },
        "slug_snapshot": {
          "type": "string",
          "description": "Snapshot of the board's unique, URL-safe slug at time of archival.\n\nUsed for later restoration or reference to archived boards.\n\nRepresents the URL segment or unique identifier for navigation and cross-reference."
        }
      },
      "required": [
        "board_id",
        "archived_by_user_id",
        "archived_at",
        "name_snapshot",
        "description_snapshot",
        "slug_snapshot"
      ],
      "description": "Payload for creating a new board archive record (archival snapshot).\n\nImplements requirements for capturing the canonical state of the board, who performed the archival, and the board's identifying information at the moment of archive. Adheres to normalized historical event modeling to support compliance, rollback, and audit scenarios."
    },
    "IDiscussionboardBoardArchive.IUpdate": {
      "type": "object",
      "properties": {
        "name_snapshot": {
          "type": "string",
          "description": "Updated human-readable board name at time of archival.\n\nUsed for correcting historical records or rollback preview."
        },
        "description_snapshot": {
          "type": "string",
          "description": "Corrected or additional information about the board's description as of the archived moment.\n\nFor audit and compliance scenarios."
        },
        "slug_snapshot": {
          "type": "string",
          "description": "Revised or fixed unique slug identifier as captured in the archived snapshot."
        },
        "archived_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "If needed, update the reference to the user who performed the archival.\n\nFor use in assigning the archive to a different moderator/admin in data correction flows."
        },
        "archived_at": {
          "type": "string",
          "format": "date-time",
          "description": "The corrected/actual timestamp at which the archival was performed.\n\nUsed if the original archival time was incorrectly recorded or requires auditing correction."
        }
      },
      "required": [],
      "description": "Payload for updating a board archive snapshot record.\n\nAllows corrections to the snapshot for audit and compliance, referencing the core fields from the board archive schema."
    },
    "IDiscussionboardBoardArchive": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier for this board archive record.\n\nGlobally unique, enables multiple archive events for a single board. Used for referencing this archive snapshot in audit and rollback."
        },
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "Reference to the ID of the original discussion board being archived.\n\nRetrieved from discussionboard_board.id. Ensures normalized, referential integrity for the archived entity."
        },
        "archived_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "The user who performed this archival action.\n\nPoints to the act of snapshotting a board (by admin or moderator), enabling full audit traceability and rollback accountability."
        },
        "archived_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp recording when the board archive snapshot was taken.\n\nFollows ISO 8601 date-time format. This is the immutable event time for compliance/audit purposes."
        },
        "name_snapshot": {
          "type": "string",
          "description": "The board's display name as of the archive's creation.\n\nCaptured for rollback, compliance, or reactivation workflows."
        },
        "description_snapshot": {
          "type": "string",
          "description": "The board's full description field as of the archived snapshot.\n\nUsed for preview/restoration and historical analysis."
        },
        "slug_snapshot": {
          "type": "string",
          "description": "The board's slug (URL-safe segment) as of the archive, for navigation and record linkage."
        }
      },
      "required": [
        "id",
        "board_id",
        "archived_by_user_id",
        "archived_at",
        "name_snapshot",
        "description_snapshot",
        "slug_snapshot"
      ],
      "description": "A complete board archive snapshot entry. Represents a historical record of all display and reference fields for a board at the moment it was archived, as well as archival agent and timestamp.\n\nStrictly immutable after initial creation, used for full rollback and compliance/audit logics."
    },
    "IDiscussionboardThread.IRequest": {
      "type": "object",
      "properties": {
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "Filter: Only threads for the specified board (board_id).\n\nUsed when retrieving all threads within a particular discussion board for content feeds or navigation."
        },
        "topic_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter: Only threads associated with the given topic ID.\n\nNullable. When set, restricts results to threads belonging to a particular board-level topic."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only threads associated with the given topic ID.\n\nNullable. When set, restricts results to threads belonging to a particular board-level topic."
        },
        "created_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter: Only threads created by the user with the given UUID.\n\nSupports finding all threads authored by a particular user."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only threads created by the user with the given UUID.\n\nSupports finding all threads authored by a particular user."
        },
        "is_pinned": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Filter: Only threads marked as pinned (important/announcement etc).\n\nNullable, enabling filter for pinned or non-pinned threads."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only threads marked as pinned (important/announcement etc).\n\nNullable, enabling filter for pinned or non-pinned threads."
        },
        "is_locked": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Filter: Only threads locked for posting (true) or unlocked (false).\n\nOptional. Used for moderation workflows and UX filtering."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only threads locked for posting (true) or unlocked (false).\n\nOptional. Used for moderation workflows and UX filtering."
        },
        "is_deleted": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Filter: Only soft-deleted threads (true), only active (false), or all (null).\n\nModerators/admins can retrieve deleted content, regular users only active."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only soft-deleted threads (true), only active (false), or all (null).\n\nModerators/admins can retrieve deleted content, regular users only active."
        },
        "min_created_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Filter: Only threads created after this datetime (ISO8601)."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only threads created after this datetime (ISO8601)."
        },
        "max_created_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Filter: Only threads created before this datetime (ISO8601)."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only threads created before this datetime (ISO8601)."
        },
        "title_keyword": {
          "oneOf": [
            {
              "type": "string",
              "description": "Full text or fuzzy search for threads whose titles match the supplied keyword/substring."
            },
            {
              "type": "null"
            }
          ],
          "description": "Full text or fuzzy search for threads whose titles match the supplied keyword/substring."
        },
        "order_by": {
          "oneOf": [
            {
              "const": "created_at",
              "description": "Sort order for result set. Allowed fields: created_at, updated_at, title, pinned, locked.\n\nDefaults to created_at, descending. Used to control ordering/pagination in bulk retrievals."
            },
            {
              "const": "updated_at",
              "description": "Sort order for result set. Allowed fields: created_at, updated_at, title, pinned, locked.\n\nDefaults to created_at, descending. Used to control ordering/pagination in bulk retrievals."
            },
            {
              "const": "title",
              "description": "Sort order for result set. Allowed fields: created_at, updated_at, title, pinned, locked.\n\nDefaults to created_at, descending. Used to control ordering/pagination in bulk retrievals."
            },
            {
              "const": "pinned",
              "description": "Sort order for result set. Allowed fields: created_at, updated_at, title, pinned, locked.\n\nDefaults to created_at, descending. Used to control ordering/pagination in bulk retrievals."
            },
            {
              "const": "locked",
              "description": "Sort order for result set. Allowed fields: created_at, updated_at, title, pinned, locked.\n\nDefaults to created_at, descending. Used to control ordering/pagination in bulk retrievals."
            },
            {
              "type": "null"
            }
          ],
          "description": "Sort order for result set. Allowed fields: created_at, updated_at, title, pinned, locked.\n\nDefaults to created_at, descending. Used to control ordering/pagination in bulk retrievals."
        },
        "order_direction": {
          "oneOf": [
            {
              "const": "asc",
              "description": "Sort direction for result set. Allowed: asc (ascending), desc (descending).\n\nDefault is desc. Used to reverse or customize list ordering."
            },
            {
              "const": "desc",
              "description": "Sort direction for result set. Allowed: asc (ascending), desc (descending).\n\nDefault is desc. Used to reverse or customize list ordering."
            },
            {
              "type": "null"
            }
          ],
          "description": "Sort direction for result set. Allowed: asc (ascending), desc (descending).\n\nDefault is desc. Used to reverse or customize list ordering."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "description": "Pagination: Which page to return (starting from 1).\n\nOptional; default 1."
            },
            {
              "type": "null"
            }
          ],
          "description": "Pagination: Which page to return (starting from 1).\n\nOptional; default 1."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "description": "Pagination: Max records per page (default: 20, hard limit: 100).\n\nPrevents overload/DoS via large requests."
            },
            {
              "type": "null"
            }
          ],
          "description": "Pagination: Max records per page (default: 20, hard limit: 100).\n\nPrevents overload/DoS via large requests."
        }
      },
      "required": [],
      "description": "Request object for listing and filtering discussion threads.\n\nSupports flexible search, filter, sort, and pagination on the discussionboard_thread entity."
    },
    "IPageIDiscussionboardThread": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardThread"
          },
          "description": "The list of thread entity objects returned for the requested page/filter.\n\nContains at most the number of entries requested by 'limit', with length 0 for final or empty result set."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Paginated result of discussion thread entities.\n\nEncapsulates threads and pagination meta for UI navigation and further API queries."
    },
    "IDiscussionboardThread": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the thread.\n\nReferences the PK in the discussionboard_thread table and is used for navigation, edit, and archive workflows."
        },
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "Reference to the parent board where this thread is posted.\n\nEstablishes belonging and is critical for content scoping and navigation."
        },
        "topic_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Reference to the board topic for this thread (nullable for threads with no specific topic).\n\nAllows filtering and topic navigation."
            },
            {
              "type": "null"
            }
          ],
          "description": "Reference to the board topic for this thread (nullable for threads with no specific topic).\n\nAllows filtering and topic navigation."
        },
        "created_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "The user account UUID of the thread creator.\n\nFacilitates author display, search, and moderation permission checks."
        },
        "deleted_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "The user UUID of the person who deleted/soft-deleted this thread (nullable if not deleted).\n\nUsed to track who deleted the thread for audit and compliance."
            },
            {
              "type": "null"
            }
          ],
          "description": "The user UUID of the person who deleted/soft-deleted this thread (nullable if not deleted).\n\nUsed to track who deleted the thread for audit and compliance."
        },
        "title": {
          "type": "string",
          "description": "Display title for the thread (user-provided).\n\nShown in board and topic views, and supports search functionality."
        },
        "slug": {
          "type": "string",
          "description": "Unique, URL-safe identifier for the thread within its board.\n\nEnables SEO-friendly navigation and direct linking."
        },
        "is_pinned": {
          "type": "boolean",
          "description": "Whether the thread is marked as pinned by moderators/admins.\n\nPinned threads appear at the top of board feed and denote important announcements."
        },
        "is_locked": {
          "type": "boolean",
          "description": "Whether this thread is locked from new posts/comments (moderation control).\n\nUsed by board and system moderators to restrict further replies or edits."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "Soft-deletion flag for the thread. True if deleted, used for compliance/recovery/audit."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (ISO8601) when the thread was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (ISO8601) last time the thread was updated (by edit/lock/pin)."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Optional timestamp for when the thread was deleted.\n\nNull if not deleted. Used for compliance retention."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional timestamp for when the thread was deleted.\n\nNull if not deleted. Used for compliance retention."
        }
      },
      "required": [
        "id",
        "board_id",
        "created_by_user_id",
        "title",
        "slug",
        "is_pinned",
        "is_locked",
        "is_deleted",
        "created_at",
        "updated_at"
      ],
      "description": "Discussion thread entity schema.\n\nRepresents all metadata and relation fields for a given thread, tied to a board and optionally to a topic. Used for displaying, editing, moderating, and archiving threads."
    },
    "IDiscussionboardThread.ICreate": {
      "type": "object",
      "properties": {
        "board_id": {
          "type": "string",
          "format": "uuid",
          "description": "Parent board's ID to create the thread in. Must reference an existing, non-archived board.\n\nRequired for placement and access control."
        },
        "topic_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional topic ID for further categorization of this thread under a board topic.\n\nNull if no topic. Must reference a valid topic for the specified board."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional topic ID for further categorization of this thread under a board topic.\n\nNull if no topic. Must reference a valid topic for the specified board."
        },
        "title": {
          "type": "string",
          "description": "Display title for the new thread.\n\nShown in navigation and search lists. Application layer may enforce length."
        },
        "slug": {
          "type": "string",
          "description": "Unique, URL-safe identifier for this thread within the board.\n\nMust be unique for the board."
        },
        "is_pinned": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Whether to pin the thread at creation (admin/mod only, else false).\n\nDefaults to false if not provided."
            },
            {
              "type": "null"
            }
          ],
          "description": "Whether to pin the thread at creation (admin/mod only, else false).\n\nDefaults to false if not provided."
        },
        "is_locked": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Whether to lock the thread at creation (admin/mod only, else false).\n\nDefaults to false if not provided."
            },
            {
              "type": "null"
            }
          ],
          "description": "Whether to lock the thread at creation (admin/mod only, else false).\n\nDefaults to false if not provided."
        }
      },
      "required": [
        "board_id",
        "title",
        "slug"
      ],
      "description": "Payload for creating a new discussion thread.\n\nSpecifies board context, thread details, and optional initial topic and pin/lock state."
    },
    "IDiscussionboardThread.IUpdate": {
      "type": "object",
      "properties": {
        "topic_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Update the topic association for this thread. Must reference a valid topic for the thread's board. Nullable to remove topic."
            },
            {
              "type": "null"
            }
          ],
          "description": "Update the topic association for this thread. Must reference a valid topic for the thread's board. Nullable to remove topic."
        },
        "title": {
          "type": "string",
          "description": "Edit the display title of the thread. Application enforces length/validation."
        },
        "slug": {
          "type": "string",
          "description": "Update the unique slug for this thread within the board. Must be unique per board, and URL/path valid."
        },
        "is_pinned": {
          "type": "boolean",
          "description": "Set or unset the pinned status of this thread (moderation/admin workflows)."
        },
        "is_locked": {
          "type": "boolean",
          "description": "Set or unset the locked status of this thread (moderation/admin workflows)."
        }
      },
      "required": [],
      "description": "Payload for updating thread metadata and moderation status.\n\nEnables editing of title, topic, pinned/locked flags, and slug."
    },
    "IDiscussionboardPost.IRequest": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "string",
          "format": "uuid",
          "description": "Filter: Only posts from the specified thread.\n\nFor displaying posts within a single thread."
        },
        "created_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter: Only posts authored by the user with this UUID.\n\nUsed for user histories or moderation review."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only posts authored by the user with this UUID.\n\nUsed for user histories or moderation review."
        },
        "is_edited": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Filter by edited/not-edited status."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter by edited/not-edited status."
        },
        "is_deleted": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Filter: Only deleted (true), only active (false), or all (null) posts.\n\nRegular users typically see only is_deleted == false; elevated roles can see all."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only deleted (true), only active (false), or all (null) posts.\n\nRegular users typically see only is_deleted == false; elevated roles can see all."
        },
        "min_created_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Filter: Only posts created on/after this datetime (ISO8601)."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only posts created on/after this datetime (ISO8601)."
        },
        "max_created_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Filter: Only posts created before this datetime (ISO8601)."
            },
            {
              "type": "null"
            }
          ],
          "description": "Filter: Only posts created before this datetime (ISO8601)."
        },
        "content_keyword": {
          "oneOf": [
            {
              "type": "string",
              "description": "Full text, substring, or fuzzy search for posts whose content matches this keyword/substring."
            },
            {
              "type": "null"
            }
          ],
          "description": "Full text, substring, or fuzzy search for posts whose content matches this keyword/substring."
        },
        "order_by": {
          "oneOf": [
            {
              "const": "created_at",
              "description": "Sort order for results. Allowed: created_at, updated_at."
            },
            {
              "const": "updated_at",
              "description": "Sort order for results. Allowed: created_at, updated_at."
            },
            {
              "type": "null"
            }
          ],
          "description": "Sort order for results. Allowed: created_at, updated_at."
        },
        "order_direction": {
          "oneOf": [
            {
              "const": "asc",
              "description": "Sort direction: ascending or descending. Default: desc."
            },
            {
              "const": "desc",
              "description": "Sort direction: ascending or descending. Default: desc."
            },
            {
              "type": "null"
            }
          ],
          "description": "Sort direction: ascending or descending. Default: desc."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "description": "Pagination: which page index to return (starts from 1)."
            },
            {
              "type": "null"
            }
          ],
          "description": "Pagination: which page index to return (starts from 1)."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "description": "Pagination: max results per page (default: 20, maximum: 100)."
            },
            {
              "type": "null"
            }
          ],
          "description": "Pagination: max results per page (default: 20, maximum: 100)."
        }
      },
      "required": [
        "thread_id"
      ],
      "description": "Search, filter, pagination, and sorting options for post listing APIs.\n\nUsed to control retrieval of posts matching specific criteria or in bulk views."
    },
    "IPageIDiscussionboardPost": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardPost"
          },
          "description": "The posts returned for the search/pagination request."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Paginated result of discussion posts returned by thread, user, or search. Includes both post data and pagination meta."
    },
    "IDiscussionboardPost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Primary key and unique identifier for this post."
        },
        "thread_id": {
          "type": "string",
          "format": "uuid",
          "description": "Reference to the thread this post belongs to."
        },
        "created_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "User who authored this post."
        },
        "deleted_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "User who soft-deleted this post (mod/admin/user). Nullable if not deleted."
            },
            {
              "type": "null"
            }
          ],
          "description": "User who soft-deleted this post (mod/admin/user). Nullable if not deleted."
        },
        "content": {
          "type": "string",
          "description": "Main text content/body of the post."
        },
        "is_edited": {
          "type": "boolean",
          "description": "Flag: true if the post was edited after creation."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "Flag: true if the post is considered deleted (hidden from regular UI)."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the post was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the post was last updated."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when the post was (soft) deleted. Nullable if not deleted."
            },
            {
              "type": "null"
            }
          ],
          "description": "Timestamp when the post was (soft) deleted. Nullable if not deleted."
        }
      },
      "required": [
        "id",
        "thread_id",
        "created_by_user_id",
        "content",
        "is_edited",
        "is_deleted",
        "created_at",
        "updated_at"
      ],
      "description": "Discussion post entity representing an atomic user-contributed message within a thread. Contains all moderation/audit fields and rich metadata for content, author, timestamps, and deletion/audit status."
    },
    "IDiscussionboardPost.ICreate": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "string",
          "format": "uuid",
          "description": "Thread to which the new post belongs. Must exist and be accepting new posts (not locked/archived)."
        },
        "content": {
          "type": "string",
          "description": "Main text body for the post, written by the user. Subject to application validation for length/content type."
        }
      },
      "required": [
        "thread_id",
        "content"
      ],
      "description": "Payload for creating a new discussion post under a thread. User must have access to thread, and content must meet validation rules (length/type)."
    },
    "IDiscussionboardPost.IUpdate": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "콘텐츠 본문입니다. 게시글 내용을 포함하며, 텍스트로 저장됩니다. \n\n게시글 수정/편집시 사용자가 입력할 수 있으며, 길이 제한은 보드 설정의 정책에 따릅니다. 예: 1~10000자.\n\nPrisma discussionboard_post.content 컬럼과 매핑됩니다."
        },
        "is_edited": {
          "type": "boolean",
          "description": "게시글이 최초 등록 이후 수정되었는지 여부를 나타냅니다. 최초 작성 후 한번이라도 수정된 경우 true로 표시합니다.\n\n게시물 업데이트 시 API에서는 true값을 반드시 명시해야 하며, 사용자는 수동 설정하지 않습니다.\n\nPrisma discussionboard_post.is_edited 컬럼과 매핑됩니다."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "해당 게시물이 삭제(소프트 딜리트) 상태인지 나타냅니다. 논리적 삭제 처리 시 true로 관리됩니다.\n\n삭제 액션이나 복구시 업데이트용으로 사용되며, 완전 삭제시에는 해당 row가 데이터베이스에서 제거될 수 있습니다.\n\nPrisma discussionboard_post.is_deleted 컬럼과 매핑됩니다."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "게시글의 삭제 처리(soft delete)가 된 경우 삭제된 시점의 timestamp입니다.\n\n삭제 요청 시 서버에서 자동으로 현재 시간을 기록하거나, 복구할 경우 null로 초기화됩니다.\n\nPrisma discussionboard_post.deleted_at 컬럼과 매핑, nullable입니다."
            },
            {
              "type": "null"
            }
          ],
          "description": "게시글의 삭제 처리(soft delete)가 된 경우 삭제된 시점의 timestamp입니다.\n\n삭제 요청 시 서버에서 자동으로 현재 시간을 기록하거나, 복구할 경우 null로 초기화됩니다.\n\nPrisma discussionboard_post.deleted_at 컬럼과 매핑, nullable입니다."
        }
      },
      "required": [
        "content"
      ],
      "description": "게시글 수정에 사용되는 타입입니다. discussionboard_post 엔터티 테이블(Prisma)에서 본문(content), 수정여부(is_edited), 삭제여부(is_deleted), 삭제시각(deleted_at) 칼럼에 대한 전체 또는 부분 갱신을 지원합니다.\n\n게시글을 부분 혹은 전체 업데이트(수정/삭제/복구) 할 때 사용되며, business rule이나 board 설정에 따라 필드의 허용 범위가 다를 수 있습니다.\n\n모든 필드는 선택적으로 사용될 수 있으며, 업데이트 API에서는 최소 content 필드가 제출되어야 합니다. Prisma discussionboard_post1 테이블의 컬럼 코멘트와 동기화 된 상세 문서가 제공됩니다."
    },
    "IDiscussionboardPostAttachment.IRequest": {
      "type": "object",
      "properties": {
        "post_id": {
          "type": "string",
          "format": "uuid",
          "description": "어떤 게시물에 첨부된 파일 목록을 요청하는지 지정합니다.\n\n게시글 id(UUID)로 검색. discussionboard_post.id 컬럼값에 대응합니다. 미지정시 전체 첨부파일 중 조건 검색."
        },
        "uploaded_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "업로더(첨부파일을 올린 사용자)의 user id(UUID)로 검색할 수 있습니다. discussionboard_user.id와 매핑됩니다. 미지정시 전체에서 검색."
        },
        "filename": {
          "type": "string",
          "description": "파일명(원본명)에 대한 검색 조건입니다. 부분 일치/대소문자 구분 등 검색 정책은 프론트 요청으로 정의. 예: \"보고서.pdf\"."
        },
        "mimetype": {
          "type": "string",
          "description": "파일의 MIME타입 기준 필터. 예: 'image/png', 'application/pdf'. discussionboard_post_attachment.mimetype 컬럼값과 매핑."
        },
        "uploaded_at_from": {
          "type": "string",
          "format": "date-time",
          "description": "업로드일시의 시작 범위로, 이 시점(포함) 이후 첨부파일만 검색."
        },
        "uploaded_at_to": {
          "type": "string",
          "format": "date-time",
          "description": "업로드일시의 종료 범위로, 이 시점(포함) 이전 첨부파일만 검색."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "첨부파일의 삭제여부로, 삭제되지 않은 파일만 조회하려면 false로 지정. 논리삭제(소프트딜리트) 정책이 반영됨."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "페이지 번호(1부터 시작). 페이징용. 지정하지 않으면 1페이지부터 반환."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "페이지당 첨부파일 수. 기본값 20, 최대 100. 클라이언트가 필요 시 명시. 너무 큰 값 지정시 시스템 제한함."
        },
        "sort": {
          "type": "string",
          "description": "정렬 기준(컬럼명 또는 정책명). 예: 'uploaded_at_desc', 'filename_asc'. 구현 정책에 맞춰 핸들러에서 지원."
        }
      },
      "description": "게시글 첨부파일(PATCH) 리스트 요청시 제공되는 검색 및 페이징 파라미터 객체입니다.\n\nPrisma discussionboard_post_attachment 테이블 기반으로 파일 메타데이터를 복합 검색할 때 사용하며, 업로더/파일명/확장자/업로드시각/삭제여부 등 다양한 조건이 조합될 수 있습니다.\n\n리스트 API에서 요청 바디로 전달.",
      "required": []
    },
    "IPageIDiscussionboardPostAttachment": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardPostAttachment"
          },
          "description": "첨부파일 엔티티 리스트입니다. 한 페이지 분량만큼 포함됩니다."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "게시글 첨부파일 리스트/검색 응답용이고, 데이터+페이징 메타 구조입니다.\n\nIPage<IDiscussionboardPostAttachment> 타입을 사용하며, 다음과 같이 구성됩니다.\n\n- pagination: 전체 페이지 수/갯수 등의 메타정보\n- data: 첨부파일 개별 엔티티의 배열\n\n프론트/백 모두 일관적 페이지네이션 구조를 기대합니다."
    },
    "IDiscussionboardPostAttachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "첨부파일 레코드의 고유 식별자(UUID).\n\nPrisma discussionboard_post_attachment.id 컬럼 매핑. 모든 엔터티 fetch에서 반환됨."
        },
        "post_id": {
          "type": "string",
          "format": "uuid",
          "description": "어떤 게시물에 첨부된 파일인지 식별하는 참조키(uuid).\n\nPrisma discussionboard_post_attachment.post_id 컬럼 매핑 및 FK.\n\n반드시 통일된 uuid 형식 지정 필요."
        },
        "uploaded_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "이 파일을 업로드한 사용자의 id(uuid).\n\nPrisma discussionboard_post_attachment.uploaded_by_user_id 컬럼 매핑.\n\n권한 로직 적용시 사용될 수 있음."
        },
        "filename": {
          "type": "string",
          "description": "원본(사용자 지정) 파일명.\n\nPrisma discussionboard_post_attachment.filename 컬럼과 매핑."
        },
        "mimetype": {
          "type": "string",
          "description": "MIME 타입 정보, 예: 'image/png', 'application/pdf'.\n\nPrisma discussionboard_post_attachment.mimetype 컬럼값."
        },
        "size_bytes": {
          "type": "integer",
          "description": "파일 크기(byte 기준, 정수).\n\nPrisma discussionboard_post_attachment.size_bytes 컬럼과 매핑. 예: 123456."
        },
        "url": {
          "type": "string",
          "description": "파일을 다운로드/미리보기 가능한 접근용 URL입니다. 외부 시스템(예: CDN/S3)에 연결되어 있음.\n\nPrisma discussionboard_post_attachment.url 컬럼. 최대길이 80000. 클라이언트에 노출시 인증/권한 체크 필요."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "첨부파일 논리삭제(소프트딜리트) 플래그.\n\nPrisma discussionboard_post_attachment.is_deleted 컬럼.\n\n실제 파일은 보관중이나, UI에서는 노출하지 않을 수 있음."
        },
        "uploaded_at": {
          "type": "string",
          "format": "date-time",
          "description": "업로드 시각(ISO8601/zulu), 프론트 정렬/필터에 활용.\n\nPrisma discussionboard_post_attachment.uploaded_at 컬럼.\n\n파일 생성 시 서버시간. 예: 2025-01-16T13:02:10.000Z"
        }
      },
      "required": [
        "id",
        "post_id",
        "uploaded_by_user_id",
        "filename",
        "mimetype",
        "size_bytes",
        "url",
        "is_deleted",
        "uploaded_at"
      ],
      "description": "게시글에 첨부된 파일(메타데이터) 엔티티로, discussionboard_post_attachment Prisma 테이블 전체 컬럼을 포함합니다.\n\n모든 첨부파일은 개별적으로 고유 id를 갖고, 어떤 게시글(post_id)에 속하는지, 업로더, 파일 정보, url, 삭제여부, 업로드 시각 등의 메타를 담습니다.\n\n게시글의 미디어/파일 다운로드, 미리보기 기능 구현 시 이 타입을 배열로 반환."
    },
    "IDiscussionboardPostAttachment.ICreate": {
      "type": "object",
      "properties": {
        "post_id": {
          "type": "string",
          "format": "uuid",
          "description": "첨부파일이 등록될 게시글 id(UUID).\n\ndiscussionboard_post_attachment.post_id 컬럼에 매핑.\n\n사전 게시글 존재확인 필요."
        },
        "uploaded_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "첨부파일 업로드를 수행하는 사용자(업로더) id(UUID).\n\ndiscussionboard_post_attachment.uploaded_by_user_id 컬럼에 매핑."
        },
        "filename": {
          "type": "string",
          "description": "사용자 원본명(실제 파일명)입니다.\n\ndiscussionboard_post_attachment.filename 컬럼과 동기화."
        },
        "mimetype": {
          "type": "string",
          "description": "파일의 MIME 타입 스트링입니다.\n\ndiscussionboard_post_attachment.mimetype 컬럼과 일치."
        },
        "size_bytes": {
          "type": "integer",
          "description": "파일 크기(Byte 단위의 정수값).\n\ndiscussionboard_post_attachment.size_bytes 컬럼과 매칭."
        },
        "url": {
          "type": "string",
          "description": "클라이언트에서 접근 가능한 파일 다운로드/미리보기 URI.\n\n사전 파일 업로드 완료 후 경로를 지정해야 함."
        }
      },
      "required": [
        "post_id",
        "uploaded_by_user_id",
        "filename",
        "mimetype",
        "size_bytes",
        "url"
      ],
      "description": "게시글 첨부파일 신규 등록용 input 오브젝트. discussionboard_post_attachment 테이블에 신규 row 삽입시 생성에 필요한 모든 칼럼이 정의됨.\n\n필수: post_id, uploaded_by_user_id, filename, mimetype, size_bytes, url.\n\n실제 업로드 데이터는 별도 처리(메타만 입력). 주요 컬럼은 Prisma 스키마와 주석/용도 일치해야 함."
    },
    "IDiscussionboardPostAttachment.IUpdate": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "description": "수정될 파일 원본명 또는 표시명.\n\ndiscussionboard_post_attachment.filename 컬럼 업데이트 용. 변경없으면 생략."
        },
        "mimetype": {
          "type": "string",
          "description": "변경시 파일의 MIME 타입 입력. 예: 'image/jpeg'.\n\ndiscussionboard_post_attachment.mimetype 컬럼 업데이트 용."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "첨부파일 논리삭제 플래그(True 시 소프트 딜리트).\n\ndiscussionboard_post_attachment.is_deleted 컬럼.\n\n삭제 또는 복구시 변경. 일반 edit 내에서는 생략 가능."
        }
      },
      "description": "게시글 첨부파일 메타데이터 변경, 삭제 복구용 입력 타입.\n\ndiscussionboard_post_attachment의 컬럼 중 파일명, MIME 타입, 삭제여부만 업데이트 허용. 나머지 변경은 제한.\n\n실무에서는 일부 필드만 부분적 패치가 이뤄지기도 함.",
      "required": []
    },
    "IDiscussionboardComment.IRequest": {
      "type": "object",
      "properties": {
        "post_id": {
          "type": "string",
          "format": "uuid",
          "description": "댓글이 속한 게시글 id(UUID)로 검색 대상 제한. discussionboard_comment.post_id 컬럼 매핑."
        },
        "created_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "댓글 작성자의 user id(UUID)로 조건 검색. discussionboard_comment.created_by_user_id 컬럼."
        },
        "parent_comment_id": {
          "type": "string",
          "format": "uuid",
          "description": "부모 댓글 id(UUID) 기준으로 대댓글/1단계 답글만 조회할 때 지정. discussionboard_comment.parent_comment_id 컬럼."
        },
        "content": {
          "type": "string",
          "description": "댓글 본문 내용(부분검색, 키워드 등 지원). discussionboard_comment.content 컬럼."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "삭제여부 필터. soft delete 적용 여부에 따라 true/false. discussionboard_comment.is_deleted 컬럼."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "페이지 번호(1부터 시작). 페이징에 사용됨. 기본값 1"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "페이지당 최대 댓글 수. 기본값 20, 최댓값 100. 시스템 설정에 따라 제한."
        },
        "sort": {
          "type": "string",
          "description": "정렬 기준 컬럼/정책 지정. 예: 'created_at_desc', 'content_asc'. 구현 정책에 의존함."
        }
      },
      "description": "게시글 댓글 리스트/검색 요청용 타입이며, 댓글(post) id, 작성자, 부모댓글, 본문 키워드, 삭제여부, 페이징, 정렬을 상세하게 요청할 수 있음.\n\ndiscussionboard_comment 테이블 구조에 맞춘 검색/필터 최적화 요청 파라미터 객체. 프론트엔드는 필요한 조합을 바디에 전달해야 합니다.",
      "required": []
    },
    "IPageIDiscussionboardComment": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardComment"
          },
          "description": "댓글 데이터 배열 한 페이지 분량"
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "댓글 목록/검색 결과 응답 타입입니다. IPage<IDiscussionboardComment> 구조의, pagination(페이징 메타)+data(댓글 배열)로 구성됩니다.\n\n페이징된 결과/스크롤UI 구현시 표준적으로 사용됩니다."
    },
    "IDiscussionboardComment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "댓글 엔티티 고유식별자(UUID). discussionboard_comment.id 컬럼 매핑."
        },
        "post_id": {
          "type": "string",
          "format": "uuid",
          "description": "댓글이 소속된 게시글 id(UUID), discussionboard_comment.post_id fk 매핑."
        },
        "created_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "댓글 작성자 id(UUID). discussionboard_comment.created_by_user_id fk 매핑."
        },
        "parent_comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "상위 부모댓글(1단계) id(UUID). 루트 댓글이면 null. discussionboard_comment.parent_comment_id fk."
            },
            {
              "type": "null"
            }
          ],
          "description": "상위 부모댓글(1단계) id(UUID). 루트 댓글이면 null. discussionboard_comment.parent_comment_id fk."
        },
        "deleted_by_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "해당 댓글을 삭제한 사용자 id(UUID). 직후 soft delete시 기록. discussionboard_comment.deleted_by_user_id 컬럼."
            },
            {
              "type": "null"
            }
          ],
          "description": "해당 댓글을 삭제한 사용자 id(UUID). 직후 soft delete시 기록. discussionboard_comment.deleted_by_user_id 컬럼."
        },
        "content": {
          "type": "string",
          "description": "댓글 본문 텍스트. discussionboard_comment.content 컬럼과 동기화."
        },
        "is_edited": {
          "type": "boolean",
          "description": "댓글이 최초 작성 이후 수정된 적 있는지 여부. discussionboard_comment.is_edited 컬럼."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "댓글 소프트 삭제(논리삭제) 플래그. discussionboard_comment.is_deleted 컬럼."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "작성 시각(UTC 기준, ISO8601). discussionboard_comment.created_at 컬럼."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "최근 수정 시각. discussionboard_comment.updated_at 컬럼."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "댓글 삭제(복구/삭제) 시각. null이면 미삭제, 아니면 삭제/복구일시임. discussionboard_comment.deleted_at 컬럼."
            },
            {
              "type": "null"
            }
          ],
          "description": "댓글 삭제(복구/삭제) 시각. null이면 미삭제, 아니면 삭제/복구일시임. discussionboard_comment.deleted_at 컬럼."
        }
      },
      "required": [
        "id",
        "post_id",
        "created_by_user_id",
        "content",
        "is_edited",
        "is_deleted",
        "created_at",
        "updated_at"
      ],
      "description": "댓글 단일 엔티티(full 정보) 구조체. Prisma discussionboard_comment 테이블 스키마 모든 컬럼을 타입으로 포함합니다.\n\n각 댓글의 관계(게시글, 작성자, 부모/삭제/수정여부 등)와 본문, 타임스탬프, 기타 메타까지 모두 반환. reply/threaded view에 활용."
    },
    "IDiscussionboardComment.ICreate": {
      "type": "object",
      "properties": {
        "post_id": {
          "type": "string",
          "format": "uuid",
          "description": "댓글이 소속될 게시글 id(UUID). discussionboard_comment.post_id fk 컬럼값."
        },
        "created_by_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "댓글을 생성하는 사용자 id(UUID). discussionboard_comment.created_by_user_id fk."
        },
        "parent_comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "답글(1단계)일 경우 부모댓글 id, 일반 댓글이면 null. discussionboard_comment.parent_comment_id fk. 필수 아님."
            },
            {
              "type": "null"
            }
          ],
          "description": "답글(1단계)일 경우 부모댓글 id, 일반 댓글이면 null. discussionboard_comment.parent_comment_id fk. 필수 아님."
        },
        "content": {
          "type": "string",
          "description": "댓글 본문. 최소 1~최대 5000자(시스템 정책)로 입력.\n\ndiscussionboard_comment.content 컬럼."
        }
      },
      "required": [
        "post_id",
        "created_by_user_id",
        "content"
      ],
      "description": "신규 댓글 작성(생성) 요청 바디용 타입입니다. discussionboard_comment 테이블에 row가 생성됩니다.\n\n필수항목: post_id, created_by_user_id, content(본문).\n\n대댓글(답글)일 경우 parent_comment_id 추가 필요.\n\n모든 필드는 Prisma 스키마 주석 및 로직과 완벽 동기화 됨."
    },
    "IDiscussionboardComment.IUpdate": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "댓글 본문 텍스트(변경시 새 값). discussionboard_comment.content 컬럼 수정용."
        },
        "is_edited": {
          "type": "boolean",
          "description": "업데이트시 댓글이 수정됨을 명시하는 플래그. true 입력 필요. discussionboard_comment.is_edited 컬럼과 동기화."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "삭제, 복구 등 논리적 상태 변경에 사용. true = 소프트 삭제, false = 복구. discussionboard_comment.is_deleted 컬럼."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "삭제/복구 시각. 소프트 딜리트 처리시 현재시간, 복구시 null 가능. discussionboard_comment.deleted_at 컬럼."
            },
            {
              "type": "null"
            }
          ],
          "description": "삭제/복구 시각. 소프트 딜리트 처리시 현재시간, 복구시 null 가능. discussionboard_comment.deleted_at 컬럼."
        }
      },
      "description": "댓글 업데이트(수정/삭제/복구) 요청 바디 타입. content/is_edited/is_deleted/deleted_at 등 comment 개별 수정시 필드 적용.\n\n부분/전체 수정이 모두 가능하며, 임의 필드만 전달해도 무관. 필드는 Prisma discussionboard_comment 테이블 엔티티 주석과 동기화.",
      "required": []
    },
    "IDiscussionboardLikes.IRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "해당 사용자의 좋아요(Like) 내역만 한정해 조회시 사용됨. likes.user_id(fk) 기준."
        },
        "post_id": {
          "type": "string",
          "format": "uuid",
          "description": "게시글 id를 기준으로 좋아요를 검색할 경우 지정. likes.post_id(fk) 기준."
        },
        "comment_id": {
          "type": "string",
          "format": "uuid",
          "description": "댓글에 대한 좋아요 내역만 조회시 지정. likes.comment_id(fk) 기준."
        },
        "created_at_from": {
          "type": "string",
          "format": "date-time",
          "description": "해당 시각 이후의 좋아요만 검색. likes.created_at 기준."
        },
        "created_at_to": {
          "type": "string",
          "format": "date-time",
          "description": "해당 시각 이전의 좋아요만 검색. likes.created_at 기준."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "조회할 페이지 번호(1-base). 기본값 1."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "페이지당 최대 Like 수. 기본값 20, 시스템 최대 100."
        },
        "sort": {
          "type": "string",
          "description": "정렬 기준(컬럼명, 정책명). 예: 'created_at_desc', 'user_id_asc'. 정책에 따라 구현."
        }
      },
      "description": "게시물/댓글 좋아요 검색/조회(페이징 포함)용 요청 타입 객체. likes 테이블 필드 조합 검색 지원.\n\nuser_id, post_id, comment_id, 생성일 범위, 페이징, 정렬 등 다양한 조건 복합 필터로 지정 가능. likes 테이블 컬럼 참조.",
      "required": []
    },
    "IPageIDiscussionboardLikes": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardLikes"
          }
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "A paged collection of atomic Like events as tracked by the interaction system of the discussionboard platform.\n\nImplements the standard IPage<T> pattern, parameterized to the Like entity (IDiscussionboardLikes). Represents user 'like' actions on posts or comments, supporting analytics, audits, and user engagement features such as who liked what content. Each page provides the Like event list (data) and associated pagination metadata (pagination).\n\nSchema documentation: aligns with 3NF atomic event design in the discussionboard_likes table, provides batch access, and is the canonical container for list operations involving likes."
    },
    "IDiscussionboardLikes": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the individual like event.\n\nAtomic primary key for each like, required for audit and deletion. Corresponds to discussionboard_likes.id in the DB schema."
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user who performed the like action.\n\nForeign key to user (discussionboard_user.id). Used for recording and enforcing per-user like actions."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional reference to the post being liked (if any).\n\nIf the like targets a post, this field is set. Null if like is on a comment. Corresponds to discussionboard_likes.post_id."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional reference to the post being liked (if any).\n\nIf the like targets a post, this field is set. Null if like is on a comment. Corresponds to discussionboard_likes.post_id."
            }
          ],
          "description": "Optional reference to the post being liked (if any).\n\nIf the like targets a post, this field is set. Null if like is on a comment. Corresponds to discussionboard_likes.post_id."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional reference to the comment being liked (if any).\n\nIf the like targets a comment, this field is set. Null if like is on a post. Corresponds to discussionboard_likes.comment_id."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional reference to the comment being liked (if any).\n\nIf the like targets a comment, this field is set. Null if like is on a post. Corresponds to discussionboard_likes.comment_id."
            }
          ],
          "description": "Optional reference to the comment being liked (if any).\n\nIf the like targets a comment, this field is set. Null if like is on a post. Corresponds to discussionboard_likes.comment_id."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the like event occurred.\n\nReflects user interaction time, used in analytics, audit logs, and sorting. Corresponds to discussionboard_likes.created_at."
        }
      },
      "required": [
        "id",
        "user_id",
        "created_at"
      ],
      "description": "Atomic record for a user 'Like' event recorded by the engagement system.\n\nDirect mapping of discussionboard_likes table. Represents a user's liking of either a post or comment, as normalized in 3NF (only one target per like, never both). Audit-centric, supports compliance and engagement analytics."
    },
    "IDiscussionboardLike": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Primary key for the like event. Unique event identity used for lookups and reference (strictly atomic/normalized)."
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID (UUID) of the user who performed the like action. Foreign key to user table."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Target post ID (if a post was liked). Null if liking a comment."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Target post ID (if a post was liked). Null if liking a comment."
            }
          ],
          "description": "Target post ID (if a post was liked). Null if liking a comment."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Target comment ID (if a comment was liked). Null if liking a post."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Target comment ID (if a comment was liked). Null if liking a post."
            }
          ],
          "description": "Target comment ID (if a comment was liked). Null if liking a post."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Like event timestamp in ISO 8601."
        }
      },
      "required": [
        "id",
        "user_id",
        "created_at"
      ],
      "description": "Atomic like event type for audit, moderation, and display. Strictly one row per event, with rigid separation between post/comment context and actor."
    },
    "IDiscussionboardLike.ICreate": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of user performing like. Required.\n\nForeign key to discussionboard_user.id."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional ID of post being liked. Null if not targeting a post."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional ID of post being liked. Null if not targeting a post."
            }
          ],
          "description": "Optional ID of post being liked. Null if not targeting a post."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional ID of comment being liked. Null if not targeting a comment."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional ID of comment being liked. Null if not targeting a comment."
            }
          ],
          "description": "Optional ID of comment being liked. Null if not targeting a comment."
        }
      },
      "required": [
        "user_id"
      ],
      "description": "Payload for creating a new Like event.\n\nAllows the creation of a like record for either a post or comment (never both). One of post_id or comment_id must be set. Aligns with discussionboard_like IC."
    },
    "IDiscussionboardLike.IUpdate": {
      "type": "object",
      "properties": {
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Update like target to a post (set post_id/clear comment_id) if desired. Null if keeping existing."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Update like target to a post (set post_id/clear comment_id) if desired. Null if keeping existing."
            }
          ],
          "description": "Update like target to a post (set post_id/clear comment_id) if desired. Null if keeping existing."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Update like target to a comment (set comment_id/clear post_id) if desired. Null if keeping existing."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Update like target to a comment (set comment_id/clear post_id) if desired. Null if keeping existing."
            }
          ],
          "description": "Update like target to a comment (set comment_id/clear post_id) if desired. Null if keeping existing."
        }
      },
      "description": "Payload for updating an existing Like event (changing its target post/comment).\n\nBusiness logic allows only one target at any time (post or comment, never both). Gives update flexibility for rare correction workflows.",
      "required": []
    },
    "IVoidResponse": {
      "type": "object",
      "properties": {},
      "description": "Standard response type for successful completion of an operation with no payload.\n\nUsed in DELETE and other operations that only confirm success/failure.",
      "required": []
    },
    "IDiscussionboardBookmark.IRequest": {
      "type": "object",
      "properties": {
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional filter: only bookmarks targeting a specific post.\n\nIf provided, limits the search to bookmarks for this post."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional filter: only bookmarks targeting a specific post.\n\nIf provided, limits the search to bookmarks for this post."
            }
          ],
          "description": "Optional filter: only bookmarks targeting a specific post.\n\nIf provided, limits the search to bookmarks for this post."
        },
        "user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional filter: only bookmarks created by this user.\n\nIf provided, limits the search to this user's bookmarks."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional filter: only bookmarks created by this user.\n\nIf provided, limits the search to this user's bookmarks."
            }
          ],
          "description": "Optional filter: only bookmarks created by this user.\n\nIf provided, limits the search to this user's bookmarks."
        },
        "created_at_range": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "minItems": 2,
          "maxItems": 2,
          "description": "Optional range filter for created_at timestamp.\n\nArray of two date-time strings [start, end] for date-range queries."
        },
        "pagination": {
          "$ref": "#/components/schemas/IPage.IRequest"
        },
        "sort_by": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional sort field for ordering bookmarks (e.g., 'created_at')."
            },
            {
              "type": "null",
              "description": "Optional sort field for ordering bookmarks (e.g., 'created_at')."
            }
          ],
          "description": "Optional sort field for ordering bookmarks (e.g., 'created_at')."
        }
      },
      "description": "Request payload for searching, filtering, and paginating bookmarks.\n\nAllows filtering by post/user/date, pagination control, and sort key. Flexible for UI and data export use cases.",
      "required": []
    },
    "IPageIDiscussionboardBookmark": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardBookmark"
          }
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "A paginated list structure for bookmark records as tracked in the discussionboard_bookmark/bookmarks table.\n\nImplements the standard IPage<T> interface for bookmarks. Used to deliver bulk results for listing/slicing bookmark data."
    },
    "IDiscussionboardBookmark": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Bookmark record unique identifier.\n\nPrimary key of discussionboard_bookmark/bookmarks.id."
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user that created the bookmark.\n\nFK to discussionboard_user.id."
        },
        "post_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the bookmarked post.\n\nFK to discussionboard_post.id."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the bookmark was created. For audit/history."
        }
      },
      "required": [
        "id",
        "user_id",
        "post_id",
        "created_at"
      ],
      "description": "Atomic record for a single user bookmark on a post.\n\nMaps to discussionboard_bookmark/bookmarks table. Used for UI features where users can save posts for later review. Compliant with 3NF, one record per user/post combination. Retains audit trail."
    },
    "IDiscussionboardBookmark.ICreate": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the user creating the bookmark. Required."
        },
        "post_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the post to bookmark. Required."
        }
      },
      "required": [
        "user_id",
        "post_id"
      ],
      "description": "Payload for creating a new bookmark record (user wants to save a post).\n\nOnly valid when the (user_id, post_id) pair does not already exist."
    },
    "IDiscussionboardBookmark.IUpdate": {
      "type": "object",
      "properties": {
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "If the bookmark needs to be moved to a new post (rare, administrative). Null to keep existing target."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "If the bookmark needs to be moved to a new post (rare, administrative). Null to keep existing target."
            }
          ],
          "description": "If the bookmark needs to be moved to a new post (rare, administrative). Null to keep existing target."
        }
      },
      "description": "Payload for updating an existing bookmark's target post.\n\nTypical flows do not allow bookmarks to be reassigned, but this is provided for admin corrections/audit.",
      "required": []
    },
    "IDiscussionboardFollow.IRequest": {
      "type": "object",
      "properties": {
        "follower_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional filter: only follow records for this follower user."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional filter: only follow records for this follower user."
            }
          ],
          "description": "Optional filter: only follow records for this follower user."
        },
        "followed_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional filter: only follow relationships to this followed user."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional filter: only follow relationships to this followed user."
            }
          ],
          "description": "Optional filter: only follow relationships to this followed user."
        },
        "followed_thread_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional filter: only follow relationships to this thread."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional filter: only follow relationships to this thread."
            }
          ],
          "description": "Optional filter: only follow relationships to this thread."
        },
        "created_at_range": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "minItems": 2,
          "maxItems": 2,
          "description": "Optional date range filter [start, end] for created_at."
        },
        "pagination": {
          "$ref": "#/components/schemas/IPage.IRequest"
        },
        "sort_by": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional sort key (e.g., 'created_at')."
            },
            {
              "type": "null",
              "description": "Optional sort key (e.g., 'created_at')."
            }
          ],
          "description": "Optional sort key (e.g., 'created_at')."
        }
      },
      "description": "Request object for listing, searching, and filtering follows (user→user or user→thread relationships).\n\nEnables flexible search for following activity by user/thread/date. Used for notification preference UIs, analytics, and advanced management.",
      "required": []
    },
    "IPage.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "description": "Requested page number (uint32). Optional, defaults to 1 if not provided."
            },
            {
              "type": "null",
              "minimum": 1,
              "description": "Requested page number (uint32). Optional, defaults to 1 if not provided."
            }
          ],
          "description": "Requested page number (uint32). Optional, defaults to 1 if not provided."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "description": "Number of records per page (uint32). Optional, defaults to 100 if not provided."
            },
            {
              "type": "null",
              "minimum": 1,
              "description": "Number of records per page (uint32). Optional, defaults to 100 if not provided."
            }
          ],
          "description": "Number of records per page (uint32). Optional, defaults to 100 if not provided."
        }
      },
      "description": "Standard page request interface for all paginated queries.\n\nClients specify page and limit for efficient batching. Used in all IRequest types for IPage<T> list APIs.",
      "required": []
    },
    "IPageIDiscussionboardFollow": {
      "type": "object",
      "description": "A paginated result container for discussion board follow relationships. This type is based on the standard IPage<T> structure, adapted for IDiscussionboardFollow records. It enables efficient batch retrieval, management, and navigation of large or filtered sets of follows, such as those for rendering who a user follows or who follows them. Each page includes pagination metadata for UI and logic, and an array of follow entity objects.\n\nThis schema is critical for any endpoint that supports scalable queries for follows, supporting business flows such as social graphs, notifications, and engagement analytics. See IDiscussionboardFollow for complete entity description.",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Pagination information for the current follow page. Includes current page, limit, total record count, and total page count. See standard IPage.IPagination for structure."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardFollow"
          },
          "description": "List of discussion board follow records for the current page. Each entry is a complete atomic follow event object. The length may be less than 'limit' for the last page or if fewer records are available."
        }
      },
      "required": [
        "pagination",
        "data"
      ]
    },
    "IDiscussionboardFollow": {
      "type": "object",
      "description": "Represents an atomic 'follow' event within the discussion board system. This models the relationship where a user follows another user or a thread. Built from the discussionboard_follows table in the schema.\n\nThis entity is used for tracking both user-to-user and user-to-thread follows, enabling notification triggers, personalized feeds, and engagement analytics. It is normalized such that each row refers to exactly one (follower, target) pair, never both a user and thread. Primary uses include rendering who a user follows, their followers, and what threads users are subscribed to. See individual properties for audit and data minimization concerns.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique database identifier for this follow event. Used as the PK in the follows table. Enables unambiguous referencing and updates/deletes."
        },
        "follower_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "The user who initiated the follow action. Foreign key to discussionboard_user.id. Each user may have multiple follow events for different targets. Used as the owner/principal in access controls."
        },
        "followed_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "The user being followed. Nullable; set if the follow is for a user, null if it's for a thread. Foreign key to discussionboard_user.id. Used for rendering user-centric follows and notification targets."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "The user being followed. Nullable; set if the follow is for a user, null if it's for a thread. Foreign key to discussionboard_user.id. Used for rendering user-centric follows and notification targets."
            }
          ],
          "description": "The user being followed. Nullable; set if the follow is for a user, null if it's for a thread. Foreign key to discussionboard_user.id. Used for rendering user-centric follows and notification targets."
        },
        "followed_thread_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "The thread being followed. Nullable; set if the follow is for a thread, null if it's for a user. Foreign key to discussionboard_thread.id. Used for content subscriptions and thread alerting."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "The thread being followed. Nullable; set if the follow is for a thread, null if it's for a user. Foreign key to discussionboard_thread.id. Used for content subscriptions and thread alerting."
            }
          ],
          "description": "The thread being followed. Nullable; set if the follow is for a thread, null if it's for a user. Foreign key to discussionboard_thread.id. Used for content subscriptions and thread alerting."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (ISO 8601) of when this follow relationship was created. Essential for ordering, analytics, and audit. Always set at creation and never null."
        }
      },
      "required": [
        "id",
        "follower_user_id",
        "created_at"
      ]
    },
    "IDiscussionboardFollow.ICreate": {
      "oneOf": [
        {
          "required": [
            "followed_user_id"
          ]
        },
        {
          "required": [
            "followed_thread_id"
          ]
        }
      ],
      "description": "Request body structure to create a new follow relationship. Used when a user chooses to follow either another user or a thread. Enforces that only one of followed_user_id or followed_thread_id is set for each request.\n\nBusiness rules: The combination of (follower_user_id, followed_user_id) or (follower_user_id, followed_thread_id) must be unique per user. Used to power engagement/social flows, notification opt-in, and UI follow buttons."
    },
    "IDiscussionboardFollow.IUpdate": {
      "oneOf": [
        {
          "required": [
            "followed_user_id"
          ]
        },
        {
          "required": [
            "followed_thread_id"
          ]
        }
      ],
      "description": "Request structure to update an existing follow record. Used for changing target type (between user and thread) or correcting a previous follow event. Ensures business rules for exclusivity and audit logging."
    },
    "IDiscussionboardReport.IRequest": {
      "type": "object",
      "description": "Request/DTO for querying and paginating report records in the discussion board system. Used for moderation dashboard, abuse workflow, and search/filter panels. Contains filter and paging fields specific to the business logic.\n\nAllows searching by status, type (post or comment), dating, reporter, or text match over report reason. Enables strict OA/query patterns and scalable reviews in UI. See IDiscussionboardReport pagination result for matching structure.",
      "properties": {
        "reporting_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally filter by user who filed the report. FK to discussionboard_user.id. Use null to return reports from all users/not filter by user."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally filter by user who filed the report. FK to discussionboard_user.id. Use null to return reports from all users/not filter by user."
            }
          ],
          "description": "Optionally filter by user who filed the report. FK to discussionboard_user.id. Use null to return reports from all users/not filter by user."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally filter by the reported post ID. FK to discussionboard_post.id. If null, filter is not applied."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally filter by the reported post ID. FK to discussionboard_post.id. If null, filter is not applied."
            }
          ],
          "description": "Optionally filter by the reported post ID. FK to discussionboard_post.id. If null, filter is not applied."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally filter by reported comment ID. FK to discussionboard_comment.id. If null, filter is not applied."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally filter by reported comment ID. FK to discussionboard_comment.id. If null, filter is not applied."
            }
          ],
          "description": "Optionally filter by reported comment ID. FK to discussionboard_comment.id. If null, filter is not applied."
        },
        "status": {
          "oneOf": [
            {
              "type": "string",
              "description": "Status value to filter reports, e.g., 'pending', 'reviewed', etc. Null means all statuses are returned. Used for moderation workflow."
            },
            {
              "type": "null",
              "description": "Status value to filter reports, e.g., 'pending', 'reviewed', etc. Null means all statuses are returned. Used for moderation workflow."
            }
          ],
          "description": "Status value to filter reports, e.g., 'pending', 'reviewed', etc. Null means all statuses are returned. Used for moderation workflow."
        },
        "reason": {
          "oneOf": [
            {
              "type": "string",
              "description": "Textual filter on report reason, enables substring match, full-text, or fuzzy search over reported reasons. Null if not filtering."
            },
            {
              "type": "null",
              "description": "Textual filter on report reason, enables substring match, full-text, or fuzzy search over reported reasons. Null if not filtering."
            }
          ],
          "description": "Textual filter on report reason, enables substring match, full-text, or fuzzy search over reported reasons. Null if not filtering."
        },
        "created_from": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Start of creation time range for filtering. Only reports after this timestamp (inclusive) are shown. Null disables lower bound."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Start of creation time range for filtering. Only reports after this timestamp (inclusive) are shown. Null disables lower bound."
            }
          ],
          "description": "Start of creation time range for filtering. Only reports after this timestamp (inclusive) are shown. Null disables lower bound."
        },
        "created_to": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "End of creation time range filter. Only reports before this timestamp (inclusive) are shown. Null disables upper bound."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "End of creation time range filter. Only reports before this timestamp (inclusive) are shown. Null disables upper bound."
            }
          ],
          "description": "End of creation time range filter. Only reports before this timestamp (inclusive) are shown. Null disables upper bound."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "description": "Page number for pagination. Only used if pagination is enabled. Null or omitted means default first page."
            },
            {
              "type": "null",
              "format": "int32",
              "description": "Page number for pagination. Only used if pagination is enabled. Null or omitted means default first page."
            }
          ],
          "description": "Page number for pagination. Only used if pagination is enabled. Null or omitted means default first page."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "description": "Records per page. Applies only if pagination is desired. Null or omitted provides default paging."
            },
            {
              "type": "null",
              "format": "int32",
              "description": "Records per page. Applies only if pagination is desired. Null or omitted provides default paging."
            }
          ],
          "description": "Records per page. Applies only if pagination is desired. Null or omitted provides default paging."
        }
      },
      "required": []
    },
    "IPageIDiscussionboardReport": {
      "type": "object",
      "description": "Paginated container for report records in the discussion board platform. Provides a page-wise batch of IDiscussionboardReport entities with pagination/meta fields. Based on IPage<T>.\n\nEnables efficient admin review, filtering, and navigation of large numbers of reports in moderation dashboards, fulfilling audit and workflow requirements. See IDiscussionboardReport for each reported event's structure.",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Pagination metadata for the report result page. See standard IPage.IPagination."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardReport"
          },
          "description": "Array of report entities for current page, each representing one user-filed report event with status/reason/targets."
        }
      },
      "required": [
        "pagination",
        "data"
      ]
    },
    "IDiscussionboardReport": {
      "type": "object",
      "description": "Represents a user-submitted report in the discussion board system, for flagging posts or comments for moderation action. Each record tracks who reported, what content, status, and rationale. Realizes business flows for moderation, abuse mitigation, and user protection. See discussionboard_report table.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the report event (PK in the table). Enables precise audit, review, or status update."
        },
        "reporting_user_id": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the person filing the report. FK to discussionboard_user.id. Used as principal and to restrict listing by ownership if needed."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Post ID if the report is about a post (otherwise null). FK to discussionboard_post.id. Only one of post_id/comment_id set per record."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Post ID if the report is about a post (otherwise null). FK to discussionboard_post.id. Only one of post_id/comment_id set per record."
            }
          ],
          "description": "Post ID if the report is about a post (otherwise null). FK to discussionboard_post.id. Only one of post_id/comment_id set per record."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Comment ID if the report is about a comment. FK to discussionboard_comment.id. Only one of post_id/comment_id set per record."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Comment ID if the report is about a comment. FK to discussionboard_comment.id. Only one of post_id/comment_id set per record."
            }
          ],
          "description": "Comment ID if the report is about a comment. FK to discussionboard_comment.id. Only one of post_id/comment_id set per record."
        },
        "reason": {
          "type": "string",
          "description": "Textual reason entered by user for why this content/user was reported. Used in moderation review and audit trails. Not null, but may be empty string for generic reasons."
        },
        "status": {
          "type": "string",
          "description": "Current status of the report (e.g., 'pending', 'reviewed', etc). Used to drive moderation workflows, filtering, and analytics."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the report was filed (ISO 8601). Used for recency/workflow, always set."
        }
      },
      "required": [
        "id",
        "reporting_user_id",
        "reason",
        "status",
        "created_at"
      ]
    },
    "IDiscussionboardReport.ICreate": {
      "oneOf": [
        {
          "required": [
            "post_id"
          ]
        },
        {
          "required": [
            "comment_id"
          ]
        }
      ],
      "description": "Request DTO/structure to create a new report record. Used by users to flag a post or comment for moderation workflow. Used in abuse reporting, content moderation, spam monitoring, etc. Only one target (post or comment) should be set per call; business logic enforces this constraint.\n\nPosting a report causes the system to enter the moderation workflow, notifies moderators, and triggers compliance/audit logging."
    },
    "IDiscussionboardReport.IUpdate": {
      "type": "object",
      "description": "Request object for updating an existing report event, such as changing status, correcting reason, or altering the target content id. Used by moderators/admins in workflow and audit flows. Only mutable fields allowed; changing IDs is rare, more often status/reason.",
      "properties": {
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally change post target for this report. Null disables targeting of a post. Mutually exclusive with comment_id."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally change post target for this report. Null disables targeting of a post. Mutually exclusive with comment_id."
            }
          ],
          "description": "Optionally change post target for this report. Null disables targeting of a post. Mutually exclusive with comment_id."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally change comment target for this report. Null disables targeting comment. Mutually exclusive with post_id."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally change comment target for this report. Null disables targeting comment. Mutually exclusive with post_id."
            }
          ],
          "description": "Optionally change comment target for this report. Null disables targeting comment. Mutually exclusive with post_id."
        },
        "reason": {
          "oneOf": [
            {
              "type": "string",
              "description": "Update to the report reason field, or null to leave unchanged."
            },
            {
              "type": "null",
              "description": "Update to the report reason field, or null to leave unchanged."
            }
          ],
          "description": "Update to the report reason field, or null to leave unchanged."
        },
        "status": {
          "oneOf": [
            {
              "type": "string",
              "description": "Update the status of the report, e.g., 'pending', 'reviewed', etc. Null if not changing."
            },
            {
              "type": "null",
              "description": "Update the status of the report, e.g., 'pending', 'reviewed', etc. Null if not changing."
            }
          ],
          "description": "Update the status of the report, e.g., 'pending', 'reviewed', etc. Null if not changing."
        }
      },
      "required": []
    },
    "IDiscussionboardReportHistory.IRequest": {
      "type": "object",
      "description": "Request DTO for searching/batching report history records for moderation/analytics/review. Used by admin/moderation tools to query granular workflow/audit trails for individual reports.\n\nAllows filtering by report/event/moderator/admin, as well as time range and paging. Fulfills needs of transparency, appeals review, compliance/incident reporting, and moderation effectiveness metrics. See IDiscussionboardReportHistory for detail structure.",
      "properties": {
        "report_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter by parent report ID (FK to discussionboard_report.id). Null disables this filter."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Filter by parent report ID (FK to discussionboard_report.id). Null disables this filter."
            }
          ],
          "description": "Filter by parent report ID (FK to discussionboard_report.id). Null disables this filter."
        },
        "moderator_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter to only actions taken by a specific moderator (FK to discussionboard_moderator.id). Null disables this filter."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Filter to only actions taken by a specific moderator (FK to discussionboard_moderator.id). Null disables this filter."
            }
          ],
          "description": "Filter to only actions taken by a specific moderator (FK to discussionboard_moderator.id). Null disables this filter."
        },
        "admin_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter on actions performed by a particular admin (FK to discussionboard_admin.id). Null disables this filter."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Filter on actions performed by a particular admin (FK to discussionboard_admin.id). Null disables this filter."
            }
          ],
          "description": "Filter on actions performed by a particular admin (FK to discussionboard_admin.id). Null disables this filter."
        },
        "action": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional filter on action type (e.g., 'acknowledged', 'dismissed', 'user_banned'). Null means all actions are matched."
            },
            {
              "type": "null",
              "description": "Optional filter on action type (e.g., 'acknowledged', 'dismissed', 'user_banned'). Null means all actions are matched."
            }
          ],
          "description": "Optional filter on action type (e.g., 'acknowledged', 'dismissed', 'user_banned'). Null means all actions are matched."
        },
        "acted_from": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Start timestamp for filtering by when the action was taken. Inclusive. Null disables lower bound."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Start timestamp for filtering by when the action was taken. Inclusive. Null disables lower bound."
            }
          ],
          "description": "Start timestamp for filtering by when the action was taken. Inclusive. Null disables lower bound."
        },
        "acted_to": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "End timestamp for filtering by when action occurred. Inclusive. Null disables upper bound."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "End timestamp for filtering by when action occurred. Inclusive. Null disables upper bound."
            }
          ],
          "description": "End timestamp for filtering by when action occurred. Inclusive. Null disables upper bound."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "description": "Pagination control; which page of results. Null defaults to first page or system default."
            },
            {
              "type": "null",
              "format": "int32",
              "description": "Pagination control; which page of results. Null defaults to first page or system default."
            }
          ],
          "description": "Pagination control; which page of results. Null defaults to first page or system default."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "description": "Page size/page limit. Null indicates system or API default."
            },
            {
              "type": "null",
              "format": "int32",
              "description": "Page size/page limit. Null indicates system or API default."
            }
          ],
          "description": "Page size/page limit. Null indicates system or API default."
        }
      },
      "required": []
    },
    "IPageIDiscussionboardReportHistory": {
      "type": "object",
      "description": "Paginated result structure for lists of report history events, enabling scalable moderation workflow/audit review. Based on IPage<T> architecture. Each data item is an IDiscussionboardReportHistory event.\n\nBusiness uses include surfacing all workflow responses to user reports, appeals review, and general moderation effectiveness tracking. Each page/batch is delivered with meta info plus array of complete history entries.",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Pagination metadata for the report history result set. See IPage.IPagination."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardReportHistory"
          },
          "description": "Array of individual report history event objects. Each action in moderation workflow is a distinct entry here."
        }
      },
      "required": [
        "pagination",
        "data"
      ]
    },
    "IDiscussionboardReportHistory": {
      "type": "object",
      "description": "Represents a specific workflow event/action taken on a user report within the moderation flow. Maps to the discussionboard_report_history table and powers audit trails, appeals, and moderation analytics.\n\nEach record tracks which report it attaches to, which moderator/admin performed the action, what type of action took place (e.g., 'acknowledged', 'user_banned'), notes/context, and acted at timestamp. Strictly atomic/immutable after creation for compliance. Used for incident response review, appeals workflows, and transparency reporting. Multiple records may exist per report to capture a full timeline/history.",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the workflow/event history entry (PK). For cross references/auditing."
        },
        "report_id": {
          "type": "string",
          "format": "uuid",
          "description": "Target report ID to which this action log is attached. FK to discussionboard_report.id. Used to reconstruct the workflow timeline for a given report."
        },
        "moderator_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "ID of the moderator who performed this action (nullable if handled by admin or system). FK to discussionboard_moderator.id."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "ID of the moderator who performed this action (nullable if handled by admin or system). FK to discussionboard_moderator.id."
            }
          ],
          "description": "ID of the moderator who performed this action (nullable if handled by admin or system). FK to discussionboard_moderator.id."
        },
        "admin_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "ID of the admin who performed this action (nullable if handled by moderator or automation). FK to discussionboard_admin.id."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "ID of the admin who performed this action (nullable if handled by moderator or automation). FK to discussionboard_admin.id."
            }
          ],
          "description": "ID of the admin who performed this action (nullable if handled by moderator or automation). FK to discussionboard_admin.id."
        },
        "action": {
          "type": "string",
          "description": "Action type/verb performed in this workflow step (e.g., 'acknowledged', 'dismissed', 'user_banned'). Not null."
        },
        "action_detail": {
          "type": "string",
          "description": "Notes/context provided by moderator/admin. Free-text explanation for decision/rationale/audit."
        },
        "acted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when this action event occurred (ISO 8601)."
        }
      },
      "required": [
        "id",
        "report_id",
        "action",
        "action_detail",
        "acted_at"
      ]
    },
    "IDiscussionboardReportHistory.ICreate": {
      "type": "object",
      "properties": {
        "report_id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier of the report to which this history action is attached. References the 'discussionboard_report' entity as per normalization requirements.\n\nMandatory for associating this event with a moderation workflow and for compliance traceability."
        },
        "moderator_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) The unique identifier for the moderator who performed the action. Will be set if a moderator, rather than an admin, took the action. If the action was performed by an admin, this is null.\n\nThis property upholds the precise actor history and aids in permission audits."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) The unique identifier for the moderator who performed the action. Will be set if a moderator, rather than an admin, took the action. If the action was performed by an admin, this is null.\n\nThis property upholds the precise actor history and aids in permission audits."
            }
          ],
          "description": "(Optional) The unique identifier for the moderator who performed the action. Will be set if a moderator, rather than an admin, took the action. If the action was performed by an admin, this is null.\n\nThis property upholds the precise actor history and aids in permission audits."
        },
        "admin_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) The unique identifier for the admin who performed the action. Will be set if the action was taken by an admin rather than a moderator. If not applicable, this is null.\n\nSupports advanced compliance and traceability for escalated actions."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) The unique identifier for the admin who performed the action. Will be set if the action was taken by an admin rather than a moderator. If not applicable, this is null.\n\nSupports advanced compliance and traceability for escalated actions."
            }
          ],
          "description": "(Optional) The unique identifier for the admin who performed the action. Will be set if the action was taken by an admin rather than a moderator. If not applicable, this is null.\n\nSupports advanced compliance and traceability for escalated actions."
        },
        "action": {
          "type": "string",
          "description": "Describes what event or action was taken. For example: 'acknowledged', 'dismissed', 'user_banned', etc. Should use canonical, platform-recognized action codes (see moderation policy).\n\nAtomic field, essential for tracking the sequence of workflow interventions."
        },
        "action_detail": {
          "type": "string",
          "description": "Free-text context, commentary, or justification entered by the actor. Supports transparency for future review, appeals, or audits.\n\nStored as a simple string to maintain normalization and ensure system extensibility."
        },
        "acted_at": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when this moderation action/event was performed. Supports ordering and recency analyses in platform audits.\n\nISO 8601 format, always set at event creation for compliance."
        }
      },
      "required": [
        "report_id",
        "action",
        "action_detail",
        "acted_at"
      ],
      "description": "Represents the atomic creation of a new report history event, capturing all required moderation workflow fields as per audit compliance policies.\n\nClosely mapped to the 'discussionboard_report_histories' entity for normalized storage. Includes precise actor, action, context, and timing information."
    },
    "IDiscussionboardReportHistory.IUpdate": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "New or corrected action event type (see moderation workflow policies). Only allowed when in a correction window per audit compliance.\n\nImmutable in most cases except for allowable errata."
        },
        "action_detail": {
          "type": "string",
          "description": "Amended context or rationale for the moderation event. Used to correct errors or clarify record context during the allowed correction period.\n\nFull updates are limited and auditable."
        }
      },
      "required": [
        "action",
        "action_detail"
      ],
      "description": "Encapsulates updates, corrections, or amendments to an existing report history log, following platform policy for audit compliance.\n\nUsually only permitted within a designated correction window or for clear errata; changes are themselves tracked for traceability."
    },
    "IDiscussionboardLike.IRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) Filter for likes performed by the specific user's UUID. Only integer when searching for user-centric events.\n\nWhen null or omitted, all users are included in the filter."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) Filter for likes performed by the specific user's UUID. Only integer when searching for user-centric events.\n\nWhen null or omitted, all users are included in the filter."
            }
          ],
          "description": "(Optional) Filter for likes performed by the specific user's UUID. Only integer when searching for user-centric events.\n\nWhen null or omitted, all users are included in the filter."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) Filter for like events attached to a specific post (UUID). Should be null when targeting comment likes.\n\nSupports user/content analytics and engagement searches."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) Filter for like events attached to a specific post (UUID). Should be null when targeting comment likes.\n\nSupports user/content analytics and engagement searches."
            }
          ],
          "description": "(Optional) Filter for like events attached to a specific post (UUID). Should be null when targeting comment likes.\n\nSupports user/content analytics and engagement searches."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) Filter for like events attached to a specific comment (UUID). Should be null when searching post likes.\n\nSupports moderation workflow and content analytics."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) Filter for like events attached to a specific comment (UUID). Should be null when searching post likes.\n\nSupports moderation workflow and content analytics."
            }
          ],
          "description": "(Optional) Filter for like events attached to a specific comment (UUID). Should be null when searching post likes.\n\nSupports moderation workflow and content analytics."
        },
        "from": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "(Optional) ISO 8601 timestamp to filter likes occurring after this point (inclusive). Useful for time-based analytics and recent engagement tracking."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "(Optional) ISO 8601 timestamp to filter likes occurring after this point (inclusive). Useful for time-based analytics and recent engagement tracking."
            }
          ],
          "description": "(Optional) ISO 8601 timestamp to filter likes occurring after this point (inclusive). Useful for time-based analytics and recent engagement tracking."
        },
        "to": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "(Optional) ISO 8601 timestamp to filter likes occurring before this point (inclusive). Enables querying past engagement and moderation activity."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "(Optional) ISO 8601 timestamp to filter likes occurring before this point (inclusive). Enables querying past engagement and moderation activity."
            }
          ],
          "description": "(Optional) ISO 8601 timestamp to filter likes occurring before this point (inclusive). Enables querying past engagement and moderation activity."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "description": "(Optional) The page number in a paginated response. Used for navigating large result sets. uint32 value, default 1 if omitted.\n\nPage ranges beyond available results return empty data arrays."
            },
            {
              "type": "null",
              "description": "(Optional) The page number in a paginated response. Used for navigating large result sets. uint32 value, default 1 if omitted.\n\nPage ranges beyond available results return empty data arrays."
            }
          ],
          "description": "(Optional) The page number in a paginated response. Used for navigating large result sets. uint32 value, default 1 if omitted.\n\nPage ranges beyond available results return empty data arrays."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "description": "(Optional) The number of results to return per page. uint32 value, default and max limits enforced by backend.\n\nSupports efficient large-scale listing of events and engagement records."
            },
            {
              "type": "null",
              "description": "(Optional) The number of results to return per page. uint32 value, default and max limits enforced by backend.\n\nSupports efficient large-scale listing of events and engagement records."
            }
          ],
          "description": "(Optional) The number of results to return per page. uint32 value, default and max limits enforced by backend.\n\nSupports efficient large-scale listing of events and engagement records."
        }
      },
      "required": [],
      "description": "Describes search, filter, and pagination criteria used to list like events from the system for analytics, reporting, or UI paged views.\n\nAll properties are optional to allow flexible querying on any combination of user, post, comment, and time-based parameters. Pagination is recommended for performance on high-volume systems."
    },
    "IPageIDiscussionboardLike": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardLike"
          },
          "description": "Array of like records that match the search/pagination criteria.\n\nEach record holds atomic like event details mapped from 'discussionboard_like'."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Container for paginated like results sets, containing both the summary pagination metadata and the array of atomic like event records.\n\nUsed for returning results from advanced search and listing operations. Metadata structure aligns with standard paged API responses for analytics and feeds."
    },
    "IDiscussionboardModerationAction.IRequest": {
      "type": "object",
      "properties": {
        "actor_moderator_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional UUID filter for the acting moderator or admin. Use to search actions performed by a particular user account.\n\nNull returns all actors."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional UUID filter for the acting moderator or admin. Use to search actions performed by a particular user account.\n\nNull returns all actors."
            }
          ],
          "description": "Optional UUID filter for the acting moderator or admin. Use to search actions performed by a particular user account.\n\nNull returns all actors."
        },
        "target_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional UUID for the user affected by moderation actions. Useful for searching the moderation history for a particular target.\n\nNull returns actions for any target."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional UUID for the user affected by moderation actions. Useful for searching the moderation history for a particular target.\n\nNull returns actions for any target."
            }
          ],
          "description": "Optional UUID for the user affected by moderation actions. Useful for searching the moderation history for a particular target.\n\nNull returns actions for any target."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional UUID filter for actions that affected a specific post.\n\nNull returns actions across all posts."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional UUID filter for actions that affected a specific post.\n\nNull returns actions across all posts."
            }
          ],
          "description": "Optional UUID filter for actions that affected a specific post.\n\nNull returns actions across all posts."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional UUID filter for actions on a comment target.\n\nNull returns all comments."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional UUID filter for actions on a comment target.\n\nNull returns all comments."
            }
          ],
          "description": "Optional UUID filter for actions on a comment target.\n\nNull returns all comments."
        },
        "report_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional UUID filter for actions related to a specific user report.\n\nNull means any report."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional UUID filter for actions related to a specific user report.\n\nNull means any report."
            }
          ],
          "description": "Optional UUID filter for actions related to a specific user report.\n\nNull means any report."
        },
        "action_type": {
          "oneOf": [
            {
              "type": "string",
              "description": "String code representing moderation event type (edit, delete, ban, warn, restore, etc.).\n\nNull returns all types."
            },
            {
              "type": "null",
              "description": "String code representing moderation event type (edit, delete, ban, warn, restore, etc.).\n\nNull returns all types."
            }
          ],
          "description": "String code representing moderation event type (edit, delete, ban, warn, restore, etc.).\n\nNull returns all types."
        },
        "from_created_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "(Optional) Start (inclusive) of created_at timestamp filter window for actions (ISO 8601)."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "(Optional) Start (inclusive) of created_at timestamp filter window for actions (ISO 8601)."
            }
          ],
          "description": "(Optional) Start (inclusive) of created_at timestamp filter window for actions (ISO 8601)."
        },
        "to_created_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "(Optional) End (inclusive) for created_at timestamp filter window (ISO 8601)."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "(Optional) End (inclusive) for created_at timestamp filter window (ISO 8601)."
            }
          ],
          "description": "(Optional) End (inclusive) for created_at timestamp filter window (ISO 8601)."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "description": "(Optional) Page number for pagination. uint32. Default pagination window start."
            },
            {
              "type": "null",
              "description": "(Optional) Page number for pagination. uint32. Default pagination window start."
            }
          ],
          "description": "(Optional) Page number for pagination. uint32. Default pagination window start."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "description": "(Optional) Page size/limit for paginated results. uint32. Backend may cap or default for performance."
            },
            {
              "type": "null",
              "description": "(Optional) Page size/limit for paginated results. uint32. Backend may cap or default for performance."
            }
          ],
          "description": "(Optional) Page size/limit for paginated results. uint32. Backend may cap or default for performance."
        }
      },
      "required": [],
      "description": "Request type describing filtering and paging for moderation actions lists. All properties optional—enables batch retrieval by actor, target, type, range, or entity.\n\nCritical for moderation dashboard search and compliance analytics."
    },
    "IPageIDiscussionboardModerationAction": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardModerationAction"
          },
          "description": "Page of moderation action objects that match filter criteria."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Container for paginated moderation action results containing both status metadata and the array of moderation action records.\n\nAligns with general system page format used in all batch response operations."
    },
    "IDiscussionboardModerationAction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for this moderation action event. Row PK in the 'discussionboard_moderation_action' table, ensuring strict normalization and auditable traceability."
        },
        "actor_moderator_id": {
          "type": "string",
          "format": "uuid",
          "description": "The moderator/admin's user ID who performed the action, per moderation/traceability requirements. FKs to user."
        },
        "target_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) References the user affected by this action (if applicable, e.g. ban, warning). Null if not a user-level event.\n\nFK to user, supports audit and appeal flows."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) References the user affected by this action (if applicable, e.g. ban, warning). Null if not a user-level event.\n\nFK to user, supports audit and appeal flows."
            }
          ],
          "description": "(Optional) References the user affected by this action (if applicable, e.g. ban, warning). Null if not a user-level event.\n\nFK to user, supports audit and appeal flows."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) References the affected post if this action was performed on content. Null if not targeting a post.\n\nFK to post, supporting direct content-moderation traceability."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) References the affected post if this action was performed on content. Null if not targeting a post.\n\nFK to post, supporting direct content-moderation traceability."
            }
          ],
          "description": "(Optional) References the affected post if this action was performed on content. Null if not targeting a post.\n\nFK to post, supporting direct content-moderation traceability."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) References the affected comment, if this moderation action is comment-specific. Null if not targeting a comment.\n\nFK to comment, ensuring normalized content mapping."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) References the affected comment, if this moderation action is comment-specific. Null if not targeting a comment.\n\nFK to comment, ensuring normalized content mapping."
            }
          ],
          "description": "(Optional) References the affected comment, if this moderation action is comment-specific. Null if not targeting a comment.\n\nFK to comment, ensuring normalized content mapping."
        },
        "report_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) FK to any report record related to this moderation action. Null for proactive actions not triggered by user report.\n\nTraceability requirement for moderation audit and workflow."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) FK to any report record related to this moderation action. Null for proactive actions not triggered by user report.\n\nTraceability requirement for moderation audit and workflow."
            }
          ],
          "description": "(Optional) FK to any report record related to this moderation action. Null for proactive actions not triggered by user report.\n\nTraceability requirement for moderation audit and workflow."
        },
        "action_type": {
          "type": "string",
          "description": "String code for type of moderation action (e.g., 'edit', 'delete', 'warn', 'ban', 'restore'). Used for analytic dashboard breakdown and workflow tracking.\n\nCanonical values to be enforced at business logic/service layer."
        },
        "action_reason": {
          "type": "string",
          "description": "Detailed rationale for moderation decision, per audit publication rules and transparency best practice. May describe event trigger, evidence, or specific policy enforced."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp for when this moderation action was performed. ISO 8601. Used in historical and investigative review workflows."
        }
      },
      "required": [
        "id",
        "actor_moderator_id",
        "action_type",
        "action_reason",
        "created_at"
      ],
      "description": "Represents one atomic moderation action as persisted for platform audit, traceability, and compliance enforcement.\n\nContains full context (actor, target, content ref, and rationale). Follows strict normalized schema to separate action events from dependent note/ban/detail tables."
    },
    "IDiscussionboardModerationAction.ICreate": {
      "type": "object",
      "properties": {
        "actor_moderator_id": {
          "type": "string",
          "format": "uuid",
          "description": "The moderator/admin user UUID performing the action. Source of responsibility, links to discussionboard_user PK."
        },
        "target_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) PK UUID of user affected by this moderation action. Null if not applicable, e.g., content event only."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) PK UUID of user affected by this moderation action. Null if not applicable, e.g., content event only."
            }
          ],
          "description": "(Optional) PK UUID of user affected by this moderation action. Null if not applicable, e.g., content event only."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) PK UUID of post affected by this action. Null if not applicable, e.g., user/ban event."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) PK UUID of post affected by this action. Null if not applicable, e.g., user/ban event."
            }
          ],
          "description": "(Optional) PK UUID of post affected by this action. Null if not applicable, e.g., user/ban event."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) PK UUID for comment reference (comment-specific events only). Null otherwise."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) PK UUID for comment reference (comment-specific events only). Null otherwise."
            }
          ],
          "description": "(Optional) PK UUID for comment reference (comment-specific events only). Null otherwise."
        },
        "report_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional) PK UUID for triggering user report (user-initiated events only). Null for proactive actions."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional) PK UUID for triggering user report (user-initiated events only). Null for proactive actions."
            }
          ],
          "description": "(Optional) PK UUID for triggering user report (user-initiated events only). Null for proactive actions."
        },
        "action_type": {
          "type": "string",
          "description": "String representing moderation event type (see canonical moderation event catalog). E.g.: 'edit', 'delete', 'warn', 'ban', etc."
        },
        "action_reason": {
          "type": "string",
          "description": "Detailed explanation for why this moderation action was performed. Transparency and compliance requirement. Business rules enforce clarity and non-arbitrariness."
        }
      },
      "required": [
        "actor_moderator_id",
        "action_type",
        "action_reason"
      ],
      "description": "Defines required and optional data for creation of a platform moderation action, mapping directly to atomic row in moderation log. Supports attaching all possible context and linkage fields as allowed by moderation workflow and policy.\n\nConforms to normalized database requirements and traceability best practices."
    },
    "IDiscussionboardModerationAction.IUpdate": {
      "type": "object",
      "properties": {
        "target_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "New or corrected target user, if update is to amend affected user. Null removes target reference."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "New or corrected target user, if update is to amend affected user. Null removes target reference."
            }
          ],
          "description": "New or corrected target user, if update is to amend affected user. Null removes target reference."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "New or corrected affected post reference. Null removes post reference."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "New or corrected affected post reference. Null removes post reference."
            }
          ],
          "description": "New or corrected affected post reference. Null removes post reference."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "New or corrected affected comment reference. Null removes comment reference."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "New or corrected affected comment reference. Null removes comment reference."
            }
          ],
          "description": "New or corrected affected comment reference. Null removes comment reference."
        },
        "report_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "New or corrected related report reference. Null removes report linkage."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "New or corrected related report reference. Null removes report linkage."
            }
          ],
          "description": "New or corrected related report reference. Null removes report linkage."
        },
        "action_type": {
          "type": "string",
          "description": "Update to action type, to correct type or for errata. Canonical moderation event strings only."
        },
        "action_reason": {
          "type": "string",
          "description": "Correction or amendment to moderation reason text."
        }
      },
      "required": [
        "action_type",
        "action_reason"
      ],
      "description": "Defines updatable/amendable fields for a moderation action record, supporting correction flows, audit-compliant amendment, and referential retargeting.\n\nAudit trails must log all changes; only permittable by authorized roles per moderation workflow policy."
    },
    "IDeleteResult": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "True if the deletion (or soft deletion) succeeded, false for failure or no-op due to nonexistence."
        },
        "deleted_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "(Optional/null) UUID for the entity that was deleted, if applicable to the context type. Null if deletion failed or not referencable."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "(Optional/null) UUID for the entity that was deleted, if applicable to the context type. Null if deletion failed or not referencable."
            }
          ],
          "description": "(Optional/null) UUID for the entity that was deleted, if applicable to the context type. Null if deletion failed or not referencable."
        },
        "message": {
          "type": "string",
          "description": "Optional contextual message regarding the result of the delete operation (e.g. 'Deleted', 'Already deleted', 'Not found')."
        }
      },
      "required": [
        "success"
      ],
      "description": "Standard format for simple delete API responses, reporting success/failure, deleted ID, and optional context message.\n\nUsed for rapid check of effect/results in data deletion flows, soft/hard delete policies, and in RESTful error handling."
    },
    "IDiscussionboardBan.IRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "UUID of the banned user to filter ban search/listing. Null for all users."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "UUID of the banned user to filter ban search/listing. Null for all users."
            }
          ],
          "description": "UUID of the banned user to filter ban search/listing. Null for all users."
        },
        "moderator_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "UUID of the moderator/admin who imposed the ban. Null for searching all actors."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "UUID of the moderator/admin who imposed the ban. Null for searching all actors."
            }
          ],
          "description": "UUID of the moderator/admin who imposed the ban. Null for searching all actors."
        },
        "from_start_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Lower bound for ban event's start (ISO 8601). Null for all dates."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Lower bound for ban event's start (ISO 8601). Null for all dates."
            }
          ],
          "description": "Lower bound for ban event's start (ISO 8601). Null for all dates."
        },
        "to_end_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Upper bound for ban event's end (ISO 8601). Null for open ended/future bans."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Upper bound for ban event's end (ISO 8601). Null for open ended/future bans."
            }
          ],
          "description": "Upper bound for ban event's end (ISO 8601). Null for open ended/future bans."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "description": "Page number for paginated results. uint32, optional."
            },
            {
              "type": "null",
              "description": "Page number for paginated results. uint32, optional."
            }
          ],
          "description": "Page number for paginated results. uint32, optional."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "description": "Max results per page. uint32, pagination for scalable ban audit flows."
            },
            {
              "type": "null",
              "description": "Max results per page. uint32, pagination for scalable ban audit flows."
            }
          ],
          "description": "Max results per page. uint32, pagination for scalable ban audit flows."
        }
      },
      "required": [],
      "description": "Objects defining filter parameters and paging for queries over ban events. Used for search, compliance, and moderation team audit flows. All attributes are optional, for flexible queries across actors, targets, and time ranges."
    },
    "IPageIDiscussionboardBan": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardBan"
          },
          "description": "Array of ban records matching search/pagination."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Page wrapper for returning paginated ban search or audit results. Includes navigation metadata and principal record array for compliance or moderation analytics."
    },
    "IDiscussionboardBan": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier for the user ban record. This UUID ensures auditability and the ability to reference or manage a specific ban applied on a user. Derived directly from Prisma column 'id'.\n\nTypically used for record lookups, referencing in moderation tools, or legal traceability."
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "References the banned user. Commissioned from the Prisma field 'user_id'.\n\nThis is the user who was banned (temporarily or permanently), allowing joined queries and direct links to user profiles or content for compliance and appeals processing."
        },
        "moderator_id": {
          "type": "string",
          "format": "uuid",
          "description": "The moderator or admin user account who imposed the ban. From Prisma 'moderator_id'.\n\nFulfills the platform need for audit tracking of who exercised banning authority, supporting accountability and review processes."
        },
        "moderation_action_id": {
          "type": "string",
          "format": "uuid",
          "description": "Links to the moderation action that justified/triggered the ban, from 'moderation_action_id'.\n\nAllows audit-compliance by making the ban traceable to its motivating action. This may be used in workflows for unbanning or reviewing moderation conduct."
        },
        "start_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO8601 timestamp for when the ban begins. Originates in Prisma as 'start_at'.\n\nUsed to schedule future bans, for appeals scheduling, or for retrospective audit of when sanction took effect."
        },
        "end_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "When the ban/timeout ends, or null for permanent bans. Prisma: 'end_at'.\n\nTemporary bans will have a date of unban; permanent bans have null, supporting business logic for unban eligibility and expiry-based restoration."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "When the ban/timeout ends, or null for permanent bans. Prisma: 'end_at'.\n\nTemporary bans will have a date of unban; permanent bans have null, supporting business logic for unban eligibility and expiry-based restoration."
            }
          ],
          "description": "When the ban/timeout ends, or null for permanent bans. Prisma: 'end_at'.\n\nTemporary bans will have a date of unban; permanent bans have null, supporting business logic for unban eligibility and expiry-based restoration."
        },
        "ban_reason": {
          "type": "string",
          "description": "Human-readable field describing why the ban was issued, directly from Prisma 'ban_reason'.\n\nImportant for both user communication and audit purposes, this field explains to users and admins the rationale for their sanction."
        }
      },
      "required": [
        "id",
        "user_id",
        "moderator_id",
        "moderation_action_id",
        "start_at",
        "ban_reason"
      ],
      "description": "A normalized record representing one ban (or timeout) event for a user on the platform.\n\nDirectly mirrors Prisma 'discussionboard_ban' with full audit context. Used by moderators/admins to manage bans, for compliance reviews, appeals, and analytics. All fields are atomic and normalized for traceability. No denormalized user or moderator data is repeated."
    },
    "IDiscussionboardBan.ICreate": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "The UUID of the user to be banned. Required for new ban creation and links the ban record with user identity in the system."
        },
        "moderator_id": {
          "type": "string",
          "format": "uuid",
          "description": "The user account (moderator/admin) who is imposing the ban. Recorded for audit and traceability."
        },
        "moderation_action_id": {
          "type": "string",
          "format": "uuid",
          "description": "Foreign key reference to the moderation action triggering the ban. Required to maintain audit chain and trace reason/context for the ban."
        },
        "start_at": {
          "type": "string",
          "format": "date-time",
          "description": "The datetime (ISO8601 format) when the ban should begin. Set to now for immediate bans, or a future date for scheduled enforcement."
        },
        "end_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "The datetime when the ban will lift. Null for permanent bans, otherwise specifies the unban time. Used for auto-unbanning or appeals processing."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "The datetime when the ban will lift. Null for permanent bans, otherwise specifies the unban time. Used for auto-unbanning or appeals processing."
            }
          ],
          "description": "The datetime when the ban will lift. Null for permanent bans, otherwise specifies the unban time. Used for auto-unbanning or appeals processing."
        },
        "ban_reason": {
          "type": "string",
          "description": "Explanation of the cause/motivation for the ban, to be shown to both admins and users for transparency."
        }
      },
      "required": [
        "user_id",
        "moderator_id",
        "moderation_action_id",
        "start_at",
        "ban_reason"
      ],
      "description": "Input contract for creating a new user ban in the system, matching required fields from Prisma.\n\nEvery field is audited and essential for compliance and traceability. Used by admin/moderator APIs to ban users for compliance, safety, or rule violations. Permits both permanent (end_at=null) and temporary bans."
    },
    "IDiscussionboardBan.IUpdate": {
      "type": "object",
      "properties": {
        "end_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "A new end timestamp for the ban, or null to extend a ban permanently. Supports appeals, corrections, or administrative adjustments to existing ban lifespans."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "A new end timestamp for the ban, or null to extend a ban permanently. Supports appeals, corrections, or administrative adjustments to existing ban lifespans."
            }
          ],
          "description": "A new end timestamp for the ban, or null to extend a ban permanently. Supports appeals, corrections, or administrative adjustments to existing ban lifespans."
        },
        "ban_reason": {
          "type": "string",
          "description": "Allows updating the rationale in cases where the context changes (appeal granted, further explanation added/clarified)."
        }
      },
      "required": [
        "ban_reason"
      ],
      "description": "Update contract for mutating attributes of an existing ban. Supports changing end date/time or reason for the ban as business logic stipulates. Mutability restricted per compliance rules."
    },
    "IDiscussionboardModeratorNote.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "description": "Which page of moderator notes to retrieve (pagination). Applies to paginated listing endpoints. Used to navigate through lists of moderator notes chronologically or by search criteria."
            },
            {
              "type": "null",
              "minimum": 1,
              "description": "Which page of moderator notes to retrieve (pagination). Applies to paginated listing endpoints. Used to navigate through lists of moderator notes chronologically or by search criteria."
            }
          ],
          "description": "Which page of moderator notes to retrieve (pagination). Applies to paginated listing endpoints. Used to navigate through lists of moderator notes chronologically or by search criteria."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 50,
              "description": "The maximum number of notes per result page. Allows client to control batch size for browsing or export. Cannot exceed 200."
            },
            {
              "type": "null",
              "minimum": 1,
              "maximum": 200,
              "default": 50,
              "description": "The maximum number of notes per result page. Allows client to control batch size for browsing or export. Cannot exceed 200."
            }
          ],
          "description": "The maximum number of notes per result page. Allows client to control batch size for browsing or export. Cannot exceed 200."
        },
        "author_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter by moderator/admin user who authored the note. Null or omitted means no filtering by author."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Filter by moderator/admin user who authored the note. Null or omitted means no filtering by author."
            }
          ],
          "description": "Filter by moderator/admin user who authored the note. Null or omitted means no filtering by author."
        },
        "related_action_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Show only notes associated with this moderation action. Used in drilldown or workflow UI scenarios."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Show only notes associated with this moderation action. Used in drilldown or workflow UI scenarios."
            }
          ],
          "description": "Show only notes associated with this moderation action. Used in drilldown or workflow UI scenarios."
        },
        "target_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Find notes related to a particular user (target of moderation/etc). Useful for compliance reviews and targeted audits."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Find notes related to a particular user (target of moderation/etc). Useful for compliance reviews and targeted audits."
            }
          ],
          "description": "Find notes related to a particular user (target of moderation/etc). Useful for compliance reviews and targeted audits."
        },
        "sort": {
          "oneOf": [
            {
              "const": "created_at",
              "description": "Sorting key for result ordering. Defaults to created_at descending. Supported keys: 'created_at', 'author_id'."
            },
            {
              "const": "author_id",
              "description": "Sorting key for result ordering. Defaults to created_at descending. Supported keys: 'created_at', 'author_id'."
            },
            {
              "type": "null",
              "enum": [
                "created_at",
                "author_id"
              ],
              "description": "Sorting key for result ordering. Defaults to created_at descending. Supported keys: 'created_at', 'author_id'."
            }
          ],
          "description": "Sorting key for result ordering. Defaults to created_at descending. Supported keys: 'created_at', 'author_id'."
        },
        "order": {
          "oneOf": [
            {
              "const": "asc",
              "description": "Sort order direction (ascending or descending) for sorting key."
            },
            {
              "const": "desc",
              "description": "Sort order direction (ascending or descending) for sorting key."
            },
            {
              "type": "null",
              "enum": [
                "asc",
                "desc"
              ],
              "description": "Sort order direction (ascending or descending) for sorting key."
            }
          ],
          "description": "Sort order direction (ascending or descending) for sorting key."
        }
      },
      "required": [],
      "description": "Request structure for searching, paginating, and filtering moderator notes attached to moderation workflow events or users.\n\nAllows advanced filtering for transparency reviews, compliance audits, incident research, and retrospective moderation discussions. Every property maps directly to a search/filter concept, supporting pagination, drill-down, and targeted queries."
    },
    "IPageIDiscussionboardModeratorNote": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Pagination metadata block, giving navigation and total-set information for iterative UIs."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardModeratorNote"
          },
          "description": "Array of moderator note summary/complete objects for the current page, in requested order/filter context."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "A consumable page of moderator notes, enabling paging, filtering, and drill-down for audits and UIs.\n\nUsed by search APIs and moderation dashboards to deliver manageable chunks of potentially large moderator note datasets while preserving navigation controls."
    },
    "IDiscussionboardModeratorNote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Primary key for moderator note. Used for referencing individual notes in drilldown, UI, or audit."
        },
        "author_id": {
          "type": "string",
          "format": "uuid",
          "description": "Author moderator/admin account. Links to discussionboard_user table for attribution and audit."
        },
        "related_action_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally, the moderation action this note relates to. Enables contextual and event-chained note storage."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally, the moderation action this note relates to. Enables contextual and event-chained note storage."
            }
          ],
          "description": "Optionally, the moderation action this note relates to. Enables contextual and event-chained note storage."
        },
        "target_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally, the user this note concerns (supporting user-centric audits, compliance notes, etc)."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally, the user this note concerns (supporting user-centric audits, compliance notes, etc)."
            }
          ],
          "description": "Optionally, the user this note concerns (supporting user-centric audits, compliance notes, etc)."
        },
        "note_body": {
          "type": "string",
          "description": "Full content of the moderator note (commentary, rationale, internal audit detail, etc). Arbitrary plain text supporting compliance/communication."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO8601 creation timestamp for when note was entered. Allows full tracing of note history and order."
        }
      },
      "required": [
        "id",
        "author_id",
        "note_body",
        "created_at"
      ],
      "description": "A detailed, atomic record of a moderator or admin note about a moderation event or user.\n\nDirectly models discussionboard_moderator_note in Prisma, giving traceable, audit-ready content for internal discussion, rationale, and workflow control. All note metadata is normalized and point-in-time."
    },
    "IModeratorNote.ICreate": {
      "type": "object",
      "properties": {
        "author_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the moderator or admin authoring the note. Ensures traceable link to the actor who entered the commentary."
        },
        "note_body": {
          "type": "string",
          "description": "The full content/text of the commentary, rationale, or audit note. Used for documentation, compliance, and internal communication."
        },
        "related_action_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "If the note relates to a specific moderation action, provide the UUID here for audit chain coherence."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "If the note relates to a specific moderation action, provide the UUID here for audit chain coherence."
            }
          ],
          "description": "If the note relates to a specific moderation action, provide the UUID here for audit chain coherence."
        },
        "target_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "If the note is about a particular user (e.g., warning rationale, ongoing case), specify user UUID. Optional, not required for every note."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "If the note is about a particular user (e.g., warning rationale, ongoing case), specify user UUID. Optional, not required for every note."
            }
          ],
          "description": "If the note is about a particular user (e.g., warning rationale, ongoing case), specify user UUID. Optional, not required for every note."
        }
      },
      "required": [
        "author_id",
        "note_body"
      ],
      "description": "Creation contract for moderator notes, mapping required and optional fields per discussionboard_moderator_note table. Used to inject rationale, context, or audit evidence into the system during/after moderation workflows."
    },
    "IModeratorNote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Auto-generated primary key for the moderator note record, as returned after creation."
        },
        "author_id": {
          "type": "string",
          "format": "uuid",
          "description": "Examines who entered/wrote this note. Moderator or admin user ID."
        },
        "note_body": {
          "type": "string",
          "description": "The body/content (arbitrary text) of the moderator/admin note."
        },
        "related_action_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally, UUID reference for a related moderation action. Allows grouping/rationalization/etc in workflow."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally, UUID reference for a related moderation action. Allows grouping/rationalization/etc in workflow."
            }
          ],
          "description": "Optionally, UUID reference for a related moderation action. Allows grouping/rationalization/etc in workflow."
        },
        "target_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally, user affected/concerned by this note."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally, user affected/concerned by this note."
            }
          ],
          "description": "Optionally, user affected/concerned by this note."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Time of note creation (ISO8601), gives timeline for audit/review/systems drilldown."
        }
      },
      "required": [
        "id",
        "author_id",
        "note_body",
        "created_at"
      ],
      "description": "Response/summary contract for moderator notes, matching all atomic fields from the database. Used in replies from note-creation, listing, or drilldown endpoints. Ensures audit-compliance by being strictly point-in-time and normalized."
    },
    "IModeratorNote.IUpdate": {
      "type": "object",
      "properties": {
        "note_body": {
          "type": "string",
          "description": "Revised text/body of the note, if correction or expansion needed. Used for errata updates, clarification, or audit completeness. Old content may be retained in audit trail."
        },
        "related_action_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Change or (re)set the related moderation action UUID, e.g., after finding this note relates to a different event."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Change or (re)set the related moderation action UUID, e.g., after finding this note relates to a different event."
            }
          ],
          "description": "Change or (re)set the related moderation action UUID, e.g., after finding this note relates to a different event."
        },
        "target_user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally, revise/change/clarify target user association. Used if a note is found to concern a different user after the fact."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally, revise/change/clarify target user association. Used if a note is found to concern a different user after the fact."
            }
          ],
          "description": "Optionally, revise/change/clarify target user association. Used if a note is found to concern a different user after the fact."
        }
      },
      "required": [
        "note_body"
      ],
      "description": "Update patch for a moderator note. Allows corrections, expansions, and reference updates for audit/errata policies. Not all systems may allow changing note associations, but field provided for correction scenarios."
    },
    "INotification.IRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter notifications for given user (recipient). Required for inbox/fetch in most cases. Null/absent means query is not user-scoped."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Filter notifications for given user (recipient). Required for inbox/fetch in most cases. Null/absent means query is not user-scoped."
            }
          ],
          "description": "Filter notifications for given user (recipient). Required for inbox/fetch in most cases. Null/absent means query is not user-scoped."
        },
        "actor_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Return only notifications caused by this user. Used for activity filters, transparency investigations, or notification-type reporting."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Return only notifications caused by this user. Used for activity filters, transparency investigations, or notification-type reporting."
            }
          ],
          "description": "Return only notifications caused by this user. Used for activity filters, transparency investigations, or notification-type reporting."
        },
        "notification_type": {
          "oneOf": [
            {
              "type": "string",
              "description": "Request only notifications of a certain event type (e.g. 'reply', 'like', 'report_resolved'). Used to filter by on-screen and out-of-band notification categories."
            },
            {
              "type": "null",
              "description": "Request only notifications of a certain event type (e.g. 'reply', 'like', 'report_resolved'). Used to filter by on-screen and out-of-band notification categories."
            }
          ],
          "description": "Request only notifications of a certain event type (e.g. 'reply', 'like', 'report_resolved'). Used to filter by on-screen and out-of-band notification categories."
        },
        "is_read": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "True to fetch only read notifications, false for unread, null for all."
            },
            {
              "type": "null",
              "description": "True to fetch only read notifications, false for unread, null for all."
            }
          ],
          "description": "True to fetch only read notifications, false for unread, null for all."
        },
        "sort": {
          "oneOf": [
            {
              "const": "created_at",
              "description": "Primary field for sorting notification list. Only 'created_at' supported in most cases."
            },
            {
              "type": "null",
              "enum": [
                "created_at"
              ],
              "description": "Primary field for sorting notification list. Only 'created_at' supported in most cases."
            }
          ],
          "description": "Primary field for sorting notification list. Only 'created_at' supported in most cases."
        },
        "order": {
          "oneOf": [
            {
              "const": "asc",
              "description": "Sort order (ascending, descending) for sorted notification query."
            },
            {
              "const": "desc",
              "description": "Sort order (ascending, descending) for sorted notification query."
            },
            {
              "type": "null",
              "enum": [
                "asc",
                "desc"
              ],
              "description": "Sort order (ascending, descending) for sorted notification query."
            }
          ],
          "description": "Sort order (ascending, descending) for sorted notification query."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "description": "The current page number (1-based, for indexed paging). Used to navigate lists of notifications in large inboxes. Defaults to first page unless specified."
            },
            {
              "type": "null",
              "format": "int32",
              "minimum": 1,
              "description": "The current page number (1-based, for indexed paging). Used to navigate lists of notifications in large inboxes. Defaults to first page unless specified."
            }
          ],
          "description": "The current page number (1-based, for indexed paging). Used to navigate lists of notifications in large inboxes. Defaults to first page unless specified."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 200,
              "default": 50,
              "description": "How many items to return per query batch. Capped at 200; large values impact performance. Tuning recommended for responsive UI/analytics."
            },
            {
              "type": "null",
              "format": "int32",
              "minimum": 1,
              "maximum": 200,
              "default": 50,
              "description": "How many items to return per query batch. Capped at 200; large values impact performance. Tuning recommended for responsive UI/analytics."
            }
          ],
          "description": "How many items to return per query batch. Capped at 200; large values impact performance. Tuning recommended for responsive UI/analytics."
        }
      },
      "required": [],
      "description": "Request structure for paginated, filterable, and searchable notification queries.\n\nEmpowers UIs and system integrations to fetch only notifications relevant for user inbox, admin dashboards, or event analysis. Pagination and filtering essential for performance, personalization, and compliance."
    },
    "IPageINotification": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Navigation block with page, totalRows, totalPages for inbox or notification list UIs."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/INotification"
          },
          "description": "Notification entity rows for the given segment and request filters."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "A paginated, filterable page of notifications suitable for listing, search, and batch processing.\n\nContains results and navigation block for sequential API consumption or backend job processing. Primary shape for notification center AI and analytics queries."
    },
    "INotification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Primary key for this notification record, for referencing, updating, or status tracking."
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "Recipient user to whom this notification is delivered. One per notification."
        },
        "actor_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "The user triggering the notification, or null for automated/system events (admin-generated or scheduled robots)."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "The user triggering the notification, or null for automated/system events (admin-generated or scheduled robots)."
            }
          ],
          "description": "The user triggering the notification, or null for automated/system events (admin-generated or scheduled robots)."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "If related to a post (e.g., reply, like, mention), links to that post entity for contextual notification details."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "If related to a post (e.g., reply, like, mention), links to that post entity for contextual notification details."
            }
          ],
          "description": "If related to a post (e.g., reply, like, mention), links to that post entity for contextual notification details."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "If related to a comment, UUID for contextual drilldown/navigation in the UI."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "If related to a comment, UUID for contextual drilldown/navigation in the UI."
            }
          ],
          "description": "If related to a comment, UUID for contextual drilldown/navigation in the UI."
        },
        "report_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Where notification links to a moderation or reporting workflow, this is the target report UUID."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Where notification links to a moderation or reporting workflow, this is the target report UUID."
            }
          ],
          "description": "Where notification links to a moderation or reporting workflow, this is the target report UUID."
        },
        "notification_type": {
          "type": "string",
          "description": "Atomic type string indicating why this notification exists. Example values (not exhaustive): 'reply', 'like', 'mention', 'report_resolved', 'system_message'. See platform event catalog."
        },
        "content": {
          "type": "string",
          "description": "Plaintext, localized, user-facing message giving notification context. May be user-generated or system-programmatic depending on type."
        },
        "is_read": {
          "type": "boolean",
          "description": "Indicates whether user has seen this notification (in-app or out-of-band). Used for badge counts, inbox filtering, batch status updates."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Creation timestamp (ISO8601); when this notification was generated on the platform."
        },
        "read_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when notification was first marked as read by user (or null if unread)."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Date and time when notification was first marked as read by user (or null if unread)."
            }
          ],
          "description": "Date and time when notification was first marked as read by user (or null if unread)."
        }
      },
      "required": [
        "id",
        "user_id",
        "notification_type",
        "content",
        "is_read",
        "created_at"
      ],
      "description": "A single notification event instance, fully audit and notification-center friendly.\n\nFields normalized for audit/analytics; surfaces context references if the notification is tied to a specific post/comment/report. Used throughout notification delivery, inbox, analytics, and compliance workflows."
    },
    "INotification.ICreate": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "The recipient user's unique identifier. References the user who will receive this notification. Must match the 'user_id' in the notification record—critical for delivering individual alerts to the intended user. See Prisma column: user_id (UUID)."
        },
        "actor_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optionally references the user who triggered this notification. For instance, this user may have replied, liked, or mentioned the recipient. If absent (null), the notification is system-generated. See: actor_id in the Prisma schema."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optionally references the user who triggered this notification. For instance, this user may have replied, liked, or mentioned the recipient. If absent (null), the notification is system-generated. See: actor_id in the Prisma schema."
            }
          ],
          "description": "Optionally references the user who triggered this notification. For instance, this user may have replied, liked, or mentioned the recipient. If absent (null), the notification is system-generated. See: actor_id in the Prisma schema."
        },
        "post_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the related post if this notification relates to a post event (like/reply/etc). Nullable if not post-related. See: post_id in Prisma schema."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "The unique identifier of the related post if this notification relates to a post event (like/reply/etc). Nullable if not post-related. See: post_id in Prisma schema."
            }
          ],
          "description": "The unique identifier of the related post if this notification relates to a post event (like/reply/etc). Nullable if not post-related. See: post_id in Prisma schema."
        },
        "comment_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "The comment this notification relates to, if applicable. If the notification isn't directly connected to a comment, should be null."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "The comment this notification relates to, if applicable. If the notification isn't directly connected to a comment, should be null."
            }
          ],
          "description": "The comment this notification relates to, if applicable. If the notification isn't directly connected to a comment, should be null."
        },
        "report_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "References a report entity (such as user-reported abuse or moderator response). Nullable, for non-report notifications."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "References a report entity (such as user-reported abuse or moderator response). Nullable, for non-report notifications."
            }
          ],
          "description": "References a report entity (such as user-reported abuse or moderator response). Nullable, for non-report notifications."
        },
        "notification_type": {
          "type": "string",
          "description": "Type/category of the notification (e.g., 'reply', 'like', 'mention', 'report_resolved', 'system_message'). Used by the client to route different alert types. Must match an allowed set in the Prisma business logic."
        },
        "content": {
          "type": "string",
          "description": "Localized/user-facing message content of the notification. Directly informs the recipient, e.g., 'You have a new reply.' See: content in Prisma schema."
        }
      },
      "required": [
        "user_id",
        "notification_type",
        "content"
      ],
      "description": "Request object for creating a new notification record, as per 'discussionboard_notification' schema. Implements core delivery parameters for alerting a user to relevant actions. May reference post/comment/report for context, and supports system or user-triggered notifications. See full documentation of notification creation in the requirements analysis and Prisma schema."
    },
    "INotification.IUpdate": {
      "type": "object",
      "properties": {
        "is_read": {
          "type": "boolean",
          "description": "Flag indicating whether the notification has been marked read by the user. Required for supporting user inbox states and unread badge logic."
        },
        "read_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp (ISO8601) when the notification was marked as read. Null until read; filled in at the moment the user reads the notification. Used for analytics and in read/unread badge counts."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Timestamp (ISO8601) when the notification was marked as read. Null until read; filled in at the moment the user reads the notification. Used for analytics and in read/unread badge counts."
            }
          ],
          "description": "Timestamp (ISO8601) when the notification was marked as read. Null until read; filled in at the moment the user reads the notification. Used for analytics and in read/unread badge counts."
        }
      },
      "required": [
        "is_read"
      ],
      "description": "Payload for updating an existing notification—typically to mark it as read/unread or update the read_at timestamp for audit/user experience. Fulfills business logic for notification lifecycle and state tracking."
    },
    "INotificationSetting.IRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "User's unique identifier for whom notification settings are being requested or filtered. If null, defaults to the authenticated user in most flows."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "User's unique identifier for whom notification settings are being requested or filtered. If null, defaults to the authenticated user in most flows."
            }
          ],
          "description": "User's unique identifier for whom notification settings are being requested or filtered. If null, defaults to the authenticated user in most flows."
        },
        "notification_type": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional filter for a specific notification type (e.g., 'reply', 'like'). Restricts response to settings for this type."
            },
            {
              "type": "null",
              "description": "Optional filter for a specific notification type (e.g., 'reply', 'like'). Restricts response to settings for this type."
            }
          ],
          "description": "Optional filter for a specific notification type (e.g., 'reply', 'like'). Restricts response to settings for this type."
        },
        "channel": {
          "oneOf": [
            {
              "type": "string",
              "description": "Restricts retrieved settings to a delivery channel (like 'web', 'email', or 'sms'). If null or omitted, returns all channels for matching types."
            },
            {
              "type": "null",
              "description": "Restricts retrieved settings to a delivery channel (like 'web', 'email', or 'sms'). If null or omitted, returns all channels for matching types."
            }
          ],
          "description": "Restricts retrieved settings to a delivery channel (like 'web', 'email', or 'sms'). If null or omitted, returns all channels for matching types."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for paginated result. If null, defaults to first page."
            },
            {
              "type": "null",
              "minimum": 1,
              "description": "Page number for paginated result. If null, defaults to first page."
            }
          ],
          "description": "Page number for paginated result. If null, defaults to first page."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "description": "Maximum results per page. Used for pagination purposes; default as per system settings (often 100)."
            },
            {
              "type": "null",
              "minimum": 1,
              "description": "Maximum results per page. Used for pagination purposes; default as per system settings (often 100)."
            }
          ],
          "description": "Maximum results per page. Used for pagination purposes; default as per system settings (often 100)."
        }
      },
      "required": [],
      "description": "Request object for paginating, filtering, and searching notification settings. Implements retrieval of user notification preferences by type, channel, or user."
    },
    "IPageINotificationSetting": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/INotificationSetting"
          },
          "description": "List of notification setting records for the requested page/filter."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "A paginated container object for notification settings, used in list/search APIs. Implements the standard IPage pattern with INotificationSetting records as members."
    },
    "INotificationSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Primary key for the notification setting record. UUID generated on row insertion in the database."
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "User who owns this notification setting. Must reference a user in the system."
        },
        "notification_type": {
          "type": "string",
          "description": "Type of notification (e.g., 'reply', 'like', etc) to which this setting applies. Controls notification delivery by category."
        },
        "channel": {
          "type": "string",
          "description": "Notification delivery method/channel (e.g., 'web', 'email', 'sms'). Defaults are system dependent; see business requirements."
        },
        "is_enabled": {
          "type": "boolean",
          "description": "True if this notification type/channel is enabled for the user. Allows granular opt-in/out for each user and notification kind."
        }
      },
      "required": [
        "id",
        "user_id",
        "notification_type",
        "channel",
        "is_enabled"
      ],
      "description": "Notification settings (user preferences) entity representing a single (user, type, channel) tuple. Controls how and whether a user receives individual alert types by channel. Use to render and edit user notification preferences. Aligns with Prisma 'discussionboard_notification_setting' table."
    },
    "INotificationSetting.ICreate": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "uuid",
          "description": "User's unique identifier for the notification preference (must exist in users table)."
        },
        "notification_type": {
          "type": "string",
          "description": "Type of notification to enable/disable preference for (e.g., 'reply', 'like')."
        },
        "channel": {
          "type": "string",
          "description": "Delivery channel—one of 'web', 'email', 'sms', etc., as supported by the system."
        },
        "is_enabled": {
          "type": "boolean",
          "description": "True/false as to whether this notification preference is enabled for the user."
        }
      },
      "required": [
        "user_id",
        "notification_type",
        "channel",
        "is_enabled"
      ],
      "description": "Request object to create a user notification preference row. Specifies the user, the type/channel, and preference (enable/disable) in concert with business requirements."
    },
    "INotificationSetting.IUpdate": {
      "type": "object",
      "properties": {
        "notification_type": {
          "type": "string",
          "description": "[Optional] Updated notification type (e.g., for type/category change on preference row)."
        },
        "channel": {
          "type": "string",
          "description": "[Optional] Updated notification delivery channel ('web', 'email', etc)."
        },
        "is_enabled": {
          "type": "boolean",
          "description": "Updated enable/disable status for this type/channel."
        }
      },
      "required": [
        "is_enabled"
      ],
      "description": "Payload for updating a notification setting, typically toggling enabled state or (rarely) updating type/channel. At least 'is_enabled' must be sent to represent opt-in/out changes, as enforced in business logic."
    },
    "IAuditLog.IRequest": {
      "type": "object",
      "properties": {
        "actor_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter by actor's user ID (administrator, moderator, or user who performed the action). Null returns all actors."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Filter by actor's user ID (administrator, moderator, or user who performed the action). Null returns all actors."
            }
          ],
          "description": "Filter by actor's user ID (administrator, moderator, or user who performed the action). Null returns all actors."
        },
        "action": {
          "oneOf": [
            {
              "type": "string",
              "description": "Filter log records by the type of action (e.g., 'delete_post', 'ban_user'). When null, all action types included."
            },
            {
              "type": "null",
              "description": "Filter log records by the type of action (e.g., 'delete_post', 'ban_user'). When null, all action types included."
            }
          ],
          "description": "Filter log records by the type of action (e.g., 'delete_post', 'ban_user'). When null, all action types included."
        },
        "target_type": {
          "oneOf": [
            {
              "type": "string",
              "description": "Enables filtering for audit logs affecting a specific entity type (e.g., 'post', 'thread', 'user')."
            },
            {
              "type": "null",
              "description": "Enables filtering for audit logs affecting a specific entity type (e.g., 'post', 'thread', 'user')."
            }
          ],
          "description": "Enables filtering for audit logs affecting a specific entity type (e.g., 'post', 'thread', 'user')."
        },
        "target_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter by specific target entity ID. Null for all targets."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Filter by specific target entity ID. Null for all targets."
            }
          ],
          "description": "Filter by specific target entity ID. Null for all targets."
        },
        "created_from": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Earliest timestamp for created_at in result set. Used to retrieve records created after a given date (inclusive)."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Earliest timestamp for created_at in result set. Used to retrieve records created after a given date (inclusive)."
            }
          ],
          "description": "Earliest timestamp for created_at in result set. Used to retrieve records created after a given date (inclusive)."
        },
        "created_to": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Latest timestamp for created_at in result set. Used to retrieve records created up to a given date (inclusive)."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Latest timestamp for created_at in result set. Used to retrieve records created up to a given date (inclusive)."
            }
          ],
          "description": "Latest timestamp for created_at in result set. Used to retrieve records created up to a given date (inclusive)."
        },
        "page": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for paginated result."
            },
            {
              "type": "null",
              "minimum": 1,
              "description": "Page number for paginated result."
            }
          ],
          "description": "Page number for paginated result."
        },
        "limit": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "description": "Items per page. Defaults to 100; set lower/higher for customized page sizing."
            },
            {
              "type": "null",
              "minimum": 1,
              "description": "Items per page. Defaults to 100; set lower/higher for customized page sizing."
            }
          ],
          "description": "Items per page. Defaults to 100; set lower/higher for customized page sizing."
        }
      },
      "required": [],
      "description": "Request object for searching, filtering, and paginating audit log entries. Supports compliance/audit workflows and administrative review as per requirements."
    },
    "IPageAuditLog": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IAuditLog"
          },
          "description": "Page of audit log entries returned for the requested filters."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "A paginated list of audit log entries, structured with page metadata and a data array of IAuditLog entity records. Used in audit log dashboards/retrieval APIs."
    },
    "IAuditLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Primary key for the audit log entry."
        },
        "actor_id": {
          "type": "string",
          "format": "uuid",
          "description": "User ID for the actor who performed this action (may be admin, moderator, or normal user)."
        },
        "action": {
          "type": "string",
          "description": "Type of action described by this log entry (e.g., 'delete_post', 'ban_user', 'edit_thread', 'change_settings'). Business logic defines allowed values."
        },
        "target_type": {
          "type": "string",
          "description": "Entity/resource type affected by this log record (e.g., 'post', 'user', 'thread')."
        },
        "target_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional reference to the affected entity/target's ID. Null when inapplicable."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional reference to the affected entity/target's ID. Null when inapplicable."
            }
          ],
          "description": "Optional reference to the affected entity/target's ID. Null when inapplicable."
        },
        "metadata": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional additional context, stored as a JSON object or string-encoded JSON. Used for complex traceability or audit context."
            },
            {
              "type": "null",
              "description": "Optional additional context, stored as a JSON object or string-encoded JSON. Used for complex traceability or audit context."
            }
          ],
          "description": "Optional additional context, stored as a JSON object or string-encoded JSON. Used for complex traceability or audit context."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (ISO8601) when this audit log was created."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "When present, marks log as soft-deleted in accordance with retention/business policies."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "When present, marks log as soft-deleted in accordance with retention/business policies."
            }
          ],
          "description": "When present, marks log as soft-deleted in accordance with retention/business policies."
        }
      },
      "required": [
        "id",
        "actor_id",
        "action",
        "target_type",
        "created_at"
      ],
      "description": "Audit log entity, representing an atomic, immutable record of a user/system action for compliance, traceability, and forensic analysis. Fulfills 'discussionboard_audit_log' normalization and audit policies."
    },
    "IAuditLog.ICreate": {
      "type": "object",
      "properties": {
        "actor_id": {
          "type": "string",
          "format": "uuid",
          "description": "User ID of the actor who performed the audited action. Must match a user in the system."
        },
        "action": {
          "type": "string",
          "description": "The type of action being recorded (e.g., 'delete_post', 'ban_user', etc)."
        },
        "target_type": {
          "type": "string",
          "description": "Entity/resource type affected by this action ('post', 'user', etc)."
        },
        "target_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Optional reference to the target entity's ID."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Optional reference to the target entity's ID."
            }
          ],
          "description": "Optional reference to the target entity's ID."
        },
        "metadata": {
          "oneOf": [
            {
              "type": "string",
              "description": "JSON-encoded string with contextual details for this audit event; may include change sets, IP address, browser, prior/after values, etc."
            },
            {
              "type": "null",
              "description": "JSON-encoded string with contextual details for this audit event; may include change sets, IP address, browser, prior/after values, etc."
            }
          ],
          "description": "JSON-encoded string with contextual details for this audit event; may include change sets, IP address, browser, prior/after values, etc."
        }
      },
      "required": [
        "actor_id",
        "action",
        "target_type"
      ],
      "description": "Request object for creating an audit log entry. Accepts core audit event fields in accordance with compliance/business traceability demands."
    },
    "IAuditLog.IUpdate": {
      "type": "object",
      "properties": {
        "metadata": {
          "oneOf": [
            {
              "type": "string",
              "description": "(Optional) New/updated encoded metadata for this audit event. Used to correct/add contextual details."
            },
            {
              "type": "null",
              "description": "(Optional) New/updated encoded metadata for this audit event. Used to correct/add contextual details."
            }
          ],
          "description": "(Optional) New/updated encoded metadata for this audit event. Used to correct/add contextual details."
        }
      },
      "required": [
        "metadata"
      ],
      "description": "Payload for updating metadata of an existing audit log record, supporting post-hoc corrections for audit details or context."
    },
    "ISystemEvent.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "uint32",
          "description": "Page number for pagination of system events. Used in paginated UI or when iterating over a logbook. Optional, defaults to 1."
        },
        "limit": {
          "type": "integer",
          "format": "uint32",
          "description": "Maximum records per page. Used to control server and UI load. Defaults to 100."
        },
        "event_type": {
          "type": "string",
          "description": "Event type filter (e.g., 'backup', 'error', 'prune', etc.). Used for advanced search of system events by category."
        },
        "event_status": {
          "type": "string",
          "description": "Event status filter (e.g., 'success', 'error', 'pending'). Use to filter by process completion or error state."
        },
        "date_from": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Start date interval for system event search (ISO 8601). Returns only events created_at >= date_from."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Start date interval for system event search (ISO 8601). Returns only events created_at >= date_from."
            }
          ],
          "description": "Start date interval for system event search (ISO 8601). Returns only events created_at >= date_from."
        },
        "date_to": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "End date interval for system event search (ISO 8601). Returns events created_at <= date_to."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "End date interval for system event search (ISO 8601). Returns events created_at <= date_to."
            }
          ],
          "description": "End date interval for system event search (ISO 8601). Returns events created_at <= date_to."
        },
        "sort_by": {
          "type": "string",
          "description": "Field to sort by (e.g., 'created_at', 'event_type'). Determines record order in the result set."
        },
        "sort_order": {
          "oneOf": [
            {
              "const": "asc",
              "description": "Sort order, either ascending ('asc') or descending ('desc'). Defaults to 'desc' by created_at."
            },
            {
              "const": "desc",
              "description": "Sort order, either ascending ('asc') or descending ('desc'). Defaults to 'desc' by created_at."
            }
          ],
          "description": "Sort order, either ascending ('asc') or descending ('desc'). Defaults to 'desc' by created_at."
        }
      },
      "required": [],
      "description": "Query and filter object for listing/searching system events. Used by admin/system monitoring tools to paginate/filter event logs—supports all search and sort options found in discussionboard_system_event.\n\nAll fields are optional; providing no fields fetches first page of most recent events. Reference: discussionboard_system_event Prisma table and ERD."
    },
    "IPageSystemEvent": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Pagination metadata for the system event page."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ISystemEvent"
          },
          "description": "List of system events on this page."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Paginated result for system event search/list API. Contains pagination info and array of atomic ISystemEvent entities.\n\nReference: discussionboard_system_event. Used for admin/system logs audit and diagnostics pages."
    },
    "ISystemEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Primary key for system event log entry. Auto-generated UUID. See discussionboard_system_event.id."
        },
        "event_type": {
          "type": "string",
          "description": "Category/type of the system event (e.g., 'backup', 'error', 'prune', etc.). @see discussionboard_system_event.event_type."
        },
        "event_status": {
          "type": "string",
          "description": "Status of the event: e.g., 'success', 'error', 'pending'. See discussionboard_system_event.event_status."
        },
        "details": {
          "oneOf": [
            {
              "type": "string",
              "description": "Details or extended context in JSON-encoded string (optional). Includes job metadata, error messages, or admin notes. @see discussionboard_system_event.details."
            },
            {
              "type": "null",
              "description": "Details or extended context in JSON-encoded string (optional). Includes job metadata, error messages, or admin notes. @see discussionboard_system_event.details."
            }
          ],
          "description": "Details or extended context in JSON-encoded string (optional). Includes job metadata, error messages, or admin notes. @see discussionboard_system_event.details."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp for log creation. Track event chronology for diagnosis, audit, and analytics. @see discussionboard_system_event.created_at."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Soft deletion timestamp if purged (nullable). Used for retention management and clean-up events. @see discussionboard_system_event.deleted_at."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Soft deletion timestamp if purged (nullable). Used for retention management and clean-up events. @see discussionboard_system_event.deleted_at."
            }
          ],
          "description": "Soft deletion timestamp if purged (nullable). Used for retention management and clean-up events. @see discussionboard_system_event.deleted_at."
        }
      },
      "required": [
        "id",
        "event_type",
        "event_status",
        "created_at"
      ],
      "description": "System event log record. Represents background jobs, automated platform events, diagnostics, and infrastructure triggers. Fully atomic and normalized per discussionboard_system_event.\n\nContains all metadata required to display, analyze, or manage system events as seen in admin dashboards or audit/recovery tools."
    },
    "ISystemEvent.ICreate": {
      "type": "object",
      "properties": {
        "event_type": {
          "type": "string",
          "description": "Event type code (e.g., 'backup', 'error', 'prune'). Required."
        },
        "event_status": {
          "type": "string",
          "description": "Status of the event: e.g., 'success', 'error', 'pending'. Required."
        },
        "details": {
          "oneOf": [
            {
              "type": "string",
              "description": "JSON-encoded string of additional details or metadata. Optional."
            },
            {
              "type": "null",
              "description": "JSON-encoded string of additional details or metadata. Optional."
            }
          ],
          "description": "JSON-encoded string of additional details or metadata. Optional."
        }
      },
      "required": [
        "event_type",
        "event_status"
      ],
      "description": "Payload for inserting a new system event record.\n\nRequired fields: event_type, event_status.\nOptional: details.\n@see discussionboard_system_event creation flows."
    },
    "ISystemEvent.IUpdate": {
      "type": "object",
      "properties": {
        "event_status": {
          "type": "string",
          "description": "New status of the system event, e.g. to update from 'pending' to 'success' or 'error' after completion."
        },
        "details": {
          "oneOf": [
            {
              "type": "string",
              "description": "Updated or appended JSON context/info (optional)."
            },
            {
              "type": "null",
              "description": "Updated or appended JSON context/info (optional)."
            }
          ],
          "description": "Updated or appended JSON context/info (optional)."
        }
      },
      "required": [],
      "description": "Payload for updating an existing system event record. Allows status and details update. @see discussionboard_system_event mutation/maintenance."
    },
    "ISetting.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "uint32",
          "description": "Page number for paginated results."
        },
        "limit": {
          "type": "integer",
          "format": "uint32",
          "description": "Number of settings per page. Defaults to 100."
        },
        "key": {
          "type": "string",
          "description": "Filter by settings key. Used for searching specific config entries."
        },
        "board_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Filter settings by associated board (UUID). Can be null for global settings."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Filter settings by associated board (UUID). Can be null for global settings."
            }
          ],
          "description": "Filter settings by associated board (UUID). Can be null for global settings."
        },
        "enabled": {
          "type": "boolean",
          "description": "Filter to only enabled or disabled settings, as per system status. Not directly present on schema, recommend semantics where deleted_at is null for enabled."
        },
        "search": {
          "type": "string",
          "description": "Free text search over keys, values, and descriptions. Enables advanced search UIs for admin tools."
        },
        "sort_by": {
          "type": "string",
          "description": "Sort field (e.g., 'created_at', 'key'). Determines order of result set."
        },
        "sort_order": {
          "oneOf": [
            {
              "const": "asc",
              "description": "Sort order of the results, 'asc' or 'desc'. Defaults to 'desc'."
            },
            {
              "const": "desc",
              "description": "Sort order of the results, 'asc' or 'desc'. Defaults to 'desc'."
            }
          ],
          "description": "Sort order of the results, 'asc' or 'desc'. Defaults to 'desc'."
        }
      },
      "required": [],
      "description": "Query/filter object for settings list/search API. Lets admins audit, navigate, and locate configuration settings by board, key, or global scope in discussionboard_setting.\n\nAll fields optional; defaults fetch all latest."
    },
    "IPageSetting": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Pagination meta for settings result page."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardSetting"
          },
          "description": "List of setting objects on the result page."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Paginated result object for configuration settings search/list API."
    },
    "IDiscussionboardSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for configuration entry. See discussionboard_setting.id."
        },
        "board_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Board association (UUID) or null for global setting. @see discussionboard_setting.board_id."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Board association (UUID) or null for global setting. @see discussionboard_setting.board_id."
            }
          ],
          "description": "Board association (UUID) or null for global setting. @see discussionboard_setting.board_id."
        },
        "key": {
          "type": "string",
          "description": "Key for system or board setting (e.g., 'max_post_length', 'allow_guests'). Suggests what this config controls. @see discussionboard_setting.key."
        },
        "value": {
          "type": "string",
          "description": "Value of the setting, always an atomic string (e.g., 'true', '200', 'ENABLED'). @see discussionboard_setting.value."
        },
        "description": {
          "oneOf": [
            {
              "type": "string",
              "description": "Free-form description of the setting's business meaning/rules. Used for admin documentation and advanced config UI. @see discussionboard_setting.description."
            },
            {
              "type": "null",
              "description": "Free-form description of the setting's business meaning/rules. Used for admin documentation and advanced config UI. @see discussionboard_setting.description."
            }
          ],
          "description": "Free-form description of the setting's business meaning/rules. Used for admin documentation and advanced config UI. @see discussionboard_setting.description."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Creation timestamp (ISO 8601). @see discussionboard_setting.created_at."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification timestamp (ISO 8601). @see discussionboard_setting.updated_at."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "If set, setting is disabled/soft-deleted. Used for retention or audit policies. @see discussionboard_setting.deleted_at."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "If set, setting is disabled/soft-deleted. Used for retention or audit policies. @see discussionboard_setting.deleted_at."
            }
          ],
          "description": "If set, setting is disabled/soft-deleted. Used for retention or audit policies. @see discussionboard_setting.deleted_at."
        }
      },
      "required": [
        "id",
        "key",
        "value",
        "created_at",
        "updated_at"
      ],
      "description": "Configuration entity for platform or board-level setting, atomic per row. Used for admin/config/A-B testing UIs. Fields align to Prisma model discussionboard_setting. Board_id null marks global setting; not deleted if deleted_at null."
    },
    "IDiscussionboardSetting.ICreate": {
      "type": "object",
      "properties": {
        "board_id": {
          "oneOf": [
            {
              "type": "string",
              "format": "uuid",
              "description": "Board association (UUID), nullable for global config."
            },
            {
              "type": "null",
              "format": "uuid",
              "description": "Board association (UUID), nullable for global config."
            }
          ],
          "description": "Board association (UUID), nullable for global config."
        },
        "key": {
          "type": "string",
          "description": "Key for setting, must be unique per (board, key)."
        },
        "value": {
          "type": "string",
          "description": "Atomic value as string (e.g., 'true', '50', 'ENABLED')."
        },
        "description": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional explanation/comment for the config entry."
            },
            {
              "type": "null",
              "description": "Optional explanation/comment for the config entry."
            }
          ],
          "description": "Optional explanation/comment for the config entry."
        }
      },
      "required": [
        "key",
        "value"
      ],
      "description": "Payload for creating a new settings entry. Board_id is optional for global configs. Most key/value pairs required by system policy."
    },
    "IDiscussionboardSetting.IUpdate": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "New or updated config key (must remain unique with respect to board_id, if changed)."
        },
        "value": {
          "type": "string",
          "description": "Update value for this config entry (as string)."
        },
        "description": {
          "oneOf": [
            {
              "type": "string",
              "description": "Updated description for admins/admin UI."
            },
            {
              "type": "null",
              "description": "Updated description for admins/admin UI."
            }
          ],
          "description": "Updated description for admins/admin UI."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Time of soft deletion or null if still enabled."
            },
            {
              "type": "null",
              "format": "date-time",
              "description": "Time of soft deletion or null if still enabled."
            }
          ],
          "description": "Time of soft deletion or null if still enabled."
        }
      },
      "required": [],
      "description": "Payload to update an existing config entry. Fields are optional; at least one should be supplied to perform an update."
    },
    "IDiscussionboardTag.IRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "uint32",
          "description": "Page number for tag list pagination."
        },
        "limit": {
          "type": "integer",
          "format": "uint32",
          "description": "Max tags per page. Default 100."
        },
        "search": {
          "type": "string",
          "description": "Free-text or fuzzy match on tag name, description, color."
        },
        "enabled": {
          "type": "boolean",
          "description": "Filter on enabled/disabled tags (enabled = true means tags available for assignment)."
        },
        "sort_by": {
          "type": "string",
          "description": "Sort field for search results ('created_at', 'name', etc.)."
        },
        "sort_order": {
          "oneOf": [
            {
              "const": "asc",
              "description": "Order of sorting: asc (oldest/lowest first) or desc (latest/highest first). Default desc by created_at."
            },
            {
              "const": "desc",
              "description": "Order of sorting: asc (oldest/lowest first) or desc (latest/highest first). Default desc by created_at."
            }
          ],
          "description": "Order of sorting: asc (oldest/lowest first) or desc (latest/highest first). Default desc by created_at."
        }
      },
      "required": [],
      "description": "Query/filter/search object for admin or power-user browsing of tags. Returns filtered list of tag entities as per discussionboard_tag schema; aligns with advanced search and bulk actions UI design."
    },
    "IPageIDiscussionboardTag": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination",
          "description": "Pagination details for tag-listing result page."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardTag"
          },
          "description": "Actual tag entities on this result page."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Paged/filtered set of tags for tag-management and admin interfaces. Used to power CRUD, tag-cloud, and analytics screens. Reference: discussionboard_tag schema."
    },
    "IDiscussionboardTag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier of the tag. This property connects tag metadata with the rest of the system and supports referential integrity. Referenced in user discussions as a tag classification for threads or posts.\n\nMatches the 'id' column in discussionboard_tag."
        },
        "name": {
          "type": "string",
          "description": "A unique, case-insensitive tag name used for thread or post classification. Should be kept concise for search and display; must be unique per database constraints.\n\nMatches the 'name' column in discussionboard_tag."
        },
        "color": {
          "oneOf": [
            {
              "type": "string",
              "description": "An optional display color for the tag, such as a HEX code (e.g., #FF0000). Used for UI visual distinction. Value may be null.\n\nMatches the 'color' column in discussionboard_tag."
            },
            {
              "type": "null"
            }
          ],
          "description": "An optional display color for the tag, such as a HEX code (e.g., #FF0000). Used for UI visual distinction. Value may be null.\n\nMatches the 'color' column in discussionboard_tag."
        },
        "description": {
          "oneOf": [
            {
              "type": "string",
              "description": "An extended explanation or summary for the tag's intended use. Helpful for admins and power-users managing the tag taxonomy; can be empty/null.\n\nMatches the 'description' column in discussionboard_tag."
            },
            {
              "type": "null"
            }
          ],
          "description": "An extended explanation or summary for the tag's intended use. Helpful for admins and power-users managing the tag taxonomy; can be empty/null.\n\nMatches the 'description' column in discussionboard_tag."
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether this tag is enabled and visible for assignment to threads/posts. Only tags with enabled=true should be listed for assignment in the UI.\n\nMatches the 'enabled' column in discussionboard_tag."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of tag creation, in ISO 8601 format. Useful for audit, tag management, and analytics. Set once, never changes after insert.\n\nMatches the 'created_at' column in discussionboard_tag."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp for the last update to this tag. Used for audit trails and recency metrics, in ISO 8601 format.\n\nMatches the 'updated_at' column in discussionboard_tag."
        },
        "deleted_at": {
          "oneOf": [
            {
              "type": "string",
              "format": "date-time",
              "description": "Soft delete timestamp. If set, the tag has been deleted but remains for retention and audit.\n\nMatches the 'deleted_at' column in discussionboard_tag and supports the business rules of logical deletion and recoverability."
            },
            {
              "type": "null"
            }
          ],
          "description": "Soft delete timestamp. If set, the tag has been deleted but remains for retention and audit.\n\nMatches the 'deleted_at' column in discussionboard_tag and supports the business rules of logical deletion and recoverability."
        }
      },
      "required": [
        "id",
        "name",
        "enabled",
        "created_at",
        "updated_at"
      ],
      "description": "Discussion Board Tag object, representing a tag for thread or post classification. This schema is based on the discussionboard_tag Prisma model.\n\nContains all atomic data needed for tag management, searching, and assignment. See discussionboard_tag table documentation for full property descriptions and normalization details."
    },
    "IDiscussionboardTag.ICreate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The new tag's name (must be unique, case-insensitive). Provided by admin or user when creating tag. Matches 'name' in Prisma schema."
        },
        "color": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional HEX color for UI (e.g., #44AAFF). Accepts null or string per discussionboard_tag model."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional HEX color for UI (e.g., #44AAFF). Accepts null or string per discussionboard_tag model."
        },
        "description": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optional tag description for admin visibility; may be empty or null."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optional tag description for admin visibility; may be empty or null."
        }
      },
      "required": [
        "name"
      ],
      "description": "Payload to create a new tag in the discussionboard_tag table.\n\nFulfills the requirement for adding new classification tags to the forum for advanced search and navigation. Contains all user-supplied data needed for creation; system fields like id/timestamp are database managed."
    },
    "IDiscussionboardTag.IUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "New name for tag. Optional unless being updated."
        },
        "color": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optionally updates color (HEX). May be null."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optionally updates color (HEX). May be null."
        },
        "description": {
          "oneOf": [
            {
              "type": "string",
              "description": "Optionally updates description text. May be null."
            },
            {
              "type": "null"
            }
          ],
          "description": "Optionally updates description text. May be null."
        },
        "enabled": {
          "type": "boolean",
          "description": "Toggle tag enable/disable for assignment in UI. Optional; set as needed."
        }
      },
      "description": "Payload for updating an existing tag (discussionboard_tag). Supports patching one or more updatable fields per Prisma model and business rules.\n\nOnly admin/tag-manager roles may use this. Includes all fields permitted by forum policy. Omit or null optional fields for no change.",
      "required": []
    },
    "IDiscussionboardSearchIndex.IRequest": {
      "type": "object",
      "properties": {
        "source_type": {
          "type": "string",
          "description": "The type/category of content being indexed (e.g., 'post', 'thread', 'comment', 'tag'). Enables filtering of search indices by entity type.\n\nRelates to the 'source_type' column in discussionboard_search_index."
        },
        "source_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique ID referencing the entity being indexed (post/thread/comment/tag). Allows precise filter/search by content origin.\n\nRelates to the 'source_id' column in discussionboard_search_index."
        },
        "indexed_text": {
          "type": "string",
          "description": "Full-text or partial-text search content. Used to search by phrase/keyword across all indexed entities.\n\nRelates to the 'indexed_text' column in discussionboard_search_index."
        },
        "created_from": {
          "type": "string",
          "format": "date-time",
          "description": "Start of time range for indexed records, in ISO 8601. Used for filtering new or recent indices.\n\nNot in original model, but commonly required by search queries."
        },
        "created_to": {
          "type": "string",
          "format": "date-time",
          "description": "End of time range for indexed records, in ISO 8601."
        },
        "page": {
          "type": "integer",
          "minimum": 1,
          "description": "Current page number for pagination. Default: 1."
        },
        "limit": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "description": "Number of records per page. Enforced max for performance; default: 100."
        },
        "sort_by": {
          "type": "string",
          "description": "Sort field; one of 'created_at', 'source_type', etc."
        },
        "sort_dir": {
          "oneOf": [
            {
              "const": "asc",
              "description": "Sort order; 'asc' or 'desc'. Enforced as enum."
            },
            {
              "const": "desc",
              "description": "Sort order; 'asc' or 'desc'. Enforced as enum."
            }
          ],
          "description": "Sort order; 'asc' or 'desc'. Enforced as enum."
        }
      },
      "description": "Request schema for searching, filtering, and paginating discussionboard_search_index entries.\n\nEnables advanced search, analytics tools, index diagnostics, and bulk management UI for forum administrators. For full-text search and analytics flows.",
      "required": []
    },
    "IPageIDiscussionboardSearchIndex": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/components/schemas/IPage.IPagination"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/IDiscussionboardSearchIndex"
          },
          "description": "Array of result entries (search index records) on this page.\n\nEach matches the discussionboard_search_index object type."
        }
      },
      "required": [
        "pagination",
        "data"
      ],
      "description": "Paginated result wrapper for queries returning multiple discussionboard_search_index records. Fulfills the IPage convention for scalable bulk data retrieval. Aggregates page info and matching search index records."
    },
    "IDiscussionboardSearchIndex": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for this search index entry. Used to access, update, or delete search index records. Matches the 'id' in discussionboard_search_index."
        },
        "source_type": {
          "type": "string",
          "description": "Specifies the entity type: 'post', 'thread', 'comment', or 'tag', etc. Allows the system to distinguish between index records for different reference entities.\n\nMatches 'source_type' in discussionboard_search_index."
        },
        "source_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the record being indexed (e.g., post/thread/comment/tag). Supports referential integrity, used for lookup/removal/refresh.\n\nMatches 'source_id' in discussionboard_search_index."
        },
        "indexed_text": {
          "type": "string",
          "description": "The raw full-text content indexed for the source record, used in search engine queries. Example: a post's body or thread's title concatenated for search.\n\nMatches 'indexed_text' in discussionboard_search_index."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp recording when this index entry was created, in ISO 8601.\n\nMatches 'created_at' in discussionboard_search_index."
        }
      },
      "required": [
        "id",
        "source_type",
        "source_id",
        "indexed_text",
        "created_at"
      ],
      "description": "Discussion Board Search Index record.\n\nRepresents an atomic full-text/fuzzy-search index record for use in advanced search and discovery utilities across posts, threads, comments, or tags. See the discussionboard_search_index model for full explanation."
    },
    "IDiscussionboardSearchIndex.ICreate": {
      "type": "object",
      "properties": {
        "source_type": {
          "type": "string",
          "description": "Specifies type of the indexed content (e.g., 'post', 'thread', 'comment', 'tag'). Must match business-allowed source types. Required for creation and ensures the correct cross-table linkage. Matches schema property."
        },
        "source_id": {
          "type": "string",
          "format": "uuid",
          "description": "ID of the entity being indexed. Must be an existing post/thread/comment/tag, enforced by business logic and referential integrity.\n\nRequired for creation. Matches source_id in schema."
        },
        "indexed_text": {
          "type": "string",
          "description": "The text content to be indexed for full-text or fuzzy search. Required for creation. Should contain the normalized, concatenated string for search."
        }
      },
      "required": [
        "source_type",
        "source_id",
        "indexed_text"
      ],
      "description": "Payload for creating a new search index record (discussionboard_search_index).\n\nUsed during indexing jobs, after creating/updating content, or as part of background re-indexing processes. Only allowed for permitted source/entity types per business rules."
    },
    "IDiscussionboardSearchIndex.IUpdate": {
      "type": "object",
      "properties": {
        "source_type": {
          "type": "string",
          "description": "If entity type is changing (rare, typically not in patch). Optional for update."
        },
        "source_id": {
          "type": "string",
          "format": "uuid",
          "description": "If the indexed entity reference is changing (rare). Optional for update."
        },
        "indexed_text": {
          "type": "string",
          "description": "Updated text to re-index. Use for search content refresh after editing, moderation, or restoration."
        }
      },
      "description": "Update payload for a search index entry, as in discussionboard_search_index.\n\nAll fields are optional. Allows administrators or indexers to refresh, correct, or realign the search index to match the most current source entity. Fields omitted are unchanged.",
      "required": []
    },
    "IDiscussionboardSearchIndex.IDeleteResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The unique identifier of the search index entry that was deleted. Returned for reference and auditing after delete operations."
        },
        "deleted": {
          "type": "boolean",
          "description": "Indicates whether the delete operation succeeded for this entry (true) or failed (false)."
        },
        "message": {
          "type": "string",
          "description": "A human-readable message explaining the result of the deletion. Provided for client diagnostics, audit trails, or error-handling in API consumers."
        }
      },
      "required": [
        "id",
        "deleted"
      ],
      "description": "Result object for deletion of a search index entry. Used in API responses after delete operations for confirmation, auditing, and UI feedback."
    }
  },
  "authorization": [
    {
      "name": "user",
      "description": "Can register, log in, participate in discussions, create and comment on posts, like or report content."
    },
    {
      "name": "moderator",
      "description": "Can perform all user actions plus manage reported posts, moderate discussions, ban users, and enforce rules."
    },
    {
      "name": "admin",
      "description": "Has full system access, including managing user roles, overseeing moderators, configuring board settings, and maintaining the platform."
    }
  ]
}