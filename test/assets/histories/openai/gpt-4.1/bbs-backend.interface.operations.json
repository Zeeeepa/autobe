[{"specification":"This API retrieves a filtered, paginated list of platform configuration records from the 'discussion_board_platform_configs' table. The client can query configurations by config_name, enabled status, or by full-text search over description, supporting management, system monitoring, or audit/report use cases. Pagination and sorting supports admin consoles with large config volumes. Each result includes audit metadata.","path":"/discussionBoard/admin/platformConfigs","method":"patch","description":"Retrieve a filtered, paginated collection of platform configuration records used to manage global settings, feature toggles, or audit policies. This operation references the 'discussion_board_platform_configs' Prisma schema which contains fields such as config_name, value, enabled, version, timestamps, and rich description metadata. \n\nResults can be filtered by config_name, status (enabled/disabled), partial description, or time window. Supports advanced search and pagination for admin management, as well as auditability. Sensitive values and audit log metadata are visible only to users with administrative roles. Error handling ensures correct reporting on non-existent filters or search failures. Security is enforced by role-based checking—only admins and moderators can access this API.\n\nOther related configuration APIs (e.g., create, update, at, and erase) are typically used in conjunction for complete platform config lifecycle management.","summary":"Search for and retrieve a filtered, paginated list of platform configurations ('discussion_board_platform_configs').","parameters":[],"requestBody":{"description":"Search/pagination criteria for platform configuration retrieval.","typeName":"IDiscussionBoardPlatformConfig.IRequest"},"responseBody":{"description":"Paginated list of detailed platform configuration metadata records.","typeName":"IPageIDiscussionBoardPlatformConfig"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"This API retrieves a filtered, paginated list of platform configuration records from the 'discussion_board_platform_configs' table. The client can query configurations by config_name, enabled status, or by full-text search over description, supporting management, system monitoring, or audit/report use cases. Pagination and sorting supports admin consoles with large config volumes. Each result includes audit metadata.","path":"/discussionBoard/moderator/platformConfigs","method":"patch","description":"Retrieve a filtered, paginated collection of platform configuration records used to manage global settings, feature toggles, or audit policies. This operation references the 'discussion_board_platform_configs' Prisma schema which contains fields such as config_name, value, enabled, version, timestamps, and rich description metadata. \n\nResults can be filtered by config_name, status (enabled/disabled), partial description, or time window. Supports advanced search and pagination for admin management, as well as auditability. Sensitive values and audit log metadata are visible only to users with administrative roles. Error handling ensures correct reporting on non-existent filters or search failures. Security is enforced by role-based checking—only admins and moderators can access this API.\n\nOther related configuration APIs (e.g., create, update, at, and erase) are typically used in conjunction for complete platform config lifecycle management.","summary":"Search for and retrieve a filtered, paginated list of platform configurations ('discussion_board_platform_configs').","parameters":[],"requestBody":{"description":"Search/pagination criteria for platform configuration retrieval.","typeName":"IDiscussionBoardPlatformConfig.IRequest"},"responseBody":{"description":"Paginated list of detailed platform configuration metadata records.","typeName":"IPageIDiscussionBoardPlatformConfig"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"This API retrieves detailed information for a specific platform configuration, looked up by its unique configuration ID, from the 'discussion_board_platform_configs' table. Returns all configuration fields—including audit fields and optional rich description document—for monitoring, troubleshooting, review, or configuration editing screens.","path":"/discussionBoard/admin/platformConfigs/{platformConfigId}","method":"get","description":"Fetches a single platform configuration record by unique ID from the 'discussion_board_platform_configs' table. All system configuration properties (name, value, status, description, enabled, version, timestamps) are returned, including audit trails for both operational and compliance visibility.\n\nReferences full metadata, including who/when the config was created and last modified. Supports distinguishing system or feature toggles, rollback/versioned settings, and linking to front-end configuration editors. Only admins or moderators have access, with all attempts audited. Related endpoints (update, erase) allow holistic configuration management, but this 'at' operation is read-only.\n\nIf a configId does not exist, returns an explicit not found error. Unauthorized access attempts are forbidden and logged.","summary":"Retrieve complete details of a single platform configuration by ID ('discussion_board_platform_configs').","parameters":[{"name":"platformConfigId","description":"Unique identifier (UUID) for the target platform configuration.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed platform configuration object as stored in the database.","typeName":"IDiscussionBoardPlatformConfig"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"This API retrieves detailed information for a specific platform configuration, looked up by its unique configuration ID, from the 'discussion_board_platform_configs' table. Returns all configuration fields—including audit fields and optional rich description document—for monitoring, troubleshooting, review, or configuration editing screens.","path":"/discussionBoard/moderator/platformConfigs/{platformConfigId}","method":"get","description":"Fetches a single platform configuration record by unique ID from the 'discussion_board_platform_configs' table. All system configuration properties (name, value, status, description, enabled, version, timestamps) are returned, including audit trails for both operational and compliance visibility.\n\nReferences full metadata, including who/when the config was created and last modified. Supports distinguishing system or feature toggles, rollback/versioned settings, and linking to front-end configuration editors. Only admins or moderators have access, with all attempts audited. Related endpoints (update, erase) allow holistic configuration management, but this 'at' operation is read-only.\n\nIf a configId does not exist, returns an explicit not found error. Unauthorized access attempts are forbidden and logged.","summary":"Retrieve complete details of a single platform configuration by ID ('discussion_board_platform_configs').","parameters":[{"name":"platformConfigId","description":"Unique identifier (UUID) for the target platform configuration.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed platform configuration object as stored in the database.","typeName":"IDiscussionBoardPlatformConfig"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"This API creates a new platform-wide configuration entry in the 'discussion_board_platform_configs' table. Administrators use this API to add new feature toggles, platform policies, or documentation pointers. The new config must supply a unique config_name, value, enabled status, version, and optional description. All config records are fully auditable for traceability and service policies.","path":"/discussionBoard/admin/platformConfigs","method":"post","description":"Create a new platform configuration record in 'discussion_board_platform_configs'. Required fields include: unique config_name, value (string), enabled flag, version (int), and optional description. Full audit fields will be set automatically, and only admins or authorized moderators may invoke this operation.\n\nConfigurations allow for system-level toggling of features, storing cross-cutting settings, or providing references to external documentation. Attempting to insert a duplicate config_name or violating data constraints will produce a conflict or validation error. Creation events are logged for compliance.\n\nTypically used in concert with update and erase endpoints to manage configuration lifecycle.","summary":"Create a new platform configuration ('discussion_board_platform_configs').","parameters":[],"requestBody":{"description":"All required and optional fields for creating a new platform config record.","typeName":"IDiscussionBoardPlatformConfig.ICreate"},"responseBody":{"description":"Returns the newly created platform configuration with all fields set.","typeName":"IDiscussionBoardPlatformConfig"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"This API fully updates an existing platform configuration in the 'discussion_board_platform_configs' table, identified by UUID. Admins or moderators may edit config value, description, enabled status, and version. Audit fields are updated for compliance. Only current (non-soft-deleted) configs can be updated.","path":"/discussionBoard/admin/platformConfigs/{platformConfigId}","method":"put","description":"Update all editable fields of a specific platform configuration, by unique ID, in 'discussion_board_platform_configs'. Admins or moderators may change the config's value, enabled flag, description, and version. Audit fields, including updated_at and possibly change logs, are automatically refreshed; changes are versioned.\n\nAttempting to update a non-existent or soft-deleted record returns an error. Only one config per config_name can exist; uniqueness is enforced.\n\nUpdate permission is restricted to admins and moderators. Failure cases, such as invalid data types or permission denial, result in detailed error output. This endpoint is commonly paired with search, at, and erase for full configuration management.","summary":"Update an existing platform configuration in 'discussion_board_platform_configs'.","parameters":[{"name":"platformConfigId","description":"Unique identifier (UUID) of the platform configuration to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the configuration record; supports partial or full replace.","typeName":"IDiscussionBoardPlatformConfig.IUpdate"},"responseBody":{"description":"The updated platform configuration, reflecting all new values.","typeName":"IDiscussionBoardPlatformConfig"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"This API fully updates an existing platform configuration in the 'discussion_board_platform_configs' table, identified by UUID. Admins or moderators may edit config value, description, enabled status, and version. Audit fields are updated for compliance. Only current (non-soft-deleted) configs can be updated.","path":"/discussionBoard/moderator/platformConfigs/{platformConfigId}","method":"put","description":"Update all editable fields of a specific platform configuration, by unique ID, in 'discussion_board_platform_configs'. Admins or moderators may change the config's value, enabled flag, description, and version. Audit fields, including updated_at and possibly change logs, are automatically refreshed; changes are versioned.\n\nAttempting to update a non-existent or soft-deleted record returns an error. Only one config per config_name can exist; uniqueness is enforced.\n\nUpdate permission is restricted to admins and moderators. Failure cases, such as invalid data types or permission denial, result in detailed error output. This endpoint is commonly paired with search, at, and erase for full configuration management.","summary":"Update an existing platform configuration in 'discussion_board_platform_configs'.","parameters":[{"name":"platformConfigId","description":"Unique identifier (UUID) of the platform configuration to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the configuration record; supports partial or full replace.","typeName":"IDiscussionBoardPlatformConfig.IUpdate"},"responseBody":{"description":"The updated platform configuration, reflecting all new values.","typeName":"IDiscussionBoardPlatformConfig"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"This API deletes (soft deletion) a specific platform configuration by UUID from the 'discussion_board_platform_configs' table. The record's deleted_at field is set, removing the config from active use but leaving an audit trail. Only admins are permitted to erase configs. Irrevocable and versioned for compliance.","path":"/discussionBoard/admin/platformConfigs/{platformConfigId}","method":"delete","description":"Soft-delete a platform configuration from 'discussion_board_platform_configs' by unique ID. The record is excluded from active system use by setting deleted_at, but all data remains for audit and rollback purposes. Only admins may erase configurations; all deletions are logged for compliance.\n\nAttempting to delete a non-existent or already deleted config returns an error. Attempted unauthorized access is forbidden and registered in audit logs. Operation commonly follows update or at endpoints during configuration lifecycle.","summary":"Erase (soft-delete) a platform configuration record in 'discussion_board_platform_configs'.","parameters":[{"name":"platformConfigId","description":"Unique identifier (UUID) of the platform configuration to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This API retrieves a paginated list of content categories from the 'discussion_board_categories' table, supporting filtering, full-text search, parent-child organization, and enabled status. Categories are critical for platform taxonomy management, content curation, and navigation. Supports admin tools and UI editors.","path":"/discussionBoard/admin/categories","method":"patch","description":"Search and return a paginated, filtered list of content categories for the discussion board. Uses the 'discussion_board_categories' table, supporting advanced queries by name, parent category, description, enabled status, and version.\n\nResults support taxonomy editors and navigation builders. Admins may filter by hierarchy, sort order, and enabled/disabled status, and search via text patterns. Response includes audit and display fields (icon, description, order, etc). Related endpoints for create, update, at, and erase enable comprehensive lifecycle management.","summary":"Retrieve a paginated, filterable list of content categories ('discussion_board_categories').","parameters":[],"requestBody":{"description":"Filters and pagination for category search (name, enabled, parent, etc).","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated results of category master records for taxonomy editors/navigation.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"This API retrieves a paginated list of content categories from the 'discussion_board_categories' table, supporting filtering, full-text search, parent-child organization, and enabled status. Categories are critical for platform taxonomy management, content curation, and navigation. Supports admin tools and UI editors.","path":"/discussionBoard/moderator/categories","method":"patch","description":"Search and return a paginated, filtered list of content categories for the discussion board. Uses the 'discussion_board_categories' table, supporting advanced queries by name, parent category, description, enabled status, and version.\n\nResults support taxonomy editors and navigation builders. Admins may filter by hierarchy, sort order, and enabled/disabled status, and search via text patterns. Response includes audit and display fields (icon, description, order, etc). Related endpoints for create, update, at, and erase enable comprehensive lifecycle management.","summary":"Retrieve a paginated, filterable list of content categories ('discussion_board_categories').","parameters":[],"requestBody":{"description":"Filters and pagination for category search (name, enabled, parent, etc).","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated results of category master records for taxonomy editors/navigation.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"This API retrieves full detail for a specific category identified by its unique ID from the 'discussion_board_categories' table. Returns all category metadata: name, parent, enabled, description, icon, audit, and versioning—needed for editing, visualization, or policy logic.","path":"/discussionBoard/admin/categories/{categoryId}","method":"get","description":"Return all database properties for a single content category identified by unique ID, as modeled in the 'discussion_board_categories' schema—covering hierarchy, ordering, status, icon, description, admin/audit fields, and version. Used for editing, UI navigation generation, or compliance.\n\nNon-existent or soft-deleted categories return not found. Unauthorized attempts are forbidden and logged. Paired with update, at, and erase endpoints for full category lifecycle management. Admin and moderator access only; member and guest users are denied by policy.","summary":"Retrieve detail information about a single category ('discussion_board_categories').","parameters":[{"name":"categoryId","description":"Unique identifier (UUID) of the target category.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of a single category, for admin/editor screens.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"This API retrieves full detail for a specific category identified by its unique ID from the 'discussion_board_categories' table. Returns all category metadata: name, parent, enabled, description, icon, audit, and versioning—needed for editing, visualization, or policy logic.","path":"/discussionBoard/moderator/categories/{categoryId}","method":"get","description":"Return all database properties for a single content category identified by unique ID, as modeled in the 'discussion_board_categories' schema—covering hierarchy, ordering, status, icon, description, admin/audit fields, and version. Used for editing, UI navigation generation, or compliance.\n\nNon-existent or soft-deleted categories return not found. Unauthorized attempts are forbidden and logged. Paired with update, at, and erase endpoints for full category lifecycle management. Admin and moderator access only; member and guest users are denied by policy.","summary":"Retrieve detail information about a single category ('discussion_board_categories').","parameters":[{"name":"categoryId","description":"Unique identifier (UUID) of the target category.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of a single category, for admin/editor screens.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"This API creates a new category entry in 'discussion_board_categories', allowing managed taxonomy/category expansion. Admins can define parent-child hierarchies, set display order, description, icon, and enabled status.","path":"/discussionBoard/admin/categories","method":"post","description":"Create a new content category in the 'discussion_board_categories' table. Required fields: name (unique), enabled, display_order, version. Optional fields: parent_id (for hierarchy), description, icon_uri. Creation events are logged for compliance. Only admins may create new categories.\n\nDuplicate or invalid entries are rejected with errors. Category management (create, update, at, erase) supports taxonomy lifecycle. Related subcategory and batch operations are available for complex systems.","summary":"Create a new content category ('discussion_board_categories').","parameters":[],"requestBody":{"description":"Fields required to create a new category master record.","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"Returns the created category object with all previewable fields.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"This API updates an existing content category in the 'discussion_board_categories' table by UUID. Admins and moderators may update any field, including hierarchy (parent), metadata, enabled status, icon, ordering, version, and descriptive fields. Edits are fully audited and versioned. Only current categories may be updated.","path":"/discussionBoard/admin/categories/{categoryId}","method":"put","description":"Updates an existing content category record, identified by UUID, in 'discussion_board_categories'. All updatable fields (name, parent, order, description, icon, enabled, version) can be set by admins or moderators. Audit and versioning fields are updated, and failures (not found/soft-deleted, invalid fields, or permission) are detailed in errors. Member and guest users are denied update rights by policy. Related at, erase, and subcategory operations support category tree management.","summary":"Update an existing category in 'discussion_board_categories'.","parameters":[{"name":"categoryId","description":"Unique UUID of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within a category. Full or partial updates allowed.","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"Updated category details after changes are applied.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"This API updates an existing content category in the 'discussion_board_categories' table by UUID. Admins and moderators may update any field, including hierarchy (parent), metadata, enabled status, icon, ordering, version, and descriptive fields. Edits are fully audited and versioned. Only current categories may be updated.","path":"/discussionBoard/moderator/categories/{categoryId}","method":"put","description":"Updates an existing content category record, identified by UUID, in 'discussion_board_categories'. All updatable fields (name, parent, order, description, icon, enabled, version) can be set by admins or moderators. Audit and versioning fields are updated, and failures (not found/soft-deleted, invalid fields, or permission) are detailed in errors. Member and guest users are denied update rights by policy. Related at, erase, and subcategory operations support category tree management.","summary":"Update an existing category in 'discussion_board_categories'.","parameters":[{"name":"categoryId","description":"Unique UUID of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within a category. Full or partial updates allowed.","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"Updated category details after changes are applied.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"This API deletes (soft-delete) a specific category by unique ID from 'discussion_board_categories'. Sets the deleted_at timestamp for validated audit, removing from active taxonomy but preserving record for rollback/compliance. Used by admins; member/moderator/guest cannot erase categories. Operation is monitored for audit.","path":"/discussionBoard/admin/categories/{categoryId}","method":"delete","description":"Soft-delete a category record from 'discussion_board_categories' by UUID. Sets the deleted_at timestamp, removing category from taxonomy for all content creation/assignment, but preserving for auditability and compliance. Admin-only authority; soft-deleted categories cannot be assigned to new content. Deletion events are logged for compliance; unauthorized activities raise alerts. Errors include not found or already deleted situations. For full taxonomy management this is paired with at, update, and search endpoints.","summary":"Erase (soft-delete) a content category from 'discussion_board_categories'.","parameters":[{"name":"categoryId","description":"The unique UUID of the target category for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This API retrieves all subcategories (children) under a given parent category by categoryId, using the parent-child hierarchy supported in 'discussion_board_categories'. Returns a paginated, filterable list for UI rendering, CMS, or taxonomy editors. Supports user navigation, tree filtering, and deep editing.","path":"/discussionBoard/admin/categories/{categoryId}/subs","method":"patch","description":"Return all immediate subcategories (children) for a given parent category ID, from 'discussion_board_categories'. Output supports filtering, sorting, and pagination over subcategory name, description, display_order, and enabled status. Hierarchy details facilitate content assignment, navigation UI, or batch editing. Non-existent or deleted parent IDs yield not found. Security policy limits to admins and moderators for taxonomy management; guest/member users are denied. Related endpoints enable tree editing and structure management.","summary":"List all subcategories under a specific category ('discussion_board_categories').","parameters":[{"name":"categoryId","description":"UUID for the parent category whose children (subcategories) will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filters and options for subcategory listing under parent.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated list of subcategory records and metadata.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"searchSub","authorizationRole":"admin"},{"specification":"This API retrieves all subcategories (children) under a given parent category by categoryId, using the parent-child hierarchy supported in 'discussion_board_categories'. Returns a paginated, filterable list for UI rendering, CMS, or taxonomy editors. Supports user navigation, tree filtering, and deep editing.","path":"/discussionBoard/moderator/categories/{categoryId}/subs","method":"patch","description":"Return all immediate subcategories (children) for a given parent category ID, from 'discussion_board_categories'. Output supports filtering, sorting, and pagination over subcategory name, description, display_order, and enabled status. Hierarchy details facilitate content assignment, navigation UI, or batch editing. Non-existent or deleted parent IDs yield not found. Security policy limits to admins and moderators for taxonomy management; guest/member users are denied. Related endpoints enable tree editing and structure management.","summary":"List all subcategories under a specific category ('discussion_board_categories').","parameters":[{"name":"categoryId","description":"UUID for the parent category whose children (subcategories) will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filters and options for subcategory listing under parent.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated list of subcategory records and metadata.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"searchSub","authorizationRole":"moderator"},{"specification":"This API retrieves a specific subcategory (child) entity, looked up under a given parent category, both by UUID. Returns full metadata for the child, including linkage to its parent, as modeled in 'discussion_board_categories'. Primarily used in UI editors, admin tools, or complex taxonomy management.","path":"/discussionBoard/admin/categories/{categoryId}/subs/{subCategoryId}","method":"get","description":"Return the full details of a specific subcategory (child) under a parent category in 'discussion_board_categories', using both parent and child UUIDs. Output includes all hierarchy, description, ordering, icon, enabled status, and parent linkage fields. Used for navigation UIs, CMS editors, and compliance tools managing nested categories. Permissions are enforced: only admins and moderators may use this API. Nonexistent or soft-deleted children or parents generate explicit errors. Related endpoints allow full category lifecycle management within the taxonomy tree.","summary":"Get details of a specific subcategory under a parent ('discussion_board_categories').","parameters":[{"name":"categoryId","description":"UUID of the parent category in which to look for the child.","schema":{"type":"string","format":"uuid"}},{"name":"subCategoryId","description":"UUID of the subcategory (child) to return details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of subcategory, including all business and audit fields.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"atSub","authorizationRole":"admin"},{"specification":"This API retrieves a specific subcategory (child) entity, looked up under a given parent category, both by UUID. Returns full metadata for the child, including linkage to its parent, as modeled in 'discussion_board_categories'. Primarily used in UI editors, admin tools, or complex taxonomy management.","path":"/discussionBoard/moderator/categories/{categoryId}/subs/{subCategoryId}","method":"get","description":"Return the full details of a specific subcategory (child) under a parent category in 'discussion_board_categories', using both parent and child UUIDs. Output includes all hierarchy, description, ordering, icon, enabled status, and parent linkage fields. Used for navigation UIs, CMS editors, and compliance tools managing nested categories. Permissions are enforced: only admins and moderators may use this API. Nonexistent or soft-deleted children or parents generate explicit errors. Related endpoints allow full category lifecycle management within the taxonomy tree.","summary":"Get details of a specific subcategory under a parent ('discussion_board_categories').","parameters":[{"name":"categoryId","description":"UUID of the parent category in which to look for the child.","schema":{"type":"string","format":"uuid"}},{"name":"subCategoryId","description":"UUID of the subcategory (child) to return details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of subcategory, including all business and audit fields.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"atSub","authorizationRole":"moderator"},{"specification":"This operation allows an admin to create a new sub-category under a specific parent category within the discussion board. It writes to the discussion_board_categories table, referencing the parent category by ID. All fields, such as name, description, display_order, icon_uri, enabled, and version, are stored. This operation enforces hierarchical classification for posts and enables dynamic category management. Only admins can execute this action to ensure policy control and maintain data integrity. The operation supports auditability via created/updated timestamps and enforces uniqueness on category name. It also ensures soft-deletion is handled by not duplicating deleted names.","path":"/discussionBoard/admin/categories/{categoryId}/subs","method":"post","description":"Create a new sub-category beneath the specified parent category. Only admin users are permitted to create new categories or sub-categories, to maintain policy and moderation controls as outlined in the business and schema requirements. The input includes all relevant fields from the categories schema, except the parent_id which is set by the path parameter, and inherits platform-wide configuration where relevant. Names must be unique, creation and hierarchy logic is enforced, and errors include duplicate or invalid structure. Soft-delete policies apply to category names. Audit and versioning information is set automatically on create.","summary":"Create a new sub-category under a specific category (discussion_board_categories table).","parameters":[{"name":"categoryId","description":"The UUID of the parent category under which the sub-category will be created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for the creation of a new sub-category. All fields except parent_id (set from path) and id (auto-generated).","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"The newly created sub-category record.","typeName":"IDiscussionBoardCategory"},"authorizationRole":"admin","name":"createSubCategory"},{"specification":"This operation updates an existing sub-category under a given parent category by their respective UUIDs. It modifies the discussion_board_categories table, allowing authorized admins to change fields such as name, description, display_order, icon_uri, enabled, and version. The operation enforces hierarchical integrity, uniqueness of names, and updates audit/versioning fields. It respects soft delete semantics and only allows changes to categories that are currently active (not deleted). Only admin users are permitted to execute this action, maintaining policy compliance.","path":"/discussionBoard/admin/categories/{categoryId}/subs/{subCategoryId}","method":"put","description":"Update an existing sub-category under a specific parent category. Admin users can modify any mutable field specified in the categories schema, such as name, description, order, or enable status. The hierarchical parent relationship must not result in cycles or orphan categories, as enforced by schema logic. The operation supports updating version and audit fields and rejects changes to deleted categories. Errors may include not found, permission denied, or duplicate name within active categories. Soft delete logic applies per policy.","summary":"Update a specific sub-category (discussion_board_categories table).","parameters":[{"name":"categoryId","description":"UUID of the parent category.","schema":{"type":"string","format":"uuid"}},{"name":"subCategoryId","description":"UUID of the sub-category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the sub-category. Excludes id and parent_id, which are set by path/context.","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"The updated sub-category record.","typeName":"IDiscussionBoardCategory"},"authorizationRole":"admin","name":"updateSubCategory"},{"specification":"This operation deletes (soft-deletes) a sub-category under a parent category by their UUIDs. It acts on the discussion_board_categories table and, following the schema, sets the deleted_at timestamp rather than hard-deleting the record. It also updates versioning/audit fields and ensures that only active (non-deleted) categories can be deleted. The operation is restricted to admins to maintain strict control over the category hierarchy and prevent accidental removal. Deletion is not possible if there are non-deleted posts linked to the category, per standard business policy.","path":"/discussionBoard/admin/categories/{categoryId}/subs/{subCategoryId}","method":"delete","description":"Soft-delete a sub-category under a given category using its UUID. Only admin users are permitted to delete (soft-delete) categories, and the operation sets the deleted_at timestamp without removing the record. This protects historical content structure and allows for restoration or audit. If sub-category is in use by posts or has non-deleted descendants, deletion may be restricted; error handling must inform about usage dependencies. Audit and policy compliance are enforced on each deletion.","summary":"Soft-delete a sub-category (discussion_board_categories table).","parameters":[{"name":"categoryId","description":"UUID of the parent category.","schema":{"type":"string","format":"uuid"}},{"name":"subCategoryId","description":"UUID of the sub-category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"eraseSubCategory"},{"specification":"This operation searches, retrieves, and paginates through the set of policy documents (such as terms of use, guidelines) held in the discussion_board_policy_documents table. It supports advanced querying, filtering by title, version, is_active, and partial body text, supporting compliance and audit demands. Only admins may search and retrieve the full policy document set due to confidentiality of non-public versions. The search supports pagination and sorting, and only documents not soft-deleted (deleted_at IS NULL) are returned.","path":"/discussionBoard/admin/policyDocuments","method":"patch","description":"Search, filter, and paginate the set of policy documents stored in the platform. Admins can query by title, version, activity status, and text content. The search is optimized for compliance review and system policy management, supporting queries on fields covered by full-text indexes. Results are paginated and ordered by custom criteria (date/version). Soft-deleted documents are excluded. Permission is restricted to admins for operational policy control. Related admin/user acceptance, document linking, and rollback/audit information can be included in future extensions.","summary":"Search and paginate policy documents (discussion_board_policy_documents table).","parameters":[],"requestBody":{"description":"Search and pagination filters for policy document retrieval.","typeName":"IDiscussionBoardPolicyDocument.IRequest"},"responseBody":{"description":"Paginated policy documents result set.","typeName":"IPageIDiscussionBoardPolicyDocument"},"authorizationRole":"admin","name":"search"},{"specification":"This operation retrieves a single policy document by its unique identifier (UUID), sourcing the data from the discussion_board_policy_documents table. It returns all relevant fields, including title, body, version, status, and audit metadata, for compliance and review. This API is available only to admins, ensuring confidential or draft policies are not exposed to unauthorized clients. The response includes full content for legal review and audit, and returns a 404 if the document does not exist or is soft-deleted.","path":"/discussionBoard/admin/policyDocuments/{policyDocumentId}","method":"get","description":"Return the full details of a single policy document, including its version, title, body text (markdown or HTML), authoring admin, creation and update times, status, and all audit fields. Only admins have access due to the potential sensitivity of draft or archived documents per compliance requirements. Query responds with 404 if the requested policy document does not exist or is soft-deleted (deleted_at not null).","summary":"Retrieve full information of a specific policy document (discussion_board_policy_documents table).","parameters":[{"name":"policyDocumentId","description":"UUID of the policy document to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The requested policy document record, including full content for audit/legal usage.","typeName":"IDiscussionBoardPolicyDocument"},"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new policy or legal document (such as a Terms of Service or Content Guidelines entry) in the discussion_board_policy_documents table. It allows admins to set all required fields including title, body in full text, version, and activation status. The operation enforces uniqueness for title and version, populates audit fields, and links the creating admin by foreign key. Error handling includes duplicate document, validation, or conflicting version errors. Only admins may create documents to maintain governance and compliance integrity.","path":"/discussionBoard/admin/policyDocuments","method":"post","description":"Create a new versioned policy or guideline document. Only admins are authorized to execute this operation to ensure that all policy additions or amendments are part of a controlled workflow, fully auditable, and compliant with documentation policy. The operation stores full text body, version, and metadata fields, checking for duplicate title/version per schema rules. The response includes the created record including audit and version info. Document will be marked as active or inactive by input data; additional workflows for approval or notification can be layered atop this API.","summary":"Create a new policy or legal document (discussion_board_policy_documents table).","parameters":[],"requestBody":{"description":"Payload for the creation of a new policy document entry.","typeName":"IDiscussionBoardPolicyDocument.ICreate"},"responseBody":{"description":"The created policy document record, including version and author info.","typeName":"IDiscussionBoardPolicyDocument"},"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing policy document in the discussion_board_policy_documents table by UUID. It allows admin users to edit mutable fields such as title, body, is_active, or version. Edits are versioned via the version field, and changes are fully audited. Updates can be denied if the title/version pair would not be unique or if constraints are violated. Edits are permitted only on non-soft-deleted documents. Soft-delete or obsolete documents cannot be modified to enforce compliance with operational workflow rules. Permission is limited to admins.","path":"/discussionBoard/admin/policyDocuments/{policyDocumentId}","method":"put","description":"Modify an existing policy document, updating its fields as allowed by the schema. Supports editing title, text, activation, and meta fields, with automatic version update and full audit support. Only admin users can perform this action, ensuring changes are controlled and logged. Edits apply only to active (not deleted) documents. Error handling lights up for missing documents, duplicate titles/versions, or invalid input. The operation updates metadata and audit trails on each change for compliance record-keeping.","summary":"Update an existing policy document (discussion_board_policy_documents table).","parameters":[{"name":"policyDocumentId","description":"UUID of the policy document to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Edit payload for the policy document to be updated.","typeName":"IDiscussionBoardPolicyDocument.IUpdate"},"responseBody":{"description":"The updated policy document record, showing new values and audit fields.","typeName":"IDiscussionBoardPolicyDocument"},"authorizationRole":"admin","name":"update"},{"specification":"This operation soft-deletes a policy document by its UUID, setting the deleted_at timestamp in the discussion_board_policy_documents table. Only admins are authorized to delete policy documents in order to preserve compliance and audit requirements. The operation ensures that only active (not previously deleted) documents can be marked as deleted. The action is fully audit-trailed, and permanent removal is prohibited by policy. Attempts to delete a non-existent or already deleted document result in error. Deletion can affect visibility in UI and compliance workflows.","path":"/discussionBoard/admin/policyDocuments/{policyDocumentId}","method":"delete","description":"Soft-delete a policy or legal document for governance/audit purposes. Only admins are permitted to execute this, to sustain control over the legal and operational documentation. The operation will set deleted_at (soft-delete) without physically removing the record, per audit policy. Attempts to delete non-active or non-existent documents will return an error. Proper audit records are kept for every action. This may result in UI or process removal from active policy listings.","summary":"Soft-delete a policy document (discussion_board_policy_documents table).","parameters":[{"name":"policyDocumentId","description":"UUID of the policy document to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation searches and paginates through guest (non-member) access records from the discussion_board_guests table. It allows administrators to monitor, analyze, and detect abuse or operational trends based on session/token/IP/user agent data and time windows. Supports filtering by last_seen_at, IP address, or user agent, which are indexed in the schema for efficient querying. Only admin users can access and query guest analytics for privacy reasons. Soft-deleted records are not returned.","path":"/discussionBoard/admin/guests","method":"patch","description":"Retrieve a filtered, paginated list of guest user tracking records. Admin management can search by session token, IP address, user agent, and last seen window. The data is read for analytics or abuse tracking and supports pagination, sorting, and complex filter combinations. The response excludes soft-deleted guest records.","summary":"Search and paginate guest (non-member) tracking records (discussion_board_guests table).","parameters":[],"requestBody":{"description":"Search filters and pagination for guest record analysis.","typeName":"IDiscussionBoardGuest.IRequest"},"responseBody":{"description":"Paginated array of matched guest records.","typeName":"IPageIDiscussionBoardGuest"},"authorizationRole":"admin","name":"search"},{"specification":"This operation retrieves a single guest record by its unique identifier (UUID) from the discussion_board_guests table. It returns the full guest session tracking information for the given id, including session_token, last_seen_at, IP address, and user agent fields for analytics or incident response. Only admins may access detailed guest session records due to data privacy and abuse monitoring mandates. A 404 is returned for unknown or soft-deleted records.","path":"/discussionBoard/admin/guests/{guestId}","method":"get","description":"Retrieve the details of a specific guest (non-member) session tracking record by UUID. Only administrators may access guest session records directly, as they may contain sensitive operational or abuse monitoring data. The API returns the complete record, including session token, IP, and activity metadata. Returns 404 if record does not exist or has been soft-deleted.","summary":"Retrieve a single guest tracking record (discussion_board_guests table).","parameters":[{"name":"guestId","description":"UUID of the guest record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed guest session record including all tracking fields.","typeName":"IDiscussionBoardGuest"},"authorizationRole":"admin","name":"at"},{"specification":"This operation updates a guest (non-member) session record in the discussion_board_guests table by its UUID. Admin users may edit mutable fields such as session_token (e.g., for revalidation), or metadata such as IP address, user agent, or update auditing data. Strict audit and privacy constraints apply. The API forbids modification of deleted records. Audit fields (updated_at) are set on change. Only admins may execute this operation to ensure that analytics and abuse countermeasures are strictly controlled.","path":"/discussionBoard/admin/guests/{guestId}","method":"put","description":"Edit the metadata for a guest session tracking record, identified by UUID. Only admins may update guest records, and all changes are logged with auditing fields updated accordingly. This is primarily used for abuse investigation, session management, or analytics data correction. Error handling includes permission denial, record not found, and attempting to update a deleted record. Updated_at audit field is set on each modification.","summary":"Update the metadata of a guest tracking record (discussion_board_guests table).","parameters":[{"name":"guestId","description":"UUID of the guest record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the guest session record. ID is set by path.","typeName":"IDiscussionBoardGuest.IUpdate"},"responseBody":{"description":"The updated guest session record.","typeName":"IDiscussionBoardGuest"},"authorizationRole":"admin","name":"update"},{"specification":"This operation soft-deletes a guest (non-member) session tracking record by its UUID, by setting the deleted_at timestamp in the discussion_board_guests table. For audit and operational safety, records are not hard-deleted. Only admin users have permission to execute this operation, and attempts to delete non-existent or already-deleted records will fail. Audit trail is updated, and this operation helps maintain proper data retention and investigative integrity for abuse and abuse-prevention records.","path":"/discussionBoard/admin/guests/{guestId}","method":"delete","description":"Soft-delete a guest session tracking record by UUID for operational cleanup, audit policy, or abusive user/situation management. This action is reserved for admin users. The operation sets the deleted_at timestamp per soft-deletion policy, and prohibits hard deletion for compliance. All actions are audit-trailed. Returns errors for not found or already deleted scenarios.","summary":"Soft-delete a guest session record (discussion_board_guests table).","parameters":[{"name":"guestId","description":"UUID of the guest record to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation enables advanced search and paginated retrieval of discussion board member accounts. It operates on the discussion_board_members table, allowing filtering and querying members based on email, nickname, join date, status, and other relevant attributes. The endpoint supports flexible search criteria, sorting, and ensures only fields present in the actual schema are referenced. Used for administrative member management, analytics, and member directory features.","path":"/discussionBoard/admin/members","method":"patch","description":"Retrieve a filtered and paginated list of member accounts in the discussion board. This operation allows authorized users, such as administrators or moderators, to perform flexible searches based on email, nickname, registration date, and current status (such as active, suspended, withdrawn). The operation leverages fields defined within the discussion_board_members schema, supporting advanced query features including partial match, status-based filtering, and date range searches.\n\nSecurity and access are strictly controlled; only users with admin or moderator roles can access the full list, whereas members can only view their own profile or perform limited searches depending on policy. Results are paginated for scalability and can be sorted according to join date, nickname, or custom attributes.\n\nThis operation does not expose or process password hash data, ensuring privacy. Sensitive data is handled per system policies, and all actions are logged for audit. Recommendation is to only allow access to users with admin or moderator roles, and to enforce strong filtering to avoid data leaks in public contexts.","summary":"Search and retrieve a paginated, filtered list of discussion board members (discussion_board_members table).","parameters":[],"requestBody":{"description":"Search and pagination filter criteria for member list retrieval.","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated, filtered list of member summary information matching search criteria.","typeName":"IPageIDiscussionBoardMember.ISummary"},"authorizationRole":"admin","name":"search"},{"specification":"This operation enables advanced search and paginated retrieval of discussion board member accounts. It operates on the discussion_board_members table, allowing filtering and querying members based on email, nickname, join date, status, and other relevant attributes. The endpoint supports flexible search criteria, sorting, and ensures only fields present in the actual schema are referenced. Used for administrative member management, analytics, and member directory features.","path":"/discussionBoard/moderator/members","method":"patch","description":"Retrieve a filtered and paginated list of member accounts in the discussion board. This operation allows authorized users, such as administrators or moderators, to perform flexible searches based on email, nickname, registration date, and current status (such as active, suspended, withdrawn). The operation leverages fields defined within the discussion_board_members schema, supporting advanced query features including partial match, status-based filtering, and date range searches.\n\nSecurity and access are strictly controlled; only users with admin or moderator roles can access the full list, whereas members can only view their own profile or perform limited searches depending on policy. Results are paginated for scalability and can be sorted according to join date, nickname, or custom attributes.\n\nThis operation does not expose or process password hash data, ensuring privacy. Sensitive data is handled per system policies, and all actions are logged for audit. Recommendation is to only allow access to users with admin or moderator roles, and to enforce strong filtering to avoid data leaks in public contexts.","summary":"Search and retrieve a paginated, filtered list of discussion board members (discussion_board_members table).","parameters":[],"requestBody":{"description":"Search and pagination filter criteria for member list retrieval.","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated, filtered list of member summary information matching search criteria.","typeName":"IPageIDiscussionBoardMember.ISummary"},"authorizationRole":"moderator","name":"search"},{"specification":"This endpoint retrieves detailed profile information for a specific discussion board member, based on the discussion_board_members table. The operation locates a member through their unique UUID and returns all non-sensitive profile fields, including email, nickname, avatar URI, join date, last login date, and status. Designed for self-profile viewing, admin visibility, and internal management queries.","path":"/discussionBoard/admin/members/{memberId}","method":"get","description":"Retrieve detailed account/profile information for a single discussion board member, as represented in the discussion_board_members table. The operation accepts a member's unique UUID and returns all profile data except sensitive hashes (such as password_hash). Key fields include email, nickname, avatar URI, join date, last login at, account status, and audit timestamps.\n\nProfile retrieval is authorized for the member themselves or users with admin or moderator roles. Strict access checks are enforced to prevent unauthorized access to other members' details. All access events are logged for compliance.\n\nRelated features may include self-profile viewing/editing, admin member management, access review, and support flows. Invalid or non-existing UUIDs trigger clear error responses.","summary":"Get detailed profile information for a specific member (discussion_board_members table).","parameters":[{"name":"memberId","description":"Unique identifier (UUID) of the discussion board member to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed member profile information.","typeName":"IDiscussionBoardMember"},"authorizationRole":"admin","name":"at"},{"specification":"This endpoint retrieves detailed profile information for a specific discussion board member, based on the discussion_board_members table. The operation locates a member through their unique UUID and returns all non-sensitive profile fields, including email, nickname, avatar URI, join date, last login date, and status. Designed for self-profile viewing, admin visibility, and internal management queries.","path":"/discussionBoard/moderator/members/{memberId}","method":"get","description":"Retrieve detailed account/profile information for a single discussion board member, as represented in the discussion_board_members table. The operation accepts a member's unique UUID and returns all profile data except sensitive hashes (such as password_hash). Key fields include email, nickname, avatar URI, join date, last login at, account status, and audit timestamps.\n\nProfile retrieval is authorized for the member themselves or users with admin or moderator roles. Strict access checks are enforced to prevent unauthorized access to other members' details. All access events are logged for compliance.\n\nRelated features may include self-profile viewing/editing, admin member management, access review, and support flows. Invalid or non-existing UUIDs trigger clear error responses.","summary":"Get detailed profile information for a specific member (discussion_board_members table).","parameters":[{"name":"memberId","description":"Unique identifier (UUID) of the discussion board member to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed member profile information.","typeName":"IDiscussionBoardMember"},"authorizationRole":"moderator","name":"at"},{"specification":"This endpoint retrieves detailed profile information for a specific discussion board member, based on the discussion_board_members table. The operation locates a member through their unique UUID and returns all non-sensitive profile fields, including email, nickname, avatar URI, join date, last login date, and status. Designed for self-profile viewing, admin visibility, and internal management queries.","path":"/discussionBoard/member/members/{memberId}","method":"get","description":"Retrieve detailed account/profile information for a single discussion board member, as represented in the discussion_board_members table. The operation accepts a member's unique UUID and returns all profile data except sensitive hashes (such as password_hash). Key fields include email, nickname, avatar URI, join date, last login at, account status, and audit timestamps.\n\nProfile retrieval is authorized for the member themselves or users with admin or moderator roles. Strict access checks are enforced to prevent unauthorized access to other members' details. All access events are logged for compliance.\n\nRelated features may include self-profile viewing/editing, admin member management, access review, and support flows. Invalid or non-existing UUIDs trigger clear error responses.","summary":"Get detailed profile information for a specific member (discussion_board_members table).","parameters":[{"name":"memberId","description":"Unique identifier (UUID) of the discussion board member to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed member profile information.","typeName":"IDiscussionBoardMember"},"authorizationRole":"member","name":"at"},{"specification":"This operation updates a specific discussion board member's profile in the discussion_board_members table. It allows admins or the member to modify profile fields such as nickname, avatar URI, email (with re-verification flow), and status, with all changes being strictly validated to ensure compliance. The endpoint enforces that only fields present in the schema may be updated, and excludes sensitive operations like password changes (handled elsewhere).","path":"/discussionBoard/admin/members/{memberId}","method":"put","description":"Update the profile of a given member in the discussion board. Permitted fields for update include nickname, avatar URI, and status. If the email field is modified, an email re-verification process is automatically required before activation. Updates to the password_hash are explicitly not allowed via this operation and require a separate secure flow.\n\nAuthorization is limited to the member themselves (for basic profile edits) or to administrators (for all profile and status fields). Moderators may have view-only access as per system policy. Validation checks ensure all updated data meet format, uniqueness, and business rules. Unauthorized or invalid requests are rejected with detailed error messages.","summary":"Update the profile or status of a specific member (discussion_board_members table).","parameters":[{"name":"memberId","description":"Target member's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Profile fields and/or status modifications for the member (per schema constraints).","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"The updated member profile.","typeName":"IDiscussionBoardMember"},"authorizationRole":"admin","name":"update"},{"specification":"This operation updates a specific discussion board member's profile in the discussion_board_members table. It allows admins or the member to modify profile fields such as nickname, avatar URI, email (with re-verification flow), and status, with all changes being strictly validated to ensure compliance. The endpoint enforces that only fields present in the schema may be updated, and excludes sensitive operations like password changes (handled elsewhere).","path":"/discussionBoard/member/members/{memberId}","method":"put","description":"Update the profile of a given member in the discussion board. Permitted fields for update include nickname, avatar URI, and status. If the email field is modified, an email re-verification process is automatically required before activation. Updates to the password_hash are explicitly not allowed via this operation and require a separate secure flow.\n\nAuthorization is limited to the member themselves (for basic profile edits) or to administrators (for all profile and status fields). Moderators may have view-only access as per system policy. Validation checks ensure all updated data meet format, uniqueness, and business rules. Unauthorized or invalid requests are rejected with detailed error messages.","summary":"Update the profile or status of a specific member (discussion_board_members table).","parameters":[{"name":"memberId","description":"Target member's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Profile fields and/or status modifications for the member (per schema constraints).","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"The updated member profile.","typeName":"IDiscussionBoardMember"},"authorizationRole":"member","name":"update"},{"specification":"This operation deletes (soft-deletes) a specific member record from the discussion_board_members table. It sets the deleted_at field (if supported by the schema), effectively withdrawing or suspending the member account. Hard deletion is not performed; all business and legal retention policies are respected. Admins are authorized to perform this action, and members can only request their own withdrawal. Audit logs are generated for each operation.","path":"/discussionBoard/admin/members/{memberId}","method":"delete","description":"Soft-delete (deactivate) a discussion board member account by marking its deleted_at field and updating status accordingly. This disables the member's ability to log in, access the discussion board, or perform action as a member. Admin users can perform this action on any member for disciplinary or policy reasons, whereas individual members can request self-removal. Permanent removal (hard delete) would require a different flow to comply with audit/legal policies.\n\nThe operation enforces all relevant checks, ensures retention of audit logs, and issues notifications to impacted parties. Error responses are provided for already deleted or non-existent member IDs.","summary":"Soft-delete (deactivate/withdraw) a specific member (discussion_board_members table).","parameters":[{"name":"memberId","description":"UUID of the member account to be soft-deleted or withdrawn.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation deletes (soft-deletes) a specific member record from the discussion_board_members table. It sets the deleted_at field (if supported by the schema), effectively withdrawing or suspending the member account. Hard deletion is not performed; all business and legal retention policies are respected. Admins are authorized to perform this action, and members can only request their own withdrawal. Audit logs are generated for each operation.","path":"/discussionBoard/member/members/{memberId}","method":"delete","description":"Soft-delete (deactivate) a discussion board member account by marking its deleted_at field and updating status accordingly. This disables the member's ability to log in, access the discussion board, or perform action as a member. Admin users can perform this action on any member for disciplinary or policy reasons, whereas individual members can request self-removal. Permanent removal (hard delete) would require a different flow to comply with audit/legal policies.\n\nThe operation enforces all relevant checks, ensures retention of audit logs, and issues notifications to impacted parties. Error responses are provided for already deleted or non-existent member IDs.","summary":"Soft-delete (deactivate/withdraw) a specific member (discussion_board_members table).","parameters":[{"name":"memberId","description":"UUID of the member account to be soft-deleted or withdrawn.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase"},{"specification":"This endpoint allows privileged users (admins, moderators) to search and retrieve a paginated, filtered list of discussion board moderators from the discussion_board_moderators table. Supports complex search parameters including email, assignment status, assignment/revocation date, etc. The endpoint enforces strict access controls as only admins or higher-level roles may retrieve comprehensive moderator information.","path":"/discussionBoard/admin/moderators","method":"patch","description":"Retrieve a paginated, filtered list of discussion board moderators using sophisticated search and sorting options. The search criteria fields match those in the discussion_board_moderators table (email, assigned_by_admin_email, assigned_at, status, etc.). Typically, this operation is restricted to admins for staff management, audit review, or moderation assignment workflows.\n\nSecurity: Only admins are allowed to access the full list of moderators. Individual moderators may view their own assignment record but not search the entire pool. Sensitive or private data (such as audit trails) is not exposed through this endpoint. All activities are fully logged for compliance and transparency.","summary":"Search and retrieve a paginated, filtered list of moderators (discussion_board_moderators table).","parameters":[],"requestBody":{"description":"Search and pagination filter criteria for retrieving moderators.","typeName":"IDiscussionBoardModerator.IRequest"},"responseBody":{"description":"Paginated, filtered list of moderator summary information matching search criteria.","typeName":"IPageIDiscussionBoardModerator.ISummary"},"authorizationRole":"admin","name":"search"},{"specification":"This endpoint retrieves complete record details for a specific moderator from the discussion_board_moderators table, identified by unique moderatorId (UUID). It returns all profile and assignment details including email, assigned_by_admin_email, assigned_at, revoked_at, and status. Used for staff management, audit, or status review.","path":"/discussionBoard/admin/moderators/{moderatorId}","method":"get","description":"Fetch detailed information for a specific discussion board moderator identified by their UUID. Returned data includes all moderator-specific fields from the schema: email address, assigned_by_admin_email, assigned_at and revoked_at timestamps, status (active, revoked, suspended), and audit metadata.\n\nAccess is strictly limited to admins for management or auditing tasks or to the moderator themselves for personal assignment review. Requests for non-existent or deleted moderatorId result in error responses. All access attempts are tracked in operation logs.","summary":"Get full details for a specific moderator by UUID (discussion_board_moderators table).","parameters":[{"name":"moderatorId","description":"UUID of the moderator account whose details are to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderator profile and role/assignment details.","typeName":"IDiscussionBoardModerator"},"authorizationRole":"admin","name":"at"},{"specification":"This endpoint retrieves complete record details for a specific moderator from the discussion_board_moderators table, identified by unique moderatorId (UUID). It returns all profile and assignment details including email, assigned_by_admin_email, assigned_at, revoked_at, and status. Used for staff management, audit, or status review.","path":"/discussionBoard/moderator/moderators/{moderatorId}","method":"get","description":"Fetch detailed information for a specific discussion board moderator identified by their UUID. Returned data includes all moderator-specific fields from the schema: email address, assigned_by_admin_email, assigned_at and revoked_at timestamps, status (active, revoked, suspended), and audit metadata.\n\nAccess is strictly limited to admins for management or auditing tasks or to the moderator themselves for personal assignment review. Requests for non-existent or deleted moderatorId result in error responses. All access attempts are tracked in operation logs.","summary":"Get full details for a specific moderator by UUID (discussion_board_moderators table).","parameters":[{"name":"moderatorId","description":"UUID of the moderator account whose details are to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderator profile and role/assignment details.","typeName":"IDiscussionBoardModerator"},"authorizationRole":"moderator","name":"at"},{"specification":"This endpoint provides for the update of moderator records within the discussion_board_moderators table. Admins can change moderator status, assignment, or revoke privileges. The operation allows editing of fields such as status and revoked_at, but not the primary identifier or audit log fields. Full validation and permission checks are enforced.","path":"/discussionBoard/admin/moderators/{moderatorId}","method":"put","description":"Update information pertaining to a given moderator. Admin users can change moderator status (e.g., active, revoked, suspended), update assignment details, and set assignment or revocation timestamps. Only fields present in the discussion_board_moderators schema may be edited. All modifications require justification and are tracked in operation/policy logs for compliance.\n\nModerators cannot update their own status through this interface; privilege changes are restricted to admins. Unauthorized or incorrect requests produce error and audit trail entries.","summary":"Update status or assignment of a moderator (discussion_board_moderators table).","parameters":[{"name":"moderatorId","description":"UUID for the moderator whose record will be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update (status, assignment, revocation) per schema constraints.","typeName":"IDiscussionBoardModerator.IUpdate"},"responseBody":{"description":"Updated moderator profile with new assignment/status values.","typeName":"IDiscussionBoardModerator"},"authorizationRole":"admin","name":"update"},{"specification":"This operation removes (soft-deletes) a moderator from the discussion board by marking their deleted_at field and updating their status appropriately in the discussion_board_moderators table. Used primarily by admins to revoke all moderator rights or decommission an assignment. Full audit compliance and business logic must be observed during the operation.","path":"/discussionBoard/admin/moderators/{moderatorId}","method":"delete","description":"Soft-delete a moderator from the discussion board system by marking their deleted_at field and appropriately updating their status to 'revoked' or similar. Admins are the only users authorized to perform this operation. Affected moderators cannot perform any moderator duties after removal. Audit trails are updated accordingly; corresponding operation logs record the action for traceability and compliance.\n\nHard deletes are not performed in order to retain full compliance with system and audit policies. Attempting to remove a non-existent or already deleted moderator triggers an error response.","summary":"Soft-delete (remove/revoke) a moderator (discussion_board_moderators table).","parameters":[{"name":"moderatorId","description":"UUID of the moderator account to be soft-deleted/revoked.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation enables admins to search and paginate through the full list of administrator accounts in the discussion board system, as managed within the discussion_board_admins table. Search criteria include email, assignment status, and temporal fields, restricted to high-privilege users. Data is returned with sensitive audit and status information omitted from pagination, ensuring security.","path":"/discussionBoard/admin/admins","method":"patch","description":"Retrieve a paginated, filtered list of admin accounts in the discussion board, supporting advanced query by email, assignment status ('active', 'revoked', etc.), assignment and revocation dates, and other fields present in the discussion_board_admins table. Only system administrators are permitted to use this interface for admin staff management, audit review, or compliance checking.\n\nThe operation supports pagination, sorting, and field-based filtering. Sensitive fields (if any) are not returned to prevent privilege escalation or disclosure issues. Activities are fully audited and logged for all accesses and data returned. Results are paginated using reasonable batch sizes for security and scalability.","summary":"Search and retrieve a paginated, filtered list of administrators (discussion_board_admins table).","parameters":[],"requestBody":{"description":"Search and pagination filter criteria for retrieving administrators.","typeName":"IDiscussionBoardAdmin.IRequest"},"responseBody":{"description":"Paginated, filtered list of administrator summary records matching search criteria.","typeName":"IPageIDiscussionBoardAdmin.ISummary"},"authorizationRole":"admin","name":"search"},{"specification":"This endpoint retrieves complete profile and assignment details for a specific admin from the discussion_board_admins table, using the admin's UUID. Data retrieved includes email, assignment and revocation timestamps, status code, and audit fields. Used for admin self-profile, staff management, audit, or escalated support requests.","path":"/discussionBoard/admin/admins/{adminId}","method":"get","description":"Retrieve full profile and role/assignment data for a specific system administrator using their UUID. Returned information encompasses all admin schema fields: email, assigned_at, revoked_at, account status ('active', 'revoked', 'suspended'), and audit timestamps.\n\nAccess authorization is limited to other admins for system governance, audit review, or to the admin themselves for self-profile inspection. Unauthorized or invalid UUIDs are rejected with detailed errors. All access actions are operation-logged for full audit compliance.","summary":"Get full profile and assignment details for an admin (discussion_board_admins table).","parameters":[{"name":"adminId","description":"Unique UUID identifier for the admin record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full profile and assignment record for the administrator.","typeName":"IDiscussionBoardAdmin"},"authorizationRole":"admin","name":"at"},{"specification":"This endpoint updates an administrator's record in the discussion_board_admins table. Permitted updates include changes to status, assignment/revocation timestamps, and profile fields, strictly according to schema. Only other administrators are authorized to update admin records. All modifications are subject to validation and must be logged for compliance and governance.","path":"/discussionBoard/admin/admins/{adminId}","method":"put","description":"Update the profile, status, or assignment data for a given admin. Admin-to-admin updates are permitted and strictly logged. Fields allowed for modification include status, revoked_at, and any editable admin profile properties defined by the schema. Email updates are allowed only upon confirmation/verification workflow and trigger audit trail events.\n\nAll changes are validated for business logic (assignment status, non-duplication, period boundaries, etc). Unauthorized action or invalid UUIDs are rejected and recorded for internal review and compliance. Only authorized admins can access this feature.","summary":"Update profile, status, or assignment info for a specific admin (discussion_board_admins table).","parameters":[{"name":"adminId","description":"Target admin's unique UUID identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable profile, status, or assignment fields for the admin per schema definitions.","typeName":"IDiscussionBoardAdmin.IUpdate"},"responseBody":{"description":"Updated administrator profile record reflecting the changes.","typeName":"IDiscussionBoardAdmin"},"authorizationRole":"admin","name":"update"},{"specification":"This operation removes (soft-deletes) an admin account from the discussion_board_admins table by updating the deleted_at field and changing the account status to a non-active value. Hard deletion is not permitted for audit and compliance. Only another active admin may perform this action, and all such events are logged. Useful for retiring, de-provisioning, or suspending administrator accounts.","path":"/discussionBoard/admin/admins/{adminId}","method":"delete","description":"Soft-delete (deactivate) an administrator in the discussion board system by updating their deleted_at timestamp and changing their status to a non-active value (such as 'revoked' or 'suspended'). Only another admin may perform the operation. Account removal prohibits use of the admin role for further actions, but the record is retained for audit and compliance.\n\nAttempting to remove a non-existent or already deleted admin results in a clear error message. All actions are tracked in operation logs for security and compliance.","summary":"Soft-delete (deactivate/retire) an admin account (discussion_board_admins table).","parameters":[{"name":"adminId","description":"UUID of the admin account to be deactivated/retired.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a paginated and searchable list of forum posts from the discussion_board_posts table. It allows advanced filtering by category, author type (member, moderator, or admin), title or content keyword, status, and creation/update date range. Supports sorting and pagination for efficient client-side display. Integrates with discussion_board_categories and author references for enriched listings. Only active and non-deleted posts are included for general users, while moderators/admins can view hidden or flagged posts per permission.","description":"Retrieve a flexible, paginated list of posts from the discussion board. This endpoint supports comprehensive searching by title, body, category, author role, and status. Only posts with status 'active' or 'visible' are returned to non-privileged users; hidden, deleted, or flagged posts are reserved for users with moderator/admin rights.\n\nRequest may include filters for specific category, time window, keyword search (using trigram index), and sorting (e.g., newest, most upvoted). Pagination parameters require page size and offset/cursor. Only posts not soft-deleted (deleted_at is null) are included unless the user has admin/moderator privileges.\n\nSecurity: Members can access active posts; moderators/admins are permitted to see drafts, hidden, flagged, and deleted posts. Use of this endpoint may be rate-limited for abuse prevention. Errors may occur with invalid filters or insufficient permissions.","summary":"Search and retrieve a filtered, paginated list of discussion board posts.","parameters":[],"requestBody":{"description":"Search, filter, pagination, and sorting options for querying posts.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated list of post summaries matching search/filter parameters.","typeName":"IPageIDiscussionBoardPost.ISummary"},"authorizationRole":"member","name":"search","path":"/discussionBoard/member/posts","method":"patch"},{"specification":"This operation retrieves a paginated and searchable list of forum posts from the discussion_board_posts table. It allows advanced filtering by category, author type (member, moderator, or admin), title or content keyword, status, and creation/update date range. Supports sorting and pagination for efficient client-side display. Integrates with discussion_board_categories and author references for enriched listings. Only active and non-deleted posts are included for general users, while moderators/admins can view hidden or flagged posts per permission.","description":"Retrieve a flexible, paginated list of posts from the discussion board. This endpoint supports comprehensive searching by title, body, category, author role, and status. Only posts with status 'active' or 'visible' are returned to non-privileged users; hidden, deleted, or flagged posts are reserved for users with moderator/admin rights.\n\nRequest may include filters for specific category, time window, keyword search (using trigram index), and sorting (e.g., newest, most upvoted). Pagination parameters require page size and offset/cursor. Only posts not soft-deleted (deleted_at is null) are included unless the user has admin/moderator privileges.\n\nSecurity: Members can access active posts; moderators/admins are permitted to see drafts, hidden, flagged, and deleted posts. Use of this endpoint may be rate-limited for abuse prevention. Errors may occur with invalid filters or insufficient permissions.","summary":"Search and retrieve a filtered, paginated list of discussion board posts.","parameters":[],"requestBody":{"description":"Search, filter, pagination, and sorting options for querying posts.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated list of post summaries matching search/filter parameters.","typeName":"IPageIDiscussionBoardPost.ISummary"},"authorizationRole":"moderator","name":"search","path":"/discussionBoard/moderator/posts","method":"patch"},{"specification":"This operation retrieves a paginated and searchable list of forum posts from the discussion_board_posts table. It allows advanced filtering by category, author type (member, moderator, or admin), title or content keyword, status, and creation/update date range. Supports sorting and pagination for efficient client-side display. Integrates with discussion_board_categories and author references for enriched listings. Only active and non-deleted posts are included for general users, while moderators/admins can view hidden or flagged posts per permission.","description":"Retrieve a flexible, paginated list of posts from the discussion board. This endpoint supports comprehensive searching by title, body, category, author role, and status. Only posts with status 'active' or 'visible' are returned to non-privileged users; hidden, deleted, or flagged posts are reserved for users with moderator/admin rights.\n\nRequest may include filters for specific category, time window, keyword search (using trigram index), and sorting (e.g., newest, most upvoted). Pagination parameters require page size and offset/cursor. Only posts not soft-deleted (deleted_at is null) are included unless the user has admin/moderator privileges.\n\nSecurity: Members can access active posts; moderators/admins are permitted to see drafts, hidden, flagged, and deleted posts. Use of this endpoint may be rate-limited for abuse prevention. Errors may occur with invalid filters or insufficient permissions.","summary":"Search and retrieve a filtered, paginated list of discussion board posts.","parameters":[],"requestBody":{"description":"Search, filter, pagination, and sorting options for querying posts.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated list of post summaries matching search/filter parameters.","typeName":"IPageIDiscussionBoardPost.ISummary"},"authorizationRole":"admin","name":"search","path":"/discussionBoard/admin/posts","method":"patch"},{"specification":"This operation retrieves the detailed information of a single post from the discussion_board_posts table, specified by its unique ID. Returns author (member/moderator/admin), category, title, body, attachments, and status. Only posts with status 'active' and deleted_at = null are shown to regular members/guests; moderators/admins may retrieve hidden or deleted posts based on their permissions.","description":"Obtain all details of a single discussion board post by its unique postId. The response includes author profile (member, moderator, or admin), category, full title and body, attachments list, creation/update timestamps, and current status.\n\nOnly posts not soft-deleted (deleted_at is null) are accessible to members and guests, and only if status is 'active'. Moderators and admins can retrieve posts with other statuses for moderation or management.\n\nSecurity: Access to hidden or flagged posts is restricted by role. Errors are returned if the post does not exist or access is denied.","summary":"Get a single discussion board post in full detail by ID.","parameters":[{"name":"postId","description":"The unique identifier of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full post information by unique postId.","typeName":"IDiscussionBoardPost"},"authorizationRole":"member","name":"at","path":"/discussionBoard/member/posts/{postId}","method":"get"},{"specification":"This operation retrieves the detailed information of a single post from the discussion_board_posts table, specified by its unique ID. Returns author (member/moderator/admin), category, title, body, attachments, and status. Only posts with status 'active' and deleted_at = null are shown to regular members/guests; moderators/admins may retrieve hidden or deleted posts based on their permissions.","description":"Obtain all details of a single discussion board post by its unique postId. The response includes author profile (member, moderator, or admin), category, full title and body, attachments list, creation/update timestamps, and current status.\n\nOnly posts not soft-deleted (deleted_at is null) are accessible to members and guests, and only if status is 'active'. Moderators and admins can retrieve posts with other statuses for moderation or management.\n\nSecurity: Access to hidden or flagged posts is restricted by role. Errors are returned if the post does not exist or access is denied.","summary":"Get a single discussion board post in full detail by ID.","parameters":[{"name":"postId","description":"The unique identifier of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full post information by unique postId.","typeName":"IDiscussionBoardPost"},"authorizationRole":"moderator","name":"at","path":"/discussionBoard/moderator/posts/{postId}","method":"get"},{"specification":"This operation retrieves the detailed information of a single post from the discussion_board_posts table, specified by its unique ID. Returns author (member/moderator/admin), category, title, body, attachments, and status. Only posts with status 'active' and deleted_at = null are shown to regular members/guests; moderators/admins may retrieve hidden or deleted posts based on their permissions.","description":"Obtain all details of a single discussion board post by its unique postId. The response includes author profile (member, moderator, or admin), category, full title and body, attachments list, creation/update timestamps, and current status.\n\nOnly posts not soft-deleted (deleted_at is null) are accessible to members and guests, and only if status is 'active'. Moderators and admins can retrieve posts with other statuses for moderation or management.\n\nSecurity: Access to hidden or flagged posts is restricted by role. Errors are returned if the post does not exist or access is denied.","summary":"Get a single discussion board post in full detail by ID.","parameters":[{"name":"postId","description":"The unique identifier of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full post information by unique postId.","typeName":"IDiscussionBoardPost"},"authorizationRole":"admin","name":"at","path":"/discussionBoard/admin/posts/{postId}","method":"get"},{"specification":"This operation provides a rich, paginated, and filterable search of discussion posts in the board. It leverages the discussion_board_posts table, supporting advanced querying by category, keyword in title or body, author type, status, and date. This allows users to efficiently explore debates, filter by topic or recency, and discover relevant discussions. It uses DTO types adhering to the 'DiscussionBoard' service prefix. Only posts with statuses considered visible to the requesting user's role will be included; deleted/hidden content is excluded unless the requester is an admin or moderator.","path":"/discussionBoard/posts","method":"patch","description":"Retrieve a paginated and filtered list of discussion board posts as part of the main content workflow. This operation enables robust searching across multiple fields: title, body, status, category, and author metadata as defined in the Prisma schema. Results may include posts by members, moderators, or admins, and are limited by content visibility depending on role and post status (active, hidden, deleted, etc). \n\nSecurity model: Any authenticated or guest user can use this endpoint. However, some posts (e.g., those flagged, deleted, or hidden) will be filtered out for most users. Rich search, sorting, and pagination ensure performance and scalability for high-traffic boards.\n\nValidation ensures only supported search/sort fields are honored. Edge cases (like invalid status, out-of-range pagination) are handled with clear errors. Related APIs include post detail (GET /posts/{postId}).","summary":"Search and retrieve paginated discussion posts","parameters":[],"requestBody":{"description":"Search, filter, sort and pagination parameters for post listing.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated result set of post summaries, with pagination/meta info based on applied filters.","typeName":"IPageIDiscussionBoardPost.ISummary"},"authorizationRole":null,"name":"search"},{"specification":"Retrieves the detailed information for a single post from the discussion_board_posts table, joining associated category and potential author/member information as required. This supports the forum's drill-down view and is essential for rendering the full post content, with all moderation/status fields present. Supports audit tracking and handling of visibility for deleted/hidden states between user roles.","path":"/discussionBoard/posts/{postId}","method":"get","description":"Retrieve a single discussion post's detailed content and metadata by post ID. This operation returns all post fields, including author linkage (which role), assigned category, attachments, and status/history. Comments and vote counts are not included—they require separate endpoints.\n\nRoles: Any user (even unauthenticated) may access published posts, but posts with certain statuses (e.g., 'hidden', 'deleted') are visible only to admins/moderators. Internal schema linkages enforce referential integrity.\n\nStandard error responses include not found (404) and access forbidden for non-public posts.","summary":"Get full detail of a single discussion post by ID","parameters":[{"name":"postId","description":"Unique identifier of the post to look up.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full post data including all schema fields and relations.","typeName":"IDiscussionBoardPost"},"authorizationRole":null,"name":"at"},{"specification":"Allows the creation of a new post into the discussion_board_posts table on the discussionBoard service. This records the author's role, link to requested category (if any), title, body, and optional attachments as per schema validations. Only users with member, moderator, or admin status may create posts; guests cannot create content.","path":"/discussionBoard/member/posts","method":"post","description":"Create a new discussion post, including required title and body fields, with optional category and attachments as per schema limits. Author is determined by authentication context, validated against member/moderator/admin tables. Upon creation, status is set according to workflow policy (typically 'active', may be \"pending\" for mods/admins if desired).\n\nOnly authenticated users with post creation rights (members or higher) can use this endpoint. Inputs are fully validated (title length <= 100, body <= 4000, category existence, attachments format/limit, etc) as defined in the Prisma schema and requirements documentation.","summary":"Create a new discussion post","parameters":[],"requestBody":{"description":"All fields necessary for new post creation (title, body, author context, etc).","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"The newly created post entity including ID and resolved fields.","typeName":"IDiscussionBoardPost"},"authorizationRole":"member","name":"create"},{"specification":"Allows the creation of a new post into the discussion_board_posts table on the discussionBoard service. This records the author's role, link to requested category (if any), title, body, and optional attachments as per schema validations. Only users with member, moderator, or admin status may create posts; guests cannot create content.","path":"/discussionBoard/moderator/posts","method":"post","description":"Create a new discussion post, including required title and body fields, with optional category and attachments as per schema limits. Author is determined by authentication context, validated against member/moderator/admin tables. Upon creation, status is set according to workflow policy (typically 'active', may be \"pending\" for mods/admins if desired).\n\nOnly authenticated users with post creation rights (members or higher) can use this endpoint. Inputs are fully validated (title length <= 100, body <= 4000, category existence, attachments format/limit, etc) as defined in the Prisma schema and requirements documentation.","summary":"Create a new discussion post","parameters":[],"requestBody":{"description":"All fields necessary for new post creation (title, body, author context, etc).","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"The newly created post entity including ID and resolved fields.","typeName":"IDiscussionBoardPost"},"authorizationRole":"moderator","name":"create"},{"specification":"Allows the creation of a new post into the discussion_board_posts table on the discussionBoard service. This records the author's role, link to requested category (if any), title, body, and optional attachments as per schema validations. Only users with member, moderator, or admin status may create posts; guests cannot create content.","path":"/discussionBoard/admin/posts","method":"post","description":"Create a new discussion post, including required title and body fields, with optional category and attachments as per schema limits. Author is determined by authentication context, validated against member/moderator/admin tables. Upon creation, status is set according to workflow policy (typically 'active', may be \"pending\" for mods/admins if desired).\n\nOnly authenticated users with post creation rights (members or higher) can use this endpoint. Inputs are fully validated (title length <= 100, body <= 4000, category existence, attachments format/limit, etc) as defined in the Prisma schema and requirements documentation.","summary":"Create a new discussion post","parameters":[],"requestBody":{"description":"All fields necessary for new post creation (title, body, author context, etc).","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"The newly created post entity including ID and resolved fields.","typeName":"IDiscussionBoardPost"},"authorizationRole":"admin","name":"create"},{"specification":"Update an existing discussion post (IDed by postId) in the discussion_board_posts table. Allows editing of title, body, category, and attachments if business logic allows (e.g., author can edit within X hours, or admins/mods at any time). Soft delete and status changes require admin/mod role. Edits are tracked with updated_at timestamp.","path":"/discussionBoard/member/posts/{postId}","method":"put","description":"Edit the content, metadata or status of an existing forum post. Only the author (member/mod/admin) can edit (and only within policy time windows unless admin overrides), or moderators/admins according to their higher privileges. Schema rules (title/body length, attachments, valid status) must be observed. Endpoint tracks updated_at as modification time and ensures all changes are auditable.\n\nEdge cases include editing of deleted/hidden posts (forbidden for member, allowed for admin/mod depending on business policy).","summary":"Update an existing discussion post by ID","parameters":[{"name":"postId","description":"Unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable post fields for update; must pass schema/business validation.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"The post after update, with all fields from schema.","typeName":"IDiscussionBoardPost"},"authorizationRole":"member","name":"update"},{"specification":"Update an existing discussion post (IDed by postId) in the discussion_board_posts table. Allows editing of title, body, category, and attachments if business logic allows (e.g., author can edit within X hours, or admins/mods at any time). Soft delete and status changes require admin/mod role. Edits are tracked with updated_at timestamp.","path":"/discussionBoard/moderator/posts/{postId}","method":"put","description":"Edit the content, metadata or status of an existing forum post. Only the author (member/mod/admin) can edit (and only within policy time windows unless admin overrides), or moderators/admins according to their higher privileges. Schema rules (title/body length, attachments, valid status) must be observed. Endpoint tracks updated_at as modification time and ensures all changes are auditable.\n\nEdge cases include editing of deleted/hidden posts (forbidden for member, allowed for admin/mod depending on business policy).","summary":"Update an existing discussion post by ID","parameters":[{"name":"postId","description":"Unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable post fields for update; must pass schema/business validation.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"The post after update, with all fields from schema.","typeName":"IDiscussionBoardPost"},"authorizationRole":"moderator","name":"update"},{"specification":"Update an existing discussion post (IDed by postId) in the discussion_board_posts table. Allows editing of title, body, category, and attachments if business logic allows (e.g., author can edit within X hours, or admins/mods at any time). Soft delete and status changes require admin/mod role. Edits are tracked with updated_at timestamp.","path":"/discussionBoard/admin/posts/{postId}","method":"put","description":"Edit the content, metadata or status of an existing forum post. Only the author (member/mod/admin) can edit (and only within policy time windows unless admin overrides), or moderators/admins according to their higher privileges. Schema rules (title/body length, attachments, valid status) must be observed. Endpoint tracks updated_at as modification time and ensures all changes are auditable.\n\nEdge cases include editing of deleted/hidden posts (forbidden for member, allowed for admin/mod depending on business policy).","summary":"Update an existing discussion post by ID","parameters":[{"name":"postId","description":"Unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable post fields for update; must pass schema/business validation.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"The post after update, with all fields from schema.","typeName":"IDiscussionBoardPost"},"authorizationRole":"admin","name":"update"},{"specification":"Deletes (soft delete) a post identified by postId from the discussion_board_posts table. Only the author (within allowed window), moderator, or admin may perform this operation. Deletion is soft (sets deleted_at) and status is updated. Hard delete is not supported per schema. Deleted posts are excluded from most API responses except when queried by privileged users.","path":"/discussionBoard/member/posts/{postId}","method":"delete","description":"Soft delete a post by setting its deleted_at field and updating status. This preserves content for moderation/audit but removes it from standard user-facing lists. Only authors (within edit/delete window), moderators or admins can delete. Attempts to delete already deleted or non-existent posts return clear error responses. Auditing is required for all role types.","summary":"Soft delete a post (logical removal) by ID","parameters":[{"name":"postId","description":"Unique identifier for the post to remove logically.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase"},{"specification":"Deletes (soft delete) a post identified by postId from the discussion_board_posts table. Only the author (within allowed window), moderator, or admin may perform this operation. Deletion is soft (sets deleted_at) and status is updated. Hard delete is not supported per schema. Deleted posts are excluded from most API responses except when queried by privileged users.","path":"/discussionBoard/moderator/posts/{postId}","method":"delete","description":"Soft delete a post by setting its deleted_at field and updating status. This preserves content for moderation/audit but removes it from standard user-facing lists. Only authors (within edit/delete window), moderators or admins can delete. Attempts to delete already deleted or non-existent posts return clear error responses. Auditing is required for all role types.","summary":"Soft delete a post (logical removal) by ID","parameters":[{"name":"postId","description":"Unique identifier for the post to remove logically.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase"},{"specification":"Deletes (soft delete) a post identified by postId from the discussion_board_posts table. Only the author (within allowed window), moderator, or admin may perform this operation. Deletion is soft (sets deleted_at) and status is updated. Hard delete is not supported per schema. Deleted posts are excluded from most API responses except when queried by privileged users.","path":"/discussionBoard/admin/posts/{postId}","method":"delete","description":"Soft delete a post by setting its deleted_at field and updating status. This preserves content for moderation/audit but removes it from standard user-facing lists. Only authors (within edit/delete window), moderators or admins can delete. Attempts to delete already deleted or non-existent posts return clear error responses. Auditing is required for all role types.","summary":"Soft delete a post (logical removal) by ID","parameters":[{"name":"postId","description":"Unique identifier for the post to remove logically.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Searches for comments on a given post (referenced by postId) using the discussion_board_comments table. Allows advanced filter, sort, and pagination by creation date, author, status, hierarchy. This endpoint is crucial for navigating discussion threads and nested comment structures. Results exclude deleted/hidden unless privileged user. Leverages comment's parent-child threading if needed.","path":"/discussionBoard/posts/{postId}/comments","method":"patch","description":"List and search all comments for a specific post, supporting thread navigation (parent/child), sorting, and filter by author/status/dates according to the schema. Pagination ensures scalable loading of long discussions. Role-based visibility restricts access to hidden/deleted comments for non-privileged users; admins/mods see all.\n\nInput must include postId (path) plus search/pagination/sort in body.","summary":"Search/paginate comments for a given discussion post","parameters":[{"name":"postId","description":"Post ID for which comments are being fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, sort, filter, and pagination request for comment listing.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated list of comment summary data for given post.","typeName":"IPageIDiscussionBoardComment.ISummary"},"authorizationRole":null,"name":"search"},{"specification":"Retrieves all data for a single comment belonging to a post. This fetches all relevant fields from the discussion_board_comments table, including parent-child threading information, author reference, and status. Supports full reply-context viewing. Visibility/security logic is enforced as with posts.","path":"/discussionBoard/posts/{postId}/comments/{commentId}","method":"get","description":"Get a specific comment's full detail by comment ID and parent postId. Ensures referential and parent-child integrity, tracks viewing of hidden/deleted comments according to privilege. Response includes all comment schema fields (body, parent, status, authorId, etc).","summary":"Get detailed data for a single comment on a post","parameters":[{"name":"postId","description":"ID of the post to which this comment belongs.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail as per schema for a comment, status, author, parent, etc.","typeName":"IDiscussionBoardComment"},"authorizationRole":null,"name":"at"},{"specification":"Creates a new comment for a given discussion post. Requires postId (context). Only members, moderators, or admins may comment (guests cannot). Input fields must pass schema validation (body text, parent comment (optional), author reference, etc). New comments default to 'active' status and are timestamped. Parent-child threading supported for replies.","path":"/discussionBoard/member/posts/{postId}/comments","method":"post","description":"Adds a new comment to the specified post. Author is taken from the authenticated user context. Only members or higher can comment. Validates parentComment threading constraint, body length, and required fields as per schema (max 1000 chars body, parent thread ID optional for replying).\n\nCreated comment returns all schema fields including relationships for immediate UI update. Only top-level comments should have null parentId.","summary":"Add a new comment or reply for a particular post","parameters":[{"name":"postId","description":"ID of the post to which to add a comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation fields (body, optional parentId for reply, etc).","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Newly created comment with all schema fields included.","typeName":"IDiscussionBoardComment"},"authorizationRole":"member","name":"create"},{"specification":"Creates a new comment for a given discussion post. Requires postId (context). Only members, moderators, or admins may comment (guests cannot). Input fields must pass schema validation (body text, parent comment (optional), author reference, etc). New comments default to 'active' status and are timestamped. Parent-child threading supported for replies.","path":"/discussionBoard/moderator/posts/{postId}/comments","method":"post","description":"Adds a new comment to the specified post. Author is taken from the authenticated user context. Only members or higher can comment. Validates parentComment threading constraint, body length, and required fields as per schema (max 1000 chars body, parent thread ID optional for replying).\n\nCreated comment returns all schema fields including relationships for immediate UI update. Only top-level comments should have null parentId.","summary":"Add a new comment or reply for a particular post","parameters":[{"name":"postId","description":"ID of the post to which to add a comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation fields (body, optional parentId for reply, etc).","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Newly created comment with all schema fields included.","typeName":"IDiscussionBoardComment"},"authorizationRole":"moderator","name":"create"},{"specification":"Creates a new comment for a given discussion post. Requires postId (context). Only members, moderators, or admins may comment (guests cannot). Input fields must pass schema validation (body text, parent comment (optional), author reference, etc). New comments default to 'active' status and are timestamped. Parent-child threading supported for replies.","path":"/discussionBoard/admin/posts/{postId}/comments","method":"post","description":"Adds a new comment to the specified post. Author is taken from the authenticated user context. Only members or higher can comment. Validates parentComment threading constraint, body length, and required fields as per schema (max 1000 chars body, parent thread ID optional for replying).\n\nCreated comment returns all schema fields including relationships for immediate UI update. Only top-level comments should have null parentId.","summary":"Add a new comment or reply for a particular post","parameters":[{"name":"postId","description":"ID of the post to which to add a comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation fields (body, optional parentId for reply, etc).","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Newly created comment with all schema fields included.","typeName":"IDiscussionBoardComment"},"authorizationRole":"admin","name":"create"},{"specification":"Updates an existing comment on a given post. Author, moderator, or admin may update within policy windows, and only 'active' or modifiable comments may be changed. Updates permitted for content/body (max 1000 chars) or status as per schema/business logic. Threading and referential parent/child links are enforced. All edits timestamped in updated_at for audit trail.","path":"/discussionBoard/member/posts/{postId}/comments/{commentId}","method":"put","description":"Update the text, parent (if allowed), or status of an existing comment, respecting all constraints (body length, parental, author). Only owners (within edit windows) or moderators/admins (any time) may perform updates. Comments cannot be changed after logical deletion. Updated_at is set for all edits.\n\nBusiness validation covers anti-abuse and prevents parent changes unless allowed. Edge case and error handling are robust (non-existent/deleted comments, privilege, edit expired, etc).","summary":"Update a comment (or reply) for a specific post by commentId","parameters":[{"name":"postId","description":"ID of associated post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for comment update (body, status, parent, etc).","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The comment after update (all schema fields).","typeName":"IDiscussionBoardComment"},"authorizationRole":"member","name":"update"},{"specification":"Updates an existing comment on a given post. Author, moderator, or admin may update within policy windows, and only 'active' or modifiable comments may be changed. Updates permitted for content/body (max 1000 chars) or status as per schema/business logic. Threading and referential parent/child links are enforced. All edits timestamped in updated_at for audit trail.","path":"/discussionBoard/moderator/posts/{postId}/comments/{commentId}","method":"put","description":"Update the text, parent (if allowed), or status of an existing comment, respecting all constraints (body length, parental, author). Only owners (within edit windows) or moderators/admins (any time) may perform updates. Comments cannot be changed after logical deletion. Updated_at is set for all edits.\n\nBusiness validation covers anti-abuse and prevents parent changes unless allowed. Edge case and error handling are robust (non-existent/deleted comments, privilege, edit expired, etc).","summary":"Update a comment (or reply) for a specific post by commentId","parameters":[{"name":"postId","description":"ID of associated post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for comment update (body, status, parent, etc).","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The comment after update (all schema fields).","typeName":"IDiscussionBoardComment"},"authorizationRole":"moderator","name":"update"},{"specification":"Updates an existing comment on a given post. Author, moderator, or admin may update within policy windows, and only 'active' or modifiable comments may be changed. Updates permitted for content/body (max 1000 chars) or status as per schema/business logic. Threading and referential parent/child links are enforced. All edits timestamped in updated_at for audit trail.","path":"/discussionBoard/admin/posts/{postId}/comments/{commentId}","method":"put","description":"Update the text, parent (if allowed), or status of an existing comment, respecting all constraints (body length, parental, author). Only owners (within edit windows) or moderators/admins (any time) may perform updates. Comments cannot be changed after logical deletion. Updated_at is set for all edits.\n\nBusiness validation covers anti-abuse and prevents parent changes unless allowed. Edge case and error handling are robust (non-existent/deleted comments, privilege, edit expired, etc).","summary":"Update a comment (or reply) for a specific post by commentId","parameters":[{"name":"postId","description":"ID of associated post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for comment update (body, status, parent, etc).","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The comment after update (all schema fields).","typeName":"IDiscussionBoardComment"},"authorizationRole":"admin","name":"update"},{"specification":"Soft deletes a comment (by commentId) associated with a post. Only the comment's author (within edit window), moderators, or admins can delete. Deletion sets deleted_at and status, preserving record for audit. Deleted comments are excluded for most users but available to privileged roles for review or restoration workflow.","path":"/discussionBoard/member/posts/{postId}/comments/{commentId}","method":"delete","description":"Softly deletes a comment by its ID (and parent postId). This operation marks the comment as deleted, updates status, and timestamps deleted_at. Author, moderator, or admin may exercise this right as per business rules. Restores parent/child thread continuity for audit and display; full deletion is not permitted.\n\nDeleted comments are not served to most users but remain in the system for moderation. Attempts to delete non-existent or already deleted comments throw clear errors with audit logging.","summary":"Soft delete (logical removal) of comment by ID","parameters":[{"name":"postId","description":"ID of the parent post for the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase"},{"specification":"Soft deletes a comment (by commentId) associated with a post. Only the comment's author (within edit window), moderators, or admins can delete. Deletion sets deleted_at and status, preserving record for audit. Deleted comments are excluded for most users but available to privileged roles for review or restoration workflow.","path":"/discussionBoard/moderator/posts/{postId}/comments/{commentId}","method":"delete","description":"Softly deletes a comment by its ID (and parent postId). This operation marks the comment as deleted, updates status, and timestamps deleted_at. Author, moderator, or admin may exercise this right as per business rules. Restores parent/child thread continuity for audit and display; full deletion is not permitted.\n\nDeleted comments are not served to most users but remain in the system for moderation. Attempts to delete non-existent or already deleted comments throw clear errors with audit logging.","summary":"Soft delete (logical removal) of comment by ID","parameters":[{"name":"postId","description":"ID of the parent post for the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase"},{"specification":"Soft deletes a comment (by commentId) associated with a post. Only the comment's author (within edit window), moderators, or admins can delete. Deletion sets deleted_at and status, preserving record for audit. Deleted comments are excluded for most users but available to privileged roles for review or restoration workflow.","path":"/discussionBoard/admin/posts/{postId}/comments/{commentId}","method":"delete","description":"Softly deletes a comment by its ID (and parent postId). This operation marks the comment as deleted, updates status, and timestamps deleted_at. Author, moderator, or admin may exercise this right as per business rules. Restores parent/child thread continuity for audit and display; full deletion is not permitted.\n\nDeleted comments are not served to most users but remain in the system for moderation. Attempts to delete non-existent or already deleted comments throw clear errors with audit logging.","summary":"Soft delete (logical removal) of comment by ID","parameters":[{"name":"postId","description":"ID of the parent post for the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Returns a paginated list of post-vote interactions from the discussion_board_post_votes table. This includes upvotes and downvotes, keyed by voter/member and target post. This endpoint is used for moderation, admin reporting, or gamified leaderboards—enabling rich queries on who voted when/where. Not intended for casual user calls (for performance/abuse). Use cases include searching by post, member, or date, supporting admin and moderator analytics.","path":"/discussionBoard/admin/postVotes","method":"patch","description":"Search and paginate through all post-vote records, allowing querying by member id, post id, vote type (up/down), and date range. Use case covers leaderboard stats, anti-abuse audits, and engagement analytics. Only admins or moderators may use this. Input includes rich filter object and pagination.\n\nReturns paged results of votes, including voter/member, post reference, is_upvote flag, and timestamps as per schema.","summary":"Search and paginate post vote records for analytics/moderation","parameters":[],"requestBody":{"description":"Search/filter/sort input for post vote listing.","typeName":"IDiscussionBoardPostVote.IRequest"},"responseBody":{"description":"Paginated result set of post vote records.","typeName":"IPageIDiscussionBoardPostVote"},"authorizationRole":"admin","name":"search"},{"specification":"Returns a paginated list of post-vote interactions from the discussion_board_post_votes table. This includes upvotes and downvotes, keyed by voter/member and target post. This endpoint is used for moderation, admin reporting, or gamified leaderboards—enabling rich queries on who voted when/where. Not intended for casual user calls (for performance/abuse). Use cases include searching by post, member, or date, supporting admin and moderator analytics.","path":"/discussionBoard/moderator/postVotes","method":"patch","description":"Search and paginate through all post-vote records, allowing querying by member id, post id, vote type (up/down), and date range. Use case covers leaderboard stats, anti-abuse audits, and engagement analytics. Only admins or moderators may use this. Input includes rich filter object and pagination.\n\nReturns paged results of votes, including voter/member, post reference, is_upvote flag, and timestamps as per schema.","summary":"Search and paginate post vote records for analytics/moderation","parameters":[],"requestBody":{"description":"Search/filter/sort input for post vote listing.","typeName":"IDiscussionBoardPostVote.IRequest"},"responseBody":{"description":"Paginated result set of post vote records.","typeName":"IPageIDiscussionBoardPostVote"},"authorizationRole":"moderator","name":"search"},{"specification":"Retrieves the details for a single post vote record, referenced by its primary key. Used primarily for audit, moderation, or dispute resolution—exposes member, post, vote type, and all schema fields. Users may only call this if privileged (admin/moderator).","path":"/discussionBoard/admin/postVotes/{postVoteId}","method":"get","description":"Get a single post vote record by its primary key. Returns detailed data about vote, including associated member, post, upvote status, timestamps. Used by moderation/admins when reviewing vote histories or fraud/abuse analysis. Error handling for not found (404) or forbidden (403) included.","summary":"Retrieve a single post vote record by ID","parameters":[{"name":"postVoteId","description":"UUID of the post vote record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed record of the post vote.","typeName":"IDiscussionBoardPostVote"},"authorizationRole":"admin","name":"at"},{"specification":"Retrieves the details for a single post vote record, referenced by its primary key. Used primarily for audit, moderation, or dispute resolution—exposes member, post, vote type, and all schema fields. Users may only call this if privileged (admin/moderator).","path":"/discussionBoard/moderator/postVotes/{postVoteId}","method":"get","description":"Get a single post vote record by its primary key. Returns detailed data about vote, including associated member, post, upvote status, timestamps. Used by moderation/admins when reviewing vote histories or fraud/abuse analysis. Error handling for not found (404) or forbidden (403) included.","summary":"Retrieve a single post vote record by ID","parameters":[{"name":"postVoteId","description":"UUID of the post vote record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed record of the post vote.","typeName":"IDiscussionBoardPostVote"},"authorizationRole":"moderator","name":"at"},{"specification":"This operation allows a member of the discussion board to cast a vote (upvote or downvote) on a specific post. It operates on the discussion_board_post_votes table. Each member can only vote once per post, and this vote tracks whether it is an upvote or downvote. The operation requires the target post's ID and the member's ID, as well as the vote type, and creates a record reflecting the member's interaction with the post. Voting produces analytics on popularity, abuse prevention, and engagement measurement.","path":"/discussionBoard/member/postVotes","method":"post","description":"Create a new vote (upvote or downvote) on a post by a member. Only authenticated members can vote, and each is restricted to one vote per post. The operation ensures strict audit and traceability, referencing both the member and the post they are voting on. The vote type (upvote/downvote) is mandatory, affecting how the post's popularity or engagement is computed. Attempts to vote multiple times on the same post by the same member will be blocked by a unique constraint.","summary":"Create a vote (upvote or downvote) on a specific post (discussion_board_post_votes).","parameters":[],"requestBody":{"description":"Vote creation data including target post, member, and vote type.","typeName":"IDiscussionBoardPostVote.ICreate"},"responseBody":{"description":"The newly created post vote record with details on the vote interaction.","typeName":"IDiscussionBoardPostVote"},"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing post vote (upvote/downvote) record in the discussion_board_post_votes table. It allows a member to change their vote type on a specific post. The path parameter postVoteId identifies the vote to be updated. The system enforces audit and integrity, and updates the vote's type and possibly other metadata, like timestamp. Only the original voter (member) can update their vote on a post. Attempts to modify another member's vote will be forbidden by business logic.","path":"/discussionBoard/member/postVotes/{postVoteId}","method":"put","description":"Update (change upvote/downvote type) or metadata for an existing post vote. This operation is restricted to the vote's owner. The system enforces security by checking member identity, and all changes are tracked for compliance and auditing. Changing a vote impacts post popularity metrics.","summary":"Update an existing vote on a post (discussion_board_post_votes).","parameters":[{"name":"postVoteId","description":"The unique identifier of the post vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated vote information (e.g., is_upvote) for the post vote.","typeName":"IDiscussionBoardPostVote.IUpdate"},"responseBody":{"description":"The updated post vote record reflecting new vote type or metadata.","typeName":"IDiscussionBoardPostVote"},"authorizationRole":"member","name":"update"},{"specification":"Removes a particular vote (upvote/downvote) that a member previously cast on a post. This permanently deletes the vote record from discussion_board_post_votes by unique postVoteId. The operation is only permitted for the vote's owner. This hard delete is enforced by the absence of a soft delete field for votes. The deletion affects associated analytics, removing the member's vote from post popularity scoring.","path":"/discussionBoard/member/postVotes/{postVoteId}","method":"delete","description":"Delete an existing vote record for a post. Only the member who created the vote can remove it; other deletion attempts will be denied. Deletion is permanent and removes the vote from all analytics and future engagement calculations. Allows members to retract their vote.","summary":"Delete an existing post vote record (discussion_board_post_votes).","parameters":[{"name":"postVoteId","description":"The unique identifier of the post vote to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase"},{"specification":"Searches and retrieves a filtered and paginated list of all comment vote records in the discussion_board_comment_votes table. This allows administrators to monitor engagement, detect possible abuse, and analyze voting patterns on comments. The request body provides filtering, sorting, and pagination options to customize the returned results. This endpoint is restricted to admin and moderator roles for abuse monitoring and forensic analysis.","path":"/discussionBoard/admin/commentVotes","method":"patch","description":"Query and retrieve a paginated list of comment votes from the system. Supports advanced filtering by comment, member, upvote/downvote, creation date, and other properties. Pagination enables management of large datasets. This operation is designed for administrative or moderation review, supporting abuse/fraud analysis and engagement reporting. Only authorized admin or moderator users may access raw voting records.","summary":"Search and retrieve a filtered list of comment votes (discussion_board_comment_votes).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination options for comment vote search.","typeName":"IDiscussionBoardCommentVote.IRequest"},"responseBody":{"description":"A paginated list of comment vote records matching search criteria.","typeName":"IPageIDiscussionBoardCommentVote"},"authorizationRole":"admin","name":"search"},{"specification":"Searches and retrieves a filtered and paginated list of all comment vote records in the discussion_board_comment_votes table. This allows administrators to monitor engagement, detect possible abuse, and analyze voting patterns on comments. The request body provides filtering, sorting, and pagination options to customize the returned results. This endpoint is restricted to admin and moderator roles for abuse monitoring and forensic analysis.","path":"/discussionBoard/moderator/commentVotes","method":"patch","description":"Query and retrieve a paginated list of comment votes from the system. Supports advanced filtering by comment, member, upvote/downvote, creation date, and other properties. Pagination enables management of large datasets. This operation is designed for administrative or moderation review, supporting abuse/fraud analysis and engagement reporting. Only authorized admin or moderator users may access raw voting records.","summary":"Search and retrieve a filtered list of comment votes (discussion_board_comment_votes).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination options for comment vote search.","typeName":"IDiscussionBoardCommentVote.IRequest"},"responseBody":{"description":"A paginated list of comment vote records matching search criteria.","typeName":"IPageIDiscussionBoardCommentVote"},"authorizationRole":"moderator","name":"search"},{"specification":"Fetches a single comment vote record by its unique identifier from the discussion_board_comment_votes table. This shows the details of a specific upvote or downvote cast by a member on a comment. Useful for audit, review, or forensic investigation. Access is restricted to admin and moderator roles for policy compliance and privacy protection.","path":"/discussionBoard/admin/commentVotes/{commentVoteId}","method":"get","description":"Retrieve the full data for a specific comment vote, including information about the vote type, member, related comment, and timestamps. Designed for administrative review and audit. Sensitive member/user details are only visible to properly authorized users. This endpoint may also be used for moderation appeal review and traceability analysis.","summary":"Retrieve a specific comment vote by ID (discussion_board_comment_votes).","parameters":[{"name":"commentVoteId","description":"The unique identifier of the comment vote.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The requested comment vote record.","typeName":"IDiscussionBoardCommentVote"},"authorizationRole":"admin","name":"at"},{"specification":"Fetches a single comment vote record by its unique identifier from the discussion_board_comment_votes table. This shows the details of a specific upvote or downvote cast by a member on a comment. Useful for audit, review, or forensic investigation. Access is restricted to admin and moderator roles for policy compliance and privacy protection.","path":"/discussionBoard/moderator/commentVotes/{commentVoteId}","method":"get","description":"Retrieve the full data for a specific comment vote, including information about the vote type, member, related comment, and timestamps. Designed for administrative review and audit. Sensitive member/user details are only visible to properly authorized users. This endpoint may also be used for moderation appeal review and traceability analysis.","summary":"Retrieve a specific comment vote by ID (discussion_board_comment_votes).","parameters":[{"name":"commentVoteId","description":"The unique identifier of the comment vote.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The requested comment vote record.","typeName":"IDiscussionBoardCommentVote"},"authorizationRole":"moderator","name":"at"},{"specification":"Allows a member to cast a new vote (upvote or downvote) on a comment in the discussion board. This operation adds a record to the discussion_board_comment_votes table, tracking which member voted, on which comment, and which direction (up or down). Each member can vote once per comment. Duplicate votes are blocked. The operation is restricted to authenticated members only.","path":"/discussionBoard/member/commentVotes","method":"post","description":"Create a new vote (upvote or downvote) on a comment by a member. Ensures each member may vote only once per comment, and that the type of vote (upvote/downvote) is required. Useful for engagement tracking, fraud detection, and reputation analytics. Voting is fully audited by the system.","summary":"Create a vote on a specific comment (discussion_board_comment_votes).","parameters":[],"requestBody":{"description":"Vote creation input including member, comment, and vote type.","typeName":"IDiscussionBoardCommentVote.ICreate"},"responseBody":{"description":"The new comment vote record after creation.","typeName":"IDiscussionBoardCommentVote"},"authorizationRole":"member","name":"create"},{"specification":"Updates an existing comment vote (upvote/downvote) for a specific comment by the vote's owner. The update is identified by path parameter commentVoteId. The request allows changing the vote type or, if supported, other vote metadata. Updates are restricted to the member who cast the vote and are tracked for audit and analytics. Useful for correcting mistaken votes or changing opinion.","path":"/discussionBoard/member/commentVotes/{commentVoteId}","method":"put","description":"Update an existing comment vote record, including possible change of type (upvote/downvote) or metadata (if any permitted). This operation enforces strict security, so only the creator (member) can update their vote. Updates contribute to comment engagement analytics and abuse tracking.","summary":"Update an existing comment vote (discussion_board_comment_votes).","parameters":[{"name":"commentVoteId","description":"The unique identifier of the comment vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated comment vote information (new vote type, etc.).","typeName":"IDiscussionBoardCommentVote.IUpdate"},"responseBody":{"description":"The updated comment vote record.","typeName":"IDiscussionBoardCommentVote"},"authorizationRole":"member","name":"update"},{"specification":"Removes a member's vote from a particular comment, permanently deleting the record from discussion_board_comment_votes. Only the vote's creator can execute this action, and vote records are hard-deleted (no soft delete indicated in schema). This is used to retract a vote, either upvote or downvote, and adjusts comment engagement metrics accordingly.","path":"/discussionBoard/member/commentVotes/{commentVoteId}","method":"delete","description":"Delete a comment vote (upvote or downvote) record for a specific comment. Only the member who made the vote can erase it. The deletion is permanent, removing the vote from engagement and abuse analytics. All deletions are logged for audit and abuse prevention.","summary":"Delete an existing comment vote record (discussion_board_comment_votes).","parameters":[{"name":"commentVoteId","description":"The unique identifier of the comment vote to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation returns a paginated and filtered list of post abuse report records in the discussion_board_post_reports table. It allows moderators and admins to search and review all reports submitted against posts, analyze report types, and monitor moderation effectiveness. The request body can contain filters by post, member, date range, report reason, status, and pagination/sorting options. Used for compliance oversight and moderation workflow.","path":"/discussionBoard/admin/postReports","method":"patch","description":"Search and retrieve a filtered, paginated list of post reports for abuse, policy violation, or moderation tracking. Enables complex search (by post, reporting member, status, type, etc.) and returns summaries for workflow monitoring. Only admin/moderator roles may retrieve full report data. Reporting patterns and analytics support community trust and operational compliance.","summary":"Search and retrieve post abuse reports (discussion_board_post_reports).","parameters":[],"requestBody":{"description":"Search and filter criteria for finding reports on posts (including pagination).","typeName":"IDiscussionBoardPostReport.IRequest"},"responseBody":{"description":"Paginated list of post report records with filter/sort applied.","typeName":"IPageIDiscussionBoardPostReport"},"authorizationRole":"admin","name":"search"},{"specification":"This operation returns a paginated and filtered list of post abuse report records in the discussion_board_post_reports table. It allows moderators and admins to search and review all reports submitted against posts, analyze report types, and monitor moderation effectiveness. The request body can contain filters by post, member, date range, report reason, status, and pagination/sorting options. Used for compliance oversight and moderation workflow.","path":"/discussionBoard/moderator/postReports","method":"patch","description":"Search and retrieve a filtered, paginated list of post reports for abuse, policy violation, or moderation tracking. Enables complex search (by post, reporting member, status, type, etc.) and returns summaries for workflow monitoring. Only admin/moderator roles may retrieve full report data. Reporting patterns and analytics support community trust and operational compliance.","summary":"Search and retrieve post abuse reports (discussion_board_post_reports).","parameters":[],"requestBody":{"description":"Search and filter criteria for finding reports on posts (including pagination).","typeName":"IDiscussionBoardPostReport.IRequest"},"responseBody":{"description":"Paginated list of post report records with filter/sort applied.","typeName":"IPageIDiscussionBoardPostReport"},"authorizationRole":"moderator","name":"search"},{"specification":"Retrieves detailed information about a specific abuse report submitted against a post, from the discussion_board_post_reports table, as identified by postReportId. Gives admins or moderators the ability to review report status, reporter, reason, moderation outcomes, and all history for that report. Strict access control protects reporter privacy and moderation audit trails.","path":"/discussionBoard/admin/postReports/{postReportId}","method":"get","description":"Fetch a single post report record, showing all details including post, reporting member, reporter, status, resolution, reasons, handler admin, and timestamps. For audit, investigation, and fair moderation. Visible only to roles with sufficient privileges (admin or moderator).","summary":"Get full detail of a specific post report (discussion_board_post_reports).","parameters":[{"name":"postReportId","description":"Unique identifier of the post report to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The post report record with all audit and workflow details.","typeName":"IDiscussionBoardPostReport"},"authorizationRole":"admin","name":"at"},{"specification":"Retrieves detailed information about a specific abuse report submitted against a post, from the discussion_board_post_reports table, as identified by postReportId. Gives admins or moderators the ability to review report status, reporter, reason, moderation outcomes, and all history for that report. Strict access control protects reporter privacy and moderation audit trails.","path":"/discussionBoard/moderator/postReports/{postReportId}","method":"get","description":"Fetch a single post report record, showing all details including post, reporting member, reporter, status, resolution, reasons, handler admin, and timestamps. For audit, investigation, and fair moderation. Visible only to roles with sufficient privileges (admin or moderator).","summary":"Get full detail of a specific post report (discussion_board_post_reports).","parameters":[{"name":"postReportId","description":"Unique identifier of the post report to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The post report record with all audit and workflow details.","typeName":"IDiscussionBoardPostReport"},"authorizationRole":"moderator","name":"at"},{"specification":"Creates a new abuse report against a post. A member may report a post for policy violations or abuse by providing a reason type, optional freeform details, and references to both the post and the reporting member. Each member can report a specific post for a particular reason only once. On submission, the system logs the report in discussion_board_post_reports and notifies moderators/admins. This operation is restricted to authenticated members only, enforcing community self-governance and providing traceability.","path":"/discussionBoard/member/postReports","method":"post","description":"Submit a new abuse report about a specific post. The request must include the reporting member, the target post, a coded reason, and may contain further message text. Multiple reports of the same type by the same member for the same post are not allowed. Moderators and admins are notified for moderation response. Reporting builds the foundation for community governance and abuse prevention analytics.","summary":"Create a new abuse report for a post (discussion_board_post_reports).","parameters":[],"requestBody":{"description":"Abuse report creation data (reporter, post, reason, optional details).","typeName":"IDiscussionBoardPostReport.ICreate"},"responseBody":{"description":"The newly created post report record for audit and moderation.","typeName":"IDiscussionBoardPostReport"},"authorizationRole":"member","name":"create"},{"specification":"Updates the details and resolution of an existing abuse report for a post. The operation addresses a report identified by postReportId, updating outcome (e.g., status, resolution message, handler admin). Moderators or admins use this to mark reports as reviewed, resolved, or to attach investigation notes. Updates are audited in the discussion_board_post_reports table for compliance. Only admin/moderator roles may update reports.","path":"/discussionBoard/admin/postReports/{postReportId}","method":"put","description":"Update the moderation status, resolution details, or handler/admin notes on an abuse report. This is restricted to admin and moderator roles and enables the closure of the report workflow, status changes, and audit-trail recording. Review updates are a core part of transparency and compliance in community governance.","summary":"Update or resolve a post abuse report (discussion_board_post_reports).","parameters":[{"name":"postReportId","description":"The unique identifier of the post report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the post report (status, resolution, handler admin, etc.).","typeName":"IDiscussionBoardPostReport.IUpdate"},"responseBody":{"description":"The updated abuse report record post moderation action.","typeName":"IDiscussionBoardPostReport"},"authorizationRole":"admin","name":"update"},{"specification":"Updates the details and resolution of an existing abuse report for a post. The operation addresses a report identified by postReportId, updating outcome (e.g., status, resolution message, handler admin). Moderators or admins use this to mark reports as reviewed, resolved, or to attach investigation notes. Updates are audited in the discussion_board_post_reports table for compliance. Only admin/moderator roles may update reports.","path":"/discussionBoard/moderator/postReports/{postReportId}","method":"put","description":"Update the moderation status, resolution details, or handler/admin notes on an abuse report. This is restricted to admin and moderator roles and enables the closure of the report workflow, status changes, and audit-trail recording. Review updates are a core part of transparency and compliance in community governance.","summary":"Update or resolve a post abuse report (discussion_board_post_reports).","parameters":[{"name":"postReportId","description":"The unique identifier of the post report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the post report (status, resolution, handler admin, etc.).","typeName":"IDiscussionBoardPostReport.IUpdate"},"responseBody":{"description":"The updated abuse report record post moderation action.","typeName":"IDiscussionBoardPostReport"},"authorizationRole":"moderator","name":"update"},{"specification":"This API operation performs a hard delete (no recovery) of a single post report entity, identified by its unique report ID, from the discussion_board_post_reports table. It is used primarily by administrators or moderators to remove abuse or violation report entries after resolution. The operation enforces full audit trails based on schema temporal fields, and ensures only authorized staff (admin, moderator) can invoke this action. Has effects on moderation analytics but does not affect the actual post's existence or status (handled in other endpoints).","path":"/discussionBoard/admin/postReports/{postReportId}","method":"delete","description":"Delete a specific post report entry. The post report table (discussion_board_post_reports) holds all abuse/violation reports for posts. When an admin or moderator has completed action or wishes to expunge a report, this endpoint removes the record. This operation does not remove the related post or alter its status; only the report log is deleted.\n\nStrict authorization is enforced: only users with admin or moderator roles can delete reports. The operation leaves all audit timestamps and removes the report by setting the deleted_at field. Error cases include not found, unauthorized attempt, or trying to delete a non-terminal report (e.g., pending review).","summary":"Delete a single post report by ID (discussion_board_post_reports).","parameters":[{"name":"postReportId","description":"Unique identifier of the post report to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"admin"},{"specification":"This API operation performs a hard delete (no recovery) of a single post report entity, identified by its unique report ID, from the discussion_board_post_reports table. It is used primarily by administrators or moderators to remove abuse or violation report entries after resolution. The operation enforces full audit trails based on schema temporal fields, and ensures only authorized staff (admin, moderator) can invoke this action. Has effects on moderation analytics but does not affect the actual post's existence or status (handled in other endpoints).","path":"/discussionBoard/moderator/postReports/{postReportId}","method":"delete","description":"Delete a specific post report entry. The post report table (discussion_board_post_reports) holds all abuse/violation reports for posts. When an admin or moderator has completed action or wishes to expunge a report, this endpoint removes the record. This operation does not remove the related post or alter its status; only the report log is deleted.\n\nStrict authorization is enforced: only users with admin or moderator roles can delete reports. The operation leaves all audit timestamps and removes the report by setting the deleted_at field. Error cases include not found, unauthorized attempt, or trying to delete a non-terminal report (e.g., pending review).","summary":"Delete a single post report by ID (discussion_board_post_reports).","parameters":[{"name":"postReportId","description":"Unique identifier of the post report to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"moderator"},{"specification":"This API operation retrieves a paginated list of comment reports matching complex filter, sorting, and pagination options, from the discussion_board_comment_reports table. It supports advanced moderation workflows, allowing administrators and moderators to search reports by status, type, reporter, receiver, or time window. The operation is essential for scalable handling and review of abuse/comment moderation in the discussion board. Returns summary data adequate for list views and analytics dashboards.","path":"/discussionBoard/admin/commentReports","method":"patch","description":"Fetch a filtered, paginated list of comment abuse/violation reports. The discussion_board_comment_reports table logs every report against any user comment (spam, hate, etc.), with status tracking. This endpoint allows admins and moderators to review, triage, and analyze reports efficiently, using search criteria such as reporter, type, creation window, or status.\n\nOnly admin and moderator roles are permitted. Includes all summary fields necessary for bulk review or triage. Supports dashboard analytics, actionable links, and expects integration with follow-up endpoints for detail view or management. Failure cases include insufficient privilege or invalid filter syntax.","summary":"Advanced search and pagination over comment report records (discussion_board_comment_reports).","parameters":[],"requestBody":{"description":"Filter and pagination options for advanced comment report retrieval.","typeName":"IDiscussionBoardCommentReport.IRequest"},"responseBody":{"description":"Paginated summary view of comment report records matching criteria.","typeName":"IPageIDiscussionBoardCommentReport.ISummary"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"This API operation retrieves a paginated list of comment reports matching complex filter, sorting, and pagination options, from the discussion_board_comment_reports table. It supports advanced moderation workflows, allowing administrators and moderators to search reports by status, type, reporter, receiver, or time window. The operation is essential for scalable handling and review of abuse/comment moderation in the discussion board. Returns summary data adequate for list views and analytics dashboards.","path":"/discussionBoard/moderator/commentReports","method":"patch","description":"Fetch a filtered, paginated list of comment abuse/violation reports. The discussion_board_comment_reports table logs every report against any user comment (spam, hate, etc.), with status tracking. This endpoint allows admins and moderators to review, triage, and analyze reports efficiently, using search criteria such as reporter, type, creation window, or status.\n\nOnly admin and moderator roles are permitted. Includes all summary fields necessary for bulk review or triage. Supports dashboard analytics, actionable links, and expects integration with follow-up endpoints for detail view or management. Failure cases include insufficient privilege or invalid filter syntax.","summary":"Advanced search and pagination over comment report records (discussion_board_comment_reports).","parameters":[],"requestBody":{"description":"Filter and pagination options for advanced comment report retrieval.","typeName":"IDiscussionBoardCommentReport.IRequest"},"responseBody":{"description":"Paginated summary view of comment report records matching criteria.","typeName":"IPageIDiscussionBoardCommentReport.ISummary"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"This API operation retrieves detailed information for a single comment report, identified by report ID, as stored in the discussion_board_comment_reports table. It is designed for admin or moderator users to inspect report details (reason, text, status, handler, outcome) before making enforcement or triage decisions. Provides all properties including related comment info, reporter, resolution messages, and audit fields.","path":"/discussionBoard/admin/commentReports/{commentReportId}","method":"get","description":"Get complete details about a single abuse/violation report on a comment. This is for admin and moderator analysts to review the full context, review status, all comments from the reporter and handler, and see audit fields.\n\nAccess is restricted to admin and moderator roles. If the report does not exist, has been deleted, or the user lacks the necessary role, a not found or forbidden error is raised.","summary":"Retrieve a single comment report's details by ID (discussion_board_comment_reports).","parameters":[{"name":"commentReportId","description":"Unique identifier of the comment report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment report record (full fields).","typeName":"IDiscussionBoardCommentReport"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"This API operation retrieves detailed information for a single comment report, identified by report ID, as stored in the discussion_board_comment_reports table. It is designed for admin or moderator users to inspect report details (reason, text, status, handler, outcome) before making enforcement or triage decisions. Provides all properties including related comment info, reporter, resolution messages, and audit fields.","path":"/discussionBoard/moderator/commentReports/{commentReportId}","method":"get","description":"Get complete details about a single abuse/violation report on a comment. This is for admin and moderator analysts to review the full context, review status, all comments from the reporter and handler, and see audit fields.\n\nAccess is restricted to admin and moderator roles. If the report does not exist, has been deleted, or the user lacks the necessary role, a not found or forbidden error is raised.","summary":"Retrieve a single comment report's details by ID (discussion_board_comment_reports).","parameters":[{"name":"commentReportId","description":"Unique identifier of the comment report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment report record (full fields).","typeName":"IDiscussionBoardCommentReport"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"This API operation creates a new abuse report for a specific comment as a member, storing it in the discussion_board_comment_reports table. Members submit a reason type and text, which are validated, and the action enforces per-member daily/report-item limits. Moderators and admins may also programmatically create reports for workflow/test/exception cases. The report is initialized with a default status of 'pending' and timestamped. Abuse of this endpoint (excess frequency, invalid targets) is prevented by business rules.","path":"/discussionBoard/member/commentReports","method":"post","description":"Submit a new abuse/violation report on a comment. Members report problematic comments by specifying reason type and optional text. The API checks for report duplication (one report per comment per member), enforces limits and validity, and stores the new record.\n\nInitial status is set to 'pending'. On creation, the operation triggers notification(s) to moderators for handling. Error cases include not found comment, user sanction or daily limit exceeded, or duplicate report determination. Admins or moderators may create reports using their privilege for workflow purposes.","summary":"Create a new report for a specific comment (discussion_board_comment_reports).","parameters":[],"requestBody":{"description":"Payload for creating a new comment report entry.","typeName":"IDiscussionBoardCommentReport.ICreate"},"responseBody":{"description":"Created comment report full entity.","typeName":"IDiscussionBoardCommentReport"},"authorizationRoles":["member","admin","moderator"],"name":"create","authorizationRole":"member"},{"specification":"This API operation creates a new abuse report for a specific comment as a member, storing it in the discussion_board_comment_reports table. Members submit a reason type and text, which are validated, and the action enforces per-member daily/report-item limits. Moderators and admins may also programmatically create reports for workflow/test/exception cases. The report is initialized with a default status of 'pending' and timestamped. Abuse of this endpoint (excess frequency, invalid targets) is prevented by business rules.","path":"/discussionBoard/admin/commentReports","method":"post","description":"Submit a new abuse/violation report on a comment. Members report problematic comments by specifying reason type and optional text. The API checks for report duplication (one report per comment per member), enforces limits and validity, and stores the new record.\n\nInitial status is set to 'pending'. On creation, the operation triggers notification(s) to moderators for handling. Error cases include not found comment, user sanction or daily limit exceeded, or duplicate report determination. Admins or moderators may create reports using their privilege for workflow purposes.","summary":"Create a new report for a specific comment (discussion_board_comment_reports).","parameters":[],"requestBody":{"description":"Payload for creating a new comment report entry.","typeName":"IDiscussionBoardCommentReport.ICreate"},"responseBody":{"description":"Created comment report full entity.","typeName":"IDiscussionBoardCommentReport"},"authorizationRoles":["member","admin","moderator"],"name":"create","authorizationRole":"admin"},{"specification":"This API operation creates a new abuse report for a specific comment as a member, storing it in the discussion_board_comment_reports table. Members submit a reason type and text, which are validated, and the action enforces per-member daily/report-item limits. Moderators and admins may also programmatically create reports for workflow/test/exception cases. The report is initialized with a default status of 'pending' and timestamped. Abuse of this endpoint (excess frequency, invalid targets) is prevented by business rules.","path":"/discussionBoard/moderator/commentReports","method":"post","description":"Submit a new abuse/violation report on a comment. Members report problematic comments by specifying reason type and optional text. The API checks for report duplication (one report per comment per member), enforces limits and validity, and stores the new record.\n\nInitial status is set to 'pending'. On creation, the operation triggers notification(s) to moderators for handling. Error cases include not found comment, user sanction or daily limit exceeded, or duplicate report determination. Admins or moderators may create reports using their privilege for workflow purposes.","summary":"Create a new report for a specific comment (discussion_board_comment_reports).","parameters":[],"requestBody":{"description":"Payload for creating a new comment report entry.","typeName":"IDiscussionBoardCommentReport.ICreate"},"responseBody":{"description":"Created comment report full entity.","typeName":"IDiscussionBoardCommentReport"},"authorizationRoles":["member","admin","moderator"],"name":"create","authorizationRole":"moderator"},{"specification":"This API operation updates (partially or fully) an existing comment report record, identified by report ID, in the discussion_board_comment_reports table. Used by admin or moderator users undergoing report review and triage, including updating the review status (e.g., in_review, action_taken, rejected), adding/modifying resolution notes, and tracking handler assignment. All change events update the audit fields for traceability. Update is forbidden for terminal reports (e.g., deleted or already final), as enforced by schema logic.","path":"/discussionBoard/admin/commentReports/{commentReportId}","method":"put","description":"Update information for a specific comment report—generally used by admin or moderator during moderation review and handling.\n\nCommon update actions include changing status (pending→in_review→action_taken→rejected), adding or modifying resolution messaging, and assigning handler information. All field changes are captured in audit timestamps. This endpoint rejects updates on already-deleted or resolved reports. Only admin and moderator have access.","summary":"Edit an existing comment report record (discussion_board_comment_reports).","parameters":[{"name":"commentReportId","description":"Unique identifier of the comment report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating report entity fields and status.","typeName":"IDiscussionBoardCommentReport.IUpdate"},"responseBody":{"description":"The updated comment report record after modification.","typeName":"IDiscussionBoardCommentReport"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"This API operation updates (partially or fully) an existing comment report record, identified by report ID, in the discussion_board_comment_reports table. Used by admin or moderator users undergoing report review and triage, including updating the review status (e.g., in_review, action_taken, rejected), adding/modifying resolution notes, and tracking handler assignment. All change events update the audit fields for traceability. Update is forbidden for terminal reports (e.g., deleted or already final), as enforced by schema logic.","path":"/discussionBoard/moderator/commentReports/{commentReportId}","method":"put","description":"Update information for a specific comment report—generally used by admin or moderator during moderation review and handling.\n\nCommon update actions include changing status (pending→in_review→action_taken→rejected), adding or modifying resolution messaging, and assigning handler information. All field changes are captured in audit timestamps. This endpoint rejects updates on already-deleted or resolved reports. Only admin and moderator have access.","summary":"Edit an existing comment report record (discussion_board_comment_reports).","parameters":[{"name":"commentReportId","description":"Unique identifier of the comment report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating report entity fields and status.","typeName":"IDiscussionBoardCommentReport.IUpdate"},"responseBody":{"description":"The updated comment report record after modification.","typeName":"IDiscussionBoardCommentReport"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"This API operation performs a hard delete (no recovery) of a single comment report record, identified by its ID, in the discussion_board_comment_reports table. Only admin or moderator accounts are allowed to delete reports, typically used after review completion or for data management/audit reasons. Operation updates the deleted_at timestamp (soft delete for compliance) and does not affect the underlying comment or its state.","path":"/discussionBoard/admin/commentReports/{commentReportId}","method":"delete","description":"Delete a specific comment report record from the system. Used by admin or moderator post-review, or when expunging resolved/obsolete reports from the moderation audit trail.\n\nThis action only affects the comment report log, leaving the comment itself and related votes unaffected. Audit and compliance fields are updated per schema. Only admin and moderator roles permitted. Attempts to delete an already-removed or non-existent report result in a not found error.","summary":"Delete a comment report record by ID (discussion_board_comment_reports).","parameters":[{"name":"commentReportId","description":"Unique identifier of the comment report to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"admin"},{"specification":"This API operation performs a hard delete (no recovery) of a single comment report record, identified by its ID, in the discussion_board_comment_reports table. Only admin or moderator accounts are allowed to delete reports, typically used after review completion or for data management/audit reasons. Operation updates the deleted_at timestamp (soft delete for compliance) and does not affect the underlying comment or its state.","path":"/discussionBoard/moderator/commentReports/{commentReportId}","method":"delete","description":"Delete a specific comment report record from the system. Used by admin or moderator post-review, or when expunging resolved/obsolete reports from the moderation audit trail.\n\nThis action only affects the comment report log, leaving the comment itself and related votes unaffected. Audit and compliance fields are updated per schema. Only admin and moderator roles permitted. Attempts to delete an already-removed or non-existent report result in a not found error.","summary":"Delete a comment report record by ID (discussion_board_comment_reports).","parameters":[{"name":"commentReportId","description":"Unique identifier of the comment report to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"moderator"},{"specification":"This API operation retrieves a paginated, filtered list of user sanction/disciplinary records from the discussion_board_user_sanctions table. Used by admin or moderator staff for compliance, audit, user monitoring, and enforcement review. Supports search by sanctioned user, admin, type, level, status, and time window. Returns summary info for dashboards and disciplinary analytics.","path":"/discussionBoard/admin/userSanctions","method":"patch","description":"Fetch a list of user sanction records (warnings, suspensions, permanent bans, etc.) along with search and filter options. The discussion_board_user_sanctions table contains all disciplinary actions. This endpoint provides scalable review and analytics for moderation or admin teams, and supports dashboards reporting.\n\nOnly accessible to admin and moderator users. Summary-level info only (not all legal/audit details). For viewing specific sanction details, use the relevant GET endpoint.","summary":"Search, filter, and paginate user sanction/disciplinary records (discussion_board_user_sanctions).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination options for sanction review.","typeName":"IDiscussionBoardUserSanction.IRequest"},"responseBody":{"description":"Paginated summary of user sanction records matching criteria.","typeName":"IPageIDiscussionBoardUserSanction.ISummary"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"This API operation retrieves a paginated, filtered list of user sanction/disciplinary records from the discussion_board_user_sanctions table. Used by admin or moderator staff for compliance, audit, user monitoring, and enforcement review. Supports search by sanctioned user, admin, type, level, status, and time window. Returns summary info for dashboards and disciplinary analytics.","path":"/discussionBoard/moderator/userSanctions","method":"patch","description":"Fetch a list of user sanction records (warnings, suspensions, permanent bans, etc.) along with search and filter options. The discussion_board_user_sanctions table contains all disciplinary actions. This endpoint provides scalable review and analytics for moderation or admin teams, and supports dashboards reporting.\n\nOnly accessible to admin and moderator users. Summary-level info only (not all legal/audit details). For viewing specific sanction details, use the relevant GET endpoint.","summary":"Search, filter, and paginate user sanction/disciplinary records (discussion_board_user_sanctions).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination options for sanction review.","typeName":"IDiscussionBoardUserSanction.IRequest"},"responseBody":{"description":"Paginated summary of user sanction records matching criteria.","typeName":"IPageIDiscussionBoardUserSanction.ISummary"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"This API operation fetches full information for a single user sanction record, as defined in the discussion_board_user_sanctions table, identified by its unique record ID. Returns all legal/compliance/audit fields for display, management, or downstream integration. Used by admins and moderators for compliance, appeals processing, and user management.","path":"/discussionBoard/admin/userSanctions/{userSanctionId}","method":"get","description":"Get the full details for a user sanction/disciplinary record in the system. Used by admin or moderator roles for compliance review, handling user appeals, or as part of enforcement workflows.\n\nOperation fetches all legal, timeline, and audit data. Error conditions: not found, unauthorized role, or record withdrawn/deleted.","summary":"Fetch a specific user sanction/disciplinary record by ID (discussion_board_user_sanctions).","parameters":[{"name":"userSanctionId","description":"Unique identifier for the user sanction record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed sanction/disciplinary entity including audit/legal fields.","typeName":"IDiscussionBoardUserSanction"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"This API operation fetches full information for a single user sanction record, as defined in the discussion_board_user_sanctions table, identified by its unique record ID. Returns all legal/compliance/audit fields for display, management, or downstream integration. Used by admins and moderators for compliance, appeals processing, and user management.","path":"/discussionBoard/moderator/userSanctions/{userSanctionId}","method":"get","description":"Get the full details for a user sanction/disciplinary record in the system. Used by admin or moderator roles for compliance review, handling user appeals, or as part of enforcement workflows.\n\nOperation fetches all legal, timeline, and audit data. Error conditions: not found, unauthorized role, or record withdrawn/deleted.","summary":"Fetch a specific user sanction/disciplinary record by ID (discussion_board_user_sanctions).","parameters":[{"name":"userSanctionId","description":"Unique identifier for the user sanction record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed sanction/disciplinary entity including audit/legal fields.","typeName":"IDiscussionBoardUserSanction"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"This API operation adds a new user sanction record to the discussion_board_user_sanctions table. Used for warnings, temporary or permanent bans, and other penalties. Admin or moderator roles specify sanctioned user, type, level, timeline, and justification. The endpoint enforces schema policy for unique active sanctions and required fields. Upon creating a sanction, notifications to relevant parties (user, admin log) are triggered by downstream systems.","path":"/discussionBoard/admin/userSanctions","method":"post","description":"Create a new sanction or disciplinary action for a member. Typically performed by admin or moderator for policy infractions. The request body must define the sanctioned member, sanction type, level, timing, and reason.\n\nUnique active sanction constraint is enforced (no duplicate active sanctions for a user/type). Upon success, triggers compliance notifications. Error scenarios include user not found, invalid type, or trying to re-sanction an already-banned user.","summary":"Create/add a new user sanction record (discussion_board_user_sanctions).","parameters":[],"requestBody":{"description":"Payload describing the sanctioned user, type, and rationale.","typeName":"IDiscussionBoardUserSanction.ICreate"},"responseBody":{"description":"The newly created sanction record as stored.","typeName":"IDiscussionBoardUserSanction"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"admin"},{"specification":"This API operation adds a new user sanction record to the discussion_board_user_sanctions table. Used for warnings, temporary or permanent bans, and other penalties. Admin or moderator roles specify sanctioned user, type, level, timeline, and justification. The endpoint enforces schema policy for unique active sanctions and required fields. Upon creating a sanction, notifications to relevant parties (user, admin log) are triggered by downstream systems.","path":"/discussionBoard/moderator/userSanctions","method":"post","description":"Create a new sanction or disciplinary action for a member. Typically performed by admin or moderator for policy infractions. The request body must define the sanctioned member, sanction type, level, timing, and reason.\n\nUnique active sanction constraint is enforced (no duplicate active sanctions for a user/type). Upon success, triggers compliance notifications. Error scenarios include user not found, invalid type, or trying to re-sanction an already-banned user.","summary":"Create/add a new user sanction record (discussion_board_user_sanctions).","parameters":[],"requestBody":{"description":"Payload describing the sanctioned user, type, and rationale.","typeName":"IDiscussionBoardUserSanction.ICreate"},"responseBody":{"description":"The newly created sanction record as stored.","typeName":"IDiscussionBoardUserSanction"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"moderator"},{"specification":"This API operation updates an existing user sanction record, referenced by its ID, in the discussion_board_user_sanctions table. Used by admin or moderator roles to change sanction status, edit reason, modify period, or terminate early. All changes are audit-trailed and legal consistency is enforced by schema validation. Not allowed if the sanction is inactive or deleted.","path":"/discussionBoard/admin/userSanctions/{userSanctionId}","method":"put","description":"Update a specific user sanction/disciplinary record. Used primarily by admin or moderator during enforcement, appeal handling, or retroactive adjustment.\n\nSupported updates: status, notes, level, term change, early termination. Edits and their auditing are governed by strict business rules. If the record is not found, has already expired, or the requester is unauthorized, the update fails.","summary":"Update an existing user sanction record by ID (discussion_board_user_sanctions).","parameters":[{"name":"userSanctionId","description":"Unique identifier of the sanction record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields and sanction status for this record.","typeName":"IDiscussionBoardUserSanction.IUpdate"},"responseBody":{"description":"The updated user sanction record after changes applied.","typeName":"IDiscussionBoardUserSanction"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"This API operation updates an existing user sanction record, referenced by its ID, in the discussion_board_user_sanctions table. Used by admin or moderator roles to change sanction status, edit reason, modify period, or terminate early. All changes are audit-trailed and legal consistency is enforced by schema validation. Not allowed if the sanction is inactive or deleted.","path":"/discussionBoard/moderator/userSanctions/{userSanctionId}","method":"put","description":"Update a specific user sanction/disciplinary record. Used primarily by admin or moderator during enforcement, appeal handling, or retroactive adjustment.\n\nSupported updates: status, notes, level, term change, early termination. Edits and their auditing are governed by strict business rules. If the record is not found, has already expired, or the requester is unauthorized, the update fails.","summary":"Update an existing user sanction record by ID (discussion_board_user_sanctions).","parameters":[{"name":"userSanctionId","description":"Unique identifier of the sanction record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields and sanction status for this record.","typeName":"IDiscussionBoardUserSanction.IUpdate"},"responseBody":{"description":"The updated user sanction record after changes applied.","typeName":"IDiscussionBoardUserSanction"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"This API operation deletes a user sanction record completely (hard delete) from the discussion_board_user_sanctions table. Typically performed for audit closure, data retention management, or after successful appeal. Only accessible to admin or moderator users. Once removed, the sanction is no longer shown in compliance dashboards but remains traceable in overall audit logs. The affected user's status is recalculated by downstream enforcement logic.","path":"/discussionBoard/admin/userSanctions/{userSanctionId}","method":"delete","description":"Delete a sanction or disciplinary record for a user. Used by admin or moderator roles post-resolution, for appeal closure, or when removing obsolete/erroneous entries from the formal sanction record.\n\nRemoves the entry from all active dashboards and search views (hard delete from main table), but leaves audit trace as appropriate by downstream logs. Unauthorized deletion, missing record, or violation of retention policy will trigger errors.","summary":"Remove/delete a user sanction record by ID (discussion_board_user_sanctions).","parameters":[{"name":"userSanctionId","description":"Unique identifier of the sanction record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"admin"},{"specification":"This API operation deletes a user sanction record completely (hard delete) from the discussion_board_user_sanctions table. Typically performed for audit closure, data retention management, or after successful appeal. Only accessible to admin or moderator users. Once removed, the sanction is no longer shown in compliance dashboards but remains traceable in overall audit logs. The affected user's status is recalculated by downstream enforcement logic.","path":"/discussionBoard/moderator/userSanctions/{userSanctionId}","method":"delete","description":"Delete a sanction or disciplinary record for a user. Used by admin or moderator roles post-resolution, for appeal closure, or when removing obsolete/erroneous entries from the formal sanction record.\n\nRemoves the entry from all active dashboards and search views (hard delete from main table), but leaves audit trace as appropriate by downstream logs. Unauthorized deletion, missing record, or violation of retention policy will trigger errors.","summary":"Remove/delete a user sanction record by ID (discussion_board_user_sanctions).","parameters":[{"name":"userSanctionId","description":"Unique identifier of the sanction record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"moderator"},{"specification":"This API operation returns a paginated, filtered, and sorted list of notification events for admin, moderator, member, or guest users, as managed in the discussion_board_notifications table. Allows inbox/workflow/event review to all authorized user types, applying appropriate visibility rules and audit policies. List view only—detail access and global notification management are separate endpoints. Filtering by event type, recipient, unread state, or time is supported. Used for user notification centers, moderation dashboards, or admin system monitoring.","path":"/discussionBoard/admin/notifications","method":"patch","description":"Search, filter, and paginate notifications relevant to the logged-in user. The discussion_board_notifications table is used for all notification events: post activity, moderation, sanctions, community news, and more. This endpoint supports role-driven filtering and visibility, respecting user type (member, moderator, admin, guest) and unread states.\n\nEach returned record includes summary presentation fields, relevant audit and routing metadata. Used for notification center UIs and admin/moderator dashboards. Errors include unauthorized access, invalid filter, or insufficient privilege for global/system notifications.","summary":"Search and list notification events with filtering and pagination (discussion_board_notifications).","parameters":[],"requestBody":{"description":"Filter, search, and pagination config for notification search.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summary entities matching filter/search.","typeName":"IPageIDiscussionBoardNotification.ISummary"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"admin"},{"specification":"This API operation returns a paginated, filtered, and sorted list of notification events for admin, moderator, member, or guest users, as managed in the discussion_board_notifications table. Allows inbox/workflow/event review to all authorized user types, applying appropriate visibility rules and audit policies. List view only—detail access and global notification management are separate endpoints. Filtering by event type, recipient, unread state, or time is supported. Used for user notification centers, moderation dashboards, or admin system monitoring.","path":"/discussionBoard/moderator/notifications","method":"patch","description":"Search, filter, and paginate notifications relevant to the logged-in user. The discussion_board_notifications table is used for all notification events: post activity, moderation, sanctions, community news, and more. This endpoint supports role-driven filtering and visibility, respecting user type (member, moderator, admin, guest) and unread states.\n\nEach returned record includes summary presentation fields, relevant audit and routing metadata. Used for notification center UIs and admin/moderator dashboards. Errors include unauthorized access, invalid filter, or insufficient privilege for global/system notifications.","summary":"Search and list notification events with filtering and pagination (discussion_board_notifications).","parameters":[],"requestBody":{"description":"Filter, search, and pagination config for notification search.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summary entities matching filter/search.","typeName":"IPageIDiscussionBoardNotification.ISummary"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"moderator"},{"specification":"This API operation returns a paginated, filtered, and sorted list of notification events for admin, moderator, member, or guest users, as managed in the discussion_board_notifications table. Allows inbox/workflow/event review to all authorized user types, applying appropriate visibility rules and audit policies. List view only—detail access and global notification management are separate endpoints. Filtering by event type, recipient, unread state, or time is supported. Used for user notification centers, moderation dashboards, or admin system monitoring.","path":"/discussionBoard/member/notifications","method":"patch","description":"Search, filter, and paginate notifications relevant to the logged-in user. The discussion_board_notifications table is used for all notification events: post activity, moderation, sanctions, community news, and more. This endpoint supports role-driven filtering and visibility, respecting user type (member, moderator, admin, guest) and unread states.\n\nEach returned record includes summary presentation fields, relevant audit and routing metadata. Used for notification center UIs and admin/moderator dashboards. Errors include unauthorized access, invalid filter, or insufficient privilege for global/system notifications.","summary":"Search and list notification events with filtering and pagination (discussion_board_notifications).","parameters":[],"requestBody":{"description":"Filter, search, and pagination config for notification search.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summary entities matching filter/search.","typeName":"IPageIDiscussionBoardNotification.ISummary"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"member"},{"specification":"This API operation returns a paginated, filtered, and sorted list of notification events for admin, moderator, member, or guest users, as managed in the discussion_board_notifications table. Allows inbox/workflow/event review to all authorized user types, applying appropriate visibility rules and audit policies. List view only—detail access and global notification management are separate endpoints. Filtering by event type, recipient, unread state, or time is supported. Used for user notification centers, moderation dashboards, or admin system monitoring.","path":"/discussionBoard/guest/notifications","method":"patch","description":"Search, filter, and paginate notifications relevant to the logged-in user. The discussion_board_notifications table is used for all notification events: post activity, moderation, sanctions, community news, and more. This endpoint supports role-driven filtering and visibility, respecting user type (member, moderator, admin, guest) and unread states.\n\nEach returned record includes summary presentation fields, relevant audit and routing metadata. Used for notification center UIs and admin/moderator dashboards. Errors include unauthorized access, invalid filter, or insufficient privilege for global/system notifications.","summary":"Search and list notification events with filtering and pagination (discussion_board_notifications).","parameters":[],"requestBody":{"description":"Filter, search, and pagination config for notification search.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summary entities matching filter/search.","typeName":"IPageIDiscussionBoardNotification.ISummary"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"guest"},{"specification":"Retrieve detailed information on a specific notification event within the political/economic discussion board. This operation fetches all fields from the IDiscussionBoardNotification entity, using the unique notificationId as a path parameter. Typically used to display the full notification detail and routing context (member/admin/moderator/guest recipient, event linkage, unread state, timestamps, and any associated workflow references) to the authenticated requestor. The data strictly mirrors the discussion_board_notifications schema, including nullable entity linkage and exact status.\n\nSecurity note: Only recipients of the notification or platform admins may retrieve a given notification. Authorization logic should enforce access only by the relevant member, moderator, admin, or guest referenced in the notification's recipient columns. Retrieval does not mark the notification as read.\n\nIf notificationId corresponds to a deleted or inaccessible notification, a 404 error is returned. Relationships to related entities (e.g. post/comment/report) are delivered as UUID references. Requestors must have active session with role matching the recipient type (member/moderator/admin/guest).\n\nThis endpoint should be used in conjunction with paginated listing or search of notifications for advanced notification center workflows.","path":"/discussionBoard/member/notifications/{notificationId}","method":"get","description":"Fetches all available metadata and content of a single notification (by its primary ID) from the discussion_board_notifications table. Returns all columns from the entity, including title, body, event_type, unread status, recipient linkage (which may be member, moderator, admin, or guest), and timestamps for creation and update.\n\nAccess is strictly limited to the recipient user’s session (determined by JWT role and recipient column), or admins for audit/support. No data is revealed about notifications where the requestor is not the intended recipient.\n\nIf notificationId points to a soft-deleted notification, an error is returned instead of the entity. All lookups and enforcement rules are derived from the DB schema.\n\nStandard error handling applies (404 for not found, 403 for unauthorized). This operation is closely related to notification list/search endpoints for mailbox or event notification display flows.","summary":"Get full metadata and content for a discussion board notification by ID (discussion_board_notifications)","parameters":[{"name":"notificationId","description":"UUID of the notification event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full notification detail matching the primary key, as per IDiscussionBoardNotification schema.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member","moderator","admin","guest"],"name":"at","authorizationRole":"member"},{"specification":"Retrieve detailed information on a specific notification event within the political/economic discussion board. This operation fetches all fields from the IDiscussionBoardNotification entity, using the unique notificationId as a path parameter. Typically used to display the full notification detail and routing context (member/admin/moderator/guest recipient, event linkage, unread state, timestamps, and any associated workflow references) to the authenticated requestor. The data strictly mirrors the discussion_board_notifications schema, including nullable entity linkage and exact status.\n\nSecurity note: Only recipients of the notification or platform admins may retrieve a given notification. Authorization logic should enforce access only by the relevant member, moderator, admin, or guest referenced in the notification's recipient columns. Retrieval does not mark the notification as read.\n\nIf notificationId corresponds to a deleted or inaccessible notification, a 404 error is returned. Relationships to related entities (e.g. post/comment/report) are delivered as UUID references. Requestors must have active session with role matching the recipient type (member/moderator/admin/guest).\n\nThis endpoint should be used in conjunction with paginated listing or search of notifications for advanced notification center workflows.","path":"/discussionBoard/moderator/notifications/{notificationId}","method":"get","description":"Fetches all available metadata and content of a single notification (by its primary ID) from the discussion_board_notifications table. Returns all columns from the entity, including title, body, event_type, unread status, recipient linkage (which may be member, moderator, admin, or guest), and timestamps for creation and update.\n\nAccess is strictly limited to the recipient user’s session (determined by JWT role and recipient column), or admins for audit/support. No data is revealed about notifications where the requestor is not the intended recipient.\n\nIf notificationId points to a soft-deleted notification, an error is returned instead of the entity. All lookups and enforcement rules are derived from the DB schema.\n\nStandard error handling applies (404 for not found, 403 for unauthorized). This operation is closely related to notification list/search endpoints for mailbox or event notification display flows.","summary":"Get full metadata and content for a discussion board notification by ID (discussion_board_notifications)","parameters":[{"name":"notificationId","description":"UUID of the notification event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full notification detail matching the primary key, as per IDiscussionBoardNotification schema.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member","moderator","admin","guest"],"name":"at","authorizationRole":"moderator"},{"specification":"Retrieve detailed information on a specific notification event within the political/economic discussion board. This operation fetches all fields from the IDiscussionBoardNotification entity, using the unique notificationId as a path parameter. Typically used to display the full notification detail and routing context (member/admin/moderator/guest recipient, event linkage, unread state, timestamps, and any associated workflow references) to the authenticated requestor. The data strictly mirrors the discussion_board_notifications schema, including nullable entity linkage and exact status.\n\nSecurity note: Only recipients of the notification or platform admins may retrieve a given notification. Authorization logic should enforce access only by the relevant member, moderator, admin, or guest referenced in the notification's recipient columns. Retrieval does not mark the notification as read.\n\nIf notificationId corresponds to a deleted or inaccessible notification, a 404 error is returned. Relationships to related entities (e.g. post/comment/report) are delivered as UUID references. Requestors must have active session with role matching the recipient type (member/moderator/admin/guest).\n\nThis endpoint should be used in conjunction with paginated listing or search of notifications for advanced notification center workflows.","path":"/discussionBoard/admin/notifications/{notificationId}","method":"get","description":"Fetches all available metadata and content of a single notification (by its primary ID) from the discussion_board_notifications table. Returns all columns from the entity, including title, body, event_type, unread status, recipient linkage (which may be member, moderator, admin, or guest), and timestamps for creation and update.\n\nAccess is strictly limited to the recipient user’s session (determined by JWT role and recipient column), or admins for audit/support. No data is revealed about notifications where the requestor is not the intended recipient.\n\nIf notificationId points to a soft-deleted notification, an error is returned instead of the entity. All lookups and enforcement rules are derived from the DB schema.\n\nStandard error handling applies (404 for not found, 403 for unauthorized). This operation is closely related to notification list/search endpoints for mailbox or event notification display flows.","summary":"Get full metadata and content for a discussion board notification by ID (discussion_board_notifications)","parameters":[{"name":"notificationId","description":"UUID of the notification event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full notification detail matching the primary key, as per IDiscussionBoardNotification schema.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member","moderator","admin","guest"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieve detailed information on a specific notification event within the political/economic discussion board. This operation fetches all fields from the IDiscussionBoardNotification entity, using the unique notificationId as a path parameter. Typically used to display the full notification detail and routing context (member/admin/moderator/guest recipient, event linkage, unread state, timestamps, and any associated workflow references) to the authenticated requestor. The data strictly mirrors the discussion_board_notifications schema, including nullable entity linkage and exact status.\n\nSecurity note: Only recipients of the notification or platform admins may retrieve a given notification. Authorization logic should enforce access only by the relevant member, moderator, admin, or guest referenced in the notification's recipient columns. Retrieval does not mark the notification as read.\n\nIf notificationId corresponds to a deleted or inaccessible notification, a 404 error is returned. Relationships to related entities (e.g. post/comment/report) are delivered as UUID references. Requestors must have active session with role matching the recipient type (member/moderator/admin/guest).\n\nThis endpoint should be used in conjunction with paginated listing or search of notifications for advanced notification center workflows.","path":"/discussionBoard/guest/notifications/{notificationId}","method":"get","description":"Fetches all available metadata and content of a single notification (by its primary ID) from the discussion_board_notifications table. Returns all columns from the entity, including title, body, event_type, unread status, recipient linkage (which may be member, moderator, admin, or guest), and timestamps for creation and update.\n\nAccess is strictly limited to the recipient user’s session (determined by JWT role and recipient column), or admins for audit/support. No data is revealed about notifications where the requestor is not the intended recipient.\n\nIf notificationId points to a soft-deleted notification, an error is returned instead of the entity. All lookups and enforcement rules are derived from the DB schema.\n\nStandard error handling applies (404 for not found, 403 for unauthorized). This operation is closely related to notification list/search endpoints for mailbox or event notification display flows.","summary":"Get full metadata and content for a discussion board notification by ID (discussion_board_notifications)","parameters":[{"name":"notificationId","description":"UUID of the notification event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full notification detail matching the primary key, as per IDiscussionBoardNotification schema.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["member","moderator","admin","guest"],"name":"at","authorizationRole":"guest"},{"specification":"Create a new notification event record in the discussion board system, storing content, event linkage, and intended recipient (member, moderator, admin, or guest, per DB schema). This operation inserts a row in the discussion_board_notifications table using the request data mapped to the IDiscussionBoardNotification.ICreate DTO.\n\nBusiness use cases include workflow-driven notification triggers (e.g. on comment, report, post status, sanction, or system event). The operation supports setting title, body, event type, recipient, and optionally, entity linkage (by UUID and type) and unread status (default true at creation). Only platform business logic (not end-users) should invoke this endpoint—typically called by system or privileged code as part of a workflow or event handler. Audit fields populated automatically.\n\nIf input references an invalid user/customer/recipient or foreign key, validation fails. Supports only one recipient type per notification row (recipient member, moderator, admin, or guest, not multiple).","path":"/discussionBoard/admin/notifications","method":"post","description":"Creates a new notification in the discussion_board_notifications table for the specified recipient type (member/moderator/admin/guest) and event context. Fields map to the DB model: title, body, event_type, related_entity ID/type, and recipient foreign key. System logic ensures only one recipient column is set per notification, and event_type strings are validated per application domain rules.\n\nStandard creation workflow: input is validated, required fields must be present (title, body, event_type, recipient), and the entity is inserted with unread flag set true. Timestamps and audit tracking handled by the system. Foreign key integrity and recipient role enforcement applied.\n\nErrors arise on missing/invalid recipient or entity linkage; also ensures the caller has rights to create notification for target role. Designed for system or admin/moderator-initiated notifications, not for arbitrary user-issued alerts.","summary":"Create a new notification event in the discussion_board_notifications table","parameters":[],"requestBody":{"description":"Notification creation data (recipient, event, content, linkage), per IDiscussionBoardNotification.ICreate schema.","typeName":"IDiscussionBoardNotification.ICreate"},"responseBody":{"description":"Created notification object, as per IDiscussionBoardNotification schema.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"admin"},{"specification":"Create a new notification event record in the discussion board system, storing content, event linkage, and intended recipient (member, moderator, admin, or guest, per DB schema). This operation inserts a row in the discussion_board_notifications table using the request data mapped to the IDiscussionBoardNotification.ICreate DTO.\n\nBusiness use cases include workflow-driven notification triggers (e.g. on comment, report, post status, sanction, or system event). The operation supports setting title, body, event type, recipient, and optionally, entity linkage (by UUID and type) and unread status (default true at creation). Only platform business logic (not end-users) should invoke this endpoint—typically called by system or privileged code as part of a workflow or event handler. Audit fields populated automatically.\n\nIf input references an invalid user/customer/recipient or foreign key, validation fails. Supports only one recipient type per notification row (recipient member, moderator, admin, or guest, not multiple).","path":"/discussionBoard/moderator/notifications","method":"post","description":"Creates a new notification in the discussion_board_notifications table for the specified recipient type (member/moderator/admin/guest) and event context. Fields map to the DB model: title, body, event_type, related_entity ID/type, and recipient foreign key. System logic ensures only one recipient column is set per notification, and event_type strings are validated per application domain rules.\n\nStandard creation workflow: input is validated, required fields must be present (title, body, event_type, recipient), and the entity is inserted with unread flag set true. Timestamps and audit tracking handled by the system. Foreign key integrity and recipient role enforcement applied.\n\nErrors arise on missing/invalid recipient or entity linkage; also ensures the caller has rights to create notification for target role. Designed for system or admin/moderator-initiated notifications, not for arbitrary user-issued alerts.","summary":"Create a new notification event in the discussion_board_notifications table","parameters":[],"requestBody":{"description":"Notification creation data (recipient, event, content, linkage), per IDiscussionBoardNotification.ICreate schema.","typeName":"IDiscussionBoardNotification.ICreate"},"responseBody":{"description":"Created notification object, as per IDiscussionBoardNotification schema.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"moderator"},{"specification":"Update the fields and metadata of a notification event in the discussion_board_notifications table, identified by notificationId in path. This operation supports updating the title, body, event type, recipient linkage, unread state, or related entity references (for example, for status change, correction or event context changes) using the IDiscussionBoardNotification.IUpdate DTO.\n\nPermission enforcement ensures that only platform admins or the original system process that issued the notification may update notifications. Typically used for notification correction, unread/read toggling (for business-driven changes rather than user-side read), or for workflow-driven status updates. Fields not provided in the request are left unchanged. Success returns the updated notification. All updates are subject to database audit and field-level data validation. Hard/soft deletes use a separate endpoint.\n\nRequest will fail if the notification does not exist, is deleted, or the update violates role/recipient constraints.","path":"/discussionBoard/admin/notifications/{notificationId}","method":"put","description":"Updates one or more modifiable fields on a notification row. Permitted fields are those defined as mutable in the IDiscussionBoardNotification.IUpdate request DTO—typically including title, body, event type, unread, and entity-linked fields. All column-level validation follows the notification table schema (types, length constraints, etc).\n\nOnly authorized actors (admin, system process, or originator with sufficient rights) may modify a notification. Standard errors apply: 404 if the notification does not exist, 403 on unauthorized attempt, and 400 on failed validation.\n\nDesigned for administrative correction, workflow-based metadata update, or unread/read toggles. Audit trail for all changes is mandatory as per platform operation rules.","summary":"Update notification metadata and content (by ID) in discussion_board_notifications table","parameters":[{"name":"notificationId","description":"UUID of the notification entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to modify for the notification (partial or full), as per IDiscussionBoardNotification.IUpdate.","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"The updated notification object after changes are applied.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (soft-delete) a notification event from the discussion_board_notifications table, using primary key notificationId for lookup. This operation marks the notification as deleted by setting the deleted_at field, per DB schema. This prevents the notification from appearing in search/list endpoints and hides it from recipient UX. Only admin or system-level actors may issue delete; end-users or recipients cannot self-delete notification rows.\n\nIf the notificationId is not found or is already deleted, return 404. This operation does not affect application-level events beyond the notification, but soft-deleted notifications are retained for audit and recovery as per policy. Hard delete (physical removal) should only occur via background jobs or irreversible compliance purge.\n\nTypical use cases: notification withdrawal, error correction, duplicate removal, or as part of compliance routines.","path":"/discussionBoard/admin/notifications/{notificationId}","method":"delete","description":"Soft-deletes the notification identified by notificationId by updating the deleted_at column in the discussion_board_notifications table. The entry will be excluded from normal user views and search APIs. Deletion is not permitted by the notification recipient, only system actors (admin) may invoke this operation.\n\nIf the notification does not exist or has been previously deleted, a not found error is returned. Soft-deletion ensures that historical or legal audit is preserved unless compliance-mandated purge is scheduled.\n\nThis operation is tightly related to notification lifecycle management in the discussion board application and should be audit-logged at the operation layer.","summary":"Soft-delete a notification by ID in discussion_board_notifications (marks as deleted)","parameters":[{"name":"notificationId","description":"UUID of the notification event to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Perform paginated, filterable search across discussion board permission matrices, which represent granular access rules for each role (member, moderator, admin, guest, etc.) per resource and action in the system. This endpoint enables administrative or internal business logic to retrieve IDiscussionBoardPermissionMatrix entries using complex search criteria (role name, resource, allowed/disallowed, effective date ranges, etc.) mapped to IDiscussionBoardPermissionMatrix.IRequest DTO. Returns paginated IPageIDiscussionBoardPermissionMatrix objects.\n\nDirect mapping to the discussion_board_permission_matrices table. Each entry contains the role name, resource string, action, allowed/denied flag, and effective date period. Search supports filtering by role, resource, action type, and effectivity. Used in the admin console or policy editor to list or audit permissions. Security: only accessible to admin-level roles.\n\nInterlinked with rule logs and policy editor UI, supports full RBAC policy management.","path":"/discussionBoard/admin/permissionMatrices","method":"patch","description":"Retrieves a paginated and filtered list of permission matrix entries in the discussion_board_permission_matrices table. Supports advanced search options (by role, resource, action, active/inactive, effective date, etc.) as specified by IDiscussionBoardPermissionMatrix.IRequest, returning results in IPageIDiscussionBoardPermissionMatrix schema.\n\nUsed in the admin interface for RBAC management, audit, and compliance review. Only admin users may invoke this endpoint. Enforces security around viewing RBAC policies. Supports all fields for advanced search/display usecase.\n\nIf search parameters are invalid or too broad/narrow, standard pagination/empty page handling applies.","summary":"Search and list permission matrix entries (paginated, filtered) from discussion_board_permission_matrices","parameters":[],"requestBody":{"description":"Advanced filtering/search criteria per IDiscussionBoardPermissionMatrix.IRequest.","typeName":"IDiscussionBoardPermissionMatrix.IRequest"},"responseBody":{"description":"Paginated page of permission matrix entries, per IPageIDiscussionBoardPermissionMatrix.","typeName":"IPageIDiscussionBoardPermissionMatrix"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve details of a specific permission matrix entry governing a role/resource/action combination, looking up by unique permissionMatrixId. The endpoint exposes all granular RBAC details as stored in the discussion_board_permission_matrices table. Returns the full IDiscussionBoardPermissionMatrix object, including role_name, resource, action, allowed flag, and effective period fields.\n\nThis endpoint is used for admin audits, RBAC policy editors, compliance reviews, or access problem troubleshooting. Access restricted to admin only. Returns 404 on non-existent/deleted matrix.","path":"/discussionBoard/admin/permissionMatrices/{permissionMatrixId}","method":"get","description":"Fetches a single permission matrix entity from the discussion_board_permission_matrices table by its primary id. Returns all details, including the role name, resource, permitted action, and effectivity.\n\nOnly accessible by admin. If not found or deleted, returns a 404 error. Closely related to the RBAC edit and audit permissions flows.\n\nError handling: 404 if missing, 403 if unauthorized.","summary":"Get one permission matrix entry by id (policy row) from discussion_board_permission_matrices","parameters":[{"name":"permissionMatrixId","description":"UUID of the permission matrix entry to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Permission matrix policy details for requested id; as per IDiscussionBoardPermissionMatrix.","typeName":"IDiscussionBoardPermissionMatrix"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Insert a new permission matrix entry into the system-wide access policy, mapping a role (e.g., admin, moderator, member, guest) to a resource, action, allowed/denied flag, and effective period. The data is supplied in the IDiscussionBoardPermissionMatrix.ICreate DTO, aligned with the discussion_board_permission_matrices table. This operation enables programmatic expansion of RBAC and security rules in the admin console or backend workflows.\n\nFine-grained policy attributes are set according to input: role_name (string), resource, action, and allowed (boolean), as well as effectivity windows. The new matrix is subject to versioned and time-aware audit. Only admins can add permission matrices. If constraints or uniqueness rules are violated (e.g., duplicate role/resource/action/effective_from), an error is reported.","path":"/discussionBoard/admin/permissionMatrices","method":"post","description":"Creates a new permission matrix policy entry in discussion_board_permission_matrices. Maps admin input from the IDiscussionBoardPermissionMatrix.ICreate request to the DB model (role, resource, action, allowed, effectivity, and audit fields).\n\nEnforces all schema and business validation: unique (role_name, resource, action, effective_from) per period, valid role/resource/action codes, effective date rules. Only accessible by admins. Success returns the new entry; constraint violations result in error.\n\nKey endpoint for evolving RBAC and system access rights over time. Audit and rollback support required.","summary":"Create a new permission matrix policy (RBAC/ACL row) in discussion_board_permission_matrices","parameters":[],"requestBody":{"description":"Permission matrix policy data for creation, per IDiscussionBoardPermissionMatrix.ICreate.","typeName":"IDiscussionBoardPermissionMatrix.ICreate"},"responseBody":{"description":"Created permission matrix entry as returned from DB (IDiscussionBoardPermissionMatrix).","typeName":"IDiscussionBoardPermissionMatrix"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update fields of a permission matrix entry, located by primary key UUID (permissionMatrixId). Accepts partial/full update fields as per IDiscussionBoardPermissionMatrix.IUpdate schema. Supports modifying any of the role/resource/action/effectivity/allowed fields. Admin-only action; all updates are logged for audit and compliance tracking.\n\nThe endpoint supports regular RBAC policy change workflows or compliance requirements in the platform. Links are maintained to rule logs and prior versions for rollback history. All updates are validated per schema/business constraints; uniqueness (role/resource/action/effective_from) and effective window rules enforced. 404/403 returned on missing/unauthorized request; 400 for validation errors.\n\nDo not use this for deletion of matrices—use \"erase\" endpoint.","path":"/discussionBoard/admin/permissionMatrices/{permissionMatrixId}","method":"put","description":"Modifies an existing permission matrix entry for system RBAC—fields mapped to IDiscussionBoardPermissionMatrix.IUpdate (role, resource, action, allowed/denied, effectivity). Only admin can invoke, and field-level uniqueness/main key constraints are enforced. Upon success, returns the updated matrix entry as per DB state.\n\nAll update attempts are validated for data integrity and policy correctness, with audit/rollback required under operation rules. Ties directly to admin policy management console and programmatic RBAC editors.\n\nStandard status handling: 404 if not found, 403 if unauthorized, 400 for validation failures. Soft-deletion is a separate operation.","summary":"Update a permission matrix row (by id) in discussion_board_permission_matrices table (RBAC/ACL)","parameters":[{"name":"permissionMatrixId","description":"UUID primary key of the permission matrix row to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Policy field values to change, as per IDiscussionBoardPermissionMatrix.IUpdate schema.","typeName":"IDiscussionBoardPermissionMatrix.IUpdate"},"responseBody":{"description":"The updated permission matrix entry, as returned from DB (IDiscussionBoardPermissionMatrix).","typeName":"IDiscussionBoardPermissionMatrix"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Remove (soft-delete) a permission matrix row by unique identifier (permissionMatrixId). This operation sets the deleted_at timestamp in discussion_board_permission_matrices table to exclude it from all active RBAC/ACL lookups; record remains for audit/rollback. Only admin can invoke. Hard deletes (physical removal) should only happen in rare compliance erasure workflows.\n\nIf the row doesn't exist or is already deleted, returns 404. This operation enables cleanup of legacy or superseded permission assignments in the RBAC/ACL configuration.","path":"/discussionBoard/admin/permissionMatrices/{permissionMatrixId}","method":"delete","description":"Soft-deletes the specified permission matrix policy (by id) by setting deleted_at in the record. RBAC/ACL rules referencing this row become inapplicable; list/search endpoints omit deleted matrices, but record persists for audit. Only admins can erase. Ties into RBAC policy lifecycle audit/rollback.\n\n404 if row is missing/already deleted. Typically used as part of system policy cleanup, deprecation, or compliance.","summary":"Soft-delete a permission matrix entry from discussion_board_permission_matrices (by id)","parameters":[{"name":"permissionMatrixId","description":"UUID of the permission matrix policy row to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Provides paginated, filterable searching and listing over the system's rule log (discussion_board_rule_logs), which audits all policy, RBAC, and operational rule changes. Input is a query per IDiscussionBoardRuleLog.IRequest which may filter by operator (admin/member), rule_type, change_type, effective dates, or change descriptions. Results are returned in the IPageIDiscussionBoardRuleLog format for administrative review, compliance audits, or rollback/incident response.\n\nTranslates directly to the discussion_board_rule_logs schema—each entry tracks the actor, rule context, type of change, and dates. Only admins have access due to sensitive regulatory scope. Pagination and filter performance must be robust due to potentially high data volume.","path":"/discussionBoard/admin/ruleLogs","method":"patch","description":"Searches the rule log table (discussion_board_rule_logs) for policy/rule change records as filtered by IDiscussionBoardRuleLog.IRequest. Returns paginated, filterable pages as IPageIDiscussionBoardRuleLog (all fields per schema, including operator/admin linkage, rule context, change action, and audit trail).\n\nOnly admin access is allowed for regulatory reasons. Typical scenarios include compliance auditing, rollback workflow support, or detailed incident review. Pagination, security, and filter robustness are required for efficient e-discovery and platform governance.\n\nEmpty results are handled as empty pages, not errors. Pagination and security limits applied.","summary":"Search/list discussion board rule logs (policy change audit, paginated, filtered)","parameters":[],"requestBody":{"description":"Filter and search parameters for rule logs (operator, rule type, date range, etc.), as per IDiscussionBoardRuleLog.IRequest.","typeName":"IDiscussionBoardRuleLog.IRequest"},"responseBody":{"description":"Paginated and filtered rule log entries as per IPageIDiscussionBoardRuleLog schema.","typeName":"IPageIDiscussionBoardRuleLog"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve details on a single policy/rule log entry in the discussion_board_rule_logs table by its unique ruleLogId. Returns all fields of IDiscussionBoardRuleLog as stored, including operator links, rule type/context, change type, timestamps, description, and rule text snapshots. Used for in-depth compliance auditing, forensic review, or rollback context. Admin access only.\n\nReturns 404 if the ruleLogId is not found or is soft-deleted. Data aligns directly to schema/documentation; inter entity links are UUIDs or reference fields only.","path":"/discussionBoard/admin/ruleLogs/{ruleLogId}","method":"get","description":"Fetches the details of a single rule log entry by its unique ID. All entity fields are returned, including operator/admin references, change/rule type, full rule text, and audit fields. Used for compliance, rollback, and incident reporting.\n\nAuthorization: only admin users can query single rule logs. 404/403 status codes on not found/unauthorized. Rights should be enforced on log visibility of sensitive policy/rule changes.","summary":"Get details for a single rule change log row by id in discussion_board_rule_logs","parameters":[{"name":"ruleLogId","description":"UUID of the rule log entry to query.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the rule log entry, as per IDiscussionBoardRuleLog schema.","typeName":"IDiscussionBoardRuleLog"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create new rule log/audit entry for changes to platform policy, RBAC, or permission structures. Inserts an IDiscussionBoardRuleLog.ICreate-compliant document into discussion_board_rule_logs, recording full change context, affected rule type, actor/admin, change description, date window, and full rule snapshot. Used for regulatory governance, audit, incident/rollback tracing, or admin change registration.\n\nWrite control is restricted to protected admin system paths—only authorized actors/systems may create rule logs. Direct mapping: operator, rule type, change_type, effective_from, and text fields. All entries support exact rollback or snapshot restoration. Admin-only, with full schema validation and audit.\n\nConstraint violations or relation mismatches (e.g., invalid admin/member id) result in error.","path":"/discussionBoard/admin/ruleLogs","method":"post","description":"Creates a new policy/rule change log in discussion_board_rule_logs with all relevant fields: operator reference, rule type, change_type, rule text, effective window, and change description. Used to document or audit policy/RBAC changes as required by regulation and business policy.\n\nFields must be valid as per schema and business process. Only highly privileged admins may call this endpoint directly or indirectly; all insertions are audit controlled and monitored. Returns success on proper log commit; errors on constraint violations.","summary":"Register (create) new rule log entry for policy/RBAC changes, in discussion_board_rule_logs","parameters":[],"requestBody":{"description":"All audit fields for the new rule log (operator, rule type, change_type, full text, window), as per IDiscussionBoardRuleLog.ICreate.","typeName":"IDiscussionBoardRuleLog.ICreate"},"responseBody":{"description":"Created rule log entry, as per IDiscussionBoardRuleLog schema.","typeName":"IDiscussionBoardRuleLog"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"This endpoint updates an existing platform rule log for the discussionBoard service. It operates on the RuleLogs table, allowing administrators to modify the details of a documented rule or policy change for compliance, rollback, or historical audit. The input must supply all required update fields as described in the schema. Only admins are allowed to update rule logs, and each update is versioned and traceable. The endpoint enforces detailed change auditing, maintaining data integrity and full traceability of governance policy changes.","path":"/discussionBoard/admin/ruleLogs/{ruleLogId}","method":"put","description":"Update the details of a specific rule log record in the discussionBoard platform. This enables administrators to revise, correct, or augment a rule or policy change that has been previously recorded, such as altering effective dates, change descriptions, or rule content for audit completeness.\n\nUpdating a rule log is subject to strict security and permission validation—only users with the 'admin' role can perform this operation. The rule log maintains a complete history of changes for regulatory compliance, policy governance, and forensic investigation. Administrators must ensure that the new details accurately reflect the intent and scope of the policy or rule adjustment, and all updates are tracked with precise timestamps and operator identity. If an update is performed, a new audit trail entry is automatically created for future rollback or review.\n\nRelated API operations include retrieval of rule logs for audit purposes and deletion for legal or regulatory removal. Error handling must provide clarity for permission denial, invalid input, or referential integrity violations.","summary":"Update a specific rule log record (discussion_board_rule_logs).","parameters":[{"name":"ruleLogId","description":"Unique identifier of the rule log record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated details for the rule log record.","typeName":"IDiscussionBoardRuleLog.IUpdate"},"responseBody":{"description":"The updated rule log record details.","typeName":"IDiscussionBoardRuleLog"},"authorizationRole":"admin","name":"update"},{"specification":"This endpoint removes (soft-deletes) an existing platform rule log in the discussionBoard service. It operates on the RuleLogs table, marking the record as deleted rather than physically erasing it from the database for auditability and regulatory retention. The operation can only be performed by admins, ensuring that only authorized personnel can remove rule logs. Deletion actions trigger an audit entry to comply with policy and legal standards.","path":"/discussionBoard/admin/ruleLogs/{ruleLogId}","method":"delete","description":"Soft-delete (mark as removed) an individual rule log record from the discussionBoard platform. This action is reserved for admin users, as the rule logs are critical for regulatory, compliance, and incident investigation purposes.\n\nUpon deletion, the rule log's 'deleted_at' field is set to the current timestamp, but the record remains accessible for future audit or potential restoration. The operation is designed to be compliant with data retention and forensic audit requirements, providing a trace of who performed the deletion and when. If there are conflicts, such as deletion of non-existent records or permission issues, appropriate errors are returned. Related API endpoints include update and retrieval of rule logs.","summary":"Soft-delete a specific rule log (discussion_board_rule_logs).","parameters":[{"name":"ruleLogId","description":"Unique identifier of the rule log record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Retrieves a filtered and paginated list of external authentication logs for the discussionBoard platform. Operates on the ExternalAuthLogs table, supporting advanced search, filtering, and sorting by event/channel/user/email/status/time. Utilized for audit, troubleshooting, and analytics on all authentication flows (social/OAuth/email).","path":"/discussionBoard/admin/externalAuthLogs","method":"patch","description":"Search and retrieve a filtered, paginated list of external authentication logs for the discussionBoard platform. Used for administration, auditing, troubleshooting external login events, email/SNS auth events, and compliance review.\n\nSupports complex query parameters including date range, auth channel, user, success/failure status, detailed error context, and more. Pagination, sorting and advanced full-text search are available. Only admin users can access this endpoint, as it exposes sensitive authentication flows and operational security events. Each record details related user (if mapped), source, status, error code/message, and timestamps for each event lifecycle stage.\n\nRelated endpoints allow for the creation, update, and detailed retrieval of individual authentication logs. Comprehensive error handling is implemented for malformed queries or unauthorized access.","summary":"Advanced search and list of external authentication logs (discussion_board_external_auth_logs).","parameters":[],"requestBody":{"description":"Filter, search, and pagination parameters for external authentication logs query.","typeName":"IDiscussionBoardExternalAuthLog.IRequest"},"responseBody":{"description":"Paginated, filtered list of external authentication log summary records.","typeName":"IPageIDiscussionBoardExternalAuthLog.ISummary"},"authorizationRole":"admin","name":"search"},{"specification":"Fetch detailed information for a single external authentication log entry from the discussionBoard platform. Operates on the ExternalAuthLogs table and is used to display complete event lifecycle, error context, user assignment, and timing information for a specific authentication attempt.","path":"/discussionBoard/admin/externalAuthLogs/{externalAuthLogId}","method":"get","description":"Retrieve full detail for a specific external authentication log entry. This endpoint returns complete information for the identified authentication attempt, including the external channel, mapping to a member account (if any), error status, timing of request and completion, and all associated metadata fields.\n\nAccess is strictly limited to admin users for privacy and compliance, supporting tasks like troubleshooting complex login issues, analyzing authentication failures, or preparing compliance/audit reports. Error handling provides meaningful guidance for missing or non-existent records, and audit visibility is maintained for all data access operations. Related endpoints support log search, creation, update, and deletion.","summary":"Get full detail of a specific external authentication event (discussion_board_external_auth_logs).","parameters":[{"name":"externalAuthLogId","description":"Unique identifier for the external authentication log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the external authentication log record.","typeName":"IDiscussionBoardExternalAuthLog"},"authorizationRole":"admin","name":"at"},{"specification":"Create a new external authentication log record for the discussionBoard platform. Operates on the ExternalAuthLogs table, allowing registration of a new authentication event including full linkage to member, external channel, status, error code, etc. Used by system microservices, auditing, or specialized admin tools. Only admins can create logs; each entry is versioned and traceable for audit compliance.","path":"/discussionBoard/admin/externalAuthLogs","method":"post","description":"Register a new external authentication event for the discussionBoard platform. Accepts data describing the auth channel (OAuth, email, etc.), member/user reference, identity, result success/failure, error context, and key lifecycle timestamps. This operation is reserved for admin users and specialized system services.\n\nAll submitted data is validated to ensure event completeness and referential integrity, and each creation is recorded for audit and traceability. New external auth log entries provide critical basis for operational analytics, troubleshooting, and audit reporting across the platform. Related APIs allow for searching, updating, or deleting authentication log records as needed.","summary":"Create a new external authentication log (discussion_board_external_auth_logs).","parameters":[],"requestBody":{"description":"Complete event authentication log details for creation.","typeName":"IDiscussionBoardExternalAuthLog.ICreate"},"responseBody":{"description":"The newly created external authentication log record.","typeName":"IDiscussionBoardExternalAuthLog"},"authorizationRole":"admin","name":"create"},{"specification":"Update an existing external authentication log entry for the discussionBoard platform. Operates on the ExternalAuthLogs table, supporting modification of event metadata, status, error fields, or user mapping for audit, analytics, and compliance. Only admins can update, and each update is tracked for traceability.","path":"/discussionBoard/admin/externalAuthLogs/{externalAuthLogId}","method":"put","description":"Update the details for a specific external authentication log record used by the discussionBoard platform. Allows correction or modification of authentication metadata such as channel, related user, status, error message/code, timing, or external provider info.\n\nAccess is restricted to admin users to preserve data integrity and audit accountability. Changes are recorded for full traceability, and strict validation of inputs (especially foreign keys and business logic) is enforced. Successful updates are reflected in the returned log record for confirmation and downstream analysis. Related endpoints include creation, search, detail retrieval, and deletion of external authentication logs.","summary":"Update a specific external authentication log (discussion_board_external_auth_logs).","parameters":[{"name":"externalAuthLogId","description":"Unique identifier for the external authentication log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data to update in the external authentication log.","typeName":"IDiscussionBoardExternalAuthLog.IUpdate"},"responseBody":{"description":"The updated external authentication log record.","typeName":"IDiscussionBoardExternalAuthLog"},"authorizationRole":"admin","name":"update"},{"specification":"Delete (soft-delete) an external authentication log entry for the discussionBoard platform. Operates on the ExternalAuthLogs table, marking the specified record as deleted (deleted_at set) but leaving it present for auditing and regulatory purposes. Only admins can delete logs, supporting data governance and retention.","path":"/discussionBoard/admin/externalAuthLogs/{externalAuthLogId}","method":"delete","description":"Soft-delete (mark as removed) a specific external authentication log entry from the discussionBoard platform. This sets its deleted_at timestamp, but retains the log for compliance and audit requirements (no data is physically removed).\n\nOnly admin users have the authority to perform this operation to prevent unauthorized log removal. Each deletion is recorded in the system audit trail. Errors include attempts to remove non-existent or already deleted records or lack of permission. Related endpoints include creation, update, search, and detail retrieval APIs.","summary":"Soft-delete a specific external authentication log (discussion_board_external_auth_logs).","parameters":[{"name":"externalAuthLogId","description":"Unique identifier for the external authentication log entry to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Retrieves a paginated, searchable list of all outgoing email log records for the discussionBoard platform. Operates on the EmailLogs table, supporting advanced filtering, sorting, and metadata access for operational audit, troubleshooting, and compliance. Only accessible to admins.","path":"/discussionBoard/admin/emailLogs","method":"patch","description":"Query and retrieve a filtered, paginated list of outgoing email log events for the discussionBoard platform. Designed for administration and audit, it provides visibility into all outgoing messages (verification, password reset, notification) in line with regulatory and operational requirements.\n\nAdmins may filter/search by recipient, email type, sending status, date range, or other metadata. The endpoint supports complex query, full pagination, and sorting for error or delivery analysis as well as investigation of specific communication events. All query access is logged. Detailed retrieval of a single email log is available via a related endpoint. Appropriate error handling covers malformed queries or insufficient privileges.","summary":"Search and list outgoing email logs (discussion_board_email_logs).","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for outgoing email logs query.","typeName":"IDiscussionBoardEmailLog.IRequest"},"responseBody":{"description":"Paginated list of outgoing email log summary records matching the filter.","typeName":"IPageIDiscussionBoardEmailLog.ISummary"},"authorizationRole":"admin","name":"search"},{"specification":"Fetch complete detail for a single outgoing email log event in the discussionBoard platform. Operates on the EmailLogs table, enabling admins to audit, troubleshoot, or verify individual communications sent to users. Information includes recipient, delivery status, provider response, timestamps, and provider metadata. Only accessible to admins.","path":"/discussionBoard/admin/emailLogs/{emailLogId}","method":"get","description":"Retrieve full details for a specific outgoing email log record for the discussionBoard platform. Returns all fields including recipient, type, status, timestamps, provider response, error/code, subject, and integration metadata (SMTP/external message ID).\n\nAccess is admin-only to manage sensitive communication disclosure. The endpoint aids investigations into communication delivery, troubleshooting user/outbound issues, and supporting compliance verification. Supports error responses for unknown or inaccessible records. Other email log APIs allow for search, creation, update, and soft-delete.","summary":"Get outgoing email log detail (discussion_board_email_logs).","parameters":[{"name":"emailLogId","description":"Unique identifier for the outgoing email log record to be fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the outgoing email log record.","typeName":"IDiscussionBoardEmailLog"},"authorizationRole":"admin","name":"at"},{"specification":"Create a new outgoing email log event for the discussionBoard platform. Operates on the EmailLogs table, recording full metadata on a system-initiated outgoing email communication. Only accessible by admins or system actors, the log includes recipient, type, result/status, provider metadata, and all delivery timestamps. Entry creation is versioned and fully auditable, supporting troubleshooting, analytics, and regulatory retention.","path":"/discussionBoard/admin/emailLogs","method":"post","description":"Register a new outgoing email communication event in the discussionBoard platform. Receives the full metadata of a sent email (recipient, type, timing, status, provider info), required for compliance and traceability of all system-initiated email communications. Only admins can invoke this API.\n\nAll new entries are strictly validated and trigger system-side audit logging. The system ensures data consistency, prevents duplicate event creation (on idempotency assurance if available), and maintains complete traceability of communication flows from the platform to external providers. Downstream endpoints allow detailed retrieval, update, or deletion of records. Errors are surfaced for referential or format violations.","summary":"Create a new outgoing email log (discussion_board_email_logs).","parameters":[],"requestBody":{"description":"All outgoing email log metadata for log event creation.","typeName":"IDiscussionBoardEmailLog.ICreate"},"responseBody":{"description":"The newly created outgoing email log record.","typeName":"IDiscussionBoardEmailLog"},"authorizationRole":"admin","name":"create"},{"specification":"Update an existing outgoing email log entry for the discussionBoard platform. Operates on the EmailLogs table, allowing admins to correct or augment metadata regarding recipient, status, email type, delivery, or provider response. All update actions are tracked for compliance and root cause analysis. Only accessible to admins.","path":"/discussionBoard/admin/emailLogs/{emailLogId}","method":"put","description":"Update the metadata for a specific outgoing email log record. Permits admins to correct, extend, or clarify record information, including recipient, email type, delivery status, provider response, error code, or other log-specific fields.\n\nEvery update is versioned and fully auditable for compliance. Permissions ensure that only users with 'admin' role can make such changes. Audit logs record the time, actor, and full before/after fields for future reference or rollback. Related API endpoints include detailed retrieval, search, creation, and soft-deletion of outgoing email log records. Expected errors include inadequate permissions or attempt to update a deleted/non-existent log.","summary":"Update a specific outgoing email log record (discussion_board_email_logs).","parameters":[{"name":"emailLogId","description":"Unique identifier for the outgoing email log record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated outgoing email log metadata for the specified record.","typeName":"IDiscussionBoardEmailLog.IUpdate"},"responseBody":{"description":"The updated outgoing email log record.","typeName":"IDiscussionBoardEmailLog"},"authorizationRole":"admin","name":"update"},{"specification":"Delete (soft-delete) a specific outgoing email log record for the discussionBoard platform. Operates on the EmailLogs table, setting deleted_at but retaining the log for full audit and regulatory compliance. Only admins may delete logs, and deletions are fully traceable for accountability. No data is physically removed.","path":"/discussionBoard/admin/emailLogs/{emailLogId}","method":"delete","description":"Soft-delete an outgoing email log record from the discussionBoard platform. This operation, restricted to admin users, sets the deleted_at timestamp but leaves the record intact for forensic and compliance purposes.\n\nAll deletions are recorded in the audit logs, and access to removed records is preserved for legal/reporting reasons (no hard deletion is performed). Attempts to delete a non-existent or already deleted log or to act without sufficient permissions result in detailed errors. Related endpoints allow for creation, detailed retrieval, updating, and searching of email log events.","summary":"Soft-delete a specific outgoing email log record (discussion_board_email_logs).","parameters":[{"name":"emailLogId","description":"Unique identifier for the outgoing email log record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Provides advanced, paginated search of ad integration logs within the discussionBoard service. This operation retrieves and filters ad/analytics integration log entries from the discussion_board_ad_integration_logs table based on user-defined search parameters. Supports filtering by ad channel, event type, member ID, date ranges, and success status. Returns summary and detailed status for error diagnosis, troubleshooting, auditing, and dashboarding. Respects all audit and business constraints, and incorporates metrics for monitoring external ad/analytics event flows. Useful for compliance, reporting, and analytics team monitoring. Only accessible to admin users.","description":"Performs a sophisticated, paginated search over all ad integration log entries in the discussion_board_ad_integration_logs table, allowing for multi-criteria filtering and sorting. Users can query logs for campaign effectiveness, diagnose ad/analytics integration issues, and review error events for compliance. The operation is restricted to admin users due to the sensitive nature of integration event and error tracking. Pagination, sort order, and search facets are supported according to the system's analytics requirements. Related endpoints enable creation, update, and deletion of ad integration logs, but this endpoint focuses exclusively on search/filter.","summary":"Paginated, advanced search/filter of discussion board ad integration logs (discussion_board_ad_integration_logs).","parameters":[],"requestBody":{"description":"Ad integration log search and pagination filter criteria.","typeName":"IDiscussionBoardAdIntegrationLog.IRequest"},"responseBody":{"description":"Paginated search results and event summaries of ad integration logs matching filter criteria.","typeName":"IPageIDiscussionBoardAdIntegrationLog.ISummary"},"authorizationRole":"admin","name":"search","path":"/discussionBoard/admin/adIntegrationLogs","method":"patch"},{"specification":"Retrieves full detailed information on a specific ad integration log by ID from the discussion_board_ad_integration_logs table. Supports deep audit, error troubleshooting, partner support, or campaign attribution trace. The endpoint is restricted to admins given potential for sensitive ad network and analytics event exposure. Offers a full record: event context, error statuses, response/debug payloads, and member/ad reference resolution.","description":"Fetches a single, detailed ad integration log entry (by UUID) from the discussion_board_ad_integration_logs table. All available fields—including event type, payloads, integration outcome, associated member, and diagnostics—are returned for compliance verification, integration debugging, or ad analytics review. Sensitive error or traffic diagnostics are included, so only admins may call this endpoint. Related operations allow searching, creating, updating, or deleting logs.","summary":"Retrieve detailed info for a specific ad integration log (discussion_board_ad_integration_logs) by ID.","parameters":[{"name":"adIntegrationLogId","description":"Unique identifier (UUID) of the target ad integration log entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete ad integration log entry with all event, error, and context fields.","typeName":"IDiscussionBoardAdIntegrationLog"},"authorizationRole":"admin","name":"at","path":"/discussionBoard/admin/adIntegrationLogs/{adIntegrationLogId}","method":"get"},{"specification":"Creates a new ad integration log in the discussion_board_ad_integration_logs table, recording all required metadata for external ad/analytics integration events like impressions, clicks, errors, or partner interactions. This operation is typically system-internal but available via API for service integration or administrative troubleshooting. Required fields include ad channel, event type, context, timestamps, status, associated member, and all error/payload info as applicable. Only admins allowed for direct creation due to log integrity. Ensures compliance with platform audit and transparency policies.","description":"Creates a new ad/analytics integration log entry in discussion_board_ad_integration_logs with full metadata: event channel, type, context, timestamps, event/call outcome, member reference, payloads, error codes/messages, and audit links. Used for advanced troubleshooting, compliance analysis, or manual log rectification by admin/support staff. Related endpoints provide search, detail, update, and delete functions. Data integrity and completeness are mandatory; only usable by admins for traceability and policy compliance.","summary":"Create a new ad/analytics integration log entry (discussion_board_ad_integration_logs).","parameters":[],"requestBody":{"description":"Creation details for new ad integration log entry (full required metadata).","typeName":"IDiscussionBoardAdIntegrationLog.ICreate"},"responseBody":{"description":"Full log entry as created, including unique ID and all captured metadata.","typeName":"IDiscussionBoardAdIntegrationLog"},"authorizationRole":"admin","name":"create","path":"/discussionBoard/admin/adIntegrationLogs","method":"post"},{"specification":"Updates an existing ad integration log record in the discussion_board_ad_integration_logs table, modifying metadata such as ad channel, event, error payloads, status, or member link. Use cases include error correction, enrichment after delayed partner feedback, or modification of analytics context. Full auditable update history is maintained. Restricted to admin operations due to audit and compliance policy. All referenced fields and relationships must align with schema, including nullability and index constraints.","description":"Updates details for an existing ad/analytics integration log in discussion_board_ad_integration_logs by UUID. All updatable fields (channel, event type, outcome, error diagnostics, context references, status, member ID, timestamps, and analytic payloads) are specified in the request body. This operation is used for administrative event correction, enrichment, or compliance adjustments (e.g., error annotation, partner event late binding, data hygiene). Only admin users can update logs due to security/compliance traceability.","summary":"Update an ad/analytics integration log (discussion_board_ad_integration_logs) by ID.","parameters":[{"name":"adIntegrationLogId","description":"Unique identifier (UUID) of the target ad integration log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update details for ad integration log entry (fields to be modified).","typeName":"IDiscussionBoardAdIntegrationLog.IUpdate"},"responseBody":{"description":"Log entry after modification, fully resolved for audit/compliance review.","typeName":"IDiscussionBoardAdIntegrationLog"},"authorizationRole":"admin","name":"update","path":"/discussionBoard/admin/adIntegrationLogs/{adIntegrationLogId}","method":"put"},{"specification":"Deletes an ad/analytics integration log record by UUID from discussion_board_ad_integration_logs. This is a soft delete: the deleted_at field is set. Hard deletion is not performed to preserve auditability and regulatory compliance. Only platform admins may delete logs due to potential for sensitive vendor or user references. Related operations include search, create, update, and read for logs.","description":"Soft-deletes (marks as deleted, but does not physically remove) an ad/analytics integration log entry in discussion_board_ad_integration_logs by its unique ID (UUID). Log entries may comprise compliance-relevant event/error data, so deletion is strictly limited to admins for transparency and audit trail retention. Soft deleted entries are excluded from business views but remain available for external audits and regulatory inspection.","summary":"Soft delete an ad/analytics integration log entry by ID (discussion_board_ad_integration_logs).","parameters":[{"name":"adIntegrationLogId","description":"Unique identifier (UUID) of the target ad integration log for soft deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionBoard/admin/adIntegrationLogs/{adIntegrationLogId}","method":"delete"},{"specification":"Performs a complex, paginated search of privileged system operation logs recorded in the discussion_board_operation_logs table. Enables administrative review/audit of all high-privilege actions across platform (e.g., admin or moderator policy changes, high-impact manual edits, security events). Filtering supported by actor (admin, moderator, member), action type, resource details, and time window. Used for compliance, incident investigation, policy change tracing, and forensics. Extremely sensitive—admins only. Returns both summary event data and full context for review.","description":"Allows admins to query all privileged operational logs for the discussionBoard platform, including admin/moderator/member actions. Operation supports filtering by actor type (admin, moderator, member), action type, resource table or ID, time range, network context (IP, UA), and supporting payload detail. All results paginated for dashboard/UX. This endpoint is for audit, incident review, forensics, or compliance reporting. Only admins with sufficient privilege may call. Related endpoints provide for reading, creating, updating, or deleting logs (though delete is not available for audit logs, only soft-deletion via separate module).","summary":"Paginated advanced search of system operation logs (discussion_board_operation_logs).","parameters":[],"requestBody":{"description":"Complex search and pagination parameters for operation log filtering.","typeName":"IDiscussionBoardOperationLog.IRequest"},"responseBody":{"description":"Paginated operational log search results and summary data.","typeName":"IPageIDiscussionBoardOperationLog.ISummary"},"authorizationRole":"admin","name":"search","path":"/discussionBoard/admin/operationLogs","method":"patch"},{"specification":"Retrieves the full details of a specific operation log entry by its UUID from discussion_board_operation_logs. Used for administrative or compliance-level review of platform events, tracing actor, context, audit fields, resource event affected, and supporting details. Data is immutable and designed for audit/incident forensics. Only admins may access full log entries due to PII and sensitive platform actions. Record is never hard deleted; soft deletes only for legal retention purposes.","description":"Fetches the complete detail of a single high-privilege operation log entry by UUID from the discussion_board_operation_logs table. All audit trail information for the action—including actor reference, action type, resource, context details (IP/UA), payload, and timestamps—are returned. This is for compliance, security incident, or operational review use. Access is limited to admins. Related endpoints cover search, (soft) delete, or update as governed by audit policy.","summary":"Get full detail for a specific privileged operation log (discussion_board_operation_logs) by ID.","parameters":[{"name":"operationLogId","description":"Unique identifier (UUID) of the targeted platform operation log entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detail of privileged operation log entry, including audit fields.","typeName":"IDiscussionBoardOperationLog"},"authorizationRole":"admin","name":"at","path":"/discussionBoard/admin/operationLogs/{operationLogId}","method":"get"},{"specification":"Creates a new platform-level privileged operation log entry in discussion_board_operation_logs. Used for direct/manual creation (rare: usually logs are created by automated system hooks, but API-level create may be necessary for external incident imports, batch reconciliation, or manual record). All audit fields must be present (actor, action, target resource, context, payload details). Only admins may create such logs. Operation is strictly controlled by compliance policy; any created entry is immutable except by separate administrative override.","description":"Allows administrative/manual creation of an operation log for platform events, compliance imports, or reconciliation scenarios where system automation is unavailable. All audit fields must be supplied: actor (admin/moderator/member), action type, resource context, timestamps, and supporting details (IP/user agent/payload). Created records remain under full audit lock; modification is restricted to explicit admin actions. All supporting updates, reads, and searches provided by related endpoints.","summary":"Create a new privileged operation log (discussion_board_operation_logs).","parameters":[],"requestBody":{"description":"Field set with all required audit data for operation log creation.","typeName":"IDiscussionBoardOperationLog.ICreate"},"responseBody":{"description":"Operation log as created. Immutable except by explicit admin override.","typeName":"IDiscussionBoardOperationLog"},"authorizationRole":"admin","name":"create","path":"/discussionBoard/admin/operationLogs","method":"post"},{"specification":"Updates an existing privileged operation log in discussion_board_operation_logs by its UUID. Used only in exceptional circumstances such as external reconciliation, policy record correction, or administrative override after a mislogged event. All supplied fields are validated for audit compliance. Only admins may update operation logs, and all changes are themselves recorded for full audit traceability in subsequent records/logs.","description":"Updates specified fields of a privileged operation log in discussion_board_operation_logs by UUID. Operation should be reserved for audit, reconciliation, or administrative override scenarios. All modifications are deeply audited and a full change log is maintained. Use cases include correcting misattributed logs, external log import rectification, or field enrichment after asynchronous investigation. Only admins are permitted due to compliance risks.","summary":"Update a privileged operation log (discussion_board_operation_logs) by ID.","parameters":[{"name":"operationLogId","description":"Unique identifier (UUID) of operation log record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field set to update for privileged operation log entry.","typeName":"IDiscussionBoardOperationLog.IUpdate"},"responseBody":{"description":"Full operation log, post-update, for audit review.","typeName":"IDiscussionBoardOperationLog"},"authorizationRole":"admin","name":"update","path":"/discussionBoard/admin/operationLogs/{operationLogId}","method":"put"},{"specification":"Deletes a privileged operation log from discussion_board_operation_logs by UUID (soft delete, not hard delete, to preserve audit trail and comply with regulatory policy). Only superadmin can soft-delete logs via API; deletion is rare and always recorded by audit system. Never physically erases logs from DB. Deletion events are visible to required compliance/operations personnel.","description":"Soft deletes (non-destructive, by setting deleted_at) a high-privilege operation log entry by UUID in discussion_board_operation_logs. Used only in rarest circumstances (court order, compliance reason). All delete events are themselves logged/audited externally. Only superadmin-level privileges may be permitted to call this operation. Related endpoints enable search, detail, or update of logs; hard delete is never permitted via API.","summary":"Soft delete a privileged operation log (discussion_board_operation_logs) by ID (audit log, not hard delete).","parameters":[{"name":"operationLogId","description":"Unique identifier (UUID) of the operation log for soft deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionBoard/admin/operationLogs/{operationLogId}","method":"delete"},{"specification":"Fetches a paginated, filtered list of policy change logs for the discussion board platform from the discussion_board_policy_change_logs table. Policy change logs record config, policy, and governance modifications made by admin users. This operation supports search by admin, policy type, target field, namespace, time range, and reason. Used for compliance, audit, and administrative policy tracking. This operation is admin-only due to sensitivity and potential exposure of privileged policy data.","description":"Performs admin-level, advanced, paginated search of policy change logs made to the discussion board platform, supporting business audit, incident investigation, regulatory review, and forensics. Filters include admin, namespace, resource/field, time window, and reason pattern. Comprehensive audit traceability is provided, allowing differentiation by version, actor, change description, before/after state, and chronology. All log fields are available for analysis. Related operations include reading single logs for detail.","summary":"Advanced paginated search/filter of policy change logs (discussion_board_policy_change_logs).","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for policy change logs.","typeName":"IDiscussionBoardPolicyChangeLog.IRequest"},"responseBody":{"description":"Paginated, filtered list of policy change log summaries, per requested search parameters.","typeName":"IPageIDiscussionBoardPolicyChangeLog.ISummary"},"authorizationRole":"admin","name":"search","path":"/discussionBoard/admin/policyChangeLogs","method":"patch"},{"specification":"Retrieves the complete detail of a specific policy change log entry by UUID from the discussion_board_policy_change_logs table. Policy change logs are immutable audit records of all policy/config modification performed by platform admins. Includes all change fields: before/after value, actor, time, affected field, change reason, and related references. Used for compliance, rollback, emergency review, or incident forensics.","description":"Fetches all details for a single policy change log entry by UUID, including admin actor, before/after values, field, resource, namespace, rationale, timestamps, and any chained/related changes. This endpoint is crucial for incident response, audit, compliance, and configuration management. Immutability and complete audit integrity are maintained. Only admin-privileged users may retrieve such logs. Related operations allow search over all logs or paginated summary retrieval.","summary":"Retrieve the full detail of a policy change log (discussion_board_policy_change_logs) by ID.","parameters":[{"name":"policyChangeLogId","description":"Unique identifier (UUID) of the policy change log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full, immutable policy change log entry and all audit fields.","typeName":"IDiscussionBoardPolicyChangeLog"},"authorizationRole":"admin","name":"at","path":"/discussionBoard/admin/policyChangeLogs/{policyChangeLogId}","method":"get"},{"specification":"This API operation allows for the creation of new policy change log entries within the discussion board system. It operates on the 'discussion_board_policy_change_logs' table, capturing all administrative changes to policies or configurations by logging details such as the responsible admin, the policy or configuration affected, previous and new values, justification, and the association with prior versions for full versioning audit trails. This ensures that every update to community guidelines, permission matrices, or any system rule is persistently and immutably recorded for later review, rollback, or compliance auditing.","path":"/discussionBoard/admin/policyChangeLogs","method":"post","description":"Create a new policy change log in the discussion board platform. The creation captures critical administrative changes including which admin performed the change, the policy namespace, the target table and field, the previous and new values, and the justification or reason for the update. The record enables comprehensive audit trailing, regulatory compliance, and incident investigation for any governance or moderation-related modifications.\n\nThis API is restricted to admin roles, ensuring only the highest privilege actors may log such impactful changes. Changes are versioned and linked to previous logs if this action supersedes a prior change, supporting full historical traceability. The creation triggers notifications and synchronization with other audit mechanisms.\n\nSecurity controls require authenticated admin access, full input validation, and integrity constraints that reject incomplete or unauthorized change attempts. Error responses provide detailed context in cases such as permission denial, malformed payloads, or database issues. Logging creation is atomic and non-rollbackable once recorded for audit purposes.\n\nRelated APIs include update/PUT and delete/DELETE for further revision history management, and GET for audit queries. This operation is foundational for all administrative change monitoring and regulatory compliance.\n","summary":"Create a new policy change log entry (discussion_board_policy_change_logs).","parameters":[],"requestBody":{"description":"Information required to create a policy change log.","typeName":"IDiscussionBoardPolicyChangeLog.ICreate"},"responseBody":{"description":"The created policy change log entry with all audit details.","typeName":"IDiscussionBoardPolicyChangeLog"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"This API operation updates an existing policy change log entry in the discussion_board_policy_change_logs table. Admins may use it to correct, annotate, or link prior entries (i.e., to set a previous log reference or update justifications), but cannot change immutable audit fields like the admin ID or change timestamp. It is critical for regulatory compliance that versioning and historical traceability remain intact, and that sensitive updates are precisely logged. Used mainly for corrections or linking within the policy log system, not for general policy updates (which require new logs).","path":"/discussionBoard/admin/policyChangeLogs/{policyChangeLogId}","method":"put","description":"Update an existing policy change log entry, typically for non-immutable fields such as change_reason, new_value corrections, or linking to earlier logs for full version history. Immutable audit fields (such as actor_admin_id and created_at) are strictly read-only, and all operations are logged for traceability. Requires admin privileges and thorough security checks.\n\nAll changes are strictly versioned, and reasons for update are logged in compliance with platform operational and legal guidelines. Failure scenarios include insufficient permissions, invalid log IDs, or disallowed field updates. This operation can be used with related GET, POST, or DELETE endpoints for comprehensive log lifecycle management.","summary":"Update a policy change log entry (discussion_board_policy_change_logs).","parameters":[{"name":"policyChangeLogId","description":"Unique identifier for the specific policy change log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Corrective or supplemental update data for the policy change log entry.","typeName":"IDiscussionBoardPolicyChangeLog.IUpdate"},"responseBody":{"description":"The updated discussion board policy change log entry.","typeName":"IDiscussionBoardPolicyChangeLog"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"This API operation deletes a specific policy change log entry from the discussion_board_policy_change_logs table, implementing a soft-delete approach by recording a deletion timestamp. The deletion is strictly controlled and auditable, only available to admin users, and designed to meet regulatory and operational policies regarding log retention. Use cases include erroneous or duplicate entries or data retention requirements. Deletion is traceable and cannot be physically removed except by exceptional compliance operations.","path":"/discussionBoard/admin/policyChangeLogs/{policyChangeLogId}","method":"delete","description":"Deletes (soft-deletes) a specific policy change log entry. This process records a deletion timestamp to ensure auditability rather than removing the record. Such log entries may be excluded from standard queries but remain available for regulatory or investigative review. Only accessible to admins, and every deletion event is itself recorded in administrative logs, including the delete reason and deletion timestamp.\n\nIdempotency is enforced; repeated delete requests result in no error after the first. Failure cases include invalid or non-existent IDs or deletion attempts by unauthorized roles. Related endpoints allow for log creation and correction.\n","summary":"Delete (soft-delete) a policy change log entry (discussion_board_policy_change_logs).","parameters":[{"name":"policyChangeLogId","description":"The unique ID of the targeted policy change log entry for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a list of post metrics—such as view, comment, vote, and report counters—for discussion board posts, with full search, filter, and pagination. This endpoint operates on the discussion_board_post_metrics table, supporting statistical analysis and operational insights for moderators, admins, or analytics dashboards. Results are filterable by counts, last activity, or post ID references, and supports ordering by recency or activity. Soft-deleted metrics are excluded unless specifically requested. Key for engagement analytics and community management.","path":"/discussionBoard/moderator/postMetrics","method":"patch","description":"Retrieve and filter post metrics for analytical and operational needs. Allows complex queries to retrieve posts with specific levels of engagement, trends over time, and busy or problematic posts (users with many reports, etc.).\n\nSupports full pagination and ordering, making it suitable for large deployments and dashboard analytics as well as moderate use by moderators/admins for content oversight.\n\nSecurity: Default to moderator and admin role access, as metrics can expose sensitive trends or incident markers. Returns only active (non-deleted) metrics unless requested. Related endpoints allow GET on individual metrics and CRUD on metrics counters.\n\nFiltering supports all numeric and date fields, such as view count ranges, activity recency, and specific post references.\n\nProvides error messages on malformed queries, forbidden access, or out-of-bounds pagination.\n","summary":"Search, filter, and paginate post metrics (discussion_board_post_metrics).","parameters":[],"requestBody":{"description":"Search, filter, and pagination info for post metrics query.","typeName":"IDiscussionBoardPostMetric.IRequest"},"responseBody":{"description":"Paginated list of post metrics matching the query.","typeName":"IPageIDiscussionBoardPostMetric"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"Retrieve a list of post metrics—such as view, comment, vote, and report counters—for discussion board posts, with full search, filter, and pagination. This endpoint operates on the discussion_board_post_metrics table, supporting statistical analysis and operational insights for moderators, admins, or analytics dashboards. Results are filterable by counts, last activity, or post ID references, and supports ordering by recency or activity. Soft-deleted metrics are excluded unless specifically requested. Key for engagement analytics and community management.","path":"/discussionBoard/admin/postMetrics","method":"patch","description":"Retrieve and filter post metrics for analytical and operational needs. Allows complex queries to retrieve posts with specific levels of engagement, trends over time, and busy or problematic posts (users with many reports, etc.).\n\nSupports full pagination and ordering, making it suitable for large deployments and dashboard analytics as well as moderate use by moderators/admins for content oversight.\n\nSecurity: Default to moderator and admin role access, as metrics can expose sensitive trends or incident markers. Returns only active (non-deleted) metrics unless requested. Related endpoints allow GET on individual metrics and CRUD on metrics counters.\n\nFiltering supports all numeric and date fields, such as view count ranges, activity recency, and specific post references.\n\nProvides error messages on malformed queries, forbidden access, or out-of-bounds pagination.\n","summary":"Search, filter, and paginate post metrics (discussion_board_post_metrics).","parameters":[],"requestBody":{"description":"Search, filter, and pagination info for post metrics query.","typeName":"IDiscussionBoardPostMetric.IRequest"},"responseBody":{"description":"Paginated list of post metrics matching the query.","typeName":"IPageIDiscussionBoardPostMetric"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves all available analytics data (views, comments, votes, reports counts, and recency) for a specific post metric, identified by its metric ID, from the discussion_board_post_metrics table. Suitable for in-depth review, trending analysis, or troubleshooting a particular post's performance. All access is traceable and requires moderator or admin privileges. Related endpoints: PATCH for searching and POST/PUT for inserting or updating metrics data.","path":"/discussionBoard/moderator/postMetrics/{postMetricsId}","method":"get","description":"Get analytic metric details for a specific discussion board post. Returns views, comment, upvote/downvote, and report counters, last activity timestamps, and all analytic audit fields. Includes soft-deletion status and entity links as necessary. Access is limited to moderators and admins for compliance and incident response.\n\nErrors return not-found for invalid IDs, forbidden for insufficient privileges, and descriptive failures for technical issues. This endpoint cannot update metrics—it is read-only; use PUT for updates or POST for creation.\n","summary":"Get detailed metric analytics for a specific post (discussion_board_post_metrics).","parameters":[{"name":"postMetricsId","description":"Unique ID of the post metric entity for which analytics are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post metric analytic data for the specified post.","typeName":"IDiscussionBoardPostMetric"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"Retrieves all available analytics data (views, comments, votes, reports counts, and recency) for a specific post metric, identified by its metric ID, from the discussion_board_post_metrics table. Suitable for in-depth review, trending analysis, or troubleshooting a particular post's performance. All access is traceable and requires moderator or admin privileges. Related endpoints: PATCH for searching and POST/PUT for inserting or updating metrics data.","path":"/discussionBoard/admin/postMetrics/{postMetricsId}","method":"get","description":"Get analytic metric details for a specific discussion board post. Returns views, comment, upvote/downvote, and report counters, last activity timestamps, and all analytic audit fields. Includes soft-deletion status and entity links as necessary. Access is limited to moderators and admins for compliance and incident response.\n\nErrors return not-found for invalid IDs, forbidden for insufficient privileges, and descriptive failures for technical issues. This endpoint cannot update metrics—it is read-only; use PUT for updates or POST for creation.\n","summary":"Get detailed metric analytics for a specific post (discussion_board_post_metrics).","parameters":[{"name":"postMetricsId","description":"Unique ID of the post metric entity for which analytics are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post metric analytic data for the specified post.","typeName":"IDiscussionBoardPostMetric"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new post metric record in the discussion_board_post_metrics table, supporting system analytics onboarding when a post is created, or when metrics tracking needs to begin. Used typically by system services/cron jobs, and restricted to admin operations, this endpoint requires all necessary counters and post reference info. Post metric records are used across operational dashboards, analytics, and engagement verification processes and are immutable for many analytical purposes.","path":"/discussionBoard/admin/postMetrics","method":"post","description":"Create system-tracked metrics for a post entity, including initial counts for views, votes, and comments. Typically used at post creation or to reinitialize metrics tracking for migrated/imported posts. Only available to admin roles for safety; errors on duplicate or invalid post references or non-admin requests.\n\nAll count and timestamp fields are validated for integrity. Any metric logs are atomic and strictly logged for audit and compliance. Related APIs include PUT for changing metrics, PATCH for search, and GET for detail view.","summary":"Create a new post metric record (discussion_board_post_metrics).","parameters":[],"requestBody":{"description":"Initial data to create a new post metric tracker.","typeName":"IDiscussionBoardPostMetric.ICreate"},"responseBody":{"description":"Created post metric tracker entity with initialized analytics.","typeName":"IDiscussionBoardPostMetric"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing post metric record in the discussion_board_post_metrics table, allowing admin users to correct or re-calculate counters as part of operational dashboard management or incident remediation. The endpoint ensures immutability for certain creation metadata, but allows numeric counters and last activity times to be updated as needed. Changes are fully audit-logged. Only accessible to admins. Related operations: POST (creation), PATCH (search), GET (detail), DELETE (remove/soft-delete).","path":"/discussionBoard/admin/postMetrics/{postMetricsId}","method":"put","description":"Update post metrics analytics record. Used for correcting engagement counters, recalculating votes, or repairing synchronization errors. Certain creation metadata is immutable.\n\nAccessible only by admin users; logs all changes for future auditing. Returns updated analytic record. Failure scenarios include insufficient permissions, invalid metric IDs, or illegal attempts to modify immutable fields. Linked to dashboard and analytic summary features for consistency.","summary":"Update an existing post metric analytic (discussion_board_post_metrics).","parameters":[{"name":"postMetricsId","description":"The ID of the post metric entity to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the post metric analytic record.","typeName":"IDiscussionBoardPostMetric.IUpdate"},"responseBody":{"description":"The updated post metric analytics entity.","typeName":"IDiscussionBoardPostMetric"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"This API endpoint deletes (soft-deletes) a post metric record from the discussion_board_post_metrics table, by marking the entity as deleted (timestamped), rather than physical removal. Required for operational log retention, GDPR compliance, and analytic history correction. Only available to admins, this action is atomic and fully audited in system logs. Related: POST (create), PUT (update), PATCH (search), GET (detail).","path":"/discussionBoard/admin/postMetrics/{postMetricsId}","method":"delete","description":"Soft-delete a post metrics analytic record by setting its deletion timestamp. This makes the metric invisible for standard analytics queries but retains it for audit and regulatory recovery. Cannot physically delete except by specific compliance processes.\n\nRequires admin privileges. Safeguards against repeated deletions (idempotency). Logs all delete actions and restricts recovery to exceptional cases. Fails with not-found for invalid IDs or when performed by non-admin users. Complements API search and GET operation for maintenance and compliance.","summary":"Soft-delete a post metrics analytics entity (discussion_board_post_metrics).","parameters":[{"name":"postMetricsId","description":"The ID of the post metrics entity to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve paginated, searchable analytics records for user-level engagement metrics (activity, participation, reporting, voting, reputation, etc.) from the discussion_board_user_metrics table. Filter and sort by post/comment/reputation counts, activity recency, and more. Returns paginated result sets for dashboards, gamification leaderboards, behavioral analytics, and trust scoring. Metrics serve moderation, gamification, and operational monitoring needs. Only visible to moderators and admins to protect engagement privacy.","path":"/discussionBoard/moderator/userMetrics","method":"patch","description":"Search, filter, and paginate user-level analytics for members of the discussion board. Returns comprehensive metrics including participation, voting, reporting, and reputation. Results may be sorted or filtered by count/range/time windows or user reference. Used for leaderboard generation, engagement health, and identifying key contributors or problematic actors.\n\nOnly accessible to moderators and admins for compliance, privacy, and operational needs. Result includes page and item totals and can exclude soft-deleted records. Handles invalid queries by returning informative error messages. Complements detail GET endpoint and CRUD APIs for metrics record management.\n","summary":"Search and retrieve paginated user metrics (discussion_board_user_metrics).","parameters":[],"requestBody":{"description":"Pagination, filter, and search criteria for user metrics query.","typeName":"IDiscussionBoardUserMetric.IRequest"},"responseBody":{"description":"Paginated set of user metrics analytics matching filters.","typeName":"IPageIDiscussionBoardUserMetric"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"Retrieve paginated, searchable analytics records for user-level engagement metrics (activity, participation, reporting, voting, reputation, etc.) from the discussion_board_user_metrics table. Filter and sort by post/comment/reputation counts, activity recency, and more. Returns paginated result sets for dashboards, gamification leaderboards, behavioral analytics, and trust scoring. Metrics serve moderation, gamification, and operational monitoring needs. Only visible to moderators and admins to protect engagement privacy.","path":"/discussionBoard/admin/userMetrics","method":"patch","description":"Search, filter, and paginate user-level analytics for members of the discussion board. Returns comprehensive metrics including participation, voting, reporting, and reputation. Results may be sorted or filtered by count/range/time windows or user reference. Used for leaderboard generation, engagement health, and identifying key contributors or problematic actors.\n\nOnly accessible to moderators and admins for compliance, privacy, and operational needs. Result includes page and item totals and can exclude soft-deleted records. Handles invalid queries by returning informative error messages. Complements detail GET endpoint and CRUD APIs for metrics record management.\n","summary":"Search and retrieve paginated user metrics (discussion_board_user_metrics).","parameters":[],"requestBody":{"description":"Pagination, filter, and search criteria for user metrics query.","typeName":"IDiscussionBoardUserMetric.IRequest"},"responseBody":{"description":"Paginated set of user metrics analytics matching filters.","typeName":"IPageIDiscussionBoardUserMetric"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Return analytic details for a specific user metric record from the discussion_board_user_metrics table for a given metrics ID. Reveals post, comment, upvote/downvote, report, and reputation counters, as well as last activity timestamps. Used for profile dashboard, moderation review, or trust/risk scoring of specific members. Accessible only to moderators and admins. Supports GET only; update or delete must use respective endpoints, and operations are all audit-logged.","path":"/discussionBoard/moderator/userMetrics/{userMetricsId}","method":"get","description":"Get complete analytics profile for a specified user_metrics ID, including all engagement and reputation counters. Used for reputation dashboards, moderation, and escalated incident reviews. Will include soft-deletion/active status and all audit fields.\n\nFailure returns not-found for invalid IDs, forbidden for non-privileged access, or 500-level errors for internal failure. Update and delete require separate endpoints. Complements metrics PATCH (search) and CRUD APIs.","summary":"Get analytic details for a specific user metric entity (discussion_board_user_metrics).","parameters":[{"name":"userMetricsId","description":"ID of user metrics analytic entity to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Analytics entity for the given user's participation and reputation.","typeName":"IDiscussionBoardUserMetric"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"Return analytic details for a specific user metric record from the discussion_board_user_metrics table for a given metrics ID. Reveals post, comment, upvote/downvote, report, and reputation counters, as well as last activity timestamps. Used for profile dashboard, moderation review, or trust/risk scoring of specific members. Accessible only to moderators and admins. Supports GET only; update or delete must use respective endpoints, and operations are all audit-logged.","path":"/discussionBoard/admin/userMetrics/{userMetricsId}","method":"get","description":"Get complete analytics profile for a specified user_metrics ID, including all engagement and reputation counters. Used for reputation dashboards, moderation, and escalated incident reviews. Will include soft-deletion/active status and all audit fields.\n\nFailure returns not-found for invalid IDs, forbidden for non-privileged access, or 500-level errors for internal failure. Update and delete require separate endpoints. Complements metrics PATCH (search) and CRUD APIs.","summary":"Get analytic details for a specific user metric entity (discussion_board_user_metrics).","parameters":[{"name":"userMetricsId","description":"ID of user metrics analytic entity to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Analytics entity for the given user's participation and reputation.","typeName":"IDiscussionBoardUserMetric"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new user metric analytic record in the discussion_board_user_metrics table. Used when onboarding a user, restoring metrics, or importing analytics for a new participant. Only available to admin roles, and all new records must pass integrity and uniqueness checks for user reference. All fields must be validated as per the analytic schema. All analytics onboarding is fully audit-logged, and entity IDs map to members. Related endpoints: PUT (update), PATCH (search), GET (detail), DELETE (remove).","path":"/discussionBoard/admin/userMetrics","method":"post","description":"Create an analytic metrics profile for a user, initializing all typical counters (posts, comments, votes, reports, reputation, timestamps). Required for analytics onboarding, user import, or recomputation. Restricted to admin roles; errors if member reference is missing or duplicate metrics exist.\n\nFields are strictly validated; all creation operations fully audit-logged. Complements PATCH (search), GET (retrieve), PUT (update), and DELETE (soft-delete, if supported).","summary":"Create a new user metrics analytic tracking record (discussion_board_user_metrics).","parameters":[],"requestBody":{"description":"Analytic profile and initialization for a user metrics entity.","typeName":"IDiscussionBoardUserMetric.ICreate"},"responseBody":{"description":"Created user metrics analytics profile entity.","typeName":"IDiscussionBoardUserMetric"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update an existing user metrics analytic entity in the discussion_board_user_metrics table, for post/comment/vote/report counters or reputation recalculation. Used for admin-triggered repair/recompute or as part of member activity review. Certain fields (member ID, initial creation timestamp) are immutable by policy. Only available to admins, and every correction is fully audit-logged for compliance review. Related endpoints: POST (create), PATCH (search), GET (detail), DELETE (soft-deletion, if supported).","path":"/discussionBoard/admin/userMetrics/{userMetricsId}","method":"put","description":"Update or recalculate analytic counters for user-level metrics (posts, comments, votes, reports, reputation, etc.). Used when analytics are corrected, recomputed, or member data is imported.\n\nFields related to user reference or entity creation are strictly immutable; updates are granularly logged and highly audited. Only accessible to admin roles. Failure scenarios are handled with descriptive errors. Use with search (PATCH) and detail (GET) endpoints, and for admin CLI/API management workflows.","summary":"Update an existing user metrics analytic record (discussion_board_user_metrics).","parameters":[{"name":"userMetricsId","description":"ID of the user metrics entity to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the user metrics analytic record.","typeName":"IDiscussionBoardUserMetric.IUpdate"},"responseBody":{"description":"The updated user metrics entity analytic record.","typeName":"IDiscussionBoardUserMetric"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"This operation deletes a specific user metrics record from the discussion board system. It refers to the 'discussion_board_user_metrics' table, which collects aggregated user-level analytics (posts count, comments count, engagement, reputation-score, etc.) for a member. Deletion is a hard delete, as there is no soft-delete or 'is_deleted' field on this table. Only admins are allowed to perform this operation to preserve business analytics integrity and prevent accidental or unauthorized deletions. Deleting a user metrics record IRREVERSIBLY removes all per-user stats, which can impact dashboards and leaderboards. Attempts to erase a non-existent user metrics record will produce a not-found error. The operation logs audit details for compliance and regulatory tracing. Related APIs include user metrics retrieval and administrative search endpoints.","path":"/discussionBoard/admin/userMetrics/{userMetricsId}","method":"delete","description":"Erases the user metrics record belonging to the specified user from the system. Only administrators are authorized to perform this operation, which involves the irreversible, hard deletion of all analytics data for the targeted user. User metrics deleted by this method cannot be recovered. This action is typically restricted to administrative or compliance reasons, and all deletions are audit-logged for traceability. Attempts to delete a nonexistent record will return an error indicating the record was not found.","summary":"Delete a user metrics record for a specific user by unique metrics ID (admin only, hard delete).","parameters":[{"name":"userMetricsId","description":"The unique identifier (UUID) of the target user metrics record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a paginated list of daily statistics from the 'discussion_board_daily_stats' table, supporting advanced filtering, search, and sorting for operational dashboards. Each record represents a day's OLAP aggregate metrics (posts_count, comments_count, votes_up_count, reports_count, new signups, etc.), which are crucial for monitoring community health and trends. Supports date range filtering, metric-based search, pagination, and result ordering (by any available metric). Only 'admin' users can access this data for business intelligence, auditing, or KPI reporting. This operation does not expose individual post or user details—only daily summary metrics. Related endpoints include single-day stats retrieval and daily stats record management (create, update, erase).","path":"/discussionBoard/admin/dailyStats","method":"patch","description":"Returns a paginated, searchable, and sortable list of daily discussion board statistics from the OLAP-aggregated 'discussion_board_daily_stats' table. Supports date interval filtering, metric-based search, flexible page sizing, and different sort orders for operational dashboards. The operation provides a powerful interface for business analytics, trend monitoring, usage growth, traffic spikes, and compliance auditing. Only administrators may use this endpoint, as the data reflects sensitive business performance information. The request body must specify search and pagination criteria. Returned records are summary-only and contain no personal or individual content details.","summary":"Search, filter, and paginate daily statistics records for business/operational analytics (admin only).","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for retrieving daily statistics records.","typeName":"IDiscussionBoardDailyStats.IRequest"},"responseBody":{"description":"A paginated list of daily statistics aggregates matching search and filter criteria.","typeName":"IPageIDiscussionBoardDailyStats"},"authorizationRole":"admin","name":"search"},{"specification":"This operation retrieves a single daily statistics record from the 'discussion_board_daily_stats' table by its unique identifier. It is intended for admin users to fetch OLAP summary metrics (posts, comments, votes, reports, signups, traffic, etc.) for a specific date. The daily stats ID refers to the database record's primary key (UUID), not the date itself. The returned entity includes all day-scope aggregate metrics and temporal audit data. Related APIs allow patch-based aggregate retrieval and record management for operational trends and KPI dashboards. Only admin users are authorized due to the sensitive nature of aggregate performance data.","path":"/discussionBoard/admin/dailyStats/{dailyStatsId}","method":"get","description":"Fetch a single daily statistics record for a specified date by its unique record ID. Only administrators are authorized, since the returned data covers complete system activity aggregates. This operation returns one OLAP-style aggregate entity, including all KPIs and audit timestamps. Used for operational dashboards, incident analysis, business reporting, or compliance verification. If the specified record ID does not exist, a not-found error will be returned. The dailyStatsId parameter must correspond to a valid record primary key (UUID), not the date itself.","summary":"Retrieve a single day's OLAP summary statistics by unique dailyStatsId (admin only).","parameters":[{"name":"dailyStatsId","description":"Unique identifier (UUID) for the target daily statistics record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete summary metrics record for the specified day.","typeName":"IDiscussionBoardDailyStats"},"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new daily statistics record in the 'discussion_board_daily_stats' table. The client (admin) must supply all required summary metric values—including date_utc, posts_count, comments_count, vote counts, report counts, new_user_signups_count, and other OLAP stats. Duplicate date_utc is not allowed and will result in a conflict error. Only admins can create daily stats records, used for manual correction, OLAP ETL recovery, or period initialization. All fields must be validated for range and business plausibility. Related endpoints include retrieval, updating, and deletion of individual daily stats records, as well as search APIs for business dashboards.","path":"/discussionBoard/admin/dailyStats","method":"post","description":"Creates a new daily statistics record representing a single day's aggregate OLAP metrics for the discussion board. The request body must fully specify all metrics and the target UTC date (date_utc). This operation is restricted to admin users for corrections, backfills, or custom ETL tasks. Creation with a duplicate date_utc will produce a conflict error, as only one stats record per day is allowed. All input data is validated for business reasonability. Upon success, the complete new record is returned. This is a privileged admin endpoint, and changes are fully audit-logged for compliance.","summary":"Create a new daily statistics aggregate record (admin only).","parameters":[],"requestBody":{"description":"The data and metrics composing the new daily statistics record.","typeName":"IDiscussionBoardDailyStats.ICreate"},"responseBody":{"description":"The newly created daily statistics record, as stored in the system.","typeName":"IDiscussionBoardDailyStats"},"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing daily statistics record by its unique identifier ('dailyStatsId'). It operates on the discussion_board_daily_stats table, allowing administrators to correct, overwrite, or patch OLAP aggregate metrics for a specific record. Daily stats records are immutable by date_utc but can be revised for reporting corrections, ETL adjustments, or compliance. Only admins can update OLAP stats; changes are strictly audit-logged for compliance. Input data is validated for metric plausibility. Attempts to update a non-existent record or produce duplicate date_utc will fail with an error. Related endpoints cover aggregate creation, retrieval, and deletion.","path":"/discussionBoard/admin/dailyStats/{dailyStatsId}","method":"put","description":"Updates the full set of metrics for an existing daily statistics record identified by 'dailyStatsId'. Only admin users may revise these records, typically for reporting error corrections or back-office OLAP data management. The request body must provide all required and optional fields, and business validation rules apply (e.g., one record per date). All updates are audit-logged for traceability. Attempts to update a nonexistent dailyStatsId will return an error. Modifying date_utc to clash with another record will also fail with a conflict error. Only admins are allowed.","summary":"Update a single daily statistics record's metrics by unique dailyStatsId (admin only).","parameters":[{"name":"dailyStatsId","description":"Unique identifier (UUID) of the daily statistics record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full set of metrics and fields to set for the target daily statistics record.","typeName":"IDiscussionBoardDailyStats.IUpdate"},"responseBody":{"description":"The updated daily statistics record as now stored in the system.","typeName":"IDiscussionBoardDailyStats"},"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes an existing daily statistics record from the 'discussion_board_daily_stats' table by its unique 'dailyStatsId'. Since OLAP stats are often the basis for high-level reports, only admins are allowed to perform this action, and all deletions are irrevocable (hard delete). There is no soft-delete column for compliance, so removed records are permanently gone. Audit logging ensures traceability. Related endpoints cover creation, retrieval, updating, and search for KPIs and operational dashboards. An error is returned if attempting to delete a record that does not exist.","path":"/discussionBoard/admin/dailyStats/{dailyStatsId}","method":"delete","description":"Permanently deletes the daily statistics record identified by 'dailyStatsId'. The operation is irreversible and is restricted to admins due to the high-impact nature of deleting OLAP aggregate data. Once deleted, the aggregate stats for that date are lost permanently, which can affect dashboards and trend analyses. Actions are logged for compliance and audit purposes. Deleting a non-existent dailyStatsId will return a not-found error.","summary":"Delete a daily statistics record by unique dailyStatsId (admin only, hard delete).","parameters":[{"name":"dailyStatsId","description":"Unique identifier (UUID) for the target daily statistics record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Create JWT-based authentication API operations for 'guest' role. Although the guest user is an anonymous visitor and doesn't go through registration, typical platform-wide API security and actor switching cases may require a standardized JWT flow for guests. This operation will mimic a 'signIn' endpoint for guest: it can issue and assign a 'guest token' (anonymous session), return a JWT payload with minimal rights, and set guest-only permissions. This supports security needs for guest access, legal audit logging, and access rate-limiting. Associated with the 'discussion_board_guests' schema, which stores only anonymous operational data. No registration (signUp) or password change is possible for guests, nor email verification or password reset.","description":"This operation allows an anonymous visitor (guest) to receive a JWT token for session tracking and legal audit. The operation references the discussion_board_guests schema, which provides persistent guest session tracking via session_token, user_agent, and ip_address fields. No registration is performed; instead, the operation records the guest's access attempt, provisions a session token, and returns a short-lived JWT containing an anonymous-guest role payload.","summary":"Authenticate a guest and issue a minimal JWT for guest access (discussion_board_guests).","parameters":[],"requestBody":{"description":"Guest anonymous device/auth info (user agent, IP) for session tracking and token issuance.","typeName":"IGuestAuthGuestSignInRequest"},"responseBody":{"description":"JWT metadata for guest session, plus setHeaders for Authorization. The token only asserts guest/anonymous rights, for tracking or API quota, not user identity.","typeName":"IGuestAuthGuestSignInResponse"},"authorizationRole":null,"name":"signIn","path":"/auth/guest/login","method":"post"},{"specification":"Ends a guest session or effectively logs out a guest. Since guests are anonymous, this operation simply removes or invalidates the associated guest JWT token and may update session data for analytics or auditing. Associated with the discussion_board_guests schema, this helps enforce API token expiry and session rate-limits even for unauthenticated access flows.","description":"Guest signOut operation nullifies the JWT token issued on guest session login. While guests do not have accounts to invalidate, this API removes the guest session token, records logout time or device change, and logs the access event to help with auditing and quota enforcement. There is no persistent data kept about the identity, but the action is registered for compliance.","summary":"Invalidate a guest session JWT token and log the logout event in discussion_board_guests.","parameters":[],"requestBody":null,"responseBody":{"description":"Response confirming guest logout/session end, no data needed.","typeName":"IGuestAuthGuestSignOutResponse"},"authorizationRole":"guest","name":"signOut","path":"/auth/guest/logout","method":"post"},{"specification":"Validates a provided JWT token for the guest role. Checks the structure, expiry, and minimal anonymous payload for a guest, without attempting any authentication beyond token verification. Tied to the discussion_board_guests schema for audit tracing and security event logging. This operation can be used to pre-flight guest-only actions or rate limiting, and returns the authentication status as well as basic audit for suspicious tokens.","description":"This validates that a client-provided guest JWT token is correctly issued, unexpired, and still considered valid for guest access. No user-specific authentication is required; it simply parses the token, verifies signature, and returns a guest-access flag if valid. Used for API security or quota logic for unauthenticated roles.","summary":"JWT validation for guest role (anonymous access), with audit tracing using discussion_board_guests.","parameters":[],"requestBody":{"description":"JWT token plus optional device/session info for validation. No user identity is provided or necessary for guest verification.","typeName":"IGuestAuthGuestValidateRequest"},"responseBody":{"description":"Validation status and details for a guest JWT token, for anonymous session access only.","typeName":"IGuestAuthGuestValidateResponse"},"authorizationRole":null,"name":"validateToken","path":"/auth/guest/validate","method":"post"},{"specification":"This operation allows new users to register as 'member' accounts. It uses the 'discussion_board_members' table, which contains fields such as email, password_hash (for authentication), and nickname. Email verification is required for access elevation. Upon registration, a new member row is created in the table, with hashed password storage and audit trail fields logged. This operation is essential for enabling user participation in the board and for secure account creation. The 'setHeaders' field in the response body enables the client to automatically store the issued JWT token for authenticated API usage. If email verification is mandatory, a follow-up process may be triggered but is not handled directly here.","description":"This endpoint registers a new discussion board member using fields from the 'discussion_board_members' table, specifically email, password_hash (hashed from user input), and nickname. The system enforces unique email and nickname constraints according to schema comments. Email verification status is set to false at registration, and status is typically set to 'pending_verification'. All audit trail metadata (e.g., joined_at, created_at) is managed in the model according to its documentation. Security note: Initial registration is public but all data is subject to input validation and stringent hashing of passwords. Immediately upon successful registration, the system issues a JWT access token, included in the 'setHeaders' property of the response body for secure session management. This operation may trigger additional workflow (e.g., sending verification emails) as referenced in other endpoints, but those flows are not executed here. Error handling returns specific messages for duplicate email/nickname or schema validation failures. Related API: login, email verification flows.","summary":"Register a new member (discussion_board_members table) and issue initial JWT token","parameters":[],"requestBody":{"description":"Registration form data for new member sign-up: email, password, nickname, and optional avatar URI. Password is hashed for secure storage.","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"JWT-authenticated session object with Authorization header in setHeaders, plus basic profile data.","typeName":"IDiscussionBoardMember.ISession"},"authorizationRole":null,"name":"signUp","path":"/auth/member/register","method":"post"},{"specification":"This operation authenticates existing 'member' users using credentials stored in the 'discussion_board_members' table. Login is possible with a previously registered and verified email and corresponding password (hashed). On success, the endpoint returns JWT tokens for session authentication. It checks the status of the account to ensure the user is active and not withdrawn or suspended. All login attempts are recorded for security audit via the external_auth_logs table (referenced in the schema).","description":"This endpoint allows a user to log in to their member account by providing valid email and password corresponding to the 'discussion_board_members' schema (email and password_hash fields). Password verification uses a secure hash comparison with stored values. The operation checks for proper status (e.g., not 'withdrawn', 'suspended'). On successful authentication, a JWT access token is issued to the user, enabling session-based authentication for subsequent API requests. Email verification status is also checked, and access may be limited until verified. All failed and successful login attempts are logged in the external auth logs for security and compliance as referenced in the schema documentation. This operation integrates with the main authentication workflow and is required for all member-specific services. Related: registration, token validation, password change.","summary":"Authenticate member and issue JWT token for session (discussion_board_members table)","parameters":[],"requestBody":{"description":"Login payload: email and password to be authenticated against stored hash in discussion_board_members.","typeName":"IDiscussionBoardMember.ILogin"},"responseBody":{"description":"JWT-authenticated session object and profile info on successful login.","typeName":"IDiscussionBoardMember.ISession"},"authorizationRole":null,"name":"signIn","path":"/auth/member/login","method":"post"},{"specification":"This operation allows a logged-in member (authenticated via JWT) to securely log out, invalidating the current session on the server side. The backend ensures session termination and token invalidation, preventing further use of the access token. Although the 'discussion_board_members' schema does not contain persistent token storage, best practices require server-side token blacklisting or audit logging via external operations logs for full compliance. No request body is needed; the action is performed for the authenticated session only.","description":"This endpoint logs out the currently authenticated member by invalidating their JWT session token. As the schema for 'discussion_board_members' does not include explicit session fields, token invalidation and session management are handled through in-memory blacklist, server process, or operation logs per security best practices. Operation logs and audit trails are maintained for compliance. This operation is protected and only accessible to users with the 'member' JWT role. Error handling covers expired or already-invalidated sessions. This operation complements login, token validation, and password change endpoints for a complete authentication lifecycle workflow.","summary":"Securely log out the currently authenticated member (JWT-based session)","parameters":[],"requestBody":null,"responseBody":{"description":"Logout confirmation response (success status) - no session data returned.","typeName":"IStd.IConfirmation"},"authorizationRole":"member","name":"signOut","path":"/auth/member/logout","method":"post"},{"specification":"This operation validates a JWT token for a member and checks for the presence and status of the user in the 'discussion_board_members' table. It returns the authentication status, including whether the token is valid, the associated user is active and not withdrawn/suspended (using the status field), and whether email is verified for elevated permissions. Field mappings and status validation reference the 'discussion_board_members' schema. The validation does not require role-based path parameters and directly processes the provided token.","description":"This endpoint validates the provided JWT token for a member user. It checks that the token is properly signed and not expired, and then confirms that the associated user is active by consulting the 'discussion_board_members' table (particularly the status and email_verified fields). If invalid or if the user has been withdrawn or suspended, an appropriate error or status code is returned. This endpoint is used by clients to determine if supplementary authentication is required before accessing protected resources. The operation supports scenarios where the client may have lost session state or needs to verify token validity after application startup or network disruptions. No authorizationRole is required, as the endpoint simply processes the incoming token.","summary":"Validate member JWT token and return authentication/account status (discussion_board_members table)","parameters":[],"requestBody":{"description":"JWT token validation request: typically a token string to be verified.","typeName":"IStd.ITokenCheck"},"responseBody":{"description":"Token validation status and associated member account state.","typeName":"IStd.IAuthStatus"},"authorizationRole":null,"name":"validateToken","path":"/auth/member/validate","method":"post"},{"specification":"This operation allows authenticated members to update their password with verification of the current (old) password. The 'discussion_board_members' schema contains the 'password_hash' field that is compared against the provided current password after hashing. On success, the new password is securely hashed and stored, updating the member's row in the database (with proper audit trail fields updated). This endpoint is required for credential lifecycle management and is only accessible to logged-in 'member' users.","description":"This endpoint enables authenticated members to change their login password. It verifies the supplied current password by hashing and comparing it to the stored 'password_hash' in the 'discussion_board_members' table. If verification succeeds, the new password is hashed and saved in the same field. All updates are tracked in the updated_at audit field as required by the schema documentation. Only authenticated users can access this operation. This endpoint helps enforce secure password management and is a critical component for maintaining account integrity. Related operations: registration, login, session logout, token validation. Error conditions handle current password mismatch and schema validation rules for new password strength.","summary":"Change password for authenticated member (discussion_board_members table)","parameters":[],"requestBody":{"description":"Password change payload: old password for verification, and new password for update.","typeName":"IDiscussionBoardMember.IChangePassword"},"responseBody":{"description":"Password change confirmation - no password data returned.","typeName":"IStd.IConfirmation"},"authorizationRole":"member","name":"changePassword","path":"/auth/member/password","method":"put"},{"specification":"This endpoint enables registration for new moderator accounts. It targets the discussion_board_moderators table, which contains the moderator-specific data in the system. The required fields for registration are 'email' (unique per moderator) and 'assigned_by_admin_email' (to track which admin assigned the role). A registration process should record the assigned_at timestamp, initial status, and all audit fields. On success, the API issues a JWT token and includes it in the response for immediate authentication. The 'setHeaders: { Authorization: string }' field is provided for client SDKs to automate further authenticated API usage. This endpoint should only be used by system admins, as moderator role assignment is a privileged action. The response object explicitly documents the moderator's identity and initial token, and includes the setHeaders as required by policy.","description":"This operation registers a new moderator, inserting a record into the discussion_board_moderators table. Mandatory fields are the moderator's email and the assigning admin's email. Upon registration, a JWT is issued for the moderator. All creation and assignment times, status codes, and unique email constraints enforced as per schema description. JWT is returned in the response body and as setHeaders for client SDK auto-injection. This operation is only allowed by admins; must record all operations in audit logs. Email must not collide with existing moderator, and status must be set to 'active'. Any failed operation results in a clear error code, consistent with Prisma schema practices.\n\nSecurity is enforced via role-checking on the assigning account. Audit trails must be updated for every operation, and the response data structure must include the setHeaders: { Authorization: string } object. The registration must not complete if a duplicate email exists among moderators. Rollbacks and error messages should map to Prisma constraint errors for unique fields.\n\nThis endpoint aligns with the platform’s RBAC model, reflecting how new moderators are set up, and integrates with downstream authentication logic for JWT management.\n\nRelated routes: moderator login, password change, and assignment audit APIs. Preconditions: caller is an admin, and the email does not already exist in the moderators table. All identity and status codes are as defined in the moderator table comments.\n\nRelated operations include signIn (login), signOut (logout), validateToken (JWT verification), changePassword (credential update). These work together for the complete authentication flow.","summary":"Register a new moderator (discussion_board_moderators).","parameters":[],"requestBody":{"description":"Moderator registration info including assigned_by_admin_email and email.","typeName":"IModerator.SignUp"},"responseBody":{"description":"New moderator record and assigned JWT token with setHeaders for SDK.","typeName":"IModerator.SignUpResponse"},"authorizationRole":null,"name":"signUp","path":"/auth/moderator/register","method":"post"},{"specification":"Standard moderator authentication endpoint for issuance of JWT tokens. The endpoint uses the 'email' and 'password' credentials for login. Authenticates against the discussion_board_moderators table, which includes primary moderator info and the password_hash field (if local authentication is used). Upon successful login, a JWT token is issued for session management. This endpoint forms the authentication core for moderator users. The API performs strict checking against moderator status.<br><br>If login succeeds, issues token in response body and Authorization header. Otherwise, returns precise errors based on Prisma schema logic (e.g., status not 'active', email does not exist, password mismatch). Audit trail entries should be updated in operation logs for every attempt.<br><br>JWT is used for all subsequent resource access. Security policy requires login audit and rate limiting.","description":"Authenticate a moderator using email and password (if present in schema). On success, issues a JWT as per standard. Auth is denied if moderator is suspended, revoked, or email does not exist. Uses the email field (unique) and password plus status and timestamp audit as described in schema. Errors should distinguish not-found, wrong password, and not-active status. Audit logs are updated as per schema’s compliance requirements.<br><br>Integrates into the standard JWT-based RBAC system: access token is used for all subsequent moderator-authorized actions. Downstream operations such as session creation, role checks, and notification services rely on this entry point.<br><br>Related: signUp (registration), signOut (logout), validateToken (JWT check), changePassword (password update), all using moderator role context.","summary":"Moderator authentication (login) using the discussion_board_moderators schema.","parameters":[],"requestBody":{"description":"Moderator login information including email and password.","typeName":"IModerator.SignIn"},"responseBody":{"description":"Result of authentication, including issued JWT token.","typeName":"IModerator.SignInResponse"},"authorizationRole":null,"name":"signIn","path":"/auth/moderator/login","method":"post"},{"specification":"Logout endpoint for moderator accounts, leveraging JWT session invalidation within the RBAC structure. This operation targets current login session: on execution, invalidates the JWT so that it cannot be used again. For the discussion_board_moderators table, status and last activity may be logged but token blacklisting is stateless unless advanced tracking is adopted. The route expects the caller to be authenticated as a moderator via JWT. No request body is needed. On execution, successful logout returns standard acknowledgment; no data is returned upon error (token not found/expired etc.).","description":"This operation logs out an authenticated moderator (uses the JWT for identification). Session and status audit logs are updated for compliance and operational tracking as described in the schema. Token is invalidated at the access control layer: standard practice for JWT logout (for environments where stateless JWT is used, this typically means client discards the token). If system uses server-blacklist or timestamp logic, admin policy in policy documents and operation log must record this event.","summary":"Moderator logout endpoint (discussion_board_moderators).","parameters":[],"requestBody":null,"responseBody":{"description":"Acknowledgment of moderator logout event.","typeName":"IModerator.SignOutResponse"},"authorizationRole":"moderator","name":"signOut","path":"/auth/moderator/logout","method":"post"},{"specification":"Token validation endpoint for moderator JWTs. Receives a JWT in the request and verifies its authenticity and validity according to signature, expiry, and status of the account. The endpoint focuses on authentication/authorization integrity for moderator accounts, as defined in the discussion_board_moderators schema. This operation is used mainly by SDKs and clients for proactive session validation and error handling. The result indicates whether the provided token is valid, revoked, or expired, along with moderator’s basic identity if valid.","description":"This endpoint checks the integrity and validity of a JWT issued to a moderator. Verifies token against cryptographic signature and checks that the moderator's status in discussion_board_moderators is 'active' and not revoked or suspended. Useful for front-end SDKs and clients before making privileged calls. Invalid tokens yield error with reason (expired, tampered, revoked, etc.). Strongly recommended for every sensitive operation flow as per policy matrix. Also logs activity for security audit. Response includes moderator identification if token is valid. Related: signUp (registration), signIn (login), signOut (logout), changePassword (credential update), all operating within the moderator RBAC context.","summary":"Validate moderator JWT token (discussion_board_moderators).","parameters":[],"requestBody":{"description":"Token payload for validation.","typeName":"IModerator.ValidateTokenRequest"},"responseBody":{"description":"Validation result and moderator profile if valid.","typeName":"IModerator.ValidateTokenResponse"},"authorizationRole":null,"name":"validateToken","path":"/auth/moderator/validate","method":"post"},{"specification":"Allows an authenticated moderator to update their password. Requires the current password (for verification), the new password, and may optionally include auditing context (last updated timestamp, actor). Operates on the discussion_board_moderators table, targeting the password_hash and status fields. Validates that the current password matches before allowing the update. Changes are logged in operation logs for compliance. Status changes and updated_at timestamps must be refreshed on every successful update. If the current password is incorrect or update fails due to db constraint, a clear error code and message are returned.","description":"Allows a moderator to change their password, using their current password for verification. Updates the password_hash field in the discussion_board_moderators table, and updates status, updated_at, and other audit fields. Current password must be verified to prevent unauthorized password changes. Audit logs capture change events. Any failure in update (bad password, db constraint violation) is returned as a structured error. This operation is central to moderator account security and follows schema comments for audit/compliance. Related to signIn/signOut/validateToken for session refreshment.","summary":"Moderator password change (discussion_board_moderators).","parameters":[],"requestBody":{"description":"Moderator password change info: current password, new password.","typeName":"IModerator.ChangePassword"},"responseBody":{"description":"Password change result acknowledgment.","typeName":"IModerator.ChangePasswordResponse"},"authorizationRole":"moderator","name":"changePassword","path":"/auth/moderator/password","method":"put"},{"specification":"Implements admin-only JWT authentication and authorization flows for the discussion board system. This operation creates a new admin account in the 'discussion_board_admins' table, issuing JWT tokens upon successful registration. The core fields used are 'email', 'password_hash' (as password input), and 'status', with audits tracked by 'created_at' and 'assigned_at'. The endpoint adheres to policy that only properly authenticated admin creation is allowed, backing all operations with the existing schema structure.","description":"This endpoint enables the registration of a new administrator by creating a record in the discussion_board_admins schema. It leverages the 'email', 'password_hash', and 'status' fields to uniquely identify and securely store admin credentials. On successful completion, JWT access and refresh tokens are issued, with 'assigned_at' and 'created_at' fields providing an audit trail.\n\nSecurity is paramount; registration is restricted to dedicated admin workflows. Passwords are hashed using secure algorithms and not stored in plaintext. The endpoint does not create or update related moderator/member tables, ensuring role isolation and strict privilege elevation.\n\nThis operation works closely with sign-in and validation endpoints to support policy-compliant system access. Auditability is enforced through explicit field use, and 'status' supports workflow like 'active', 'pending', or 'suspended' per business logic.\n\nNo email verification step is included here, as admins are provisioned only by existing superusers. Any errors (e.g., duplicate email, weak password) return clear failure codes. Related: signIn, signOut, validateToken, changePassword.","summary":"Register a new admin (discussion_board_admins) and issue a JWT token set.","parameters":[],"requestBody":{"description":"Registration information for a new admin account, including email and password.","typeName":"IDiscussionBoardAdmin.ICreate"},"responseBody":{"description":"Admin account creation result and JWT token set with setHeaders for SDK auto-auth.","typeName":"IDiscussionBoardAdminAuthResponse"},"authorizationRole":null,"name":"signUp","path":"/auth/admin/register","method":"post"},{"specification":"Admin sign-in workflow for the discussion board, authenticating against the 'discussion_board_admins' table. Utilizes 'email' and 'password_hash' fields for credential verification, returning JWT tokens on success. Logs successful logins via 'last_login_at'. No refresh token storage or session tracking fields are present; only Access/Refresh tokens are returned to the client. Business logic ensures only 'active' admins may sign in.","description":"This endpoint processes administrator login attempts by verifying credentials against the 'email' and 'password_hash' fields in the discussion_board_admins schema. On success, new JWT access and refresh tokens are issued, and the 'last_login_at' field is updated for audit purposes.\n\nOnly accounts with 'status' set to 'active' may authenticate. The system hashes the submitted password for secure comparison; plain-text password storage is never used. This endpoint is integral to the entire admin authentication flow but is kept isolated from member/moderator logins for strong privilege control.\n\nNo session or refresh token storage is present at the schema level—token management is stateless, derived from credential check and status. Related endpoints: signUp, signOut, validateToken, changePassword.","summary":"Sign in as an admin (discussion_board_admins) and receive JWT tokens.","parameters":[],"requestBody":{"description":"Admin login credentials: email and password.","typeName":"IDiscussionBoardAdmin.ILogin"},"responseBody":{"description":"Login result with JWT access and refresh tokens.","typeName":"IDiscussionBoardAdminAuthResponse"},"authorizationRole":null,"name":"signIn","path":"/auth/admin/login","method":"post"},{"specification":"Session-revoking operation for admin accounts, allowing an authenticated admin to invalidate their current JWT session. This is accomplished by blacklisting the active token on the server, but with stateless JWT and no schema-level token tracking, actual revocation is implemented as an SDK/local deletion and server-side middleware block. Only authenticated admins may invoke this endpoint.","description":"This admin-only endpoint revokes the current JWT token used for API access. While the discussion_board_admins schema does not provide persistent token/session fields, token invalidation is achieved by client deletion and server-side middleware enforcement (stateless JWT).\n\nThis operation is important for admins needing to securely end their sessions, e.g., when using public/shared devices. Admins must be authenticated via a valid access token to use this route; no business logic affects persistent data.\n\nSince JWT is stateless, logout is enforced on the client and within backend middleware (e.g., adding JWT's jti to blacklist if supported). Related: signUp, signIn, validateToken, changePassword.","summary":"Sign out current authenticated admin (invalidate JWT session).","parameters":[],"requestBody":null,"responseBody":{"description":"Confirmation of sign-out/session invalidation. No data returned on normal success.","typeName":"IVoidSuccess"},"authorizationRole":"admin","name":"signOut","path":"/auth/admin/logout","method":"post"},{"specification":"Token validation endpoint for administrators. This operation accepts a JWT token for verification but does not check or modify the database directly, as there is no schema-level token persistence field. Instead, the server verifies the token's integrity and validity (signature, exp, etc.), and returns the verified status and decoded JWT claims for current session context. Does not require authentication: validates any provided token.","description":"Enables external systems or clients to check the validity of a JWT token for an admin account. This operation is stateless and does not interact directly with the discussion_board_admins schema, as there are no refresh token or session tracking fields available.\n\nJWT verification includes signature, expiry, and claims. No mutation to the schema is performed, and admin account status ('status' field) is checked to ensure only valid users pass. No persistent audit log is written as per current schema.\n\nClients can request this endpoint to check token expiration or privilege before further calls. Related: signUp, signIn, signOut, changePassword.","summary":"Validate an admin JWT token (checks signature, exp, claims).","parameters":[],"requestBody":{"description":"JWT token value to be validated.","typeName":"IValidateToken.Request"},"responseBody":{"description":"Validation result with session info, decoded JWT, and status code.","typeName":"IValidateToken.Response"},"authorizationRole":null,"name":"validateToken","path":"/auth/admin/validate","method":"post"},{"specification":"Allows currently authenticated admins to update their password in the discussion_board_admins table by providing both the current and new password. Utilizes 'password_hash' field for secure password storage and 'updated_at' for audit. Only authenticated admin users may perform this operation. No password recovery, complexity enforcement, or password history is handled by the schema, so enforcement is implemented in business logic only.","description":"Authenticated admin users can change their account password by supplying both their current and new password values. The endpoint securely hashes the new password and updates the 'password_hash' field in the discussion_board_admins schema, recording the time in the 'updated_at' field.\n\nOnly the authenticated user themselves may call this operation. No password reset, recovery, or email verification features are provided at the schema level—this endpoint is for authenticated contextual updates only.\n\nBusiness logic should enforce password complexity and non-reuse, as the schema does not track this. Related: signUp, signIn, signOut, validateToken.","summary":"Change password for current admin (discussion_board_admins).","parameters":[],"requestBody":{"description":"Payload with old and new password strings for password change.","typeName":"IDiscussionBoardAdmin.IChangePassword"},"responseBody":{"description":"Success of password change operation.","typeName":"IVoidSuccess"},"authorizationRole":"admin","name":"changePassword","path":"/auth/admin/password","method":"put"}]