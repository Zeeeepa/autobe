[{"specification":"This operation retrieves the complete list of available discussion board categories. It operates on the discussion_board_categories table, which is responsible for implementing the business requirement of persistent, configurable categorized discussion areas. Each record in this table represents a unique category identified by a category name, and may be associated with an optional description. Additional metadata such as creation, update, and (potential) soft deletion timestamps are included to support audit trail and compliance features. Categories are used for assigning and filtering posts and are critical for structuring discussions and managing access controls as referenced in the requirements documentation. The API does not require parameters and returns an array or paginated set of categories.","path":"/discussionBoard/categories","method":"get","description":"Fetch the entire list of discussion board categories for discovery, navigation, and assignment purposes. This endpoint provides access to all categories, including metadata such as name, optional description, creation and updated timestamps, and potential soft-deleted state (via deleted_at).\n\nThis API serves both guest and authenticated users, supporting full category browsing by any frontend needed for post creation, filtering, or category management. Guests will only see non-deleted (active) categories, while privileged users (admins or moderators) may see all, including soft-deleted ones, depending on business logic in the implementation layer.\n\nFetches from the discussion_board_categories table and is used in conjunction with operations like creating or editing posts, managing tags for categories, or auditing category configuration. Access to this API is broadly open for system usability, and errors may include database connectivity issues, but not permission errors unless fine-grained access control exists downstream.","summary":"Retrieve a full listing of all board categories from the discussion_board_categories table.","parameters":[],"requestBody":null,"responseBody":{"description":"A list or paginated result of all categories, with metadata for each category record.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"This operation retrieves a filtered, searched, and/or paginated list of discussion board categories using search parameters. It operates over the discussion_board_categories table, which stores category definitions with fields like name, description, and timestamps. Advanced search allows filtering by creation/update times, name, or other business-specified fields. This supports business requirements for category administration, audit, and discovery. Used for admin UIs or power-user queries.","path":"/discussionBoard/admin/categories","method":"patch","description":"This operation allows searching, paginating, and sorting categories to support administrative tasks or features such as configuration UIs and audit interfaces. Search criteria may include category name, creation or update time ranges, and whether to include soft-deleted categories (deleted_at).\n\nIt returns a paginated response in which each entry is a category summary or detailed view, as appropriate to the request. The API operates directly on the discussion_board_categories model, referencing only those fields present in the schema. Security controls may restrict certain filters (such as viewing soft-deleted categories) to admin or moderator roles.\n\nThe operation integrates with client-side filtering tools and can be combined with operations such as category creation or detailed fetch. Errors may be returned if validation or database connection fails.","summary":"Search, paginate, and filter categories in the discussion_board_categories table.","parameters":[],"requestBody":{"description":"Filtering, pagination, and search criteria for category queries.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated results containing categories matching search criteria.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"This operation retrieves a filtered, searched, and/or paginated list of discussion board categories using search parameters. It operates over the discussion_board_categories table, which stores category definitions with fields like name, description, and timestamps. Advanced search allows filtering by creation/update times, name, or other business-specified fields. This supports business requirements for category administration, audit, and discovery. Used for admin UIs or power-user queries.","path":"/discussionBoard/moderator/categories","method":"patch","description":"This operation allows searching, paginating, and sorting categories to support administrative tasks or features such as configuration UIs and audit interfaces. Search criteria may include category name, creation or update time ranges, and whether to include soft-deleted categories (deleted_at).\n\nIt returns a paginated response in which each entry is a category summary or detailed view, as appropriate to the request. The API operates directly on the discussion_board_categories model, referencing only those fields present in the schema. Security controls may restrict certain filters (such as viewing soft-deleted categories) to admin or moderator roles.\n\nThe operation integrates with client-side filtering tools and can be combined with operations such as category creation or detailed fetch. Errors may be returned if validation or database connection fails.","summary":"Search, paginate, and filter categories in the discussion_board_categories table.","parameters":[],"requestBody":{"description":"Filtering, pagination, and search criteria for category queries.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated results containing categories matching search criteria.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"This operation retrieves a single discussion board category by its unique identifier. Fetches the corresponding record from discussion_board_categories, which supports persistent, auditable, and uniquely identified category assignment as per requirements. Used in post creation/edit workflows, moderation UIs, and configuration auditing.","path":"/discussionBoard/categories/{categoryId}","method":"get","description":"Obtain the full details for a specific category by its ID, including name, optional description, creation and update timestamps, deleted_at if soft-deleted, and any relevant audit information. This is necessary for populating edit forms, viewing category information in moderation/admin interfaces, or associating posts during post creation flows.\n\nCategory lookups cross-reference the discussion_board_categories table and return exact, schema-based attributes, supporting systems where categories may be recovered from soft deletion or audited for configuration changes. Errors are returned if the category does not exist or the user lacks permission (e.g., for soft-deleted records).\n\nThis operation is often used prior to category modification, deletion, or assignment in other objects and may be restricted for viewing deleted categories.","summary":"Retrieve a specific category (by id) with all metadata from discussion_board_categories.","parameters":[{"name":"categoryId","description":"Unique identifier of the category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete record for the category specified by id.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"This operation creates a new category for the discussion board by inserting a new record into the discussion_board_categories table. Required fields are category name (unique), optional description; creation and updated timestamps are set automatically. This operation supports business requirements for configurable category structures, administrative board management, and audit/logging by automatically generating timestamps. Name uniqueness is strictly enforced at the schema/datastore level.","path":"/discussionBoard/admin/categories","method":"post","description":"Allows an admin to create a new discussion category for organizing posts and discussions. The required data includes the category name (must be unique), and optionally a description. Creation triggers audit and configuration update flows as referenced in the requirements.\n\nExecutes an INSERT against the discussion_board_categories table, with automated timestamp handling (created_at). This operation supports board extensibility and dynamic changes to category structure. Only users with sufficient privilege—typically admins—may invoke this operation, and errors may result from name collisions or access violations. The API returns the newly created category’s record if successful.","summary":"Create a new category in the discussion_board_categories table.","parameters":[],"requestBody":{"description":"Information for the new category, mainly name (unique) and optional description.","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"The newly created category including all metadata.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"This operation updates the properties of an existing discussion board category. Modifies fields in discussion_board_categories identified by unique id: typically the name and/or description, with updated_at set to the current time. Used for administration, board configuration, and compliance-audit needs. Name uniqueness is enforced (must not conflict with another active category). Only updatable fields defined in the Prisma schema may be changed (name, description).","path":"/discussionBoard/admin/categories/{categoryId}","method":"put","description":"Allows an admin to update the name and/or description of an existing discussion board category. The operation finds the category by id and sets the updated fields per the request, also updating updated_at. Name uniqueness is checked to prevent duplicates, and only fields that are present in the schema (name, description) are modifiable.\n\nPerforms validations on input and returns the new state of the category, including all schema-defined metadata. Errors may result from not found, name collision, unauthorized access, or invalid parameters. Only administrators—all changes are logged for audit purposes as required by compliance policies.","summary":"Update the name and/or description of an existing category by id.","parameters":[{"name":"categoryId","description":"Unique identifier of the category to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update: name and/or description.","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"The updated category record reflecting the new state.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"This operation performs a soft delete of a category by setting the deleted_at timestamp in discussion_board_categories. The record is not physically removed, allowing recovery or audit as required by business and compliance policies. This is aligned with the schema, which makes deleted_at nullable. The operation is typically irreversible by regular users and reserved for administrators. Related posts and assignments must reference category state correctly.","path":"/discussionBoard/admin/categories/{categoryId}","method":"delete","description":"Soft-deletes the specified category by setting the deleted_at field for audit and compliance purposes. The API accesses the category by id and updates only the deleted_at column, preserving the record for future recovery, reporting, or rollback by privileged users (e.g., admins).\n\nAccess to this operation is strictly limited to administrators per the requirements and schema setup. Audit trails are automatically updated, and related business logic ensures that soft-deleted categories no longer appear to regular users during category selection or post creation.\n\nPost-operation, associated posts or assignments retain a logical link to the now-deleted category for historical tracking and auditability.","summary":"Soft-delete (set deleted_at) a category by id, retaining audit trail.","parameters":[{"name":"categoryId","description":"Unique identifier of the category to delete (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation lists all tags in the discussion_board_tags table, providing the ability to browse tags that support post categorization, filtering, and UI highlighting as required by the business spec. Tag fields include label (unique), description, color code, and audit timestamps. Used for tag browsing, selection, admin review, and analytics.","path":"/discussionBoard/tags","method":"get","description":"Fetches all discussion board tags for tag assignment, navigation, filtering, or configuration. Each tag includes label, optional description for clarity, optional color for UI display/branding, creation and modification timestamps, and deleted_at for soft-deletion state.\n\nThis operation is widely accessible, allowing guests and authenticated users to see active tags. Privileged roles (admin, moderator) may additionally view soft-deleted tags, depending on permissions. All data are pulled from the discussion_board_tags table according to the normalized schema.\n\nInvoked by tag pickers, admin UIs, analytics systems, or configurable tag-assignment features. Error scenarios cover DB issues or restriction of soft-deletes to privileged roles.","summary":"Retrieve the full list of tags from discussion_board_tags table.","parameters":[],"requestBody":null,"responseBody":{"description":"A paginated or full response containing all discussion board tags.","typeName":"IPageIDiscussionBoardTag"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"This operation searches, filters, and paginates results from the discussion_board_tags table using search criteria such as partial label match, creation/update time, or inclusion/exclusion of soft-deleted tags. Implements advanced selection for tag management and analytics tools as required by business and audit requirements. Used in admin/moderator interfaces for efficient tag inventory management.","path":"/discussionBoard/admin/tags","method":"patch","description":"Enables searching, paginating, and sorting tags in bulk according to flexible filters such as label substring, date ranges, or soft-deleted status for advanced inventory, configuration, or audit workflows. Client UIs can leverage this for tag administration, analytics, or pre-assignment reviews.\n\nWorks off the discussion_board_tags schema and only returns fields defined therein. Bulk search responses are paginated for scalability. Privileged access may be required for viewing deleted tags or certain analytics fields.\n\nIntegrates with category assignment systems, analytics dashboards, and tag curation workflows as referenced in the requirements documentation. Errors may arise from validation issues or lack of permission for advanced queries.","summary":"Advanced search/filter of tags in the discussion_board_tags table.","parameters":[],"requestBody":{"description":"Tag search criteria, pagination, and filtering data.","typeName":"IDiscussionBoardTag.IRequest"},"responseBody":{"description":"Paginated results for tags matching provided search criteria.","typeName":"IPageIDiscussionBoardTag"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"This operation searches, filters, and paginates results from the discussion_board_tags table using search criteria such as partial label match, creation/update time, or inclusion/exclusion of soft-deleted tags. Implements advanced selection for tag management and analytics tools as required by business and audit requirements. Used in admin/moderator interfaces for efficient tag inventory management.","path":"/discussionBoard/moderator/tags","method":"patch","description":"Enables searching, paginating, and sorting tags in bulk according to flexible filters such as label substring, date ranges, or soft-deleted status for advanced inventory, configuration, or audit workflows. Client UIs can leverage this for tag administration, analytics, or pre-assignment reviews.\n\nWorks off the discussion_board_tags schema and only returns fields defined therein. Bulk search responses are paginated for scalability. Privileged access may be required for viewing deleted tags or certain analytics fields.\n\nIntegrates with category assignment systems, analytics dashboards, and tag curation workflows as referenced in the requirements documentation. Errors may arise from validation issues or lack of permission for advanced queries.","summary":"Advanced search/filter of tags in the discussion_board_tags table.","parameters":[],"requestBody":{"description":"Tag search criteria, pagination, and filtering data.","typeName":"IDiscussionBoardTag.IRequest"},"responseBody":{"description":"Paginated results for tags matching provided search criteria.","typeName":"IPageIDiscussionBoardTag"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"Fetch a single discussion_board_tags record by its unique id. Supports workflows that require the full details of a tag for curation, UI management, analytics, and assignment. This operation is based on direct lookup against the unique PK within the tags schema.","path":"/discussionBoard/tags/{tagId}","method":"get","description":"Fetches a single tag record by id, including label, description, color, timestamps, and soft-delete state as stored in the discussion_board_tags schema. Used for displaying tag details in configuration panels, edit dialogs, tag association UIs, and moderation systems.\n\nSupports validation and error reporting for not found or access denied scenarios. Roles may affect visibility for soft-deleted tags. This operation is critical before any tag update or deletion, or to support audit/compliance logic around tag history.","summary":"Fetch details of a tag (by id) from discussion_board_tags table.","parameters":[{"name":"tagId","description":"Unique identifier of the tag.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full tag record matching the id, with all fields from the schema.","typeName":"IDiscussionBoardTag"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Insert a new tag into the discussion_board_tags table, using the required label (must be unique) and optional description and color. Supports admin-level extensibility for controlled vocabularies and user-facing tag assignment per requirements. Audit fields set automatically to enable compliance logging and historical analysis. Enforces business uniqueness and validation rules at the data/service layer.","path":"/discussionBoard/admin/tags","method":"post","description":"Create a new tag for assignment and filtering in the discussion board. Accepts a label (required and unique), plus optional description and color for UI display. Creation sets audit/control fields and is only allowed for privileged users (admins).\n\nUpon successful creation, returns the new tag record with all schema-defined fields for immediate use. Uniqueness and validation errors may result in error responses; all creation events are logged according to compliance policy.","summary":"Create a new tag (label required, optional description and color).","parameters":[],"requestBody":{"description":"Tag creation info: label, description, and color.","typeName":"IDiscussionBoardTag.ICreate"},"responseBody":{"description":"The full entry for the newly created tag.","typeName":"IDiscussionBoardTag"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update name (label), description, or color of an existing tag in the discussion_board_tags table using its id. All field changes update the updated_at and are checked against uniqueness constraints as defined in the schema. Operation is performed for configurable vocabulary management and analytics UI tools as per business policies. Audit trail updated on every change.","path":"/discussionBoard/admin/tags/{tagId}","method":"put","description":"Allows the admin to update details for a tag – label (must remain unique), description, or color code. Fields not in the update are left unchanged. Modification is tracked by updated_at field. Operation is only available to admins, and all changes are logged for compliance. Input validation prevents label collisions or out-of-bounds color or description data.\n\nAfter update, the new full tag record is returned. Errors are returned in case of not found, uniqueness violation, invalid input, or lack of permissions. Only properties defined in the tags schema may be changed.","summary":"Update tag info by id: label, description, or color.","parameters":[{"name":"tagId","description":"Unique identifier of the tag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the tag.","typeName":"IDiscussionBoardTag.IUpdate"},"responseBody":{"description":"Full record for the updated tag.","typeName":"IDiscussionBoardTag"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Soft delete a tag by updating its deleted_at field in discussion_board_tags. The tag is retained for audit and configuration recovery, per compliance/business rules. Available only to admins. Ensures related tag assignments on posts or categories remain coherent for history/tracking, but prevents the tag from being assigned to new posts. Record is preserved for all analytics and audit queries.","path":"/discussionBoard/admin/tags/{tagId}","method":"delete","description":"Marks a tag as soft-deleted by populating its deleted_at timestamp, satisfying business and compliance requirements for audit, reporting, and eventual recovery. Operation is accessible to admin users and ensures removal from all new assignment workflows; previously assigned posts remain linked for auditability.\n\nSupports safe removal and future restoration, as per business requirements and feature specification. Only operates on the tag identified by the unique id; all changes are audit-logged and permission-restricted.","summary":"Soft-delete a tag by id (marks as deleted, but record remains).","parameters":[{"name":"tagId","description":"Unique identifier of tag for soft-deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This API operation retrieves an array of all existing category/tag assignments from the discussion_board_category_tags table in the Prisma schema. It is designed for administrative overviews, tag management, and auditing of category/tag relationships. This endpoint enables clients to fetch the set of pairings between discussion board categories and tags for UI displays, data export, and moderation tooling.\n\nThe operation reads directly from the normalized junction table that connects discussion_board_categories and discussion_board_tags, and supports listing every assignment without filtering, pagination, or search complexities. This endpoint is typically used in conjunction with endpoints for category management and tag management, as well as tag assignment operations. It returns all objects representing category-tag pairings for comprehensive view, so may be restricted in non-admin contexts.\n\nThere are no input parameters for this operation. It is appropriate for admin, moderator, and member-level oversight (though admin and moderator may have additional functionality elsewhere). No sensitive fields are exposed, and data is safe for administrative review or audit logging. Related endpoints include category/tag CRUD and category-tag creation/update/delete operations.","path":"/discussionBoard/admin/categoryTags","method":"get","description":"Fetch the complete list of all category-tag assignments on the discussion board. This retrieves every record from the discussion_board_category_tags table, where each row represents a unique pairing between a board category and a tag. The response will include essential identifying information and assignment metadata, excluding sensitive user data. This endpoint is crucial for tooling that displays, audits, or modifies tag-category relationships for board configuration.\n\nOnly authenticated administrators, moderators, or members may access this endpoint, and access may be logged for audit purposes. The data reflects the current state of all tag assignments and is suitable for configuration export, cross-board analytics, or batch editing workflows.\n\nNo request parameters are required. This endpoint can be used alongside tag or category editors and for rendering board admin dashboards for tag management. Error handling covers database unreachability or role authentication failure only.","summary":"Retrieve all category-tag assignments (IPageIDiscussionBoardCategoryTag) for audit or administrative review.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated array of all category-tag assignment pairings.","typeName":"IPageIDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator","member"],"name":"index","authorizationRole":"admin"},{"specification":"This API operation retrieves an array of all existing category/tag assignments from the discussion_board_category_tags table in the Prisma schema. It is designed for administrative overviews, tag management, and auditing of category/tag relationships. This endpoint enables clients to fetch the set of pairings between discussion board categories and tags for UI displays, data export, and moderation tooling.\n\nThe operation reads directly from the normalized junction table that connects discussion_board_categories and discussion_board_tags, and supports listing every assignment without filtering, pagination, or search complexities. This endpoint is typically used in conjunction with endpoints for category management and tag management, as well as tag assignment operations. It returns all objects representing category-tag pairings for comprehensive view, so may be restricted in non-admin contexts.\n\nThere are no input parameters for this operation. It is appropriate for admin, moderator, and member-level oversight (though admin and moderator may have additional functionality elsewhere). No sensitive fields are exposed, and data is safe for administrative review or audit logging. Related endpoints include category/tag CRUD and category-tag creation/update/delete operations.","path":"/discussionBoard/moderator/categoryTags","method":"get","description":"Fetch the complete list of all category-tag assignments on the discussion board. This retrieves every record from the discussion_board_category_tags table, where each row represents a unique pairing between a board category and a tag. The response will include essential identifying information and assignment metadata, excluding sensitive user data. This endpoint is crucial for tooling that displays, audits, or modifies tag-category relationships for board configuration.\n\nOnly authenticated administrators, moderators, or members may access this endpoint, and access may be logged for audit purposes. The data reflects the current state of all tag assignments and is suitable for configuration export, cross-board analytics, or batch editing workflows.\n\nNo request parameters are required. This endpoint can be used alongside tag or category editors and for rendering board admin dashboards for tag management. Error handling covers database unreachability or role authentication failure only.","summary":"Retrieve all category-tag assignments (IPageIDiscussionBoardCategoryTag) for audit or administrative review.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated array of all category-tag assignment pairings.","typeName":"IPageIDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator","member"],"name":"index","authorizationRole":"moderator"},{"specification":"This API operation retrieves an array of all existing category/tag assignments from the discussion_board_category_tags table in the Prisma schema. It is designed for administrative overviews, tag management, and auditing of category/tag relationships. This endpoint enables clients to fetch the set of pairings between discussion board categories and tags for UI displays, data export, and moderation tooling.\n\nThe operation reads directly from the normalized junction table that connects discussion_board_categories and discussion_board_tags, and supports listing every assignment without filtering, pagination, or search complexities. This endpoint is typically used in conjunction with endpoints for category management and tag management, as well as tag assignment operations. It returns all objects representing category-tag pairings for comprehensive view, so may be restricted in non-admin contexts.\n\nThere are no input parameters for this operation. It is appropriate for admin, moderator, and member-level oversight (though admin and moderator may have additional functionality elsewhere). No sensitive fields are exposed, and data is safe for administrative review or audit logging. Related endpoints include category/tag CRUD and category-tag creation/update/delete operations.","path":"/discussionBoard/member/categoryTags","method":"get","description":"Fetch the complete list of all category-tag assignments on the discussion board. This retrieves every record from the discussion_board_category_tags table, where each row represents a unique pairing between a board category and a tag. The response will include essential identifying information and assignment metadata, excluding sensitive user data. This endpoint is crucial for tooling that displays, audits, or modifies tag-category relationships for board configuration.\n\nOnly authenticated administrators, moderators, or members may access this endpoint, and access may be logged for audit purposes. The data reflects the current state of all tag assignments and is suitable for configuration export, cross-board analytics, or batch editing workflows.\n\nNo request parameters are required. This endpoint can be used alongside tag or category editors and for rendering board admin dashboards for tag management. Error handling covers database unreachability or role authentication failure only.","summary":"Retrieve all category-tag assignments (IPageIDiscussionBoardCategoryTag) for audit or administrative review.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated array of all category-tag assignment pairings.","typeName":"IPageIDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator","member"],"name":"index","authorizationRole":"member"},{"specification":"This API operation performs a filtered, paginated search across the discussion_board_category_tags table in the Prisma schema. It supports advanced retrieval of category/tag assignments by accepting search, filter, and pagination criteria. Clients can request category-tags by category/tag IDs, assignment date, or other query fields as defined in the request body DTO.\n\nThe operation builds on the normalized M:N junction table that connects board categories and tags. It is useful for admin or moderator interfaces, as well as reporting tools that need to analyze or filter tag assignments by various fields. The endpoint provides a flexible mechanism for category/tag management and data auditing at scale. By design, the API hides sensitive implementation data and enforces role-based access control.\n\nThis operation is typically employed alongside category/tag index and detail endpoints, as well as CRUD endpoints for category/tag creation and deletion. Paging/sorting options may include assignment date or linked category/tag identifiers.","path":"/discussionBoard/admin/categoryTags","method":"patch","description":"Search for category-tag assignments using advanced filtering and pagination. The submitted request body (IDiscussionBoardCategoryTag.IRequest) allows clients to specify search criteria such as category ID, tag ID, assignment timestamp range, and sort order. The endpoint returns a paginated list of assignments that match the filter criteria.\n\nThis operation is accessible to admin, moderator, and member roles. It is suitable for building user interfaces that require fine-grained tag management, for generating reports, or for implementing bulk editing tools. The request and response strictly correspond to the normalized structure of the discussion_board_category_tags table and associated indices.\n\nSecurity is enforced via standard board role-based access checks. The response omits any user-identifiable data and is intended only for board configuration and analytic use. Misuse or failed validations are reported with detailed error messages that follow board API standards.","summary":"Advanced search/filter for category-tag assignments (IPageIDiscussionBoardCategoryTag).","parameters":[],"requestBody":{"description":"Request search, filter, and paging configuration for category-tag assignment retrieval.","typeName":"IDiscussionBoardCategoryTag.IRequest"},"responseBody":{"description":"Paginated filtered results of category-tag assignments conforming to search criteria.","typeName":"IPageIDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator","member"],"name":"search","authorizationRole":"admin"},{"specification":"This API operation performs a filtered, paginated search across the discussion_board_category_tags table in the Prisma schema. It supports advanced retrieval of category/tag assignments by accepting search, filter, and pagination criteria. Clients can request category-tags by category/tag IDs, assignment date, or other query fields as defined in the request body DTO.\n\nThe operation builds on the normalized M:N junction table that connects board categories and tags. It is useful for admin or moderator interfaces, as well as reporting tools that need to analyze or filter tag assignments by various fields. The endpoint provides a flexible mechanism for category/tag management and data auditing at scale. By design, the API hides sensitive implementation data and enforces role-based access control.\n\nThis operation is typically employed alongside category/tag index and detail endpoints, as well as CRUD endpoints for category/tag creation and deletion. Paging/sorting options may include assignment date or linked category/tag identifiers.","path":"/discussionBoard/moderator/categoryTags","method":"patch","description":"Search for category-tag assignments using advanced filtering and pagination. The submitted request body (IDiscussionBoardCategoryTag.IRequest) allows clients to specify search criteria such as category ID, tag ID, assignment timestamp range, and sort order. The endpoint returns a paginated list of assignments that match the filter criteria.\n\nThis operation is accessible to admin, moderator, and member roles. It is suitable for building user interfaces that require fine-grained tag management, for generating reports, or for implementing bulk editing tools. The request and response strictly correspond to the normalized structure of the discussion_board_category_tags table and associated indices.\n\nSecurity is enforced via standard board role-based access checks. The response omits any user-identifiable data and is intended only for board configuration and analytic use. Misuse or failed validations are reported with detailed error messages that follow board API standards.","summary":"Advanced search/filter for category-tag assignments (IPageIDiscussionBoardCategoryTag).","parameters":[],"requestBody":{"description":"Request search, filter, and paging configuration for category-tag assignment retrieval.","typeName":"IDiscussionBoardCategoryTag.IRequest"},"responseBody":{"description":"Paginated filtered results of category-tag assignments conforming to search criteria.","typeName":"IPageIDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator","member"],"name":"search","authorizationRole":"moderator"},{"specification":"This API operation performs a filtered, paginated search across the discussion_board_category_tags table in the Prisma schema. It supports advanced retrieval of category/tag assignments by accepting search, filter, and pagination criteria. Clients can request category-tags by category/tag IDs, assignment date, or other query fields as defined in the request body DTO.\n\nThe operation builds on the normalized M:N junction table that connects board categories and tags. It is useful for admin or moderator interfaces, as well as reporting tools that need to analyze or filter tag assignments by various fields. The endpoint provides a flexible mechanism for category/tag management and data auditing at scale. By design, the API hides sensitive implementation data and enforces role-based access control.\n\nThis operation is typically employed alongside category/tag index and detail endpoints, as well as CRUD endpoints for category/tag creation and deletion. Paging/sorting options may include assignment date or linked category/tag identifiers.","path":"/discussionBoard/member/categoryTags","method":"patch","description":"Search for category-tag assignments using advanced filtering and pagination. The submitted request body (IDiscussionBoardCategoryTag.IRequest) allows clients to specify search criteria such as category ID, tag ID, assignment timestamp range, and sort order. The endpoint returns a paginated list of assignments that match the filter criteria.\n\nThis operation is accessible to admin, moderator, and member roles. It is suitable for building user interfaces that require fine-grained tag management, for generating reports, or for implementing bulk editing tools. The request and response strictly correspond to the normalized structure of the discussion_board_category_tags table and associated indices.\n\nSecurity is enforced via standard board role-based access checks. The response omits any user-identifiable data and is intended only for board configuration and analytic use. Misuse or failed validations are reported with detailed error messages that follow board API standards.","summary":"Advanced search/filter for category-tag assignments (IPageIDiscussionBoardCategoryTag).","parameters":[],"requestBody":{"description":"Request search, filter, and paging configuration for category-tag assignment retrieval.","typeName":"IDiscussionBoardCategoryTag.IRequest"},"responseBody":{"description":"Paginated filtered results of category-tag assignments conforming to search criteria.","typeName":"IPageIDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator","member"],"name":"search","authorizationRole":"member"},{"specification":"This API operation retrieves the full details of a single category/tag assignment by its unique identifier from the discussion_board_category_tags table. It supports viewing all assignment metadata, including the related category and tag IDs, assignment timestamp, and links to related entities for display or management.\n\nThe endpoint enables board configuration screens, audit tools, or moderator dashboards to present detailed information about a single pairing between a discussion category and a tag. This is a core building block for category/tag CRUD interfaces and detailed change history displays. It requires an exact UUID of the assignment as path parameter, and will return all atomic fields for the entry as described in the Prisma schema.\n\nRelated operations include listing and search endpoints, as well as assignment creation, update, and deletion. Error scenarios include not found (404) or access denied (403) on role failure.","path":"/discussionBoard/admin/categoryTags/{categoryTagId}","method":"get","description":"Retrieve the complete metadata for a specific category-tag assignment by its unique identifier (categoryTagId). Returns all atomic fields present in the discussion_board_category_tags table for this relation. The response supports board configuration UIs needing assignment details and admin/moderator review of tag setup history.\n\nAccessible to admins, moderators, and members. The operation checks that the input is a valid UUID. Data returned is only relational or metadata, never containing sensitive or user-specific information. 404 errors indicate that the requested record does not exist; 403 if access is forbidden.\n\nUse this endpoint for assignment drilldown, audit trail verification, or prior to delete/update operations. Useful in tooling for tag/category management and analytics.","summary":"Get detail for specific category-tag assignment (IDiscussionBoardCategoryTag) by ID.","parameters":[{"name":"categoryTagId","description":"Unique identifier for the target category-tag assignment record in discussion_board_category_tags.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All available fields and metadata for the targeted category-tag assignment record.","typeName":"IDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator","member"],"name":"at","authorizationRole":"admin"},{"specification":"This API operation retrieves the full details of a single category/tag assignment by its unique identifier from the discussion_board_category_tags table. It supports viewing all assignment metadata, including the related category and tag IDs, assignment timestamp, and links to related entities for display or management.\n\nThe endpoint enables board configuration screens, audit tools, or moderator dashboards to present detailed information about a single pairing between a discussion category and a tag. This is a core building block for category/tag CRUD interfaces and detailed change history displays. It requires an exact UUID of the assignment as path parameter, and will return all atomic fields for the entry as described in the Prisma schema.\n\nRelated operations include listing and search endpoints, as well as assignment creation, update, and deletion. Error scenarios include not found (404) or access denied (403) on role failure.","path":"/discussionBoard/moderator/categoryTags/{categoryTagId}","method":"get","description":"Retrieve the complete metadata for a specific category-tag assignment by its unique identifier (categoryTagId). Returns all atomic fields present in the discussion_board_category_tags table for this relation. The response supports board configuration UIs needing assignment details and admin/moderator review of tag setup history.\n\nAccessible to admins, moderators, and members. The operation checks that the input is a valid UUID. Data returned is only relational or metadata, never containing sensitive or user-specific information. 404 errors indicate that the requested record does not exist; 403 if access is forbidden.\n\nUse this endpoint for assignment drilldown, audit trail verification, or prior to delete/update operations. Useful in tooling for tag/category management and analytics.","summary":"Get detail for specific category-tag assignment (IDiscussionBoardCategoryTag) by ID.","parameters":[{"name":"categoryTagId","description":"Unique identifier for the target category-tag assignment record in discussion_board_category_tags.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All available fields and metadata for the targeted category-tag assignment record.","typeName":"IDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator","member"],"name":"at","authorizationRole":"moderator"},{"specification":"This API operation retrieves the full details of a single category/tag assignment by its unique identifier from the discussion_board_category_tags table. It supports viewing all assignment metadata, including the related category and tag IDs, assignment timestamp, and links to related entities for display or management.\n\nThe endpoint enables board configuration screens, audit tools, or moderator dashboards to present detailed information about a single pairing between a discussion category and a tag. This is a core building block for category/tag CRUD interfaces and detailed change history displays. It requires an exact UUID of the assignment as path parameter, and will return all atomic fields for the entry as described in the Prisma schema.\n\nRelated operations include listing and search endpoints, as well as assignment creation, update, and deletion. Error scenarios include not found (404) or access denied (403) on role failure.","path":"/discussionBoard/member/categoryTags/{categoryTagId}","method":"get","description":"Retrieve the complete metadata for a specific category-tag assignment by its unique identifier (categoryTagId). Returns all atomic fields present in the discussion_board_category_tags table for this relation. The response supports board configuration UIs needing assignment details and admin/moderator review of tag setup history.\n\nAccessible to admins, moderators, and members. The operation checks that the input is a valid UUID. Data returned is only relational or metadata, never containing sensitive or user-specific information. 404 errors indicate that the requested record does not exist; 403 if access is forbidden.\n\nUse this endpoint for assignment drilldown, audit trail verification, or prior to delete/update operations. Useful in tooling for tag/category management and analytics.","summary":"Get detail for specific category-tag assignment (IDiscussionBoardCategoryTag) by ID.","parameters":[{"name":"categoryTagId","description":"Unique identifier for the target category-tag assignment record in discussion_board_category_tags.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All available fields and metadata for the targeted category-tag assignment record.","typeName":"IDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator","member"],"name":"at","authorizationRole":"member"},{"specification":"This API operation creates a new category/tag assignment entry (row) in the discussion_board_category_tags junction table, thereby linking an existing category to an existing tag. It is critical for admin or moderator workflows that need to manage board structure, assign tags to categories for discoverability, or update board navigation policy.\n\nThe endpoint requires a POST body conforming to IDiscussionBoardCategoryTag.ICreate, which specifies linked category and tag IDs as UUIDs. Internal logic checks existence and validity of these IDs in their respective source tables before creating the relation. The endpoint returns the full object for the newly created assignment if successful, suitable for UI or analytic display. Creation events are subject to audit logging and role-based access enforcement as defined in requirements.\n\nRelated endpoints include category/tag CRUD and assignment read, search, or deletion operations. Hard/unique constraint errors (e.g., pair already exists) are handled according to API error response policies.","path":"/discussionBoard/admin/categoryTags","method":"post","description":"Create a new category-tag assignment by linking an existing category to an existing tag. The required request body (IDiscussionBoardCategoryTag.ICreate) must provide the UUIDs for both the category and tag, as specified in the Prisma schema. The response will include the created assignment record with category ID, tag ID, creation timestamp, and primary key.\n\nThis operation is available to administrator and moderator roles only. It enforces integrity constraints so duplicate assignments are not allowed, and will reject creation if the category or tag referenced does not exist. The operation returns the full data for the new assignment, suitable for audit, UI update, or reporting, and will log creation events as needed. Validation and error handling follow API standards.","summary":"Assign tag to category (create IDiscussionBoardCategoryTag link in junction table).","parameters":[],"requestBody":{"description":"Details of category/tag assignment to create (category_id, tag_id).","typeName":"IDiscussionBoardCategoryTag.ICreate"},"responseBody":{"description":"Created assignment record between category and tag.","typeName":"IDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"admin"},{"specification":"This API operation creates a new category/tag assignment entry (row) in the discussion_board_category_tags junction table, thereby linking an existing category to an existing tag. It is critical for admin or moderator workflows that need to manage board structure, assign tags to categories for discoverability, or update board navigation policy.\n\nThe endpoint requires a POST body conforming to IDiscussionBoardCategoryTag.ICreate, which specifies linked category and tag IDs as UUIDs. Internal logic checks existence and validity of these IDs in their respective source tables before creating the relation. The endpoint returns the full object for the newly created assignment if successful, suitable for UI or analytic display. Creation events are subject to audit logging and role-based access enforcement as defined in requirements.\n\nRelated endpoints include category/tag CRUD and assignment read, search, or deletion operations. Hard/unique constraint errors (e.g., pair already exists) are handled according to API error response policies.","path":"/discussionBoard/moderator/categoryTags","method":"post","description":"Create a new category-tag assignment by linking an existing category to an existing tag. The required request body (IDiscussionBoardCategoryTag.ICreate) must provide the UUIDs for both the category and tag, as specified in the Prisma schema. The response will include the created assignment record with category ID, tag ID, creation timestamp, and primary key.\n\nThis operation is available to administrator and moderator roles only. It enforces integrity constraints so duplicate assignments are not allowed, and will reject creation if the category or tag referenced does not exist. The operation returns the full data for the new assignment, suitable for audit, UI update, or reporting, and will log creation events as needed. Validation and error handling follow API standards.","summary":"Assign tag to category (create IDiscussionBoardCategoryTag link in junction table).","parameters":[],"requestBody":{"description":"Details of category/tag assignment to create (category_id, tag_id).","typeName":"IDiscussionBoardCategoryTag.ICreate"},"responseBody":{"description":"Created assignment record between category and tag.","typeName":"IDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"moderator"},{"specification":"This API operation updates an existing category/tag assignment in the discussion_board_category_tags junction table by assignment ID. It supports correcting, transferring, or updating the links between a board category and tag, including re-assignment to a different tag or category as allowed by policy.\n\nThe endpoint requires the unique UUID of the assignment (categoryTagId) in the path, and a PUT body of IDiscussionBoardCategoryTag.IUpdate specifying updated values. The business rules enforce uniqueness on the updated pair, and will reject invalid category or tag references. The operation is logged for audit where appropriate.\n\nTypical use cases include administrative correction, moderating tag configuration, and facilitating board reorganizations. The endpoint supports UIs for editing category/tag structure and complies strictly with Prisma schema logic.","path":"/discussionBoard/admin/categoryTags/{categoryTagId}","method":"put","description":"Update an existing category-tag assignment by its unique ID. This operation accepts a request body of IDiscussionBoardCategoryTag.IUpdate, allowing atomic updates to the associated category and/or tag UUIDs. The endpoint will enforce uniqueness constraints such that a category/tag assignment can only exist once. If the referenced category or tag does not exist, or the update would create a duplicate, an error response is returned.\n\nThis action can only be performed by admin or moderator roles. The operation logs all changes for audit and moderation tracking. Used primarily in configuration UIs, moderation panels, or batch category/tag management tools. 404 returned if the categoryTagId does not exist.","summary":"Update details of a category-tag assignment (IDiscussionBoardCategoryTag) by ID.","parameters":[{"name":"categoryTagId","description":"Unique identifier of the category-tag assignment record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New details for category-tag assignment (category ID, tag ID).","typeName":"IDiscussionBoardCategoryTag.IUpdate"},"responseBody":{"description":"The updated assignment record post-successful update.","typeName":"IDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"This API operation updates an existing category/tag assignment in the discussion_board_category_tags junction table by assignment ID. It supports correcting, transferring, or updating the links between a board category and tag, including re-assignment to a different tag or category as allowed by policy.\n\nThe endpoint requires the unique UUID of the assignment (categoryTagId) in the path, and a PUT body of IDiscussionBoardCategoryTag.IUpdate specifying updated values. The business rules enforce uniqueness on the updated pair, and will reject invalid category or tag references. The operation is logged for audit where appropriate.\n\nTypical use cases include administrative correction, moderating tag configuration, and facilitating board reorganizations. The endpoint supports UIs for editing category/tag structure and complies strictly with Prisma schema logic.","path":"/discussionBoard/moderator/categoryTags/{categoryTagId}","method":"put","description":"Update an existing category-tag assignment by its unique ID. This operation accepts a request body of IDiscussionBoardCategoryTag.IUpdate, allowing atomic updates to the associated category and/or tag UUIDs. The endpoint will enforce uniqueness constraints such that a category/tag assignment can only exist once. If the referenced category or tag does not exist, or the update would create a duplicate, an error response is returned.\n\nThis action can only be performed by admin or moderator roles. The operation logs all changes for audit and moderation tracking. Used primarily in configuration UIs, moderation panels, or batch category/tag management tools. 404 returned if the categoryTagId does not exist.","summary":"Update details of a category-tag assignment (IDiscussionBoardCategoryTag) by ID.","parameters":[{"name":"categoryTagId","description":"Unique identifier of the category-tag assignment record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New details for category-tag assignment (category ID, tag ID).","typeName":"IDiscussionBoardCategoryTag.IUpdate"},"responseBody":{"description":"The updated assignment record post-successful update.","typeName":"IDiscussionBoardCategoryTag"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"This API operation deletes an existing row (assignment) from the discussion_board_category_tags table by its assignment UUID. It permanently removes the link between a category and a tag; the operation does not perform a soft delete since the schema provides no deleted_at for this table.\n\nThe endpoint is restricted to admin and moderator roles. The path parameter is the categoryTagId, a UUID that uniquely identifies the assignment to remove. The operation triggers audit logging for moderation/compliance. Upon successful deletion, the endpoint either returns no content (204) or a standardized confirmation message per API response guidelines.\n\nError scenarios include not found (404) if the assignment does not exist, or forbidden (403) for role restriction. This endpoint is most commonly invoked from tag/category management screens or in response to moderation workflows.","path":"/discussionBoard/admin/categoryTags/{categoryTagId}","method":"delete","description":"Unassign/remove a category-tag assignment by deleting the record identified by categoryTagId in discussion_board_category_tags. This operation hard-deletes the record (since no deleted_at column exists) and is only available to administrators and moderators. Used within board configuration editors, batch tag management tools, or as a moderation action. Audit log entries will be created for compliance tracking. Successful deletion produces a confirmation response; 404 error if the record is not present.","summary":"Delete (hard) a category-tag assignment by ID (no soft delete exists).","parameters":[{"name":"categoryTagId","description":"Unique identifier for the assignment record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"admin"},{"specification":"This API operation deletes an existing row (assignment) from the discussion_board_category_tags table by its assignment UUID. It permanently removes the link between a category and a tag; the operation does not perform a soft delete since the schema provides no deleted_at for this table.\n\nThe endpoint is restricted to admin and moderator roles. The path parameter is the categoryTagId, a UUID that uniquely identifies the assignment to remove. The operation triggers audit logging for moderation/compliance. Upon successful deletion, the endpoint either returns no content (204) or a standardized confirmation message per API response guidelines.\n\nError scenarios include not found (404) if the assignment does not exist, or forbidden (403) for role restriction. This endpoint is most commonly invoked from tag/category management screens or in response to moderation workflows.","path":"/discussionBoard/moderator/categoryTags/{categoryTagId}","method":"delete","description":"Unassign/remove a category-tag assignment by deleting the record identified by categoryTagId in discussion_board_category_tags. This operation hard-deletes the record (since no deleted_at column exists) and is only available to administrators and moderators. Used within board configuration editors, batch tag management tools, or as a moderation action. Audit log entries will be created for compliance tracking. Successful deletion produces a confirmation response; 404 error if the record is not present.","summary":"Delete (hard) a category-tag assignment by ID (no soft delete exists).","parameters":[{"name":"categoryTagId","description":"Unique identifier for the assignment record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"moderator"},{"specification":"This operation retrieves the single (or only) board/global configuration record from the discussion_board_board_settings table. It supports client UIs and system configuration screens needing to display current board title, description, logo, enablement, and update metadata.\n\nAs the board_settings table is expected to be single-row, the operation simply fetches the current configuration. It is useful for board setup wizards, admin panels, or landing page branding, and for configuration export tools. This endpoint is generally available to all roles (admin, moderator, member, guest) for public status reading, as sensitive fields are not exposed. May be extended for multi-board in future versions. No input parameters required.","path":"/discussionBoard/boardSettings","method":"get","description":"Fetch the current discussion board's main configuration from the discussion_board_board_settings table. Returns configuration details such as board title, status (enabled/disabled), description, logo URI, and audit timestamps. This operation is necessary for branding display, landing page setup, access status UI, or onboarding flows.\n\nAccessible to all user roles, including guests, for system-wide informational displays. No authentication required unless configuration data is sensitive (in which case role check is implemented). Related endpoints: boardSettings update, create, or delete for admin panels. Errors handled by standard infrastructure.","summary":"Fetch board's main configuration/info for display (IDiscussionBoardBoardSetting).","parameters":[],"requestBody":null,"responseBody":{"description":"Board's current configuration and branding/settings fields.","typeName":"IDiscussionBoardBoardSetting"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"This operation performs a paginated, filtered search on discussion_board_board_settings for advanced admin/configuration use. It accepts request body fields for filtering, sorting, or paging across board setting records in systems where there may be more than one board_configuration stored (multi-board support or audit logs).\n\nThe endpoint is most useful for future-proofed admin UIs, audits, or reporting, allowing search by board title, enablement status, creation/update dates, or description. The request/response strictly align to all available atomic fields from the discussion_board_board_settings table, supporting analytic and export requirements alongside configuration management.\n\nTypically restricted to admin role or advanced config viewing. May return paginated results if more than one config present, or just a single-row for simple board setups.","path":"/discussionBoard/admin/boardSettings","method":"patch","description":"Perform a filtered, paginated search on the discussion_board_board_settings configuration records. The request (IDiscussionBoardBoardSetting.IRequest) allows filter criteria like title, enabled/disabled, date ranges, or partial description match. Returns a paginated result matching search criteria, conforming to all field names from the Prisma schema.\n\nThis operation is typically used by admins for configuration management, board analytics, or compliance auditing. Efficient for both single-board and future multi-board scenarios. Access is generally restricted to admin but may be extended to other authorized staff. Error handling follows standard API/infra rules.","summary":"Search or filter for board settings/configurations (IPageIDiscussionBoardBoardSetting).","parameters":[],"requestBody":{"description":"Search and filter options for retrieving board setting records.","typeName":"IDiscussionBoardBoardSetting.IRequest"},"responseBody":{"description":"Paginated, filtered board configuration records.","typeName":"IPageIDiscussionBoardBoardSetting"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves the full board/global configuration record for a specific ID (typically the single main board setting record, but future-proofed for multi-board/audit support). Fetches all atomic fields from the discussion_board_board_settings table for direct display or in-depth configuration reviews. Client UIs use this endpoint for detail panels or advanced configuration exports.\n\nRequires the boardSettingId (UUID) as a path parameter. Returns the specified board configuration object, including branding information and status controls. Related endpoints include general listing, search, creation, update, and deletion of board configurations.\n\nThe result is primarily used in admin interfaces and configuration/export tools. Error cases include not found or forbidden when access policy restricts reads.","path":"/discussionBoard/admin/boardSettings/{boardSettingId}","method":"get","description":"Retrieve the complete board/global configuration record identified by boardSettingId. This includes details such as board title, description, enabled status, logo URI, and timestamps as defined in the discussion_board_board_settings Prisma schema. The operation is essential for configuration drilldowns, admin edit screens, or compliance audits.\n\nTypically available to admin users for configuration review. Will return a 404 error if the ID does not correspond to an existing record, or 403 if not authorized. The endpoint validates the UUID and fetches the complete configuration details, with all available atomic fields.","summary":"Fetch detail of board settings/configuration (IDiscussionBoardBoardSetting) by ID.","parameters":[{"name":"boardSettingId","description":"Unique identifier for the targeted board configuration record (UUID from discussion_board_board_settings table).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full fields for the chosen board configuration record.","typeName":"IDiscussionBoardBoardSetting"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"This operation creates a new board/global configuration entry in the discussion_board_board_settings table with required values such as title, enabled flag, and branding fields. The request body must conform to IDiscussionBoardBoardSetting.ICreate with all required board configuration fields. The endpoint returns the created configuration record including all atomic fields on success.\n\nCreation is restricted to admin role, and is primarily used for system setup, board rebranding, or initializing new board instances (e.g., multi-board support for SaaS offerings). Post-creation, objects are returned for use in admin panels or onboarding flows. This endpoint is not relevant for most user-level workflows, and restricts access to ensure only authorized staff create new boards. All creation events are audit logged.","path":"/discussionBoard/admin/boardSettings","method":"post","description":"Create a new discussion board/global configuration record. Requires all mandatory configuration fields in the request body (IDiscussionBoardBoardSetting.ICreate). Returns the full created board configuration. Used by admins to configure new boards, update branding, or initialize a board instance. Audit logs are generated for compliance and future tracking.\n\nOnly the admin role is permitted to use this operation; all writes are validated to ensure board titles, settings, and enablement flags follow board policies. Returns created configuration details or reports errors according to API standards.","summary":"Create a new board settings/config (IDiscussionBoardBoardSetting) record.","parameters":[],"requestBody":{"description":"Fields for new board configuration (title, status, logo, etc).","typeName":"IDiscussionBoardBoardSetting.ICreate"},"responseBody":{"description":"Details of the newly created board configuration record.","typeName":"IDiscussionBoardBoardSetting"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing board/global configuration record in the discussion_board_board_settings table, identified by boardSettingId. Accepts a PUT body of IDiscussionBoardBoardSetting.IUpdate with fields to update, such as title, branding, status, or logo URI. Returns the updated board configuration record on success, with audit logging enforced for traceability.\n\nIntended for admin use in configuration or branding interfaces, or for managing multiple board setups. The endpoint enforces all business logic around settings updates and validates field values rigorously. Access restricted to admins for system integrity. 404 errors for not found; 403 for forbidden access.","path":"/discussionBoard/admin/boardSettings/{boardSettingId}","method":"put","description":"Update an existing board/global configuration setting identified by the boardSettingId UUID. The PUT request body (IDiscussionBoardBoardSetting.IUpdate) specifies updated values such as title, description, enablement, or logo URI. Returns the full, updated configuration record post-successful update for display or audit purposes. Only administrators can invoke this operation.\n\nThis endpoint is critical for system maintenance, admin-driven configuration changes, or brand refreshes. Changes are audit-logged and enforced at the business logic level. Error conditions and role-based access handled per API standards.","summary":"Update details of a board settings/config record (IDiscussionBoardBoardSetting) by ID.","parameters":[{"name":"boardSettingId","description":"Unique identifier (UUID) of the board configuration record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updates for configuration record (title, enabled, branding, etc).","typeName":"IDiscussionBoardBoardSetting.IUpdate"},"responseBody":{"description":"The updated configuration record after the changes are applied.","typeName":"IDiscussionBoardBoardSetting"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes (hard-delete, not soft) a board/global configuration record from the discussion_board_board_settings table by its ID. This operation is required for compliance policy, clean-up of extraneous configurations, or removal of old branding information. There is no soft-delete as no deleted_at column exists in this table.\n\nThe endpoint only allows admin role to execute, to ensure stability of board configuration. The operation takes boardSettingId (UUID) as path parameter, deletes the record, and returns confirmation or empty success per API standard. Audit logs are written for traceability; errors are not found (404) or forbidden (403) if access/role constraint is violated. Used only for admin-level configuration maintenance.","path":"/discussionBoard/admin/boardSettings/{boardSettingId}","method":"delete","description":"Delete a board/global configuration record by its unique ID (UUID) in the discussion_board_board_settings table. This operation performs a hard deletion as no soft-delete is provided. Typically used in configuration cleanup routines, migration, or to remove outdated board-setup information from the system. Available solely to admin users; full audit log entries are generated. Success returns confirmation or no-content per API convention. 404 returned if the target does not exist.","summary":"Delete board settings/configuration (IDiscussionBoardBoardSetting) by ID (hard delete only).","parameters":[{"name":"boardSettingId","description":"Unique identifier of board configuration to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a paginated list of administrator accounts for the discussion board system, as defined by the discussion_board_admins table in the Prisma schema. This endpoint enables system actors with required roles to list all admin users, including their usernames, activity status, emails, and account audit timestamps for monitoring and management. The admin entity includes unique identifier, username, hashed password, business email, is_active flag, creation and update times. Filtering, sorting, and pagination are important for scalability, given potentially numerous admins. The list supports administrative actions such as role assignment, suspension review, and access audit trail generation. This operation is essential for enforcing role-based access control, especially where role changes or bulk management are required.","path":"/discussionBoard/admin/admins","method":"get","description":"This API operation fetches all administrator accounts registered in the discussion board, referencing the discussion_board_admins Prisma model. It is intended for use by users with high privilege such as super-admins, allowing oversight and management of admin users.\n\nAll fields, including id, username, email, is_active status, and timestamps, are provided in accordance with security and compliance needs. Sensitive information such as password_hash will be omitted from external-facing fields for privacy.\n\nOnly users with \"admin\" role may access this endpoint as it deals with privileged user accounts. Unauthorized access attempts must be logged and rejected.\n\nPagination and search capabilities are critical given that organizations may have numerous admins over time. Related endpoints include those for creating, updating, or deleting admin accounts, as well as authentication access log reviews.","summary":"Retrieve a paginated list of all admin accounts in the discussion board system.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of administrators, including identifiers, usernames, emails, status, and audit metadata.","typeName":"IPageIDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Search and filter administrator accounts in the discussion board system, using advanced search criteria. Operates on the discussion_board_admins table, supporting complex queries by username, email, is_active, date ranges, etc. This is critical for administrative portals where filtering by status, registration period, or account activity is required. Uses a specialized search request object for criteria, and returns paginated detailed admin responses. This operation aligns with the enterprise need for audit and security compliance, where admin objects may need to be reviewed, filtered, or exported.","path":"/discussionBoard/admin/admins","method":"patch","description":"The API provides complex search and filtering capability over the discussion_board_admins Prisma entity. This is valuable for super-admins needing to quickly locate or review subsets of admin users, such as all recently active accounts or those with pending status updates.\n\nSupports a dedicated request object allowing search by username, email, account status, and registration/update times. Returns paginated results for large environments. Only \"admin\" role can use this operation. Security and data minimization are observed.\n\nRelated operations will include account detail views, modification, and deletion endpoints. Results will exclude any fields containing password hashes or sensitive authentication tokens, focusing on audit, management, and support workflows.","summary":"Full search and filter capability for admin accounts using complex criteria.","parameters":[],"requestBody":{"description":"Advanced admin search criteria including username, email, is_active, registration or update dates, pagination and sort options.","typeName":"IDiscussionBoardAdmin.IRequest"},"responseBody":{"description":"Paginated result set including admins matching the search criteria.","typeName":"IPageIDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve the details of a single administrator account identified by its unique UUID. Based on the discussion_board_admins table, this operation provides all relevant admin user details except password_hash. Used by super-admins or privileged support personnel for user management, audit review, and compliance. Enables display of username, email, account status, and audit timestamps. Access is tightly restricted due to the sensitive nature of the data. The admin ID must match an existing admin record. This operation is often used before performing role or permission changes, or account suspension.","path":"/discussionBoard/admin/admins/{adminId}","method":"get","description":"This API operation retrieves the full detail of an administrator account from the discussion_board_admins Prisma model, using the provided adminId as a UUID path parameter.\n\nIt returns attributes such as id, username, email, is_active, created_at and updated_at, but excludes password hashes and other security credentials from the response. Designed to support UI detail pages, audit overlays, and privilege escalation workflows. Authorization checked for 'admin' role.\n\nIf no admin is found or if the requesting user lacks permission, an error or appropriate status is returned. Related endpoints include admin edit, suspension, and audit record inspection.","summary":"Get detail on an individual admin account by ID.","parameters":[{"name":"adminId","description":"The UUID of the administrator to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed administrator account (minus sensitive authentication data).","typeName":"IDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new administrator account in the discussion board system, as represented in the discussion_board_admins table. Supports the initial setup and ongoing admin expansion for large communities. Only another admin (super-admin) can create a new admin. The creation request must include: unique username, secure password (stored as hash), unique business email, and the initial is_active status. The Prisma schema also requires creation and update timestamps, generated automatically. This operation helps delegate or expand board governance securely. It is an audit-critical operation.","path":"/discussionBoard/admin/admins","method":"post","description":"This API creates a new administrator account (discussion_board_admins), accepting a creation request that includes username, email, secure password (hashed), and activation state. Only privileged actors (admins) are authorized to perform this action.\n\nUpon creation, the system ensures username and email uniqueness, and captures audit information via timestamps. This is a high-risk operation restricted to the highest role. New admins may further manage users and board settings.\n\nValidation errors (e.g., duplicate username/email) are surfaced cleanly. No authentication secrets are ever returned in the response. The operation is closely related to user/role management and audit logging.","summary":"Create a new system admin for the discussion board.","parameters":[],"requestBody":{"description":"Information to create the new admin: username, email, password (to be hashed), activation status.","typeName":"IDiscussionBoardAdmin.ICreate"},"responseBody":{"description":"Created administrator account object, minus password/hash.","typeName":"IDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update details for an existing administrator account in the discussion board, as defined by the discussion_board_admins table. Typical fields to update are username, email, is_active, or password (stored hashed). This endpoint uses the admin's unique UUID in the path for precise targeting, and a request object for the updatable properties. The update operation is heavily logged for audit and compliance. Only admin role can update admins, and most environments restrict who can change certain details such as activation state.","path":"/discussionBoard/admin/admins/{adminId}","method":"put","description":"This API operation updates information on an existing admin account, matching the adminId path parameter (UUID). Permitted fields for update are defined in the request object, which may include username, email, password, and is_active.\n\nEvery update triggers audit trail logging for traceability. Authorization is strictly for other admins only, typically excluding the target user from updating their own role unless explicitly allowed.\n\nRelated endpoints include retrieval, deletion, and access logs for administrators. Errors (such as username/email conflicts or invalid account) are returned as per business logic.","summary":"Update an existing admin user by administrator ID.","parameters":[{"name":"adminId","description":"The UUID of the administrator to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the given admin, such as username, email, is_active, or password (hashed).","typeName":"IDiscussionBoardAdmin.IUpdate"},"responseBody":{"description":"The updated administrator entity (excluding sensitive password hash).","typeName":"IDiscussionBoardAdmin"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (soft-delete) an administrator account, identified by its UUID, following the soft-deletion policy observed in the discussion_board_admins model. The account is marked deleted (e.g., by status or timestamp); all access is immediately revoked, but historical audit records remain for compliance purposes. Only an admin may perform this action against another account. On hard delete (if soft-delete unavailable), record is removed from active database set. Deletions are heavily logged. Impact on in-progress sessions/tokens must be addressed in service logic.","path":"/discussionBoard/admin/admins/{adminId}","method":"delete","description":"This operation removes (typically via soft-delete) an admin account, using the adminId UUID path parameter. The deleted account is deactivated and/or flagged for audit, revoking all admin powers and login rights immediately.\n\nOnly admins can delete other admins, never themselves (unless specified by policy). Audit logs are recorded. Compliance requires historical reference to admin actions, so physical deletion may only occur when soft-delete is not available.\n\nRelated operations: admin creation, update, role assignment, and logs. Session revocation and API token invalidation are triggered as part of the workflow.","summary":"Delete (soft or hard) an administrator by UUID, revoking all access and powers.","parameters":[{"name":"adminId","description":"The UUID of the admin account targeted for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a paginated list of moderator accounts for the discussion board system, based on the discussion_board_moderators table in the Prisma schema. This endpoint enables system actors with required roles (admins and moderators) to list all moderators, including their usernames, emails, active status, and audit timestamps. Designed for privilege management, bulk updates, and oversight of board moderation staff. Pagination and filtering are supported for large environments. This endpoint is essential for board-wide moderator role management.","path":"/discussionBoard/admin/moderators","method":"get","description":"This operation fetches a list of all moderators in the system, utilizing the discussion_board_moderators model. It is accessible by users with 'admin' or 'moderator' roles, supporting use cases for role review, staff management, or investigation of moderator actions.\n\nResponse includes: id, username, email, is_active, created_at, updated_at, and their promoter's admin ID for accountability. Password_hash field is never returned. Pagination and search features help in large communities.\n\nAuthorization is checked rigorously. Related endpoints permit moderator creation, editing, and deletion, along with role audits and privilege escalation.","summary":"Get paginated listing of all moderator accounts, with public and audit fields.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated moderator account results with identifiers, names, activity and audit states.","typeName":"IPageIDiscussionBoardModerator"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin"},{"specification":"Retrieve a paginated list of moderator accounts for the discussion board system, based on the discussion_board_moderators table in the Prisma schema. This endpoint enables system actors with required roles (admins and moderators) to list all moderators, including their usernames, emails, active status, and audit timestamps. Designed for privilege management, bulk updates, and oversight of board moderation staff. Pagination and filtering are supported for large environments. This endpoint is essential for board-wide moderator role management.","path":"/discussionBoard/moderator/moderators","method":"get","description":"This operation fetches a list of all moderators in the system, utilizing the discussion_board_moderators model. It is accessible by users with 'admin' or 'moderator' roles, supporting use cases for role review, staff management, or investigation of moderator actions.\n\nResponse includes: id, username, email, is_active, created_at, updated_at, and their promoter's admin ID for accountability. Password_hash field is never returned. Pagination and search features help in large communities.\n\nAuthorization is checked rigorously. Related endpoints permit moderator creation, editing, and deletion, along with role audits and privilege escalation.","summary":"Get paginated listing of all moderator accounts, with public and audit fields.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated moderator account results with identifiers, names, activity and audit states.","typeName":"IPageIDiscussionBoardModerator"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator"},{"specification":"Full search/filter of moderator accounts using advanced search criteria, operating on the discussion_board_moderators table. Support for searching by username, email, activity status, promoter (admin), and audit timelines. Used for privilege audits, staff management, and workflow compliance. Uses a request DTO for search input, and paginated moderators as output. Allows scalable, rapid filtering even in large deployments. Strict role-based access enforcement is observed.","path":"/discussionBoard/admin/moderators","method":"patch","description":"This API enables advanced querying over moderator records from the discussion_board_moderators table. Request allows searching/moderator filtering by username, email, status, creator (admin id), and times. Response is paginated. Accessible to 'admin' and 'moderator' roles.\n\nUsed for finding individual or groups of moderators by specific attributes, or for audit/management. Sensitive information is excluded. Permissions enforced at the endpoint.\n\nRelated endpoints: moderator detail, edit, and staff role management.","summary":"Advanced moderator search/filter based on complex query criteria.","parameters":[],"requestBody":{"description":"Moderator account search and filter fields; may include username, email, active status, promoter, created date, etc.","typeName":"IDiscussionBoardModerator.IRequest"},"responseBody":{"description":"Paginated results of moderator accounts matching filter criteria.","typeName":"IPageIDiscussionBoardModerator"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"Full search/filter of moderator accounts using advanced search criteria, operating on the discussion_board_moderators table. Support for searching by username, email, activity status, promoter (admin), and audit timelines. Used for privilege audits, staff management, and workflow compliance. Uses a request DTO for search input, and paginated moderators as output. Allows scalable, rapid filtering even in large deployments. Strict role-based access enforcement is observed.","path":"/discussionBoard/moderator/moderators","method":"patch","description":"This API enables advanced querying over moderator records from the discussion_board_moderators table. Request allows searching/moderator filtering by username, email, status, creator (admin id), and times. Response is paginated. Accessible to 'admin' and 'moderator' roles.\n\nUsed for finding individual or groups of moderators by specific attributes, or for audit/management. Sensitive information is excluded. Permissions enforced at the endpoint.\n\nRelated endpoints: moderator detail, edit, and staff role management.","summary":"Advanced moderator search/filter based on complex query criteria.","parameters":[],"requestBody":{"description":"Moderator account search and filter fields; may include username, email, active status, promoter, created date, etc.","typeName":"IDiscussionBoardModerator.IRequest"},"responseBody":{"description":"Paginated results of moderator accounts matching filter criteria.","typeName":"IPageIDiscussionBoardModerator"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"Retrieve full details of a single moderator as found in the discussion_board_moderators table, using a unique UUID in the path parameter. Returns all non-sensitive properties including id, username, email, is_active, created_at, updated_at, and promoter admin ID, for display, audit, or escalation. Excludes password hashes. Intended for admin and moderator access.","path":"/discussionBoard/admin/moderators/{moderatorId}","method":"get","description":"This endpoint provides details of a particular moderator identified by moderatorId in UUID format. Outputs full attributes (excluding password_hash) for audit or role management purposes. Both 'admin' and 'moderator' roles have access, enforcing endpoint security rigorously.\n\nRelated endpoints include moderator update, delete, and audit trail functions. Unauthorized access errors are logged and denied.","summary":"Fetch details about a specific moderator account by its UUID.","parameters":[{"name":"moderatorId","description":"UUID identifying the moderator to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete moderator account entity (sans sensitive auth data).","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieve full details of a single moderator as found in the discussion_board_moderators table, using a unique UUID in the path parameter. Returns all non-sensitive properties including id, username, email, is_active, created_at, updated_at, and promoter admin ID, for display, audit, or escalation. Excludes password hashes. Intended for admin and moderator access.","path":"/discussionBoard/moderator/moderators/{moderatorId}","method":"get","description":"This endpoint provides details of a particular moderator identified by moderatorId in UUID format. Outputs full attributes (excluding password_hash) for audit or role management purposes. Both 'admin' and 'moderator' roles have access, enforcing endpoint security rigorously.\n\nRelated endpoints include moderator update, delete, and audit trail functions. Unauthorized access errors are logged and denied.","summary":"Fetch details about a specific moderator account by its UUID.","parameters":[{"name":"moderatorId","description":"UUID identifying the moderator to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete moderator account entity (sans sensitive auth data).","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"Create a new moderator account in the discussion board, mapped to the discussion_board_moderators table. Only admins may create moderators; newly created accounts require a unique username, secure password (hashed), email, is_active flag, and optional promoted_by_admin_id (referencing the overseeing admin). On creation, timestamps and uniqueness are enforced. The endpoint helps organizations scale moderation capacity responsibly, with full audit logging and compliance (e.g., for abuse prevention and policy enforcement).","path":"/discussionBoard/admin/moderators","method":"post","description":"This API operation allows the authorized admin to create new moderator accounts. Request includes all required fields (username, email, password for hash, is_active state, and optionally the promoting admin's ID). Ensures uniqueness and stores audit timestamps automatically.\n\nActions are audit-logged for role security. Only 'admin' role may access. Errors (e.g. duplicate username) are handled gracefully. This endpoint is core to moderator expansion workflows. Related endpoints are moderator list, update, delete, and audit record access.","summary":"Create a new moderator with audit and role linkage.","parameters":[],"requestBody":{"description":"Details for new moderator (username, password, email, status, optional promoter).","typeName":"IDiscussionBoardModerator.ICreate"},"responseBody":{"description":"Moderator entity as created (minus authentication hash).","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update a moderator account in the board, using the UUID from the path parameter to select the entity. As per the discussion_board_moderators table, updateable fields are username, email, password (stored hashed), is_active, and promoted_by_admin_id. This uses an update request object, and response is the updated moderator minus authentication hashes. Enforces role security by allowing only admins to update moderator records. All actions must be logged for audit compliance. Used for onboarding, changes in role, or actual moderator rotation.","path":"/discussionBoard/admin/moderators/{moderatorId}","method":"put","description":"This endpoint updates the specified moderator account, using the moderatorId path parameter UUID and a request DTO of updatable fields (username, password, email, is_active, promoter).\n\nOnly admins can access. Action is audit-logged, and operations denied if permissions are lacking. Errors (uniqueness, invalid ID, etc.) are managed per policy.\n\nRelated endpoints: moderator detail, delete, creation, and audit tracking.","summary":"Update the identified moderator account by UUID.","parameters":[{"name":"moderatorId","description":"UUID of the moderator to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator update, specifying any field(s) to be changed.","typeName":"IDiscussionBoardModerator.IUpdate"},"responseBody":{"description":"Updated moderator object (no password hash returned).","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (deactivate or remove) a moderator in the discussion board system. The moderatorId UUID path parameter is used to identify the user. Operation performs a soft (preferred) or hard (if soft unavailable) deletion, setting is_active or similar field to disabled, and recording the event in audit logs for regulatory compliance. Tokens/sessions are revoked as part of the workflow. Only admins can invoke this deletion, ensuring privileged access is strictly policed.","path":"/discussionBoard/admin/moderators/{moderatorId}","method":"delete","description":"The moderator account matching the moderatorId is deleted (ideally via soft-delete, else hard-delete if not present in the schema), with account privileges revoked immediately, and the act audit-logged. This only permitted by admin users.\n\nAction disables board access for the affected moderator. Related endpoints: moderator create, update, role management, and audit logging. Session and token management must ensure lockout on delete.\n\nErrors (invalid ID, insufficient access) are reported clearly.","summary":"Delete or deactivate a moderator account by UUID, with full privilege revocation.","parameters":[{"name":"moderatorId","description":"UUID for the moderator account to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of member accounts from the discussion board system. This operation operates on the 'discussion_board_members' table and is intended to provide summary information about each member for administrative review, analytics, or general browsing. It supports filtering and sorting on fields like display_name, email, verification status, account status, and registration date. Ideal for both system administrators and moderators managing user engagement.","path":"/discussionBoard/admin/members","method":"get","description":"Retrieve a comprehensive, paginated list of all registered members in the discussion board system. This endpoint is essential for administrative oversight, user analytics, and moderation workflows. It provides display name, email, verification status, registration timestamp, current status, and last login at a summary level, avoiding sensitive information such as password hashes.\n\nAccess to this endpoint is typically restricted to admins and moderators for user management and reporting purposes. It supports review of member activity and enables efficient bulk monitoring for suspicious or low-quality users.\n\nUnderlying data is sourced directly from the 'discussion_board_members' table, ensuring all fields are up to date and audit-ready. The results can be sorted or filtered by the consumer to meet specific operational needs.\n\nRelated endpoints may include details retrieval (/members/{memberId}) and member moderation actions accessible by authorized roles.","summary":"Lists all members in the discussion board system with summary information.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated summary information of members.","typeName":"IPageIDiscussionBoardMember.ISummary"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of member accounts from the discussion board system. This operation operates on the 'discussion_board_members' table and is intended to provide summary information about each member for administrative review, analytics, or general browsing. It supports filtering and sorting on fields like display_name, email, verification status, account status, and registration date. Ideal for both system administrators and moderators managing user engagement.","path":"/discussionBoard/moderator/members","method":"get","description":"Retrieve a comprehensive, paginated list of all registered members in the discussion board system. This endpoint is essential for administrative oversight, user analytics, and moderation workflows. It provides display name, email, verification status, registration timestamp, current status, and last login at a summary level, avoiding sensitive information such as password hashes.\n\nAccess to this endpoint is typically restricted to admins and moderators for user management and reporting purposes. It supports review of member activity and enables efficient bulk monitoring for suspicious or low-quality users.\n\nUnderlying data is sourced directly from the 'discussion_board_members' table, ensuring all fields are up to date and audit-ready. The results can be sorted or filtered by the consumer to meet specific operational needs.\n\nRelated endpoints may include details retrieval (/members/{memberId}) and member moderation actions accessible by authorized roles.","summary":"Lists all members in the discussion board system with summary information.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated summary information of members.","typeName":"IPageIDiscussionBoardMember.ISummary"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator"},{"specification":"Performs an advanced search over the member accounts in the 'discussion_board_members' table. This allows admins and moderators to filter users by display name, registration date, verification status, current account status, and activity. Returned results are paginated with configurable sorting and search options. This enables targeted audits or reports.","path":"/discussionBoard/admin/members","method":"patch","description":"Search and filter the discussion board member base using advanced criteria such as display name, email, verification status, registration period, or account status.\n\nThis endpoint is used by administrators and moderators to execute audits, conduct user engagement analyses, or identify members for further action (such as suspension or promotion). Flexible pagination and customizable sort ordering help in reviewing large user lists efficiently.\n\nIt operates on the 'discussion_board_members' table, leveraging search indexes and respecting role-based access. Sensitive data like passwords are excluded from the result.\n\nOther related endpoints include member details retrieval and member account management operations.","summary":"Allows advanced filtering, sorting, and paginated retrieval of members for audits and reports.","parameters":[],"requestBody":{"description":"Specifies the search, filter, and pagination criteria.","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated list of filtered members matching the search criteria.","typeName":"IPageIDiscussionBoardMember"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"Performs an advanced search over the member accounts in the 'discussion_board_members' table. This allows admins and moderators to filter users by display name, registration date, verification status, current account status, and activity. Returned results are paginated with configurable sorting and search options. This enables targeted audits or reports.","path":"/discussionBoard/moderator/members","method":"patch","description":"Search and filter the discussion board member base using advanced criteria such as display name, email, verification status, registration period, or account status.\n\nThis endpoint is used by administrators and moderators to execute audits, conduct user engagement analyses, or identify members for further action (such as suspension or promotion). Flexible pagination and customizable sort ordering help in reviewing large user lists efficiently.\n\nIt operates on the 'discussion_board_members' table, leveraging search indexes and respecting role-based access. Sensitive data like passwords are excluded from the result.\n\nOther related endpoints include member details retrieval and member account management operations.","summary":"Allows advanced filtering, sorting, and paginated retrieval of members for audits and reports.","parameters":[],"requestBody":{"description":"Specifies the search, filter, and pagination criteria.","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated list of filtered members matching the search criteria.","typeName":"IPageIDiscussionBoardMember"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"Fetches the complete profile and activity summary for a single member, identified by their unique member ID. This operation accesses the 'discussion_board_members' table and all directly associated data. It is used for detailed audits, profile views, and content moderation tasks.","path":"/discussionBoard/admin/members/{memberId}","method":"get","description":"Retrieve the full profile, status, and history of a specified discussion board member by their unique ID. The returned data includes display name, registration date, verification status, email, current account status, last login time, and related audit indicators, as defined in the 'discussion_board_members' schema.\n\nThis endpoint is critical for administrators and moderators handling user-specific reviews, suspensions, or appeals. It helps ensure due process, provides transparency in moderation, and supports escalation workflows.\n\nData is strictly sourced from the 'discussion_board_members' table, and any references to related entities (such as recent posts, comments, or voting behavior) are accessible via other endpoints. Access is role-protected due to the sensitive nature of personal data.\n\nIt is closely related to endpoints for listing members, editing their status, and conducting moderation actions.","summary":"Retrieves the detailed profile of a specific member by their unique ID.","parameters":[{"name":"memberId","description":"Unique identifier of the target member.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified member.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"Fetches the complete profile and activity summary for a single member, identified by their unique member ID. This operation accesses the 'discussion_board_members' table and all directly associated data. It is used for detailed audits, profile views, and content moderation tasks.","path":"/discussionBoard/moderator/members/{memberId}","method":"get","description":"Retrieve the full profile, status, and history of a specified discussion board member by their unique ID. The returned data includes display name, registration date, verification status, email, current account status, last login time, and related audit indicators, as defined in the 'discussion_board_members' schema.\n\nThis endpoint is critical for administrators and moderators handling user-specific reviews, suspensions, or appeals. It helps ensure due process, provides transparency in moderation, and supports escalation workflows.\n\nData is strictly sourced from the 'discussion_board_members' table, and any references to related entities (such as recent posts, comments, or voting behavior) are accessible via other endpoints. Access is role-protected due to the sensitive nature of personal data.\n\nIt is closely related to endpoints for listing members, editing their status, and conducting moderation actions.","summary":"Retrieves the detailed profile of a specific member by their unique ID.","parameters":[{"name":"memberId","description":"Unique identifier of the target member.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified member.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"Creates a new member account in the discussion board via an explicit registration operation. Operates on the 'discussion_board_members' table with required attributes: display_name, email, password_hash (hashed before persistence), and initial status. Verification status and registration timestamp are managed by the system. Implements account registration and onboarding business workflows.","path":"/discussionBoard/members","method":"post","description":"Create a new member account in the discussion board. The operation registers a user-provided display name, email, password (hashed before storage), and initializes the verification and status fields as per business process. This endpoint is the core registration pathway and supports required data validations (e.g., unique email, proper format, password strength).\n\nThe created member is entered into the 'discussion_board_members' table with all required attributes and audit timestamps. Typical roles allowed to use this endpoint are guests (self-registration) and admins creating users for onboarding. It is protected to prevent mass registration abuse by rate-limiting and input validation.\n\nSuccessful execution returns the new member's profile. The operation is closely related to endpoints for user login, verification, and profile updates.","summary":"Registers a new member account in the discussion board system.","parameters":[],"requestBody":{"description":"Member registration details.","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"The newly created member profile.","typeName":"IDiscussionBoardMember"},"authorizationRoles":[],"name":"create","authorizationRole":null},{"specification":"Updates an existing member account, referenced by its unique member ID. This operation allows profile or status modification in the 'discussion_board_members' table, such as display name, email, password (hash is updated), or status changes (e.g., activate/suspend/ban). Audit timestamps are updated accordingly. Access is strictly limited to admins (for any member) or members updating their own profile.","path":"/discussionBoard/admin/members/{memberId}","method":"put","description":"Update the profile or status of a specific member account by their unique ID. This operation allows for editing display name, email, password (which must be provided as a hash), verification status updates, or administrative status changes.\n\nThe operation is performed on the 'discussion_board_members' table. All changes are logged for audit purposes; restricted fields such as email or verification flags may only be updated by admins. Members can update their own display name and password when authenticated. Strict validation is performed on attempted updates, and action is denied if the requester lacks the required permissions.\n\nThis operation is used in conjunction with member detail/view endpoints and must respect role-based access rules.","summary":"Updates member profile or status by their unique ID.","parameters":[{"name":"memberId","description":"Unique identifier of the member to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated member profile or status.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"The updated member profile data.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["admin","member"],"name":"update","authorizationRole":"admin"},{"specification":"Updates an existing member account, referenced by its unique member ID. This operation allows profile or status modification in the 'discussion_board_members' table, such as display name, email, password (hash is updated), or status changes (e.g., activate/suspend/ban). Audit timestamps are updated accordingly. Access is strictly limited to admins (for any member) or members updating their own profile.","path":"/discussionBoard/member/members/{memberId}","method":"put","description":"Update the profile or status of a specific member account by their unique ID. This operation allows for editing display name, email, password (which must be provided as a hash), verification status updates, or administrative status changes.\n\nThe operation is performed on the 'discussion_board_members' table. All changes are logged for audit purposes; restricted fields such as email or verification flags may only be updated by admins. Members can update their own display name and password when authenticated. Strict validation is performed on attempted updates, and action is denied if the requester lacks the required permissions.\n\nThis operation is used in conjunction with member detail/view endpoints and must respect role-based access rules.","summary":"Updates member profile or status by their unique ID.","parameters":[{"name":"memberId","description":"Unique identifier of the member to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated member profile or status.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"The updated member profile data.","typeName":"IDiscussionBoardMember"},"authorizationRoles":["admin","member"],"name":"update","authorizationRole":"member"},{"specification":"Deletes (hard delete) a specified member account, identified by its unique member ID, from the 'discussion_board_members' table. Since there is no soft delete field besides password or last_login_at, the delete is irreversible and removes the member account along with related foreign key dependencies. Available only to admins to prevent data loss by unauthorized users.","path":"/discussionBoard/admin/members/{memberId}","method":"delete","description":"Irreversibly deletes a member account from the system by its unique member ID. Once executed, the operation removes the member row from the 'discussion_board_members' table and cascades deletions to related entities as per the schema relationships.\n\nThis is a sensitive operation limited to admin users for regulatory, compliance, and data safety reasons. Accidental usage is prevented via additional confirmation workflows, and all deletions are audit-logged.\n\nThis endpoint works in concert with member listing and moderation tools, supporting due process in the event of policy breaches or account requests.","summary":"Deletes a member account permanently by unique ID.","parameters":[{"name":"memberId","description":"Unique identifier of the member to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of guest records representing temporary or unauthenticated access sessions, as managed in the 'discussion_board_guests' table. Used by administrators and certain analytics workflows to survey guest traffic and behavior. Results are displayed in summary form such as IP address, session token, and timestamp of entry.","path":"/discussionBoard/admin/guests","method":"get","description":"Fetch a paginated list of all guest session records in the discussion board system, including session start time, guest IP address, and session token. The guest entity is useful for analytics, abuse monitoring, and minimal audit tracing, as outlined in the system requirements.\n\nAccessible to admins or automated analytics agents. The endpoint provides an overview of recent and historical guest entries and supports further drill-down via guest detail endpoints.","summary":"Lists all guest session records with summary details.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated summary information of guests.","typeName":"IPageIDiscussionBoardGuest.ISummary"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Executes an advanced, filterable search on the guest access log ('discussion_board_guests') for administrative analytics and compliance purposes. Enables admins to investigate guest patterns, session tokens, entry time windows, and IP distribution using flexible search and pagination.","path":"/discussionBoard/admin/guests","method":"patch","description":"Perform complex filtering or reporting on guest session access data, specifying search criteria such as session entry timestamp, guest IP, or session token fragments. Used to analyze access patterns, investigate abuse, and ensure service quality per compliance requirements.\n\nAccessible only to admins. This endpoint supports operational analytics as well as legal/evidence requests and abuse investigations, leveraging search and sort features efficiently over the guest entry log.\n\nResults can be cross-referenced with other access log events for more comprehensive auditing.","summary":"Allows advanced search and filtering of guest session records for analytics and compliance.","parameters":[],"requestBody":{"description":"Search and filter specification for guest entries.","typeName":"IDiscussionBoardGuest.IRequest"},"responseBody":{"description":"Paginated list of filtered guest entries.","typeName":"IPageIDiscussionBoardGuest"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetches full detail for an individual guest session record by its unique identifier. Directly reads from 'discussion_board_guests' and includes complete entry data for the session, including IP, session token, and audit-relevant timestamps. Used by admins to investigate suspicious or problematic guest access.","path":"/discussionBoard/admin/guests/{guestId}","method":"get","description":"Retrieve detailed information for a single guest access session using the unique guest ID. Returns all available fields from the 'discussion_board_guests' table, such as IP address, session token, and session timestamps.\n\nTypically used by administrative staff or automated reports for detailed review, compliance analysis, or security investigations. The data helps correlate specific guest sessions with access log records and supports troubleshooting of unregistered user incidents.\n\nUsage is restricted to admins to protect sensitive network and system data. Other guest-related endpoints provide broader analytic lists or support operational monitoring.","summary":"Fetches a detailed guest session record by unique ID.","parameters":[{"name":"guestId","description":"Unique identifier of the target guest.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified guest session.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new guest entry, initiating a tracked session for an unauthenticated user in the discussion board. Target: 'discussion_board_guests' table. Captures IP, session token, and entry timestamp as per the schema; used for guest analytics, abuse prevention, and tracking policy requirements for guest access.","path":"/discussionBoard/guests","method":"post","description":"Registers a new guest access record in the system, typically upon an unauthenticated visit or session start. Required values include guest IP, session token, and entry timestamp. This endpoint fulfills mandatory audit and analytics needs for guest traffic, with all data written to the 'discussion_board_guests' table.\n\nMay be invoked by the public system or via admin APIs simulating guest activity. Results support further querying and analytics. Only schema-valid information is accepted, and abuse is mitigated by input validation and rate limiting.\n\nOutputs the created guest record for auditability or operational review.","summary":"Creates a new guest session record in the discussion board system.","parameters":[],"requestBody":{"description":"Details for registering a new guest session.","typeName":"IDiscussionBoardGuest.ICreate"},"responseBody":{"description":"The newly registered guest session record.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":[],"name":"create","authorizationRole":null},{"specification":"Updates a guest session record, allowing corrections or administrative modifications in the 'discussion_board_guests' table. Accepts guestId as path parameter, supporting edits to guest_ip, session_token, or entry time (where permitted by policy). Only accessible by admins for compliance or analytic correction.","path":"/discussionBoard/admin/guests/{guestId}","method":"put","description":"Edit an existing guest session entry by guest ID. Supported updates include guest IP, session token, or session entry time (to correct inaccurate audit data or for compliance reasons). All updates are logged for traceability, and sensitive changes may be audit-flagged for later review.\n\nIntended strictly for administrators handling compliance requests or technical support. Avoid unnecessary changes to maintain audit integrity. The operation supports coordination with access logs for full analytic accuracy.","summary":"Updates a guest session record by unique ID.","parameters":[{"name":"guestId","description":"Unique identifier of the guest session record.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated guest session details.","typeName":"IDiscussionBoardGuest.IUpdate"},"responseBody":{"description":"The updated guest session record.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Permanently deletes a guest session record, identified by unique guest ID, from the 'discussion_board_guests' table. Used to remove erroneous or outdated guest records, as there is no soft delete field. Deletion is a hard, irreversible operation, monitored via audit logs. Only accessible to admins for compliance and privacy requirements.","path":"/discussionBoard/admin/guests/{guestId}","method":"delete","description":"Irreversibly removes a guest session record from the database by unique guest ID. Once deleted, the record is permanently lost, and all analytics or audit trails referencing this session will note its removal.\n\nPerformed exclusively by administrators, typically in the context of privacy requests or record correction. The operation is accompanied by audit logging to maintain system traceability and accountability. Related endpoints provide list and detail access to guest sessions.\n\nThe operation covers all guest entity fields from the 'discussion_board_guests' table, as no soft delete or restoration is permitted by schema policy.","summary":"Deletes a guest session record by unique ID (hard delete).","parameters":[{"name":"guestId","description":"Unique identifier of the guest session record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of discussion board posts. This operation queries the 'discussion_board_posts' Prisma table, supporting filtering by parameters such as author, category, tag, and thread status. Only posts not soft-deleted (deleted_at is null) are included, and relations such as author display_name, category, and tags can be joined for display. Business rules require that posts be shown in reverse chronological order by default, with advanced sorting and filtering supported for administrative users. This endpoint forms the core content display for members and guests, and must support RBAC restrictions (as per requirements: guests see only public data, members see both public and authorized categories).","path":"/discussionBoard/posts","method":"get","description":"This endpoint returns a paginated and optionally filtered list of discussion board posts. Each post includes atomic data from 'discussion_board_posts' and expands for display purposes with information from related entities such as authors, categories, and tags. Posts with a non-null 'deleted_at' are omitted, ensuring soft-deleted posts are not displayed. \n\nMembers and guests can use this endpoint to browse recent and trending topics. RBAC and privacy controls are implemented such that guests can only view public categories and posts, while authenticated members can also access private sections according to their permissions. Pagination and sorting parameters are available for efficient data loading and navigation. \n\nSpecial handling ensures that posts from suspended or banned authors may be excluded based on business/configuration policy. Error cases such as invalid pagination/sorting parameters result in appropriate error responses.","summary":"Retrieve a paginated list of discussion board posts for members and guests.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated results of discussion board posts, including expanded summary data for display, with author and category information where relevant.","typeName":"IPageIDiscussionBoardPost.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Allows advanced filtering, searching, and paginated retrieval of discussion board posts from the 'discussion_board_posts' table. Supports complex query parameters including partial title/body text, category, tag, author, date range, and sort order. This API is key for search-intensive UIs, moderation queues, and bulk content browsing. The request body follows the 'IDiscussionBoardPost.IRequest' structure for flexible queries. Returns a paginated list with rich summary information suitable for feed or moderation displays.","path":"/discussionBoard/posts","method":"patch","description":"Enables advanced search and retrieval of posts, combining free-text search (on 'title' and 'body') with structured filters like category, tag, author, and created_at window. Uses full-text GIN indexing on searchable fields for performance. Results are paginated to support scalable UI loading and admin/moderation workflows.\n\nAuthorization is enforced: guests access only public categories, members according to their role, and moderators/admins can view all posts, including soft-deleted ones if permitted. This operation leverages Prisma model fields to determine which posts to include, sorting based on client query or default by newest. Badly-formed queries or permission issues are handled with validation errors. \n\nModerators can use this endpoint for report triage, identifying posts with high report count or suspicious patterns.","summary":"Advanced/paginated search of discussion board posts with filtering and sorting.","parameters":[],"requestBody":{"description":"Advanced search and pagination parameters for discussion board posts, including text, category, tag, and sort configuration following IDiscussionBoardPost.IRequest specification.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated search results matching search/filter criteria, with post summaries, author, and category data included as needed.","typeName":"IPageIDiscussionBoardPost.ISummary"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"Retrieves detailed information for a single discussion board post specified by its unique postId (UUID). The operation reads all atomic fields from 'discussion_board_posts' matching the provided postId, excluding posts that have been soft-deleted (non-null deleted_at). Business relationships (author display_name, category, tags, edit history) can be expanded. Used for viewing single posts in feeds, reading posts with full comment threads, or moderation review.","path":"/discussionBoard/posts/{postId}","method":"get","description":"Fetches the full details of a specific post identified by postId. The result includes all atomic data from 'discussion_board_posts', with the joined author profile and category/tag relations as needed for display and policy enforcement. Posts where 'deleted_at' is non-null (soft deleted) are not returned to ordinary guests or members, but may be accessible to moderators/admins as per RBAC.\n\nPath parameter 'postId' must be a valid UUID and corresponds directly to the primary key of the post record. The API checks both post existence and permission: if the post is restricted (private category) or deleted, the API returns an error unless the requester has elevated permission. This endpoint supports detailed view displays and auditing, with full presentation of edit/audit history if required by UI or policy.","summary":"Get full details of a specific discussion board post by ID.","parameters":[{"name":"postId","description":"Unique identifier of the target discussion board post (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The specified post record, including all atomic fields, full author, category, and tag relationships. Returns null/error if post not found or access denied.","typeName":"IDiscussionBoardPost"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Creates a new discussion board post in the 'discussion_board_posts' table. The creation request body must include an author (member), optional parent ID for threading, title, and body. The post is assigned a unique ID, created_at timestamp, and any specified category or tags via junction tables. This operation enforces that only authenticated members can create posts, maintaining audit trails via member IDs. On success, returns the full new post record including assigned relations.","path":"/discussionBoard/member/posts","method":"post","description":"This endpoint allows an authenticated member to submit a new post to the discussion board. The incoming request body supplies the core data: author member ID, post title, body content, and optional parent_id for threading hierarchy. At creation, the API assigns post ID, timestamps (created_at/updated_at), and sets deleted_at to null. Category and tag associations are handled in related tables if included in the request.\n\nOnly authenticated non-banned members may create posts; account/permission checks are automatically enforced. Audit and compliance logging is carried out for all post creations. Administrative and moderation teams can view these audit trails for compliance and dispute resolution.","summary":"Create a new discussion board post as a member user.","parameters":[],"requestBody":{"description":"Post creation payload following IDiscussionBoardPost.ICreate schema: includes author, title, body, and parent_id as needed.","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"The new post record, fully populated, including assigned IDs, timestamps, and related author/category information.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"Updates an existing discussion board post specified by postId with new values for editable fields. The request body follows 'IDiscussionBoardPost.IUpdate' type, allowing selective edits to title, body, or parent_id. This operation checks the requesting member's ownership or role-based permission (admin/moderator override), and ensures posts with non-null deleted_at cannot be updated. Audit trails for pre- and post-edit values are maintained for moderation accountability.","path":"/discussionBoard/member/posts/{postId}","method":"put","description":"Allows either the original member-author, or users with appropriate moderator/admin roles, to edit existing post content. Editable fields include title, body, and parent_id. The endpoint records audit logs and post edit histories. \n\nThe path parameter 'postId' identifies the target post. Edit rights are checked: members can edit their own posts (unless soft-deleted or locked), while moderators/admins can edit any post for moderation or compliance. If a post is soft-deleted (deleted_at not null), updates are forbidden unless restoring (if supported elsewhere). Validation ensures all fields comply with atomic requirements in 'discussion_board_posts'. Error responses are returned for unauthorized edit attempts, bad format, or locked/deleted posts.","summary":"Update a discussion board post's fields (title, body, parent/threading assignments).","parameters":[{"name":"postId","description":"Unique identifier of the discussion board post to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the post as per IDiscussionBoardPost.IUpdate schema. Includes title/body/parent_id changes.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"The updated post record, with new values and edit timestamp, and current category/tag relationships if changed.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"member"},{"specification":"Updates an existing discussion board post specified by postId with new values for editable fields. The request body follows 'IDiscussionBoardPost.IUpdate' type, allowing selective edits to title, body, or parent_id. This operation checks the requesting member's ownership or role-based permission (admin/moderator override), and ensures posts with non-null deleted_at cannot be updated. Audit trails for pre- and post-edit values are maintained for moderation accountability.","path":"/discussionBoard/moderator/posts/{postId}","method":"put","description":"Allows either the original member-author, or users with appropriate moderator/admin roles, to edit existing post content. Editable fields include title, body, and parent_id. The endpoint records audit logs and post edit histories. \n\nThe path parameter 'postId' identifies the target post. Edit rights are checked: members can edit their own posts (unless soft-deleted or locked), while moderators/admins can edit any post for moderation or compliance. If a post is soft-deleted (deleted_at not null), updates are forbidden unless restoring (if supported elsewhere). Validation ensures all fields comply with atomic requirements in 'discussion_board_posts'. Error responses are returned for unauthorized edit attempts, bad format, or locked/deleted posts.","summary":"Update a discussion board post's fields (title, body, parent/threading assignments).","parameters":[{"name":"postId","description":"Unique identifier of the discussion board post to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the post as per IDiscussionBoardPost.IUpdate schema. Includes title/body/parent_id changes.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"The updated post record, with new values and edit timestamp, and current category/tag relationships if changed.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Updates an existing discussion board post specified by postId with new values for editable fields. The request body follows 'IDiscussionBoardPost.IUpdate' type, allowing selective edits to title, body, or parent_id. This operation checks the requesting member's ownership or role-based permission (admin/moderator override), and ensures posts with non-null deleted_at cannot be updated. Audit trails for pre- and post-edit values are maintained for moderation accountability.","path":"/discussionBoard/admin/posts/{postId}","method":"put","description":"Allows either the original member-author, or users with appropriate moderator/admin roles, to edit existing post content. Editable fields include title, body, and parent_id. The endpoint records audit logs and post edit histories. \n\nThe path parameter 'postId' identifies the target post. Edit rights are checked: members can edit their own posts (unless soft-deleted or locked), while moderators/admins can edit any post for moderation or compliance. If a post is soft-deleted (deleted_at not null), updates are forbidden unless restoring (if supported elsewhere). Validation ensures all fields comply with atomic requirements in 'discussion_board_posts'. Error responses are returned for unauthorized edit attempts, bad format, or locked/deleted posts.","summary":"Update a discussion board post's fields (title, body, parent/threading assignments).","parameters":[{"name":"postId","description":"Unique identifier of the discussion board post to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the post as per IDiscussionBoardPost.IUpdate schema. Includes title/body/parent_id changes.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"The updated post record, with new values and edit timestamp, and current category/tag relationships if changed.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes (soft deletion) a discussion board post by setting its deleted_at field if the post exists and is not already deleted. Only the post owner, moderators, or admins may erase posts. Soft deletion ensures post data remains in the database for audit and possible restoration. Related comments and votes are typically not deleted, but may be hidden depending on business rules. This operation checks RBAC roles and ownership.","path":"/discussionBoard/member/posts/{postId}","method":"delete","description":"Performs a soft-deletion of the specified discussion board post by setting 'deleted_at' timestamp in 'discussion_board_posts'. RBAC enforcement ensures only the original post author, or users with appropriate moderator/admin roles, can request deletion. Posts already (soft) deleted are not affected, and an error is returned if attempting to delete a non-existent or inaccessible post.\n\nSoft deletion means the post is no longer visible in normal feeds and searches but is preserved for compliance, moderation, audit, or possible later restoration. Comments, votes, and related data are typically retained but hidden in ordinary UIs. The API maintains a full log of the request and result for audit and transparency.","summary":"Soft-delete a discussion board post by ID, subject to RBAC and ownership checks.","parameters":[{"name":"postId","description":"Unique identifier of the discussion board post to soft-delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"member"},{"specification":"Deletes (soft deletion) a discussion board post by setting its deleted_at field if the post exists and is not already deleted. Only the post owner, moderators, or admins may erase posts. Soft deletion ensures post data remains in the database for audit and possible restoration. Related comments and votes are typically not deleted, but may be hidden depending on business rules. This operation checks RBAC roles and ownership.","path":"/discussionBoard/moderator/posts/{postId}","method":"delete","description":"Performs a soft-deletion of the specified discussion board post by setting 'deleted_at' timestamp in 'discussion_board_posts'. RBAC enforcement ensures only the original post author, or users with appropriate moderator/admin roles, can request deletion. Posts already (soft) deleted are not affected, and an error is returned if attempting to delete a non-existent or inaccessible post.\n\nSoft deletion means the post is no longer visible in normal feeds and searches but is preserved for compliance, moderation, audit, or possible later restoration. Comments, votes, and related data are typically retained but hidden in ordinary UIs. The API maintains a full log of the request and result for audit and transparency.","summary":"Soft-delete a discussion board post by ID, subject to RBAC and ownership checks.","parameters":[{"name":"postId","description":"Unique identifier of the discussion board post to soft-delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"Deletes (soft deletion) a discussion board post by setting its deleted_at field if the post exists and is not already deleted. Only the post owner, moderators, or admins may erase posts. Soft deletion ensures post data remains in the database for audit and possible restoration. Related comments and votes are typically not deleted, but may be hidden depending on business rules. This operation checks RBAC roles and ownership.","path":"/discussionBoard/admin/posts/{postId}","method":"delete","description":"Performs a soft-deletion of the specified discussion board post by setting 'deleted_at' timestamp in 'discussion_board_posts'. RBAC enforcement ensures only the original post author, or users with appropriate moderator/admin roles, can request deletion. Posts already (soft) deleted are not affected, and an error is returned if attempting to delete a non-existent or inaccessible post.\n\nSoft deletion means the post is no longer visible in normal feeds and searches but is preserved for compliance, moderation, audit, or possible later restoration. Comments, votes, and related data are typically retained but hidden in ordinary UIs. The API maintains a full log of the request and result for audit and transparency.","summary":"Soft-delete a discussion board post by ID, subject to RBAC and ownership checks.","parameters":[{"name":"postId","description":"Unique identifier of the discussion board post to soft-delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of comments belonging to a specific discussion board post. This queries the 'discussion_board_comments' Prisma table for records matching the postId in the path. Supports filtering, sorting, and threading (by parent_id). Soft-deleted comments (deleted_at not null) are excluded from ordinary member/guest views. Used for displaying comment threads beneath a post.","path":"/discussionBoard/posts/{postId}/comments","method":"get","description":"Returns a paginated and sorted list of comments directly attached to the specified post. Only comments where 'deleted_at' is null are included for normal users (members/guests), though moderators/admins may access all comments (RBAC enforced). Threading is supported via parent_id references, allowing UIs to reconstruct hierarchies.\n\nPath parameter 'postId' is validated and must match a valid post in the database. Comments are filtered and paginated using default or client-supplied parameters. The endpoint can be used to render full or partial comment trees beneath the post. Errors occur if postId is invalid or inaccessible, or if pagination parameters are malformed.","summary":"Retrieve paginated comments for a specific post (with threading support).","parameters":[{"name":"postId","description":"Unique identifier of the discussion board post for which to fetch comments (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of comment summaries for the specified post, with optional thread hierarchy information for display.","typeName":"IPageIDiscussionBoardComment.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Provides advanced querying, filtering, and sorting of comments beneath a particular discussion board post. Supports searching by text, filtering by member, and date range, in addition to tree navigation via parent_id. Implements full and partial thread loading. Returns paginated results as per 'IPageIDiscussionBoardComment.ISummary'. Request body implements 'IDiscussionBoardComment.IRequest'. RBAC controls visibility of soft-deleted or restricted comments.","path":"/discussionBoard/posts/{postId}/comments","method":"patch","description":"Allows clients to fetch comments underneath a post with fine-grained filters and search options. Full-text search operates on the 'body' field, and structured filters may include member, time window, and thread position (parent_id). Pagination and sorting parameters enable large thread navigation. \n\nComments with non-null 'deleted_at' are not included for members/guests, but may be seen by admins/moderators as policy requires. All results belong to the post indicated by the path parameter 'postId'. If the post does not exist or permissions do not permit access, error responses are issued. Threaded loading is supported, so requests can specify root, partial, or flat loading modes as per UI requirements.","summary":"Search/filter/paginate comments on a specific post (advanced).","parameters":[{"name":"postId","description":"Unique identifier of the post for which to search comments (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter, search, and pagination request for post comments as specified by IDiscussionBoardComment.IRequest.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated, filtered set of comments for the target post, suitable for hierarchical or flat thread display. May include author information, time, and parent identifiers.","typeName":"IPageIDiscussionBoardComment.ISummary"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"Fetches the full details of a single comment belonging to a specific post, identified by both postId and commentId (UUIDs). Queries 'discussion_board_comments' table, ensuring the comment exists under the given postId and is not soft-deleted (deleted_at null). Relationships like author and parent (for threading) can be expanded in the response as needed for display or moderation.","path":"/discussionBoard/posts/{postId}/comments/{commentId}","method":"get","description":"Provides full detail on a single comment referenced by commentId beneath the given postId. Ensures relational linkage: comment must belong to specified post. Excludes comments with non-null deleted_at for ordinary users, unless RBAC allows access (e.g., moderators/admins). The response includes all atomic fields (from the discussion_board_comments table), and may join author/member and thread hierarchy for display.\n\nPath parameters postId and commentId are cross-validated for linkage and validity. Unauthorized or not-found combinations yield error responses. RBAC applies per role in determining if deleted or restricted comments may be viewed.","summary":"Get full detail on a specific comment by post and comment ID.","parameters":[{"name":"postId","description":"Unique identifier of the parent post (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The specified comment record, including author and threading information (if found and permitted). Error/null otherwise.","typeName":"IDiscussionBoardComment"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Creates a new comment for a given post, supplied in the request body as per 'IDiscussionBoardComment.ICreate' schema. The comment must identify its author (member), body content, and may optionally assign a parent_id for threading. On successful insert, returns the newly created comment record. Only authenticated members can create comments; permission and moderation policy is applied.","path":"/discussionBoard/member/posts/{postId}/comments","method":"post","description":"Allows authenticated members to contribute a comment on the specified post. The creation payload provides the author memberId, comment body, and an optional parentId to facilitate threading. All comments are assigned unique IDs and timestamps. Association with the target post is enforced.\n\nBusiness logic enforces RBAC: only active, verified member accounts may comment; banned/suspended/restricted accounts are denied. Moderation controls, such as comment quotas or rate limits, may be enforced based on business policy. All successful comment creations are audited, and creation logs are maintained for moderation and policy review.","summary":"Create a new comment for the specified post (members only).","parameters":[{"name":"postId","description":"Unique identifier of the post to which the comment is being added (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for comment creation, including author, body, optional parent_id, following IDiscussionBoardComment.ICreate.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Newly created comment record, including author, parent/thread info, and timestamp.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"Updates an existing comment (fields: body, parent_id) under a post, as identified by postId and commentId. The request body matches 'IDiscussionBoardComment.IUpdate'. Update is allowed only for the comment's author or users holding moderator/admin roles. Edits are audit-logged, and edit history is appended to support transparency. Soft-deleted comments (deleted_at not null) cannot be updated, except via restore operations elsewhere.","path":"/discussionBoard/member/posts/{postId}/comments/{commentId}","method":"put","description":"Permits the original comment author, or moderators/admins, to edit an existing comment. Editable fields are body and parent_id only; attempts to modify other fields result in validation error. The endpoint maintains audit logs and comment edit trails consistent with moderation and compliance policy.\n\nRBAC enforcement: a member can only edit their own active comments; moderators/admins may edit comments for moderation purposes. If the comment is soft-deleted or the post/comment linkage is invalid, the update is denied. The edit is timestamped for both audit and user display purposes.","summary":"Update a comment's body or parent/threading assignments (edit/audit).","parameters":[{"name":"postId","description":"Unique identifier of the parent post for the comment (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the comment as per IDiscussionBoardComment.IUpdate, supporting only editable fields.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object, including new body/parent and audit fields; retains all relevant relationships.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"member"},{"specification":"Updates an existing comment (fields: body, parent_id) under a post, as identified by postId and commentId. The request body matches 'IDiscussionBoardComment.IUpdate'. Update is allowed only for the comment's author or users holding moderator/admin roles. Edits are audit-logged, and edit history is appended to support transparency. Soft-deleted comments (deleted_at not null) cannot be updated, except via restore operations elsewhere.","path":"/discussionBoard/moderator/posts/{postId}/comments/{commentId}","method":"put","description":"Permits the original comment author, or moderators/admins, to edit an existing comment. Editable fields are body and parent_id only; attempts to modify other fields result in validation error. The endpoint maintains audit logs and comment edit trails consistent with moderation and compliance policy.\n\nRBAC enforcement: a member can only edit their own active comments; moderators/admins may edit comments for moderation purposes. If the comment is soft-deleted or the post/comment linkage is invalid, the update is denied. The edit is timestamped for both audit and user display purposes.","summary":"Update a comment's body or parent/threading assignments (edit/audit).","parameters":[{"name":"postId","description":"Unique identifier of the parent post for the comment (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the comment as per IDiscussionBoardComment.IUpdate, supporting only editable fields.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object, including new body/parent and audit fields; retains all relevant relationships.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"Updates an existing comment (fields: body, parent_id) under a post, as identified by postId and commentId. The request body matches 'IDiscussionBoardComment.IUpdate'. Update is allowed only for the comment's author or users holding moderator/admin roles. Edits are audit-logged, and edit history is appended to support transparency. Soft-deleted comments (deleted_at not null) cannot be updated, except via restore operations elsewhere.","path":"/discussionBoard/admin/posts/{postId}/comments/{commentId}","method":"put","description":"Permits the original comment author, or moderators/admins, to edit an existing comment. Editable fields are body and parent_id only; attempts to modify other fields result in validation error. The endpoint maintains audit logs and comment edit trails consistent with moderation and compliance policy.\n\nRBAC enforcement: a member can only edit their own active comments; moderators/admins may edit comments for moderation purposes. If the comment is soft-deleted or the post/comment linkage is invalid, the update is denied. The edit is timestamped for both audit and user display purposes.","summary":"Update a comment's body or parent/threading assignments (edit/audit).","parameters":[{"name":"postId","description":"Unique identifier of the parent post for the comment (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the comment as per IDiscussionBoardComment.IUpdate, supporting only editable fields.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object, including new body/parent and audit fields; retains all relevant relationships.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes (soft deletion) a comment under a post by setting deleted_at in 'discussion_board_comments' to the current timestamp. Permitted only by the comment's author, moderators, or admins. The operation includes audit-logging for compliance and tracks attempts for transparency. All relationships (parent/thread, votes) remain in DB, but comment is omitted from user-visible results.","path":"/discussionBoard/member/posts/{postId}/comments/{commentId}","method":"delete","description":"Performs a soft-delete of a comment by setting deleted_at, thereby hiding it from ordinary user displays but preserving it for moderation, compliance, and possible later restoration. Only the owning user, moderator, or admin may erase a comment, as enforced via RBAC and ownership logic. All deletes are audit-logged. \n\nAttempts to delete already-removed or inaccessible comments raise error responses. This operation is safe with respect to thread hierarchy (children remain, UI may choose to display as \"deleted\").","summary":"Soft-delete a comment from a post (with full audit and RBAC checks).","parameters":[{"name":"postId","description":"Unique identifier of the parent post (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to soft-delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"member"},{"specification":"Deletes (soft deletion) a comment under a post by setting deleted_at in 'discussion_board_comments' to the current timestamp. Permitted only by the comment's author, moderators, or admins. The operation includes audit-logging for compliance and tracks attempts for transparency. All relationships (parent/thread, votes) remain in DB, but comment is omitted from user-visible results.","path":"/discussionBoard/moderator/posts/{postId}/comments/{commentId}","method":"delete","description":"Performs a soft-delete of a comment by setting deleted_at, thereby hiding it from ordinary user displays but preserving it for moderation, compliance, and possible later restoration. Only the owning user, moderator, or admin may erase a comment, as enforced via RBAC and ownership logic. All deletes are audit-logged. \n\nAttempts to delete already-removed or inaccessible comments raise error responses. This operation is safe with respect to thread hierarchy (children remain, UI may choose to display as \"deleted\").","summary":"Soft-delete a comment from a post (with full audit and RBAC checks).","parameters":[{"name":"postId","description":"Unique identifier of the parent post (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to soft-delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"Deletes (soft deletion) a comment under a post by setting deleted_at in 'discussion_board_comments' to the current timestamp. Permitted only by the comment's author, moderators, or admins. The operation includes audit-logging for compliance and tracks attempts for transparency. All relationships (parent/thread, votes) remain in DB, but comment is omitted from user-visible results.","path":"/discussionBoard/admin/posts/{postId}/comments/{commentId}","method":"delete","description":"Performs a soft-delete of a comment by setting deleted_at, thereby hiding it from ordinary user displays but preserving it for moderation, compliance, and possible later restoration. Only the owning user, moderator, or admin may erase a comment, as enforced via RBAC and ownership logic. All deletes are audit-logged. \n\nAttempts to delete already-removed or inaccessible comments raise error responses. This operation is safe with respect to thread hierarchy (children remain, UI may choose to display as \"deleted\").","summary":"Soft-delete a comment from a post (with full audit and RBAC checks).","parameters":[{"name":"postId","description":"Unique identifier of the parent post (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to soft-delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves a list of discussion board comments from the database. It is associated with the 'discussion_board_comments' table as defined in the Prisma schema, allowing clients to fetch all comments, including their associated post and author information, in a simple paginated list. This is intended for use in UI comment feeds, moderation dashboards, and content browsing functions where advanced filtering is not required.","path":"/discussionBoard/member/comments","method":"get","description":"Retrieve a basic, paginated list of all discussion board comments, regardless of underlying post or author. This endpoint returns comments in chronological order by default and supports guest and member access. It directly queries the 'discussion_board_comments' table, referencing all comment fields as described in the schema.\n\nThis operation ensures that only comments not marked as soft deleted (i.e., with 'deleted_at' == null) are included in the results, fulfilling policy requirements for data integrity. Returned data includes the comment body, author details (via member foreign key), and post linkage for UI display or further navigation.\n\nSecurity considerations: As comments may appear in multiple discussion threads, care must be taken to prevent accidental exposure of restricted/private content. Pagination and performance best practices apply when scaling for larger boards. Error responses are returned if the database is inaccessible or if an invalid query parameter is provided.","summary":"Retrieve a flat list of all discussion board comments (from discussion_board_comments).","parameters":[],"requestBody":null,"responseBody":{"description":"List of comments available for display or further processing, including core details and links.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"member"},{"specification":"This operation retrieves a list of discussion board comments from the database. It is associated with the 'discussion_board_comments' table as defined in the Prisma schema, allowing clients to fetch all comments, including their associated post and author information, in a simple paginated list. This is intended for use in UI comment feeds, moderation dashboards, and content browsing functions where advanced filtering is not required.","path":"/discussionBoard/moderator/comments","method":"get","description":"Retrieve a basic, paginated list of all discussion board comments, regardless of underlying post or author. This endpoint returns comments in chronological order by default and supports guest and member access. It directly queries the 'discussion_board_comments' table, referencing all comment fields as described in the schema.\n\nThis operation ensures that only comments not marked as soft deleted (i.e., with 'deleted_at' == null) are included in the results, fulfilling policy requirements for data integrity. Returned data includes the comment body, author details (via member foreign key), and post linkage for UI display or further navigation.\n\nSecurity considerations: As comments may appear in multiple discussion threads, care must be taken to prevent accidental exposure of restricted/private content. Pagination and performance best practices apply when scaling for larger boards. Error responses are returned if the database is inaccessible or if an invalid query parameter is provided.","summary":"Retrieve a flat list of all discussion board comments (from discussion_board_comments).","parameters":[],"requestBody":null,"responseBody":{"description":"List of comments available for display or further processing, including core details and links.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"moderator"},{"specification":"This operation retrieves a list of discussion board comments from the database. It is associated with the 'discussion_board_comments' table as defined in the Prisma schema, allowing clients to fetch all comments, including their associated post and author information, in a simple paginated list. This is intended for use in UI comment feeds, moderation dashboards, and content browsing functions where advanced filtering is not required.","path":"/discussionBoard/admin/comments","method":"get","description":"Retrieve a basic, paginated list of all discussion board comments, regardless of underlying post or author. This endpoint returns comments in chronological order by default and supports guest and member access. It directly queries the 'discussion_board_comments' table, referencing all comment fields as described in the schema.\n\nThis operation ensures that only comments not marked as soft deleted (i.e., with 'deleted_at' == null) are included in the results, fulfilling policy requirements for data integrity. Returned data includes the comment body, author details (via member foreign key), and post linkage for UI display or further navigation.\n\nSecurity considerations: As comments may appear in multiple discussion threads, care must be taken to prevent accidental exposure of restricted/private content. Pagination and performance best practices apply when scaling for larger boards. Error responses are returned if the database is inaccessible or if an invalid query parameter is provided.","summary":"Retrieve a flat list of all discussion board comments (from discussion_board_comments).","parameters":[],"requestBody":null,"responseBody":{"description":"List of comments available for display or further processing, including core details and links.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"admin"},{"specification":"This operation enables complex search, filtering, and pagination for the discussion board comments, leveraging the 'discussion_board_comments' table in the Prisma schema. It allows clients to query comments using multiple criteria including post id, author id, query strings for text, creation date ranges, and soft-deletion status; supporting advanced moderation and analytics use cases.","path":"/discussionBoard/member/comments","method":"patch","description":"Enables advanced retrieval of discussion board comments, supporting pagination, search (by body/content), filtering (by parent_id, member id, or post id), date ranges, and soft/hard state as per the schema. This request body references the available dimensions as defined in 'discussion_board_comments'.\n\nThis operation is typically used in moderation panels, analytics tools, and advanced UI experiences where searching or narrowing down comments is required. The operation honors RBAC; members can see their own comments and public threads, while moderators and admins have broader visibility. Guests do not have access to advanced search for privacy and security reasons.\n\nThe endpoint is robust against errors when search criteria are invalid or if requested page size exceeds configured maximums. All search filters correspond exactly to atomic fields in the schema and result sets are returned in a defined order with metadata for pagination and total count.","summary":"Advanced search and paginate comments (from discussion_board_comments table).","parameters":[],"requestBody":{"description":"Search and filter criteria for comment retrieval as per comment schema.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated, filtered list of comments with full details for advanced use cases.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"member"},{"specification":"This operation enables complex search, filtering, and pagination for the discussion board comments, leveraging the 'discussion_board_comments' table in the Prisma schema. It allows clients to query comments using multiple criteria including post id, author id, query strings for text, creation date ranges, and soft-deletion status; supporting advanced moderation and analytics use cases.","path":"/discussionBoard/moderator/comments","method":"patch","description":"Enables advanced retrieval of discussion board comments, supporting pagination, search (by body/content), filtering (by parent_id, member id, or post id), date ranges, and soft/hard state as per the schema. This request body references the available dimensions as defined in 'discussion_board_comments'.\n\nThis operation is typically used in moderation panels, analytics tools, and advanced UI experiences where searching or narrowing down comments is required. The operation honors RBAC; members can see their own comments and public threads, while moderators and admins have broader visibility. Guests do not have access to advanced search for privacy and security reasons.\n\nThe endpoint is robust against errors when search criteria are invalid or if requested page size exceeds configured maximums. All search filters correspond exactly to atomic fields in the schema and result sets are returned in a defined order with metadata for pagination and total count.","summary":"Advanced search and paginate comments (from discussion_board_comments table).","parameters":[],"requestBody":{"description":"Search and filter criteria for comment retrieval as per comment schema.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated, filtered list of comments with full details for advanced use cases.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"This operation enables complex search, filtering, and pagination for the discussion board comments, leveraging the 'discussion_board_comments' table in the Prisma schema. It allows clients to query comments using multiple criteria including post id, author id, query strings for text, creation date ranges, and soft-deletion status; supporting advanced moderation and analytics use cases.","path":"/discussionBoard/admin/comments","method":"patch","description":"Enables advanced retrieval of discussion board comments, supporting pagination, search (by body/content), filtering (by parent_id, member id, or post id), date ranges, and soft/hard state as per the schema. This request body references the available dimensions as defined in 'discussion_board_comments'.\n\nThis operation is typically used in moderation panels, analytics tools, and advanced UI experiences where searching or narrowing down comments is required. The operation honors RBAC; members can see their own comments and public threads, while moderators and admins have broader visibility. Guests do not have access to advanced search for privacy and security reasons.\n\nThe endpoint is robust against errors when search criteria are invalid or if requested page size exceeds configured maximums. All search filters correspond exactly to atomic fields in the schema and result sets are returned in a defined order with metadata for pagination and total count.","summary":"Advanced search and paginate comments (from discussion_board_comments table).","parameters":[],"requestBody":{"description":"Search and filter criteria for comment retrieval as per comment schema.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated, filtered list of comments with full details for advanced use cases.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"This operation retrieves a single discussion board comment by its unique identifier (UUID). Associated with the 'discussion_board_comments' table, it returns all of the comment's fields, including author, body, timestamps, parent/child threading, and relations to posts. Used for detailed comment views, moderation, and audit.","path":"/discussionBoard/member/comments/{commentId}","method":"get","description":"Returns full details of a single discussion board comment as stored in 'discussion_board_comments', given a valid UUID comment identifier. This operation fetches the comment content, parent/child structure links, author member ID, post linkage, creation and update metadata, and soft deletion state.\n\nUsed in contexts where a client needs to show comment details in a thread, handle editing, or present moderation/audit panels. Security restrictions ensure only RBAC-permitted users may access certain comments; private or soft-deleted comments are not shown to regular users/members. Comments under moderation or in deleted state are visible to moderators/admins with audit logging.\n\nAPI returns proper error messages for invalid IDs or access-denied cases, and is robust against unauthorized access or incomplete comment references.","summary":"Retrieve details for a single comment (discussion_board_comments) by ID.","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the target comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment details with all schema fields for authorized clients.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"member"},{"specification":"This operation retrieves a single discussion board comment by its unique identifier (UUID). Associated with the 'discussion_board_comments' table, it returns all of the comment's fields, including author, body, timestamps, parent/child threading, and relations to posts. Used for detailed comment views, moderation, and audit.","path":"/discussionBoard/moderator/comments/{commentId}","method":"get","description":"Returns full details of a single discussion board comment as stored in 'discussion_board_comments', given a valid UUID comment identifier. This operation fetches the comment content, parent/child structure links, author member ID, post linkage, creation and update metadata, and soft deletion state.\n\nUsed in contexts where a client needs to show comment details in a thread, handle editing, or present moderation/audit panels. Security restrictions ensure only RBAC-permitted users may access certain comments; private or soft-deleted comments are not shown to regular users/members. Comments under moderation or in deleted state are visible to moderators/admins with audit logging.\n\nAPI returns proper error messages for invalid IDs or access-denied cases, and is robust against unauthorized access or incomplete comment references.","summary":"Retrieve details for a single comment (discussion_board_comments) by ID.","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the target comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment details with all schema fields for authorized clients.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"This operation retrieves a single discussion board comment by its unique identifier (UUID). Associated with the 'discussion_board_comments' table, it returns all of the comment's fields, including author, body, timestamps, parent/child threading, and relations to posts. Used for detailed comment views, moderation, and audit.","path":"/discussionBoard/admin/comments/{commentId}","method":"get","description":"Returns full details of a single discussion board comment as stored in 'discussion_board_comments', given a valid UUID comment identifier. This operation fetches the comment content, parent/child structure links, author member ID, post linkage, creation and update metadata, and soft deletion state.\n\nUsed in contexts where a client needs to show comment details in a thread, handle editing, or present moderation/audit panels. Security restrictions ensure only RBAC-permitted users may access certain comments; private or soft-deleted comments are not shown to regular users/members. Comments under moderation or in deleted state are visible to moderators/admins with audit logging.\n\nAPI returns proper error messages for invalid IDs or access-denied cases, and is robust against unauthorized access or incomplete comment references.","summary":"Retrieve details for a single comment (discussion_board_comments) by ID.","parameters":[{"name":"commentId","description":"Unique identifier (UUID) of the target comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment details with all schema fields for authorized clients.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"This operation creates a new comment in the discussion board system, inserting it into the 'discussion_board_comments' table. Members may submit new comments on posts or as replies to existing comments, leveraging threading and ownership references as defined in the schema. Successful creation returns the full comment object, including author attribution and timestamps.","path":"/discussionBoard/member/comments","method":"post","description":"Allows a member to create a new comment within a discussion board post or as a reply to another comment. Input data is validated strictly per 'discussion_board_comments' schema: all references for author, post, and (optional) parent comment must exist, content/body must meet policy requirements (e.g., no empty/abusive submissions), and the comment is timestamped upon creation.\n\nThis operation supports deep threading via optional parent_id and robust audit logging for moderation history. The endpoint automatically assigns the current member as the author and enforces RBAC so only logged-in members can post comments. Both soft and hard validation failures are handled with meaningful error responses.\n\nUpon success, the complete comment object, including all references, is returned for display or further processing.","summary":"Create a new comment in the discussion board (discussion_board_comments).","parameters":[],"requestBody":{"description":"Comment creation data per schema field requirements.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Created comment record with all metadata for use in UI or further actions.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"This operation updates an existing discussion board comment identified by its UUID. Leveraging the 'discussion_board_comments' table, it allows the comment author or authorized moderator/admin to change editable fields such as 'body' and optionally re-parent the comment within a thread. All updates are audit-logged for transparency and moderation compliance.","path":"/discussionBoard/member/comments/{commentId}","method":"put","description":"Update the body (or allowed fields) of an existing comment in the 'discussion_board_comments' table, given a valid comment UUID. The API validates the input based on schema: supports changing the comment body, optionally moving to a new parent for thread reorganization, and updating timestamps for audit trails. Edit actions are logged for moderation review via the comment edit history entity.\n\nRBAC enforcement only permits comment authors, moderators, or admins to update a comment. Permission is denied if the user is not the author nor an authorized moderator/admin. All changes are atomic and reflected in the returned comment object.\n\nError handling: Returns clear messages for not-found comments, permission failures, or invalid update data.","summary":"Update an existing comment (discussion_board_comments) by ID.","parameters":[{"name":"commentId","description":"Unique comment UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for permitted comment fields according to schema.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object reflecting all successful changes.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"member"},{"specification":"This operation updates an existing discussion board comment identified by its UUID. Leveraging the 'discussion_board_comments' table, it allows the comment author or authorized moderator/admin to change editable fields such as 'body' and optionally re-parent the comment within a thread. All updates are audit-logged for transparency and moderation compliance.","path":"/discussionBoard/moderator/comments/{commentId}","method":"put","description":"Update the body (or allowed fields) of an existing comment in the 'discussion_board_comments' table, given a valid comment UUID. The API validates the input based on schema: supports changing the comment body, optionally moving to a new parent for thread reorganization, and updating timestamps for audit trails. Edit actions are logged for moderation review via the comment edit history entity.\n\nRBAC enforcement only permits comment authors, moderators, or admins to update a comment. Permission is denied if the user is not the author nor an authorized moderator/admin. All changes are atomic and reflected in the returned comment object.\n\nError handling: Returns clear messages for not-found comments, permission failures, or invalid update data.","summary":"Update an existing comment (discussion_board_comments) by ID.","parameters":[{"name":"commentId","description":"Unique comment UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for permitted comment fields according to schema.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object reflecting all successful changes.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"This operation updates an existing discussion board comment identified by its UUID. Leveraging the 'discussion_board_comments' table, it allows the comment author or authorized moderator/admin to change editable fields such as 'body' and optionally re-parent the comment within a thread. All updates are audit-logged for transparency and moderation compliance.","path":"/discussionBoard/admin/comments/{commentId}","method":"put","description":"Update the body (or allowed fields) of an existing comment in the 'discussion_board_comments' table, given a valid comment UUID. The API validates the input based on schema: supports changing the comment body, optionally moving to a new parent for thread reorganization, and updating timestamps for audit trails. Edit actions are logged for moderation review via the comment edit history entity.\n\nRBAC enforcement only permits comment authors, moderators, or admins to update a comment. Permission is denied if the user is not the author nor an authorized moderator/admin. All changes are atomic and reflected in the returned comment object.\n\nError handling: Returns clear messages for not-found comments, permission failures, or invalid update data.","summary":"Update an existing comment (discussion_board_comments) by ID.","parameters":[{"name":"commentId","description":"Unique comment UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for permitted comment fields according to schema.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object reflecting all successful changes.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"This operation deletes an individual comment from the discussion board by its UUID. It operates on the 'discussion_board_comments' table; due to the presence of the 'deleted_at' field in the schema, the operation implements a soft delete (marking the comment as deleted rather than erasing from the database) to preserve moderation and audit history. Deletion is restricted to comment authors, moderators, or administrators via RBAC.","path":"/discussionBoard/member/comments/{commentId}","method":"delete","description":"Implements a soft delete for a comment in the 'discussion_board_comments' table by setting the 'deleted_at' timestamp to mark the comment as deleted. This preserves history for compliance and moderation audits, in accordance with requirements and the schema definition.\n\nOnly the comment's author (member), respective moderator, or administrator may perform this operation. Attempts by unauthorized users are denied with appropriate error messages. Children (threaded replies) of the deleted comment remain intact but are marked as orphaned in UI presentation or flagged for further moderator review.\n\nAudit trails are maintained and all deletes are logged for future reference or potential undeletion. No actual data is erased unless permitted by future business rules.","summary":"Soft-delete a comment (discussion_board_comments) by UUID.","parameters":[{"name":"commentId","description":"Unique identifier for the comment to soft-delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"member"},{"specification":"This operation deletes an individual comment from the discussion board by its UUID. It operates on the 'discussion_board_comments' table; due to the presence of the 'deleted_at' field in the schema, the operation implements a soft delete (marking the comment as deleted rather than erasing from the database) to preserve moderation and audit history. Deletion is restricted to comment authors, moderators, or administrators via RBAC.","path":"/discussionBoard/moderator/comments/{commentId}","method":"delete","description":"Implements a soft delete for a comment in the 'discussion_board_comments' table by setting the 'deleted_at' timestamp to mark the comment as deleted. This preserves history for compliance and moderation audits, in accordance with requirements and the schema definition.\n\nOnly the comment's author (member), respective moderator, or administrator may perform this operation. Attempts by unauthorized users are denied with appropriate error messages. Children (threaded replies) of the deleted comment remain intact but are marked as orphaned in UI presentation or flagged for further moderator review.\n\nAudit trails are maintained and all deletes are logged for future reference or potential undeletion. No actual data is erased unless permitted by future business rules.","summary":"Soft-delete a comment (discussion_board_comments) by UUID.","parameters":[{"name":"commentId","description":"Unique identifier for the comment to soft-delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"This operation deletes an individual comment from the discussion board by its UUID. It operates on the 'discussion_board_comments' table; due to the presence of the 'deleted_at' field in the schema, the operation implements a soft delete (marking the comment as deleted rather than erasing from the database) to preserve moderation and audit history. Deletion is restricted to comment authors, moderators, or administrators via RBAC.","path":"/discussionBoard/admin/comments/{commentId}","method":"delete","description":"Implements a soft delete for a comment in the 'discussion_board_comments' table by setting the 'deleted_at' timestamp to mark the comment as deleted. This preserves history for compliance and moderation audits, in accordance with requirements and the schema definition.\n\nOnly the comment's author (member), respective moderator, or administrator may perform this operation. Attempts by unauthorized users are denied with appropriate error messages. Children (threaded replies) of the deleted comment remain intact but are marked as orphaned in UI presentation or flagged for further moderator review.\n\nAudit trails are maintained and all deletes are logged for future reference or potential undeletion. No actual data is erased unless permitted by future business rules.","summary":"Soft-delete a comment (discussion_board_comments) by UUID.","parameters":[{"name":"commentId","description":"Unique identifier for the comment to soft-delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation lists all votes for a specific post by its UUID, querying the 'discussion_board_post_votes' table. It returns the complete voting record for analytics, engagement metrics, or audit. The voting entity records vote type, timestamp, post, and member voters, supporting only one vote per member per post as enforced at the DB level.","path":"/discussionBoard/member/posts/{postId}/postVotes","method":"get","description":"Retrieve a list of all votes cast for a specific post, referenced by post UUID, as recorded in the 'discussion_board_post_votes' table. Returned data includes whether each vote is an upvote or downvote, the voter member's id, timestamps, and related audit parameters.\n\nThis is commonly used for displaying engagement on posts, checking voting patterns for moderation, or surfacing top-voted content to end users. Only authenticated users may access full vote lists; results are filtered as per RBAC and privacy policy (e.g., users may see their own votes and public vote counts, while voting member IDs may be restricted for privacy).\n\nThe API handles edge cases for posts with no votes, excessive load, and access to private posts in compliance with board rules. Pagination is supported for large vote lists.","summary":"List all votes for a specific post (discussion_board_post_votes).","parameters":[{"name":"postId","description":"The post UUID for which to list related votes.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of all votes for the target post with upvote, voter, and timestamp details.","typeName":"IPageIDiscussionBoardPostVote"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"member"},{"specification":"This operation lists all votes for a specific post by its UUID, querying the 'discussion_board_post_votes' table. It returns the complete voting record for analytics, engagement metrics, or audit. The voting entity records vote type, timestamp, post, and member voters, supporting only one vote per member per post as enforced at the DB level.","path":"/discussionBoard/moderator/posts/{postId}/postVotes","method":"get","description":"Retrieve a list of all votes cast for a specific post, referenced by post UUID, as recorded in the 'discussion_board_post_votes' table. Returned data includes whether each vote is an upvote or downvote, the voter member's id, timestamps, and related audit parameters.\n\nThis is commonly used for displaying engagement on posts, checking voting patterns for moderation, or surfacing top-voted content to end users. Only authenticated users may access full vote lists; results are filtered as per RBAC and privacy policy (e.g., users may see their own votes and public vote counts, while voting member IDs may be restricted for privacy).\n\nThe API handles edge cases for posts with no votes, excessive load, and access to private posts in compliance with board rules. Pagination is supported for large vote lists.","summary":"List all votes for a specific post (discussion_board_post_votes).","parameters":[{"name":"postId","description":"The post UUID for which to list related votes.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of all votes for the target post with upvote, voter, and timestamp details.","typeName":"IPageIDiscussionBoardPostVote"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"moderator"},{"specification":"This operation lists all votes for a specific post by its UUID, querying the 'discussion_board_post_votes' table. It returns the complete voting record for analytics, engagement metrics, or audit. The voting entity records vote type, timestamp, post, and member voters, supporting only one vote per member per post as enforced at the DB level.","path":"/discussionBoard/admin/posts/{postId}/postVotes","method":"get","description":"Retrieve a list of all votes cast for a specific post, referenced by post UUID, as recorded in the 'discussion_board_post_votes' table. Returned data includes whether each vote is an upvote or downvote, the voter member's id, timestamps, and related audit parameters.\n\nThis is commonly used for displaying engagement on posts, checking voting patterns for moderation, or surfacing top-voted content to end users. Only authenticated users may access full vote lists; results are filtered as per RBAC and privacy policy (e.g., users may see their own votes and public vote counts, while voting member IDs may be restricted for privacy).\n\nThe API handles edge cases for posts with no votes, excessive load, and access to private posts in compliance with board rules. Pagination is supported for large vote lists.","summary":"List all votes for a specific post (discussion_board_post_votes).","parameters":[{"name":"postId","description":"The post UUID for which to list related votes.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of all votes for the target post with upvote, voter, and timestamp details.","typeName":"IPageIDiscussionBoardPostVote"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"admin"},{"specification":"This operation provides advanced search, filtering, and pagination functionality for post votes attached to a specific post. It leverages the 'discussion_board_post_votes' entity to allow clients to retrieve votes based on up/down, voter id, date range, or any attribute from the schema. Designed for analytics, advanced moderation, and UI list refinement.","path":"/discussionBoard/member/posts/{postId}/postVotes","method":"patch","description":"Enables advanced querying of post vote records for a specific post identified by UUID. Supports filters such as vote type (up/down), voting member id, date range, and robust pagination for scalability. This operation references atomically all fields in 'discussion_board_post_votes', returning only permitted information per board policy.\n\nUsed by moderators or admins for in-depth review, by members for viewing their own vote stats, or in analytics/reporting tools. RBAC enforcement determines visible data fields—moderators/admins may see vote details while ordinary members may only see anonymized vote aggregates. Guest access is not permitted for privacy.\n\nError handling is in place for invalid post IDs, search queries, or insufficient privileges.","summary":"Advanced search for post votes by post (discussion_board_post_votes).","parameters":[{"name":"postId","description":"UUID of the target post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and paginate post vote records for this post.","typeName":"IDiscussionBoardPostVote.IRequest"},"responseBody":{"description":"Paginated, filtered voting records with full schema-compliance for moderation or analytics.","typeName":"IPageIDiscussionBoardPostVote"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"member"},{"specification":"This operation provides advanced search, filtering, and pagination functionality for post votes attached to a specific post. It leverages the 'discussion_board_post_votes' entity to allow clients to retrieve votes based on up/down, voter id, date range, or any attribute from the schema. Designed for analytics, advanced moderation, and UI list refinement.","path":"/discussionBoard/moderator/posts/{postId}/postVotes","method":"patch","description":"Enables advanced querying of post vote records for a specific post identified by UUID. Supports filters such as vote type (up/down), voting member id, date range, and robust pagination for scalability. This operation references atomically all fields in 'discussion_board_post_votes', returning only permitted information per board policy.\n\nUsed by moderators or admins for in-depth review, by members for viewing their own vote stats, or in analytics/reporting tools. RBAC enforcement determines visible data fields—moderators/admins may see vote details while ordinary members may only see anonymized vote aggregates. Guest access is not permitted for privacy.\n\nError handling is in place for invalid post IDs, search queries, or insufficient privileges.","summary":"Advanced search for post votes by post (discussion_board_post_votes).","parameters":[{"name":"postId","description":"UUID of the target post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and paginate post vote records for this post.","typeName":"IDiscussionBoardPostVote.IRequest"},"responseBody":{"description":"Paginated, filtered voting records with full schema-compliance for moderation or analytics.","typeName":"IPageIDiscussionBoardPostVote"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"This operation provides advanced search, filtering, and pagination functionality for post votes attached to a specific post. It leverages the 'discussion_board_post_votes' entity to allow clients to retrieve votes based on up/down, voter id, date range, or any attribute from the schema. Designed for analytics, advanced moderation, and UI list refinement.","path":"/discussionBoard/admin/posts/{postId}/postVotes","method":"patch","description":"Enables advanced querying of post vote records for a specific post identified by UUID. Supports filters such as vote type (up/down), voting member id, date range, and robust pagination for scalability. This operation references atomically all fields in 'discussion_board_post_votes', returning only permitted information per board policy.\n\nUsed by moderators or admins for in-depth review, by members for viewing their own vote stats, or in analytics/reporting tools. RBAC enforcement determines visible data fields—moderators/admins may see vote details while ordinary members may only see anonymized vote aggregates. Guest access is not permitted for privacy.\n\nError handling is in place for invalid post IDs, search queries, or insufficient privileges.","summary":"Advanced search for post votes by post (discussion_board_post_votes).","parameters":[{"name":"postId","description":"UUID of the target post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and paginate post vote records for this post.","typeName":"IDiscussionBoardPostVote.IRequest"},"responseBody":{"description":"Paginated, filtered voting records with full schema-compliance for moderation or analytics.","typeName":"IPageIDiscussionBoardPostVote"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"This operation retrieves the full voting record/details for a single post vote by its UUID under a given post. It references the 'discussion_board_post_votes' schema to display up/down, voter member, post, and created timestamp. Used for moderation audits, dispute resolution, and UI detail views.","path":"/discussionBoard/moderator/posts/{postId}/postVotes/{postVoteId}","method":"get","description":"Fetches the full voting record (upvote/downvote, voter, timestamp) for a single vote (UUID) associated with a specific post (by post UUID). Returns every schema-defined field for the post vote, as well as parent post and voter information.\n\nRBAC is enforced to limit visibility: only moderators and admins can generally view individual vote records with voter metadata, while regular members may have restricted or anonymized access to protect privacy. Used for detailed audit/log view, reporting, or moderation actions.\n\nProper error messages are returned for invalid IDs, missing records, or access-denied edge cases.","summary":"Get details for a specific post vote (discussion_board_post_votes) by post and vote ID.","parameters":[{"name":"postId","description":"UUID of the target post for which the vote applies.","schema":{"type":"string","format":"uuid"}},{"name":"postVoteId","description":"UUID of the target post vote to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete post vote object for audit or UI display as per schema.","typeName":"IDiscussionBoardPostVote"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"This operation retrieves the full voting record/details for a single post vote by its UUID under a given post. It references the 'discussion_board_post_votes' schema to display up/down, voter member, post, and created timestamp. Used for moderation audits, dispute resolution, and UI detail views.","path":"/discussionBoard/admin/posts/{postId}/postVotes/{postVoteId}","method":"get","description":"Fetches the full voting record (upvote/downvote, voter, timestamp) for a single vote (UUID) associated with a specific post (by post UUID). Returns every schema-defined field for the post vote, as well as parent post and voter information.\n\nRBAC is enforced to limit visibility: only moderators and admins can generally view individual vote records with voter metadata, while regular members may have restricted or anonymized access to protect privacy. Used for detailed audit/log view, reporting, or moderation actions.\n\nProper error messages are returned for invalid IDs, missing records, or access-denied edge cases.","summary":"Get details for a specific post vote (discussion_board_post_votes) by post and vote ID.","parameters":[{"name":"postId","description":"UUID of the target post for which the vote applies.","schema":{"type":"string","format":"uuid"}},{"name":"postVoteId","description":"UUID of the target post vote to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete post vote object for audit or UI display as per schema.","typeName":"IDiscussionBoardPostVote"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"This creates a new vote (upvote/downvote) for a given post, using the 'discussion_board_post_votes' entity. Uniqueness constraint ensures only one vote per member per post; existing votes are overwritten/updated. Voters must be authenticated members. On success, the new vote record is returned with all schema-compliant metadata.","path":"/discussionBoard/member/posts/{postId}/postVotes","method":"post","description":"Allows a member to cast or update a vote (upvote or downvote) for a specified post by UUID. The schema requires a unique constraint (one vote per member per post), so re-voting updates the prior vote or creates the new one. Input validates post and member existence, current status, and vote type (boolean upvote field).\n\nRBAC only allows authenticated members to vote; attempts by guests or unauthenticated users are denied. Deletes and audit trails are automatically managed.\n\nSuccess returns the newly created/updated voting record for display, analytics, or further actions.","summary":"Create (or update) a post vote (discussion_board_post_votes) for a given post as a member.","parameters":[{"name":"postId","description":"UUID of the post to vote for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote creation data (upvote/downvote) as per schema.","typeName":"IDiscussionBoardPostVote.ICreate"},"responseBody":{"description":"The upserted post vote record for reference, display, or audit.","typeName":"IDiscussionBoardPostVote"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"This operation allows updating of an existing post vote record (e.g., changing from upvote to downvote) by vote UUID, within the context of the specified post. Operates on the 'discussion_board_post_votes' table and references all updatable fields per the schema. Only the voting member, moderators, or admins may update the vote. Audit and compliance requirements are fulfilled by full edit tracking.","path":"/discussionBoard/member/posts/{postId}/postVotes/{postVoteId}","method":"put","description":"Update the upvote/downvote status of a post vote, identified by its UUID and parent post UUID. Updatable fields include vote type (boolean) and any policy-driven rationale/audit data. Only the original voter member, moderators, or admins can update a vote; RBAC is enforced strictly.\n\nThis activity is fully audit-logged, both for engagement analytics and for dispute/moderation tracking. Errors are returned for unauthenticated access, not-found vote IDs, or attempts by unauthorized users to change someone else's vote.\n\nReturns the updated post vote record for further use or reference.","summary":"Update an existing post vote (discussion_board_post_votes) by post and vote ID.","parameters":[{"name":"postId","description":"UUID of the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"postVoteId","description":"UUID of the post vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed for post vote update as per schema.","typeName":"IDiscussionBoardPostVote.IUpdate"},"responseBody":{"description":"The updated post vote record for UI/audit/reference.","typeName":"IDiscussionBoardPostVote"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"member"},{"specification":"This operation allows updating of an existing post vote record (e.g., changing from upvote to downvote) by vote UUID, within the context of the specified post. Operates on the 'discussion_board_post_votes' table and references all updatable fields per the schema. Only the voting member, moderators, or admins may update the vote. Audit and compliance requirements are fulfilled by full edit tracking.","path":"/discussionBoard/moderator/posts/{postId}/postVotes/{postVoteId}","method":"put","description":"Update the upvote/downvote status of a post vote, identified by its UUID and parent post UUID. Updatable fields include vote type (boolean) and any policy-driven rationale/audit data. Only the original voter member, moderators, or admins can update a vote; RBAC is enforced strictly.\n\nThis activity is fully audit-logged, both for engagement analytics and for dispute/moderation tracking. Errors are returned for unauthenticated access, not-found vote IDs, or attempts by unauthorized users to change someone else's vote.\n\nReturns the updated post vote record for further use or reference.","summary":"Update an existing post vote (discussion_board_post_votes) by post and vote ID.","parameters":[{"name":"postId","description":"UUID of the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"postVoteId","description":"UUID of the post vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed for post vote update as per schema.","typeName":"IDiscussionBoardPostVote.IUpdate"},"responseBody":{"description":"The updated post vote record for UI/audit/reference.","typeName":"IDiscussionBoardPostVote"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"This operation allows updating of an existing post vote record (e.g., changing from upvote to downvote) by vote UUID, within the context of the specified post. Operates on the 'discussion_board_post_votes' table and references all updatable fields per the schema. Only the voting member, moderators, or admins may update the vote. Audit and compliance requirements are fulfilled by full edit tracking.","path":"/discussionBoard/admin/posts/{postId}/postVotes/{postVoteId}","method":"put","description":"Update the upvote/downvote status of a post vote, identified by its UUID and parent post UUID. Updatable fields include vote type (boolean) and any policy-driven rationale/audit data. Only the original voter member, moderators, or admins can update a vote; RBAC is enforced strictly.\n\nThis activity is fully audit-logged, both for engagement analytics and for dispute/moderation tracking. Errors are returned for unauthenticated access, not-found vote IDs, or attempts by unauthorized users to change someone else's vote.\n\nReturns the updated post vote record for further use or reference.","summary":"Update an existing post vote (discussion_board_post_votes) by post and vote ID.","parameters":[{"name":"postId","description":"UUID of the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"postVoteId","description":"UUID of the post vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed for post vote update as per schema.","typeName":"IDiscussionBoardPostVote.IUpdate"},"responseBody":{"description":"The updated post vote record for UI/audit/reference.","typeName":"IDiscussionBoardPostVote"},"authorizationRoles":["member","moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"This endpoint deletes a post vote by its UUID within the context of a given parent post, acting on the 'discussion_board_post_votes' entity. As there are no 'deleted_at' fields in the post votes schema, this performs a hard delete. Only the original voter, moderator, or admin may perform this action, strictly enforced via RBAC. Deletion is logged for audit and analytics.","path":"/discussionBoard/member/posts/{postId}/postVotes/{postVoteId}","method":"delete","description":"Removes a vote (hard delete) identified by the post vote UUID and parent post UUID. As 'discussion_board_post_votes' does not contain a soft delete column, this operation erases the record from the database, fully compliant with current schema definitions. Only the original member (voter), moderators, or admins may delete a vote; RBAC and permission checks are strictly enforced.\n\nFull logging and audit trail for each delete event supports dispute resolution and compliance analytics. Error responses are returned when UUIDs do not resolve to a record or when access is denied.","summary":"Delete a post vote (hard delete, discussion_board_post_votes) by post and vote ID.","parameters":[{"name":"postId","description":"UUID of the related parent post.","schema":{"type":"string","format":"uuid"}},{"name":"postVoteId","description":"UUID of the post vote record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"member"},{"specification":"This endpoint deletes a post vote by its UUID within the context of a given parent post, acting on the 'discussion_board_post_votes' entity. As there are no 'deleted_at' fields in the post votes schema, this performs a hard delete. Only the original voter, moderator, or admin may perform this action, strictly enforced via RBAC. Deletion is logged for audit and analytics.","path":"/discussionBoard/moderator/posts/{postId}/postVotes/{postVoteId}","method":"delete","description":"Removes a vote (hard delete) identified by the post vote UUID and parent post UUID. As 'discussion_board_post_votes' does not contain a soft delete column, this operation erases the record from the database, fully compliant with current schema definitions. Only the original member (voter), moderators, or admins may delete a vote; RBAC and permission checks are strictly enforced.\n\nFull logging and audit trail for each delete event supports dispute resolution and compliance analytics. Error responses are returned when UUIDs do not resolve to a record or when access is denied.","summary":"Delete a post vote (hard delete, discussion_board_post_votes) by post and vote ID.","parameters":[{"name":"postId","description":"UUID of the related parent post.","schema":{"type":"string","format":"uuid"}},{"name":"postVoteId","description":"UUID of the post vote record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"This endpoint deletes a post vote by its UUID within the context of a given parent post, acting on the 'discussion_board_post_votes' entity. As there are no 'deleted_at' fields in the post votes schema, this performs a hard delete. Only the original voter, moderator, or admin may perform this action, strictly enforced via RBAC. Deletion is logged for audit and analytics.","path":"/discussionBoard/admin/posts/{postId}/postVotes/{postVoteId}","method":"delete","description":"Removes a vote (hard delete) identified by the post vote UUID and parent post UUID. As 'discussion_board_post_votes' does not contain a soft delete column, this operation erases the record from the database, fully compliant with current schema definitions. Only the original member (voter), moderators, or admins may delete a vote; RBAC and permission checks are strictly enforced.\n\nFull logging and audit trail for each delete event supports dispute resolution and compliance analytics. Error responses are returned when UUIDs do not resolve to a record or when access is denied.","summary":"Delete a post vote (hard delete, discussion_board_post_votes) by post and vote ID.","parameters":[{"name":"postId","description":"UUID of the related parent post.","schema":{"type":"string","format":"uuid"}},{"name":"postVoteId","description":"UUID of the post vote record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves all votes (upvotes and downvotes) associated with a specific comment from the discussion board. It queries the 'discussion_board_comment_votes' table and returns all votes for the comment defined by 'commentId', including vote type (up/down), voter, and creation time. Used for displaying engagement and tallying votes on comments.","path":"/discussionBoard/member/comments/{commentId}/commentVotes","method":"get","description":"Fetch all votes (both upvotes and downvotes) for a specific comment by its unique identifier. The 'discussion_board_comment_votes' table tracks each user's voting action on a comment, enforcing auditability and engagement visibility as described in the schema comments. This endpoint is read-accessible to any authenticated user for displaying comment popularity.\n\nThe operation enforces visibility into voter engagement, facilitates reputation mechanisms, and supports transparency for moderation review as per requirements. Sensitive voter information should be sanitized according to user roles and privacy considerations.","summary":"Retrieve all votes for a specific comment from the discussion_board_comment_votes table.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment whose votes are to be fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A paginated list of votes for the specified comment, including voter, upvote/downvote, and timestamp.","typeName":"IPageIDiscussionBoardCommentVote"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member"},{"specification":"This endpoint retrieves a paginated, filterable, and sortable list of all votes (upvotes or downvotes) associated with a specific comment. Tied to the 'discussion_board_comment_votes' table, this operation accommodates advanced searching, sorting (by time, voter, vote type), and pagination for frontend displays and moderation tools. Facilitates complex workflow requirements for comment engagement review.","path":"/discussionBoard/member/comments/{commentId}/commentVotes","method":"patch","description":"Search and paginate votes on a specific comment for in-depth moderation review or analytical purposes. The underlying 'discussion_board_comment_votes' entity ensures auditability and traceability of all engagement actions. This endpoint allows filtering votes by voter, type (upvote/downvote), or time period, fulfilling transparency and reporting requirements from the requirements document.\n\nUser permissions are enforced, and only authenticated users may access all votes. Moderators and admins may access more metadata for advanced queries. Result includes pagination controls and can support administrative or analytic dashboards.","summary":"Search and retrieve a paginated list of votes for a comment for analytics or moderation.","parameters":[{"name":"commentId","description":"Unique identifier of the comment whose votes will be searched and filtered.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters for searching and paginating comment votes, including filter options for vote type, voter, and period.","typeName":"IDiscussionBoardCommentVote.IRequest"},"responseBody":{"description":"Paginated list of votes for the specified comment, matching filter/search criteria.","typeName":"IPageIDiscussionBoardCommentVote"},"authorizationRoles":["member"],"name":"search","authorizationRole":"member"},{"specification":"Retrieve details of a specific vote (by vote id) associated with a comment from the 'discussion_board_comment_votes' table. This supports moderation visibility and transparency by allowing query of precise voting record details for disputes or audit. Read-only access is enforced for non-voter and non-admin roles. Used in user interfaces and audit tools.","path":"/discussionBoard/member/comments/{commentId}/commentVotes/{commentVoteId}","method":"get","description":"Fetches a single vote entry for a given comment, using its unique vote id. The 'discussion_board_comment_votes' table ensures 1:1 mapping between a comment, member, and vote type for audit and transparency. This operation aids in resolving user disputes, verifying voting patterns, and supporting moderation workflows as outlined in policy descriptions.\n\nSecurity: Only users with appropriate permission can view individual votes. Audit trails are enforced at the database layer, and both member and moderator roles may view their own or public vote information according to policy.","summary":"Get detailed vote info for a specific comment vote (discussion_board_comment_votes).","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentVoteId","description":"Unique identifier of the comment vote record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discussion_board_comment_votes record, including voter, upvote/downvote, and timestamp.","typeName":"IDiscussionBoardCommentVote"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member"},{"specification":"Creates a new vote (upvote or downvote) for a given comment by an authenticated member. Operates on the 'discussion_board_comment_votes' table. Each user can only vote once per comment, enforced via unique constraint on (commentId, memberId). Used for recording new engagement and supporting member interaction. Records the voting member, the type (up/down), and timestamp. Duplicate voting attempts return an error. Enforced by application and database constraint.","path":"/discussionBoard/member/comments/{commentId}/commentVotes","method":"post","description":"Allows an authenticated member to submit a vote (upvote or downvote) for a specific comment. The 'discussion_board_comment_votes' entity ensures 1:1 mapping for one vote per member per comment and will reject duplicate attempts as per schema constraints (see unique index). Records vote metadata for audit and analytics as per the business requirement.\n\nSecurity: Only members may vote. Attempts to vote again (update) should use PUT on the vote itself. The operation strictly logs the member's engagement, timestamp, and upvote/downvote polarity for consistency and moderation review.","summary":"Create a new comment vote (discussion_board_comment_votes) as a member","parameters":[{"name":"commentId","description":"Unique identifier of the target comment to vote on.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vote creation data: upvote/downvote choice. Member and comment inferred from authentication and path.","typeName":"IDiscussionBoardCommentVote.ICreate"},"responseBody":{"description":"Details of the newly created vote for the comment, including member, type, and timestamp.","typeName":"IDiscussionBoardCommentVote"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"Updates an existing vote (upvote or downvote) for a given comment. Allows a member to change their previous vote (from up to down or vice versa) as reflected in the 'discussion_board_comment_votes' table. Only the original voting member may perform this operation. Supports audit and editing requirements by storing update time and rationale if needed. Duplicate or unauthorized access is denied.","path":"/discussionBoard/member/comments/{commentId}/commentVotes/{commentVoteId}","method":"put","description":"Update an existing vote on a comment by its unique vote id. This operation allows a member to change their engagement (e.g., upvote to downvote), enforces strict ownership (only the voting member can update), and records change for audit purposes. Refers to 'discussion_board_comment_votes' relationship for 1:1 mapping between comments and votes.\n\nErrors: Attempts to update others' votes return an error. Audit trails are enforced via updated timestamp and optional rationale for compliance.","summary":"Update a specific comment vote (discussion_board_comment_votes) as the owner.","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentVoteId","description":"Unique identifier of the comment vote record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for updating the comment vote (change up/down choice), only owner allowed.","typeName":"IDiscussionBoardCommentVote.IUpdate"},"responseBody":{"description":"Updated vote details for the comment after modification.","typeName":"IDiscussionBoardCommentVote"},"authorizationRoles":["member"],"name":"update","authorizationRole":"member"},{"specification":"Deletes an existing vote (upvote or downvote) for a given comment. Only the voting member or a moderator/admin (for moderation purposes) can delete a vote, as enforced in the application and database. Deletion is a hard delete, as the schema does not define soft delete fields for this table. Audit logs record this removal for transparency. Used for 'unvoting' or moderating votes in the 'discussion_board_comment_votes' table.","path":"/discussionBoard/member/comments/{commentId}/commentVotes/{commentVoteId}","method":"delete","description":"Allows the original voting member or an authorized moderator/admin to remove a vote for a given comment. This operation enforces role and ownership logic: members may erase their own votes, while higher roles may intervene during moderation. As 'discussion_board_comment_votes' does not feature a soft delete column, the deletion is hard and cannot be reversed except via audit trail recovery as required.\n\nSecurity: Attempts by others are denied. Each erase operation is logged for moderation and analytic purposes.","summary":"Delete a comment vote (discussion_board_comment_votes); only owner or moderator/admin allowed.","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentVoteId","description":"Unique identifier of the comment vote record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"member"},{"specification":"Deletes an existing vote (upvote or downvote) for a given comment. Only the voting member or a moderator/admin (for moderation purposes) can delete a vote, as enforced in the application and database. Deletion is a hard delete, as the schema does not define soft delete fields for this table. Audit logs record this removal for transparency. Used for 'unvoting' or moderating votes in the 'discussion_board_comment_votes' table.","path":"/discussionBoard/moderator/comments/{commentId}/commentVotes/{commentVoteId}","method":"delete","description":"Allows the original voting member or an authorized moderator/admin to remove a vote for a given comment. This operation enforces role and ownership logic: members may erase their own votes, while higher roles may intervene during moderation. As 'discussion_board_comment_votes' does not feature a soft delete column, the deletion is hard and cannot be reversed except via audit trail recovery as required.\n\nSecurity: Attempts by others are denied. Each erase operation is logged for moderation and analytic purposes.","summary":"Delete a comment vote (discussion_board_comment_votes); only owner or moderator/admin allowed.","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentVoteId","description":"Unique identifier of the comment vote record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"Deletes an existing vote (upvote or downvote) for a given comment. Only the voting member or a moderator/admin (for moderation purposes) can delete a vote, as enforced in the application and database. Deletion is a hard delete, as the schema does not define soft delete fields for this table. Audit logs record this removal for transparency. Used for 'unvoting' or moderating votes in the 'discussion_board_comment_votes' table.","path":"/discussionBoard/admin/comments/{commentId}/commentVotes/{commentVoteId}","method":"delete","description":"Allows the original voting member or an authorized moderator/admin to remove a vote for a given comment. This operation enforces role and ownership logic: members may erase their own votes, while higher roles may intervene during moderation. As 'discussion_board_comment_votes' does not feature a soft delete column, the deletion is hard and cannot be reversed except via audit trail recovery as required.\n\nSecurity: Attempts by others are denied. Each erase operation is logged for moderation and analytic purposes.","summary":"Delete a comment vote (discussion_board_comment_votes); only owner or moderator/admin allowed.","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentVoteId","description":"Unique identifier of the comment vote record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves all tag associations for a specific post by its ID. Operates on the 'discussion_board_post_tags' table, returning list of tag assignments (links to tag records). Primarily used for listing all tags attached to a post, enabling filtering, searching, and efficient UI display for tag-based navigation. Each tag assignment includes reference to the parent post.","path":"/discussionBoard/member/posts/{postId}/postTags","method":"get","description":"Fetch all tag assignments (post-tag associations) for a post by its unique identifier. The underlying 'discussion_board_post_tags' table supports normalized tagging as required for faceted navigation and improved post discoverability (see Systematic/tags/table comments). Returns all associated tag links, for further tag lookup by application logic.","summary":"List all tags assigned to a specific post (discussion_board_post_tags).","parameters":[{"name":"postId","description":"Unique identifier of the post whose tags are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of post-tag assignment records for the post.","typeName":"IPageIDiscussionBoardPostTag"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member"},{"specification":"Retrieves a paginated, filterable list of tag associations for a specific post, supporting advanced searching and sorting per requirements. Tied to 'discussion_board_post_tags', this operation allows filtering by tag, creation date, or custom metadata for analytic and admin UIs. Enables tag-based post management workflows and compliance with UX requirements described in requirements.","path":"/discussionBoard/member/posts/{postId}/postTags","method":"patch","description":"Search and paginate tag associations for a given post. Enables faceted filtering (by tag, date, etc.), supports admin and moderator workflows for managing and auditing tag assignments as described in requirements. The underlying 'discussion_board_post_tags' table fulfills the normalized junction entity for tags.\n\nSecurity: Only authenticated users can view; advanced filtering may be admin/moderator-only, as per access policy.","summary":"Search and retrieve paginated list of post-tag associations for a post (discussion_board_post_tags).","parameters":[{"name":"postId","description":"Unique identifier of the post whose tag associations will be searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination options for post-tag association records.","typeName":"IDiscussionBoardPostTag.IRequest"},"responseBody":{"description":"Paginated list of post-tag association records matching search.","typeName":"IPageIDiscussionBoardPostTag"},"authorizationRoles":["member"],"name":"search","authorizationRole":"member"},{"specification":"Retrieves details about a specific post-tag assignment for a post. Operates on the 'discussion_board_post_tags' table, returning a single association of a tag to a post by its unique assignment id. Used primarily for admin and moderator workflows, as well as for resolving application display logic regarding post tags.","path":"/discussionBoard/member/posts/{postId}/postTags/{postTagId}","method":"get","description":"Returns detailed information for a specific post-tag association for the specified post. Each record in the 'discussion_board_post_tags' table is uniquely identified by its id and expresses a direct link between a tag and a post for normalization, analytics, and UI integrity purposes per the schema comments.","summary":"Get details of a specific post-tag association (discussion_board_post_tags) for a post.","parameters":[{"name":"postId","description":"Unique identifier of the post.","schema":{"type":"string","format":"uuid"}},{"name":"postTagId","description":"Unique identifier of the post-tag assignment record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed single post-tag association record, including tag id, post id, and creation info.","typeName":"IDiscussionBoardPostTag"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member"},{"specification":"Creates a new post-tag association (i.e., attaches a tag to a post) in the 'discussion_board_post_tags' table. Enforces unique constraint (no duplicate same post-tag pair). Used for tagging posts to improve organization, discoverability, and filtering per business requirements. Only authenticated users with post editing privileges may create associations.","path":"/discussionBoard/member/posts/{postId}/postTags","method":"post","description":"Assign a new tag to a post (attach tag via post-tag junction entity). The 'discussion_board_post_tags' table maintains unique post-tag relationships for faceted navigation, search, and compliance with requirements regarding discoverability and content organization.\n\nSecurity: Only manuscript authors, moderators, or admins may add tags. Duplicate assignments are prevented via the schema-level unique constraint.","summary":"Create a new post-tag association (discussion_board_post_tags) for a post.","parameters":[{"name":"postId","description":"Unique identifier of the post to which a tag is being assigned.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Record specifying post, tag, and assignment-related metadata for new association.","typeName":"IDiscussionBoardPostTag.ICreate"},"responseBody":{"description":"Details of the newly created post-tag association.","typeName":"IDiscussionBoardPostTag"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"Updates an existing post-tag association for the specified post. Operates on the 'discussion_board_post_tags' table and is primarily used for changing tag assignment metadata or correcting erroneous links (rare in business logic). Only post authors, moderators, or admins may update. Changes are audit-logged via updated timestamps as required in schema and requirements.","path":"/discussionBoard/member/posts/{postId}/postTags/{postTagId}","method":"put","description":"Modify an existing post-tag association for a given post. The operation is only used in rare scenarios (such as correcting an erroneous assignment or updating audit/comment fields if present in future schema versions). Only authorized users with edit permissions or moderators/admins may update this relationship. All changes are auditable via timestamps.\n\nErrors: Unauthorized attempts are rejected. Schema constraints must be observed, including 1:1 uniqueness on post+tag pair.","summary":"Update a post-tag association (discussion_board_post_tags) for a post.","parameters":[{"name":"postId","description":"Unique identifier of the post.","schema":{"type":"string","format":"uuid"}},{"name":"postTagId","description":"Unique identifier of the post-tag assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update for the post-tag association.","typeName":"IDiscussionBoardPostTag.IUpdate"},"responseBody":{"description":"Updated post-tag association record.","typeName":"IDiscussionBoardPostTag"},"authorizationRoles":["member"],"name":"update","authorizationRole":"member"},{"specification":"Deletes a post-tag association from the 'discussion_board_post_tags' table, removing the link between a tag and a post. Only authors, moderators, or admins may remove tag links. Deletion is a hard delete, as the table has no soft delete indicator. Erases association for post organization and search purposes, supporting requirements for flexible tagging control.","path":"/discussionBoard/member/posts/{postId}/postTags/{postTagId}","method":"delete","description":"Removes an existing tag from a post by deleting the post-tag association. The operation enforces author or role-based permissions. Deletion cannot be reverted except by re-creation, as the schema does not implement a soft delete. Full audit and normalization are maintained as per requirements.\n\nAll removals are logged for audit and compliance purposes, and only authorized users may perform this operation.","summary":"Delete (unlink) a post-tag association for a post (discussion_board_post_tags), hard delete.","parameters":[{"name":"postId","description":"Unique identifier of the post.","schema":{"type":"string","format":"uuid"}},{"name":"postTagId","description":"Unique identifier of the post-tag association to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"member"},{"specification":"Deletes a post-tag association from the 'discussion_board_post_tags' table, removing the link between a tag and a post. Only authors, moderators, or admins may remove tag links. Deletion is a hard delete, as the table has no soft delete indicator. Erases association for post organization and search purposes, supporting requirements for flexible tagging control.","path":"/discussionBoard/moderator/posts/{postId}/postTags/{postTagId}","method":"delete","description":"Removes an existing tag from a post by deleting the post-tag association. The operation enforces author or role-based permissions. Deletion cannot be reverted except by re-creation, as the schema does not implement a soft delete. Full audit and normalization are maintained as per requirements.\n\nAll removals are logged for audit and compliance purposes, and only authorized users may perform this operation.","summary":"Delete (unlink) a post-tag association for a post (discussion_board_post_tags), hard delete.","parameters":[{"name":"postId","description":"Unique identifier of the post.","schema":{"type":"string","format":"uuid"}},{"name":"postTagId","description":"Unique identifier of the post-tag association to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"Deletes a post-tag association from the 'discussion_board_post_tags' table, removing the link between a tag and a post. Only authors, moderators, or admins may remove tag links. Deletion is a hard delete, as the table has no soft delete indicator. Erases association for post organization and search purposes, supporting requirements for flexible tagging control.","path":"/discussionBoard/admin/posts/{postId}/postTags/{postTagId}","method":"delete","description":"Removes an existing tag from a post by deleting the post-tag association. The operation enforces author or role-based permissions. Deletion cannot be reverted except by re-creation, as the schema does not implement a soft delete. Full audit and normalization are maintained as per requirements.\n\nAll removals are logged for audit and compliance purposes, and only authorized users may perform this operation.","summary":"Delete (unlink) a post-tag association for a post (discussion_board_post_tags), hard delete.","parameters":[{"name":"postId","description":"Unique identifier of the post.","schema":{"type":"string","format":"uuid"}},{"name":"postTagId","description":"Unique identifier of the post-tag association to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves all category assignments for a specific post. It operates on the discussion_board_post_categories table, which links posts to their categories via an M:N relationship. The endpoint supports returning all categories a given post belongs to, which is useful for categorization UIs, advanced filtering, post listing by category, and moderation purposes. The relationship is maintained via foreign keys to both discussion_board_posts (the post itself) and discussion_board_categories (the target categories), with full normalization (no redundant values). This API is essential for determining classification, managing edit/view permissions, and rendering accurate content context.","path":"/discussionBoard/member/posts/{postId}/postCategories","method":"get","description":"Retrieve a list of all category assignments linked to a specific post. This provides the ability to see which categories this post is classified under, supporting post discovery, edit workflows, and administrative review.\n\nSecurity: Accessible to authenticated users (members, moderators, admins) as well as guests for public posts. Authorization level may determine which fields/details are visible depending on the privacy of given categories.\n\nThis directly references the discussion_board_post_categories and discussion_board_categories tables, ensuring all relationships are current and normalized. Querying this endpoint allows UIs to show post-category chips/tags, audit moderation, and support analytics on post distribution.","summary":"Get all categories assigned to a specific post.","parameters":[{"name":"postId","description":"Unique identifier of the post whose categories are being queried","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all post-category assignment records for the specified post, including category link details.","typeName":"IDiscussionBoardPostCategory.ISummary"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member"},{"specification":"This operation performs a filtered, paginated search over the category assignments linked to a specific post, operating on discussion_board_post_categories. It supports advanced querying—such as filtering by category properties, assignment dates, or other criteria—enabling admin and moderator workflows as well as UI display scenarios where not all categories should be listed at once. Pagination and complex query parameters are supported by a specialized request body referencing search, sort, and filter inputs.","path":"/discussionBoard/member/posts/{postId}/postCategories","method":"patch","description":"Search and paginate through the list of categories currently assigned to a specific post. This operation allows for advanced filtering, sorting, and pagination on the assignments, which is useful for boards with many categories, admin analytics, or detailed user interaction tracking.\n\nThis endpoint leverages the discussion_board_post_categories table in conjunction with discussion_board_categories for field-level search and ordering. Appropriate authorization checks permit only members and elevated roles to perform advanced queries; guests may be restricted on filtering for private categories.\n\nResponse includes summary records for all matching assignments, with full pagination metadata for UI consumption or export.","summary":"Search and paginate assignment list of a post's categories.","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/sort/pagination filter criteria for post-category assignment query","typeName":"IDiscussionBoardPostCategory.IRequest"},"responseBody":{"description":"Paginated listing of post-category assignments matching search criteria.","typeName":"IPageIDiscussionBoardPostCategory.ISummary"},"authorizationRoles":["member"],"name":"search","authorizationRole":"member"},{"specification":"This operation retrieves a single category assignment (junction record) for a given post, based on the postCategoryId (PK from discussion_board_post_categories). It provides detailed assignment information, which can be used in admin UIs, post metadata panels, or for auditing post classification history. This is integral to supporting transparent assignment tracing and assignment-focused moderation actions.","path":"/discussionBoard/member/posts/{postId}/postCategories/{postCategoryId}","method":"get","description":"Retrieve the full details of a specific category assignment for a post, based on its unique assignment identifier (postCategoryId). This includes all relevant fields about the assignment, such as the related post, category, and audit fields.\n\nThis endpoint directly reflects a single row from the discussion_board_post_categories table, enforcing integrity and supporting detailed review for admins, moderators, or members looking to understand a post's categorization. Access control may apply for private categories or internal audit metadata.\n\nUseful for granular management, troubleshooting, and policy compliance checks on content organization.","summary":"Get a specific post-category assignment record by its ID.","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}},{"name":"postCategoryId","description":"Unique identifier of the post-category assignment (junction record)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the post-category assignment for the specified post and assignment ID.","typeName":"IDiscussionBoardPostCategory"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member"},{"specification":"This operation creates a new relationship between a post and a category, by adding a new entry in discussion_board_post_categories. This enables users or admins to categorize content according to board organization, improve discoverability, and implement content curation policies. Creating such an assignment requires specifying the post and the category, and may be subject to authorization, validation (e.g., category existence), and board configuration policies.","path":"/discussionBoard/member/posts/{postId}/postCategories","method":"post","description":"Assign a post to a new category by creating a post-category assignment. This operation supports board workflow for categorizing content, facilitating discovery, post listing, and moderation policy application.\n\nThe creation request validates that the target category exists and may also check for assignment duplication (unique constraint enforcement). Only authorized members, moderators, or admins may assign posts to categories; guests are typically forbidden.\n\nUpon success, the POST creates a new row in the discussion_board_post_categories table and returns the created assignment object for downstream processing/validation.","summary":"Create a new post-to-category assignment.","parameters":[{"name":"postId","description":"Unique identifier of the post to assign (foreign key to posts table)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new post-category assignment, specifying the category to link","typeName":"IDiscussionBoardPostCategory.ICreate"},"responseBody":{"description":"The newly created post-category assignment record, with all fields populated.","typeName":"IDiscussionBoardPostCategory"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"This operation updates an existing post-category assignment, enabling admins or members to change which category a post is assigned (if needed) or update other assignment metadata. The target record is specified by postCategoryId. The update may be subject to business rules that prevent moving posts between certain categories or may record audit trails for such changes. The API enforces assignment uniqueness and referential integrity per the schema.","path":"/discussionBoard/admin/posts/{postId}/postCategories/{postCategoryId}","method":"put","description":"Update the details of a post-category assignment, typically to change the linked category or to update audit/metadata attributes. This is used in workflows where posts are moved between categories for moderation or organization purposes.\n\nAll updates must validate the continued existence of the target post and category, and may be limited to admin or moderator roles depending on board policy.\n\nThis modifies a record in the discussion_board_post_categories table, with the result including the latest assignment record. All field updates are subject to schema constraints and audit-trail requirements.","summary":"Update a post-category assignment by its ID.","parameters":[{"name":"postId","description":"Unique identifier of the relevant post","schema":{"type":"string","format":"uuid"}},{"name":"postCategoryId","description":"Unique post-category assignment identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Patch object including fields to update on the post-category assignment.","typeName":"IDiscussionBoardPostCategory.IUpdate"},"responseBody":{"description":"The updated post-category assignment record after modification.","typeName":"IDiscussionBoardPostCategory"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"This operation updates an existing post-category assignment, enabling admins or members to change which category a post is assigned (if needed) or update other assignment metadata. The target record is specified by postCategoryId. The update may be subject to business rules that prevent moving posts between certain categories or may record audit trails for such changes. The API enforces assignment uniqueness and referential integrity per the schema.","path":"/discussionBoard/moderator/posts/{postId}/postCategories/{postCategoryId}","method":"put","description":"Update the details of a post-category assignment, typically to change the linked category or to update audit/metadata attributes. This is used in workflows where posts are moved between categories for moderation or organization purposes.\n\nAll updates must validate the continued existence of the target post and category, and may be limited to admin or moderator roles depending on board policy.\n\nThis modifies a record in the discussion_board_post_categories table, with the result including the latest assignment record. All field updates are subject to schema constraints and audit-trail requirements.","summary":"Update a post-category assignment by its ID.","parameters":[{"name":"postId","description":"Unique identifier of the relevant post","schema":{"type":"string","format":"uuid"}},{"name":"postCategoryId","description":"Unique post-category assignment identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Patch object including fields to update on the post-category assignment.","typeName":"IDiscussionBoardPostCategory.IUpdate"},"responseBody":{"description":"The updated post-category assignment record after modification.","typeName":"IDiscussionBoardPostCategory"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"This operation deletes a post-category assignment, removing the connection between a post and a category. Since the discussion_board_post_categories table does not contain soft delete fields, deletion here is a hard delete. This operation is typically restricted to admin/moderator roles, or to the post's creator (with permission checks), and must enforce referential integrity and audit workflows.","path":"/discussionBoard/admin/posts/{postId}/postCategories/{postCategoryId}","method":"delete","description":"Remove a link between a post and a specific category. Deleting the assignment updates the board's categorization for the post and reflects immediately across search, display, and analytics.\n\nThis operation is a hard delete because the table has no soft-delete fields: the assignment record will be permanently removed. Only elevated users (admin, moderator) or, if permitted by board policy, the post author may perform this action. All deletions should be logged for audit trail per board compliance requirements.\n\nAttempting to delete a nonexistent or unauthorized assignment will result in appropriate error codes.","summary":"Delete a post-category assignment (hard delete).","parameters":[{"name":"postId","description":"Unique identifier of the relevant post","schema":{"type":"string","format":"uuid"}},{"name":"postCategoryId","description":"Unique identifier of the post-category assignment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation deletes a post-category assignment, removing the connection between a post and a category. Since the discussion_board_post_categories table does not contain soft delete fields, deletion here is a hard delete. This operation is typically restricted to admin/moderator roles, or to the post's creator (with permission checks), and must enforce referential integrity and audit workflows.","path":"/discussionBoard/moderator/posts/{postId}/postCategories/{postCategoryId}","method":"delete","description":"Remove a link between a post and a specific category. Deleting the assignment updates the board's categorization for the post and reflects immediately across search, display, and analytics.\n\nThis operation is a hard delete because the table has no soft-delete fields: the assignment record will be permanently removed. Only elevated users (admin, moderator) or, if permitted by board policy, the post author may perform this action. All deletions should be logged for audit trail per board compliance requirements.\n\nAttempting to delete a nonexistent or unauthorized assignment will result in appropriate error codes.","summary":"Delete a post-category assignment (hard delete).","parameters":[{"name":"postId","description":"Unique identifier of the relevant post","schema":{"type":"string","format":"uuid"}},{"name":"postCategoryId","description":"Unique identifier of the post-category assignment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","authorizationRole":"moderator"},{"specification":"This operation retrieves the full edit history for a specific comment by listing all records from discussion_board_comment_edits linked to a given commentId. This supports transparency, audit trails, and enables UIs to show version history or revert capabilities. Each record reflects a single edit event with references to the editor, edited content, and rationale. The query supports analysis of moderation and voluntary edits, enabling content compliance and undo.","path":"/discussionBoard/member/comments/{commentId}/commentEdits","method":"get","description":"Fetch a list of all edit events for a specific comment, supporting review, moderation, and end-user visibility of comment history. Each record in the response documents an edit, including the new body, edit timestamp, and who performed the edit.\n\nThis operation supports accountability and transparency for both community and moderation edits. All fields conform to the discussion_board_comment_edits table schema, which maintains full normalization and traceability.\n\nAccess may be granted to any user for their own comments, with moderators/admins having the ability to review all histories for moderation and compliance.","summary":"List all edit events (versions) for a specific comment.","parameters":[{"name":"commentId","description":"Unique identifier of the comment whose edit history is requested","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all edit records associated with this comment, in chronological order.","typeName":"IDiscussionBoardCommentEdit.ISummary"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member"},{"specification":"This operation performs a filtered, paginated search over all comment edit events for a given comment. Enables advanced workflows for auditors, compliance teams, or complex UIs. The endpoint supports filtering by who made the edit, rationale, time ranges, and more. Results reflect the underlying discussion_board_comment_edits table with pagination to handle long histories.","path":"/discussionBoard/member/comments/{commentId}/commentEdits","method":"patch","description":"Perform a paginated search for edit events on a comment, optionally filtering by editor, rationale, timestamps, or other attributes. Advanced clients and moderation panels use this endpoint to analyze comment review history, trends, and compliance.\n\nThe request body details filter/sort criteria, and the response includes paginated results following the schema's integrity and normalization.\n\nAccess applies to all authenticated users, with additional detail or scope available to moderators and admins as per role policy.","summary":"Paginated search over edit history for a comment.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter/pagination request object for the comment edit events.","typeName":"IDiscussionBoardCommentEdit.IRequest"},"responseBody":{"description":"Paginated listing of edit records matching the criteria, including full pagination metadata.","typeName":"IPageIDiscussionBoardCommentEdit.ISummary"},"authorizationRoles":["member"],"name":"search","authorizationRole":"member"},{"specification":"This operation retrieves the details for a single edit event for a given comment, by its edit record's unique id (commentEditId). This is used for version inspection, moderation review, end-user review for possible reverts, or display in timeline audit UIs. Information is provided directly from discussion_board_comment_edits, referencing the editor and the new contents applied.","path":"/discussionBoard/member/comments/{commentId}/commentEdits/{commentEditId}","method":"get","description":"Retrieve the full detail for a specific comment edit event, specified by the commentEditId. The returned object details the editor, new body of the comment, timestamp, and rationale.\n\nThis operation supports audit trail, compliance, and version review. It is referenced in moderation workflows and edit/version viewing feature sets for community members.\n\nReturns a single edit record if found; errors appropriately otherwise.","summary":"Get a specific comment edit record by its ID.","parameters":[{"name":"commentId","description":"Unique identifier of the parent comment","schema":{"type":"string","format":"uuid"}},{"name":"commentEditId","description":"Unique identifier of the specific edit record for this comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed single comment edit record with editor and content update details.","typeName":"IDiscussionBoardCommentEdit"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member"},{"specification":"This operation creates a new edit event for a given comment, inserting a record into discussion_board_comment_edits. Used when the comment is edited by the owner or a moderator, the create event must specify the new content and (optionally) rationale. Strict audit trails are maintained, supporting transparency, compliance, and rollback workflows. The API accepts input referencing the relevant comment, editor id, new body, edit timestamp, and rationale if needed. All business rules like permission, invariants, and audit trail are enforced.","path":"/discussionBoard/member/comments/{commentId}/commentEdits","method":"post","description":"Create a new comment edit event, documenting in the audit log the changed body and rationale. This insert is required whenever a comment is edited, whether by a member or a moderator.\n\nThe create request must specify the relevant comment and all mandatory edit properties. Access is typically restricted to comment authors, moderators, or admins. The operation enables full version history and supports both user-driven corrections and moderation actions.\n\nThe result is a new edit history record for the comment, which can be referenced for undo or audit.","summary":"Create a new comment edit history entry (audit/edit event).","parameters":[{"name":"commentId","description":"Unique identifier of the edited comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All required details for a new comment edit event: editor, new body, timestamp, and optional rationale.","typeName":"IDiscussionBoardCommentEdit.ICreate"},"responseBody":{"description":"The created comment edit audit record, with all fields populated per schema.","typeName":"IDiscussionBoardCommentEdit"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member"},{"specification":"This operation updates an existing comment edit record. Typically only allowed to the original editor or an elevated role, it enables amendment of edit rationale or correction of the edit itself, upholding audit trail and compliance requirements. Operations may be restricted to ensure edit history integrity (e.g., only rationale can be changed post-factum). The target is specified by commentEditId, and validation ensures immutability of required fields per policy.","path":"/discussionBoard/member/comments/{commentId}/commentEdits/{commentEditId}","method":"put","description":"Update an existing comment edit record, usually to update rationale or in rare cases to amend the new_body for compliance or correction. The action requires strict validation for immutability of protected fields and audit trail guarantees.\n\nOnly the original editor, moderators, or admins are allowed to make such amendments. Any changes are strictly logged, and invariant business rules are enforced.\n\nReturns the updated comment edit record, based on the latest data in the underlying discussion_board_comment_edits table.","summary":"Update a comment edit audit record by its ID.","parameters":[{"name":"commentId","description":"Unique identifier of the relevant comment","schema":{"type":"string","format":"uuid"}},{"name":"commentEditId","description":"Unique edit record identifier for the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the comment edit record (usually just rationale or other mutable fields).","typeName":"IDiscussionBoardCommentEdit.IUpdate"},"responseBody":{"description":"The updated comment edit event with new and old field values, per schema.","typeName":"IDiscussionBoardCommentEdit"},"authorizationRoles":["member"],"name":"update","authorizationRole":"member"},{"specification":"This operation deletes a comment edit event. Since the discussion_board_comment_edits table does not provide a soft-delete field, deletes here are hard deletes (permanent removal from audit trail). This is typically only permitted for compliance (e.g., redaction) or with elevated permissions, and should always be logged and subject to stricter business rules. Attempting to delete non-existent or unauthorized edit records results in errors per policy.","path":"/discussionBoard/admin/comments/{commentId}/commentEdits/{commentEditId}","method":"delete","description":"Permanently remove a comment edit event (hard delete), typically by administrators or for policy-compliant redactions. Deletion removes the event and its audit trail, so is only allowed for exceptional cases and strict compliance purposes.\n\nBecause the discussion_board_comment_edits table has no soft-delete field, this operation will immediately remove the record. Full audit logging and strict permissions/validation must be enforced to prevent data loss or unauthorized tampering.\n\nAppropriate error handling for not found, unauthorized, or business rule violation scenarios is required.","summary":"Delete a specific comment edit event (hard delete).","parameters":[{"name":"commentId","description":"Unique identifier of the relevant comment","schema":{"type":"string","format":"uuid"}},{"name":"commentEditId","description":"Unique ID of the comment edit audit record to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves a list of all edit events associated with a specific discussion board post. It acts on the discussion_board_post_edits table in the schema, providing auditability and edit history for transparent post changes. The endpoint is designed to help members, moderators, and administrators review all modifications to a given post. Each edit record contains details such as the new title, new body, editor identity, timestamp, and rationale. Only records with matching postId are fetched, supporting audit, moderation, and user-driven review. Authorization is enforced based on user role (members see their content; moderators/admins see all).","path":"/discussionBoard/member/posts/{postId}/postEdits","method":"get","description":"Retrieve the full audit log (history) of all edits performed on a specific discussion post. The discussion_board_post_edits table records every voluntary or moderation-driven change, including the editor's member ID, the edited content, timestamps, and optional rationale for the change. This operation enables transparency for end-users, supports compliance by allowing moderators/admins to review all modifications, and empowers members to track changes to their own posts. \n\nSecurity: Role-based access is enforced. Regular members can only view edit histories for their own content, while moderators and admins can audit histories for any post to enable robust moderation and support appeals or content disputes.\n\nBusiness rules: Only non-soft-deleted posts and visible edits are returned (edits for deleted posts remain accessible to compliant roles). Error handling covers not found, permission denied, and audit compliance events. This operation is often paired with endpoints for single edit retrieval or edit creation audits.","summary":"Retrieve edit history for a specific discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"The unique identifier of the target discussion post to retrieve its edits.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all edit events for the specified post, with attribution, content changes, and audit information.","typeName":"IPageIDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"member"},{"specification":"This operation retrieves a list of all edit events associated with a specific discussion board post. It acts on the discussion_board_post_edits table in the schema, providing auditability and edit history for transparent post changes. The endpoint is designed to help members, moderators, and administrators review all modifications to a given post. Each edit record contains details such as the new title, new body, editor identity, timestamp, and rationale. Only records with matching postId are fetched, supporting audit, moderation, and user-driven review. Authorization is enforced based on user role (members see their content; moderators/admins see all).","path":"/discussionBoard/moderator/posts/{postId}/postEdits","method":"get","description":"Retrieve the full audit log (history) of all edits performed on a specific discussion post. The discussion_board_post_edits table records every voluntary or moderation-driven change, including the editor's member ID, the edited content, timestamps, and optional rationale for the change. This operation enables transparency for end-users, supports compliance by allowing moderators/admins to review all modifications, and empowers members to track changes to their own posts. \n\nSecurity: Role-based access is enforced. Regular members can only view edit histories for their own content, while moderators and admins can audit histories for any post to enable robust moderation and support appeals or content disputes.\n\nBusiness rules: Only non-soft-deleted posts and visible edits are returned (edits for deleted posts remain accessible to compliant roles). Error handling covers not found, permission denied, and audit compliance events. This operation is often paired with endpoints for single edit retrieval or edit creation audits.","summary":"Retrieve edit history for a specific discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"The unique identifier of the target discussion post to retrieve its edits.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all edit events for the specified post, with attribution, content changes, and audit information.","typeName":"IPageIDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"moderator"},{"specification":"This operation retrieves a list of all edit events associated with a specific discussion board post. It acts on the discussion_board_post_edits table in the schema, providing auditability and edit history for transparent post changes. The endpoint is designed to help members, moderators, and administrators review all modifications to a given post. Each edit record contains details such as the new title, new body, editor identity, timestamp, and rationale. Only records with matching postId are fetched, supporting audit, moderation, and user-driven review. Authorization is enforced based on user role (members see their content; moderators/admins see all).","path":"/discussionBoard/admin/posts/{postId}/postEdits","method":"get","description":"Retrieve the full audit log (history) of all edits performed on a specific discussion post. The discussion_board_post_edits table records every voluntary or moderation-driven change, including the editor's member ID, the edited content, timestamps, and optional rationale for the change. This operation enables transparency for end-users, supports compliance by allowing moderators/admins to review all modifications, and empowers members to track changes to their own posts. \n\nSecurity: Role-based access is enforced. Regular members can only view edit histories for their own content, while moderators and admins can audit histories for any post to enable robust moderation and support appeals or content disputes.\n\nBusiness rules: Only non-soft-deleted posts and visible edits are returned (edits for deleted posts remain accessible to compliant roles). Error handling covers not found, permission denied, and audit compliance events. This operation is often paired with endpoints for single edit retrieval or edit creation audits.","summary":"Retrieve edit history for a specific discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"The unique identifier of the target discussion post to retrieve its edits.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all edit events for the specified post, with attribution, content changes, and audit information.","typeName":"IPageIDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"index","authorizationRole":"admin"},{"specification":"This operation provides advanced search and filtering over all post edit history records for a specific discussion post (discussion_board_post_edits). It supports pagination, sorting, complex search queries, and can return filtered audit logs for compliance, dispute resolution, and deep moderation review. It references the discussion_board_post_edits Prisma table, returning all edits for the given postId that match the query criteria. Allows searching by editor, timestamp, rationale, and edit content. Authorization ensures that only members, moderators, or admins can access. Often used for moderating high-profile or controversial edits.","path":"/discussionBoard/member/posts/{postId}/postEdits","method":"patch","description":"Perform a paginated and filtered search of all edit events for a specific post. Request body supports advanced criteria: querying by edit date range, editor, rationale keywords, or changes to post content. This operation gives authorized users the ability to locate specific edits for audit log review, compliance investigation, or dispute handling. \n\nSecurity: Members may only filter their own edits unless they have elevated privileges. Moderators and admins can search any post's edit history. Pagination, search, and sorting help keep queries efficient for large edit histories. Error handling includes range errors, permission checks, and malformed queries.","summary":"Advanced search over the edit audit trail of a specific discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"Unique identifier of the post to search its edit events.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search criteria and pagination parameters for filtering edit history.","typeName":"IDiscussionBoardPostEdit.IRequest"},"responseBody":{"description":"Paginated and filtered audit log events matching search criteria.","typeName":"IPageIDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"member"},{"specification":"This operation provides advanced search and filtering over all post edit history records for a specific discussion post (discussion_board_post_edits). It supports pagination, sorting, complex search queries, and can return filtered audit logs for compliance, dispute resolution, and deep moderation review. It references the discussion_board_post_edits Prisma table, returning all edits for the given postId that match the query criteria. Allows searching by editor, timestamp, rationale, and edit content. Authorization ensures that only members, moderators, or admins can access. Often used for moderating high-profile or controversial edits.","path":"/discussionBoard/moderator/posts/{postId}/postEdits","method":"patch","description":"Perform a paginated and filtered search of all edit events for a specific post. Request body supports advanced criteria: querying by edit date range, editor, rationale keywords, or changes to post content. This operation gives authorized users the ability to locate specific edits for audit log review, compliance investigation, or dispute handling. \n\nSecurity: Members may only filter their own edits unless they have elevated privileges. Moderators and admins can search any post's edit history. Pagination, search, and sorting help keep queries efficient for large edit histories. Error handling includes range errors, permission checks, and malformed queries.","summary":"Advanced search over the edit audit trail of a specific discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"Unique identifier of the post to search its edit events.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search criteria and pagination parameters for filtering edit history.","typeName":"IDiscussionBoardPostEdit.IRequest"},"responseBody":{"description":"Paginated and filtered audit log events matching search criteria.","typeName":"IPageIDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"This operation provides advanced search and filtering over all post edit history records for a specific discussion post (discussion_board_post_edits). It supports pagination, sorting, complex search queries, and can return filtered audit logs for compliance, dispute resolution, and deep moderation review. It references the discussion_board_post_edits Prisma table, returning all edits for the given postId that match the query criteria. Allows searching by editor, timestamp, rationale, and edit content. Authorization ensures that only members, moderators, or admins can access. Often used for moderating high-profile or controversial edits.","path":"/discussionBoard/admin/posts/{postId}/postEdits","method":"patch","description":"Perform a paginated and filtered search of all edit events for a specific post. Request body supports advanced criteria: querying by edit date range, editor, rationale keywords, or changes to post content. This operation gives authorized users the ability to locate specific edits for audit log review, compliance investigation, or dispute handling. \n\nSecurity: Members may only filter their own edits unless they have elevated privileges. Moderators and admins can search any post's edit history. Pagination, search, and sorting help keep queries efficient for large edit histories. Error handling includes range errors, permission checks, and malformed queries.","summary":"Advanced search over the edit audit trail of a specific discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"Unique identifier of the post to search its edit events.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search criteria and pagination parameters for filtering edit history.","typeName":"IDiscussionBoardPostEdit.IRequest"},"responseBody":{"description":"Paginated and filtered audit log events matching search criteria.","typeName":"IPageIDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"This operation returns detailed information about an individual edit event for a given discussion post. It acts upon the discussion_board_post_edits table and supports single-entity audit retrieval for compliance, moderation, and editor review. The path parameters map directly to the post ID and specific edit ID, enabling a precise lookup. The response includes all available details about the edit including editor, timestamps, content changes, and rationale. Authorization is enforced for access control. Error handling covers not found, forbidden, and audit compliance scenarios.","path":"/discussionBoard/member/posts/{postId}/postEdits/{postEditId}","method":"get","description":"Retrieve full details for a specific edit to a discussion post. This endpoint is used when audit, moderator, or member needs to investigate or review a single modification event in the edit history. It queries the discussion_board_post_edits table by primary key, returning fields such as the new title/body (if altered), the editor's member ID, timestamp of edit, and the rationale. \n\nSecurity policy ensures that only stakeholders with proper rights—editors, moderators, or administrators—can view the full audit log for non-deleted posts. This operation is commonly paired with parent edit-list or search operations for drilldown.","summary":"Retrieve a single edit event for a discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"ID of the post for which the edit event belongs.","schema":{"type":"string","format":"uuid"}},{"name":"postEditId","description":"ID of the specific post edit event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed single edit event for the given post, including content changes and rationale.","typeName":"IDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"member"},{"specification":"This operation returns detailed information about an individual edit event for a given discussion post. It acts upon the discussion_board_post_edits table and supports single-entity audit retrieval for compliance, moderation, and editor review. The path parameters map directly to the post ID and specific edit ID, enabling a precise lookup. The response includes all available details about the edit including editor, timestamps, content changes, and rationale. Authorization is enforced for access control. Error handling covers not found, forbidden, and audit compliance scenarios.","path":"/discussionBoard/moderator/posts/{postId}/postEdits/{postEditId}","method":"get","description":"Retrieve full details for a specific edit to a discussion post. This endpoint is used when audit, moderator, or member needs to investigate or review a single modification event in the edit history. It queries the discussion_board_post_edits table by primary key, returning fields such as the new title/body (if altered), the editor's member ID, timestamp of edit, and the rationale. \n\nSecurity policy ensures that only stakeholders with proper rights—editors, moderators, or administrators—can view the full audit log for non-deleted posts. This operation is commonly paired with parent edit-list or search operations for drilldown.","summary":"Retrieve a single edit event for a discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"ID of the post for which the edit event belongs.","schema":{"type":"string","format":"uuid"}},{"name":"postEditId","description":"ID of the specific post edit event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed single edit event for the given post, including content changes and rationale.","typeName":"IDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"This operation returns detailed information about an individual edit event for a given discussion post. It acts upon the discussion_board_post_edits table and supports single-entity audit retrieval for compliance, moderation, and editor review. The path parameters map directly to the post ID and specific edit ID, enabling a precise lookup. The response includes all available details about the edit including editor, timestamps, content changes, and rationale. Authorization is enforced for access control. Error handling covers not found, forbidden, and audit compliance scenarios.","path":"/discussionBoard/admin/posts/{postId}/postEdits/{postEditId}","method":"get","description":"Retrieve full details for a specific edit to a discussion post. This endpoint is used when audit, moderator, or member needs to investigate or review a single modification event in the edit history. It queries the discussion_board_post_edits table by primary key, returning fields such as the new title/body (if altered), the editor's member ID, timestamp of edit, and the rationale. \n\nSecurity policy ensures that only stakeholders with proper rights—editors, moderators, or administrators—can view the full audit log for non-deleted posts. This operation is commonly paired with parent edit-list or search operations for drilldown.","summary":"Retrieve a single edit event for a discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"ID of the post for which the edit event belongs.","schema":{"type":"string","format":"uuid"}},{"name":"postEditId","description":"ID of the specific post edit event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed single edit event for the given post, including content changes and rationale.","typeName":"IDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"This operation creates a new edit event for a given discussion post, recording the updated content and rationale in the discussion_board_post_edits table. This supports the platform's requirement for a full, auditable edit history and allows members to update posts while maintaining compliance visibility. The request body supplies required fields: new_title/new_body (one or both can be updated), rationale for the change, and editor attribution (enforced by authentication context). Returns audit details for the created edit. Authorization ensures only the post's author or appropriate roles may perform edits.","path":"/discussionBoard/member/posts/{postId}/postEdits","method":"post","description":"Create a new edit event for a specified discussion post, updating the audit log and edit history. This endpoint is used whenever a member (or moderator/admin acting with proper permissions) edits a post. The changes (new title and/or body) and rationale are provided, attributed to the current user session as editor. \n\nSecurity: Authentication/authorization layer enforces that only post authors, moderators, or administrators can add post edits. The audit trail is preserved and made immutable for regulatory requirements. Validation checks ensure non-nullable structural fields and rationales where required.\n\nThis operation is often followed by retrieving the updated post or complete edit history.","summary":"Create a new edit event for a discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"The post for which a new edit event will be logged.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Edit details: new title/body and rationale for the post change.","typeName":"IDiscussionBoardPostEdit.ICreate"},"responseBody":{"description":"Created audit event representing the post edit, with all attribution and rationale.","typeName":"IDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"member"},{"specification":"This operation creates a new edit event for a given discussion post, recording the updated content and rationale in the discussion_board_post_edits table. This supports the platform's requirement for a full, auditable edit history and allows members to update posts while maintaining compliance visibility. The request body supplies required fields: new_title/new_body (one or both can be updated), rationale for the change, and editor attribution (enforced by authentication context). Returns audit details for the created edit. Authorization ensures only the post's author or appropriate roles may perform edits.","path":"/discussionBoard/moderator/posts/{postId}/postEdits","method":"post","description":"Create a new edit event for a specified discussion post, updating the audit log and edit history. This endpoint is used whenever a member (or moderator/admin acting with proper permissions) edits a post. The changes (new title and/or body) and rationale are provided, attributed to the current user session as editor. \n\nSecurity: Authentication/authorization layer enforces that only post authors, moderators, or administrators can add post edits. The audit trail is preserved and made immutable for regulatory requirements. Validation checks ensure non-nullable structural fields and rationales where required.\n\nThis operation is often followed by retrieving the updated post or complete edit history.","summary":"Create a new edit event for a discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"The post for which a new edit event will be logged.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Edit details: new title/body and rationale for the post change.","typeName":"IDiscussionBoardPostEdit.ICreate"},"responseBody":{"description":"Created audit event representing the post edit, with all attribution and rationale.","typeName":"IDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"moderator"},{"specification":"This operation creates a new edit event for a given discussion post, recording the updated content and rationale in the discussion_board_post_edits table. This supports the platform's requirement for a full, auditable edit history and allows members to update posts while maintaining compliance visibility. The request body supplies required fields: new_title/new_body (one or both can be updated), rationale for the change, and editor attribution (enforced by authentication context). Returns audit details for the created edit. Authorization ensures only the post's author or appropriate roles may perform edits.","path":"/discussionBoard/admin/posts/{postId}/postEdits","method":"post","description":"Create a new edit event for a specified discussion post, updating the audit log and edit history. This endpoint is used whenever a member (or moderator/admin acting with proper permissions) edits a post. The changes (new title and/or body) and rationale are provided, attributed to the current user session as editor. \n\nSecurity: Authentication/authorization layer enforces that only post authors, moderators, or administrators can add post edits. The audit trail is preserved and made immutable for regulatory requirements. Validation checks ensure non-nullable structural fields and rationales where required.\n\nThis operation is often followed by retrieving the updated post or complete edit history.","summary":"Create a new edit event for a discussion post (discussion_board_post_edits).","parameters":[{"name":"postId","description":"The post for which a new edit event will be logged.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Edit details: new title/body and rationale for the post change.","typeName":"IDiscussionBoardPostEdit.ICreate"},"responseBody":{"description":"Created audit event representing the post edit, with all attribution and rationale.","typeName":"IDiscussionBoardPostEdit"},"authorizationRoles":["member","moderator","admin"],"name":"create","authorizationRole":"admin"},{"specification":"This operation updates an existing post edit (discussion_board_post_edits) for a given discussion post and edit event ID. It supports moderator or admin corrections, post-edit rationalization, or compliance-driven updates to previously recorded edits. Allows altering of new title/body or rationale, preserving a complete change log in the audit system. Authorization is restricted to editors, admins, or moderators. Care is taken to never allow member editors to update historical edits they did not submit. The request body provides updated values.","path":"/discussionBoard/moderator/posts/{postId}/postEdits/{postEditId}","method":"put","description":"Update details of an existing edit event for the specified post. This operation is used for moderator or admin-driven corrections, supplementing audit records, or addressing compliance events. The request body may specify new values for the updated title, body, and the rationale for the previous change.\n\nSecurity: Only the original editor, a moderator, or an admin may modify an existing edit event. An audit trail remains immutable for regulatory reporting except for correction fields. Proper authorization checks are performed and appropriate errors returned for permission violations.","summary":"Update an existing post edit event (discussion_board_post_edits).","parameters":[{"name":"postId","description":"ID of the post whose edit event is to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"postEditId","description":"ID of the post edit event to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated title/body/rationale info for the edit event.","typeName":"IDiscussionBoardPostEdit.IUpdate"},"responseBody":{"description":"Updated audit event for the specified post edit, showing new details.","typeName":"IDiscussionBoardPostEdit"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"This operation updates an existing post edit (discussion_board_post_edits) for a given discussion post and edit event ID. It supports moderator or admin corrections, post-edit rationalization, or compliance-driven updates to previously recorded edits. Allows altering of new title/body or rationale, preserving a complete change log in the audit system. Authorization is restricted to editors, admins, or moderators. Care is taken to never allow member editors to update historical edits they did not submit. The request body provides updated values.","path":"/discussionBoard/admin/posts/{postId}/postEdits/{postEditId}","method":"put","description":"Update details of an existing edit event for the specified post. This operation is used for moderator or admin-driven corrections, supplementing audit records, or addressing compliance events. The request body may specify new values for the updated title, body, and the rationale for the previous change.\n\nSecurity: Only the original editor, a moderator, or an admin may modify an existing edit event. An audit trail remains immutable for regulatory reporting except for correction fields. Proper authorization checks are performed and appropriate errors returned for permission violations.","summary":"Update an existing post edit event (discussion_board_post_edits).","parameters":[{"name":"postId","description":"ID of the post whose edit event is to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"postEditId","description":"ID of the post edit event to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated title/body/rationale info for the edit event.","typeName":"IDiscussionBoardPostEdit.IUpdate"},"responseBody":{"description":"Updated audit event for the specified post edit, showing new details.","typeName":"IDiscussionBoardPostEdit"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"This operation deletes a specific post edit event (discussion_board_post_edits) given a post and edit event ID. Used for moderator/admin correction, legal compliance, or audit trail cleanup. This endpoint performs a hard delete as there is no soft delete logic in the post edit model. The operation is allowed only for admin or moderator roles. Once deleted, the audit event cannot be recovered (be cautious as this affects the regulatory audit trail).","path":"/discussionBoard/moderator/posts/{postId}/postEdits/{postEditId}","method":"delete","description":"Permanently remove a post edit event for a given discussion post and edit event ID. This operation is used for legal compliance, moderator/admin audit cleanup, or the handling of audit events discovered to have been created in error. \n\nWarning: Hard delete is performed (no deleted_at field on post edits), so deletion is irreversible. Only admins or full moderators are authorized. Error handling for not found, forbidden, and permission errors is enforced. This operation should be tracked via access/audit logs in compliance with platform policies.","summary":"Permanently delete a specified post edit audit event (discussion_board_post_edits).","parameters":[{"name":"postId","description":"The post to which the edit event belongs.","schema":{"type":"string","format":"uuid"}},{"name":"postEditId","description":"ID of the edit event to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"This operation deletes a specific post edit event (discussion_board_post_edits) given a post and edit event ID. Used for moderator/admin correction, legal compliance, or audit trail cleanup. This endpoint performs a hard delete as there is no soft delete logic in the post edit model. The operation is allowed only for admin or moderator roles. Once deleted, the audit event cannot be recovered (be cautious as this affects the regulatory audit trail).","path":"/discussionBoard/admin/posts/{postId}/postEdits/{postEditId}","method":"delete","description":"Permanently remove a post edit event for a given discussion post and edit event ID. This operation is used for legal compliance, moderator/admin audit cleanup, or the handling of audit events discovered to have been created in error. \n\nWarning: Hard delete is performed (no deleted_at field on post edits), so deletion is irreversible. Only admins or full moderators are authorized. Error handling for not found, forbidden, and permission errors is enforced. This operation should be tracked via access/audit logs in compliance with platform policies.","summary":"Permanently delete a specified post edit audit event (discussion_board_post_edits).","parameters":[{"name":"postId","description":"The post to which the edit event belongs.","schema":{"type":"string","format":"uuid"}},{"name":"postEditId","description":"ID of the edit event to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a non-filtered list of all content moderation reports (discussion_board_content_reports table). Useful for admins/moderators for high-level review of all active or historic abuse reports for posts/comments. Supports pagination and summary display. This endpoint is NOT for public/member use. Data includes all fields necessary for triage, status board display, and analytics. Authorization is restricted to admin and moderator roles.","path":"/discussionBoard/moderator/contentReports","method":"get","description":"List all abuse, policy, or moderation reports found in the system, across all posts and comments. This endpoint provides a summary dashboard for deal flow, triage, and backlog management by moderation staff and admins. All major business fields are included, such as reporter/target IDs, category, status, and timestamps, as well as linkage to posts/comments being reported.\n\nPublic/members/guests do not have access due to privacy, audit, and compliance requirements. Related endpoints are used for search and detail retrieval. Pagination is supported for high-volume reporting systems.","summary":"Retrieve all content moderation/abuse reports (discussion_board_content_reports).","parameters":[],"requestBody":null,"responseBody":{"description":"Complete list of all content/report entities for abuse moderation, with all business details.","typeName":"IPageIDiscussionBoardContentReport"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"moderator"},{"specification":"Retrieve a non-filtered list of all content moderation reports (discussion_board_content_reports table). Useful for admins/moderators for high-level review of all active or historic abuse reports for posts/comments. Supports pagination and summary display. This endpoint is NOT for public/member use. Data includes all fields necessary for triage, status board display, and analytics. Authorization is restricted to admin and moderator roles.","path":"/discussionBoard/admin/contentReports","method":"get","description":"List all abuse, policy, or moderation reports found in the system, across all posts and comments. This endpoint provides a summary dashboard for deal flow, triage, and backlog management by moderation staff and admins. All major business fields are included, such as reporter/target IDs, category, status, and timestamps, as well as linkage to posts/comments being reported.\n\nPublic/members/guests do not have access due to privacy, audit, and compliance requirements. Related endpoints are used for search and detail retrieval. Pagination is supported for high-volume reporting systems.","summary":"Retrieve all content moderation/abuse reports (discussion_board_content_reports).","parameters":[],"requestBody":null,"responseBody":{"description":"Complete list of all content/report entities for abuse moderation, with all business details.","typeName":"IPageIDiscussionBoardContentReport"},"authorizationRoles":["moderator","admin"],"name":"index","authorizationRole":"admin"},{"specification":"This operation provides advanced filtering/search capabilities over the moderation/abuse report audit log (discussion_board_content_reports). Triage, analytics, and compliance workflows rely on this endpoint for querying by report status, reporter identity (admin, member, etc.), category, and target post/comment. Supports pagination/sorting for large review backlogs and complex regulatory queries. Only moderators/admins are allowed. Often used with report dashboard/search in moderation panel.","path":"/discussionBoard/moderator/contentReports","method":"patch","description":"Search or filter all abuse/policy moderation reports on the board. Advanced request body supports triaging open/pending reports, filtering by reporter, status, category, or target content, and date range querying. This endpoint is critical for managing high-report volume and ensuring SLAs are met for review/closure.\n\nSecurity: Only visible to authorized roles for legal, privacy, and compliance reasons. Pagination/sorting controls help keep review efficient.","summary":"Advanced search/triage of abuse and moderation reports (discussion_board_content_reports).","parameters":[],"requestBody":{"description":"Complex request object for querying, paging, and filtering moderation reports/audit events.","typeName":"IDiscussionBoardContentReport.IRequest"},"responseBody":{"description":"Paginated and filtered list of moderation reports/audit events matching query.","typeName":"IPageIDiscussionBoardContentReport"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"moderator"},{"specification":"This operation provides advanced filtering/search capabilities over the moderation/abuse report audit log (discussion_board_content_reports). Triage, analytics, and compliance workflows rely on this endpoint for querying by report status, reporter identity (admin, member, etc.), category, and target post/comment. Supports pagination/sorting for large review backlogs and complex regulatory queries. Only moderators/admins are allowed. Often used with report dashboard/search in moderation panel.","path":"/discussionBoard/admin/contentReports","method":"patch","description":"Search or filter all abuse/policy moderation reports on the board. Advanced request body supports triaging open/pending reports, filtering by reporter, status, category, or target content, and date range querying. This endpoint is critical for managing high-report volume and ensuring SLAs are met for review/closure.\n\nSecurity: Only visible to authorized roles for legal, privacy, and compliance reasons. Pagination/sorting controls help keep review efficient.","summary":"Advanced search/triage of abuse and moderation reports (discussion_board_content_reports).","parameters":[],"requestBody":{"description":"Complex request object for querying, paging, and filtering moderation reports/audit events.","typeName":"IDiscussionBoardContentReport.IRequest"},"responseBody":{"description":"Paginated and filtered list of moderation reports/audit events matching query.","typeName":"IPageIDiscussionBoardContentReport"},"authorizationRoles":["moderator","admin"],"name":"search","authorizationRole":"admin"},{"specification":"This operation retrieves the complete details of a single content report (discussion_board_content_reports), given by its unique contentReportId. Useful for moderators and admins to review report attribution, content, status, timestamps, and related abuse/violation data. Returns all business audit fields necessary for resolution workflows, escalations, and status tracking. Not accessible to unprivileged users. Error handling for not found, forbidden, and compliance errors is enforced.","path":"/discussionBoard/moderator/contentReports/{contentReportId}","method":"get","description":"Retrieve all business and audit details about one specific moderation/content abuse report by its ID. The response includes linkage to the reported post/comment, reporter information (admin, member, guest, etc.), status, reason, category, and all timestamps relevant to audit/tracking. This detailed view is used in moderation/triage panels, compliance review, and legal workflows as needed.\n\nOnly available to admins and moderators for privacy/audit reasons. This operation is often paired with the search, list, or update endpoints for workflow integration.","summary":"Retrieve a specific content moderation report (discussion_board_content_reports).","parameters":[{"name":"contentReportId","description":"The unique identifier of the moderation report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full content report object with all GDPR/audit/status fields.","typeName":"IDiscussionBoardContentReport"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"moderator"},{"specification":"This operation retrieves the complete details of a single content report (discussion_board_content_reports), given by its unique contentReportId. Useful for moderators and admins to review report attribution, content, status, timestamps, and related abuse/violation data. Returns all business audit fields necessary for resolution workflows, escalations, and status tracking. Not accessible to unprivileged users. Error handling for not found, forbidden, and compliance errors is enforced.","path":"/discussionBoard/admin/contentReports/{contentReportId}","method":"get","description":"Retrieve all business and audit details about one specific moderation/content abuse report by its ID. The response includes linkage to the reported post/comment, reporter information (admin, member, guest, etc.), status, reason, category, and all timestamps relevant to audit/tracking. This detailed view is used in moderation/triage panels, compliance review, and legal workflows as needed.\n\nOnly available to admins and moderators for privacy/audit reasons. This operation is often paired with the search, list, or update endpoints for workflow integration.","summary":"Retrieve a specific content moderation report (discussion_board_content_reports).","parameters":[{"name":"contentReportId","description":"The unique identifier of the moderation report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full content report object with all GDPR/audit/status fields.","typeName":"IDiscussionBoardContentReport"},"authorizationRoles":["moderator","admin"],"name":"at","authorizationRole":"admin"},{"specification":"This operation files a new content moderation/abuse report record into the discussion_board_content_reports table. Members and guests can report posts/comments for violation of community standards, illegal/harmful content, or other policy infractions. Request body must include information about reporter (inferred from login/guest session), target post/comment, reason, category, and initial status. Upon creation, the report is set as pending (or equivalent initial state) and is ready for moderation workflow. The new report is returned so UI can confirm/audit. Moderators/admins can also report for record/audit. Enforcement of field constraints (reporter, contentType, and references) is required.","path":"/discussionBoard/member/contentReports","method":"post","description":"Create a new content/abuse moderation report for the system. The request must specify who is reporting, what they are reporting (post or comment, by ID), content type, category, reason, and any other required audit fields. This endpoint is open to any authenticated or guest session wanting to report abusive content.\n\nSecurity: The reporter's identity is inferred from the token/guest session rather than request body. Validation ensures all referenced posts/comments exist. Upon creation, the report is added to the moderation queue as pending/under_review.\n\nThis operation is critical for enforcing policy and community compliance on the board. Follow-up actions may trigger notifications, status updates, or linkages to moderation actions.","summary":"Create a new moderation/abuse report for a post or comment (discussion_board_content_reports).","parameters":[],"requestBody":{"description":"All necessary info to file an abuse report: reporter, category, referenced content, and rationale.","typeName":"IDiscussionBoardContentReport.ICreate"},"responseBody":{"description":"The created moderation/abuse report, ready for moderation workflow.","typeName":"IDiscussionBoardContentReport"},"authorizationRoles":["member","moderator","admin","guest"],"name":"create","authorizationRole":"member"},{"specification":"This operation files a new content moderation/abuse report record into the discussion_board_content_reports table. Members and guests can report posts/comments for violation of community standards, illegal/harmful content, or other policy infractions. Request body must include information about reporter (inferred from login/guest session), target post/comment, reason, category, and initial status. Upon creation, the report is set as pending (or equivalent initial state) and is ready for moderation workflow. The new report is returned so UI can confirm/audit. Moderators/admins can also report for record/audit. Enforcement of field constraints (reporter, contentType, and references) is required.","path":"/discussionBoard/moderator/contentReports","method":"post","description":"Create a new content/abuse moderation report for the system. The request must specify who is reporting, what they are reporting (post or comment, by ID), content type, category, reason, and any other required audit fields. This endpoint is open to any authenticated or guest session wanting to report abusive content.\n\nSecurity: The reporter's identity is inferred from the token/guest session rather than request body. Validation ensures all referenced posts/comments exist. Upon creation, the report is added to the moderation queue as pending/under_review.\n\nThis operation is critical for enforcing policy and community compliance on the board. Follow-up actions may trigger notifications, status updates, or linkages to moderation actions.","summary":"Create a new moderation/abuse report for a post or comment (discussion_board_content_reports).","parameters":[],"requestBody":{"description":"All necessary info to file an abuse report: reporter, category, referenced content, and rationale.","typeName":"IDiscussionBoardContentReport.ICreate"},"responseBody":{"description":"The created moderation/abuse report, ready for moderation workflow.","typeName":"IDiscussionBoardContentReport"},"authorizationRoles":["member","moderator","admin","guest"],"name":"create","authorizationRole":"moderator"},{"specification":"This operation files a new content moderation/abuse report record into the discussion_board_content_reports table. Members and guests can report posts/comments for violation of community standards, illegal/harmful content, or other policy infractions. Request body must include information about reporter (inferred from login/guest session), target post/comment, reason, category, and initial status. Upon creation, the report is set as pending (or equivalent initial state) and is ready for moderation workflow. The new report is returned so UI can confirm/audit. Moderators/admins can also report for record/audit. Enforcement of field constraints (reporter, contentType, and references) is required.","path":"/discussionBoard/admin/contentReports","method":"post","description":"Create a new content/abuse moderation report for the system. The request must specify who is reporting, what they are reporting (post or comment, by ID), content type, category, reason, and any other required audit fields. This endpoint is open to any authenticated or guest session wanting to report abusive content.\n\nSecurity: The reporter's identity is inferred from the token/guest session rather than request body. Validation ensures all referenced posts/comments exist. Upon creation, the report is added to the moderation queue as pending/under_review.\n\nThis operation is critical for enforcing policy and community compliance on the board. Follow-up actions may trigger notifications, status updates, or linkages to moderation actions.","summary":"Create a new moderation/abuse report for a post or comment (discussion_board_content_reports).","parameters":[],"requestBody":{"description":"All necessary info to file an abuse report: reporter, category, referenced content, and rationale.","typeName":"IDiscussionBoardContentReport.ICreate"},"responseBody":{"description":"The created moderation/abuse report, ready for moderation workflow.","typeName":"IDiscussionBoardContentReport"},"authorizationRoles":["member","moderator","admin","guest"],"name":"create","authorizationRole":"admin"},{"specification":"This operation files a new content moderation/abuse report record into the discussion_board_content_reports table. Members and guests can report posts/comments for violation of community standards, illegal/harmful content, or other policy infractions. Request body must include information about reporter (inferred from login/guest session), target post/comment, reason, category, and initial status. Upon creation, the report is set as pending (or equivalent initial state) and is ready for moderation workflow. The new report is returned so UI can confirm/audit. Moderators/admins can also report for record/audit. Enforcement of field constraints (reporter, contentType, and references) is required.","path":"/discussionBoard/guest/contentReports","method":"post","description":"Create a new content/abuse moderation report for the system. The request must specify who is reporting, what they are reporting (post or comment, by ID), content type, category, reason, and any other required audit fields. This endpoint is open to any authenticated or guest session wanting to report abusive content.\n\nSecurity: The reporter's identity is inferred from the token/guest session rather than request body. Validation ensures all referenced posts/comments exist. Upon creation, the report is added to the moderation queue as pending/under_review.\n\nThis operation is critical for enforcing policy and community compliance on the board. Follow-up actions may trigger notifications, status updates, or linkages to moderation actions.","summary":"Create a new moderation/abuse report for a post or comment (discussion_board_content_reports).","parameters":[],"requestBody":{"description":"All necessary info to file an abuse report: reporter, category, referenced content, and rationale.","typeName":"IDiscussionBoardContentReport.ICreate"},"responseBody":{"description":"The created moderation/abuse report, ready for moderation workflow.","typeName":"IDiscussionBoardContentReport"},"authorizationRoles":["member","moderator","admin","guest"],"name":"create","authorizationRole":"guest"},{"specification":"This operation updates details on an existing content moderation report (discussion_board_content_reports) identified by its contentReportId. This is most commonly used to update status fields, provide resolution timestamps, correction of categorization/reason, or comment on report disposition (admin or moderator note). Typically, only moderators or admins with workflow privileges may update. The request body specifies the updatable audit fields. Security: status, reason, and resolved_at are most frequent updates. Full error handling enforces only authorized role/ownership is permitted.","path":"/discussionBoard/moderator/contentReports/{contentReportId}","method":"put","description":"Update fields on an existing moderation/abuse report, most often for workflow and audit updates, correction or change of status, or addition of moderator/admin rationale. The endpoint allows update of mutable fields such as status, category, reason, or timestamps. Only moderators or admins with active session are authorized.\n\nBusiness rules require strict validation to ensure permissible updates by workflow role. Other roles/guests may not change moderation states. Thorough error handling for forbidden/not found.","summary":"Update a content report (discussion_board_content_reports) for audit/resolution/triage.","parameters":[{"name":"contentReportId","description":"The unique ID of the report to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the report: status, rationale, escalation, etc.","typeName":"IDiscussionBoardContentReport.IUpdate"},"responseBody":{"description":"Report audit object after update available for workflow panel.","typeName":"IDiscussionBoardContentReport"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"moderator"},{"specification":"This operation updates details on an existing content moderation report (discussion_board_content_reports) identified by its contentReportId. This is most commonly used to update status fields, provide resolution timestamps, correction of categorization/reason, or comment on report disposition (admin or moderator note). Typically, only moderators or admins with workflow privileges may update. The request body specifies the updatable audit fields. Security: status, reason, and resolved_at are most frequent updates. Full error handling enforces only authorized role/ownership is permitted.","path":"/discussionBoard/admin/contentReports/{contentReportId}","method":"put","description":"Update fields on an existing moderation/abuse report, most often for workflow and audit updates, correction or change of status, or addition of moderator/admin rationale. The endpoint allows update of mutable fields such as status, category, reason, or timestamps. Only moderators or admins with active session are authorized.\n\nBusiness rules require strict validation to ensure permissible updates by workflow role. Other roles/guests may not change moderation states. Thorough error handling for forbidden/not found.","summary":"Update a content report (discussion_board_content_reports) for audit/resolution/triage.","parameters":[{"name":"contentReportId","description":"The unique ID of the report to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the report: status, rationale, escalation, etc.","typeName":"IDiscussionBoardContentReport.IUpdate"},"responseBody":{"description":"Report audit object after update available for workflow panel.","typeName":"IDiscussionBoardContentReport"},"authorizationRoles":["moderator","admin"],"name":"update","authorizationRole":"admin"},{"specification":"This operation deletes (hard delete) an individual content moderation report. It acts on the discussion_board_content_reports table by contentReportId. This is a non-reversible operation used for audit/correction, compliance, or regulation-driven deletion. No soft-delete field exists (deleted_at), so the data is physically removed from the database. Only allowed for admin and moderator roles, with careful tracking in access logs. Caution: This removes report from all future audits and dashboards. Errors returned for not found/forbidden situations.","path":"/discussionBoard/moderator/contentReports/{contentReportId}","method":"delete","description":"Delete a specified moderation/abuse report. This operation implements a hard delete and is intended only for error correction, legal compliance, or policy-mandated audit removal. Once completed, the operation is irreversible. All API actions are logged for compliance.\n\nSecurity: Only moderators and admins with proper credentials are allowed. Error handling ensures safety and protects against accidental loss. Use with care—removal affects analytics/audit history.","summary":"Permanently delete an abuse/content moderation report (discussion_board_content_reports).","parameters":[{"name":"contentReportId","description":"The unique ID of the report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"moderator"},{"specification":"This operation deletes (hard delete) an individual content moderation report. It acts on the discussion_board_content_reports table by contentReportId. This is a non-reversible operation used for audit/correction, compliance, or regulation-driven deletion. No soft-delete field exists (deleted_at), so the data is physically removed from the database. Only allowed for admin and moderator roles, with careful tracking in access logs. Caution: This removes report from all future audits and dashboards. Errors returned for not found/forbidden situations.","path":"/discussionBoard/admin/contentReports/{contentReportId}","method":"delete","description":"Delete a specified moderation/abuse report. This operation implements a hard delete and is intended only for error correction, legal compliance, or policy-mandated audit removal. Once completed, the operation is irreversible. All API actions are logged for compliance.\n\nSecurity: Only moderators and admins with proper credentials are allowed. Error handling ensures safety and protects against accidental loss. Use with care—removal affects analytics/audit history.","summary":"Permanently delete an abuse/content moderation report (discussion_board_content_reports).","parameters":[{"name":"contentReportId","description":"The unique ID of the report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves a list of moderation actions performed on content reports within the discussion board system. The endpoint is mapped to the `discussion_board_moderation_actions` table, which records moderation events such as edits, suspensions, deletions, and escalations, linked to individual content reports. Each entry includes references to the acting admin or moderator, the associated report, type and time of action, and rationale for traceability. The endpoint supports access auditability and reporting requirements for system oversight.","path":"/discussionBoard/admin/moderationActions","method":"get","description":"Fetch a comprehensive list of all moderation actions taken in response to content reports for compliance, review, or audit. Each moderation action is stored in the `discussion_board_moderation_actions` table, which links back to the triggering content report and includes the administering actor, type of action, and descriptive rationale.\n\nAccess to this endpoint is restricted to users with 'admin' or 'moderator' roles, as it may expose sensitive moderation history and action details. Audit trails are enforced through the underlying schema; all fetched actions can be correlated to report and actor entities.\n\nReturned results reflect the current moderation state and can be used to monitor policy enforcement, review historical actions, or support legal/regulatory review per requirements. If supplementary filtering or search is required, PATCH /moderationActions should be used for advanced queries.","summary":"List all moderation actions recorded for content reports (discussion_board_moderation_actions)","parameters":[],"requestBody":null,"responseBody":{"description":"List of all moderation actions as detailed records.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin"},{"specification":"This operation retrieves a list of moderation actions performed on content reports within the discussion board system. The endpoint is mapped to the `discussion_board_moderation_actions` table, which records moderation events such as edits, suspensions, deletions, and escalations, linked to individual content reports. Each entry includes references to the acting admin or moderator, the associated report, type and time of action, and rationale for traceability. The endpoint supports access auditability and reporting requirements for system oversight.","path":"/discussionBoard/moderator/moderationActions","method":"get","description":"Fetch a comprehensive list of all moderation actions taken in response to content reports for compliance, review, or audit. Each moderation action is stored in the `discussion_board_moderation_actions` table, which links back to the triggering content report and includes the administering actor, type of action, and descriptive rationale.\n\nAccess to this endpoint is restricted to users with 'admin' or 'moderator' roles, as it may expose sensitive moderation history and action details. Audit trails are enforced through the underlying schema; all fetched actions can be correlated to report and actor entities.\n\nReturned results reflect the current moderation state and can be used to monitor policy enforcement, review historical actions, or support legal/regulatory review per requirements. If supplementary filtering or search is required, PATCH /moderationActions should be used for advanced queries.","summary":"List all moderation actions recorded for content reports (discussion_board_moderation_actions)","parameters":[],"requestBody":null,"responseBody":{"description":"List of all moderation actions as detailed records.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator"},{"specification":"This endpoint enables advanced search and retrieval of moderation actions from the `discussion_board_moderation_actions` table of the discussion board. The PATCH method supports complex filtering—such as by action type, report, actor, date range, or status—for compliance review, policy audits, or analytics. This search operation is critical for regulatory traceability, internal investigations, and report management.","path":"/discussionBoard/admin/moderationActions","method":"patch","description":"Perform a filtered, advanced search of moderation actions using multiple criteria—such as action type, actor (admin or moderator), time window, or report reference—from the `discussion_board_moderation_actions` entity.\n\nDesigned for admin or moderator users, this operation allows flexible queries to support compliance, analytical, and oversight requirements. For example, a compliance officer can query for all 'suspend' actions in the last month, or moderation leads can review escalation actions by a specific moderator.\n\nResponses return a paginated list that meets requested criteria, supporting both compliance documentation and operational workflow needs. Detailed responses include all relationships and rationale fields as allowed by the data model.","summary":"Search, filter, and paginate moderation actions by admin/moderator (discussion_board_moderation_actions)","parameters":[],"requestBody":{"description":"Filtering, query, and pagination info for advanced moderation action search.","typeName":"IDiscussionBoardModerationAction.IRequest"},"responseBody":{"description":"Paginated, filtered moderation action results; includes detailed records.","typeName":"IPageIDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"This endpoint enables advanced search and retrieval of moderation actions from the `discussion_board_moderation_actions` table of the discussion board. The PATCH method supports complex filtering—such as by action type, report, actor, date range, or status—for compliance review, policy audits, or analytics. This search operation is critical for regulatory traceability, internal investigations, and report management.","path":"/discussionBoard/moderator/moderationActions","method":"patch","description":"Perform a filtered, advanced search of moderation actions using multiple criteria—such as action type, actor (admin or moderator), time window, or report reference—from the `discussion_board_moderation_actions` entity.\n\nDesigned for admin or moderator users, this operation allows flexible queries to support compliance, analytical, and oversight requirements. For example, a compliance officer can query for all 'suspend' actions in the last month, or moderation leads can review escalation actions by a specific moderator.\n\nResponses return a paginated list that meets requested criteria, supporting both compliance documentation and operational workflow needs. Detailed responses include all relationships and rationale fields as allowed by the data model.","summary":"Search, filter, and paginate moderation actions by admin/moderator (discussion_board_moderation_actions)","parameters":[],"requestBody":{"description":"Filtering, query, and pagination info for advanced moderation action search.","typeName":"IDiscussionBoardModerationAction.IRequest"},"responseBody":{"description":"Paginated, filtered moderation action results; includes detailed records.","typeName":"IPageIDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"This operation retrieves full details of a single moderation action using its unique ID. It operates on the `discussion_board_moderation_actions` table—providing all associated information such as report, actor (admin or moderator), action type, rationale, and timestamp. Supports in-depth review, workflow tracking, or regulatory audits when a moderator's or admin's action must be examined in detail.","path":"/discussionBoard/admin/moderationActions/{moderationActionId}","method":"get","description":"Get detailed information about a specific moderation action as recorded in the `discussion_board_moderation_actions` table, identified by the action's unique ID. Data exposed includes action type, description/rationale, actor (admin or moderator), time of execution, and the linked content report.\n\nThis operation serves admin and moderator users and supports in-depth moderation review, appeals review, investigatory compliance, and legal inquiries. Full entity relationships—including links to the content report and initiating actor—are returned as schema allows.","summary":"Fetch details for a single moderation action by ID (discussion_board_moderation_actions)","parameters":[{"name":"moderationActionId","description":"Unique identifier of the target moderation action record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Fully detailed moderation action entity for the given ID.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"This operation retrieves full details of a single moderation action using its unique ID. It operates on the `discussion_board_moderation_actions` table—providing all associated information such as report, actor (admin or moderator), action type, rationale, and timestamp. Supports in-depth review, workflow tracking, or regulatory audits when a moderator's or admin's action must be examined in detail.","path":"/discussionBoard/moderator/moderationActions/{moderationActionId}","method":"get","description":"Get detailed information about a specific moderation action as recorded in the `discussion_board_moderation_actions` table, identified by the action's unique ID. Data exposed includes action type, description/rationale, actor (admin or moderator), time of execution, and the linked content report.\n\nThis operation serves admin and moderator users and supports in-depth moderation review, appeals review, investigatory compliance, and legal inquiries. Full entity relationships—including links to the content report and initiating actor—are returned as schema allows.","summary":"Fetch details for a single moderation action by ID (discussion_board_moderation_actions)","parameters":[{"name":"moderationActionId","description":"Unique identifier of the target moderation action record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Fully detailed moderation action entity for the given ID.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"This operation enables authorized users (admins or moderators) to record a new moderation action associated with a content report in the `discussion_board_moderation_actions` table. Actions can include edits, suspensions, deletions, dismissals, or escalations. All required relationships—such as actor, report ID, action type, and rationale—are supplied in the payload. The operation creates a new entry with full audit and compliance traceability for moderation workflows.","path":"/discussionBoard/admin/moderationActions","method":"post","description":"Create a moderation action record in the `discussion_board_moderation_actions` table, associating an admin or moderator with a reported content event. Permissible actions include content edits, user suspensions, deletions, or escalation to higher authority, captured in compliance with policy and audit requirements.\n\nOnly users with 'admin' or 'moderator' roles may create moderation actions, which are tracked for legal accountability and transparency. The response returns the newly created moderation action with all relationships and audit fields, including automatic logging for further traceability.","summary":"Create a new moderation action event (discussion_board_moderation_actions)","parameters":[],"requestBody":{"description":"All creation info for a moderation action including actor, report, action type.","typeName":"IDiscussionBoardModerationAction.ICreate"},"responseBody":{"description":"Created moderation action record including all properties.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"admin"},{"specification":"This operation enables authorized users (admins or moderators) to record a new moderation action associated with a content report in the `discussion_board_moderation_actions` table. Actions can include edits, suspensions, deletions, dismissals, or escalations. All required relationships—such as actor, report ID, action type, and rationale—are supplied in the payload. The operation creates a new entry with full audit and compliance traceability for moderation workflows.","path":"/discussionBoard/moderator/moderationActions","method":"post","description":"Create a moderation action record in the `discussion_board_moderation_actions` table, associating an admin or moderator with a reported content event. Permissible actions include content edits, user suspensions, deletions, or escalation to higher authority, captured in compliance with policy and audit requirements.\n\nOnly users with 'admin' or 'moderator' roles may create moderation actions, which are tracked for legal accountability and transparency. The response returns the newly created moderation action with all relationships and audit fields, including automatic logging for further traceability.","summary":"Create a new moderation action event (discussion_board_moderation_actions)","parameters":[],"requestBody":{"description":"All creation info for a moderation action including actor, report, action type.","typeName":"IDiscussionBoardModerationAction.ICreate"},"responseBody":{"description":"Created moderation action record including all properties.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"moderator"},{"specification":"Update an existing moderation action in the `discussion_board_moderation_actions` table by its unique ID. This operation is used by admins or authorized moderators to correct or amend moderation records for accountability, error correction, or audit history maintenance. Supported changes may include action type, rationale, or descriptive details. All permissible updates must respect immutability of key audit data such as original actor and timestamp.","path":"/discussionBoard/admin/moderationActions/{moderationActionId}","method":"put","description":"Modify an existing moderation action entry by specifying its ID and providing new values for updatable fields (such as action type, rationale, or description). This operation enforces strict audit trails, allowing only admins and moderators to amend action details. Key audit fields like original actor link and creation time remain immutable to preserve history for compliance.\n\nChanges to moderation actions are themselves tracked for transparency and error correction history. Full entity after update is returned for workflow/UX updates.","summary":"Update the details of a moderation action by ID (discussion_board_moderation_actions)","parameters":[{"name":"moderationActionId","description":"Unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information to apply to the moderation action record.","typeName":"IDiscussionBoardModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action record with all properties.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"Update an existing moderation action in the `discussion_board_moderation_actions` table by its unique ID. This operation is used by admins or authorized moderators to correct or amend moderation records for accountability, error correction, or audit history maintenance. Supported changes may include action type, rationale, or descriptive details. All permissible updates must respect immutability of key audit data such as original actor and timestamp.","path":"/discussionBoard/moderator/moderationActions/{moderationActionId}","method":"put","description":"Modify an existing moderation action entry by specifying its ID and providing new values for updatable fields (such as action type, rationale, or description). This operation enforces strict audit trails, allowing only admins and moderators to amend action details. Key audit fields like original actor link and creation time remain immutable to preserve history for compliance.\n\nChanges to moderation actions are themselves tracked for transparency and error correction history. Full entity after update is returned for workflow/UX updates.","summary":"Update the details of a moderation action by ID (discussion_board_moderation_actions)","parameters":[{"name":"moderationActionId","description":"Unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information to apply to the moderation action record.","typeName":"IDiscussionBoardModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action record with all properties.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"This operation deletes (hard delete) a moderation action record by its unique ID from the `discussion_board_moderation_actions` table. Primarily intended for administrative error correction, regulatory compliance, or system cleanup. Since there is no soft deletion field, the operation conducts a hard delete—removing the record permanently. Use with caution, as audit traceability may be affected if data is permanently removed.","path":"/discussionBoard/admin/moderationActions/{moderationActionId}","method":"delete","description":"Delete a specific moderation action from the `discussion_board_moderation_actions` entity using its unique ID. As the table does not include a 'deleted_at' soft deletion field, deletion is permanent and cannot be reversed. This operation is mainly for system maintenance, administrative error correction, or regulatory directives that require complete removal of audit entries.\n\nOnly admins (or users with elevated moderation permissions) should perform this operation, and the system must ensure appropriate access and warning to prevent unintentional loss of traceability or audit data.","summary":"Delete (hard) a moderation action permanently by ID (discussion_board_moderation_actions)","parameters":[{"name":"moderationActionId","description":"Target moderation action's unique ID for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a list of all recorded appeals related to moderation actions within the discussion board. The endpoint returns the entries of the `discussion_board_appeals` table, each referencing an appealed action (by ID), the actor (admin/moderator/member/guest) making the appeal, their rationale, appeal status, and audit timestamps. This endpoint is essential for moderation workflow review, regulatory reporting, and appeals queue management.","path":"/discussionBoard/admin/appeals","method":"get","description":"List all moderation action appeals currently recorded within the `discussion_board_appeals` table. Each result includes details such as action being appealed, appellant (actor info), the provided reason, status (pending/approved/denied), submitted/resolved time, and all normalized references.\n\nAccess to this endpoint is restricted to users with 'admin' or 'moderator' roles. It supports policy review, appeals queue management, and comprehensive legal/compliance audits in accordance with the requirements.\n\nAppeals may be related to any actor type (admin, moderator, member, guest), and responses should fully resolve entity relationships where feasible.","summary":"List all moderation action appeals (discussion_board_appeals)","parameters":[],"requestBody":null,"responseBody":{"description":"Array of all current appeal records and their relationships.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin"},{"specification":"Retrieve a list of all recorded appeals related to moderation actions within the discussion board. The endpoint returns the entries of the `discussion_board_appeals` table, each referencing an appealed action (by ID), the actor (admin/moderator/member/guest) making the appeal, their rationale, appeal status, and audit timestamps. This endpoint is essential for moderation workflow review, regulatory reporting, and appeals queue management.","path":"/discussionBoard/moderator/appeals","method":"get","description":"List all moderation action appeals currently recorded within the `discussion_board_appeals` table. Each result includes details such as action being appealed, appellant (actor info), the provided reason, status (pending/approved/denied), submitted/resolved time, and all normalized references.\n\nAccess to this endpoint is restricted to users with 'admin' or 'moderator' roles. It supports policy review, appeals queue management, and comprehensive legal/compliance audits in accordance with the requirements.\n\nAppeals may be related to any actor type (admin, moderator, member, guest), and responses should fully resolve entity relationships where feasible.","summary":"List all moderation action appeals (discussion_board_appeals)","parameters":[],"requestBody":null,"responseBody":{"description":"Array of all current appeal records and their relationships.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator"},{"specification":"Query the `discussion_board_appeals` table for appeals based on advanced filter criteria: such as appellant (actor), status (pending/approved/denied), or date range. Paginated and filterable by all fields, the PATCH operation supports compliance needs for large-scale systems—allowing admins/moderators to monitor, analyze, and manage appeal queues and lifecycles.","path":"/discussionBoard/admin/appeals","method":"patch","description":"Perform advanced search for moderation action appeals in the `discussion_board_appeals` entity by specifying filters (actor, status, date, rationale, etc.) and pagination needs. Idle for admins or moderators managing high-appeal systems, regulatory audits, or analytics.\n\nResponse is a paginated list of appeals and their detailed relationships, enabling efficient workflow management, bulk review, escalation, and reporting. All query criteria must strictly reference fields present in the schema.","summary":"Search and paginate appeals by all criteria (discussion_board_appeals)","parameters":[],"requestBody":{"description":"Filtering conditions and pagination info for advanced appeal search.","typeName":"IDiscussionBoardAppeal.IRequest"},"responseBody":{"description":"Paginated, filtered appeal records with full details.","typeName":"IPageIDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"Query the `discussion_board_appeals` table for appeals based on advanced filter criteria: such as appellant (actor), status (pending/approved/denied), or date range. Paginated and filterable by all fields, the PATCH operation supports compliance needs for large-scale systems—allowing admins/moderators to monitor, analyze, and manage appeal queues and lifecycles.","path":"/discussionBoard/moderator/appeals","method":"patch","description":"Perform advanced search for moderation action appeals in the `discussion_board_appeals` entity by specifying filters (actor, status, date, rationale, etc.) and pagination needs. Idle for admins or moderators managing high-appeal systems, regulatory audits, or analytics.\n\nResponse is a paginated list of appeals and their detailed relationships, enabling efficient workflow management, bulk review, escalation, and reporting. All query criteria must strictly reference fields present in the schema.","summary":"Search and paginate appeals by all criteria (discussion_board_appeals)","parameters":[],"requestBody":{"description":"Filtering conditions and pagination info for advanced appeal search.","typeName":"IDiscussionBoardAppeal.IRequest"},"responseBody":{"description":"Paginated, filtered appeal records with full details.","typeName":"IPageIDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"Fetch detailed contents of a single moderation appeal from the `discussion_board_appeals` table, identified by its unique appeal ID. Results include all relationships: the underlying moderation action, appellant (any role), the original rationale, status of the appeal, submitted and resolved timestamps. Designed for review, workflow handling, or compliance documentation.","path":"/discussionBoard/admin/appeals/{appealId}","method":"get","description":"Get all the details for a specific appeal on a moderation action, using the unique `appealId` to identify the record from `discussion_board_appeals`. The result includes: action reference, appellant details, stated reason, status, and audit trail information (created/resolved times).\n\nAdmins and moderators use this endpoint for workflow investigation, regulatory compliance, or to prepare responses for escalated appeals or legal export. Relationships with moderation actions and actors are fully included for cross-entity traceability.","summary":"Get detailed data for a single moderation appeal by ID (discussion_board_appeals)","parameters":[{"name":"appealId","description":"The unique identifier of the appeal to get details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified appeal with all direct relationships.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"Fetch detailed contents of a single moderation appeal from the `discussion_board_appeals` table, identified by its unique appeal ID. Results include all relationships: the underlying moderation action, appellant (any role), the original rationale, status of the appeal, submitted and resolved timestamps. Designed for review, workflow handling, or compliance documentation.","path":"/discussionBoard/moderator/appeals/{appealId}","method":"get","description":"Get all the details for a specific appeal on a moderation action, using the unique `appealId` to identify the record from `discussion_board_appeals`. The result includes: action reference, appellant details, stated reason, status, and audit trail information (created/resolved times).\n\nAdmins and moderators use this endpoint for workflow investigation, regulatory compliance, or to prepare responses for escalated appeals or legal export. Relationships with moderation actions and actors are fully included for cross-entity traceability.","summary":"Get detailed data for a single moderation appeal by ID (discussion_board_appeals)","parameters":[{"name":"appealId","description":"The unique identifier of the appeal to get details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified appeal with all direct relationships.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"Admins, moderators, members, or guests (subject to RBAC checks) may submit a new moderation action appeal, providing an action ID, actor (who is appealing), rationale, and initial status. This POST operation creates a new appeal entry in the `discussion_board_appeals` table, with full relationships and audit trail for future review by authorized roles. Permission enforcement must confirm the appellant's rights to submit for the referenced action, based on schema and business rules.","path":"/discussionBoard/admin/appeals","method":"post","description":"File a new moderation action appeal entry, linking an actor (admin/moderator/member/guest) and a specific moderation action within the `discussion_board_appeals` table. Submission includes the action id, appellant's id and role type, reason, and initial status (nullable or default to pending). The request conforms to RBAC and permission requirements in the system.\n\nThe created appeal is audit-logged and added to the workflow queue for review by higher authorities or designated moderators/admins. Response includes all key relationships and audit fields for immediate operational and compliance use.","summary":"Submit a new appeal on moderation action (discussion_board_appeals)","parameters":[],"requestBody":{"description":"All required and optional fields for appeal creation, including actor, reason, and action reference.","typeName":"IDiscussionBoardAppeal.ICreate"},"responseBody":{"description":"The created appeal record including all relational detail.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator","member","guest"],"name":"create","authorizationRole":"admin"},{"specification":"Admins, moderators, members, or guests (subject to RBAC checks) may submit a new moderation action appeal, providing an action ID, actor (who is appealing), rationale, and initial status. This POST operation creates a new appeal entry in the `discussion_board_appeals` table, with full relationships and audit trail for future review by authorized roles. Permission enforcement must confirm the appellant's rights to submit for the referenced action, based on schema and business rules.","path":"/discussionBoard/moderator/appeals","method":"post","description":"File a new moderation action appeal entry, linking an actor (admin/moderator/member/guest) and a specific moderation action within the `discussion_board_appeals` table. Submission includes the action id, appellant's id and role type, reason, and initial status (nullable or default to pending). The request conforms to RBAC and permission requirements in the system.\n\nThe created appeal is audit-logged and added to the workflow queue for review by higher authorities or designated moderators/admins. Response includes all key relationships and audit fields for immediate operational and compliance use.","summary":"Submit a new appeal on moderation action (discussion_board_appeals)","parameters":[],"requestBody":{"description":"All required and optional fields for appeal creation, including actor, reason, and action reference.","typeName":"IDiscussionBoardAppeal.ICreate"},"responseBody":{"description":"The created appeal record including all relational detail.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator","member","guest"],"name":"create","authorizationRole":"moderator"},{"specification":"Admins, moderators, members, or guests (subject to RBAC checks) may submit a new moderation action appeal, providing an action ID, actor (who is appealing), rationale, and initial status. This POST operation creates a new appeal entry in the `discussion_board_appeals` table, with full relationships and audit trail for future review by authorized roles. Permission enforcement must confirm the appellant's rights to submit for the referenced action, based on schema and business rules.","path":"/discussionBoard/member/appeals","method":"post","description":"File a new moderation action appeal entry, linking an actor (admin/moderator/member/guest) and a specific moderation action within the `discussion_board_appeals` table. Submission includes the action id, appellant's id and role type, reason, and initial status (nullable or default to pending). The request conforms to RBAC and permission requirements in the system.\n\nThe created appeal is audit-logged and added to the workflow queue for review by higher authorities or designated moderators/admins. Response includes all key relationships and audit fields for immediate operational and compliance use.","summary":"Submit a new appeal on moderation action (discussion_board_appeals)","parameters":[],"requestBody":{"description":"All required and optional fields for appeal creation, including actor, reason, and action reference.","typeName":"IDiscussionBoardAppeal.ICreate"},"responseBody":{"description":"The created appeal record including all relational detail.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator","member","guest"],"name":"create","authorizationRole":"member"},{"specification":"Admins, moderators, members, or guests (subject to RBAC checks) may submit a new moderation action appeal, providing an action ID, actor (who is appealing), rationale, and initial status. This POST operation creates a new appeal entry in the `discussion_board_appeals` table, with full relationships and audit trail for future review by authorized roles. Permission enforcement must confirm the appellant's rights to submit for the referenced action, based on schema and business rules.","path":"/discussionBoard/guest/appeals","method":"post","description":"File a new moderation action appeal entry, linking an actor (admin/moderator/member/guest) and a specific moderation action within the `discussion_board_appeals` table. Submission includes the action id, appellant's id and role type, reason, and initial status (nullable or default to pending). The request conforms to RBAC and permission requirements in the system.\n\nThe created appeal is audit-logged and added to the workflow queue for review by higher authorities or designated moderators/admins. Response includes all key relationships and audit fields for immediate operational and compliance use.","summary":"Submit a new appeal on moderation action (discussion_board_appeals)","parameters":[],"requestBody":{"description":"All required and optional fields for appeal creation, including actor, reason, and action reference.","typeName":"IDiscussionBoardAppeal.ICreate"},"responseBody":{"description":"The created appeal record including all relational detail.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator","member","guest"],"name":"create","authorizationRole":"guest"},{"specification":"Update an existing moderation appeal in the `discussion_board_appeals` table by its unique ID. Only certain fields—such as status (pending/approved/denied) or rationale—may be changed; creation details and original actor are immutable. The PUT operation is restricted to authorized admin/moderator actors for workflow control and auditability. Every update is audit-logged, and the updated complete entity is returned.","path":"/discussionBoard/admin/appeals/{appealId}","method":"put","description":"Amend an existing moderation action appeal by providing a new value for updatable fields (such as status, rationale) while referencing it by unique `appealId`. Only authorized admin or moderator actors may change appeal status. Creation-time provenance, action ids, and actor ids are immutable after submission for audit integrity.\n\nAll updates are traceable, audit-logged, and returned in the updated appeal entity, maintaining full compliance and business logic traceability as enforced by moderate system policy.","summary":"Update appeal details/status by ID (discussion_board_appeals)","parameters":[{"name":"appealId","description":"The unique identifier of the moderation appeal to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the existing appeal record (status, rationale).","typeName":"IDiscussionBoardAppeal.IUpdate"},"responseBody":{"description":"Full appeal entity after update with all tracked properties.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"Update an existing moderation appeal in the `discussion_board_appeals` table by its unique ID. Only certain fields—such as status (pending/approved/denied) or rationale—may be changed; creation details and original actor are immutable. The PUT operation is restricted to authorized admin/moderator actors for workflow control and auditability. Every update is audit-logged, and the updated complete entity is returned.","path":"/discussionBoard/moderator/appeals/{appealId}","method":"put","description":"Amend an existing moderation action appeal by providing a new value for updatable fields (such as status, rationale) while referencing it by unique `appealId`. Only authorized admin or moderator actors may change appeal status. Creation-time provenance, action ids, and actor ids are immutable after submission for audit integrity.\n\nAll updates are traceable, audit-logged, and returned in the updated appeal entity, maintaining full compliance and business logic traceability as enforced by moderate system policy.","summary":"Update appeal details/status by ID (discussion_board_appeals)","parameters":[{"name":"appealId","description":"The unique identifier of the moderation appeal to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the existing appeal record (status, rationale).","typeName":"IDiscussionBoardAppeal.IUpdate"},"responseBody":{"description":"Full appeal entity after update with all tracked properties.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"Delete (hard delete) an appeal by its unique identifier from the `discussion_board_appeals` table. This operation is only available to admins and performs permanent removal because the appeal table does not provide a soft deletion field. Used for regulatory error correction, cleanup, or upon conclusion of audit cycles where appeals are no longer required. WARNING: This is irreversible and should only be executed with extreme caution, ideally after review of regulatory and operational compliance needs.","path":"/discussionBoard/admin/appeals/{appealId}","method":"delete","description":"Permanently remove a moderation appeal from the `discussion_board_appeals` table, referenced via unique `appealId`. This operation is non-reversible and thus reserved solely for admins with appropriate compliance mandates.\n\nAs there is no soft delete (`deleted_at`) field in this table, deletion completely removes all trace of the appeal entry. This endpoint should be used judiciously to ensure regulatory and business transparency requirements are met prior to operation.","summary":"Hard-delete a moderation appeal by ID (discussion_board_appeals)","parameters":[{"name":"appealId","description":"Unique ID of the appeal entity to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of all suspensions and bans recorded in the discussion_board_suspensions table. This operation serves compliance and moderation review requirements by providing auditable, filterable access to current and historical suspension events, including admin, moderator, member, or guest subjects. It queries atomic suspension records with dates, status, rationale, and related report/action linkages, leveraging Prisma schema normalization for traceability. Pagination and sorting parameters may be supported to handle high audit volumes. Callers should also be able to filter by status, suspended user, or suspension dates.","path":"/discussionBoard/admin/suspensions","method":"get","description":"This operation allows authorized moderation users to list all suspensions and bans registered in the system, fulfilling both regulatory and business requirements for transparency and auditability. Each returned record includes all atomic details outlined in the Prisma 'discussion_board_suspensions' model: subject (admin/moderator/member/guest), actor (admin/moderator), start/end times, status, and reason, as well as any related abuse report or moderation action identifiers for compliance review.\n\nThe endpoint is intended for use in moderation dashboards, audit workflows, and compliance reporting. Data returned includes all core fields specified in the database schema, ensuring integrity and avoiding derived/calculated aggregates. Filtering and pagination are built on top of indexed columns for scalability.\n\nSecurity considerations: This API requires robust authorization since suspension records may contain sensitive data or policy-justification details. Typically accessible only to roles with explicit moderation authority (admin/moderator).\n\nThe operation is directly related to create/erase/update endpoints for suspensions, and typically paired with GET-by-id for detailed review. Error handling includes enforcement of authorization and validation on query parameters.","summary":"Retrieve paginated list of all suspensions (discussion_board_suspensions table)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of suspensions and bans, each as a detailed IDiscussionBoardSuspension entity for compliance/review workflows.","typeName":"IPageIDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"admin"},{"specification":"Retrieves a paginated list of all suspensions and bans recorded in the discussion_board_suspensions table. This operation serves compliance and moderation review requirements by providing auditable, filterable access to current and historical suspension events, including admin, moderator, member, or guest subjects. It queries atomic suspension records with dates, status, rationale, and related report/action linkages, leveraging Prisma schema normalization for traceability. Pagination and sorting parameters may be supported to handle high audit volumes. Callers should also be able to filter by status, suspended user, or suspension dates.","path":"/discussionBoard/moderator/suspensions","method":"get","description":"This operation allows authorized moderation users to list all suspensions and bans registered in the system, fulfilling both regulatory and business requirements for transparency and auditability. Each returned record includes all atomic details outlined in the Prisma 'discussion_board_suspensions' model: subject (admin/moderator/member/guest), actor (admin/moderator), start/end times, status, and reason, as well as any related abuse report or moderation action identifiers for compliance review.\n\nThe endpoint is intended for use in moderation dashboards, audit workflows, and compliance reporting. Data returned includes all core fields specified in the database schema, ensuring integrity and avoiding derived/calculated aggregates. Filtering and pagination are built on top of indexed columns for scalability.\n\nSecurity considerations: This API requires robust authorization since suspension records may contain sensitive data or policy-justification details. Typically accessible only to roles with explicit moderation authority (admin/moderator).\n\nThe operation is directly related to create/erase/update endpoints for suspensions, and typically paired with GET-by-id for detailed review. Error handling includes enforcement of authorization and validation on query parameters.","summary":"Retrieve paginated list of all suspensions (discussion_board_suspensions table)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of suspensions and bans, each as a detailed IDiscussionBoardSuspension entity for compliance/review workflows.","typeName":"IPageIDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"index","authorizationRole":"moderator"},{"specification":"Enables advanced search, filtering, and pagination over suspensions and bans using complex query structures. This leverages the discussion_board_suspensions Prisma entity and supports use cases requiring lookup by date, subject, actor, status, and relationships to abuse reports or moderation actions. This PATCH method may be used by large-scale audits or dashboards to retrieve targeted subsets of suspension records matching specific compliance or moderation review criteria. Supports multi-column, indexed search as per business, legal, or operational requirements.","path":"/discussionBoard/admin/suspensions","method":"patch","description":"This operation meets advanced review and oversight needs for suspensions by supporting complex queries on the discussion_board_suspensions model. It provides moderators and admins with filter and pagination options such as date range, status, specific user/subject, or related moderation actions, leveraging indexed columns for scalability.\n\nThis endpoint builds on the normalized data model to ensure atomic information is retrieved, supporting role-based access while providing critical detail for oversight, compliance, and audit situations. It may return information for admins, moderators, members, or guest subjects, including rationale and linkage to related events.\n\nSecurity is paramount, as these records may reflect policy or legal actions. Only authorized users can access this data. This operation is typically used in business dashboards or compliance tools, and is related to create, update, erase, and GET-by-id suspension endpoints.","summary":"Search/filter paginated suspension records using advanced query (discussion_board_suspensions)","parameters":[],"requestBody":{"description":"Complex search/filter criteria including status, actor, subject, time range, and pagination details for suspensions.","typeName":"IDiscussionBoardSuspension.IRequest"},"responseBody":{"description":"Paginated filtered results for suspensions, each a IDiscussionBoardSuspension entity.","typeName":"IPageIDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"admin"},{"specification":"Enables advanced search, filtering, and pagination over suspensions and bans using complex query structures. This leverages the discussion_board_suspensions Prisma entity and supports use cases requiring lookup by date, subject, actor, status, and relationships to abuse reports or moderation actions. This PATCH method may be used by large-scale audits or dashboards to retrieve targeted subsets of suspension records matching specific compliance or moderation review criteria. Supports multi-column, indexed search as per business, legal, or operational requirements.","path":"/discussionBoard/moderator/suspensions","method":"patch","description":"This operation meets advanced review and oversight needs for suspensions by supporting complex queries on the discussion_board_suspensions model. It provides moderators and admins with filter and pagination options such as date range, status, specific user/subject, or related moderation actions, leveraging indexed columns for scalability.\n\nThis endpoint builds on the normalized data model to ensure atomic information is retrieved, supporting role-based access while providing critical detail for oversight, compliance, and audit situations. It may return information for admins, moderators, members, or guest subjects, including rationale and linkage to related events.\n\nSecurity is paramount, as these records may reflect policy or legal actions. Only authorized users can access this data. This operation is typically used in business dashboards or compliance tools, and is related to create, update, erase, and GET-by-id suspension endpoints.","summary":"Search/filter paginated suspension records using advanced query (discussion_board_suspensions)","parameters":[],"requestBody":{"description":"Complex search/filter criteria including status, actor, subject, time range, and pagination details for suspensions.","typeName":"IDiscussionBoardSuspension.IRequest"},"responseBody":{"description":"Paginated filtered results for suspensions, each a IDiscussionBoardSuspension entity.","typeName":"IPageIDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"search","authorizationRole":"moderator"},{"specification":"Retrieves the complete suspension or ban record by unique id from the discussion_board_suspensions table. This operation enables deep review of a specific suspension event, including all normalized atomic fields such as status, actor/subject, rationale, and linkage to related moderation actions or reports. Supports use cases for compliance, appeal review, or forensics. The unique suspensionId is a UUID, required for exact lookup of record as per Prisma schema.","path":"/discussionBoard/admin/suspensions/{suspensionId}","method":"get","description":"Fetches the full details of a specific suspension or ban given its unique id (UUID), as modeled in the discussion_board_suspensions table. Returns atomic details including suspended user, imposing actor, start/end time, reason, status, and any linked report or moderation record, following strict normalization for auditability.\n\nPrimarily intended for review workflows, escalation handling, or compliance reporting by admin or moderation staff. Invalid ids or unauthorized access attempts return errors as appropriate.\n\nClosely related to the list, create, update, and erase suspension operations; used in drilldown UIs or appeal adjudication. Enforces permission checks and input validation per RBAC and schema requirements.","summary":"Get full details for a specific suspension (by id, discussion_board_suspensions)","parameters":[{"name":"suspensionId","description":"The unique identifier for the suspension or ban record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete suspension record for this id, from discussion_board_suspensions.","typeName":"IDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieves the complete suspension or ban record by unique id from the discussion_board_suspensions table. This operation enables deep review of a specific suspension event, including all normalized atomic fields such as status, actor/subject, rationale, and linkage to related moderation actions or reports. Supports use cases for compliance, appeal review, or forensics. The unique suspensionId is a UUID, required for exact lookup of record as per Prisma schema.","path":"/discussionBoard/moderator/suspensions/{suspensionId}","method":"get","description":"Fetches the full details of a specific suspension or ban given its unique id (UUID), as modeled in the discussion_board_suspensions table. Returns atomic details including suspended user, imposing actor, start/end time, reason, status, and any linked report or moderation record, following strict normalization for auditability.\n\nPrimarily intended for review workflows, escalation handling, or compliance reporting by admin or moderation staff. Invalid ids or unauthorized access attempts return errors as appropriate.\n\nClosely related to the list, create, update, and erase suspension operations; used in drilldown UIs or appeal adjudication. Enforces permission checks and input validation per RBAC and schema requirements.","summary":"Get full details for a specific suspension (by id, discussion_board_suspensions)","parameters":[{"name":"suspensionId","description":"The unique identifier for the suspension or ban record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete suspension record for this id, from discussion_board_suspensions.","typeName":"IDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"at","authorizationRole":"moderator"},{"specification":"Creates a new suspension or ban record in the discussion_board_suspensions table. Operation supports all required business/audit fields including subject (admin/moderator/member/guest), actor, reason, times, status, and any report/action linkage. This operation is invoked by admins or moderators when enforcing policy through user suspension or banning, and supports traceability, auditability, and compliance features as required by the schema.","path":"/discussionBoard/admin/suspensions","method":"post","description":"This operation is used to impose a new suspension or ban, fulfilling both business logic (discipline, compliance) and technical requirements for auditability. Payload must include all atomic details as per Prisma model: subject (actor being suspended/banned), actor (admin/moderator imposing), start time, reason, and any optional linkage to abuse reports or moderation actions.\n\nOn successful creation, the complete suspension record is returned, ensuring that immediate audit and notification requirements can be met. Security requirements are enforced: Only administrators or moderators can create suspensions/ban records; invalid or incomplete bodies are rejected. Soft-deletion or update of suspensions is handled by other endpoints.\n\nRelated operations include update, GET-by-id/detail, and erase endpoints. error management covers permission, field validation, and duplicate-checking.","summary":"Create a new suspension or ban record (discussion_board_suspensions)","parameters":[],"requestBody":{"description":"All fields required to create a new suspension/ban (subject, actor, reason, time, status, etc.) as defined in the schema.","typeName":"IDiscussionBoardSuspension.ICreate"},"responseBody":{"description":"Full record of the imposed suspension/ban, as created in discussion_board_suspensions.","typeName":"IDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"admin"},{"specification":"Creates a new suspension or ban record in the discussion_board_suspensions table. Operation supports all required business/audit fields including subject (admin/moderator/member/guest), actor, reason, times, status, and any report/action linkage. This operation is invoked by admins or moderators when enforcing policy through user suspension or banning, and supports traceability, auditability, and compliance features as required by the schema.","path":"/discussionBoard/moderator/suspensions","method":"post","description":"This operation is used to impose a new suspension or ban, fulfilling both business logic (discipline, compliance) and technical requirements for auditability. Payload must include all atomic details as per Prisma model: subject (actor being suspended/banned), actor (admin/moderator imposing), start time, reason, and any optional linkage to abuse reports or moderation actions.\n\nOn successful creation, the complete suspension record is returned, ensuring that immediate audit and notification requirements can be met. Security requirements are enforced: Only administrators or moderators can create suspensions/ban records; invalid or incomplete bodies are rejected. Soft-deletion or update of suspensions is handled by other endpoints.\n\nRelated operations include update, GET-by-id/detail, and erase endpoints. error management covers permission, field validation, and duplicate-checking.","summary":"Create a new suspension or ban record (discussion_board_suspensions)","parameters":[],"requestBody":{"description":"All fields required to create a new suspension/ban (subject, actor, reason, time, status, etc.) as defined in the schema.","typeName":"IDiscussionBoardSuspension.ICreate"},"responseBody":{"description":"Full record of the imposed suspension/ban, as created in discussion_board_suspensions.","typeName":"IDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"moderator"},{"specification":"Updates an existing suspension or ban in the discussion_board_suspensions table by id. Supports modification of mutable fields including status, rationale, end time, or related policy references. Used for compliance review, appeal adjudication, or status transition (e.g., from active to revoked). The operation requires the unique UUID id for lookup and applies updates atomically to normalized columns as per Prisma schema. Returns the updated record for confirmation/audit.","path":"/discussionBoard/admin/suspensions/{suspensionId}","method":"put","description":"This operation allows authorized actors (admin/moderator) to update suspension/ban records, supporting changes to status (e.g. active/expired/revoked), rationale, or duration. It uses the id from the path parameter for atomic lookup as per strictly normalized schema.\n\nValidation ensures only mutable fields are changed, and audit rules are maintained. Operation returns the latest updated state, meeting compliance and legal requirements for traceability. Only actors with explicit moderation permissions may use this endpoint, and all updates are audit-tracked for review.\n\nIntended for use in appeal workflows, compliance review, or moderator override scenarios. Errors returned for invalid ids, unauthorized actions, or invalid field updates.","summary":"Update an existing suspension/ban (by id, discussion_board_suspensions)","parameters":[{"name":"suspensionId","description":"Unique identifier for the suspension/ban record to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the suspension/ban (e.g., status, end time, rationale), per schema.","typeName":"IDiscussionBoardSuspension.IUpdate"},"responseBody":{"description":"Updated complete suspension/ban record from the database.","typeName":"IDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"admin"},{"specification":"Updates an existing suspension or ban in the discussion_board_suspensions table by id. Supports modification of mutable fields including status, rationale, end time, or related policy references. Used for compliance review, appeal adjudication, or status transition (e.g., from active to revoked). The operation requires the unique UUID id for lookup and applies updates atomically to normalized columns as per Prisma schema. Returns the updated record for confirmation/audit.","path":"/discussionBoard/moderator/suspensions/{suspensionId}","method":"put","description":"This operation allows authorized actors (admin/moderator) to update suspension/ban records, supporting changes to status (e.g. active/expired/revoked), rationale, or duration. It uses the id from the path parameter for atomic lookup as per strictly normalized schema.\n\nValidation ensures only mutable fields are changed, and audit rules are maintained. Operation returns the latest updated state, meeting compliance and legal requirements for traceability. Only actors with explicit moderation permissions may use this endpoint, and all updates are audit-tracked for review.\n\nIntended for use in appeal workflows, compliance review, or moderator override scenarios. Errors returned for invalid ids, unauthorized actions, or invalid field updates.","summary":"Update an existing suspension/ban (by id, discussion_board_suspensions)","parameters":[{"name":"suspensionId","description":"Unique identifier for the suspension/ban record to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the suspension/ban (e.g., status, end time, rationale), per schema.","typeName":"IDiscussionBoardSuspension.IUpdate"},"responseBody":{"description":"Updated complete suspension/ban record from the database.","typeName":"IDiscussionBoardSuspension"},"authorizationRoles":["admin","moderator"],"name":"update","authorizationRole":"moderator"},{"specification":"Deletes (revokes) a suspension/ban record from discussion_board_suspensions by id. Because the schema does not support hard delete (no deleted_at), this operation is a hard deletion. Used for compliance rectification or mistaken bans; generally permitted only for admins, or for privileged moderators in limited circumstances. Requires the suspensionId as a UUID for atomic query and removal from the database, and enforces robust permission validation steps.","path":"/discussionBoard/admin/suspensions/{suspensionId}","method":"delete","description":"This operation deletes (removes) a suspension or ban record from the system, given its unique id. In the discussion_board_suspensions schema, there is no deleted_at or soft-delete field, so this is a hard-delete operation: the record is completely removed. This operation should be permitted only to elevated roles (admin, and perhaps privileged moderators).\n\nRelated audit log and notification updates should be triggered outside this API. Used in cancellation of erroneous bans or compliance data rectification.\n\nReturns no response body. Error conditions include not found, unauthorized, or forbidden by business logic. This endpoint is essential for compliance edge cases and policy adjustment workflows.","summary":"Delete (hard-revoke) a suspension/ban record (by id, discussion_board_suspensions)","parameters":[{"name":"suspensionId","description":"Unique identifier for the suspension/ban to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Returns a paginated list of all audit log entries from the discussion_board_audit_logs table for regulatory, compliance, and forensic review. Supports filterable, chronological access to moderation actions covering all actors and content domains. Enables admins, moderators, and compliance officers to discover and review all moderator events, privilege escalation, appeal outcomes, and more, with complete traceability as required by the Prisma entity.","path":"/discussionBoard/admin/auditLogs","method":"get","description":"Retrieves all audit log entries, each recording a unique moderation domain event/action, according to the atomic fields in the discussion_board_audit_logs schema. Data returned supports audit, reporting, and compliance investigations—each entity includes references to the action, actor, type, and event timestamp for full traceability.\n\nEndpoint supports pagination and (optionally) sorting via query parameters to handle high-volume logs efficiently. All data is sourced from atomic columns and strictly normalized via relations. Typically accessible only to admins or moderators with oversight permissions.\n\nRelates to creation, update, and detailed lookup endpoints for single audit logs. Security enforced as logs contain sensitive moderation and access history.","summary":"List paginated audit log entries (discussion_board_audit_logs table)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of audit logs, each an IDiscussionBoardAuditLog entity, with linkages to moderation actions and actors for compliance review.","typeName":"IPageIDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Allows advanced filtering, searching, and pagination of audit log entries using multiple indexed fields for oversight, compliance review, and investigation. This operation leverages the discussion_board_audit_logs Prisma entity, supporting queries by actor, action type, date range, and related moderation or appeal events. Large-scale forensic or legal review applications benefit from this PATCH/complex-query operation.","path":"/discussionBoard/admin/auditLogs","method":"patch","description":"This endpoint provides advanced audit log discovery based on indexed query fields such as action type, actor (admin/moderator/member/guest), time range, and moderation action linkage. Data is retrieved from discussion_board_audit_logs as normalized, atomic records, supporting complex compliance/workflow needs.\n\nPrimarily intended for use by compliance, legal, or security teams, allowing large-scale, fine-grained investigation of system activity. Returns results in a paginated format suitable for UI or export.\n\nRequires elevated access (admin); relates to GET-by-id, create, update, and delete operations. Rejects unauthorized queries or invalid search filters.","summary":"Advanced search on audit logs (discussion_board_audit_logs, patch/complex)","parameters":[],"requestBody":{"description":"Advanced search and filtering criteria for audit logs including actor, action type, timestamp range, and pagination.","typeName":"IDiscussionBoardAuditLog.IRequest"},"responseBody":{"description":"Paginated filtered results of audit log events for compliance, each as IDiscussionBoardAuditLog entities.","typeName":"IPageIDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetches a single audit log entry by its unique id from the discussion_board_audit_logs table, providing complete detail for a specific moderation or compliance event. Returns all atomic fields for this entry, supporting drilldown and forensic analysis as well as appeal review/workflow integration. Used in compliance dashboards or investigation UIs.","path":"/discussionBoard/admin/auditLogs/{auditLogId}","method":"get","description":"Returns a fully detailed audit log event/entity by its unique id (UUID), leveraging atomic, non-derived structure as represented in the discussion_board_audit_logs model. Includes action, actor, action_type, timestamp, and optional context as per normalized schema for compliance or escalation review.\n\nEnables granular event review, escalation workflows, or detailed legal forensics. Unauthorized access results in standard error responses. This endpoint complements the list and search audit log operations, and is used in drilldown compliance UIs and incident review reports.\n\nSecurity: Access is restricted to users with audit or compliance privileges.","summary":"Get single audit log entry by id (discussion_board_audit_logs)","parameters":[{"name":"auditLogId","description":"Unique identifier for the audit log entry (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Entity giving full details of this audit event, as IDiscussionBoardAuditLog.","typeName":"IDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new audit log entry in the discussion_board_audit_logs table, recording an explicit, detailed moderation or system event for compliance, traceability, or legal/review purposes. This operation enforces immutable, atomic creation of each log entry with required linkage to moderation actions, actors, and all required fields as per schema. Used in moderation actions, appeal decisions, or system events requiring audit trail.","path":"/discussionBoard/admin/auditLogs","method":"post","description":"Records a new audit log entry, as required for system transparency, legal compliance, and moderation oversight. The operation persists all required atomic fields based on the discussion_board_audit_logs model: action reference, actor, action_type, timestamp, and optional context. Audit log entries are immutable after creation, ensuring forensic traceability.\n\nUsually executed by system or moderation logic in response to moderation, appeal, or escalation events. This API is typically accessible only to admins or backend services with appropriate permissions. Related endpoints allow query and drilldown of audit log events.\n\nSecurity: Payload must be validated for referenced moderation action and actor role; field errors or business rule violations cause rejection.","summary":"Create new audit log entry (discussion_board_audit_logs, immutable)","parameters":[],"requestBody":{"description":"All required and optional fields for a new audit log event as per schema (action, actor, type, context, timestamps).","typeName":"IDiscussionBoardAuditLog.ICreate"},"responseBody":{"description":"Details of the newly created audit log entry, as IDiscussionBoardAuditLog.","typeName":"IDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Allows authorized actors to update mutable fields for an audit log event by id, if allowed by compliance/business rules (e.g., correcting context or assigning missing actor reference). Uses UUID id for lookup and applies atomic updates as per Prisma model. Returns updated entry for verification/audit. In general, audit logs are intended to be immutable, but this operation exists for rare correction scenarios with adequate compliance controls.","path":"/discussionBoard/admin/auditLogs/{auditLogId}","method":"put","description":"Permits modification of a mutable field in an audit log entry, if business logic and compliance rules allow, such as correcting actor linkage or context. Not intended for normal use as audit logs are immutable by design, but may be needed for rare reconciliation or legal rectification scenarios.\n\nOperation requires the audit log id and update details as per schema. Strict permission checks enforced; returns updated log entry for review/confirmation. Used in conjunction with error/inconsistency reconciliation workflows.\n\nSecurity: Only admins with specific audit remedial rights may use this endpoint. Audit of audit-log changes is strongly recommended. Operation rejects unauthorized or invalid updates.","summary":"Update (correct) an audit log entry, if allowed (by id, discussion_board_audit_logs)","parameters":[{"name":"auditLogId","description":"UUID for the audit log entry to update/correct.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for this audit log entry, as per schema/allowed mutation.","typeName":"IDiscussionBoardAuditLog.IUpdate"},"responseBody":{"description":"Most up-to-date audit log record after correction/mutation.","typeName":"IDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes an audit log entry from discussion_board_audit_logs by its UUID id. Due to compliance requirements, hard deletion is normally prohibited; this operation may only be used for legal or irreparable errors and must be strictly controlled. Operation enforces lookup by atomic id and removes record from database, bypassing the normal audit trail for immutability only in exceptional regulatory or business circumstances.","path":"/discussionBoard/admin/auditLogs/{auditLogId}","method":"delete","description":"Removes an audit event from the database by its unique id. In standard compliance regimes this operation should be strictly limited or even disabled; generally only higher-level admins or system process should have such power as deleting audit logs disables normal traceability.\n\nThis endpoint is typically reserved for regulatory/data privacy emergencies or irrecoverable logging errors. It returns no response body; all access/usage must itself be audit-logged externally. Attempts to use this API without sufficient privilege, or to act on non-existent records, result in error returns.","summary":"Delete an audit log event (by id, hard delete, discussion_board_audit_logs)","parameters":[{"name":"auditLogId","description":"UUID for the audit log entry to delete (hard, exceptional case).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This API operation retrieves all discussion board notifications with basic read-access. It works on the discussion_board_notifications table from the Prisma schema, fetching notification objects for the current authenticated user (admin, moderator, member, or guest). The endpoint supports listing all notifications, and is optimized for return of only those notifications relevant to the requester based on recipient type (admin_id, moderator_id, member_id, guest_id). It enforces RBAC for privacy and notification scoping. Pagination and filtering by status (read/unread) or category may be supported in future versions. This is a simple collection retrieval (GET) without request body.","path":"/discussionBoard/admin/notifications","method":"get","description":"Fetch a list of all notifications relevant to the current user (admin, moderator, member, or guest). The operation reads from the discussion_board_notifications table; each notification is scoped to the logged-in user's role and ID by matching to one of admin_id, moderator_id, member_id, or guest_id.\n\nNotifications include post, comment, or moderation event associations for full context. The API ensures users can only access their own notifications, protecting privacy and enforcing least-privilege access. Admins, moderators, or members retrieve only their notifications; guests see just those tied to their guest session. The operation supports standard audit/compliance requirements per the table's purpose.\n\nNo sensitive content is exposed beyond the addressed user, and regular users cannot access admin- or moderator-scoped notifications. Typical errors include missing or invalid authentication, and unexpected permission errors.","summary":"Retrieve all notifications for the current user (admin, moderator, member, or guest) from discussion_board_notifications.","parameters":[],"requestBody":null,"responseBody":{"description":"A list of notification objects relevant to the authenticated user.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"index","authorizationRole":"admin"},{"specification":"This API operation retrieves all discussion board notifications with basic read-access. It works on the discussion_board_notifications table from the Prisma schema, fetching notification objects for the current authenticated user (admin, moderator, member, or guest). The endpoint supports listing all notifications, and is optimized for return of only those notifications relevant to the requester based on recipient type (admin_id, moderator_id, member_id, guest_id). It enforces RBAC for privacy and notification scoping. Pagination and filtering by status (read/unread) or category may be supported in future versions. This is a simple collection retrieval (GET) without request body.","path":"/discussionBoard/moderator/notifications","method":"get","description":"Fetch a list of all notifications relevant to the current user (admin, moderator, member, or guest). The operation reads from the discussion_board_notifications table; each notification is scoped to the logged-in user's role and ID by matching to one of admin_id, moderator_id, member_id, or guest_id.\n\nNotifications include post, comment, or moderation event associations for full context. The API ensures users can only access their own notifications, protecting privacy and enforcing least-privilege access. Admins, moderators, or members retrieve only their notifications; guests see just those tied to their guest session. The operation supports standard audit/compliance requirements per the table's purpose.\n\nNo sensitive content is exposed beyond the addressed user, and regular users cannot access admin- or moderator-scoped notifications. Typical errors include missing or invalid authentication, and unexpected permission errors.","summary":"Retrieve all notifications for the current user (admin, moderator, member, or guest) from discussion_board_notifications.","parameters":[],"requestBody":null,"responseBody":{"description":"A list of notification objects relevant to the authenticated user.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"index","authorizationRole":"moderator"},{"specification":"This API operation retrieves all discussion board notifications with basic read-access. It works on the discussion_board_notifications table from the Prisma schema, fetching notification objects for the current authenticated user (admin, moderator, member, or guest). The endpoint supports listing all notifications, and is optimized for return of only those notifications relevant to the requester based on recipient type (admin_id, moderator_id, member_id, guest_id). It enforces RBAC for privacy and notification scoping. Pagination and filtering by status (read/unread) or category may be supported in future versions. This is a simple collection retrieval (GET) without request body.","path":"/discussionBoard/member/notifications","method":"get","description":"Fetch a list of all notifications relevant to the current user (admin, moderator, member, or guest). The operation reads from the discussion_board_notifications table; each notification is scoped to the logged-in user's role and ID by matching to one of admin_id, moderator_id, member_id, or guest_id.\n\nNotifications include post, comment, or moderation event associations for full context. The API ensures users can only access their own notifications, protecting privacy and enforcing least-privilege access. Admins, moderators, or members retrieve only their notifications; guests see just those tied to their guest session. The operation supports standard audit/compliance requirements per the table's purpose.\n\nNo sensitive content is exposed beyond the addressed user, and regular users cannot access admin- or moderator-scoped notifications. Typical errors include missing or invalid authentication, and unexpected permission errors.","summary":"Retrieve all notifications for the current user (admin, moderator, member, or guest) from discussion_board_notifications.","parameters":[],"requestBody":null,"responseBody":{"description":"A list of notification objects relevant to the authenticated user.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"index","authorizationRole":"member"},{"specification":"This API operation retrieves all discussion board notifications with basic read-access. It works on the discussion_board_notifications table from the Prisma schema, fetching notification objects for the current authenticated user (admin, moderator, member, or guest). The endpoint supports listing all notifications, and is optimized for return of only those notifications relevant to the requester based on recipient type (admin_id, moderator_id, member_id, guest_id). It enforces RBAC for privacy and notification scoping. Pagination and filtering by status (read/unread) or category may be supported in future versions. This is a simple collection retrieval (GET) without request body.","path":"/discussionBoard/guest/notifications","method":"get","description":"Fetch a list of all notifications relevant to the current user (admin, moderator, member, or guest). The operation reads from the discussion_board_notifications table; each notification is scoped to the logged-in user's role and ID by matching to one of admin_id, moderator_id, member_id, or guest_id.\n\nNotifications include post, comment, or moderation event associations for full context. The API ensures users can only access their own notifications, protecting privacy and enforcing least-privilege access. Admins, moderators, or members retrieve only their notifications; guests see just those tied to their guest session. The operation supports standard audit/compliance requirements per the table's purpose.\n\nNo sensitive content is exposed beyond the addressed user, and regular users cannot access admin- or moderator-scoped notifications. Typical errors include missing or invalid authentication, and unexpected permission errors.","summary":"Retrieve all notifications for the current user (admin, moderator, member, or guest) from discussion_board_notifications.","parameters":[],"requestBody":null,"responseBody":{"description":"A list of notification objects relevant to the authenticated user.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"index","authorizationRole":"guest"},{"specification":"This API operation performs advanced search and filtering for the current user's notifications in the discussion_board_notifications table. It allows clients to supply filter, search, sorting, and pagination parameters for more complex notification retrieval. It returns a paginated collection of notification objects that match the given criteria. Designed according to RBAC, only the requesting user's relevant notifications (admin_id, moderator_id, member_id, guest_id) are accessible. The operation supports filtering by notification type, category, status (read/unread), and date ranges.","path":"/discussionBoard/admin/notifications","method":"patch","description":"Search, filter, and paginate notifications for the logged-in user (admin, moderator, member, or guest) using advanced criteria. Reads from discussion_board_notifications while enforcing user-level privacy, only returning notifications where the authenticated user is the recipient.\n\nClients can filter notifications by category, status (read/unread), type (in-app, email, etc.), and creation or delivery timestamps. Pagination and sorting (by recency or delivery state) are included for scalable user inboxes. Only role-authorized users can invoke this operation; notifications linked to other users or roles are inaccessible, and unauthorized access triggers errors. The operation aids usability for notifications-heavy use cases or integrations.","summary":"Search and filter notifications for the current user with advanced parameters.","parameters":[],"requestBody":{"description":"Complex filtering, sorting, and pagination parameters for notification retrieval.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated, filtered list of notifications for the user.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"admin"},{"specification":"This API operation performs advanced search and filtering for the current user's notifications in the discussion_board_notifications table. It allows clients to supply filter, search, sorting, and pagination parameters for more complex notification retrieval. It returns a paginated collection of notification objects that match the given criteria. Designed according to RBAC, only the requesting user's relevant notifications (admin_id, moderator_id, member_id, guest_id) are accessible. The operation supports filtering by notification type, category, status (read/unread), and date ranges.","path":"/discussionBoard/moderator/notifications","method":"patch","description":"Search, filter, and paginate notifications for the logged-in user (admin, moderator, member, or guest) using advanced criteria. Reads from discussion_board_notifications while enforcing user-level privacy, only returning notifications where the authenticated user is the recipient.\n\nClients can filter notifications by category, status (read/unread), type (in-app, email, etc.), and creation or delivery timestamps. Pagination and sorting (by recency or delivery state) are included for scalable user inboxes. Only role-authorized users can invoke this operation; notifications linked to other users or roles are inaccessible, and unauthorized access triggers errors. The operation aids usability for notifications-heavy use cases or integrations.","summary":"Search and filter notifications for the current user with advanced parameters.","parameters":[],"requestBody":{"description":"Complex filtering, sorting, and pagination parameters for notification retrieval.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated, filtered list of notifications for the user.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"moderator"},{"specification":"This API operation performs advanced search and filtering for the current user's notifications in the discussion_board_notifications table. It allows clients to supply filter, search, sorting, and pagination parameters for more complex notification retrieval. It returns a paginated collection of notification objects that match the given criteria. Designed according to RBAC, only the requesting user's relevant notifications (admin_id, moderator_id, member_id, guest_id) are accessible. The operation supports filtering by notification type, category, status (read/unread), and date ranges.","path":"/discussionBoard/member/notifications","method":"patch","description":"Search, filter, and paginate notifications for the logged-in user (admin, moderator, member, or guest) using advanced criteria. Reads from discussion_board_notifications while enforcing user-level privacy, only returning notifications where the authenticated user is the recipient.\n\nClients can filter notifications by category, status (read/unread), type (in-app, email, etc.), and creation or delivery timestamps. Pagination and sorting (by recency or delivery state) are included for scalable user inboxes. Only role-authorized users can invoke this operation; notifications linked to other users or roles are inaccessible, and unauthorized access triggers errors. The operation aids usability for notifications-heavy use cases or integrations.","summary":"Search and filter notifications for the current user with advanced parameters.","parameters":[],"requestBody":{"description":"Complex filtering, sorting, and pagination parameters for notification retrieval.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated, filtered list of notifications for the user.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"member"},{"specification":"This API operation performs advanced search and filtering for the current user's notifications in the discussion_board_notifications table. It allows clients to supply filter, search, sorting, and pagination parameters for more complex notification retrieval. It returns a paginated collection of notification objects that match the given criteria. Designed according to RBAC, only the requesting user's relevant notifications (admin_id, moderator_id, member_id, guest_id) are accessible. The operation supports filtering by notification type, category, status (read/unread), and date ranges.","path":"/discussionBoard/guest/notifications","method":"patch","description":"Search, filter, and paginate notifications for the logged-in user (admin, moderator, member, or guest) using advanced criteria. Reads from discussion_board_notifications while enforcing user-level privacy, only returning notifications where the authenticated user is the recipient.\n\nClients can filter notifications by category, status (read/unread), type (in-app, email, etc.), and creation or delivery timestamps. Pagination and sorting (by recency or delivery state) are included for scalable user inboxes. Only role-authorized users can invoke this operation; notifications linked to other users or roles are inaccessible, and unauthorized access triggers errors. The operation aids usability for notifications-heavy use cases or integrations.","summary":"Search and filter notifications for the current user with advanced parameters.","parameters":[],"requestBody":{"description":"Complex filtering, sorting, and pagination parameters for notification retrieval.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated, filtered list of notifications for the user.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"guest"},{"specification":"Fetches a single notification, identified by notificationId, from the discussion_board_notifications table. Returns the full details of a notification object if and only if the current authenticated user is its rightful recipient (admin, moderator, member, or guest). This GET operation does not require a request body and is used for direct drilldown or details view of a previous notification event. Enforces strict RBAC and privacy by verifying resource ownership before responding.","path":"/discussionBoard/admin/notifications/{notificationId}","method":"get","description":"Retrieve the details for a specific notification by its notificationId. The operation reads from discussion_board_notifications and returns the complete record if, and only if, the user is authorized as its intended recipient (matches admin_id, moderator_id, member_id, or guest_id for the current session).\n\nFails with not found or forbidden if the ID does not match a notification delivered to the requesting user. This ensures privacy and strict resource-level access control. The operation supports user interfaces for viewing notification detail and legal compliance for in-app event traceability.","summary":"Get a single notification's details by notificationId, scoped to current recipient.","parameters":[{"name":"notificationId","description":"Unique identifier for the notification record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A full notification detail object for the specified notificationId.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"at","authorizationRole":"admin"},{"specification":"Fetches a single notification, identified by notificationId, from the discussion_board_notifications table. Returns the full details of a notification object if and only if the current authenticated user is its rightful recipient (admin, moderator, member, or guest). This GET operation does not require a request body and is used for direct drilldown or details view of a previous notification event. Enforces strict RBAC and privacy by verifying resource ownership before responding.","path":"/discussionBoard/moderator/notifications/{notificationId}","method":"get","description":"Retrieve the details for a specific notification by its notificationId. The operation reads from discussion_board_notifications and returns the complete record if, and only if, the user is authorized as its intended recipient (matches admin_id, moderator_id, member_id, or guest_id for the current session).\n\nFails with not found or forbidden if the ID does not match a notification delivered to the requesting user. This ensures privacy and strict resource-level access control. The operation supports user interfaces for viewing notification detail and legal compliance for in-app event traceability.","summary":"Get a single notification's details by notificationId, scoped to current recipient.","parameters":[{"name":"notificationId","description":"Unique identifier for the notification record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A full notification detail object for the specified notificationId.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"at","authorizationRole":"moderator"},{"specification":"Fetches a single notification, identified by notificationId, from the discussion_board_notifications table. Returns the full details of a notification object if and only if the current authenticated user is its rightful recipient (admin, moderator, member, or guest). This GET operation does not require a request body and is used for direct drilldown or details view of a previous notification event. Enforces strict RBAC and privacy by verifying resource ownership before responding.","path":"/discussionBoard/member/notifications/{notificationId}","method":"get","description":"Retrieve the details for a specific notification by its notificationId. The operation reads from discussion_board_notifications and returns the complete record if, and only if, the user is authorized as its intended recipient (matches admin_id, moderator_id, member_id, or guest_id for the current session).\n\nFails with not found or forbidden if the ID does not match a notification delivered to the requesting user. This ensures privacy and strict resource-level access control. The operation supports user interfaces for viewing notification detail and legal compliance for in-app event traceability.","summary":"Get a single notification's details by notificationId, scoped to current recipient.","parameters":[{"name":"notificationId","description":"Unique identifier for the notification record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A full notification detail object for the specified notificationId.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"at","authorizationRole":"member"},{"specification":"Fetches a single notification, identified by notificationId, from the discussion_board_notifications table. Returns the full details of a notification object if and only if the current authenticated user is its rightful recipient (admin, moderator, member, or guest). This GET operation does not require a request body and is used for direct drilldown or details view of a previous notification event. Enforces strict RBAC and privacy by verifying resource ownership before responding.","path":"/discussionBoard/guest/notifications/{notificationId}","method":"get","description":"Retrieve the details for a specific notification by its notificationId. The operation reads from discussion_board_notifications and returns the complete record if, and only if, the user is authorized as its intended recipient (matches admin_id, moderator_id, member_id, or guest_id for the current session).\n\nFails with not found or forbidden if the ID does not match a notification delivered to the requesting user. This ensures privacy and strict resource-level access control. The operation supports user interfaces for viewing notification detail and legal compliance for in-app event traceability.","summary":"Get a single notification's details by notificationId, scoped to current recipient.","parameters":[{"name":"notificationId","description":"Unique identifier for the notification record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A full notification detail object for the specified notificationId.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"at","authorizationRole":"guest"},{"specification":"Creates a new notification record in the discussion_board_notifications table. Typically used internally by the system to deliver a notification to a recipient (admin, moderator, member, or guest) after a triggering event (such as a reply, moderation action, or vote). In production, this POST endpoint would usually be protected or accessed only by privileged roles or background processes, but is defined here per the endpoint list. The request body must provide all required notification fields per the Prisma schema, and the response returns the created notification object. Handles standard validation and security checks.","path":"/discussionBoard/admin/notifications","method":"post","description":"Create and deliver a new notification to a specific recipient. The provided data must specify at least one recipient type (admin_id, moderator_id, member_id, or guest_id).\n\nAll notification fields in the schema must be populated: message, type, category, references to related post/comment/action if applicable, and read/delivery status. The operation enforces privilege checks: only system or role-authorized actors (typically admins, moderators, or back-end) can create arbitrary notifications. Members and guests normally cannot send notifications except in self-service business logic. Standard errors include validation failure, unauthorized, or target not found.","summary":"Create and deliver a new notification to a recipient.","parameters":[],"requestBody":{"description":"Notification details to create and deliver, with recipient and message.","typeName":"IDiscussionBoardNotification.ICreate"},"responseBody":{"description":"Created notification object with all fields set.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"admin"},{"specification":"Creates a new notification record in the discussion_board_notifications table. Typically used internally by the system to deliver a notification to a recipient (admin, moderator, member, or guest) after a triggering event (such as a reply, moderation action, or vote). In production, this POST endpoint would usually be protected or accessed only by privileged roles or background processes, but is defined here per the endpoint list. The request body must provide all required notification fields per the Prisma schema, and the response returns the created notification object. Handles standard validation and security checks.","path":"/discussionBoard/moderator/notifications","method":"post","description":"Create and deliver a new notification to a specific recipient. The provided data must specify at least one recipient type (admin_id, moderator_id, member_id, or guest_id).\n\nAll notification fields in the schema must be populated: message, type, category, references to related post/comment/action if applicable, and read/delivery status. The operation enforces privilege checks: only system or role-authorized actors (typically admins, moderators, or back-end) can create arbitrary notifications. Members and guests normally cannot send notifications except in self-service business logic. Standard errors include validation failure, unauthorized, or target not found.","summary":"Create and deliver a new notification to a recipient.","parameters":[],"requestBody":{"description":"Notification details to create and deliver, with recipient and message.","typeName":"IDiscussionBoardNotification.ICreate"},"responseBody":{"description":"Created notification object with all fields set.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator"],"name":"create","authorizationRole":"moderator"},{"specification":"This operation updates an existing notification record in the discussion_board_notifications table, identified by notificationId. The most common use is to mark notifications as read, update status, or correct message fields. Only the intended recipient or authorized system/admin user can invoke this operation. The request body provides updated fields compliant with the Prisma schema. Handles conflicts, RBAC, and validation errors. Returns the updated notification object on success.","path":"/discussionBoard/admin/notifications/{notificationId}","method":"put","description":"Update details of an existing notification. Common scenarios include toggling the is_read flag, updating status, or correcting notification content for a specific notificationId.\n\nThe operation verifies that either the authenticated user is the rightful recipient (matching to one of the recipient IDs), or the actor is a privileged admin/moderator for system changes. Request validates against the updatable schema fields, and returns updated notification data on success. Standard errors include unauthorized changes, not found IDs, or validation errors for illegal updates.","summary":"Update a notification (e.g., mark as read) for a specific notificationId.","parameters":[{"name":"notificationId","description":"Unique identifier of the notification to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Object with notification fields to update (e.g., is_read, status).","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"The updated notification object after changes.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"update","authorizationRole":"admin"},{"specification":"This operation updates an existing notification record in the discussion_board_notifications table, identified by notificationId. The most common use is to mark notifications as read, update status, or correct message fields. Only the intended recipient or authorized system/admin user can invoke this operation. The request body provides updated fields compliant with the Prisma schema. Handles conflicts, RBAC, and validation errors. Returns the updated notification object on success.","path":"/discussionBoard/moderator/notifications/{notificationId}","method":"put","description":"Update details of an existing notification. Common scenarios include toggling the is_read flag, updating status, or correcting notification content for a specific notificationId.\n\nThe operation verifies that either the authenticated user is the rightful recipient (matching to one of the recipient IDs), or the actor is a privileged admin/moderator for system changes. Request validates against the updatable schema fields, and returns updated notification data on success. Standard errors include unauthorized changes, not found IDs, or validation errors for illegal updates.","summary":"Update a notification (e.g., mark as read) for a specific notificationId.","parameters":[{"name":"notificationId","description":"Unique identifier of the notification to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Object with notification fields to update (e.g., is_read, status).","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"The updated notification object after changes.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"update","authorizationRole":"moderator"},{"specification":"This operation updates an existing notification record in the discussion_board_notifications table, identified by notificationId. The most common use is to mark notifications as read, update status, or correct message fields. Only the intended recipient or authorized system/admin user can invoke this operation. The request body provides updated fields compliant with the Prisma schema. Handles conflicts, RBAC, and validation errors. Returns the updated notification object on success.","path":"/discussionBoard/member/notifications/{notificationId}","method":"put","description":"Update details of an existing notification. Common scenarios include toggling the is_read flag, updating status, or correcting notification content for a specific notificationId.\n\nThe operation verifies that either the authenticated user is the rightful recipient (matching to one of the recipient IDs), or the actor is a privileged admin/moderator for system changes. Request validates against the updatable schema fields, and returns updated notification data on success. Standard errors include unauthorized changes, not found IDs, or validation errors for illegal updates.","summary":"Update a notification (e.g., mark as read) for a specific notificationId.","parameters":[{"name":"notificationId","description":"Unique identifier of the notification to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Object with notification fields to update (e.g., is_read, status).","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"The updated notification object after changes.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"update","authorizationRole":"member"},{"specification":"This operation updates an existing notification record in the discussion_board_notifications table, identified by notificationId. The most common use is to mark notifications as read, update status, or correct message fields. Only the intended recipient or authorized system/admin user can invoke this operation. The request body provides updated fields compliant with the Prisma schema. Handles conflicts, RBAC, and validation errors. Returns the updated notification object on success.","path":"/discussionBoard/guest/notifications/{notificationId}","method":"put","description":"Update details of an existing notification. Common scenarios include toggling the is_read flag, updating status, or correcting notification content for a specific notificationId.\n\nThe operation verifies that either the authenticated user is the rightful recipient (matching to one of the recipient IDs), or the actor is a privileged admin/moderator for system changes. Request validates against the updatable schema fields, and returns updated notification data on success. Standard errors include unauthorized changes, not found IDs, or validation errors for illegal updates.","summary":"Update a notification (e.g., mark as read) for a specific notificationId.","parameters":[{"name":"notificationId","description":"Unique identifier of the notification to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Object with notification fields to update (e.g., is_read, status).","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"The updated notification object after changes.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["admin","moderator","member","guest"],"name":"update","authorizationRole":"guest"},{"specification":"Deletes an existing notification record from the discussion_board_notifications table. This is primarily used for notification cleanup or user inbox management. Only the notification's recipient (admin/moderator/member/guest) or a privileged system role may delete a notification. This is a hard delete per schema (no soft delete fields). The operation takes notificationId as a path parameter and returns no content on success. Validation is performed to ensure only authorized users can remove notifications addressed to them.","path":"/discussionBoard/admin/notifications/{notificationId}","method":"delete","description":"Delete a notification for a user by notificationId. The operation performs a hard delete as the schema lacks soft delete fields for notifications.\n\nAuthorization is enforced: only the notification's recipient (admin, moderator, member, or guest) or a system admin/moderator may delete a given notification. This operation is typically used for user inbox cleanup, privacy, or regulatory compliance. Returns no data on success; errors for unauthorized or not found are returned as required.","summary":"Delete a notification from the user's inbox by notificationId (hard delete).","parameters":[{"name":"notificationId","description":"Unique identifier for the notification record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator","member","guest"],"name":"erase","authorizationRole":"admin"},{"specification":"Deletes an existing notification record from the discussion_board_notifications table. This is primarily used for notification cleanup or user inbox management. Only the notification's recipient (admin/moderator/member/guest) or a privileged system role may delete a notification. This is a hard delete per schema (no soft delete fields). The operation takes notificationId as a path parameter and returns no content on success. Validation is performed to ensure only authorized users can remove notifications addressed to them.","path":"/discussionBoard/moderator/notifications/{notificationId}","method":"delete","description":"Delete a notification for a user by notificationId. The operation performs a hard delete as the schema lacks soft delete fields for notifications.\n\nAuthorization is enforced: only the notification's recipient (admin, moderator, member, or guest) or a system admin/moderator may delete a given notification. This operation is typically used for user inbox cleanup, privacy, or regulatory compliance. Returns no data on success; errors for unauthorized or not found are returned as required.","summary":"Delete a notification from the user's inbox by notificationId (hard delete).","parameters":[{"name":"notificationId","description":"Unique identifier for the notification record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator","member","guest"],"name":"erase","authorizationRole":"moderator"},{"specification":"Deletes an existing notification record from the discussion_board_notifications table. This is primarily used for notification cleanup or user inbox management. Only the notification's recipient (admin/moderator/member/guest) or a privileged system role may delete a notification. This is a hard delete per schema (no soft delete fields). The operation takes notificationId as a path parameter and returns no content on success. Validation is performed to ensure only authorized users can remove notifications addressed to them.","path":"/discussionBoard/member/notifications/{notificationId}","method":"delete","description":"Delete a notification for a user by notificationId. The operation performs a hard delete as the schema lacks soft delete fields for notifications.\n\nAuthorization is enforced: only the notification's recipient (admin, moderator, member, or guest) or a system admin/moderator may delete a given notification. This operation is typically used for user inbox cleanup, privacy, or regulatory compliance. Returns no data on success; errors for unauthorized or not found are returned as required.","summary":"Delete a notification from the user's inbox by notificationId (hard delete).","parameters":[{"name":"notificationId","description":"Unique identifier for the notification record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator","member","guest"],"name":"erase","authorizationRole":"member"},{"specification":"Deletes an existing notification record from the discussion_board_notifications table. This is primarily used for notification cleanup or user inbox management. Only the notification's recipient (admin/moderator/member/guest) or a privileged system role may delete a notification. This is a hard delete per schema (no soft delete fields). The operation takes notificationId as a path parameter and returns no content on success. Validation is performed to ensure only authorized users can remove notifications addressed to them.","path":"/discussionBoard/guest/notifications/{notificationId}","method":"delete","description":"Delete a notification for a user by notificationId. The operation performs a hard delete as the schema lacks soft delete fields for notifications.\n\nAuthorization is enforced: only the notification's recipient (admin, moderator, member, or guest) or a system admin/moderator may delete a given notification. This operation is typically used for user inbox cleanup, privacy, or regulatory compliance. Returns no data on success; errors for unauthorized or not found are returned as required.","summary":"Delete a notification from the user's inbox by notificationId (hard delete).","parameters":[{"name":"notificationId","description":"Unique identifier for the notification record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator","member","guest"],"name":"erase","authorizationRole":"guest"},{"specification":"Lists all notification setting records for the current authenticated user in discussion_board_notification_settings table. This GET endpoint retrieves account-specific notification preferences, allowing the user or admin to access current delivery channel settings or category-specific notification toggles. Results are limited to settings owned by the current user (admin, moderator, member, or guest). Enforces privacy: users can only see their own settings.","path":"/discussionBoard/admin/notificationSettings","method":"get","description":"Retrieve all notification settings for the current user. Each returned record contains delivery and category preferences for the currently authenticated user (admin, moderator, member, or guest).\n\nNo other user's notification settings can be retrieved due to privacy and RBAC. This operation supports user settings UIs and account audits for notification delivery.","summary":"List all notification settings for the authenticated user.","parameters":[],"requestBody":null,"responseBody":{"description":"A paginated list of notification setting objects for the user.","typeName":"IPageIDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"index","authorizationRole":"admin"},{"specification":"Lists all notification setting records for the current authenticated user in discussion_board_notification_settings table. This GET endpoint retrieves account-specific notification preferences, allowing the user or admin to access current delivery channel settings or category-specific notification toggles. Results are limited to settings owned by the current user (admin, moderator, member, or guest). Enforces privacy: users can only see their own settings.","path":"/discussionBoard/moderator/notificationSettings","method":"get","description":"Retrieve all notification settings for the current user. Each returned record contains delivery and category preferences for the currently authenticated user (admin, moderator, member, or guest).\n\nNo other user's notification settings can be retrieved due to privacy and RBAC. This operation supports user settings UIs and account audits for notification delivery.","summary":"List all notification settings for the authenticated user.","parameters":[],"requestBody":null,"responseBody":{"description":"A paginated list of notification setting objects for the user.","typeName":"IPageIDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"index","authorizationRole":"moderator"},{"specification":"Lists all notification setting records for the current authenticated user in discussion_board_notification_settings table. This GET endpoint retrieves account-specific notification preferences, allowing the user or admin to access current delivery channel settings or category-specific notification toggles. Results are limited to settings owned by the current user (admin, moderator, member, or guest). Enforces privacy: users can only see their own settings.","path":"/discussionBoard/member/notificationSettings","method":"get","description":"Retrieve all notification settings for the current user. Each returned record contains delivery and category preferences for the currently authenticated user (admin, moderator, member, or guest).\n\nNo other user's notification settings can be retrieved due to privacy and RBAC. This operation supports user settings UIs and account audits for notification delivery.","summary":"List all notification settings for the authenticated user.","parameters":[],"requestBody":null,"responseBody":{"description":"A paginated list of notification setting objects for the user.","typeName":"IPageIDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"index","authorizationRole":"member"},{"specification":"Lists all notification setting records for the current authenticated user in discussion_board_notification_settings table. This GET endpoint retrieves account-specific notification preferences, allowing the user or admin to access current delivery channel settings or category-specific notification toggles. Results are limited to settings owned by the current user (admin, moderator, member, or guest). Enforces privacy: users can only see their own settings.","path":"/discussionBoard/guest/notificationSettings","method":"get","description":"Retrieve all notification settings for the current user. Each returned record contains delivery and category preferences for the currently authenticated user (admin, moderator, member, or guest).\n\nNo other user's notification settings can be retrieved due to privacy and RBAC. This operation supports user settings UIs and account audits for notification delivery.","summary":"List all notification settings for the authenticated user.","parameters":[],"requestBody":null,"responseBody":{"description":"A paginated list of notification setting objects for the user.","typeName":"IPageIDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"index","authorizationRole":"guest"},{"specification":"Performs advanced search and filtering of the current user's notification settings within the discussion_board_notification_settings table. Useful for users with multiple notification settings/roles, allows searching by channel preference (in-app, email), notification category (moderation, reply, vote), or delivery status. Returns paginated results suitable for settings UIs. Enforces RBAC and privacy: only the user or admin can access these settings.","path":"/discussionBoard/admin/notificationSettings","method":"patch","description":"Search and filter notification settings for the logged-in user with parameters such as delivery channel, individual category toggles, or time ranges.\n\nThis operation supports configuration interfaces and audit tools for members, moderators, admins, or guests to manage or review their delivery preferences. Returns paginated result. Errors for unauthorized query or validation issues are standard.","summary":"Search/filter notification settings for user with advanced parameters.","parameters":[],"requestBody":{"description":"Complex search parameters for notification settings query.","typeName":"IDiscussionBoardNotificationSetting.IRequest"},"responseBody":{"description":"Paginated, filtered list of the user's notification setting records.","typeName":"IPageIDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"admin"},{"specification":"Performs advanced search and filtering of the current user's notification settings within the discussion_board_notification_settings table. Useful for users with multiple notification settings/roles, allows searching by channel preference (in-app, email), notification category (moderation, reply, vote), or delivery status. Returns paginated results suitable for settings UIs. Enforces RBAC and privacy: only the user or admin can access these settings.","path":"/discussionBoard/moderator/notificationSettings","method":"patch","description":"Search and filter notification settings for the logged-in user with parameters such as delivery channel, individual category toggles, or time ranges.\n\nThis operation supports configuration interfaces and audit tools for members, moderators, admins, or guests to manage or review their delivery preferences. Returns paginated result. Errors for unauthorized query or validation issues are standard.","summary":"Search/filter notification settings for user with advanced parameters.","parameters":[],"requestBody":{"description":"Complex search parameters for notification settings query.","typeName":"IDiscussionBoardNotificationSetting.IRequest"},"responseBody":{"description":"Paginated, filtered list of the user's notification setting records.","typeName":"IPageIDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"moderator"},{"specification":"Performs advanced search and filtering of the current user's notification settings within the discussion_board_notification_settings table. Useful for users with multiple notification settings/roles, allows searching by channel preference (in-app, email), notification category (moderation, reply, vote), or delivery status. Returns paginated results suitable for settings UIs. Enforces RBAC and privacy: only the user or admin can access these settings.","path":"/discussionBoard/member/notificationSettings","method":"patch","description":"Search and filter notification settings for the logged-in user with parameters such as delivery channel, individual category toggles, or time ranges.\n\nThis operation supports configuration interfaces and audit tools for members, moderators, admins, or guests to manage or review their delivery preferences. Returns paginated result. Errors for unauthorized query or validation issues are standard.","summary":"Search/filter notification settings for user with advanced parameters.","parameters":[],"requestBody":{"description":"Complex search parameters for notification settings query.","typeName":"IDiscussionBoardNotificationSetting.IRequest"},"responseBody":{"description":"Paginated, filtered list of the user's notification setting records.","typeName":"IPageIDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"member"},{"specification":"Performs advanced search and filtering of the current user's notification settings within the discussion_board_notification_settings table. Useful for users with multiple notification settings/roles, allows searching by channel preference (in-app, email), notification category (moderation, reply, vote), or delivery status. Returns paginated results suitable for settings UIs. Enforces RBAC and privacy: only the user or admin can access these settings.","path":"/discussionBoard/guest/notificationSettings","method":"patch","description":"Search and filter notification settings for the logged-in user with parameters such as delivery channel, individual category toggles, or time ranges.\n\nThis operation supports configuration interfaces and audit tools for members, moderators, admins, or guests to manage or review their delivery preferences. Returns paginated result. Errors for unauthorized query or validation issues are standard.","summary":"Search/filter notification settings for user with advanced parameters.","parameters":[],"requestBody":{"description":"Complex search parameters for notification settings query.","typeName":"IDiscussionBoardNotificationSetting.IRequest"},"responseBody":{"description":"Paginated, filtered list of the user's notification setting records.","typeName":"IPageIDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"search","authorizationRole":"guest"},{"specification":"Retrieves the full detail of a single notification setting record by notificationSettingId for the current user. The operation reads from discussion_board_notification_settings, ensuring only the setting linked to the authenticated user (admin, moderator, member, or guest) can be viewed. This is used for direct settings editing or detail UI. Privacy/RBAC strictly enforced.","path":"/discussionBoard/admin/notificationSettings/{notificationSettingId}","method":"get","description":"Fetch the details for a single notification setting using notificationSettingId. Only settings owned by the current user (matching admin_id, moderator_id, member_id, or guest_id) are accessible.\n\nReturns the detailed configuration for notification delivery, including in-app/email enablement and per-category toggles (moderation, reply, vote). Errors for forbidden or not found are handled according to best practices.","summary":"Get a notification setting detail by notificationSettingId, scoped to current user.","parameters":[{"name":"notificationSettingId","description":"Unique identifier of the notification settings record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed view of notification setting preferences for the user.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieves the full detail of a single notification setting record by notificationSettingId for the current user. The operation reads from discussion_board_notification_settings, ensuring only the setting linked to the authenticated user (admin, moderator, member, or guest) can be viewed. This is used for direct settings editing or detail UI. Privacy/RBAC strictly enforced.","path":"/discussionBoard/moderator/notificationSettings/{notificationSettingId}","method":"get","description":"Fetch the details for a single notification setting using notificationSettingId. Only settings owned by the current user (matching admin_id, moderator_id, member_id, or guest_id) are accessible.\n\nReturns the detailed configuration for notification delivery, including in-app/email enablement and per-category toggles (moderation, reply, vote). Errors for forbidden or not found are handled according to best practices.","summary":"Get a notification setting detail by notificationSettingId, scoped to current user.","parameters":[{"name":"notificationSettingId","description":"Unique identifier of the notification settings record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed view of notification setting preferences for the user.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"at","authorizationRole":"moderator"},{"specification":"Retrieves the full detail of a single notification setting record by notificationSettingId for the current user. The operation reads from discussion_board_notification_settings, ensuring only the setting linked to the authenticated user (admin, moderator, member, or guest) can be viewed. This is used for direct settings editing or detail UI. Privacy/RBAC strictly enforced.","path":"/discussionBoard/member/notificationSettings/{notificationSettingId}","method":"get","description":"Fetch the details for a single notification setting using notificationSettingId. Only settings owned by the current user (matching admin_id, moderator_id, member_id, or guest_id) are accessible.\n\nReturns the detailed configuration for notification delivery, including in-app/email enablement and per-category toggles (moderation, reply, vote). Errors for forbidden or not found are handled according to best practices.","summary":"Get a notification setting detail by notificationSettingId, scoped to current user.","parameters":[{"name":"notificationSettingId","description":"Unique identifier of the notification settings record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed view of notification setting preferences for the user.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"at","authorizationRole":"member"},{"specification":"Retrieves the full detail of a single notification setting record by notificationSettingId for the current user. The operation reads from discussion_board_notification_settings, ensuring only the setting linked to the authenticated user (admin, moderator, member, or guest) can be viewed. This is used for direct settings editing or detail UI. Privacy/RBAC strictly enforced.","path":"/discussionBoard/guest/notificationSettings/{notificationSettingId}","method":"get","description":"Fetch the details for a single notification setting using notificationSettingId. Only settings owned by the current user (matching admin_id, moderator_id, member_id, or guest_id) are accessible.\n\nReturns the detailed configuration for notification delivery, including in-app/email enablement and per-category toggles (moderation, reply, vote). Errors for forbidden or not found are handled according to best practices.","summary":"Get a notification setting detail by notificationSettingId, scoped to current user.","parameters":[{"name":"notificationSettingId","description":"Unique identifier of the notification settings record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A detailed view of notification setting preferences for the user.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"at","authorizationRole":"guest"},{"specification":"Creates a new notification settings record for the current user in discussion_board_notification_settings. Allows users (or admins) to establish their preferred delivery channels and category toggles. The request must provide in-app/email/category enablement for the user type. The operation enforces that only the current user (or appropriate admin/privileged actor) can create settings for the targeted account. Returns the created notification setting record on success, with unique ID.","path":"/discussionBoard/admin/notificationSettings","method":"post","description":"Register new notification settings for the user (admin, moderator, member, or guest). The input must specify target user and desired notification channel preference for this receiver.\n\nFails if attempting to create duplicate settings for a user or create settings for another user without proper privilege. Used in initial account onboarding, settings reset, or self-service notification delivery configuration. Returns the complete object for confirmation.","summary":"Create new notification settings for a user (current actor or admin).","parameters":[],"requestBody":{"description":"Notification setting details to register for a user.","typeName":"IDiscussionBoardNotificationSetting.ICreate"},"responseBody":{"description":"The newly created notification setting object.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"create","authorizationRole":"admin"},{"specification":"Creates a new notification settings record for the current user in discussion_board_notification_settings. Allows users (or admins) to establish their preferred delivery channels and category toggles. The request must provide in-app/email/category enablement for the user type. The operation enforces that only the current user (or appropriate admin/privileged actor) can create settings for the targeted account. Returns the created notification setting record on success, with unique ID.","path":"/discussionBoard/moderator/notificationSettings","method":"post","description":"Register new notification settings for the user (admin, moderator, member, or guest). The input must specify target user and desired notification channel preference for this receiver.\n\nFails if attempting to create duplicate settings for a user or create settings for another user without proper privilege. Used in initial account onboarding, settings reset, or self-service notification delivery configuration. Returns the complete object for confirmation.","summary":"Create new notification settings for a user (current actor or admin).","parameters":[],"requestBody":{"description":"Notification setting details to register for a user.","typeName":"IDiscussionBoardNotificationSetting.ICreate"},"responseBody":{"description":"The newly created notification setting object.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"create","authorizationRole":"moderator"},{"specification":"Creates a new notification settings record for the current user in discussion_board_notification_settings. Allows users (or admins) to establish their preferred delivery channels and category toggles. The request must provide in-app/email/category enablement for the user type. The operation enforces that only the current user (or appropriate admin/privileged actor) can create settings for the targeted account. Returns the created notification setting record on success, with unique ID.","path":"/discussionBoard/member/notificationSettings","method":"post","description":"Register new notification settings for the user (admin, moderator, member, or guest). The input must specify target user and desired notification channel preference for this receiver.\n\nFails if attempting to create duplicate settings for a user or create settings for another user without proper privilege. Used in initial account onboarding, settings reset, or self-service notification delivery configuration. Returns the complete object for confirmation.","summary":"Create new notification settings for a user (current actor or admin).","parameters":[],"requestBody":{"description":"Notification setting details to register for a user.","typeName":"IDiscussionBoardNotificationSetting.ICreate"},"responseBody":{"description":"The newly created notification setting object.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"create","authorizationRole":"member"},{"specification":"Creates a new notification settings record for the current user in discussion_board_notification_settings. Allows users (or admins) to establish their preferred delivery channels and category toggles. The request must provide in-app/email/category enablement for the user type. The operation enforces that only the current user (or appropriate admin/privileged actor) can create settings for the targeted account. Returns the created notification setting record on success, with unique ID.","path":"/discussionBoard/guest/notificationSettings","method":"post","description":"Register new notification settings for the user (admin, moderator, member, or guest). The input must specify target user and desired notification channel preference for this receiver.\n\nFails if attempting to create duplicate settings for a user or create settings for another user without proper privilege. Used in initial account onboarding, settings reset, or self-service notification delivery configuration. Returns the complete object for confirmation.","summary":"Create new notification settings for a user (current actor or admin).","parameters":[],"requestBody":{"description":"Notification setting details to register for a user.","typeName":"IDiscussionBoardNotificationSetting.ICreate"},"responseBody":{"description":"The newly created notification setting object.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"create","authorizationRole":"guest"},{"specification":"Updates an existing notification settings record, identified by notificationSettingId, in discussion_board_notification_settings. Allows the user or admin to modify delivery channel enablement or category preferences. The request body must conform to updatable field constraints. Only the current owner (admin, moderator, member, or guest) or a privileged admin can update the targeted record. RBAC and validation enforced. Returns the updated settings object.","path":"/discussionBoard/admin/notificationSettings/{notificationSettingId}","method":"put","description":"Update notification settings for the current user or role by notificationSettingId. Clients provide a set of updated preferences (in-app, email, category toggles) for the selected settings record.\n\nOnly settings linked to the current actor (admin, moderator, member, or guest) or system admin can be changed. Unauthorized attempts and conflicts (e.g., updating unowned settings) raise errors. Outputs the modified settings for confirmation.","summary":"Update the user's notification settings by notificationSettingId.","parameters":[{"name":"notificationSettingId","description":"Unique identifier for the notification setting record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification setting preferences and delivery channel flags.","typeName":"IDiscussionBoardNotificationSetting.IUpdate"},"responseBody":{"description":"The notification setting object after update.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"update","authorizationRole":"admin"},{"specification":"Updates an existing notification settings record, identified by notificationSettingId, in discussion_board_notification_settings. Allows the user or admin to modify delivery channel enablement or category preferences. The request body must conform to updatable field constraints. Only the current owner (admin, moderator, member, or guest) or a privileged admin can update the targeted record. RBAC and validation enforced. Returns the updated settings object.","path":"/discussionBoard/moderator/notificationSettings/{notificationSettingId}","method":"put","description":"Update notification settings for the current user or role by notificationSettingId. Clients provide a set of updated preferences (in-app, email, category toggles) for the selected settings record.\n\nOnly settings linked to the current actor (admin, moderator, member, or guest) or system admin can be changed. Unauthorized attempts and conflicts (e.g., updating unowned settings) raise errors. Outputs the modified settings for confirmation.","summary":"Update the user's notification settings by notificationSettingId.","parameters":[{"name":"notificationSettingId","description":"Unique identifier for the notification setting record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification setting preferences and delivery channel flags.","typeName":"IDiscussionBoardNotificationSetting.IUpdate"},"responseBody":{"description":"The notification setting object after update.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"update","authorizationRole":"moderator"},{"specification":"Updates an existing notification settings record, identified by notificationSettingId, in discussion_board_notification_settings. Allows the user or admin to modify delivery channel enablement or category preferences. The request body must conform to updatable field constraints. Only the current owner (admin, moderator, member, or guest) or a privileged admin can update the targeted record. RBAC and validation enforced. Returns the updated settings object.","path":"/discussionBoard/member/notificationSettings/{notificationSettingId}","method":"put","description":"Update notification settings for the current user or role by notificationSettingId. Clients provide a set of updated preferences (in-app, email, category toggles) for the selected settings record.\n\nOnly settings linked to the current actor (admin, moderator, member, or guest) or system admin can be changed. Unauthorized attempts and conflicts (e.g., updating unowned settings) raise errors. Outputs the modified settings for confirmation.","summary":"Update the user's notification settings by notificationSettingId.","parameters":[{"name":"notificationSettingId","description":"Unique identifier for the notification setting record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification setting preferences and delivery channel flags.","typeName":"IDiscussionBoardNotificationSetting.IUpdate"},"responseBody":{"description":"The notification setting object after update.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"update","authorizationRole":"member"},{"specification":"Updates an existing notification settings record, identified by notificationSettingId, in discussion_board_notification_settings. Allows the user or admin to modify delivery channel enablement or category preferences. The request body must conform to updatable field constraints. Only the current owner (admin, moderator, member, or guest) or a privileged admin can update the targeted record. RBAC and validation enforced. Returns the updated settings object.","path":"/discussionBoard/guest/notificationSettings/{notificationSettingId}","method":"put","description":"Update notification settings for the current user or role by notificationSettingId. Clients provide a set of updated preferences (in-app, email, category toggles) for the selected settings record.\n\nOnly settings linked to the current actor (admin, moderator, member, or guest) or system admin can be changed. Unauthorized attempts and conflicts (e.g., updating unowned settings) raise errors. Outputs the modified settings for confirmation.","summary":"Update the user's notification settings by notificationSettingId.","parameters":[{"name":"notificationSettingId","description":"Unique identifier for the notification setting record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification setting preferences and delivery channel flags.","typeName":"IDiscussionBoardNotificationSetting.IUpdate"},"responseBody":{"description":"The notification setting object after update.","typeName":"IDiscussionBoardNotificationSetting"},"authorizationRoles":["admin","moderator","member","guest"],"name":"update","authorizationRole":"guest"},{"specification":"Deletes a notification settings record for the current user by notificationSettingId. This operation allows users (or privileged admins) to remove their delivery preference configuration, e.g., as part of account deletion, reset, or settings cleanup. The schema does not support soft delete, so this operation hard-deletes the settings record. Returns no content on success; fails if the user is unauthorized or the ID does not match their settings.","path":"/discussionBoard/admin/notificationSettings/{notificationSettingId}","method":"delete","description":"Delete a notification settings record by notificationSettingId. Permitted only for the current user (admin, moderator, member, or guest) or for a system admin acting with privileged credentials.\n\nThis is a hard delete (no soft delete fields). Supports settings cleanup or privacy/compliance. Standard errors for unauthorized, forbidden, or not found cases. No data returned on successful delete.","summary":"Delete a notification setting record for the user (hard delete only).","parameters":[{"name":"notificationSettingId","description":"Unique identifier of the notification setting record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator","member","guest"],"name":"erase","authorizationRole":"admin"},{"specification":"Deletes a notification settings record for the current user by notificationSettingId. This operation allows users (or privileged admins) to remove their delivery preference configuration, e.g., as part of account deletion, reset, or settings cleanup. The schema does not support soft delete, so this operation hard-deletes the settings record. Returns no content on success; fails if the user is unauthorized or the ID does not match their settings.","path":"/discussionBoard/moderator/notificationSettings/{notificationSettingId}","method":"delete","description":"Delete a notification settings record by notificationSettingId. Permitted only for the current user (admin, moderator, member, or guest) or for a system admin acting with privileged credentials.\n\nThis is a hard delete (no soft delete fields). Supports settings cleanup or privacy/compliance. Standard errors for unauthorized, forbidden, or not found cases. No data returned on successful delete.","summary":"Delete a notification setting record for the user (hard delete only).","parameters":[{"name":"notificationSettingId","description":"Unique identifier of the notification setting record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator","member","guest"],"name":"erase","authorizationRole":"moderator"},{"specification":"Deletes a notification settings record for the current user by notificationSettingId. This operation allows users (or privileged admins) to remove their delivery preference configuration, e.g., as part of account deletion, reset, or settings cleanup. The schema does not support soft delete, so this operation hard-deletes the settings record. Returns no content on success; fails if the user is unauthorized or the ID does not match their settings.","path":"/discussionBoard/member/notificationSettings/{notificationSettingId}","method":"delete","description":"Delete a notification settings record by notificationSettingId. Permitted only for the current user (admin, moderator, member, or guest) or for a system admin acting with privileged credentials.\n\nThis is a hard delete (no soft delete fields). Supports settings cleanup or privacy/compliance. Standard errors for unauthorized, forbidden, or not found cases. No data returned on successful delete.","summary":"Delete a notification setting record for the user (hard delete only).","parameters":[{"name":"notificationSettingId","description":"Unique identifier of the notification setting record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator","member","guest"],"name":"erase","authorizationRole":"member"},{"specification":"Deletes a notification settings record for the current user by notificationSettingId. This operation allows users (or privileged admins) to remove their delivery preference configuration, e.g., as part of account deletion, reset, or settings cleanup. The schema does not support soft delete, so this operation hard-deletes the settings record. Returns no content on success; fails if the user is unauthorized or the ID does not match their settings.","path":"/discussionBoard/guest/notificationSettings/{notificationSettingId}","method":"delete","description":"Delete a notification settings record by notificationSettingId. Permitted only for the current user (admin, moderator, member, or guest) or for a system admin acting with privileged credentials.\n\nThis is a hard delete (no soft delete fields). Supports settings cleanup or privacy/compliance. Standard errors for unauthorized, forbidden, or not found cases. No data returned on successful delete.","summary":"Delete a notification setting record for the user (hard delete only).","parameters":[{"name":"notificationSettingId","description":"Unique identifier of the notification setting record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator","member","guest"],"name":"erase","authorizationRole":"guest"},{"specification":"This operation retrieves a list of authentication tokens issued by the system. It is mapped to the discussion_board_auth_tokens table, which stores authentication session tokens for all user roles: admin, moderator, member, and guest. The endpoint should return a paginated list of tokens with filtering and sorting capabilities for audit, security, and monitoring purposes. Sensitive data such as the token value should be handled securely and exposed only where appropriate for administrative roles. Pagination and search features allow users to locate tokens based on actor role, token status, or issuance period.","path":"/discussionBoard/admin/authTokens","method":"get","description":"Retrieve a paginated list of authentication tokens from the discussion_board_auth_tokens entity. This operation supports audit workflows, allowing security administrators to monitor active and historical authentication sessions for all user roles (admins, moderators, members, guests).\n\nPagination is required, and tokens should be filterable by actor_type, issued_at, revoked status, actor id, and expiration. The response will include only necessary information for session tracking and security audits, avoiding exposure of the raw token string except where role permits.\n\nRole-based access control is enforced so that only administrators or delegated security operators can access this operation. Errors such as unauthorized access or malformed queries should be handled with clear diagnostics.","summary":"Retrieve a paginated list of authentication tokens (discussion_board_auth_tokens)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated token list result from discussion_board_auth_tokens","typeName":"IPageIDiscussionBoardAuthToken"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"This PATCH operation provides advanced filtering, search, and retrieval for authentication tokens stored within the discussion_board_auth_tokens table. It allows for complex queries, supporting multi-criteria searches by actor type, status, issue/expiry periods, or specific actor/user ids. Typical use cases include security audit, incident response, and proactive monitoring. All filtering criteria must follow the actual schema fields.","path":"/discussionBoard/admin/authTokens","method":"patch","description":"Search and filter authentication tokens using advanced criteria.\n\nThis operation is tailored for administrative or security roles that need fine-grained visibility into the authentication state of system actors. By posting an appropriate filter/sort object, authorized callers can retrieve tokens matching a combination of actor type (admin, member, moderator, guest), issue and expiration windows, revoked status, and other domain-specific fields.\n\nCareful handling of sensitive data and strict adherence to audit/compliance policy is fundamental. Only authorized roles may access and use search functionality on the token database.","summary":"Advanced search/filter for authentication tokens (discussion_board_auth_tokens)","parameters":[],"requestBody":{"description":"Token search and filter criteria object","typeName":"IDiscussionBoardAuthToken.IRequest"},"responseBody":{"description":"Paginated list of authentication tokens matching search criteria","typeName":"IPageIDiscussionBoardAuthToken"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"This GET operation retrieves a single authentication token's details by its unique identifier from the discussion_board_auth_tokens table. Used by administrators for token-specific audit, revocation, or incident analysis, the endpoint returns a single token record and its associated metadata fields (without revealing the full raw token value where not permitted).","path":"/discussionBoard/admin/authTokens/{authTokenId}","method":"get","description":"Retrieve full record details for a specific authentication token using its unique ID (UUID).\n\nEnsures access is only granted to users with sufficient privilege, typically admins. The details returned enable incident responders or audit professionals to analyze specific session or token issues, such as revocation history, issuance traceability, and actor attribution.\n\nThe response object mirrors the discussion_board_auth_tokens schema and may omit or mask the 'token' field if viewing user lacks necessary role privileges. Error handling covers cases such as non-existent token or unauthorized user.","summary":"Get authentication token details by ID (discussion_board_auth_tokens)","parameters":[{"name":"authTokenId","description":"Unique identifier for the authentication token (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed authentication token information result","typeName":"IDiscussionBoardAuthToken"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"This POST operation creates a new authentication token record in the discussion_board_auth_tokens table. It is intended for valid session creation flows (user login, system-initiated token provisioning) and should only be accessible via backend systems handling verified authentication or privileged user actions. The request body should align with the defined creation schema (IDiscussionBoardAuthToken.ICreate).","path":"/discussionBoard/admin/authTokens","method":"post","description":"Create a new authentication token record, typically following successful login or privileged session initiation.\n\nThis operation must strictly enforce request validation, only allowing tokens to be created for existing legitimate actors (admin, moderator, member, guest) and honoring all schema constraints. Only backend authentication services or highly privileged admin endpoints should call this operation.\n\nThe response will return the newly created token record. Error handling must address duplicates, missing references, and session security policy issues.","summary":"Create a new authentication token (discussion_board_auth_tokens)","parameters":[],"requestBody":{"description":"Authentication token creation schema (on user login or session issue)","typeName":"IDiscussionBoardAuthToken.ICreate"},"responseBody":{"description":"Created authentication token information","typeName":"IDiscussionBoardAuthToken"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"This PUT operation updates the specified authentication token record in discussion_board_auth_tokens, identified by unique ID. Used for session revocation, token refresh, or mutation of other mutable attributes (e.g., expiration). Must verify update constraints per schema and ensure that only privileged users with sufficient clearance can modify token data.","path":"/discussionBoard/admin/authTokens/{authTokenId}","method":"put","description":"Update an existing authentication token record using its UUID as path parameter. Allows modification of mutable fields such as revoked status or expiration.\n\nAccess should be restricted to backend systems or admin-level users. The request body must follow the defined update schema and pass all integrity/validation checks before applying the update.\n\nSecurity- and audit-driven, this operation is frequently invoked for token revocation (forcing logout) during security incident response.","summary":"Update authentication token (discussion_board_auth_tokens) by ID","parameters":[{"name":"authTokenId","description":"Target authentication token's UUID for the update operation","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating authentication token (revocation, expiry, etc.)","typeName":"IDiscussionBoardAuthToken.IUpdate"},"responseBody":{"description":"The updated authentication token object","typeName":"IDiscussionBoardAuthToken"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"This DELETE operation hard deletes an authentication token record (discussion_board_auth_tokens) identified by its unique ID (UUID). There are no soft delete fields, so this is a true removal from the data store. Intended for admin-initiated token cleanup or invalidation, not for routine session revocation; use with care and proper audit oversight.","path":"/discussionBoard/admin/authTokens/{authTokenId}","method":"delete","description":"Delete an authentication token record by its UUID, permanently removing it from the discussion_board_auth_tokens table.\n\nThis operation should be used only by authorized admin users for necessary data clean-up, regulatory compliance, or severe incident response. Care must be exercised, as this operation cannot be undone. Hard delete is required as no soft delete schema field exists.\n\nLog all such operations for audit compliance. Errors for non-existent or unauthorized delete attempts should be handled gracefully.","summary":"Permanently delete authentication token (discussion_board_auth_tokens) by ID","parameters":[{"name":"authTokenId","description":"Authentication token's unique UUID to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a paginated list of access log records from the discussion_board_access_logs table. This endpoint supports search, audit, and analytics by allowing admins to review which actors accessed which endpoints at what times, along with the result and client metadata. Exposes read-only access to system administrators and security analysts for compliance verification.","path":"/discussionBoard/admin/accessLogs","method":"get","description":"List access log events for system auditing and compliance review using data in the discussion_board_access_logs table.\n\nIncludes full support for pagination and filtering by actor, role, endpoint, access time, and result fields. Should not expose sensitive actor metadata unless authorized. Subscription to this information is strictly limited to admin-level users due to sensitivity of audit data.\n\nSupports external audit, incident analysis, and routine monitoring. Unauthorized access must be denied with a clear error.","summary":"Paginated endpoint access logs (discussion_board_access_logs)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated access log records result","typeName":"IPageIDiscussionBoardAccessLog"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Advanced PATCH operation for searching and filtering access logs in the discussion_board_access_logs table. Enables security analysts or administrators to find logs for specific actors, time ranges, endpoints, HTTP methods, or result statuses with pagination and complex Boolean filtering logic.","path":"/discussionBoard/admin/accessLogs","method":"patch","description":"Advanced query operation to filter access logs for compliance, audit, and incident response.\n\nAccepts a query object for fine-grained filter/search requirements, enabling investigators to find log events that match criteria such as user, role, endpoint, access window, result, or client metadata.\n\nStrict access control and secure query processing are essential. Pagination is enforced for scalability.","summary":"Advanced search/filter access logs (discussion_board_access_logs)","parameters":[],"requestBody":{"description":"Complex search and pagination criteria for log retrieval","typeName":"IDiscussionBoardAccessLog.IRequest"},"responseBody":{"description":"Filtered, paginated access log result","typeName":"IPageIDiscussionBoardAccessLog"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"This GET operation retrieves a specific access log record from the discussion_board_access_logs table by unique accessLogId (UUID). Used for drilldown into event detail during incident investigation or compliance review. The endpoint exposes access log attributes (actor, endpoint, result, timestamps, etc.) as defined by the schema.","path":"/discussionBoard/admin/accessLogs/{accessLogId}","method":"get","description":"Retrieve a single access log entity by its unique identifier from the discussion_board_access_logs schema.\n\nThe response object reflects the log entry and supports analysis of specific access or event flow. Any attempt to access a non-existent or unauthorized log record must result in an appropriate error response.\n\nOnly available to admin roles given data sensitivity.","summary":"Get single access log by ID (discussion_board_access_logs)","parameters":[{"name":"accessLogId","description":"Unique identifier for the requested access log record (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for a single access log record","typeName":"IDiscussionBoardAccessLog"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"POST operation for creating a new access log record inside the discussion_board_access_logs entity. The request body must contain all required fields for audit-compliant insertion (e.g., actor reference, endpoint, result, timestamp, etc.) following schema. Used by backend events, not typically exposed to users directly. Used for capturing each API call or user event in a tamper-evident manner.","path":"/discussionBoard/admin/accessLogs","method":"post","description":"Create a new access log entry, typically in response to an API invocation or user action.\n\nThis operation must ensure all necessary fields are present and valid (actor, endpoint, http_method, result, etc.), recording full traceability for compliance. Resulting record enables incident investigation and fulfills audit policy.\n\nBackend-centric endpoint; typically reserved for system-level or infrastructure orchestration, not direct user traffic.","summary":"Create new access log entry (discussion_board_access_logs)","parameters":[],"requestBody":{"description":"Access log creation payload for audit/compliance purposes","typeName":"IDiscussionBoardAccessLog.ICreate"},"responseBody":{"description":"Created access log record","typeName":"IDiscussionBoardAccessLog"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"PUT operation updating an existing access log record in discussion_board_access_logs. Used for correction or annotation of log events by admin-level actors. Path parameter designates record to update by unique ID (UUID); request body provides fields and values to mutate, restricted to mutable fields under schema.","path":"/discussionBoard/admin/accessLogs/{accessLogId}","method":"put","description":"Update a single access log by its unique ID, amending properties as per schema for audit reasons.\n\nUpdate constraints enforced by schema and business policy: only admin roles may update, and only permitted fields may be changed in the mutable portion of the log. Response returns the updated record.\n\nAuditing of the update operation itself is required.","summary":"Update an access log record by ID (discussion_board_access_logs)","parameters":[{"name":"accessLogId","description":"UUID of the access log record to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values for access log update operation","typeName":"IDiscussionBoardAccessLog.IUpdate"},"responseBody":{"description":"Updated access log entity","typeName":"IDiscussionBoardAccessLog"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"DELETE operation for hard-removal of an access log record from discussion_board_access_logs identified by UUID. As there is no soft-delete field, this is a true, irreversible deletion and subject to strict controls and double-confirmation for compliance. Only system administrators should be allowed to use this endpoint due to regulatory and forensic requirements impacting audit and evidence chains.","path":"/discussionBoard/admin/accessLogs/{accessLogId}","method":"delete","description":"Delete an access log entry by its unique ID from the discussion_board_access_logs table. This is an irreversible, hard delete and must be used only by authorized admin users (no soft deletion in schema).\n\nAudit logging of the delete operation itself is required. Unauthorized or erroneous deletion attempts must be met with strong error feedback and diagnostics. This operation should be exposed only to the highest trust roles.","summary":"Permanently delete an access log entry by ID (discussion_board_access_logs)","parameters":[{"name":"accessLogId","description":"Access log record's unique UUID for hard deletion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"}]