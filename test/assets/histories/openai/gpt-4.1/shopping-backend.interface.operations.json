[{"specification":"This operation allows for advanced, paginated, and filtered listing of attachments (files/evidence) managed by the AI-powered shopping mall backend. It operates on the shopping_mall_ai_attachments table, which stores all file metadata, URIs, business domain tags, retention, legal, and access control information. Pagination, search by filename, uploader, business domain, retention policy, deletion, or legal hold flags, and ordering are supported. This enables administrators, auditors, sellers, and customers (each within their scope) to retrieve lists of attachments for products, evidence, reviews, compliance, and more.\n\nThis endpoint supports role-based filtering, permissions by attachment domain, and compliance flagging for audits. Sensitive files like evidence, compliance docs, and legal hold assets are only visible to authorized roles and are not returned for non-privileged queries. Attachment retrieval is critical for maintaining the backend's audit compliance, business integrity, and user transparency.\n\nRelated operations include retrieval of a specific attachment (GET /attachments/{attachmentId}), file upload (POST), update (PUT), and deletion (DELETE), each with distinct permission and business rules.","description":"Retrieve a paginated, filtered list of attachments uploaded to the shoppingMallAi platform. This operation interfaces directly with the shopping_mall_ai_attachments table, exposing metadata and business context â€” such as file name, MIME type, business domain (product image, evidence, invoice, etc.), retention policy, uploader, and access control settings.\n\nPagination options support efficient handling of large file volumes, while advanced filter criteria enable searches by filename, uploader, creation period, legal hold status, deletion flag, retention policy, or business domain. Attachments under legal hold, or flagged for compliance, are only shown to those with authorized roles (administrator or specifically allowed business roles).\n\nSecurity enforcement is based on the user's permission scope, as mapped by ACL in the attachments table and backed by the role-based permissions matrix. Users may only see and access files relevant to their business function. Non-authorized access attempts are denied and logged. This endpoint forms the cornerstone of all file management workflows within the system, supporting evidence preservation, compliance audits, and multi-domain asset discovery. Use with caution in compliance/restricted views.","summary":"Search, filter, and paginate all file attachments in the platform with advanced ACL and legal/compliance filtering.","path":"/shoppingMallAi/administrator/attachments","method":"patch","parameters":[],"requestBody":{"description":"Attachment listing and filter/search criteria, including pagination, uploader, domain, retention, and legal compliance status.","typeName":"IShoppingMallAiAttachment.IRequest"},"responseBody":{"description":"A page of attachment summary details that match search, filter, and role-based access criteria.","typeName":"IPageIShoppingMallAiAttachment.ISummary"},"authorizationRole":"administrator","authorizationRoles":["administrator"],"name":"search"},{"specification":"This operation fetches detailed metadata for a specific attachment identified by its UUID. It operates on the shopping_mall_ai_attachments record, returning file information such as name, MIME type, size, uploaded_by, retention policy, business domain, legal and compliance flags, access control, and URIs.\n\nPermissions are enforced based on the user's role and the attachment's ACL. Administrators can retrieve any attachment; sellers and customers are limited to their own assets or those their role is entitled to access.\n\nBusiness-critical use cases include: evidence validation (for reviews/inquiries), product image management, compliance and audit preparation, and user asset management. Legal hold and deleted state handling included. Related operations: download is handled by the returned URI, version/list is handled via another endpoint, and updating uses PUT.\n\nSoft deletion strategy is observed via the deleted flag; hard deletes are only possible via explicit admin action.","description":"Retrieve detailed metadata and access information for a specific attachment based on its ID. This includes file identity, original and storage filenames/URIs, size, upload actor, business context, retention rules, ACL, and legal/deletion flags.\n\nThis endpoint enforces role-based permissions: administrators have universal read, sellers and customers are restricted to their own attachments or those for which they are explicitly granted access. Attachments under legal hold are view-only, immutable until released by compliance. Deleted files return metadata but not URIs for download.\n\nThe operation is critical for previewing, managing, or validating attachment evidence history, particularly in community content moderation, compliance review, and product catalog scenarios. To access file data, the caller should use the file_uri in the returned object. Unauthorized access attempts are denied and logged per compliance rules.","summary":"Retrieve a single attachment's metadata, security settings, and business context by unique attachment ID.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}","method":"get","parameters":[{"name":"attachmentId","description":"Unique identifier of the attachment (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment details, including URI, metadata, and compliance state if accessible.","typeName":"IShoppingMallAiAttachment"},"authorizationRole":"administrator","authorizationRoles":["administrator"],"name":"at"},{"specification":"This operation registers a new attachment (file record) in the system. It operates on the shopping_mall_ai_attachments table and creates a metadata entry for a newly uploaded file, capturing all required fields: original filename, mime type, file URI, size, domain, uploader, retention policy code, ACL, and legal/compliance flags.\n\nPhysical file upload is expected to be handled out-of-band, with this API designed to register metadata and business context after successful storage. The record includes access and retention policies, legal/security flags for compliance, and supports immediate use in downstream business flows (invoices, product images, evidence, etc.).\n\nOnly authorized users may register attachments. The endpoint also observes duplicate and quota rules, audit logging, and business domain integrity (e.g., images for products must be properly mapped, evidence mapped to reviews/inquiries/orders, etc.).","description":"Create a new attachment record, registering essential file metadata, business domain and retention context, compliance flags, ACL/access, and URI details. The operation is used immediately after a successful physical upload (expected to be managed separately by CDN or storage solution).\n\nInput fields include: original file name, storage URI, file size, business domain (product_image, invoice, evidence, etc.), retention code, access permissions (ACL), legal hold or deletion compliance flags, and the uploading user context.\n\nThe operation enforces permissions on who can register and link attachments within each domain (customer/product/compliance/legal/admin), applying all relevant business rules from the attachment schema. Failure scenarios include exceeding per-user/domain quotas, usage of unsupported file types or domains, and legal restrictions. This is a critical aspect of evidence preservation, catalog asset registration, and compliance archival.\n\nDownstream operations such as linking attachments to business objects (products, orders, reviews, etc.) require further separate API use.","summary":"Register a new attachment's metadata, business domain, and access context after file upload.","path":"/shoppingMallAi/administrator/attachments","method":"post","parameters":[],"requestBody":{"description":"New attachment creation (metadata/URI, not physical upload).","typeName":"IShoppingMallAiAttachment.ICreate"},"responseBody":{"description":"The detailed attachment info as registered, including all audit/compliance fields.","typeName":"IShoppingMallAiAttachment"},"authorizationRole":"administrator","authorizationRoles":["administrator","seller"],"name":"create"},{"specification":"This operation registers a new attachment (file record) in the system. It operates on the shopping_mall_ai_attachments table and creates a metadata entry for a newly uploaded file, capturing all required fields: original filename, mime type, file URI, size, domain, uploader, retention policy code, ACL, and legal/compliance flags.\n\nPhysical file upload is expected to be handled out-of-band, with this API designed to register metadata and business context after successful storage. The record includes access and retention policies, legal/security flags for compliance, and supports immediate use in downstream business flows (invoices, product images, evidence, etc.).\n\nOnly authorized users may register attachments. The endpoint also observes duplicate and quota rules, audit logging, and business domain integrity (e.g., images for products must be properly mapped, evidence mapped to reviews/inquiries/orders, etc.).","description":"Create a new attachment record, registering essential file metadata, business domain and retention context, compliance flags, ACL/access, and URI details. The operation is used immediately after a successful physical upload (expected to be managed separately by CDN or storage solution).\n\nInput fields include: original file name, storage URI, file size, business domain (product_image, invoice, evidence, etc.), retention code, access permissions (ACL), legal hold or deletion compliance flags, and the uploading user context.\n\nThe operation enforces permissions on who can register and link attachments within each domain (customer/product/compliance/legal/admin), applying all relevant business rules from the attachment schema. Failure scenarios include exceeding per-user/domain quotas, usage of unsupported file types or domains, and legal restrictions. This is a critical aspect of evidence preservation, catalog asset registration, and compliance archival.\n\nDownstream operations such as linking attachments to business objects (products, orders, reviews, etc.) require further separate API use.","summary":"Register a new attachment's metadata, business domain, and access context after file upload.","path":"/shoppingMallAi/seller/attachments","method":"post","parameters":[],"requestBody":{"description":"New attachment creation (metadata/URI, not physical upload).","typeName":"IShoppingMallAiAttachment.ICreate"},"responseBody":{"description":"The detailed attachment info as registered, including all audit/compliance fields.","typeName":"IShoppingMallAiAttachment"},"authorizationRole":"seller","authorizationRoles":["administrator","seller"],"name":"create"},{"specification":"This operation updates attachment metadata for a specific file record. It operates on shopping_mall_ai_attachments and changes mutable fields such as filename, mime type, access ACL, retention policy, business domain, and compliance/legal flags. Physical file re-upload is not handled here, only metadata/control updates.\n\nAuthors (uploaders), administrators, or authorized legal/compliance officers may update according to ACL and business domain. This operation respects all legal/compliance retention and legal hold rules: files under legal hold may have only permissible metadata edits and cannot be physically destroyed/URI changed.\n\nComprehensive audit logging is enforced for every update, including change history and actor context. Use cases: correcting business context, changing upload references, updating retention policy after legal audit, and fixing access control lists.","description":"Update metadata and business/compliance attributes for an attachment by its unique ID. Modifiable fields are restricted to those allowed under current legal, compliance, and ACL rules. This includes correcting file naming, changing retention periods or domains, and adjusting access controls for compliance or operational needs.\n\nFiles under legal hold may only have administrative notes or specific compliance fields updated, with file deletion or URI changes denied until released. All write operations are comprehensively logged for audit, tying changes to the acting user or admin.\n\nThis operation is regularly used during evidence/document review, catalog maintenance, legal retention cycles, and for handling access escalation or exceptional workflow changes. The record's UUID ensures update targeting, and attempts to modify immutable or protected fields are denied and audited. Business rules strictly enforce domain role boundaries on who may update what (admin, seller, self).\n\nIf the attachment is missing/deleted, a not found error is returned. Soft/hard delete statuses are handled via compliance logic.","summary":"Update attachment metadata, ACL, business/compliance fields for a specific file by ID. Strict legal and audit controls apply.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}","method":"put","parameters":[{"name":"attachmentId","description":"Unique identifier of the attachment (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment metadata/compliance changes. Only mutable fields as allowed by ACL and legal hold.","typeName":"IShoppingMallAiAttachment.IUpdate"},"responseBody":{"description":"Attachment after successful metadata/control update, with full compliance state.","typeName":"IShoppingMallAiAttachment"},"authorizationRole":"administrator","authorizationRoles":["administrator"],"name":"update"},{"specification":"This operation soft-deletes an attachment (file metadata) by marking it as deleted in the shopping_mall_ai_attachments table. If the attachment is under legal hold or required for ongoing compliance, deletion is denied until release. Soft deletion disables download/usage for all but privileged admin users. Hard deletion is permitted by compliance process only, handled outside this flow. This operation is critical for privacy, audit, and legal compliance, especially under right-to-be-forgotten and regulatory requirements.","description":"Soft-delete an attachment by its ID, marking it as deleted for business logic and security purposes. The attachment remains in system records for audit/compliance but is excluded from normal usage or display, except to authorized admin roles.\n\nIf the attachment is under legal hold, or mapped to ongoing compliance/litigation, the system enforces strict prohibition on deletion and returns an error prompting compliance intervention. Audit logs are created for every deletion attempt with full context for future investigation.\n\nSoft-deleted attachments cannot be restored or referenced by non-admin workflows. Deletion is irreversible unless authorized via compliance exception (outside this endpoint). Operations that require hard deletion are managed via separate, privileged flows for compliance/legal actions. Attempting deletion against already deleted or non-existent files responds with a not found or already deleted error.","summary":"Soft-delete an attachment record by ID for compliance, privacy, and lifecycle management. Legal hold enforcement applies.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}","method":"delete","parameters":[{"name":"attachmentId","description":"Unique identifier of the attachment (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"administrator","authorizationRoles":["administrator"],"name":"erase"},{"specification":"This operation searches and paginates the immutable version history of a given attachment. It operates on the shopping_mall_ai_attachment_versions table, listing all historical snapshots/versions of a specified file. Returns version info (version number, filenames/URIs, file size, timestamp, diff comment, deletion flag) for each version. Only authorized users with access to the base attachment may use this endpoint. Compliance, evidence, and rollback/restore use cases are supported.","description":"List the historical versions (snapshots) of an attachment identified by its ID, supporting compliance review, evidence audit, chain-of-custody validation, or administrative inspection. Each version represents a complete file variation for the life of the attachment, including all metadata and content changes tracked by version number.\n\nPagination and sorting are supported to enable manageable review of version history for attachments with many changes. Only users with access rights to the base attachment can call this endpoint, ensuring compliance and privacy.\n\nThis operation supports legal and regulatory requirements for evidence preservation, as well as business needs for operational traceability. Non-authorized access attempts are denied and logged for security review. Related operations include fetching attachment metadata/ACL (GET /attachments/{attachmentId}), and restoring versions, which are handled elsewhere.","summary":"List and paginate attachment version history snapshots for a specific file by attachment ID.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentVersions","method":"patch","parameters":[{"name":"attachmentId","description":"Attachment ID (UUID) whose versions are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Version search, pagination, and filter criteria (by version, time, deletion).","typeName":"IShoppingMallAiAttachmentVersion.IRequest"},"responseBody":{"description":"Paged list of attachment version metadata for audit, review, or traceability.","typeName":"IPageIShoppingMallAiAttachmentVersion.ISummary"},"authorizationRole":"administrator","authorizationRoles":["administrator"],"name":"searchVersions"},{"specification":"This operation retrieves the full metadata/details for a specific version of an attachment file, identified by its version UUID and parent attachment. It operates on the shopping_mall_ai_attachment_versions table, returning all metadata fields for the version â€” including version number, file URI, size, diff comment, and deletion status.\n\nRole-based access is strictly enforced. Administrators or the owning uploader may access all versions; other roles are restricted as per business domain policy. Deleted or redacted versions are marked and may return limited metadata, with file URIs only returned when accessible.\n\nThe primary business case is regulatory evidence tracing, rollback/restore, content verification, and compliance audits. Related endpoints: list all versions (PATCH), update/restore to a version (handled elsewhere).","description":"Fetch a specific attachment version's full metadata by its version ID (and its parent attachment). Returns all audit, version history, compliance, and business context fields necessary for evidence validation, rollback, or regulatory review.\n\nRole-based access controls protect sensitive or deleted versions, showing only allowed metadata or returning error for unauthorized attempts. The operation is essential in forensic/evidentiary scenarios, change tracking, and ensuring operational traceability for file changes.\n\nAttempting to access a non-existent, non-authorized, or redacted version returns error or limited information as per compliance policy.","summary":"Get full metadata and audit fields for a specific version of an attachment file.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentVersions/{attachmentVersionId}","method":"get","parameters":[{"name":"attachmentId","description":"Parent attachment ID (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"attachmentVersionId","description":"Target version ID (UUID) of the attachment version.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full metadata, audit and compliance context of the requested attachment version.","typeName":"IShoppingMallAiAttachmentVersion"},"authorizationRole":"administrator","authorizationRoles":["administrator"],"name":"atVersion"},{"specification":"This operation registers a new version of an attachment for a given file. It operates on the shopping_mall_ai_attachment_versions table, linking a new immutable version (with new URI/filename, metadata, diff comment, and compliance fields) to the parent attachment. Used in scenarios where a file is re-uploaded for correction, update, or as part of audit/evidence flow.\n\nOnly the original uploader, authorized administrator, or compliance/legal role can register a new version. Creating a version does not overwrite prior versions; full chain of custody and evidence audit is guaranteed.\n\nInput fields include file URI, file size, version number, modifier (user), and diff comment explaining the change. The operation enforces all business rules for attachment and version domain, audit context, and compliance requirements. Failure scenarios include unauthorized version changes, violations of legal hold, or attempts on deleted/locked attachments. All changes are audit logged per system compliance.","description":"Register a new version of an attachment file, creating an immutable version record with proper audit and compliance context. New versioning is typically initiated after a physical upload or when an administrator, original uploader, or compliance officer needs to update/correct the file while preserving the chain of custody.\n\nInput includes the file URI, size, modifier (user), version number, and a comment describing changes/differences vs. previous version. The operation enforces version increment integrity, attachment ACL, and legal hold compliance.\n\nOnly applicable roles may register a version for attachments they have rights to. Business and regulatory rules dictate handling of active, deleted, or legally-restricted files. The new version is immutably appended â€” prior versions remain accessible for authorized audit. Use cases: correction after error, legal evidence submission, catalog asset update.\n\nAttempts to update a deleted, locked, or unauthorized file return compliance or ACL error.","summary":"Register a new version for an attachment (file), logging reason and compliance audit context.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentVersions","method":"post","parameters":[{"name":"attachmentId","description":"Attachment UUID for which the version is being registered.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New file version's metadata, URI, reason, compliance context.","typeName":"IShoppingMallAiAttachmentVersion.ICreate"},"responseBody":{"description":"Attachment version as newly registered with audit details.","typeName":"IShoppingMallAiAttachmentVersion"},"authorizationRole":"administrator","authorizationRoles":["administrator"],"name":"createVersion"},{"specification":"Updates a specific version of an attachment file's metadata or relevant audit information. This operation is associated with the shopping_mall_ai_attachment_versions table, which maintains immutable version histories for all uploaded files within the Attachment domain. Use this endpoint to update version metadata (e.g., diff_comment) or status (such as deletion flag), strictly adhering to business logic around legal holds and evidence. The update does not affect the physical file content but may be used to indicate version supersession, add explanatory notes, or record administrative/legal actions.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentVersions/{attachmentVersionId}","method":"put","description":"Update metadata or audit information for a specific attachment version stored in the shopping_mall_ai_attachment_versions table. Each attachment version record contains details about who modified the version, the version's storage URI, file size, created time, and optionally, a diff_comment explaining modifications. This operation does not modify the file but augments metadata for compliance, audit trail, or legal chain-of-custody requirements. \n\nAuthorization is typically required for administrators or the original uploader, as modification may carry legal or regulatory implications (especially if the file version is under legal hold). The endpoint assures traceability, role-based updates, and records changes for transparent auditability. Validation ensures only permissible fields are updated and all updates are recorded with timestamps and appropriate actor references.","summary":"Update metadata for a specific attachment version (Attachment schema)","parameters":[{"name":"attachmentId","description":"Attachment unique identifier, references shopping_mall_ai_attachments.id","schema":{"type":"string","format":"uuid"}},{"name":"attachmentVersionId","description":"Attachment version unique identifier, references shopping_mall_ai_attachment_versions.id","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"AttachmentVersion metadata update information (e.g., diff_comment, deleted flag)","typeName":"IAttachment.AttachmentVersion.IUpdate"},"responseBody":{"description":"Updated attachment version details reflecting new metadata or status.","typeName":"IAttachment.AttachmentVersion"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (soft-deletes) a specific attachment version from the shopping_mall_ai_attachment_versions table. This operation is critical for compliance, legal requests (such as GDPR or evidence redaction), or to flag superseded or problematic file versions. While the record is not physically deleted to ensure auditability and historical traceability, the deleted flag and deleted_at timestamp are updated, and version availability is restricted in user-facing experiences. Entity relationship integrity and legal hold rules are strictly enforced.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentVersions/{attachmentVersionId}","method":"delete","description":"Soft-delete an attachment version, updating its deleted flag and deleted_at timestamp in the shopping_mall_ai_attachment_versions table. The operation preserves the historic record for regulatory and legal compliance while excluding it from retrieval or use in downstream business contexts. \n\nOnly administrators or actors with explicit privilege can perform this action, particularly as legal holds or compliance locks may prevent modification/deletion in certain cases. Attempts to delete a version under legal hold must result in a permission error, and all actions must generate an immutable audit trail for incident review.","summary":"Soft-delete an attachment version (Attachment schema) for compliance/audit.","parameters":[{"name":"attachmentId","description":"Attachment unique identifier, references shopping_mall_ai_attachments.id","schema":{"type":"string","format":"uuid"}},{"name":"attachmentVersionId","description":"Attachment version unique identifier, references shopping_mall_ai_attachment_versions.id","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a paginated and filterable list of all business links associated with a particular attachment. This endpoint accesses the shopping_mall_ai_attachment_business_links table, allowing users (typically admins or uploaders) to discover every business domain usage of a given file (e.g., linked to a specific product, order, review, evidence submission, or compliance document). Business links provide a clear map of where and how files are leveraged within the platform, supporting audit, legal, and operational transparency.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentBusinessLinks","method":"patch","description":"Search and retrieve a paginated list of all business links (shopping_mall_ai_attachment_business_links) referencing a specific attachment. Supports advanced filters by business domain, target_id, and other attributes, as well as pagination and sorting. The operation is crucial for business/administrative auditing (finding evidence use, tracing compliance assets), supporting file deletion impact assessment, and regulatory reviews.\n\nUser access is typically restricted to roles with administrative or direct business ownership; unauthorized users may not retrieve business links for security and privacy compliance. The returned list details which products, orders, or evidence workflows each attachment is used in, enabling informed business decisions, compliance verification, and data governance.","summary":"Search business links for a specific attachment (AttachmentBusinessLinks schema)","parameters":[{"name":"attachmentId","description":"Attachment file unique identifier, references shopping_mall_ai_attachments.id","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Business link search and filter criteria (business domain, target id, pagination, etc.)","typeName":"IAttachment.AttachmentBusinessLink.IRequest"},"responseBody":{"description":"Paginated business link list matching search filters, including usage context and metadata.","typeName":"IPageIAttachment.AttachmentBusinessLink"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves details of a specific business link record between an attachment file and a target entity (product, order, review, etc). This operation targets the shopping_mall_ai_attachment_business_links table, providing a precise record of where (domain and target_id) the file is linked and who created the link. Supports comprehensive auditing by exposing all attributes, creation timestamp, and actor information for evidence/review tasks.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentBusinessLinks/{attachmentBusinessLinkId}","method":"get","description":"Get full details of a business link between a file and a business record, e.g., to discover which product/order/review/evidence a file is associated with, and how/why it was linked. Each business link record provides domain context, business object type, creator, and timestamp, enabling full auditability and compliance analysis.\n\nThis endpoint enforces access controlâ€”typically only administrators or authorized business owners may query explicit usage chains for files. The operation assists in fulfilling data subject access, evidence review, or business mapping/compliance requests.","summary":"Get details of an attachment-business link (AttachmentBusinessLink schema)","parameters":[{"name":"attachmentId","description":"Attachment unique identifier, references shopping_mall_ai_attachments.id","schema":{"type":"string","format":"uuid"}},{"name":"attachmentBusinessLinkId","description":"Attachment business link unique identifier, references shopping_mall_ai_attachment_business_links.id","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the business link including domain, target object id, creator, and timestamp.","typeName":"IAttachment.AttachmentBusinessLink"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new association record in shopping_mall_ai_attachment_business_links, linking an attachment file to a target business entity (such as a product, order, review, evidence, or compliance document). This endpoint is used after a file is successfully uploaded to establish the file's official business usage within platform workflows. All link creation is validated for referential integrity, permission context, and application-specific rules regarding domain and access. Critical for audit, legal traceability, and correct file usage mapping.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentBusinessLinks","method":"post","description":"Create a new business-domain association (link) between a file and a specific business object (e.g., product, order, evidence). This appends an entry in shopping_mall_ai_attachment_business_links, enabling subsequent business processes to leverage the file as part of critical workflows, with audit and referential integrity.\n\nActors must be authorized administrators or process owners. The request body must specify the linking domain (e.g., product, order, review), target object id, linkage initiator (linked_by), and any context required by business rules. All creations are tracked in audit trails for compliance/legal use.","summary":"Create a business link for an attachment (AttachmentBusinessLink schema)","parameters":[{"name":"attachmentId","description":"Attachment unique identifier, references shopping_mall_ai_attachments.id","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information needed to create a new attachment-business association (domain, target, actor, etc.)","typeName":"IAttachment.AttachmentBusinessLink.ICreate"},"responseBody":{"description":"Created business link record, including target, domain, actor, and creation timestamp.","typeName":"IAttachment.AttachmentBusinessLink"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates fields in an existing shopping_mall_ai_attachment_business_links record. Typical use cases include correcting target domains, updating target_id if business workflow corrected, or amending creator information through legal or administrative action. Strict validation is required to prevent breaking audit or traceability requirements. This operation does not move file content or alter attachment, but only changes business linkage metadata.","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentBusinessLinks/{attachmentBusinessLinkId}","method":"put","description":"Update domain, target, or actor information for an existing attachment-business link record. Responsible for fixing linkage errors, updating to match new business context (e.g., after object merge), or to reflect administrative reviews. All updates are subject to strict audit logging and legal/permission checks; only authorized administrators may perform these actions, especially in compliance or evidence scenarios.\n\nNo attachment file is changed; this is pure metadata relinking. Change records are maintained for referential integrity and business/legal auditability.","summary":"Update fields of an attachment-business link (AttachmentBusinessLink schema)","parameters":[{"name":"attachmentId","description":"Attachment unique identifier, references shopping_mall_ai_attachments.id","schema":{"type":"string","format":"uuid"}},{"name":"attachmentBusinessLinkId","description":"Attachment business link unique identifier, references shopping_mall_ai_attachment_business_links.id","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updates to domain/target/actor context of the link record; full compliance validation is enforced.","typeName":"IAttachment.AttachmentBusinessLink.IUpdate"},"responseBody":{"description":"Updated metadata for the business link, including correct domain, target, or actor references.","typeName":"IAttachment.AttachmentBusinessLink"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (soft-deletes) a business-domain link between an attachment file and a target entity. The relevant business link entry in shopping_mall_ai_attachment_business_links is flagged as logically deleted but retained for audit/compliance. Used for business un-link, mistaken association correction, or legal/retention withdrawals. Deletion actions must preserve system auditability, comply with legal/retention holds, and trigger related business flow (e.g., if a product is disassociated from an image, all such links are reviewed).","path":"/shoppingMallAi/administrator/attachments/{attachmentId}/attachmentBusinessLinks/{attachmentBusinessLinkId}","method":"delete","description":"Soft-delete a business link between a file and business object, updating the deleted flag of the record. This preserves the business/audit trail, ensuring traceability for legal, evidence, or process rollback requests, while preventing future reference/use of the file in that business workflow. The file itself remains intact unless separately deleted, but the link dissolves its declared business role.\n\nOnly administrators may delete these business links, especially when legal, compliance, or data privacy issues are involved. If the link is subject to legal hold, protect against deletion and provide actionable errors. All deletion attempts are audited to support operational and legal reviews.","summary":"Soft-delete an attachment-business link for audit and compliance purposes","parameters":[{"name":"attachmentId","description":"Attachment unique identifier, references shopping_mall_ai_attachments.id","schema":{"type":"string","format":"uuid"}},{"name":"attachmentBusinessLinkId","description":"Attachment business link unique identifier, references shopping_mall_ai_attachment_business_links.id","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Create a new customer account on the shoppingMallAi platform. Invoked when a user completes the registration process, this endpoint accepts email, password (which is hashed as password_hash per schema), and nickname fields, as well as optional mobile number and external OAuth provider/provisioning information. Email uniqueness is strictly enforced at the schema level, and business rules require email verification. Upon successful registration, issues a JWT token encapsulated for both immediate authentication and future session management, populating the setHeaders field for client-side (or SDK) automated header assignment. Directly references columns: email, password_hash, nickname, mobile, oauth_provider, provider_account_id from the shopping_mall_ai_customers table. This endpoint does not handle profile update or advanced account operations â€” strictly registration/signup flow only.","description":"This API operation enables new users to create a customer account by submitting valid email, password (for password_hash storage), and nickname, with optional mobile and OAuth provider data. The process checks the \"email\" for uniqueness and formats, hashes and saves the \"password_hash\" securely, and enforces all business logic constraints defined in the shopping_mall_ai_customers schema. It does not overlap with seller or administrator creation, and segregates accounts strictly. Upon success, the system issues a JWT access token using the email and id fields, and returns a response including a setHeaders object designed for Authorization header assignment. Security: registration is public but underlying data is protected, hashes never exposed. Errors include duplicate email, invalid data formats, or rejected business conditions (see schema comments). Related endpoints: customer login, email verification, and post-registration profile management flows. Edge case: If email partially matches but fails format/business rule, a granular error is returned.","summary":"Create a new customer account and issue JWT token; uses shopping_mall_ai_customers.","parameters":[],"requestBody":{"description":"Information required to register a new customer account.","typeName":"IShoppingMallAiCustomer.SignUp"},"responseBody":{"description":"Account creation result. Contains JWT token in setHeaders for client use.","typeName":"IShoppingMallAiCustomer.AuthResult"},"authorizationRole":null,"name":"signUp","path":"/auth/customer/register","method":"post"},{"specification":"Authenticate customer users through standard email/password login. Accepts credentials, verifies them against \"email\" and \"password_hash\" columns on the shopping_mall_ai_customers table, and issues JWT tokens upon success. Supports integration of additional logic for checking account status and login policy (e.g., status = 'active', not suspended or withdrawn). Returns a signed JWT in the response for use in subsequent authenticated requests. Related strictly to the customer authentication process, not sellers or admins. Errors include invalid credentials or status, account not found, and non-active statuses. Security: password handled as a hash, tokens use user id, role, permissions, and issued timestamps per JWT best practices. Related to account registration and token validation.","description":"This operation handles customer login by verifying the submitted email and password against the fields in shopping_mall_ai_customers. On success, a JWT token is issued, contained in the Authorization header for seamless API use. The request body includes email and password; the server hashes and matches password_hash internally. It will fail if the customer is not found, password does not match, or the status is not 'active'. This separates customer authentication from other role types in the schema. Provides all security and audit logging per business rules. No profile data or management is exposed. Closely related endpoints: registration and token validation. Edge cases: locked or suspended accounts are rejected with actionable errors.","summary":"Authenticate customer (login); issues JWT token using shopping_mall_ai_customers fields.","parameters":[],"requestBody":{"description":"Customer login credentials for authentication.","typeName":"IShoppingMallAiCustomer.SignIn"},"responseBody":{"description":"Authentication result with JWT Authorization token.","typeName":"IShoppingMallAiCustomer.AuthResult"},"authorizationRole":null,"name":"signIn","path":"/auth/customer/login","method":"post"},{"specification":"Validate a JWT access token for customer users. This operation decodes and verifies the submitted JWT for format, expiration, and signature, referencing the associated shopping_mall_ai_customers record for identity and status checks (e.g., status = 'active', not 'withdrawn' or 'banned'). Does not retrieve further profile data or perform permission checks beyond token validity and user status. Stateless operation â€” does not mutate DB unless logging token usage. Used for confirming authentication status client-side or for session persistence checks. Related to sign-up and login operations. Errors returned for malformed, expired, or rejected tokens; must not leak sensitive error details. Security: JWT checked against customer id, role, issued/expiration, and signature using application secret. Does not overlap with sellers or administrators. Strictly for customers based on schema.","description":"Verifies the provided JWT token for a customer, ensuring validity and corresponding user status ('active') in shopping_mall_ai_customers. On successful validation, returns token status/claims as appropriate for downstream business logic. Does not provide full user info or access management features, just token validation. May perform core business checks (status only). Edge case: token is valid but user is deactivated or deleted â€” operation fails with clear error. Used by mobile/web clients to check authentication persistence.","summary":"Validate JWT for customer; ensures shopping_mall_ai_customers status active.","parameters":[],"requestBody":{"description":"JWT token for customer validation.","typeName":"IShoppingMallAiCustomer.ValidateToken"},"responseBody":{"description":"Token validation result.","typeName":"IShoppingMallAiCustomer.ValidateResult"},"authorizationRole":null,"name":"validateToken","path":"/auth/customer/validate","method":"post"},{"specification":"Change password for authenticated customer. Requires current password for confirmation, then allows update of \"password_hash\" to a bcrypt/argon2 hash of the new password. Authenticated endpoint (customer role only), operates strictly on the customer's own record in shopping_mall_ai_customers. Validates old password before update, and writes updated \"password_hash\" with secure hashing. Enforces business logic and audit trail, logging both success and errors; responds with minimal status information on success. Does not overlap with profile update or full account management â€” strictly password change. Security: new password is never stored or logged in plain text. Errors for incorrect current password, failed hash update, or forbidden operation due to status. Does not allow operation if customer status is not 'active'.","description":"Provides password change functionality for authenticated customer users. The endpoint accepts current and new passwords, verifies the current password (matching against password_hash for the requester), and updates to a newly hashed password if validation passes. Uses, audits, and references the shopping_mall_ai_customers table's security and business logic. Cannot be used to change password for other customers or for non-customer users. Handles all error cases clearly, including incorrect password and forbidden status. Designed per security best practices. Related operations: sign-in, registration, account management. No profile fields are altered (strictly password_hash column).","summary":"Change customer password with verified current password; operates on shopping_mall_ai_customers.","parameters":[],"requestBody":{"description":"Request for password change: current and new password required.","typeName":"IShoppingMallAiCustomer.ChangePassword"},"responseBody":{"description":"Password change outcome (success status only).","typeName":"IShoppingMallAiCustomer.ChangePasswordResult"},"authorizationRole":"customer","name":"changePassword","path":"/auth/customer/password","method":"put"},{"specification":"For sellers on the shoppingMallAi platform, this API endpoint enables secure registration, allowing sellers to create an account using their email and password, as defined in the shopping_mall_ai_sellers Prisma model. It ensures the registration process captures required identity, contact, and verification-related fields, enforcing uniqueness for both email and business registration information. Upon successful registration, the API issues JWT tokens for seller authentication and sets response headers for downstream requests. It references the 'email', 'password_hash', and 'business_registration_number' fields in shopping_mall_ai_sellers, following strict business and regulatory onboarding logic. Errors will be returned if uniqueness, format, or policy rules are violated. This endpoint is foundational for all seller onboarding automation and must comply with audit and compliance requirements.","description":"This registration API endpoint enables a new seller to create an account on the shoppingMallAi platform. It references the shopping_mall_ai_sellers Prisma table, which includes critical fields like 'email', 'password_hash', 'business_registration_number', and verification status. \n\nCore authentication is handled by capturing and securely encoding the password into 'password_hash'; JWT tokens are issued for session initiation, included in the 'setHeaders' field of the response.\n\nThis endpoint is essential to the seller onboarding flow: ensuring new sellers have unique email and regulatory business credentials, and are onboarded in a compliant manner. Only after registration and verification can sellers list products or initiate business operations.\n\nSecurity is enforced by validating data against password/email policies and storing all credentials securely per compliance mandates. Business logic requires all onboarding actions to be auditable.\n\nIt is a prerequisite for login, onboarding, and advanced seller flows. Related operations include signIn, validateToken, and changePassword for sellers.","summary":"Register a new seller account (shopping_mall_ai_sellers) and issue JWT tokens.","parameters":[],"requestBody":{"description":"Seller registration information (email, password, business credentials).","typeName":"ISellerAuthRegisterRequest"},"responseBody":{"description":"Registration result with issued JWT tokens and setHeaders field for Authorization.","typeName":"ISellerAuthWithSetHeaders"},"authorizationRole":null,"name":"signUp","path":"/auth/seller/register","method":"post"},{"specification":"This login API endpoint authenticates a seller using their credentials (email and password) from the shopping_mall_ai_sellers table. Upon successful authentication, JWT tokens are issued for protected resource access. The operation strictly references 'email' and 'password_hash' fields, enforcing matching and verifying compliance rules. The endpoint is stateless but supports session re-establishment through JWT issuance. This is central to all microservice and business action flows for sellers.","description":"This login API enables sellers to securely authenticate using the email and password fields as defined in shopping_mall_ai_sellers. The system securely matches the input password against the stored 'password_hash', issuing access and refresh tokens upon success.\n\nJWT token issuance provides authenticated access for API operations, enabling role-based authorization for sensitive product, order, and dashboard endpoints.\n\nBusiness context: Required for all seller operations, including listing products, managing orders, and accessing analytics. It is the entry point for session re-creation if prior tokens expire or logout occurs.\n\nSecurity: All login attempts are audited. Repeated failed attempts trigger fraud monitoring workflows.\n\nRelated operations include registration (signUp), token validation (validateToken), and password change flows.","summary":"Authenticate a seller by email and password (shopping_mall_ai_sellers) and issue JWT tokens.","parameters":[],"requestBody":{"description":"Seller login credentials (email, password).","typeName":"ISellerAuthLoginRequest"},"responseBody":{"description":"Login result including access and refresh tokens for the seller role.","typeName":"ISellerAuthTokenResponse"},"authorizationRole":null,"name":"signIn","path":"/auth/seller/login","method":"post"},{"specification":"This endpoint validates the current JWT token for the seller role, ensuring session integrity and returning authentication status. Relies on token payload integrity and matches the authenticated identity to the seller's actual record in shopping_mall_ai_sellers. Used by client apps to check session validity and by backoffice processes to authorize seller-specific actions.","description":"Validates an existing JWT token for a seller, referencing the shopping_mall_ai_sellers table to confirm session legitimacy and permission level. Confirms that the token payload matches a valid, non-withdrawn seller identity and returns session authentication status.\n\nThis operation is critical for both front-end session checks and backend API gateway authorizations, ensuring no orphaned or tampered tokens are in use.\n\nSecurity: Each validation is logged for audit. Business restrictions on suspended or unverified sellers are enforced here.\n\nThe operation is linked to token-based authentication and the broader security framework, ensuring proper gating of all seller actions.\n\nRelated operations include signIn, signUp, and password change endpoints.","summary":"Validate a seller JWT token using identity from shopping_mall_ai_sellers.","parameters":[],"requestBody":{"description":"Bearer token provided in request for validation.","typeName":"IJwtTokenValidationRequest"},"responseBody":{"description":"Token validation result and authenticated seller status.","typeName":"ISellerAuthTokenValidationResponse"},"authorizationRole":null,"name":"validateToken","path":"/auth/seller/validate","method":"post"},{"specification":"Enables a seller to securely change their password, validating the old password hash before updating to a new encoded password. This endpoint operates on the shopping_mall_ai_sellers.password_hash field and is only accessible to authenticated sellers. All changes are logged for audit, and the operation ensures that only active sellers (not suspended, withdrawn, or unverified) can perform password updates. If the current password is incorrect or does not match, the request is rejected.","description":"Allows sellers to change their password in a secure, authenticated context with full auditing. The current password is validated against the shopping_mall_ai_sellers.password_hash field; a new password is encoded and persisted on successful verification.\n\nJWT session logic ensures only the token-owning seller may invoke this operation, and policy mandates session revocation and token renewal after password changes.\n\nPassword change actions are critical to account security for sellers and may be required by administrators following certain fraud/risk events. This endpoint works in tandem with registration, login, and recovery workflows.\n\nAll actions are logged for audit and compliance tracking. Failed update attempts increment security counters for fraud analysis.\n\nRelated endpoints: signUp, signIn, validateToken, and (if present) password reset/verification flows.","summary":"Change password for an authenticated seller (shopping_mall_ai_sellers).","parameters":[],"requestBody":{"description":"Password change request including current and new password.","typeName":"ISellerAuthPasswordChangeRequest"},"responseBody":{"description":"Result of password change for seller account.","typeName":"ISellerAuthPasswordChangeResponse"},"authorizationRole":"seller","name":"changePassword","path":"/auth/seller/password","method":"put"},{"specification":"This operation allows an administrator to register a new administrative account on the shoppingMallAi platform. Registration requires a unique email and password_hash, and sets the administrator's display_name, status (usually 'active' or 'pending'), and role ('superadmin', 'reviewer', etc). The administrator table enforces strict uniqueness of email and display_name, with hashed password format. This endpoint is essential for onboarding a new system operator with full or limited privileges. This maps closely to the 'shopping_mall_ai_administrators' table, leveraging email, password_hash, display_name, status, and role as required fields. Audit logs and compliance records reference this endpoint for new admin account creation.","description":"This endpoint is used to create a new administrator account, as recorded in shopping_mall_ai_administrators. The administrator model enforces full uniqueness for email (required, used for login) and display_name (for UI/audit). The password_hash column stores passwords in hashed form (no plain text), and status must be set to a valid value per business enum ('active','suspended','withdrawn','banned'), with role specifying access scope/level. Upon registration, a new administrative JWT is issued, with setHeaders: { Authorization: string } included in the response for automated authentication by SDK clients. Security mandates enforce password policy, status audit, admin onboarding flow, and triggers role-based permissions assignment. This registration is public (no prior authentication needed), but may be subject to additional review, per business rules. Related operations include login (signIn), token validation, and password change for admin lifecycle.","summary":"Register a new administrator account (shopping_mall_ai_administrators) and issue JWT credentials.","parameters":[],"requestBody":{"description":"Registration details for a new administrator. Requires email, password_hash, display_name, status, and role.","typeName":"IAdministrator.ICreate"},"responseBody":{"description":"Detailed administrator profile with setHeaders containing JWT Authorization string for further calls.","typeName":"IAdministrator.IWithAuthHeaders"},"authorizationRole":null,"name":"signUp","path":"/auth/administrator/register","method":"post"},{"specification":"This operation allows an administrator with valid credentials to authenticate (login) and obtain a JWT for subsequent privileged API access. The administrator must provide their email and password (hashed client-side), which will be verified against shopping_mall_ai_administrators records. Only accounts with status 'active' are permitted to login; all credential attempts are logged for audit. The email and password_hash are matched, then the authorization JWT is issued for session. This endpoint does not require authentication.","description":"Administrator login endpoint, validating credentials against shopping_mall_ai_administrators. Accepts email and password (hashed) in the request body. Only 'active' administrators can succeed. Issues JWT credentials on success. Logs all attempts for compliance and suspicious activity monitoring. Ensures strong authentication per security policy. Related to register (signUp), token validation, and password change endpoints.","summary":"Authenticate administrator and issue JWT credentials (shopping_mall_ai_administrators).","parameters":[],"requestBody":{"description":"Administrator login info (email, password_hash).","typeName":"IAdministrator.ILogin"},"responseBody":{"description":"Administrator auth info with JWT and profile fields.","typeName":"IAdministrator.IWithAuthHeaders"},"authorizationRole":null,"name":"signIn","path":"/auth/administrator/login","method":"post"},{"specification":"This operation validates the JWT access token presented by an administrator, confirming its authenticity, expiration status, and role claim. It is used for session keep-alive, authorization checks, and re-verification on sensitive privileged actions. Relates to the shopping_mall_ai_administrators table to resolve user details from the token payload. Does not require a request body, but expects the JWT in the Authorization header or appropriate context. No authentication required on this call: the input is the JWT token, which is validated regardless of prior session state. If valid, returns administrator info and status. If invalid, returns an error.","description":"Validates an administrator's JWT access token for structural and signature correctness, expiration, and role/permission claims according to shopping_mall_ai_administrators. Used for session status checks, ensuring that administrator has not been disabled or banned since issuance. If token is valid, returns admin info; otherwise, returns an authentication error. Related to signIn, signUp, and password change for admin.","summary":"Validate administrator JWT token (shopping_mall_ai_administrators).","parameters":[],"requestBody":null,"responseBody":{"description":"Administrator profile and authentication/role info if JWT token is valid.","typeName":"IAdministrator.IValidateResult"},"authorizationRole":null,"name":"validateToken","path":"/auth/administrator/validate","method":"post"},{"specification":"Allows an authenticated administrator to change their password by supplying the current password and a new password, both hashed. This updates the password_hash field on their shopping_mall_ai_administrators record. Enforces password policy and logs the update for audit. Requires proper authorization: only the authenticated admin can change their own password. If successful, password_hash is updated and the change is snapshotted in audit trail for compliance.","description":"Enables an administrator to change their password. The request body requires current password and new password (both pre-hashed per policy), which will update the password_hash on their shopping_mall_ai_administrators record. The operation enforces strong password policy, logs all changes for compliance, and can only be performed by a currently authenticated administrator. Failure to authenticate or meet policy returns error. Related to signIn, signUp, and token validate endpoints. Operations are atomic and protected by strict audit trails in DB schema.","summary":"Change the password of the authenticated administrator (shopping_mall_ai_administrators).","parameters":[],"requestBody":{"description":"Current and new password information to update administrator password.","typeName":"IAdministrator.IChangePassword"},"responseBody":{"description":"Confirmation and updated administrator profile after password change.","typeName":"IAdministrator.IProfile"},"authorizationRole":"administrator","name":"changePassword","path":"/auth/administrator/password","method":"put"}]