[{"specification":"This operation retrieves a list of all channels defined in the AIMall system. It directly interfaces with the aimall_backend_channels table, fetching primary and normalized channel attributes such as id, code, name, enabled status, and timestamps. This operation is essential for platform-wide channel management, allowing administrators and developers to enumerate the available content or sales channels. The response supports UI construction for administration panels, cross-channel product assignment, and system routing decisions. This operation does not require any parameters as it returns all channels.","path":"/aimall-backend/administrator/channels","method":"get","description":"Retrieve all defined channels from the platform for management and presentation purposes. This operation exposes the current state of every channel in the system, including unique identifiers, channel codes, display names, enabled flags, and audit timestamps. It closely aligns with the channel governance requirements of the system, preserving strict normalization and avoiding denormalized or computed values.\n\nSecurity-wise, this endpoint is typically reserved for administrators, as channels directly affect content delivery and routing within the system. However, other elevated roles involved in configuration or reporting may also be granted access based on the business’s access control policy. The response will present the channel entity structure as defined in the Prisma schema, enabling the administrator to view all necessary fields for each channel, and can be used in conjunction with creation, update, and section management APIs for a complete channel administration workflow.\n\nError scenarios include unauthorized access, database connectivity issues, or inconsistent/incomplete entities. Validation is unnecessary for this operation as no parameters are involved.","summary":"Retrieve all platform channels (aimall_backend_channels) for administrative use.","parameters":[],"requestBody":null,"responseBody":{"description":"List of all channel records from aimall_backend_channels.","typeName":"IPageIAimallBackendChannel"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation supports advanced searching and filtering of AIMall channels as stored in the aimall_backend_channels table. It allows administrators or system operators to find channels by various criteria (such as code, name, enabled status, and creation/update timestamps). It is designed to handle complex listing requirements—such as paginated results, search by partial name/code, and sorting—needed for large-scale or dynamic environments.","path":"/aimall-backend/administrator/channels","method":"patch","description":"Search and filter channels stored in the AIMall backend, providing advanced capabilities for pagination, sorting, and multi-condition queries. This supports administrators or other privileged users in quickly locating channels of interest for further actions (e.g., activation, configuration, section assignment). \n\nThis operation improves on the basic list operation by providing flexibility for frontend interfaces with large/complex channel datasets, supporting search forms, autocomplete, keyword filtering, and status-based filtering. Security considerations include limiting access to roles responsible for channel configuration. The operation's request body accepts a structured search/filter request following the conventions for index/search endpoints. The interaction is closely tied to the underlying aimall_backend_channels schema, and surfaces only normalized, persisted properties. API clients must expect pagination and sort metadata, and validate that only permitted roles may conduct arbitrary queries on this resource.","summary":"Advanced search/filter with pagination for platform channels (aimall_backend_channels).","parameters":[],"requestBody":{"description":"Search and pagination/filter criteria for channels.","typeName":"IAimallBackendChannel.IRequest"},"responseBody":{"description":"Paginated filtered list of channel records.","typeName":"IPageIAimallBackendChannel"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation retrieves the details of a single platform channel by unique identifier (UUID). It queries the aimall_backend_channels table by id, returning all normalized properties of the selected channel. The operation is essential for management dashboards, drill-down interfaces, and any workflow that requires full state for a particular channel (e.g., preparing for updates, auditing settings, or managing related sections/assignments).","path":"/aimall-backend/administrator/channels/{channelId}","method":"get","description":"Get full detail of a particular channel from the AIMall platform by its UUID. All relevant properties—such as code, name, enabled flag, and timestamps—are included as defined in the Prisma schema.\n\nThis operation is primarily used in administrative interfaces for auditing or editing a specific channel. Because channel details can impact routing, product visibility, and multi-store operations, this endpoint should require strong authorization. Only users with admin or channel-management permission can invoke it. The operation validates the channelId as a UUID and ensures that it matches an existing record. Related endpoints are the general channel list, create, update, or section management APIs.\n\nValidation logic should confirm correct UUID syntax, and business logic should prevent unauthorized lookup of confidential channel settings.","summary":"Get detail of a single platform channel by UUID (aimall_backend_channels).","parameters":[{"name":"channelId","description":"Unique identifier of the channel to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed channel record for the identified channel.","typeName":"IAimallBackendChannel"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new channel entry in the AIMall platform, writing records into the aimall_backend_channels table. Channel creation establishes a new route or logical sales front for the system, with unique code and name, enabled status, and audit timestamps. It is critical to enforce uniqueness on channel code and name, and restricts access to users with configuration or administrative privileges.","path":"/aimall-backend/administrator/channels","method":"post","description":"Create a new channel for the platform, providing unique code, display name, enabled flag, and all other required properties as per the schema. This operation ensures that new channels comply with all normalization and uniqueness constraints—especially for code.\n\nThe endpoint supports channel provisioning workflows (e.g., onboarding a new sales portal or device app association). Security rules must restrict access to administrators and ensure validation of request payload. The creation process includes audit field assignments (timestamps), and may return validation errors for uniqueness, format, or completeness.\n\nUpon success, the response includes the fully populated entity representing the new channel for immediate use or further configuration (e.g., adding sections, assigning products). Related operations include channel listing, update, and section APIs.","summary":"Provision (create) a new platform channel in aimall_backend_channels.","parameters":[],"requestBody":{"description":"Channel creation data (all required fields for aimall_backend_channels).","typeName":"IAimallBackendChannel.ICreate"},"responseBody":{"description":"Channel entity as created and persisted in the system.","typeName":"IAimallBackendChannel"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates an existing channel entity in the AIMall system by unique identifier (UUID), persisting changes into the aimall_backend_channels table. Only fields allowed by business rules and schema (such as code, name, enabled, timestamps) may be modified. Updating a channel is a privileged operation as it may impact business rules, routing, and product access.","path":"/aimall-backend/administrator/channels/{channelId}","method":"put","description":"Update a channel's configuration by its UUID, providing the required change set as defined in the Prisma schema and system business rules. Typical fields to modify include code, name, or enabled status, but not immutable audit fields.\n\nRole-based access control is critical: only channel administrators or platform managers must be allowed to perform this update operation. Request body must validate against update request DTO. Upon success, the endpoint returns the updated entity for display or further workflows.\n\nValidation scenarios: unchanged or duplicate code/name are rejected; only valid fields from the schema are accepted. This endpoint relates directly to channel read, section management, and assignment APIs, forming part of the full channel lifecycle management.","summary":"Update a specific channel (aimall_backend_channels) by UUID.","parameters":[{"name":"channelId","description":"Unique identifier of the channel to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the channel.","typeName":"IAimallBackendChannel.IUpdate"},"responseBody":{"description":"The updated channel entity state after edit.","typeName":"IAimallBackendChannel"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes (hard delete) a channel by UUID in the AIMall platform. As the aimall_backend_channels schema does not include a soft-delete field, invocation of this endpoint results in the permanent removal of the channel from the database. Deletion is an irreversible process and should be tightly controlled—audit logging is strongly advised for compliance.","path":"/aimall-backend/administrator/channels/{channelId}","method":"delete","description":"Permanently remove a channel entity by its unique identifier (UUID). Because the underlying schema does not specify any soft deletion (such as a deleted_at column), deletion is performed as a hard delete—completely erasing the record from the system.\n\nThis operation is strictly limited to platform administrators or users with explicit deletion rights. Deleting a channel may affect related records (such as section assignments) through cascading orphans as defined by foreign key constraints.\n\nPrior to invocation, business logic should validate non-existence of dependent assignments or enforce cascade rules as appropriate. Error or warning should be returned if the target channel does not exist. Event logging is required to trace deletion events for compliance and recovery use cases.","summary":"Hard-delete a channel (aimall_backend_channels) by UUID. Irreversible.","parameters":[{"name":"channelId","description":"Unique identifier of the channel to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieve the list of sections scoped under the given channel in the system. This operation queries the aimall_backend_sections table for sections belonging to a channel, returning normalized data for UI, configuration, or assignment workflows. The response structure closely ties to the section entity schema, and this operation is essential for channel configuration and display logic.","path":"/aimall-backend/administrator/channels/{channelId}/sections","method":"get","description":"List all sections for a specified channel by referencing its UUID. This is important for rendering channel-specific content, controlling UI blocks (like banners, featured lists), or supporting channel-driven customization.\n\nAccess to this endpoint should be limited to managers who oversee channel and section configurations, as section structure directly determines the appearance and behavior of client-facing sites. The response will contain all relevant section properties, with relationships mapped through foreign keys to the specified channel. This operation relates closely to section CRUD endpoints and may be paired with configuration or assignment modules for a complete content management solution.","summary":"List all sections under a given channel (aimall_backend_sections).","parameters":[{"name":"channelId","description":"UUID of the parent channel whose sections are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of section entities (aimall_backend_sections) for the specified channel.","typeName":"IPageIAimallBackendSection"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This search endpoint provides administrators with advanced filtering, pagination and sorting tools for retrieving sections under the specified channel. The operation leverages the aimall_backend_sections table, filtering by channel_id and supporting multi-condition search (enabled, code, name, display order, etc.) as required for complex management tasks.","path":"/aimall-backend/administrator/channels/{channelId}/sections","method":"patch","description":"Search/filter the sections for a specific channel by UUID, leveraging advanced pagination and query logic. This permits efficient management when the section list is extensive, and supports custom search forms, filter bars, and sort widgets.\n\nRole-based access and paginated result returns are core to this endpoint. Data returned is normalized per section schema, and the request body must conform to the advanced search, pagination, and filter DTOs defined for section listing. Common use: powering channel UI block management, analytics, or display configuration tools.","summary":"Search/filter sections of a specific channel (aimall_backend_sections) with pagination.","parameters":[{"name":"channelId","description":"UUID of the channel whose sections are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination criteria for sections.","typeName":"IAimallBackendSection.IRequest"},"responseBody":{"description":"Paginated, filtered result set of sections under the given channel.","typeName":"IPageIAimallBackendSection"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Fetches full detail information for a single section belonging to a specified channel. This operation retrieves all properties of a section identified uniquely by the combination of channelId (parent) and sectionId (section UUID), supporting administration, UI, and assignment workflows. Uses aimall_backend_sections table.","path":"/aimall-backend/administrator/channels/{channelId}/sections/{sectionId}","method":"get","description":"Return the detailed section entity belonging to a particular channel by unique channelId and sectionId. Full section state is included as per normalization—code, name, enabled flag, display order, and timestamps.\n\nPrimarily supporting administrative interfaces, preview/edit flows, and analytics investigation. Security best practice restricts access to users responsible for channel/section configuration. This operation is tightly coupled with the list, search, create, update, and delete endpoints for sections. Validation enforces UUID formats and confirms parent-child linkage integrity. Errors triggered for invalid, missing, or cross-channel section queries.","summary":"Get detail of a section by channel and section UUID (aimall_backend_sections).","parameters":[{"name":"channelId","description":"UUID of the parent channel containing the section.","schema":{"type":"string","format":"uuid"}},{"name":"sectionId","description":"UUID of the section to fetch details of.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for the target section entity.","typeName":"IAimallBackendSection"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new section within a given channel in AIMall. It inserts a new record into the aimall_backend_sections table, establishing a new subdivision for UI, content, or display management scoped to the provided channel. Section code, name, display order, enabled state, and audit timestamps are required as core fields.","path":"/aimall-backend/administrator/channels/{channelId}/sections","method":"post","description":"Create a section (such as homepage banner, featured product block, etc.) under a specific channel by its UUID. The request payload supplies all normalized attributes, enforcing uniqueness of code within channel, and required input for name/display order. Only users with appropriate roles may invoke this operation, and creation should enforce input, unique, and constraint validations as per schema.\n\nUpon success, the returned object provides a fully populated section entity, immediately available for further configuration or assignment. Related to this, section list, update, and delete endpoints complete the lifecycle. Audit trails should capture every creation event for compliance.","summary":"Add a new section to an existing channel (aimall_backend_sections).","parameters":[{"name":"channelId","description":"UUID of the channel to add the section to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation DTO for a section—normalized all required fields.","typeName":"IAimallBackendSection.ICreate"},"responseBody":{"description":"Section entity as created and persisted.","typeName":"IAimallBackendSection"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Update a section's configuration and descriptive attributes for a given channel/section UUID pair in the AIMall platform. The associated table is aimall_backend_sections, and this operation controls major UI subdivision settings within a channel. Update-able fields include code, name, display order, enabled status, and order. Immutable or audit fields (such as created_at) are not modifiable.","path":"/aimall-backend/administrator/channels/{channelId}/sections/{sectionId}","method":"put","description":"Perform an update on a section entity for a particular channel, providing the list of allowed, mutable fields in the request body. Validation ensures the unique key constraint (channel_id+code) and conforms all business rules within the system and schema.\n\nOnly users responsible for channel/section management should have access, and updates should log all change events for compliance. This endpoint is used alongside create, get, search, and delete operations to provide full CRUD management for channel sections. The operation validates the request payload, both for schema and for conflict with existing section data.","summary":"Update a section of a channel (aimall_backend_sections) by UUIDs.","parameters":[{"name":"channelId","description":"UUID of the parent channel containing the section.","schema":{"type":"string","format":"uuid"}},{"name":"sectionId","description":"UUID of the section to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the section entity fields.","typeName":"IAimallBackendSection.IUpdate"},"responseBody":{"description":"The updated section state as persisted.","typeName":"IAimallBackendSection"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes (soft deletes) a section in the context of a specific channel. The aimall_backend_sections table supports logical deletion via the deleted_at field. Invoking this operation sets the deleted_at timestamp, hiding the section from active use while retaining it for audit compliance. Operation is irreversible in normal flows, and restoration requires a separate endpoint (not present here).","path":"/aimall-backend/administrator/channels/{channelId}/sections/{sectionId}","method":"delete","description":"Logically delete (soft delete) a section assigned to a specific channel. Instead of removing the row from the table, this operation marks the deleted_at field with a timestamp. The section remains in the backend for compliance and auditing, but disappears from active query results consumers.\n\nThis operation is reserved for administrators, as removing sections affects UI/channel logic. Implementation must validate section existence and parent channel match. Audit logging of every section deletion is a strict requirement. In case the target section is not found, a meaningful 404 error should be returned. This endpoint integrates with the full CRUD operation set for sections and may require list/get endpoints for restoration workflows.","summary":"Soft-delete a section (aimall_backend_sections) under a channel by UUIDs.","parameters":[{"name":"channelId","description":"UUID of the parent channel for the section.","schema":{"type":"string","format":"uuid"}},{"name":"sectionId","description":"UUID of the section to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a basic list of system configurations from the aimall_backend_configurations table. It is designed for administrative users to access all configuration records, with optional basic filtering via query parameters in future extensions (not in core schema). The API is optimized for scenarios where a simple listing without advanced filtering or pagination is sufficient—such as dropdowns or configuration audits in admin UIs. All fields returned match atomic columns in aimall_backend_configurations, with relations resolved to channel/section as appropriate.","path":"/aimall-backend/administrator/configurations","method":"get","description":"Retrieve a full list of system configuration entities from the platform backend. This operation is primarily for administrative or technical staff needing an overview of all key-value pairs that drive global, channel, or section-scoped backend behaviors.\n\nConfiguration entries correspond directly to the aimall_backend_configurations schema, with each entry including detailing such as its unique id, key, value, optional channel_id, optional section_id, and audit timestamps. Each configuration may optionally reference a channel or section entity—null values indicate global configurations.\n\nSecurity: Only users with administrator roles should access this endpoint due to the sensitive nature of platform configuration, including potential feature toggles or controller flags.\n\nReturned data reflects all atomic fields as defined in the schema. Use this endpoint to perform audits, visualize configuration landscape, or prepare for configuration updates.","summary":"List all system configurations (aimall_backend_configurations table).","parameters":[],"requestBody":null,"responseBody":{"description":"A list of all configuration entities defined in aimall_backend_configurations.","typeName":"IAimallBackendConfiguration.ISummary"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation retrieves a paginated and filtered list of system configurations from the aimall_backend_configurations table. It supports advanced searching, sorting, and pagination using the request body, enabling administrators to find or audit specific settings efficiently. The request body follows the IAimallBackendConfiguration.IRequest specification, allowing various parameters for filtering by key, value, channel, section, visibility, or audit metadata. This supports large-scale configuration management and compliance tasks, especially in systems with hundreds or thousands of configuration records.","path":"/aimall-backend/administrator/configurations","method":"patch","description":"Perform a paginated, filtered search of system configuration records. This operation is intended for sophisticated administrative and DevOps workflows where quick lookup or compliance audits require precise filtering—such as reviewing feature flag settings, identifying by key, or extracting all configurations for a specific channel or section.\n\nQuery parameters are passed in the request body according to the IAimallBackendConfiguration.IRequest schema, supporting attributes such as key, channel_id, section_id, value patterns, or date ranges. The API response includes pagination metadata and a set of configuration records matching the search criteria, as per the IAimallBackendConfiguration.ISummary DTO.\n\nSecurity: Only administrative roles can access this endpoint, as configuration data control is a privileged operation. Use this for dashboard search, config reporting, or audit workflows.\n\nIf search criteria do not match any records, the API returns an empty data array with pagination reflecting no results.","summary":"Advanced search/listing of configurations with filtering and pagination (aimall_backend_configurations table).","parameters":[],"requestBody":{"description":"Advanced filter and pagination criteria according to IAimallBackendConfiguration.IRequest schema.","typeName":"IAimallBackendConfiguration.IRequest"},"responseBody":{"description":"Paginated system configuration summaries matching search criteria.","typeName":"IPageIAimallBackendConfiguration.ISummary"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation retrieves detailed information about a specific system configuration entity from the aimall_backend_configurations table, using the unique identifier in the path. It returns all atomic fields of the configuration, with optional expansion of channel and section names as needed by frontend/admin UIs. The operation is intended for configuration management UIs, audit workflows, or change control interfaces. The returned record provides audit and business context for the configuration, supporting compliance and operational traceability.","path":"/aimall-backend/administrator/configurations/{configurationId}","method":"get","description":"Retrieve full detail about a specific configuration entity in the system backend. The endpoint targets a configuration record by its unique id (configurationId) from the aimall_backend_configurations table, returning all normalized fields such as key, value, optional channel_id, section_id, description, and audit timestamps.\n\nThis operation is used by admin interfaces for configuration editing, audit logging, or compliance reporting, enabling operators to view the full business impact and context of each configuration setting.\n\nSecurity: This API is restricted to system administrators due to the sensitivity of backend configuration data. Appropriate permission checks must be enforced in the controller or middleware.","summary":"Get a specific configuration entity by ID (aimall_backend_configurations table).","parameters":[{"name":"configurationId","description":"The unique identifier of the configuration entity to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed configuration record corresponding to configurationId.","typeName":"IAimallBackendConfiguration"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new configuration entry in the aimall_backend_configurations table, supporting the addition of global, channel-scoped, or section-scoped key-value settings. The caller provides all required fields in the request body using the IAimallBackendConfiguration.ICreate DTO, including key, value, optional channel_id, and optional section_id. The operation ensures uniqueness constraints on key+channel+section combinations and enforces validation of referenced channel/section ids. Upon success, the response is the complete new configuration DTO, with all audit fields and references resolved.","path":"/aimall-backend/administrator/configurations","method":"post","description":"Create a new configuration entity within the system's backend configuration management table. The operation validates input based on the IAimallBackendConfiguration.ICreate schema, enforcing uniqueness for (key, channel_id, section_id) to prevent accidental overlaps.\n\nAll atomic configuration fields must be provided in the request body: key, value, and optional channel_id/section_id for scoping. On success, the response includes the newly created configuration record as per the IAimallBackendConfiguration DTO.\n\nSecurity: Only administrative users may create new backend configurations. Additional controller logic should ensure referenced channel and section exist prior to row creation. Failed validation or violation of unique constraint returns appropriate error responses.","summary":"Create a new backend configuration entry (aimall_backend_configurations table).","parameters":[],"requestBody":{"description":"Details required to create a new configuration entity.","typeName":"IAimallBackendConfiguration.ICreate"},"responseBody":{"description":"The full configuration entity created in the backend.","typeName":"IAimallBackendConfiguration"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates an existing configuration record in the aimall_backend_configurations table, using the configurationId provided in the path. The request body follows the IAimallBackendConfiguration.IUpdate schema, allowing all mutable fields to be changed—such as key, value, optional channel/section, and description. The operation enforces unique constraints and validates referenced channel/section ids. Full audit trail is maintained via updated_at field. The response is the updated configuration DTO reflecting the persisted change.","path":"/aimall-backend/administrator/configurations/{configurationId}","method":"put","description":"Update a configuration entry in the backend system using the given configurationId path parameter. The request body adheres to the IAimallBackendConfiguration.IUpdate schema, where mutable properties like key, value, channel_id, section_id, and description may be altered.\n\nThe update operation checks all business constraints, especially uniqueness for (key, channel_id, section_id) combination and validity of related channel/section entities. Upon successful validation, the record is updated and returned as an IAimallBackendConfiguration instance, with updated_at reflecting the latest modification timestamp.\n\nSecurity: Only administrative users may update configurations. Controller logic is expected to verify permissions and validate input. Unique/constraint violation or missing channel/section causes errors, as enforced by database and API model.","summary":"Update a system configuration entity by id (aimall_backend_configurations table).","parameters":[{"name":"configurationId","description":"The unique identifier of the configuration entity to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating mutable configuration entity fields.","typeName":"IAimallBackendConfiguration.IUpdate"},"responseBody":{"description":"The updated configuration entity after the update operation has completed.","typeName":"IAimallBackendConfiguration"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes a system configuration from the aimall_backend_configurations table using its unique configurationId path parameter. As there is no soft-delete field, this is a hard delete operation—with the configuration record permanently removed from the database for compliance. It is intended for high-privilege administrators and should be protected by strict audit and confirmation controls. The operation does not return a record on success but status 204 No Content. Attempts to delete a non-existent id return 404 errors.","path":"/aimall-backend/administrator/configurations/{configurationId}","method":"delete","description":"Permanently delete a configuration entity in the backend system using the specified configurationId. The deletion is hard: as the aimall_backend_configurations schema contains no soft-delete field, the record is physically removed from the database and cannot be recovered.\n\nThis operation is intended for privileged administrative users with careful audit-logging and confirmation flows, especially since deletions have irreversible compliance impact. Best practice dictates that related triggers or constraints should handle the cleanup of any dependent foreign keys.\n\nSecurity: Only system administrators should be permitted to use this endpoint. On success, returns no content. Trying to delete a configurationId that does not exist returns a 404 error.","summary":"Delete a configuration entity by id (hard delete, aimall_backend_configurations table).","parameters":[{"name":"configurationId","description":"The unique ID of the system configuration entity to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a basic list of customer account entities from the aimall_backend_customers table. Intended for administrative overview or summary reporting, it returns atomic fields such as id, email, phone, status, created_at, and updated_at for every customer in the system. The API is optimized for quick access to non-sensitive customer metadata for management dashboards, audits, or user search dropdowns. The structure aligns with IAimallBackendCustomer.ISummary DTO.","path":"/aimall-backend/administrator/customers","method":"get","description":"Retrieve a flat list of customer records from the system, returning summary fields only. This operation covers basic customer account properties for each registered user, including unique id, email, phone, current status, and audit fields such as created_at and updated_at.\n\nFor data privacy reasons, only authorized administrator users should use this endpoint—ensuring that PII access is strictly controlled. The operation excludes related/linked models like addresses, behavior tracking, or external accounts; those can be loaded via dedicated endpoints as needed.\n\nUse cases include admin dashboard lists, compliance reports, or system analytics overviews.","summary":"List all customer accounts in summary form (aimall_backend_customers table).","parameters":[],"requestBody":null,"responseBody":{"description":"A summary list of customer entities based on IAimallBackendCustomer.ISummary DTO.","typeName":"IAimallBackendCustomer.ISummary"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation provides a paginated and filterable search over customer accounts via the IAimallBackendCustomer.IRequest DTO. It allows advanced querying based on email, phone, status, creation or update timestamps, and supports pagination/sorting for large-scale administrative or compliance work. The response uses the IPageIAimallBackendCustomer.ISummary DTO, returning a page of summary records and associated metadata. The operation is essential for UI search, selective compliance audits, or advanced customer analytics.","path":"/aimall-backend/administrator/customers","method":"patch","description":"Search and paginate over customer account records in the backend system. This endpoint is designed for admin or compliance UI dashboards, where advanced filtering is needed—such as querying by email, phone, or status, or reviewing customers created within a certain date range.\n\nAll query parameters are specified in the IAimallBackendCustomer.IRequest request body, which defines fields like email, phone, status, creation/update date ranges, as well as limit and offset for pagination. The operation returns a page of IAimallBackendCustomer.ISummary responses with total count, page number, and data items.\n\nAccess control is strictly administrator-only, reflecting the sensitivity of customer PII. For batch partner sync, auditing, or data exports, use this endpoint.","summary":"Advanced search and paginate customers (aimall_backend_customers table).","parameters":[],"requestBody":{"description":"Advanced filter, search, and pagination parameters defined in IAimallBackendCustomer.IRequest DTO.","typeName":"IAimallBackendCustomer.IRequest"},"responseBody":{"description":"Paginated customer summaries matching search criteria.","typeName":"IPageIAimallBackendCustomer.ISummary"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation returns all details for a single customer account using the id from the path, based on the aimall_backend_customers schema. It returns all atomic fields (id, email, phone, password_hash if present, status, and timestamps). The use case is for admin UI, customer support, or compliance scenarios where detailed account audit, support, or edits are required. Additional related info (addresses, linked external accounts) can be accessed through separate model endpoints.","path":"/aimall-backend/administrator/customers/{customerId}","method":"get","description":"Retrieve full detail of a specific customer account by customerId. This operation loads all atomic fields from the aimall_backend_customers entity, such as id, email, phone, password_hash (nullable), status, created_at, and updated_at.\n\nThe endpoint supports authorized administrator users for account management, audit, or data correction workflows. Related tables (e.g., addresses, behavior) are not included but can be loaded through other APIs. Exposes all fields for compliance and editing but should be protected against unauthorized access due to PII risk.","summary":"Get all details of a customer (aimall_backend_customers table).","parameters":[{"name":"customerId","description":"Unique identifier of the customer to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed customer entity with all fields from aimall_backend_customers.","typeName":"IAimallBackendCustomer"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new customer account, writing to the aimall_backend_customers table. The request body follows IAimallBackendCustomer.ICreate, specifying required atomic fields such as email, phone, and status (and optionally password_hash if not using external identity). On success, returns the full account record as IAimallBackendCustomer DTO, including generated id and timestamps. This operation is usually performed by the registration workflow or an admin backoffice tool. Validation enforces unique email and phone. The creation logic must ensure all privacy and compliance constraints are enforced.","path":"/aimall-backend/customers","method":"post","description":"Register a new customer in the system backend. All required atomic fields from IAimallBackendCustomer.ICreate must be supplied - including email (unique), phone (unique), password_hash (nullable for external accounts), and status. After validation, system inserts and returns the full customer object including assigned id, audit timestamps, and all supplied/derived values.\n\nTypically used by registration APIs (for end-users) or backoffice tools (admin bulk input). Uniqueness of email/phone is enforced by constraints in the model. Additional logic (email/SMS verification, onboarding, or third-party OAuth linkage) may be triggered as part of higher layer workflows.","summary":"Register (create) a new customer account (aimall_backend_customers table).","parameters":[],"requestBody":{"description":"Payload with all required info for creating a new customer (per IAimallBackendCustomer.ICreate schema).","typeName":"IAimallBackendCustomer.ICreate"},"responseBody":{"description":"Full created customer record as per IAimallBackendCustomer DTO.","typeName":"IAimallBackendCustomer"},"authorizationRoles":[],"name":"create","authorizationRole":null},{"specification":"This operation updates all mutable fields of an existing customer record, using customerId from the path and IAimallBackendCustomer.IUpdate for the request body. Fields such as email, phone, password_hash, and status can be updated according to business rules. Uniqueness of email and phone is checked. The controller ensures only admin or the owner may update. A successful update returns the full customer record with updated values. The system tracks updates via updated_at for compliance.","path":"/aimall-backend/administrator/customers/{customerId}","method":"put","description":"Update the fields of an existing customer account identified by customerId. The request body follows the IAimallBackendCustomer.IUpdate DTO, supporting mutation of fields such as email, phone, password_hash, and status depending on permissions and business rules.\n\nOnly administrator or account owner may perform updates, with tight uniqueness checks for email/phone. Upon successful validation and update, the endpoint returns a full customer entity reflecting all changes and current audit trail. It is protected as a privileged operation, with strict logging and compliance required.","summary":"Update a given customer account by customerId (aimall_backend_customers table).","parameters":[{"name":"customerId","description":"The unique identifier of the customer to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the customer account by IAimallBackendCustomer.IUpdate DTO.","typeName":"IAimallBackendCustomer.IUpdate"},"responseBody":{"description":"Full updated customer entity record.","typeName":"IAimallBackendCustomer"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes (hard delete) a customer account identified by customerId in the aimall_backend_customers table. As there is no deleted_at column, deletion is permanent and cannot be reversed. Only administrative users can call this API, and all access must be logged for compliance. However, per requirements, system should first anonymize or remove personal identifiers before physical deletion for regulatory compliance. If the record does not exist, returns 404.","path":"/aimall-backend/administrator/customers/{customerId}","method":"delete","description":"Permanently remove a customer account using customerId as the unique identifier. Since aimall_backend_customers has no soft-delete or deleted_at column, this is an immediate, irreversible delete—removing the record from the system.\n\nOnly administrator users should have access, and due diligence is required to anonymize any related records containing PII prior to delete to meet compliance. Audit logging is required for all destructive operations. Non-existent customerId returns 404. No content is returned on success.","summary":"Delete (hard) a customer account by id (aimall_backend_customers table).","parameters":[{"name":"customerId","description":"Unique id of the customer account to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a list of all external accounts (OAuth/federated identities) linked to the specific customer from the aimall_backend_external_accounts table. This includes entries for each external provider such as Google, Kakao, or Apple and allows the client to view which external accounts are associated with a given customer. This is essential for managing federated logins and providing transparency to users about their linked identities.","path":"/aimall-backend/customer/customers/{customerId}/externalAccounts","method":"get","description":"Fetch all external accounts linked to the specified customer. This endpoint returns each external account (such as Google, Kakao, or Apple) currently associated with the customer account, as defined in the aimall_backend_external_accounts table.\n\nThis operation is important for providing customers with awareness and control over their linked login credentials. Only authenticated customers (or platform administrators) should have access, and privacy must be maintained so that only the account owner (or an admin) can retrieve these associations.\n\nIf there are no external accounts registered, an empty list will be returned. The response adheres to auditability and data minimization requirements outlined in system documentation.\n\nAll access is logged for compliance. This endpoint is often paired with linking new external accounts or removing old ones for account ownership and management flows.","summary":"Retrieve all external accounts linked to a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer whose external accounts are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of external accounts linked to the customer","typeName":"IPageIAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieves a list of all external accounts (OAuth/federated identities) linked to the specific customer from the aimall_backend_external_accounts table. This includes entries for each external provider such as Google, Kakao, or Apple and allows the client to view which external accounts are associated with a given customer. This is essential for managing federated logins and providing transparency to users about their linked identities.","path":"/aimall-backend/administrator/customers/{customerId}/externalAccounts","method":"get","description":"Fetch all external accounts linked to the specified customer. This endpoint returns each external account (such as Google, Kakao, or Apple) currently associated with the customer account, as defined in the aimall_backend_external_accounts table.\n\nThis operation is important for providing customers with awareness and control over their linked login credentials. Only authenticated customers (or platform administrators) should have access, and privacy must be maintained so that only the account owner (or an admin) can retrieve these associations.\n\nIf there are no external accounts registered, an empty list will be returned. The response adheres to auditability and data minimization requirements outlined in system documentation.\n\nAll access is logged for compliance. This endpoint is often paired with linking new external accounts or removing old ones for account ownership and management flows.","summary":"Retrieve all external accounts linked to a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer whose external accounts are being retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of external accounts linked to the customer","typeName":"IPageIAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Provides advanced search, filter, and paginated retrieval of the external accounts (federated logins) linked to a customer, querying the aimall_backend_external_accounts table. Supports partial match searches by provider or external_user_id, sorting, and pagination controls for UI administration or audit purposes. This is key for scalable admin panels or user history management in larger deployments.","path":"/aimall-backend/customer/customers/{customerId}/externalAccounts","method":"patch","description":"Search and retrieve a paginated, filtered list of external accounts for a customer. This enables filtering on providers, dates, or external user ID and allows admins or the customer to audit all federated logins associated with their account.\n\nRequest body controls advanced query logic (e.g., provider filtering, date range, sorting, pagination limits). Only authorized users can execute filtered searches; the operation must enforce resource-level permissions and log all access.\n\nPairs with get (simple list) endpoint, but adds full search and filter capabilities for compliance or user self-management tools.","summary":"Search and filter external accounts for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer whose external accounts are being searched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced query criteria for external accounts (filter, pagination, etc)","typeName":"IAIMallBackendExternalAccount.IRequest"},"responseBody":{"description":"Paginated, filtered list of the customer's external accounts","typeName":"IPageIAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Provides advanced search, filter, and paginated retrieval of the external accounts (federated logins) linked to a customer, querying the aimall_backend_external_accounts table. Supports partial match searches by provider or external_user_id, sorting, and pagination controls for UI administration or audit purposes. This is key for scalable admin panels or user history management in larger deployments.","path":"/aimall-backend/administrator/customers/{customerId}/externalAccounts","method":"patch","description":"Search and retrieve a paginated, filtered list of external accounts for a customer. This enables filtering on providers, dates, or external user ID and allows admins or the customer to audit all federated logins associated with their account.\n\nRequest body controls advanced query logic (e.g., provider filtering, date range, sorting, pagination limits). Only authorized users can execute filtered searches; the operation must enforce resource-level permissions and log all access.\n\nPairs with get (simple list) endpoint, but adds full search and filter capabilities for compliance or user self-management tools.","summary":"Search and filter external accounts for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer whose external accounts are being searched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced query criteria for external accounts (filter, pagination, etc)","typeName":"IAIMallBackendExternalAccount.IRequest"},"responseBody":{"description":"Paginated, filtered list of the customer's external accounts","typeName":"IPageIAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves a single external account (OAuth/federated ID link) for a specific customer by both customerId and the unique externalAccountId from the aimall_backend_external_accounts table. Useful for showing linkage status, provider details, and investigating security or authentication issues for a specific external login.","path":"/aimall-backend/customer/customers/{customerId}/externalAccounts/{externalAccountId}","method":"get","description":"Get the details of a particular external account associated with a customer. This operation fetches comprehensive data about the federated login provider, external user ID, and linkage time for auditing and user transparency.\n\nAccess is permitted only to the account owner (customer) or privileged (admin) staff. Non-existent or mismatched records return a clear error.\n\nUseful in account security review, federated login visibility UIs, or federated account unlinking flows. All operations are logged for audit.","summary":"Retrieve a specific external account for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer","schema":{"type":"string","format":"uuid"}},{"name":"externalAccountId","description":"Unique identifier of the external account (federated login) to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the external account record","typeName":"IAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieves a single external account (OAuth/federated ID link) for a specific customer by both customerId and the unique externalAccountId from the aimall_backend_external_accounts table. Useful for showing linkage status, provider details, and investigating security or authentication issues for a specific external login.","path":"/aimall-backend/administrator/customers/{customerId}/externalAccounts/{externalAccountId}","method":"get","description":"Get the details of a particular external account associated with a customer. This operation fetches comprehensive data about the federated login provider, external user ID, and linkage time for auditing and user transparency.\n\nAccess is permitted only to the account owner (customer) or privileged (admin) staff. Non-existent or mismatched records return a clear error.\n\nUseful in account security review, federated login visibility UIs, or federated account unlinking flows. All operations are logged for audit.","summary":"Retrieve a specific external account for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer","schema":{"type":"string","format":"uuid"}},{"name":"externalAccountId","description":"Unique identifier of the external account (federated login) to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the external account record","typeName":"IAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Registers/links a new external account (federated login) for the specified customer in the aimall_backend_external_accounts table. This operation is used when a customer adds a new OAuth/OpenID identity to their account (such as Google, Kakao, Apple, etc). Enforces uniqueness (no duplicates for the same provider+external_user_id) and proper linkage to the correct customer account.","path":"/aimall-backend/customer/customers/{customerId}/externalAccounts","method":"post","description":"Link a new external (federated) account for the target customer. Used by sign-in, social login onboarding, or account linking settings. Requires validation that the external account is not already linked elsewhere and that proper OAuth token verification has occurred upstream.\n\nOn success, creates a new external account record with provider info, external user ID, and linkage time. Only the authenticated customer or delegated admin may perform this action.\n\nAll actions are fully audited for compliance and security. Returns the newly created external account entity on success.","summary":"Link a new external account to the customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer who is linking a new external account","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload specifying provider and external identity information to link","typeName":"IAIMallBackendExternalAccount.ICreate"},"responseBody":{"description":"The newly created external account record","typeName":"IAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Registers/links a new external account (federated login) for the specified customer in the aimall_backend_external_accounts table. This operation is used when a customer adds a new OAuth/OpenID identity to their account (such as Google, Kakao, Apple, etc). Enforces uniqueness (no duplicates for the same provider+external_user_id) and proper linkage to the correct customer account.","path":"/aimall-backend/administrator/customers/{customerId}/externalAccounts","method":"post","description":"Link a new external (federated) account for the target customer. Used by sign-in, social login onboarding, or account linking settings. Requires validation that the external account is not already linked elsewhere and that proper OAuth token verification has occurred upstream.\n\nOn success, creates a new external account record with provider info, external user ID, and linkage time. Only the authenticated customer or delegated admin may perform this action.\n\nAll actions are fully audited for compliance and security. Returns the newly created external account entity on success.","summary":"Link a new external account to the customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer who is linking a new external account","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload specifying provider and external identity information to link","typeName":"IAIMallBackendExternalAccount.ICreate"},"responseBody":{"description":"The newly created external account record","typeName":"IAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates the external account linkage record for a customer in aimall_backend_external_accounts, identified by customerId and externalAccountId. Permits updating certain fields like the provider or external_user_id if re-linking is supported (may be limited depending on business logic). Mutates linkage, useful for correction in case of disconnected or outdated provider info. Properly validates that update still preserves uniqueness and integrity.","path":"/aimall-backend/customer/customers/{customerId}/externalAccounts/{externalAccountId}","method":"put","description":"Update an existing external account record for a customer. Used to correct or re-link federated login info. Operation enforces permission so that only the customer or privileged admin can update, and checks that the new linkage won't conflict with an already-linked account.\n\nIf update is not allowed (e.g., immutable provider), will reject with error. All update attempts are audited.\n\nReturns updated external account info on success.","summary":"Update external account linkage for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer","schema":{"type":"string","format":"uuid"}},{"name":"externalAccountId","description":"Unique identifier of the external account linkage being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating the external account linkage","typeName":"IAIMallBackendExternalAccount.IUpdate"},"responseBody":{"description":"The updated external account linkage record","typeName":"IAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates the external account linkage record for a customer in aimall_backend_external_accounts, identified by customerId and externalAccountId. Permits updating certain fields like the provider or external_user_id if re-linking is supported (may be limited depending on business logic). Mutates linkage, useful for correction in case of disconnected or outdated provider info. Properly validates that update still preserves uniqueness and integrity.","path":"/aimall-backend/administrator/customers/{customerId}/externalAccounts/{externalAccountId}","method":"put","description":"Update an existing external account record for a customer. Used to correct or re-link federated login info. Operation enforces permission so that only the customer or privileged admin can update, and checks that the new linkage won't conflict with an already-linked account.\n\nIf update is not allowed (e.g., immutable provider), will reject with error. All update attempts are audited.\n\nReturns updated external account info on success.","summary":"Update external account linkage for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer","schema":{"type":"string","format":"uuid"}},{"name":"externalAccountId","description":"Unique identifier of the external account linkage being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating the external account linkage","typeName":"IAIMallBackendExternalAccount.IUpdate"},"responseBody":{"description":"The updated external account linkage record","typeName":"IAIMallBackendExternalAccount"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes the federated login linkage (external account) for the given customer and externalAccountId in the aimall_backend_external_accounts table. This operation supports complete account unlink/drop-off in accordance with security and privacy best practices. Removal is a hard delete since there is no soft delete field. Triggers compliance audit logs and may have downstream effects (like loss of federated login).","path":"/aimall-backend/customer/customers/{customerId}/externalAccounts/{externalAccountId}","method":"delete","description":"Delete the linkage between a customer's account and a specific external (federated) account. This is used for de-linking OAuth/OpenID logins, account unlinking UI, or in response to a federated identity compromise request.\n\nAs no soft delete field exists, this operation performs a hard delete of the external account record. Only the customer or a privileged admin may perform this delete. All operations are fully audited for compliance.\n\nRelated login tokens via the provider may be invalidated after removal, and re-linking would require fresh OAuth verification.","summary":"Delete (unlink) an external account linkage for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose external account link is being deleted","schema":{"type":"string","format":"uuid"}},{"name":"externalAccountId","description":"Unique identifier of the external account linkage being deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes the federated login linkage (external account) for the given customer and externalAccountId in the aimall_backend_external_accounts table. This operation supports complete account unlink/drop-off in accordance with security and privacy best practices. Removal is a hard delete since there is no soft delete field. Triggers compliance audit logs and may have downstream effects (like loss of federated login).","path":"/aimall-backend/administrator/customers/{customerId}/externalAccounts/{externalAccountId}","method":"delete","description":"Delete the linkage between a customer's account and a specific external (federated) account. This is used for de-linking OAuth/OpenID logins, account unlinking UI, or in response to a federated identity compromise request.\n\nAs no soft delete field exists, this operation performs a hard delete of the external account record. Only the customer or a privileged admin may perform this delete. All operations are fully audited for compliance.\n\nRelated login tokens via the provider may be invalidated after removal, and re-linking would require fresh OAuth verification.","summary":"Delete (unlink) an external account linkage for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose external account link is being deleted","schema":{"type":"string","format":"uuid"}},{"name":"externalAccountId","description":"Unique identifier of the external account linkage being deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves all behavioral tracking records (session, preference, and activity logs) associated with a specific customer from the aimall_backend_behavior_trackings table. Each record represents an event type (viewed product, added to cart, search, recommendation click, etc). Essential for user analytics, AI, and security/account audit controls.","path":"/aimall-backend/customer/customers/{customerId}/behaviorTrackings","method":"get","description":"Fetch all behavioral tracking events associated with the given customer. Each entry includes the event type, payload data, and occurred timestamp. Data may include shopping, navigation, or engagement analytics as permitted by system policy.\n\nThis operation is sensitive and MUST be restricted to the account owner or system administrators for audit or troubleshooting. Data minimization and privacy rules apply. Large lists are paginated or truncated per system policy.\n\nReturns a collection of behavioral tracking records for downstream analytics or self-service insight dashboards.","summary":"Retrieve all behavior tracking events for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer whose behavioral events are to be listed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of behavioral tracking records for the customer","typeName":"IPageIAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieves all behavioral tracking records (session, preference, and activity logs) associated with a specific customer from the aimall_backend_behavior_trackings table. Each record represents an event type (viewed product, added to cart, search, recommendation click, etc). Essential for user analytics, AI, and security/account audit controls.","path":"/aimall-backend/administrator/customers/{customerId}/behaviorTrackings","method":"get","description":"Fetch all behavioral tracking events associated with the given customer. Each entry includes the event type, payload data, and occurred timestamp. Data may include shopping, navigation, or engagement analytics as permitted by system policy.\n\nThis operation is sensitive and MUST be restricted to the account owner or system administrators for audit or troubleshooting. Data minimization and privacy rules apply. Large lists are paginated or truncated per system policy.\n\nReturns a collection of behavioral tracking records for downstream analytics or self-service insight dashboards.","summary":"Retrieve all behavior tracking events for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer whose behavioral events are to be listed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of behavioral tracking records for the customer","typeName":"IPageIAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Performs complex or filtered search (e.g., by event type or occurrence range) and pagination for behavioral tracking events in the aimall_backend_behavior_trackings table for the given customer. Essential for large accounts or detailed auditing/analytics where event history needs to be narrowed down by various criteria. Supports sorting, filtering, and page controls.","path":"/aimall-backend/customer/customers/{customerId}/behaviorTrackings","method":"patch","description":"Search/filter behavioral tracking records for the specified customer. Request body may support filtering by event type, time range, or additional query parameters for analytic views and compliance auditing.\n\nOnly available to the account owner or administrative roles, and logs all access or search queries.\n\nReturns a filtered/paginated collection of matched behavioral tracking records.","summary":"Search and filter behavior tracking events for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer whose behavioral tracking events are searched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter criteria and pagination for behavioral events","typeName":"IAIMallBackendBehaviorTracking.IRequest"},"responseBody":{"description":"Paginated, filtered search results of behavior tracking events","typeName":"IPageIAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Performs complex or filtered search (e.g., by event type or occurrence range) and pagination for behavioral tracking events in the aimall_backend_behavior_trackings table for the given customer. Essential for large accounts or detailed auditing/analytics where event history needs to be narrowed down by various criteria. Supports sorting, filtering, and page controls.","path":"/aimall-backend/administrator/customers/{customerId}/behaviorTrackings","method":"patch","description":"Search/filter behavioral tracking records for the specified customer. Request body may support filtering by event type, time range, or additional query parameters for analytic views and compliance auditing.\n\nOnly available to the account owner or administrative roles, and logs all access or search queries.\n\nReturns a filtered/paginated collection of matched behavioral tracking records.","summary":"Search and filter behavior tracking events for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the target customer whose behavioral tracking events are searched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter criteria and pagination for behavioral events","typeName":"IAIMallBackendBehaviorTracking.IRequest"},"responseBody":{"description":"Paginated, filtered search results of behavior tracking events","typeName":"IPageIAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves a specific behavioral tracking event for a customer, identified uniquely by customerId and behaviorTrackingId from the aimall_backend_behavior_trackings table. Useful for detailed event-level audit, debugging, or providing user insight into specific activity history.","path":"/aimall-backend/customer/customers/{customerId}/behaviorTrackings/{behaviorTrackingId}","method":"get","description":"Fetch details about a single behavioral tracking event for the given customer. Returns the activity event type, payload, and timestamp.\n\nAvailable only to the account owner or privileged/admin staff for user transparency and security audit.\n\nReturns detailed information about the event or error if not found or unauthorized.","summary":"Retrieve a specific behavior tracking record for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer","schema":{"type":"string","format":"uuid"}},{"name":"behaviorTrackingId","description":"Unique identifier of the behavioral tracking event to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Behavioral tracking record details","typeName":"IAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieves a specific behavioral tracking event for a customer, identified uniquely by customerId and behaviorTrackingId from the aimall_backend_behavior_trackings table. Useful for detailed event-level audit, debugging, or providing user insight into specific activity history.","path":"/aimall-backend/administrator/customers/{customerId}/behaviorTrackings/{behaviorTrackingId}","method":"get","description":"Fetch details about a single behavioral tracking event for the given customer. Returns the activity event type, payload, and timestamp.\n\nAvailable only to the account owner or privileged/admin staff for user transparency and security audit.\n\nReturns detailed information about the event or error if not found or unauthorized.","summary":"Retrieve a specific behavior tracking record for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer","schema":{"type":"string","format":"uuid"}},{"name":"behaviorTrackingId","description":"Unique identifier of the behavioral tracking event to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Behavioral tracking record details","typeName":"IAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates (logs) a new behavioral tracking event for a customer in the aimall_backend_behavior_trackings table. Used by application code to record every tracked event, such as login, product view, preference update, or checkout. Ensures all fields are atomic and complies with event log requirements and consent (privacy requirement for tracking opt-in).","path":"/aimall-backend/customer/customers/{customerId}/behaviorTrackings","method":"post","description":"Creates a new behavioral tracking record for the specified customer. Triggered by events such as login, product view, cart addition, recommendation click, or search.\n\nInput must specify event type, event data (serialized), and timestamp of occurrence. Validates that tracking is permitted for the user (opt-in via consent). Restricted to owner or administrative staff.\n\nReturns the full record as created. All writes are auditable and permission checked.","summary":"Log a new behavior tracking event for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer for whom the activity is to be logged","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for logging a behavioral event including type, data, and timestamp","typeName":"IAIMallBackendBehaviorTracking.ICreate"},"responseBody":{"description":"The newly created behavioral tracking record","typeName":"IAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Creates (logs) a new behavioral tracking event for a customer in the aimall_backend_behavior_trackings table. Used by application code to record every tracked event, such as login, product view, preference update, or checkout. Ensures all fields are atomic and complies with event log requirements and consent (privacy requirement for tracking opt-in).","path":"/aimall-backend/administrator/customers/{customerId}/behaviorTrackings","method":"post","description":"Creates a new behavioral tracking record for the specified customer. Triggered by events such as login, product view, cart addition, recommendation click, or search.\n\nInput must specify event type, event data (serialized), and timestamp of occurrence. Validates that tracking is permitted for the user (opt-in via consent). Restricted to owner or administrative staff.\n\nReturns the full record as created. All writes are auditable and permission checked.","summary":"Log a new behavior tracking event for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer for whom the activity is to be logged","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for logging a behavioral event including type, data, and timestamp","typeName":"IAIMallBackendBehaviorTracking.ICreate"},"responseBody":{"description":"The newly created behavioral tracking record","typeName":"IAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates details of a specific behavioral tracking record for a customer in the aimall_backend_behavior_trackings table, identified by customerId and behaviorTrackingId. Permits correcting event type or data (for example, to redact sensitive details or fix misclassified activity). Enforces ownership/permission and logs all modifications for audit. Typically rare but important for compliance and debugging.","path":"/aimall-backend/customer/customers/{customerId}/behaviorTrackings/{behaviorTrackingId}","method":"put","description":"Update an existing behavioral tracking entry for a customer, typically to correct event classification or redact/rectify sensitive event data. Mutation is only allowed by authorized parties (owner or admin) and all updates are logged for compliance.\n\nReturns the updated event record after mutation. Forbidden or unauthorized mutability returns error or audit note.","summary":"Update behavioral tracking record for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer","schema":{"type":"string","format":"uuid"}},{"name":"behaviorTrackingId","description":"Unique identifier of the behavioral tracking record being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated event data to patch the behavior tracking record","typeName":"IAIMallBackendBehaviorTracking.IUpdate"},"responseBody":{"description":"The updated behavioral tracking record","typeName":"IAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates details of a specific behavioral tracking record for a customer in the aimall_backend_behavior_trackings table, identified by customerId and behaviorTrackingId. Permits correcting event type or data (for example, to redact sensitive details or fix misclassified activity). Enforces ownership/permission and logs all modifications for audit. Typically rare but important for compliance and debugging.","path":"/aimall-backend/administrator/customers/{customerId}/behaviorTrackings/{behaviorTrackingId}","method":"put","description":"Update an existing behavioral tracking entry for a customer, typically to correct event classification or redact/rectify sensitive event data. Mutation is only allowed by authorized parties (owner or admin) and all updates are logged for compliance.\n\nReturns the updated event record after mutation. Forbidden or unauthorized mutability returns error or audit note.","summary":"Update behavioral tracking record for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer","schema":{"type":"string","format":"uuid"}},{"name":"behaviorTrackingId","description":"Unique identifier of the behavioral tracking record being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated event data to patch the behavior tracking record","typeName":"IAIMallBackendBehaviorTracking.IUpdate"},"responseBody":{"description":"The updated behavioral tracking record","typeName":"IAIMallBackendBehaviorTracking"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (removes) a behavioral tracking event for a customer from the aimall_backend_behavior_trackings table by customerId and behaviorTrackingId. As no soft delete field exists, this is a hard delete. Triggers full compliance/audit logs and is typically used for regulatory redactions, activity removal requests, or system policy enforcement on user request. Enforces strict permission control and records deletion events for audit log purposes.","path":"/aimall-backend/customer/customers/{customerId}/behaviorTrackings/{behaviorTrackingId}","method":"delete","description":"Hard delete of a behavioral tracking event record for the specified customer. Used for regulatory right-to-be-forgotten compliance, admin-driven redaction, or owner-requested event removal.\n\nOnly the owner (customer) or authorized admin may execute this. All deletions and attempts are fully logged and monitored for abuse prevention or compliance reporting. The absence of a soft delete field means the operation is irreversible.\n\nNo body or data is returned except for success/failure code.","summary":"Delete a specific behavior tracking record for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose behavioral record is to be deleted","schema":{"type":"string","format":"uuid"}},{"name":"behaviorTrackingId","description":"Unique identifier of the behavioral tracking record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes (removes) a behavioral tracking event for a customer from the aimall_backend_behavior_trackings table by customerId and behaviorTrackingId. As no soft delete field exists, this is a hard delete. Triggers full compliance/audit logs and is typically used for regulatory redactions, activity removal requests, or system policy enforcement on user request. Enforces strict permission control and records deletion events for audit log purposes.","path":"/aimall-backend/administrator/customers/{customerId}/behaviorTrackings/{behaviorTrackingId}","method":"delete","description":"Hard delete of a behavioral tracking event record for the specified customer. Used for regulatory right-to-be-forgotten compliance, admin-driven redaction, or owner-requested event removal.\n\nOnly the owner (customer) or authorized admin may execute this. All deletions and attempts are fully logged and monitored for abuse prevention or compliance reporting. The absence of a soft delete field means the operation is irreversible.\n\nNo body or data is returned except for success/failure code.","summary":"Delete a specific behavior tracking record for a customer (Actors DB)","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose behavioral record is to be deleted","schema":{"type":"string","format":"uuid"}},{"name":"behaviorTrackingId","description":"Unique identifier of the behavioral tracking record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a list of all delivery addresses registered by a given customer. It sources address data from the aimall_backend_addresses table, using the specified customerId as a foreign key constraint to select only entries that belong to this customer. Relationships and entity integrity are enforced at the database level, and only fields that actually exist in the schema will be returned. Ideal for user profile settings and checkout address pickers.","path":"/aimall-backend/customer/customers/{customerId}/addresses","method":"get","description":"Fetch all delivery addresses for a given customer as stored in the aimall_backend_addresses table. Each address includes details such as alias, recipient name, phone, address lines, city, postal code, country, is_default flag, and update timestamp.\n\nThis operation is restricted to authenticated users—customers can only view their own addresses; administrators may view all addresses for service/support. Security checks must verify ownership/role before allowing access.\n\nThe operation enables seamless checkout flows and address selectors by providing the full address book for a customer. Any errors such as non-existent customerId or unauthorized access will return appropriate errors.","summary":"Retrieve all delivery addresses for a customer (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer whose addresses are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A list of the customer's delivery addresses as stored in aimall_backend_addresses.","typeName":"IPageIAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"This operation retrieves a list of all delivery addresses registered by a given customer. It sources address data from the aimall_backend_addresses table, using the specified customerId as a foreign key constraint to select only entries that belong to this customer. Relationships and entity integrity are enforced at the database level, and only fields that actually exist in the schema will be returned. Ideal for user profile settings and checkout address pickers.","path":"/aimall-backend/administrator/customers/{customerId}/addresses","method":"get","description":"Fetch all delivery addresses for a given customer as stored in the aimall_backend_addresses table. Each address includes details such as alias, recipient name, phone, address lines, city, postal code, country, is_default flag, and update timestamp.\n\nThis operation is restricted to authenticated users—customers can only view their own addresses; administrators may view all addresses for service/support. Security checks must verify ownership/role before allowing access.\n\nThe operation enables seamless checkout flows and address selectors by providing the full address book for a customer. Any errors such as non-existent customerId or unauthorized access will return appropriate errors.","summary":"Retrieve all delivery addresses for a customer (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer whose addresses are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A list of the customer's delivery addresses as stored in aimall_backend_addresses.","typeName":"IPageIAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation enables complex searching, paging, and filtering of a customer's delivery addresses as maintained in the aimall_backend_addresses table. The request body supports various filters (by recipient, alias, city, and so on), sort options, and pagination settings. The operation respects strict ownership: only the addresses belonging to the specified customerId can be searched.","path":"/aimall-backend/customer/customers/{customerId}/addresses","method":"patch","description":"Perform advanced search and pagination over the addresses of a specific customer using the aimall_backend_addresses table. Supports filtering by various fields such as recipient_name, alias, city, or default status, as well as sorting and pagination.\n\nPermissions ensure that only the customer or authorized administrators can use this endpoint. Search results return only addresses directly associated with the customerId provided.\n\nRelated API: GET /customers/{customerId}/addresses returns all addresses, while this endpoint enables filtered and paginated queries. Error handling covers invalid customerId, out-of-bound paging parameters, and access violations.","summary":"Advanced search/filter of a customer's addresses (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer whose addresses are to be searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, sort, and pagination options for searching customer addresses.","typeName":"IAimallBackendAddress.IRequest"},"responseBody":{"description":"A filtered and paginated list of the customer's addresses matching search criteria.","typeName":"IPageIAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"This operation enables complex searching, paging, and filtering of a customer's delivery addresses as maintained in the aimall_backend_addresses table. The request body supports various filters (by recipient, alias, city, and so on), sort options, and pagination settings. The operation respects strict ownership: only the addresses belonging to the specified customerId can be searched.","path":"/aimall-backend/administrator/customers/{customerId}/addresses","method":"patch","description":"Perform advanced search and pagination over the addresses of a specific customer using the aimall_backend_addresses table. Supports filtering by various fields such as recipient_name, alias, city, or default status, as well as sorting and pagination.\n\nPermissions ensure that only the customer or authorized administrators can use this endpoint. Search results return only addresses directly associated with the customerId provided.\n\nRelated API: GET /customers/{customerId}/addresses returns all addresses, while this endpoint enables filtered and paginated queries. Error handling covers invalid customerId, out-of-bound paging parameters, and access violations.","summary":"Advanced search/filter of a customer's addresses (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer whose addresses are to be searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, sort, and pagination options for searching customer addresses.","typeName":"IAimallBackendAddress.IRequest"},"responseBody":{"description":"A filtered and paginated list of the customer's addresses matching search criteria.","typeName":"IPageIAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation fetches a single address by its id for a specific customer. It uses both the customerId and addressId as constraints to ensure entity integrity and ownership, referencing the aimall_backend_addresses table. Results are restricted to the requesting user's addresses unless an admin is accessing it for support purposes.","path":"/aimall-backend/customer/customers/{customerId}/addresses/{addressId}","method":"get","description":"Fetch details of a specific delivery address, identified by addressId, for a customer specified by customerId as stored in aimall_backend_addresses. Fields returned include all address components, flags, and updated_at.\n\nSecurity ensures that only the owner customer or an admin can fetch private address data. Cross-account access is denied unless elevated permissions are present.\n\nThis is used in detailed address edit screens or address selection for orders. Errors for non-existent or unauthorized access are managed appropriately.","summary":"Fetch one address for customer by addressId (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer associated with the address.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"The unique identifier (UUID) of the desired address record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for a single delivery address record.","typeName":"IAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"This operation fetches a single address by its id for a specific customer. It uses both the customerId and addressId as constraints to ensure entity integrity and ownership, referencing the aimall_backend_addresses table. Results are restricted to the requesting user's addresses unless an admin is accessing it for support purposes.","path":"/aimall-backend/administrator/customers/{customerId}/addresses/{addressId}","method":"get","description":"Fetch details of a specific delivery address, identified by addressId, for a customer specified by customerId as stored in aimall_backend_addresses. Fields returned include all address components, flags, and updated_at.\n\nSecurity ensures that only the owner customer or an admin can fetch private address data. Cross-account access is denied unless elevated permissions are present.\n\nThis is used in detailed address edit screens or address selection for orders. Errors for non-existent or unauthorized access are managed appropriately.","summary":"Fetch one address for customer by addressId (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer associated with the address.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"The unique identifier (UUID) of the desired address record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for a single delivery address record.","typeName":"IAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new delivery address for a customer by inserting a new record into the aimall_backend_addresses table. The request body requires address fields such as alias, recipient, phone, address detail, and default flag. If is_default is set, the API enforces business rules to ensure only one default per customer.","path":"/aimall-backend/customer/customers/{customerId}/addresses","method":"post","description":"Register a new delivery address for the specified customer by customerId. The operation inserts a normalized address record into aimall_backend_addresses, enforcing referential integrity and uniqueness constraints as defined in the schema.\n\nOnly the account owner (customer) or administrative actors may use this endpoint. The implementation must ensure the new address is strictly associated with the user in path parameter. If is_default is specified, the API ensures it's the only default for the customer.\n\nRelated endpoints: PUT for address updates, GET for address retrieval. Errors include invalid input, exceeding allowed addresses, or access violations.","summary":"Add a new address for a customer (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer for whom the address is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Address creation details conforming to aimall_backend_addresses model.","typeName":"IAimallBackendAddress.ICreate"},"responseBody":{"description":"The newly created address record as stored in the database.","typeName":"IAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"This operation creates a new delivery address for a customer by inserting a new record into the aimall_backend_addresses table. The request body requires address fields such as alias, recipient, phone, address detail, and default flag. If is_default is set, the API enforces business rules to ensure only one default per customer.","path":"/aimall-backend/administrator/customers/{customerId}/addresses","method":"post","description":"Register a new delivery address for the specified customer by customerId. The operation inserts a normalized address record into aimall_backend_addresses, enforcing referential integrity and uniqueness constraints as defined in the schema.\n\nOnly the account owner (customer) or administrative actors may use this endpoint. The implementation must ensure the new address is strictly associated with the user in path parameter. If is_default is specified, the API ensures it's the only default for the customer.\n\nRelated endpoints: PUT for address updates, GET for address retrieval. Errors include invalid input, exceeding allowed addresses, or access violations.","summary":"Add a new address for a customer (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer for whom the address is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Address creation details conforming to aimall_backend_addresses model.","typeName":"IAimallBackendAddress.ICreate"},"responseBody":{"description":"The newly created address record as stored in the database.","typeName":"IAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates an existing delivery address for a customer, based on addressId and associated customerId. It performs an update on the aimall_backend_addresses table, enforcing strict ownership and business validation; only the owner or admin can modify. It prohibits updates to addresses not owned by the customer.","path":"/aimall-backend/customer/customers/{customerId}/addresses/{addressId}","method":"put","description":"Update an existing address entry for a customer, identified by customerId and addressId, using data from IAimallBackendAddress.IUpdate. \n\nThe operation performs partial/full update on aimall_backend_addresses fields such as alias, recipient_name, phone, address details, and is_default, keeping referential and business constraints enforced (e.g., only one default address per customer).\n\nCan only be used by the address owner or admin. Related endpoints: GET for detail view, DELETE for removal.\n\nError cases: trying to update another customer's address, invalid addressId, or business rule conflicts (e.g., attempting to set multiple addresses as default).","summary":"Update an existing address for a customer (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer whose address is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"The unique identifier (UUID) of the address record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the address record per aimall_backend_addresses.","typeName":"IAimallBackendAddress.IUpdate"},"responseBody":{"description":"The updated address record as stored in aimall_backend_addresses.","typeName":"IAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"This operation updates an existing delivery address for a customer, based on addressId and associated customerId. It performs an update on the aimall_backend_addresses table, enforcing strict ownership and business validation; only the owner or admin can modify. It prohibits updates to addresses not owned by the customer.","path":"/aimall-backend/administrator/customers/{customerId}/addresses/{addressId}","method":"put","description":"Update an existing address entry for a customer, identified by customerId and addressId, using data from IAimallBackendAddress.IUpdate. \n\nThe operation performs partial/full update on aimall_backend_addresses fields such as alias, recipient_name, phone, address details, and is_default, keeping referential and business constraints enforced (e.g., only one default address per customer).\n\nCan only be used by the address owner or admin. Related endpoints: GET for detail view, DELETE for removal.\n\nError cases: trying to update another customer's address, invalid addressId, or business rule conflicts (e.g., attempting to set multiple addresses as default).","summary":"Update an existing address for a customer (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer whose address is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"The unique identifier (UUID) of the address record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the address record per aimall_backend_addresses.","typeName":"IAimallBackendAddress.IUpdate"},"responseBody":{"description":"The updated address record as stored in aimall_backend_addresses.","typeName":"IAimallBackendAddress"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes (removes) an address record for a given customer and address, identified by customerId and addressId. It performs a hard delete if there are no soft delete fields (which is the case for aimall_backend_addresses schema), directly removing the row. Only owners or admins may perform the operation.","path":"/aimall-backend/customer/customers/{customerId}/addresses/{addressId}","method":"delete","description":"Delete an address for a customer using customerId and addressId according to the schema for aimall_backend_addresses. Since there are no soft delete fields in the model, this performs a permanent removal from the database.\n\nOnly the address owner or an authorized admin may execute the deletion. Errors include trying to delete someone else's address or a non-existent address.\n\nAfter deletion, related data (e.g., orders) should handle address references according to platform policy.","summary":"Delete (hard) an address for a customer (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer whose address is to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"The unique identifier (UUID) of the address to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"This operation deletes (removes) an address record for a given customer and address, identified by customerId and addressId. It performs a hard delete if there are no soft delete fields (which is the case for aimall_backend_addresses schema), directly removing the row. Only owners or admins may perform the operation.","path":"/aimall-backend/administrator/customers/{customerId}/addresses/{addressId}","method":"delete","description":"Delete an address for a customer using customerId and addressId according to the schema for aimall_backend_addresses. Since there are no soft delete fields in the model, this performs a permanent removal from the database.\n\nOnly the address owner or an authorized admin may execute the deletion. Errors include trying to delete someone else's address or a non-existent address.\n\nAfter deletion, related data (e.g., orders) should handle address references according to platform policy.","summary":"Delete (hard) an address for a customer (aimall_backend_addresses).","parameters":[{"name":"customerId","description":"The unique identifier (UUID) of the customer whose address is to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"The unique identifier (UUID) of the address to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a list of all sellers registered in the system, selecting from the aimall_backend_sellers table. Supports general list display purposes and may be filtered, sorted, or paged via additional endpoints. Seller records provide atomic data per the schema.","path":"/aimall-backend/administrator/sellers","method":"get","description":"Fetch all registered sellers from the aimall_backend_sellers table. Each seller entry includes business_name, email, contact_phone, status, and audit timestamps.\n\nThis is typically used by administrators to oversee merchant onboarding and by business intelligence tools. Permission checks enable different result scopes (all sellers for admin; own record for seller).\n\nResults may be returned as a paginated list. Errors cover unauthorized access and internal errors.","summary":"Fetch all sellers (aimall_backend_sellers).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of seller records conforming to aimall_backend_sellers schema.","typeName":"IPageIAimallBackendSeller"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation enables advanced, paginated search/filtering of sellers as stored in aimall_backend_sellers. Request body allows specifying filters (e.g., by business name or status), sort options, and pagination controls for scalable seller management in the admin UI.","path":"/aimall-backend/administrator/sellers","method":"patch","description":"Search, filter, and paginate the list of sellers via aimall_backend_sellers. Supports complex criteria such as business_name partial match, status selection, or range queries for created_at.\n\nAvailable only to users with admin roles due to sensitive nature and data visibility requirements. This endpoint supports management consoles and reporting tools needing fine-grained control.\n\nErrors include invalid filter parameters, out-of-bound pagination, or unauthorized access.","summary":"Search/filter sellers with paging (aimall_backend_sellers).","parameters":[],"requestBody":{"description":"Request with filter, sort, and paging for seller search.","typeName":"IAimallBackendSeller.IRequest"},"responseBody":{"description":"Filtered, paginated list of sellers as returned by aimall_backend_sellers.","typeName":"IPageIAimallBackendSeller"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation fetches full detail of a single seller, selected by sellerId. It retrieves normalized merchant data from the aimall_backend_sellers table, referencing only schema-defined attributes. Used for seller management, admin review, and seller self-service record retrieval.","path":"/aimall-backend/seller/sellers/{sellerId}","method":"get","description":"Retrieve a specific seller's detailed information using their unique sellerId. Returns all schema fields such as business_name, email, contact_phone, status, created/updated timestamps.\n\nThis endpoint is used by admins for merchant monitoring and by sellers to fetch their own account record. Access is restricted by role: sellers can access their accounts; admins can access any seller.\n\nHandles errors such as missing sellerId or insufficient permissions.","summary":"Fetch a single seller record by sellerId (aimall_backend_sellers).","parameters":[{"name":"sellerId","description":"The unique identifier (UUID) for the seller to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full seller record as stored in aimall_backend_sellers.","typeName":"IAimallBackendSeller"},"authorizationRoles":["seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"This operation fetches full detail of a single seller, selected by sellerId. It retrieves normalized merchant data from the aimall_backend_sellers table, referencing only schema-defined attributes. Used for seller management, admin review, and seller self-service record retrieval.","path":"/aimall-backend/administrator/sellers/{sellerId}","method":"get","description":"Retrieve a specific seller's detailed information using their unique sellerId. Returns all schema fields such as business_name, email, contact_phone, status, created/updated timestamps.\n\nThis endpoint is used by admins for merchant monitoring and by sellers to fetch their own account record. Access is restricted by role: sellers can access their accounts; admins can access any seller.\n\nHandles errors such as missing sellerId or insufficient permissions.","summary":"Fetch a single seller record by sellerId (aimall_backend_sellers).","parameters":[{"name":"sellerId","description":"The unique identifier (UUID) for the seller to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full seller record as stored in aimall_backend_sellers.","typeName":"IAimallBackendSeller"},"authorizationRoles":["seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation registers a new seller in the marketplace by inserting a new row into aimall_backend_sellers. The POST request body includes merchant data such as business_name, email, and contact phone, all of which are required by the schema. The status is set according to onboarding workflow (e.g., 'pending' for review).","path":"/aimall-backend/administrator/sellers","method":"post","description":"Register a new seller and create their record in aimall_backend_sellers. The payload must include all required business and contact data. Business rules enforce data uniqueness constraints (e.g., no duplicate emails).\n\nTypical use-case: new merchant onboarding. Available to self-registering merchants or authorized admin staff per policy. Created sellers are returned in full detail as stored.\n\nError cases: missing or invalid input, duplicate entry, or policy violation on onboarding limits.","summary":"Register a new seller account (aimall_backend_sellers).","parameters":[],"requestBody":{"description":"Data for a new seller onboarding per IAimallBackendSeller.ICreate.","typeName":"IAimallBackendSeller.ICreate"},"responseBody":{"description":"The newly registered seller account as returned from aimall_backend_sellers.","typeName":"IAimallBackendSeller"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates the master record of a seller, modifying data such as business_name, email, contact_phone, or status. The specified sellerId identifies which seller to update and the request body contains fields to modify. Only admin users may update other sellers; self-update may be allowed for own records.","path":"/aimall-backend/seller/sellers/{sellerId}","method":"put","description":"Update the details of an existing seller. Supply the sellerId and update fields to apply. This directly modifies aimall_backend_sellers fields for the record.\n\nRole constraints: only admin may edit other sellers; self-edit requires owner match. Changes are moderated for compliance if necessary.\n\nError responses for non-existent sellerId or access violation are possible.","summary":"Update a seller's data (aimall_backend_sellers).","parameters":[{"name":"sellerId","description":"The unique identifier (UUID) of the seller to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update for the target seller.","typeName":"IAimallBackendSeller.IUpdate"},"responseBody":{"description":"The updated seller record after changes have been committed.","typeName":"IAimallBackendSeller"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"This operation updates the master record of a seller, modifying data such as business_name, email, contact_phone, or status. The specified sellerId identifies which seller to update and the request body contains fields to modify. Only admin users may update other sellers; self-update may be allowed for own records.","path":"/aimall-backend/administrator/sellers/{sellerId}","method":"put","description":"Update the details of an existing seller. Supply the sellerId and update fields to apply. This directly modifies aimall_backend_sellers fields for the record.\n\nRole constraints: only admin may edit other sellers; self-edit requires owner match. Changes are moderated for compliance if necessary.\n\nError responses for non-existent sellerId or access violation are possible.","summary":"Update a seller's data (aimall_backend_sellers).","parameters":[{"name":"sellerId","description":"The unique identifier (UUID) of the seller to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update for the target seller.","typeName":"IAimallBackendSeller.IUpdate"},"responseBody":{"description":"The updated seller record after changes have been committed.","typeName":"IAimallBackendSeller"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes a seller's account based on a unique sellerId. Since the aimall_backend_sellers schema does not define any soft delete fields, the operation performs a hard delete, removing the row from the database. Only admin users can delete a seller under normal business rules; self-deletion may be separately controlled via platform policy.","path":"/aimall-backend/administrator/sellers/{sellerId}","method":"delete","description":"Delete the seller's account by sellerId. This operation removes the row from aimall_backend_sellers as a hard delete (no soft delete field in the schema).\n\nOnly admin role may perform deletion to ensure compliance and auditability. Related data (products, orders) must be managed to preserve integrity according to business rules.\n\nErrors can arise from missing sellerId or policy violations (e.g., attempted unauthorized deletion).","summary":"Hard delete a seller's account (aimall_backend_sellers).","parameters":[{"name":"sellerId","description":"The unique identifier (UUID) of the seller account to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a list of AIMall platform administrators from the aimall_backend_administrators table in the Actors domain. It is designed to provide platform staff with a means to audit, monitor, or manage administrator accounts. Returned data includes key attributes such as email, name, status, permission assignment, and creation timestamp. Listing supports system compliance and role assignment reviews and may be used for dashboards, analytics, and admin UX. This operation does not allow filtering via query parameters—for advanced filtering, use the PATCH endpoint.","path":"/aimall-backend/administrator/administrators","method":"get","description":"Retrieve a complete list of administrator accounts from the aimall_backend_administrators table, which models operators, platform staff, and system administrators with assigned permissions.\n\nReturned data includes basic identifying fields (email, name), permission id, and operational status, which should be checked by clients for proper role-based rendering. Results may include both active and suspended administrators for audit purposes. No sensitive authentication data (such as credentials or tokens) is present in this endpoint.\n\nAccessible only by authenticated administrators or those with sufficient permissions as mapped to the aimall_backend_permissions table. Used in admin-facing dashboards or compliance reporting. Excessive requests may be rate-limited or logged for monitoring.\n\nThe administrator list supports other operations such as role assignment (see permissions endpoints), and audit logging (see analytics domain).","summary":"Get list of AIMall platform administrators (actors domain)","parameters":[],"requestBody":null,"responseBody":{"description":"List of administrator accounts with basic information for audit and management.","typeName":"IAimallBackendAdministrator.ISummary"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This endpoint provides advanced search, filtering, and pagination over the aimall_backend_administrators table (Actors domain). Administrators may be filtered by status, permission, name, creation date, or other fields according to search criteria provided in the request body. Supports complex audit, compliance, and platform management workflows. This operation is needed for large-scale admin review, compliance checks, or multi-faceted dashboard queries.","path":"/aimall-backend/administrator/administrators","method":"patch","description":"Search, filter, and paginate the AIMall backend list of administrators using flexible query criteria referencing aimall_backend_administrators columns. The request body may contain filters for status (active, suspended, pending), permission roles, email, name, or creation/updated date ranges.\n\nThis endpoint supports compliance scenarios where platform operators must audit administrator roles by various segments, investigate configuration changes, or analyze admin account behaviors. Pagination and ordering are supported to ensure efficient UX with large datasets.\n\nAccessible to administrator users with role/permission sufficient under the RBAC system (see aimall_backend_permissions). Response structure is optimized for admin dashboard integration. Search operations may be logged to ensure auditability and monitor for inappropriate data access patterns.","summary":"Search and paginate administrators in the AIMall backend.","parameters":[],"requestBody":{"description":"Flexible search criteria and pagination params for administrator list filtering.","typeName":"IAimallBackendAdministrator.IRequest"},"responseBody":{"description":"Paginated and filtered result set of administrator data matching criteria.","typeName":"IPageIAimallBackendAdministrator.ISummary"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation retrieves a specific AIMall administrator's full details by its unique administrator id from the aimall_backend_administrators table (Actors domain). It is designed for admin resource detail views, audit, or direct management of administrator accounts. The operation returns all available properties for the administrator, including email, name, status, permission, and creation/update timestamps.","path":"/aimall-backend/administrator/administrators/{administratorId}","method":"get","description":"Get full detail for a single administrator account, identified by the administratorId path parameter, from the aimall_backend_administrators table. This model includes fields such as email, display name, status (active, pending, suspended), permission assignment, and full change timestamp data.\n\nUse this operation in administrator profile pages, for audit or management actions, or to check admin permission roles (with a join to the permissions table if needed). Security requires that only other administrators with appropriate permissions (e.g., super-admin, role manager) may access this detail.\n\nCare is taken to prevent exposing sensitive admin authentication credentials (password data is never returned). Related changes may be tracked via the audit log (see analytics domain for aimall_backend_audit_logs).","summary":"Get details for a single AIMall administrator by id.","parameters":[{"name":"administratorId","description":"Unique identifier of the administrator to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full profile of the selected administrator, including status, permission, and audit timestamps.","typeName":"IAimallBackendAdministrator"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new AIMall platform administrator resource in the aimall_backend_administrators table. Required fields include permission assignment, email, display name, operational status. The operation is used by super administrator or permission managers to onboard platform staff. Creation details are logged in the audit records for compliance. Password setup is handled via separate flows not covered in this operation.","path":"/aimall-backend/administrator/administrators","method":"post","description":"Create a new administrator account in the AIMall backend, referencing the aimall_backend_administrators schema. The request must provide the permission_id, email, display name (name), and operational status. On success, the endpoint returns the created administrator resource for further processing. Authentication and authorization checks apply at the service layer—only super administrators or permission managers can invoke this operation.\n\nSensitive credentials are not handled here (password management flows are external). On success, the audit log is updated to record account creation per compliance requirement. Account status (active, pending) is set according to input, which may control admin dashboard or system access.","summary":"Create a new platform administrator account (Actors domain).","parameters":[],"requestBody":{"description":"Administrator account data: permission_id, email, display name, and status.","typeName":"IAimallBackendAdministrator.ICreate"},"responseBody":{"description":"Newly created administrator resource as confirmation and for profile display.","typeName":"IAimallBackendAdministrator"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates an existing AIMall administrator account identified by administratorId in the aimall_backend_administrators table. Updatable fields include permission assignment (permission_id), display name (name), status, and optionally email. Permission checks are enforced by business logic: only authorized operators with correct privileges can update admin records. Modifications are tracked through audit logs for compliance. Password update flows are managed separately and are not handled via this operation.","path":"/aimall-backend/administrator/administrators/{administratorId}","method":"put","description":"Update an administrator record's information for an existing platform admin account identified by administratorId. The request body includes new values for permission_id, name, status, and may include email if required. Business logic ensures that changes are allowed only by admins with sufficient permission (see aimall_backend_permissions schema). All changes are logged for compliance, supporting security reviews or escalation.\n\nThe update operation never modifies sensitive authentication data (like password), which is handled via dedicated flows. The response returns the updated administrator record including all main attributes and audit information for display or further inspection.","summary":"Update an AIMall administrator record (Actors domain).","parameters":[{"name":"administratorId","description":"Unique identifier of the administrator to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the administrator account: permission assignment, display name, status, and optionally email.","typeName":"IAimallBackendAdministrator.IUpdate"},"responseBody":{"description":"Updated administrator resource, reflecting new permission, name, or status.","typeName":"IAimallBackendAdministrator"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes an existing administrator account, identified by administratorId, from the aimall_backend_administrators table in the Actors domain. This is a hard delete operation because no deleted_at, is_deleted, or similar fields exist in the underlying schema. Only super administrators or administrators with strong permission may run this. Deletion is audit-logged, and associated support tickets or logs are reviewed for re-assignment. Irrecoverable operation!","path":"/aimall-backend/administrator/administrators/{administratorId}","method":"delete","description":"Permanently delete an administrator account, identified by administratorId, from the aimall_backend_administrators schema. This is a hard delete (as no status/deleted flags are in schema). Only super administrators or those with explicit admin-management roles should call this, consistent with compliance/audit requirements. All deletions are registered in the audit logs (see analytics domain).\n\nThis operation MUST NOT be used for revoking just a user’s access; instead, status updates (via update) should be preferred where possible. Deletion is irreversible and may break foreign key constraints on assigned tickets or audit logs—data re-assignment is expected to be managed at the application service layer.","summary":"Delete an administrator account (HARD DELETE, irreversible).","parameters":[{"name":"administratorId","description":"Unique identifier of the administrator to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a list of all defined RBAC permission sets from the aimall_backend_permissions table (Actors domain). These records represent various roles (e.g., super_admin, support_admin, inventory_manager) used for platform access control. List data includes permission code, display name, description, and creation timestamp. Used for admin UX, compliance, and role management workflows. Recommended to combine with administrators endpoints to manage account assignments.","path":"/aimall-backend/administrator/permissions","method":"get","description":"List all available permission definitions and RBAC roles for platform administrators and sellers, referencing the aimall_backend_permissions table. Each record includes a code (unique), display name, and description. Results may be used in admin UX for role assignment, auditing, or platform policy review.\n\nThis endpoint is typically accessed by administrators with role/permission management authority. Permissions here can be assigned to new or existing admin accounts (see administrators endpoints for usage). No sensitive data is returned; data is suitable for overview and assignment screens.","summary":"Get full list of RBAC permission role definitions.","parameters":[],"requestBody":null,"responseBody":{"description":"List of all permission role definitions for display or assignment.","typeName":"IAimallBackendPermission.ISummary"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This endpoint provides search, pagination, and filtering over the aimall_backend_permissions table. Filters may include permission code, display_name, or creation timestamp. Used by administrators to manage large numbers of roles or conduct compliance reviews. Recommended for admin UX scenarios where full enumeration is inefficient.","path":"/aimall-backend/administrator/permissions","method":"patch","description":"Search, filter, and paginate the list of platform RBAC permission definitions, using request body criteria as supported by columns in aimall_backend_permissions. Filters include permission code strings, display/display_name searches, or audit timestamp ranges. This supports compliance and multi-tenant system management where granularity of role definition and assignment is critical.\n\nOnly available to staff with permission management authority (see administrators endpoints). Typically used by UX components that enable admins to find/create/assign roles efficiently.","summary":"Search and filter RBAC roles and permissions with flexible criteria.","parameters":[],"requestBody":{"description":"Filter and pagination parameters for RBAC permission and role definitions.","typeName":"IAimallBackendPermission.IRequest"},"responseBody":{"description":"Paginated, filtered permission/role definitions for display in admin UX.","typeName":"IPageIAimallBackendPermission.ISummary"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation retrieves a specific permission/role definition from aimall_backend_permissions table by unique permissionId. Used to display role configuration, audit definition, or determine which accounts hold this role (with join to admin table). Returns full details: code, display name, description, creation timestamp. No assignment/usage listing here—see admin endpoints for usage info.","path":"/aimall-backend/administrator/permissions/{permissionId}","method":"get","description":"Get full configuration for a single RBAC permission/role, identified by permissionId path parameter, from aimall_backend_permissions. This model exposes all fields for compliance auditing and UX display. Used in admin dashboards for editing or reviewing role definitions. PermissionId must be a valid UUID; error if not found. Only authorized staff may invoke this endpoint.\n\nNo assignment information is included here—join against the admins table if needed for current assignments.","summary":"Get RBAC role/permission detail by id (Actors domain).","parameters":[{"name":"permissionId","description":"Unique identifier of the permission/role record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details for a single RBAC permission definition.","typeName":"IAimallBackendPermission"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new permission/role definition in the aimall_backend_permissions table, representing an RBAC role. The request body must include all required fields: permission code, display_name, and description. Used by super administrators or compliance managers to add new roles/permissions to the system. Results are used in subsequent role assignments and admin account creation.","path":"/aimall-backend/administrator/permissions","method":"post","description":"Create a new RBAC permission/role in the platform by supplying a unique code, display_name, and full description as required by the aimall_backend_permissions table. The operation can only be invoked by administrators with sufficient authority (typically super administrator or compliance manager).\n\nOn success, the full role definition is returned with assigned ID for further use. Role definitions are then available for assignment to administrator or seller accounts via their respective endpoints. Audit logs capture this event for compliance. No direct assignment occurs here—use admin endpoints to assign roles.","summary":"Create a new RBAC permission or role definition.","parameters":[],"requestBody":{"description":"Full detail required for defining new permission: unique code, display_name, description.","typeName":"IAimallBackendPermission.ICreate"},"responseBody":{"description":"Created RBAC permission/role full resource for assignment.","typeName":"IAimallBackendPermission"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates an existing permission/role, identified by permissionId, in the aimall_backend_permissions table. Editable fields include display_name and description; role code should be rarely updated but may be included for consistency. Used for compliance, platform extensibility, or role evolution. Any modification is logged via the audit mechanism for traceability. Only role/permission managers or super administrators should use this endpoint.","path":"/aimall-backend/administrator/permissions/{permissionId}","method":"put","description":"Update metadata for an RBAC permission or role definition, by permissionId (UUID) in the aimall_backend_permissions table. Allows modifications to display_name and description, and optionally to code for cases of role renaming (subject to business constraints). All changes are strictly logged for compliance.\n\nInvoke this when refining system roles, updating compliance documentation, or extending the platform’s permission model. Result returns the modified role/permission for UX update or further assignment decisions.","summary":"Update RBAC role/permission definition (Actors domain).","parameters":[{"name":"permissionId","description":"Unique identifier of the permission/role to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for this RBAC permission definition: code (if needed), display_name, description.","typeName":"IAimallBackendPermission.IUpdate"},"responseBody":{"description":"Updated RBAC permission definition, reflecting assignment to admin or seller accounts.","typeName":"IAimallBackendPermission"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes a permission/role definition identified by permissionId from the aimall_backend_permissions table. This is a hard delete (as no deleted_at, is_deleted or similar flag is present). Only administrators with permission/role management authority (super administrator, compliance managers) may run this operation. All actions are fully logged for compliance. Deletion is irreversible and will cause any assigned administrators or sellers to require manual re-assignment to other roles.","path":"/aimall-backend/administrator/permissions/{permissionId}","method":"delete","description":"Permanently delete a RBAC permission or role definition from the platform by permissionId (UUID), as there is no soft-delete or is_deleted field in the aimall_backend_permissions schema. Use with extreme caution—removal will result in unassigned state for any accounts currently mapped to this permission. This action cannot be reversed. All actions are fully logged by the audit mechanism.\n\nDo not use this endpoint for temporary suspension/blocking—modify assignments on accounts instead. Confirmation is expected prior to irreversible operations.","summary":"Delete an RBAC permission or role (hard delete, irreversible).","parameters":[{"name":"permissionId","description":"Unique identifier of the permission/role to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This endpoint retrieves a paginated list of products from the aimall_backend_products table, which serves as the main catalog for all products listed in the system. It provides the ability to obtain summary or detailed information about each product, facilitating browsing, product discovery, and catalog UIs. This operation includes all normalized fields present in the aimall_backend_products schema, such as product title, category, seller, description, main_thumbnail_uri, status, and timestamps. The endpoint supports listing across all products and is typically used by both customers and internal roles in the shopping platform. Pagination may be handled at the response DTO layer, offering metadata for result navigation. This read-only operation does not require request body data and provides only public product attributes.","path":"/aimall-backend/products","method":"get","description":"Retrieve a paginated list of product records from the core product catalog. Products represent central entities for e-commerce and are used to power listing, discovery, and selection workflows—each product maintains atomic fields as per the aimall_backend_products schema, including the title, description, main_thumbnail_uri, status, and references to category and seller. \n\nThis endpoint is publicly accessible, enabling both authenticated and guest users to retrieve products for general browsing and shopping. Internally, the endpoint interacts with the aimall_backend_products table, aggregating all available or active product entries and providing them in summary or detailed formats, as required by the frontend or integrating systems. The endpoint does not return unpublished, inactive, or deleted records unless so configured.\n\nNo authentication is strictly required for general product catalog browsing, reflecting common marketplace frontend use cases. However, sensitive or restricted product details (such as cost or supplier information) are excluded from the base response. Associated data, such as product options and inventory, are not included directly, but separate endpoints address those associations. The operation is optimized for speed, and API responses are bounded for pagination and scalability, ensuring performance and compliance with rate-limiting policies.","summary":"Retrieve a paginated list of all products from the product catalog (aimall_backend_products).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of shopping products with summary/detail fields as per the catalog entity.","typeName":"IPageIAimallBackendProduct"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"This endpoint supports advanced search and filtering of products within the aimall_backend_products table. It allows complex queries, including filtering by product title, category, seller, status, and supports sorting and pagination. The operation is mapped to the product catalog entity and offers a powerful tool for customers, sellers, or admins to locate specific products based on granular criteria. The endpoint processes request body data defining filter/search parameters as per established data transfer object (DTO) patterns, and returns a paginated result according to the query.","path":"/aimall-backend/products","method":"patch","description":"Search and filter products from the platform catalog by leveraging advanced query and pagination features. This endpoint references the aimall_backend_products model and supports multi-faceted queries, such as category, seller, status, and keyword match against the product title and description.\n\nThe endpoint is available to any requesting party due to its role in powering product search, advanced discovery, and backoffice product management tools. The request body must conform to the expected DTO schema, encapsulating search terms, filter options, pagination controls, and sorting preferences. Results are strictly limited to normalized, non-deleted products per the schema—sensitive details are withheld from the base response. The endpoint is performance-optimized, enabling scalable product discovery as required by frontend web/mobile layers. Output provides both data and necessary pagination metadata, ensuring complete client handling.","summary":"Advanced search and filter operation for products (aimall_backend_products) by query and paginated.","parameters":[],"requestBody":{"description":"Filtering and search criteria for product catalog advanced queries.","typeName":"IAimallBackendProduct.IRequest"},"responseBody":{"description":"Paginated list of products matching search and filter criteria.","typeName":"IPageIAimallBackendProduct"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"This endpoint retrieves detailed information for a single product, uniquely identified by its UUID. It directly references the aimall_backend_products table, returning all available and non-sensitive product fields as defined by the schema. This includes product metadata, seller, category, description, main_thumbnail_uri, and timestamps. The operation is foundational for detail page displays and allows customers, sellers, and administrators to obtain canonical product records. The endpoint is read-only, public, and does not expose restricted business or supplier data beyond what exists in the public schema.","path":"/aimall-backend/products/{productId}","method":"get","description":"Retrieve a single product's full details by specifying its unique identifier. The endpoint connects directly to the aimall_backend_products table, returning all normalized, public attributes for the requested product, including title, description, main_thumbnail_uri, seller and category references, product status, and timestamps.\n\nThe operation is public and does not require authentication, supporting product detail views for customers as well as administrative lookup. Security and business logic ensure that only non-sensitive product data is returned, and only for products that are not deleted. Requests for non-existent or unauthorized products return appropriate error codes. Supplementary product data, like options and inventory, can be accessed via related endpoints.\n\nEndpoint performance and error handling are robust, ensuring high availability and clear feedback for both success and error responses.","summary":"Retrieve full details for a single product by UUID (aimall_backend_products).","parameters":[{"name":"productId","description":"UUID of the target product to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified product.","typeName":"IAimallBackendProduct"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"This endpoint creates a new product entry by inserting a record into the aimall_backend_products table. Incoming data must match the creation DTO—encompassing all required product metadata, including title, seller, category, description, status, and optionally main_thumbnail_uri. The operation enforces unique and normalized data constraints as per the schema. Only authenticated users with seller or administrator privileges are authorized to create products; no public or customer-level creation is permitted. The endpoint applies input validation and business rules to prevent duplication and ensure referential integrity with related entities (such as seller and category IDs). On success, returns the newly created product with system-assigned fields populated.","path":"/aimall-backend/seller/products","method":"post","description":"Create a new product record in the system catalog, directly corresponding to the aimall_backend_products table. Input structure aligns with the schema's requirements for product insertion, demanding fields such as category, seller, title, status, and optional description or thumbnail.\n\nProduct creation is restricted to authenticated users with appropriate privileges, typically sellers (for their own products) or administrators (for marketplace management). The endpoint enforces validation of foreign keys, uniqueness of seller/title pairs, and proper data typing for all attributes. Security policies require all call attempts to be properly authenticated and authorized based on the actor's role.\n\nOn creation, the system populates automatic fields such as product ID, created_at, and updated_at. Failure modes include invalid data, missing required fields, unauthorized access, or foreign key violations, with descriptive error feedback.","summary":"Create a new product in the aimall_backend_products catalog.","parameters":[],"requestBody":{"description":"Required product fields for product creation as per catalog schema.","typeName":"IAimallBackendProduct.ICreate"},"responseBody":{"description":"Product entity as inserted into the system catalog.","typeName":"IAimallBackendProduct"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"This endpoint creates a new product entry by inserting a record into the aimall_backend_products table. Incoming data must match the creation DTO—encompassing all required product metadata, including title, seller, category, description, status, and optionally main_thumbnail_uri. The operation enforces unique and normalized data constraints as per the schema. Only authenticated users with seller or administrator privileges are authorized to create products; no public or customer-level creation is permitted. The endpoint applies input validation and business rules to prevent duplication and ensure referential integrity with related entities (such as seller and category IDs). On success, returns the newly created product with system-assigned fields populated.","path":"/aimall-backend/administrator/products","method":"post","description":"Create a new product record in the system catalog, directly corresponding to the aimall_backend_products table. Input structure aligns with the schema's requirements for product insertion, demanding fields such as category, seller, title, status, and optional description or thumbnail.\n\nProduct creation is restricted to authenticated users with appropriate privileges, typically sellers (for their own products) or administrators (for marketplace management). The endpoint enforces validation of foreign keys, uniqueness of seller/title pairs, and proper data typing for all attributes. Security policies require all call attempts to be properly authenticated and authorized based on the actor's role.\n\nOn creation, the system populates automatic fields such as product ID, created_at, and updated_at. Failure modes include invalid data, missing required fields, unauthorized access, or foreign key violations, with descriptive error feedback.","summary":"Create a new product in the aimall_backend_products catalog.","parameters":[],"requestBody":{"description":"Required product fields for product creation as per catalog schema.","typeName":"IAimallBackendProduct.ICreate"},"responseBody":{"description":"Product entity as inserted into the system catalog.","typeName":"IAimallBackendProduct"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This endpoint updates an existing product in the aimall_backend_products table, identified by its unique productId. It enables sellers or administrators to modify details such as title, description, main_thumbnail_uri, status, and category. Update operations are restricted to authorized users who own the product or have administrative rights. Foreign keys and business rules (such as unique seller/title pairs) are revalidated during update. The response returns the updated product as persisted in the catalog. Modification timestamps are updated automatically to reflect change. Unauthorized or invalid update attempts are denied with clear feedback.","path":"/aimall-backend/seller/products/{productId}","method":"put","description":"Update one product for which the actor holds update privileges (ownership or administrator) in the aimall_backend_products table. The request body follows the catalog product update DTO, accepting only permissible modifications (such as title, description, category, status, thumbnail). Foreign key relationships are validated for integrity and data correctness.\n\nThis operation is restricted to sellers (for their own products) and administrators, leveraging role-based access and additional business rules. All changes must pass validation; improper attempts (such as duplicate titles for the same seller or invalid foreign key references) are rejected. The endpoint updates updated_at field to the current timestamp and returns the complete, updated product entity.\n\nConcurrency and error scenarios, including lost updates or references to deleted entities, return structured API error responses. This endpoint does not allow public or customer-initiated modifications; only privileged actors may update product records.","summary":"Update an existing product in the aimall_backend_products catalog by unique productId.","parameters":[{"name":"productId","description":"UUID corresponding to the targeted product in aimall_backend_products.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information and fields for a product update operation.","typeName":"IAimallBackendProduct.IUpdate"},"responseBody":{"description":"Product entity reflecting all applied updates as returned from catalog.","typeName":"IAimallBackendProduct"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"This endpoint updates an existing product in the aimall_backend_products table, identified by its unique productId. It enables sellers or administrators to modify details such as title, description, main_thumbnail_uri, status, and category. Update operations are restricted to authorized users who own the product or have administrative rights. Foreign keys and business rules (such as unique seller/title pairs) are revalidated during update. The response returns the updated product as persisted in the catalog. Modification timestamps are updated automatically to reflect change. Unauthorized or invalid update attempts are denied with clear feedback.","path":"/aimall-backend/administrator/products/{productId}","method":"put","description":"Update one product for which the actor holds update privileges (ownership or administrator) in the aimall_backend_products table. The request body follows the catalog product update DTO, accepting only permissible modifications (such as title, description, category, status, thumbnail). Foreign key relationships are validated for integrity and data correctness.\n\nThis operation is restricted to sellers (for their own products) and administrators, leveraging role-based access and additional business rules. All changes must pass validation; improper attempts (such as duplicate titles for the same seller or invalid foreign key references) are rejected. The endpoint updates updated_at field to the current timestamp and returns the complete, updated product entity.\n\nConcurrency and error scenarios, including lost updates or references to deleted entities, return structured API error responses. This endpoint does not allow public or customer-initiated modifications; only privileged actors may update product records.","summary":"Update an existing product in the aimall_backend_products catalog by unique productId.","parameters":[{"name":"productId","description":"UUID corresponding to the targeted product in aimall_backend_products.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information and fields for a product update operation.","typeName":"IAimallBackendProduct.IUpdate"},"responseBody":{"description":"Product entity reflecting all applied updates as returned from catalog.","typeName":"IAimallBackendProduct"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This endpoint deletes a product from the aimall_backend_products catalog by its unique identifier. The operation supports hard delete, as no soft delete fields exist for this schema. Only sellers (for their own products) and administrators are authorized to perform this sensitive operation. All associated data integrity checks are performed prior to deletion (e.g. ensuring product is not referenced by active orders). Attempts to delete non-existent or unauthorized products are denied with proper error codes. No response body is returned on successful deletion; errors and exceptions are clearly reported.","path":"/aimall-backend/seller/products/{productId}","method":"delete","description":"Hard delete a product entity from the aimall_backend_products table, by its UUID. The operation does not support soft deletion, as there is no such field on the schema; the row is removed completely. This endpoint is restricted to sellers for their own products and administrators with the appropriate privileges, and checks for dependent/linked data prior to allowing delete.\n\nUnauthorized requests or attempts to remove protected or still-referenced products (such as those part of historical orders) are denied with appropriate error messaging. On success, the product record and its direct dependencies are deleted. This action is non-reversible, and error scenarios are reported for all constraint or permission issues.\n\nFor audit and security, all delete attempts are logged, and the API produces no content in the response on successful operation. Only privileged roles can call this endpoint; customers have no access.","summary":"Delete a product by unique productId as a hard delete from aimall_backend_products.","parameters":[{"name":"productId","description":"UUID of the product to be deleted from the catalog.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"This endpoint deletes a product from the aimall_backend_products catalog by its unique identifier. The operation supports hard delete, as no soft delete fields exist for this schema. Only sellers (for their own products) and administrators are authorized to perform this sensitive operation. All associated data integrity checks are performed prior to deletion (e.g. ensuring product is not referenced by active orders). Attempts to delete non-existent or unauthorized products are denied with proper error codes. No response body is returned on successful deletion; errors and exceptions are clearly reported.","path":"/aimall-backend/administrator/products/{productId}","method":"delete","description":"Hard delete a product entity from the aimall_backend_products table, by its UUID. The operation does not support soft deletion, as there is no such field on the schema; the row is removed completely. This endpoint is restricted to sellers for their own products and administrators with the appropriate privileges, and checks for dependent/linked data prior to allowing delete.\n\nUnauthorized requests or attempts to remove protected or still-referenced products (such as those part of historical orders) are denied with appropriate error messaging. On success, the product record and its direct dependencies are deleted. This action is non-reversible, and error scenarios are reported for all constraint or permission issues.\n\nFor audit and security, all delete attempts are logged, and the API produces no content in the response on successful operation. Only privileged roles can call this endpoint; customers have no access.","summary":"Delete a product by unique productId as a hard delete from aimall_backend_products.","parameters":[{"name":"productId","description":"UUID of the product to be deleted from the catalog.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This endpoint retrieves all product option records for a given product in aimall_backend_product_options, supporting listing of variant options such as color or size for display or variant selection. The operation returns all options associated with the specified productId, leveraging the foreign key relationships defined in the schema. Primarily intended for customers viewing product options, sellers reviewing their listings, or admin interfaces. The response is a list or paginated set of product options as per the DTO mapping. Result is constrained to only valid, non-deleted option records for the product.","path":"/aimall-backend/products/{productId}/productOptions","method":"get","description":"List all product option records for a specified product by UUID. Each option record references a valid product from aimall_backend_products and includes atomic fields such as name and value. Listing is typically for customers to select variants or for sellers/admins to review available configurations.\n\nThe operation is public and requires only a valid product ID. All option records associated with this productId are aggregated and returned, referencing the aimall_backend_product_options schema. The endpoint omits non-existent/invalid records and ensures that results are consistent with business/display logic. No sensitive information is returned in output.\n\nFor extended management or batch operations, see advanced endpoints for option creation and modification. Output is a list or paginated DTO of product option entities.","summary":"Retrieve all product options associated with a given product (aimall_backend_product_options).","parameters":[{"name":"productId","description":"UUID of the product for which to list associated options.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all product option records for the associated product.","typeName":"IPageIAimallBackendProductOption"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"This endpoint supports advanced searching and filtering of product options for a given product. The search enables clients to specify complex criteria—such as option name or value patterns—for fast and paginated variant discovery. This is mapped to the aimall_backend_product_options table, supporting advanced management UIs for customers, sellers, or admin staff. The result includes paging details and only returns options referencing the productId parameter. The request body must include filtering/search DTO criteria.","path":"/aimall-backend/products/{productId}/productOptions","method":"patch","description":"Perform advanced search and filter across the product option records for a specified product, as defined by aimall_backend_product_options. Operations are scoped by productId and may include criteria on the option name or value for powerful variant management tools.\n\nThis operation is available to all users—including customers, sellers, and admins—enabling granular querying for product variant data. Paginated output ensures scalability and performance for large product catalogs. The endpoint requires a productId as a path parameter, and all filtering/sorting/pagination details must be present in the request body, conforming to the product option search DTO. Only records that pass the search criteria and belong to the specified product are returned.","summary":"Advanced search/filter of product options for a given product (aimall_backend_product_options).","parameters":[{"name":"productId","description":"UUID of the product whose options are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced query/filter DTO for productOption records associated with a product.","typeName":"IAimallBackendProductOption.IRequest"},"responseBody":{"description":"Paginated result set for product options matching filter criteria for the specified product.","typeName":"IPageIAimallBackendProductOption"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"This endpoint retrieves a single product option by its unique identifier, linked to a specific product. Returns all atomic fields as defined in aimall_backend_product_options—such as the name and value of the option—only if the option is attached to the referenced product. Used for display, option detail, and variant management pages. The endpoint is read-only and does not expose any non-public data. Only valid, non-deleted records are returned; errors are raised for bad or mismatched IDs.","path":"/aimall-backend/products/{productId}/productOptions/{productOptionId}","method":"get","description":"Retrieve a single product option record, ensuring it is attached to the referenced productId as per the foreign key relationship in aimall_backend_product_options. Enables user interfaces and variant management screens to provide full detail for an option.\n\nUsed for detail display by customers, sellers, or administrators—this endpoint exposes all public, normalized fields for a productOption, such as name and value. Authorization is not required for basic reads. The endpoint performs integrity checks to ensure the productOptionId belongs to productId and returns appropriate errors if not found.","summary":"Retrieve detail data for a product option by product and option IDs (aimall_backend_product_options).","parameters":[{"name":"productId","description":"UUID of the parent product of the product option.","schema":{"type":"string","format":"uuid"}},{"name":"productOptionId","description":"UUID of the product option record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail data for the specified product option record.","typeName":"IAimallBackendProductOption"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"This endpoint creates a new product option attached to a specific product, inserting a record in the aimall_backend_product_options table. The creator provides option metadata, including name and value, alongside the referenced product's ID. Creation is restricted to sellers (of the product) or administrators. The endpoint validates foreign key integrity by ensuring the option is being created for a legitimate product. Only authorized users may create options, and uniqueness is enforced within product/option/type tuples. On success, returns the new option record as persisted.","path":"/aimall-backend/seller/products/{productId}/productOptions","method":"post","description":"Create a new product option for a given product, inserting a row in aimall_backend_product_options. The input must provide all required option fields as per the product option create DTO, including name, value, and the referenced productId.\n\nOnly sellers with ownership rights over the product or administrators with sufficient privilege may call this endpoint, reflecting the critical nature of variant management. Detects and rejects attempts at duplicate or invalid option creation (e.g., creating the same color/size twice for one product). The endpoint ensures the new option is uniquely mapped to the referenced product. On success, the new option record is returned, with all fields—including the system-generated UUID—set.","summary":"Create a new product option attached to a product in aimall_backend_product_options.","parameters":[{"name":"productId","description":"UUID of the product for which the product option is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Required fields for new product option creation.","typeName":"IAimallBackendProductOption.ICreate"},"responseBody":{"description":"The newly created product option entity as persisted.","typeName":"IAimallBackendProductOption"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"This endpoint creates a new product option attached to a specific product, inserting a record in the aimall_backend_product_options table. The creator provides option metadata, including name and value, alongside the referenced product's ID. Creation is restricted to sellers (of the product) or administrators. The endpoint validates foreign key integrity by ensuring the option is being created for a legitimate product. Only authorized users may create options, and uniqueness is enforced within product/option/type tuples. On success, returns the new option record as persisted.","path":"/aimall-backend/administrator/products/{productId}/productOptions","method":"post","description":"Create a new product option for a given product, inserting a row in aimall_backend_product_options. The input must provide all required option fields as per the product option create DTO, including name, value, and the referenced productId.\n\nOnly sellers with ownership rights over the product or administrators with sufficient privilege may call this endpoint, reflecting the critical nature of variant management. Detects and rejects attempts at duplicate or invalid option creation (e.g., creating the same color/size twice for one product). The endpoint ensures the new option is uniquely mapped to the referenced product. On success, the new option record is returned, with all fields—including the system-generated UUID—set.","summary":"Create a new product option attached to a product in aimall_backend_product_options.","parameters":[{"name":"productId","description":"UUID of the product for which the product option is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Required fields for new product option creation.","typeName":"IAimallBackendProductOption.ICreate"},"responseBody":{"description":"The newly created product option entity as persisted.","typeName":"IAimallBackendProductOption"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This endpoint updates a product option for a specified product, identified via productId and optionId. The operation is restricted to sellers (of the product) or administrators for safety. Modifications may include name, value, or other fields as defined by the option update DTO. All modifications are validated for uniqueness within the product, and foreign key integrity is enforced. Only legitimate records may be modified; unauthorized or integrity-breaking requests are rejected. The response returns the updated product option entity.","path":"/aimall-backend/seller/products/{productId}/productOptions/{productOptionId}","method":"put","description":"Update an existing product option record by composite reference to productId and productOptionId. Allows sellers or administrators to update atomic option fields—such as name or value—for variants associated with their own products.\n\nAccess is permission-restricted; integrity/audit checks ensure the option belongs to the product and that new values do not violate data consistency (e.g., no duplicate variants, all references are valid). On update, the endpoint returns the fully updated aimall_backend_product_options entity. Improper updates—such as attempting to reassign an option to another product, or creating duplicate name/value pairs—are denied with specific error feedback.","summary":"Update a product option for a specific product (aimall_backend_product_options).","parameters":[{"name":"productId","description":"UUID of the parent product which owns the product option.","schema":{"type":"string","format":"uuid"}},{"name":"productOptionId","description":"UUID of the product option being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update DTO for the product option record.","typeName":"IAimallBackendProductOption.IUpdate"},"responseBody":{"description":"The updated product option entity as stored in the system.","typeName":"IAimallBackendProductOption"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"This endpoint updates a product option for a specified product, identified via productId and optionId. The operation is restricted to sellers (of the product) or administrators for safety. Modifications may include name, value, or other fields as defined by the option update DTO. All modifications are validated for uniqueness within the product, and foreign key integrity is enforced. Only legitimate records may be modified; unauthorized or integrity-breaking requests are rejected. The response returns the updated product option entity.","path":"/aimall-backend/administrator/products/{productId}/productOptions/{productOptionId}","method":"put","description":"Update an existing product option record by composite reference to productId and productOptionId. Allows sellers or administrators to update atomic option fields—such as name or value—for variants associated with their own products.\n\nAccess is permission-restricted; integrity/audit checks ensure the option belongs to the product and that new values do not violate data consistency (e.g., no duplicate variants, all references are valid). On update, the endpoint returns the fully updated aimall_backend_product_options entity. Improper updates—such as attempting to reassign an option to another product, or creating duplicate name/value pairs—are denied with specific error feedback.","summary":"Update a product option for a specific product (aimall_backend_product_options).","parameters":[{"name":"productId","description":"UUID of the parent product which owns the product option.","schema":{"type":"string","format":"uuid"}},{"name":"productOptionId","description":"UUID of the product option being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update DTO for the product option record.","typeName":"IAimallBackendProductOption.IUpdate"},"responseBody":{"description":"The updated product option entity as stored in the system.","typeName":"IAimallBackendProductOption"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This endpoint deletes a product option for a given product, by composite (productId, productOptionId) key. As the aimall_backend_product_options schema does not support soft deletion, the option record is physically deleted. Only sellers (for their own products) and administrators are authorized for this operation. The system enforces referential integrity and denies deletion of options still referenced by orders or active dependencies. On success no response body is returned. All operation attempts and results are logged for audit.","path":"/aimall-backend/seller/products/{productId}/productOptions/{productOptionId}","method":"delete","description":"Hard delete a product option from aimall_backend_product_options, identified by both product and product option UUIDs. Option records are removed entirely since the schema does not support soft deletion. This endpoint is accessible only to sellers owning the product or to administrators.\n\nOnly product options directly owned by the target product can be deleted, and all dependency checks are enforced (such as referenced SKUs or order items). On successful deletion, the record is removed and the endpoint returns no content. Unauthorized, non-existent, or dependency-linked options cannot be removed, and such attempts produce error responses.","summary":"Delete a product option for a specific product (hard delete; aimall_backend_product_options).","parameters":[{"name":"productId","description":"UUID of the product to which the deleted product option belongs.","schema":{"type":"string","format":"uuid"}},{"name":"productOptionId","description":"UUID of the product option being deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"This endpoint deletes a product option for a given product, by composite (productId, productOptionId) key. As the aimall_backend_product_options schema does not support soft deletion, the option record is physically deleted. Only sellers (for their own products) and administrators are authorized for this operation. The system enforces referential integrity and denies deletion of options still referenced by orders or active dependencies. On success no response body is returned. All operation attempts and results are logged for audit.","path":"/aimall-backend/administrator/products/{productId}/productOptions/{productOptionId}","method":"delete","description":"Hard delete a product option from aimall_backend_product_options, identified by both product and product option UUIDs. Option records are removed entirely since the schema does not support soft deletion. This endpoint is accessible only to sellers owning the product or to administrators.\n\nOnly product options directly owned by the target product can be deleted, and all dependency checks are enforced (such as referenced SKUs or order items). On successful deletion, the record is removed and the endpoint returns no content. Unauthorized, non-existent, or dependency-linked options cannot be removed, and such attempts produce error responses.","summary":"Delete a product option for a specific product (hard delete; aimall_backend_product_options).","parameters":[{"name":"productId","description":"UUID of the product to which the deleted product option belongs.","schema":{"type":"string","format":"uuid"}},{"name":"productOptionId","description":"UUID of the product option being deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a list of product bundles associated with a given product. The underlying table is the 'aimall_backend_product_bundles' table from the Products domain in the Prisma schema. It allows users to get all bundles for which the specified product acts as the master (bundle group) or is included as a component, depending on business logic and API implementation. Returns all relevant fields, referencing only atomic values as defined by strict 3NF.\n\nThis can be used by sellers or administrators to review bundle composition for a particular product, check bundle rules (e.g., required/optional), or serve UI displays for bundle management.","path":"/aimall-backend/seller/products/{productId}/productBundles","method":"get","description":"Retrieve all product bundle relations for a specified product. This operation is essential for sellers, administrators, or the platform to see how a product acts as a bundle master (i.e., is sold as a group with other products) or is included as a bundled component in other bundles. The operation ensures only products with valid references in the 'aimall_backend_product_bundles' table are listed.\n\nIt supports audit logging and can be combined with PUT/POST endpoints for creation or modification of bundles. Security: available to seller, administrator, or other roles responsible for product catalog management. Error scenarios include non-existent productId (404) or lack of permission (403).","summary":"Get all product bundles for a given product from the product bundle table.","parameters":[{"name":"productId","description":"Unique identifier of the target product (product acting as bundle master or as a bundled component).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all product bundle associations involving the specified product.","typeName":"IPageIAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"This operation retrieves a list of product bundles associated with a given product. The underlying table is the 'aimall_backend_product_bundles' table from the Products domain in the Prisma schema. It allows users to get all bundles for which the specified product acts as the master (bundle group) or is included as a component, depending on business logic and API implementation. Returns all relevant fields, referencing only atomic values as defined by strict 3NF.\n\nThis can be used by sellers or administrators to review bundle composition for a particular product, check bundle rules (e.g., required/optional), or serve UI displays for bundle management.","path":"/aimall-backend/administrator/products/{productId}/productBundles","method":"get","description":"Retrieve all product bundle relations for a specified product. This operation is essential for sellers, administrators, or the platform to see how a product acts as a bundle master (i.e., is sold as a group with other products) or is included as a bundled component in other bundles. The operation ensures only products with valid references in the 'aimall_backend_product_bundles' table are listed.\n\nIt supports audit logging and can be combined with PUT/POST endpoints for creation or modification of bundles. Security: available to seller, administrator, or other roles responsible for product catalog management. Error scenarios include non-existent productId (404) or lack of permission (403).","summary":"Get all product bundles for a given product from the product bundle table.","parameters":[{"name":"productId","description":"Unique identifier of the target product (product acting as bundle master or as a bundled component).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all product bundle associations involving the specified product.","typeName":"IPageIAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation provides a complex, paginated and filterable query for all product bundles related to a specified product from the 'aimall_backend_product_bundles' table. Supports business use cases such as searching by bundle required status, component product, or other fields. Pagination, sorting, and advanced filtering is enabled according to best REST practices and aligned with backend query capabilities per the Prisma schema.","path":"/aimall-backend/seller/products/{productId}/productBundles","method":"patch","description":"Performs a filtered, paginated search for product bundles for a given product. Allows advanced UI queries on product bundle relationships, e.g., filtering by whether a component is required, minimum quantity, or specific component product membership. Returns a paginated response for scalable consumption in admin interfaces.\n\nSecurity: Only accessible to roles capable of inventory and catalog management (seller, administrator). Handles validation of product existence and permission level. Applicable error codes include 403 (permission denied), 404 (not found), or 422 (invalid parameter).","summary":"Search/filter product bundles for a given product with pagination and search options.","parameters":[{"name":"productId","description":"Target product's unique identifier (as bundle or component).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query and filter parameters for paginating and searching product bundles of a product.","typeName":"IAimallBackendProductBundle.IRequest"},"responseBody":{"description":"Paginated, filtered list of product bundle records for the specified product.","typeName":"IPageIAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"This operation provides a complex, paginated and filterable query for all product bundles related to a specified product from the 'aimall_backend_product_bundles' table. Supports business use cases such as searching by bundle required status, component product, or other fields. Pagination, sorting, and advanced filtering is enabled according to best REST practices and aligned with backend query capabilities per the Prisma schema.","path":"/aimall-backend/administrator/products/{productId}/productBundles","method":"patch","description":"Performs a filtered, paginated search for product bundles for a given product. Allows advanced UI queries on product bundle relationships, e.g., filtering by whether a component is required, minimum quantity, or specific component product membership. Returns a paginated response for scalable consumption in admin interfaces.\n\nSecurity: Only accessible to roles capable of inventory and catalog management (seller, administrator). Handles validation of product existence and permission level. Applicable error codes include 403 (permission denied), 404 (not found), or 422 (invalid parameter).","summary":"Search/filter product bundles for a given product with pagination and search options.","parameters":[{"name":"productId","description":"Target product's unique identifier (as bundle or component).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query and filter parameters for paginating and searching product bundles of a product.","typeName":"IAimallBackendProductBundle.IRequest"},"responseBody":{"description":"Paginated, filtered list of product bundle records for the specified product.","typeName":"IPageIAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves an individual product bundle entry from the 'aimall_backend_product_bundles' table, addressed both by the master product ID and the bundle relation's ID. Enables inspection of a specific bundle configuration including component product reference, quantity required, and related attributes as defined by the schema. Useful for validating bundle structure, resolving support cases, or providing detailed UI inspection.","path":"/aimall-backend/seller/products/{productId}/productBundles/{productBundleId}","method":"get","description":"Fetches a single product bundle record given a master product and bundle relation ID. Returns all relevant atomic fields including pointers to the bundle product, component product, required-ness, and quantity. Security: Only available to seller/administrator roles. Returns 404 if either ID is invalid or not linked by relationship. Can be used together with PUT for update or DELETE for removal. Requires validation against product ownership and permissions.","summary":"Get detail for a specific product bundle by its ID (for a given product).","parameters":[{"name":"productId","description":"Product ID of the master product owning the bundle.","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"Product bundle relation ID - uniquely identifies the bundle-component relationship.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product bundle relation record.","typeName":"IAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieves an individual product bundle entry from the 'aimall_backend_product_bundles' table, addressed both by the master product ID and the bundle relation's ID. Enables inspection of a specific bundle configuration including component product reference, quantity required, and related attributes as defined by the schema. Useful for validating bundle structure, resolving support cases, or providing detailed UI inspection.","path":"/aimall-backend/administrator/products/{productId}/productBundles/{productBundleId}","method":"get","description":"Fetches a single product bundle record given a master product and bundle relation ID. Returns all relevant atomic fields including pointers to the bundle product, component product, required-ness, and quantity. Security: Only available to seller/administrator roles. Returns 404 if either ID is invalid or not linked by relationship. Can be used together with PUT for update or DELETE for removal. Requires validation against product ownership and permissions.","summary":"Get detail for a specific product bundle by its ID (for a given product).","parameters":[{"name":"productId","description":"Product ID of the master product owning the bundle.","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"Product bundle relation ID - uniquely identifies the bundle-component relationship.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product bundle relation record.","typeName":"IAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new product bundle entry in the 'aimall_backend_product_bundles' table for a given product. Used by sellers or administrators to define new bundles/groupings by specifying the components, their required-ness, and quantity. Entry is created atomically; all relationships verified against product and component UUIDs as per schema. Follows full normalization; no denormalized data in request or response.","path":"/aimall-backend/seller/products/{productId}/productBundles","method":"post","description":"Creates a product bundle associating the specified product (as the bundle master/group) with one or more component products. Input data must provide reference to component product, required-ness, and quantity. Returns the created product bundle record on success. Validation includes checks for existence of all referenced products. Security-wise, only sellers or administrators with catalog privileges are allowed to use this operation. On error, returns 400 or 422 for validation, 403 for permission.","summary":"Create new product bundle for a specific product (as bundle group).","parameters":[{"name":"productId","description":"ID of the product to act as master (bundle group) in this bundle relationship.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for creating new product bundle, including required component, is_required flag, and quantity.","typeName":"IAimallBackendProductBundle.ICreate"},"responseBody":{"description":"Created product bundle entity.","typeName":"IAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new product bundle entry in the 'aimall_backend_product_bundles' table for a given product. Used by sellers or administrators to define new bundles/groupings by specifying the components, their required-ness, and quantity. Entry is created atomically; all relationships verified against product and component UUIDs as per schema. Follows full normalization; no denormalized data in request or response.","path":"/aimall-backend/administrator/products/{productId}/productBundles","method":"post","description":"Creates a product bundle associating the specified product (as the bundle master/group) with one or more component products. Input data must provide reference to component product, required-ness, and quantity. Returns the created product bundle record on success. Validation includes checks for existence of all referenced products. Security-wise, only sellers or administrators with catalog privileges are allowed to use this operation. On error, returns 400 or 422 for validation, 403 for permission.","summary":"Create new product bundle for a specific product (as bundle group).","parameters":[{"name":"productId","description":"ID of the product to act as master (bundle group) in this bundle relationship.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for creating new product bundle, including required component, is_required flag, and quantity.","typeName":"IAimallBackendProductBundle.ICreate"},"responseBody":{"description":"Created product bundle entity.","typeName":"IAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates a product bundle entry in the 'aimall_backend_product_bundles' table for a given product-bundle relation. Used by sellers or administrators to modify the details of a bundle (such as required-ness or quantity of component). All business logic is enforced at request validation. Only atomic, normalized fields from schema are accepted for updates.","path":"/aimall-backend/seller/products/{productId}/productBundles/{productBundleId}","method":"put","description":"Updates an existing product bundle relationship (component product, quantity, is_required, etc.) for a given product and relation ID. Used in bundle management UIs/logic. Returns updated entity on success. Security applies (seller/administrator only; must own the product). Errors: 404 if not found, 403 for forbidden, 422 for invalid input. Supports idempotent and partial updates when supported by backend.","summary":"Update details of a specific product bundle for a particular product.","parameters":[{"name":"productId","description":"ID of the bundle master product.","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"ID of the product bundle relation to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating a product bundle (component product, is_required, quantity, etc.)","typeName":"IAimallBackendProductBundle.IUpdate"},"responseBody":{"description":"The updated product bundle entity.","typeName":"IAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Updates a product bundle entry in the 'aimall_backend_product_bundles' table for a given product-bundle relation. Used by sellers or administrators to modify the details of a bundle (such as required-ness or quantity of component). All business logic is enforced at request validation. Only atomic, normalized fields from schema are accepted for updates.","path":"/aimall-backend/administrator/products/{productId}/productBundles/{productBundleId}","method":"put","description":"Updates an existing product bundle relationship (component product, quantity, is_required, etc.) for a given product and relation ID. Used in bundle management UIs/logic. Returns updated entity on success. Security applies (seller/administrator only; must own the product). Errors: 404 if not found, 403 for forbidden, 422 for invalid input. Supports idempotent and partial updates when supported by backend.","summary":"Update details of a specific product bundle for a particular product.","parameters":[{"name":"productId","description":"ID of the bundle master product.","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"ID of the product bundle relation to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating a product bundle (component product, is_required, quantity, etc.)","typeName":"IAimallBackendProductBundle.IUpdate"},"responseBody":{"description":"The updated product bundle entity.","typeName":"IAimallBackendProductBundle"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Removes (deletes) a specific product bundle association for a product from the 'aimall_backend_product_bundles' table. This is a hard delete as there are no soft delete fields in the schema. Used by sellers or administrators to remove unwanted or obsolete product grouping associations. Deletion is irreversible. Only product owners or administrators with necessary privileges are allowed.","path":"/aimall-backend/seller/products/{productId}/productBundles/{productBundleId}","method":"delete","description":"Deletes (hard delete) a product bundle relationship, removing the association between the master product and its component product. This operation is only available to authorized sellers/administrators. Ensure correct ownership before invoking. Deletion is permanent as the table lacks soft delete fields like 'deleted_at'. Returns 204 (no content) on success, 404 if not found, 403 if forbidden.","summary":"Delete (hard) a specific product bundle for a given product.","parameters":[{"name":"productId","description":"ID of the product acting as bundle master.","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"ID of the bundle relation to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Removes (deletes) a specific product bundle association for a product from the 'aimall_backend_product_bundles' table. This is a hard delete as there are no soft delete fields in the schema. Used by sellers or administrators to remove unwanted or obsolete product grouping associations. Deletion is irreversible. Only product owners or administrators with necessary privileges are allowed.","path":"/aimall-backend/administrator/products/{productId}/productBundles/{productBundleId}","method":"delete","description":"Deletes (hard delete) a product bundle relationship, removing the association between the master product and its component product. This operation is only available to authorized sellers/administrators. Ensure correct ownership before invoking. Deletion is permanent as the table lacks soft delete fields like 'deleted_at'. Returns 204 (no content) on success, 404 if not found, 403 if forbidden.","summary":"Delete (hard) a specific product bundle for a given product.","parameters":[{"name":"productId","description":"ID of the product acting as bundle master.","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"ID of the bundle relation to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a list of all product categories in the system from the 'aimall_backend_categories' table. Categories are arranged hierarchically with parent_id, supporting up to three levels of taxonomy as per requirements. Typical use cases include displaying category trees in UIs, selecting a parent category when assigning products, or performing category administrative actions. Every returned property is atomic and normalized, as defined by the schema. Returns array or paginated page.","path":"/aimall-backend/customer/categories","method":"get","description":"Fetches all product taxonomy categories. Response includes all categories and their hierarchical context (parent_id, depth, name). Data is strictly normalized; no product or summary data is included. Useful for populating category selectors or displaying the product taxonomy. If paginated, response structure is IPageIAimallBackendCategory. Permissions: available to all customers, sellers, or administrators; administrators may see hidden/system categories as well by additional filtering if supported.","summary":"List all product categories for taxonomy management and selection.","parameters":[],"requestBody":null,"responseBody":{"description":"Full list (or paginated page) of category entities for selection or management.","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"This operation retrieves a list of all product categories in the system from the 'aimall_backend_categories' table. Categories are arranged hierarchically with parent_id, supporting up to three levels of taxonomy as per requirements. Typical use cases include displaying category trees in UIs, selecting a parent category when assigning products, or performing category administrative actions. Every returned property is atomic and normalized, as defined by the schema. Returns array or paginated page.","path":"/aimall-backend/seller/categories","method":"get","description":"Fetches all product taxonomy categories. Response includes all categories and their hierarchical context (parent_id, depth, name). Data is strictly normalized; no product or summary data is included. Useful for populating category selectors or displaying the product taxonomy. If paginated, response structure is IPageIAimallBackendCategory. Permissions: available to all customers, sellers, or administrators; administrators may see hidden/system categories as well by additional filtering if supported.","summary":"List all product categories for taxonomy management and selection.","parameters":[],"requestBody":null,"responseBody":{"description":"Full list (or paginated page) of category entities for selection or management.","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"This operation retrieves a list of all product categories in the system from the 'aimall_backend_categories' table. Categories are arranged hierarchically with parent_id, supporting up to three levels of taxonomy as per requirements. Typical use cases include displaying category trees in UIs, selecting a parent category when assigning products, or performing category administrative actions. Every returned property is atomic and normalized, as defined by the schema. Returns array or paginated page.","path":"/aimall-backend/administrator/categories","method":"get","description":"Fetches all product taxonomy categories. Response includes all categories and their hierarchical context (parent_id, depth, name). Data is strictly normalized; no product or summary data is included. Useful for populating category selectors or displaying the product taxonomy. If paginated, response structure is IPageIAimallBackendCategory. Permissions: available to all customers, sellers, or administrators; administrators may see hidden/system categories as well by additional filtering if supported.","summary":"List all product categories for taxonomy management and selection.","parameters":[],"requestBody":null,"responseBody":{"description":"Full list (or paginated page) of category entities for selection or management.","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Provides a paginated, filterable search for product categories from the 'aimall_backend_categories' table. Supports pagination, keyword search, and sorting by hierarchy or name, complying with backend filtering logic. Used in admin panels or category management UIs where large category sets are present.","path":"/aimall-backend/customer/categories","method":"patch","description":"Retrieves a filtered and paginated list of product categories according to supplied query parameters. Allows advanced search on category name, depth, or parent_id. Response contains page of categories and supports sorting configuration. Used by administrators or catalog managers in taxonomy administration. Returns 403 for forbidden, 422 for invalid parameters. Security: customer, seller, or administrator role required.","summary":"Search or filter paginated categories for admin or advanced user scenarios.","parameters":[],"requestBody":{"description":"Filter/search parameters for querying categories, including pagination, keyword, and sort settings.","typeName":"IAimallBackendCategory.IRequest"},"responseBody":{"description":"Paginated and filtered page of category entities.","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Provides a paginated, filterable search for product categories from the 'aimall_backend_categories' table. Supports pagination, keyword search, and sorting by hierarchy or name, complying with backend filtering logic. Used in admin panels or category management UIs where large category sets are present.","path":"/aimall-backend/seller/categories","method":"patch","description":"Retrieves a filtered and paginated list of product categories according to supplied query parameters. Allows advanced search on category name, depth, or parent_id. Response contains page of categories and supports sorting configuration. Used by administrators or catalog managers in taxonomy administration. Returns 403 for forbidden, 422 for invalid parameters. Security: customer, seller, or administrator role required.","summary":"Search or filter paginated categories for admin or advanced user scenarios.","parameters":[],"requestBody":{"description":"Filter/search parameters for querying categories, including pagination, keyword, and sort settings.","typeName":"IAimallBackendCategory.IRequest"},"responseBody":{"description":"Paginated and filtered page of category entities.","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"Provides a paginated, filterable search for product categories from the 'aimall_backend_categories' table. Supports pagination, keyword search, and sorting by hierarchy or name, complying with backend filtering logic. Used in admin panels or category management UIs where large category sets are present.","path":"/aimall-backend/administrator/categories","method":"patch","description":"Retrieves a filtered and paginated list of product categories according to supplied query parameters. Allows advanced search on category name, depth, or parent_id. Response contains page of categories and supports sorting configuration. Used by administrators or catalog managers in taxonomy administration. Returns 403 for forbidden, 422 for invalid parameters. Security: customer, seller, or administrator role required.","summary":"Search or filter paginated categories for admin or advanced user scenarios.","parameters":[],"requestBody":{"description":"Filter/search parameters for querying categories, including pagination, keyword, and sort settings.","typeName":"IAimallBackendCategory.IRequest"},"responseBody":{"description":"Paginated and filtered page of category entities.","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Fetches a single category record from 'aimall_backend_categories' by its unique categoryId. Used for category detail display, pre-populating update forms, or referencing category information for other functions.","path":"/aimall-backend/customer/categories/{categoryId}","method":"get","description":"Retrieves details for a specific product category, returning all atomic fields (name, depth, parent_id). Returns 404 if not found. Permissions: customer, seller, or administrator as appropriate for catalog access. Error scenarios include non-existent ID, lack of permission, or database error.","summary":"Fetch one category by its ID for detailed viewing or update.","parameters":[{"name":"categoryId","description":"Unique identifier of the product category.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed category entity record.","typeName":"IAimallBackendCategory"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Fetches a single category record from 'aimall_backend_categories' by its unique categoryId. Used for category detail display, pre-populating update forms, or referencing category information for other functions.","path":"/aimall-backend/seller/categories/{categoryId}","method":"get","description":"Retrieves details for a specific product category, returning all atomic fields (name, depth, parent_id). Returns 404 if not found. Permissions: customer, seller, or administrator as appropriate for catalog access. Error scenarios include non-existent ID, lack of permission, or database error.","summary":"Fetch one category by its ID for detailed viewing or update.","parameters":[{"name":"categoryId","description":"Unique identifier of the product category.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed category entity record.","typeName":"IAimallBackendCategory"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Fetches a single category record from 'aimall_backend_categories' by its unique categoryId. Used for category detail display, pre-populating update forms, or referencing category information for other functions.","path":"/aimall-backend/administrator/categories/{categoryId}","method":"get","description":"Retrieves details for a specific product category, returning all atomic fields (name, depth, parent_id). Returns 404 if not found. Permissions: customer, seller, or administrator as appropriate for catalog access. Error scenarios include non-existent ID, lack of permission, or database error.","summary":"Fetch one category by its ID for detailed viewing or update.","parameters":[{"name":"categoryId","description":"Unique identifier of the product category.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed category entity record.","typeName":"IAimallBackendCategory"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new product category record in the 'aimall_backend_categories' table. Allows taxonomy managers or administrators to define new categories using parent_id (for hierarchy), name, and depth (handled by backend business logic or input validation). Only available to administrator or seller roles allowed to extend taxonomy. Returns the created category entity or error codes for invalid input.","path":"/aimall-backend/seller/categories","method":"post","description":"Creates a new product taxonomy category. Input includes required atomic fields, guaranteeing category normalization per schema. Validation applies for unique parent/name pair for hierarchical compliance. Only accessible to authorized sellers or administrators responsible for category management. Returns created record as confirmation, or 422/403 on error.","summary":"Create new product category for taxonomy expansion.","parameters":[],"requestBody":{"description":"Category definition data (name, parent_id, depth, etc.) required for creation.","typeName":"IAimallBackendCategory.ICreate"},"responseBody":{"description":"Created category record.","typeName":"IAimallBackendCategory"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new product category record in the 'aimall_backend_categories' table. Allows taxonomy managers or administrators to define new categories using parent_id (for hierarchy), name, and depth (handled by backend business logic or input validation). Only available to administrator or seller roles allowed to extend taxonomy. Returns the created category entity or error codes for invalid input.","path":"/aimall-backend/administrator/categories","method":"post","description":"Creates a new product taxonomy category. Input includes required atomic fields, guaranteeing category normalization per schema. Validation applies for unique parent/name pair for hierarchical compliance. Only accessible to authorized sellers or administrators responsible for category management. Returns created record as confirmation, or 422/403 on error.","summary":"Create new product category for taxonomy expansion.","parameters":[],"requestBody":{"description":"Category definition data (name, parent_id, depth, etc.) required for creation.","typeName":"IAimallBackendCategory.ICreate"},"responseBody":{"description":"Created category record.","typeName":"IAimallBackendCategory"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing product category record in the 'aimall_backend_categories' table based on categoryId. Allows managers or administrators to change name, parent assignment, or other atomic attributes. All updates respect normalized schema and maintain taxonomy consistency constraints.","path":"/aimall-backend/seller/categories/{categoryId}","method":"put","description":"Updates the fields of a category by its unique identifier. Supports updating name, parent_id, or depth as allowed by business logic and schema. Administrator or seller privileges are required. Returns updated entity. Errors include 404 if not found, 403 if unauthorized, 422 if validation fails. Can be chained with GET by ID for edit forms.","summary":"Update fields of a single category by ID.","parameters":[{"name":"categoryId","description":"Unique ID of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed for category update (name, parent_id, etc.)","typeName":"IAimallBackendCategory.IUpdate"},"responseBody":{"description":"Updated product category entity.","typeName":"IAimallBackendCategory"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Updates an existing product category record in the 'aimall_backend_categories' table based on categoryId. Allows managers or administrators to change name, parent assignment, or other atomic attributes. All updates respect normalized schema and maintain taxonomy consistency constraints.","path":"/aimall-backend/administrator/categories/{categoryId}","method":"put","description":"Updates the fields of a category by its unique identifier. Supports updating name, parent_id, or depth as allowed by business logic and schema. Administrator or seller privileges are required. Returns updated entity. Errors include 404 if not found, 403 if unauthorized, 422 if validation fails. Can be chained with GET by ID for edit forms.","summary":"Update fields of a single category by ID.","parameters":[{"name":"categoryId","description":"Unique ID of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed for category update (name, parent_id, etc.)","typeName":"IAimallBackendCategory.IUpdate"},"responseBody":{"description":"Updated product category entity.","typeName":"IAimallBackendCategory"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Removes a category from the 'aimall_backend_categories' table using its categoryId. Because there is no soft delete in the schema, this operation executes a hard delete. Deletion is irreversible and should be secured by role and dependency checks to ensure taxonomy integrity. Only administrators or authorized sellers allowed.","path":"/aimall-backend/seller/categories/{categoryId}","method":"delete","description":"Deletes (hard, irreversible) a product category record, removing it from taxonomy. Before deletion, dependency checks must be enforced (e.g., no related products exist/child categories reassigned) to avoid orphaned references. Returns 204 (no content) on success or 404 if not found. Only available to users with appropriate permissions (seller, administrator).","summary":"Hard delete a product category by ID.","parameters":[{"name":"categoryId","description":"ID of the category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Removes a category from the 'aimall_backend_categories' table using its categoryId. Because there is no soft delete in the schema, this operation executes a hard delete. Deletion is irreversible and should be secured by role and dependency checks to ensure taxonomy integrity. Only administrators or authorized sellers allowed.","path":"/aimall-backend/administrator/categories/{categoryId}","method":"delete","description":"Deletes (hard, irreversible) a product category record, removing it from taxonomy. Before deletion, dependency checks must be enforced (e.g., no related products exist/child categories reassigned) to avoid orphaned references. Returns 204 (no content) on success or 404 if not found. Only available to users with appropriate permissions (seller, administrator).","summary":"Hard delete a product category by ID.","parameters":[{"name":"categoryId","description":"ID of the category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves the list of direct child categories for a specific parent category, as modeled by the aimall_backend_categories table in the Prisma schema. It takes a parent category ID as input and returns the set of categories whose parent_id matches the provided categoryId, supporting hierarchical category navigation for product classification and browsing. This operation is foundational for UI category tree rendering, navigation filter construction, and administrative category management.","description":"Retrieve a list of child categories directly under the specified parent category. The aimall_backend_categories table uses the parent_id column to model category nesting and supports up to three levels of hierarchy for product taxonomy.\n\nThis API enables customers, sellers, and administrators to fetch all immediately subordinate categories, facilitating faceted navigation, dynamic menu generation, or administrative updates. The operation checks that the specified category exists and then finds all categories with parent_id equal to categoryId, ensuring strong data integrity and enforcing the unique constraint (parent_id, name) for category names.\n\nOnly categories that exist (not deleted) are returned; you may filter or restrict based on your access policies. This endpoint can be used for recursive traversal by repeatedly calling it on child categories, and is essential for deep-linking and analytics on verticals.\n\nError behavior: If the given categoryId does not exist, a not found error will be returned; if the parent category has no children, an empty array is returned.","summary":"List immediate child categories for a given parent category (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Unique identifier of the parent category whose children will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all categories that have the specified category as their parent (depth = parent.depth + 1).","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"index","path":"/aimall-backend/administrator/categories/{categoryId}/childCategories","method":"get","authorizationRole":"administrator"},{"specification":"This operation retrieves the list of direct child categories for a specific parent category, as modeled by the aimall_backend_categories table in the Prisma schema. It takes a parent category ID as input and returns the set of categories whose parent_id matches the provided categoryId, supporting hierarchical category navigation for product classification and browsing. This operation is foundational for UI category tree rendering, navigation filter construction, and administrative category management.","description":"Retrieve a list of child categories directly under the specified parent category. The aimall_backend_categories table uses the parent_id column to model category nesting and supports up to three levels of hierarchy for product taxonomy.\n\nThis API enables customers, sellers, and administrators to fetch all immediately subordinate categories, facilitating faceted navigation, dynamic menu generation, or administrative updates. The operation checks that the specified category exists and then finds all categories with parent_id equal to categoryId, ensuring strong data integrity and enforcing the unique constraint (parent_id, name) for category names.\n\nOnly categories that exist (not deleted) are returned; you may filter or restrict based on your access policies. This endpoint can be used for recursive traversal by repeatedly calling it on child categories, and is essential for deep-linking and analytics on verticals.\n\nError behavior: If the given categoryId does not exist, a not found error will be returned; if the parent category has no children, an empty array is returned.","summary":"List immediate child categories for a given parent category (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Unique identifier of the parent category whose children will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all categories that have the specified category as their parent (depth = parent.depth + 1).","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"index","path":"/aimall-backend/seller/categories/{categoryId}/childCategories","method":"get","authorizationRole":"seller"},{"specification":"This operation retrieves a filtered and paginated list of child categories under a given parent category from the aimall_backend_categories table, supporting category search, filtering, and advanced tree navigation. It extends the basic child listing with more complex querying and supports multi-level category structures by filtering on name and depth, etc. It is essential for administrative panels and shopfront catalog UX implementations.","description":"Fetch a filtered, sorted, and paginated list of child categories for a given parent category. This operation is performed on the aimall_backend_categories table and leverages its fields and relationships, such as parent_id, name, and depth, supporting multi-level product taxonomy navigation, especially for large catalogs.\n\nAdvanced search queries, such as partial matching of category names, filtering by depth or custom business logic, and pagination (offset/limit), are submitted via the request body. Sorting order can be controlled by clients, enabling dynamic UI structures or analytics.\n\nSecurity considerations: Only users with the 'administrator' or 'seller' roles may perform complex category searches for management purposes. Proper validation is required to avoid fetching deeply nested or orphaned categories. Expected errors include invalid parent categoryId or malformed filters.","summary":"Advanced search for child categories with filtering/pagination below a parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Unique identifier of the parent category for which children are to be searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination/search parameters for child category search.","typeName":"IAimallBackendCategory.IRequest"},"responseBody":{"description":"Filtered and paginated child category data under the specified parent.","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"search","path":"/aimall-backend/administrator/categories/{categoryId}/childCategories","method":"patch","authorizationRole":"administrator"},{"specification":"This operation retrieves a filtered and paginated list of child categories under a given parent category from the aimall_backend_categories table, supporting category search, filtering, and advanced tree navigation. It extends the basic child listing with more complex querying and supports multi-level category structures by filtering on name and depth, etc. It is essential for administrative panels and shopfront catalog UX implementations.","description":"Fetch a filtered, sorted, and paginated list of child categories for a given parent category. This operation is performed on the aimall_backend_categories table and leverages its fields and relationships, such as parent_id, name, and depth, supporting multi-level product taxonomy navigation, especially for large catalogs.\n\nAdvanced search queries, such as partial matching of category names, filtering by depth or custom business logic, and pagination (offset/limit), are submitted via the request body. Sorting order can be controlled by clients, enabling dynamic UI structures or analytics.\n\nSecurity considerations: Only users with the 'administrator' or 'seller' roles may perform complex category searches for management purposes. Proper validation is required to avoid fetching deeply nested or orphaned categories. Expected errors include invalid parent categoryId or malformed filters.","summary":"Advanced search for child categories with filtering/pagination below a parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Unique identifier of the parent category for which children are to be searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination/search parameters for child category search.","typeName":"IAimallBackendCategory.IRequest"},"responseBody":{"description":"Filtered and paginated child category data under the specified parent.","typeName":"IPageIAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"search","path":"/aimall-backend/seller/categories/{categoryId}/childCategories","method":"patch","authorizationRole":"seller"},{"specification":"This operation retrieves the detail of a specific child category given both the parent category ID and child category ID, as defined by the aimall_backend_categories table in the Prisma schema. It ensures the child category is directly nested under the specified parent and provides the full category object for administration or UI purposes.","description":"Retrieve the complete details for a single child category beneath a specified parent category. The operation enforces that the target child category actually lists the given parentId as its parent_id column and matches the exact UUIDs provided.\n\nThis check is necessary for preventing category tree corruption or reference errors. The returned object includes the full set of fields for the aimall_backend_categories table: id, parent_id, name, depth, etc. This API aids administrative tools that need to edit or display category specifics and forms the backbone of hierarchical product taxonomy management systems.\n\nErrors: If either category ID is invalid or the specified parent/child relationship does not exist, a not-found error is returned. Access control may restrict this operation to administrators and sellers who maintain the category catalog.","summary":"Get details of a specific child category under a parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Parent category ID in which to search for the child.","schema":{"type":"string","format":"uuid"}},{"name":"childCategoryId","description":"Unique identifier for the child category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete information of the specified child category entity.","typeName":"IAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"at","path":"/aimall-backend/administrator/categories/{categoryId}/childCategories/{childCategoryId}","method":"get","authorizationRole":"administrator"},{"specification":"This operation retrieves the detail of a specific child category given both the parent category ID and child category ID, as defined by the aimall_backend_categories table in the Prisma schema. It ensures the child category is directly nested under the specified parent and provides the full category object for administration or UI purposes.","description":"Retrieve the complete details for a single child category beneath a specified parent category. The operation enforces that the target child category actually lists the given parentId as its parent_id column and matches the exact UUIDs provided.\n\nThis check is necessary for preventing category tree corruption or reference errors. The returned object includes the full set of fields for the aimall_backend_categories table: id, parent_id, name, depth, etc. This API aids administrative tools that need to edit or display category specifics and forms the backbone of hierarchical product taxonomy management systems.\n\nErrors: If either category ID is invalid or the specified parent/child relationship does not exist, a not-found error is returned. Access control may restrict this operation to administrators and sellers who maintain the category catalog.","summary":"Get details of a specific child category under a parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Parent category ID in which to search for the child.","schema":{"type":"string","format":"uuid"}},{"name":"childCategoryId","description":"Unique identifier for the child category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete information of the specified child category entity.","typeName":"IAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"at","path":"/aimall-backend/seller/categories/{categoryId}/childCategories/{childCategoryId}","method":"get","authorizationRole":"seller"},{"specification":"Creates a new child category under the specified parent category, as defined in the aimall_backend_categories table of the Prisma schema. It accepts the parent category ID in the path and a new category definition in the request body. Ensures unique (parent_id, name) per constraints and populates depth as parent.depth + 1 for proper taxonomy nesting.","description":"Create a new child category immediately under the specified parent category. The operation leverages the normalized structure of the aimall_backend_categories table, including fields for parent_id (set to the path parameter), name, and depth (assigned as parent category depth plus one).\n\nThis route ensures that within the same parent, category names are unique, enforcing the (parent_id, name) constraint. Only administrator and seller roles are authorized to use this creation endpoint as it may impact global navigation or search structures. Upon successful creation, the complete category object is returned, including system-generated fields such as id and depth.\n\nValidation: If the supplied name duplicates any sibling under the same parent, a conflict error will occur. If the parentId does not exist, the system returns an error. Business rules (such as max depth) should be enforced in application logic.","summary":"Create a new child category nested under the given parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Parent category ID under which the child will be created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Specification of the new child category (excluding parent_id, which is set by path parameter).","typeName":"IAimallBackendCategory.ICreate"},"responseBody":{"description":"Full details of the created child category, including generated id and depth.","typeName":"IAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"create","path":"/aimall-backend/administrator/categories/{categoryId}/childCategories","method":"post","authorizationRole":"administrator"},{"specification":"Creates a new child category under the specified parent category, as defined in the aimall_backend_categories table of the Prisma schema. It accepts the parent category ID in the path and a new category definition in the request body. Ensures unique (parent_id, name) per constraints and populates depth as parent.depth + 1 for proper taxonomy nesting.","description":"Create a new child category immediately under the specified parent category. The operation leverages the normalized structure of the aimall_backend_categories table, including fields for parent_id (set to the path parameter), name, and depth (assigned as parent category depth plus one).\n\nThis route ensures that within the same parent, category names are unique, enforcing the (parent_id, name) constraint. Only administrator and seller roles are authorized to use this creation endpoint as it may impact global navigation or search structures. Upon successful creation, the complete category object is returned, including system-generated fields such as id and depth.\n\nValidation: If the supplied name duplicates any sibling under the same parent, a conflict error will occur. If the parentId does not exist, the system returns an error. Business rules (such as max depth) should be enforced in application logic.","summary":"Create a new child category nested under the given parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Parent category ID under which the child will be created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Specification of the new child category (excluding parent_id, which is set by path parameter).","typeName":"IAimallBackendCategory.ICreate"},"responseBody":{"description":"Full details of the created child category, including generated id and depth.","typeName":"IAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"create","path":"/aimall-backend/seller/categories/{categoryId}/childCategories","method":"post","authorizationRole":"seller"},{"specification":"Updates the details of a specific child category under the designated parent, as defined in the aimall_backend_categories table of the Prisma schema. It takes both the parent category ID and the child category ID, and applies updates to fields like name. Ensures the parent-child relation is valid and constraints like sibling uniqueness are enforced.","description":"Modify one or more fields of a specified child category directly under a parent category. The operation validates that the relationship is legal, i.e., the target child’s parent_id matches the supplied parentId. Updatable fields typically include the category name (subject to uniqueness within the same parent), and optionally the depth or other metadata, depending on the business rules.\n\nOn successful update, the API returns the detailed, updated category object. Role-based access restricts this endpoint to administrators and sellers responsible for product taxonomy management.\n\nIf constraints are violated—such as a name clash with a sibling category under the same parent, or if the child is orphaned (parent_id does not match)—an error will be returned. The operation does not support moving categories between parents; only direct updates to fields of the child are permitted.","summary":"Update details of a specific child category under a parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"ID of the parent category of the target child category.","schema":{"type":"string","format":"uuid"}},{"name":"childCategoryId","description":"ID of the child category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the child category (e.g., new name); cannot change parent_id via this route.","typeName":"IAimallBackendCategory.IUpdate"},"responseBody":{"description":"The updated child category entity after the change was applied.","typeName":"IAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"update","path":"/aimall-backend/administrator/categories/{categoryId}/childCategories/{childCategoryId}","method":"put","authorizationRole":"administrator"},{"specification":"Updates the details of a specific child category under the designated parent, as defined in the aimall_backend_categories table of the Prisma schema. It takes both the parent category ID and the child category ID, and applies updates to fields like name. Ensures the parent-child relation is valid and constraints like sibling uniqueness are enforced.","description":"Modify one or more fields of a specified child category directly under a parent category. The operation validates that the relationship is legal, i.e., the target child’s parent_id matches the supplied parentId. Updatable fields typically include the category name (subject to uniqueness within the same parent), and optionally the depth or other metadata, depending on the business rules.\n\nOn successful update, the API returns the detailed, updated category object. Role-based access restricts this endpoint to administrators and sellers responsible for product taxonomy management.\n\nIf constraints are violated—such as a name clash with a sibling category under the same parent, or if the child is orphaned (parent_id does not match)—an error will be returned. The operation does not support moving categories between parents; only direct updates to fields of the child are permitted.","summary":"Update details of a specific child category under a parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"ID of the parent category of the target child category.","schema":{"type":"string","format":"uuid"}},{"name":"childCategoryId","description":"ID of the child category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the child category (e.g., new name); cannot change parent_id via this route.","typeName":"IAimallBackendCategory.IUpdate"},"responseBody":{"description":"The updated child category entity after the change was applied.","typeName":"IAimallBackendCategory"},"authorizationRoles":["administrator","seller"],"name":"update","path":"/aimall-backend/seller/categories/{categoryId}/childCategories/{childCategoryId}","method":"put","authorizationRole":"seller"},{"specification":"Deletes (removes) a specific child category under the given parent from the aimall_backend_categories table, as referenced in the Prisma schema. As there is no soft deletion field, this operation performs a hard delete, ensuring referential integrity and business rules. Both parent and child category IDs are required.","description":"Permanently delete a specific child category that is directly under a given parent category. The operation checks that the target child’s parent_id matches the parentId provided. Since the aimall_backend_categories table does not have any soft deletion fields (such as deleted_at), this endpoint removes the record entirely from the system, subject to referential integrity.\n\nThis operation is restricted to administrator and seller roles, and should be guarded by business logic to prevent deletion of categories still referenced by products or serving as parents to other categories. Attempting to delete a non-existent or mismatched (parent/child) pair results in an error; trying to delete a parent category with active children or products should be handled appropriately by the application.","summary":"Hard delete a specific child category under a parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Parent category ID owning the child to delete.","schema":{"type":"string","format":"uuid"}},{"name":"childCategoryId","description":"Child category ID to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator","seller"],"name":"erase","path":"/aimall-backend/administrator/categories/{categoryId}/childCategories/{childCategoryId}","method":"delete","authorizationRole":"administrator"},{"specification":"Deletes (removes) a specific child category under the given parent from the aimall_backend_categories table, as referenced in the Prisma schema. As there is no soft deletion field, this operation performs a hard delete, ensuring referential integrity and business rules. Both parent and child category IDs are required.","description":"Permanently delete a specific child category that is directly under a given parent category. The operation checks that the target child’s parent_id matches the parentId provided. Since the aimall_backend_categories table does not have any soft deletion fields (such as deleted_at), this endpoint removes the record entirely from the system, subject to referential integrity.\n\nThis operation is restricted to administrator and seller roles, and should be guarded by business logic to prevent deletion of categories still referenced by products or serving as parents to other categories. Attempting to delete a non-existent or mismatched (parent/child) pair results in an error; trying to delete a parent category with active children or products should be handled appropriately by the application.","summary":"Hard delete a specific child category under a parent (aimall_backend_categories).","parameters":[{"name":"categoryId","description":"Parent category ID owning the child to delete.","schema":{"type":"string","format":"uuid"}},{"name":"childCategoryId","description":"Child category ID to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator","seller"],"name":"erase","path":"/aimall-backend/seller/categories/{categoryId}/childCategories/{childCategoryId}","method":"delete","authorizationRole":"seller"},{"specification":"List all SKU records (variants) associated with a specified product, as defined by the aimall_backend_skus table. The productId identifies the product, and the operation returns all SKUs whose product_id matches. Used for displaying available options, managing stock, and facilitating product configuration workflows. Responds with a paginated list, to support efficient querying for products with many SKUs.","description":"Retrieve a paginated list of all SKUs (stock keeping units) available for a given product. The aimall_backend_skus table contains the unique variant records for each product, referenced by product_id. Clients such as product detail pages, inventory management UIs, and checkout validation leverage this endpoint to present or manage the selection of SKU options. Each SKU record includes fields like id, product_id, and sku_code.\n\nPagination is applied to handle scenarios where products have a high number of variants. Role-based security may apply if certain SKUs should only be visible to sellers of the product or platform administrators. Invalid productId or unfound products result in appropriate errors.","summary":"List all SKUs for a given product (aimall_backend_skus table).","parameters":[{"name":"productId","description":"Unique identifier for the product whose SKUs are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated collection of SKUs referencing the specified product.","typeName":"IPageIAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"index","path":"/aimall-backend/administrator/products/{productId}/skus","method":"get","authorizationRole":"administrator"},{"specification":"List all SKU records (variants) associated with a specified product, as defined by the aimall_backend_skus table. The productId identifies the product, and the operation returns all SKUs whose product_id matches. Used for displaying available options, managing stock, and facilitating product configuration workflows. Responds with a paginated list, to support efficient querying for products with many SKUs.","description":"Retrieve a paginated list of all SKUs (stock keeping units) available for a given product. The aimall_backend_skus table contains the unique variant records for each product, referenced by product_id. Clients such as product detail pages, inventory management UIs, and checkout validation leverage this endpoint to present or manage the selection of SKU options. Each SKU record includes fields like id, product_id, and sku_code.\n\nPagination is applied to handle scenarios where products have a high number of variants. Role-based security may apply if certain SKUs should only be visible to sellers of the product or platform administrators. Invalid productId or unfound products result in appropriate errors.","summary":"List all SKUs for a given product (aimall_backend_skus table).","parameters":[{"name":"productId","description":"Unique identifier for the product whose SKUs are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated collection of SKUs referencing the specified product.","typeName":"IPageIAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"index","path":"/aimall-backend/seller/products/{productId}/skus","method":"get","authorizationRole":"seller"},{"specification":"Returns a filtered and paginated list of SKUs for a specified product, with advanced searching and filtering capabilities using the aimall_backend_skus table. Supports custom queries, partial matching, and paging for large variant sets, such as in detailed admin or seller inventory panels.","description":"Fetch all SKUs affiliated with a specified product, with support for advanced query features such as search by SKU code, partial code, and pagination. The aimall_backend_skus table supports many-to-product relationships and allows efficient traversal and filtering of SKUs for high-variant products, as used by administrative or seller inventory dashboards.\n\nThe API enforces product validation, returning only SKUs that are subordinate to the given productId, and applies security constraints as necessary (e.g., sellers can only see their own products’ SKUs). Malformed filters or invalid productId parameters will trigger errors as appropriate.","summary":"Advanced SKUs search/filtering for a product, with pagination (aimall_backend_skus).","parameters":[{"name":"productId","description":"The product for which to filter/search SKUs.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and searching details for querying this product’s SKUs.","typeName":"IAimallBackendSku.IRequest"},"responseBody":{"description":"Paginated filtered list of SKUs for the specified product.","typeName":"IPageIAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"search","path":"/aimall-backend/administrator/products/{productId}/skus","method":"patch","authorizationRole":"administrator"},{"specification":"Returns a filtered and paginated list of SKUs for a specified product, with advanced searching and filtering capabilities using the aimall_backend_skus table. Supports custom queries, partial matching, and paging for large variant sets, such as in detailed admin or seller inventory panels.","description":"Fetch all SKUs affiliated with a specified product, with support for advanced query features such as search by SKU code, partial code, and pagination. The aimall_backend_skus table supports many-to-product relationships and allows efficient traversal and filtering of SKUs for high-variant products, as used by administrative or seller inventory dashboards.\n\nThe API enforces product validation, returning only SKUs that are subordinate to the given productId, and applies security constraints as necessary (e.g., sellers can only see their own products’ SKUs). Malformed filters or invalid productId parameters will trigger errors as appropriate.","summary":"Advanced SKUs search/filtering for a product, with pagination (aimall_backend_skus).","parameters":[{"name":"productId","description":"The product for which to filter/search SKUs.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and searching details for querying this product’s SKUs.","typeName":"IAimallBackendSku.IRequest"},"responseBody":{"description":"Paginated filtered list of SKUs for the specified product.","typeName":"IPageIAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"search","path":"/aimall-backend/seller/products/{productId}/skus","method":"patch","authorizationRole":"seller"},{"specification":"Fetches the detailed record of a single SKU (variant) for a particular product, based on the SKU's id and the parent product's id, using the aimall_backend_skus table. This operation verifies association and provides all fields for SKU detail viewing, editing, or validation.","description":"Retrieve the complete specification of a specific SKU (variant) as a child of a given product. The operation ensures the SKU id (skuId) belongs to the indicated product (productId) by examining the product_id foreign key in the aimall_backend_skus table.\n\nThe returned SKU includes key fields such as id, product_id, and sku_code, enabling editing, stock management, and detailed option configuration. This endpoint is most relevant for product management dashboards and advanced stock tracking systems. Proper authorization must ensure only administrators or valid product-owners access the resource. Not-found errors are returned if association validation fails, ensuring data integrity.","summary":"Get details of a specific SKU for a product (aimall_backend_skus).","parameters":[{"name":"productId","description":"Product ID to which the SKU belongs (verifies parentage).","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"SKU (variant) ID to retrieve, must belong to the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the selected SKU entry matching both product and SKU IDs.","typeName":"IAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"at","path":"/aimall-backend/administrator/products/{productId}/skus/{skuId}","method":"get","authorizationRole":"administrator"},{"specification":"Fetches the detailed record of a single SKU (variant) for a particular product, based on the SKU's id and the parent product's id, using the aimall_backend_skus table. This operation verifies association and provides all fields for SKU detail viewing, editing, or validation.","description":"Retrieve the complete specification of a specific SKU (variant) as a child of a given product. The operation ensures the SKU id (skuId) belongs to the indicated product (productId) by examining the product_id foreign key in the aimall_backend_skus table.\n\nThe returned SKU includes key fields such as id, product_id, and sku_code, enabling editing, stock management, and detailed option configuration. This endpoint is most relevant for product management dashboards and advanced stock tracking systems. Proper authorization must ensure only administrators or valid product-owners access the resource. Not-found errors are returned if association validation fails, ensuring data integrity.","summary":"Get details of a specific SKU for a product (aimall_backend_skus).","parameters":[{"name":"productId","description":"Product ID to which the SKU belongs (verifies parentage).","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"SKU (variant) ID to retrieve, must belong to the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the selected SKU entry matching both product and SKU IDs.","typeName":"IAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"at","path":"/aimall-backend/seller/products/{productId}/skus/{skuId}","method":"get","authorizationRole":"seller"},{"specification":"Allows creation of a new SKU (variant) for the specified product in the aimall_backend_skus table. The productId establishes ownership, and the creation payload defines the SKU properties. Suitable for product setup flows, multi-variant product launches, and advanced catalog management.","description":"Create a new SKU (variant) under the specified product. This endpoint allows sellers and administrators to upload new SKU configurations to the aimall_backend_skus table. The productId (from the path) is set as the product_id reference. The request body provides the SKU details, such as sku_code.\n\nEnforces SKU uniqueness based on sku_code and association with the correct product. Prevents SKU duplication (conflict error), and only users with sufficient authorization can perform this action.\n\nUpon successful creation, the full SKU record is returned, including id, product_id, and other relevant fields. If the payload or parentage validation fails, returns appropriate errors to the caller (invalid productId, invalid SKU code, etc.).","summary":"Create a new SKU (variant) for the specified product (aimall_backend_skus).","parameters":[{"name":"productId","description":"Product ID that will own the new SKU.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for the new SKU variant (sku_code, etc; productId is from path param).","typeName":"IAimallBackendSku.ICreate"},"responseBody":{"description":"Full created SKU information with system-assigned identifiers.","typeName":"IAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"create","path":"/aimall-backend/administrator/products/{productId}/skus","method":"post","authorizationRole":"administrator"},{"specification":"Allows creation of a new SKU (variant) for the specified product in the aimall_backend_skus table. The productId establishes ownership, and the creation payload defines the SKU properties. Suitable for product setup flows, multi-variant product launches, and advanced catalog management.","description":"Create a new SKU (variant) under the specified product. This endpoint allows sellers and administrators to upload new SKU configurations to the aimall_backend_skus table. The productId (from the path) is set as the product_id reference. The request body provides the SKU details, such as sku_code.\n\nEnforces SKU uniqueness based on sku_code and association with the correct product. Prevents SKU duplication (conflict error), and only users with sufficient authorization can perform this action.\n\nUpon successful creation, the full SKU record is returned, including id, product_id, and other relevant fields. If the payload or parentage validation fails, returns appropriate errors to the caller (invalid productId, invalid SKU code, etc.).","summary":"Create a new SKU (variant) for the specified product (aimall_backend_skus).","parameters":[{"name":"productId","description":"Product ID that will own the new SKU.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for the new SKU variant (sku_code, etc; productId is from path param).","typeName":"IAimallBackendSku.ICreate"},"responseBody":{"description":"Full created SKU information with system-assigned identifiers.","typeName":"IAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"create","path":"/aimall-backend/seller/products/{productId}/skus","method":"post","authorizationRole":"seller"},{"specification":"Updates the configuration of a specific SKU (variant) attached to a given product in the aimall_backend_skus table. Targeted by both productId and skuId, this endpoint supports updates to fields like sku_code and validates ownership. Ensures no duplicate sku_code per product and that the SKU is properly associated.","description":"Modify the details of a SKU as a child of a given product. The endpoint uses both productId and skuId to unambiguously locate the record within the aimall_backend_skus table and updates one or more SKU fields (e.g., sku_code). Validation checks include that the updated code is unique and that the SKU is subordinate to the stated product by product_id.\n\nIf the validation passes, returns the full updated SKU record; otherwise, errors indicate field conflicts or relationship mismatches. This is a critical operation for catalog management and SKU lifecycle operations in administrator and seller roles.","summary":"Update configuration of a specific SKU for a product (aimall_backend_skus).","parameters":[{"name":"productId","description":"The product whose SKU is being updated (verifies ownership).","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"The unique SKU ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the SKU (sku_code, etc.); productId and skuId from the path.","typeName":"IAimallBackendSku.IUpdate"},"responseBody":{"description":"Full updated SKU record after change. Conflicts/errors if update fails or product/SKU relationship is invalid.","typeName":"IAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"update","path":"/aimall-backend/administrator/products/{productId}/skus/{skuId}","method":"put","authorizationRole":"administrator"},{"specification":"Updates the configuration of a specific SKU (variant) attached to a given product in the aimall_backend_skus table. Targeted by both productId and skuId, this endpoint supports updates to fields like sku_code and validates ownership. Ensures no duplicate sku_code per product and that the SKU is properly associated.","description":"Modify the details of a SKU as a child of a given product. The endpoint uses both productId and skuId to unambiguously locate the record within the aimall_backend_skus table and updates one or more SKU fields (e.g., sku_code). Validation checks include that the updated code is unique and that the SKU is subordinate to the stated product by product_id.\n\nIf the validation passes, returns the full updated SKU record; otherwise, errors indicate field conflicts or relationship mismatches. This is a critical operation for catalog management and SKU lifecycle operations in administrator and seller roles.","summary":"Update configuration of a specific SKU for a product (aimall_backend_skus).","parameters":[{"name":"productId","description":"The product whose SKU is being updated (verifies ownership).","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"The unique SKU ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the SKU (sku_code, etc.); productId and skuId from the path.","typeName":"IAimallBackendSku.IUpdate"},"responseBody":{"description":"Full updated SKU record after change. Conflicts/errors if update fails or product/SKU relationship is invalid.","typeName":"IAimallBackendSku"},"authorizationRoles":["administrator","seller"],"name":"update","path":"/aimall-backend/seller/products/{productId}/skus/{skuId}","method":"put","authorizationRole":"seller"},{"specification":"Deletes (removes) a specific SKU (variant) for a given product, as modeled by aimall_backend_skus. As there is no soft deletion column, the operation performs an actual (hard) delete. Only users with administrator or seller roles may perform this action, subject to business validation such as ensuring SKU is not referenced by active inventory or orders.","description":"Permanently remove a SKU record for a specified product. This API call ensures, using both parent productId and skuId, that the corresponding SKU exists and is subordinate to the product. Since aimall_backend_skus lacks a soft delete (no deleted_at field), records are actually erased from the database.\n\nBusiness logic must ensure this operation does not delete SKUs linked to active order items or inventory snapshots. Attempting to delete a non-existent or mismatched (parent/sku) pair triggers error responses. Role restricted to administrators and authorized sellers for data integrity and compliance reasons.","summary":"Hard delete a specific SKU for a product; no soft delete (aimall_backend_skus).","parameters":[{"name":"productId","description":"Parent product ID to which the SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"SKU (variant) ID to delete (must belong to product).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator","seller"],"name":"erase","path":"/aimall-backend/administrator/products/{productId}/skus/{skuId}","method":"delete","authorizationRole":"administrator"},{"specification":"Deletes (removes) a specific SKU (variant) for a given product, as modeled by aimall_backend_skus. As there is no soft deletion column, the operation performs an actual (hard) delete. Only users with administrator or seller roles may perform this action, subject to business validation such as ensuring SKU is not referenced by active inventory or orders.","description":"Permanently remove a SKU record for a specified product. This API call ensures, using both parent productId and skuId, that the corresponding SKU exists and is subordinate to the product. Since aimall_backend_skus lacks a soft delete (no deleted_at field), records are actually erased from the database.\n\nBusiness logic must ensure this operation does not delete SKUs linked to active order items or inventory snapshots. Attempting to delete a non-existent or mismatched (parent/sku) pair triggers error responses. Role restricted to administrators and authorized sellers for data integrity and compliance reasons.","summary":"Hard delete a specific SKU for a product; no soft delete (aimall_backend_skus).","parameters":[{"name":"productId","description":"Parent product ID to which the SKU belongs.","schema":{"type":"string","format":"uuid"}},{"name":"skuId","description":"SKU (variant) ID to delete (must belong to product).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator","seller"],"name":"erase","path":"/aimall-backend/seller/products/{productId}/skus/{skuId}","method":"delete","authorizationRole":"seller"},{"specification":"This operation retrieves a paginated list of all SKUs within the AIMall backend product system. It interacts with the 'aimall_backend_skus' table, which stores SKU records as normalized entities linked to products, managing all variant combinations in the catalog. The operation is designed for administrative review, system analytics, and catalog synchronization. It supports bulk listing of SKUs with full referential integrity, providing insights into active SKUs and their product associations.","path":"/aimall-backend/administrator/skus","method":"get","description":"Retrieve a paginated list of SKUs from the SKU master table. This endpoint enables administrators and product managers to browse available stock keeping units, each representing a unique combination of product and options as defined in the database schema.\n\nSecurity considerations require that only authorized users with administrator or catalog management roles can access this list. Data returned includes all atomic SKU-level information as dictated by the schema, permitting context for inventory actions, listing management, and reporting.\n\nThis operation, while returning raw SKU master data, can be integrated with or extended for search/filtering by utilizing the PATCH operation on the same path. Error handling involves pagination controls and data access permission checks.","summary":"Get a paginated list of product SKUs from the catalog","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of SKUs with all current catalog entries.","typeName":"IPageIAimallBackendSku"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation provides advanced listing and search of SKUs in the AIMall backend, leveraging the 'aimall_backend_skus' table. The PATCH method supports complex filter criteria, advanced sorting, and pagination. By sending a body with search parameters, administrators and catalog managers can query SKU entities based on product relations, SKU code, or other attributes. This facilitates catalog synchronization, analytics, and fine-grained management.","path":"/aimall-backend/administrator/skus","method":"patch","description":"Perform a paginated and filterable search on the SKU master table. Request body allows specifying complex search fields such as product association, SKU code, or other SKU metadata, and returns filtered results for downstream product management tasks.\n\nOnly authorized administrator users may use this endpoint due to the sensitive nature of catalog data. The request structure aligns with advanced search needs, reflecting the database schema's atomic fields and relationship integrity.\n\nThis operation complements the GET /skus endpoint and is frequently used in dashboards or analytics tools where precise SKU lists are required. Error handling covers body schema validation and permission enforcement.","summary":"Search and filter SKUs with advanced criteria","parameters":[],"requestBody":{"description":"Advanced search criteria, filters, and pagination parameters for SKUs.","typeName":"IAimallBackendSku.IRequest"},"responseBody":{"description":"Paginated result of SKUs matching search criteria.","typeName":"IPageIAimallBackendSku"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This endpoint retrieves details of a specific SKU from the 'aimall_backend_skus' Prisma table by unique SKU identifier. Used for product catalog management and variant detail inspection, the operation provides all atomic SKU data, facilitating editing, inventory review, and product web integration. It supports administrative, catalog, and analytics workflows requiring SKU-level detail.","path":"/aimall-backend/administrator/skus/{skuId}","method":"get","description":"Get details of a single SKU, specified by its unique SKU ID in the path parameter. The result includes all atomic, schema-defined fields for the SKU. This operation is crucial for reviewing, editing, and tracking SKU-level data and is used in product management UIs.\n\nAccess is restricted to administrator and catalog managers to ensure catalog integrity. The endpoint bridges to related product and option data for complete context, as needed by the application layer. Error responses include not found, permission denied, or parameter validation issues.","summary":"Fetch a specific SKU by its unique SKU identifier.","parameters":[{"name":"skuId","description":"The unique identifier of the SKU to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested SKU entity.","typeName":"IAimallBackendSku"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This endpoint creates a new SKU entry in the catalog and records it in the 'aimall_backend_skus' Prisma table, in compliance with product lifecycle management requirements. It supports onboarding new stock keeping units (e.g., new combinations of product variants), enforcing all atomic SKU-level constraints and ensuring database referential integrity.","path":"/aimall-backend/administrator/skus","method":"post","description":"Create a new SKU master record by submitting a valid SKU creation object. Operation requires all atomic and relationship fields as mandated by the schema, including product association and SKU code. Only administrators or catalog managers with the correct privileges can use this endpoint.\n\nUpon validation of uniqueness (SKU code) and integrity constraints, the SKU is saved and returned in detail. This supports catalog expansion, variant onboarding, and tight coupling with inventory and option data. Error responses handle all validation and referential errors.","summary":"Create a new SKU for product catalog expansion.","parameters":[],"requestBody":{"description":"New SKU creation object with all required fields.","typeName":"IAimallBackendSku.ICreate"},"responseBody":{"description":"Created SKU with all persisted fields.","typeName":"IAimallBackendSku"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This endpoint updates an existing SKU record in 'aimall_backend_skus', supporting catalog maintenance operations such as code correction or relationship modification. The operation fully enforces atomic field integrity and referential constraints, ensuring only authorized managers may modify catalog data. This function is mandatory for precise product catalog management and real-time inventory synchronization.","path":"/aimall-backend/administrator/skus/{skuId}","method":"put","description":"Update the details of an existing SKU specified by its unique identifier. Input body must conform to the update DTO reflecting the underlying schema's atomic SKU fields. Used by authorized administrators or product managers only.\n\nTypical use cases include correcting SKU codes, reassigning SKUs to products, or aligning SKU definitions after product option updates. All changes are validated for referential and uniqueness constraints. Comprehensive auditing is associated with this operation. Errors include constraint violation, unauthorized access, or resource not found.","summary":"Update an existing SKU in the catalog.","parameters":[{"name":"skuId","description":"The unique identifier of the SKU to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated SKU object for the specified SKU.","typeName":"IAimallBackendSku.IUpdate"},"responseBody":{"description":"Persisted SKU after update.","typeName":"IAimallBackendSku"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This endpoint removes a SKU record from the AIMall backend SKU master table, enforcing hard delete (since there are no soft delete fields). Removal is only authorized for catalog administrators and is strictly validated against product catalog integrity rules. This function is crucial for catalog cleanup, SKU deprecation, and error correction workflows.","path":"/aimall-backend/administrator/skus/{skuId}","method":"delete","description":"Delete a SKU entity by its unique identifier. As there is no soft delete field in the 'aimall_backend_skus' schema, this is a hard delete operation. Permissions are limited to catalog administrators, and the operation enforces referential integrity to prevent orphaned inventory/option references.\n\nOn success, the SKU is removed. Errors occur in the case of missing SKU, referential integrity violation, or unauthorized access. Audit logging is recommended for compliance.","summary":"Permanently delete a SKU from the product catalog.","parameters":[{"name":"skuId","description":"The unique identifier of the SKU to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a paginated list of all inventory snapshots associated with a specific SKU. It queries the 'aimall_backend_inventory_snapshots' table where entries are linked to the SKU by foreign key. The operation is suitable for administrators seeking historical records of stock changes for a SKU, supporting audit trails, inventory analytics, and reconciliation.","path":"/aimall-backend/administrator/skus/{skuId}/inventorySnapshots","method":"get","description":"List all inventory change snapshot records for a given SKU, identified by its unique ID. This operation supports in-depth review of inventory history, such as restocks, sales, or adjustments.\n\nAccess is limited to administrator users due to the sensitive nature of inventory and operational histories. Field validation is applied to ensure correct linkage. Output contains snapshot metadata for downstream analysis, audit, and compliance.\n\nErrors may include SKU not found, insufficient permissions, or result set too large (pagination recommended).","summary":"Fetch all inventory snapshots for a specific SKU.","parameters":[{"name":"skuId","description":"Unique identifier of the SKU for which to retrieve inventory snapshots.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated inventory change snapshot records for the given SKU.","typeName":"IPageIAimallBackendInventorySnapshot"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation performs an advanced, filterable search within the inventory snapshots for a specific SKU. It issues a complex query against 'aimall_backend_inventory_snapshots', with filtering, sorting, and pagination handled via request body. Administrators can use this endpoint to review stock mutation events, by type, date, actor, or other snapshot fields.","path":"/aimall-backend/administrator/skus/{skuId}/inventorySnapshots","method":"patch","description":"Search and filter inventory snapshots for a selected SKU using complex query parameters, enabling analytics, stock reconciliation, and compliance audits.\n\nThe SKU identifier must be specified in the path, and search parameters are provided in the request body reflecting all filterable fields. Output is a paginated result set with relevant inventory snapshots. Endpoint is administrator-only, with strict permissions control.\n\nThis operation is frequently integrated into inventory dashboards for root-cause analysis and trend monitoring. Errors may include filter validation, unauthorized access, or excessive result size.","summary":"Advanced inventory snapshot search for a specific SKU.","parameters":[{"name":"skuId","description":"Unique identifier of the SKU under analysis.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria, filters, and pagination for inventory snapshots.","typeName":"IAimallBackendInventorySnapshot.IRequest"},"responseBody":{"description":"Paginated inventory snapshots of the SKU, filtered and sorted by requested criteria.","typeName":"IPageIAimallBackendInventorySnapshot"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This endpoint retrieves a specific inventory snapshot record associated with both its parent SKU and the snapshot event identifier. It queries the 'aimall_backend_inventory_snapshots' table by both SKU ID and snapshot ID. This is critical for compliance audits, operational root-cause analysis, and stock movement investigations.","path":"/aimall-backend/administrator/skus/{skuId}/inventorySnapshots/{inventorySnapshotId}","method":"get","description":"Get the details of a specific inventory change event (snapshot) for a given SKU. Path parameters SKU ID and snapshot ID are both required and validated against schema relationships.\n\nOutput includes the atomic, historical record of inventory change — such as type (sale, restock), quantity, actor, and timestamp. Only authorized administrators can access this sensitive, audit-oriented endpoint. Errors include not found, unauthorized, and constraint validation issues.","summary":"Get an inventory snapshot for a SKU by snapshot ID.","parameters":[{"name":"skuId","description":"Unique identifier of the parent SKU.","schema":{"type":"string","format":"uuid"}},{"name":"inventorySnapshotId","description":"Unique identifier of the inventory snapshot record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed inventory snapshot data for the SKU and snapshot event.","typeName":"IAimallBackendInventorySnapshot"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new inventory snapshot record for a given SKU. It inserts a new event row into 'aimall_backend_inventory_snapshots', supporting inventory tracking whenever stock is sold, restocked, or manually changed. All atomic and referential constraints are enforced. This is a core inventory management tool for administrators or sellers with proper privileges.","path":"/aimall-backend/administrator/skus/{skuId}/inventorySnapshots","method":"post","description":"Insert a new inventory change snapshot for a SKU. Must provide all atomic/integrity fields as per the schema, including change type, quantity, and actor. The SKU ID is enforced in the path.\n\nPerformed by administrators or system processes for stock reconciliation, auditing, or after major lifecycle events (sales, restocks). Validations apply for field correctness, referential constraints, and privilege checks. Result is the full persisted snapshot row. Errors occur for constraint violations, unauthorized access, or missing SKU references.","summary":"Create an inventory change snapshot for a SKU.","parameters":[{"name":"skuId","description":"Unique identifier of the SKU for which to create a snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Inventory snapshot creation object with all required fields.","typeName":"IAimallBackendInventorySnapshot.ICreate"},"responseBody":{"description":"Persisted inventory snapshot record.","typeName":"IAimallBackendInventorySnapshot"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This endpoint updates an inventory snapshot record for a given SKU and snapshot ID. Updates are used for correcting or amending historical log entries for compliance or investigation. All atomic field changes are validated for audit purposes and referential integrity. Only administrators may access this function, which is central to stock movement traceability.","path":"/aimall-backend/administrator/skus/{skuId}/inventorySnapshots/{inventorySnapshotId}","method":"put","description":"Update an existing inventory change event for a SKU. Path parameters specify both the SKU and the snapshot to change; the body must provide a valid update DTO per schema. Used predominantly for audit correction, historical log repair, or system-driven reconciliation adjustments.\n\nAccess is restricted to administrators. Potential error scenarios include referential constraint failure, unauthorized access, or log record not found. This endpoint supports audit integrity and should be paired with comprehensive logging.","summary":"Update an inventory snapshot by SKU and snapshot ID.","parameters":[{"name":"skuId","description":"Unique identifier of the SKU","schema":{"type":"string","format":"uuid"}},{"name":"inventorySnapshotId","description":"Unique identifier of the inventory snapshot record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Inventory snapshot entity with updated fields as per schema.","typeName":"IAimallBackendInventorySnapshot.IUpdate"},"responseBody":{"description":"The updated inventory snapshot record.","typeName":"IAimallBackendInventorySnapshot"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes an inventory snapshot record for a specific SKU and snapshot event. As there is no soft delete field for inventory snapshots, this performs a hard deletion from 'aimall_backend_inventory_snapshots'. Only privileged administrators may use this function, which is required for exceptional cleanup, error correction, or regulatory compliance.","path":"/aimall-backend/administrator/skus/{skuId}/inventorySnapshots/{inventorySnapshotId}","method":"delete","description":"Remove an inventory change log entry for a SKU by snapshot ID. Hard delete is enforced since the schema lacks soft delete fields. Operation is restricted to administrators due to audit compliance and data sensitivity.\n\nInput parameters are validated against schema and relational constraints. Success removes the row; errors include missing log, constraint failure, or insufficient permissions. Comprehensive logging is recommended for this risk-sensitive operation.","summary":"Delete an inventory snapshot for a SKU (hard delete).","parameters":[{"name":"skuId","description":"Unique identifier of the parent SKU.","schema":{"type":"string","format":"uuid"}},{"name":"inventorySnapshotId","description":"Unique identifier of the inventory snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves all channel assignment records for a specific product. This operation is based on the aimall_backend_channel_assignments table in the Prisma schema. Each channel assignment associates a product with a sales/distribution channel, tracking which channels the product is available on and when the assignment was made. Useful for sellers and administrators overseeing product distribution coverage and monitoring channel exposure. Accessible to users with appropriate seller or administrator roles. Returns detailed information for each assignment.","path":"/aimall-backend/seller/products/{productId}/channelAssignments","method":"get","description":"This API returns a complete list of all channel assignments for the specified product, as recorded in the aimall_backend_channel_assignments table. Each record fully details the relationship between the product and its configured channels, including assignment timestamps and associated channel metadata. \n\nRole-based access ensures only authenticated sellers and administrators can view this distribution mapping. Sellers will only access their own product assignments. The operation is integral for maintaining and troubleshooting product visibility across sales channels. Error responses will occur if the product does not exist or if access permissions are insufficient.\n\nThis endpoint is usually paired with the POST operation for assignment creation and the GET with channelAssignmentId for detail views.","summary":"List all channel assignments for a specified product (aimall_backend_channel_assignments).","parameters":[{"name":"productId","description":"Unique identifier of the target product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all channel assignment records for the specified product.","typeName":"IPageIAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"Retrieves all channel assignment records for a specific product. This operation is based on the aimall_backend_channel_assignments table in the Prisma schema. Each channel assignment associates a product with a sales/distribution channel, tracking which channels the product is available on and when the assignment was made. Useful for sellers and administrators overseeing product distribution coverage and monitoring channel exposure. Accessible to users with appropriate seller or administrator roles. Returns detailed information for each assignment.","path":"/aimall-backend/administrator/products/{productId}/channelAssignments","method":"get","description":"This API returns a complete list of all channel assignments for the specified product, as recorded in the aimall_backend_channel_assignments table. Each record fully details the relationship between the product and its configured channels, including assignment timestamps and associated channel metadata. \n\nRole-based access ensures only authenticated sellers and administrators can view this distribution mapping. Sellers will only access their own product assignments. The operation is integral for maintaining and troubleshooting product visibility across sales channels. Error responses will occur if the product does not exist or if access permissions are insufficient.\n\nThis endpoint is usually paired with the POST operation for assignment creation and the GET with channelAssignmentId for detail views.","summary":"List all channel assignments for a specified product (aimall_backend_channel_assignments).","parameters":[{"name":"productId","description":"Unique identifier of the target product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all channel assignment records for the specified product.","typeName":"IPageIAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Retrieves a filtered and paginated list of channel assignments for a product with support for advanced filtering, sorting, and pagination. Works on the aimall_backend_channel_assignments entity. Used by sellers or administrators to query large product-channel mappings, search by channel, or audit assignments over time.","path":"/aimall-backend/seller/products/{productId}/channelAssignments","method":"patch","description":"Retrieve a paginated, filtered list of channel assignments associated with a specific product. Powered by the aimall_backend_channel_assignments model, this endpoint supports advanced queries—such as filtering by channel ID, date assigned, or channel code/name—as well as sorting and pagination.\n\nSellers and administrators can efficiently search and audit channel exposure history for a product. Search criteria and pagination details are provided in the request body. Appropriate access control ensures sellers can see only their own products. Error responses may occur if the product does not exist or due to insufficient permissions.\n\nPair with the GET endpoint for full listings or use to drill down by search parameters before accessing detail or modification endpoints.","summary":"Advanced search for paginated channel assignments for a specified product.","parameters":[{"name":"productId","description":"Unique identifier of the target product.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination/filtering parameters for querying product channel assignments.","typeName":"IAimallBackendChannelAssignment.IRequest"},"responseBody":{"description":"Paginated result set of channel assignment records for the product matching the search.","typeName":"IPageIAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"Retrieves a filtered and paginated list of channel assignments for a product with support for advanced filtering, sorting, and pagination. Works on the aimall_backend_channel_assignments entity. Used by sellers or administrators to query large product-channel mappings, search by channel, or audit assignments over time.","path":"/aimall-backend/administrator/products/{productId}/channelAssignments","method":"patch","description":"Retrieve a paginated, filtered list of channel assignments associated with a specific product. Powered by the aimall_backend_channel_assignments model, this endpoint supports advanced queries—such as filtering by channel ID, date assigned, or channel code/name—as well as sorting and pagination.\n\nSellers and administrators can efficiently search and audit channel exposure history for a product. Search criteria and pagination details are provided in the request body. Appropriate access control ensures sellers can see only their own products. Error responses may occur if the product does not exist or due to insufficient permissions.\n\nPair with the GET endpoint for full listings or use to drill down by search parameters before accessing detail or modification endpoints.","summary":"Advanced search for paginated channel assignments for a specified product.","parameters":[{"name":"productId","description":"Unique identifier of the target product.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination/filtering parameters for querying product channel assignments.","typeName":"IAimallBackendChannelAssignment.IRequest"},"responseBody":{"description":"Paginated result set of channel assignment records for the product matching the search.","typeName":"IPageIAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves the detailed channel assignment record by channelAssignmentId for a specific product. This operation works with the aimall_backend_channel_assignments table. Use to view assignment metadata, audit details, and linked product+channel information. Key for troubleshooting and auditing changes in product distribution.","path":"/aimall-backend/seller/products/{productId}/channelAssignments/{channelAssignmentId}","method":"get","description":"Fetches the full detail of a single channel assignment for a product, uniquely identified by channelAssignmentId. The information includes all atomic fields within the aimall_backend_channel_assignments schema, such as timestamps and the reference links to the associated product and channel.\n\nThis endpoint should be accessed by sellers and administrators with access to the product. Useful for assignment audits, compliance validation, or troubleshooting issues when products are not visible on expected channels. Enforces role-based security and validates ownership/permissions.\n\nRelated endpoints are the list and search endpoints for channel assignments, and the modification endpoints for edit or deletion.","summary":"Fetch single channel assignment detail for a product by channelAssignmentId.","parameters":[{"name":"productId","description":"Unique identifier of the product the assignment belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"channelAssignmentId","description":"Unique identifier of the target channel assignment record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full channel assignment record details for the specified assignment ID.","typeName":"IAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieves the detailed channel assignment record by channelAssignmentId for a specific product. This operation works with the aimall_backend_channel_assignments table. Use to view assignment metadata, audit details, and linked product+channel information. Key for troubleshooting and auditing changes in product distribution.","path":"/aimall-backend/administrator/products/{productId}/channelAssignments/{channelAssignmentId}","method":"get","description":"Fetches the full detail of a single channel assignment for a product, uniquely identified by channelAssignmentId. The information includes all atomic fields within the aimall_backend_channel_assignments schema, such as timestamps and the reference links to the associated product and channel.\n\nThis endpoint should be accessed by sellers and administrators with access to the product. Useful for assignment audits, compliance validation, or troubleshooting issues when products are not visible on expected channels. Enforces role-based security and validates ownership/permissions.\n\nRelated endpoints are the list and search endpoints for channel assignments, and the modification endpoints for edit or deletion.","summary":"Fetch single channel assignment detail for a product by channelAssignmentId.","parameters":[{"name":"productId","description":"Unique identifier of the product the assignment belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"channelAssignmentId","description":"Unique identifier of the target channel assignment record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full channel assignment record details for the specified assignment ID.","typeName":"IAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new channel assignment for a specific product. This operation creates a new record in the aimall_backend_channel_assignments table and thereby registers the product to be listed or managed on a new sales/distribution channel. Used by sellers or administrators when launching products in new markets or activating additional channels. Requires assignment data in the request body.","path":"/aimall-backend/seller/products/{productId}/channelAssignments","method":"post","description":"This endpoint allows sellers or administrators to assign a product to a new channel, registering it for listing or management purposes on that platform. It creates a new aimall_backend_channel_assignments record linking the specified product to the desired channel and records the assignment timestamp.\n\nInput validation ensures that the referenced product and channel are valid and not already assigned together. Access control restricts creation to sellers (for their own products) and administrators. Duplicate assignment is prevented by the unique constraint in the schema.\n\nUpon successful creation, the full assignment record is returned. Errors are thrown for invalid or duplicate requests, or on insufficient permission.","summary":"Create a channel assignment for a product (register product to channel).","parameters":[{"name":"productId","description":"Unique identifier of the target product for the assignment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Input data defining the new channel assignment (channelId, assigned_at, etc).","typeName":"IAimallBackendChannelAssignment.ICreate"},"responseBody":{"description":"The channel assignment record as created, referencing both product and channel.","typeName":"IAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new channel assignment for a specific product. This operation creates a new record in the aimall_backend_channel_assignments table and thereby registers the product to be listed or managed on a new sales/distribution channel. Used by sellers or administrators when launching products in new markets or activating additional channels. Requires assignment data in the request body.","path":"/aimall-backend/administrator/products/{productId}/channelAssignments","method":"post","description":"This endpoint allows sellers or administrators to assign a product to a new channel, registering it for listing or management purposes on that platform. It creates a new aimall_backend_channel_assignments record linking the specified product to the desired channel and records the assignment timestamp.\n\nInput validation ensures that the referenced product and channel are valid and not already assigned together. Access control restricts creation to sellers (for their own products) and administrators. Duplicate assignment is prevented by the unique constraint in the schema.\n\nUpon successful creation, the full assignment record is returned. Errors are thrown for invalid or duplicate requests, or on insufficient permission.","summary":"Create a channel assignment for a product (register product to channel).","parameters":[{"name":"productId","description":"Unique identifier of the target product for the assignment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Input data defining the new channel assignment (channelId, assigned_at, etc).","typeName":"IAimallBackendChannelAssignment.ICreate"},"responseBody":{"description":"The channel assignment record as created, referencing both product and channel.","typeName":"IAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing channel assignment for a specific product. This operation modifies the record in the aimall_backend_channel_assignments table identified by channelAssignmentId. Used to correct or update assignment metadata like the assigned timestamp or context (if schema extended with more fields in future). Typically for administrators; sellers may update their own assignments under certain circumstances.","path":"/aimall-backend/seller/products/{productId}/channelAssignments/{channelAssignmentId}","method":"put","description":"This endpoint updates an existing channel assignment for the given product, modifying one or more of the assignment's attributes (such as assignment timestamp or, in future schema versions, other metadata fields). The targeted record is located by channelAssignmentId, and access is controlled by seller/administrator role and product ownership.\n\nAllows correction of errors, audit adjustments, or operational reassignment when business requirements change. The updated record is returned upon success. Validation includes verifying product and assignment existence, assignment relationship, and access rights. Errors cover non-existent/unauthorized edits or validation failures.","summary":"Update a channel assignment for a product; by channelAssignmentId.","parameters":[{"name":"productId","description":"Unique identifier of the target product.","schema":{"type":"string","format":"uuid"}},{"name":"channelAssignmentId","description":"Unique identifier of the channel assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the channel assignment record.","typeName":"IAimallBackendChannelAssignment.IUpdate"},"responseBody":{"description":"The updated channel assignment as currently stored after update.","typeName":"IAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Updates an existing channel assignment for a specific product. This operation modifies the record in the aimall_backend_channel_assignments table identified by channelAssignmentId. Used to correct or update assignment metadata like the assigned timestamp or context (if schema extended with more fields in future). Typically for administrators; sellers may update their own assignments under certain circumstances.","path":"/aimall-backend/administrator/products/{productId}/channelAssignments/{channelAssignmentId}","method":"put","description":"This endpoint updates an existing channel assignment for the given product, modifying one or more of the assignment's attributes (such as assignment timestamp or, in future schema versions, other metadata fields). The targeted record is located by channelAssignmentId, and access is controlled by seller/administrator role and product ownership.\n\nAllows correction of errors, audit adjustments, or operational reassignment when business requirements change. The updated record is returned upon success. Validation includes verifying product and assignment existence, assignment relationship, and access rights. Errors cover non-existent/unauthorized edits or validation failures.","summary":"Update a channel assignment for a product; by channelAssignmentId.","parameters":[{"name":"productId","description":"Unique identifier of the target product.","schema":{"type":"string","format":"uuid"}},{"name":"channelAssignmentId","description":"Unique identifier of the channel assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the channel assignment record.","typeName":"IAimallBackendChannelAssignment.IUpdate"},"responseBody":{"description":"The updated channel assignment as currently stored after update.","typeName":"IAimallBackendChannelAssignment"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (removes) a channel assignment for a product by its unique channelAssignmentId. This operation removes the product's link to the specified channel by deleting the record from aimall_backend_channel_assignments. Since there is no soft-delete field, deletion is hard and irreversible. Used by sellers and administrators when retracting a product from a channel, e.g., product discontinuation or operational errors. Only users with proper permissions may delete assignments.","path":"/aimall-backend/seller/products/{productId}/channelAssignments/{channelAssignmentId}","method":"delete","description":"This operation permanently deletes a channel assignment for a product, breaking the link between the product and the specified sales/distribution channel. This operates as a hard delete, in accordance with the aimall_backend_channel_assignments schema, which does not include any soft-delete fields (such as deleted_at).\n\nSellers are restricted to deleting assignments for their own products and channels. Administrators may delete any assignment. Deletion is irreversible and should be done with caution. Errors will be returned if the record doesn’t exist or the user lacks permissions.","summary":"Delete (hard remove) a channel assignment for a product by channelAssignmentId.","parameters":[{"name":"productId","description":"Unique identifier of the product involved in the assignment.","schema":{"type":"string","format":"uuid"}},{"name":"channelAssignmentId","description":"Unique identifier of the assignment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes (removes) a channel assignment for a product by its unique channelAssignmentId. This operation removes the product's link to the specified channel by deleting the record from aimall_backend_channel_assignments. Since there is no soft-delete field, deletion is hard and irreversible. Used by sellers and administrators when retracting a product from a channel, e.g., product discontinuation or operational errors. Only users with proper permissions may delete assignments.","path":"/aimall-backend/administrator/products/{productId}/channelAssignments/{channelAssignmentId}","method":"delete","description":"This operation permanently deletes a channel assignment for a product, breaking the link between the product and the specified sales/distribution channel. This operates as a hard delete, in accordance with the aimall_backend_channel_assignments schema, which does not include any soft-delete fields (such as deleted_at).\n\nSellers are restricted to deleting assignments for their own products and channels. Administrators may delete any assignment. Deletion is irreversible and should be done with caution. Errors will be returned if the record doesn’t exist or the user lacks permissions.","summary":"Delete (hard remove) a channel assignment for a product by channelAssignmentId.","parameters":[{"name":"productId","description":"Unique identifier of the product involved in the assignment.","schema":{"type":"string","format":"uuid"}},{"name":"channelAssignmentId","description":"Unique identifier of the assignment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a full listing of community posts from the aimall_backend_posts schema. Each post is a record representing a discussion thread, Q&A, or announcement in the platform’s community or bulletin board. Supports browsing all posts, with possible future support for filtering or summary views. Useful for authenticated platform users who want to explore community discussions. Returns an array or paged list of full post records.","path":"/aimall-backend/posts","method":"get","description":"Returns all community posts as represented by the aimall_backend_posts table. This is a simple index endpoint, intended for public users, authenticated members, or admins to browse the selection of posts. \n\nReturns atomic post data without pagination/filtering. Accessible as a public endpoint for reading, with restrictions on certain private content by the API or downstream application logic. Often used for building community feeds or Q&A boards. Pair with search and detail endpoints for best results.","summary":"List all community posts (aimall_backend_posts) as an array or collection.","parameters":[],"requestBody":null,"responseBody":{"description":"Array or list of all post records in the community.","typeName":"IPageIAimallBackendPost"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Finds, filters, and returns a paginated, searchable listing of all community posts from aimall_backend_posts. This PATCH endpoint is for advanced querying, supporting filtering by author, title, recency, visibility, and private/public flags, as well as sorting and pagination. Returns a paged list matching search criteria. Typically used in administration/community moderation or advanced UIs.","path":"/aimall-backend/posts","method":"patch","description":"Enables users and admins to search and filter community posts using advanced criteria. Parameters may include author (customerId), post title, date ranges, is_private flag, etc. Designed according to the aimall_backend_posts schema. Supports pagination and sorting for large post sets.\n\nAll users can filter public posts; authenticated users may filter/search their own posts, and admins can search all. Returns a paginated result set. Common in admin consoles or for content-heavy boards. Implement error handling for invalid filters and access scope violations.","summary":"Search/filter/community posts with pagination and advanced queries.","parameters":[],"requestBody":{"description":"Search and filtering criteria with pagination parameters for posts.","typeName":"IAimallBackendPost.IRequest"},"responseBody":{"description":"Paged result set of post records that match criteria.","typeName":"IPageIAimallBackendPost"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"Fetches the details of a single post from the community by its unique postId. Uses aimall_backend_posts table. Returns full detail of the post, including title, body, author, timestamps, and other meta. Also surfaces private/public status, but access to private data is restricted by implementation logic. Used by frontend for post detail views and by admins for content review.","path":"/aimall-backend/posts/{postId}","method":"get","description":"Get the full details of a community post by ID. Returns the atomic record from aimall_backend_posts, showing all defined post fields. If the post has been soft deleted (deleted_at), access depends on calling user and implementation logic (e.g., only admin can see deleted).\n\nTypically used for detailed post display, moderation, and Q&A flows. Public users or members can access the endpoint with restrictions on private or deleted data. Returns 404 if not found or if access blocked by privacy/deletion rules.","summary":"Fetch a single community post's detail by postId.","parameters":[{"name":"postId","description":"Unique identifier for the post to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail record for the community post matching postId.","typeName":"IAimallBackendPost"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Creates a new community post (thread, Q&A, or announcement) by inserting a record into aimall_backend_posts. Accepts post composition data—title, body, privacy flag, and author reference. Enforces data normalization per the schema. Used by all authenticated users—customers, sellers, or administrators—for sharing discussions, questions, or news. Requires creation data in the request body. Returns the post as stored upon successful creation.","path":"/aimall-backend/customer/posts","method":"post","description":"Allows any authenticated user to publish a new community post. Receives post details (title, body, is_private, etc.) as the request body, with atomic fields matching the aimall_backend_posts schema. The system will store the post and return the full record as confirmation.\n\nPost creation may trigger AI or admin moderation depending on content. Privacy flags set by the user restrict visibility at API or UI level. Posting is subject to anti-abuse filters and compliance checks; errors may result if input data is invalid or user is restricted.","summary":"Create a new community post/thread/Q&A.","parameters":[],"requestBody":{"description":"Data defining the new post (title, content, privacy, etc.).","typeName":"IAimallBackendPost.ICreate"},"responseBody":{"description":"The created post record with all database fields populated.","typeName":"IAimallBackendPost"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Creates a new community post (thread, Q&A, or announcement) by inserting a record into aimall_backend_posts. Accepts post composition data—title, body, privacy flag, and author reference. Enforces data normalization per the schema. Used by all authenticated users—customers, sellers, or administrators—for sharing discussions, questions, or news. Requires creation data in the request body. Returns the post as stored upon successful creation.","path":"/aimall-backend/seller/posts","method":"post","description":"Allows any authenticated user to publish a new community post. Receives post details (title, body, is_private, etc.) as the request body, with atomic fields matching the aimall_backend_posts schema. The system will store the post and return the full record as confirmation.\n\nPost creation may trigger AI or admin moderation depending on content. Privacy flags set by the user restrict visibility at API or UI level. Posting is subject to anti-abuse filters and compliance checks; errors may result if input data is invalid or user is restricted.","summary":"Create a new community post/thread/Q&A.","parameters":[],"requestBody":{"description":"Data defining the new post (title, content, privacy, etc.).","typeName":"IAimallBackendPost.ICreate"},"responseBody":{"description":"The created post record with all database fields populated.","typeName":"IAimallBackendPost"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new community post (thread, Q&A, or announcement) by inserting a record into aimall_backend_posts. Accepts post composition data—title, body, privacy flag, and author reference. Enforces data normalization per the schema. Used by all authenticated users—customers, sellers, or administrators—for sharing discussions, questions, or news. Requires creation data in the request body. Returns the post as stored upon successful creation.","path":"/aimall-backend/administrator/posts","method":"post","description":"Allows any authenticated user to publish a new community post. Receives post details (title, body, is_private, etc.) as the request body, with atomic fields matching the aimall_backend_posts schema. The system will store the post and return the full record as confirmation.\n\nPost creation may trigger AI or admin moderation depending on content. Privacy flags set by the user restrict visibility at API or UI level. Posting is subject to anti-abuse filters and compliance checks; errors may result if input data is invalid or user is restricted.","summary":"Create a new community post/thread/Q&A.","parameters":[],"requestBody":{"description":"Data defining the new post (title, content, privacy, etc.).","typeName":"IAimallBackendPost.ICreate"},"responseBody":{"description":"The created post record with all database fields populated.","typeName":"IAimallBackendPost"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates (edits) a community post identified by postId. Modifies an existing row in aimall_backend_posts, changing one or more atomic fields. Applies to updates such as title or body corrections, privacy changes, or other permitted adjustments by the original author or an administrator. Returns the updated post record as stored. Input provided as request body.","path":"/aimall-backend/customer/posts/{postId}","method":"put","description":"Updates an existing community post identified by postId. Can be used for post edits—such as refining content, fixing typos, or toggling privacy. Only the post's original author or an administrator can update, with author validation performed at the application level.\n\nThe API receives the new data for the post fields as specified by IAimallBackendPost.IUpdate, storing changes as per atomic schema fields. Update is tracked with modification timestamps for auditing. Errors returned if unauthorized or if post does not exist.","summary":"Update/edit a community post by postId.","parameters":[{"name":"postId","description":"Unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the post (title, body, etc.).","typeName":"IAimallBackendPost.IUpdate"},"responseBody":{"description":"The post record as updated and currently stored.","typeName":"IAimallBackendPost"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates (edits) a community post identified by postId. Modifies an existing row in aimall_backend_posts, changing one or more atomic fields. Applies to updates such as title or body corrections, privacy changes, or other permitted adjustments by the original author or an administrator. Returns the updated post record as stored. Input provided as request body.","path":"/aimall-backend/seller/posts/{postId}","method":"put","description":"Updates an existing community post identified by postId. Can be used for post edits—such as refining content, fixing typos, or toggling privacy. Only the post's original author or an administrator can update, with author validation performed at the application level.\n\nThe API receives the new data for the post fields as specified by IAimallBackendPost.IUpdate, storing changes as per atomic schema fields. Update is tracked with modification timestamps for auditing. Errors returned if unauthorized or if post does not exist.","summary":"Update/edit a community post by postId.","parameters":[{"name":"postId","description":"Unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the post (title, body, etc.).","typeName":"IAimallBackendPost.IUpdate"},"responseBody":{"description":"The post record as updated and currently stored.","typeName":"IAimallBackendPost"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Updates (edits) a community post identified by postId. Modifies an existing row in aimall_backend_posts, changing one or more atomic fields. Applies to updates such as title or body corrections, privacy changes, or other permitted adjustments by the original author or an administrator. Returns the updated post record as stored. Input provided as request body.","path":"/aimall-backend/administrator/posts/{postId}","method":"put","description":"Updates an existing community post identified by postId. Can be used for post edits—such as refining content, fixing typos, or toggling privacy. Only the post's original author or an administrator can update, with author validation performed at the application level.\n\nThe API receives the new data for the post fields as specified by IAimallBackendPost.IUpdate, storing changes as per atomic schema fields. Update is tracked with modification timestamps for auditing. Errors returned if unauthorized or if post does not exist.","summary":"Update/edit a community post by postId.","parameters":[{"name":"postId","description":"Unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the post (title, body, etc.).","typeName":"IAimallBackendPost.IUpdate"},"responseBody":{"description":"The post record as updated and currently stored.","typeName":"IAimallBackendPost"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (soft deletes) a community post record by unique postId. The aimall_backend_posts schema employs a soft delete model with a nullable deleted_at field. This operation sets deleted_at for the post, which hides it from public view but keeps the record for audit/compliance. Can be performed by original authors or administrators only. Used as a moderation feature and for explicit user content removal requests.","path":"/aimall-backend/customer/posts/{postId}","method":"delete","description":"Soft deletes a post in the community by updating the deleted_at field to the current timestamp. This disables regular retrieval for general users but retains the record for audit and potential restoration. Only original authors or administrators may delete; author validation and permission checks are enforced downstream.\n\nAttempting to delete posts not found, already deleted, or without permission returns errors. Soft delete is in compliance with the schema and business audit requirements. Hard deletion requires database/infra intervention or future schema extensions.","summary":"Soft delete a community post by postId; sets deleted_at but keeps record.","parameters":[{"name":"postId","description":"Unique identifier of the post to delete (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes (soft deletes) a community post record by unique postId. The aimall_backend_posts schema employs a soft delete model with a nullable deleted_at field. This operation sets deleted_at for the post, which hides it from public view but keeps the record for audit/compliance. Can be performed by original authors or administrators only. Used as a moderation feature and for explicit user content removal requests.","path":"/aimall-backend/seller/posts/{postId}","method":"delete","description":"Soft deletes a post in the community by updating the deleted_at field to the current timestamp. This disables regular retrieval for general users but retains the record for audit and potential restoration. Only original authors or administrators may delete; author validation and permission checks are enforced downstream.\n\nAttempting to delete posts not found, already deleted, or without permission returns errors. Soft delete is in compliance with the schema and business audit requirements. Hard deletion requires database/infra intervention or future schema extensions.","summary":"Soft delete a community post by postId; sets deleted_at but keeps record.","parameters":[{"name":"postId","description":"Unique identifier of the post to delete (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes (soft deletes) a community post record by unique postId. The aimall_backend_posts schema employs a soft delete model with a nullable deleted_at field. This operation sets deleted_at for the post, which hides it from public view but keeps the record for audit/compliance. Can be performed by original authors or administrators only. Used as a moderation feature and for explicit user content removal requests.","path":"/aimall-backend/administrator/posts/{postId}","method":"delete","description":"Soft deletes a post in the community by updating the deleted_at field to the current timestamp. This disables regular retrieval for general users but retains the record for audit and potential restoration. Only original authors or administrators may delete; author validation and permission checks are enforced downstream.\n\nAttempting to delete posts not found, already deleted, or without permission returns errors. Soft delete is in compliance with the schema and business audit requirements. Hard deletion requires database/infra intervention or future schema extensions.","summary":"Soft delete a community post by postId; sets deleted_at but keeps record.","parameters":[{"name":"postId","description":"Unique identifier of the post to delete (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieve a paginated list of all comments associated with a specific community post, identified by its unique postId. This operation is based on the aimall_backend_comments table in the Community schema. It supports listing all comments attached to a single post, enabling community members and moderators to review discussions and feedback. Each comment may have associated attachments and metadata such as creation time, author, and visibility (private/public).","path":"/aimall-backend/customer/posts/{postId}/comments","method":"get","description":"This endpoint queries all comments for a specific post using the postId path parameter. It leverages the 3NF-compliant aimall_backend_comments table, ensuring each comment is normalized and can be uniquely identified and retrieved.\n\nThe endpoint supports community moderation and feedback compliance. Only comments on the target post are returned, and API consumers must perform pagination if the list is long. Sensitive/private comments are filtered according to caller’s permissions.\n\nAuthorization embraces the platform’s community role model: customers, sellers, and administrators may view as allowed. Business logic may include view count increment and audit logging on access. On error (e.g., invalid postId), an appropriate error message is returned.","summary":"Get all comments for a given postId from aimall_backend_comments.","parameters":[{"name":"postId","description":"Unique identifier of the post to retrieve comments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of comment entities for the specified post.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieve a paginated list of all comments associated with a specific community post, identified by its unique postId. This operation is based on the aimall_backend_comments table in the Community schema. It supports listing all comments attached to a single post, enabling community members and moderators to review discussions and feedback. Each comment may have associated attachments and metadata such as creation time, author, and visibility (private/public).","path":"/aimall-backend/seller/posts/{postId}/comments","method":"get","description":"This endpoint queries all comments for a specific post using the postId path parameter. It leverages the 3NF-compliant aimall_backend_comments table, ensuring each comment is normalized and can be uniquely identified and retrieved.\n\nThe endpoint supports community moderation and feedback compliance. Only comments on the target post are returned, and API consumers must perform pagination if the list is long. Sensitive/private comments are filtered according to caller’s permissions.\n\nAuthorization embraces the platform’s community role model: customers, sellers, and administrators may view as allowed. Business logic may include view count increment and audit logging on access. On error (e.g., invalid postId), an appropriate error message is returned.","summary":"Get all comments for a given postId from aimall_backend_comments.","parameters":[{"name":"postId","description":"Unique identifier of the post to retrieve comments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of comment entities for the specified post.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"Retrieve a paginated list of all comments associated with a specific community post, identified by its unique postId. This operation is based on the aimall_backend_comments table in the Community schema. It supports listing all comments attached to a single post, enabling community members and moderators to review discussions and feedback. Each comment may have associated attachments and metadata such as creation time, author, and visibility (private/public).","path":"/aimall-backend/administrator/posts/{postId}/comments","method":"get","description":"This endpoint queries all comments for a specific post using the postId path parameter. It leverages the 3NF-compliant aimall_backend_comments table, ensuring each comment is normalized and can be uniquely identified and retrieved.\n\nThe endpoint supports community moderation and feedback compliance. Only comments on the target post are returned, and API consumers must perform pagination if the list is long. Sensitive/private comments are filtered according to caller’s permissions.\n\nAuthorization embraces the platform’s community role model: customers, sellers, and administrators may view as allowed. Business logic may include view count increment and audit logging on access. On error (e.g., invalid postId), an appropriate error message is returned.","summary":"Get all comments for a given postId from aimall_backend_comments.","parameters":[{"name":"postId","description":"Unique identifier of the post to retrieve comments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of comment entities for the specified post.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Search, filter and retrieve a paginated collection of comments with advanced criteria for a specific post. This operation relies on the aimall_backend_comments table in Community. It allows community moderators, administrators, or users to perform filtered/sorted retrieval based on criteria such as visibility (private/public), author, creation window, or keyword presence.","path":"/aimall-backend/customer/posts/{postId}/comments","method":"patch","description":"This endpoint enables advanced comment searching for a given post. SEARCH is executed via complex payload, allowing for criteria like visibility, keywords, user, and time window filtering, which is essential for moderation and user experience optimization.\n\nAuthorization is required; users are only shown comments they have access rights to (public comments, or their own private comments). The request body uses a filtering/search DTO. Expected errors include invalid postId or validation errors in search criteria.","summary":"Search and filter comments for a post with advanced criteria (Community, Comments).","parameters":[{"name":"postId","description":"Unique identifier of the post to query comments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter/search and pagination options for retrieving comments.","typeName":"IAimallBackendComment.IRequest"},"responseBody":{"description":"Paginated and filtered list of comments matching the criteria.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Search, filter and retrieve a paginated collection of comments with advanced criteria for a specific post. This operation relies on the aimall_backend_comments table in Community. It allows community moderators, administrators, or users to perform filtered/sorted retrieval based on criteria such as visibility (private/public), author, creation window, or keyword presence.","path":"/aimall-backend/seller/posts/{postId}/comments","method":"patch","description":"This endpoint enables advanced comment searching for a given post. SEARCH is executed via complex payload, allowing for criteria like visibility, keywords, user, and time window filtering, which is essential for moderation and user experience optimization.\n\nAuthorization is required; users are only shown comments they have access rights to (public comments, or their own private comments). The request body uses a filtering/search DTO. Expected errors include invalid postId or validation errors in search criteria.","summary":"Search and filter comments for a post with advanced criteria (Community, Comments).","parameters":[{"name":"postId","description":"Unique identifier of the post to query comments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter/search and pagination options for retrieving comments.","typeName":"IAimallBackendComment.IRequest"},"responseBody":{"description":"Paginated and filtered list of comments matching the criteria.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"Search, filter and retrieve a paginated collection of comments with advanced criteria for a specific post. This operation relies on the aimall_backend_comments table in Community. It allows community moderators, administrators, or users to perform filtered/sorted retrieval based on criteria such as visibility (private/public), author, creation window, or keyword presence.","path":"/aimall-backend/administrator/posts/{postId}/comments","method":"patch","description":"This endpoint enables advanced comment searching for a given post. SEARCH is executed via complex payload, allowing for criteria like visibility, keywords, user, and time window filtering, which is essential for moderation and user experience optimization.\n\nAuthorization is required; users are only shown comments they have access rights to (public comments, or their own private comments). The request body uses a filtering/search DTO. Expected errors include invalid postId or validation errors in search criteria.","summary":"Search and filter comments for a post with advanced criteria (Community, Comments).","parameters":[{"name":"postId","description":"Unique identifier of the post to query comments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter/search and pagination options for retrieving comments.","typeName":"IAimallBackendComment.IRequest"},"responseBody":{"description":"Paginated and filtered list of comments matching the criteria.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieve a single comment by its unique commentId, scoped to the specified post. Operates on aimall_backend_comments and ensures the ORM enforces both postId and commentId scoping for security and business integrity. This allows users and moderators to review specific comment details, including visibility, author, timestamps, and attachments.","path":"/aimall-backend/customer/posts/{postId}/comments/{commentId}","method":"get","description":"This endpoint provides the details of a single comment belonging to a post (identified by postId and commentId). It returns all fields normalized per aimall_backend_comments table, such as body, author, timestamps, and privacy flag.\n\nAuthorization is enforced so only customers, sellers, or administrators with sufficient rights may view private or sensitive comments. The API properly handles not found (404) and access denied scenarios, with complete error feedback.","summary":"Get a single comment for a post by commentId (Community, Comments).","parameters":[{"name":"postId","description":"Unique identifier of the target post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Specific comment details for the provided postId and commentId.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieve a single comment by its unique commentId, scoped to the specified post. Operates on aimall_backend_comments and ensures the ORM enforces both postId and commentId scoping for security and business integrity. This allows users and moderators to review specific comment details, including visibility, author, timestamps, and attachments.","path":"/aimall-backend/seller/posts/{postId}/comments/{commentId}","method":"get","description":"This endpoint provides the details of a single comment belonging to a post (identified by postId and commentId). It returns all fields normalized per aimall_backend_comments table, such as body, author, timestamps, and privacy flag.\n\nAuthorization is enforced so only customers, sellers, or administrators with sufficient rights may view private or sensitive comments. The API properly handles not found (404) and access denied scenarios, with complete error feedback.","summary":"Get a single comment for a post by commentId (Community, Comments).","parameters":[{"name":"postId","description":"Unique identifier of the target post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Specific comment details for the provided postId and commentId.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve a single comment by its unique commentId, scoped to the specified post. Operates on aimall_backend_comments and ensures the ORM enforces both postId and commentId scoping for security and business integrity. This allows users and moderators to review specific comment details, including visibility, author, timestamps, and attachments.","path":"/aimall-backend/administrator/posts/{postId}/comments/{commentId}","method":"get","description":"This endpoint provides the details of a single comment belonging to a post (identified by postId and commentId). It returns all fields normalized per aimall_backend_comments table, such as body, author, timestamps, and privacy flag.\n\nAuthorization is enforced so only customers, sellers, or administrators with sufficient rights may view private or sensitive comments. The API properly handles not found (404) and access denied scenarios, with complete error feedback.","summary":"Get a single comment for a post by commentId (Community, Comments).","parameters":[{"name":"postId","description":"Unique identifier of the target post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Specific comment details for the provided postId and commentId.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new comment under a given post, using fields specified in the aimall_backend_comments Prisma schema. This operation enables end-users (customers), sellers, or even administrators to add replies to forum posts or Q&A, supporting rich comment threading on the community platform. Each comment references its parent post, author, and optionally, a parent comment for threads.","path":"/aimall-backend/customer/posts/{postId}/comments","method":"post","description":"This endpoint allows creation of a comment on a post. Request body must provide required comment fields defined in aimall_backend_comments: postId (derived from path), body, is_private, and other attributes.\n\nAuthentication is required; the commenter’s role determines further business logic, like private/public status and moderation pipeline. On success, a normalized comment object is returned. Error handling includes invalid input, access denial, or prohibited content (business rule-validated).","summary":"Create a new comment under the specified post (Community, Comments).","parameters":[{"name":"postId","description":"ID of the post where the comment will be created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation data, following the Community Comments schema definition.","typeName":"IAimallBackendComment.ICreate"},"responseBody":{"description":"The newly created comment entity.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Create a new comment under a given post, using fields specified in the aimall_backend_comments Prisma schema. This operation enables end-users (customers), sellers, or even administrators to add replies to forum posts or Q&A, supporting rich comment threading on the community platform. Each comment references its parent post, author, and optionally, a parent comment for threads.","path":"/aimall-backend/seller/posts/{postId}/comments","method":"post","description":"This endpoint allows creation of a comment on a post. Request body must provide required comment fields defined in aimall_backend_comments: postId (derived from path), body, is_private, and other attributes.\n\nAuthentication is required; the commenter’s role determines further business logic, like private/public status and moderation pipeline. On success, a normalized comment object is returned. Error handling includes invalid input, access denial, or prohibited content (business rule-validated).","summary":"Create a new comment under the specified post (Community, Comments).","parameters":[{"name":"postId","description":"ID of the post where the comment will be created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation data, following the Community Comments schema definition.","typeName":"IAimallBackendComment.ICreate"},"responseBody":{"description":"The newly created comment entity.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Create a new comment under a given post, using fields specified in the aimall_backend_comments Prisma schema. This operation enables end-users (customers), sellers, or even administrators to add replies to forum posts or Q&A, supporting rich comment threading on the community platform. Each comment references its parent post, author, and optionally, a parent comment for threads.","path":"/aimall-backend/administrator/posts/{postId}/comments","method":"post","description":"This endpoint allows creation of a comment on a post. Request body must provide required comment fields defined in aimall_backend_comments: postId (derived from path), body, is_private, and other attributes.\n\nAuthentication is required; the commenter’s role determines further business logic, like private/public status and moderation pipeline. On success, a normalized comment object is returned. Error handling includes invalid input, access denial, or prohibited content (business rule-validated).","summary":"Create a new comment under the specified post (Community, Comments).","parameters":[{"name":"postId","description":"ID of the post where the comment will be created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation data, following the Community Comments schema definition.","typeName":"IAimallBackendComment.ICreate"},"responseBody":{"description":"The newly created comment entity.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Update an existing comment (by commentId) under the specified post (by postId). This operation allows authors or moderators to edit comment content, visibility, or other mutable fields according to the aimall_backend_comments schema. Edits are tracked for auditing and compliance purposes.","path":"/aimall-backend/customer/posts/{postId}/comments/{commentId}","method":"put","description":"This endpoint updates a comment for a particular post, using both postId and commentId as path parameters. Editable fields are in the request body, e.g., body, is_private. The comment is updated only if the user has sufficient privileges (author or admin). Audit logging is triggered for edit actions.\n\nErrors are raised for not-found, invalid update data, or insufficient privileges when a user tries to modify another user's comment. On success, the updated comment is returned, compliant with normalization rules of aimall_backend_comments.","summary":"Update a comment under a post by commentId (Community, Comments).","parameters":[{"name":"postId","description":"ID of the post holding the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the specified comment, matching the Community Comments update schema.","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"The updated comment entity.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Update an existing comment (by commentId) under the specified post (by postId). This operation allows authors or moderators to edit comment content, visibility, or other mutable fields according to the aimall_backend_comments schema. Edits are tracked for auditing and compliance purposes.","path":"/aimall-backend/seller/posts/{postId}/comments/{commentId}","method":"put","description":"This endpoint updates a comment for a particular post, using both postId and commentId as path parameters. Editable fields are in the request body, e.g., body, is_private. The comment is updated only if the user has sufficient privileges (author or admin). Audit logging is triggered for edit actions.\n\nErrors are raised for not-found, invalid update data, or insufficient privileges when a user tries to modify another user's comment. On success, the updated comment is returned, compliant with normalization rules of aimall_backend_comments.","summary":"Update a comment under a post by commentId (Community, Comments).","parameters":[{"name":"postId","description":"ID of the post holding the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the specified comment, matching the Community Comments update schema.","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"The updated comment entity.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Update an existing comment (by commentId) under the specified post (by postId). This operation allows authors or moderators to edit comment content, visibility, or other mutable fields according to the aimall_backend_comments schema. Edits are tracked for auditing and compliance purposes.","path":"/aimall-backend/administrator/posts/{postId}/comments/{commentId}","method":"put","description":"This endpoint updates a comment for a particular post, using both postId and commentId as path parameters. Editable fields are in the request body, e.g., body, is_private. The comment is updated only if the user has sufficient privileges (author or admin). Audit logging is triggered for edit actions.\n\nErrors are raised for not-found, invalid update data, or insufficient privileges when a user tries to modify another user's comment. On success, the updated comment is returned, compliant with normalization rules of aimall_backend_comments.","summary":"Update a comment under a post by commentId (Community, Comments).","parameters":[{"name":"postId","description":"ID of the post holding the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the specified comment, matching the Community Comments update schema.","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"The updated comment entity.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Delete (soft delete) a comment identified by commentId under a specific post, using the soft-deletion scheme present in aimall_backend_comments (deleted_at field). Rather than removing the record, this operation marks it as deleted for compliance and audit, but does not destroy the underlying comment data.","path":"/aimall-backend/customer/posts/{postId}/comments/{commentId}","method":"delete","description":"This endpoint soft deletes a comment as per the aimall_backend_comments schema: the deleted_at timestamp is set rather than the row being removed. Only authorized users (author or moderator/administrator) may perform this operation for compliance and moderation policy. Business rules include possible post/comment audit logging.\n\nError conditions include not found, or unauthorized action. On success, comment is no longer visible in ordinary listings but remains for audit and recovery.","summary":"Soft delete a comment under a post by commentId (Community, Comments).","parameters":[{"name":"postId","description":"ID of the parent post holding the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Delete (soft delete) a comment identified by commentId under a specific post, using the soft-deletion scheme present in aimall_backend_comments (deleted_at field). Rather than removing the record, this operation marks it as deleted for compliance and audit, but does not destroy the underlying comment data.","path":"/aimall-backend/seller/posts/{postId}/comments/{commentId}","method":"delete","description":"This endpoint soft deletes a comment as per the aimall_backend_comments schema: the deleted_at timestamp is set rather than the row being removed. Only authorized users (author or moderator/administrator) may perform this operation for compliance and moderation policy. Business rules include possible post/comment audit logging.\n\nError conditions include not found, or unauthorized action. On success, comment is no longer visible in ordinary listings but remains for audit and recovery.","summary":"Soft delete a comment under a post by commentId (Community, Comments).","parameters":[{"name":"postId","description":"ID of the parent post holding the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Delete (soft delete) a comment identified by commentId under a specific post, using the soft-deletion scheme present in aimall_backend_comments (deleted_at field). Rather than removing the record, this operation marks it as deleted for compliance and audit, but does not destroy the underlying comment data.","path":"/aimall-backend/administrator/posts/{postId}/comments/{commentId}","method":"delete","description":"This endpoint soft deletes a comment as per the aimall_backend_comments schema: the deleted_at timestamp is set rather than the row being removed. Only authorized users (author or moderator/administrator) may perform this operation for compliance and moderation policy. Business rules include possible post/comment audit logging.\n\nError conditions include not found, or unauthorized action. On success, comment is no longer visible in ordinary listings but remains for audit and recovery.","summary":"Soft delete a comment under a post by commentId (Community, Comments).","parameters":[{"name":"postId","description":"ID of the parent post holding the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieve a paginated list of all attachments associated with a specific post, identified by postId. This operation is based on the aimall_backend_attachments table in the Community schema. It lists all files (images, documents, videos, etc.) linked to a single post. Each attachment includes file metadata such as URI, type, size, and creation timestamp, enabling the display and management of post-related media.","path":"/aimall-backend/customer/posts/{postId}/attachments","method":"get","description":"This endpoint retrieves all attachments for a community post by postId, referencing the aimall_backend_attachments schema. Results include media/file info tied to the specified post, which may be used by UIs to render galleries or download links.\n\nPagination is recommended if there are many attachments. Only attachments for the given post are returned. Authorization may be scoped by the viewer’s permissions; some file/media types may be restricted based on post or user attributes. On error, appropriate messages are returned.","summary":"Get all attachments for a postId (Community, Attachments).","parameters":[{"name":"postId","description":"Unique identifier for the post holding attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of attachment entities for the specified post.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieve a paginated list of all attachments associated with a specific post, identified by postId. This operation is based on the aimall_backend_attachments table in the Community schema. It lists all files (images, documents, videos, etc.) linked to a single post. Each attachment includes file metadata such as URI, type, size, and creation timestamp, enabling the display and management of post-related media.","path":"/aimall-backend/seller/posts/{postId}/attachments","method":"get","description":"This endpoint retrieves all attachments for a community post by postId, referencing the aimall_backend_attachments schema. Results include media/file info tied to the specified post, which may be used by UIs to render galleries or download links.\n\nPagination is recommended if there are many attachments. Only attachments for the given post are returned. Authorization may be scoped by the viewer’s permissions; some file/media types may be restricted based on post or user attributes. On error, appropriate messages are returned.","summary":"Get all attachments for a postId (Community, Attachments).","parameters":[{"name":"postId","description":"Unique identifier for the post holding attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of attachment entities for the specified post.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"Retrieve a paginated list of all attachments associated with a specific post, identified by postId. This operation is based on the aimall_backend_attachments table in the Community schema. It lists all files (images, documents, videos, etc.) linked to a single post. Each attachment includes file metadata such as URI, type, size, and creation timestamp, enabling the display and management of post-related media.","path":"/aimall-backend/administrator/posts/{postId}/attachments","method":"get","description":"This endpoint retrieves all attachments for a community post by postId, referencing the aimall_backend_attachments schema. Results include media/file info tied to the specified post, which may be used by UIs to render galleries or download links.\n\nPagination is recommended if there are many attachments. Only attachments for the given post are returned. Authorization may be scoped by the viewer’s permissions; some file/media types may be restricted based on post or user attributes. On error, appropriate messages are returned.","summary":"Get all attachments for a postId (Community, Attachments).","parameters":[{"name":"postId","description":"Unique identifier for the post holding attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of attachment entities for the specified post.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Search/filter and paginate attachments for a specific post, using advanced criteria such as file type, size range, creation date, or keyword presence in metadata. Based on aimall_backend_attachments, this operation is essential for media management, moderation, and audit functionality on community posts.","path":"/aimall-backend/customer/posts/{postId}/attachments","method":"patch","description":"This endpoint allows clients to perform advanced searches among a post’s attachments via a search/filter payload (e.g., file size, type, created_at range). It is useful for post authors, moderators, or admins to manage large post galleries efficiently.\n\nAuthorization restricts this view to permitted users, and results are paginated. Error handling covers invalid search criteria or insufficient permissions.","summary":"Advanced search/filter for attachments by postId (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the parent post holding attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter/search and pagination DTO for attachments.","typeName":"IAimallBackendAttachment.IRequest"},"responseBody":{"description":"Paginated and filtered list of attachments matching criteria.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Search/filter and paginate attachments for a specific post, using advanced criteria such as file type, size range, creation date, or keyword presence in metadata. Based on aimall_backend_attachments, this operation is essential for media management, moderation, and audit functionality on community posts.","path":"/aimall-backend/seller/posts/{postId}/attachments","method":"patch","description":"This endpoint allows clients to perform advanced searches among a post’s attachments via a search/filter payload (e.g., file size, type, created_at range). It is useful for post authors, moderators, or admins to manage large post galleries efficiently.\n\nAuthorization restricts this view to permitted users, and results are paginated. Error handling covers invalid search criteria or insufficient permissions.","summary":"Advanced search/filter for attachments by postId (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the parent post holding attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter/search and pagination DTO for attachments.","typeName":"IAimallBackendAttachment.IRequest"},"responseBody":{"description":"Paginated and filtered list of attachments matching criteria.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"Search/filter and paginate attachments for a specific post, using advanced criteria such as file type, size range, creation date, or keyword presence in metadata. Based on aimall_backend_attachments, this operation is essential for media management, moderation, and audit functionality on community posts.","path":"/aimall-backend/administrator/posts/{postId}/attachments","method":"patch","description":"This endpoint allows clients to perform advanced searches among a post’s attachments via a search/filter payload (e.g., file size, type, created_at range). It is useful for post authors, moderators, or admins to manage large post galleries efficiently.\n\nAuthorization restricts this view to permitted users, and results are paginated. Error handling covers invalid search criteria or insufficient permissions.","summary":"Advanced search/filter for attachments by postId (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the parent post holding attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter/search and pagination DTO for attachments.","typeName":"IAimallBackendAttachment.IRequest"},"responseBody":{"description":"Paginated and filtered list of attachments matching criteria.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieve details of a single attachment (by attachmentId), attached to a post (by postId). Fetches file metadata and reference for a specific attachment, allowing authorized users to download or preview individual files via the aimall_backend_attachments schema.","path":"/aimall-backend/customer/posts/{postId}/attachments/{attachmentId}","method":"get","description":"This endpoint returns a single attachment’s metadata and reference fields as normalized in aimall_backend_attachments (postId + attachmentId scoping). Used for in-depth file information retrieval, preview popups, or validating ownership/permissions.\n\nReturns all file fields (file_uri, type, size, created_at, etc). On errors (not found or forbidden), appropriate feedback is provided to API consumers.","summary":"Get a single attachment by attachmentId for a post (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the post holding the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"ID of the attachment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Specific attachment entity details.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieve details of a single attachment (by attachmentId), attached to a post (by postId). Fetches file metadata and reference for a specific attachment, allowing authorized users to download or preview individual files via the aimall_backend_attachments schema.","path":"/aimall-backend/seller/posts/{postId}/attachments/{attachmentId}","method":"get","description":"This endpoint returns a single attachment’s metadata and reference fields as normalized in aimall_backend_attachments (postId + attachmentId scoping). Used for in-depth file information retrieval, preview popups, or validating ownership/permissions.\n\nReturns all file fields (file_uri, type, size, created_at, etc). On errors (not found or forbidden), appropriate feedback is provided to API consumers.","summary":"Get a single attachment by attachmentId for a post (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the post holding the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"ID of the attachment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Specific attachment entity details.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve details of a single attachment (by attachmentId), attached to a post (by postId). Fetches file metadata and reference for a specific attachment, allowing authorized users to download or preview individual files via the aimall_backend_attachments schema.","path":"/aimall-backend/administrator/posts/{postId}/attachments/{attachmentId}","method":"get","description":"This endpoint returns a single attachment’s metadata and reference fields as normalized in aimall_backend_attachments (postId + attachmentId scoping). Used for in-depth file information retrieval, preview popups, or validating ownership/permissions.\n\nReturns all file fields (file_uri, type, size, created_at, etc). On errors (not found or forbidden), appropriate feedback is provided to API consumers.","summary":"Get a single attachment by attachmentId for a post (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the post holding the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"ID of the attachment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Specific attachment entity details.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new attachment (media/file) for a given post, as defined in the aimall_backend_attachments table. Allows authenticated users to upload/link files (image, document, video, etc.) to a specific post, supporting content enrichment and compliance with attachment rules.","path":"/aimall-backend/customer/posts/{postId}/attachments","method":"post","description":"This endpoint lets a user add a new attachment to a post. The request body follows the Community Attachments creation DTO: must specify the required file URI, type, size, and optionally a display/caption/association.\n\nAuthorization is required (author, moderator, or admin). On successful creation, returns the attachment entity (with file URI and metadata). Errors for invalid input, quota exceeded, or unauthorized operation are handled per business policy.","summary":"Create/upload an attachment to a post (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the parent post for the new attachment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment creation DTO, following the Community Attachments schema.","typeName":"IAimallBackendAttachment.ICreate"},"responseBody":{"description":"Newly created attachment entity.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Create a new attachment (media/file) for a given post, as defined in the aimall_backend_attachments table. Allows authenticated users to upload/link files (image, document, video, etc.) to a specific post, supporting content enrichment and compliance with attachment rules.","path":"/aimall-backend/seller/posts/{postId}/attachments","method":"post","description":"This endpoint lets a user add a new attachment to a post. The request body follows the Community Attachments creation DTO: must specify the required file URI, type, size, and optionally a display/caption/association.\n\nAuthorization is required (author, moderator, or admin). On successful creation, returns the attachment entity (with file URI and metadata). Errors for invalid input, quota exceeded, or unauthorized operation are handled per business policy.","summary":"Create/upload an attachment to a post (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the parent post for the new attachment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment creation DTO, following the Community Attachments schema.","typeName":"IAimallBackendAttachment.ICreate"},"responseBody":{"description":"Newly created attachment entity.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Create a new attachment (media/file) for a given post, as defined in the aimall_backend_attachments table. Allows authenticated users to upload/link files (image, document, video, etc.) to a specific post, supporting content enrichment and compliance with attachment rules.","path":"/aimall-backend/administrator/posts/{postId}/attachments","method":"post","description":"This endpoint lets a user add a new attachment to a post. The request body follows the Community Attachments creation DTO: must specify the required file URI, type, size, and optionally a display/caption/association.\n\nAuthorization is required (author, moderator, or admin). On successful creation, returns the attachment entity (with file URI and metadata). Errors for invalid input, quota exceeded, or unauthorized operation are handled per business policy.","summary":"Create/upload an attachment to a post (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the parent post for the new attachment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment creation DTO, following the Community Attachments schema.","typeName":"IAimallBackendAttachment.ICreate"},"responseBody":{"description":"Newly created attachment entity.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Update file metadata, link, or display information of an existing attachment (by attachmentId) on a specific post (by postId). This operation allows file references, captions, or other mutable fields to be edited per aimall_backend_attachments. Used by owners or administrators for media management/compliance.","path":"/aimall-backend/customer/posts/{postId}/attachments/{attachmentId}","method":"put","description":"This endpoint enables modification of a post's attachment: e.g., to revise link, caption, or metadata as defined by aimall_backend_attachments. Only authorized users (original uploader, moderator, or admin) may edit files and metadata.\n\nData to update is in the request body following the Community Attachments update schema. Errors include not found, forbidden, or invalid input. Success returns the updated attachment entity.","summary":"Update an existing attachment for a post (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the post holding the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"ID of the attachment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the specified attachment, matching the Community Attachments update schema.","typeName":"IAimallBackendAttachment.IUpdate"},"responseBody":{"description":"The updated attachment entity for the post.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Update file metadata, link, or display information of an existing attachment (by attachmentId) on a specific post (by postId). This operation allows file references, captions, or other mutable fields to be edited per aimall_backend_attachments. Used by owners or administrators for media management/compliance.","path":"/aimall-backend/seller/posts/{postId}/attachments/{attachmentId}","method":"put","description":"This endpoint enables modification of a post's attachment: e.g., to revise link, caption, or metadata as defined by aimall_backend_attachments. Only authorized users (original uploader, moderator, or admin) may edit files and metadata.\n\nData to update is in the request body following the Community Attachments update schema. Errors include not found, forbidden, or invalid input. Success returns the updated attachment entity.","summary":"Update an existing attachment for a post (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the post holding the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"ID of the attachment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the specified attachment, matching the Community Attachments update schema.","typeName":"IAimallBackendAttachment.IUpdate"},"responseBody":{"description":"The updated attachment entity for the post.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Update file metadata, link, or display information of an existing attachment (by attachmentId) on a specific post (by postId). This operation allows file references, captions, or other mutable fields to be edited per aimall_backend_attachments. Used by owners or administrators for media management/compliance.","path":"/aimall-backend/administrator/posts/{postId}/attachments/{attachmentId}","method":"put","description":"This endpoint enables modification of a post's attachment: e.g., to revise link, caption, or metadata as defined by aimall_backend_attachments. Only authorized users (original uploader, moderator, or admin) may edit files and metadata.\n\nData to update is in the request body following the Community Attachments update schema. Errors include not found, forbidden, or invalid input. Success returns the updated attachment entity.","summary":"Update an existing attachment for a post (Community, Attachments).","parameters":[{"name":"postId","description":"ID of the post holding the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"ID of the attachment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the specified attachment, matching the Community Attachments update schema.","typeName":"IAimallBackendAttachment.IUpdate"},"responseBody":{"description":"The updated attachment entity for the post.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Delete (remove) an attachment from a post using soft-delete or full removal as determined by business logic (here, presumed full removal since there is no deleted_at field on attachments). Based on the aimall_backend_attachments schema; removes the attachment from system and detaches file reference for compliance and storage management.","path":"/aimall-backend/customer/posts/{postId}/attachments/{attachmentId}","method":"delete","description":"This endpoint removes an attachment from a post by attachmentId (and postId scope). Since there is no deleted_at soft-delete field on aimall_backend_attachments, this is a hard delete: the row is removed permanently and the file is dereferenced. Only authorized users may perform this action (uploader, moderator, admin).\n\nErrors include not found, access denied, or in-use constraints. On success, attachment is deleted and no longer available via listing or detail endpoints.","summary":"Delete an attachment on a post (hard delete, Community, Attachments).","parameters":[{"name":"postId","description":"ID of the parent post holding the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"ID of the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Delete (remove) an attachment from a post using soft-delete or full removal as determined by business logic (here, presumed full removal since there is no deleted_at field on attachments). Based on the aimall_backend_attachments schema; removes the attachment from system and detaches file reference for compliance and storage management.","path":"/aimall-backend/seller/posts/{postId}/attachments/{attachmentId}","method":"delete","description":"This endpoint removes an attachment from a post by attachmentId (and postId scope). Since there is no deleted_at soft-delete field on aimall_backend_attachments, this is a hard delete: the row is removed permanently and the file is dereferenced. Only authorized users may perform this action (uploader, moderator, admin).\n\nErrors include not found, access denied, or in-use constraints. On success, attachment is deleted and no longer available via listing or detail endpoints.","summary":"Delete an attachment on a post (hard delete, Community, Attachments).","parameters":[{"name":"postId","description":"ID of the parent post holding the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"ID of the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Delete (remove) an attachment from a post using soft-delete or full removal as determined by business logic (here, presumed full removal since there is no deleted_at field on attachments). Based on the aimall_backend_attachments schema; removes the attachment from system and detaches file reference for compliance and storage management.","path":"/aimall-backend/administrator/posts/{postId}/attachments/{attachmentId}","method":"delete","description":"This endpoint removes an attachment from a post by attachmentId (and postId scope). Since there is no deleted_at soft-delete field on aimall_backend_attachments, this is a hard delete: the row is removed permanently and the file is dereferenced. Only authorized users may perform this action (uploader, moderator, admin).\n\nErrors include not found, access denied, or in-use constraints. On success, attachment is deleted and no longer available via listing or detail endpoints.","summary":"Delete an attachment on a post (hard delete, Community, Attachments).","parameters":[{"name":"postId","description":"ID of the parent post holding the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"ID of the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a paginated list of community comments from the aimall_backend_comments table, which contains individual user comments associated with posts, reviews, or as thread replies through parent_id. It is specifically for general listing for admin, moderation, or analytics purposes. All retrieved fields are defined strictly by the schema and may include soft-deleted items (where deleted_at is set).","path":"/aimall-backend/administrator/comments","method":"get","description":"Fetch a paginated list of all community comments from the platform. This operation exposes all comment records, including their associations (posts, reviews, threads), authorship, and any soft-deletion (deleted_at field present).\n\nSecurity: Retrieval of all comments should be restricted to the administrator for privacy, data minimization, and moderation needs.\n\nChoose PATCH /comments for advanced search/filter, and GET /comments/{commentId} for comment-specific queries.","summary":"Retrieve a paginated list of all community comments (aimall_backend_comments).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of all comments, with thread and relation data.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Allows advanced querying and paginated retrieval of comments from aimall_backend_comments table. Enables filtering by attributes like post_id, review_id, author, parent_id, etc., via a structured request body. PATCH method supports moderators and administrators in analyzing or processing comment feeds for privacy-sensitive or moderation contexts. Only schema-valid attributes are queryable.","path":"/aimall-backend/administrator/comments","method":"patch","description":"Allows advanced search/filter and sorting of community comments in aimall_backend_comments. Query criteria can include post_id, review_id, customer_id, parent_id (for threads), or body text matches. Ensures only administrators can perform such queries since the search may return sensitive or private comments.\n\nUse GET for general list, PATCH for filtered results, and GET /comments/{commentId} for detail retrieval.","summary":"Advanced search, filter, and paginate community comments (aimall_backend_comments).","parameters":[],"requestBody":{"description":"Query/filter parameters for advanced comment search and pagination.","typeName":"IAimallBackendComment.IRequest"},"responseBody":{"description":"Paginated, filtered comment result set per provided filter criteria.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Fetch a single comment from aimall_backend_comments by its unique UUID. Includes all atomic and relation fields (post, review, parent, author/customer). Used for detailed moderation, thread displays, or single comment contexts. Returns strictly schema-defined fields and soft delete flags.","path":"/aimall-backend/administrator/comments/{commentId}","method":"get","description":"Get full detail for one comment from aimall_backend_comments using its UUID. Returns all associated attributes, including content, parent/threading, ownership, soft deletion.\n\nOnly administrators have access due to potential privacy and moderation restrictions.","summary":"Retrieve one comment detail by commentId (aimall_backend_comments).","parameters":[{"name":"commentId","description":"UUID primary key of the comment record sought.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full comment detail as per schema for provided UUID.","typeName":"IAimallBackendComment"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new comment in aimall_backend_comments using all required properties in the creation DTO. Ownership is linked to the authenticated user (customer), and threading is supported via parent_id. Only fields defined in the schema may be set on creation. Comments may reference post or review targets as per business logic.","path":"/aimall-backend/customer/comments","method":"post","description":"Create a new community comment as an authenticated customer. Provide body text, privacy status (is_private), references to post or review, and (if threaded) parent_id. Ownership is set to the authenticated customer.\n\nThis operation is restricted to logged-in customers; administrators may have elevated capabilities through different endpoints. Validation and error handling are enforced by the schema.","summary":"Create a new community comment (aimall_backend_comments).","parameters":[],"requestBody":{"description":"Creation details for the new comment (see aimall_backend_comments).","typeName":"IAimallBackendComment.ICreate"},"responseBody":{"description":"Newly created comment record with all assigned fields.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer"},{"specification":"Update mutable fields of a specific comment in aimall_backend_comments by its UUID. This supports editing (body, is_private) or soft deletion (setting deleted_at) per schema. Authorship or privileged roles must be enforced; normal users can only update their own comments, administrators can update any.","path":"/aimall-backend/customer/comments/{commentId}","method":"put","description":"Modify body text, privacy flag, or soft-delete a specific comment (UUID) in the aimall_backend_comments table. Accepts an update DTO with allowed properties. Only the comment's author (customer) or administrator may perform the update based on permissions.\n\nAttempting to update an unauthorized comment is denied. Use soft-delete (deleted_at) for logical removal.","summary":"Update a single comment (by commentId) in aimall_backend_comments.","parameters":[{"name":"commentId","description":"UUID of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to modify (see IAimallBackendComment.IUpdate).","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"Comment after update with new field values.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Update mutable fields of a specific comment in aimall_backend_comments by its UUID. This supports editing (body, is_private) or soft deletion (setting deleted_at) per schema. Authorship or privileged roles must be enforced; normal users can only update their own comments, administrators can update any.","path":"/aimall-backend/administrator/comments/{commentId}","method":"put","description":"Modify body text, privacy flag, or soft-delete a specific comment (UUID) in the aimall_backend_comments table. Accepts an update DTO with allowed properties. Only the comment's author (customer) or administrator may perform the update based on permissions.\n\nAttempting to update an unauthorized comment is denied. Use soft-delete (deleted_at) for logical removal.","summary":"Update a single comment (by commentId) in aimall_backend_comments.","parameters":[{"name":"commentId","description":"UUID of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to modify (see IAimallBackendComment.IUpdate).","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"Comment after update with new field values.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Soft-delete a comment in aimall_backend_comments by its UUID using the deleted_at nullable field. Only the comment author (customer) or an administrator can perform this action. Hard deletes are not supported; soft delete is achieved by setting deleted_at.","path":"/aimall-backend/customer/comments/{commentId}","method":"delete","description":"Logically delete a comment by setting deleted_at for the target UUID in aimall_backend_comments. Deletion is restricted to ownership (customer) or administrator role. Hard deletion is disallowed in this schema; logical (soft) deletion is tracked for compliance and audit retention.","summary":"Soft-delete (logical delete) a comment by commentId in aimall_backend_comments.","parameters":[{"name":"commentId","description":"UUID PK of the comment to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Soft-delete a comment in aimall_backend_comments by its UUID using the deleted_at nullable field. Only the comment author (customer) or an administrator can perform this action. Hard deletes are not supported; soft delete is achieved by setting deleted_at.","path":"/aimall-backend/administrator/comments/{commentId}","method":"delete","description":"Logically delete a comment by setting deleted_at for the target UUID in aimall_backend_comments. Deletion is restricted to ownership (customer) or administrator role. Hard deletion is disallowed in this schema; logical (soft) deletion is tracked for compliance and audit retention.","summary":"Soft-delete (logical delete) a comment by commentId in aimall_backend_comments.","parameters":[{"name":"commentId","description":"UUID PK of the comment to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"List all attachments for a specific comment from aimall_backend_attachments table. Only attachments whose comment_id matches the supplied commentId are returned. Attachments may be retrieved by author, customer, or administrator as allowed by business policy. Paging of results supported by response type.","path":"/aimall-backend/customer/comments/{commentId}/attachments","method":"get","description":"Retrieve all attachment records for a given comment (by UUID) in aimall_backend_attachments. This supports feeds or moderation panels needing to render or manage all files linked to a comment.\n\nOnly customers or administrators with sufficient rights should be able to retrieve attachments; this may be enforced per privacy settings on the comment or organizational policy.","summary":"Retrieve all attachments for a comment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the comment whose attachments to list.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of all attachments for the comment.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"List all attachments for a specific comment from aimall_backend_attachments table. Only attachments whose comment_id matches the supplied commentId are returned. Attachments may be retrieved by author, customer, or administrator as allowed by business policy. Paging of results supported by response type.","path":"/aimall-backend/administrator/comments/{commentId}/attachments","method":"get","description":"Retrieve all attachment records for a given comment (by UUID) in aimall_backend_attachments. This supports feeds or moderation panels needing to render or manage all files linked to a comment.\n\nOnly customers or administrators with sufficient rights should be able to retrieve attachments; this may be enforced per privacy settings on the comment or organizational policy.","summary":"Retrieve all attachments for a comment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the comment whose attachments to list.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of all attachments for the comment.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Advanced search for attachments linked to a given comment using PATCH. Input DTO supports all schema-defined fields as query parameters. Results filtered only to those with given comment_id. Used by customers (comment owners) or administrators for advanced moderation or management of comment media. Response supports pagination.","path":"/aimall-backend/customer/comments/{commentId}/attachments","method":"patch","description":"Query/filter list of all attachments for a particular comment (by UUID) using schema-defined fields in request body. Supports advanced admin or owner moderation scenarios where large numbers of attachments exist. All filters are validated against the schema for aimall_backend_attachments.","summary":"Advanced search/filter for comment attachments (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the comment for searching attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter criteria for attachment list (see IAimallBackendAttachment.IRequest).","typeName":"IAimallBackendAttachment.IRequest"},"responseBody":{"description":"Filtered result set of attachments for the comment.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Advanced search for attachments linked to a given comment using PATCH. Input DTO supports all schema-defined fields as query parameters. Results filtered only to those with given comment_id. Used by customers (comment owners) or administrators for advanced moderation or management of comment media. Response supports pagination.","path":"/aimall-backend/administrator/comments/{commentId}/attachments","method":"patch","description":"Query/filter list of all attachments for a particular comment (by UUID) using schema-defined fields in request body. Supports advanced admin or owner moderation scenarios where large numbers of attachments exist. All filters are validated against the schema for aimall_backend_attachments.","summary":"Advanced search/filter for comment attachments (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the comment for searching attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter criteria for attachment list (see IAimallBackendAttachment.IRequest).","typeName":"IAimallBackendAttachment.IRequest"},"responseBody":{"description":"Filtered result set of attachments for the comment.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Fetch a single attachment record from aimall_backend_attachments for a given commentId (parent) and attachmentId (primary key). Retrieves only where both UUIDs match. Returns all schema fields including file_uri, file_type, file_size, metadata. Access is limited to customers (comment authors) or administrators.","path":"/aimall-backend/customer/comments/{commentId}/attachments/{attachmentId}","method":"get","description":"Fetch metadata and URI for a specific comment attachment by identifiers for both parent comment and attachment UUID PK. For displays such as file expansion or download, or for moderation. Access should be restricted to ownership or administrative rights.","summary":"Get a specific attachment for a comment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID of the parent comment linking the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID PK of the attachment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single attachment detail as per aimall_backend_attachments schema.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Fetch a single attachment record from aimall_backend_attachments for a given commentId (parent) and attachmentId (primary key). Retrieves only where both UUIDs match. Returns all schema fields including file_uri, file_type, file_size, metadata. Access is limited to customers (comment authors) or administrators.","path":"/aimall-backend/administrator/comments/{commentId}/attachments/{attachmentId}","method":"get","description":"Fetch metadata and URI for a specific comment attachment by identifiers for both parent comment and attachment UUID PK. For displays such as file expansion or download, or for moderation. Access should be restricted to ownership or administrative rights.","summary":"Get a specific attachment for a comment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID of the parent comment linking the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID PK of the attachment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single attachment detail as per aimall_backend_attachments schema.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new attachment (file/media) for a given comment as specified by the IAimallBackendAttachment.ICreate DTO. Parent commentId (UUID) is supplied as path parameter, and all required fields in the creation object must be set. Access control should restrict this operation to the comment owner (customer) or admin. Returns the created attachment including all assigned fields.","path":"/aimall-backend/customer/comments/{commentId}/attachments","method":"post","description":"Attach a new file to a specific comment as an authenticated customer (owner) or administrator. Attachments must include file_uri, file_type, and file_size per IAimallBackendAttachment.ICreate. Created object references the parent comment_id and includes business/app validation for type/size/ownership. Returns the full record for the newly created attachment.","summary":"Attach a new file to a comment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the comment to attach a file to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment creation DTO (see IAimallBackendAttachment.ICreate).","typeName":"IAimallBackendAttachment.ICreate"},"responseBody":{"description":"Full record of the created attachment with assigned UUID and file metadata.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Create a new attachment (file/media) for a given comment as specified by the IAimallBackendAttachment.ICreate DTO. Parent commentId (UUID) is supplied as path parameter, and all required fields in the creation object must be set. Access control should restrict this operation to the comment owner (customer) or admin. Returns the created attachment including all assigned fields.","path":"/aimall-backend/administrator/comments/{commentId}/attachments","method":"post","description":"Attach a new file to a specific comment as an authenticated customer (owner) or administrator. Attachments must include file_uri, file_type, and file_size per IAimallBackendAttachment.ICreate. Created object references the parent comment_id and includes business/app validation for type/size/ownership. Returns the full record for the newly created attachment.","summary":"Attach a new file to a comment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the comment to attach a file to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment creation DTO (see IAimallBackendAttachment.ICreate).","typeName":"IAimallBackendAttachment.ICreate"},"responseBody":{"description":"Full record of the created attachment with assigned UUID and file metadata.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Edit (update) an existing attachment (file/media) for a given comment in aimall_backend_attachments. Both commentId and attachmentId are required and validated as UUIDs. Only allowed fields (file_type, file_size, etc.) as per IAimallBackendAttachment.IUpdate may be modified. Limited to customer (author) or admin based on access rights.","path":"/aimall-backend/customer/comments/{commentId}/attachments/{attachmentId}","method":"put","description":"Update properties of an existing file attached to a comment (for example, modify file_type or metadata). Accepts parent commentId and attachmentId in path and fields to change in payload. Validation enforces only whitelisted fields and correct ownership/admin rights. No public editing allowed.","summary":"Update an existing comment attachment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID PK of the attachment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment update data for allowed fields (see IAimallBackendAttachment.IUpdate).","typeName":"IAimallBackendAttachment.IUpdate"},"responseBody":{"description":"Updated attachment object with new values.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Edit (update) an existing attachment (file/media) for a given comment in aimall_backend_attachments. Both commentId and attachmentId are required and validated as UUIDs. Only allowed fields (file_type, file_size, etc.) as per IAimallBackendAttachment.IUpdate may be modified. Limited to customer (author) or admin based on access rights.","path":"/aimall-backend/administrator/comments/{commentId}/attachments/{attachmentId}","method":"put","description":"Update properties of an existing file attached to a comment (for example, modify file_type or metadata). Accepts parent commentId and attachmentId in path and fields to change in payload. Validation enforces only whitelisted fields and correct ownership/admin rights. No public editing allowed.","summary":"Update an existing comment attachment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID PK of the attachment being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment update data for allowed fields (see IAimallBackendAttachment.IUpdate).","typeName":"IAimallBackendAttachment.IUpdate"},"responseBody":{"description":"Updated attachment object with new values.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Permanently delete an attachment for a given comment by commentId (parent, UUID) and attachmentId (UUID). Immediate removal without soft delete, as there is no deleted_at field in the attachment schema. Only customer (comment authors) or administrator may call this action. Physical file should also be made inaccessible at object store according to external rules.","path":"/aimall-backend/customer/comments/{commentId}/attachments/{attachmentId}","method":"delete","description":"Permanently delete a file/media attachment for a comment by IDs. Removal is permanent and cannot be undone, and is permitted for comment authors (customers) or administrators with necessary rights. No soft-delete supported by the schema. Any file storage associated with file_uri must be handled according to external object store policies.","summary":"Delete (hard-delete) an attachment for a comment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the parent comment for the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID PK of the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Permanently delete an attachment for a given comment by commentId (parent, UUID) and attachmentId (UUID). Immediate removal without soft delete, as there is no deleted_at field in the attachment schema. Only customer (comment authors) or administrator may call this action. Physical file should also be made inaccessible at object store according to external rules.","path":"/aimall-backend/administrator/comments/{commentId}/attachments/{attachmentId}","method":"delete","description":"Permanently delete a file/media attachment for a comment by IDs. Removal is permanent and cannot be undone, and is permitted for comment authors (customers) or administrators with necessary rights. No soft-delete supported by the schema. Any file storage associated with file_uri must be handled according to external object store policies.","summary":"Delete (hard-delete) an attachment for a comment (aimall_backend_attachments).","parameters":[{"name":"commentId","description":"UUID PK of the parent comment for the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID PK of the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a paginated list of child comments (replies) for a given parent comment. This operation operates on the 'aimall_backend_comments' table in the Prisma schema. It enables hierarchical viewing of discussion threads by exposing all direct child comments beneath a parent comment. Provides support for moderation and user notification logic. Only returns comments where parent_id matches {commentId} and deleted_at is null (soft-deleted comments are not shown in query results).","path":"/aimall-backend/customer/comments/{commentId}/comments","method":"get","description":"This endpoint retrieves the direct replies (child comments) to a specific parent comment as identified by 'commentId' in the aimall_backend_comments schema. Each returned comment includes relevant atomic properties such as id, body, customer_id, created_at, updated_at, is_private, and parent_id. The system filters out any comments with non-null deleted_at, ensuring only active/visible comments are listed.\n\nAccess to replies may depend on thread privacy (is_private field) and the authorization role of the requesting user. Customers can see their own comments and public threads; administrators may review hidden/private comments for moderation purposes. The endpoint builds fully on the 'parent_id' foreign key to allow recursive thread expansion in community features.\n\nSorting and pagination are implementation-dependent (e.g., page/limit/query params) and expected to be supported for UX scalability. Errors such as comment not found, access denied, or invalid UUID are handled gracefully with informative messages. Behavior aligns with audit, compliance, and privacy logic described in the community requirements.","summary":"Get all child comments under a parent comment (thread expansion).","parameters":[{"name":"commentId","description":"The UUID of the parent comment whose child comments are to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated array of child comments, excluding soft-deleted threads.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieves a paginated list of child comments (replies) for a given parent comment. This operation operates on the 'aimall_backend_comments' table in the Prisma schema. It enables hierarchical viewing of discussion threads by exposing all direct child comments beneath a parent comment. Provides support for moderation and user notification logic. Only returns comments where parent_id matches {commentId} and deleted_at is null (soft-deleted comments are not shown in query results).","path":"/aimall-backend/administrator/comments/{commentId}/comments","method":"get","description":"This endpoint retrieves the direct replies (child comments) to a specific parent comment as identified by 'commentId' in the aimall_backend_comments schema. Each returned comment includes relevant atomic properties such as id, body, customer_id, created_at, updated_at, is_private, and parent_id. The system filters out any comments with non-null deleted_at, ensuring only active/visible comments are listed.\n\nAccess to replies may depend on thread privacy (is_private field) and the authorization role of the requesting user. Customers can see their own comments and public threads; administrators may review hidden/private comments for moderation purposes. The endpoint builds fully on the 'parent_id' foreign key to allow recursive thread expansion in community features.\n\nSorting and pagination are implementation-dependent (e.g., page/limit/query params) and expected to be supported for UX scalability. Errors such as comment not found, access denied, or invalid UUID are handled gracefully with informative messages. Behavior aligns with audit, compliance, and privacy logic described in the community requirements.","summary":"Get all child comments under a parent comment (thread expansion).","parameters":[{"name":"commentId","description":"The UUID of the parent comment whose child comments are to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated array of child comments, excluding soft-deleted threads.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Perform comprehensive filtering, search, sorting, and pagination over child comments for a specific parent comment. This operation is based on the 'aimall_backend_comments' table and allows searching within a comment thread for key phrases, by user, date range, or privacy status. The operation supports efficient deep-dive moderation or user-centric view filtering, referencing only fields defined in the schema such as parent_id, body, is_private, customer_id, created_at, and deleted_at (for soft-deletion filtering).","path":"/aimall-backend/customer/comments/{commentId}/comments","method":"patch","description":"Enables advanced search and paginated results for comments where 'parent_id' is the given commentId. The request supports filtering by author (customer_id), creation timestamp, privacy (is_private), and free-text in body. Optional input can include sorting preference and pagination controls (page number, page size).\n\nThis endpoint supports both user-facing and admin-facing scenarios. Customers receive search/filter functions scoped to their own accessible data; administrators can apply broad filters for content moderation or audit purposes. Soft-deleted comments (deleted_at not null) are always excluded from result sets to align with compliance mandates.\n\nError handling includes validation of UUID, inappropriate parameter values, or unauthorized access to private comments. The behavior supports integration into UI comment management and admin dashboards as described in the system requirements.","summary":"Advanced search and filter for child comments under a given parent comment.","parameters":[{"name":"commentId","description":"The UUID of the parent comment whose child comments are to be searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter criteria for finding child comments (author, privacy, date, keyword, pagination).","typeName":"IAimallBackendComment.IRequest"},"responseBody":{"description":"Filtered, paginated list of child comments matching the search criteria.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Perform comprehensive filtering, search, sorting, and pagination over child comments for a specific parent comment. This operation is based on the 'aimall_backend_comments' table and allows searching within a comment thread for key phrases, by user, date range, or privacy status. The operation supports efficient deep-dive moderation or user-centric view filtering, referencing only fields defined in the schema such as parent_id, body, is_private, customer_id, created_at, and deleted_at (for soft-deletion filtering).","path":"/aimall-backend/administrator/comments/{commentId}/comments","method":"patch","description":"Enables advanced search and paginated results for comments where 'parent_id' is the given commentId. The request supports filtering by author (customer_id), creation timestamp, privacy (is_private), and free-text in body. Optional input can include sorting preference and pagination controls (page number, page size).\n\nThis endpoint supports both user-facing and admin-facing scenarios. Customers receive search/filter functions scoped to their own accessible data; administrators can apply broad filters for content moderation or audit purposes. Soft-deleted comments (deleted_at not null) are always excluded from result sets to align with compliance mandates.\n\nError handling includes validation of UUID, inappropriate parameter values, or unauthorized access to private comments. The behavior supports integration into UI comment management and admin dashboards as described in the system requirements.","summary":"Advanced search and filter for child comments under a given parent comment.","parameters":[{"name":"commentId","description":"The UUID of the parent comment whose child comments are to be searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter criteria for finding child comments (author, privacy, date, keyword, pagination).","typeName":"IAimallBackendComment.IRequest"},"responseBody":{"description":"Filtered, paginated list of child comments matching the search criteria.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Fetch a specific child comment (reply) by its unique identifier under the specified parent comment. This read operation leverages the 'aimall_backend_comments' table, enforcing hierarchy by requiring both parent and child comment IDs for lookup. The operation only retrieves active (not soft-deleted) comments and ensures parentage relationship, referencing parent_id and id fields for proper integrity. Used primarily for displaying a specific thread node for user review or moderation.","path":"/aimall-backend/customer/comments/{commentId}/comments/{childCommentId}","method":"get","description":"Retrieves a single child comment under a given parent comment. The lookup first verifies the existence of the parent comment and then finds the child comment whose id matches the provided childCommentId and whose parent_id matches commentId. Returned fields include id, parent_id, post_id, review_id, customer_id, body, is_private, created_at, updated_at. Soft-deleted comments (deleted_at not null) are excluded from result.\n\nAccess control ensures only the author (customer), relevant participants, or administrators can see private or restricted comments. This endpoint aligns with business logic requiring strict parent-child thread integrity for all comment retrievals. Error handling includes not found (if either comment does not exist or does not match hierarchy), unauthorized, or soft-deleted return.","summary":"Get a single specific reply under a parent comment (thread node lookup).","parameters":[{"name":"commentId","description":"The UUID of the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"childCommentId","description":"The UUID of the child comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified child comment, or error if not found/accessible.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Fetch a specific child comment (reply) by its unique identifier under the specified parent comment. This read operation leverages the 'aimall_backend_comments' table, enforcing hierarchy by requiring both parent and child comment IDs for lookup. The operation only retrieves active (not soft-deleted) comments and ensures parentage relationship, referencing parent_id and id fields for proper integrity. Used primarily for displaying a specific thread node for user review or moderation.","path":"/aimall-backend/administrator/comments/{commentId}/comments/{childCommentId}","method":"get","description":"Retrieves a single child comment under a given parent comment. The lookup first verifies the existence of the parent comment and then finds the child comment whose id matches the provided childCommentId and whose parent_id matches commentId. Returned fields include id, parent_id, post_id, review_id, customer_id, body, is_private, created_at, updated_at. Soft-deleted comments (deleted_at not null) are excluded from result.\n\nAccess control ensures only the author (customer), relevant participants, or administrators can see private or restricted comments. This endpoint aligns with business logic requiring strict parent-child thread integrity for all comment retrievals. Error handling includes not found (if either comment does not exist or does not match hierarchy), unauthorized, or soft-deleted return.","summary":"Get a single specific reply under a parent comment (thread node lookup).","parameters":[{"name":"commentId","description":"The UUID of the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"childCommentId","description":"The UUID of the child comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified child comment, or error if not found/accessible.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new child comment (i.e., reply) under a specific parent comment thread. This operation operates on the 'aimall_backend_comments' table, establishing proper parentage by setting parent_id to the specified commentId. It requires atomic insertion of all required comment data: author, body, privacy status, and reference integrity for threading. Compliance with community requirements includes initial setting of is_private, audit timestamps, and linkage to customer (author).","path":"/aimall-backend/customer/comments/{commentId}/comments","method":"post","description":"Creates a new comment record as a direct reply to the comment identified by commentId. Input includes body, is_private (privacy control), and implicit authoring based on authentication. The resulting comment record has parent_id set to commentId and populates all standard comment fields as defined in the aimall_backend_comments schema.\n\nSoft deletion is not applied on creation. The system ensures correct thread hierarchy for community UX, and only authenticated users may create replies. Error scenarios (parent not found, thread closed) are handled per business rules. Created_at and updated_at are set to current time. On success, returns the created comment object including ID and relevant metadata.","summary":"Create a new reply (child comment) under a parent comment (nested thread).","parameters":[{"name":"commentId","description":"The UUID of the parent comment to which the reply will be attached.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details of the new reply (body, privacy, optional display info).","typeName":"IAimallBackendComment.ICreate"},"responseBody":{"description":"The created child comment, with its parent_id set to the specified parent comment.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer"},{"specification":"Update an existing child comment (reply) by its unique identifier under a given parent comment, supporting edit workflows and moderation as described in the requirements. The operation is performed on the 'aimall_backend_comments' table and mandates strict parent/child thread integrity for edits. Updates are restricted to atomic fields: body, is_private (privacy), and possibly optional display data, with updated_at timestamp. Does not allow reassignment to a new parent or soft/hard deletion via this endpoint.","path":"/aimall-backend/customer/comments/{commentId}/comments/{childCommentId}","method":"put","description":"Allows the author or a privileged moderator (admin) to edit the body or privacy status of a reply (child comment) identified by childCommentId under the specified parent comment. Edits update only atomic (non-relational) comment fields; parent_id and thread integrity cannot be changed here. Only active, non-deleted comments can be edited. The system updates updated_at for each modification.\n\nThis operation aligns with UX needs for comment editing and transparency, and supports audit-compliance by tracking changes to content. Unauthorized edit attempts or edits to soft-deleted comments return an error. The endpoint does not support creating, deleting, or reparenting comments.","summary":"Edit a reply (child comment) under a parent comment (atomic field update).","parameters":[{"name":"commentId","description":"UUID of the parent comment (thread being replied to).","schema":{"type":"string","format":"uuid"}},{"name":"childCommentId","description":"UUID of the child comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the reply (comment body, privacy, etc).","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"The updated child comment, reflecting the modified fields.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Update an existing child comment (reply) by its unique identifier under a given parent comment, supporting edit workflows and moderation as described in the requirements. The operation is performed on the 'aimall_backend_comments' table and mandates strict parent/child thread integrity for edits. Updates are restricted to atomic fields: body, is_private (privacy), and possibly optional display data, with updated_at timestamp. Does not allow reassignment to a new parent or soft/hard deletion via this endpoint.","path":"/aimall-backend/administrator/comments/{commentId}/comments/{childCommentId}","method":"put","description":"Allows the author or a privileged moderator (admin) to edit the body or privacy status of a reply (child comment) identified by childCommentId under the specified parent comment. Edits update only atomic (non-relational) comment fields; parent_id and thread integrity cannot be changed here. Only active, non-deleted comments can be edited. The system updates updated_at for each modification.\n\nThis operation aligns with UX needs for comment editing and transparency, and supports audit-compliance by tracking changes to content. Unauthorized edit attempts or edits to soft-deleted comments return an error. The endpoint does not support creating, deleting, or reparenting comments.","summary":"Edit a reply (child comment) under a parent comment (atomic field update).","parameters":[{"name":"commentId","description":"UUID of the parent comment (thread being replied to).","schema":{"type":"string","format":"uuid"}},{"name":"childCommentId","description":"UUID of the child comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the reply (comment body, privacy, etc).","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"The updated child comment, reflecting the modified fields.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes a specific child comment (reply) by its identifier and parent relationship. Enforces soft deletion logic as per the 'aimall_backend_comments' Prisma schema, marking deleted_at with the current timestamp rather than hard-deleting the record. Only the comment author or an administrator may perform this operation. Action is strictly restricted to comments whose parent_id matches the specified parent and that are not already soft-deleted.","path":"/aimall-backend/customer/comments/{commentId}/comments/{childCommentId}","method":"delete","description":"Performs soft deletion of a reply under a parent comment thread, following audit and compliance requirements. The system sets deleted_at for the specified childCommentId (only if its parent_id matches the specified parent commentId), rather than removing the row. Access control ensures only the author or a platform administrator can delete. Soft-deleted comments are hidden in regular query results but persist for audit trace and restoration windows.\n\nError handling includes invalid IDs, non-existent parent/child, or attempts to delete already-deleted comments. No comment body or data is lost, aligning with policy for GDPR compliance and community governance.","summary":"Soft-delete a reply (child comment) under a thread (set deleted_at).","parameters":[{"name":"commentId","description":"UUID of the parent comment thread.","schema":{"type":"string","format":"uuid"}},{"name":"childCommentId","description":"UUID of the child comment to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes a specific child comment (reply) by its identifier and parent relationship. Enforces soft deletion logic as per the 'aimall_backend_comments' Prisma schema, marking deleted_at with the current timestamp rather than hard-deleting the record. Only the comment author or an administrator may perform this operation. Action is strictly restricted to comments whose parent_id matches the specified parent and that are not already soft-deleted.","path":"/aimall-backend/administrator/comments/{commentId}/comments/{childCommentId}","method":"delete","description":"Performs soft deletion of a reply under a parent comment thread, following audit and compliance requirements. The system sets deleted_at for the specified childCommentId (only if its parent_id matches the specified parent commentId), rather than removing the row. Access control ensures only the author or a platform administrator can delete. Soft-deleted comments are hidden in regular query results but persist for audit trace and restoration windows.\n\nError handling includes invalid IDs, non-existent parent/child, or attempts to delete already-deleted comments. No comment body or data is lost, aligning with policy for GDPR compliance and community governance.","summary":"Soft-delete a reply (child comment) under a thread (set deleted_at).","parameters":[{"name":"commentId","description":"UUID of the parent comment thread.","schema":{"type":"string","format":"uuid"}},{"name":"childCommentId","description":"UUID of the child comment to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Fetch a paginated list of product reviews for display in product pages, seller analytics, or moderation workflows. This operation is performed on the 'aimall_backend_reviews' table. It only retrieves active (non-soft-deleted) reviews and supports query params for filtering by product, rating, author, or date range. Soft-deleted reviews (deleted_at not null) are omitted. The feature is essential for both customer UX and seller/admin dashboards.","path":"/aimall-backend/reviews","method":"get","description":"Retrieves a paginated, sorted list of active reviews from the aimall_backend_reviews table. Each review includes id, product_id, customer_id, title, body, rating, created_at, updated_at. Consumers may limit output via product, author, or rating criteria through query parameters (not shown in this get spec, but standard in REST). Soft-deleted reviews are hidden in normal queries per compliance rules.\n\nRead access is public but may restrict certain private details based on user role and data sensitivity (e.g., some review info is limited to admins). The operation supports core product UX (e.g. review display) and analytic systems. Proper error and validation handling provided for edge case queries.","summary":"List all active product reviews for browsing, analytics, or moderation.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of non-deleted product reviews for standard display/discovery.","typeName":"IPageIAimallBackendReview.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Performs advanced search, filtering, and pagination over all reviews, leveraging rich query semantics for analytic or admin-moderator use-cases. Works directly on the 'aimall_backend_reviews' table, filtering by properties such as product_id, customer_id, rating, date, keyword in title or body. Implements business rules for access (admins/all, customer own only, etc). Soft-deleted reviews (deleted_at not null) are excluded from results but retrievable for audit by properly authorized agents.","path":"/aimall-backend/customer/reviews","method":"patch","description":"Allows searching for reviews using complex criteria such as reviewer identity, product, rating range, creation or update date ranges, and full-text in title/body, via a request body aligned with IAimallBackendReview.IRequest. The returned list is paginated and sorted per request. Access may be role-dependent: customers are scoped to their own reviews; sellers/admins have wider access as per RBAC. All soft-deleted rows (i.e., deleted_at not null) are excluded from the normal result set.\n\nDesigned for moderation panels, seller dashboards, and personalized customer review view. Behavior closely follows Prisma schema (atomic only, no denormalized aggregates).","summary":"Advanced review search/filter for moderation, analytics, or user dashboard.","parameters":[],"requestBody":{"description":"Search and pagination filter criteria for reviews.","typeName":"IAimallBackendReview.IRequest"},"responseBody":{"description":"Filtered, paginated result set for reviews (summary view).","typeName":"IPageIAimallBackendReview.ISummary"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Performs advanced search, filtering, and pagination over all reviews, leveraging rich query semantics for analytic or admin-moderator use-cases. Works directly on the 'aimall_backend_reviews' table, filtering by properties such as product_id, customer_id, rating, date, keyword in title or body. Implements business rules for access (admins/all, customer own only, etc). Soft-deleted reviews (deleted_at not null) are excluded from results but retrievable for audit by properly authorized agents.","path":"/aimall-backend/administrator/reviews","method":"patch","description":"Allows searching for reviews using complex criteria such as reviewer identity, product, rating range, creation or update date ranges, and full-text in title/body, via a request body aligned with IAimallBackendReview.IRequest. The returned list is paginated and sorted per request. Access may be role-dependent: customers are scoped to their own reviews; sellers/admins have wider access as per RBAC. All soft-deleted rows (i.e., deleted_at not null) are excluded from the normal result set.\n\nDesigned for moderation panels, seller dashboards, and personalized customer review view. Behavior closely follows Prisma schema (atomic only, no denormalized aggregates).","summary":"Advanced review search/filter for moderation, analytics, or user dashboard.","parameters":[],"requestBody":{"description":"Search and pagination filter criteria for reviews.","typeName":"IAimallBackendReview.IRequest"},"responseBody":{"description":"Filtered, paginated result set for reviews (summary view).","typeName":"IPageIAimallBackendReview.ISummary"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves a single active review entity by its unique identifier (UUID). The lookup is direct by id field on the 'aimall_backend_reviews' table. Returns all atomic fields as defined in the schema, including author, product, review content, star rating, creation/update timestamps, and deletion status. Does not permit access to soft-deleted reviews unless implemented as an admin/audit override. Used in product review detail page, author dashboard, and admin moderation workflows.","path":"/aimall-backend/customer/reviews/{reviewId}","method":"get","description":"Fetches a single non-soft-deleted review by its reviewId. Returns all essential fields from the aimall_backend_reviews schema: id, product_id, customer_id, title, body, rating, created_at, updated_at, and deleted_at (ensuring null for active records). Reviews with deleted_at set (soft-deleted) are not shown to standard users; administrators may have augmented endpoints for deleted retrieval.\n\nAccess control applies based on user type: customers can see their own reviews, sellers the reviews for their products, admins any review for moderation. Reference integrity and audit compliance are critical to prevent orphaned lookups, and errors for not found/unauthorized/invalid id are handled as per system requirements.","summary":"Fetch a single active product review by unique reviewId.","parameters":[{"name":"reviewId","description":"The UUID of the review to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Review details for the specified reviewId, or error if not found/accessible.","typeName":"IAimallBackendReview"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieves a single active review entity by its unique identifier (UUID). The lookup is direct by id field on the 'aimall_backend_reviews' table. Returns all atomic fields as defined in the schema, including author, product, review content, star rating, creation/update timestamps, and deletion status. Does not permit access to soft-deleted reviews unless implemented as an admin/audit override. Used in product review detail page, author dashboard, and admin moderation workflows.","path":"/aimall-backend/administrator/reviews/{reviewId}","method":"get","description":"Fetches a single non-soft-deleted review by its reviewId. Returns all essential fields from the aimall_backend_reviews schema: id, product_id, customer_id, title, body, rating, created_at, updated_at, and deleted_at (ensuring null for active records). Reviews with deleted_at set (soft-deleted) are not shown to standard users; administrators may have augmented endpoints for deleted retrieval.\n\nAccess control applies based on user type: customers can see their own reviews, sellers the reviews for their products, admins any review for moderation. Reference integrity and audit compliance are critical to prevent orphaned lookups, and errors for not found/unauthorized/invalid id are handled as per system requirements.","summary":"Fetch a single active product review by unique reviewId.","parameters":[{"name":"reviewId","description":"The UUID of the review to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Review details for the specified reviewId, or error if not found/accessible.","typeName":"IAimallBackendReview"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new product review in the review system, following all atomic/field-level rules as dictated by the 'aimall_backend_reviews' table. Operation is used when a customer posts a new review for a product they have purchased. The request body supplies product_id, title, body, rating, and associates the review with the authenticated customer via context. The system sets created_at and updated_at, and returns the full review record on completion. Business logic may enforce constraints: one review per customer/product, rating value bounds, and purchase verification (handled at application layer).","path":"/aimall-backend/customer/reviews","method":"post","description":"Registers a new review entry as defined in the aimall_backend_reviews schema. The creation logic enforces uniqueness on (customer_id, product_id) to block duplicate reviews for the same order/event, and respects rating requirements (integer, 1-5). The required input includes product_id, title, body, rating; the authoring customer is resolved from authentication.\n\nThe created review will be associated with a product and the logged-in customer. Admin-side, the record can be updated, soft-deleted, or commented on by others where allowed by policy. Timestamps created_at, updated_at filled now. Validation ensures all required schema fields are atomic and present.","summary":"Submit a new product review (customer feedback, rating, UX).","parameters":[],"requestBody":{"description":"Required data to create a product review (product_id, title, body, rating).","typeName":"IAimallBackendReview.ICreate"},"responseBody":{"description":"Created review object with all schema fields as defined.","typeName":"IAimallBackendReview"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer"},{"specification":"Updates mutable fields of an existing product review by id. The edit applies to atomic properties (title, body, rating) but does NOT permit reassigning product_id/customer_id or performing any soft/hard deletion operation. The operation is performed on the 'aimall_backend_reviews' table. The endpoint implements UX-mandated edit workflows (e.g., the customer can revise their review text or rating, or an admin can moderate/adjust content). Audit timestamp updated_at is set automatically; any unauthorized or illegal field changes are blocked.","path":"/aimall-backend/customer/reviews/{reviewId}","method":"put","description":"Allows an authenticated customer (author) or admin moderator to edit a submitted product review, modifying attributes such as title, body, and rating. The product_id and customer_id cannot be changed after creation, preserving referential integrity. All changes are tracked by an updated_at timestamp update. Soft-deleted reviews (deleted_at not null) cannot be edited unless access is specifically extended for audit or special recovery.\n\nThis update follows the ux/business requirements from the schema. Any violation (duplicate, unauthorized, bad input) triggers clear error messages and leaves the review unchanged.","summary":"Update atomic fields (title/body/rating) on an existing product review.","parameters":[{"name":"reviewId","description":"UUID of the review to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Review update model (title, body, rating only).","typeName":"IAimallBackendReview.IUpdate"},"responseBody":{"description":"Updated review entity with all modified fields per schema.","typeName":"IAimallBackendReview"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates mutable fields of an existing product review by id. The edit applies to atomic properties (title, body, rating) but does NOT permit reassigning product_id/customer_id or performing any soft/hard deletion operation. The operation is performed on the 'aimall_backend_reviews' table. The endpoint implements UX-mandated edit workflows (e.g., the customer can revise their review text or rating, or an admin can moderate/adjust content). Audit timestamp updated_at is set automatically; any unauthorized or illegal field changes are blocked.","path":"/aimall-backend/administrator/reviews/{reviewId}","method":"put","description":"Allows an authenticated customer (author) or admin moderator to edit a submitted product review, modifying attributes such as title, body, and rating. The product_id and customer_id cannot be changed after creation, preserving referential integrity. All changes are tracked by an updated_at timestamp update. Soft-deleted reviews (deleted_at not null) cannot be edited unless access is specifically extended for audit or special recovery.\n\nThis update follows the ux/business requirements from the schema. Any violation (duplicate, unauthorized, bad input) triggers clear error messages and leaves the review unchanged.","summary":"Update atomic fields (title/body/rating) on an existing product review.","parameters":[{"name":"reviewId","description":"UUID of the review to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Review update model (title, body, rating only).","typeName":"IAimallBackendReview.IUpdate"},"responseBody":{"description":"Updated review entity with all modified fields per schema.","typeName":"IAimallBackendReview"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Soft-deletes an active product review by its reviewId, setting the deleted_at field to a timestamp instead of removing the row completely (in accordance with audit/compliance/GDPR guidelines in the requirements). Only the review's author or a platform administrator can invoke this operation. The operation is based on the 'aimall_backend_reviews' table and ensures that the reviewId matches an active (non-deleted) record for valid operation.","path":"/aimall-backend/customer/reviews/{reviewId}","method":"delete","description":"This endpoint marks a product review as deleted by updating the deleted_at column with the current timestamp for the record identified by reviewId. Soft deletion preserves the data for audit and compliance while hiding it from normal user-facing queries. Only the customer who authored the review or an authorized administrator can invoke this deletion; unauthorized attempts are rejected and logged for security compliance.\n\nThe operation implements full business logic for soft delete: all result sets exclude rows where deleted_at is not null, and restores are only possible via audit/admin special flows. Hard/physical deletion is never performed via this API endpoint to ensure legal and operational defensibility.","summary":"Soft-delete a product review by reviewId (set deleted_at timestamp).","parameters":[{"name":"reviewId","description":"UUID for the review to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Soft-deletes an active product review by its reviewId, setting the deleted_at field to a timestamp instead of removing the row completely (in accordance with audit/compliance/GDPR guidelines in the requirements). Only the review's author or a platform administrator can invoke this operation. The operation is based on the 'aimall_backend_reviews' table and ensures that the reviewId matches an active (non-deleted) record for valid operation.","path":"/aimall-backend/administrator/reviews/{reviewId}","method":"delete","description":"This endpoint marks a product review as deleted by updating the deleted_at column with the current timestamp for the record identified by reviewId. Soft deletion preserves the data for audit and compliance while hiding it from normal user-facing queries. Only the customer who authored the review or an authorized administrator can invoke this deletion; unauthorized attempts are rejected and logged for security compliance.\n\nThe operation implements full business logic for soft delete: all result sets exclude rows where deleted_at is not null, and restores are only possible via audit/admin special flows. Hard/physical deletion is never performed via this API endpoint to ensure legal and operational defensibility.","summary":"Soft-delete a product review by reviewId (set deleted_at timestamp).","parameters":[{"name":"reviewId","description":"UUID for the review to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves the list of community comments associated with a specific product review. This API operates on the aimall_backend_comments table with filtering on review_id, enabling clients to fetch replies, feedback, and threaded discussions on product review records. All returned comment data is atomic and normalized, aligned with the Comments model, which references the parent aimall_backend_reviews entry and its own comment thread structure. The operation supports use cases where a customer or administrator fetches all comments (public or private) for a given review post for display or moderation purposes.","path":"/aimall-backend/customer/reviews/{reviewId}/comments","method":"get","description":"Fetch all comments attached to a specific product review, as defined in the aimall_backend_comments Prisma schema. Each comment is linked to the selected review (review_id) and contains per-comment body, privacy, threading (via parent_id), and timestamps. \n\nOnly comments associated with the indicated reviewId will be included, supporting the community bulletin and moderation features. Both public and private comments can be returned, with client-side logic or role-based filtering applied as appropriate.\n\nSecurity note: Customers see only comments intended for their view; moderators and admins may access all comment variants for full oversight.\n\nIf the reviewId does not exist, expect an empty array or a 404 error if the underlying review entity is not found.","summary":"Retrieve all comments linked to a specific product review (aimall_backend_comments).","parameters":[{"name":"reviewId","description":"Unique identifier of the parent product review to fetch comments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all comments linked to the specified review, compliant with summary structure suitable for listing.","typeName":"IPageIAimallBackendComment.ISummary"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieves the list of community comments associated with a specific product review. This API operates on the aimall_backend_comments table with filtering on review_id, enabling clients to fetch replies, feedback, and threaded discussions on product review records. All returned comment data is atomic and normalized, aligned with the Comments model, which references the parent aimall_backend_reviews entry and its own comment thread structure. The operation supports use cases where a customer or administrator fetches all comments (public or private) for a given review post for display or moderation purposes.","path":"/aimall-backend/seller/reviews/{reviewId}/comments","method":"get","description":"Fetch all comments attached to a specific product review, as defined in the aimall_backend_comments Prisma schema. Each comment is linked to the selected review (review_id) and contains per-comment body, privacy, threading (via parent_id), and timestamps. \n\nOnly comments associated with the indicated reviewId will be included, supporting the community bulletin and moderation features. Both public and private comments can be returned, with client-side logic or role-based filtering applied as appropriate.\n\nSecurity note: Customers see only comments intended for their view; moderators and admins may access all comment variants for full oversight.\n\nIf the reviewId does not exist, expect an empty array or a 404 error if the underlying review entity is not found.","summary":"Retrieve all comments linked to a specific product review (aimall_backend_comments).","parameters":[{"name":"reviewId","description":"Unique identifier of the parent product review to fetch comments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all comments linked to the specified review, compliant with summary structure suitable for listing.","typeName":"IPageIAimallBackendComment.ISummary"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"Retrieves the list of community comments associated with a specific product review. This API operates on the aimall_backend_comments table with filtering on review_id, enabling clients to fetch replies, feedback, and threaded discussions on product review records. All returned comment data is atomic and normalized, aligned with the Comments model, which references the parent aimall_backend_reviews entry and its own comment thread structure. The operation supports use cases where a customer or administrator fetches all comments (public or private) for a given review post for display or moderation purposes.","path":"/aimall-backend/administrator/reviews/{reviewId}/comments","method":"get","description":"Fetch all comments attached to a specific product review, as defined in the aimall_backend_comments Prisma schema. Each comment is linked to the selected review (review_id) and contains per-comment body, privacy, threading (via parent_id), and timestamps. \n\nOnly comments associated with the indicated reviewId will be included, supporting the community bulletin and moderation features. Both public and private comments can be returned, with client-side logic or role-based filtering applied as appropriate.\n\nSecurity note: Customers see only comments intended for their view; moderators and admins may access all comment variants for full oversight.\n\nIf the reviewId does not exist, expect an empty array or a 404 error if the underlying review entity is not found.","summary":"Retrieve all comments linked to a specific product review (aimall_backend_comments).","parameters":[{"name":"reviewId","description":"Unique identifier of the parent product review to fetch comments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all comments linked to the specified review, compliant with summary structure suitable for listing.","typeName":"IPageIAimallBackendComment.ISummary"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Searches and paginates the list of comments linked to a specific product review according to filter and sorting criteria. This API is built on the aimall_backend_comments table with support for PATCH method to handle advanced search capabilities such as keyword, author, privacy filter, and pagination. Useful for admin, moderator, or UI clients rendering large comment sets.","path":"/aimall-backend/customer/reviews/{reviewId}/comments","method":"patch","description":"Offers advanced retrieval of comments attached to a given product review, leveraging the aimall_backend_comments model and supporting filtrations on comment body, author (customer_id), is_private, creation/modification timestamps, and parent_id for threads.\n\nSupports pagination, keyword search, and role-dependent privacy filtering. Customers are restricted to comments they can view; admins and moderators receive the full comment set. Sorting by created_at or updated_at is available.\n\nRelated API: The GET operation for the same path provides all comments with no search or filter. PATCH is intended for more complex queries.\n\nErrors include: reviewId not found or search criteria invalid.","summary":"Search and paginate comments for a specific review with filtering and sorting.","parameters":[{"name":"reviewId","description":"Unique identifier of the product review for comment search context.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for filtered comment retrieval.","typeName":"IAimallBackendComment.IRequest"},"responseBody":{"description":"Paginated result set of comments matching the search criteria and visibility for the review.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Searches and paginates the list of comments linked to a specific product review according to filter and sorting criteria. This API is built on the aimall_backend_comments table with support for PATCH method to handle advanced search capabilities such as keyword, author, privacy filter, and pagination. Useful for admin, moderator, or UI clients rendering large comment sets.","path":"/aimall-backend/seller/reviews/{reviewId}/comments","method":"patch","description":"Offers advanced retrieval of comments attached to a given product review, leveraging the aimall_backend_comments model and supporting filtrations on comment body, author (customer_id), is_private, creation/modification timestamps, and parent_id for threads.\n\nSupports pagination, keyword search, and role-dependent privacy filtering. Customers are restricted to comments they can view; admins and moderators receive the full comment set. Sorting by created_at or updated_at is available.\n\nRelated API: The GET operation for the same path provides all comments with no search or filter. PATCH is intended for more complex queries.\n\nErrors include: reviewId not found or search criteria invalid.","summary":"Search and paginate comments for a specific review with filtering and sorting.","parameters":[{"name":"reviewId","description":"Unique identifier of the product review for comment search context.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for filtered comment retrieval.","typeName":"IAimallBackendComment.IRequest"},"responseBody":{"description":"Paginated result set of comments matching the search criteria and visibility for the review.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"Searches and paginates the list of comments linked to a specific product review according to filter and sorting criteria. This API is built on the aimall_backend_comments table with support for PATCH method to handle advanced search capabilities such as keyword, author, privacy filter, and pagination. Useful for admin, moderator, or UI clients rendering large comment sets.","path":"/aimall-backend/administrator/reviews/{reviewId}/comments","method":"patch","description":"Offers advanced retrieval of comments attached to a given product review, leveraging the aimall_backend_comments model and supporting filtrations on comment body, author (customer_id), is_private, creation/modification timestamps, and parent_id for threads.\n\nSupports pagination, keyword search, and role-dependent privacy filtering. Customers are restricted to comments they can view; admins and moderators receive the full comment set. Sorting by created_at or updated_at is available.\n\nRelated API: The GET operation for the same path provides all comments with no search or filter. PATCH is intended for more complex queries.\n\nErrors include: reviewId not found or search criteria invalid.","summary":"Search and paginate comments for a specific review with filtering and sorting.","parameters":[{"name":"reviewId","description":"Unique identifier of the product review for comment search context.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for filtered comment retrieval.","typeName":"IAimallBackendComment.IRequest"},"responseBody":{"description":"Paginated result set of comments matching the search criteria and visibility for the review.","typeName":"IPageIAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves a single comment associated with a product review by commentId and reviewId. This GET endpoint maps to the aimall_backend_comments table using both the review and comment unique UUID. Returns the full normalized comment entity record for detailed viewing or moderation.","path":"/aimall-backend/customer/reviews/{reviewId}/comments/{commentId}","method":"get","description":"Fetches a specific comment from the aimall_backend_comments entity by UUID, linked to a particular review (reviewId). All normalized fields, including body, privacy flag, thread relationships, and timestamps, are returned in detail.\n\nThis is used for detail views, moderation, or context display workflows, allowing users to retrieve a single, uniquely identified comment.\n\nAccess control ensures customers cannot read private comments unless permitted (their own, for instance). Moderators/admins can access all comments.","summary":"Retrieve a specific comment by commentId for a given product review.","parameters":[{"name":"reviewId","description":"Review UUID the comment belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the selected comment.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieves a single comment associated with a product review by commentId and reviewId. This GET endpoint maps to the aimall_backend_comments table using both the review and comment unique UUID. Returns the full normalized comment entity record for detailed viewing or moderation.","path":"/aimall-backend/seller/reviews/{reviewId}/comments/{commentId}","method":"get","description":"Fetches a specific comment from the aimall_backend_comments entity by UUID, linked to a particular review (reviewId). All normalized fields, including body, privacy flag, thread relationships, and timestamps, are returned in detail.\n\nThis is used for detail views, moderation, or context display workflows, allowing users to retrieve a single, uniquely identified comment.\n\nAccess control ensures customers cannot read private comments unless permitted (their own, for instance). Moderators/admins can access all comments.","summary":"Retrieve a specific comment by commentId for a given product review.","parameters":[{"name":"reviewId","description":"Review UUID the comment belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the selected comment.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieves a single comment associated with a product review by commentId and reviewId. This GET endpoint maps to the aimall_backend_comments table using both the review and comment unique UUID. Returns the full normalized comment entity record for detailed viewing or moderation.","path":"/aimall-backend/administrator/reviews/{reviewId}/comments/{commentId}","method":"get","description":"Fetches a specific comment from the aimall_backend_comments entity by UUID, linked to a particular review (reviewId). All normalized fields, including body, privacy flag, thread relationships, and timestamps, are returned in detail.\n\nThis is used for detail views, moderation, or context display workflows, allowing users to retrieve a single, uniquely identified comment.\n\nAccess control ensures customers cannot read private comments unless permitted (their own, for instance). Moderators/admins can access all comments.","summary":"Retrieve a specific comment by commentId for a given product review.","parameters":[{"name":"reviewId","description":"Review UUID the comment belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the selected comment.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new comment associated with a specific product review. Directly inserts a normalized row in the aimall_backend_comments table linked to review_id. This endpoint supports core community features such as product feedback, review discussions, and customer-seller communication. Comment threading and privacy flag are supported via the model.","path":"/aimall-backend/customer/reviews/{reviewId}/comments","method":"post","description":"Creates and assigns a new comment to the specified product review, using the aimall_backend_comments model for atomic storage of comment details (body, privacy flag, parent threading if a reply, timestamps, author/customer).\n\nOn success, the response contains the newly created comment in its complete form. Threading, privacy, and authorization checks (such as restricting posting to logged-in users only) apply.\n\nValidation failures (missing required fields, reviewer not found, or parent comment not in thread) result in error responses with details.","summary":"Create a new comment on a product review, supporting threads and privacy.","parameters":[{"name":"reviewId","description":"Product review UUID to which the comment is linked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Required comment information for creation, including body, author, privacy, and optional parent/threading info.","typeName":"IAimallBackendComment.ICreate"},"responseBody":{"description":"Details of the created comment attached to the review.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Creates a new comment associated with a specific product review. Directly inserts a normalized row in the aimall_backend_comments table linked to review_id. This endpoint supports core community features such as product feedback, review discussions, and customer-seller communication. Comment threading and privacy flag are supported via the model.","path":"/aimall-backend/seller/reviews/{reviewId}/comments","method":"post","description":"Creates and assigns a new comment to the specified product review, using the aimall_backend_comments model for atomic storage of comment details (body, privacy flag, parent threading if a reply, timestamps, author/customer).\n\nOn success, the response contains the newly created comment in its complete form. Threading, privacy, and authorization checks (such as restricting posting to logged-in users only) apply.\n\nValidation failures (missing required fields, reviewer not found, or parent comment not in thread) result in error responses with details.","summary":"Create a new comment on a product review, supporting threads and privacy.","parameters":[{"name":"reviewId","description":"Product review UUID to which the comment is linked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Required comment information for creation, including body, author, privacy, and optional parent/threading info.","typeName":"IAimallBackendComment.ICreate"},"responseBody":{"description":"Details of the created comment attached to the review.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new comment associated with a specific product review. Directly inserts a normalized row in the aimall_backend_comments table linked to review_id. This endpoint supports core community features such as product feedback, review discussions, and customer-seller communication. Comment threading and privacy flag are supported via the model.","path":"/aimall-backend/administrator/reviews/{reviewId}/comments","method":"post","description":"Creates and assigns a new comment to the specified product review, using the aimall_backend_comments model for atomic storage of comment details (body, privacy flag, parent threading if a reply, timestamps, author/customer).\n\nOn success, the response contains the newly created comment in its complete form. Threading, privacy, and authorization checks (such as restricting posting to logged-in users only) apply.\n\nValidation failures (missing required fields, reviewer not found, or parent comment not in thread) result in error responses with details.","summary":"Create a new comment on a product review, supporting threads and privacy.","parameters":[{"name":"reviewId","description":"Product review UUID to which the comment is linked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Required comment information for creation, including body, author, privacy, and optional parent/threading info.","typeName":"IAimallBackendComment.ICreate"},"responseBody":{"description":"Details of the created comment attached to the review.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing comment attached to a product review. Uses PUT semantics mapped to the aimall_backend_comments model by both reviewId and commentId, updating allowed fields such as body text, privacy flag, and timestamps. Enforces that only the comment's author or eligible moderators/admins can perform updates.","path":"/aimall-backend/customer/reviews/{reviewId}/comments/{commentId}","method":"put","description":"Updates a comment within the aimall_backend_comments entity, identified by review and comment UUIDs. Only mutable fields (body, privacy flag) can be updated; timestamps are refreshed. Author/ownership and moderator/admin permissions are enforced.\n\nThe operation ensures atomic record updates per the schema, supporting use cases like typo correction, content redaction, or privacy toggling. All activity is tracked for audit purposes.\n\nIf the comment does not exist or the caller is unauthorized, proper error codes are returned.","summary":"Update a comment for a review, restricted to authors and platform moderators/admins.","parameters":[{"name":"reviewId","description":"Review UUID associated with the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Comment UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the comment record; only mutable values in IAimallBackendComment.IUpdate.","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"Full details of the updated comment as stored.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates an existing comment attached to a product review. Uses PUT semantics mapped to the aimall_backend_comments model by both reviewId and commentId, updating allowed fields such as body text, privacy flag, and timestamps. Enforces that only the comment's author or eligible moderators/admins can perform updates.","path":"/aimall-backend/seller/reviews/{reviewId}/comments/{commentId}","method":"put","description":"Updates a comment within the aimall_backend_comments entity, identified by review and comment UUIDs. Only mutable fields (body, privacy flag) can be updated; timestamps are refreshed. Author/ownership and moderator/admin permissions are enforced.\n\nThe operation ensures atomic record updates per the schema, supporting use cases like typo correction, content redaction, or privacy toggling. All activity is tracked for audit purposes.\n\nIf the comment does not exist or the caller is unauthorized, proper error codes are returned.","summary":"Update a comment for a review, restricted to authors and platform moderators/admins.","parameters":[{"name":"reviewId","description":"Review UUID associated with the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Comment UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the comment record; only mutable values in IAimallBackendComment.IUpdate.","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"Full details of the updated comment as stored.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Updates an existing comment attached to a product review. Uses PUT semantics mapped to the aimall_backend_comments model by both reviewId and commentId, updating allowed fields such as body text, privacy flag, and timestamps. Enforces that only the comment's author or eligible moderators/admins can perform updates.","path":"/aimall-backend/administrator/reviews/{reviewId}/comments/{commentId}","method":"put","description":"Updates a comment within the aimall_backend_comments entity, identified by review and comment UUIDs. Only mutable fields (body, privacy flag) can be updated; timestamps are refreshed. Author/ownership and moderator/admin permissions are enforced.\n\nThe operation ensures atomic record updates per the schema, supporting use cases like typo correction, content redaction, or privacy toggling. All activity is tracked for audit purposes.\n\nIf the comment does not exist or the caller is unauthorized, proper error codes are returned.","summary":"Update a comment for a review, restricted to authors and platform moderators/admins.","parameters":[{"name":"reviewId","description":"Review UUID associated with the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Comment UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the comment record; only mutable values in IAimallBackendComment.IUpdate.","typeName":"IAimallBackendComment.IUpdate"},"responseBody":{"description":"Full details of the updated comment as stored.","typeName":"IAimallBackendComment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (soft or hard) a comment linked to a review. Operates on the aimall_backend_comments model by review and comment UUID. As the schema includes a deleted_at timestamp, deletion performs a soft delete (timestamped redaction) to support audit and recovery. Restricted to the comment's author, moderators, or administrators.","path":"/aimall-backend/customer/reviews/{reviewId}/comments/{commentId}","method":"delete","description":"Performs a soft delete on a comment associated with a product review by setting the deleted_at timestamp in aimall_backend_comments. The record is logically hidden from all normal listings, retaining full auditability per compliance rules.\n\nOnly allowed for the author, moderators, or admin roles. Deletion of parent comments may be restricted if there are active replies/comments for referential integrity.\n\nError handling for non-existent comment, already deleted, or permission denied conditions. Audit logs are updated whenever a comment is deleted.","summary":"Soft-delete a comment on a review (logical redaction/audit).","parameters":[{"name":"reviewId","description":"Review UUID the comment belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes (soft or hard) a comment linked to a review. Operates on the aimall_backend_comments model by review and comment UUID. As the schema includes a deleted_at timestamp, deletion performs a soft delete (timestamped redaction) to support audit and recovery. Restricted to the comment's author, moderators, or administrators.","path":"/aimall-backend/seller/reviews/{reviewId}/comments/{commentId}","method":"delete","description":"Performs a soft delete on a comment associated with a product review by setting the deleted_at timestamp in aimall_backend_comments. The record is logically hidden from all normal listings, retaining full auditability per compliance rules.\n\nOnly allowed for the author, moderators, or admin roles. Deletion of parent comments may be restricted if there are active replies/comments for referential integrity.\n\nError handling for non-existent comment, already deleted, or permission denied conditions. Audit logs are updated whenever a comment is deleted.","summary":"Soft-delete a comment on a review (logical redaction/audit).","parameters":[{"name":"reviewId","description":"Review UUID the comment belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes (soft or hard) a comment linked to a review. Operates on the aimall_backend_comments model by review and comment UUID. As the schema includes a deleted_at timestamp, deletion performs a soft delete (timestamped redaction) to support audit and recovery. Restricted to the comment's author, moderators, or administrators.","path":"/aimall-backend/administrator/reviews/{reviewId}/comments/{commentId}","method":"delete","description":"Performs a soft delete on a comment associated with a product review by setting the deleted_at timestamp in aimall_backend_comments. The record is logically hidden from all normal listings, retaining full auditability per compliance rules.\n\nOnly allowed for the author, moderators, or admin roles. Deletion of parent comments may be restricted if there are active replies/comments for referential integrity.\n\nError handling for non-existent comment, already deleted, or permission denied conditions. Audit logs are updated whenever a comment is deleted.","summary":"Soft-delete a comment on a review (logical redaction/audit).","parameters":[{"name":"reviewId","description":"Review UUID the comment belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves all file/media attachments linked to a specific product review. Maps to the aimall_backend_attachments table filtering on review_id. Used to list all images, videos, or documents accompanying a product review. Attachment metadata as per the schema includes file_uri, type, and size.","path":"/aimall-backend/customer/reviews/{reviewId}/attachments","method":"get","description":"Lists all attachments that are associated with a specific product review using the aimall_backend_attachments schema. Each returned item includes normalized details on file type, storage URI, and size.\n\nThis supports UGC moderation, review enrichment with media, and enables clients to show all user-uploaded content per review efficiently. Listings are tailored according to role/permissions, so customers only view permitted media, while admin/moderators can see all associated files.\n\nIf no attachments exist, an empty result is returned. ReviewId must exist.","summary":"List all file/media attachments for a product review (aimall_backend_attachments).","parameters":[{"name":"reviewId","description":"UUID reference for the reviewed product whose attachments should be fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Summary list of all attachments linked to the review.","typeName":"IPageIAimallBackendAttachment.ISummary"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieves all file/media attachments linked to a specific product review. Maps to the aimall_backend_attachments table filtering on review_id. Used to list all images, videos, or documents accompanying a product review. Attachment metadata as per the schema includes file_uri, type, and size.","path":"/aimall-backend/seller/reviews/{reviewId}/attachments","method":"get","description":"Lists all attachments that are associated with a specific product review using the aimall_backend_attachments schema. Each returned item includes normalized details on file type, storage URI, and size.\n\nThis supports UGC moderation, review enrichment with media, and enables clients to show all user-uploaded content per review efficiently. Listings are tailored according to role/permissions, so customers only view permitted media, while admin/moderators can see all associated files.\n\nIf no attachments exist, an empty result is returned. ReviewId must exist.","summary":"List all file/media attachments for a product review (aimall_backend_attachments).","parameters":[{"name":"reviewId","description":"UUID reference for the reviewed product whose attachments should be fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Summary list of all attachments linked to the review.","typeName":"IPageIAimallBackendAttachment.ISummary"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"Retrieves all file/media attachments linked to a specific product review. Maps to the aimall_backend_attachments table filtering on review_id. Used to list all images, videos, or documents accompanying a product review. Attachment metadata as per the schema includes file_uri, type, and size.","path":"/aimall-backend/administrator/reviews/{reviewId}/attachments","method":"get","description":"Lists all attachments that are associated with a specific product review using the aimall_backend_attachments schema. Each returned item includes normalized details on file type, storage URI, and size.\n\nThis supports UGC moderation, review enrichment with media, and enables clients to show all user-uploaded content per review efficiently. Listings are tailored according to role/permissions, so customers only view permitted media, while admin/moderators can see all associated files.\n\nIf no attachments exist, an empty result is returned. ReviewId must exist.","summary":"List all file/media attachments for a product review (aimall_backend_attachments).","parameters":[{"name":"reviewId","description":"UUID reference for the reviewed product whose attachments should be fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Summary list of all attachments linked to the review.","typeName":"IPageIAimallBackendAttachment.ISummary"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Searches and paginates the full list of attachments linked to a particular product review. PATCH variant for advanced filtering and pagination using the aimall_backend_attachments table with review_id as primary filter. Allows further UI filtering e.g. by type, period, or keyword in filename/URI.","path":"/aimall-backend/customer/reviews/{reviewId}/attachments","method":"patch","description":"Performs a filtered, paginated search for attachments uploaded to a product review. Fields and options on aimall_backend_attachments can be used for search: file_type (image/video/doc), size, created_at period, etc.\n\nAdvanced filtering assists customer UIs and admin tools in rapidly enumerating user-submitted content, enforcing business moderation, or handling content overload on popular reviews. Security: Only users authorized for the target review's media can access the listing.\n\nThis PATCH variant is for complex queries; GET is only for simple full listings.","summary":"Search and paginate review attachments with advanced filtering.","parameters":[{"name":"reviewId","description":"UUID identifier for review context, used for attachment search/filter.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter criteria and pagination parameters for review attachments.","typeName":"IAimallBackendAttachment.IRequest"},"responseBody":{"description":"Paginated set of attachments matching the query for this review.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Searches and paginates the full list of attachments linked to a particular product review. PATCH variant for advanced filtering and pagination using the aimall_backend_attachments table with review_id as primary filter. Allows further UI filtering e.g. by type, period, or keyword in filename/URI.","path":"/aimall-backend/seller/reviews/{reviewId}/attachments","method":"patch","description":"Performs a filtered, paginated search for attachments uploaded to a product review. Fields and options on aimall_backend_attachments can be used for search: file_type (image/video/doc), size, created_at period, etc.\n\nAdvanced filtering assists customer UIs and admin tools in rapidly enumerating user-submitted content, enforcing business moderation, or handling content overload on popular reviews. Security: Only users authorized for the target review's media can access the listing.\n\nThis PATCH variant is for complex queries; GET is only for simple full listings.","summary":"Search and paginate review attachments with advanced filtering.","parameters":[{"name":"reviewId","description":"UUID identifier for review context, used for attachment search/filter.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter criteria and pagination parameters for review attachments.","typeName":"IAimallBackendAttachment.IRequest"},"responseBody":{"description":"Paginated set of attachments matching the query for this review.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"Searches and paginates the full list of attachments linked to a particular product review. PATCH variant for advanced filtering and pagination using the aimall_backend_attachments table with review_id as primary filter. Allows further UI filtering e.g. by type, period, or keyword in filename/URI.","path":"/aimall-backend/administrator/reviews/{reviewId}/attachments","method":"patch","description":"Performs a filtered, paginated search for attachments uploaded to a product review. Fields and options on aimall_backend_attachments can be used for search: file_type (image/video/doc), size, created_at period, etc.\n\nAdvanced filtering assists customer UIs and admin tools in rapidly enumerating user-submitted content, enforcing business moderation, or handling content overload on popular reviews. Security: Only users authorized for the target review's media can access the listing.\n\nThis PATCH variant is for complex queries; GET is only for simple full listings.","summary":"Search and paginate review attachments with advanced filtering.","parameters":[{"name":"reviewId","description":"UUID identifier for review context, used for attachment search/filter.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter criteria and pagination parameters for review attachments.","typeName":"IAimallBackendAttachment.IRequest"},"responseBody":{"description":"Paginated set of attachments matching the query for this review.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves a single attachment record by reviewId and attachmentId, allowing detail display or direct media download link generation. Directly maps to one entry in the aimall_backend_attachments table by composite key.","path":"/aimall-backend/customer/reviews/{reviewId}/attachments/{attachmentId}","method":"get","description":"Provides detailed metadata for a specific media/file attachment linked to a product review. Data is selected from aimall_backend_attachments using unique IDs to retrieve the proper file reference, type, and size fields for display or content moderation workflows.\n\nUsed for cases like serving a detail attachment modal, direct download, or admin audit. Assumes existence of the attachment for the given review; handles not-found errors as necessary.","summary":"Retrieve a specific file attachment for a product review by UUID.","parameters":[{"name":"reviewId","description":"UUID of the product review record.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Attachment record's UUID to fetch details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full attachment metadata for product review media.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieves a single attachment record by reviewId and attachmentId, allowing detail display or direct media download link generation. Directly maps to one entry in the aimall_backend_attachments table by composite key.","path":"/aimall-backend/seller/reviews/{reviewId}/attachments/{attachmentId}","method":"get","description":"Provides detailed metadata for a specific media/file attachment linked to a product review. Data is selected from aimall_backend_attachments using unique IDs to retrieve the proper file reference, type, and size fields for display or content moderation workflows.\n\nUsed for cases like serving a detail attachment modal, direct download, or admin audit. Assumes existence of the attachment for the given review; handles not-found errors as necessary.","summary":"Retrieve a specific file attachment for a product review by UUID.","parameters":[{"name":"reviewId","description":"UUID of the product review record.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Attachment record's UUID to fetch details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full attachment metadata for product review media.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieves a single attachment record by reviewId and attachmentId, allowing detail display or direct media download link generation. Directly maps to one entry in the aimall_backend_attachments table by composite key.","path":"/aimall-backend/administrator/reviews/{reviewId}/attachments/{attachmentId}","method":"get","description":"Provides detailed metadata for a specific media/file attachment linked to a product review. Data is selected from aimall_backend_attachments using unique IDs to retrieve the proper file reference, type, and size fields for display or content moderation workflows.\n\nUsed for cases like serving a detail attachment modal, direct download, or admin audit. Assumes existence of the attachment for the given review; handles not-found errors as necessary.","summary":"Retrieve a specific file attachment for a product review by UUID.","parameters":[{"name":"reviewId","description":"UUID of the product review record.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Attachment record's UUID to fetch details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full attachment metadata for product review media.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new file/media attachment and links it to a specific product review. Implements entry creation on the aimall_backend_attachments table, assigning review_id as the foreign key. Used to upload images, videos, or documents associated with UGC reviews, enforcing all file type and privacy validation business logic at the application layer.","path":"/aimall-backend/customer/reviews/{reviewId}/attachments","method":"post","description":"Creates a new attachment record for the specified product review. Validates file properties (type/size/uri) according to schema and business rules before saving. On success, returns full details of the attachment.\n\nAttachments are subject to moderation and content screening by default; only files fitting compliance and format criteria are accepted.\n\nFailure cases: review not found, invalid/corrupt media, storage failure.","summary":"Create a file attachment on a product review entry.","parameters":[{"name":"reviewId","description":"Product review identifier for associating new attachment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment upload info, including URI, type, and metadata according to IAimallBackendAttachment.ICreate.","typeName":"IAimallBackendAttachment.ICreate"},"responseBody":{"description":"Created attachment information with full metadata.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Creates a new file/media attachment and links it to a specific product review. Implements entry creation on the aimall_backend_attachments table, assigning review_id as the foreign key. Used to upload images, videos, or documents associated with UGC reviews, enforcing all file type and privacy validation business logic at the application layer.","path":"/aimall-backend/seller/reviews/{reviewId}/attachments","method":"post","description":"Creates a new attachment record for the specified product review. Validates file properties (type/size/uri) according to schema and business rules before saving. On success, returns full details of the attachment.\n\nAttachments are subject to moderation and content screening by default; only files fitting compliance and format criteria are accepted.\n\nFailure cases: review not found, invalid/corrupt media, storage failure.","summary":"Create a file attachment on a product review entry.","parameters":[{"name":"reviewId","description":"Product review identifier for associating new attachment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment upload info, including URI, type, and metadata according to IAimallBackendAttachment.ICreate.","typeName":"IAimallBackendAttachment.ICreate"},"responseBody":{"description":"Created attachment information with full metadata.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new file/media attachment and links it to a specific product review. Implements entry creation on the aimall_backend_attachments table, assigning review_id as the foreign key. Used to upload images, videos, or documents associated with UGC reviews, enforcing all file type and privacy validation business logic at the application layer.","path":"/aimall-backend/administrator/reviews/{reviewId}/attachments","method":"post","description":"Creates a new attachment record for the specified product review. Validates file properties (type/size/uri) according to schema and business rules before saving. On success, returns full details of the attachment.\n\nAttachments are subject to moderation and content screening by default; only files fitting compliance and format criteria are accepted.\n\nFailure cases: review not found, invalid/corrupt media, storage failure.","summary":"Create a file attachment on a product review entry.","parameters":[{"name":"reviewId","description":"Product review identifier for associating new attachment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment upload info, including URI, type, and metadata according to IAimallBackendAttachment.ICreate.","typeName":"IAimallBackendAttachment.ICreate"},"responseBody":{"description":"Created attachment information with full metadata.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing file attachment entry for a product review. PUT endpoint applies to aimall_backend_attachments table by reviewId+attachmentId. Only mutable fields such as file_uri, file_type, or meta can be changed (not review association). Enforces content validation and user/admin authorization on updates.","path":"/aimall-backend/customer/reviews/{reviewId}/attachments/{attachmentId}","method":"put","description":"Allows updating metadata (URI, type, caption/label) of an attachment already associated with a product review. Applies only to owned/admin/moderator-permitted updates for UGC moderation, error correction, or compliance annotation.\n\nCore constraints: review association is immutable on update; only metadata or file details can be edited. Owner or admin authorization required for changes; audit logs are updated to meet compliance.\n\nReturns the updated attachment metadata on success; error scenarios include permission denied, attachment not found, or validation failure.","summary":"Update file/media attachment metadata for a review entry.","parameters":[{"name":"reviewId","description":"Target review UUID for context.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID for the attachment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for permitted updateable fields in the attachment record: see IAimallBackendAttachment.IUpdate.","typeName":"IAimallBackendAttachment.IUpdate"},"responseBody":{"description":"Full metadata for the modified attachment record.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates an existing file attachment entry for a product review. PUT endpoint applies to aimall_backend_attachments table by reviewId+attachmentId. Only mutable fields such as file_uri, file_type, or meta can be changed (not review association). Enforces content validation and user/admin authorization on updates.","path":"/aimall-backend/seller/reviews/{reviewId}/attachments/{attachmentId}","method":"put","description":"Allows updating metadata (URI, type, caption/label) of an attachment already associated with a product review. Applies only to owned/admin/moderator-permitted updates for UGC moderation, error correction, or compliance annotation.\n\nCore constraints: review association is immutable on update; only metadata or file details can be edited. Owner or admin authorization required for changes; audit logs are updated to meet compliance.\n\nReturns the updated attachment metadata on success; error scenarios include permission denied, attachment not found, or validation failure.","summary":"Update file/media attachment metadata for a review entry.","parameters":[{"name":"reviewId","description":"Target review UUID for context.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID for the attachment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for permitted updateable fields in the attachment record: see IAimallBackendAttachment.IUpdate.","typeName":"IAimallBackendAttachment.IUpdate"},"responseBody":{"description":"Full metadata for the modified attachment record.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Updates an existing file attachment entry for a product review. PUT endpoint applies to aimall_backend_attachments table by reviewId+attachmentId. Only mutable fields such as file_uri, file_type, or meta can be changed (not review association). Enforces content validation and user/admin authorization on updates.","path":"/aimall-backend/administrator/reviews/{reviewId}/attachments/{attachmentId}","method":"put","description":"Allows updating metadata (URI, type, caption/label) of an attachment already associated with a product review. Applies only to owned/admin/moderator-permitted updates for UGC moderation, error correction, or compliance annotation.\n\nCore constraints: review association is immutable on update; only metadata or file details can be edited. Owner or admin authorization required for changes; audit logs are updated to meet compliance.\n\nReturns the updated attachment metadata on success; error scenarios include permission denied, attachment not found, or validation failure.","summary":"Update file/media attachment metadata for a review entry.","parameters":[{"name":"reviewId","description":"Target review UUID for context.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"UUID for the attachment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for permitted updateable fields in the attachment record: see IAimallBackendAttachment.IUpdate.","typeName":"IAimallBackendAttachment.IUpdate"},"responseBody":{"description":"Full metadata for the modified attachment record.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (removes) a file/media attachment from a product review. Maps to DELETE operation on the aimall_backend_attachments model by reviewId+attachmentId. Removal is hard delete, as the model lacks a soft delete timestamp. Actual file erasure from storage is application-dependent; record is deleted from DB for audit/logical compliance.","path":"/aimall-backend/customer/reviews/{reviewId}/attachments/{attachmentId}","method":"delete","description":"Removes an attachment from a product review by deleting the row in aimall_backend_attachments using reviewId and attachmentId. Since this table does not support soft deletion (no deleted_at field), this operation performs a hard delete, permanently removing all record metadata from the database. Media file deletion from storage is managed at the application level.\n\nAuthorization: only the uploading customer, review owner, or admin can delete. Safeguards to block deletion if file in use (e.g., referenced elsewhere) may be employed.\n\nReturns no data on success; error if attachment not found or unauthorized.","summary":"Completely remove a file/media attachment from a review (hard delete).","parameters":[{"name":"reviewId","description":"UUID for the review whose attachment is to be removed.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Attachment UUID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes (removes) a file/media attachment from a product review. Maps to DELETE operation on the aimall_backend_attachments model by reviewId+attachmentId. Removal is hard delete, as the model lacks a soft delete timestamp. Actual file erasure from storage is application-dependent; record is deleted from DB for audit/logical compliance.","path":"/aimall-backend/seller/reviews/{reviewId}/attachments/{attachmentId}","method":"delete","description":"Removes an attachment from a product review by deleting the row in aimall_backend_attachments using reviewId and attachmentId. Since this table does not support soft deletion (no deleted_at field), this operation performs a hard delete, permanently removing all record metadata from the database. Media file deletion from storage is managed at the application level.\n\nAuthorization: only the uploading customer, review owner, or admin can delete. Safeguards to block deletion if file in use (e.g., referenced elsewhere) may be employed.\n\nReturns no data on success; error if attachment not found or unauthorized.","summary":"Completely remove a file/media attachment from a review (hard delete).","parameters":[{"name":"reviewId","description":"UUID for the review whose attachment is to be removed.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Attachment UUID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes (removes) a file/media attachment from a product review. Maps to DELETE operation on the aimall_backend_attachments model by reviewId+attachmentId. Removal is hard delete, as the model lacks a soft delete timestamp. Actual file erasure from storage is application-dependent; record is deleted from DB for audit/logical compliance.","path":"/aimall-backend/administrator/reviews/{reviewId}/attachments/{attachmentId}","method":"delete","description":"Removes an attachment from a product review by deleting the row in aimall_backend_attachments using reviewId and attachmentId. Since this table does not support soft deletion (no deleted_at field), this operation performs a hard delete, permanently removing all record metadata from the database. Media file deletion from storage is managed at the application level.\n\nAuthorization: only the uploading customer, review owner, or admin can delete. Safeguards to block deletion if file in use (e.g., referenced elsewhere) may be employed.\n\nReturns no data on success; error if attachment not found or unauthorized.","summary":"Completely remove a file/media attachment from a review (hard delete).","parameters":[{"name":"reviewId","description":"UUID for the review whose attachment is to be removed.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Attachment UUID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a paginated list of all community attachments in the system. This operation interfaces with the aimall_backend_attachments table from the Community domain of the AIMall backend. Attachments are files or media entities that are linked to posts, comments, or product reviews, and stored as atomic records. The endpoint allows listing all uploaded attachments, supporting administrative file browser interfaces or moderation workflows.\n\nThe API returns key metadata for each attachment such as file URI, file type, file size, creation timestamp, and linking references (post_id, comment_id, review_id). As attachments typically contain sensitive media, file access strategies must be regulated and secured based on role. Filtering and pagination must be supported at the service level even if not directly in this simple GET operation.\n\nOperations that require inspection (such as bulk moderation or audit) may expand or restrict results based on downstream access control. This endpoint is tightly coupled with the aimall_backend_attachments schema, which stores atomic file records. For advanced searching, consider the PATCH /attachments endpoint.","path":"/aimall-backend/administrator/attachments","method":"get","description":"Retrieve a paginated list of all attachments stored in the AIMall Community system. Attachments are records linked to posts, comments, or reviews, and represent uploaded media (e.g., images, videos, documents) as persistent references in the aimall_backend_attachments schema. \n\nThis operation is designed to support file browser UI, system moderation, or analytics tools interested in stored attachments. Access is typically restricted to authenticated users (e.g., administrators, moderators) due to privacy/sensitivity concerns about media content.\n\nResults present atomic file details only, with no bulk file contents. Clients are responsible for paginating results and performing further filtering. Attachments returned reference their linked post, comment, or review by ID.","summary":"Retrieve a paginated list of all community attachments (aimall_backend_attachments table).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of attachment records and associated file metadata.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Search and filter attachments with advanced criteria, supporting moderation and administrative review. This operation interfaces with the aimall_backend_attachments table and allows searching by linked entity (post, comment, review), file type, time range, or other metadata fields.\n\nThe PATCH method supports submission of complex query/filter objects using an IAimallBackendAttachment.IRequest DTO, allowing advanced queries for use in moderation, analytics, or compliance tools. Results are paginated and can be sorted by any indexed field. This endpoint references only atomic attributes of the aimall_backend_attachments schema.","path":"/aimall-backend/administrator/attachments","method":"patch","description":"Allows searching, filtering, and sorting of community attachment records using flexible queries. Uses IAimallBackendAttachment.IRequest to capture advanced filter conditions (e.g., linked post, comment, review, file type, upload date ranges, or partial filename matches). \n\nThis API supports admin and moderation dashboards that require advanced filtering of attachments for audit, compliance, or bulk actions. Only attributes defined in the aimall_backend_attachments table may be used as criteria. Results are delivered in paginated form with additional metadata for UI display.","summary":"Perform advanced search and filtering over community attachments for moderation or analytics.","parameters":[],"requestBody":{"description":"Filter conditions and pagination/sorting parameters for attachment search.","typeName":"IAimallBackendAttachment.IRequest"},"responseBody":{"description":"Paginated list of filtered attachment records.","typeName":"IPageIAimallBackendAttachment"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieve metadata for a specific community attachment by unique ID. References the aimall_backend_attachments table and returns atomic file details (file URI, type, size, linkage IDs). Used for direct inspection, download link generation, or moderation operations. The attachmentId parameter is a UUID matching the 'id' field.","path":"/aimall-backend/administrator/attachments/{attachmentId}","method":"get","description":"Fetch a single attachment record from the aimall_backend_attachments table by its unique attachmentId. The operation exposes the file's URI, type, size, creation time, and references to linked post, comment, or review, as defined by the Prisma schema.\n\nThis method enables direct access to metadata for display, moderation, or policy enforcement. Access should be restricted to roles with explicit permissions given the privacy of user-uploaded files. The file's actual content is not returned; only metadata is provided.","summary":"Retrieve a specific attachment's metadata by attachmentId from the aimall_backend_attachments table.","parameters":[{"name":"attachmentId","description":"Unique identifier of the target attachment (UUID, matches id field in schema).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment record for the specified ID (file URI, type, metadata, links).","typeName":"IAimallBackendAttachment"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new attachment record, representing an uploaded media item (image, video, file) associated with a post, comment, or review in the Community module. Operates on the aimall_backend_attachments table. Requires submission of atomic data (file URI, type, size, and an explicit link to one of post_id, comment_id, or review_id). The upload mechanism must be handled externally and only the reference URI and metadata stored here.\n\nThis endpoint is typically called by the backend after file upload, or by privileged clients. The returned object contains all persisted atomic file information.","path":"/aimall-backend/administrator/attachments","method":"post","description":"Creates a new attachment entry in the aimall_backend_attachments table based on provided metadata (file URI, file type, file size, and linkage to post, comment, or review). File uploads themselves happen out-of-band; only metadata/reference is stored in this call.\n\nAppropriate for use by client-side applications or admin tools that need to store references to user-uploaded materials. Ensures policy compliance by associating attachments only to allowed entities. Requires authentication and write permissions.","summary":"Create a new attachment record representing a completed file or media upload.","parameters":[],"requestBody":{"description":"Attachment data for file/media to register (file URI, metadata, and linkage).","typeName":"IAimallBackendAttachment.ICreate"},"responseBody":{"description":"Newly created attachment record with persistently stored file reference and metadata.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Update attachment metadata, such as file URI, type, or linkage to a post, comment, or review. The operation targets a specific attachmentId (UUID, referencing the primary key on aimall_backend_attachments) and applies data from the update DTO. Actual file content is not updated here; only references and atomic metadata may be changed.\n\nPUT semantics ensure full replacement of mutable metadata as allowed by the schema, enforcing 3NF and compliance rules.","path":"/aimall-backend/administrator/attachments/{attachmentId}","method":"put","description":"Performs a full update on attachment metadata for a specified attachmentId using provided attributes (file URI, type, size, and linkage), in accordance with the aimall_backend_attachments schema. \n\nThis is suitable for correcting incorrect references, updating file type, or modifying linkage to posts, comments, or reviews after moderation. May not be used to update file content itself; file lifecycle is managed externally. Requires administrative or moderation privileges.","summary":"Update metadata or linkage for an existing attachment record by attachmentId.","parameters":[{"name":"attachmentId","description":"Unique identifier of the attachment to update (UUID, primary key in table).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified attachment (file URI, metadata, and new linkage when required).","typeName":"IAimallBackendAttachment.IUpdate"},"responseBody":{"description":"Updated attachment record with new metadata/linkage.","typeName":"IAimallBackendAttachment"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (hard delete) an attachment from the system by attachmentId. There is no soft deletion field in the aimall_backend_attachments schema, so deletion is permanent. The operation is intended for compliance, moderation, or policy enforcement (e.g., removing inappropriate content) and should be restricted to administrators or moderators.\n\nDeletion will remove the reference to the file, but does not guarantee erasure from object/file storage (handled externally).","path":"/aimall-backend/administrator/attachments/{attachmentId}","method":"delete","description":"Removes a specified attachment record from the aimall_backend_attachments table by attachmentId (UUID). As there is no deleted_at field, this is a hard delete.\n\nTypical uses include compliance deletion in response to DMCA, Terms of Service violations, or by explicit admin request. Access is strictly limited to authorized roles due to the permanent nature of deletion. Actual file removal from storage must be coordinated externally.","summary":"Permanently delete an attachment record by attachmentId (no soft delete).","parameters":[{"name":"attachmentId","description":"UUID of the attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieve a paginated list of all community snapshots. Snapshots are user-uploaded images/videos associated with social moments, products, or posts. The endpoint queries the aimall_backend_snapshots table, returning key metadata for each item as defined by the schema.\n\nStandard use cases include administrative moderation UI, customer timeline feed assembly, and analytics tools. Returns only metadata records per page for efficiency and privacy; access is usually restricted to authorized/admin roles.","path":"/aimall-backend/administrator/snapshots","method":"get","description":"Lists all snapshot media entries stored in the community context, such as images or videos tagged to posts or products. Returns paginated snapshot metadata only (e.g., media URI, caption, associated product/post/customer, and timestamps).\n\nThis operation serves admin dashboards and analytics views that require enumerating social moments but not necessarily retrieving the media itself. Result set is paginated and can be sorted. Only authorized users may retrieve society media records due to privacy concerns.","summary":"Get a paginated list of all community snapshots (aimall_backend_snapshots table).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of social snapshots and media record metadata.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Advanced search/filtering over community snapshots by metadata (media_uri, caption, linkage fields, timestamps). Queries the aimall_backend_snapshots table and enables intricate conditions via PATCH, using an IAimallBackendSnapshot.IRequest DTO for filter/sort logic.\n\nPagination, sorting, and arbitrary search over indexed fields is supported by this design, enabling deep analytics and moderation controls. Supports role-based filtering in compliance-driven deployments.","path":"/aimall-backend/administrator/snapshots","method":"patch","description":"Search and retrieve filtered/paginated snapshot (media) records matching advanced search parameters. Uses the request DTO IAimallBackendSnapshot.IRequest for flexible filter criteria (by media_uri, caption, product_id, post_id, customer_id, or date interval).\n\nThis endpoint supports analytic dashboards, content moderation workflows, and compliance-friendly record lookups. Only defined atomic fields in the aimall_backend_snapshots schema may be used as criteria.","summary":"Search and filter community snapshots by metadata for moderation/analytics.","parameters":[],"requestBody":{"description":"Snapshot filter/search and pagination/sorting options per request DTO.","typeName":"IAimallBackendSnapshot.IRequest"},"responseBody":{"description":"Paginated results of filtered community snapshot records.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieve a specific community snapshot's metadata by its unique snapshotId, using the aimall_backend_snapshots table. Returns atomic details for the snapshot media (URI, caption, references to product, post, or customer, creation time). Access requires administrative authorization due to sensitive content possibilities.","path":"/aimall-backend/administrator/snapshots/{snapshotId}","method":"get","description":"Fetch the media snapshot record for a single snapshotId from aimall_backend_snapshots. Returns metadata such as media URI, caption, relationships, and timestamps as defined in the schema.\n\nThis is frequently used in moderation workflows, audit logs, and analytic deep-dives. Media content is not returned; only metadata is delivered. Role-based access enforcement applies.","summary":"Get metadata for a specific snapshot by snapshotId from aimall_backend_snapshots.","parameters":[{"name":"snapshotId","description":"UUID of the snapshot record to retrieve (primary key).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Snapshot metadata for the specified ID.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new community snapshot entry, registering uploaded media (image/video URI) with associated metadata (caption, references). The API accepts IAimallBackendSnapshot.ICreate as request body, referencing the aimall_backend_snapshots schema. File upload occurs externally; this endpoint only persists the reference and its attributes.\n\nRequires authentication/authorization—typically only accessible to UI for social posting, admin moderation, or campaign managers.","path":"/aimall-backend/administrator/snapshots","method":"post","description":"Creates a new snapshot entry for the community context with provided media URI, caption, and linkage fields (e.g., product_id, post_id, customer_id). Uses the IAimallBackendSnapshot.ICreate DTO shape for atomic properties, as defined by the schema.\n\nAfter the file is uploaded and reference created, the system persists the logical connection between the snapshot and associated entities. This facilitates timeline feeds and social features. Only metadata, not media, is handled.","summary":"Create a new community snapshot record (registering image/video to social context).","parameters":[],"requestBody":{"description":"Snapshot creation data: media URI reference, optional caption, associations.","typeName":"IAimallBackendSnapshot.ICreate"},"responseBody":{"description":"Newly created community snapshot record.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Update (full replace) all mutable metadata for a given community snapshot, specified by snapshotId. Operates on the aimall_backend_snapshots table: accepts updated media URI, caption, and relational references as permitted in the IAimallBackendSnapshot.IUpdate DTO.\n\nThe operation cannot alter immutable attributes such as the primary key or creation timestamp, and does not modify the associated media (file storage update is out-of-band). Only atomic metadata and relations can be changed. Role-based authorization required.","path":"/aimall-backend/administrator/snapshots/{snapshotId}","method":"put","description":"Fully update metadata for a specified community snapshot given by snapshotId, using new values from IAimallBackendSnapshot.IUpdate (i.e., media URI, caption, and entity references).\n\nThis is used to correct or reassign social moments, moderate captions, or relink a snapshot to another community entity. Media files themselves are not changed by this call. Administrative privileges are required for such updates.","summary":"Update mutable metadata for a specific snapshot record by snapshotId.","parameters":[{"name":"snapshotId","description":"UUID of the snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"DTO containing updated snapshot metadata and link references.","typeName":"IAimallBackendSnapshot.IUpdate"},"responseBody":{"description":"The updated snapshot record, reflecting provided changes.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (hard delete) a snapshot from the database by snapshotId in aimall_backend_snapshots. There is no soft deletion field in the schema. Intended for compliance, moderation, or social media policy enforcement. The referenced media file may need removal by a separate external process. This operation is strictly for hard deletes only, with no recoverability from this endpoint.","path":"/aimall-backend/administrator/snapshots/{snapshotId}","method":"delete","description":"Permanently removes a snapshot metadata record from aimall_backend_snapshots by snapshotId (UUID). Use cases include removing inappropriate or requested content, compliance-related deletions, or moderation. Access control is strict, and the operation is irreversible from the API perspective.\n\nActual media content deletion must be handled via file management system separately. Use is expected to be rare and heavily logged.","summary":"Hard delete a community snapshot record by snapshotId (no soft delete present).","parameters":[{"name":"snapshotId","description":"UUID of the snapshot to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This API operation retrieves a paginated list of snapshots (user-generated media, e.g., images/videos) attached to a specific community post. The operation is based on the aimall_backend_snapshots table in the Community schema and utilizes the post_id foreign key relationship with aimall_backend_posts. Snapshots provide rich timeline context and are linked for post-moment sharing. Advanced query parameters for pagination, filtering, or sorting must be supplied via query string or a dedicated request model.","path":"/aimall-backend/customer/posts/{postId}/snapshots","method":"get","description":"Retrieve a paginated list of snapshots associated with a specific community post. Snapshot records enrich the timeline by capturing user image/photo moments tied to posts and social engagement events.\n\nAccessible to all authenticated users. Permissions are enforced so only public or authorized private snapshots are displayed, according to business rules outlined in the Prisma schema. Response includes essential snapshot fields and post linkage.\n\nRelationship: Each snapshot record references a post by post_id. The data is sourced directly from the aimall_backend_snapshots table.\n\nIf the post or snapshots do not exist, a proper 404 or empty result is returned.","summary":"List all snapshots attached to a specific community post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"The unique identifier of the community post whose snapshots are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of snapshot records linked to the target post.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"This API operation retrieves a paginated list of snapshots (user-generated media, e.g., images/videos) attached to a specific community post. The operation is based on the aimall_backend_snapshots table in the Community schema and utilizes the post_id foreign key relationship with aimall_backend_posts. Snapshots provide rich timeline context and are linked for post-moment sharing. Advanced query parameters for pagination, filtering, or sorting must be supplied via query string or a dedicated request model.","path":"/aimall-backend/seller/posts/{postId}/snapshots","method":"get","description":"Retrieve a paginated list of snapshots associated with a specific community post. Snapshot records enrich the timeline by capturing user image/photo moments tied to posts and social engagement events.\n\nAccessible to all authenticated users. Permissions are enforced so only public or authorized private snapshots are displayed, according to business rules outlined in the Prisma schema. Response includes essential snapshot fields and post linkage.\n\nRelationship: Each snapshot record references a post by post_id. The data is sourced directly from the aimall_backend_snapshots table.\n\nIf the post or snapshots do not exist, a proper 404 or empty result is returned.","summary":"List all snapshots attached to a specific community post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"The unique identifier of the community post whose snapshots are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of snapshot records linked to the target post.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"This API operation retrieves a paginated list of snapshots (user-generated media, e.g., images/videos) attached to a specific community post. The operation is based on the aimall_backend_snapshots table in the Community schema and utilizes the post_id foreign key relationship with aimall_backend_posts. Snapshots provide rich timeline context and are linked for post-moment sharing. Advanced query parameters for pagination, filtering, or sorting must be supplied via query string or a dedicated request model.","path":"/aimall-backend/administrator/posts/{postId}/snapshots","method":"get","description":"Retrieve a paginated list of snapshots associated with a specific community post. Snapshot records enrich the timeline by capturing user image/photo moments tied to posts and social engagement events.\n\nAccessible to all authenticated users. Permissions are enforced so only public or authorized private snapshots are displayed, according to business rules outlined in the Prisma schema. Response includes essential snapshot fields and post linkage.\n\nRelationship: Each snapshot record references a post by post_id. The data is sourced directly from the aimall_backend_snapshots table.\n\nIf the post or snapshots do not exist, a proper 404 or empty result is returned.","summary":"List all snapshots attached to a specific community post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"The unique identifier of the community post whose snapshots are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of snapshot records linked to the target post.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This API offers advanced snapshot filtering and search capabilities for a specific post, retrieving a paginated list from the aimall_backend_snapshots table. Implements search, filter, and sorting patterns with support for timeline queries based on post_id, media type, and created_at. Underlying model is aimall_backend_snapshots, foreign-keyed to the relevant post. The request body contains filter, search, pagination, and sort details.","path":"/aimall-backend/customer/posts/{postId}/snapshots","method":"patch","description":"Provides advanced, paginated search of snapshots (user-generated photos/videos) for a specific community post. Supports complex filtering by attributes such as media format, creation date, or user.\n\nUtilizes the aimall_backend_snapshots schema and enforces that results are restricted to the supplied post (post_id). Ensures permissions are enforced, only public/private snapshots visible according to business rules. Pagination and sorting are supported via the request body.\n\nReturns paginated and filtered snapshot entities with structure based on the underlying schema. If no results are found, returns an empty page.","summary":"Advanced search and filtering of snapshots on a specific post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Unique identifier of the community post for which snapshot search is performed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot search and filter parameters for advanced querying on the post's attached snapshots.","typeName":"IAimallBackendSnapshot.IRequest"},"responseBody":{"description":"Paginated search results of snapshot records for the post.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"This API offers advanced snapshot filtering and search capabilities for a specific post, retrieving a paginated list from the aimall_backend_snapshots table. Implements search, filter, and sorting patterns with support for timeline queries based on post_id, media type, and created_at. Underlying model is aimall_backend_snapshots, foreign-keyed to the relevant post. The request body contains filter, search, pagination, and sort details.","path":"/aimall-backend/seller/posts/{postId}/snapshots","method":"patch","description":"Provides advanced, paginated search of snapshots (user-generated photos/videos) for a specific community post. Supports complex filtering by attributes such as media format, creation date, or user.\n\nUtilizes the aimall_backend_snapshots schema and enforces that results are restricted to the supplied post (post_id). Ensures permissions are enforced, only public/private snapshots visible according to business rules. Pagination and sorting are supported via the request body.\n\nReturns paginated and filtered snapshot entities with structure based on the underlying schema. If no results are found, returns an empty page.","summary":"Advanced search and filtering of snapshots on a specific post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Unique identifier of the community post for which snapshot search is performed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot search and filter parameters for advanced querying on the post's attached snapshots.","typeName":"IAimallBackendSnapshot.IRequest"},"responseBody":{"description":"Paginated search results of snapshot records for the post.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"This API offers advanced snapshot filtering and search capabilities for a specific post, retrieving a paginated list from the aimall_backend_snapshots table. Implements search, filter, and sorting patterns with support for timeline queries based on post_id, media type, and created_at. Underlying model is aimall_backend_snapshots, foreign-keyed to the relevant post. The request body contains filter, search, pagination, and sort details.","path":"/aimall-backend/administrator/posts/{postId}/snapshots","method":"patch","description":"Provides advanced, paginated search of snapshots (user-generated photos/videos) for a specific community post. Supports complex filtering by attributes such as media format, creation date, or user.\n\nUtilizes the aimall_backend_snapshots schema and enforces that results are restricted to the supplied post (post_id). Ensures permissions are enforced, only public/private snapshots visible according to business rules. Pagination and sorting are supported via the request body.\n\nReturns paginated and filtered snapshot entities with structure based on the underlying schema. If no results are found, returns an empty page.","summary":"Advanced search and filtering of snapshots on a specific post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Unique identifier of the community post for which snapshot search is performed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot search and filter parameters for advanced querying on the post's attached snapshots.","typeName":"IAimallBackendSnapshot.IRequest"},"responseBody":{"description":"Paginated search results of snapshot records for the post.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation retrieves a specific snapshot record attached to a given community post, using aimall_backend_snapshots as the core data source. Requires both postId and snapshotId as path parameters. Ensures ownership and visibility rules are applied as per the underlying schema, returning the full snapshot entity if permitted.","path":"/aimall-backend/customer/posts/{postId}/snapshots/{snapshotId}","method":"get","description":"Get detailed information for a single snapshot (user photo/moment) attached to a specified post. The API validates both the post and snapshot linkage for data integrity and permission handling.\n\nThe response contains all atomic fields of the aimall_backend_snapshots entry, as referenced from the Prisma schema. Security logic restricts private media or enforces access rules tied to the post's visibility. If the post or snapshot does not exist, a 404 error is returned.","summary":"Retrieve details for a single snapshot attached to a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Unique ID of the parent community post for the snapshot.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Unique identifier of the snapshot media record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot entity attached to the target post.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"This operation retrieves a specific snapshot record attached to a given community post, using aimall_backend_snapshots as the core data source. Requires both postId and snapshotId as path parameters. Ensures ownership and visibility rules are applied as per the underlying schema, returning the full snapshot entity if permitted.","path":"/aimall-backend/seller/posts/{postId}/snapshots/{snapshotId}","method":"get","description":"Get detailed information for a single snapshot (user photo/moment) attached to a specified post. The API validates both the post and snapshot linkage for data integrity and permission handling.\n\nThe response contains all atomic fields of the aimall_backend_snapshots entry, as referenced from the Prisma schema. Security logic restricts private media or enforces access rules tied to the post's visibility. If the post or snapshot does not exist, a 404 error is returned.","summary":"Retrieve details for a single snapshot attached to a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Unique ID of the parent community post for the snapshot.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Unique identifier of the snapshot media record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot entity attached to the target post.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"This operation retrieves a specific snapshot record attached to a given community post, using aimall_backend_snapshots as the core data source. Requires both postId and snapshotId as path parameters. Ensures ownership and visibility rules are applied as per the underlying schema, returning the full snapshot entity if permitted.","path":"/aimall-backend/administrator/posts/{postId}/snapshots/{snapshotId}","method":"get","description":"Get detailed information for a single snapshot (user photo/moment) attached to a specified post. The API validates both the post and snapshot linkage for data integrity and permission handling.\n\nThe response contains all atomic fields of the aimall_backend_snapshots entry, as referenced from the Prisma schema. Security logic restricts private media or enforces access rules tied to the post's visibility. If the post or snapshot does not exist, a 404 error is returned.","summary":"Retrieve details for a single snapshot attached to a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Unique ID of the parent community post for the snapshot.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Unique identifier of the snapshot media record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot entity attached to the target post.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new snapshot/media entity linked to a specified post. The operation posts a new aimall_backend_snapshots record, accepting all required fields for media URI, optional caption, and post association. Follows the post_id foreign key, ensuring proper constraint application. Record creation timestamp is set server-side. Operation restricted to authenticated users; business logic ensures appropriate moderation and post linkage.","path":"/aimall-backend/customer/posts/{postId}/snapshots","method":"post","description":"Create (upload) a new snapshot (photo/media) directly linked to a specific community post. This endpoint enforces all validation rules defined in aimall_backend_snapshots from the Prisma schema, including post_id relationship and media URI/data integrity.\n\nPermission: Only authenticated users can upload. Server processes field validation (e.g., non-null media_uri), applies content moderation, and persists all atomic fields such as media_uri, caption, and reference timestamps.\n\nReturns the complete entity as stored.","summary":"Create a new media snapshot attached to a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Target post's unique identifier to which the snapshot will be linked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All snapshot creation parameters (media URI, optional caption, etc., per the schema).","typeName":"IAimallBackendSnapshot.ICreate"},"responseBody":{"description":"The created snapshot entity as persisted in the database.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Creates a new snapshot/media entity linked to a specified post. The operation posts a new aimall_backend_snapshots record, accepting all required fields for media URI, optional caption, and post association. Follows the post_id foreign key, ensuring proper constraint application. Record creation timestamp is set server-side. Operation restricted to authenticated users; business logic ensures appropriate moderation and post linkage.","path":"/aimall-backend/seller/posts/{postId}/snapshots","method":"post","description":"Create (upload) a new snapshot (photo/media) directly linked to a specific community post. This endpoint enforces all validation rules defined in aimall_backend_snapshots from the Prisma schema, including post_id relationship and media URI/data integrity.\n\nPermission: Only authenticated users can upload. Server processes field validation (e.g., non-null media_uri), applies content moderation, and persists all atomic fields such as media_uri, caption, and reference timestamps.\n\nReturns the complete entity as stored.","summary":"Create a new media snapshot attached to a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Target post's unique identifier to which the snapshot will be linked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All snapshot creation parameters (media URI, optional caption, etc., per the schema).","typeName":"IAimallBackendSnapshot.ICreate"},"responseBody":{"description":"The created snapshot entity as persisted in the database.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new snapshot/media entity linked to a specified post. The operation posts a new aimall_backend_snapshots record, accepting all required fields for media URI, optional caption, and post association. Follows the post_id foreign key, ensuring proper constraint application. Record creation timestamp is set server-side. Operation restricted to authenticated users; business logic ensures appropriate moderation and post linkage.","path":"/aimall-backend/administrator/posts/{postId}/snapshots","method":"post","description":"Create (upload) a new snapshot (photo/media) directly linked to a specific community post. This endpoint enforces all validation rules defined in aimall_backend_snapshots from the Prisma schema, including post_id relationship and media URI/data integrity.\n\nPermission: Only authenticated users can upload. Server processes field validation (e.g., non-null media_uri), applies content moderation, and persists all atomic fields such as media_uri, caption, and reference timestamps.\n\nReturns the complete entity as stored.","summary":"Create a new media snapshot attached to a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Target post's unique identifier to which the snapshot will be linked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All snapshot creation parameters (media URI, optional caption, etc., per the schema).","typeName":"IAimallBackendSnapshot.ICreate"},"responseBody":{"description":"The created snapshot entity as persisted in the database.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing snapshot media record for a given post. The operation uses PUT semantics to replace mutable fields of an existing aimall_backend_snapshots entity, enforcing referential integrity between post and snapshot. Only atomic, updatable fields such as caption or media_uri may be changed. Timestamp of update is set server-side. Permissions are enforced so only authorized users or admins can update.","path":"/aimall-backend/customer/posts/{postId}/snapshots/{snapshotId}","method":"put","description":"Update an existing snapshot entity attached to a target community post. Supports update to editable fields as specified in aimall_backend_snapshots (e.g., caption or media URI).\n\nRequires both postId and snapshotId to ensure correct context and linkage. Permission: Only the owner or admin may edit, subject to content moderation and audit logs. If either entity does not exist, returns 404.\n\nApplies validation rules (e.g., only caption/media can be changed) as modeled in the schema.","summary":"Update an existing snapshot (photo/media) on a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Parent post's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Snapshot's unique identifier to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot update request body with editable fields (e.g., caption or media URI).","typeName":"IAimallBackendSnapshot.IUpdate"},"responseBody":{"description":"The updated snapshot entity with all new values.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates an existing snapshot media record for a given post. The operation uses PUT semantics to replace mutable fields of an existing aimall_backend_snapshots entity, enforcing referential integrity between post and snapshot. Only atomic, updatable fields such as caption or media_uri may be changed. Timestamp of update is set server-side. Permissions are enforced so only authorized users or admins can update.","path":"/aimall-backend/seller/posts/{postId}/snapshots/{snapshotId}","method":"put","description":"Update an existing snapshot entity attached to a target community post. Supports update to editable fields as specified in aimall_backend_snapshots (e.g., caption or media URI).\n\nRequires both postId and snapshotId to ensure correct context and linkage. Permission: Only the owner or admin may edit, subject to content moderation and audit logs. If either entity does not exist, returns 404.\n\nApplies validation rules (e.g., only caption/media can be changed) as modeled in the schema.","summary":"Update an existing snapshot (photo/media) on a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Parent post's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Snapshot's unique identifier to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot update request body with editable fields (e.g., caption or media URI).","typeName":"IAimallBackendSnapshot.IUpdate"},"responseBody":{"description":"The updated snapshot entity with all new values.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Updates an existing snapshot media record for a given post. The operation uses PUT semantics to replace mutable fields of an existing aimall_backend_snapshots entity, enforcing referential integrity between post and snapshot. Only atomic, updatable fields such as caption or media_uri may be changed. Timestamp of update is set server-side. Permissions are enforced so only authorized users or admins can update.","path":"/aimall-backend/administrator/posts/{postId}/snapshots/{snapshotId}","method":"put","description":"Update an existing snapshot entity attached to a target community post. Supports update to editable fields as specified in aimall_backend_snapshots (e.g., caption or media URI).\n\nRequires both postId and snapshotId to ensure correct context and linkage. Permission: Only the owner or admin may edit, subject to content moderation and audit logs. If either entity does not exist, returns 404.\n\nApplies validation rules (e.g., only caption/media can be changed) as modeled in the schema.","summary":"Update an existing snapshot (photo/media) on a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Parent post's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Snapshot's unique identifier to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot update request body with editable fields (e.g., caption or media URI).","typeName":"IAimallBackendSnapshot.IUpdate"},"responseBody":{"description":"The updated snapshot entity with all new values.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (hard or soft, per schema) an existing snapshot attached to a community post. Operation finds aimall_backend_snapshots entry using both postId and snapshotId. Only permitted users or admins may delete, depending on visibility and ownership. If schema supports soft delete or audit, implements accordingly. If the snapshot does not exist, returns 404.","path":"/aimall-backend/customer/posts/{postId}/snapshots/{snapshotId}","method":"delete","description":"Delete (or soft-delete) a snapshot/media entity from a target post. The operation identifies the snapshot via postId and snapshotId. Handles permission checks for owner/admin. If the snapshot or post does not exist, returns 404.\n\nIf business requires a soft delete, nullifies link or archives record. If not present in the schema, performs hard delete. Ensures compliance with audit and retention policies as stated by business rules.","summary":"Delete an existing snapshot (photo/media) on a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Parent post's unique ID.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Target snapshot's unique ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes (hard or soft, per schema) an existing snapshot attached to a community post. Operation finds aimall_backend_snapshots entry using both postId and snapshotId. Only permitted users or admins may delete, depending on visibility and ownership. If schema supports soft delete or audit, implements accordingly. If the snapshot does not exist, returns 404.","path":"/aimall-backend/seller/posts/{postId}/snapshots/{snapshotId}","method":"delete","description":"Delete (or soft-delete) a snapshot/media entity from a target post. The operation identifies the snapshot via postId and snapshotId. Handles permission checks for owner/admin. If the snapshot or post does not exist, returns 404.\n\nIf business requires a soft delete, nullifies link or archives record. If not present in the schema, performs hard delete. Ensures compliance with audit and retention policies as stated by business rules.","summary":"Delete an existing snapshot (photo/media) on a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Parent post's unique ID.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Target snapshot's unique ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes (hard or soft, per schema) an existing snapshot attached to a community post. Operation finds aimall_backend_snapshots entry using both postId and snapshotId. Only permitted users or admins may delete, depending on visibility and ownership. If schema supports soft delete or audit, implements accordingly. If the snapshot does not exist, returns 404.","path":"/aimall-backend/administrator/posts/{postId}/snapshots/{snapshotId}","method":"delete","description":"Delete (or soft-delete) a snapshot/media entity from a target post. The operation identifies the snapshot via postId and snapshotId. Handles permission checks for owner/admin. If the snapshot or post does not exist, returns 404.\n\nIf business requires a soft delete, nullifies link or archives record. If not present in the schema, performs hard delete. Ensures compliance with audit and retention policies as stated by business rules.","summary":"Delete an existing snapshot (photo/media) on a post (aimall_backend_snapshots).","parameters":[{"name":"postId","description":"Parent post's unique ID.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Target snapshot's unique ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a paginated list of all snapshots (photos/media) attached to a specific product review, based on a foreign key from aimall_backend_snapshots to aimall_backend_reviews. Implements timeline/media-sharing features for review pages. The base table is aimall_backend_snapshots. Pagination, filtering, and sorting can be handled with query parameters or a dedicated request body.","path":"/aimall-backend/customer/reviews/{reviewId}/snapshots","method":"get","description":"List all snapshots (user moments/photos) associated with a specific product review entity. Response is paginated and contains all fields mapped from aimall_backend_snapshots, filtered to match the supplied review.\n\nPermissions: Only authenticated users may access. Results are visibility-scoped, so private or restricted snapshots are filtered according to business logic and user role. Falls back to empty page if the review or its snapshots are missing.","summary":"List all snapshots attached to a specific product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"The unique identifier of the review whose snapshots are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of snapshot records linked to the review.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieves a paginated list of all snapshots (photos/media) attached to a specific product review, based on a foreign key from aimall_backend_snapshots to aimall_backend_reviews. Implements timeline/media-sharing features for review pages. The base table is aimall_backend_snapshots. Pagination, filtering, and sorting can be handled with query parameters or a dedicated request body.","path":"/aimall-backend/seller/reviews/{reviewId}/snapshots","method":"get","description":"List all snapshots (user moments/photos) associated with a specific product review entity. Response is paginated and contains all fields mapped from aimall_backend_snapshots, filtered to match the supplied review.\n\nPermissions: Only authenticated users may access. Results are visibility-scoped, so private or restricted snapshots are filtered according to business logic and user role. Falls back to empty page if the review or its snapshots are missing.","summary":"List all snapshots attached to a specific product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"The unique identifier of the review whose snapshots are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of snapshot records linked to the review.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"Retrieves a paginated list of all snapshots (photos/media) attached to a specific product review, based on a foreign key from aimall_backend_snapshots to aimall_backend_reviews. Implements timeline/media-sharing features for review pages. The base table is aimall_backend_snapshots. Pagination, filtering, and sorting can be handled with query parameters or a dedicated request body.","path":"/aimall-backend/administrator/reviews/{reviewId}/snapshots","method":"get","description":"List all snapshots (user moments/photos) associated with a specific product review entity. Response is paginated and contains all fields mapped from aimall_backend_snapshots, filtered to match the supplied review.\n\nPermissions: Only authenticated users may access. Results are visibility-scoped, so private or restricted snapshots are filtered according to business logic and user role. Falls back to empty page if the review or its snapshots are missing.","summary":"List all snapshots attached to a specific product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"The unique identifier of the review whose snapshots are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of snapshot records linked to the review.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Provides a paginated and filterable search over review-linked snapshots, implementing the snapshot filtering and search pattern for product reviews. The search body may specify filter criteria based on media properties, owner, etc. Built on aimall_backend_snapshots with foreign key to aimall_backend_reviews. Returns matching snapshot models.","path":"/aimall-backend/customer/reviews/{reviewId}/snapshots","method":"patch","description":"Advanced, filterable search API for user snapshots associated with a review. Supports filtering by format, user, or timeline for flexible review moment display management.\n\nBusiness rules per aimall_backend_snapshots are applied and schema-based filter parameters are available in the request model. Result set is always paginated and access-checked for permissions.","summary":"Advanced search and filter of snapshots for a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Target review's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot search and filter request for review-linked media.","typeName":"IAimallBackendSnapshot.IRequest"},"responseBody":{"description":"Paginated page of snapshot records matching the review and filter.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Provides a paginated and filterable search over review-linked snapshots, implementing the snapshot filtering and search pattern for product reviews. The search body may specify filter criteria based on media properties, owner, etc. Built on aimall_backend_snapshots with foreign key to aimall_backend_reviews. Returns matching snapshot models.","path":"/aimall-backend/seller/reviews/{reviewId}/snapshots","method":"patch","description":"Advanced, filterable search API for user snapshots associated with a review. Supports filtering by format, user, or timeline for flexible review moment display management.\n\nBusiness rules per aimall_backend_snapshots are applied and schema-based filter parameters are available in the request model. Result set is always paginated and access-checked for permissions.","summary":"Advanced search and filter of snapshots for a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Target review's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot search and filter request for review-linked media.","typeName":"IAimallBackendSnapshot.IRequest"},"responseBody":{"description":"Paginated page of snapshot records matching the review and filter.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"Provides a paginated and filterable search over review-linked snapshots, implementing the snapshot filtering and search pattern for product reviews. The search body may specify filter criteria based on media properties, owner, etc. Built on aimall_backend_snapshots with foreign key to aimall_backend_reviews. Returns matching snapshot models.","path":"/aimall-backend/administrator/reviews/{reviewId}/snapshots","method":"patch","description":"Advanced, filterable search API for user snapshots associated with a review. Supports filtering by format, user, or timeline for flexible review moment display management.\n\nBusiness rules per aimall_backend_snapshots are applied and schema-based filter parameters are available in the request model. Result set is always paginated and access-checked for permissions.","summary":"Advanced search and filter of snapshots for a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Target review's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot search and filter request for review-linked media.","typeName":"IAimallBackendSnapshot.IRequest"},"responseBody":{"description":"Paginated page of snapshot records matching the review and filter.","typeName":"IPageIAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves details for a specific snapshot attached to a target product review. Requires both reviewId and snapshotId as path parameters. Underlying data is from aimall_backend_snapshots, foreign-keyed to the relevant review. Permissions restrict access to snapshot and enforce business rules (visibility, auth, etc.).","path":"/aimall-backend/customer/reviews/{reviewId}/snapshots/{snapshotId}","method":"get","description":"Return all fields of a single snapshot record, belonging to a specified review. Validates foreign key relationship between review and snapshot. Returns 404 if not found, adheres to review-specific permissions and snapshot scoping, as modeled in the schema.\n\nAuthorization ensures only permitted users access the data, with visibility controlled as per roles and business logic.","summary":"Retrieve details for a single snapshot attached to a review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Unique identifier for the review parent entity.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"The unique identifier of the snapshot record being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot entity linked to the review.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieves details for a specific snapshot attached to a target product review. Requires both reviewId and snapshotId as path parameters. Underlying data is from aimall_backend_snapshots, foreign-keyed to the relevant review. Permissions restrict access to snapshot and enforce business rules (visibility, auth, etc.).","path":"/aimall-backend/seller/reviews/{reviewId}/snapshots/{snapshotId}","method":"get","description":"Return all fields of a single snapshot record, belonging to a specified review. Validates foreign key relationship between review and snapshot. Returns 404 if not found, adheres to review-specific permissions and snapshot scoping, as modeled in the schema.\n\nAuthorization ensures only permitted users access the data, with visibility controlled as per roles and business logic.","summary":"Retrieve details for a single snapshot attached to a review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Unique identifier for the review parent entity.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"The unique identifier of the snapshot record being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot entity linked to the review.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieves details for a specific snapshot attached to a target product review. Requires both reviewId and snapshotId as path parameters. Underlying data is from aimall_backend_snapshots, foreign-keyed to the relevant review. Permissions restrict access to snapshot and enforce business rules (visibility, auth, etc.).","path":"/aimall-backend/administrator/reviews/{reviewId}/snapshots/{snapshotId}","method":"get","description":"Return all fields of a single snapshot record, belonging to a specified review. Validates foreign key relationship between review and snapshot. Returns 404 if not found, adheres to review-specific permissions and snapshot scoping, as modeled in the schema.\n\nAuthorization ensures only permitted users access the data, with visibility controlled as per roles and business logic.","summary":"Retrieve details for a single snapshot attached to a review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Unique identifier for the review parent entity.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"The unique identifier of the snapshot record being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot entity linked to the review.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Adds a new snapshot/media moment to a specified product review. The operation creates a new aimall_backend_snapshots row with required fields and enforces the review_id foreign key relationship. Input validation, file URI assurance, and audit logging are managed via business/process rules. Only authenticated users may create new snapshots. Record creation timestamp is handled on the server.","path":"/aimall-backend/customer/reviews/{reviewId}/snapshots","method":"post","description":"Create/upload a new snapshot (user photo, media) for a specific product review. Accepts all required and optional fields permitted by aimall_backend_snapshots, including review linkage, media URI, and optional caption.\n\nPermissions: Only authenticated users can add snapshots to reviews. Audit and moderation processes are triggered. On success, returns the complete entity as persisted.","summary":"Create a new media snapshot for a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Target review's unique identifier for new snapshot linkage.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required for creating a new media snapshot for a review.","typeName":"IAimallBackendSnapshot.ICreate"},"responseBody":{"description":"The new snapshot entity as stored in the database.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Adds a new snapshot/media moment to a specified product review. The operation creates a new aimall_backend_snapshots row with required fields and enforces the review_id foreign key relationship. Input validation, file URI assurance, and audit logging are managed via business/process rules. Only authenticated users may create new snapshots. Record creation timestamp is handled on the server.","path":"/aimall-backend/seller/reviews/{reviewId}/snapshots","method":"post","description":"Create/upload a new snapshot (user photo, media) for a specific product review. Accepts all required and optional fields permitted by aimall_backend_snapshots, including review linkage, media URI, and optional caption.\n\nPermissions: Only authenticated users can add snapshots to reviews. Audit and moderation processes are triggered. On success, returns the complete entity as persisted.","summary":"Create a new media snapshot for a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Target review's unique identifier for new snapshot linkage.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required for creating a new media snapshot for a review.","typeName":"IAimallBackendSnapshot.ICreate"},"responseBody":{"description":"The new snapshot entity as stored in the database.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Adds a new snapshot/media moment to a specified product review. The operation creates a new aimall_backend_snapshots row with required fields and enforces the review_id foreign key relationship. Input validation, file URI assurance, and audit logging are managed via business/process rules. Only authenticated users may create new snapshots. Record creation timestamp is handled on the server.","path":"/aimall-backend/administrator/reviews/{reviewId}/snapshots","method":"post","description":"Create/upload a new snapshot (user photo, media) for a specific product review. Accepts all required and optional fields permitted by aimall_backend_snapshots, including review linkage, media URI, and optional caption.\n\nPermissions: Only authenticated users can add snapshots to reviews. Audit and moderation processes are triggered. On success, returns the complete entity as persisted.","summary":"Create a new media snapshot for a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Target review's unique identifier for new snapshot linkage.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required for creating a new media snapshot for a review.","typeName":"IAimallBackendSnapshot.ICreate"},"responseBody":{"description":"The new snapshot entity as stored in the database.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing review-linked snapshot, identified by reviewId and snapshotId. Implements full or partial replacement of fields, referential integrity checks, and business logic for owner or admin-editable updates. Underlying schema is aimall_backend_snapshots. Permissions enforced for ownership. Allows updating media URI, caption, or other mutable fields. Timestamps the update event appropriately.","path":"/aimall-backend/customer/reviews/{reviewId}/snapshots/{snapshotId}","method":"put","description":"Update fields of a snapshot attached to a specified product review. Fields updateable per underlying schema (e.g., media URI, caption).\n\nPermission checks enforce that only the snapshot owner or administrators can perform updates. If reviewId or snapshotId is invalid, returns 404. Result is the complete, updated snapshot entity.","summary":"Update an existing snapshot attached to a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Review's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"The unique identifier for the snapshot to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Body containing snapshot fields that can be updated (e.g., media URI, caption).","typeName":"IAimallBackendSnapshot.IUpdate"},"responseBody":{"description":"Updated snapshot entity structure.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates an existing review-linked snapshot, identified by reviewId and snapshotId. Implements full or partial replacement of fields, referential integrity checks, and business logic for owner or admin-editable updates. Underlying schema is aimall_backend_snapshots. Permissions enforced for ownership. Allows updating media URI, caption, or other mutable fields. Timestamps the update event appropriately.","path":"/aimall-backend/seller/reviews/{reviewId}/snapshots/{snapshotId}","method":"put","description":"Update fields of a snapshot attached to a specified product review. Fields updateable per underlying schema (e.g., media URI, caption).\n\nPermission checks enforce that only the snapshot owner or administrators can perform updates. If reviewId or snapshotId is invalid, returns 404. Result is the complete, updated snapshot entity.","summary":"Update an existing snapshot attached to a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Review's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"The unique identifier for the snapshot to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Body containing snapshot fields that can be updated (e.g., media URI, caption).","typeName":"IAimallBackendSnapshot.IUpdate"},"responseBody":{"description":"Updated snapshot entity structure.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Updates an existing review-linked snapshot, identified by reviewId and snapshotId. Implements full or partial replacement of fields, referential integrity checks, and business logic for owner or admin-editable updates. Underlying schema is aimall_backend_snapshots. Permissions enforced for ownership. Allows updating media URI, caption, or other mutable fields. Timestamps the update event appropriately.","path":"/aimall-backend/administrator/reviews/{reviewId}/snapshots/{snapshotId}","method":"put","description":"Update fields of a snapshot attached to a specified product review. Fields updateable per underlying schema (e.g., media URI, caption).\n\nPermission checks enforce that only the snapshot owner or administrators can perform updates. If reviewId or snapshotId is invalid, returns 404. Result is the complete, updated snapshot entity.","summary":"Update an existing snapshot attached to a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Review's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"The unique identifier for the snapshot to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Body containing snapshot fields that can be updated (e.g., media URI, caption).","typeName":"IAimallBackendSnapshot.IUpdate"},"responseBody":{"description":"Updated snapshot entity structure.","typeName":"IAimallBackendSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes an existing snapshot media record from a product review. Uses reviewId and snapshotId for identification. Enforces permission checks per schema referring to ownership or role. If the schema supports soft-deletion (audit trail), the record is archived; otherwise, it is deleted from the database. Returns 404 if not found.","path":"/aimall-backend/customer/reviews/{reviewId}/snapshots/{snapshotId}","method":"delete","description":"Delete or archive a snapshot record linked to a review, using reviewId and snapshotId for record identification. Checks permissions and ownership before proceeding, per schema's business rules.\n\nImplements soft delete if defined in model; else, performs hard deletion from aimall_backend_snapshots. Only authorized users/permissions may perform this action. A 404 is returned if the snapshot doesn't exist.","summary":"Delete an existing snapshot attached to a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Review's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Snapshot's unique identifier for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes an existing snapshot media record from a product review. Uses reviewId and snapshotId for identification. Enforces permission checks per schema referring to ownership or role. If the schema supports soft-deletion (audit trail), the record is archived; otherwise, it is deleted from the database. Returns 404 if not found.","path":"/aimall-backend/seller/reviews/{reviewId}/snapshots/{snapshotId}","method":"delete","description":"Delete or archive a snapshot record linked to a review, using reviewId and snapshotId for record identification. Checks permissions and ownership before proceeding, per schema's business rules.\n\nImplements soft delete if defined in model; else, performs hard deletion from aimall_backend_snapshots. Only authorized users/permissions may perform this action. A 404 is returned if the snapshot doesn't exist.","summary":"Delete an existing snapshot attached to a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Review's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Snapshot's unique identifier for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes an existing snapshot media record from a product review. Uses reviewId and snapshotId for identification. Enforces permission checks per schema referring to ownership or role. If the schema supports soft-deletion (audit trail), the record is archived; otherwise, it is deleted from the database. Returns 404 if not found.","path":"/aimall-backend/administrator/reviews/{reviewId}/snapshots/{snapshotId}","method":"delete","description":"Delete or archive a snapshot record linked to a review, using reviewId and snapshotId for record identification. Checks permissions and ownership before proceeding, per schema's business rules.\n\nImplements soft delete if defined in model; else, performs hard deletion from aimall_backend_snapshots. Only authorized users/permissions may perform this action. A 404 is returned if the snapshot doesn't exist.","summary":"Delete an existing snapshot attached to a product review (aimall_backend_snapshots).","parameters":[{"name":"reviewId","description":"Review's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Snapshot's unique identifier for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a paginated list of shopping carts, supporting the need for administrative overview, user self-management, or dashboard/cart analytics. The operation is mapped to the aimall_backend_carts table in the Prisma schema and provides access to all cart metadata. The listing is expected to support high-concurrency and system compliance for audit and analytics. Only 3NF-compliant, atomic fields are included; per-customer and session-token uniqueness constraints from the schema apply.","path":"/aimall-backend/administrator/carts","method":"get","description":"Retrieve a list of shopping carts from the aimall_backend_carts table. This endpoint supplies comprehensive information on every cart, including primary key, owner customer ID (nullable for guest carts), session tokens (for anonymous carts), and metadata like creation and update timestamps. Pagination or filtering may be implemented via query string in the service layer.\n\nSecurity and privacy considerations are paramount — customers may only view their own carts, while administrators may require expanded permissions to monitor system-wide activity. This API does not allow cart modifications; it is used solely for retrieval purposes.\n\nRelated endpoints may include PATCH /carts for advanced searches or analytics, or nested routes for retrieving individual cart items or merging carts. Error handling should cover authorization boundary violations and invalid access attempts, especially in multi-tenant/guest session use cases.","summary":"Retrieve a list of all shopping carts (aimall_backend_carts).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of shopping cart summary information based on aimall_backend_carts.","typeName":"IPageIAimallBackendCart"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation enables advanced searching, filtering, and paginated retrieval of shopping carts with complex query parameters. It interacts with the aimall_backend_carts table in the Prisma schema and supports use cases such as operational monitoring (admin), customer self-listing, and account/session troubleshooting. Typical filters include by customer_id, session_token, timestamps, etc. Result data is strictly 3NF, directly mapped from atomic schema fields.","path":"/aimall-backend/administrator/carts","method":"patch","description":"Search and retrieve a filtered and paginated list of shopping carts using advanced criteria. The request body accommodates complex search logic: filter by customer ID, session token, creation/update date, and other scalar fields from aimall_backend_carts. This endpoint enhances system scalability by providing efficient querying without exposing sensitive cart contents directly.\n\nSecurity is enforced such that regular users may only search for their own carts, while admins can operate across all. This endpoint is related to GET /carts for basic listings, and may be paired with related endpoints for fetching detailed item data. Pagination parameters are strongly advised for high-volume installations.\n\nThe response returns a structured, paged summary of matching carts, and errors include inappropriate access, invalid query structure, or excessive request volume.","summary":"Paginated and filtered search of shopping carts (aimall_backend_carts).","parameters":[],"requestBody":{"description":"Search criteria, filtering, and pagination parameters for shopping cart retrieval.","typeName":"IAimallBackendCart.IRequest"},"responseBody":{"description":"Paginated, filtered list of cart summaries as found in aimall_backend_carts.","typeName":"IPageIAimallBackendCart"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation retrieves full details of a specific shopping cart by its unique identifier. It accesses all atomic fields of the cart as specified in the aimall_backend_carts Prisma schema, including customer and session linkage, timestamps, and cart status. Intended for situations where users or admins need to review, validate, or diagnose a specific shopping cart instance. This operation enforces strict path parameter compliance with the schema's UUID primary key.","path":"/aimall-backend/customer/carts/{cartId}","method":"get","description":"Fetch details of a single shopping cart by its unique identifier. This endpoint returns all defined fields for an individual cart record, such as cart ID, owner customer ID or session token (for anonymous carts), and timestamps. User authorization restricts customers to their own carts—admins may access any.\n\nThis operation complements listing and search endpoints and supports troubleshooting or UX flows like cart restoration post-login/session. Returns error for invalid UUID or unauthorized access.\n\nDesigned for strict access control and audit logging in all requested operations. Tied directly to the aimall_backend_carts entity and responsible for detailed inspection of cart-level metadata.","summary":"Retrieve a single shopping cart by cartId (aimall_backend_carts primary key).","parameters":[{"name":"cartId","description":"Unique identifier (UUID) for the target shopping cart.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete cart details as recorded in aimall_backend_carts.","typeName":"IAimallBackendCart"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"This operation retrieves full details of a specific shopping cart by its unique identifier. It accesses all atomic fields of the cart as specified in the aimall_backend_carts Prisma schema, including customer and session linkage, timestamps, and cart status. Intended for situations where users or admins need to review, validate, or diagnose a specific shopping cart instance. This operation enforces strict path parameter compliance with the schema's UUID primary key.","path":"/aimall-backend/administrator/carts/{cartId}","method":"get","description":"Fetch details of a single shopping cart by its unique identifier. This endpoint returns all defined fields for an individual cart record, such as cart ID, owner customer ID or session token (for anonymous carts), and timestamps. User authorization restricts customers to their own carts—admins may access any.\n\nThis operation complements listing and search endpoints and supports troubleshooting or UX flows like cart restoration post-login/session. Returns error for invalid UUID or unauthorized access.\n\nDesigned for strict access control and audit logging in all requested operations. Tied directly to the aimall_backend_carts entity and responsible for detailed inspection of cart-level metadata.","summary":"Retrieve a single shopping cart by cartId (aimall_backend_carts primary key).","parameters":[{"name":"cartId","description":"Unique identifier (UUID) for the target shopping cart.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete cart details as recorded in aimall_backend_carts.","typeName":"IAimallBackendCart"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new shopping cart, as per the requirements for persistent or guest cart session management. It maps to the aimall_backend_carts table in the Prisma schema, requiring all needed atomic fields (owner customer ID or session token—one required). Responsible for establishing a cart for session use, supporting both logged-in user and anonymous flows. Assignment of default timestamps is handled by the persistence layer. All application-level uniqueness and 3NF requirements are observed.","path":"/aimall-backend/customer/carts","method":"post","description":"Create a new shopping cart instance, assigning it either to a customer (using customer_id) or to an anonymous session (using session_token). This operation ensures that only one active cart exists per customer or session in accordance with unique constraints in the aimall_backend_carts schema.\n\nRequires validation that input does not violate uniqueness rules: customer_id and/or session_token must not already have an active cart. Created_at/updated_at timestamps are assigned automatically. Security logic ensures a customer can only create their own cart; administrators may create carts for troubleshooting or UX recovery flows.\n\nThe created cart's ID and all assigned fields are returned. Related endpoints include PUT/DELETE for modification/removal and PATCH for advanced searching/listing.","summary":"Create a new shopping cart (aimall_backend_carts).","parameters":[],"requestBody":{"description":"Creation info for the new shopping cart, including required UUID associations.","typeName":"IAimallBackendCart.ICreate"},"responseBody":{"description":"The newly created cart data as saved in aimall_backend_carts.","typeName":"IAimallBackendCart"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"This operation creates a new shopping cart, as per the requirements for persistent or guest cart session management. It maps to the aimall_backend_carts table in the Prisma schema, requiring all needed atomic fields (owner customer ID or session token—one required). Responsible for establishing a cart for session use, supporting both logged-in user and anonymous flows. Assignment of default timestamps is handled by the persistence layer. All application-level uniqueness and 3NF requirements are observed.","path":"/aimall-backend/administrator/carts","method":"post","description":"Create a new shopping cart instance, assigning it either to a customer (using customer_id) or to an anonymous session (using session_token). This operation ensures that only one active cart exists per customer or session in accordance with unique constraints in the aimall_backend_carts schema.\n\nRequires validation that input does not violate uniqueness rules: customer_id and/or session_token must not already have an active cart. Created_at/updated_at timestamps are assigned automatically. Security logic ensures a customer can only create their own cart; administrators may create carts for troubleshooting or UX recovery flows.\n\nThe created cart's ID and all assigned fields are returned. Related endpoints include PUT/DELETE for modification/removal and PATCH for advanced searching/listing.","summary":"Create a new shopping cart (aimall_backend_carts).","parameters":[],"requestBody":{"description":"Creation info for the new shopping cart, including required UUID associations.","typeName":"IAimallBackendCart.ICreate"},"responseBody":{"description":"The newly created cart data as saved in aimall_backend_carts.","typeName":"IAimallBackendCart"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates an existing shopping cart, using the aimall_backend_carts table in the Prisma schema. The unique cartId path parameter identifies the record to update. Accepts any updatable atomic field (e.g., session_token, updated_at) based on business logic. Ensures 3NF compliance and uniqueness constraints on customer_id and session_token persisted. Only authorized modification to own cart or by admin is permitted.","path":"/aimall-backend/customer/carts/{cartId}","method":"put","description":"Modify the details of an existing shopping cart (by UUID). Permits updating permissible fields such as session_token or relational info, subject to schema uniqueness and business rules. The request validates cartId existence and ownership prior to application of updates.\n\nUnauthorized actions are rejected—only cart owner or admin can update. Any field constraints (e.g., unique session_token, customer_id mapping) must be respected. Updated_at is set to the update time. Supports UX flows like cart recovery, customer session merge, or administrative correction.","summary":"Update a shopping cart instance by cartId (aimall_backend_carts).","parameters":[{"name":"cartId","description":"UUID of the shopping cart to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update for the target cart.","typeName":"IAimallBackendCart.IUpdate"},"responseBody":{"description":"The updated cart record after modification.","typeName":"IAimallBackendCart"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"This operation updates an existing shopping cart, using the aimall_backend_carts table in the Prisma schema. The unique cartId path parameter identifies the record to update. Accepts any updatable atomic field (e.g., session_token, updated_at) based on business logic. Ensures 3NF compliance and uniqueness constraints on customer_id and session_token persisted. Only authorized modification to own cart or by admin is permitted.","path":"/aimall-backend/administrator/carts/{cartId}","method":"put","description":"Modify the details of an existing shopping cart (by UUID). Permits updating permissible fields such as session_token or relational info, subject to schema uniqueness and business rules. The request validates cartId existence and ownership prior to application of updates.\n\nUnauthorized actions are rejected—only cart owner or admin can update. Any field constraints (e.g., unique session_token, customer_id mapping) must be respected. Updated_at is set to the update time. Supports UX flows like cart recovery, customer session merge, or administrative correction.","summary":"Update a shopping cart instance by cartId (aimall_backend_carts).","parameters":[{"name":"cartId","description":"UUID of the shopping cart to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update for the target cart.","typeName":"IAimallBackendCart.IUpdate"},"responseBody":{"description":"The updated cart record after modification.","typeName":"IAimallBackendCart"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes a specific shopping cart by its unique identifier (UUID), using the aimall_backend_carts table. Hard delete is performed as there is no soft delete field in schema. All associated cart items are also deleted via cascading relation. For security and compliance, only allowed users (cart owner or admin) may delete, and appropriate audit logging is assumed.","path":"/aimall-backend/customer/carts/{cartId}","method":"delete","description":"Remove a shopping cart identified by UUID. This is a hard delete operation, as the aimall_backend_carts schema does not define any soft deletion strategy. Related cart items are automatically removed via cascading relations defined in the schema.\n\nDelete operations validate user authorization (owner or admin only). Attempts to delete non-existent or unauthorized carts result in error. Deletion is irreversible and logged for compliance and audit. Used for cart abandonment cleanup, session invalidation, or admin troubleshooting.","summary":"Delete a shopping cart by cartId (aimall_backend_carts).","parameters":[{"name":"cartId","description":"UUID of the shopping cart to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"This operation deletes a specific shopping cart by its unique identifier (UUID), using the aimall_backend_carts table. Hard delete is performed as there is no soft delete field in schema. All associated cart items are also deleted via cascading relation. For security and compliance, only allowed users (cart owner or admin) may delete, and appropriate audit logging is assumed.","path":"/aimall-backend/administrator/carts/{cartId}","method":"delete","description":"Remove a shopping cart identified by UUID. This is a hard delete operation, as the aimall_backend_carts schema does not define any soft deletion strategy. Related cart items are automatically removed via cascading relations defined in the schema.\n\nDelete operations validate user authorization (owner or admin only). Attempts to delete non-existent or unauthorized carts result in error. Deletion is irreversible and logged for compliance and audit. Used for cart abandonment cleanup, session invalidation, or admin troubleshooting.","summary":"Delete a shopping cart by cartId (aimall_backend_carts).","parameters":[{"name":"cartId","description":"UUID of the shopping cart to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Lists all cart items belonging to a specific shopping cart, using the cart-to-item relationship defined in the aimall_backend_cart_items and aimall_backend_carts tables. Allows customers (and possibly admin) to see every item in a given cart. Implements 3NF compliance by returning cart-item records only, leveraging cascading relations and ownership verification.","path":"/aimall-backend/customer/carts/{cartId}/cartItems","method":"get","description":"Retrieve all items associated with a specific shopping cart, identified by cartId. This endpoint supports user shopping, cart review displays, and administrative troubleshooting, returning only atomic item data from aimall_backend_cart_items.\n\nAuthorization checks prevent customers from accessing non-owned carts or items. Returns an array or paginated list of cart items, with detailed metadata as defined by the schema. Related endpoints include POST for item creation, PUT for item update, and DELETE for removal.","summary":"List all items in a shopping cart by cartId (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the parent shopping cart.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all items within the specified shopping cart, referencing aimall_backend_cart_items.","typeName":"IPageIAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Lists all cart items belonging to a specific shopping cart, using the cart-to-item relationship defined in the aimall_backend_cart_items and aimall_backend_carts tables. Allows customers (and possibly admin) to see every item in a given cart. Implements 3NF compliance by returning cart-item records only, leveraging cascading relations and ownership verification.","path":"/aimall-backend/administrator/carts/{cartId}/cartItems","method":"get","description":"Retrieve all items associated with a specific shopping cart, identified by cartId. This endpoint supports user shopping, cart review displays, and administrative troubleshooting, returning only atomic item data from aimall_backend_cart_items.\n\nAuthorization checks prevent customers from accessing non-owned carts or items. Returns an array or paginated list of cart items, with detailed metadata as defined by the schema. Related endpoints include POST for item creation, PUT for item update, and DELETE for removal.","summary":"List all items in a shopping cart by cartId (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the parent shopping cart.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List of all items within the specified shopping cart, referencing aimall_backend_cart_items.","typeName":"IPageIAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Provides advanced search/filtering for all items in a single cart, matching specified criteria. Operates over aimall_backend_cart_items filtered by parent cartId. Request body enables queries on product ID, SKU, timestamps, quantity, etc. Returns paginated, filtered result. Strictly 3NF based on the schema, all output is atomic field data.","path":"/aimall-backend/customer/carts/{cartId}/cartItems","method":"patch","description":"Enables paged and filtered search of all cart items within a particular cart specified by cartId. Advanced queries may include searching by specific product, options, SKUs, or date/time. Only atomic fields defined in the aimall_backend_cart_items schema should be referenced.\n\nRequires parent cart ownership validation or admin privilege. Outputs paginated result of all matching cart items. Can be used for complex UX, admin audits, or troubleshooting scenarios. Error scenarios include unauthorized access, invalid cartId, or invalid search criteria.","summary":"Filtered, paginated search of cart items within a cart (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the shopping cart for item search.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for cart item querying.","typeName":"IAimallBackendCartItem.IRequest"},"responseBody":{"description":"Paginated, filtered list of matching cart items in the specified cart.","typeName":"IPageIAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Provides advanced search/filtering for all items in a single cart, matching specified criteria. Operates over aimall_backend_cart_items filtered by parent cartId. Request body enables queries on product ID, SKU, timestamps, quantity, etc. Returns paginated, filtered result. Strictly 3NF based on the schema, all output is atomic field data.","path":"/aimall-backend/administrator/carts/{cartId}/cartItems","method":"patch","description":"Enables paged and filtered search of all cart items within a particular cart specified by cartId. Advanced queries may include searching by specific product, options, SKUs, or date/time. Only atomic fields defined in the aimall_backend_cart_items schema should be referenced.\n\nRequires parent cart ownership validation or admin privilege. Outputs paginated result of all matching cart items. Can be used for complex UX, admin audits, or troubleshooting scenarios. Error scenarios include unauthorized access, invalid cartId, or invalid search criteria.","summary":"Filtered, paginated search of cart items within a cart (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the shopping cart for item search.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for cart item querying.","typeName":"IAimallBackendCartItem.IRequest"},"responseBody":{"description":"Paginated, filtered list of matching cart items in the specified cart.","typeName":"IPageIAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves the details for a specific cart item within a shopping cart. Uses the cascading relation from aimall_backend_carts → aimall_backend_cart_items and enforces precise UUID matching on both. Returns all atomic fields of the target item. Intended for advanced cart review and admin troubleshooting cases. Ownership and access checks enforced.","path":"/aimall-backend/customer/carts/{cartId}/cartItems/{cartItemId}","method":"get","description":"Fetches all details for a single cart item in a shopping cart. Both cartId (parent) and cartItemId (item PK) are required (UUIDs). Returns all defined fields for the item (product/product_option/SKU/quantity/unit_price_snapshot/etc.) as per the aimall_backend_cart_items schema.\n\nEndpoint enforces strict access policy—customers can only view their own carts/items. Used for item review, diagnostics, and UX recovery. Related endpoints include PUT for updating the item and DELETE for removal. Error handling covers invalid IDs or unauthorized access.","summary":"Retrieve details of a specific cart item in a cart by itemId (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the parent shopping cart.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the target cart item.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete cart item record as stored in aimall_backend_cart_items.","typeName":"IAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieves the details for a specific cart item within a shopping cart. Uses the cascading relation from aimall_backend_carts → aimall_backend_cart_items and enforces precise UUID matching on both. Returns all atomic fields of the target item. Intended for advanced cart review and admin troubleshooting cases. Ownership and access checks enforced.","path":"/aimall-backend/administrator/carts/{cartId}/cartItems/{cartItemId}","method":"get","description":"Fetches all details for a single cart item in a shopping cart. Both cartId (parent) and cartItemId (item PK) are required (UUIDs). Returns all defined fields for the item (product/product_option/SKU/quantity/unit_price_snapshot/etc.) as per the aimall_backend_cart_items schema.\n\nEndpoint enforces strict access policy—customers can only view their own carts/items. Used for item review, diagnostics, and UX recovery. Related endpoints include PUT for updating the item and DELETE for removal. Error handling covers invalid IDs or unauthorized access.","summary":"Retrieve details of a specific cart item in a cart by itemId (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the parent shopping cart.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the target cart item.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete cart item record as stored in aimall_backend_cart_items.","typeName":"IAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new shopping cart item (e.g., add a product/option/SKU to the cart), with strict validation to avoid duplicate entries for the same product/option/SKU combination, per unique constraints in the aimall_backend_cart_items schema. Parent cartId must exist; ownership and business rules enforced. Atomic field/relationship population only—no derived or summary data handled. Returns new item record.","path":"/aimall-backend/customer/carts/{cartId}/cartItems","method":"post","description":"Add a new item to an existing shopping cart. The parent cart is indicated by cartId (UUID); request body includes all required atomic fields for the cart item per aimall_backend_cart_items schema (product_id, quantity, unit_price_snapshot, and optional option/SKU references). Application logic must enforce unique constraint on cart+product+option+SKU combination.\n\nAuthorization verifies cart ownership. On success, returns the full cart item record as stored. Used for normal shopping addition, guest-to-account cart merge, and admin troubleshooting/config.","summary":"Add a new item to a shopping cart (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the target shopping cart to which the item is added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Detail information for the cart item to be created (added to the cart).","typeName":"IAimallBackendCartItem.ICreate"},"responseBody":{"description":"The new item as created in aimall_backend_cart_items.","typeName":"IAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Create a new shopping cart item (e.g., add a product/option/SKU to the cart), with strict validation to avoid duplicate entries for the same product/option/SKU combination, per unique constraints in the aimall_backend_cart_items schema. Parent cartId must exist; ownership and business rules enforced. Atomic field/relationship population only—no derived or summary data handled. Returns new item record.","path":"/aimall-backend/administrator/carts/{cartId}/cartItems","method":"post","description":"Add a new item to an existing shopping cart. The parent cart is indicated by cartId (UUID); request body includes all required atomic fields for the cart item per aimall_backend_cart_items schema (product_id, quantity, unit_price_snapshot, and optional option/SKU references). Application logic must enforce unique constraint on cart+product+option+SKU combination.\n\nAuthorization verifies cart ownership. On success, returns the full cart item record as stored. Used for normal shopping addition, guest-to-account cart merge, and admin troubleshooting/config.","summary":"Add a new item to a shopping cart (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the target shopping cart to which the item is added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Detail information for the cart item to be created (added to the cart).","typeName":"IAimallBackendCartItem.ICreate"},"responseBody":{"description":"The new item as created in aimall_backend_cart_items.","typeName":"IAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates a specific cart item (e.g., adjust quantity, change SKU) in the cart. The target is specified by cartId (parent) and cartItemId (item PK). Applies business and schema-level constraints—unique per product/option/SKU within a cart. Only updatable atomic fields included. Strict access/ownership validation, timestamp update required. Returns updated cart item data.","path":"/aimall-backend/customer/carts/{cartId}/cartItems/{cartItemId}","method":"put","description":"Update details of a specific cart item, such as quantity, product option, or price snapshot. cartId and cartItemId (UUIDs) uniquely identify target. The request body defines updatable fields as allowed by the aimall_backend_cart_items schema.\n\nOnly item owner or admin may perform update. Business logic ensures compliance with unique items constraint and cart-item/option relationships. Returns updated item record. Use cases include quantity adjustment, product option change, and admin item management.","summary":"Update a specific item in a shopping cart (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the parent shopping cart.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the cart item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update for the target cart item.","typeName":"IAimallBackendCartItem.IUpdate"},"responseBody":{"description":"The updated record for the cart item after modification.","typeName":"IAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates a specific cart item (e.g., adjust quantity, change SKU) in the cart. The target is specified by cartId (parent) and cartItemId (item PK). Applies business and schema-level constraints—unique per product/option/SKU within a cart. Only updatable atomic fields included. Strict access/ownership validation, timestamp update required. Returns updated cart item data.","path":"/aimall-backend/administrator/carts/{cartId}/cartItems/{cartItemId}","method":"put","description":"Update details of a specific cart item, such as quantity, product option, or price snapshot. cartId and cartItemId (UUIDs) uniquely identify target. The request body defines updatable fields as allowed by the aimall_backend_cart_items schema.\n\nOnly item owner or admin may perform update. Business logic ensures compliance with unique items constraint and cart-item/option relationships. Returns updated item record. Use cases include quantity adjustment, product option change, and admin item management.","summary":"Update a specific item in a shopping cart (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the parent shopping cart.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the cart item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update for the target cart item.","typeName":"IAimallBackendCartItem.IUpdate"},"responseBody":{"description":"The updated record for the cart item after modification.","typeName":"IAimallBackendCartItem"},"authorizationRoles":["customer","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes a specific item from a shopping cart, using parent cartId and cartItemId for strict identification. Uses aimall_backend_cart_items schema (hard delete—no soft delete present). Only the owner of the cart or an admin can perform the operation. Used for normal cart management or administrative troubleshooting/cleanup. All application/relationship constraints enforced.","path":"/aimall-backend/customer/carts/{cartId}/cartItems/{cartItemId}","method":"delete","description":"Remove a single item from a shopping cart. Strictly operates as a hard delete based on absence of any soft delete or status fields in the aimall_backend_cart_items schema. cartId (parent) and cartItemId (item PK) are both UUIDs and must be validated.\n\nOperation is restricted to the cart/item owner or administrators. Used for normal shopping cart management/UX or for cleaning up carts in helpdesk/admin workflows. Deleted item is instantly removed with no recovery. Related endpoints: PUT for updates, POST for addition.","summary":"Delete a specific item from a shopping cart (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the parent shopping cart.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the cart item to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes a specific item from a shopping cart, using parent cartId and cartItemId for strict identification. Uses aimall_backend_cart_items schema (hard delete—no soft delete present). Only the owner of the cart or an admin can perform the operation. Used for normal cart management or administrative troubleshooting/cleanup. All application/relationship constraints enforced.","path":"/aimall-backend/administrator/carts/{cartId}/cartItems/{cartItemId}","method":"delete","description":"Remove a single item from a shopping cart. Strictly operates as a hard delete based on absence of any soft delete or status fields in the aimall_backend_cart_items schema. cartId (parent) and cartItemId (item PK) are both UUIDs and must be validated.\n\nOperation is restricted to the cart/item owner or administrators. Used for normal shopping cart management/UX or for cleaning up carts in helpdesk/admin workflows. Deleted item is instantly removed with no recovery. Related endpoints: PUT for updates, POST for addition.","summary":"Delete a specific item from a shopping cart (aimall_backend_cart_items).","parameters":[{"name":"cartId","description":"UUID of the parent shopping cart.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the cart item to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a paginated list of all orders in the system, with basic filtering and sorting. It is associated with the 'aimall_backend_orders' table in the Prisma schema and is used mainly by sellers and administrators to monitor, audit, or analyze orders. Returned information reflects order-level fields including customer, seller, address references, status, and timestamps. It is designed for summary-level viewing and can be extended with search or advanced query support as needed. Security ensures only authorized users with seller or administrator roles can access potentially sensitive order information.","path":"/aimall-backend/administrator/orders","method":"get","description":"Fetches a paginated listing of all order records in the platform for administrative or seller operational use. Results include summary-level details directly mapped from the 'aimall_backend_orders' table, such as order numbers, customer and seller references, status, total amount, and creation/update timestamps. \n\nAccess to this endpoint is permissioned for administrators and sellers only, due to the sensitivity of customer, fulfillment, and financial data. Data returned is strictly limited to what is available from the database and does not incorporate any calculated fields or denormalized aggregates.\n\nRelated endpoints include search/filter endpoints, order item detail queries, and order mutation APIs. Security audits and error handling ensure all accesses and failures (such as overreaching permissions or record not found) are logged for compliance. The response data structure mirrors the Prisma order table definition and is intended for list view or dashboard consumption.","summary":"Retrieve a paginated summary list of all orders (Orders table)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of main order information for all available orders.","typeName":"IPageIAimallBackendOrder"},"authorizationRoles":["administrator","seller"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation retrieves a paginated list of all orders in the system, with basic filtering and sorting. It is associated with the 'aimall_backend_orders' table in the Prisma schema and is used mainly by sellers and administrators to monitor, audit, or analyze orders. Returned information reflects order-level fields including customer, seller, address references, status, and timestamps. It is designed for summary-level viewing and can be extended with search or advanced query support as needed. Security ensures only authorized users with seller or administrator roles can access potentially sensitive order information.","path":"/aimall-backend/seller/orders","method":"get","description":"Fetches a paginated listing of all order records in the platform for administrative or seller operational use. Results include summary-level details directly mapped from the 'aimall_backend_orders' table, such as order numbers, customer and seller references, status, total amount, and creation/update timestamps. \n\nAccess to this endpoint is permissioned for administrators and sellers only, due to the sensitivity of customer, fulfillment, and financial data. Data returned is strictly limited to what is available from the database and does not incorporate any calculated fields or denormalized aggregates.\n\nRelated endpoints include search/filter endpoints, order item detail queries, and order mutation APIs. Security audits and error handling ensure all accesses and failures (such as overreaching permissions or record not found) are logged for compliance. The response data structure mirrors the Prisma order table definition and is intended for list view or dashboard consumption.","summary":"Retrieve a paginated summary list of all orders (Orders table)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of main order information for all available orders.","typeName":"IPageIAimallBackendOrder"},"authorizationRoles":["administrator","seller"],"name":"index","authorizationRole":"seller"},{"specification":"This operation provides advanced searching, filtering, and pagination for orders based on complex query criteria. It utilizes the 'aimall_backend_orders' table and supports options such as search by status, customer, seller, date ranges, and more. Used primarily for operational dashboards, reporting, or data analytics by sellers and administrators. The request body allows for detailed querying/filtering parameters.","path":"/aimall-backend/administrator/orders","method":"patch","description":"Provides granular searching and filtering the order records across the platform. Enables complex operations such as querying by order status, seller/customer, creation/update timestamps, and supports sorting and paginated data retrieval. \n\nSecurity: Access restricted to administrator and seller roles due to business-sensitive order data. Only fields explicitly present in the underlying Prisma model are filterable or sortable; custom aggregates or derived fields are not included. \n\nBest used in analytic reporting, case management back office, or sales review workflows. Errors are handled for invalid filter syntax or unauthorized access. Related APIs allow detail lookup by order ID, order update and cancellation, and order item management.","summary":"Advanced order search with filtering and pagination (Orders table)","parameters":[],"requestBody":{"description":"Order search/filter and pagination parameters.","typeName":"IAimallBackendOrder.IRequest"},"responseBody":{"description":"Paginated search results including matching orders with all filterable fields.","typeName":"IPageIAimallBackendOrder"},"authorizationRoles":["administrator","seller"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation provides advanced searching, filtering, and pagination for orders based on complex query criteria. It utilizes the 'aimall_backend_orders' table and supports options such as search by status, customer, seller, date ranges, and more. Used primarily for operational dashboards, reporting, or data analytics by sellers and administrators. The request body allows for detailed querying/filtering parameters.","path":"/aimall-backend/seller/orders","method":"patch","description":"Provides granular searching and filtering the order records across the platform. Enables complex operations such as querying by order status, seller/customer, creation/update timestamps, and supports sorting and paginated data retrieval. \n\nSecurity: Access restricted to administrator and seller roles due to business-sensitive order data. Only fields explicitly present in the underlying Prisma model are filterable or sortable; custom aggregates or derived fields are not included. \n\nBest used in analytic reporting, case management back office, or sales review workflows. Errors are handled for invalid filter syntax or unauthorized access. Related APIs allow detail lookup by order ID, order update and cancellation, and order item management.","summary":"Advanced order search with filtering and pagination (Orders table)","parameters":[],"requestBody":{"description":"Order search/filter and pagination parameters.","typeName":"IAimallBackendOrder.IRequest"},"responseBody":{"description":"Paginated search results including matching orders with all filterable fields.","typeName":"IPageIAimallBackendOrder"},"authorizationRoles":["administrator","seller"],"name":"search","authorizationRole":"seller"},{"specification":"This operation fetches detailed information for a specific order using its unique identifier. It is associated with the 'aimall_backend_orders' table in the Prisma schema and returns the full order record including status, totals, customer and seller references, and timestamps. Used for viewing an individual order for administration, seller management, or customer service.","path":"/aimall-backend/administrator/orders/{orderId}","method":"get","description":"Retrieves the complete record for a single order as described by the 'aimall_backend_orders' schema table. Returns all atomic order details including references to customer and address, financial data, and status. Used by seller operations, administrators, or advanced customer service desks to view order details or handle escalations.\n\nAccess is controlled to prevent unauthorized reads. The API validates the provided orderId format and existence; not found or denied attempts are logged securely. Additional related data (items, payments, shipment) are available in separate, linked endpoints as per normalization best practice.","summary":"Fetch a single order's full details by ID (Orders table)","parameters":[{"name":"orderId","description":"Unique identifier (UUID) for the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full order entity as per DB definition.","typeName":"IAimallBackendOrder"},"authorizationRoles":["administrator","seller"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation fetches detailed information for a specific order using its unique identifier. It is associated with the 'aimall_backend_orders' table in the Prisma schema and returns the full order record including status, totals, customer and seller references, and timestamps. Used for viewing an individual order for administration, seller management, or customer service.","path":"/aimall-backend/seller/orders/{orderId}","method":"get","description":"Retrieves the complete record for a single order as described by the 'aimall_backend_orders' schema table. Returns all atomic order details including references to customer and address, financial data, and status. Used by seller operations, administrators, or advanced customer service desks to view order details or handle escalations.\n\nAccess is controlled to prevent unauthorized reads. The API validates the provided orderId format and existence; not found or denied attempts are logged securely. Additional related data (items, payments, shipment) are available in separate, linked endpoints as per normalization best practice.","summary":"Fetch a single order's full details by ID (Orders table)","parameters":[{"name":"orderId","description":"Unique identifier (UUID) for the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full order entity as per DB definition.","typeName":"IAimallBackendOrder"},"authorizationRoles":["administrator","seller"],"name":"at","authorizationRole":"seller"},{"specification":"Creates a new order record in the system, referencing customer, seller, and address IDs, and all required order attributes in the 'aimall_backend_orders' table. Used primarily when customers place new purchases, and by platform operators for manual order creation/testing. Input includes all necessary fields except those auto-generated (ID, timestamps).","path":"/aimall-backend/customer/orders","method":"post","description":"Creates a new order in the database, initializing required business attributes as specified in the 'aimall_backend_orders' Prisma schema. Order creation involves providing customer, seller, address, order_number (business ID), and the core order content (status, total_amount, currency).\n\nBusiness logic may auto-generate order_number if not supplied. Security checks are performed to ensure valid foreign keys (customer, seller, address), and only allowed users (authenticated customers, sellers, administrators) can submit new orders. Validation errors and role violations are handled with appropriate responses. Related APIs allow follow-up management of items, payments, and shipments.","summary":"Create a new order (Orders table)","parameters":[],"requestBody":{"description":"All business fields required to create a new order.","typeName":"IAimallBackendOrder.ICreate"},"responseBody":{"description":"The created order record with all business data and unique identifiers.","typeName":"IAimallBackendOrder"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Creates a new order record in the system, referencing customer, seller, and address IDs, and all required order attributes in the 'aimall_backend_orders' table. Used primarily when customers place new purchases, and by platform operators for manual order creation/testing. Input includes all necessary fields except those auto-generated (ID, timestamps).","path":"/aimall-backend/seller/orders","method":"post","description":"Creates a new order in the database, initializing required business attributes as specified in the 'aimall_backend_orders' Prisma schema. Order creation involves providing customer, seller, address, order_number (business ID), and the core order content (status, total_amount, currency).\n\nBusiness logic may auto-generate order_number if not supplied. Security checks are performed to ensure valid foreign keys (customer, seller, address), and only allowed users (authenticated customers, sellers, administrators) can submit new orders. Validation errors and role violations are handled with appropriate responses. Related APIs allow follow-up management of items, payments, and shipments.","summary":"Create a new order (Orders table)","parameters":[],"requestBody":{"description":"All business fields required to create a new order.","typeName":"IAimallBackendOrder.ICreate"},"responseBody":{"description":"The created order record with all business data and unique identifiers.","typeName":"IAimallBackendOrder"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new order record in the system, referencing customer, seller, and address IDs, and all required order attributes in the 'aimall_backend_orders' table. Used primarily when customers place new purchases, and by platform operators for manual order creation/testing. Input includes all necessary fields except those auto-generated (ID, timestamps).","path":"/aimall-backend/administrator/orders","method":"post","description":"Creates a new order in the database, initializing required business attributes as specified in the 'aimall_backend_orders' Prisma schema. Order creation involves providing customer, seller, address, order_number (business ID), and the core order content (status, total_amount, currency).\n\nBusiness logic may auto-generate order_number if not supplied. Security checks are performed to ensure valid foreign keys (customer, seller, address), and only allowed users (authenticated customers, sellers, administrators) can submit new orders. Validation errors and role violations are handled with appropriate responses. Related APIs allow follow-up management of items, payments, and shipments.","summary":"Create a new order (Orders table)","parameters":[],"requestBody":{"description":"All business fields required to create a new order.","typeName":"IAimallBackendOrder.ICreate"},"responseBody":{"description":"The created order record with all business data and unique identifiers.","typeName":"IAimallBackendOrder"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing order record by order ID, altering allowed fields in the 'aimall_backend_orders' table. Supports modifications to mutable order fields before archival or shipment (e.g., address, status, total). Typical use cases include correcting recipient data, updating statuses, or amending amounts. Mutations are restricted after certain business events (e.g., archiving).","path":"/aimall-backend/administrator/orders/{orderId}","method":"put","description":"Updates the details of an existing order referred to by the provided UUID, with field-level changes as per the Prisma schema. Only updatable properties (e.g., status, address, total) can be modified. Immutable fields post-archival or fulfillment are enforced by business logic/application.\n\nAuthorization ensures only the order's owning seller or relevant administrator may update order data. The API validates mutation payloads against business constraints, logs all changes for audit, and rejects disallowed field updates or attempts to modify archived records.","summary":"Update order details by ID (Orders table)","parameters":[{"name":"orderId","description":"Unique identifier (UUID) for the order to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order fields to update.","typeName":"IAimallBackendOrder.IUpdate"},"responseBody":{"description":"Updated order record as per latest data.","typeName":"IAimallBackendOrder"},"authorizationRoles":["administrator","seller"],"name":"update","authorizationRole":"administrator"},{"specification":"Updates an existing order record by order ID, altering allowed fields in the 'aimall_backend_orders' table. Supports modifications to mutable order fields before archival or shipment (e.g., address, status, total). Typical use cases include correcting recipient data, updating statuses, or amending amounts. Mutations are restricted after certain business events (e.g., archiving).","path":"/aimall-backend/seller/orders/{orderId}","method":"put","description":"Updates the details of an existing order referred to by the provided UUID, with field-level changes as per the Prisma schema. Only updatable properties (e.g., status, address, total) can be modified. Immutable fields post-archival or fulfillment are enforced by business logic/application.\n\nAuthorization ensures only the order's owning seller or relevant administrator may update order data. The API validates mutation payloads against business constraints, logs all changes for audit, and rejects disallowed field updates or attempts to modify archived records.","summary":"Update order details by ID (Orders table)","parameters":[{"name":"orderId","description":"Unique identifier (UUID) for the order to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order fields to update.","typeName":"IAimallBackendOrder.IUpdate"},"responseBody":{"description":"Updated order record as per latest data.","typeName":"IAimallBackendOrder"},"authorizationRoles":["administrator","seller"],"name":"update","authorizationRole":"seller"},{"specification":"Deletes (archives/hard-removes) an order by order ID, according to the 'aimall_backend_orders' schema. If the order record includes an 'archived_at' field, deletion sets this timestamp for logical deletion. Otherwise, hard delete removes the record. Used by platform administrators or automation for compliance, data retention, or order voiding. Deletion is only allowed for appropriate roles and only on orders not already archived or immutable.","path":"/aimall-backend/administrator/orders/{orderId}","method":"delete","description":"Deletes or archives an existing order based on the provided UUID. If the schema supports soft-delete via 'archived_at', the operation performs a logical deletion by updating this timestamp. Otherwise (if no such field), it removes the record entirely. Deletion is only possible by platform administrators, not by regular customers or sellers, and is prevented on orders already archived or outside allowed deletion windows (e.g., fulfilled orders).\n\nBusiness and security rules enforce detailed audits of all deletions. The operation never removes related records like order items, payments, or shipments, which must be handled by linked processes.","summary":"Delete/archive an order by ID (Orders table)","parameters":[{"name":"orderId","description":"UUID of the order to delete or archive.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a list of all order items for a specified order, as defined by the 'aimall_backend_order_items' table. Used to enumerate every product/option/sku included in a single order. Returns all fields present in the order item schema, with references to product, option, prices, quantities, etc. Useful for detailed order inspection, dispute handling, or fulfillment UI.","path":"/aimall-backend/administrator/orders/{orderId}/orderItems","method":"get","description":"Fetches all item lines associated with a single order, using the order's UUID. The API enumerates over all records in the 'aimall_backend_order_items' table for the specified order. Each item provides full details as per schema—product linkage, option/SKU, quantity, item and total prices.\n\nPermissioned for sellers, administrators, and owning customers. Related endpoints provide item creation, mutation, or deletion inside an order. Security ensures only actors with a business relationship to the order may view item-level detail.","summary":"List all order items for an order (Order Items table)","parameters":[{"name":"orderId","description":"The UUID of the parent order whose items are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full item-by-item list for the specified order, with product, price, and option details.","typeName":"IPageIAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"index","authorizationRole":"administrator"},{"specification":"Retrieves a list of all order items for a specified order, as defined by the 'aimall_backend_order_items' table. Used to enumerate every product/option/sku included in a single order. Returns all fields present in the order item schema, with references to product, option, prices, quantities, etc. Useful for detailed order inspection, dispute handling, or fulfillment UI.","path":"/aimall-backend/seller/orders/{orderId}/orderItems","method":"get","description":"Fetches all item lines associated with a single order, using the order's UUID. The API enumerates over all records in the 'aimall_backend_order_items' table for the specified order. Each item provides full details as per schema—product linkage, option/SKU, quantity, item and total prices.\n\nPermissioned for sellers, administrators, and owning customers. Related endpoints provide item creation, mutation, or deletion inside an order. Security ensures only actors with a business relationship to the order may view item-level detail.","summary":"List all order items for an order (Order Items table)","parameters":[{"name":"orderId","description":"The UUID of the parent order whose items are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full item-by-item list for the specified order, with product, price, and option details.","typeName":"IPageIAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"index","authorizationRole":"seller"},{"specification":"Retrieves a list of all order items for a specified order, as defined by the 'aimall_backend_order_items' table. Used to enumerate every product/option/sku included in a single order. Returns all fields present in the order item schema, with references to product, option, prices, quantities, etc. Useful for detailed order inspection, dispute handling, or fulfillment UI.","path":"/aimall-backend/customer/orders/{orderId}/orderItems","method":"get","description":"Fetches all item lines associated with a single order, using the order's UUID. The API enumerates over all records in the 'aimall_backend_order_items' table for the specified order. Each item provides full details as per schema—product linkage, option/SKU, quantity, item and total prices.\n\nPermissioned for sellers, administrators, and owning customers. Related endpoints provide item creation, mutation, or deletion inside an order. Security ensures only actors with a business relationship to the order may view item-level detail.","summary":"List all order items for an order (Order Items table)","parameters":[{"name":"orderId","description":"The UUID of the parent order whose items are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full item-by-item list for the specified order, with product, price, and option details.","typeName":"IPageIAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"index","authorizationRole":"customer"},{"specification":"Performs advanced search/filtering on order items for a specific order, supporting detailed queries on products, options, quantities, and price ranges. Implements deep inspection for reporting, analytics, or fulfillment scenario. Leverages request body parameters for flexible querying, in alignment with the 'aimall_backend_order_items' schema. Also supports pagination and sorting.","path":"/aimall-backend/administrator/orders/{orderId}/orderItems","method":"patch","description":"Allows advanced searching and filtering among all item lines of a specified order. Enables queries such as filtering by product, SKU, quantity, or item price. Best suited for administrative, seller, or analytic case management; full support for pagination and complex search as per request body parameters. Results mirror the relation schema fields exactly.\n\nOnly accessible to actors with rights to the parent order, ensuring all item-level queries are scoped in business logic.","summary":"Search/filter order items for a specific order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order whose items are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter and pagination parameters for order items within an order.","typeName":"IAimallBackendOrderItem.IRequest"},"responseBody":{"description":"Paginated search result for order's items.","typeName":"IPageIAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"search","authorizationRole":"administrator"},{"specification":"Performs advanced search/filtering on order items for a specific order, supporting detailed queries on products, options, quantities, and price ranges. Implements deep inspection for reporting, analytics, or fulfillment scenario. Leverages request body parameters for flexible querying, in alignment with the 'aimall_backend_order_items' schema. Also supports pagination and sorting.","path":"/aimall-backend/seller/orders/{orderId}/orderItems","method":"patch","description":"Allows advanced searching and filtering among all item lines of a specified order. Enables queries such as filtering by product, SKU, quantity, or item price. Best suited for administrative, seller, or analytic case management; full support for pagination and complex search as per request body parameters. Results mirror the relation schema fields exactly.\n\nOnly accessible to actors with rights to the parent order, ensuring all item-level queries are scoped in business logic.","summary":"Search/filter order items for a specific order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order whose items are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter and pagination parameters for order items within an order.","typeName":"IAimallBackendOrderItem.IRequest"},"responseBody":{"description":"Paginated search result for order's items.","typeName":"IPageIAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"search","authorizationRole":"seller"},{"specification":"Performs advanced search/filtering on order items for a specific order, supporting detailed queries on products, options, quantities, and price ranges. Implements deep inspection for reporting, analytics, or fulfillment scenario. Leverages request body parameters for flexible querying, in alignment with the 'aimall_backend_order_items' schema. Also supports pagination and sorting.","path":"/aimall-backend/customer/orders/{orderId}/orderItems","method":"patch","description":"Allows advanced searching and filtering among all item lines of a specified order. Enables queries such as filtering by product, SKU, quantity, or item price. Best suited for administrative, seller, or analytic case management; full support for pagination and complex search as per request body parameters. Results mirror the relation schema fields exactly.\n\nOnly accessible to actors with rights to the parent order, ensuring all item-level queries are scoped in business logic.","summary":"Search/filter order items for a specific order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order whose items are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter and pagination parameters for order items within an order.","typeName":"IAimallBackendOrderItem.IRequest"},"responseBody":{"description":"Paginated search result for order's items.","typeName":"IPageIAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"search","authorizationRole":"customer"},{"specification":"Fetches the full detail for a single order item line within a specified parent order. Operates on the 'aimall_backend_order_items' table and is strictly scoped by both order and item UUIDs for data integrity. Used for customer service issue resolution, analytics, or item-level update preparation.","path":"/aimall-backend/administrator/orders/{orderId}/orderItems/{orderItemId}","method":"get","description":"Gets the complete atomic details for a single order item, restricted to users/roles with access to its parent order. Returns the exact schema structure for one item: product, option (if applicable), item name, quantity, and all price fields. Used by order inspection, returns/replacement processing, or fulfillment dashboards.\n\nEndpoint validates both parent order and order item existence before loading, and blocks access unless the actor has rights to both.","summary":"Retrieve details of a single order item in an order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order to which the item belongs.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full entity for the referenced order item.","typeName":"IAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"at","authorizationRole":"administrator"},{"specification":"Fetches the full detail for a single order item line within a specified parent order. Operates on the 'aimall_backend_order_items' table and is strictly scoped by both order and item UUIDs for data integrity. Used for customer service issue resolution, analytics, or item-level update preparation.","path":"/aimall-backend/seller/orders/{orderId}/orderItems/{orderItemId}","method":"get","description":"Gets the complete atomic details for a single order item, restricted to users/roles with access to its parent order. Returns the exact schema structure for one item: product, option (if applicable), item name, quantity, and all price fields. Used by order inspection, returns/replacement processing, or fulfillment dashboards.\n\nEndpoint validates both parent order and order item existence before loading, and blocks access unless the actor has rights to both.","summary":"Retrieve details of a single order item in an order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order to which the item belongs.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full entity for the referenced order item.","typeName":"IAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"at","authorizationRole":"seller"},{"specification":"Fetches the full detail for a single order item line within a specified parent order. Operates on the 'aimall_backend_order_items' table and is strictly scoped by both order and item UUIDs for data integrity. Used for customer service issue resolution, analytics, or item-level update preparation.","path":"/aimall-backend/customer/orders/{orderId}/orderItems/{orderItemId}","method":"get","description":"Gets the complete atomic details for a single order item, restricted to users/roles with access to its parent order. Returns the exact schema structure for one item: product, option (if applicable), item name, quantity, and all price fields. Used by order inspection, returns/replacement processing, or fulfillment dashboards.\n\nEndpoint validates both parent order and order item existence before loading, and blocks access unless the actor has rights to both.","summary":"Retrieve details of a single order item in an order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order to which the item belongs.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full entity for the referenced order item.","typeName":"IAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"at","authorizationRole":"customer"},{"specification":"Creates a new item within an existing order, by supplying product, option/sku, quantity, and all fields as specified in the 'aimall_backend_order_items' table. Permits manual amendment to orders, typically by sellers, administrators, or advanced customer workflows. Validation ensures the parent order exists and isn’t immutable (fulfilled, archived, etc.).","path":"/aimall-backend/administrator/orders/{orderId}/orderItems","method":"post","description":"Adds a new order item line to an existing order using the parent order's UUID. Input payload must supply all fields as per the 'aimall_backend_order_items' schema (product, SKU/option, item name, quantity, unit/total price). Use case includes administrator corrections, seller adjustment after customer request, or test data.\n\nOrder state is validated to reject additions for immutable or already delivered orders. Permissions ensure only sellers/administrators and the owning customer (where allowed) may mutate items in an open order.","summary":"Add a new order item to an order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the order to which a new item is added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to create an order item.","typeName":"IAimallBackendOrderItem.ICreate"},"responseBody":{"description":"The newly created order item record.","typeName":"IAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"create","authorizationRole":"administrator"},{"specification":"Creates a new item within an existing order, by supplying product, option/sku, quantity, and all fields as specified in the 'aimall_backend_order_items' table. Permits manual amendment to orders, typically by sellers, administrators, or advanced customer workflows. Validation ensures the parent order exists and isn’t immutable (fulfilled, archived, etc.).","path":"/aimall-backend/seller/orders/{orderId}/orderItems","method":"post","description":"Adds a new order item line to an existing order using the parent order's UUID. Input payload must supply all fields as per the 'aimall_backend_order_items' schema (product, SKU/option, item name, quantity, unit/total price). Use case includes administrator corrections, seller adjustment after customer request, or test data.\n\nOrder state is validated to reject additions for immutable or already delivered orders. Permissions ensure only sellers/administrators and the owning customer (where allowed) may mutate items in an open order.","summary":"Add a new order item to an order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the order to which a new item is added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to create an order item.","typeName":"IAimallBackendOrderItem.ICreate"},"responseBody":{"description":"The newly created order item record.","typeName":"IAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new item within an existing order, by supplying product, option/sku, quantity, and all fields as specified in the 'aimall_backend_order_items' table. Permits manual amendment to orders, typically by sellers, administrators, or advanced customer workflows. Validation ensures the parent order exists and isn’t immutable (fulfilled, archived, etc.).","path":"/aimall-backend/customer/orders/{orderId}/orderItems","method":"post","description":"Adds a new order item line to an existing order using the parent order's UUID. Input payload must supply all fields as per the 'aimall_backend_order_items' schema (product, SKU/option, item name, quantity, unit/total price). Use case includes administrator corrections, seller adjustment after customer request, or test data.\n\nOrder state is validated to reject additions for immutable or already delivered orders. Permissions ensure only sellers/administrators and the owning customer (where allowed) may mutate items in an open order.","summary":"Add a new order item to an order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the order to which a new item is added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to create an order item.","typeName":"IAimallBackendOrderItem.ICreate"},"responseBody":{"description":"The newly created order item record.","typeName":"IAimallBackendOrderItem"},"authorizationRoles":["administrator","seller","customer"],"name":"create","authorizationRole":"customer"},{"specification":"Updates an existing order item within a given order. Operates on both orderId and orderItemId for full data integrity. Only fields as defined in the 'aimall_backend_order_items' table can be altered, and only in orders that have not been finalized/archived. Used mainly by sellers/administrators for post-order corrections in limited states (e.g., quantity adjustment before shipment).","path":"/aimall-backend/administrator/orders/{orderId}/orderItems/{orderItemId}","method":"put","description":"Edits the details of a specific order item, as referenced by both parent order and item UUIDs. Only attributes present in the corresponding schema (product, option, quantity, name, prices) may be modified. The mutation is disallowed for finalized/archived orders. Permissions are checked for the seller of record, administrators, or customers where policies permit.\n\nAll updates are logged for audit/compliance. Endpoint strictly validates the linkage between provided orderId and orderItemId, and returns errors if these do not match or are not found.","summary":"Update details of an order item (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order containing the item to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the referenced order item.","typeName":"IAimallBackendOrderItem.IUpdate"},"responseBody":{"description":"The updated order item as per current record.","typeName":"IAimallBackendOrderItem"},"authorizationRoles":["administrator","seller"],"name":"update","authorizationRole":"administrator"},{"specification":"Updates an existing order item within a given order. Operates on both orderId and orderItemId for full data integrity. Only fields as defined in the 'aimall_backend_order_items' table can be altered, and only in orders that have not been finalized/archived. Used mainly by sellers/administrators for post-order corrections in limited states (e.g., quantity adjustment before shipment).","path":"/aimall-backend/seller/orders/{orderId}/orderItems/{orderItemId}","method":"put","description":"Edits the details of a specific order item, as referenced by both parent order and item UUIDs. Only attributes present in the corresponding schema (product, option, quantity, name, prices) may be modified. The mutation is disallowed for finalized/archived orders. Permissions are checked for the seller of record, administrators, or customers where policies permit.\n\nAll updates are logged for audit/compliance. Endpoint strictly validates the linkage between provided orderId and orderItemId, and returns errors if these do not match or are not found.","summary":"Update details of an order item (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order containing the item to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the referenced order item.","typeName":"IAimallBackendOrderItem.IUpdate"},"responseBody":{"description":"The updated order item as per current record.","typeName":"IAimallBackendOrderItem"},"authorizationRoles":["administrator","seller"],"name":"update","authorizationRole":"seller"},{"specification":"Deletes (removes) an individual order item from within a specific order by its item ID. Operates on 'aimall_backend_order_items' for the given parent order and item. Only allowed for open (non-archived/delivered) orders by sellers, administrators, or customers with correct permission. Checks order and item association before executing for fail-safety.","path":"/aimall-backend/administrator/orders/{orderId}/orderItems/{orderItemId}","method":"delete","description":"Removes a single order item line from a given order record, specified by both parent order UUID and order item UUID. Only possible if the parent order is open and mutable. The action does not affect the parent order's existence but will cause recalculation of total amounts in subsequent operations.\n\nPermitted for sellers/administrators and, in some business workflows, the order-owning customer. Operation returns an appropriate confirmation or error if not found or not permissible.","summary":"Delete/remove a single order item from an order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order from which the item will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator","seller","customer"],"name":"erase","authorizationRole":"administrator"},{"specification":"Deletes (removes) an individual order item from within a specific order by its item ID. Operates on 'aimall_backend_order_items' for the given parent order and item. Only allowed for open (non-archived/delivered) orders by sellers, administrators, or customers with correct permission. Checks order and item association before executing for fail-safety.","path":"/aimall-backend/seller/orders/{orderId}/orderItems/{orderItemId}","method":"delete","description":"Removes a single order item line from a given order record, specified by both parent order UUID and order item UUID. Only possible if the parent order is open and mutable. The action does not affect the parent order's existence but will cause recalculation of total amounts in subsequent operations.\n\nPermitted for sellers/administrators and, in some business workflows, the order-owning customer. Operation returns an appropriate confirmation or error if not found or not permissible.","summary":"Delete/remove a single order item from an order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order from which the item will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator","seller","customer"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes (removes) an individual order item from within a specific order by its item ID. Operates on 'aimall_backend_order_items' for the given parent order and item. Only allowed for open (non-archived/delivered) orders by sellers, administrators, or customers with correct permission. Checks order and item association before executing for fail-safety.","path":"/aimall-backend/customer/orders/{orderId}/orderItems/{orderItemId}","method":"delete","description":"Removes a single order item line from a given order record, specified by both parent order UUID and order item UUID. Only possible if the parent order is open and mutable. The action does not affect the parent order's existence but will cause recalculation of total amounts in subsequent operations.\n\nPermitted for sellers/administrators and, in some business workflows, the order-owning customer. Operation returns an appropriate confirmation or error if not found or not permissible.","summary":"Delete/remove a single order item from an order (Order Items table)","parameters":[{"name":"orderId","description":"UUID of the parent order from which the item will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator","seller","customer"],"name":"erase","authorizationRole":"customer"},{"specification":"This API retrieves all payment transactions associated with a specific order. It interfaces with the aimall_backend_payments table, which stores individual payment events for each order processed by the system. The endpoint supports use cases such as displaying all payments (including multiple forms like split payments, loyalty points, coupons, etc.) for an order, reconciliation of transaction records, and audit/compliance reporting. Relationships to the aimall_backend_orders table are managed via the order_id path parameter, ensuring only payments relevant to the referenced order are returned. Only authorized users (typically the order's owner, seller, or an administrator) may access payment details. The response structure provides full detail per payment, including amounts, currency, payment methods, and unique transaction ids.","path":"/aimall-backend/customer/orders/{orderId}/payments","method":"get","description":"Retrieve a list of all payment transactions made for a specific order from the aimall_backend_payments table. This operation enables the querying of multiple types of payment events tied to a single order, reflecting the real-world scenario where an order may be paid through several different channels (e.g., credit card, coupon, points). By providing the orderId as a path parameter, users can access all related payment records, which support business audit, reporting, and reconciliation.\n\nAccess is strictly enforced: only users with appropriate roles (the ordering customer, involved seller, or platform administrator) are authorized to view payment details, ensuring no leakage of transaction or PII data. This endpoint is commonly paired with order retrieval and payment audit tools for robust financial tracking.","summary":"Retrieve a list of payment transactions for the specified order from aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose payments are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A list of payment records for the specified order.","typeName":"IPageIAimallBackendPayment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"This API retrieves all payment transactions associated with a specific order. It interfaces with the aimall_backend_payments table, which stores individual payment events for each order processed by the system. The endpoint supports use cases such as displaying all payments (including multiple forms like split payments, loyalty points, coupons, etc.) for an order, reconciliation of transaction records, and audit/compliance reporting. Relationships to the aimall_backend_orders table are managed via the order_id path parameter, ensuring only payments relevant to the referenced order are returned. Only authorized users (typically the order's owner, seller, or an administrator) may access payment details. The response structure provides full detail per payment, including amounts, currency, payment methods, and unique transaction ids.","path":"/aimall-backend/seller/orders/{orderId}/payments","method":"get","description":"Retrieve a list of all payment transactions made for a specific order from the aimall_backend_payments table. This operation enables the querying of multiple types of payment events tied to a single order, reflecting the real-world scenario where an order may be paid through several different channels (e.g., credit card, coupon, points). By providing the orderId as a path parameter, users can access all related payment records, which support business audit, reporting, and reconciliation.\n\nAccess is strictly enforced: only users with appropriate roles (the ordering customer, involved seller, or platform administrator) are authorized to view payment details, ensuring no leakage of transaction or PII data. This endpoint is commonly paired with order retrieval and payment audit tools for robust financial tracking.","summary":"Retrieve a list of payment transactions for the specified order from aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose payments are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A list of payment records for the specified order.","typeName":"IPageIAimallBackendPayment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"This API retrieves all payment transactions associated with a specific order. It interfaces with the aimall_backend_payments table, which stores individual payment events for each order processed by the system. The endpoint supports use cases such as displaying all payments (including multiple forms like split payments, loyalty points, coupons, etc.) for an order, reconciliation of transaction records, and audit/compliance reporting. Relationships to the aimall_backend_orders table are managed via the order_id path parameter, ensuring only payments relevant to the referenced order are returned. Only authorized users (typically the order's owner, seller, or an administrator) may access payment details. The response structure provides full detail per payment, including amounts, currency, payment methods, and unique transaction ids.","path":"/aimall-backend/administrator/orders/{orderId}/payments","method":"get","description":"Retrieve a list of all payment transactions made for a specific order from the aimall_backend_payments table. This operation enables the querying of multiple types of payment events tied to a single order, reflecting the real-world scenario where an order may be paid through several different channels (e.g., credit card, coupon, points). By providing the orderId as a path parameter, users can access all related payment records, which support business audit, reporting, and reconciliation.\n\nAccess is strictly enforced: only users with appropriate roles (the ordering customer, involved seller, or platform administrator) are authorized to view payment details, ensuring no leakage of transaction or PII data. This endpoint is commonly paired with order retrieval and payment audit tools for robust financial tracking.","summary":"Retrieve a list of payment transactions for the specified order from aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose payments are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A list of payment records for the specified order.","typeName":"IPageIAimallBackendPayment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This API enables the retrieval of a filtered, paginated list of payment transactions for a given order, matching flexible query/search criteria. It operates on the aimall_backend_payments table, allowing finance and admin users to search, filter by payment method, status, or amount, and sort the results as needed. Pagination and advanced filters are particularly useful for orders with complex or high-volume financial activity. The request body follows the IAimallBackendPayment.IRequest structure for flexible search and analytics use cases.","path":"/aimall-backend/administrator/orders/{orderId}/payments","method":"patch","description":"Search and filter payment transactions associated with a specific order using advanced query parameters. This API allows administrators and financial auditors to query the aimall_backend_payments table for all transactions related to an order, with filter capabilities such as payment method type, payment amount range, currency, or paid_at timestamp.\n\nSecurity is critical: only order owners, sellers involved with the order, or platform administrators should be able to access and search payment transaction data. This endpoint supports audit scenarios and financial investigation workflows, and is particularly important for resolving disputes or confirming proper handling of split payments and coupons.\n\nFiltering by payment properties in the request body improves efficiency and accuracy for operational finance staff.","summary":"Advanced search and filter of payment transactions for a given order in aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the order that the payments are linked to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria for filtering order payment transactions, supporting pagination and advanced filtering.","typeName":"IAimallBackendPayment.IRequest"},"responseBody":{"description":"Paginated list of payments matching the search/filtering criteria.","typeName":"IPageIAimallBackendPayment"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This API retrieves the details of a single payment transaction associated with a specific order, leveraging the aimall_backend_payments table. It is designed for financial detail display, customer receipts, refund handling, and compliance verification. Path parameters orderId and paymentId identify the parent order and the unique payment event. Only users with an appropriate business relationship (order owner, seller, or admin) may access the individual payment record, reinforcing privacy and audit requirements.","path":"/aimall-backend/customer/orders/{orderId}/payments/{paymentId}","method":"get","description":"Fetch the details of a specific payment tied to an order from the aimall_backend_payments table. This operation supports scenarios including detailed customer receipts, refund request validation, and financial audit investigations. The endpoint requires both orderId and paymentId via path, ensuring linkage and data integrity.\n\nAppropriate access control is enforced to prohibit unauthorized viewing of sensitive payment details. Combined with the payment list endpoints, this API forms the basis of robust financial transparency and customer service functions.","summary":"Retrieve detailed information about a specific payment for an order from aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the specific payment transaction to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the payment record associated with the given order.","typeName":"IAimallBackendPayment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"This API retrieves the details of a single payment transaction associated with a specific order, leveraging the aimall_backend_payments table. It is designed for financial detail display, customer receipts, refund handling, and compliance verification. Path parameters orderId and paymentId identify the parent order and the unique payment event. Only users with an appropriate business relationship (order owner, seller, or admin) may access the individual payment record, reinforcing privacy and audit requirements.","path":"/aimall-backend/seller/orders/{orderId}/payments/{paymentId}","method":"get","description":"Fetch the details of a specific payment tied to an order from the aimall_backend_payments table. This operation supports scenarios including detailed customer receipts, refund request validation, and financial audit investigations. The endpoint requires both orderId and paymentId via path, ensuring linkage and data integrity.\n\nAppropriate access control is enforced to prohibit unauthorized viewing of sensitive payment details. Combined with the payment list endpoints, this API forms the basis of robust financial transparency and customer service functions.","summary":"Retrieve detailed information about a specific payment for an order from aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the specific payment transaction to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the payment record associated with the given order.","typeName":"IAimallBackendPayment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"This API retrieves the details of a single payment transaction associated with a specific order, leveraging the aimall_backend_payments table. It is designed for financial detail display, customer receipts, refund handling, and compliance verification. Path parameters orderId and paymentId identify the parent order and the unique payment event. Only users with an appropriate business relationship (order owner, seller, or admin) may access the individual payment record, reinforcing privacy and audit requirements.","path":"/aimall-backend/administrator/orders/{orderId}/payments/{paymentId}","method":"get","description":"Fetch the details of a specific payment tied to an order from the aimall_backend_payments table. This operation supports scenarios including detailed customer receipts, refund request validation, and financial audit investigations. The endpoint requires both orderId and paymentId via path, ensuring linkage and data integrity.\n\nAppropriate access control is enforced to prohibit unauthorized viewing of sensitive payment details. Combined with the payment list endpoints, this API forms the basis of robust financial transparency and customer service functions.","summary":"Retrieve detailed information about a specific payment for an order from aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the specific payment transaction to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the payment record associated with the given order.","typeName":"IAimallBackendPayment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This API creates a new payment transaction under a given order in the aimall_backend_payments table. The client supplies payment details (method, amount, currency, transaction_id, etc.) in the IAimallBackendPayment.ICreate request body. Typical use cases include initial payment, coupon application, loyalty points redemption, or split payment scenarios. Upon success, it returns the created payment object. Only authorized actors (order owner or seller) can create payment records, supporting secure transaction flows. Business rules validate the sum-to-total constraint against the order total.","path":"/aimall-backend/customer/orders/{orderId}/payments","method":"post","description":"Create a new payment transaction for a specific order by submitting full payment details (method, amount, currency, optional external TX code) in the request body. The payment is linked to the specified order using the orderId path parameter. Only parties directly involved in the order (usually the customer or the seller) are permitted to use this endpoint, protecting financial integrity and preventing unauthorized billing events.\n\nBusiness validation ensures the cumulative payment amount matches the expected order total after payment creation. The returned response body provides the complete payment record, linking to follow-up actions such as refunds or transaction confirmation.","summary":"Create a payment transaction associated with the specified order in aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order under which the payment is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment transaction creation data, including method, amount, and currency.","typeName":"IAimallBackendPayment.ICreate"},"responseBody":{"description":"The successfully created payment object for the order.","typeName":"IAimallBackendPayment"},"authorizationRoles":["customer","seller"],"name":"create","authorizationRole":"customer"},{"specification":"This API creates a new payment transaction under a given order in the aimall_backend_payments table. The client supplies payment details (method, amount, currency, transaction_id, etc.) in the IAimallBackendPayment.ICreate request body. Typical use cases include initial payment, coupon application, loyalty points redemption, or split payment scenarios. Upon success, it returns the created payment object. Only authorized actors (order owner or seller) can create payment records, supporting secure transaction flows. Business rules validate the sum-to-total constraint against the order total.","path":"/aimall-backend/seller/orders/{orderId}/payments","method":"post","description":"Create a new payment transaction for a specific order by submitting full payment details (method, amount, currency, optional external TX code) in the request body. The payment is linked to the specified order using the orderId path parameter. Only parties directly involved in the order (usually the customer or the seller) are permitted to use this endpoint, protecting financial integrity and preventing unauthorized billing events.\n\nBusiness validation ensures the cumulative payment amount matches the expected order total after payment creation. The returned response body provides the complete payment record, linking to follow-up actions such as refunds or transaction confirmation.","summary":"Create a payment transaction associated with the specified order in aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order under which the payment is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment transaction creation data, including method, amount, and currency.","typeName":"IAimallBackendPayment.ICreate"},"responseBody":{"description":"The successfully created payment object for the order.","typeName":"IAimallBackendPayment"},"authorizationRoles":["customer","seller"],"name":"create","authorizationRole":"seller"},{"specification":"This API updates an existing payment transaction for a given order in the aimall_backend_payments table. The client supplies updated details (e.g., payment method, transaction ID, or correction of typographical errors) via the IAimallBackendPayment.IUpdate request body. Business rules restrict which fields can be updated (for example, payment amount is typically immutable after completion). This function supports error correction, status updates, and compliance-driven info updates. Strong access control ensures only authorized users (order owner, seller, or admin) can perform updates.","path":"/aimall-backend/administrator/orders/{orderId}/payments/{paymentId}","method":"put","description":"Update a specific payment transaction associated with an order. Typical update scenarios include adjusting the transaction identifier, correcting payment channel metadata, or marking a payment as reconciled in the finance workflow. The target order and payment are specified by orderId and paymentId parameters. Only privileged users may invoke this endpoint, ensuring no unauthorized manipulation of payment records.\n\nThe request body provides updated payment info. The system performs validations to prevent changes to immutable financial properties such as amount or currency after payment confirmation unless authorized by admin. A successful operation returns the updated payment object.","summary":"Update information of a payment transaction for an order in aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the order.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the payment transaction to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for updating an existing payment transaction.","typeName":"IAimallBackendPayment.IUpdate"},"responseBody":{"description":"The updated payment transaction object.","typeName":"IAimallBackendPayment"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This API deletes (removes) a specific payment transaction associated with an order from the aimall_backend_payments table. Because the payment table does not have a soft-delete (deleted_at) field, this is a hard delete operation, and the payment event is permanently removed from the system. Only admin-level users or system auditors may execute this function due to the legal and audit risks involved. The operation validates that the payment is not already reconciled or part of a closed financial period prior to deletion.","path":"/aimall-backend/administrator/orders/{orderId}/payments/{paymentId}","method":"delete","description":"Permanently delete a payment transaction record from an order in the system. Since there is no 'deleted_at' or soft-delete field in the aimall_backend_payments table, this action results in a hard delete. The orderId and paymentId path parameters must both be supplied, fully identifying the payment transaction to remove.\n\nStrict access control is applied, and typically only platform administrators may invoke this endpoint. Deletion is blocked for payments that have already been reconciled in a financial close, supporting compliance and audit requirements. No content is returned on success.","summary":"Delete (hard) a payment transaction from an order in aimall_backend_payments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose payment transaction is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the payment transaction to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This API retrieves all shipment records associated with a specific order, from the aimall_backend_shipments table. It is used to display delivery progress, audit logistics, and support customer/seller queries on order fulfillment. The endpoint lists every shipment event (supporting multi-shipment, split orders) tied to the referenced order. This enables tracking of overall shipping status, carrier info, tracking numbers, and delivery timestamps. Only authorized users (order owner, seller, admin) may view this data. The response is a paginated list for orders with multiple shipment records.","path":"/aimall-backend/customer/orders/{orderId}/shipments","method":"get","description":"Retrieve all shipment records linked to a specific order. This operation provides full delivery history and logistics tracking for both customers and sellers. It queries the aimall_backend_shipments table, presenting structured details such as carrier, tracking number, shipment status, and shipping/delivery times.\n\nUser access is enforced: only the customer who placed the order, the seller fulfilling it, or an administrator may view shipment data, to protect logistics privacy and compliance requirements. The endpoint is primarily used for customer notifications, seller logistics dashboards, and admin audit purposes.","summary":"Retrieve shipments (fulfillment events) for an order from aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose shipments are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of all shipments for the specified order record.","typeName":"IPageIAimallBackendShipment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"This API retrieves all shipment records associated with a specific order, from the aimall_backend_shipments table. It is used to display delivery progress, audit logistics, and support customer/seller queries on order fulfillment. The endpoint lists every shipment event (supporting multi-shipment, split orders) tied to the referenced order. This enables tracking of overall shipping status, carrier info, tracking numbers, and delivery timestamps. Only authorized users (order owner, seller, admin) may view this data. The response is a paginated list for orders with multiple shipment records.","path":"/aimall-backend/seller/orders/{orderId}/shipments","method":"get","description":"Retrieve all shipment records linked to a specific order. This operation provides full delivery history and logistics tracking for both customers and sellers. It queries the aimall_backend_shipments table, presenting structured details such as carrier, tracking number, shipment status, and shipping/delivery times.\n\nUser access is enforced: only the customer who placed the order, the seller fulfilling it, or an administrator may view shipment data, to protect logistics privacy and compliance requirements. The endpoint is primarily used for customer notifications, seller logistics dashboards, and admin audit purposes.","summary":"Retrieve shipments (fulfillment events) for an order from aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose shipments are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of all shipments for the specified order record.","typeName":"IPageIAimallBackendShipment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"This API retrieves all shipment records associated with a specific order, from the aimall_backend_shipments table. It is used to display delivery progress, audit logistics, and support customer/seller queries on order fulfillment. The endpoint lists every shipment event (supporting multi-shipment, split orders) tied to the referenced order. This enables tracking of overall shipping status, carrier info, tracking numbers, and delivery timestamps. Only authorized users (order owner, seller, admin) may view this data. The response is a paginated list for orders with multiple shipment records.","path":"/aimall-backend/administrator/orders/{orderId}/shipments","method":"get","description":"Retrieve all shipment records linked to a specific order. This operation provides full delivery history and logistics tracking for both customers and sellers. It queries the aimall_backend_shipments table, presenting structured details such as carrier, tracking number, shipment status, and shipping/delivery times.\n\nUser access is enforced: only the customer who placed the order, the seller fulfilling it, or an administrator may view shipment data, to protect logistics privacy and compliance requirements. The endpoint is primarily used for customer notifications, seller logistics dashboards, and admin audit purposes.","summary":"Retrieve shipments (fulfillment events) for an order from aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose shipments are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of all shipments for the specified order record.","typeName":"IPageIAimallBackendShipment"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This API retrieves a paginated, filtered list of shipment records for a given order, supporting advanced search, sorting, and analytics on fulfillment data. It operates on the aimall_backend_shipments table, and the request body supports fields such as carrier, shipment_status, shipped_at/delivered_at ranges for logistics investigation or reporting. This endpoint is essential for high-volume orders or operational dashboards, helping admins, sellers, and logistic staff to analyze deliveries and compliance.","path":"/aimall-backend/administrator/orders/{orderId}/shipments","method":"patch","description":"Search, filter, and paginate shipment events for a given order from the aimall_backend_shipments table. Uses advanced filters provided in the IAimallBackendShipment.IRequest request body to support business-critical functions such as logistics audits, fulfillment SLAs, and delayed delivery investigations.\n\nStrong access control is enforced: typically reserved for admin or advanced seller users who handle high-volume logistics operations. End users only receive their own shipment info via the simpler GET endpoint. This endpoint can be integrated into analytics or compliance monitoring dashboards for the platform.","summary":"Advanced query, filter, and analytics of shipments per order in aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose shipment records are being searched and paginated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced shipment search and filter criteria, supporting pagination and sorting.","typeName":"IAimallBackendShipment.IRequest"},"responseBody":{"description":"Paginated list of shipment events matching filter/search criteria.","typeName":"IPageIAimallBackendShipment"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This API retrieves the details of a specific shipment record associated with a particular order. It accesses the aimall_backend_shipments table by orderId and shipmentId path parameters. Typical use cases include displaying shipment progress, delivery investigation, and customer or seller issue resolution. Only authorized users should be able to view individual shipment data to protect privacy. Provides full shipping info, including address, carrier, status, and timestamps.","path":"/aimall-backend/customer/orders/{orderId}/shipments/{shipmentId}","method":"get","description":"Fetch details of a specific shipment record tied to an order from aimall_backend_shipments. Used for customer notification, seller logistics tracking, and admin compliance/audit workflows. The orderId and shipmentId parameters provide full referential linkage and ensure correct data integrity. Returns structured information including carrier, tracking number, status, and timestamps for shipping events.\n\nAccess control ensures that only relevant actors may view the shipment record, supporting secure logistics and privacy requirements in e-commerce operations.","summary":"Get detailed shipment event (fulfillment) by ID for an order from aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the parent order record.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment record within the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shipment record for the given shipmentId and orderId.","typeName":"IAimallBackendShipment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"This API retrieves the details of a specific shipment record associated with a particular order. It accesses the aimall_backend_shipments table by orderId and shipmentId path parameters. Typical use cases include displaying shipment progress, delivery investigation, and customer or seller issue resolution. Only authorized users should be able to view individual shipment data to protect privacy. Provides full shipping info, including address, carrier, status, and timestamps.","path":"/aimall-backend/seller/orders/{orderId}/shipments/{shipmentId}","method":"get","description":"Fetch details of a specific shipment record tied to an order from aimall_backend_shipments. Used for customer notification, seller logistics tracking, and admin compliance/audit workflows. The orderId and shipmentId parameters provide full referential linkage and ensure correct data integrity. Returns structured information including carrier, tracking number, status, and timestamps for shipping events.\n\nAccess control ensures that only relevant actors may view the shipment record, supporting secure logistics and privacy requirements in e-commerce operations.","summary":"Get detailed shipment event (fulfillment) by ID for an order from aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the parent order record.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment record within the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shipment record for the given shipmentId and orderId.","typeName":"IAimallBackendShipment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"This API retrieves the details of a specific shipment record associated with a particular order. It accesses the aimall_backend_shipments table by orderId and shipmentId path parameters. Typical use cases include displaying shipment progress, delivery investigation, and customer or seller issue resolution. Only authorized users should be able to view individual shipment data to protect privacy. Provides full shipping info, including address, carrier, status, and timestamps.","path":"/aimall-backend/administrator/orders/{orderId}/shipments/{shipmentId}","method":"get","description":"Fetch details of a specific shipment record tied to an order from aimall_backend_shipments. Used for customer notification, seller logistics tracking, and admin compliance/audit workflows. The orderId and shipmentId parameters provide full referential linkage and ensure correct data integrity. Returns structured information including carrier, tracking number, status, and timestamps for shipping events.\n\nAccess control ensures that only relevant actors may view the shipment record, supporting secure logistics and privacy requirements in e-commerce operations.","summary":"Get detailed shipment event (fulfillment) by ID for an order from aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the parent order record.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment record within the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shipment record for the given shipmentId and orderId.","typeName":"IAimallBackendShipment"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This API creates a new shipment event for a specific order in the aimall_backend_shipments table. The client supplies comprehensive shipment details via the IAimallBackendShipment.ICreate request body, including address, carrier, tracking number, and shipment status. This endpoint is primarily used by sellers or logistics staff to add fulfillment records. Only actors with direct business relationship to the order (seller, admin) are authorized. The response provides the fully created shipment record, supporting follow-up delivery and notification processes. Business validation ensures the table's relationships and integrity.","path":"/aimall-backend/seller/orders/{orderId}/shipments","method":"post","description":"Add a new shipment record to an order by submitting fulfillment details, including destination address, carrier, tracking number, status, and shipping times. The request body must conform to the IAimallBackendShipment.ICreate structure, providing a full, atomic snapshot of the shipment event as required by audit, logistics, and compliance rules. Only authorized users, usually sellers or administrators, may create shipment records to enforce business and compliance logic.\n\nReturned data contains all shipment event properties, supporting integration to downstream notification, tracking, and audit/SLAs.","summary":"Create a shipment record for an order in aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the order to which the shipment event will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Shipment creation details: address, carrier, tracking, and status.","typeName":"IAimallBackendShipment.ICreate"},"responseBody":{"description":"The created shipment record with all properties populated.","typeName":"IAimallBackendShipment"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"This API creates a new shipment event for a specific order in the aimall_backend_shipments table. The client supplies comprehensive shipment details via the IAimallBackendShipment.ICreate request body, including address, carrier, tracking number, and shipment status. This endpoint is primarily used by sellers or logistics staff to add fulfillment records. Only actors with direct business relationship to the order (seller, admin) are authorized. The response provides the fully created shipment record, supporting follow-up delivery and notification processes. Business validation ensures the table's relationships and integrity.","path":"/aimall-backend/administrator/orders/{orderId}/shipments","method":"post","description":"Add a new shipment record to an order by submitting fulfillment details, including destination address, carrier, tracking number, status, and shipping times. The request body must conform to the IAimallBackendShipment.ICreate structure, providing a full, atomic snapshot of the shipment event as required by audit, logistics, and compliance rules. Only authorized users, usually sellers or administrators, may create shipment records to enforce business and compliance logic.\n\nReturned data contains all shipment event properties, supporting integration to downstream notification, tracking, and audit/SLAs.","summary":"Create a shipment record for an order in aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the order to which the shipment event will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Shipment creation details: address, carrier, tracking, and status.","typeName":"IAimallBackendShipment.ICreate"},"responseBody":{"description":"The created shipment record with all properties populated.","typeName":"IAimallBackendShipment"},"authorizationRoles":["seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This API updates a shipment event (e.g., delivery progress, carrier, or tracking information) for a specific order in the aimall_backend_shipments table. It requires orderId and shipmentId as path parameters, and an IAimallBackendShipment.IUpdate request body describing the updates. Typical usage includes delivery status changes (pending->shipped->delivered), updating carrier info, or correcting tracking details. Access control restricts usage to sellers and admins, and certain properties may be immutable based on business rules (e.g., no changing shipment address after shipped). Returns updated shipment record on success.","path":"/aimall-backend/seller/orders/{orderId}/shipments/{shipmentId}","method":"put","description":"Update a shipment record for an order, reflecting new information such as status updates, tracking changes, or carrier modifications. This endpoint supports operational delivery workflows and SLA compliance tracking by logistics teams and administrators. Required identifiers orderId and shipmentId ensure correct row targeting; the request body must conform to the IAimallBackendShipment.IUpdate structure. Access is restricted for compliance and logistics security.\n\nThe updated shipment record is returned, providing a full current view for dashboard and analytics integration.","summary":"Update a shipment record for a given order in aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update (e.g., carrier, tracking number, status) for the shipment record.","typeName":"IAimallBackendShipment.IUpdate"},"responseBody":{"description":"The updated shipment record for the order.","typeName":"IAimallBackendShipment"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"This API updates a shipment event (e.g., delivery progress, carrier, or tracking information) for a specific order in the aimall_backend_shipments table. It requires orderId and shipmentId as path parameters, and an IAimallBackendShipment.IUpdate request body describing the updates. Typical usage includes delivery status changes (pending->shipped->delivered), updating carrier info, or correcting tracking details. Access control restricts usage to sellers and admins, and certain properties may be immutable based on business rules (e.g., no changing shipment address after shipped). Returns updated shipment record on success.","path":"/aimall-backend/administrator/orders/{orderId}/shipments/{shipmentId}","method":"put","description":"Update a shipment record for an order, reflecting new information such as status updates, tracking changes, or carrier modifications. This endpoint supports operational delivery workflows and SLA compliance tracking by logistics teams and administrators. Required identifiers orderId and shipmentId ensure correct row targeting; the request body must conform to the IAimallBackendShipment.IUpdate structure. Access is restricted for compliance and logistics security.\n\nThe updated shipment record is returned, providing a full current view for dashboard and analytics integration.","summary":"Update a shipment record for a given order in aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the target order.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update (e.g., carrier, tracking number, status) for the shipment record.","typeName":"IAimallBackendShipment.IUpdate"},"responseBody":{"description":"The updated shipment record for the order.","typeName":"IAimallBackendShipment"},"authorizationRoles":["seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This API deletes (hard delete) a specific shipment record from the aimall_backend_shipments table, which lacks a soft delete field. The orderId and shipmentId path parameters are required to target the correct row. Deletion is immediate and irreversible, so strict access is enforced—normally only seller or admin users can invoke it. Used primarily for error correction or audit rollback scenarios. The operation blocks deletion where related downstream fulfillment or compliance rules would be violated. No content is returned for a successful operation.","path":"/aimall-backend/seller/orders/{orderId}/shipments/{shipmentId}","method":"delete","description":"Remove (hard delete) a shipment record linked to an order from the aimall_backend_shipments table. This delete is permanent due to lack of a soft-delete schema field. Only actors directly responsible for the order fulfillment (seller, admin) are permitted to invoke this endpoint. Common scenarios include error correction, fulfillment rollback, or audit-driven cleanup. Strong validation prevents removal if it impacts compliance or tracking integrity.\n\nReturns no content; success is indicated by HTTP status only.","summary":"Permanently delete (hard) a shipment record from an order in aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose shipment record is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment record to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"This API deletes (hard delete) a specific shipment record from the aimall_backend_shipments table, which lacks a soft delete field. The orderId and shipmentId path parameters are required to target the correct row. Deletion is immediate and irreversible, so strict access is enforced—normally only seller or admin users can invoke it. Used primarily for error correction or audit rollback scenarios. The operation blocks deletion where related downstream fulfillment or compliance rules would be violated. No content is returned for a successful operation.","path":"/aimall-backend/administrator/orders/{orderId}/shipments/{shipmentId}","method":"delete","description":"Remove (hard delete) a shipment record linked to an order from the aimall_backend_shipments table. This delete is permanent due to lack of a soft-delete schema field. Only actors directly responsible for the order fulfillment (seller, admin) are permitted to invoke this endpoint. Common scenarios include error correction, fulfillment rollback, or audit-driven cleanup. Strong validation prevents removal if it impacts compliance or tracking integrity.\n\nReturns no content; success is indicated by HTTP status only.","summary":"Permanently delete (hard) a shipment record from an order in aimall_backend_shipments.","parameters":[{"name":"orderId","description":"Unique identifier of the order whose shipment record is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment record to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieve all order snapshot records associated with a specific order from the 'aimall_backend_order_snapshots' table. This endpoint allows users or administrators to list the audit/history snapshots for a given order, supporting use cases such as compliance review, troubleshooting, rollback, or historical investigation. The operation is scoped to snapshots related to the provided orderId. Typical business logic will apply security and visibility checks based on the order's ownership and the requesting user's role. Supports auditing of all key state transitions (e.g., creation, modification, cancellation) for the order. This aligns with the audit trail and compliance requirements in the Order and Delivery System documentation.","path":"/aimall-backend/customer/orders/{orderId}/orderSnapshots","method":"get","description":"Fetch the full list of snapshot records for the targeted order. Each snapshot provides a point-in-time audit of the order's state, including all related items, payments, and status information, consistent with the normalized audit model of 'aimall_backend_order_snapshots'.\n\nAuthorization is typically granted to the customer who owns the order, the respective seller, and administrators with audit permissions. Sensitive historical data (such as payment details or personal information) is exposed only per role-based access controls. This ensures compliance and customer privacy.\n\nUseful for customers investigating past order events (returns, modifications), sellers tracking fulfillment history, and admins handling dispute resolution or compliance monitoring.","summary":"List all order audit snapshots for a specific order (Order Snapshots table).","parameters":[{"name":"orderId","description":"Target order's universally unique identifier (UUID) for which to retrieve all snapshot records.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all snapshot audit records related to the specified order, matching the aimall_backend_order_snapshots entity structure.","typeName":"IPageIAimallBackendOrderSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieve all order snapshot records associated with a specific order from the 'aimall_backend_order_snapshots' table. This endpoint allows users or administrators to list the audit/history snapshots for a given order, supporting use cases such as compliance review, troubleshooting, rollback, or historical investigation. The operation is scoped to snapshots related to the provided orderId. Typical business logic will apply security and visibility checks based on the order's ownership and the requesting user's role. Supports auditing of all key state transitions (e.g., creation, modification, cancellation) for the order. This aligns with the audit trail and compliance requirements in the Order and Delivery System documentation.","path":"/aimall-backend/seller/orders/{orderId}/orderSnapshots","method":"get","description":"Fetch the full list of snapshot records for the targeted order. Each snapshot provides a point-in-time audit of the order's state, including all related items, payments, and status information, consistent with the normalized audit model of 'aimall_backend_order_snapshots'.\n\nAuthorization is typically granted to the customer who owns the order, the respective seller, and administrators with audit permissions. Sensitive historical data (such as payment details or personal information) is exposed only per role-based access controls. This ensures compliance and customer privacy.\n\nUseful for customers investigating past order events (returns, modifications), sellers tracking fulfillment history, and admins handling dispute resolution or compliance monitoring.","summary":"List all order audit snapshots for a specific order (Order Snapshots table).","parameters":[{"name":"orderId","description":"Target order's universally unique identifier (UUID) for which to retrieve all snapshot records.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all snapshot audit records related to the specified order, matching the aimall_backend_order_snapshots entity structure.","typeName":"IPageIAimallBackendOrderSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"Retrieve all order snapshot records associated with a specific order from the 'aimall_backend_order_snapshots' table. This endpoint allows users or administrators to list the audit/history snapshots for a given order, supporting use cases such as compliance review, troubleshooting, rollback, or historical investigation. The operation is scoped to snapshots related to the provided orderId. Typical business logic will apply security and visibility checks based on the order's ownership and the requesting user's role. Supports auditing of all key state transitions (e.g., creation, modification, cancellation) for the order. This aligns with the audit trail and compliance requirements in the Order and Delivery System documentation.","path":"/aimall-backend/administrator/orders/{orderId}/orderSnapshots","method":"get","description":"Fetch the full list of snapshot records for the targeted order. Each snapshot provides a point-in-time audit of the order's state, including all related items, payments, and status information, consistent with the normalized audit model of 'aimall_backend_order_snapshots'.\n\nAuthorization is typically granted to the customer who owns the order, the respective seller, and administrators with audit permissions. Sensitive historical data (such as payment details or personal information) is exposed only per role-based access controls. This ensures compliance and customer privacy.\n\nUseful for customers investigating past order events (returns, modifications), sellers tracking fulfillment history, and admins handling dispute resolution or compliance monitoring.","summary":"List all order audit snapshots for a specific order (Order Snapshots table).","parameters":[{"name":"orderId","description":"Target order's universally unique identifier (UUID) for which to retrieve all snapshot records.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all snapshot audit records related to the specified order, matching the aimall_backend_order_snapshots entity structure.","typeName":"IPageIAimallBackendOrderSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Search or filter audit snapshots for a specific order in the 'aimall_backend_order_snapshots' table. Enables clients to perform advanced queries on snapshot records, incorporating pagination, time-range filtering, or snapshot type (e.g., creation, modification, cancellation). Supports compliance, fraud, and operational use cases by extracting only relevant historical state changes. Tied to the order snapshot entity (aimall_backend_order_snapshots), typically via a request body that specifies search criteria and constraints.","path":"/aimall-backend/customer/orders/{orderId}/orderSnapshots","method":"patch","description":"Perform a filtered, paginated search over the audit snapshot records for a given order. Enables clients and administrators to query for specific snapshot events—such as those within a certain date range, of particular types, or matching structured metadata as stored in the 'aimall_backend_order_snapshots' table.\n\nThe operation requires at least an orderId and may support additional filter fields (type, timestamp range, etc.) as per the request body schema. Access control mimics the GET endpoint but typically allows more granular extraction suitable for analytics and compliance.\n\nBusiness rules ensure visibility and audit constraints are enforced; admins may have broader scope, while regular users' access is limited to their own records.","summary":"Search/filter audit snapshots of a specific order (Order Snapshots table).","parameters":[{"name":"orderId","description":"Target order's universally unique identifier (UUID) to filter related snapshot records.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body specifying filtering, sorting, or pagination criteria for order snapshots.","typeName":"IAimallBackendOrderSnapshot.IRequest"},"responseBody":{"description":"Filtered and paginated order snapshot records per specified criteria.","typeName":"IPageIAimallBackendOrderSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Search or filter audit snapshots for a specific order in the 'aimall_backend_order_snapshots' table. Enables clients to perform advanced queries on snapshot records, incorporating pagination, time-range filtering, or snapshot type (e.g., creation, modification, cancellation). Supports compliance, fraud, and operational use cases by extracting only relevant historical state changes. Tied to the order snapshot entity (aimall_backend_order_snapshots), typically via a request body that specifies search criteria and constraints.","path":"/aimall-backend/seller/orders/{orderId}/orderSnapshots","method":"patch","description":"Perform a filtered, paginated search over the audit snapshot records for a given order. Enables clients and administrators to query for specific snapshot events—such as those within a certain date range, of particular types, or matching structured metadata as stored in the 'aimall_backend_order_snapshots' table.\n\nThe operation requires at least an orderId and may support additional filter fields (type, timestamp range, etc.) as per the request body schema. Access control mimics the GET endpoint but typically allows more granular extraction suitable for analytics and compliance.\n\nBusiness rules ensure visibility and audit constraints are enforced; admins may have broader scope, while regular users' access is limited to their own records.","summary":"Search/filter audit snapshots of a specific order (Order Snapshots table).","parameters":[{"name":"orderId","description":"Target order's universally unique identifier (UUID) to filter related snapshot records.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body specifying filtering, sorting, or pagination criteria for order snapshots.","typeName":"IAimallBackendOrderSnapshot.IRequest"},"responseBody":{"description":"Filtered and paginated order snapshot records per specified criteria.","typeName":"IPageIAimallBackendOrderSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"Search or filter audit snapshots for a specific order in the 'aimall_backend_order_snapshots' table. Enables clients to perform advanced queries on snapshot records, incorporating pagination, time-range filtering, or snapshot type (e.g., creation, modification, cancellation). Supports compliance, fraud, and operational use cases by extracting only relevant historical state changes. Tied to the order snapshot entity (aimall_backend_order_snapshots), typically via a request body that specifies search criteria and constraints.","path":"/aimall-backend/administrator/orders/{orderId}/orderSnapshots","method":"patch","description":"Perform a filtered, paginated search over the audit snapshot records for a given order. Enables clients and administrators to query for specific snapshot events—such as those within a certain date range, of particular types, or matching structured metadata as stored in the 'aimall_backend_order_snapshots' table.\n\nThe operation requires at least an orderId and may support additional filter fields (type, timestamp range, etc.) as per the request body schema. Access control mimics the GET endpoint but typically allows more granular extraction suitable for analytics and compliance.\n\nBusiness rules ensure visibility and audit constraints are enforced; admins may have broader scope, while regular users' access is limited to their own records.","summary":"Search/filter audit snapshots of a specific order (Order Snapshots table).","parameters":[{"name":"orderId","description":"Target order's universally unique identifier (UUID) to filter related snapshot records.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body specifying filtering, sorting, or pagination criteria for order snapshots.","typeName":"IAimallBackendOrderSnapshot.IRequest"},"responseBody":{"description":"Filtered and paginated order snapshot records per specified criteria.","typeName":"IPageIAimallBackendOrderSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Fetch a single specific snapshot (audit record) for a given order from the 'aimall_backend_order_snapshots' table. This is used to retrieve a full, point-in-time record of the order as it existed at the moment of that snapshot event, supporting auditing, investigation, rollbacks, or history display. The endpoint looks up a precise combination of (orderId, orderSnapshotId) and ensures that only authorized users may access this information. Based on strong normalization: the state is exactly as stored in the 'snapshot_data' and related atomic fields of the snapshot record.","path":"/aimall-backend/customer/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"get","description":"Retrieve a detailed snapshot record for a specified order and snapshot event. Returns the serialized history of the order at that snapshot, including all base fields and structured metadata per the 'aimall_backend_order_snapshots' schema.\n\nAccess is checked for order ownership (customer), fulfillment actor (seller), and authorized administrator. Used for compliance reviews, dispute handling, or technical support scenarios to reconstruct order state at critical points.\n\nRelated APIs: order listing, order detail, order history. Errors are returned if the snapshot or order does not exist or is not accessible by the user role.","summary":"Retrieve a single audit snapshot for an order (Order Snapshots table).","parameters":[{"name":"orderId","description":"UUID of the target order.","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"UUID identifying the specific snapshot record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full snapshot/audit record for the targeted order at a specific event/time.","typeName":"IAimallBackendOrderSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Fetch a single specific snapshot (audit record) for a given order from the 'aimall_backend_order_snapshots' table. This is used to retrieve a full, point-in-time record of the order as it existed at the moment of that snapshot event, supporting auditing, investigation, rollbacks, or history display. The endpoint looks up a precise combination of (orderId, orderSnapshotId) and ensures that only authorized users may access this information. Based on strong normalization: the state is exactly as stored in the 'snapshot_data' and related atomic fields of the snapshot record.","path":"/aimall-backend/seller/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"get","description":"Retrieve a detailed snapshot record for a specified order and snapshot event. Returns the serialized history of the order at that snapshot, including all base fields and structured metadata per the 'aimall_backend_order_snapshots' schema.\n\nAccess is checked for order ownership (customer), fulfillment actor (seller), and authorized administrator. Used for compliance reviews, dispute handling, or technical support scenarios to reconstruct order state at critical points.\n\nRelated APIs: order listing, order detail, order history. Errors are returned if the snapshot or order does not exist or is not accessible by the user role.","summary":"Retrieve a single audit snapshot for an order (Order Snapshots table).","parameters":[{"name":"orderId","description":"UUID of the target order.","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"UUID identifying the specific snapshot record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full snapshot/audit record for the targeted order at a specific event/time.","typeName":"IAimallBackendOrderSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Fetch a single specific snapshot (audit record) for a given order from the 'aimall_backend_order_snapshots' table. This is used to retrieve a full, point-in-time record of the order as it existed at the moment of that snapshot event, supporting auditing, investigation, rollbacks, or history display. The endpoint looks up a precise combination of (orderId, orderSnapshotId) and ensures that only authorized users may access this information. Based on strong normalization: the state is exactly as stored in the 'snapshot_data' and related atomic fields of the snapshot record.","path":"/aimall-backend/administrator/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"get","description":"Retrieve a detailed snapshot record for a specified order and snapshot event. Returns the serialized history of the order at that snapshot, including all base fields and structured metadata per the 'aimall_backend_order_snapshots' schema.\n\nAccess is checked for order ownership (customer), fulfillment actor (seller), and authorized administrator. Used for compliance reviews, dispute handling, or technical support scenarios to reconstruct order state at critical points.\n\nRelated APIs: order listing, order detail, order history. Errors are returned if the snapshot or order does not exist or is not accessible by the user role.","summary":"Retrieve a single audit snapshot for an order (Order Snapshots table).","parameters":[{"name":"orderId","description":"UUID of the target order.","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"UUID identifying the specific snapshot record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full snapshot/audit record for the targeted order at a specific event/time.","typeName":"IAimallBackendOrderSnapshot"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new audit trail snapshot record for a specified order in the 'aimall_backend_order_snapshots' table. This endpoint is primarily intended for use by system processes, administrative tools, or manual audit actions. It generates a full, serialized snapshot of an order's state (with associated items, payments, shipments, etc.) at a critical event, such as creation, update, cancellation, or fulfillment. Supports compliance, rollback, and operational use cases, fulfilling auditability requirements of the Order and Delivery System.","path":"/aimall-backend/administrator/orders/{orderId}/orderSnapshots","method":"post","description":"Insert (create) a new snapshot trail record for a given order. Used by admin or automated system actors during state transitions (such as state changes, dispute resolution, rollback events), to permanently record the complete state of the order at the event time.\n\nThis operation creates a full record in 'aimall_backend_order_snapshots', with structured details mapped from the source order and related data. Only admins or system actors should typically perform this action directly, with tight access controls and compliance logging.\n\nOn success, returns the complete new snapshot entry. Triggers compliance/audit update; errors are raised if inputs or permissions are invalid.","summary":"Create a new audit snapshot for an order (Order Snapshots table).","parameters":[{"name":"orderId","description":"UUID of order for which to create the snapshot record.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload specifying the type, details, and serialized state content for the audit snapshot.","typeName":"IAimallBackendOrderSnapshot.ICreate"},"responseBody":{"description":"Newly created order snapshot record including serialized state and audit metadata.","typeName":"IAimallBackendOrderSnapshot"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Update or correct a specific audit snapshot record for a specified order in the 'aimall_backend_order_snapshots' table. This endpoint enables authorized admins to edit audit snapshot data in rare circumstances—such as correcting metadata or legal redaction—but generally follows immutability standards. Most clients should avoid direct edits. Updates are tightly logged and typically restricted to full administrators or compliance team members, in line with technical and regulatory requirements on audit trails.","path":"/aimall-backend/administrator/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"put","description":"Modify (update) an existing audit trail record for a targeted order and snapshot. This operation is reserved for exceptional situations including redaction, maintenance corrections, or compliance-driven changes.\n\nStrict access control is enforced: only administrators with the required permission level are allowed to perform this action. All edits are logged for full traceability, including actor, before/after state, and the reason for update if provided. A successful update returns the corrected snapshot entry; attempts to edit immutable or non-existent records will fail with descriptive errors.","summary":"Update a specific audit snapshot record for an order (Order Snapshots table).","parameters":[{"name":"orderId","description":"UUID of the order whose snapshot is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"UUID of the audit snapshot record to modify.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Correction payload for updating the order snapshot record, per compliance policy.","typeName":"IAimallBackendOrderSnapshot.IUpdate"},"responseBody":{"description":"Updated order snapshot record reflecting post-modification state.","typeName":"IAimallBackendOrderSnapshot"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Delete (redact or hard delete) a specific snapshot record for an order in the 'aimall_backend_order_snapshots' table. Generally reserved for admin-level or legal/compliance situations, this operation removes a point-in-time snapshot from the audit trail. Type of deletion (soft vs hard) depends on presence of audit policies and application logic; with no deleted_at or soft delete property in the schema, the operation defaults to hard deletion. Supports right-to-be-forgotten, regulatory compliance, or remediation workflows.","path":"/aimall-backend/administrator/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"delete","description":"Remove a single audit trail snapshot record tied to a given order. This operation is primarily for administrative/compliance remediation, meeting legal obligations or correcting audit history in rare justified cases.\n\nWith no soft delete field in the snapshot schema, deletion is performed as a hard remove from the primary table. Strong access control is enforced: only authorized administrators may use this function. On success, the specified record is purged; errors are reported for invalid UUIDs or insufficient permissions. Prior to deletion, a backup snapshot may be created as per organization policy.","summary":"Delete an audit snapshot record for an order (Order Snapshots table).","parameters":[{"name":"orderId","description":"The UUID of the order from which the snapshot is to be removed.","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"UUID specifying the snapshot record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieve a list of coupon records from the 'aimall_backend_coupons' table. Supports simple paginated listing of coupons for administrative viewing, customer voucher management, or analytical reporting. This API may filter returned coupons by user role, code, campaign, or status via query parameters or via PATCH for complex filtering. Only returns data fields defined in the strict schema for aimall_backend_coupons.","path":"/aimall-backend/customer/coupons","method":"get","description":"Obtain a simple paginated or full list of all coupon records. Output includes coupon atomic metadata as defined by the aimall_backend_coupons schema, supporting basic management, user-facing voucher display, or analytics.\n\nReturns coupon code, campaign details, status (issued, redeemed, expired, etc), assignment, and timestamps but never returns information not present in the schema (no soft-delete present). Result set is typically restricted per authorization: customers see only their own coupons, while administrators can see all coupons system-wide for compliance or monitoring.\n\nSupports role-based results: customer, administrator, or analytic viewer. Related APIs: search (PATCH), detail (GET by ID), create, update, delete.","summary":"List coupons (Coupon table, paginated and role-based).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of coupons matching the aimall_backend_coupons schema.","typeName":"IPageIAimallBackendCoupon"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieve a list of coupon records from the 'aimall_backend_coupons' table. Supports simple paginated listing of coupons for administrative viewing, customer voucher management, or analytical reporting. This API may filter returned coupons by user role, code, campaign, or status via query parameters or via PATCH for complex filtering. Only returns data fields defined in the strict schema for aimall_backend_coupons.","path":"/aimall-backend/administrator/coupons","method":"get","description":"Obtain a simple paginated or full list of all coupon records. Output includes coupon atomic metadata as defined by the aimall_backend_coupons schema, supporting basic management, user-facing voucher display, or analytics.\n\nReturns coupon code, campaign details, status (issued, redeemed, expired, etc), assignment, and timestamps but never returns information not present in the schema (no soft-delete present). Result set is typically restricted per authorization: customers see only their own coupons, while administrators can see all coupons system-wide for compliance or monitoring.\n\nSupports role-based results: customer, administrator, or analytic viewer. Related APIs: search (PATCH), detail (GET by ID), create, update, delete.","summary":"List coupons (Coupon table, paginated and role-based).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of coupons matching the aimall_backend_coupons schema.","typeName":"IPageIAimallBackendCoupon"},"authorizationRoles":["customer","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Perform a filtered and paginated search on coupon records in the aimall_backend_coupons table. This endpoint enables complex queries based on coupon code, customer, campaign, status, expiration, or time range, in line with the anti-abuse and compliance obligations. Supports business, analytic, and audit use cases. Returns paginated result collections as per the business logic for coupons. The request body defines filtering criteria following the naming and fields of IAimallBackendCoupon.IRequest (request DTO).","path":"/aimall-backend/customer/coupons","method":"patch","description":"Accepts advanced filtering and pagination options via request body for the coupon table. IAM/BAC is enforced: customers may filter their own vouchers, while admins can filter all coupons using combinations of code, campaign, customer, status, or date range per the strict schema constraints.\n\nEach matching row includes only fields in the forward-facing coupon schema, supporting reporting, anti-fraud investigations, and entitlement management. Pagination metadata (total count, page, etc) are standardized across results matching the IAimallBackendCoupon.IRequest/response pattern.\n\nComplements the GET endpoint but supports complex filters, batch operations, or analytic scenarios.","summary":"Search/filter coupons (Coupon table, advanced query).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination criteria for searching coupon records.","typeName":"IAimallBackendCoupon.IRequest"},"responseBody":{"description":"Filtered and paginated coupons matching criteria and role constraints.","typeName":"IPageIAimallBackendCoupon"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Perform a filtered and paginated search on coupon records in the aimall_backend_coupons table. This endpoint enables complex queries based on coupon code, customer, campaign, status, expiration, or time range, in line with the anti-abuse and compliance obligations. Supports business, analytic, and audit use cases. Returns paginated result collections as per the business logic for coupons. The request body defines filtering criteria following the naming and fields of IAimallBackendCoupon.IRequest (request DTO).","path":"/aimall-backend/administrator/coupons","method":"patch","description":"Accepts advanced filtering and pagination options via request body for the coupon table. IAM/BAC is enforced: customers may filter their own vouchers, while admins can filter all coupons using combinations of code, campaign, customer, status, or date range per the strict schema constraints.\n\nEach matching row includes only fields in the forward-facing coupon schema, supporting reporting, anti-fraud investigations, and entitlement management. Pagination metadata (total count, page, etc) are standardized across results matching the IAimallBackendCoupon.IRequest/response pattern.\n\nComplements the GET endpoint but supports complex filters, batch operations, or analytic scenarios.","summary":"Search/filter coupons (Coupon table, advanced query).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination criteria for searching coupon records.","typeName":"IAimallBackendCoupon.IRequest"},"responseBody":{"description":"Filtered and paginated coupons matching criteria and role constraints.","typeName":"IPageIAimallBackendCoupon"},"authorizationRoles":["customer","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieve the full detail of a specified coupon identified by couponId from the aimall_backend_coupons table. This endpoint supports voucher detail retrieval for coupon management, customer voucher presentation, or audit/explanation scenarios. Returns all fields found in the strictly normalized coupon schema, based on the key lookup of (couponId).","path":"/aimall-backend/customer/coupons/{couponId}","method":"get","description":"Fetches a single coupon's detailed schema record by its UUID identifier. Provides a complete atomic snapshot of code, campaign connection, status (issued, redeemed, expired), customer assignment, and relevant timestamps.\n\nRole-based access rules: customers may request only their own coupons, admins can access any coupon for compliance/tasking. Sensitive data (such as redemption history or campaign association) is presented only within the limits of the coupon schema. Related endpoints: coupon listing/search, coupon redemption record queries.","summary":"Fetch full detail for a single coupon (Coupon table).","parameters":[{"name":"couponId","description":"UUID of the coupon to query for full details.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed coupon voucher record found by UUID (schema: aimall_backend_coupons).","typeName":"IAimallBackendCoupon"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieve the full detail of a specified coupon identified by couponId from the aimall_backend_coupons table. This endpoint supports voucher detail retrieval for coupon management, customer voucher presentation, or audit/explanation scenarios. Returns all fields found in the strictly normalized coupon schema, based on the key lookup of (couponId).","path":"/aimall-backend/administrator/coupons/{couponId}","method":"get","description":"Fetches a single coupon's detailed schema record by its UUID identifier. Provides a complete atomic snapshot of code, campaign connection, status (issued, redeemed, expired), customer assignment, and relevant timestamps.\n\nRole-based access rules: customers may request only their own coupons, admins can access any coupon for compliance/tasking. Sensitive data (such as redemption history or campaign association) is presented only within the limits of the coupon schema. Related endpoints: coupon listing/search, coupon redemption record queries.","summary":"Fetch full detail for a single coupon (Coupon table).","parameters":[{"name":"couponId","description":"UUID of the coupon to query for full details.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed coupon voucher record found by UUID (schema: aimall_backend_coupons).","typeName":"IAimallBackendCoupon"},"authorizationRoles":["customer","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new coupon/voucher record in the aimall_backend_coupons table, supporting the issuance of new coupons to users per the requirements of the Discount & Loyalty System. This endpoint is typically used by administrative or automation actors (e.g., campaign setup, bulk issuance) and inserts a strictly compliant voucher row in line with the defined schema for aimall_backend_coupons. Supports all atomic fields, such as campaign link, customer (optional), code, status, issuance/expiry dates, etc. on creation.","path":"/aimall-backend/administrator/coupons","method":"post","description":"Inserts (creates) a new coupon/voucher record. Only administrators or backend automation should call this endpoint, which directly issues a new coupon to the identified campaign (and optionally a customer, for personalized vouchers). All fields required by the coupon creation DTO (IAimallBackendCoupon.ICreate) must be provided, including issuance/expiry dates, campaign, and unique code. Business rules for code uniqueness, campaign relationship, and lifecycle state are enforced.\n\nSuccessful creation returns the full new row as per the coupon schema. Creation events are logged for compliance/auditability; errors arise on constraint violation (e.g., duplicate code or conflicting status).","summary":"Create a new coupon (Coupon table, voucher issuance).","parameters":[],"requestBody":{"description":"Coupon issuance payload for new coupon creation (Voucher DTO).","typeName":"IAimallBackendCoupon.ICreate"},"responseBody":{"description":"Full new coupon record as created in database.","typeName":"IAimallBackendCoupon"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Update an existing coupon voucher record in the aimall_backend_coupons table, for cases such as status change (e.g., to redeemed/expired/invalidated), correcting code, or updating any legally-editable field. The update is performed by UUID primary key; only fields present in the DTO (IAimallBackendCoupon.IUpdate) may be supplied or changed. Restricted to administrative users or automation, as typical customer flows should not permit voucher alteration. Business rules are enforced on field validation, lifecycle state, and constraint maintenance (e.g., code uniqueness, immutability of redeemed/expired coupons as per policy).","path":"/aimall-backend/administrator/coupons/{couponId}","method":"put","description":"Modify (update) a coupon voucher identified by couponId using a validated update payload. Supports real-world flows including: marking as redeemed, correcting assignment, expiring upon policy/legal requirement, or administratively invalidating. Strong audit log is created for all updates, with role gating enforced strictly.\n\nPayload must match the coupon update DTO for this schema, and any business logic/constraint checks are executed as per requirements. A full new record is returned if successful, reflecting the state after update. This endpoint is not available to customer users, only admins and backend automation.","summary":"Update an existing coupon voucher (Coupon table).","parameters":[{"name":"couponId","description":"UUID of the coupon to update (voucher primary key).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Coupon update payload (valid fields only, per IAimallBackendCoupon.IUpdate schema).","typeName":"IAimallBackendCoupon.IUpdate"},"responseBody":{"description":"Full row of the coupon after update, all atomic fields included.","typeName":"IAimallBackendCoupon"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Delete or invalidate a coupon voucher record in the aimall_backend_coupons table. With no deleted_at or soft-delete column present, this operation results in a physical deletion from storage. Only administrators or backend automation should call this action, typically for compliance removals, administrative corrections, or legal obligations. The target coupon is referenced by UUID primary key. Action is strictly logged, and risks of deleting audit-critical records are noted.","path":"/aimall-backend/administrator/coupons/{couponId}","method":"delete","description":"Removes (hard deletes) a coupon/voucher record identified by couponId. Adheres to business and compliance requirements—real deletion occurs since there is no schema provision for soft/historical state. Only system administrators, service automation, or compliance enforcement code may call this endpoint directly.\n\nA successful operation purges the row. Errors are returned for missing or already-removed UUIDs. Recommended: ensure redemptions and campaign history are not broken by deletion, and create audit log records as per regulatory obligations.","summary":"Delete a coupon voucher record (Coupon table, admin-only, hard delete).","parameters":[{"name":"couponId","description":"UUID of the coupon to delete (voucher).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a list of discount campaigns from the aimall_backend_discount_campaigns table. It can be used to display all available or active discount campaigns for administrative or analytics purposes. Filtering and pagination are not supported in this basic GET endpoint, which simply returns the most relevant discount campaign records. Each record includes campaign name, code, type, status, stackable flag, date range, usage limits, priority, description, and relationships to coupons or redemptions. Business context: admins can review all configured campaigns and sellers can query active or historical discounts.","path":"/aimall-backend/administrator/discountCampaigns","method":"get","description":"Fetch a complete list of discount campaigns from the aimall_backend_discount_campaigns table. This endpoint provides all campaigns with their configuration fields such as code, name, type, active date range, stacking rules, and business status.\n\nSecurity: Only users with administrator privileges may access this endpoint, as discount campaign data is sensitive and often managed by platform staff.\n\nNo parameters are needed for this endpoint and no sophisticated filtering or searching is applied. Consumers are expected to use this data to build campaign selection UIs or for administrative batch analytics/reporting. Campaigns returned include full metadata and linkage to related coupons/redemptions for downstream use.","summary":"Retrieves all discount campaigns from the campaign table.","parameters":[],"requestBody":null,"responseBody":{"description":"Array of discount campaign entities, with all metadata fields.","typeName":"IPageIAimallBackendDiscountCampaign"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation enables advanced search and filtered retrieval of discount campaigns from the aimall_backend_discount_campaigns table. Supports pagination, sorting, and complex multi-field filtering. Use this to implement dashboards, analytic features, or to allow admins to manage campaigns by various criteria. Typical fields to filter include campaign type, status, active periods, and stackability.","path":"/aimall-backend/administrator/discountCampaigns","method":"patch","description":"Searches for discount campaigns using flexible, multi-parameter filters. Users can filter by campaign type, status (active, inactive, ended), date ranges, stackability, and campaign code/name. Supports pagination and sorting by any main field.\n\nSecurity: Only administrators can utilize search against the campaign dataset; filtering by inactive or ended campaigns is essential for operational workflows and analytics review. Proper results paging prevents data overload for large datasets. \n\nRelated APIs: Use GET /discountCampaigns/{id} to fetch campaign details; use POST to create or PUT to update campaigns.","summary":"Advanced search & filter for discount campaigns with pagination and sorting.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for searching discount campaigns.","typeName":"IAimallBackendDiscountCampaign.IRequest"},"responseBody":{"description":"Paginated, filtered result set of discount campaigns matching criteria.","typeName":"IPageIAimallBackendDiscountCampaign"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves a single discount campaign by its unique campaign ID from the aimall_backend_discount_campaigns table. Used for admin detail screens, campaign editing, or to view full settings and associations. Campaign ID must be provided as a path parameter (UUID). Only returns the entity if the campaign exists.","path":"/aimall-backend/administrator/discountCampaigns/{discountCampaignId}","method":"get","description":"Fetch a detailed discount campaign entity using the campaign ID. Includes all campaign attributes, relationships, and description. Useful for displaying details in admin UIs, preparing for campaign edits, or for auditing historical campaigns.\n\nOnly users with administrative privileges may access individual campaign records, as these may contain sensitive configuration and analytics links. Validation ensures the campaign exists, and returns errors if not found. No request body, but path parameter is required.\n\nIf the ID refers to a non-existent campaign, a not-found error is returned.","summary":"Get detailed information on a specific discount campaign by ID.","parameters":[{"name":"discountCampaignId","description":"Unique identifier of the target discount campaign.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discount campaign entity, including all configuration fields and relationships.","typeName":"IAimallBackendDiscountCampaign"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new discount campaign in the aimall_backend_discount_campaigns table. Supports all configuration fields needed for new campaign setup, including type, stacking, priority, active period, and descriptive metadata. Business context: used by admins when launching new sales or promotional events. Audit trail is enforced for all creation events.","path":"/aimall-backend/administrator/discountCampaigns","method":"post","description":"Allows administrators to create and configure a new discount campaign. The request body should contain all essential campaign fields, such as campaign code, name, type (order, product), stackability, priority, start/end timestamps, max uses per user, and an optional description.\n\nRequired fields are validated for uniqueness (e.g., campaign code), and business constraints (e.g., date range logic, nonnegative max use, etc) enforced. Success response returns the full campaign object as added. Appropriate audit logging of campaign creation is maintained for compliance and operational integrity.","summary":"Create a new discount campaign record.","parameters":[],"requestBody":{"description":"Information required to create a new discount campaign entity.","typeName":"IAimallBackendDiscountCampaign.ICreate"},"responseBody":{"description":"The newly created discount campaign entity.","typeName":"IAimallBackendDiscountCampaign"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing discount campaign in the aimall_backend_discount_campaigns table by its campaign ID. Administrative users can change configuration fields such as name, type, period, stacking rules, status, or other permitted fields. Campaign code must remain unique; audit trail is maintained for traceability of changes.","path":"/aimall-backend/administrator/discountCampaigns/{discountCampaignId}","method":"put","description":"Update a specific discount campaign's settings, based on campaign ID. Permits changes to type, stacking, activity period, maximum uses, priority, description, and other core fields. Enforces field validation, uniqueness of code, and permitted status transitions.\n\nAccess is restricted to administrative users; all updates are audit-logged. Path parameter is required; request body provides fields to update. If the campaign ID does not exist, returns not found error.\n\nChange validation: Ensures active campaigns do not violate business rules regarding period, stacking, or usage limits. On success, returns the updated object.","summary":"Update a discount campaign by its ID.","parameters":[{"name":"discountCampaignId","description":"Identifier of the discount campaign to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the discount campaign entity.","typeName":"IAimallBackendDiscountCampaign.IUpdate"},"responseBody":{"description":"The updated discount campaign entity, with all fields after modification.","typeName":"IAimallBackendDiscountCampaign"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes a discount campaign by its campaign ID from the aimall_backend_discount_campaigns table. As there is no soft-delete field on this entity, the delete is a hard delete. This is used exceptionally, for example, when a campaign is configured in error and must be removed for compliance reasons. Only administrative users can perform deletion, and such actions are fully audit-logged.","path":"/aimall-backend/administrator/discountCampaigns/{discountCampaignId}","method":"delete","description":"Remove a discount campaign from the system by its ID (UUID). This operation irreversibly deletes the campaign record and all direct relationships, as there is no soft-deletion mechanism defined in the schema.\n\nOnly administrative users may invoke this operation. Audit trails record all deletion events for compliance. Validation: If the campaign ID does not correspond to a campaign, a not-found error is returned.\n\nWarning: This operation cannot be reversed, and all associated coupons and analytics history may be orphaned or impacted.","summary":"Delete (hard) a discount campaign by ID.","parameters":[{"name":"discountCampaignId","description":"Identifier (UUID) of the campaign to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a paginated list of coupon redemption records from the aimall_backend_coupon_redemptions table. Used for analytics, fraud auditing, and admin inspection of coupon use. No advanced search or filtering; simply lists redemptions, generally sorted by date. Business uses: monitor coupon usage and identify abnormal patterns.","path":"/aimall-backend/administrator/couponRedemptions","method":"get","description":"Fetch an unfiltered, paginated list of all coupon redemption records from the database. This provides detailed logs (success/failure, date, redemption target, outcome) for analytics review and operational monitoring.\n\nAccess is restricted to administrators as redemption data may include sensitive user/order information.\n\nFor volume efficiency and consistent database performance, returns paged lists. Admins can review summary stats by fetching across page boundaries. See PATCH for advanced search; GET by ID for individual redemption details.","summary":"Lists all coupon redemption records, paginated.","parameters":[],"requestBody":null,"responseBody":{"description":"Page of coupon redemption records, with all metadata and status.","typeName":"IPageIAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Advanced filtering and search API for coupon redemptions in the aimall_backend_coupon_redemptions table. Allows redemptions to be filtered by customer, campaign, redemption status, date range, and related order or product. Useful for fraud detection analytics or investigation of specific usage patterns. Supports pagination/sorting.","path":"/aimall-backend/administrator/couponRedemptions","method":"patch","description":"Retrieves coupon redemption records by advanced filters, including customer ID, campaign ID, redemption status (success, failed, invalid), date/time range, or by target order/product IDs. Supports pagination and sort order.\n\nThis endpoint is vital for support teams, fraud detection, and for resolving disputed or abnormal coupon attempts. Restricted to administrators, with appropriate compliance and audit logging. Validation ensures only permitted filter values and paging are accepted.\n\nConsumers may use GET by ID API to inspect individual redemption details as required.","summary":"Search, filter, and paginate coupon redemption records by various criteria.","parameters":[],"requestBody":{"description":"Advanced search and filtering fields for coupon redemptions.","typeName":"IAimallBackendCouponRedemption.IRequest"},"responseBody":{"description":"Paginated result of coupon redemption records matching filters.","typeName":"IPageIAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves the details of a specific coupon redemption event by its ID (UUID) from the aimall_backend_coupon_redemptions table. This provides a full drill-down for audit, compliance, or admin support. Validation ensures if the redemption ID exists; not found error otherwise. Access limited to admin and support staff.","path":"/aimall-backend/administrator/couponRedemptions/{couponRedemptionId}","method":"get","description":"Fetches a single coupon redemption record by its unique ID, including all detail fields such as coupon/campaign association, status, customer, order/product target, timestamp, and outcome. Used in backoffice, support and fraud investigation UIs.\n\nAdmins or designated support staff must use this endpoint to obtain the definitive record for a redemption. Invalid IDs result in a not-found error.\n\nNo request body; path parameter must be included.","summary":"Retrieve detail for a specific coupon redemption by ID.","parameters":[{"name":"couponRedemptionId","description":"Unique identifier for the coupon redemption record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of a coupon redemption record, by ID.","typeName":"IAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a coupon redemption record in aimall_backend_coupon_redemptions table. Used during checkout/payment process to atomically record a coupon use attempt (success or failure) along with contextual business metadata. Business rules require validation against coupon eligibility, campaign status, user/campaign limits, and audit requirements. Used by commerce engine or admin support for manual adjustments.","path":"/aimall-backend/administrator/couponRedemptions","method":"post","description":"Creates a record for a coupon redemption event, typically triggered by the checkout process or by admin action. Request body must provide all necessary redemption context (coupon ID, customer ID, campaign ID if known, time, status, order/product, and result).\n\nAll field values are strictly validated against current business rules—coupon eligibility, campaign active period, no redundant redeemed coupons, and user-level redemption limits. Records are audit-logged for compliance. Success returns full created entity, or input-rejection error if validation fails.","summary":"Create a new coupon redemption (use) record.","parameters":[],"requestBody":{"description":"Details of redemption attempt to be created as a new log row.","typeName":"IAimallBackendCouponRedemption.ICreate"},"responseBody":{"description":"The coupon redemption record after creation/persistence, with all fields.","typeName":"IAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates the fields of an existing coupon redemption record by ID in the aimall_backend_coupon_redemptions table. Used for correcting redemption status, updating related order/product info, or adjusting meta-data for support/audit purposes. Access restricted to administrators/analysts only.","path":"/aimall-backend/administrator/couponRedemptions/{couponRedemptionId}","method":"put","description":"Update the business or analytical details of a specific coupon redemption record by ID. All main fields are updatable (except immutable audit keys such as ID and initial redemption timestamp). Allows correction of misclassified outcomes, addition of missing data (order/product IDs) or other support-driven edits.\n\nValidation is enforced: status changes must conform to business rules, campaign associations must be valid, and all audit rules (change history, traceability) are satisfied. Success returns the updated entity; not found error if record is missing.\n\nAdmins and designated analytic staff only; all changes are tracked in audit trail for compliance.","summary":"Update a coupon redemption record by ID.","parameters":[{"name":"couponRedemptionId","description":"ID of the coupon redemption record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the redemption record.","typeName":"IAimallBackendCouponRedemption.IUpdate"},"responseBody":{"description":"The coupon redemption record with fields updated.","typeName":"IAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes a coupon redemption log record by its ID (UUID) from the aimall_backend_coupon_redemptions table. No soft delete exists, so this is a hard (permanent) deletion. Used only for administrative clean-up or compliance requirements when a record must be purged. Admin access and full audit trail required.","path":"/aimall-backend/administrator/couponRedemptions/{couponRedemptionId}","method":"delete","description":"Permanently deletes a coupon redemption log from the system. Use only for compliance or operational cleanup, as all analytics or history for that record are permanently lost.\n\nRequires admin privileges; all deletions are audit logged. If the provided ID is invalid or does not exist, returns not found. No soft-delete field is present so operation is irreversible. Related business implications: may impact analytics or open investigations.","summary":"Hard delete a coupon redemption log record by ID.","parameters":[{"name":"couponRedemptionId","description":"UUID for the coupon redemption log to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation retrieves a list of all coupons under a specified discount campaign. It is based on the aimall_backend_coupons table, which maintains a record for each issued coupon in the system. This includes tracking status (issued, redeemed, expired, invalidated), unique coupon codes, linkages to customers (optional), and references to the parent discount campaign for analytic and eligibility logic. The query should return all coupons with their statuses for the given campaignId, with optional support for filters/pagination as relevant to implementation (not directly visible in endpoint signature).","path":"/aimall-backend/administrator/discountCampaigns/{discountCampaignId}/coupons","method":"get","description":"Retrieve all coupons associated with a specific discount campaign from the aimall_backend_coupons table. Each coupon record contains a unique code, status, issuance and expiry info, and may reference an owning customer (if applicable). The operation enforces permissions such that only administrators, campaign owners, or authorized managers may access full coupon lists with status or customer linkage details. It supports tracing issued/expired/redeemed coupons as needed for compliance, analytics, and management dashboards. Error handling should include not-found or permission errors, and filtering by status is recommended for large campaigns.","summary":"Retrieve all coupons belonging to the specified discount campaign (aimall_backend_coupons).","parameters":[{"name":"discountCampaignId","description":"Unique identifier for the target discount campaign.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Array of all coupon entities for the given campaign.","typeName":"IPageIAimallBackendCoupon"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation retrieves a paginated and optionally filtered list of coupons under a specific discount campaign, with flexible search/filtering (e.g., by status, customerId, code, expiry) for management audiences. Works on the aimall_backend_coupons table. Intended for usage in admin/campaign dashboards where advanced querying of coupon issuance, usage, expiry, or status is required. Supports advanced business queries beyond what a simple GET provides, consistent with best practices for management APIs.","path":"/aimall-backend/administrator/discountCampaigns/{discountCampaignId}/coupons","method":"patch","description":"Provide a flexible, paginated, and filterable listing of coupons under a specific discount campaign, supporting advanced management use cases. Leverages the aimall_backend_coupons table for records, and allows administrators to query by coupon status, issuing customer, expiration range, etc., by passing advanced filtering/search criteria in the body. Returns paged lists for analytic and dashboard integration. Results may be restricted to roles with full campaign/coupon access. Related to GET operation but provides improved search granularity.","summary":"Advanced paginated/filtered search over coupons for a campaign (aimall_backend_coupons).","parameters":[{"name":"discountCampaignId","description":"Target campaign's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination criteria for coupon query.","typeName":"IAimallBackendCoupon.IRequest"},"responseBody":{"description":"Paginated result set of coupon entities matching query criteria.","typeName":"IPageIAimallBackendCoupon"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation retrieves the details of a single coupon under a given discount campaign. It is mapped to a unique couponId for the campaignId, and operates over aimall_backend_coupons, returning complete coupon data (code, status, customer, issuance/redeem/expire fields). This enables validation, audit, and direct inspection of a coupon by administrators, support agents, or campaign managers, ensuring full traceability and compliance with tracking/reporting requirements.","path":"/aimall-backend/administrator/discountCampaigns/{discountCampaignId}/coupons/{couponId}","method":"get","description":"Fetch all details for a single coupon belonging to a given discount campaign, from the aimall_backend_coupons table. Returns full record, including code, status, owning customer, lifecycle timestamps, and campaign linkage. Only accessible to roles with campaign or admin privileges. Used for individual coupon inspection, disputed code validation, and support workflows. Errors include not found or access denied for unauthorized queries.","summary":"Fetch all fields for a coupon record under campaign (aimall_backend_coupons).","parameters":[{"name":"discountCampaignId","description":"Identifier for the discount campaign set.","schema":{"type":"string","format":"uuid"}},{"name":"couponId","description":"Unique identifier for the coupon within the campaign.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Coupon details for the specified couponId and campaignId.","typeName":"IAimallBackendCoupon"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new coupon entry directly under the specified discount campaign, inserting a row into aimall_backend_coupons with status and code fields set accordingly. Business logic should enforce uniqueness of coupon codes and validity of issuance and expiry dates relative to the campaign. Manual or batch creation flows are supported. This is available only to admin-type roles. Successful creation returns the full coupon entity as confirmation.","path":"/aimall-backend/administrator/discountCampaigns/{discountCampaignId}/coupons","method":"post","description":"Create or issue a new coupon for a specific discount campaign, using aimall_backend_coupons. Accepts coupon data in the body, including target customer (optional), code, expiry, and initial status. Enforces uniqueness and campaign-level issuance rules as per platform business logic. Roles with admin or manager privileges may request this operation, and failure to satisfy uniqueness or campaign-scoping logic returns errors.","summary":"Issue or create a new coupon for the given campaign (aimall_backend_coupons).","parameters":[{"name":"discountCampaignId","description":"Unique identifier of the discount campaign for which the coupon is issued.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Coupon creation information, including code/status and possible customer association.","typeName":"IAimallBackendCoupon.ICreate"},"responseBody":{"description":"The resulting coupon entity after creation.","typeName":"IAimallBackendCoupon"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates an existing coupon identified by its couponId under a particular campaign, allowing admins to modify properties such as status, associated customer, or expiry dates. Only mutable fields in aimall_backend_coupons should be affected. The update logic must enforce business/validation rules such as not allowing updates after redemption or expiry. Returns the updated coupon entity if successful.","path":"/aimall-backend/administrator/discountCampaigns/{discountCampaignId}/coupons/{couponId}","method":"put","description":"Allows administrators or campaign managers to update the details of a single coupon. Modifications can involve status transitions, ownership (customer) re-assignment, or expiry date updates. Applies only if the coupon is eligible for modification (not already redeemed, expired, or invalidated). Returns the updated coupon object. Error conditions include attempting to update an immutable coupon (e.g., already redeemed) or invalid couponId/campaignId.","summary":"Update a coupon under a discount campaign (aimall_backend_coupons).","parameters":[{"name":"discountCampaignId","description":"Unique identifier of the discount campaign in scope.","schema":{"type":"string","format":"uuid"}},{"name":"couponId","description":"Unique identifier of the coupon to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update for the coupon entity.","typeName":"IAimallBackendCoupon.IUpdate"},"responseBody":{"description":"The updated coupon entity with new state/fields.","typeName":"IAimallBackendCoupon"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes (removes) a coupon from the specified discount campaign, based on both couponId and discountCampaignId. In the aimall_backend_coupons table, this performs a hard deletion as there is no deleted flag. This action is restricted to administrators, and attempts to delete a redeemed/expired coupon should fail with an error or raise an audit log. Successful executions will remove the coupon entry from storage.","path":"/aimall-backend/administrator/discountCampaigns/{discountCampaignId}/coupons/{couponId}","method":"delete","description":"Hard delete of a coupon from the aimall_backend_coupons table. Should only be permitted for coupons in 'issued' or possibly 'invalidated' status. If the coupon has already been redeemed or is expired, deletion must be rejected. This operation is tracked/audited, and is only available to admin roles. Returns no content on success, or errors for ineligible coupons or unauthorized requests.","summary":"Hard delete a coupon from a discount campaign (aimall_backend_coupons).","parameters":[{"name":"discountCampaignId","description":"Discount campaign's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"couponId","description":"Coupon's unique identifier for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation lists all coupon redemption events associated with a specific coupon, based on aimall_backend_coupon_redemptions. Each redemption record captures single-use or attempted-use events by customers, along with their outcome status (success, failed, invalid), fraud/audit context, and historical linkages to customers/orders. Returned in paginated form for analytics, fraud detection, and support review. Only accessible to admin/support roles due to sensitivity of redemption/fraud event data.","path":"/aimall-backend/administrator/coupons/{couponId}/couponRedemptions","method":"get","description":"Return a list of all redemption events/attempts relating to a specific coupon. The aimall_backend_coupon_redemptions table is traversed using couponId as a foreign key. Each event includes customer, campaign, order, status, timestamps, and possible product references for the redemption. This data supports compliance, fraud IR, and auditing required by operations and support teams. Accessible to admin/support audiences only, and errors include not-found or insufficient privilege.","summary":"Get all redemption events for a coupon (aimall_backend_coupon_redemptions).","parameters":[{"name":"couponId","description":"Unique identifier for the coupon for which to retrieve all redemption events.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated redemption event history for the specified coupon.","typeName":"IPageIAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Provides advanced, paginated, and filtered querying of coupon redemption events for a coupon. Accepts search and filter parameters in the body, with support for detail, range, and analytic queries by status, customer, campaign, order, redemption status, or full-text search. Admin/support use for audits, trend analysis, fraud IR, and support workflows. Underlying data comes from aimall_backend_coupon_redemptions.","path":"/aimall-backend/administrator/coupons/{couponId}/couponRedemptions","method":"patch","description":"Offer paginated, filterable search over all coupon redemptions linked to a couponId. The body enables flexible filtering (e.g. by date, status, customer, orderId) for support, audit, or analytic workflows. Only admin/support roles can perform this, given possible data sensitivity about failed/investigated redemptions. Returns paged set of coupon redemption records from aimall_backend_coupon_redemptions, with error/validation handling for search constraints.","summary":"Advanced, paginated/searchable coupon redemption event listing (aimall_backend_coupon_redemptions).","parameters":[{"name":"couponId","description":"Coupon whose redemption records to search/filter.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Redemption event search and filter criteria for given coupon.","typeName":"IAimallBackendCouponRedemption.IRequest"},"responseBody":{"description":"Paginated result of coupon redemption records.","typeName":"IPageIAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation retrieves all information for a single redemption event for a specific coupon, including status, customer, campaign context, linked order/product (if present), and timestamp. Sourced from the aimall_backend_coupon_redemptions table, it enables full audit, support, or dispute handling at the per-redemption granularity. The uniqueness is enforced by couponRedemptionId within couponId. Admin/restricted role only.","path":"/aimall-backend/administrator/coupons/{couponId}/couponRedemptions/{couponRedemptionId}","method":"get","description":"Fetch all details for a single coupon redemption event tied to couponId and couponRedemptionId (primary/event key). The information exposed includes all context provided by the aimall_backend_coupon_redemptions record (customer, campaign, status, time, references to linked order/product). Used for audit, troubleshooting, or analytic drilldowns. Available to admin/support audiences only. Handles not-found and unauthorized cases.","summary":"Fetch full details for a single coupon redemption event (aimall_backend_coupon_redemptions).","parameters":[{"name":"couponId","description":"Coupon for which the redemption record is fetched.","schema":{"type":"string","format":"uuid"}},{"name":"couponRedemptionId","description":"Redemption event unique id (primary key).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full coupon redemption event record.","typeName":"IAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation enables creation (logging/recording) of a new coupon redemption event under a specific coupon, for cases including manual admin corrections, support-led redemptions, or to support direct entry of investigative/fraud IR records. The input should provide all mandatory couponRedemption fields, and must pass audit/usage constraints (e.g. not redempting an already used coupon, etc). The resulting row is immediately auditable, as per aimall_backend_coupon_redemptions business logic.","path":"/aimall-backend/administrator/coupons/{couponId}/couponRedemptions","method":"post","description":"Insert a new redemption event for a coupon. Used in scenarios such as logging a manual admin redemption, error correction, or documenting an attempted redemption as part of IR/audit. Accepts required fields to create IAimallBackendCouponRedemption.ICreate. Responds with the new record. Strict role validation and business logic around coupon state/eligibility apply. Returns full new entity; errors for ineligible coupon or malformed input.","summary":"Create a new coupon redemption event (aimall_backend_coupon_redemptions).","parameters":[{"name":"couponId","description":"Coupon to which this redemption record belongs.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Redemption record details required for creation.","typeName":"IAimallBackendCouponRedemption.ICreate"},"responseBody":{"description":"The full created coupon redemption record.","typeName":"IAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates the status or audit attributes of an existing coupon redemption record, referenced by couponRedemptionId and couponId. Supports admin-driven status corrections, audit tagging, result status updates, or context (e.g. fraud/success/fail resolution). Only mutable fields are updatable. All changes logged for compliance as per best practices for aimall_backend_coupon_redemptions.","path":"/aimall-backend/administrator/coupons/{couponId}/couponRedemptions/{couponRedemptionId}","method":"put","description":"Allows administrators or support to update mutable fields of a redemption event for a coupon. Use cases include updating redemption status (success/fail/invalid), fixing customer association, or adding audit evidence. Responds with updated record. Operation is tracked for compliance, and update is only permitted if allowed by business/state logic. Returns error for attempts to modify immutable or forbidden fields, or for invalid identifiers.","summary":"Update fields on a coupon redemption record (aimall_backend_coupon_redemptions).","parameters":[{"name":"couponId","description":"Coupon containing the redemption event.","schema":{"type":"string","format":"uuid"}},{"name":"couponRedemptionId","description":"Redemption event record unique ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update body with allowed mutable fields for coupon redemption.","typeName":"IAimallBackendCouponRedemption.IUpdate"},"responseBody":{"description":"The updated coupon redemption record entity.","typeName":"IAimallBackendCouponRedemption"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes/removes a coupon redemption audit record from the aimall_backend_coupon_redemptions table, based on couponRedemptionId (unique) under a given couponId. As this table is normalized and supports audit/event IR, this is a hard delete (no soft delete). Restricted to admin/audit workflow only, and should not be allowed for records part of legal or closed fraud investigations. Success removes the record. Errors for forbidden/immutable records or unauthorized queries.","path":"/aimall-backend/administrator/coupons/{couponId}/couponRedemptions/{couponRedemptionId}","method":"delete","description":"Hard delete of a coupon redemption record from the event/audit log. Only available to admin/support roles with permissible access. Not permitted for resolved/closed/caseful fraud events. Immediate removal from underlying storage. Tracks the operation for auditing. Returns no content. Failures for unauthorized, forbidden, or locked redemption events.","summary":"Permanently remove a coupon redemption event (aimall_backend_coupon_redemptions).","parameters":[{"name":"couponId","description":"Coupon under which the redemption event is deleted.","schema":{"type":"string","format":"uuid"}},{"name":"couponRedemptionId","description":"Redemption event unique identifier to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a paginated list of all loyalty (point/mileage) transactions. This endpoint operates on the aimall_backend_loyalty_transactions table (Coins domain) and exposes accumulated, redeemed, expired, or reversed point events for compliance, reporting, and user-facing histories. Audits of loyalty flows and effective reporting require the ability to page, filter, and sort results by timestamp, customer, order, coupon, and transaction type. All transaction properties such as amount, type, customer_id, and related order/coupon data are available. Data is strictly normalized—balances are not calculated in this endpoint. Sensitive access, may require role restriction to admin or owner-lookup only.","path":"/aimall-backend/administrator/loyaltyTransactions","method":"get","description":"This operation returns a paginated list of all loyalty transactions—including accruals, redemptions, expirations, and reversals—recorded in the aimall_backend_loyalty_transactions table. Each record details a single atomic loyalty event featuring the customer, any related order or coupon, type of transaction, and amount. These logs support compliance audits and fraud prevention, as required by the business logic in the Discount & Loyalty System.\n\nSensitive financial records require that only authorized administrators or the relevant customer can access these data. The endpoint may be used in conjunction with search or reporting systems. Pagination ensures efficient handling for large datasets, while audit trails allow analysis of user- and order-level point activity. No net balances are provided here—clients should compute as needed.\n\nIf an unauthorized party attempts to access another user's history, access must be denied and all such attempts should be recorded in audit logs, in compliance with non-functional security requirements.","summary":"Retrieve paginated list of all loyalty transactions (Coins table)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated results of loyalty point transactions with all metadata per transaction.","typeName":"IPageIAimallBackendLoyaltyTransaction"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Search and retrieve a filtered, sorted, and paginated list of loyalty transactions with advanced querying. This endpoint executes complex queries on the aimall_backend_loyalty_transactions table (Coins domain), supporting filtering by customer, order, coupon, transaction type, date ranges, amount, and status. Enables compliance, analytics, and customer/accounting portal scenarios that demand search beyond simple list retrieval. All filter logic is defined by IRequest DTO and should not leak sensitive data outside authorized roles.","path":"/aimall-backend/administrator/loyaltyTransactions","method":"patch","description":"This endpoint allows clients—typically admin panels or analytic dashboards—to search and filter the contents of the aimall_backend_loyalty_transactions table using advanced query parameters provided in the request body. Supported filters may include customer ID, related order or coupon, transaction type (accrual, redemption, expiration, reversal), time period, and minimum/maximum amount criteria.\n\nThe response contains a paginated list of matching loyalty transactions, each including complete atomic detail for compliance and analytic purposes. Security rules require that only administrators or users with explicit permission can access search results across customers. Audit controls and result masking may be applied for sensitive fields where needed.\n\nThis operation enables the main reporting and customer support tools required by the Discount & Loyalty System, supporting regulatory and business audit needs.","summary":"Advanced search for loyalty transactions with full filtering and pagination","parameters":[],"requestBody":{"description":"Search criteria and filter parameters for loyalty transaction query, including customer, type, time range, etc.","typeName":"IAimallBackendLoyaltyTransaction.IRequest"},"responseBody":{"description":"Paginated, filtered results of loyalty transactions based on search criteria.","typeName":"IPageIAimallBackendLoyaltyTransaction"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Fetch detailed information about a specific loyalty transaction event. This operation targets the aimall_backend_loyalty_transactions table by unique primary key (id), returning all transaction data for a single event—such as accrual, redemption, expiration, or reversal. Supports use cases in compliance, account history, and dispute resolution. Each record is immutable for audit. If not found or access is unauthorized, should return proper error or access denied. Accessible by admin or transaction-owning customer only.","path":"/aimall-backend/administrator/loyaltyTransactions/{loyaltyTransactionId}","method":"get","description":"Retrieves all information about a single loyalty transaction, given its unique identifier (primary key). The result exposes full event details including amount, transaction type, customer, related order and coupon IDs, created timestamp, and factor (expired_at if applicable). This supports regulatory, audit, dispute, and customer-service investigatory flows.\n\nAuthorization is critical—admins may view any record; customers may only view their own. The endpoint must enforce privacy controls as per privacy/PII guidance. Not found or unauthorized access must yield standard API error responses and audit logs where required.","summary":"Retrieve one detailed loyalty transaction (by primary key)","parameters":[{"name":"loyaltyTransactionId","description":"UUID of the loyalty transaction record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Atomic detail of the loyalty transaction for audit, reporting, or dispute.","typeName":"IAimallBackendLoyaltyTransaction"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new loyalty transaction record, representing a point/mileage accrual, redemption, expiration, or adjustment. Operates on aimall_backend_loyalty_transactions (Coins domain), accepting full create DTO with required fields: customer_id, amount, type (accrual, redemption, etc.), description, and optionally order/coupon/expired_at. Used for administrative adjustments, system awards, reversals, and more. All business rules (preventing duplicate for the same event, limit checks, policy on negative/positive balances) must be enforced at application/business logic, not here. Only allowed for admin role or authorized system actor.","path":"/aimall-backend/administrator/loyaltyTransactions","method":"post","description":"Inserts a new atomic loyalty transaction into the aimall_backend_loyalty_transactions table. The transaction may be an accrual, redemption, expiration, or adjustment, as controlled by the type and amount provided via the IAimallBackendLoyaltyTransaction.ICreate DTO. Admins, compliance users, or authorized system actors use this endpoint for adjustments, bulk events, or resolving customer disputes.\n\nBusiness restrictions (e.g., no duplicate accrual for same order/coupon, minimum/maximum per-event limits, negative amount checking per type) must be enforced at the service/business logic tier. Created records are immutable except where reversal is required by business rules. Privilege is restricted to administrative roles and the audit log must record every use of this creation endpoint for compliance integrity.","summary":"Create a new loyalty transaction (admin-only)","parameters":[],"requestBody":{"description":"Details for creating a new loyalty transaction event.","typeName":"IAimallBackendLoyaltyTransaction.ICreate"},"responseBody":{"description":"Created loyalty transaction record, as persisted in Coins domain.","typeName":"IAimallBackendLoyaltyTransaction"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Update select fields on an existing loyalty transaction. Allows for administrative correction or audit trace rectification on a record in aimall_backend_loyalty_transactions, by primary key. Permitted fields to update: description, type, expired_at, amount (with constraints). All ID relationships (customer, order, coupon) are immutable for audit trails. Not intended for normal operational flows, but for rare compliance/dispute resolution cases. Strongly recommended for admin roles only, and actions must be audit-logged.","path":"/aimall-backend/administrator/loyaltyTransactions/{loyaltyTransactionId}","method":"put","description":"Performs an in-place update on certain updatable fields (e.g., description, type, expired_at, amount within policy) of a specific loyalty transaction identified by its UUID. Enforced by compliance policy, only non-relational fields may change; customer_id/order_id/coupon_id remain fixed for regulatory and audit purposes. This operation is intended for administrative corrections—such as reversal, description clarification, or corrected amount type.\n\nBusiness logic must tightly restrict when and which transactions may be changed, including time windows, compliance review workflow, and proper audit logging, as required by the Discount & Loyalty System. Unauthorized attempts must result in access denied and be logged for investigation.","summary":"Update allowed (non-relational) fields on a loyalty transaction","parameters":[{"name":"loyaltyTransactionId","description":"UUID of the transaction to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the loyalty transaction record.","typeName":"IAimallBackendLoyaltyTransaction.IUpdate"},"responseBody":{"description":"Updated loyalty transaction record.","typeName":"IAimallBackendLoyaltyTransaction"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes a loyalty transaction record by unique ID (hard delete). This operation removes a transaction from aimall_backend_loyalty_transactions entirely, for admin-level rectification only. Extremely sensitive—should be used only for compliance/audit error rectification. All deletes must be audited and may require multi-step approval offline. Relation IDs must not be reused; deleting a transaction must not break referential or compliance/audit integrity in related records.","path":"/aimall-backend/administrator/loyaltyTransactions/{loyaltyTransactionId}","method":"delete","description":"Removes the specified loyalty transaction from the aimall_backend_loyalty_transactions table. A hard delete (no soft delete/archival field available in schema), this action must only be used for correcting severe audit errors or compliance demands; all operations must be strictly restricted and granted only to the highest privileged users.\n\nThis operation can result in a gap audit trail; as such, any deletion must be immediately logged in external immutable audit logs, and a multi-admin review process is recommended before proceeding. Attempts to delete must be denied for unauthorized users, and any dependent records must handle missing transaction gracefully.","summary":"Delete a specified loyalty transaction (irreversible)","parameters":[{"name":"loyaltyTransactionId","description":"UUID of the transaction to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieve a paginated list of abuse incidents, which record fraud, abuse, or suspicious activity regarding coupons, loyalty points, campaigns, or platform incentives. Operates on the aimall_backend_abuse_incidents table (Coins domain), returning details such as event type, resolved status, detected timestap, related customer/order/coupon/campaign, and context. Used by risk/fraud teams and dashboards. Supports filtering, paging, and sorting as standard. Only admins/auditors may access for compliance reasons.","path":"/aimall-backend/administrator/abuseIncidents","method":"get","description":"Fetches a paginated list of all platform abuse incidents logged in aimall_backend_abuse_incidents. Each record details a single fraud or abuse event—including the event type (e.g., self-referral, coupon stacking), resolved status, context fields, incident detection time, and all related entity foreign keys.\n\nAccess is restricted to authorized compliance, audit, or admin roles, as these incidents may include PII or security-sensitive findings. The endpoint should support quick triage, dashboard, and drill-down audit scenarios. Pagination is required to efficiently handle high-volume incident datasets.","summary":"List abuse incident records (fraud/high-risk event logs)","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated result of abuse incidents, including all context for audit dashboards.","typeName":"IPageIAimallBackendAbuseIncident"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Advanced search and filter of abuse/fraud incidents on the aimall_backend_abuse_incidents table. Allows compliance teams to find events by incident type, resolved status, detected time ranges, and contextual fields such as related customer, order, coupon, or campaign. Powers admin dashboards and compliance tooling for proactive review. Follows strict authorization; can only be called by admin/auditor roles. Engines must implement default pagination, sorting, and support complex queries per business rules.","path":"/aimall-backend/administrator/abuseIncidents","method":"patch","description":"Enables complex searches within the abuse incidents table by allowing filter criteria such as type (e.g., coupon stacking, velocity anomaly), resolved status, customer/campaign/order/coupon linkage, and detected_at time ranges. Completion of this operation returns a paginated and filtered result set suitable for compliance reports and monitoring dashboards.\n\nSensitive data access is restricted to authorized roles; the endpoint is intended to support daily operational risk review, incident management, and compliance reporting as mandated by regulatory requirements. Search performance and handling of massive datasets must be optimized by backend/query engine design.","summary":"Advanced search and filter for abuse incidents (dashboard/reporting)","parameters":[],"requestBody":{"description":"Query/search filters for abuse incidents.","typeName":"IAimallBackendAbuseIncident.IRequest"},"responseBody":{"description":"Paginated, filtered abuse incidents records.","typeName":"IPageIAimallBackendAbuseIncident"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Fetch details of a specific abuse incident event by ID. Operates on the aimall_backend_abuse_incidents table (Coins domain), returning all fields and related context. Used by compliance and risk teams as part of investigatory, audit, and incident-tracking flows. The operation must restrict access to authorized roles, due to sensitive nature (PII). Should fail with clear error on not found or unauthorized access. Data is immutable; use update/resolve for status change.","path":"/aimall-backend/administrator/abuseIncidents/{abuseIncidentId}","method":"get","description":"Returns all logged fields and context for a single abuse incident, as identified by its primary key (UUID). Includes type, status, detection attributes, actor and resource links, detected_at timestamp, and context for risk/audit investigation. Data is used for fraud investigation, compliance reporting, and system health analytics.\n\nAccess is allowed only for authorized admin/compliance roles. No edits are performed here—mutations are handled by update. Not found or unauthorized requests must yield a clear, standard error and be logged as a possible compliance event.","summary":"Get detail view for a single abuse incident event.","parameters":[{"name":"abuseIncidentId","description":"UUID of the abuse incident to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All fields/metadata for the specified abuse incident.","typeName":"IAimallBackendAbuseIncident"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Create a new abuse incident record for fraud, policy breach, or suspicious behavior. Targets aimall_backend_abuse_incidents (Coins domain), requiring details per ICreate including type, detected_at, involved entities (customer/order/coupon/campaign), status, and context. Used by automated detection, admin upload, or compliance triage. Incident resolution must be handled by update/patch endpoint. Only privileged admin/compliance system users may write new incidents; must enforce strict provenance/auditability on reported events.","path":"/aimall-backend/administrator/abuseIncidents","method":"post","description":"Creates a new incident log entry in the aimall_backend_abuse_incidents table. This represents system- or admin-detected abuse activity—such as coupon abuse, loyalty fraud, or campaign gaming. All fields—type, context, status, and detected_at time—are required per the IAimallBackendAbuseIncident.ICreate DTO. The initiating actor (system or admin) must be recorded by the application layer for immutable audit tracking.\n\nBusiness workflow expects most incidents to be unresolved at creation, with resolution flow managed elsewhere. Only admin/compliance roles may insert events. All operations should be externally logged for compliance and legal reviews.","summary":"Create a new abuse incident (fraud or high-risk record)","parameters":[],"requestBody":{"description":"All details required to create an abuse incident record.","typeName":"IAimallBackendAbuseIncident.ICreate"},"responseBody":{"description":"The created abuse incident entity, persisted for tracking.","typeName":"IAimallBackendAbuseIncident"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Update an existing abuse incident record, typically for resolving, annotating, or correcting the incident. Operates on aimall_backend_abuse_incidents table by unique ID. Permitted updatable fields: details, resolved status, and possibly type/context for correction (all per DTO rules). Critical fields (primary/foreign keys, detected_at) are immutable. Admin, compliance, or automated audit agent access only. All changes must be tracked in the audit system.","path":"/aimall-backend/administrator/abuseIncidents/{abuseIncidentId}","method":"put","description":"Updates select fields (details, resolved status, type, etc.) on a logged abuse incident event, identified by its UUID. Designed for use in the admin/compliance incident management workflow—for marking incidents as resolved, providing additional info, or making corrections as per audit findings. Field constraints and allowed transitions are defined in the IAimallBackendAbuseIncident.IUpdate DTO; no relational or timestamp fields may be altered.\n\nSensitive operations; restricted to admin or compliance users; all changes must be externally recorded in audit logs for regulatory/legal review. Strict validation of permissible fields is enforced by the application logic layer.","summary":"Update (resolve/annotate/correct) an abuse incident event.","parameters":[{"name":"abuseIncidentId","description":"UUID of the abuse incident to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable fields/attributes for the abuse incident record.","typeName":"IAimallBackendAbuseIncident.IUpdate"},"responseBody":{"description":"The updated abuse incident entity, with adjustments applied.","typeName":"IAimallBackendAbuseIncident"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Remove an abuse incident event (hard delete) from the database, by unique ID (UUID). This operation deletes the aimall_backend_abuse_incidents record entirely. It is allowed only for compliance/legal audit errors, not regular workflow. All deletes must be externally logged, and attempt history kept in audit logs for governance. Only top-level admin/compliance roles may perform this operation, and deletion may require multi-step review outside the API.","path":"/aimall-backend/administrator/abuseIncidents/{abuseIncidentId}","method":"delete","description":"Removes the specified abuse incident from the aimall_backend_abuse_incidents DB table (hard delete). Use is limited to extreme cases—serious audit/correction flows—never for normal review or workflow. All invocations must be logged in immutable audit storage for legal review/litigation support. Unauthorized attempts must be forbidden and generate audits for compliance.\n\nDeletion gaps may impact downstream analytic/audit workflows, so only top-level governance users may access. Application must ensure all referential integrity and dependent events are handled appropriately (nullification, cascading policy).","summary":"Delete abuse incident record (hard delete, admin/gov only)","parameters":[{"name":"abuseIncidentId","description":"UUID of the incident record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a paginated and optionally filtered list of support tickets. This operation is based on the aimall_backend_support_tickets table, which stores customer, seller, or admin-initiated support inquiries (tickets) for platform support, tracking issue status, categories, and assignment. The operation allows end users and authorized staff to review existing support ticket records, supporting dashboard queue views, historical lookups, and auditability for compliance. All returned data maps directly to atomic fields and relationships defined in Prisma, including assignee, subject/body, status, priority, requester, and timestamps. Only visible (properly authorized) ticket fields will be provided according to user role.","path":"/aimall-backend/customer/supportTickets","method":"get","description":"Retrieve a paginated, optionally filtered list of all support tickets in the system, as defined in the aimall_backend_support_tickets model. This operation enables general ticket queue views, backlog analysis, and listing personal or platform-incoming support queries.\n\nAccess is role-controlled. Customers only see their own tickets. Sellers might view ones they opened, administrators can list and search all tickets for triage, reporting, and assignment. Ticket data includes subject, body, priority, status, requester (with minimal user details), assignee, timestamps, and category.\n\nThe listing supports pagination and sorting via query params (not reflected as path parameters here, but in implementation via request/query body or OpenAPI). Backend logic should ensure result size limits and rate limiting. The endpoint also allows for auditor queries and compliance review but never exposes hidden ticket content out of scope for user role.\n\nRelated operations: PATCH for advanced filtering, GET by ID for details.","summary":"List or paginate support tickets for authorized viewer, using normalized schema fields.","parameters":[],"requestBody":null,"responseBody":{"description":"Paged list of support tickets matching optional filters, in summary or detailed format per role.","typeName":"IPageIAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"customer"},{"specification":"Retrieves a paginated and optionally filtered list of support tickets. This operation is based on the aimall_backend_support_tickets table, which stores customer, seller, or admin-initiated support inquiries (tickets) for platform support, tracking issue status, categories, and assignment. The operation allows end users and authorized staff to review existing support ticket records, supporting dashboard queue views, historical lookups, and auditability for compliance. All returned data maps directly to atomic fields and relationships defined in Prisma, including assignee, subject/body, status, priority, requester, and timestamps. Only visible (properly authorized) ticket fields will be provided according to user role.","path":"/aimall-backend/seller/supportTickets","method":"get","description":"Retrieve a paginated, optionally filtered list of all support tickets in the system, as defined in the aimall_backend_support_tickets model. This operation enables general ticket queue views, backlog analysis, and listing personal or platform-incoming support queries.\n\nAccess is role-controlled. Customers only see their own tickets. Sellers might view ones they opened, administrators can list and search all tickets for triage, reporting, and assignment. Ticket data includes subject, body, priority, status, requester (with minimal user details), assignee, timestamps, and category.\n\nThe listing supports pagination and sorting via query params (not reflected as path parameters here, but in implementation via request/query body or OpenAPI). Backend logic should ensure result size limits and rate limiting. The endpoint also allows for auditor queries and compliance review but never exposes hidden ticket content out of scope for user role.\n\nRelated operations: PATCH for advanced filtering, GET by ID for details.","summary":"List or paginate support tickets for authorized viewer, using normalized schema fields.","parameters":[],"requestBody":null,"responseBody":{"description":"Paged list of support tickets matching optional filters, in summary or detailed format per role.","typeName":"IPageIAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"seller"},{"specification":"Retrieves a paginated and optionally filtered list of support tickets. This operation is based on the aimall_backend_support_tickets table, which stores customer, seller, or admin-initiated support inquiries (tickets) for platform support, tracking issue status, categories, and assignment. The operation allows end users and authorized staff to review existing support ticket records, supporting dashboard queue views, historical lookups, and auditability for compliance. All returned data maps directly to atomic fields and relationships defined in Prisma, including assignee, subject/body, status, priority, requester, and timestamps. Only visible (properly authorized) ticket fields will be provided according to user role.","path":"/aimall-backend/administrator/supportTickets","method":"get","description":"Retrieve a paginated, optionally filtered list of all support tickets in the system, as defined in the aimall_backend_support_tickets model. This operation enables general ticket queue views, backlog analysis, and listing personal or platform-incoming support queries.\n\nAccess is role-controlled. Customers only see their own tickets. Sellers might view ones they opened, administrators can list and search all tickets for triage, reporting, and assignment. Ticket data includes subject, body, priority, status, requester (with minimal user details), assignee, timestamps, and category.\n\nThe listing supports pagination and sorting via query params (not reflected as path parameters here, but in implementation via request/query body or OpenAPI). Backend logic should ensure result size limits and rate limiting. The endpoint also allows for auditor queries and compliance review but never exposes hidden ticket content out of scope for user role.\n\nRelated operations: PATCH for advanced filtering, GET by ID for details.","summary":"List or paginate support tickets for authorized viewer, using normalized schema fields.","parameters":[],"requestBody":null,"responseBody":{"description":"Paged list of support tickets matching optional filters, in summary or detailed format per role.","typeName":"IPageIAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"Searches and filters support tickets using complex filtering criteria. This operation works from the aimall_backend_support_tickets table, leveraging filtering, searching, pagination, and sorting based on keys such as status, priority, category, date ranges, and text queries. Enables helpdesk staff, administrators, and users to quickly locate specific tickets or analyze trends. Follows EARS and auditability requirements.","path":"/aimall-backend/customer/supportTickets","method":"patch","description":"Advanced search operation for support tickets with filtering, keyword search, pagination, and sorting. Allows querying on status (open, pending, resolved, closed), priorities, requester, assigned administrator, categories, and time intervals. Implementation leverages Prisma schema fields with zero denormalization, ensuring search relates to atomic record data only.\n\nCustomers may search their own history; administrators and support staff can filter entire system's queue. The response is strictly limited to data the requester is permitted to view per their role and ticket ownership, enforcing ABAC at all times.\n\nBusiness logic includes full access logging for compliance and throttling to avoid denial-of-service patterns.","summary":"Complex search/filter for support tickets with advanced criteria support.","parameters":[],"requestBody":{"description":"Support ticket search and filtering parameters (status, priority, requestor, date).","typeName":"IAimallBackendSupportTicket.IRequest"},"responseBody":{"description":"Paginated filtered result set of support tickets, matching search parameters.","typeName":"IPageIAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"customer"},{"specification":"Searches and filters support tickets using complex filtering criteria. This operation works from the aimall_backend_support_tickets table, leveraging filtering, searching, pagination, and sorting based on keys such as status, priority, category, date ranges, and text queries. Enables helpdesk staff, administrators, and users to quickly locate specific tickets or analyze trends. Follows EARS and auditability requirements.","path":"/aimall-backend/seller/supportTickets","method":"patch","description":"Advanced search operation for support tickets with filtering, keyword search, pagination, and sorting. Allows querying on status (open, pending, resolved, closed), priorities, requester, assigned administrator, categories, and time intervals. Implementation leverages Prisma schema fields with zero denormalization, ensuring search relates to atomic record data only.\n\nCustomers may search their own history; administrators and support staff can filter entire system's queue. The response is strictly limited to data the requester is permitted to view per their role and ticket ownership, enforcing ABAC at all times.\n\nBusiness logic includes full access logging for compliance and throttling to avoid denial-of-service patterns.","summary":"Complex search/filter for support tickets with advanced criteria support.","parameters":[],"requestBody":{"description":"Support ticket search and filtering parameters (status, priority, requestor, date).","typeName":"IAimallBackendSupportTicket.IRequest"},"responseBody":{"description":"Paginated filtered result set of support tickets, matching search parameters.","typeName":"IPageIAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"seller"},{"specification":"Searches and filters support tickets using complex filtering criteria. This operation works from the aimall_backend_support_tickets table, leveraging filtering, searching, pagination, and sorting based on keys such as status, priority, category, date ranges, and text queries. Enables helpdesk staff, administrators, and users to quickly locate specific tickets or analyze trends. Follows EARS and auditability requirements.","path":"/aimall-backend/administrator/supportTickets","method":"patch","description":"Advanced search operation for support tickets with filtering, keyword search, pagination, and sorting. Allows querying on status (open, pending, resolved, closed), priorities, requester, assigned administrator, categories, and time intervals. Implementation leverages Prisma schema fields with zero denormalization, ensuring search relates to atomic record data only.\n\nCustomers may search their own history; administrators and support staff can filter entire system's queue. The response is strictly limited to data the requester is permitted to view per their role and ticket ownership, enforcing ABAC at all times.\n\nBusiness logic includes full access logging for compliance and throttling to avoid denial-of-service patterns.","summary":"Complex search/filter for support tickets with advanced criteria support.","parameters":[],"requestBody":{"description":"Support ticket search and filtering parameters (status, priority, requestor, date).","typeName":"IAimallBackendSupportTicket.IRequest"},"responseBody":{"description":"Paginated filtered result set of support tickets, matching search parameters.","typeName":"IPageIAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"Retrieves a single support ticket by its unique identifier from the aimall_backend_support_tickets table. Provides detailed ticket data including all atomic fields in schema, relationships to requester and assignee, status tracking, timestamps, and fully audited content. This operation supports helpdesk flows, compliance, support dashboard detail panels, and customer review of their ticket's state and resolution history.","path":"/aimall-backend/customer/supportTickets/{supportTicketId}","method":"get","description":"Retrieve detailed information for an individual support ticket using its UUID. This exposes all schema-compliant ticket record attributes, including subject, body, status, priority, requester, assignee, category, audit timestamps, and current workflow state.\n\nAccess is restricted to the requester (who opened the ticket), the assigned administrator, or platform administrators with appropriate permissions. No ticket data outside user roles is disclosed. Role-based content filtering protects sensitive information.\n\nRelated: use POST for creation, PUT for update, DELETE for closing/removing tickets.","summary":"Get details of a specific support ticket by ID with all schema properties.","parameters":[{"name":"supportTicketId","description":"Unique identifier (UUID) for the support ticket to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the specified support ticket, directly reflecting schema fields.","typeName":"IAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieves a single support ticket by its unique identifier from the aimall_backend_support_tickets table. Provides detailed ticket data including all atomic fields in schema, relationships to requester and assignee, status tracking, timestamps, and fully audited content. This operation supports helpdesk flows, compliance, support dashboard detail panels, and customer review of their ticket's state and resolution history.","path":"/aimall-backend/seller/supportTickets/{supportTicketId}","method":"get","description":"Retrieve detailed information for an individual support ticket using its UUID. This exposes all schema-compliant ticket record attributes, including subject, body, status, priority, requester, assignee, category, audit timestamps, and current workflow state.\n\nAccess is restricted to the requester (who opened the ticket), the assigned administrator, or platform administrators with appropriate permissions. No ticket data outside user roles is disclosed. Role-based content filtering protects sensitive information.\n\nRelated: use POST for creation, PUT for update, DELETE for closing/removing tickets.","summary":"Get details of a specific support ticket by ID with all schema properties.","parameters":[{"name":"supportTicketId","description":"Unique identifier (UUID) for the support ticket to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the specified support ticket, directly reflecting schema fields.","typeName":"IAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieves a single support ticket by its unique identifier from the aimall_backend_support_tickets table. Provides detailed ticket data including all atomic fields in schema, relationships to requester and assignee, status tracking, timestamps, and fully audited content. This operation supports helpdesk flows, compliance, support dashboard detail panels, and customer review of their ticket's state and resolution history.","path":"/aimall-backend/administrator/supportTickets/{supportTicketId}","method":"get","description":"Retrieve detailed information for an individual support ticket using its UUID. This exposes all schema-compliant ticket record attributes, including subject, body, status, priority, requester, assignee, category, audit timestamps, and current workflow state.\n\nAccess is restricted to the requester (who opened the ticket), the assigned administrator, or platform administrators with appropriate permissions. No ticket data outside user roles is disclosed. Role-based content filtering protects sensitive information.\n\nRelated: use POST for creation, PUT for update, DELETE for closing/removing tickets.","summary":"Get details of a specific support ticket by ID with all schema properties.","parameters":[{"name":"supportTicketId","description":"Unique identifier (UUID) for the support ticket to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the specified support ticket, directly reflecting schema fields.","typeName":"IAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"Creates a new support ticket by inserting an atomic entry into aimall_backend_support_tickets. Required for customer, seller, or administrator-initiated support requests, tracking all ticket attributes: subject, body, status, priority, category, and owner. Triggers audit events and compliance logging. Follows strict normalization with no pre-calculated or denormalized fields. Returns the created entity with ID and all atomic fields.","path":"/aimall-backend/customer/supportTickets","method":"post","description":"Initiate a new support ticket entry in the system. This creates a record according to the aimall_backend_support_tickets schema with validated requester, subject, detailed body, status, priority, category, and assignment (if any).\n\nThe endpoint enforces role-based checks: customers may open tickets about their own issues; sellers and administrators can report business/system incidents. Audit logging and full field validation ensures traceability for support and compliance.\n\nThe returned record includes the full ticket after creation, including server-generated timestamps and unique ID.","summary":"Create and submit a new support ticket.","parameters":[],"requestBody":{"description":"All required fields for support ticket creation, with validation as per schema.","typeName":"IAimallBackendSupportTicket.ICreate"},"responseBody":{"description":"The newly created support ticket, reflecting all normalized fields in the schema.","typeName":"IAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"customer"},{"specification":"Creates a new support ticket by inserting an atomic entry into aimall_backend_support_tickets. Required for customer, seller, or administrator-initiated support requests, tracking all ticket attributes: subject, body, status, priority, category, and owner. Triggers audit events and compliance logging. Follows strict normalization with no pre-calculated or denormalized fields. Returns the created entity with ID and all atomic fields.","path":"/aimall-backend/seller/supportTickets","method":"post","description":"Initiate a new support ticket entry in the system. This creates a record according to the aimall_backend_support_tickets schema with validated requester, subject, detailed body, status, priority, category, and assignment (if any).\n\nThe endpoint enforces role-based checks: customers may open tickets about their own issues; sellers and administrators can report business/system incidents. Audit logging and full field validation ensures traceability for support and compliance.\n\nThe returned record includes the full ticket after creation, including server-generated timestamps and unique ID.","summary":"Create and submit a new support ticket.","parameters":[],"requestBody":{"description":"All required fields for support ticket creation, with validation as per schema.","typeName":"IAimallBackendSupportTicket.ICreate"},"responseBody":{"description":"The newly created support ticket, reflecting all normalized fields in the schema.","typeName":"IAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new support ticket by inserting an atomic entry into aimall_backend_support_tickets. Required for customer, seller, or administrator-initiated support requests, tracking all ticket attributes: subject, body, status, priority, category, and owner. Triggers audit events and compliance logging. Follows strict normalization with no pre-calculated or denormalized fields. Returns the created entity with ID and all atomic fields.","path":"/aimall-backend/administrator/supportTickets","method":"post","description":"Initiate a new support ticket entry in the system. This creates a record according to the aimall_backend_support_tickets schema with validated requester, subject, detailed body, status, priority, category, and assignment (if any).\n\nThe endpoint enforces role-based checks: customers may open tickets about their own issues; sellers and administrators can report business/system incidents. Audit logging and full field validation ensures traceability for support and compliance.\n\nThe returned record includes the full ticket after creation, including server-generated timestamps and unique ID.","summary":"Create and submit a new support ticket.","parameters":[],"requestBody":{"description":"All required fields for support ticket creation, with validation as per schema.","typeName":"IAimallBackendSupportTicket.ICreate"},"responseBody":{"description":"The newly created support ticket, reflecting all normalized fields in the schema.","typeName":"IAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing support ticket by its UUID, editing fields such as subject, body, status (e.g., open, resolved, closed), priority, assignment, and category. Based on aimall_backend_support_tickets schema, this operation is used by the ticket owner (customer) for updates, or by administrators/support agents for workflow progress (resolving/closing). All update actions are audited and validated to avoid integrity violations. Returns the updated record reflecting all changes.","path":"/aimall-backend/customer/supportTickets/{supportTicketId}","method":"put","description":"Edit the details of a support ticket, including subject, body, status, priority, category, and assigned administrator. Strict field validation is enforced per aimall_backend_support_tickets schema. Ticket owner (customer) can update issue description; administrators/support agents can update status, assignment, and internal notes as allowed by business rules.\n\nOperation is fully audit-logged for compliance, and role-based masking is applied where ticket fields are inappropriate for the actor (e.g., assignment only by administrators).\n\nReturns the complete ticket data after update for confirmation and transparency.","summary":"Edit/update a support ticket's fields and workflow assignments.","parameters":[{"name":"supportTicketId","description":"Target support ticket's UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Ticket fields allowed for update (may be partial per business rules).","typeName":"IAimallBackendSupportTicket.IUpdate"},"responseBody":{"description":"Support ticket state after the update, fully reflecting all schema properties.","typeName":"IAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"customer"},{"specification":"Updates an existing support ticket by its UUID, editing fields such as subject, body, status (e.g., open, resolved, closed), priority, assignment, and category. Based on aimall_backend_support_tickets schema, this operation is used by the ticket owner (customer) for updates, or by administrators/support agents for workflow progress (resolving/closing). All update actions are audited and validated to avoid integrity violations. Returns the updated record reflecting all changes.","path":"/aimall-backend/seller/supportTickets/{supportTicketId}","method":"put","description":"Edit the details of a support ticket, including subject, body, status, priority, category, and assigned administrator. Strict field validation is enforced per aimall_backend_support_tickets schema. Ticket owner (customer) can update issue description; administrators/support agents can update status, assignment, and internal notes as allowed by business rules.\n\nOperation is fully audit-logged for compliance, and role-based masking is applied where ticket fields are inappropriate for the actor (e.g., assignment only by administrators).\n\nReturns the complete ticket data after update for confirmation and transparency.","summary":"Edit/update a support ticket's fields and workflow assignments.","parameters":[{"name":"supportTicketId","description":"Target support ticket's UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Ticket fields allowed for update (may be partial per business rules).","typeName":"IAimallBackendSupportTicket.IUpdate"},"responseBody":{"description":"Support ticket state after the update, fully reflecting all schema properties.","typeName":"IAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"seller"},{"specification":"Updates an existing support ticket by its UUID, editing fields such as subject, body, status (e.g., open, resolved, closed), priority, assignment, and category. Based on aimall_backend_support_tickets schema, this operation is used by the ticket owner (customer) for updates, or by administrators/support agents for workflow progress (resolving/closing). All update actions are audited and validated to avoid integrity violations. Returns the updated record reflecting all changes.","path":"/aimall-backend/administrator/supportTickets/{supportTicketId}","method":"put","description":"Edit the details of a support ticket, including subject, body, status, priority, category, and assigned administrator. Strict field validation is enforced per aimall_backend_support_tickets schema. Ticket owner (customer) can update issue description; administrators/support agents can update status, assignment, and internal notes as allowed by business rules.\n\nOperation is fully audit-logged for compliance, and role-based masking is applied where ticket fields are inappropriate for the actor (e.g., assignment only by administrators).\n\nReturns the complete ticket data after update for confirmation and transparency.","summary":"Edit/update a support ticket's fields and workflow assignments.","parameters":[{"name":"supportTicketId","description":"Target support ticket's UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Ticket fields allowed for update (may be partial per business rules).","typeName":"IAimallBackendSupportTicket.IUpdate"},"responseBody":{"description":"Support ticket state after the update, fully reflecting all schema properties.","typeName":"IAimallBackendSupportTicket"},"authorizationRoles":["customer","seller","administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes (closes) a support ticket, identified by its UUID. As the schema does not have a soft-delete (deleted_at), this operation irreversibly removes the ticket record from the aimall_backend_support_tickets table. Used by ticket owners to close erroneous or resolved tickets, and by administrators for queue maintenance or compliance. All actions are audit-logged per platform policies for irreversibility. Returns success/failure status only, no response body.","path":"/aimall-backend/customer/supportTickets/{supportTicketId}","method":"delete","description":"Delete a support ticket by its UUID. This is a hard deletion due to absence of soft-delete field in Prisma schema - once removed, the record cannot be restored. Operation is allowed for ticket owners or administrators per platform policy.\n\nAudit log is created for traceability. Business logic may block deletion of tickets still pending action or escalated for compliance reasons. Role verification is mandatory before execution.","summary":"Delete a support ticket by ID (hard delete, no soft deletion).","parameters":[{"name":"supportTicketId","description":"UUID for the ticket to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"customer"},{"specification":"Deletes (closes) a support ticket, identified by its UUID. As the schema does not have a soft-delete (deleted_at), this operation irreversibly removes the ticket record from the aimall_backend_support_tickets table. Used by ticket owners to close erroneous or resolved tickets, and by administrators for queue maintenance or compliance. All actions are audit-logged per platform policies for irreversibility. Returns success/failure status only, no response body.","path":"/aimall-backend/seller/supportTickets/{supportTicketId}","method":"delete","description":"Delete a support ticket by its UUID. This is a hard deletion due to absence of soft-delete field in Prisma schema - once removed, the record cannot be restored. Operation is allowed for ticket owners or administrators per platform policy.\n\nAudit log is created for traceability. Business logic may block deletion of tickets still pending action or escalated for compliance reasons. Role verification is mandatory before execution.","summary":"Delete a support ticket by ID (hard delete, no soft deletion).","parameters":[{"name":"supportTicketId","description":"UUID for the ticket to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes (closes) a support ticket, identified by its UUID. As the schema does not have a soft-delete (deleted_at), this operation irreversibly removes the ticket record from the aimall_backend_support_tickets table. Used by ticket owners to close erroneous or resolved tickets, and by administrators for queue maintenance or compliance. All actions are audit-logged per platform policies for irreversibility. Returns success/failure status only, no response body.","path":"/aimall-backend/administrator/supportTickets/{supportTicketId}","method":"delete","description":"Delete a support ticket by its UUID. This is a hard deletion due to absence of soft-delete field in Prisma schema - once removed, the record cannot be restored. Operation is allowed for ticket owners or administrators per platform policy.\n\nAudit log is created for traceability. Business logic may block deletion of tickets still pending action or escalated for compliance reasons. Role verification is mandatory before execution.","summary":"Delete a support ticket by ID (hard delete, no soft deletion).","parameters":[{"name":"supportTicketId","description":"UUID for the ticket to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"Retrieves a paginated and optionally filtered list of FAQs. This operation is based on the aimall_backend_faqs table, which stores frequently asked questions, answers, category, order, and visibility. Used to display FAQ in customer help centers, administrator panels, and for ticket deflection by suggesting answers. All results are atomic and normalized per schema, never denormalized summary data.","path":"/aimall-backend/faqs","method":"get","description":"List all visible FAQ entries or paginate through FAQ records as defined in the aimall_backend_faqs model. FAQ data includes the question, answer, category, sort order, visibility flag, and timestamps for creation and last update.\n\nEnd users (customers, guests) and administrators may read APIs for display, but only visible=true records are shown to general public. This endpoint is suitable for customer help UIs and administrator FAQ search panels.\n\nRelated: PATCH for advanced search/filtering support, GET /faqs/{id} for detail view.","summary":"List or paginate FAQ entries for help desks and self-service support.","parameters":[],"requestBody":null,"responseBody":{"description":"Paged list of FAQ entries matching current role and visibility policy.","typeName":"IPageIAimallBackendFaq"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Advanced filtering and search for FAQ entries using full-text queries, category, visibility flag, sort order, and pagination. This operation is based on aimall_backend_faqs table, enabling administrators/managers to analyze, manage, or audit FAQ content and relevance. End users use it for knowledge search and self-service resolution. Implements zero denormalization, all filter/search/sort parameters are 1:1 with underlying schema fields.","path":"/aimall-backend/faqs","method":"patch","description":"Query, filter, and search FAQ database with complex criteria. Filters include category, visibility, keyword, and display ordering. Pagination and sort order are supported for scalable UX.\n\nThe endpoint applies to public help center, administrator panels, and analytics use. Implementation uses atomically stored field data only, and may be access-controlled for audit or compliance workflows. No hidden fields are exposed to guest/public users unless visibility is true.","summary":"Advanced FAQ search and filter, supports sorting and paging.","parameters":[],"requestBody":{"description":"Query/filter parameters for FAQ search and pagination, matching schema properties.","typeName":"IAimallBackendFaq.IRequest"},"responseBody":{"description":"Filter- and page-controlled list of FAQ entries, role-permitted for the query context.","typeName":"IPageIAimallBackendFaq"},"authorizationRoles":[],"name":"search","authorizationRole":null},{"specification":"Retrieves a single FAQ record by its UUID from the aimall_backend_faqs table. Delivers question, answer, category, sort order, visibility, and timestamps as stored. Used by all users for direct FAQ knowledge lookup in customer help center/in-app support or administrator panel FAQ maintenance. Data precision is as per atomic schema fields only. No denormalized/aggregate fields will be exposed.","path":"/aimall-backend/faqs/{faqId}","method":"get","description":"Returns complete details of an individual FAQ entry matching the provided UUID. Returned fields include full question, answer, category tag, visibility status, sorting order, as well as timestamps for creation and last update.\n\nThis endpoint is used in helpdesk UI for FAQ detail views, search results access and administrator panels. Only visible=true records are returned to non-admin/guest queries. Administrator users may access non-visible or hidden FAQs for content management workflows.","summary":"Retrieve all fields for a given FAQ by ID, as per schema definition.","parameters":[{"name":"faqId","description":"The UUID of the FAQ record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"FAQ entry detail, per schema's normalized fields.","typeName":"IAimallBackendFaq"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Creates a new FAQ entry by inserting a row into aimall_backend_faqs with question, answer, category, sort order, and visibility flag. Used by administrators, knowledge managers, or system automation to expand or adjust the FAQ data set. The operation ensures all FAQs are normalized into atomic field values, suitable for UI display or help desk usage. Returns the created FAQ record (as stored) for confirmation and further editing/auditing. Creation is audit-logged for compliance.","path":"/aimall-backend/administrator/faqs","method":"post","description":"Add a new FAQ record representing a knowledge base entry. Requires complete input for question, answer, category, visible, and sort order fields as described in the schema. This operation is permitted to administrator or knowledge manager roles; guests/customers may not add FAQs by policy.\n\nAll values are validated for normalization and correct answer/question scope. Audit trail is ensured for all creations for compliance and reporting. Returns the full inserted record for admin review.","summary":"Create a new FAQ entry (knowledge base record).","parameters":[],"requestBody":{"description":"FAQ fields for creation, mapped to schema properties.","typeName":"IAimallBackendFaq.ICreate"},"responseBody":{"description":"FAQ entity after successful insertion (all normalized fields).","typeName":"IAimallBackendFaq"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"Updates an existing FAQ record identified by UUID in aimall_backend_faqs. Editable fields include question, answer, category, visible flag, and sort order. Used to correct or refine FAQ content, reorder for display, or hide obsolete entries. Updates are audit-logged for compliance. The endpoint returns the updated FAQ entry data as confirmation. May only be used by authorized staff (administrator/knowledge managers).","path":"/aimall-backend/administrator/faqs/{faqId}","method":"put","description":"Edit fields of an existing FAQ record, using its UUID for lookup. Allowed fields are question, answer, category, visible, and sort order, with strict validation against schema normalization. All updates are audited for traceability, with only current/atomic values in the record. Administrator/knowledge manager role is required for writing changes. Returns the entire updated FAQ record after mutation.","summary":"Update the fields of a FAQ entry, referenced by its UUID.","parameters":[{"name":"faqId","description":"UUID of the FAQ record to edit/update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable FAQ fields; can be partial update but mapped per full schema for audit.","typeName":"IAimallBackendFaq.IUpdate"},"responseBody":{"description":"FAQ entity after update (all atomic properties, normalized for schema compliance).","typeName":"IAimallBackendFaq"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"Deletes an FAQ entry by its UUID. The schema has no soft-delete ('deleted_at'), so this is a hard deletion operation that completely removes the record from the aimall_backend_faqs table. Used by administrators for managing obsolete content, de-duplication, or compliance maintenance. All such deletions require an audit event for regulatory purposes, and are irreversible. No response body is returned.","path":"/aimall-backend/administrator/faqs/{faqId}","method":"delete","description":"Permanently remove an FAQ entry by its UUID. This is a hard delete and cannot be reversed. Only permitted for administrator/knowledge manager role and should be used with caution after audit confirmation.\n\nThe absence of 'deleted_at' in the schema means removed FAQs are fully erased from the database. Any downstream analytics/audits should be triggered on each delete. Deletion attempts on FAQs in use by compliance/analytics may be denied by business logic.","summary":"Delete an FAQ record by ID (hard delete only).","parameters":[{"name":"faqId","description":"UUID of the FAQ record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation fetches a paginated list of analytics dashboard configurations from the aimall_backend_analytics_dashboards Prisma table, enabling administrators to browse available analytics dashboards for reporting, KPI tracking, and fraud monitoring. The result contains essential metadata such as dashboard code, title, description, config JSON, creation and update timestamps. This query supports dashboard discovery, UI population, and administrative oversight. Only users with administrator authority should retrieve the full list, as dashboards may contain sensitive business metrics and configurations.","path":"/aimall-backend/administrator/analyticsDashboards","method":"get","description":"Retrieve a paginated list of analytics dashboard configuration records from the analytics subsystem. Each dashboard represents a customizable UI layout, holding metadata such as dashboard code, title, description, configuration JSON, creation time, and last update time. Utilized by administrators and system operators to manage, select, or audit available dashboards. \n\nAccess to this endpoint should be limited to users with administrative privileges, as analytics dashboards may encapsulate sensitive configuration or monitoring capabilities. Frequent use cases include loading available dashboards for configuration management, UX design, and monitoring updates. \n\nReturned data includes no aggregate or calculated results, only dashboard configuration/metadata from the underlying Prisma table aimall_backend_analytics_dashboards. Errors may occur if no dashboards are found or if the requesting user lacks sufficient privileges.","summary":"Fetch paginated analytics dashboard configuration list from aimall_backend_analytics_dashboards.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of analytics dashboard configuration entities.","typeName":"IPageIAimallBackendAnalyticsDashboard"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation retrieves a filtered, paginated list of analytics dashboards from the aimall_backend_analytics_dashboards table, supporting advanced search, sorting, and discovery of dashboard metadata. The request body specifies filter and pagination parameters. Administrators can search dashboards by code, title, description, or any indexed field and order the result set for optimal management UI. This enables efficient analytics dashboard administration and discovery, respecting platform security constraints.","path":"/aimall-backend/administrator/analyticsDashboards","method":"patch","description":"Search and retrieve a filtered, paginated list of analytics dashboards from the analytics configuration table. Supports advanced filtering, searching by fields such as code, title, description, and configurable sorting and pagination. Designed for backend administration tools, this operation provides administrators fine-grained browsing and management of available analytics dashboards, including historical and live dashboards. \n\nRequires admin-level authorization. The response structure contains only configuration metadata, as actual dashboard analytics data resides elsewhere. Input validation ensures only safe, allowable fields are filtered/sorted.","summary":"Advanced search for analytics dashboards with pagination and filtering.","parameters":[],"requestBody":{"description":"Parameters for filtering and paginating analytics dashboard configurations.","typeName":"IAimallBackendAnalyticsDashboard.IRequest"},"responseBody":{"description":"Paginated search result of analytics dashboard configuration entities.","typeName":"IPageIAimallBackendAnalyticsDashboard"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation retrieves details for a single analytics dashboard configuration from the aimall_backend_analytics_dashboards table by its unique ID. It allows administrators or operators to view configuration details such as code, title, dashboard description, JSON configuration, and audit metadata for a particular dashboard. Only authorized administrative users may access dashboard details due to potential sensitivity of analytics configuration data.","path":"/aimall-backend/administrator/analyticsDashboards/{analyticsDashboardId}","method":"get","description":"Retrieve the full configuration details for a specific analytics dashboard by its unique identifier. The response includes all atomic properties from the aimall_backend_analytics_dashboards schema: dashboard code, title, description, serialized configuration JSON, creation, and last update timestamps.\n\nAdministrators use this operation to view, audit, or modify dashboard configurations within the analytics management panel. Security constraints restrict this endpoint to admin-role users due to potential business/operational sensitivity. Errors are returned if the dashboard does not exist or the user does not have access rights.","summary":"Get a specific analytics dashboard configuration by ID.","parameters":[{"name":"analyticsDashboardId","description":"Unique identifier of the target analytics dashboard.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of a single analytics dashboard configuration.","typeName":"IAimallBackendAnalyticsDashboard"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation creates a new analytics dashboard configuration in the aimall_backend_analytics_dashboards table. The request body provides all required dashboard metadata: code, title, description, layout/config JSON, etc. Only admin users can create new dashboard definitions. The newly created entity is returned, and unique constraints on dashboard code are enforced. This supports new dashboard onboarding for analytics and monitoring use cases.","path":"/aimall-backend/administrator/analyticsDashboards","method":"post","description":"Creates a new analytics dashboard configuration within the analytics subsystem. The input payload must specify all required configurational and descriptive properties—including dashboard code (unique), title, description, and config JSON—compliant with the aimall_backend_analytics_dashboards schema.\n\nOnly users with administrative privileges should perform this operation, reflecting the business need to restrict dashboard setup to trusted roles. Uniqueness of the dashboard code is enforced, and creation triggers audit logging for compliance. On success, the system returns the created dashboard entity. Violations of the uniqueness or required-field constraints cause an error response.","summary":"Create a new analytics dashboard configuration record.","parameters":[],"requestBody":{"description":"Definition of the analytics dashboard to create.","typeName":"IAimallBackendAnalyticsDashboard.ICreate"},"responseBody":{"description":"Created analytics dashboard configuration entity.","typeName":"IAimallBackendAnalyticsDashboard"},"authorizationRoles":["administrator"],"name":"create","authorizationRole":"administrator"},{"specification":"This operation updates an existing analytics dashboard configuration in the aimall_backend_analytics_dashboards table by unique ID. It allows authorized administrators to modify dashboard code, title, description, or config JSON. Update requests fully replace or merge configuration data as needed. The updated dashboard entity is returned. Dashboard codes must remain unique, and concurrent modification rules (such as optimistic locking) are recommended for integrity.","path":"/aimall-backend/administrator/analyticsDashboards/{analyticsDashboardId}","method":"put","description":"Allows administrative users to update a specific analytics dashboard configuration by its unique ID. The request body includes any updatable fields compliant with the aimall_backend_analytics_dashboards schema: dashboard code (unique), title, description, and config JSON. On successful update, the modified entity is returned.\n\nSecurity logic ensures only admin-role users may access this operation. Uniqueness constraints on the code field and audit trail logging are rigorously enforced. Error responses result if attempting to update a non-existent or immutable dashboard, or violating unique code constraints. Partial updates should be handled in implementation if allowed.","summary":"Update an existing analytics dashboard configuration by ID.","parameters":[{"name":"analyticsDashboardId","description":"Unique identifier of the target analytics dashboard.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Analytics dashboard fields to update (full or partial).","typeName":"IAimallBackendAnalyticsDashboard.IUpdate"},"responseBody":{"description":"Updated analytics dashboard configuration entity.","typeName":"IAimallBackendAnalyticsDashboard"},"authorizationRoles":["administrator"],"name":"update","authorizationRole":"administrator"},{"specification":"This operation deletes an analytics dashboard configuration from the aimall_backend_analytics_dashboards table, identified by unique dashboard ID. Only administrators may perform dashboard deletions, ensuring auditability and proper access control. Deletions are hard deletes as there is no soft delete field (e.g., deleted_at) in the schema. Once deleted, the dashboard cannot be recovered, and historical references in audit logs remain for compliance.","path":"/aimall-backend/administrator/analyticsDashboards/{analyticsDashboardId}","method":"delete","description":"Delete a specific analytics dashboard configuration by its unique identifier. This operation removes the configuration from the analytics system, performing a hard delete as the associated schema contains no soft delete field. Only users with administrator role may execute this action, and all deletions are logged for compliance.\n\nThis operation is irreversible; once executed, the configuration record is permanently removed with no ability to restore via backend API. Access controls prevent unauthorized users from deleting dashboards. Errors are returned if the target dashboard does not exist or if the user lacks sufficient permissions.","summary":"Delete an analytics dashboard configuration by unique ID (hard delete).","parameters":[{"name":"analyticsDashboardId","description":"Unique identifier of the analytics dashboard to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"},{"specification":"This operation lists the audit log records from the aimall_backend_audit_logs table. It enables admin users to review system and user actions, configuration changes, event outcomes, and compliance-relevant activities. The result is paginated and contains log metadata, supporting use cases such as incident analysis, compliance audits, and administrator reviews. Only users with administrative privileges should access system audit logs due to their sensitive content.","path":"/aimall-backend/administrator/auditLogs","method":"get","description":"Fetch a paginated list of audit log entries from the platform's analytics subsystem. Each entry includes detailed metadata regarding system, administrator, or automated actions—for instance, login events, permission changes, dashboard edits, and their associated outcome statuses. Audit log retrieval is critical for compliance, incident investigation, and administrator oversight. \n\nThis endpoint is strictly limited to administrators due to the potential sensitivity of recorded actions and user information contained within audit logs. Data returned is atomic, directly reflecting the core schema without any aggregation or join. Security measures are in place to prevent unprivileged access. If no logs are found, an empty page is returned; insufficient privileges generate an error response.","summary":"Get a paginated list of system audit log entries from aimall_backend_audit_logs.","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of audit log records from the analytics system.","typeName":"IPageIAimallBackendAuditLog"},"authorizationRoles":["administrator"],"name":"index","authorizationRole":"administrator"},{"specification":"This operation returns a filtered, paginated list of audit log entries from the aimall_backend_audit_logs table, allowing administrators to search logs by event type, actor, target, outcome, and time range. The request body contains advanced search and filtering options. This is crucial for audit trail reviews, compliance investigations, and incident response. Only users with sufficient administrative authority may perform this search operation due to the sensitive nature of the log data.","path":"/aimall-backend/administrator/auditLogs","method":"patch","description":"Search for and retrieve a filtered, paginated audit trail of log records from the analytics subsystem. Supports field-level querying (event_type, actor_id, event_target, outcome, timestamp, etc), as well as advanced sorting and pagination options. Used by administrators during investigations, compliance checks, and behavioral analysis of system actions. \n\nThe returned log data includes only atomic properties from the aimall_backend_audit_logs schema for transparency and full auditability. Endpoint access is restricted to administrators, in line with system security and privacy policies. Inputs are validated for allowable search fields and query ranges. Errors occur on validation failure or insufficient privileges.","summary":"Advanced search of audit log entries with filtering and pagination.","parameters":[],"requestBody":{"description":"Parameters for filtering and paginating audit log entries.","typeName":"IAimallBackendAuditLog.IRequest"},"responseBody":{"description":"Paginated list of filtered audit log records.","typeName":"IPageIAimallBackendAuditLog"},"authorizationRoles":["administrator"],"name":"search","authorizationRole":"administrator"},{"specification":"This operation fetches the details of a specific audit log entry from the aimall_backend_audit_logs table by its unique ID, enabling full review of the recorded event including actor, event type, target, outcome, and context JSON. Only administrators can view audit log entry details—supporting compliance, investigations, operational reviews, or security audits.","path":"/aimall-backend/administrator/auditLogs/{auditLogId}","method":"get","description":"Retrieve details for a single audit log event by its unique identifier. The returned fields include actor reference, event type, event target, IP address, outcome, detail JSON, and creation timestamp. Supports auditing, forensics, and operational transparency in line with regulatory requirements. \n\nThe endpoint strictly restricts access to administration personnel, as audit log entries may expose sensitive system structure or personal data. If the record does not exist or the user lacks permissions, an error is returned.","summary":"Get a specific audit log entry by unique ID.","parameters":[{"name":"auditLogId","description":"Unique identifier of the audit log record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the audit log event with all schema properties.","typeName":"IAimallBackendAuditLog"},"authorizationRoles":["administrator"],"name":"at","authorizationRole":"administrator"},{"specification":"This operation deletes an individual audit log record from the analytics system (aimall_backend_audit_logs table) by its unique ID. The deletion is a hard delete—there is NO soft delete field. This endpoint is provided for very rare administrative or compliance use-cases, such as correction of erroneous logs or sensitive record redaction under legal directive. All deletes are permanently executed and are not recoverable. High-level admin authorizations are required.","path":"/aimall-backend/administrator/auditLogs/{auditLogId}","method":"delete","description":"Delete a specific audit log entry from the analytics system by unique identifier. This operation irreversibly removes the audit log from the aimall_backend_audit_logs records (hard delete) since there is no soft delete field, and is intended only for seldom, administratively authorized use-cases. All deletions are performed under strict auditing and authorization to prevent compliance violations. \n\nExecutions of this operation cannot be undone—the audit log is fully removed and cannot be recovered by any backend API. Suitable only for super-admin roles or compliance-driven manual deletions with full consent. If the ID does not exist or the caller lacks permission, an error occurs.","summary":"Delete a specific audit log entry by unique ID (hard delete).","parameters":[{"name":"auditLogId","description":"Unique identifier of the audit log record to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator"}]