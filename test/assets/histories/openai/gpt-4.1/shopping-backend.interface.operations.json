[{"specification":"Search for a filtered, paginated list of system configuration settings relevant to the shopping mall backend. This operation queries the shopping_mall_ai_backend_system_settings table and supports advanced keyword search, filtering by configuration key or description, sorting, and pagination. It is vital for administrators to gain insight into environment-wide toggles, compliance-impacting features, and auditing parameters. All retrievals reflect soft-deletion semantics to ensure historical consistency and auditability.","path":"/shoppingMallAiBackend/admin/systemSettings","method":"patch","description":"Retrieve a paginated and filterable list of system settings entries from the shopping_mall_ai_backend_system_settings table. Administrators use this API for environment monitoring, compliance checks, and feature flag management. The response delivers configuration parameters, values, and soft-delete visibility (entries where deleted_at is null are active). Only admin users have access, and audit trails must be enforced at retrieval time. Typical pagination (page number, size) and free-text search on conf_key/description are supported.\n\nThe response includes a summary of each configuration, its current value, and metadata including creation and update timestamps. This operation is tightly governed by compliance—returns must include all audit-relevant (non-hard-deleted) settings.\n\nErrors return reasons such as insufficient permission or invalid search criteria, with error codes for compliance logs.","summary":"Retrieve a paginated, filterable list of system configuration settings as an admin","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for settings retrieval","typeName":"IShoppingMallAiBackendSystemSetting.IRequest"},"responseBody":{"description":"Paginated summary of system settings with metadata and audit fields","typeName":"IPageIShoppingMallAiBackendSystemSetting.ISummary"},"authorizationRole":"admin","name":"search","authorizationRoles":["admin"]},{"specification":"Retrieve detailed information of a particular system setting entry by unique identifier from the shopping_mall_ai_backend_system_settings table. This allows auditors and administrators to determine a specific environment variable, feature flag, or compliance-related toggle and its full metadata state.","path":"/shoppingMallAiBackend/admin/systemSettings/{systemSettingId}","method":"get","description":"Fetch a specific system configuration setting by its unique UUID identifier. This operation is for administrative scenarios—detailed audit trails, compliance reviews, and system-level troubleshooting.\n\nThe operation validates the presence of the record (not hard-deleted), returning its key (conf_key), value (conf_value), optional description, creation and update timestamps, and soft-delete status. If the setting is soft-deleted (deleted_at not null), include explicit status in the response to signal logical deletion. Access is restricted to users with admin privileges; attempts by unauthorized users are rejected with an appropriate error message and code for audit log.\n\nError outcomes include record not found, permission denied, or invalid ID format.","summary":"Retrieve details of a specific system setting by UUID for admin audit or review","parameters":[{"name":"systemSettingId","description":"UUID identifier of the target system setting","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the selected system setting","typeName":"IShoppingMallAiBackendSystemSetting"},"authorizationRole":"admin","name":"at","authorizationRoles":["admin"]},{"specification":"Create a new system configuration setting entry in the shopping_mall_ai_backend_system_settings table. Admins define a new environment variable, feature flag, or policy constraint.","path":"/shoppingMallAiBackend/admin/systemSettings","method":"post","description":"Insert a new system setting as an admin. All fields must be supplied according to business rules (conf_key must be unique, conf_value meaningful, description optional but recommended for audit/compliance, timestamps are system-generated). This operation is audited, and all creations are recorded for later traceability.\n\nRejects duplicate keys, empty/invalid values, or unauthorized users. On success, returns the created setting entry.","summary":"Create a new system configuration setting (admin only)","parameters":[],"requestBody":{"description":"System setting creation details: key, value, and optional description","typeName":"IShoppingMallAiBackendSystemSetting.ICreate"},"responseBody":{"description":"Detailed record of the newly created system setting","typeName":"IShoppingMallAiBackendSystemSetting"},"authorizationRole":"admin","name":"create","authorizationRoles":["admin"]},{"specification":"Update an existing system setting entry identified by UUID in the shopping_mall_ai_backend_system_settings table. Only administrators may perform this operation. Ensures auditing and immutable change logs for configuration updates.","path":"/shoppingMallAiBackend/admin/systemSettings/{systemSettingId}","method":"put","description":"Admins update the value, description, or other business fields of an existing system setting record. The operation checks UUID validity, anti-duplication for conf_key, and validates content is meaningful per compliance requirements. All changes result in update timestamps being refreshed and an audit event being logged.\n\nEdge cases include attempts to update non-existent or soft-deleted records (report as not found), or conflicts on conf_key uniqueness. Updates must reflect immutability rules and maintain full change traceability.","summary":"Update an existing system setting entry (admin only)","parameters":[{"name":"systemSettingId","description":"UUID of the system setting to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the targeted system setting","typeName":"IShoppingMallAiBackendSystemSetting.IUpdate"},"responseBody":{"description":"Updated record of the system setting","typeName":"IShoppingMallAiBackendSystemSetting"},"authorizationRole":"admin","name":"update","authorizationRoles":["admin"]},{"specification":"Delete a system setting entry by UUID. Because the schema has a deleted_at field, this is implemented as a soft delete for compliance. Only admins can delete settings. Hard delete is not supported unless required by regulatory mandate.","path":"/shoppingMallAiBackend/admin/systemSettings/{systemSettingId}","method":"delete","description":"Soft-delete a system configuration setting, setting deleted_at to the current timestamp for compliance traceability. Deletion checks for existence (not already soft-deleted) and admin rights. This ensures configuration history is retained for audit. Attempts to delete a non-existent or already-deleted record must return a meaningful error.\n\nAfter deletion, the setting is logically excluded from active searches but retained for history and rollback purposes.","summary":"Soft-delete a system setting (admin only, compliance retention)","parameters":[{"name":"systemSettingId","description":"UUID of the system setting to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","authorizationRoles":["admin"]},{"specification":"Search, filter, and page through the list of channels in the shopping mall backend (table: shopping_mall_ai_backend_channels). Used by admins for business configuration, channel partitioning, and monitoring. Supports search (by name, code), status, and other filters, and pagination for scalability.","path":"/shoppingMallAiBackend/admin/channels","method":"patch","description":"Admin-only API to retrieve a filtered, paginated list of business channels such as partner brands or separate market tenants. Queries shopping_mall_ai_backend_channels with flexible filters: name partial match, business code, activation status, creator, and supports pagination (page, size, order). Returns channel metadata such as code, name, logo, description, status, creator admin, creation/update time, and soft-delete status.\n\nSoft-deleted channels (deleted_at not null) are excluded from normal search but may be retrievable in audit contexts depending on request flags. Unauthorized callers are denied access with an error. This operation is critical for business partitioning monitoring, brand/channel UX management, and compliance audit.","summary":"List, search, and filter business channels as an admin","parameters":[],"requestBody":{"description":"Channel search, filter, and pagination parameters","typeName":"IShoppingMallAiBackendChannel.IRequest"},"responseBody":{"description":"Paginated list of channel summary information","typeName":"IPageIShoppingMallAiBackendChannel.ISummary"},"authorizationRole":"admin","name":"search","authorizationRoles":["admin"]},{"specification":"Return detailed information about a specific business channel from shopping_mall_ai_backend_channels table, selected by unique channel ID (UUID). Admin-only for compliance and partition management.","path":"/shoppingMallAiBackend/admin/channels/{channelId}","method":"get","description":"Retrieve a specific channel's details (code, name, status, logo_url, creator admin, description, timestamps, soft-delete flag) given its unique UUID. Intended for admin portal, compliance, and detailed channel entity management.\n\nAPI checks for authorization and that the channel is not hard-deleted (deleted_at null). Soft-deleted channels can be optionally retrieved for audit. Errors include not found or permission denied. Features compliance-level logging for access validity and business partitioning.","summary":"Get details of a specific channel by its ID (admin only)","parameters":[{"name":"channelId","description":"Channel's unique UUID to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified channel","typeName":"IShoppingMallAiBackendChannel"},"authorizationRole":"admin","name":"at","authorizationRoles":["admin"]},{"specification":"Create a new channel for business partitioning in the shopping mall backend. Only administrators may create business channels. Each channel receives a unique code, branding details, description, and activation status. All creations are logged for compliance.","path":"/shoppingMallAiBackend/admin/channels","method":"post","description":"Admin-only operation for channel/master data creation in shopping_mall_ai_backend_channels. All required business fields (code, name, activation, creator admin) and optional branding, logo, description must be provided in creation request, with code being unique system-wide. On success, returns channel details. Duplicate codes and missing fields are rejected. Integrates compliance trail for creation events.\n\nChannels facilitate marketplace partitioning, multi-brand, and partner management. Access restricted to admin users per RBAC logic.","summary":"Create a new business channel entry (admin only)","parameters":[],"requestBody":{"description":"New business channel creation data (fields per schema)","typeName":"IShoppingMallAiBackendChannel.ICreate"},"responseBody":{"description":"Details of the newly created channel","typeName":"IShoppingMallAiBackendChannel"},"authorizationRole":"admin","name":"create","authorizationRoles":["admin"]},{"specification":"Update an existing business channel entry by channelId (UUID) in shopping_mall_ai_backend_channels. Only admin users can modify data; all modifications are compliance-logged. Supports updating name, branding, description, active state, and other modifiable business fields. Code is immutable after creation for traceability.","path":"/shoppingMallAiBackend/admin/channels/{channelId}","method":"put","description":"Update channel entity properties such as name, logo_url, description, visibility/active status, and related business fields. Allows only admin access. The channelId identifies the record to update; code is system-immutable and update requests to code will be rejected, enforcing audit-compliant uniqueness. All changes update the record's update timestamp with a compliance log entry.\n\n404/permission denied is returned for invalid or not found channelId, or authorization violation.","summary":"Update a channel record by UUID (admin only, code is immutable)","parameters":[{"name":"channelId","description":"Target channel's unique UUID to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Channel fields to update (except code, which is immutable)","typeName":"IShoppingMallAiBackendChannel.IUpdate"},"responseBody":{"description":"Updated channel record details","typeName":"IShoppingMallAiBackendChannel"},"authorizationRole":"admin","name":"update","authorizationRoles":["admin"]},{"specification":"Logically (soft-)delete a business channel by its UUID. Admin-only; this operation fills the deleted_at timestamp but retains the record for compliance and audit. Channels are not physically removed. Attempts to delete a non-existent or already-deleted channel yield error.","path":"/shoppingMallAiBackend/admin/channels/{channelId}","method":"delete","description":"Soft-delete a channel record by setting deleted_at to the current timestamp for compliance traceability. Only admins may perform this action. Logically deleted channels are hidden from standard searches, while audit operations may still access them. Calls to erase an already-deleted or non-existent channel return appropriate errors. Deletion is RBAC controlled and logged for business regulatory compliance.","summary":"Soft-delete a channel by its UUID (admin only, compliance retention)","parameters":[{"name":"channelId","description":"Channel UUID to soft-delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","authorizationRoles":["admin"]},{"specification":"Paginate, search, and filter all section records belonging to a given channel in the shopping_mall_ai_backend_sections table. Used for organizing product curation areas (banners, featured sections, etc.) in a given channel. Restricted to admin role, compliant with channel permissioning and soft-delete rules.","path":"/shoppingMallAiBackend/admin/channels/{channelId}/sections","method":"patch","description":"Admin API to retrieve a paginated/filtered list of product sections within a specified channel. Accepts a channelId (UUID) as a path parameter. Filter/search options include code, name, display_order, and visibility. Excludes soft-deleted sections except in audit mode. Intended for platform curation, campaign management, and channel-specific UI administration. Only admins are permitted access, and attempts by non-admins are denied. Results include code, name, status, display order, visibility, creation/update/delete info, and creator admin reference. Includes audit controls for read access and parameters.","summary":"Search and page product curation sections by channel (admin only)","parameters":[{"name":"channelId","description":"Channel UUID whose sections are to be listed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering/search/pagination info for sections","typeName":"IShoppingMallAiBackendSection.IRequest"},"responseBody":{"description":"Paginated summary of channel section details","typeName":"IPageIShoppingMallAiBackendSection.ISummary"},"authorizationRole":"admin","name":"search","authorizationRoles":["admin"]},{"specification":"Fetch full details of a specific section by sectionId (UUID) within a specific channelId (UUID) from shopping_mall_ai_backend_sections. Restricted to admin context, includes full audit data and soft-delete state.","path":"/shoppingMallAiBackend/admin/channels/{channelId}/sections/{sectionId}","method":"get","description":"Retrieve detailed information for a single channel section using channelId and sectionId as path parameters. Only admins may access this. Fails if not found, already deleted, or unauthorized. Returns section business data (code, name, description, order, visibility, creator admin, creation/update/delete timestamps). Essential for managing, auditing, or editing channel frontends and campaign/feature banners. Errors for 404/permission and audit-log on access, with full compliance traceability.","summary":"Get details of a specific section within a channel (admin only)","parameters":[{"name":"channelId","description":"Business channel UUID containing the section","schema":{"type":"string","format":"uuid"}},{"name":"sectionId","description":"Target section's unique UUID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the channel section","typeName":"IShoppingMallAiBackendSection"},"authorizationRole":"admin","name":"at","authorizationRoles":["admin"]},{"specification":"This operation creates a new section within a specified channel in the shopping mall system. It works on the shopping_mall_ai_backend_sections table, ensuring each section is tied to a business channel and an admin creator. The section supports business attributes, validation rules for unique codes per channel, display order, visibility toggles, and all required audit fields. Creation enforces referential integrity between channel and admin. Proper admin role required.","description":"This API creates a new section under a specific business channel. Only authenticated admins can create new sections. Each section must have a unique code within its channel context; duplication is not permitted and will trigger a validation error. The request payload comprises essential attributes such as code, display name, description, display order, and initial visibility flag, along with the creating admin's identifier. Upon successful creation, the section is linked to the specified channel and admin. Audit fields such as created_at and updated_at are auto-generated. Proper role-based authorization for admin users is enforced. Soft delete is supported; deleted records are hidden but retained for audit.","summary":"Create a new section under a specified channel (shopping_mall_ai_backend_sections)","parameters":[{"name":"channelId","description":"Target channel's unique ID (UUID) to which the section will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Section information for creation (code, name, display_order etc) with admin context","typeName":"IShoppingMallAiBackendSection.ICreate"},"responseBody":{"description":"Created section entity details including all fields and relations","typeName":"IShoppingMallAiBackendSection"},"authorizationRole":"admin","name":"createSection","path":"/shoppingMallAiBackend/admin/channels/{channelId}/sections","method":"post"},{"specification":"This operation updates an existing section in a specific channel. It covers updates for all mutable fields of shopping_mall_ai_backend_sections while preserving referential integrity to channel and admin entities. Unique constraints for code within the channel and business validation rules apply. Allows selective updates to properties such as status, display order, and visibility. Keeps audit history. Admin role required.","description":"Updates details of an existing section under a business channel. Only admins can perform updates. Requires the channelId to maintain referential integrity and sectionId to ensure exact target. Permits modifications of code, name, description, order, and visibility fields. Maintains an audit trail (timestamps, updating admin). Unique constraints for section codes within the channel are strictly enforced. Soft delete applies: deleted_at field set for removal. Authorization limited to users with admin privileges.","summary":"Update section details for an existing section (shopping_mall_ai_backend_sections)","parameters":[{"name":"channelId","description":"Target channel's unique ID (UUID) to which the section belongs.","schema":{"type":"string","format":"uuid"}},{"name":"sectionId","description":"Unique UUID of the section to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Section fields to update (partial or full), must match updatable schema fields","typeName":"IShoppingMallAiBackendSection.IUpdate"},"responseBody":{"description":"Updated section entity, reflecting all modified fields and current state","typeName":"IShoppingMallAiBackendSection"},"authorizationRole":"admin","name":"updateSection","path":"/shoppingMallAiBackend/admin/channels/{channelId}/sections/{sectionId}","method":"put"},{"specification":"This operation deletes a section from a specified channel using a soft delete mechanism: the deleted_at field is set rather than physical removal from storage. Referential integrity with the shopping_mall_ai_backend_sections table is enforced, and only authorized admin users can perform this operation. Historical audit is maintained.","description":"Marks a section under a business channel as deleted by setting the deleted_at field. Only admins may delete sections. Operation ensures referential integrity—if the section or channel does not exist, an appropriate error is returned. Soft delete logic ensures data is hidden but retained for compliance and forensic trace. Audit records reflect deletion events. Only the admin role is authorized for this action. No response body is returned on success.","summary":"Delete (soft) a section in a channel (shopping_mall_ai_backend_sections)","parameters":[{"name":"channelId","description":"UUID of the channel containing the section to be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"sectionId","description":"UUID of the section to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"eraseSection","path":"/shoppingMallAiBackend/admin/channels/{channelId}/sections/{sectionId}","method":"delete"},{"specification":"This operation allows PATCH-style advanced searching/filtering of categories in the shopping mall database (shopping_mall_ai_backend_categories). Supports pagination, fuzzy search, filtering by name/code/status/visibility, sorting, and navigation of hierarchical structures. Only admins can query the full category set; customer-facing endpoints use additional restrictions. Audit traces access as required by compliance policies.","description":"Retrieves a paginated, filtered, and optionally sorted list of categories using multiple fields such as code, name, parent_id, visibility, and status. Supports search for display, business management, and category tree navigation. Enables advanced UI features—auto-complete, filtering for admin UIs, curation scenarios, and analytics. Result includes both main and nested categories, honoring soft-deleted records as excluded from active queries. Only admin users are provided the complete hierarchical structure and raw field access. Paging and sorting comply with system performance targets. All access is logged for compliance.","summary":"Search and paginate categories with filters (shopping_mall_ai_backend_categories)","parameters":[],"requestBody":{"description":"Search/filter/pagination fields for categories, including hierarchical controls","typeName":"IShoppingMallAiBackendCategory.IRequest"},"responseBody":{"description":"Paginated result set of matched category entities, including hierarchical navigation info","typeName":"IPageIShoppingMallAiBackendCategory"},"authorizationRole":"admin","name":"searchCategories","path":"/shoppingMallAiBackend/admin/categories","method":"patch"},{"specification":"This operation retrieves detailed information for a specific category entity from the shopping mall database, referenced by primary key (UUID). Only active, non-deleted categories are returned. Used for management, advanced search navigation, and compliance audit. Admin authorization required for full data access.","description":"Fetches all data fields for a specific category using its UUID. The operation returns the entire business structure of the category, including hierarchy, parent/child relations, creation and update timestamps, and status/visibility flags. Access is limited to admins for management UIs and compliance logging. Returns 404 if the category does not exist or is soft deleted. Access is logged for audit trail. Critical for admin tools and category management UIs.","summary":"Get details of a specific category entity (shopping_mall_ai_backend_categories)","parameters":[{"name":"categoryId","description":"UUID of the category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Category entity details, including all business fields and relations.","typeName":"IShoppingMallAiBackendCategory"},"authorizationRole":"admin","name":"getCategory","path":"/shoppingMallAiBackend/admin/categories/{categoryId}","method":"get"},{"specification":"This operation creates a new category entity for the shopping mall, supporting hierarchical (parent_id) assignment and catalog taxonomy logic. Only admins may create categories. Ensures unique codes, required fields validation, and referential integrity for parent category and creator admin. Creation maintains audit trails for compliance.","description":"Creates a new product, sales, or business category in the shopping mall system. The request includes required fields such as code, name, parent_id (for hierarchical tree structuring), description, display order, visibility, and admin creator ID. Validation is enforced for unique codes, valid parent_id, and all business logic constraints. Admin role required. On success, the full new category entity is returned, including all timestamps and hierarchy info. All creation is logged for compliance and taxonomy management.","summary":"Create new category with optional hierarchy (shopping_mall_ai_backend_categories)","parameters":[],"requestBody":{"description":"Information required to create category entity (code, name, parent etc)","typeName":"IShoppingMallAiBackendCategory.ICreate"},"responseBody":{"description":"Newly created category with hierarchy and meta fields included","typeName":"IShoppingMallAiBackendCategory"},"authorizationRole":"admin","name":"createCategory","path":"/shoppingMallAiBackend/admin/categories","method":"post"},{"specification":"This operation updates an existing category entity's fields in the shopping mall system. Supports updating any mutable property, including name, description, parent_id, display order, and visibility. Referential and business logic checks are performed. Permissions restricted to admin users only. Category codes are enforced unique across the parent category. All updates are audit logged for compliance.","description":"Updates the fields of a category entity specified by its UUID. This allows business admins to rename, re-parent, change order, modify visibility/description, or otherwise manage the category structure. Unique constraints and referential integrity enforced for parent/creator. Soft deletes—setting deleted_at—apply for removal, not physical deletion. All changes are logged to provide a full audit trail. Authorization is restricted to admins.","summary":"Update category information by ID (shopping_mall_ai_backend_categories)","parameters":[{"name":"categoryId","description":"UUID of the category entity to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Category update fields, partial or whole object allowed","typeName":"IShoppingMallAiBackendCategory.IUpdate"},"responseBody":{"description":"Updated category with all persisted fields and new state","typeName":"IShoppingMallAiBackendCategory"},"authorizationRole":"admin","name":"updateCategory","path":"/shoppingMallAiBackend/admin/categories/{categoryId}","method":"put"},{"specification":"This operation performs a soft delete of a category entity, marking the deleted_at field without actually removing the record from storage. Only admin users are allowed. Referential integrity and unique constraints are preserved. Affected parent/child relationships must be validated post-delete. No response body is provided on success. Operation is audit logged for compliance.","description":"Marks a category as deleted by setting the deleted_at field with a timestamp (soft delete). Operation requires admin user authorization. Ensures that no business logic is violated—categories with active children may prompt error or require forced cascade in admin UIs. Does not erase the data physically. All delete operations are audit logged. On success, no content is returned. Soft deletes preserve all audit and evidence history.","summary":"Soft delete a category entity by UUID (shopping_mall_ai_backend_categories)","parameters":[{"name":"categoryId","description":"UUID of the category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"eraseCategory","path":"/shoppingMallAiBackend/admin/categories/{categoryId}","method":"delete"},{"specification":"Advanced PATCH-style indexed searching and filtering for channel-category mapping records in shopping_mall_ai_backend_channel_category_map. Enables pagination, filter by channel/category, business logic checks for active/inactive relationships, and hierarchical operations. Audit requirements for queries apply. Restricted to admin users for system-wide operations.","description":"Retrieves a list of channel-category mapping entries with support for advanced filtering, pagination, searching, and sorting. Queries may specify channel_id, category_id, active/deleted status, creation date, update time, or related business fields. Useful for admin tools, analytic dashboards, and curation management interfaces. Only authorized admins can run this operation or see all mappings. Full audit trace of search and access is maintained for compliance logging.","summary":"Search and paginate channel-category mapping records (shopping_mall_ai_backend_channel_category_map)","parameters":[],"requestBody":{"description":"Filter and pagination parameters for channel-category mapping search","typeName":"IShoppingMallAiBackendChannelCategoryMap.IRequest"},"responseBody":{"description":"Paginated/filtered result of mapping entities and business relation meta","typeName":"IPageIShoppingMallAiBackendChannelCategoryMap"},"authorizationRole":"admin","name":"searchChannelCategoryMap","path":"/shoppingMallAiBackend/admin/channelCategoryMap","method":"patch"},{"specification":"Fetches a specific channel-category mapping entry given its UUID key (shopping_mall_ai_backend_channel_category_map), returning every relevant business field, including channel, category, and auditing fields. Only active mappings are returned unless requested by an admin. Used for data integrity and business management. Full access audit trace.","description":"Retrieves detailed business and relational data for a channel-category mapping entity using its primary UUID key. Admin authorization is required; all audit and compliance logging is enforced. Returns every meta field and business context (channel, category, creation and update timestamps, deleted_at field if soft deleted). On not found, returns error. Intended for curation, analytics, and taxonomy admin UX use.","summary":"Get details for a channel-category mapping entry (shopping_mall_ai_backend_channel_category_map)","parameters":[{"name":"channelCategoryMapId","description":"UUID of the channel-category mapping entity to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete data fields and relational info for the channel-category mapping entry","typeName":"IShoppingMallAiBackendChannelCategoryMap"},"authorizationRole":"admin","name":"getChannelCategoryMap","path":"/shoppingMallAiBackend/admin/channelCategoryMap/{channelCategoryMapId}","method":"get"},{"specification":"Creates a new mapping between a business channel and a category in the shopping mall system. Targets the shopping_mall_ai_backend_channel_category_map entity. Requires validation for referential integrity and uniqueness (one mapping of each channel/category pair). Admin role mandatory. Enforces audit trail. Full business compliance checks on relationship semantics.","description":"Establishes a new association entry (mapping) between an existing sales channel and a product category. Admins only. Validation requires both channel_id and category_id reference valid existing entities and that the mapping is unique. The API ensures duplicate mappings cannot be created. Additional fields may define mapping status. Returns the persisted mapping entry, including audit metadata. Operation is audit logged and used in taxonomy and curation UI contexts.","summary":"Create a new channel-category mapping entry (shopping_mall_ai_backend_channel_category_map)","parameters":[],"requestBody":{"description":"Information needed to create a mapping between a channel and a category","typeName":"IShoppingMallAiBackendChannelCategoryMap.ICreate"},"responseBody":{"description":"Created mapping entity details, references to channel, category, and audit fields","typeName":"IShoppingMallAiBackendChannelCategoryMap"},"authorizationRole":"admin","name":"createChannelCategoryMap","path":"/shoppingMallAiBackend/admin/channelCategoryMap","method":"post"},{"specification":"Updates an existing channel-category mapping entry, modifying fields such as relational pointers (channel_id, category_id), or mapping status. Patch overlaps allowed as per updatable field list. Full referential integrity and uniqueness validation is performed. Admin-only operation. Audit trail and compliance requirements apply.","description":"Updates a channel-category mapping's attributes by UUID. Only admin users can perform the update. Supports modifications of either channel_id, category_id, or business attributes as required by system logic. Ensures that mapping uniqueness (per channel/category pair) is preserved. All changes are audit logged. Successful response returns the updated mapping entity with all associated relational and meta fields. On error, returns appropriate validation messages. Only existing mappings can be updated.","summary":"Update a channel-category mapping by mapping UUID (shopping_mall_ai_backend_channel_category_map)","parameters":[{"name":"channelCategoryMapId","description":"UUID of the channel-category mapping entity to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Mapping entity fields to update (channel_id, category_id, etc)","typeName":"IShoppingMallAiBackendChannelCategoryMap.IUpdate"},"responseBody":{"description":"Updated mapping entity object reflecting all changes","typeName":"IShoppingMallAiBackendChannelCategoryMap"},"authorizationRole":"admin","name":"updateChannelCategoryMap","path":"/shoppingMallAiBackend/admin/channelCategoryMap/{channelCategoryMapId}","method":"put"},{"specification":"This API endpoint deletes an existing channel-category map by its unique identifier. It operates on the shopping_mall_ai_backend_channel_category_map table, which represents the many-to-many relationship between channels and categories in the platform, controlling dynamic curation and navigation structures. The operation ensures that only authorized admins can perform the removal to maintain business integrity and prevent accidental data loss. Deletion is processed as a hard or soft delete depending on schema field existence, and the system tracks this event for audit and rollback purposes.","description":"Deletes a specific record linking a channel and a category from the channel_category_map entity. This operation requires the channelCategoryMapId, which uniquely identifies the mapping to be deleted. Deletion is typically performed as a soft deletion by setting the deleted_at timestamp, as the schema contains this nullable field, but may represent actual removal in some business contexts.\n\nOnly admin users with appropriate privileges can perform this deletion, given its impact on catalog presentation and business logic. The operation ensures referential integrity, and changes are reflected in UI navigation, product filtering, and analytics. In cases where the mapping is required for current channel operations or referenced by subordinate entities, dependent checks and warnings should be implemented at the service layer.\n\nErrors are raised if the mapping is not found or the user lacks authorization. The deletion is logged for compliance and traceability, and all changes are audit-trailed for regulatory purposes.","summary":"Delete a channel-category mapping by its id (soft delete).","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/channelCategoryMap/{channelCategoryMapId}","method":"delete","parameters":[{"name":"channelCategoryMapId","description":"Unique ID of the channel-category mapping to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationRole":"admin"},{"specification":"This operation provides a powerful and flexible way to search for and paginate attachment files across all business domains of the shoppingMallAiBackend system using advanced filtering options. It works with the shopping_mall_ai_backend_attachments table, supporting use cases from content management, product asset handling, audit, and compliance tracking. Filters may include owner type, file name, mime type, size, creation time, and more. Pagination, sorting, and keyword-based search enable large-scale operations management, empowering both business and compliance users.","description":"Retrieves a paginated and filtered list of attachments in the system. Supports advanced filtering on fields such as owner_type, file_name, mime_type, size, created_at, and more. This operation allows admins or users with sufficient permissions to locate, review, and download files managed as attachments.\n\nThrough sophisticated search logic and sorting, users can efficiently manage digital assets, review content for compliance, or perform forensics at audit time. Business rules dictate that only permitted attachments are shown: for example, admins see all, while individual users could be scoped to their own resources.\n\nThe operation respects security constraints—sensitive or expired files are omitted unless explicitly authorized. The response delivers paginated results via summary DTO, which includes essential file properties and references for follow-up actions.","summary":"Paginated, filtered search over the system-wide attachments dataset.","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments","method":"patch","parameters":[],"requestBody":{"description":"Attachment search filters and pagination configuration.","typeName":"IShoppingMallAiBackendAttachment.IRequest"},"responseBody":{"description":"Paginated summary results of matching attachments.","typeName":"IPageIShoppingMallAiBackendAttachment.ISummary"},"name":"search","authorizationRole":"admin"},{"specification":"Fetches a single attachment's detailed information and metadata by its unique primary key from the shopping_mall_ai_backend_attachments table. Supports business auditing, compliance, download, preview, or management operations. Handles file-level access logic to ensure only authorized users can retrieve metadata. This endpoint is central to file evidence, download, and content review workflows for assets linked to any entity within the system.","description":"Retrieves full metadata and business information for a single file/attachment given its unique identifier (attachmentId) from the attachments table. Used for detail screens, download links, auditing, and approval workflows.\n\nAccess control is rigorously enforced: only authorized users (self, owner, admin, or privileged roles depending on the file's owner_type) may access attachment details. The payload contains all critical file descriptors, such as storage URI, mime type, file size, hash, owner metadata, and any descriptive context relevant to compliance or business logic.\n\nThis operation is also a prerequisite for download, moderation decisions, or linking files to business entities. Unauthorized or non-existent attachment IDs result in an appropriate error response and logging for security.","summary":"Fetches full metadata and content reference for an attachment by ID.","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments/{attachmentId}","method":"get","parameters":[{"name":"attachmentId","description":"The unique identifier of the attachment file to view.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed attachment file metadata and business context.","typeName":"IShoppingMallAiBackendAttachment"},"name":"at","authorizationRole":"admin"},{"specification":"Creates a new attachment record in the system, storing all required metadata, reference context, and unique file properties in the shopping_mall_ai_backend_attachments table. The operation supports business uploads from product, admin, compliance, and content flows. Files are first uploaded to storage, then this endpoint is called to record business context. Security and compliance rules apply to owner type, allowed mime types, and retention requirements.","description":"Registers a new attachment file in the system after successful physical file upload. Requires all relevant metadata, including owner_id, owner_type, file_name, file_size, mime_type, storage_uri, hash_sha256, upload timestamp, and (optionally) expire_at or business description. The system enforces security and compliance logic regarding allowed file types, size, and target entity associations.\n\nThis operation requires appropriate authorization, depending on the owner_type and file linkage context. All fields are validated for correctness and collision (e.g., duplicate hash_sha256 is rejected if already present). Metadata recorded here enables full file management, download, audit, and policy enforcement. Any failure (e.g., integrity mismatch, unauthorized user, invalid owner context, or missing metadata) results in explicit error handling and service log creation. Compliance with file evidence and retention regulations is enforced on insert.","summary":"Create/register a new attachment record for a business file or asset.","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments","method":"post","parameters":[],"requestBody":{"description":"All metadata about the attachment file to create (after actual file upload).","typeName":"IShoppingMallAiBackendAttachment.ICreate"},"responseBody":{"description":"Full metadata for the newly created attachment file entity.","typeName":"IShoppingMallAiBackendAttachment"},"name":"create","authorizationRole":"admin"},{"specification":"This operation updates an existing attachment's metadata in the shopping_mall_ai_backend_attachments table, including business context, file description, retention policies, owner transfer, and expiration. Used by business operators or compliance managers to reclassify files, fix data, or change permissions. Does not support updating the physical file contents—use a new record for that. All security, compliance, and integrity constraints enforced.","description":"Updates core metadata (not raw file data) for an existing attachment file entity given its unique attachmentId primary key. This supports changing business context such as ownership, expiration, compliance description, or any mutable metadata field as defined in the schema.\n\nThe operation requires that the provided fields are valid and permitted by business rules (for example, you cannot transfer to a restricted owner_type without proper authorization, or set an invalid value for retention policy). Attempts to mutate immutable fields (such as storage_uri or hash_sha256) result in an error. All updates are audit-trailed for regulatory compliance.\n\nErrors are thrown for invalid attachmentId, unauthorized access, or business rule violations. Successful updates are reflected immediately in all search results and business logic referencing the attachment.","summary":"Update business metadata or attributes for an existing attachment by ID.","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments/{attachmentId}","method":"put","parameters":[{"name":"attachmentId","description":"The unique attachment file identifier to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The fields and metadata to update in the attachment entity.","typeName":"IShoppingMallAiBackendAttachment.IUpdate"},"responseBody":{"description":"The updated full attachment metadata object.","typeName":"IShoppingMallAiBackendAttachment"},"name":"update","authorizationRole":"admin"},{"specification":"Deletes an attachment file record from the business domain, performing a soft deletion via deleted_at update. This operation is permanent in that the record is no longer visible in the UI or business logic, but the physical file retention/deletion is managed by separate storage policy. All deletions are strictly authorized according to owner_type and business context, and are audit-trailed for compliance. This endpoint enforces referential integrity as defined by the platform policies.","description":"Performs a soft delete (using deleted_at) of the attachment entity specified by its unique attachmentId. Typically reserved for files that are obsolete, redundant, unauthorized, or found in business error. Business rules require that only the file owner, admin, or privileged compliance users can soft-delete an attachment.\n\nThe system ensures that a deleted file cannot be referenced by business entities or accessed via API/UI, except for regulatory/judicial audit with dedicated permissions. All actions are logged for compliance and forensic recovery, and errors are returned if the entity does not exist, is in a critical reference, or the user is not permitted.","summary":"Soft delete (logical deletion) of an attachment file entity by ID.","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments/{attachmentId}","method":"delete","parameters":[{"name":"attachmentId","description":"ID of the attachment file to logically delete (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationRole":"admin"},{"specification":"Enables advanced, paginated search over all logs associated with a specific attachment in the system. Works on top of shopping_mall_ai_backend_attachment_logs, which records every file event (upload, download, delete, access, etc.) for auditing, monitoring, and compliance. Supports filtering by log type, timestamp, and operator. Strict access control ensures logs are visible only to authorized auditors or owners.","description":"Returns a filtered, paginated list of attachment log entries for the specified attachmentId. Supports filtering by event_type (upload, download, delete, access, expire), date/time range, operated_by_admin_id, and other business attributes for deep audit and forensic review.\n\nResult is presented in a paginated summary format optimized for compliance UI and operational investigation scenarios. Only users with admin or compliance roles are permitted access, with full audit logging of query history. Results do not include raw file data, only references and event metadata for logs. Errors are returned if the attachmentId is not valid, the user lacks permission, or the filter is malformed.","summary":"Search logs of file events for a specific attachment (paginated/filterable).","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments/{attachmentId}/logs","method":"patch","parameters":[{"name":"attachmentId","description":"ID of the attachment file whose logs to search.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination info for attachment log records for specific file.","typeName":"IShoppingMallAiBackendAttachmentLog.IRequest"},"responseBody":{"description":"Paginated summary of log events for the attachment file.","typeName":"IPageIShoppingMallAiBackendAttachmentLog.ISummary"},"name":"search","authorizationRole":"admin"},{"specification":"Retrieves a detailed single attachment log entry referenced by both its parent attachment and its log primary key from shopping_mall_ai_backend_attachment_logs. Used for deep forensic, audit, and operational tracing. Strict role and entity checks ensure that only permitted users can view individual file event records, for example in dispute, compliance, or forensics workflows.","description":"Fetches the detail of a single file event log entry, identified by attachmentId and attachmentLogId together. The log entry includes its event_type, ip_address, operated_by_admin_id, event_context, and precise event timestamp. Access is limited to authorized admins or compliance staff due to the sensitivity of log data.\n\nThis operation is essential for detailed file event forensics, compliance incident analysis, and root-cause investigation following system events. Audit and legal review require immutability and evidence-grade access tracking for these records.","summary":"Fetches a single attachment log entry in detail by attachmentId and logId.","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments/{attachmentId}/logs/{attachmentLogId}","method":"get","parameters":[{"name":"attachmentId","description":"ID of the parent attachment for the log entry.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentLogId","description":"ID of the file log record to fetch (primary key in logs table).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit record for the attachment log entry.","typeName":"IShoppingMallAiBackendAttachmentLog"},"name":"at","authorizationRole":"admin"},{"specification":"Creates a new log entry for an attachment file event (upload, download, access, delete, expire, etc) in shopping_mall_ai_backend_attachment_logs. Used to record audit/compliance/operational actions taken by admins or automated processes. Enables comprehensive audit chain for file events. Only privileged users or trusted system automation can call this endpoint. All business rules, context recording, and field validations enforced on entry creation.","description":"Creates an audit or operational log record for a given attachmentId, representing a specific event/action taken on a file. Required fields include the event_type (such as upload/download/access), ip_address, and event_at timestamp; optional fields provide context (event_context) or link to the operating admin. Used for tracking who did what, when, and why regarding file management.\n\nCalls to this endpoint are security-critical: logs may be entered by trusted system actors (automation, backend services) or privileged humans (admins). Entries are immutable after insert, and must be comprehensive for audit/proof. Any invalid references, missing fields, or security violations are returned as errors, and all additions are themselves logged in the compliance subsystem.","summary":"Create a new audit/compliance log record for a file event.","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments/{attachmentId}/logs","method":"post","parameters":[{"name":"attachmentId","description":"ID of the attachment file for which to add a file event log entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All metadata about the file event to log for the attachment.","typeName":"IShoppingMallAiBackendAttachmentLog.ICreate"},"responseBody":{"description":"Full metadata for created log entry in the attachment log table.","typeName":"IShoppingMallAiBackendAttachmentLog"},"name":"create","authorizationRole":"admin"},{"specification":"Updates selected mutable metadata fields of an existing file event log entry for an attachment. Applies only to business-allowed fields (such as event_context, operated_by_admin_id). Critical audit and timestamp fields are immutable. Used for corrections, business context amendment, or adding administrative notes. Strict permission checks and audit chain enforcement apply for all log edits.","description":"Updates attributes for a log entry of an attachment, given by both attachmentId and attachmentLogId. Supports modification of allowed metadata such as event_context, or reassignment of the actor/admin who performed the event if initially unknown or needs correction. Immutable fields (event_type, event_at, ip_address) cannot be changed by business policy.\n\nAll changes are audit-trailed, and only authorized admin users may request updates. Invalid fields, immutable attempts, or referencing non-existent attachment/log IDs trigger errors and are logged. Updates are immediately reflected in forensic and compliance tools referencing log data.","summary":"Update business metadata for a specific attachment log entry.","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments/{attachmentId}/logs/{attachmentLogId}","method":"put","parameters":[{"name":"attachmentId","description":"ID of the parent attachment for the log entry to update.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentLogId","description":"ID of the specific file event log entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The log fields and business metadata to update (no changes to event_type, event_at, or ip_address).","typeName":"IShoppingMallAiBackendAttachmentLog.IUpdate"},"responseBody":{"description":"The updated log record for compliance and forensic audit.","typeName":"IShoppingMallAiBackendAttachmentLog"},"name":"update","authorizationRole":"admin"},{"specification":"Permanently (hard) deletes an attachment file event log entry referencing both attachment and log primary key. This operation is reserved for compliance managers and system admins only, due to regulatory and evidence requirements. All removals are audit-trailed and must handle potential dependencies for external audits. The log entry is erased from the shopping_mall_ai_backend_attachment_logs table if allowed by business/legal policy.","description":"Irrevocably removes a file event log entry from the logs table using the unique pair of attachmentId and attachmentLogId. This operation should not be performed except under strict regulatory or judicial directives, as it removes a critical element of the compliance/audit evidence chain, and may have legal/forensic consequences.\n\nThe operation first verifies the existence, compliance, and authorization, then destroys the log record from the DB. Errors are thrown if the log entry is missing, protected, or the user lacks permission. All delete actions are themselves audit-trailed using a dedicated compliance log chain for system evidence.","summary":"Delete (hard delete) a specific file event log entry for an attachment.","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/attachments/{attachmentId}/logs/{attachmentLogId}","method":"delete","parameters":[{"name":"attachmentId","description":"ID of the parent attachment whose file log is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentLogId","description":"ID of the file log entry to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","authorizationRole":"admin"},{"specification":"Provides a paginated, filtered search endpoint over customer accounts stored in shopping_mall_ai_backend_customers. Advanced search logic supports queries by email, status, name, nickname, phone, registration date, and other core fields. This operation enables business users to quickly locate user accounts for management, KYC, compliance, or support, and supports access auditing and business segmentation.","description":"Fetches a filtered, paginated list of customer account summaries from the system. Advanced search conditions are supported, such as partial email/nickname/name queries, status filters (active, locked, dormant, withdrawn), registration date ranges, and phone verification status. Relevant metadata for UI summary—such as name, email, phone, status, join date—is included in the results.\n\nThis operation is typically reserved for admin users due to the sensitivity of customer data, and all queries are audit-logged for compliance and data governance. Errors are raised for malformed query conditions or unauthorized access attempts. Result includes summary records for each customer matching the filters and complies with all data privacy and access policies.","summary":"Paginated, filtered search API for customer accounts (admin panel use).","authorizationRoles":["admin"],"path":"/shoppingMallAiBackend/admin/customers","method":"patch","parameters":[],"requestBody":{"description":"Filter/search criteria and pagination config for customer search.","typeName":"IShoppingMallAiBackendCustomer.IRequest"},"responseBody":{"description":"Paginated summary results for customers matching search criteria.","typeName":"IPageIShoppingMallAiBackendCustomer.ISummary"},"name":"search","authorizationRole":"admin"},{"specification":"Retrieves detailed information for a specific customer from the shopping_mall_ai_backend_customers table. This includes primary profile information such as email, name, nickname, phone, profile image URI, and verification statuses. It additionally provides the customer's current status, join date, last login timestamp, as well as audit time fields for record creation, updates, and deletion (if any). Relations such as associated addresses, external links, and order references are not included directly in this entity but available via separate endpoints. This operation enables access to a customer's master profile for account management, customer support, or profile-aware business features, strictly using the primary key (customerId) as a path parameter. Follows all business rules about sensitive data visibility and GDPR-aligned data minimization.","path":"/shoppingMallAiBackend/admin/customers/{customerId}","method":"get","description":"Fetch a single customer's full profile from the shopping_mall_ai_backend_customers table by unique customerId. This endpoint returns sensitive profile and credential fields such as email, name, phone, and status, plus optional profile image and audit timestamps. Only users with the 'admin' or 'customer' (for their own data) role may access this endpoint, and all role checks and field-level security rules (masking, restricted fields) are enforced as per the schema and business requirements.\n\nThis endpoint enables support for user self-service profile lookup or admin-driven account review. It should be used together with PATCH/PUT operations on customers and with address/external link subresources for a holistic customer experience. Returned data includes all non-deleted soft fields for the profile; hard deleted records are inaccessible and will generate an error or empty response as appropriate. Error scenarios include invalid UUID, permission denied, or not found customer.","summary":"Retrieve full profile details for a given customer by customerId (shopping_mall_ai_backend_customers).","parameters":[{"name":"customerId","description":"ID of the customer to fetch. Must be a valid UUID referencing shopping_mall_ai_backend_customers.id","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete customer profile object.","typeName":"IShoppingMallAiBackendCustomer"},"authorizationRoles":["admin","customer"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieves detailed information for a specific customer from the shopping_mall_ai_backend_customers table. This includes primary profile information such as email, name, nickname, phone, profile image URI, and verification statuses. It additionally provides the customer's current status, join date, last login timestamp, as well as audit time fields for record creation, updates, and deletion (if any). Relations such as associated addresses, external links, and order references are not included directly in this entity but available via separate endpoints. This operation enables access to a customer's master profile for account management, customer support, or profile-aware business features, strictly using the primary key (customerId) as a path parameter. Follows all business rules about sensitive data visibility and GDPR-aligned data minimization.","path":"/shoppingMallAiBackend/customer/customers/{customerId}","method":"get","description":"Fetch a single customer's full profile from the shopping_mall_ai_backend_customers table by unique customerId. This endpoint returns sensitive profile and credential fields such as email, name, phone, and status, plus optional profile image and audit timestamps. Only users with the 'admin' or 'customer' (for their own data) role may access this endpoint, and all role checks and field-level security rules (masking, restricted fields) are enforced as per the schema and business requirements.\n\nThis endpoint enables support for user self-service profile lookup or admin-driven account review. It should be used together with PATCH/PUT operations on customers and with address/external link subresources for a holistic customer experience. Returned data includes all non-deleted soft fields for the profile; hard deleted records are inaccessible and will generate an error or empty response as appropriate. Error scenarios include invalid UUID, permission denied, or not found customer.","summary":"Retrieve full profile details for a given customer by customerId (shopping_mall_ai_backend_customers).","parameters":[{"name":"customerId","description":"ID of the customer to fetch. Must be a valid UUID referencing shopping_mall_ai_backend_customers.id","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete customer profile object.","typeName":"IShoppingMallAiBackendCustomer"},"authorizationRoles":["admin","customer"],"name":"at","authorizationRole":"customer"},{"specification":"Update all fields for an existing customer within the shopping_mall_ai_backend_customers table based on a supplied IShoppingMallAiBackendCustomer.IUpdate request body. Used for admin or self-service account management, all updates are validated for data integrity (unique email/nickname, valid phone and status, etc.). This endpoint supports changes to personal data, login credentials, account status, and profile image URI. Only appropriately authorized actors (admin or self) may use this operation. All update events are audited in the customer_histories table for regulatory or business accountability.","path":"/shoppingMallAiBackend/admin/customers","method":"put","description":"Modify the details of an existing customer using the full IShoppingMallAiBackendCustomer.IUpdate DTO as the request body. All submitted fields are checked for validity and compliance with business rules such as email uniqueness and proper phone formatting. This endpoint is primarily used by admins but may also be used by the customer on their own account. Update triggers creation of a snapshot history event in the customer_histories table for compliance and rollback. Responses return the updated customer object. Error responses are generated for validation failures, permission issues, or attempting to update a non-existent/soft-deleted account.","summary":"Update an existing customer's profile in shopping_mall_ai_backend_customers.","parameters":[],"requestBody":{"description":"Full update information for a customer's profile.","typeName":"IShoppingMallAiBackendCustomer.IUpdate"},"responseBody":{"description":"The updated customer object after modifications.","typeName":"IShoppingMallAiBackendCustomer"},"authorizationRoles":["admin","customer"],"name":"update","authorizationRole":"admin"},{"specification":"Update all fields for an existing customer within the shopping_mall_ai_backend_customers table based on a supplied IShoppingMallAiBackendCustomer.IUpdate request body. Used for admin or self-service account management, all updates are validated for data integrity (unique email/nickname, valid phone and status, etc.). This endpoint supports changes to personal data, login credentials, account status, and profile image URI. Only appropriately authorized actors (admin or self) may use this operation. All update events are audited in the customer_histories table for regulatory or business accountability.","path":"/shoppingMallAiBackend/customer/customers","method":"put","description":"Modify the details of an existing customer using the full IShoppingMallAiBackendCustomer.IUpdate DTO as the request body. All submitted fields are checked for validity and compliance with business rules such as email uniqueness and proper phone formatting. This endpoint is primarily used by admins but may also be used by the customer on their own account. Update triggers creation of a snapshot history event in the customer_histories table for compliance and rollback. Responses return the updated customer object. Error responses are generated for validation failures, permission issues, or attempting to update a non-existent/soft-deleted account.","summary":"Update an existing customer's profile in shopping_mall_ai_backend_customers.","parameters":[],"requestBody":{"description":"Full update information for a customer's profile.","typeName":"IShoppingMallAiBackendCustomer.IUpdate"},"responseBody":{"description":"The updated customer object after modifications.","typeName":"IShoppingMallAiBackendCustomer"},"authorizationRoles":["admin","customer"],"name":"update","authorizationRole":"customer"},{"specification":"Delete (soft delete) a specific customer from shopping_mall_ai_backend_customers by customerId. This operation sets deleted_at to the current timestamp, preserving audit and recovery options as required by business and compliance rules. Permanent removal is not performed - record can be restored if needed. All attempts are validated for permissions and regulatory compliance. Associated subresources (addresses, orders, etc.) remain untouched; cascading deletion is not part of this operation. This operation is logged in customer_histories for complete traceability.","path":"/shoppingMallAiBackend/admin/customers/{customerId}","method":"delete","description":"Soft deletes a customer's profile record by setting the deleted_at timestamp. No physical data is destroyed, but the profile is hidden from business processes, cannot be used for login, and is excluded from customer listings. Used for regulatory compliance or at the request of customers/admins. Attempting to delete an already soft-deleted or non-existent customer returns an error. This action is recorded in customer_histories for audit and compliance. All related addresses or subresources remain unaffected by this operation unless explicit secondary cleanup occurs.","summary":"Soft delete an existing customer by customerId from shopping_mall_ai_backend_customers.","parameters":[{"name":"customerId","description":"ID of the customer to soft delete. Must reference shopping_mall_ai_backend_customers.id as UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","customer"],"name":"erase","authorizationRole":"admin"},{"specification":"Delete (soft delete) a specific customer from shopping_mall_ai_backend_customers by customerId. This operation sets deleted_at to the current timestamp, preserving audit and recovery options as required by business and compliance rules. Permanent removal is not performed - record can be restored if needed. All attempts are validated for permissions and regulatory compliance. Associated subresources (addresses, orders, etc.) remain untouched; cascading deletion is not part of this operation. This operation is logged in customer_histories for complete traceability.","path":"/shoppingMallAiBackend/customer/customers/{customerId}","method":"delete","description":"Soft deletes a customer's profile record by setting the deleted_at timestamp. No physical data is destroyed, but the profile is hidden from business processes, cannot be used for login, and is excluded from customer listings. Used for regulatory compliance or at the request of customers/admins. Attempting to delete an already soft-deleted or non-existent customer returns an error. This action is recorded in customer_histories for audit and compliance. All related addresses or subresources remain unaffected by this operation unless explicit secondary cleanup occurs.","summary":"Soft delete an existing customer by customerId from shopping_mall_ai_backend_customers.","parameters":[{"name":"customerId","description":"ID of the customer to soft delete. Must reference shopping_mall_ai_backend_customers.id as UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","customer"],"name":"erase","authorizationRole":"customer"},{"specification":"Retrieve a paginated, filterable list of addresses for a specific customer from shopping_mall_ai_backend_customer_addresses. This supports advanced searching, sorting, and paging via IShoppingMallAiBackendCustomerAddress.IRequest. Only addresses not soft-deleted are included. Address data covers all address fields and is compliant with privacy/business rules. Used for presenting or managing user's saved shipping/billing locations.","path":"/shoppingMallAiBackend/admin/customers/{customerId}/addresses","method":"patch","description":"Returns a paginated list of all active addresses linked to the specified customerId. Supports advanced query parameters (e.g., filtering by city/state/country, alias search, is_primary). This endpoint is usable by the customer themselves or admins. Address listing adheres to privacy best practices (only accessible to the respective customer and authorized admins). Potential errors: customer not found, lack of permission, or invalid filter values.","summary":"List, filter, or search all addresses for a specific customer (shopping_mall_ai_backend_customer_addresses).","parameters":[{"name":"customerId","description":"ID of the customer whose addresses are to be listed. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for address listing.","typeName":"IShoppingMallAiBackendCustomerAddress.IRequest"},"responseBody":{"description":"Paginated results of customer addresses.","typeName":"IPageIShoppingMallAiBackendCustomerAddress"},"authorizationRoles":["admin","customer"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a paginated, filterable list of addresses for a specific customer from shopping_mall_ai_backend_customer_addresses. This supports advanced searching, sorting, and paging via IShoppingMallAiBackendCustomerAddress.IRequest. Only addresses not soft-deleted are included. Address data covers all address fields and is compliant with privacy/business rules. Used for presenting or managing user's saved shipping/billing locations.","path":"/shoppingMallAiBackend/customer/customers/{customerId}/addresses","method":"patch","description":"Returns a paginated list of all active addresses linked to the specified customerId. Supports advanced query parameters (e.g., filtering by city/state/country, alias search, is_primary). This endpoint is usable by the customer themselves or admins. Address listing adheres to privacy best practices (only accessible to the respective customer and authorized admins). Potential errors: customer not found, lack of permission, or invalid filter values.","summary":"List, filter, or search all addresses for a specific customer (shopping_mall_ai_backend_customer_addresses).","parameters":[{"name":"customerId","description":"ID of the customer whose addresses are to be listed. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for address listing.","typeName":"IShoppingMallAiBackendCustomerAddress.IRequest"},"responseBody":{"description":"Paginated results of customer addresses.","typeName":"IPageIShoppingMallAiBackendCustomerAddress"},"authorizationRoles":["admin","customer"],"name":"search","authorizationRole":"customer"},{"specification":"Fetch the details of a specific address record for a given customer from shopping_mall_ai_backend_customer_addresses using the customer and address primary keys. This returns the complete address entry, including all fields (receiver, address lines, city, etc.), for user self-service management, checkout, or admin functions. This endpoint ensures the address is present and not soft-deleted.","path":"/shoppingMallAiBackend/admin/customers/{customerId}/addresses/{addressId}","method":"get","description":"Returns a single address record for a customer using both the customerId and addressId as path parameters. The full address object is returned, including receiver details and flags such as is_primary. Only the address owner (customerId) or authorized admins may access this resource. Opportunistic auditing may be performed for compliance and tracking. Errors occur when the address does not exist or does not belong to the specified customer, or if access restrictions apply.","summary":"Fetch a specific customer address for a given customer and address ID (shopping_mall_ai_backend_customer_addresses).","parameters":[{"name":"customerId","description":"ID of the customer who owns the address. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"ID of the customer address to fetch. UUID referencing shopping_mall_ai_backend_customer_addresses.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete address record corresponding to customer and address ID.","typeName":"IShoppingMallAiBackendCustomerAddress"},"authorizationRoles":["admin","customer"],"name":"at","authorizationRole":"admin"},{"specification":"Fetch the details of a specific address record for a given customer from shopping_mall_ai_backend_customer_addresses using the customer and address primary keys. This returns the complete address entry, including all fields (receiver, address lines, city, etc.), for user self-service management, checkout, or admin functions. This endpoint ensures the address is present and not soft-deleted.","path":"/shoppingMallAiBackend/customer/customers/{customerId}/addresses/{addressId}","method":"get","description":"Returns a single address record for a customer using both the customerId and addressId as path parameters. The full address object is returned, including receiver details and flags such as is_primary. Only the address owner (customerId) or authorized admins may access this resource. Opportunistic auditing may be performed for compliance and tracking. Errors occur when the address does not exist or does not belong to the specified customer, or if access restrictions apply.","summary":"Fetch a specific customer address for a given customer and address ID (shopping_mall_ai_backend_customer_addresses).","parameters":[{"name":"customerId","description":"ID of the customer who owns the address. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"ID of the customer address to fetch. UUID referencing shopping_mall_ai_backend_customer_addresses.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete address record corresponding to customer and address ID.","typeName":"IShoppingMallAiBackendCustomerAddress"},"authorizationRoles":["admin","customer"],"name":"at","authorizationRole":"customer"},{"specification":"Update an existing address for a particular customer in the shopping_mall_ai_backend_customer_addresses table. Requires complete replacement of the address using the IShoppingMallAiBackendCustomerAddress.IUpdate DTO. Authorization checks ensure only the owning customer or authorized admins may alter the address. Validation rules enforce address format correctness and uniqueness of is_primary per customer.","path":"/shoppingMallAiBackend/admin/customers/{customerId}/addresses","method":"put","description":"Updates a specified address for the given customer using request data formatted as IShoppingMallAiBackendCustomerAddress.IUpdate. May alter all fields (receiver, phone, postal, lines, etc.), subject to validation and business logic. Owners or admins can update; operation triggers snapshot/history entry. Conflict errors (address not found, customer mismatch, validation fail) are returned appropriately.","summary":"Update a customer's address with full data (shopping_mall_ai_backend_customer_addresses).","parameters":[{"name":"customerId","description":"ID of the customer whose address is being updated. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body containing updated address data.","typeName":"IShoppingMallAiBackendCustomerAddress.IUpdate"},"responseBody":{"description":"The updated customer address after modification.","typeName":"IShoppingMallAiBackendCustomerAddress"},"authorizationRoles":["admin","customer"],"name":"update","authorizationRole":"admin"},{"specification":"Update an existing address for a particular customer in the shopping_mall_ai_backend_customer_addresses table. Requires complete replacement of the address using the IShoppingMallAiBackendCustomerAddress.IUpdate DTO. Authorization checks ensure only the owning customer or authorized admins may alter the address. Validation rules enforce address format correctness and uniqueness of is_primary per customer.","path":"/shoppingMallAiBackend/customer/customers/{customerId}/addresses","method":"put","description":"Updates a specified address for the given customer using request data formatted as IShoppingMallAiBackendCustomerAddress.IUpdate. May alter all fields (receiver, phone, postal, lines, etc.), subject to validation and business logic. Owners or admins can update; operation triggers snapshot/history entry. Conflict errors (address not found, customer mismatch, validation fail) are returned appropriately.","summary":"Update a customer's address with full data (shopping_mall_ai_backend_customer_addresses).","parameters":[{"name":"customerId","description":"ID of the customer whose address is being updated. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body containing updated address data.","typeName":"IShoppingMallAiBackendCustomerAddress.IUpdate"},"responseBody":{"description":"The updated customer address after modification.","typeName":"IShoppingMallAiBackendCustomerAddress"},"authorizationRoles":["admin","customer"],"name":"update","authorizationRole":"customer"},{"specification":"Soft delete a specific address record for a given customer from shopping_mall_ai_backend_customer_addresses using customerId and addressId. Deletion sets deleted_at; the address is hidden but not physically removed. Ownership is validated. No orphaned subresources exist; all address data remains retrievable by admin/history API if needed for compliance.","path":"/shoppingMallAiBackend/admin/customers/{customerId}/addresses/{addressId}","method":"delete","description":"Soft delete a customer's address by customer and address ID. Sets deleted_at timestamp. Accessible to the owner or admin only. Attempts to delete already-removed or non-existent addresses yield errors. Successful deletions are auditable for rollback or regulatory reporting.","summary":"Soft delete a specific customer address for a given customer (shopping_mall_ai_backend_customer_addresses).","parameters":[{"name":"customerId","description":"ID of owning customer. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"ID of the address record to soft delete. Must be a valid UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","customer"],"name":"erase","authorizationRole":"admin"},{"specification":"Soft delete a specific address record for a given customer from shopping_mall_ai_backend_customer_addresses using customerId and addressId. Deletion sets deleted_at; the address is hidden but not physically removed. Ownership is validated. No orphaned subresources exist; all address data remains retrievable by admin/history API if needed for compliance.","path":"/shoppingMallAiBackend/customer/customers/{customerId}/addresses/{addressId}","method":"delete","description":"Soft delete a customer's address by customer and address ID. Sets deleted_at timestamp. Accessible to the owner or admin only. Attempts to delete already-removed or non-existent addresses yield errors. Successful deletions are auditable for rollback or regulatory reporting.","summary":"Soft delete a specific customer address for a given customer (shopping_mall_ai_backend_customer_addresses).","parameters":[{"name":"customerId","description":"ID of owning customer. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}},{"name":"addressId","description":"ID of the address record to soft delete. Must be a valid UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","customer"],"name":"erase","authorizationRole":"customer"},{"specification":"Retrieve a paginated and filterable list of all external authentication links for a customer from shopping_mall_ai_backend_customer_external_links. Filtering supports search by provider, status, date, and other metadata. Used for user profile management or security review. Request and response follow advanced search and pagination standards.","path":"/shoppingMallAiBackend/admin/customers/{customerId}/externalLinks","method":"patch","description":"Lists all OAuth/OpenID/social/external authentication links associated with a specific customer account. Paging/sorting/filtering supported; only visible to authorized actors (account owner or admin). Used for security review, SSO management, or auditing login methods.","summary":"List/search all external auth links for a customer (shopping_mall_ai_backend_customer_external_links).","parameters":[{"name":"customerId","description":"Customer ID whose external auth links are being listed. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination request for external links.","typeName":"IShoppingMallAiBackendCustomerExternalLink.IRequest"},"responseBody":{"description":"Paginated list of customer external auth links.","typeName":"IPageIShoppingMallAiBackendCustomerExternalLink"},"authorizationRoles":["admin","customer"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a paginated and filterable list of all external authentication links for a customer from shopping_mall_ai_backend_customer_external_links. Filtering supports search by provider, status, date, and other metadata. Used for user profile management or security review. Request and response follow advanced search and pagination standards.","path":"/shoppingMallAiBackend/customer/customers/{customerId}/externalLinks","method":"patch","description":"Lists all OAuth/OpenID/social/external authentication links associated with a specific customer account. Paging/sorting/filtering supported; only visible to authorized actors (account owner or admin). Used for security review, SSO management, or auditing login methods.","summary":"List/search all external auth links for a customer (shopping_mall_ai_backend_customer_external_links).","parameters":[{"name":"customerId","description":"Customer ID whose external auth links are being listed. UUID referencing shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination request for external links.","typeName":"IShoppingMallAiBackendCustomerExternalLink.IRequest"},"responseBody":{"description":"Paginated list of customer external auth links.","typeName":"IPageIShoppingMallAiBackendCustomerExternalLink"},"authorizationRoles":["admin","customer"],"name":"search","authorizationRole":"customer"},{"specification":"Fetch the details of a single external auth link for a given customer by their customerId and the external link's id. All relevant provider, ID, status, and last-auth data are returned from shopping_mall_ai_backend_customer_external_links. Validates link ownership/visibility before response. Sensitive security fields comply with privacy, security, and business policies.","path":"/shoppingMallAiBackend/admin/customers/{customerId}/externalLinks/{externalLinkId}","method":"get","description":"Get a single customer's external auth/social/OAuth provider link by full composite key (customer, externalLinkId). Returns provider, account linkage, and historical data for login source management. Only accessible to the owner or admin (authorization required). Accesses a non-deleted record; errors for not found or unauthorized. Used by account security, login method management, or SSO feature flows.","summary":"Get a specific external link for a customer (shopping_mall_ai_backend_customer_external_links).","parameters":[{"name":"customerId","description":"Customer UUID for link owner. Must reference shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}},{"name":"externalLinkId","description":"ID of the external link to fetch. UUID from shopping_mall_ai_backend_customer_external_links.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The external link entity for customer+externalLinkId.","typeName":"IShoppingMallAiBackendCustomerExternalLink"},"authorizationRoles":["admin","customer"],"name":"at","authorizationRole":"admin"},{"specification":"Fetch the details of a single external auth link for a given customer by their customerId and the external link's id. All relevant provider, ID, status, and last-auth data are returned from shopping_mall_ai_backend_customer_external_links. Validates link ownership/visibility before response. Sensitive security fields comply with privacy, security, and business policies.","path":"/shoppingMallAiBackend/customer/customers/{customerId}/externalLinks/{externalLinkId}","method":"get","description":"Get a single customer's external auth/social/OAuth provider link by full composite key (customer, externalLinkId). Returns provider, account linkage, and historical data for login source management. Only accessible to the owner or admin (authorization required). Accesses a non-deleted record; errors for not found or unauthorized. Used by account security, login method management, or SSO feature flows.","summary":"Get a specific external link for a customer (shopping_mall_ai_backend_customer_external_links).","parameters":[{"name":"customerId","description":"Customer UUID for link owner. Must reference shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}},{"name":"externalLinkId","description":"ID of the external link to fetch. UUID from shopping_mall_ai_backend_customer_external_links.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The external link entity for customer+externalLinkId.","typeName":"IShoppingMallAiBackendCustomerExternalLink"},"authorizationRoles":["admin","customer"],"name":"at","authorizationRole":"customer"},{"specification":"Update a customer's external auth link. This operation replaces the details of a specified link in shopping_mall_ai_backend_customer_external_links. Only authorized actors may update, and fields are validated according to business rules (provider uniqueness, data integrity, etc.). Operation is recorded in audit trail/history for compliance/security tracing.","path":"/shoppingMallAiBackend/admin/customers/{customerId}/externalLinks","method":"put","description":"Update an external authentication link for a customer. Request consists of updated data for the ext. link. Applies business logic for provider linkage, purpose, and last-auth snapshot. Accessible to the owning customer or admin only. Errors are returned for validation, permission, and ownership mismatches. All updates are logged for audit.","summary":"Update an external link for a customer (shopping_mall_ai_backend_customer_external_links).","parameters":[{"name":"customerId","description":"Customer UUID for link owner. Must reference shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request with new/updated external link data.","typeName":"IShoppingMallAiBackendCustomerExternalLink.IUpdate"},"responseBody":{"description":"Updated external link object.","typeName":"IShoppingMallAiBackendCustomerExternalLink"},"authorizationRoles":["admin","customer"],"name":"update","authorizationRole":"admin"},{"specification":"Update a customer's external auth link. This operation replaces the details of a specified link in shopping_mall_ai_backend_customer_external_links. Only authorized actors may update, and fields are validated according to business rules (provider uniqueness, data integrity, etc.). Operation is recorded in audit trail/history for compliance/security tracing.","path":"/shoppingMallAiBackend/customer/customers/{customerId}/externalLinks","method":"put","description":"Update an external authentication link for a customer. Request consists of updated data for the ext. link. Applies business logic for provider linkage, purpose, and last-auth snapshot. Accessible to the owning customer or admin only. Errors are returned for validation, permission, and ownership mismatches. All updates are logged for audit.","summary":"Update an external link for a customer (shopping_mall_ai_backend_customer_external_links).","parameters":[{"name":"customerId","description":"Customer UUID for link owner. Must reference shopping_mall_ai_backend_customers.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request with new/updated external link data.","typeName":"IShoppingMallAiBackendCustomerExternalLink.IUpdate"},"responseBody":{"description":"Updated external link object.","typeName":"IShoppingMallAiBackendCustomerExternalLink"},"authorizationRoles":["admin","customer"],"name":"update","authorizationRole":"customer"},{"specification":"Soft delete a customer's specific external link by customerId and link ID. Only soft deletion (sets deleted_at), leaving an audit trail/history entry. Removes the link from business login flows, keeps in database for compliance/tracking. Owner/admin auth required.","path":"/shoppingMallAiBackend/admin/customers/{customerId}/externalLinks/{externalLinkId}","method":"delete","description":"Soft delete a customer's external login/social/OAuth link by ID. Accessible to the link owner or an admin. Sets deleted_at for logical removal but preserves compliance/audit history. Attempting to delete a non-existent, already-deleted, or unauthorized record yields an error.","summary":"Soft delete an external auth link for a customer (shopping_mall_ai_backend_customer_external_links).","parameters":[{"name":"customerId","description":"Owner customer ID as UUID (shopping_mall_ai_backend_customers.id).","schema":{"type":"string","format":"uuid"}},{"name":"externalLinkId","description":"UUID of external link to delete (shopping_mall_ai_backend_customer_external_links.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","customer"],"name":"erase","authorizationRole":"admin"},{"specification":"Soft delete a customer's specific external link by customerId and link ID. Only soft deletion (sets deleted_at), leaving an audit trail/history entry. Removes the link from business login flows, keeps in database for compliance/tracking. Owner/admin auth required.","path":"/shoppingMallAiBackend/customer/customers/{customerId}/externalLinks/{externalLinkId}","method":"delete","description":"Soft delete a customer's external login/social/OAuth link by ID. Accessible to the link owner or an admin. Sets deleted_at for logical removal but preserves compliance/audit history. Attempting to delete a non-existent, already-deleted, or unauthorized record yields an error.","summary":"Soft delete an external auth link for a customer (shopping_mall_ai_backend_customer_external_links).","parameters":[{"name":"customerId","description":"Owner customer ID as UUID (shopping_mall_ai_backend_customers.id).","schema":{"type":"string","format":"uuid"}},{"name":"externalLinkId","description":"UUID of external link to delete (shopping_mall_ai_backend_customer_external_links.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","customer"],"name":"erase","authorizationRole":"customer"},{"specification":"Retrieve complete, paginated history of all state changes, lifecycle events, or profile updates for a specific customer from shopping_mall_ai_backend_customer_histories. Supports advanced search, filter, and pagination options using the IShoppingMallAiBackendCustomerHistory.IRequest DTO. Used for auditing, compliance, or rollback scenarios. Returns a list of all changes, who/what/when, and full before/after value snapshots stored as JSON blobs. Accessible only to admins or the customer (for their own record).","path":"/shoppingMallAiBackend/admin/customers/{customerId}/histories","method":"patch","description":"Get comprehensive list of all profile/history/audit events for a given customer, filtered and paginated by a complex query to the histories resource. Each entry reports the type of event (created, updated, password changed, etc.), before/after values, trigger source, meta information, event time, and auxiliary context for deep compliance, support, or business intelligence. Restricts visibility to self or admin, never to other customers. Enables rollback, incident analysis, and audit reporting on lifecycle events.","summary":"List/search the full lifecycle and event history for a given customer (shopping_mall_ai_backend_customer_histories).","parameters":[{"name":"customerId","description":"Customer ID whose histories are being retrieved. Must reference shopping_mall_ai_backend_customers.id UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter, pagination, or search parameters.","typeName":"IShoppingMallAiBackendCustomerHistory.IRequest"},"responseBody":{"description":"History/page of customer event/audit trail entries.","typeName":"IPageIShoppingMallAiBackendCustomerHistory"},"authorizationRoles":["admin","customer"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve complete, paginated history of all state changes, lifecycle events, or profile updates for a specific customer from shopping_mall_ai_backend_customer_histories. Supports advanced search, filter, and pagination options using the IShoppingMallAiBackendCustomerHistory.IRequest DTO. Used for auditing, compliance, or rollback scenarios. Returns a list of all changes, who/what/when, and full before/after value snapshots stored as JSON blobs. Accessible only to admins or the customer (for their own record).","path":"/shoppingMallAiBackend/customer/customers/{customerId}/histories","method":"patch","description":"Get comprehensive list of all profile/history/audit events for a given customer, filtered and paginated by a complex query to the histories resource. Each entry reports the type of event (created, updated, password changed, etc.), before/after values, trigger source, meta information, event time, and auxiliary context for deep compliance, support, or business intelligence. Restricts visibility to self or admin, never to other customers. Enables rollback, incident analysis, and audit reporting on lifecycle events.","summary":"List/search the full lifecycle and event history for a given customer (shopping_mall_ai_backend_customer_histories).","parameters":[{"name":"customerId","description":"Customer ID whose histories are being retrieved. Must reference shopping_mall_ai_backend_customers.id UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter, pagination, or search parameters.","typeName":"IShoppingMallAiBackendCustomerHistory.IRequest"},"responseBody":{"description":"History/page of customer event/audit trail entries.","typeName":"IPageIShoppingMallAiBackendCustomerHistory"},"authorizationRoles":["admin","customer"],"name":"search","authorizationRole":"customer"},{"specification":"Retrieve a specific customer history event for audit or compliance purposes. The operation focuses on retrieving a single record from the shopping_mall_ai_backend_customer_histories table identified by both customerId and historyId. This endpoint returns all available fields (including event_type, old_value_json, new_value_json, triggered_by, occurred_at, meta_json) and provides the complete context and state snapshots for the given customer history event. Useful for debugging, forensics, regulatory investigation, and providing evidence in case of account status changes, verification, or password resets. Hard/deleted records are excluded if deleted_at is set.","path":"/shoppingMallAiBackend/customer/customers/{customerId}/histories/{historyId}","method":"get","description":"Get a single customer history record by customerId and historyId. Each history entry contains a complete snapshot of a customer lifecycle event (creation, profile update, verification, password reset, lock, withdrawal, etc.), along with before/after value JSON fields, triggering actor, occurrence timestamp, and optional context metadata. Access is restricted to the customer themself, or authorized admin for compliance, dispute, or investigation. Hard-deleted records (deleted_at) are not returned; instead, only active history records are presented. Detailed error codes are provided if the history record is not found, access is unauthorized, or business constraints are violated. This operation connects tightly with user account update flows and auditing subsystems, such as those required by personal information protection laws and audit/digital forensics compliance.","summary":"Get specific customer history event by ID (shopping_mall_ai_backend_customer_histories)","parameters":[{"name":"customerId","description":"Unique identifier of customer whose history event is queried","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"Unique identifier for the history event in the customer's record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested customer history event. Includes event type, old/new value JSON, actor ID, context, timestamps.","typeName":"IShoppingMallAiBackendCustomerHistory"},"authorizationRoles":["customer","admin"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieve a specific customer history event for audit or compliance purposes. The operation focuses on retrieving a single record from the shopping_mall_ai_backend_customer_histories table identified by both customerId and historyId. This endpoint returns all available fields (including event_type, old_value_json, new_value_json, triggered_by, occurred_at, meta_json) and provides the complete context and state snapshots for the given customer history event. Useful for debugging, forensics, regulatory investigation, and providing evidence in case of account status changes, verification, or password resets. Hard/deleted records are excluded if deleted_at is set.","path":"/shoppingMallAiBackend/admin/customers/{customerId}/histories/{historyId}","method":"get","description":"Get a single customer history record by customerId and historyId. Each history entry contains a complete snapshot of a customer lifecycle event (creation, profile update, verification, password reset, lock, withdrawal, etc.), along with before/after value JSON fields, triggering actor, occurrence timestamp, and optional context metadata. Access is restricted to the customer themself, or authorized admin for compliance, dispute, or investigation. Hard-deleted records (deleted_at) are not returned; instead, only active history records are presented. Detailed error codes are provided if the history record is not found, access is unauthorized, or business constraints are violated. This operation connects tightly with user account update flows and auditing subsystems, such as those required by personal information protection laws and audit/digital forensics compliance.","summary":"Get specific customer history event by ID (shopping_mall_ai_backend_customer_histories)","parameters":[{"name":"customerId","description":"Unique identifier of customer whose history event is queried","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"Unique identifier for the history event in the customer's record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested customer history event. Includes event type, old/new value JSON, actor ID, context, timestamps.","typeName":"IShoppingMallAiBackendCustomerHistory"},"authorizationRoles":["customer","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Paginated search of seller business accounts in shopping_mall_ai_backend_sellers. Exposes filtered access to core seller profile fields (company_name, business_number, status), registration dates, email, and verification status. Supports filtering by status or company_name, and sort/query by registration data (joined_at, created_at). Only available to admins for auditing, onboarding, or seller management. Pagination ensures scalable response. Does not expose sensitive password hashes.","path":"/shoppingMallAiBackend/admin/sellers","method":"patch","description":"Perform an advanced paginated search for seller accounts, primarily as an administrative/dashboard capability. Allows filtering on core attributes such as status (pending, active, suspended), company_name, registration window, and email verification state. Results are paged and sorted by creation date or custom fields. This operation supports onboarding workflow management, discovery of new applications, compliance review, and seller account audits. Only admins can use this endpoint due to the sensitive nature of seller business data. The response provides summaries of each seller which link into detailed drilldowns. Error handling addresses incorrect filters or empty result sets. Connects with onboarding, business verification, and admin approval flows.","summary":"Paginated search for sellers (shopping_mall_ai_backend_sellers)","parameters":[],"requestBody":{"description":"Seller list/filter/search parameters, including optional filters (e.g. company_name, status), pagination, and sorting keys.","typeName":"IShoppingMallAiBackendSeller.IRequest"},"responseBody":{"description":"Paged collection of seller summary objects for dashboard/list/grid views.","typeName":"IPageIShoppingMallAiBackendSeller.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a seller account's full details by sellerId. Operates on the shopping_mall_ai_backend_sellers table. Returns all profile/business fields (company_name, representative_name, business_number, contact, address, status, verification states, creation/update timestamps, and related verification/onboarding records if federated in the response DTO). This endpoint is critical for seller account management, onboarding, auditing, and regulatory/compliance inspection. Only accessible to the seller themself or to authorized admins.","path":"/shoppingMallAiBackend/seller/sellers/{sellerId}","method":"get","description":"Get detailed information for a specific seller account by sellerId. Returns every business-critical attribute for the seller profile (identity, status, verification, onboarding linkage, business documents, timestamps), as well as relationships to verifications/history if defined in the response DTO. Designed for seller self-service dashboards, admin/compliance review, onboarding progress checks, and resolving disputes or fraudulent activity claims. Only accessible by the seller themself (to view their own data) or privileged admins for legal, operational, and management roles. Responses may hide/mask sensitive data unless actor is admin. Error cases include not-found (deleted/withdrawn), insufficient permissions, or access outside allowed relationships.","summary":"Get details of specific seller account (shopping_mall_ai_backend_sellers)","parameters":[{"name":"sellerId","description":"Unique identifier for the seller whose details are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detail of seller profile and all business/verification fields.","typeName":"IShoppingMallAiBackendSeller"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve a seller account's full details by sellerId. Operates on the shopping_mall_ai_backend_sellers table. Returns all profile/business fields (company_name, representative_name, business_number, contact, address, status, verification states, creation/update timestamps, and related verification/onboarding records if federated in the response DTO). This endpoint is critical for seller account management, onboarding, auditing, and regulatory/compliance inspection. Only accessible to the seller themself or to authorized admins.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}","method":"get","description":"Get detailed information for a specific seller account by sellerId. Returns every business-critical attribute for the seller profile (identity, status, verification, onboarding linkage, business documents, timestamps), as well as relationships to verifications/history if defined in the response DTO. Designed for seller self-service dashboards, admin/compliance review, onboarding progress checks, and resolving disputes or fraudulent activity claims. Only accessible by the seller themself (to view their own data) or privileged admins for legal, operational, and management roles. Responses may hide/mask sensitive data unless actor is admin. Error cases include not-found (deleted/withdrawn), insufficient permissions, or access outside allowed relationships.","summary":"Get details of specific seller account (shopping_mall_ai_backend_sellers)","parameters":[{"name":"sellerId","description":"Unique identifier for the seller whose details are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detail of seller profile and all business/verification fields.","typeName":"IShoppingMallAiBackendSeller"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Update an existing seller's business information. This is a PUT operation on the shopping_mall_ai_backend_sellers table, identifying the record by sellerId and replacing supplied fields (business profile, contact, company name, etc.). Update is allowed only for the seller themself (with ownership checks), or an admin with appropriate privilege. Secure audit logging of all changes is enforced for compliance and rollback. Changes to legal/business identity fields trigger validation and may affect onboarding or status state. Partial updates are supported via PATCH variants, but this PUT replaces defined fields. Does not update password unless explicit. On success, returns the updated seller record.","path":"/shoppingMallAiBackend/seller/sellers","method":"put","description":"Update a seller organization's profile and business attributes by sellerId, including company name, address, representative, contact, status, and compliance fields. Only owners and privileged admins are permitted. All field changes are audit logged in the seller_histories table for regulatory, compliance, and support purposes. Status/identity field changes may require additional admin review or onboarding step resets. Invalid field changes or unauthorized calls result in detailed error responses. Error codes are standardized for business compliance. Connects with onboarding, KYC/business verification, and seller self-service flows.","summary":"Update seller details (shopping_mall_ai_backend_sellers)","parameters":[],"requestBody":{"description":"Full seller business profile update fields. All modifiable business, legal, and contact information.","typeName":"IShoppingMallAiBackendSeller.IUpdate"},"responseBody":{"description":"Updated seller business profile object.","typeName":"IShoppingMallAiBackendSeller"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"seller"},{"specification":"Update an existing seller's business information. This is a PUT operation on the shopping_mall_ai_backend_sellers table, identifying the record by sellerId and replacing supplied fields (business profile, contact, company name, etc.). Update is allowed only for the seller themself (with ownership checks), or an admin with appropriate privilege. Secure audit logging of all changes is enforced for compliance and rollback. Changes to legal/business identity fields trigger validation and may affect onboarding or status state. Partial updates are supported via PATCH variants, but this PUT replaces defined fields. Does not update password unless explicit. On success, returns the updated seller record.","path":"/shoppingMallAiBackend/admin/sellers","method":"put","description":"Update a seller organization's profile and business attributes by sellerId, including company name, address, representative, contact, status, and compliance fields. Only owners and privileged admins are permitted. All field changes are audit logged in the seller_histories table for regulatory, compliance, and support purposes. Status/identity field changes may require additional admin review or onboarding step resets. Invalid field changes or unauthorized calls result in detailed error responses. Error codes are standardized for business compliance. Connects with onboarding, KYC/business verification, and seller self-service flows.","summary":"Update seller details (shopping_mall_ai_backend_sellers)","parameters":[],"requestBody":{"description":"Full seller business profile update fields. All modifiable business, legal, and contact information.","typeName":"IShoppingMallAiBackendSeller.IUpdate"},"responseBody":{"description":"Updated seller business profile object.","typeName":"IShoppingMallAiBackendSeller"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Erase (hard delete) a seller account by sellerId, operating on shopping_mall_ai_backend_sellers. This hard deletes the seller from the business system; as no field like deleted_at is required by schema, physical deletion is presumed. Only accessible to the seller themselves or privileged admins, with full regulatory/audit logging of the action. All associated data may be subject to cascading deletion as contractually or legally required. Errors for not-found, permission, legal constraint, or relation violations are handled and exposed.","path":"/shoppingMallAiBackend/seller/sellers/{sellerId}","method":"delete","description":"Delete a seller account from the business system by sellerId. This is a hard delete operation due to absent soft-delete fields. Only owner-sellers or admins may perform this action after authentication and a compliance check. All deletions are audit-logged, including cascade implications and business/legal risk notes. Errors are returned for non-existing records, unauthorized action, dependent entity constraint failures, or legally restricted deletion. Integrates with onboarding deactivation and compliance removal routines.","summary":"Delete (hard erase) seller profile (shopping_mall_ai_backend_sellers)","parameters":[{"name":"sellerId","description":"Unique identifier of the seller account to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"seller"},{"specification":"Erase (hard delete) a seller account by sellerId, operating on shopping_mall_ai_backend_sellers. This hard deletes the seller from the business system; as no field like deleted_at is required by schema, physical deletion is presumed. Only accessible to the seller themselves or privileged admins, with full regulatory/audit logging of the action. All associated data may be subject to cascading deletion as contractually or legally required. Errors for not-found, permission, legal constraint, or relation violations are handled and exposed.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}","method":"delete","description":"Delete a seller account from the business system by sellerId. This is a hard delete operation due to absent soft-delete fields. Only owner-sellers or admins may perform this action after authentication and a compliance check. All deletions are audit-logged, including cascade implications and business/legal risk notes. Errors are returned for non-existing records, unauthorized action, dependent entity constraint failures, or legally restricted deletion. Integrates with onboarding deactivation and compliance removal routines.","summary":"Delete (hard erase) seller profile (shopping_mall_ai_backend_sellers)","parameters":[{"name":"sellerId","description":"Unique identifier of the seller account to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Paginated search of seller business verification records for a specific seller. Operates on shopping_mall_ai_backend_seller_business_verifications filtered by sellerId. Returns list of verification events/documents with statuses, types, reviewer information, and document URIs. Allows admin/seller dashboards to see progress, issues, and compliance evidence for KYC/business onboarding and regulatory audits. Only the seller themselves or an admin may access this information. Paging enables scalable audit/reporting.","path":"/shoppingMallAiBackend/seller/sellers/{sellerId}/businessVerifications","method":"patch","description":"Search and retrieve paginated business verification records for the given seller. This includes submission type (business_license, bankbook, etc.), verification_status, reviewer/admin, decision notes, file URIs, and create/update history. Used for compliance dashboarding, seller onboarding tracking, regulatory checks, and auditing seller documentation. The result set allows deeper drilldown into each individual verification record. Only accessible by the seller (their own docs) or authorized admins for KYC/business verification routines. All accesses are audit-logged for compliance. Error handling includes not-found, permission, and invalid search/filter input.","summary":"Search business verifications for seller (shopping_mall_ai_backend_seller_business_verifications)","parameters":[{"name":"sellerId","description":"Seller whose verifications will be searched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Business verification search/filter/pagination criteria for the seller context.","typeName":"IShoppingMallAiBackendSellerBusinessVerification.IRequest"},"responseBody":{"description":"Paged results of business verification records for the seller.","typeName":"IPageIShoppingMallAiBackendSellerBusinessVerification.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Paginated search of seller business verification records for a specific seller. Operates on shopping_mall_ai_backend_seller_business_verifications filtered by sellerId. Returns list of verification events/documents with statuses, types, reviewer information, and document URIs. Allows admin/seller dashboards to see progress, issues, and compliance evidence for KYC/business onboarding and regulatory audits. Only the seller themselves or an admin may access this information. Paging enables scalable audit/reporting.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/businessVerifications","method":"patch","description":"Search and retrieve paginated business verification records for the given seller. This includes submission type (business_license, bankbook, etc.), verification_status, reviewer/admin, decision notes, file URIs, and create/update history. Used for compliance dashboarding, seller onboarding tracking, regulatory checks, and auditing seller documentation. The result set allows deeper drilldown into each individual verification record. Only accessible by the seller (their own docs) or authorized admins for KYC/business verification routines. All accesses are audit-logged for compliance. Error handling includes not-found, permission, and invalid search/filter input.","summary":"Search business verifications for seller (shopping_mall_ai_backend_seller_business_verifications)","parameters":[{"name":"sellerId","description":"Seller whose verifications will be searched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Business verification search/filter/pagination criteria for the seller context.","typeName":"IShoppingMallAiBackendSellerBusinessVerification.IRequest"},"responseBody":{"description":"Paged results of business verification records for the seller.","typeName":"IPageIShoppingMallAiBackendSellerBusinessVerification.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve an individual seller business verification record for a given seller by businessVerificationId. Operates on shopping_mall_ai_backend_seller_business_verifications, ensuring only one document verification record (e.g., business_license, bankbook) is returned for compliance, onboarding, or audit. Returns fields such as document_type, file URI, verification_status, reviewer, admin note, reviewed_at, created_at, etc. Only the verified/owning seller or an admin may access.","path":"/shoppingMallAiBackend/seller/sellers/{sellerId}/businessVerifications/{businessVerificationId}","method":"get","description":"Get a single business verification record for a specific seller based on the verificationId. Provides all business/compliance fields (document type, file URI, reviewer, status, creation/update times, admin notes, etc.). Restricted to the seller (their own docs) and authorized admins for onboarding/compliance. Error cases include non-existing verification, permissions, or invalid business logic. Connects to onboarding KYC and compliance dashboards. Integrates with history tracking and document audit systems for full traceability.","summary":"Get business verification detail by ID (shopping_mall_ai_backend_seller_business_verifications)","parameters":[{"name":"sellerId","description":"Seller who owns the business verification record","schema":{"type":"string","format":"uuid"}},{"name":"businessVerificationId","description":"Unique identifier for the business verification record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full data about the seller business verification record and all audit/compliance fields.","typeName":"IShoppingMallAiBackendSellerBusinessVerification"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve an individual seller business verification record for a given seller by businessVerificationId. Operates on shopping_mall_ai_backend_seller_business_verifications, ensuring only one document verification record (e.g., business_license, bankbook) is returned for compliance, onboarding, or audit. Returns fields such as document_type, file URI, verification_status, reviewer, admin note, reviewed_at, created_at, etc. Only the verified/owning seller or an admin may access.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/businessVerifications/{businessVerificationId}","method":"get","description":"Get a single business verification record for a specific seller based on the verificationId. Provides all business/compliance fields (document type, file URI, reviewer, status, creation/update times, admin notes, etc.). Restricted to the seller (their own docs) and authorized admins for onboarding/compliance. Error cases include non-existing verification, permissions, or invalid business logic. Connects to onboarding KYC and compliance dashboards. Integrates with history tracking and document audit systems for full traceability.","summary":"Get business verification detail by ID (shopping_mall_ai_backend_seller_business_verifications)","parameters":[{"name":"sellerId","description":"Seller who owns the business verification record","schema":{"type":"string","format":"uuid"}},{"name":"businessVerificationId","description":"Unique identifier for the business verification record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full data about the seller business verification record and all audit/compliance fields.","typeName":"IShoppingMallAiBackendSellerBusinessVerification"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Update an existing business verification record (document, status, reviewer, note, etc.) for a seller. This operation allows the seller or an admin to update/revise a business_verification entry in shopping_mall_ai_backend_seller_business_verifications, identified by sellerId. Updates may include the document file URI, verification_status, admin/reviewer, reviewed_at and note. Audit logs and compliance histories are updated on all changes. Only seller-owner or admin may modify. Updates that affect compliance/trust reset may notify onboarding workflows.","path":"/shoppingMallAiBackend/seller/sellers/{sellerId}/businessVerifications","method":"put","description":"Update a business verification record belonging to a seller. Allows revision of submitted documents, reviewer/admin note/decision, verification status, file details, or additional comments. All updates are fully audit-logged and may trigger downstream onboarding state changes or compliance/approval notifications. Errors for not-found, permissions, or constraint/existence issues are handled. May be used for seller KYC re-submissions, compliance upload corrections, admin review steps, and audit flows.","summary":"Update/replace business verification record (shopping_mall_ai_backend_seller_business_verifications)","parameters":[{"name":"sellerId","description":"Seller whose business verification is being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Business verification update fields for seller including status, reviewer, URI, admin note, etc.","typeName":"IShoppingMallAiBackendSellerBusinessVerification.IUpdate"},"responseBody":{"description":"Updated seller business verification record object.","typeName":"IShoppingMallAiBackendSellerBusinessVerification"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"seller"},{"specification":"Update an existing business verification record (document, status, reviewer, note, etc.) for a seller. This operation allows the seller or an admin to update/revise a business_verification entry in shopping_mall_ai_backend_seller_business_verifications, identified by sellerId. Updates may include the document file URI, verification_status, admin/reviewer, reviewed_at and note. Audit logs and compliance histories are updated on all changes. Only seller-owner or admin may modify. Updates that affect compliance/trust reset may notify onboarding workflows.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/businessVerifications","method":"put","description":"Update a business verification record belonging to a seller. Allows revision of submitted documents, reviewer/admin note/decision, verification status, file details, or additional comments. All updates are fully audit-logged and may trigger downstream onboarding state changes or compliance/approval notifications. Errors for not-found, permissions, or constraint/existence issues are handled. May be used for seller KYC re-submissions, compliance upload corrections, admin review steps, and audit flows.","summary":"Update/replace business verification record (shopping_mall_ai_backend_seller_business_verifications)","parameters":[{"name":"sellerId","description":"Seller whose business verification is being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Business verification update fields for seller including status, reviewer, URI, admin note, etc.","typeName":"IShoppingMallAiBackendSellerBusinessVerification.IUpdate"},"responseBody":{"description":"Updated seller business verification record object.","typeName":"IShoppingMallAiBackendSellerBusinessVerification"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (hard erase) a seller business verification record by businessVerificationId for a given seller. Operates on shopping_mall_ai_backend_seller_business_verifications. Since no soft delete flag exists, this is a hard deletion. Only accessible to the seller or admin. Full audit of deletion event/state is performed. Cascading effects or contract/legal implications should be validated by business logic in API provider.","path":"/shoppingMallAiBackend/seller/sellers/{sellerId}/businessVerifications/{businessVerificationId}","method":"delete","description":"Delete (hard erase) a seller business verification document by its unique id under the parent seller. Operation physically removes the verification document as there are no deleted_at semantics in the schema. Only allowed for seller-owner or admin, and all deletes are audit-logged. Error cases are handled for missing, illegal, or constrained deletions. Connects to seller onboarding step resets or compliance withdrawal logic.","summary":"Delete seller business verification record (shopping_mall_ai_backend_seller_business_verifications)","parameters":[{"name":"sellerId","description":"Seller account to which the business verification belongs","schema":{"type":"string","format":"uuid"}},{"name":"businessVerificationId","description":"Business verification record to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"seller"},{"specification":"Delete (hard erase) a seller business verification record by businessVerificationId for a given seller. Operates on shopping_mall_ai_backend_seller_business_verifications. Since no soft delete flag exists, this is a hard deletion. Only accessible to the seller or admin. Full audit of deletion event/state is performed. Cascading effects or contract/legal implications should be validated by business logic in API provider.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/businessVerifications/{businessVerificationId}","method":"delete","description":"Delete (hard erase) a seller business verification document by its unique id under the parent seller. Operation physically removes the verification document as there are no deleted_at semantics in the schema. Only allowed for seller-owner or admin, and all deletes are audit-logged. Error cases are handled for missing, illegal, or constrained deletions. Connects to seller onboarding step resets or compliance withdrawal logic.","summary":"Delete seller business verification record (shopping_mall_ai_backend_seller_business_verifications)","parameters":[{"name":"sellerId","description":"Seller account to which the business verification belongs","schema":{"type":"string","format":"uuid"}},{"name":"businessVerificationId","description":"Business verification record to permanently delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Paginated, filtered search of the onboarding event/history records for a specific seller account. Operates on shopping_mall_ai_backend_seller_onboardings table, filtered by sellerId and supports paging. Returns onboarding events (step_code, step_status, approved_by, occurred_at, note, created_at, etc.) for compliance/legal readiness, onboarding progress displays, and regulatory dashboards. Used by both admins and sellers to track/resolve onboarding. Errors for non-existing seller, permission issues, or invalid query are addressed. Integrates with onboarding compliance/audit and approval/refusal logic.","path":"/shoppingMallAiBackend/seller/sellers/{sellerId}/onboardings","method":"patch","description":"Search and paginate through seller onboarding event records for regulatory, compliance, and operational visibility on the path to seller activation. Each onboarding event contains step_code (e.g., document_upload, ai_review), status, reviewers, notes, and timestamps. Only accessible by the seller (their own onboarding) or admins. Results support workflow progress UX, compliance checks, and support troubleshooting. Detailed validation on filters and paging is ensured. Connects with KYC process and seller application state logic.","summary":"Search seller onboarding event records (shopping_mall_ai_backend_seller_onboardings)","parameters":[{"name":"sellerId","description":"Seller account to retrieve onboarding history for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter/paging criteria for the onboarding history, including optional step_code, status, and time range.","typeName":"IShoppingMallAiBackendSellerOnboarding.IRequest"},"responseBody":{"description":"Paged onboarding history results for the given seller account.","typeName":"IPageIShoppingMallAiBackendSellerOnboarding.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Paginated, filtered search of the onboarding event/history records for a specific seller account. Operates on shopping_mall_ai_backend_seller_onboardings table, filtered by sellerId and supports paging. Returns onboarding events (step_code, step_status, approved_by, occurred_at, note, created_at, etc.) for compliance/legal readiness, onboarding progress displays, and regulatory dashboards. Used by both admins and sellers to track/resolve onboarding. Errors for non-existing seller, permission issues, or invalid query are addressed. Integrates with onboarding compliance/audit and approval/refusal logic.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/onboardings","method":"patch","description":"Search and paginate through seller onboarding event records for regulatory, compliance, and operational visibility on the path to seller activation. Each onboarding event contains step_code (e.g., document_upload, ai_review), status, reviewers, notes, and timestamps. Only accessible by the seller (their own onboarding) or admins. Results support workflow progress UX, compliance checks, and support troubleshooting. Detailed validation on filters and paging is ensured. Connects with KYC process and seller application state logic.","summary":"Search seller onboarding event records (shopping_mall_ai_backend_seller_onboardings)","parameters":[{"name":"sellerId","description":"Seller account to retrieve onboarding history for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter/paging criteria for the onboarding history, including optional step_code, status, and time range.","typeName":"IShoppingMallAiBackendSellerOnboarding.IRequest"},"responseBody":{"description":"Paged onboarding history results for the given seller account.","typeName":"IPageIShoppingMallAiBackendSellerOnboarding.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Get detailed information about a specific onboarding event for a seller. Operates on shopping_mall_ai_backend_seller_onboardings, identified by sellerId and onboardingId. Returns all compliance/audit fields of the onboarding step, including approvals, date/times, notes, reviewer/admin, and current status. Used by admins and the seller for process tracking, application support, and legal documentation.","path":"/shoppingMallAiBackend/seller/sellers/{sellerId}/onboardings/{onboardingId}","method":"get","description":"Get full details for a single onboarding step/event for a seller. Includes all process metadata and traceability fields. Access limited to the seller and authorized admins for compliance and transparency. The record delivered includes all milestone, status, note, reviewer, and audit fields for the onboarding step, mapped via the onboardingId and sellerId combination. Errors are handled for missing/inaccessible records, permissions, or business/contractual state issues. Integrates with the overall seller onboarding workflow for legal and regulatory handling.","summary":"Get seller onboarding record by ID (shopping_mall_ai_backend_seller_onboardings)","parameters":[{"name":"sellerId","description":"Seller whose onboarding event is being queried","schema":{"type":"string","format":"uuid"}},{"name":"onboardingId","description":"Unique identifier for the onboarding history event","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full data for the seller onboarding record and all tracked fields.","typeName":"IShoppingMallAiBackendSellerOnboarding"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Get detailed information about a specific onboarding event for a seller. Operates on shopping_mall_ai_backend_seller_onboardings, identified by sellerId and onboardingId. Returns all compliance/audit fields of the onboarding step, including approvals, date/times, notes, reviewer/admin, and current status. Used by admins and the seller for process tracking, application support, and legal documentation.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/onboardings/{onboardingId}","method":"get","description":"Get full details for a single onboarding step/event for a seller. Includes all process metadata and traceability fields. Access limited to the seller and authorized admins for compliance and transparency. The record delivered includes all milestone, status, note, reviewer, and audit fields for the onboarding step, mapped via the onboardingId and sellerId combination. Errors are handled for missing/inaccessible records, permissions, or business/contractual state issues. Integrates with the overall seller onboarding workflow for legal and regulatory handling.","summary":"Get seller onboarding record by ID (shopping_mall_ai_backend_seller_onboardings)","parameters":[{"name":"sellerId","description":"Seller whose onboarding event is being queried","schema":{"type":"string","format":"uuid"}},{"name":"onboardingId","description":"Unique identifier for the onboarding history event","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full data for the seller onboarding record and all tracked fields.","typeName":"IShoppingMallAiBackendSellerOnboarding"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Update or correct an onboarding event/history record for a seller. PUT operation on shopping_mall_ai_backend_seller_onboardings, identified by sellerId, updating modifiable fields of onboarding step (step_status, approved_by, note, etc). Only the seller participating in onboarding or privileged admins may perform this update. All changes are audit-tracked. Status updates may result in application workflow progression or compliance notifications. Proper error handling for permission or business state violations.","path":"/shoppingMallAiBackend/seller/sellers/{sellerId}/onboardings","method":"put","description":"Update a seller onboarding event record. Allows the seller or an authorized admin to correct, complete, or annotate the onboarding step. Supported fields include statuses, reviewer/admin, notes, and audit metadata. Changing core onboarding status may advance the KYC/workflow process, and all changes are securely logged. Unauthorized changes or invalid field attempts result in detailed error responses. Fits into onboarding UX flows and compliance operations.","summary":"Update/replace seller onboarding event record (shopping_mall_ai_backend_seller_onboardings)","parameters":[{"name":"sellerId","description":"Seller account whose onboarding event is being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the seller onboarding event (e.g. status, reviewer/admin, note, etc.)","typeName":"IShoppingMallAiBackendSellerOnboarding.IUpdate"},"responseBody":{"description":"Updated onboarding event object for the seller.","typeName":"IShoppingMallAiBackendSellerOnboarding"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"seller"},{"specification":"Update or correct an onboarding event/history record for a seller. PUT operation on shopping_mall_ai_backend_seller_onboardings, identified by sellerId, updating modifiable fields of onboarding step (step_status, approved_by, note, etc). Only the seller participating in onboarding or privileged admins may perform this update. All changes are audit-tracked. Status updates may result in application workflow progression or compliance notifications. Proper error handling for permission or business state violations.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/onboardings","method":"put","description":"Update a seller onboarding event record. Allows the seller or an authorized admin to correct, complete, or annotate the onboarding step. Supported fields include statuses, reviewer/admin, notes, and audit metadata. Changing core onboarding status may advance the KYC/workflow process, and all changes are securely logged. Unauthorized changes or invalid field attempts result in detailed error responses. Fits into onboarding UX flows and compliance operations.","summary":"Update/replace seller onboarding event record (shopping_mall_ai_backend_seller_onboardings)","parameters":[{"name":"sellerId","description":"Seller account whose onboarding event is being updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the seller onboarding event (e.g. status, reviewer/admin, note, etc.)","typeName":"IShoppingMallAiBackendSellerOnboarding.IUpdate"},"responseBody":{"description":"Updated onboarding event object for the seller.","typeName":"IShoppingMallAiBackendSellerOnboarding"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes an onboarding record for a seller. This operation performs a hard delete because the onboarding table does not support soft delete as per the schema. Only admins can perform this operation. The route utilizes the unique IDs for both the seller and the onboarding record.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/onboardings/{onboardingId}","method":"delete","description":"This API permanently deletes a seller's onboarding record given the seller's unique ID and the onboarding's unique ID. The operation is intended for administrative cleanup or audit correction scenarios. It references the shopping_mall_ai_backend_seller_onboardings table and will result in complete removal of the chosen onboarding record. Access is restricted to users with the 'admin' role. Attempting to delete non-existent IDs or already deleted records will result in a not found error.","summary":"Delete a seller onboarding record (hard delete) by ID (shopping_mall_ai_backend_seller_onboardings).","parameters":[{"name":"sellerId","description":"Unique identifier (UUID) of the seller whose onboarding record is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"onboardingId","description":"Unique identifier (UUID) of the onboarding record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Returns a filtered, paginated list of seller history events referencing the shopping_mall_ai_backend_seller_histories table. Supports advanced filtering by event type, date range, and keyword. Designed for auditing all actions performed on a specific seller.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/histories","method":"patch","description":"This operation retrieves an advanced list of history snapshots for a specific seller, supporting filtering by event type, trigger source, and time period. It references the seller_histories table, exposing historical actions for audit, compliance, and support. Only admins are permitted due to the sensitive nature of business account metadata. Pagination and keyword search capabilities are provided to enable audit, monitoring, and compliance workflows for regulators or platform operators.","summary":"List seller history/audit events for a given seller (shopping_mall_ai_backend_seller_histories).","parameters":[{"name":"sellerId","description":"Unique UUID of the seller whose history is requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query parameters for filtering seller history events (date range, event type, pagination).","typeName":"IShoppingMallAiBackendSellerHistory.IRequest"},"responseBody":{"description":"Paginated seller history event records.","typeName":"IPageIShoppingMallAiBackendSellerHistory"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves a specific seller history record by its unique ID. Maps directly to a row in shopping_mall_ai_backend_seller_histories. Used for regulatory audit traces, compliance reviews, and backoffice support.","path":"/shoppingMallAiBackend/admin/sellers/{sellerId}/histories/{historyId}","method":"get","description":"Returns the full details of a single history record for a seller, including all before/after state data and audit context. The sellerId is used to verify ownership, and historyId locates the desired record. Access is admin-only for maximum security. The result reflects an immutable snapshot of a business event.","summary":"Retrieve a specific seller history record (shopping_mall_ai_backend_seller_histories).","parameters":[{"name":"sellerId","description":"UUID representing the seller owner of the history record.","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"UUID for the targeted seller history record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full seller history snapshot and metadata.","typeName":"IShoppingMallAiBackendSellerHistory"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieves a paginated, searchable list of admin user accounts. This operation pulls from the shopping_mall_ai_backend_admins table and is used for management, permission administration, and compliance reporting. Filtering and pagination are standard. Only users with 'admin' privileges may access.","path":"/shoppingMallAiBackend/admin/admins","method":"patch","description":"Returns a filtered page of admin user accounts, enabling admin search, audit, and compliance. Search criteria include role, status, email, and date ranges. Used for permissions reviews, admin lifecycle reporting, and regulatory reviews. This operation does not include sensitive password hashes. Only users with the admin role have access due to the high-privilege content.","summary":"Search admins with filters and pagination (shopping_mall_ai_backend_admins).","parameters":[],"requestBody":{"description":"Search/filtering criteria for admin accounts (role, status, pagination).","typeName":"IShoppingMallAiBackendAdmin.IRequest"},"responseBody":{"description":"Paginated list of admin summary records matching query criteria.","typeName":"IPageIShoppingMallAiBackendAdmin.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves the full details of a single admin account by unique identifier from shopping_mall_ai_backend_admins. Utilized for account review, permission change audits, or investigating past admin activity. Only authenticated admins may access.","path":"/shoppingMallAiBackend/admin/admins/{adminId}","method":"get","description":"Returns all business data fields, permission status, and profile for an admin, excluding sensitive password hash fields. Used to review and manage admin users as part of internal IT, compliance, or operational HR processes. The operation returns an error on non-existent adminId or insufficient permissions.","summary":"Get details for a specific admin by ID (shopping_mall_ai_backend_admins).","parameters":[{"name":"adminId","description":"Unique identifier (UUID) for the admin account.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified admin account.","typeName":"IShoppingMallAiBackendAdmin"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Updates an existing admin account given by adminId. Applies changes to name, role, status, and other business fields except the password. Soft delete is handled via deleted_at. Only admins with sufficient permissions may update.","path":"/shoppingMallAiBackend/admin/admins","method":"put","description":"Updates the data for an existing admin account, identified by ID in the request body. Permits changes to permissible fields according to operational security policy, while protecting the password field. This is an administrative endpoint to support role/attribute changes, account status management, and HR workflows. Admin-only access.","summary":"Update an existing admin account (shopping_mall_ai_backend_admins).","parameters":[],"requestBody":{"description":"Admin update information (ID and updatable fields, not password).","typeName":"IShoppingMallAiBackendAdmin.IUpdate"},"responseBody":{"description":"Updated admin account information after modification.","typeName":"IShoppingMallAiBackendAdmin"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes an admin account by its unique ID. This API performs a soft delete, setting the deleted_at field. The target account must exist and not be already deleted. Only users with admin privileges may execute this operation. Schema guarantees deleted_at is used for soft delete.","path":"/shoppingMallAiBackend/admin/admins/{adminId}","method":"delete","description":"Soft deletes an admin account by setting deleted_at on the record as per schema design. Used for personnel offboarding, role revocation, or regulatory lockout. The action is traceable via admin history tables for audit. Repeated deletion of already-soft-deleted accounts should return a not found or idempotent response. Only admin role users have access.","summary":"Soft delete an admin account (set deleted_at) (shopping_mall_ai_backend_admins).","parameters":[{"name":"adminId","description":"UUID of the admin account to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Get all history/audit records for a given admin account (shopping_mall_ai_backend_admin_histories). Retrieves a filtered/paginated set for audit, compliance, or role change reviews. Admin role required.","path":"/shoppingMallAiBackend/admin/admins/{adminId}/histories","method":"patch","description":"Returns the audit event history for an admin account, supporting filters including date, event type, and operation context. Allows compliance officers and IT security to track all actions and configuration changes linked to admin users. Result is paginated and does not include sensitive security fields. Admin access is required due to privileged information.","summary":"Search admin history/audit events (shopping_mall_ai_backend_admin_histories).","parameters":[{"name":"adminId","description":"UUID for the admin whose histories are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"History query/filter criteria for admin events.","typeName":"IShoppingMallAiBackendAdminHistory.IRequest"},"responseBody":{"description":"Paginated admin history/audit event records.","typeName":"IPageIShoppingMallAiBackendAdminHistory"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Get a specific admin history/audit record by unique history ID. (shopping_mall_ai_backend_admin_histories) Used for compliance, troubleshooting, or role escalation review. Only accessible by admin.","path":"/shoppingMallAiBackend/admin/admins/{adminId}/histories/{historyId}","method":"get","description":"Returns detailed audit history for a single event on an admin account. This API enables regulatory audits, incident reviews, and accountability tracking for administrative changes. The adminId is used to verify the scope; historyId pinpoints the relevant event. Result contains contextual and technical metadata. Admin role required.","summary":"Retrieve specific audit history event for an admin (shopping_mall_ai_backend_admin_histories).","parameters":[{"name":"adminId","description":"UUID of the admin.","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"UUID of the history record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full admin history/audit record.","typeName":"IShoppingMallAiBackendAdminHistory"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Search and filter all products with full business attribute and advanced query (from shopping_mall_ai_backend_products). Provides support for AI/ML feature extraction, advanced e-commerce filtering, and operational analytics. Output is paginated and supports search, sort, and filter. Only sellers and admins can access.","path":"/shoppingMallAiBackend/admin/products","method":"patch","description":"Advanced product search querying the entire product catalog with full business filtering (category, seller, status, name, date). Supports pagination, sorting, and text search for platform backoffice and AI recommendations. Based on shopping_mall_ai_backend_products. Only admins and seller roles can access due to business data exposure.","summary":"Advanced search for products (shopping_mall_ai_backend_products).","parameters":[],"requestBody":{"description":"Advanced search filter criteria for products (category, seller, name, etc).","typeName":"IShoppingMallAiBackendProduct.IRequest"},"responseBody":{"description":"Paginated list of matching product records.","typeName":"IPageIShoppingMallAiBackendProduct"},"authorizationRoles":["admin","seller"],"name":"search","authorizationRole":"admin"},{"specification":"Search and filter all products with full business attribute and advanced query (from shopping_mall_ai_backend_products). Provides support for AI/ML feature extraction, advanced e-commerce filtering, and operational analytics. Output is paginated and supports search, sort, and filter. Only sellers and admins can access.","path":"/shoppingMallAiBackend/seller/products","method":"patch","description":"Advanced product search querying the entire product catalog with full business filtering (category, seller, status, name, date). Supports pagination, sorting, and text search for platform backoffice and AI recommendations. Based on shopping_mall_ai_backend_products. Only admins and seller roles can access due to business data exposure.","summary":"Advanced search for products (shopping_mall_ai_backend_products).","parameters":[],"requestBody":{"description":"Advanced search filter criteria for products (category, seller, name, etc).","typeName":"IShoppingMallAiBackendProduct.IRequest"},"responseBody":{"description":"Paginated list of matching product records.","typeName":"IPageIShoppingMallAiBackendProduct"},"authorizationRoles":["admin","seller"],"name":"search","authorizationRole":"seller"},{"specification":"Retrieve details of a specific product by productId. Operation fetches all business attributes from shopping_mall_ai_backend_products, including seller and option references. Used for detailed product management in B2B scenarios as well as for backoffice business.","path":"/shoppingMallAiBackend/admin/products/{productId}","method":"get","description":"Returns the complete details for a product, with links to its categories, seller, options, and business metadata. Used by admins and sellers for operational workflow, business review, or compliance. Access is role protected for sensitive price and business data. Product not found or deleted returns a not-found error.","summary":"Get full details for a specific product (shopping_mall_ai_backend_products).","parameters":[{"name":"productId","description":"UUID of the product whose details are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete product details including all attributes and relations.","typeName":"IShoppingMallAiBackendProduct"},"authorizationRoles":["admin","seller"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieve details of a specific product by productId. Operation fetches all business attributes from shopping_mall_ai_backend_products, including seller and option references. Used for detailed product management in B2B scenarios as well as for backoffice business.","path":"/shoppingMallAiBackend/seller/products/{productId}","method":"get","description":"Returns the complete details for a product, with links to its categories, seller, options, and business metadata. Used by admins and sellers for operational workflow, business review, or compliance. Access is role protected for sensitive price and business data. Product not found or deleted returns a not-found error.","summary":"Get full details for a specific product (shopping_mall_ai_backend_products).","parameters":[{"name":"productId","description":"UUID of the product whose details are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete product details including all attributes and relations.","typeName":"IShoppingMallAiBackendProduct"},"authorizationRoles":["admin","seller"],"name":"at","authorizationRole":"seller"},{"specification":"Creates (registers) a new product, providing full business data for product, including initial status, seller link, and main attributes, mapped to shopping_mall_ai_backend_products. Response returns the created product record. Only sellers and admins may use this endpoint. Schema does not allow password or sensitive user fields. Validation errors are surfaced for missing or duplicate SKU/code.","path":"/shoppingMallAiBackend/admin/products","method":"post","description":"Creates a new product entity for the online marketplace with all required and optional attributes (name, code, main image, seller, status, description). Supports both seller and admin created products. Validates business uniqueness of code/SKU on registration. Returns the full product record as it appears in catalog, including all relational fields for business logic. Only seller or admin may access. Errors raised for duplicate code or missing dependencies.","summary":"Register a new product in the platform (shopping_mall_ai_backend_products).","parameters":[],"requestBody":{"description":"Product business data/attributes for registration.","typeName":"IShoppingMallAiBackendProduct.ICreate"},"responseBody":{"description":"Full details of the registered product upon creation.","typeName":"IShoppingMallAiBackendProduct"},"authorizationRoles":["admin","seller"],"name":"create","authorizationRole":"admin"},{"specification":"Creates (registers) a new product, providing full business data for product, including initial status, seller link, and main attributes, mapped to shopping_mall_ai_backend_products. Response returns the created product record. Only sellers and admins may use this endpoint. Schema does not allow password or sensitive user fields. Validation errors are surfaced for missing or duplicate SKU/code.","path":"/shoppingMallAiBackend/seller/products","method":"post","description":"Creates a new product entity for the online marketplace with all required and optional attributes (name, code, main image, seller, status, description). Supports both seller and admin created products. Validates business uniqueness of code/SKU on registration. Returns the full product record as it appears in catalog, including all relational fields for business logic. Only seller or admin may access. Errors raised for duplicate code or missing dependencies.","summary":"Register a new product in the platform (shopping_mall_ai_backend_products).","parameters":[],"requestBody":{"description":"Product business data/attributes for registration.","typeName":"IShoppingMallAiBackendProduct.ICreate"},"responseBody":{"description":"Full details of the registered product upon creation.","typeName":"IShoppingMallAiBackendProduct"},"authorizationRoles":["admin","seller"],"name":"create","authorizationRole":"seller"},{"specification":"Updates the details of an existing product option, including attributes like SKU, description, and status. This operation references the shopping_mall_ai_backend_products table for product parent, but target is shopping_mall_ai_backend_product_options. Required fields are determined by the Update DTO - for example, option_name, status, etc. Ownership must be verified by seller. Updates cannot affect deleted options.","path":"/shoppingMallAiBackend/seller/products/{productId}/productOptions/{productOptionId}","method":"put","description":"Update an existing product option belonging to a product. This operation enforces strict validation and audit-trailing of changes including SKU, option_name, values, extra_price, main_image_uri, and status field per product option.\n\nAuthorization is strictly seller (their own product) or admin. Requires checking for existence of both product and option, and that the option belongs to the referenced product. Soft deletes are supported (cannot update deleted records).\n\nAll modifications are traced in the option's update timestamp. Ownership is strictly enforced for sellers; admins can update any.\n\nThis endpoint is typically paired with GET (read), PATCH (list) and POST (create) operations for product options. Errors include not-found, not-owned, or invalid status transitions.","summary":"Update product option information for an existing product (shopping_mall_ai_backend_product_options table).","parameters":[{"name":"productId","description":"ID of the product this option belongs to","schema":{"type":"string","format":"uuid"}},{"name":"productOptionId","description":"Target option's unique ID to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields of the product option to update","typeName":"IShoppingMallAiBackendProductOption.IUpdate"},"responseBody":{"description":"Updated product option information after modification","typeName":"IShoppingMallAiBackendProductOption"},"authorizationRole":"seller","name":"update"},{"specification":"Updates the details of an existing product option, including attributes like SKU, description, and status. This operation references the shopping_mall_ai_backend_products table for product parent, but target is shopping_mall_ai_backend_product_options. Required fields are determined by the Update DTO - for example, option_name, status, etc. Ownership must be verified by seller. Updates cannot affect deleted options.","path":"/shoppingMallAiBackend/admin/products/{productId}/productOptions/{productOptionId}","method":"put","description":"Update an existing product option belonging to a product. This operation enforces strict validation and audit-trailing of changes including SKU, option_name, values, extra_price, main_image_uri, and status field per product option.\n\nAuthorization is strictly seller (their own product) or admin. Requires checking for existence of both product and option, and that the option belongs to the referenced product. Soft deletes are supported (cannot update deleted records).\n\nAll modifications are traced in the option's update timestamp. Ownership is strictly enforced for sellers; admins can update any.\n\nThis endpoint is typically paired with GET (read), PATCH (list) and POST (create) operations for product options. Errors include not-found, not-owned, or invalid status transitions.","summary":"Update product option information for an existing product (shopping_mall_ai_backend_product_options table).","parameters":[{"name":"productId","description":"ID of the product this option belongs to","schema":{"type":"string","format":"uuid"}},{"name":"productOptionId","description":"Target option's unique ID to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields of the product option to update","typeName":"IShoppingMallAiBackendProductOption.IUpdate"},"responseBody":{"description":"Updated product option information after modification","typeName":"IShoppingMallAiBackendProductOption"},"authorizationRole":"admin","name":"update"},{"specification":"Deletes (hard or soft) a product based on the provided UUID. This operation targets shopping_mall_ai_backend_products, using the productId. Soft-delete is performed if the schema supports it (deleted_at). Sellers may erase their own products; admins can erase any. This does NOT delete related options or mappings, but marks the product as deleted for compliance. Fails if product does not exist or is already deleted.","path":"/shoppingMallAiBackend/seller/products/{productId}","method":"delete","description":"Erases (soft-deletes) a product from the system. Only products not already soft-deleted may be erased. This sets the deleted_at field for the product, preserving its data for audit and rollback.\n\nSellers can only erase their own products; system-level deletion is admin-only. All actions are audited.\n\nErasing a product does not remove or hard-delete its children; options and mappings are preserved for compliance unless separately deleted. Use GETs and PATCH for list/read support. Use with POST (create) and PUT (update) for full lifecycle management.\n\nIf product does not exist or is already deleted, returns appropriate not-found error.","summary":"Soft-delete a product, marking as deleted (shopping_mall_ai_backend_products table).","parameters":[{"name":"productId","description":"The UUID of the product to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"seller","name":"erase"},{"specification":"Deletes (hard or soft) a product based on the provided UUID. This operation targets shopping_mall_ai_backend_products, using the productId. Soft-delete is performed if the schema supports it (deleted_at). Sellers may erase their own products; admins can erase any. This does NOT delete related options or mappings, but marks the product as deleted for compliance. Fails if product does not exist or is already deleted.","path":"/shoppingMallAiBackend/admin/products/{productId}","method":"delete","description":"Erases (soft-deletes) a product from the system. Only products not already soft-deleted may be erased. This sets the deleted_at field for the product, preserving its data for audit and rollback.\n\nSellers can only erase their own products; system-level deletion is admin-only. All actions are audited.\n\nErasing a product does not remove or hard-delete its children; options and mappings are preserved for compliance unless separately deleted. Use GETs and PATCH for list/read support. Use with POST (create) and PUT (update) for full lifecycle management.\n\nIf product does not exist or is already deleted, returns appropriate not-found error.","summary":"Soft-delete a product, marking as deleted (shopping_mall_ai_backend_products table).","parameters":[{"name":"productId","description":"The UUID of the product to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Lists all product options belonging to a specific product with advanced query, filter, and pagination. Uses shopping_mall_ai_backend_product_options as main entity, mapped to productId parent. Returns pageable summary per product option. Used by sellers/admins for management, and customers (if public/visible) for product selection interfaces.","path":"/shoppingMallAiBackend/seller/products/{productId}/productOptions","method":"patch","description":"Retrieves a paginated and filterable list of all options for a given product. Supports advanced search by SKU, status, name, with sorting and pagination per business requirement. Operates on the shopping_mall_ai_backend_product_options table, using productId filter.\n\nSellers see their own product's options; admins see any. Public-facing queries may filter by visible/active status when exposed.\n\nReturned data are optimized for UI use (brief, summary), not full detailed representation. This endpoint is related to GET detail, POST (create), and PUT (update) on individual options.","summary":"List, filter, and paginate all options under a specific product (shopping_mall_ai_backend_product_options).","parameters":[{"name":"productId","description":"The UUID of the parent product whose options are being searched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter/search/ordering options for product options","typeName":"IShoppingMallAiBackendProductOption.IRequest"},"responseBody":{"description":"Paginated, filtered summary of product options for the productId","typeName":"IPageIShoppingMallAiBackendProductOption.ISummary"},"authorizationRole":"seller","name":"search"},{"specification":"Lists all product options belonging to a specific product with advanced query, filter, and pagination. Uses shopping_mall_ai_backend_product_options as main entity, mapped to productId parent. Returns pageable summary per product option. Used by sellers/admins for management, and customers (if public/visible) for product selection interfaces.","path":"/shoppingMallAiBackend/admin/products/{productId}/productOptions","method":"patch","description":"Retrieves a paginated and filterable list of all options for a given product. Supports advanced search by SKU, status, name, with sorting and pagination per business requirement. Operates on the shopping_mall_ai_backend_product_options table, using productId filter.\n\nSellers see their own product's options; admins see any. Public-facing queries may filter by visible/active status when exposed.\n\nReturned data are optimized for UI use (brief, summary), not full detailed representation. This endpoint is related to GET detail, POST (create), and PUT (update) on individual options.","summary":"List, filter, and paginate all options under a specific product (shopping_mall_ai_backend_product_options).","parameters":[{"name":"productId","description":"The UUID of the parent product whose options are being searched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter/search/ordering options for product options","typeName":"IShoppingMallAiBackendProductOption.IRequest"},"responseBody":{"description":"Paginated, filtered summary of product options for the productId","typeName":"IPageIShoppingMallAiBackendProductOption.ISummary"},"authorizationRole":"admin","name":"search"},{"specification":"Retrieves the full detail for a single product option via its unique ID, checked against parent product. Operates on shopping_mall_ai_backend_product_options table; productId is used for referential/security check. Returns all business-relevant fields for use in form display or admin audit. Used by sellers/managers for own products and by admin for audit.","path":"/shoppingMallAiBackend/seller/products/{productId}/productOptions/{productOptionId}","method":"get","description":"Returns the complete details of a specified product option, confirming it belongs to the referenced product. Uses shopping_mall_ai_backend_product_options for returned entity and validates referential integrity.\n\nAuthorization applies as for list/modify; only visible/owned for sellers, and unrestricted for admins. Typical use in product editing UI, or for auditing configuration. Returns all fields required for management and submission.","summary":"Read all details of a specified product option (shopping_mall_ai_backend_product_options table).","parameters":[{"name":"productId","description":"The parent product UUID for security and referential check","schema":{"type":"string","format":"uuid"}},{"name":"productOptionId","description":"Target option ID to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All properties for the queried product option","typeName":"IShoppingMallAiBackendProductOption"},"authorizationRole":"seller","name":"at"},{"specification":"Retrieves the full detail for a single product option via its unique ID, checked against parent product. Operates on shopping_mall_ai_backend_product_options table; productId is used for referential/security check. Returns all business-relevant fields for use in form display or admin audit. Used by sellers/managers for own products and by admin for audit.","path":"/shoppingMallAiBackend/admin/products/{productId}/productOptions/{productOptionId}","method":"get","description":"Returns the complete details of a specified product option, confirming it belongs to the referenced product. Uses shopping_mall_ai_backend_product_options for returned entity and validates referential integrity.\n\nAuthorization applies as for list/modify; only visible/owned for sellers, and unrestricted for admins. Typical use in product editing UI, or for auditing configuration. Returns all fields required for management and submission.","summary":"Read all details of a specified product option (shopping_mall_ai_backend_product_options table).","parameters":[{"name":"productId","description":"The parent product UUID for security and referential check","schema":{"type":"string","format":"uuid"}},{"name":"productOptionId","description":"Target option ID to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All properties for the queried product option","typeName":"IShoppingMallAiBackendProductOption"},"authorizationRole":"admin","name":"at"},{"specification":"Creates a new product option for an existing product. Inserts into shopping_mall_ai_backend_product_options with required/optional fields per business logic (sku, option_name, etc). All referential fields validated against existing product. Ownership/permission strictly enforced by role (sellers must own). Fails if referenced product does not exist or is deleted.","path":"/shoppingMallAiBackend/seller/products/{productId}/productOptions","method":"post","description":"Creates a new product option associated with the given productId, populating fields such as SKU, option_name, option_values, main_image_uri, status, etc. Only owners (sellers) or admins may create. Referential integrity checked thoroughly.\n\nAll submissions are validated, required fields based on schema and business rules; errors returned for constraint failure or non-existent parent product.","summary":"Add a new option to a specific product (shopping_mall_ai_backend_product_options table).","parameters":[{"name":"productId","description":"ID of product for the new option reference","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for the new product option creation","typeName":"IShoppingMallAiBackendProductOption.ICreate"},"responseBody":{"description":"Newly created product option including DB identity attributes","typeName":"IShoppingMallAiBackendProductOption"},"authorizationRole":"seller","name":"create"},{"specification":"Creates a new product option for an existing product. Inserts into shopping_mall_ai_backend_product_options with required/optional fields per business logic (sku, option_name, etc). All referential fields validated against existing product. Ownership/permission strictly enforced by role (sellers must own). Fails if referenced product does not exist or is deleted.","path":"/shoppingMallAiBackend/admin/products/{productId}/productOptions","method":"post","description":"Creates a new product option associated with the given productId, populating fields such as SKU, option_name, option_values, main_image_uri, status, etc. Only owners (sellers) or admins may create. Referential integrity checked thoroughly.\n\nAll submissions are validated, required fields based on schema and business rules; errors returned for constraint failure or non-existent parent product.","summary":"Add a new option to a specific product (shopping_mall_ai_backend_product_options table).","parameters":[{"name":"productId","description":"ID of product for the new option reference","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for the new product option creation","typeName":"IShoppingMallAiBackendProductOption.ICreate"},"responseBody":{"description":"Newly created product option including DB identity attributes","typeName":"IShoppingMallAiBackendProductOption"},"authorizationRole":"admin","name":"create"},{"specification":"Lists (with pagination, filters, search) all product option stocks for a given option. Operates on shopping_mall_ai_backend_product_option_stocks table, parented to productOptionId. Returns summaries of stock records for management/monitoring. Only sellers (owners) and admins may access for stock management purposes.","path":"/shoppingMallAiBackend/seller/productOptions/{productOptionId}/productOptionStocks","method":"patch","description":"Returns a paginated and filtered list of stock records for a product option. Useful for managing inventory across warehouse locations, stock types, etc. Based on shopping_mall_ai_backend_product_option_stocks. Use filters/search according to schema for warehouse location, status, and so forth.\n\nRelated endpoints: get (detail), post (insert), put (update), delete (erase) individual stocks. Data useful for both automated integration and manual management.","summary":"Search and list stock records for a given product option (shopping_mall_ai_backend_product_option_stocks).","parameters":[{"name":"productOptionId","description":"ID of product option whose stocks are to be listed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Searching, filtering, and page/sort context for stocks","typeName":"IShoppingMallAiBackendProductOptionStock.IRequest"},"responseBody":{"description":"Page of summary rows describing all found product option stocks","typeName":"IPageIShoppingMallAiBackendProductOptionStock.ISummary"},"authorizationRole":"seller","name":"search"},{"specification":"Lists (with pagination, filters, search) all product option stocks for a given option. Operates on shopping_mall_ai_backend_product_option_stocks table, parented to productOptionId. Returns summaries of stock records for management/monitoring. Only sellers (owners) and admins may access for stock management purposes.","path":"/shoppingMallAiBackend/admin/productOptions/{productOptionId}/productOptionStocks","method":"patch","description":"Returns a paginated and filtered list of stock records for a product option. Useful for managing inventory across warehouse locations, stock types, etc. Based on shopping_mall_ai_backend_product_option_stocks. Use filters/search according to schema for warehouse location, status, and so forth.\n\nRelated endpoints: get (detail), post (insert), put (update), delete (erase) individual stocks. Data useful for both automated integration and manual management.","summary":"Search and list stock records for a given product option (shopping_mall_ai_backend_product_option_stocks).","parameters":[{"name":"productOptionId","description":"ID of product option whose stocks are to be listed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Searching, filtering, and page/sort context for stocks","typeName":"IShoppingMallAiBackendProductOptionStock.IRequest"},"responseBody":{"description":"Page of summary rows describing all found product option stocks","typeName":"IPageIShoppingMallAiBackendProductOptionStock.ISummary"},"authorizationRole":"admin","name":"search"},{"specification":"Retrieves the full set of properties for a single product option stock, using shopping_mall_ai_backend_product_option_stocks as backing entity/table, referenced by productOptionId and productOptionStockId. Used for detail management in inventory UIs, or admin audits. Strict referential/ownership enforcement. Returns all stock info fields for business and compliance.","path":"/shoppingMallAiBackend/seller/productOptions/{productOptionId}/productOptionStocks/{productOptionStockId}","method":"get","description":"Returns a single product option stock's full field set, checking that it belongs to the provided productOptionId. Uses shopping_mall_ai_backend_product_option_stocks as data source. Role-based access enforced.\n\nUse in conjunction with PATCH listing and regular CRUD to provide a full stock management cycle. Returns all fields needed for advanced business logic.","summary":"View all fields for a specific product option stock item (shopping_mall_ai_backend_product_option_stocks table).","parameters":[{"name":"productOptionId","description":"Product option's unique ID (parent for stock)","schema":{"type":"string","format":"uuid"}},{"name":"productOptionStockId","description":"Stock record ID to retrieve in detail","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the stock item, as stored","typeName":"IShoppingMallAiBackendProductOptionStock"},"authorizationRole":"seller","name":"at"},{"specification":"Retrieves the full set of properties for a single product option stock, using shopping_mall_ai_backend_product_option_stocks as backing entity/table, referenced by productOptionId and productOptionStockId. Used for detail management in inventory UIs, or admin audits. Strict referential/ownership enforcement. Returns all stock info fields for business and compliance.","path":"/shoppingMallAiBackend/admin/productOptions/{productOptionId}/productOptionStocks/{productOptionStockId}","method":"get","description":"Returns a single product option stock's full field set, checking that it belongs to the provided productOptionId. Uses shopping_mall_ai_backend_product_option_stocks as data source. Role-based access enforced.\n\nUse in conjunction with PATCH listing and regular CRUD to provide a full stock management cycle. Returns all fields needed for advanced business logic.","summary":"View all fields for a specific product option stock item (shopping_mall_ai_backend_product_option_stocks table).","parameters":[{"name":"productOptionId","description":"Product option's unique ID (parent for stock)","schema":{"type":"string","format":"uuid"}},{"name":"productOptionStockId","description":"Stock record ID to retrieve in detail","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed record of the stock item, as stored","typeName":"IShoppingMallAiBackendProductOptionStock"},"authorizationRole":"admin","name":"at"},{"specification":"Inserts (creates) a new product option stock record for a product option. Uses shopping_mall_ai_backend_product_option_stocks as entity, parented by productOptionId. Ownership must be enforced. All creations validated against business constraints (unique per option, required fields, etc).","path":"/shoppingMallAiBackend/seller/productOptions/{productOptionId}/productOptionStocks","method":"post","description":"Creates a single new product option stock record, including required fields like stock_count, status, and any business constraints such as unique product_option_id per stock. All inserts validated for referential integrity and uniqueness.\n\nFailure to find parent (option), or duplicate/block violation, returns error. Use in conjunction with PATCH listing and GET for management.","summary":"Create a new stock entry for a product option (shopping_mall_ai_backend_product_option_stocks).","parameters":[{"name":"productOptionId","description":"The parent product option for which stock will be added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All required fields for new stock record","typeName":"IShoppingMallAiBackendProductOptionStock.ICreate"},"responseBody":{"description":"Record of created stock row with ID and fields","typeName":"IShoppingMallAiBackendProductOptionStock"},"authorizationRole":"seller","name":"create"},{"specification":"Inserts (creates) a new product option stock record for a product option. Uses shopping_mall_ai_backend_product_option_stocks as entity, parented by productOptionId. Ownership must be enforced. All creations validated against business constraints (unique per option, required fields, etc).","path":"/shoppingMallAiBackend/admin/productOptions/{productOptionId}/productOptionStocks","method":"post","description":"Creates a single new product option stock record, including required fields like stock_count, status, and any business constraints such as unique product_option_id per stock. All inserts validated for referential integrity and uniqueness.\n\nFailure to find parent (option), or duplicate/block violation, returns error. Use in conjunction with PATCH listing and GET for management.","summary":"Create a new stock entry for a product option (shopping_mall_ai_backend_product_option_stocks).","parameters":[{"name":"productOptionId","description":"The parent product option for which stock will be added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All required fields for new stock record","typeName":"IShoppingMallAiBackendProductOptionStock.ICreate"},"responseBody":{"description":"Record of created stock row with ID and fields","typeName":"IShoppingMallAiBackendProductOptionStock"},"authorizationRole":"admin","name":"create"},{"specification":"Updates a specific product option stock record. Uses shopping_mall_ai_backend_product_option_stocks as main entity, bound to productOptionId. Referential and ownership checks enforce business integrity. Updatable fields defined in Update DTO. Action is audited for compliance.","path":"/shoppingMallAiBackend/seller/productOptions/{productOptionId}/productOptionStocks/{productOptionStockId}","method":"put","description":"Update (partial or full) an existing product option stock, limited to fields in update DTO. Operation references the product option via productOptionId and updates designated fields (such as stock_count, status, warehouse_location, etc.). Requires strict referential and unique constraint checks.\n\nAll stock changes are audit-logged for compliance and inventory control. Only owners (or admin) can change their own option's stocks.","summary":"Modify a specific product option's stock record (shopping_mall_ai_backend_product_option_stocks).","parameters":[{"name":"productOptionId","description":"Target product option (parent for stock update)","schema":{"type":"string","format":"uuid"}},{"name":"productOptionStockId","description":"Stock record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the stock record","typeName":"IShoppingMallAiBackendProductOptionStock.IUpdate"},"responseBody":{"description":"The updated product option stock row as stored in DB","typeName":"IShoppingMallAiBackendProductOptionStock"},"authorizationRole":"seller","name":"update"},{"specification":"Updates a specific product option stock record. Uses shopping_mall_ai_backend_product_option_stocks as main entity, bound to productOptionId. Referential and ownership checks enforce business integrity. Updatable fields defined in Update DTO. Action is audited for compliance.","path":"/shoppingMallAiBackend/admin/productOptions/{productOptionId}/productOptionStocks/{productOptionStockId}","method":"put","description":"Update (partial or full) an existing product option stock, limited to fields in update DTO. Operation references the product option via productOptionId and updates designated fields (such as stock_count, status, warehouse_location, etc.). Requires strict referential and unique constraint checks.\n\nAll stock changes are audit-logged for compliance and inventory control. Only owners (or admin) can change their own option's stocks.","summary":"Modify a specific product option's stock record (shopping_mall_ai_backend_product_option_stocks).","parameters":[{"name":"productOptionId","description":"Target product option (parent for stock update)","schema":{"type":"string","format":"uuid"}},{"name":"productOptionStockId","description":"Stock record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the stock record","typeName":"IShoppingMallAiBackendProductOptionStock.IUpdate"},"responseBody":{"description":"The updated product option stock row as stored in DB","typeName":"IShoppingMallAiBackendProductOptionStock"},"authorizationRole":"admin","name":"update"},{"specification":"Soft/hard deletes a stock record for a product option. Uses shopping_mall_ai_backend_product_option_stocks, referenced by productOptionId for context (parent) and productOptionStockId for specific child target. Records soft deletions for audit. Only owner or admin can erase. Fails on non-existing/deleted stock.","path":"/shoppingMallAiBackend/seller/productOptions/{productOptionId}/productOptionStocks/{productOptionStockId}","method":"delete","description":"Deletes (ideally soft) a product option stock record, logging the action for audit/compliance. All records are expected to preserve past data for legal compliance, so soft deletion with deleted_at is preferred. Referential integrity to product option required.\n\nOnly parent owners (seller) or admin permitted. Fails if reference is invalid or already deleted. Can be used for inventory reduction, error recovery, data purges, etc. Linked with PATCH/GET/POST workflows.","summary":"Delete (soft) a product option stock from inventory (shopping_mall_ai_backend_product_option_stocks table).","parameters":[{"name":"productOptionId","description":"The parent product option ID","schema":{"type":"string","format":"uuid"}},{"name":"productOptionStockId","description":"Target stock ID for deletion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"seller","name":"erase"},{"specification":"Soft/hard deletes a stock record for a product option. Uses shopping_mall_ai_backend_product_option_stocks, referenced by productOptionId for context (parent) and productOptionStockId for specific child target. Records soft deletions for audit. Only owner or admin can erase. Fails on non-existing/deleted stock.","path":"/shoppingMallAiBackend/admin/productOptions/{productOptionId}/productOptionStocks/{productOptionStockId}","method":"delete","description":"Deletes (ideally soft) a product option stock record, logging the action for audit/compliance. All records are expected to preserve past data for legal compliance, so soft deletion with deleted_at is preferred. Referential integrity to product option required.\n\nOnly parent owners (seller) or admin permitted. Fails if reference is invalid or already deleted. Can be used for inventory reduction, error recovery, data purges, etc. Linked with PATCH/GET/POST workflows.","summary":"Delete (soft) a product option stock from inventory (shopping_mall_ai_backend_product_option_stocks table).","parameters":[{"name":"productOptionId","description":"The parent product option ID","schema":{"type":"string","format":"uuid"}},{"name":"productOptionStockId","description":"Target stock ID for deletion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Retrieves a paginated list of all product snapshot records for a given productId. Operates on the shopping_mall_ai_backend_product_snapshots table, supporting complex search, filtering by status, snapshot_type, creation date, or other criteria. Returns full relational context and enables audit and rollback workflows. This endpoint is tied to the Products domain, providing detailed logs of product state changes and facilitating compliance, restoration, and analytics use cases.","path":"/shoppingMallAiBackend/seller/products/{productId}/productSnapshots","method":"patch","description":"Retrieve a filtered, paginated list of product snapshot history records for a specified product. This endpoint exposes an advanced search of all snapshots related to the lifecycle of the given product, using the productId as scope. The operation supports querying by snapshot_code, snapshot_type, name, status, or other business-relevant fields, as well as optional date-range field filters (such as created_at). It is often accessed by sellers for evidence, rollback, or by admins for business/audit compliance. Returned results help reconstruct historic product states for dispute resolution or analysis. Only authenticated sellers (of the product) and admins can access this endpoint. Access control is enforced based on the relationship to the product and role verification per the Prisma schema. Error behaviors include 404 for product not found, and 403 for unauthorized access.","summary":"Search and paginate product snapshot history for a product (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"Unique identifier of the target product for which snapshots are retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination parameters for snapshot records.","typeName":"IShoppingMallAiBackendProductSnapshot.IRequest"},"responseBody":{"description":"Paginated product snapshot data with snapshot metadata and evidence fields.","typeName":"IPageIShoppingMallAiBackendProductSnapshot"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Retrieves a paginated list of all product snapshot records for a given productId. Operates on the shopping_mall_ai_backend_product_snapshots table, supporting complex search, filtering by status, snapshot_type, creation date, or other criteria. Returns full relational context and enables audit and rollback workflows. This endpoint is tied to the Products domain, providing detailed logs of product state changes and facilitating compliance, restoration, and analytics use cases.","path":"/shoppingMallAiBackend/admin/products/{productId}/productSnapshots","method":"patch","description":"Retrieve a filtered, paginated list of product snapshot history records for a specified product. This endpoint exposes an advanced search of all snapshots related to the lifecycle of the given product, using the productId as scope. The operation supports querying by snapshot_code, snapshot_type, name, status, or other business-relevant fields, as well as optional date-range field filters (such as created_at). It is often accessed by sellers for evidence, rollback, or by admins for business/audit compliance. Returned results help reconstruct historic product states for dispute resolution or analysis. Only authenticated sellers (of the product) and admins can access this endpoint. Access control is enforced based on the relationship to the product and role verification per the Prisma schema. Error behaviors include 404 for product not found, and 403 for unauthorized access.","summary":"Search and paginate product snapshot history for a product (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"Unique identifier of the target product for which snapshots are retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination parameters for snapshot records.","typeName":"IShoppingMallAiBackendProductSnapshot.IRequest"},"responseBody":{"description":"Paginated product snapshot data with snapshot metadata and evidence fields.","typeName":"IPageIShoppingMallAiBackendProductSnapshot"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves a specific product snapshot by ID for a given product. Uses the shopping_mall_ai_backend_product_snapshots table and enforces strong access control. Returns all business-critical state for the snapshot, supporting rollback, forensics, and compliance as required for legal, dispute, or analytics workflows.","path":"/shoppingMallAiBackend/seller/products/{productId}/productSnapshots/{productSnapshotId}","method":"get","description":"Retrieve a specific product snapshot entry by its productSnapshotId under a given product. The endpoint returns a fully detailed, immutable record of the product's state at a historic point—intended for audit, legal, evidence, or advanced analytics. Only accessible to product owners (verified sellers) or platform admins. 404 error is returned if either product or snapshot does not exist; 403 if unauthorized. All output fields follow the Prisma schema definition, including evidence breakdown for each change event.","summary":"Get a specific product snapshot for a given product (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"UUID of the product to which the snapshot belongs.","schema":{"type":"string","format":"uuid"}},{"name":"productSnapshotId","description":"UUID of the product snapshot record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete immutable product snapshot record with all fields, for audit and rollback.","typeName":"IShoppingMallAiBackendProductSnapshot"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieves a specific product snapshot by ID for a given product. Uses the shopping_mall_ai_backend_product_snapshots table and enforces strong access control. Returns all business-critical state for the snapshot, supporting rollback, forensics, and compliance as required for legal, dispute, or analytics workflows.","path":"/shoppingMallAiBackend/admin/products/{productId}/productSnapshots/{productSnapshotId}","method":"get","description":"Retrieve a specific product snapshot entry by its productSnapshotId under a given product. The endpoint returns a fully detailed, immutable record of the product's state at a historic point—intended for audit, legal, evidence, or advanced analytics. Only accessible to product owners (verified sellers) or platform admins. 404 error is returned if either product or snapshot does not exist; 403 if unauthorized. All output fields follow the Prisma schema definition, including evidence breakdown for each change event.","summary":"Get a specific product snapshot for a given product (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"UUID of the product to which the snapshot belongs.","schema":{"type":"string","format":"uuid"}},{"name":"productSnapshotId","description":"UUID of the product snapshot record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete immutable product snapshot record with all fields, for audit and rollback.","typeName":"IShoppingMallAiBackendProductSnapshot"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new product snapshot record associated with a given product (shopping_mall_ai_backend_product_snapshots). The snapshot captures the current state or a change event (such as edits, price change, status update) in an append-only fashion for audit, rollback, and evidence. Typically used after major product edits or before republishing. Enforced for compliance and business trace. Linked to rollback and product compliance flows downstream.","path":"/shoppingMallAiBackend/seller/products/{productId}/productSnapshots","method":"post","description":"Create a new immutable product snapshot associated with a given product. Used for forensic, rollback, compliance, or analytical restoration scenarios. Captures the business-relevant fields for the product as of the current change, and persists this as an evidence record in the product's lifecycle. Only sellers who own the product or system admins can create product snapshots. Fails with 400 on invalid data, 404 if product not found, 403 if unauthorized.","summary":"Create a product snapshot record for a product (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"UUID of the product the snapshot is tied to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data necessary to create a new product snapshot entry, including type and evidence fields.","typeName":"IShoppingMallAiBackendProductSnapshot.ICreate"},"responseBody":{"description":"Created product snapshot with all stored fields, for compliance and rollback.","typeName":"IShoppingMallAiBackendProductSnapshot"},"authorizationRoles":["seller","admin"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new product snapshot record associated with a given product (shopping_mall_ai_backend_product_snapshots). The snapshot captures the current state or a change event (such as edits, price change, status update) in an append-only fashion for audit, rollback, and evidence. Typically used after major product edits or before republishing. Enforced for compliance and business trace. Linked to rollback and product compliance flows downstream.","path":"/shoppingMallAiBackend/admin/products/{productId}/productSnapshots","method":"post","description":"Create a new immutable product snapshot associated with a given product. Used for forensic, rollback, compliance, or analytical restoration scenarios. Captures the business-relevant fields for the product as of the current change, and persists this as an evidence record in the product's lifecycle. Only sellers who own the product or system admins can create product snapshots. Fails with 400 on invalid data, 404 if product not found, 403 if unauthorized.","summary":"Create a product snapshot record for a product (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"UUID of the product the snapshot is tied to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data necessary to create a new product snapshot entry, including type and evidence fields.","typeName":"IShoppingMallAiBackendProductSnapshot.ICreate"},"responseBody":{"description":"Created product snapshot with all stored fields, for compliance and rollback.","typeName":"IShoppingMallAiBackendProductSnapshot"},"authorizationRoles":["seller","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update an existing product snapshot by ID for a given product. Modifies specific evidence or context fields (such as name, description, status) for the selected snapshot, but never changes historic event data fields (i.e., immutable evidence). Used rarely; most changes require a new snapshot record. Enforced on shopping_mall_ai_backend_product_snapshots. Only allowed for allowed roles and when update is legal under business rules.","path":"/shoppingMallAiBackend/seller/products/{productId}/productSnapshots/{productSnapshotId}","method":"put","description":"Update (or annotate) metadata fields for a specific product snapshot. Certain evidence fields (like description, status) may be mutable for compliance reporting, but core evidentiary data is retained. Only admins or sellers with legitimate reasons can perform this action. 400 if the update is invalid, 404 if product/snapshot is missing, 403 for insufficient permissions. Designed for very rare business interventions or compliance corrections.","summary":"Update metadata of a specific product snapshot (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"UUID of associated product.","schema":{"type":"string","format":"uuid"}},{"name":"productSnapshotId","description":"UUID of the product snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable metadata fields for the product snapshot (e.g. status, description).","typeName":"IShoppingMallAiBackendProductSnapshot.IUpdate"},"responseBody":{"description":"The updated snapshot record after mutation.","typeName":"IShoppingMallAiBackendProductSnapshot"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"seller"},{"specification":"Update an existing product snapshot by ID for a given product. Modifies specific evidence or context fields (such as name, description, status) for the selected snapshot, but never changes historic event data fields (i.e., immutable evidence). Used rarely; most changes require a new snapshot record. Enforced on shopping_mall_ai_backend_product_snapshots. Only allowed for allowed roles and when update is legal under business rules.","path":"/shoppingMallAiBackend/admin/products/{productId}/productSnapshots/{productSnapshotId}","method":"put","description":"Update (or annotate) metadata fields for a specific product snapshot. Certain evidence fields (like description, status) may be mutable for compliance reporting, but core evidentiary data is retained. Only admins or sellers with legitimate reasons can perform this action. 400 if the update is invalid, 404 if product/snapshot is missing, 403 for insufficient permissions. Designed for very rare business interventions or compliance corrections.","summary":"Update metadata of a specific product snapshot (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"UUID of associated product.","schema":{"type":"string","format":"uuid"}},{"name":"productSnapshotId","description":"UUID of the product snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable metadata fields for the product snapshot (e.g. status, description).","typeName":"IShoppingMallAiBackendProductSnapshot.IUpdate"},"responseBody":{"description":"The updated snapshot record after mutation.","typeName":"IShoppingMallAiBackendProductSnapshot"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes a product snapshot record by its snapshotId for a specified product (shopping_mall_ai_backend_product_snapshots). Performs a soft delete (sets deleted_at) per system policy. Used only by system admins or the product's owner for compliance, rollback, or error correction, always with full audit trail. Hard delete is not supported due to legal requirements.","path":"/shoppingMallAiBackend/seller/products/{productId}/productSnapshots/{productSnapshotId}","method":"delete","description":"Soft-delete a product snapshot record. The snapshot is preserved for evidence but excluded from standard queries. Deleted_at is set per policy, and all actions are tracked in admin/seller audit logs. Only admins or product owners can perform this operation. Returns 404 if not present, 403 if permissions are insufficient.","summary":"Soft delete a product snapshot for a product (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"UUID of the product to which the snapshot belongs.","schema":{"type":"string","format":"uuid"}},{"name":"productSnapshotId","description":"UUID of the snapshot to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes a product snapshot record by its snapshotId for a specified product (shopping_mall_ai_backend_product_snapshots). Performs a soft delete (sets deleted_at) per system policy. Used only by system admins or the product's owner for compliance, rollback, or error correction, always with full audit trail. Hard delete is not supported due to legal requirements.","path":"/shoppingMallAiBackend/admin/products/{productId}/productSnapshots/{productSnapshotId}","method":"delete","description":"Soft-delete a product snapshot record. The snapshot is preserved for evidence but excluded from standard queries. Deleted_at is set per policy, and all actions are tracked in admin/seller audit logs. Only admins or product owners can perform this operation. Returns 404 if not present, 403 if permissions are insufficient.","summary":"Soft delete a product snapshot for a product (shopping_mall_ai_backend_product_snapshots)","parameters":[{"name":"productId","description":"UUID of the product to which the snapshot belongs.","schema":{"type":"string","format":"uuid"}},{"name":"productSnapshotId","description":"UUID of the snapshot to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Searches and filters the mapping between a product and its related categories for a given productId. Operates on the shopping_mall_ai_backend_product_category_map table, returning paginated, filtered mappings with inherited category context. Optimized for sellers updating product taxonomy, admins performing cross-category audits, and business analytics on product classification consistency.","path":"/shoppingMallAiBackend/seller/products/{productId}/productCategoryMap","method":"patch","description":"Retrieve and search the product-category mapping records for a specified product. Supports filter by category_id, primary flag, and any audit/history context as per business needs. Allows sellers and admins to verify, audit, or restructure product taxonomy in the storefront. Returns paginated mapping entities, joined with base category data for strong context, as defined in Prisma schema. Roles are limited to sellers (must own product) and admins, with strict permission enforcement.","summary":"Search and paginate product-category mapping for a product (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"UUID of the product for which category mapping is listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination options for product-category map.","typeName":"IShoppingMallAiBackendProductCategoryMap.IRequest"},"responseBody":{"description":"Paginated list of product-category mappings, with full context for category/classification.","typeName":"IPageIShoppingMallAiBackendProductCategoryMap"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Searches and filters the mapping between a product and its related categories for a given productId. Operates on the shopping_mall_ai_backend_product_category_map table, returning paginated, filtered mappings with inherited category context. Optimized for sellers updating product taxonomy, admins performing cross-category audits, and business analytics on product classification consistency.","path":"/shoppingMallAiBackend/admin/products/{productId}/productCategoryMap","method":"patch","description":"Retrieve and search the product-category mapping records for a specified product. Supports filter by category_id, primary flag, and any audit/history context as per business needs. Allows sellers and admins to verify, audit, or restructure product taxonomy in the storefront. Returns paginated mapping entities, joined with base category data for strong context, as defined in Prisma schema. Roles are limited to sellers (must own product) and admins, with strict permission enforcement.","summary":"Search and paginate product-category mapping for a product (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"UUID of the product for which category mapping is listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination options for product-category map.","typeName":"IShoppingMallAiBackendProductCategoryMap.IRequest"},"responseBody":{"description":"Paginated list of product-category mappings, with full context for category/classification.","typeName":"IPageIShoppingMallAiBackendProductCategoryMap"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a specific record of product-category mapping for a given product and mappingId (productCategoryMapId). Reads the entry from shopping_mall_ai_backend_product_category_map, joining in relevant category context. Used in product taxonomy onboarding, admin audits, or rollback flows.","path":"/shoppingMallAiBackend/seller/products/{productId}/productCategoryMap/{productCategoryMapId}","method":"get","description":"Fetch a single product-productCategoryMap mapping record by composite ID (mappingId) for a product. Delivers all product, mapping, and category context fields as defined in Prisma, for advanced taxonomy and relationship inspection. Permission strictly enforced: only the product's seller or admins can perform this action. 404 if mapping not present, 403 for insufficient privilege. This endpoint is also used for audit, rollback, or evidence restoration.","summary":"Get a specific product-category mapping (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"ID of the referenced product parent.","schema":{"type":"string","format":"uuid"}},{"name":"productCategoryMapId","description":"ID of the productCategoryMap mapping entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product-category mapping with joined category context.","typeName":"IShoppingMallAiBackendProductCategoryMap"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve a specific record of product-category mapping for a given product and mappingId (productCategoryMapId). Reads the entry from shopping_mall_ai_backend_product_category_map, joining in relevant category context. Used in product taxonomy onboarding, admin audits, or rollback flows.","path":"/shoppingMallAiBackend/admin/products/{productId}/productCategoryMap/{productCategoryMapId}","method":"get","description":"Fetch a single product-productCategoryMap mapping record by composite ID (mappingId) for a product. Delivers all product, mapping, and category context fields as defined in Prisma, for advanced taxonomy and relationship inspection. Permission strictly enforced: only the product's seller or admins can perform this action. 404 if mapping not present, 403 for insufficient privilege. This endpoint is also used for audit, rollback, or evidence restoration.","summary":"Get a specific product-category mapping (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"ID of the referenced product parent.","schema":{"type":"string","format":"uuid"}},{"name":"productCategoryMapId","description":"ID of the productCategoryMap mapping entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product-category mapping with joined category context.","typeName":"IShoppingMallAiBackendProductCategoryMap"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new mapping between a product and a category. Operates on shopping_mall_ai_backend_product_category_map. Used for onboarding, restructuring, or correcting product taxonomy/classification, with audit and rollback support. Category context is resolved at creation. Permission strictly enforced to product owners and admins.","path":"/shoppingMallAiBackend/seller/products/{productId}/productCategoryMap","method":"post","description":"Create a new product-category mapping for a product. This operation maps the product under a new or existing category, supporting primary and secondary assignments. Strict validation is performed so that duplicate mappings or illegal parent-child links are disallowed. Audit trail is generated for every creation event. Returns error 400 if duplicate, 404 if product/category are missing, or 403 if not allowed.","summary":"Create a new product-category mapping (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"UUID of the product for which a new mapping is created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation data for product-category mapping, including categoryId, primary flag.","typeName":"IShoppingMallAiBackendProductCategoryMap.ICreate"},"responseBody":{"description":"The created mapping record with all relationship/joined fields.","typeName":"IShoppingMallAiBackendProductCategoryMap"},"authorizationRoles":["seller","admin"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new mapping between a product and a category. Operates on shopping_mall_ai_backend_product_category_map. Used for onboarding, restructuring, or correcting product taxonomy/classification, with audit and rollback support. Category context is resolved at creation. Permission strictly enforced to product owners and admins.","path":"/shoppingMallAiBackend/admin/products/{productId}/productCategoryMap","method":"post","description":"Create a new product-category mapping for a product. This operation maps the product under a new or existing category, supporting primary and secondary assignments. Strict validation is performed so that duplicate mappings or illegal parent-child links are disallowed. Audit trail is generated for every creation event. Returns error 400 if duplicate, 404 if product/category are missing, or 403 if not allowed.","summary":"Create a new product-category mapping (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"UUID of the product for which a new mapping is created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation data for product-category mapping, including categoryId, primary flag.","typeName":"IShoppingMallAiBackendProductCategoryMap.ICreate"},"responseBody":{"description":"The created mapping record with all relationship/joined fields.","typeName":"IShoppingMallAiBackendProductCategoryMap"},"authorizationRoles":["seller","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates a product's category mapping by mappingId for a given product. Operates on shopping_mall_ai_backend_product_category_map. Edits allowed fields: e.g., toggling primary, adjusting mapping notes, correcting wrong assignment. All change events are tracked with full audit and event context. Accessible only by admins or the owning seller (with role verification).","path":"/shoppingMallAiBackend/seller/products/{productId}/productCategoryMap/{productCategoryMapId}","method":"put","description":"Update an existing product-category mapping entry for a product. Fields like the 'primary' flag can be updated, as well as audit notes or linkage corrections. Every change is audit-logged per compliance rules. Permissions strictly enforced (seller, admin). Error 404 if not found, 403 for unauthorized, 400 if update request is invalid.","summary":"Update an existing product-category mapping (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"UUID of the product with which the mapping is associated.","schema":{"type":"string","format":"uuid"}},{"name":"productCategoryMapId","description":"UUID of the productCategoryMap mapping record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the mapping entry (e.g., primary flag).","typeName":"IShoppingMallAiBackendProductCategoryMap.IUpdate"},"responseBody":{"description":"The updated mapping record with all relationship details.","typeName":"IShoppingMallAiBackendProductCategoryMap"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"seller"},{"specification":"Updates a product's category mapping by mappingId for a given product. Operates on shopping_mall_ai_backend_product_category_map. Edits allowed fields: e.g., toggling primary, adjusting mapping notes, correcting wrong assignment. All change events are tracked with full audit and event context. Accessible only by admins or the owning seller (with role verification).","path":"/shoppingMallAiBackend/admin/products/{productId}/productCategoryMap/{productCategoryMapId}","method":"put","description":"Update an existing product-category mapping entry for a product. Fields like the 'primary' flag can be updated, as well as audit notes or linkage corrections. Every change is audit-logged per compliance rules. Permissions strictly enforced (seller, admin). Error 404 if not found, 403 for unauthorized, 400 if update request is invalid.","summary":"Update an existing product-category mapping (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"UUID of the product with which the mapping is associated.","schema":{"type":"string","format":"uuid"}},{"name":"productCategoryMapId","description":"UUID of the productCategoryMap mapping record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the mapping entry (e.g., primary flag).","typeName":"IShoppingMallAiBackendProductCategoryMap.IUpdate"},"responseBody":{"description":"The updated mapping record with all relationship details.","typeName":"IShoppingMallAiBackendProductCategoryMap"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes a mapping between a product and a category (soft delete by setting deleted_at), using the mapping entry's productCategoryMapId for a given product. The endpoint is implemented on shopping_mall_ai_backend_product_category_map. The operation preserves evidence for compliance and anti-fraud. Only accessible by product owner or admin role. All deletes are audit-logged.","path":"/shoppingMallAiBackend/seller/products/{productId}/productCategoryMap/{productCategoryMapId}","method":"delete","description":"Soft-delete (disable) a product-category mapping for a given product and category. Used in the event of classification correction, audit requirement, or system error. Delete actions are soft only (historical evidence is maintained), and only permitted for admins or the owning seller. Returns 404 if mapping is missing, 403 if unauthorized.","summary":"Soft delete a product-category mapping (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"UUID of the product whose category mapping is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"productCategoryMapId","description":"UUID of the mapping record to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes a mapping between a product and a category (soft delete by setting deleted_at), using the mapping entry's productCategoryMapId for a given product. The endpoint is implemented on shopping_mall_ai_backend_product_category_map. The operation preserves evidence for compliance and anti-fraud. Only accessible by product owner or admin role. All deletes are audit-logged.","path":"/shoppingMallAiBackend/admin/products/{productId}/productCategoryMap/{productCategoryMapId}","method":"delete","description":"Soft-delete (disable) a product-category mapping for a given product and category. Used in the event of classification correction, audit requirement, or system error. Delete actions are soft only (historical evidence is maintained), and only permitted for admins or the owning seller. Returns 404 if mapping is missing, 403 if unauthorized.","summary":"Soft delete a product-category mapping (shopping_mall_ai_backend_product_category_map)","parameters":[{"name":"productId","description":"UUID of the product whose category mapping is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"productCategoryMapId","description":"UUID of the mapping record to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Performs paginated search and filtering of all channel mappings for a product. Reads from shopping_mall_ai_backend_product_channel_map. Used by sellers for channel presence verification and sellability audits, and by admins for cross-channel integrity enforcement. Business logic enforces access control to sellers of the product or admins only. Output includes each mapping's status, channel ID, and relationship context.","path":"/shoppingMallAiBackend/seller/products/{productId}/productChannelMap","method":"patch","description":"Retrieve all channel mappings for a product, supporting filtering by channel_id, status, or other business-relevant criteria. Supports deep analysis of channel exposure for each product across the business platform, including evidence for access control and compliance. 403 forbidden if role validation fails. Sellers access only their products; admins see all.","summary":"Search all channel mappings for a product (shopping_mall_ai_backend_product_channel_map)","parameters":[{"name":"productId","description":"UUID of the product whose channel mapping is to be searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination input for product-channel mappings.","typeName":"IShoppingMallAiBackendProductChannelMap.IRequest"},"responseBody":{"description":"Paginated list of channel mapping records for the product, with full relationship fields.","typeName":"IPageIShoppingMallAiBackendProductChannelMap"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Performs paginated search and filtering of all channel mappings for a product. Reads from shopping_mall_ai_backend_product_channel_map. Used by sellers for channel presence verification and sellability audits, and by admins for cross-channel integrity enforcement. Business logic enforces access control to sellers of the product or admins only. Output includes each mapping's status, channel ID, and relationship context.","path":"/shoppingMallAiBackend/admin/products/{productId}/productChannelMap","method":"patch","description":"Retrieve all channel mappings for a product, supporting filtering by channel_id, status, or other business-relevant criteria. Supports deep analysis of channel exposure for each product across the business platform, including evidence for access control and compliance. 403 forbidden if role validation fails. Sellers access only their products; admins see all.","summary":"Search all channel mappings for a product (shopping_mall_ai_backend_product_channel_map)","parameters":[{"name":"productId","description":"UUID of the product whose channel mapping is to be searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination input for product-channel mappings.","typeName":"IShoppingMallAiBackendProductChannelMap.IRequest"},"responseBody":{"description":"Paginated list of channel mapping records for the product, with full relationship fields.","typeName":"IPageIShoppingMallAiBackendProductChannelMap"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetches one product-channel mapping by mappingId for a given product. Joins mapping status, channel context, and compliance history as per the Prisma schema. Useful for granular business channel operations, compliance trace, and analytics. Access is restricted and force-verified per business rules.","path":"/shoppingMallAiBackend/seller/products/{productId}/productChannelMap/{productChannelMapId}","method":"get","description":"Retrieve a specific product-channel map relationship for a product and mapping. Response includes mapping and channel relationship, business status, and all related compliance information. Permission enforcement matches other product sub-entities: only owner, admins. 404 on not found, 403 on forbidden.","summary":"Get a specific channel mapping for a product (shopping_mall_ai_backend_product_channel_map)","parameters":[{"name":"productId","description":"UUID of the target product whose channel mapping is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"productChannelMapId","description":"UUID of the productChannelMap mapping record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product-channel mapping record including all linkage details per schema.","typeName":"IShoppingMallAiBackendProductChannelMap"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Fetches one product-channel mapping by mappingId for a given product. Joins mapping status, channel context, and compliance history as per the Prisma schema. Useful for granular business channel operations, compliance trace, and analytics. Access is restricted and force-verified per business rules.","path":"/shoppingMallAiBackend/admin/products/{productId}/productChannelMap/{productChannelMapId}","method":"get","description":"Retrieve a specific product-channel map relationship for a product and mapping. Response includes mapping and channel relationship, business status, and all related compliance information. Permission enforcement matches other product sub-entities: only owner, admins. 404 on not found, 403 on forbidden.","summary":"Get a specific channel mapping for a product (shopping_mall_ai_backend_product_channel_map)","parameters":[{"name":"productId","description":"UUID of the target product whose channel mapping is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"productChannelMapId","description":"UUID of the productChannelMap mapping record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed product-channel mapping record including all linkage details per schema.","typeName":"IShoppingMallAiBackendProductChannelMap"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new product-channel mapping for a given product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productChannelMap","method":"post","description":"Creates a new channel mapping for an existing product...","summary":"Create a new product-to-channel mapping (shopping_mall_ai_backend_product_channel_map) for a given product.","parameters":[{"name":"productId","description":"Target product's unique identifier for which the channel mapping is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information necessary to create a product-channel mapping: channel id and status.","typeName":"IShoppingMallAiBackendProductChannelMap.ICreate"},"responseBody":{"description":"Details of the created product-channel mapping.","typeName":"IShoppingMallAiBackendProductChannelMap"},"authorizationRoles":["seller","admin"],"name":"createProductChannelMap","authorizationRole":"seller"},{"specification":"Create a new product-channel mapping for a given product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productChannelMap","method":"post","description":"Creates a new channel mapping for an existing product...","summary":"Create a new product-to-channel mapping (shopping_mall_ai_backend_product_channel_map) for a given product.","parameters":[{"name":"productId","description":"Target product's unique identifier for which the channel mapping is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information necessary to create a product-channel mapping: channel id and status.","typeName":"IShoppingMallAiBackendProductChannelMap.ICreate"},"responseBody":{"description":"Details of the created product-channel mapping.","typeName":"IShoppingMallAiBackendProductChannelMap"},"authorizationRoles":["seller","admin"],"name":"createProductChannelMap","authorizationRole":"admin"},{"specification":"Update details of an existing product-channel mapping...","path":"/shoppingMallAiBackend/seller/products/{productId}/productChannelMap/{productChannelMapId}","method":"put","description":"Modifies a mapping between a product and a channel...","summary":"Update an existing product-channel mapping (shopping_mall_ai_backend_product_channel_map) for a product.","parameters":[{"name":"productId","description":"Target product's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"productChannelMapId","description":"Product channel mapping record's unique identifier to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields necessary to update a product-channel mapping record.","typeName":"IShoppingMallAiBackendProductChannelMap.IUpdate"},"responseBody":{"description":"Updated product-channel mapping details.","typeName":"IShoppingMallAiBackendProductChannelMap"},"authorizationRoles":["seller","admin"],"name":"updateProductChannelMap","authorizationRole":"seller"},{"specification":"Update details of an existing product-channel mapping...","path":"/shoppingMallAiBackend/admin/products/{productId}/productChannelMap/{productChannelMapId}","method":"put","description":"Modifies a mapping between a product and a channel...","summary":"Update an existing product-channel mapping (shopping_mall_ai_backend_product_channel_map) for a product.","parameters":[{"name":"productId","description":"Target product's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"productChannelMapId","description":"Product channel mapping record's unique identifier to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields necessary to update a product-channel mapping record.","typeName":"IShoppingMallAiBackendProductChannelMap.IUpdate"},"responseBody":{"description":"Updated product-channel mapping details.","typeName":"IShoppingMallAiBackendProductChannelMap"},"authorizationRoles":["seller","admin"],"name":"updateProductChannelMap","authorizationRole":"admin"},{"specification":"Delete (soft/hard) a product-channel mapping by mapping id...","path":"/shoppingMallAiBackend/seller/products/{productId}/productChannelMap/{productChannelMapId}","method":"delete","description":"Removes a mapping between a product and a specific channel...","summary":"Delete (soft/hard) an existing product-channel mapping for a given product.","parameters":[{"name":"productId","description":"Product's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"productChannelMapId","description":"Product-channel mapping id to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"eraseProductChannelMap","authorizationRole":"seller"},{"specification":"Delete (soft/hard) a product-channel mapping by mapping id...","path":"/shoppingMallAiBackend/admin/products/{productId}/productChannelMap/{productChannelMapId}","method":"delete","description":"Removes a mapping between a product and a specific channel...","summary":"Delete (soft/hard) an existing product-channel mapping for a given product.","parameters":[{"name":"productId","description":"Product's unique identifier.","schema":{"type":"string","format":"uuid"}},{"name":"productChannelMapId","description":"Product-channel mapping id to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"eraseProductChannelMap","authorizationRole":"admin"},{"specification":"Search, filter, and sort tags associated with a specific product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productTags","method":"patch","description":"Retrieves a filtered, paginated, and optionally sorted list of tags attached to a given product...","summary":"Search/filter/sort tags for a product (shopping_mall_ai_backend_product_tags).","parameters":[{"name":"productId","description":"Product id for which to search/manage tags.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for searching/filtering tags on the product, including pagination and query terms.","typeName":"IShoppingMallAiBackendProductTag.IRequest"},"responseBody":{"description":"Paginated tag summary list matching search for product.","typeName":"IPageIShoppingMallAiBackendProductTag.ISummary"},"authorizationRoles":["seller","admin"],"name":"searchProductTags","authorizationRole":"seller"},{"specification":"Search, filter, and sort tags associated with a specific product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productTags","method":"patch","description":"Retrieves a filtered, paginated, and optionally sorted list of tags attached to a given product...","summary":"Search/filter/sort tags for a product (shopping_mall_ai_backend_product_tags).","parameters":[{"name":"productId","description":"Product id for which to search/manage tags.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for searching/filtering tags on the product, including pagination and query terms.","typeName":"IShoppingMallAiBackendProductTag.IRequest"},"responseBody":{"description":"Paginated tag summary list matching search for product.","typeName":"IPageIShoppingMallAiBackendProductTag.ISummary"},"authorizationRoles":["seller","admin"],"name":"searchProductTags","authorizationRole":"admin"},{"specification":"Retrieve the detailed information for a specific tag entry of a product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productTags/{productTagId}","method":"get","description":"Get detailed information of a specific tag associated with a product...","summary":"Get details for a specific product tag.","parameters":[{"name":"productId","description":"Product's uuid.","schema":{"type":"string","format":"uuid"}},{"name":"productTagId","description":"Product tag record id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full tag detail for the product tag.","typeName":"IShoppingMallAiBackendProductTag"},"authorizationRoles":["seller","admin"],"name":"atProductTag","authorizationRole":"seller"},{"specification":"Retrieve the detailed information for a specific tag entry of a product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productTags/{productTagId}","method":"get","description":"Get detailed information of a specific tag associated with a product...","summary":"Get details for a specific product tag.","parameters":[{"name":"productId","description":"Product's uuid.","schema":{"type":"string","format":"uuid"}},{"name":"productTagId","description":"Product tag record id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full tag detail for the product tag.","typeName":"IShoppingMallAiBackendProductTag"},"authorizationRoles":["seller","admin"],"name":"atProductTag","authorizationRole":"admin"},{"specification":"Create a new tag associated with a specific product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productTags","method":"post","description":"Creates a new tag entry for a product...","summary":"Create a tag for a product (shopping_mall_ai_backend_product_tags).","parameters":[{"name":"productId","description":"Product's uuid to which tag is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to create a tag for the given product.","typeName":"IShoppingMallAiBackendProductTag.ICreate"},"responseBody":{"description":"Created product tag details.","typeName":"IShoppingMallAiBackendProductTag"},"authorizationRoles":["seller","admin"],"name":"createProductTag","authorizationRole":"seller"},{"specification":"Create a new tag associated with a specific product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productTags","method":"post","description":"Creates a new tag entry for a product...","summary":"Create a tag for a product (shopping_mall_ai_backend_product_tags).","parameters":[{"name":"productId","description":"Product's uuid to which tag is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to create a tag for the given product.","typeName":"IShoppingMallAiBackendProductTag.ICreate"},"responseBody":{"description":"Created product tag details.","typeName":"IShoppingMallAiBackendProductTag"},"authorizationRoles":["seller","admin"],"name":"createProductTag","authorizationRole":"admin"},{"specification":"Update an existing tag associated with a product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productTags/{productTagId}","method":"put","description":"Update the tag string or other properties for a tag entry associated with a product...","summary":"Update a product tag (shopping_mall_ai_backend_product_tags).","parameters":[{"name":"productId","description":"Product's uuid for which the tag is updated.","schema":{"type":"string","format":"uuid"}},{"name":"productTagId","description":"Tag record id to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating a tag for the product.","typeName":"IShoppingMallAiBackendProductTag.IUpdate"},"responseBody":{"description":"Updated tag details.","typeName":"IShoppingMallAiBackendProductTag"},"authorizationRoles":["seller","admin"],"name":"updateProductTag","authorizationRole":"seller"},{"specification":"Update an existing tag associated with a product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productTags/{productTagId}","method":"put","description":"Update the tag string or other properties for a tag entry associated with a product...","summary":"Update a product tag (shopping_mall_ai_backend_product_tags).","parameters":[{"name":"productId","description":"Product's uuid for which the tag is updated.","schema":{"type":"string","format":"uuid"}},{"name":"productTagId","description":"Tag record id to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating a tag for the product.","typeName":"IShoppingMallAiBackendProductTag.IUpdate"},"responseBody":{"description":"Updated tag details.","typeName":"IShoppingMallAiBackendProductTag"},"authorizationRoles":["seller","admin"],"name":"updateProductTag","authorizationRole":"admin"},{"specification":"Delete (soft/hard) a product tag entry for the given product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productTags/{productTagId}","method":"delete","description":"Removes a tag from a product...","summary":"Delete (soft/hard) a tag from a product.","parameters":[{"name":"productId","description":"Uuid for the product.","schema":{"type":"string","format":"uuid"}},{"name":"productTagId","description":"Uuid for the tag entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"eraseProductTag","authorizationRole":"seller"},{"specification":"Delete (soft/hard) a product tag entry for the given product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productTags/{productTagId}","method":"delete","description":"Removes a tag from a product...","summary":"Delete (soft/hard) a tag from a product.","parameters":[{"name":"productId","description":"Uuid for the product.","schema":{"type":"string","format":"uuid"}},{"name":"productTagId","description":"Uuid for the tag entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"eraseProductTag","authorizationRole":"admin"},{"specification":"Search, filter, and paginate product search keywords for a product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productSearchKeywords","method":"patch","description":"Returns a paginated, filterable list of search keywords assigned to a given product...","summary":"Paginated search/filter for product search keywords (shopping_mall_ai_backend_product_search_keywords).","parameters":[{"name":"productId","description":"Uuid for the product whose keywords are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering/searching parameters for the keyword search.","typeName":"IShoppingMallAiBackendProductSearchKeyword.IRequest"},"responseBody":{"description":"Paginated keyword summary records for UI/API.","typeName":"IPageIShoppingMallAiBackendProductSearchKeyword.ISummary"},"authorizationRoles":["seller","admin"],"name":"searchProductSearchKeywords","authorizationRole":"seller"},{"specification":"Search, filter, and paginate product search keywords for a product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productSearchKeywords","method":"patch","description":"Returns a paginated, filterable list of search keywords assigned to a given product...","summary":"Paginated search/filter for product search keywords (shopping_mall_ai_backend_product_search_keywords).","parameters":[{"name":"productId","description":"Uuid for the product whose keywords are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering/searching parameters for the keyword search.","typeName":"IShoppingMallAiBackendProductSearchKeyword.IRequest"},"responseBody":{"description":"Paginated keyword summary records for UI/API.","typeName":"IPageIShoppingMallAiBackendProductSearchKeyword.ISummary"},"authorizationRoles":["seller","admin"],"name":"searchProductSearchKeywords","authorizationRole":"admin"},{"specification":"Get detailed information for a specific search keyword of a product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productSearchKeywords/{productSearchKeywordId}","method":"get","description":"Returns detailed record for a search keyword entry for the product...","summary":"Get details of a product search keyword entry.","parameters":[{"name":"productId","description":"Product's uuid.","schema":{"type":"string","format":"uuid"}},{"name":"productSearchKeywordId","description":"Search keyword record id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the product search keyword entry.","typeName":"IShoppingMallAiBackendProductSearchKeyword"},"authorizationRoles":["seller","admin"],"name":"atProductSearchKeyword","authorizationRole":"seller"},{"specification":"Get detailed information for a specific search keyword of a product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productSearchKeywords/{productSearchKeywordId}","method":"get","description":"Returns detailed record for a search keyword entry for the product...","summary":"Get details of a product search keyword entry.","parameters":[{"name":"productId","description":"Product's uuid.","schema":{"type":"string","format":"uuid"}},{"name":"productSearchKeywordId","description":"Search keyword record id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the product search keyword entry.","typeName":"IShoppingMallAiBackendProductSearchKeyword"},"authorizationRoles":["seller","admin"],"name":"atProductSearchKeyword","authorizationRole":"admin"},{"specification":"Create new search keyword for a product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productSearchKeywords","method":"post","description":"Creates a new keyword string as a search keyword for the product...","summary":"Create a product search keyword (shopping_mall_ai_backend_product_search_keywords).","parameters":[{"name":"productId","description":"Uuid for the product receiving new keyword.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Keyword creation input for the given product.","typeName":"IShoppingMallAiBackendProductSearchKeyword.ICreate"},"responseBody":{"description":"Created product search keyword record.","typeName":"IShoppingMallAiBackendProductSearchKeyword"},"authorizationRoles":["seller","admin"],"name":"createProductSearchKeyword","authorizationRole":"seller"},{"specification":"Create new search keyword for a product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productSearchKeywords","method":"post","description":"Creates a new keyword string as a search keyword for the product...","summary":"Create a product search keyword (shopping_mall_ai_backend_product_search_keywords).","parameters":[{"name":"productId","description":"Uuid for the product receiving new keyword.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Keyword creation input for the given product.","typeName":"IShoppingMallAiBackendProductSearchKeyword.ICreate"},"responseBody":{"description":"Created product search keyword record.","typeName":"IShoppingMallAiBackendProductSearchKeyword"},"authorizationRoles":["seller","admin"],"name":"createProductSearchKeyword","authorizationRole":"admin"},{"specification":"Update an existing product search keyword string for a product...","path":"/shoppingMallAiBackend/seller/products/{productId}/productSearchKeywords/{productSearchKeywordId}","method":"put","description":"Updates a product search keyword linked to a product...","summary":"Update a product search keyword for a product.","parameters":[{"name":"productId","description":"Uuid of the product in context.","schema":{"type":"string","format":"uuid"}},{"name":"productSearchKeywordId","description":"Record id of the product search keyword to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the product search keyword.","typeName":"IShoppingMallAiBackendProductSearchKeyword.IUpdate"},"responseBody":{"description":"Updated product search keyword record.","typeName":"IShoppingMallAiBackendProductSearchKeyword"},"authorizationRoles":["seller","admin"],"name":"updateProductSearchKeyword","authorizationRole":"seller"},{"specification":"Update an existing product search keyword string for a product...","path":"/shoppingMallAiBackend/admin/products/{productId}/productSearchKeywords/{productSearchKeywordId}","method":"put","description":"Updates a product search keyword linked to a product...","summary":"Update a product search keyword for a product.","parameters":[{"name":"productId","description":"Uuid of the product in context.","schema":{"type":"string","format":"uuid"}},{"name":"productSearchKeywordId","description":"Record id of the product search keyword to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the product search keyword.","typeName":"IShoppingMallAiBackendProductSearchKeyword.IUpdate"},"responseBody":{"description":"Updated product search keyword record.","typeName":"IShoppingMallAiBackendProductSearchKeyword"},"authorizationRoles":["seller","admin"],"name":"updateProductSearchKeyword","authorizationRole":"admin"},{"specification":"Deletes a specific product search keyword belonging to a given product. This operation targets the shopping_mall_ai_backend_product_search_keywords table and removes the relationship between a product and a search keyword based on the IDs provided. Deletion will be permanent, as no soft delete field exists for this mapping. Used primarily by sellers or product managers to refine search results, clean up misleading or outdated search entries, and ensure product discoverability remains relevant. Validation ensures that the product and search keyword exist and are related, and that the requester has appropriate permissions.","path":"/shoppingMallAiBackend/seller/products/{productId}/productSearchKeywords/{productSearchKeywordId}","method":"delete","description":"This operation removes a product search keyword mapping from a product in the shopping mall AI backend. It enforces referential integrity by confirming that the provided productId and productSearchKeywordId represent a valid relationship in the shopping_mall_ai_backend_product_search_keywords table. Only users with seller or admin roles associated with the product can perform this deletion. Upon successful execution, the mapping is deleted permanently without a soft-delete marker. The operation returns no content on success. Related endpoints include the creation and listing of product search keywords for product search optimization. If the mapping does not exist or the user is unauthorized, appropriate error messages will be returned.","summary":"Delete a specific search keyword from a product (shopping_mall_ai_backend_product_search_keywords)","parameters":[{"name":"productId","description":"Unique identifier for the target product","schema":{"type":"string","format":"uuid"}},{"name":"productSearchKeywordId","description":"Unique identifier for the product search keyword to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes a specific product search keyword belonging to a given product. This operation targets the shopping_mall_ai_backend_product_search_keywords table and removes the relationship between a product and a search keyword based on the IDs provided. Deletion will be permanent, as no soft delete field exists for this mapping. Used primarily by sellers or product managers to refine search results, clean up misleading or outdated search entries, and ensure product discoverability remains relevant. Validation ensures that the product and search keyword exist and are related, and that the requester has appropriate permissions.","path":"/shoppingMallAiBackend/admin/products/{productId}/productSearchKeywords/{productSearchKeywordId}","method":"delete","description":"This operation removes a product search keyword mapping from a product in the shopping mall AI backend. It enforces referential integrity by confirming that the provided productId and productSearchKeywordId represent a valid relationship in the shopping_mall_ai_backend_product_search_keywords table. Only users with seller or admin roles associated with the product can perform this deletion. Upon successful execution, the mapping is deleted permanently without a soft-delete marker. The operation returns no content on success. Related endpoints include the creation and listing of product search keywords for product search optimization. If the mapping does not exist or the user is unauthorized, appropriate error messages will be returned.","summary":"Delete a specific search keyword from a product (shopping_mall_ai_backend_product_search_keywords)","parameters":[{"name":"productId","description":"Unique identifier for the target product","schema":{"type":"string","format":"uuid"}},{"name":"productSearchKeywordId","description":"Unique identifier for the product search keyword to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Searches and paginates through all product bundles associated with a specific product in the shopping_mall_ai_backend_product_bundles table. Supports filtering by status, bundle policy, and name for advanced business use cases. Includes sorting and paging controls for large catalogs. Enables product managers and sellers to manage complex offerings like bundled sales, promotions, or AI-driven recommendations. Only authorized sellers for the product or platform admins can access this endpoint.","path":"/shoppingMallAiBackend/seller/products/{productId}/productBundles","method":"patch","description":"Retrieve a paginated, filtered list of product bundles attached to a specific product. This operation allows for advanced search using bundle status, policy, name, and other criteria in conjunction with pagination and sorting options. Security mandates that only the owner seller or an admin can search product bundles for the given product. The endpoint references the shopping_mall_ai_backend_product_bundles table and leverages existing relations to ensure results are only for the specified productId. Response includes summary information for each bundle, aiding in catalog management. This search can be paired with endpoints for creation and modification of bundles for full lifecycle management.","summary":"Search product bundles for a product (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"Unique identifier of the parent product for bundle search","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request filters and pagination for searching product bundles of a product","typeName":"IShoppingMallAiBackendProductBundle.IRequest"},"responseBody":{"description":"Paginated bundle search results for the product","typeName":"IPageIShoppingMallAiBackendProductBundle.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Searches and paginates through all product bundles associated with a specific product in the shopping_mall_ai_backend_product_bundles table. Supports filtering by status, bundle policy, and name for advanced business use cases. Includes sorting and paging controls for large catalogs. Enables product managers and sellers to manage complex offerings like bundled sales, promotions, or AI-driven recommendations. Only authorized sellers for the product or platform admins can access this endpoint.","path":"/shoppingMallAiBackend/admin/products/{productId}/productBundles","method":"patch","description":"Retrieve a paginated, filtered list of product bundles attached to a specific product. This operation allows for advanced search using bundle status, policy, name, and other criteria in conjunction with pagination and sorting options. Security mandates that only the owner seller or an admin can search product bundles for the given product. The endpoint references the shopping_mall_ai_backend_product_bundles table and leverages existing relations to ensure results are only for the specified productId. Response includes summary information for each bundle, aiding in catalog management. This search can be paired with endpoints for creation and modification of bundles for full lifecycle management.","summary":"Search product bundles for a product (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"Unique identifier of the parent product for bundle search","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request filters and pagination for searching product bundles of a product","typeName":"IShoppingMallAiBackendProductBundle.IRequest"},"responseBody":{"description":"Paginated bundle search results for the product","typeName":"IPageIShoppingMallAiBackendProductBundle.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves detailed information about a specific product bundle, identified by productId and productBundleId, from the shopping_mall_ai_backend_product_bundles table. Designed to provide all the necessary data for displaying, auditing, or editing a particular bundle, including relationships to the parent product and bundle-specific configuration fields. Intended for sellers and admins managing complex sales configurations or promotional offerings.","path":"/shoppingMallAiBackend/seller/products/{productId}/productBundles/{productBundleId}","method":"get","description":"Returns all details for a single product bundle using the bundle's unique identifier and the associated productId for validation. Security checks restrict access to the owner seller or admins. The response presents all available fields of the bundle, enabling update, audit, and business display use cases. This endpoint is tightly tied to the lifecycle of managing bundles, and is typically used in conjunction with operations for bundle creation, editing, or audit review. If the product or bundle does not exist or the authorization check fails, clear error messages are returned.","summary":"Get detailed info for a specific product bundle (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"UUID of the product (owner)","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"UUID of the product bundle to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Product bundle details for the given IDs","typeName":"IShoppingMallAiBackendProductBundle"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieves detailed information about a specific product bundle, identified by productId and productBundleId, from the shopping_mall_ai_backend_product_bundles table. Designed to provide all the necessary data for displaying, auditing, or editing a particular bundle, including relationships to the parent product and bundle-specific configuration fields. Intended for sellers and admins managing complex sales configurations or promotional offerings.","path":"/shoppingMallAiBackend/admin/products/{productId}/productBundles/{productBundleId}","method":"get","description":"Returns all details for a single product bundle using the bundle's unique identifier and the associated productId for validation. Security checks restrict access to the owner seller or admins. The response presents all available fields of the bundle, enabling update, audit, and business display use cases. This endpoint is tightly tied to the lifecycle of managing bundles, and is typically used in conjunction with operations for bundle creation, editing, or audit review. If the product or bundle does not exist or the authorization check fails, clear error messages are returned.","summary":"Get detailed info for a specific product bundle (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"UUID of the product (owner)","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"UUID of the product bundle to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Product bundle details for the given IDs","typeName":"IShoppingMallAiBackendProductBundle"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new product bundle associated with a given product in the shopping_mall_ai_backend_product_bundles table. Used by sellers to define new bundled products for marketing, promotions, or multi-product sales. Bundle data is validated for required fields (e.g., main product, name, pricing, business logic applies based on bundle_policy and status). Only the owner seller or admins are entitled to create bundles.","path":"/shoppingMallAiBackend/seller/products/{productId}/productBundles","method":"post","description":"This operation allows sellers or admins to create a new product bundle for a specific product. The request body must provide all required attributes for a bundle, including the product as the main_product_id, descriptive and business fields. Upon success, the API will return the full details of the created bundle, and relationships to the parent product are established. Access is restricted to the product owner seller or platform admins. Proper error responses are generated for missing data, business logic violations (like duplicate codes), or permission errors. Related endpoints include modifying or fetching bundle records for lifecycle management.","summary":"Create a product bundle for a product (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"UUID of the product to associate with the new bundle","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for creating a new product bundle","typeName":"IShoppingMallAiBackendProductBundle.ICreate"},"responseBody":{"description":"Created product bundle details","typeName":"IShoppingMallAiBackendProductBundle"},"authorizationRoles":["seller","admin"],"name":"create","authorizationRole":"seller"},{"specification":"Creates a new product bundle associated with a given product in the shopping_mall_ai_backend_product_bundles table. Used by sellers to define new bundled products for marketing, promotions, or multi-product sales. Bundle data is validated for required fields (e.g., main product, name, pricing, business logic applies based on bundle_policy and status). Only the owner seller or admins are entitled to create bundles.","path":"/shoppingMallAiBackend/admin/products/{productId}/productBundles","method":"post","description":"This operation allows sellers or admins to create a new product bundle for a specific product. The request body must provide all required attributes for a bundle, including the product as the main_product_id, descriptive and business fields. Upon success, the API will return the full details of the created bundle, and relationships to the parent product are established. Access is restricted to the product owner seller or platform admins. Proper error responses are generated for missing data, business logic violations (like duplicate codes), or permission errors. Related endpoints include modifying or fetching bundle records for lifecycle management.","summary":"Create a product bundle for a product (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"UUID of the product to associate with the new bundle","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for creating a new product bundle","typeName":"IShoppingMallAiBackendProductBundle.ICreate"},"responseBody":{"description":"Created product bundle details","typeName":"IShoppingMallAiBackendProductBundle"},"authorizationRoles":["seller","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates a specific product bundle identified by the parent product and bundle ID in the shopping_mall_ai_backend_product_bundles table. Sellers can modify attributes like name, description, bundle pricing, business policy, or status. Relationship between productId and bundleId is validated, and only the owner seller or admins can perform updates. All updates are auditable via timestamps and possibly snapshots for compliance.","path":"/shoppingMallAiBackend/seller/products/{productId}/productBundles/{productBundleId}","method":"put","description":"Update attributes of an existing product bundle for a given product and bundle IDs. Fields that can be updated include name, description, bundle price, status, and business policy. The relationship between product and bundle is strictly validated. Seller or admin roles are enforced for authorization. All modifications are audit-trailed, and failure modes include nonexistent resource, ownership mismatch, or business rule violations. Successful completion returns the updated bundle information. Commonly used together with create and fetch endpoints for bundle lifecycle.","summary":"Update a specific product bundle (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"UUID of the parent product","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"UUID of the product bundle to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update in the product bundle","typeName":"IShoppingMallAiBackendProductBundle.IUpdate"},"responseBody":{"description":"The updated product bundle data","typeName":"IShoppingMallAiBackendProductBundle"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"seller"},{"specification":"Updates a specific product bundle identified by the parent product and bundle ID in the shopping_mall_ai_backend_product_bundles table. Sellers can modify attributes like name, description, bundle pricing, business policy, or status. Relationship between productId and bundleId is validated, and only the owner seller or admins can perform updates. All updates are auditable via timestamps and possibly snapshots for compliance.","path":"/shoppingMallAiBackend/admin/products/{productId}/productBundles/{productBundleId}","method":"put","description":"Update attributes of an existing product bundle for a given product and bundle IDs. Fields that can be updated include name, description, bundle price, status, and business policy. The relationship between product and bundle is strictly validated. Seller or admin roles are enforced for authorization. All modifications are audit-trailed, and failure modes include nonexistent resource, ownership mismatch, or business rule violations. Successful completion returns the updated bundle information. Commonly used together with create and fetch endpoints for bundle lifecycle.","summary":"Update a specific product bundle (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"UUID of the parent product","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"UUID of the product bundle to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update in the product bundle","typeName":"IShoppingMallAiBackendProductBundle.IUpdate"},"responseBody":{"description":"The updated product bundle data","typeName":"IShoppingMallAiBackendProductBundle"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes a specific product bundle by product ID and bundle ID in the shopping_mall_ai_backend_product_bundles table. Removal is handled as a hard delete if no soft deletion exists. The operation is restricted to the owner seller or platform admins with authorization checks on both the product and bundle. Intended primarily for business users to remove obsolete, incorrectly configured, or retired bundles. Related API operations include creation, editing, and audit log retrieval for compliance.","path":"/shoppingMallAiBackend/seller/products/{productId}/productBundles/{productBundleId}","method":"delete","description":"Removes a product bundle for a given product and bundle ID pair from the system. Requests are validated for existence and proper relationship, and only seller users who own the product or admins may perform the deletion. Successful operation results in complete removal of the bundle record as no soft delete exists for this schema. Related operations for full bundle management include editing, searching, and audit logging endpoints.","summary":"Delete a specific product bundle (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"UUID of the owning product","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"UUID of the product bundle to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes a specific product bundle by product ID and bundle ID in the shopping_mall_ai_backend_product_bundles table. Removal is handled as a hard delete if no soft deletion exists. The operation is restricted to the owner seller or platform admins with authorization checks on both the product and bundle. Intended primarily for business users to remove obsolete, incorrectly configured, or retired bundles. Related API operations include creation, editing, and audit log retrieval for compliance.","path":"/shoppingMallAiBackend/admin/products/{productId}/productBundles/{productBundleId}","method":"delete","description":"Removes a product bundle for a given product and bundle ID pair from the system. Requests are validated for existence and proper relationship, and only seller users who own the product or admins may perform the deletion. Successful operation results in complete removal of the bundle record as no soft delete exists for this schema. Related operations for full bundle management include editing, searching, and audit logging endpoints.","summary":"Delete a specific product bundle (shopping_mall_ai_backend_product_bundles)","parameters":[{"name":"productId","description":"UUID of the owning product","schema":{"type":"string","format":"uuid"}},{"name":"productBundleId","description":"UUID of the product bundle to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Searches, filters, and paginates through all product content records (such as images, descriptions, videos, marketing materials) associated with a product, as found in the shopping_mall_ai_backend_product_contents table. Supports filtering on content_type, status, and ordering by content_order. Enables sellers and admins to efficiently manage visual and informational content for products. Response includes summary list of content for UI display or editing. Access requires product owner or admin privileges.","path":"/shoppingMallAiBackend/seller/products/{productId}/productContents","method":"patch","description":"Provides a paginated, filterable search of all product content records linked to a single product. Accepts filters such as content_type or status, page size, and sorting parameters. Only authorized sellers or admins may perform this action. Integration with shopping_mall_ai_backend_product_contents ensures only relevant content is listed. Useful in content auditing, campaign preparation, or managing product media at scale. Returns summary records for display or further bulk editing. Related endpoints cover insertion, editing, and deletion of content records.","summary":"Search product contents of a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"The unique identifier of the product to search contents for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for searching product contents with pagination/sorting","typeName":"IShoppingMallAiBackendProductContent.IRequest"},"responseBody":{"description":"Paginated and filtered content search results for a product","typeName":"IPageIShoppingMallAiBackendProductContent.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Searches, filters, and paginates through all product content records (such as images, descriptions, videos, marketing materials) associated with a product, as found in the shopping_mall_ai_backend_product_contents table. Supports filtering on content_type, status, and ordering by content_order. Enables sellers and admins to efficiently manage visual and informational content for products. Response includes summary list of content for UI display or editing. Access requires product owner or admin privileges.","path":"/shoppingMallAiBackend/admin/products/{productId}/productContents","method":"patch","description":"Provides a paginated, filterable search of all product content records linked to a single product. Accepts filters such as content_type or status, page size, and sorting parameters. Only authorized sellers or admins may perform this action. Integration with shopping_mall_ai_backend_product_contents ensures only relevant content is listed. Useful in content auditing, campaign preparation, or managing product media at scale. Returns summary records for display or further bulk editing. Related endpoints cover insertion, editing, and deletion of content records.","summary":"Search product contents of a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"The unique identifier of the product to search contents for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for searching product contents with pagination/sorting","typeName":"IShoppingMallAiBackendProductContent.IRequest"},"responseBody":{"description":"Paginated and filtered content search results for a product","typeName":"IPageIShoppingMallAiBackendProductContent.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves a single product content resource by its identifier and parent product from the shopping_mall_ai_backend_product_contents table. Intended for detailed display, update, or moderation use cases. Resolves and returns all present fields of the content record, validating parent-child linkage and authorization. Used in admin/seller content governance workflows and content management lifecycles.","path":"/shoppingMallAiBackend/seller/products/{productId}/productContents/{productContentId}","method":"get","description":"Returns the complete detail of a specified product content record, using both product and content IDs for query and validation. Authorization is limited to sellers of the product or admins. This is a detail resource used in editing, preview, or content audit flows. Related endpoints include list/search, insertion, update, and removal of product contents. Errors occur on not found, unauthorized, or relationship violation conditions, all handled gracefully with appropriate descriptions.","summary":"Get a specific product content for a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"UUID of the product the content belongs to","schema":{"type":"string","format":"uuid"}},{"name":"productContentId","description":"UUID of the product content to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full product content data for given IDs","typeName":"IShoppingMallAiBackendProductContent"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieves a single product content resource by its identifier and parent product from the shopping_mall_ai_backend_product_contents table. Intended for detailed display, update, or moderation use cases. Resolves and returns all present fields of the content record, validating parent-child linkage and authorization. Used in admin/seller content governance workflows and content management lifecycles.","path":"/shoppingMallAiBackend/admin/products/{productId}/productContents/{productContentId}","method":"get","description":"Returns the complete detail of a specified product content record, using both product and content IDs for query and validation. Authorization is limited to sellers of the product or admins. This is a detail resource used in editing, preview, or content audit flows. Related endpoints include list/search, insertion, update, and removal of product contents. Errors occur on not found, unauthorized, or relationship violation conditions, all handled gracefully with appropriate descriptions.","summary":"Get a specific product content for a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"UUID of the product the content belongs to","schema":{"type":"string","format":"uuid"}},{"name":"productContentId","description":"UUID of the product content to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full product content data for given IDs","typeName":"IShoppingMallAiBackendProductContent"},"authorizationRoles":["seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Adds a new product content record to shopping_mall_ai_backend_product_contents, associating it to a parent product. Used for uploading images, descriptions, or other content types required for business, marketing, or compliance. Validation covers required content_type, content_uri, display order, status, and description. Only owners or admins can create content. Auditable creation, integrated with content lifecycle management.","path":"/shoppingMallAiBackend/seller/products/{productId}/productContents","method":"post","description":"Allows an authorized seller or admin to create a new product content item for the specified product. Request includes attributes such as content_type (image, document, video), content_uri (storage location), ordering, status, and descriptions. Upon completion, the new content record is associated to the parent product and returned in full detail. Input validation ensures compliance with allowed content types and required data. Related endpoints support editing and removal of content items. Failures involve missing/invalid data, unauthorized user, or parent-child linkage violations.","summary":"Create product content for a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"UUID of the parent product for the new content","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full record for creating new product content","typeName":"IShoppingMallAiBackendProductContent.ICreate"},"responseBody":{"description":"The newly created product content record","typeName":"IShoppingMallAiBackendProductContent"},"authorizationRoles":["seller","admin"],"name":"create","authorizationRole":"seller"},{"specification":"Adds a new product content record to shopping_mall_ai_backend_product_contents, associating it to a parent product. Used for uploading images, descriptions, or other content types required for business, marketing, or compliance. Validation covers required content_type, content_uri, display order, status, and description. Only owners or admins can create content. Auditable creation, integrated with content lifecycle management.","path":"/shoppingMallAiBackend/admin/products/{productId}/productContents","method":"post","description":"Allows an authorized seller or admin to create a new product content item for the specified product. Request includes attributes such as content_type (image, document, video), content_uri (storage location), ordering, status, and descriptions. Upon completion, the new content record is associated to the parent product and returned in full detail. Input validation ensures compliance with allowed content types and required data. Related endpoints support editing and removal of content items. Failures involve missing/invalid data, unauthorized user, or parent-child linkage violations.","summary":"Create product content for a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"UUID of the parent product for the new content","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full record for creating new product content","typeName":"IShoppingMallAiBackendProductContent.ICreate"},"responseBody":{"description":"The newly created product content record","typeName":"IShoppingMallAiBackendProductContent"},"authorizationRoles":["seller","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates a specific product content record based on productId and productContentId, as defined in shopping_mall_ai_backend_product_contents. Editable properties include content_type, content_uri, status, description, and ordering. Only authorized sellers or admins may update content records for products they manage. Validation checks include parent/child linkage and restrict updates to valid fields. This operation is typically performed during content curation, editing, or campaign preparation in e-commerce workflows.","path":"/shoppingMallAiBackend/seller/products/{productId}/productContents/{productContentId}","method":"put","description":"This operation edits attributes of a given product content record for a specific product, such as changing the content type, updating the URI, modifying status, order, or description fields. The parent product and child content relationship is strictly validated. Only seller or admin users with permission can perform updates. Successful response returns the updated content record. Closely linked with operations for creation, listing, audit, and removal. Error handling covers not found and authorization failures.","summary":"Update a specific product content of a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"UUID of the parent product","schema":{"type":"string","format":"uuid"}},{"name":"productContentId","description":"UUID of the product content to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for the product content item","typeName":"IShoppingMallAiBackendProductContent.IUpdate"},"responseBody":{"description":"The updated product content record","typeName":"IShoppingMallAiBackendProductContent"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"seller"},{"specification":"Updates a specific product content record based on productId and productContentId, as defined in shopping_mall_ai_backend_product_contents. Editable properties include content_type, content_uri, status, description, and ordering. Only authorized sellers or admins may update content records for products they manage. Validation checks include parent/child linkage and restrict updates to valid fields. This operation is typically performed during content curation, editing, or campaign preparation in e-commerce workflows.","path":"/shoppingMallAiBackend/admin/products/{productId}/productContents/{productContentId}","method":"put","description":"This operation edits attributes of a given product content record for a specific product, such as changing the content type, updating the URI, modifying status, order, or description fields. The parent product and child content relationship is strictly validated. Only seller or admin users with permission can perform updates. Successful response returns the updated content record. Closely linked with operations for creation, listing, audit, and removal. Error handling covers not found and authorization failures.","summary":"Update a specific product content of a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"UUID of the parent product","schema":{"type":"string","format":"uuid"}},{"name":"productContentId","description":"UUID of the product content to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for the product content item","typeName":"IShoppingMallAiBackendProductContent.IUpdate"},"responseBody":{"description":"The updated product content record","typeName":"IShoppingMallAiBackendProductContent"},"authorizationRoles":["seller","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes a specific product content record, identified by productId and productContentId, from shopping_mall_ai_backend_product_contents. Operations are performed as hard deletes as no soft deletion field is used in practice for this case. Only authorized sellers for the product or admins can delete product contents. Intended to clean up outdated content, remove erroneous uploads, or retire obsolete assets. Audit trail is maintained externally as needed for compliance.","path":"/shoppingMallAiBackend/seller/products/{productId}/productContents/{productContentId}","method":"delete","description":"Removes a product content entry from the system using its ID and the parent product's ID for referencing. Only users granted seller or admin permissions for the product may request deletion. The content is removed permanently. Related endpoints include creation, editing, and searching of product contents. Auditing is handled elsewhere for record-keeping. Any errors for not found or permission issues are managed and communicated clearly to clients.","summary":"Delete a specific product content of a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"UUID of the product to which this content belongs","schema":{"type":"string","format":"uuid"}},{"name":"productContentId","description":"UUID of the product content to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"seller"},{"specification":"Deletes a specific product content record, identified by productId and productContentId, from shopping_mall_ai_backend_product_contents. Operations are performed as hard deletes as no soft deletion field is used in practice for this case. Only authorized sellers for the product or admins can delete product contents. Intended to clean up outdated content, remove erroneous uploads, or retire obsolete assets. Audit trail is maintained externally as needed for compliance.","path":"/shoppingMallAiBackend/admin/products/{productId}/productContents/{productContentId}","method":"delete","description":"Removes a product content entry from the system using its ID and the parent product's ID for referencing. Only users granted seller or admin permissions for the product may request deletion. The content is removed permanently. Related endpoints include creation, editing, and searching of product contents. Auditing is handled elsewhere for record-keeping. Any errors for not found or permission issues are managed and communicated clearly to clients.","summary":"Delete a specific product content of a product (shopping_mall_ai_backend_product_contents)","parameters":[{"name":"productId","description":"UUID of the product to which this content belongs","schema":{"type":"string","format":"uuid"}},{"name":"productContentId","description":"UUID of the product content to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Performs a complex search or paginated listing across customer orders in the shopping_mall_ai_backend_orders table. This endpoint supports advanced filtering (e.g., status, date range, customer, total amount), sorting, and pagination for order records. Designed for customer service, order management teams, and platform admins with business intelligence requirements. It enforces appropriate user role checks and schema relationships for data privacy. Provides metadata and summaries for each result.","path":"/shoppingMallAiBackend/seller/orders","method":"patch","description":"Search and retrieve a list of shopping customer orders with advanced filtering and pagination. This API endpoint supports query on order status, customer, order total, currency, and time window. Designed for use by sellers, admins, and authorized business users who need to monitor, analyze, or process multiple customer orders efficiently. Results include order summaries that enable downstream logic for operations, fulfillment, analytics, or relationship management. Authorization logic restricts data access to users with adequate permissions. Pagination options and ordering are included for efficient large data query. Related endpoints cover order creation, individual order retrieval, and status change.","summary":"Advanced search and paginated order listing (shopping_mall_ai_backend_orders)","parameters":[],"requestBody":{"description":"Search, filter, and paging request for customer orders","typeName":"IShoppingMallAiBackendOrder.IRequest"},"responseBody":{"description":"Paginated results for customer order search","typeName":"IPageIShoppingMallAiBackendOrder.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Performs a complex search or paginated listing across customer orders in the shopping_mall_ai_backend_orders table. This endpoint supports advanced filtering (e.g., status, date range, customer, total amount), sorting, and pagination for order records. Designed for customer service, order management teams, and platform admins with business intelligence requirements. It enforces appropriate user role checks and schema relationships for data privacy. Provides metadata and summaries for each result.","path":"/shoppingMallAiBackend/admin/orders","method":"patch","description":"Search and retrieve a list of shopping customer orders with advanced filtering and pagination. This API endpoint supports query on order status, customer, order total, currency, and time window. Designed for use by sellers, admins, and authorized business users who need to monitor, analyze, or process multiple customer orders efficiently. Results include order summaries that enable downstream logic for operations, fulfillment, analytics, or relationship management. Authorization logic restricts data access to users with adequate permissions. Pagination options and ordering are included for efficient large data query. Related endpoints cover order creation, individual order retrieval, and status change.","summary":"Advanced search and paginated order listing (shopping_mall_ai_backend_orders)","parameters":[],"requestBody":{"description":"Search, filter, and paging request for customer orders","typeName":"IShoppingMallAiBackendOrder.IRequest"},"responseBody":{"description":"Paginated results for customer order search","typeName":"IPageIShoppingMallAiBackendOrder.ISummary"},"authorizationRoles":["seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"This operation retrieves the detailed information for a single order in the system. It is associated with the shopping_mall_ai_backend_orders table in the Prisma schema. The primary purpose is to fetch comprehensive information about an order, including its status, total amount, associated customer, and details of related items and transaction logs for business logic, compliance tracking, and order management.","path":"/shoppingMallAiBackend/customer/orders/{orderId}","method":"get","description":"Fetch the details of a single order by its unique identifier from the shopping mall backend database. The response contains all critical fields of the order such as customer reference, order group, status, total monetary value, currency, audit timestamps, and any associated notes.\n\nThis operation is crucial for order management, post-purchase support, transaction dispute resolution, and compliance with legal evidence tracking. Access control ensures only authorized users can review order details—customers can see their own, sellers see attached product orders, and admins see all.\n\nDependencies include business audit trails and linkage to items, payments, and group tables per the order's relations. If the requested order is not found or if access is unauthorized, standardized error messages are returned.\n\nRelated endpoints: Create, update, erase, and list operations for orders. Errors include not found, forbidden access, or internal server error cases.","summary":"Retrieve details of a single order from the order table.","parameters":[{"name":"orderId","description":"The unique identifier (UUID) for the target order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed response information of the order entity.","typeName":"IShoppingMallAiBackendOrder"},"authorizationRole":"customer","name":"at"},{"specification":"This operation retrieves the detailed information for a single order in the system. It is associated with the shopping_mall_ai_backend_orders table in the Prisma schema. The primary purpose is to fetch comprehensive information about an order, including its status, total amount, associated customer, and details of related items and transaction logs for business logic, compliance tracking, and order management.","path":"/shoppingMallAiBackend/seller/orders/{orderId}","method":"get","description":"Fetch the details of a single order by its unique identifier from the shopping mall backend database. The response contains all critical fields of the order such as customer reference, order group, status, total monetary value, currency, audit timestamps, and any associated notes.\n\nThis operation is crucial for order management, post-purchase support, transaction dispute resolution, and compliance with legal evidence tracking. Access control ensures only authorized users can review order details—customers can see their own, sellers see attached product orders, and admins see all.\n\nDependencies include business audit trails and linkage to items, payments, and group tables per the order's relations. If the requested order is not found or if access is unauthorized, standardized error messages are returned.\n\nRelated endpoints: Create, update, erase, and list operations for orders. Errors include not found, forbidden access, or internal server error cases.","summary":"Retrieve details of a single order from the order table.","parameters":[{"name":"orderId","description":"The unique identifier (UUID) for the target order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed response information of the order entity.","typeName":"IShoppingMallAiBackendOrder"},"authorizationRole":"seller","name":"at"},{"specification":"This operation retrieves the detailed information for a single order in the system. It is associated with the shopping_mall_ai_backend_orders table in the Prisma schema. The primary purpose is to fetch comprehensive information about an order, including its status, total amount, associated customer, and details of related items and transaction logs for business logic, compliance tracking, and order management.","path":"/shoppingMallAiBackend/admin/orders/{orderId}","method":"get","description":"Fetch the details of a single order by its unique identifier from the shopping mall backend database. The response contains all critical fields of the order such as customer reference, order group, status, total monetary value, currency, audit timestamps, and any associated notes.\n\nThis operation is crucial for order management, post-purchase support, transaction dispute resolution, and compliance with legal evidence tracking. Access control ensures only authorized users can review order details—customers can see their own, sellers see attached product orders, and admins see all.\n\nDependencies include business audit trails and linkage to items, payments, and group tables per the order's relations. If the requested order is not found or if access is unauthorized, standardized error messages are returned.\n\nRelated endpoints: Create, update, erase, and list operations for orders. Errors include not found, forbidden access, or internal server error cases.","summary":"Retrieve details of a single order from the order table.","parameters":[{"name":"orderId","description":"The unique identifier (UUID) for the target order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed response information of the order entity.","typeName":"IShoppingMallAiBackendOrder"},"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new order record in the system, based on the provided customer and item details. It is tied to the shopping_mall_ai_backend_orders table in the Prisma schema. The operation validates business rules for stock, payment, customer identity, and permissible product configurations before finalizing an order entry. Upon creation, it also links related items and applies necessary timestamps for audit and compliance.","path":"/shoppingMallAiBackend/customer/orders","method":"post","description":"Create a new order by providing all required information such as the customer, order items, payment currency, and initial status. The request body should reference a properly constructed IShoppingMallAiBackendOrder.ICreate DTO.\n\nSecurity checks ensure the caller is an authenticated customer eligible to create orders, and that order contents, customer references, and currency codes are all valid. Business logic includes verifying product availability, customer eligibility, and initializing audit trail fields.\n\nOrder creation triggers downstream processes such as reservation of inventory and payment authorization. Related errors include validation failures (e.g., invalid fields), insufficient stock, or payment gateway error. Upon success, the created order entity is returned.","summary":"Create a new order in the order table.","parameters":[],"requestBody":{"description":"Order creation information including customer, items, currency, and status.","typeName":"IShoppingMallAiBackendOrder.ICreate"},"responseBody":{"description":"The created order entity with full fields.","typeName":"IShoppingMallAiBackendOrder"},"authorizationRole":"customer","name":"create"},{"specification":"Updates an existing order by its unique identifier. This operation is related to the shopping_mall_ai_backend_orders table in the Prisma schema. It allows modifications to order status, customer notes, or other changeable fields, adhering to restrictions on editable fields and order state transitions. All changes are recorded for audit and compliance with business rules ensuring only permitted updates are processed.","path":"/shoppingMallAiBackend/customer/orders/{orderId}","method":"put","description":"Update order properties for an existing order using its identifier. Only fields permitted by business logic and schema (such as status, note, or custom fields) are updated. Provides full audit trail and verification of actor identity.\n\nThis endpoint is used for workflow changes (e.g., status update from pending to paid, or marking as canceled), and updates are strictly validated. Unauthorized or invalid updates result in standardized error messages. Order modifications are evidenced in history logs and flag potential conflicts or rejected changes when business constraints are violated.","summary":"Update an existing order in the order table.","parameters":[{"name":"orderId","description":"The unique identifier (UUID) of the order to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated order data such as status or notes, following update rules.","typeName":"IShoppingMallAiBackendOrder.IUpdate"},"responseBody":{"description":"The updated order entity including all changes.","typeName":"IShoppingMallAiBackendOrder"},"authorizationRole":"customer","name":"update"},{"specification":"Updates an existing order by its unique identifier. This operation is related to the shopping_mall_ai_backend_orders table in the Prisma schema. It allows modifications to order status, customer notes, or other changeable fields, adhering to restrictions on editable fields and order state transitions. All changes are recorded for audit and compliance with business rules ensuring only permitted updates are processed.","path":"/shoppingMallAiBackend/admin/orders/{orderId}","method":"put","description":"Update order properties for an existing order using its identifier. Only fields permitted by business logic and schema (such as status, note, or custom fields) are updated. Provides full audit trail and verification of actor identity.\n\nThis endpoint is used for workflow changes (e.g., status update from pending to paid, or marking as canceled), and updates are strictly validated. Unauthorized or invalid updates result in standardized error messages. Order modifications are evidenced in history logs and flag potential conflicts or rejected changes when business constraints are violated.","summary":"Update an existing order in the order table.","parameters":[{"name":"orderId","description":"The unique identifier (UUID) of the order to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated order data such as status or notes, following update rules.","typeName":"IShoppingMallAiBackendOrder.IUpdate"},"responseBody":{"description":"The updated order entity including all changes.","typeName":"IShoppingMallAiBackendOrder"},"authorizationRole":"admin","name":"update"},{"specification":"Deletes an order from the system by its unique identifier. This operation is bound to the shopping_mall_ai_backend_orders table in the Prisma schema. It performs a soft delete by setting the deleted_at timestamp if supported by the table, ensuring all regulatory and audit requirements are satisfied and that data remains for compliance purposes. If soft delete isn't supported, a hard remove is performed.","path":"/shoppingMallAiBackend/admin/orders/{orderId}","method":"delete","description":"Erase an existing order from the system, using its UUID to perform a logical (soft) delete. This sets a deletion timestamp, preserving order records for audit, but hides the order from normal search or retrieval.\n\nOnly administrators or authorized customers (who created the order) can perform this operation. All deletions are tracked in event and audit logs per enterprise and legal standards. If the record does not exist or access is denied, an error is returned, avoiding data leakage or tampering by unauthorized roles.","summary":"Delete (soft-erase) an order by its unique ID in the order table.","parameters":[{"name":"orderId","description":"The unique identifier (UUID) of the order to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation provides a paginated, filtered list of order items related to a specific order, based on the shopping_mall_ai_backend_order_items table. It enables advanced search by orderId, productId, or other item attributes for workflow processing, audit, or downstream fulfillment steps.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderItems","method":"patch","description":"Retrieve a filtered, paginated list of items for a given order, facilitating advanced search options such as by product, quantity, price, or business status. Allows query by order context for compliance or fulfillment processing.\n\nPagination, sort, and filter parameters can be specified in the request body (DTO: IShoppingMallAiBackendOrderItem.IRequest). Results include all matching order items. Security checks restrict visibility to customers, sellers, or admins with appropriate privileges.","summary":"List and search order items within an order.","parameters":[{"name":"orderId","description":"The unique identifier (UUID) of the parent order for which items are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complex search and filter parameters matching order item fields.","typeName":"IShoppingMallAiBackendOrderItem.IRequest"},"responseBody":{"description":"A paginated list of order items matching search criteria.","typeName":"IPageIShoppingMallAiBackendOrderItem"},"authorizationRole":"customer","name":"index"},{"specification":"This operation provides a paginated, filtered list of order items related to a specific order, based on the shopping_mall_ai_backend_order_items table. It enables advanced search by orderId, productId, or other item attributes for workflow processing, audit, or downstream fulfillment steps.","path":"/shoppingMallAiBackend/seller/orders/{orderId}/orderItems","method":"patch","description":"Retrieve a filtered, paginated list of items for a given order, facilitating advanced search options such as by product, quantity, price, or business status. Allows query by order context for compliance or fulfillment processing.\n\nPagination, sort, and filter parameters can be specified in the request body (DTO: IShoppingMallAiBackendOrderItem.IRequest). Results include all matching order items. Security checks restrict visibility to customers, sellers, or admins with appropriate privileges.","summary":"List and search order items within an order.","parameters":[{"name":"orderId","description":"The unique identifier (UUID) of the parent order for which items are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complex search and filter parameters matching order item fields.","typeName":"IShoppingMallAiBackendOrderItem.IRequest"},"responseBody":{"description":"A paginated list of order items matching search criteria.","typeName":"IPageIShoppingMallAiBackendOrderItem"},"authorizationRole":"seller","name":"index"},{"specification":"This operation provides a paginated, filtered list of order items related to a specific order, based on the shopping_mall_ai_backend_order_items table. It enables advanced search by orderId, productId, or other item attributes for workflow processing, audit, or downstream fulfillment steps.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderItems","method":"patch","description":"Retrieve a filtered, paginated list of items for a given order, facilitating advanced search options such as by product, quantity, price, or business status. Allows query by order context for compliance or fulfillment processing.\n\nPagination, sort, and filter parameters can be specified in the request body (DTO: IShoppingMallAiBackendOrderItem.IRequest). Results include all matching order items. Security checks restrict visibility to customers, sellers, or admins with appropriate privileges.","summary":"List and search order items within an order.","parameters":[{"name":"orderId","description":"The unique identifier (UUID) of the parent order for which items are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complex search and filter parameters matching order item fields.","typeName":"IShoppingMallAiBackendOrderItem.IRequest"},"responseBody":{"description":"A paginated list of order items matching search criteria.","typeName":"IPageIShoppingMallAiBackendOrderItem"},"authorizationRole":"admin","name":"index"},{"specification":"Fetch a single order item by its unique identifier, associated with a specific order. The source is the shopping_mall_ai_backend_order_items table. Used to retrieve detailed line item data for order management and audit purposes.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderItems/{orderItemId}","method":"get","description":"Retrieve the details of a specific order item by both the parent order's and the item's identifiers. Returns comprehensive information pertaining to the selected item including product reference, snapshot, quantity, price, and audit fields.\n\nThis enables full traceability for review, refund/return processes, product delivery, or dispute resolution. All accesses are audited for security and business compliance. Errors are returned if the item or order context is not found or access is denied.","summary":"Retrieve an order item by its unique identifier within an order.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"Unique identifier (UUID) of the order item to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comprehensive information for the specified order item.","typeName":"IShoppingMallAiBackendOrderItem"},"authorizationRole":"customer","name":"at"},{"specification":"Fetch a single order item by its unique identifier, associated with a specific order. The source is the shopping_mall_ai_backend_order_items table. Used to retrieve detailed line item data for order management and audit purposes.","path":"/shoppingMallAiBackend/seller/orders/{orderId}/orderItems/{orderItemId}","method":"get","description":"Retrieve the details of a specific order item by both the parent order's and the item's identifiers. Returns comprehensive information pertaining to the selected item including product reference, snapshot, quantity, price, and audit fields.\n\nThis enables full traceability for review, refund/return processes, product delivery, or dispute resolution. All accesses are audited for security and business compliance. Errors are returned if the item or order context is not found or access is denied.","summary":"Retrieve an order item by its unique identifier within an order.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"Unique identifier (UUID) of the order item to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comprehensive information for the specified order item.","typeName":"IShoppingMallAiBackendOrderItem"},"authorizationRole":"seller","name":"at"},{"specification":"Fetch a single order item by its unique identifier, associated with a specific order. The source is the shopping_mall_ai_backend_order_items table. Used to retrieve detailed line item data for order management and audit purposes.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderItems/{orderItemId}","method":"get","description":"Retrieve the details of a specific order item by both the parent order's and the item's identifiers. Returns comprehensive information pertaining to the selected item including product reference, snapshot, quantity, price, and audit fields.\n\nThis enables full traceability for review, refund/return processes, product delivery, or dispute resolution. All accesses are audited for security and business compliance. Errors are returned if the item or order context is not found or access is denied.","summary":"Retrieve an order item by its unique identifier within an order.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"Unique identifier (UUID) of the order item to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comprehensive information for the specified order item.","typeName":"IShoppingMallAiBackendOrderItem"},"authorizationRole":"admin","name":"at"},{"specification":"Creates a new order item within a specific order. Tied to the shopping_mall_ai_backend_order_items table. Handles adding product references, quantity, and price, ensuring proper linkage to the parent order and compliance with inventory and business rules.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderItems","method":"post","description":"Add a new item to an order by specifying the parent order ID and all required item details in the request body. Verifies all references, updates audit trails, and maintains business integrity across stock, pricing, and linkage.\n\nThis is essential for workflow processes such as adding new products to a multi-item order before payment and shipment. The result includes all fields of the created order item. If stock is insufficient, product is invalid, or constraints fail, an error occurs. Operations are logged for audit and accountability.","summary":"Create a new order item within a specified order.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the order to which the item will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order item creation info including product, quantity, price, and status.","typeName":"IShoppingMallAiBackendOrderItem.ICreate"},"responseBody":{"description":"Details of the newly created order item.","typeName":"IShoppingMallAiBackendOrderItem"},"authorizationRole":"customer","name":"create"},{"specification":"Creates a new order item within a specific order. Tied to the shopping_mall_ai_backend_order_items table. Handles adding product references, quantity, and price, ensuring proper linkage to the parent order and compliance with inventory and business rules.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderItems","method":"post","description":"Add a new item to an order by specifying the parent order ID and all required item details in the request body. Verifies all references, updates audit trails, and maintains business integrity across stock, pricing, and linkage.\n\nThis is essential for workflow processes such as adding new products to a multi-item order before payment and shipment. The result includes all fields of the created order item. If stock is insufficient, product is invalid, or constraints fail, an error occurs. Operations are logged for audit and accountability.","summary":"Create a new order item within a specified order.","parameters":[{"name":"orderId","description":"Unique identifier (UUID) of the order to which the item will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order item creation info including product, quantity, price, and status.","typeName":"IShoppingMallAiBackendOrderItem.ICreate"},"responseBody":{"description":"Details of the newly created order item.","typeName":"IShoppingMallAiBackendOrderItem"},"authorizationRole":"admin","name":"create"},{"specification":"Updates an order item's fields within a specific order. The source is shopping_mall_ai_backend_order_items in schema. Allows only permitted fields (such as quantity, note, or status) to be updated following validation logic, and ensures full traceability and audit compliance.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderItems/{orderItemId}","method":"put","description":"Modify a specific order item's editable properties inside an order. Permitted changes depend on workflow and business rules (for example, updating quantity or status before shipment). Every change is logged for full traceability, and unauthorized or invalid requests result in errors.\n\nThis operation is commonly used in order management for adjustments, corrections, or administrative actions, ensuring system integrity and compliance. If not found, or access is inappropriate, an error is raised.","summary":"Update an existing order item in a given order.","parameters":[{"name":"orderId","description":"UUID of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data changes for the order item update.","typeName":"IShoppingMallAiBackendOrderItem.IUpdate"},"responseBody":{"description":"Updated order item entity after changes applied.","typeName":"IShoppingMallAiBackendOrderItem"},"authorizationRole":"customer","name":"update"},{"specification":"Updates an order item's fields within a specific order. The source is shopping_mall_ai_backend_order_items in schema. Allows only permitted fields (such as quantity, note, or status) to be updated following validation logic, and ensures full traceability and audit compliance.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderItems/{orderItemId}","method":"put","description":"Modify a specific order item's editable properties inside an order. Permitted changes depend on workflow and business rules (for example, updating quantity or status before shipment). Every change is logged for full traceability, and unauthorized or invalid requests result in errors.\n\nThis operation is commonly used in order management for adjustments, corrections, or administrative actions, ensuring system integrity and compliance. If not found, or access is inappropriate, an error is raised.","summary":"Update an existing order item in a given order.","parameters":[{"name":"orderId","description":"UUID of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data changes for the order item update.","typeName":"IShoppingMallAiBackendOrderItem.IUpdate"},"responseBody":{"description":"Updated order item entity after changes applied.","typeName":"IShoppingMallAiBackendOrderItem"},"authorizationRole":"admin","name":"update"},{"specification":"Deletes an order item from a particular order by performing a soft delete (sets deleted_at) or hard delete if soft delete is unsupported. Operates on the shopping_mall_ai_backend_order_items table. Ensures referential and audit correctness.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderItems/{orderItemId}","method":"delete","description":"Erase a particular item from a given order, identified by parent order and item UUIDs. This operation is logged for traceability and usually performs a soft delete. Ensures that audit trails required for legal and business compliance remain intact.\n\nPermissions restrict the operation to authorized users, typically the order creator or administrators. If the item or order is not found or access constraints fail, an error is issued.","summary":"Delete (soft erase) an order item by ID in a specific order.","parameters":[{"name":"orderId","description":"UUID of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"orderItemId","description":"UUID of the order item to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Returns a paginated list of order groups, supporting advanced search and filtering. Relates to shopping_mall_ai_backend_order_groups and allows business users to find batches by group name, external reference, or period.","path":"/shoppingMallAiBackend/customer/orderGroups","method":"patch","description":"Search and filter through order groups by providing criteria in the request body (DTO: IShoppingMallAiBackendOrderGroup.IRequest). Advanced filters include group name, meta reference, and date ranges, supporting business, partner, and batch processing flows.\n\nThe response contains a paginated set matching the filter parameters. Only users with order group viewing rights can access results. Errors include invalid filters or access denied scenarios. This endpoint improves operational efficiency for admins and sellers with batch or integration needs.","summary":"Advanced list and search order groups with filter, pagination, sorting.","parameters":[],"requestBody":{"description":"Advanced search and list parameters for order groups.","typeName":"IShoppingMallAiBackendOrderGroup.IRequest"},"responseBody":{"description":"Paginated result of order groups matching search criteria.","typeName":"IPageIShoppingMallAiBackendOrderGroup"},"authorizationRole":"customer","name":"index"},{"specification":"Returns a paginated list of order groups, supporting advanced search and filtering. Relates to shopping_mall_ai_backend_order_groups and allows business users to find batches by group name, external reference, or period.","path":"/shoppingMallAiBackend/seller/orderGroups","method":"patch","description":"Search and filter through order groups by providing criteria in the request body (DTO: IShoppingMallAiBackendOrderGroup.IRequest). Advanced filters include group name, meta reference, and date ranges, supporting business, partner, and batch processing flows.\n\nThe response contains a paginated set matching the filter parameters. Only users with order group viewing rights can access results. Errors include invalid filters or access denied scenarios. This endpoint improves operational efficiency for admins and sellers with batch or integration needs.","summary":"Advanced list and search order groups with filter, pagination, sorting.","parameters":[],"requestBody":{"description":"Advanced search and list parameters for order groups.","typeName":"IShoppingMallAiBackendOrderGroup.IRequest"},"responseBody":{"description":"Paginated result of order groups matching search criteria.","typeName":"IPageIShoppingMallAiBackendOrderGroup"},"authorizationRole":"seller","name":"index"},{"specification":"Returns a paginated list of order groups, supporting advanced search and filtering. Relates to shopping_mall_ai_backend_order_groups and allows business users to find batches by group name, external reference, or period.","path":"/shoppingMallAiBackend/admin/orderGroups","method":"patch","description":"Search and filter through order groups by providing criteria in the request body (DTO: IShoppingMallAiBackendOrderGroup.IRequest). Advanced filters include group name, meta reference, and date ranges, supporting business, partner, and batch processing flows.\n\nThe response contains a paginated set matching the filter parameters. Only users with order group viewing rights can access results. Errors include invalid filters or access denied scenarios. This endpoint improves operational efficiency for admins and sellers with batch or integration needs.","summary":"Advanced list and search order groups with filter, pagination, sorting.","parameters":[],"requestBody":{"description":"Advanced search and list parameters for order groups.","typeName":"IShoppingMallAiBackendOrderGroup.IRequest"},"responseBody":{"description":"Paginated result of order groups matching search criteria.","typeName":"IPageIShoppingMallAiBackendOrderGroup"},"authorizationRole":"admin","name":"index"},{"specification":"Retrieves a single order group entity and its details, based on its unique identifier. Connects to shopping_mall_ai_backend_order_groups, supporting operational, compliance, or integration scenarios.","path":"/shoppingMallAiBackend/customer/orderGroups/{orderGroupId}","method":"get","description":"Get the details for an order group by UUID. The operation returns all information required to analyze, manage, or synchronize order batches for business processes, including group-level notes and metadata.\n\nBusiness rules enforce proper access to group details based on user roles. Errors are returned if the group is not found or permission is denied. Activities are logged for security and compliance.","summary":"Retrieve a single order group by ID.","parameters":[{"name":"orderGroupId","description":"Unique identifier (UUID) of the order group to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Order group entity information.","typeName":"IShoppingMallAiBackendOrderGroup"},"authorizationRole":"customer","name":"at"},{"specification":"Retrieves a single order group entity and its details, based on its unique identifier. Connects to shopping_mall_ai_backend_order_groups, supporting operational, compliance, or integration scenarios.","path":"/shoppingMallAiBackend/seller/orderGroups/{orderGroupId}","method":"get","description":"Get the details for an order group by UUID. The operation returns all information required to analyze, manage, or synchronize order batches for business processes, including group-level notes and metadata.\n\nBusiness rules enforce proper access to group details based on user roles. Errors are returned if the group is not found or permission is denied. Activities are logged for security and compliance.","summary":"Retrieve a single order group by ID.","parameters":[{"name":"orderGroupId","description":"Unique identifier (UUID) of the order group to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Order group entity information.","typeName":"IShoppingMallAiBackendOrderGroup"},"authorizationRole":"seller","name":"at"},{"specification":"Retrieves a single order group entity and its details, based on its unique identifier. Connects to shopping_mall_ai_backend_order_groups, supporting operational, compliance, or integration scenarios.","path":"/shoppingMallAiBackend/admin/orderGroups/{orderGroupId}","method":"get","description":"Get the details for an order group by UUID. The operation returns all information required to analyze, manage, or synchronize order batches for business processes, including group-level notes and metadata.\n\nBusiness rules enforce proper access to group details based on user roles. Errors are returned if the group is not found or permission is denied. Activities are logged for security and compliance.","summary":"Retrieve a single order group by ID.","parameters":[{"name":"orderGroupId","description":"Unique identifier (UUID) of the order group to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Order group entity information.","typeName":"IShoppingMallAiBackendOrderGroup"},"authorizationRole":"admin","name":"at"},{"specification":"Creates a new order group (batch management, partner integration) in shopping_mall_ai_backend_order_groups. Driven by the request body's business logic and requirements, validates uniqueness and establishes audit and process metadata. Admin and privileged users can initiate order group creation.","path":"/shoppingMallAiBackend/admin/orderGroups","method":"post","description":"Create an order group by providing all necessary parameters in the request body (DTO: IShoppingMallAiBackendOrderGroup.ICreate). This is used for business batch processes, partner order tracking, or scheduled integrations, linking multiple orders under a group context.\n\nProcess enforces validation logic and privilege checks. On creation, the new group entity is returned, and an audit event is created. Any validation, duplication, or privilege error is reported via structured response.","summary":"Create a new order group (batch process context).","parameters":[],"requestBody":{"description":"Parameters for order group creation based on business requirements.","typeName":"IShoppingMallAiBackendOrderGroup.ICreate"},"responseBody":{"description":"Created order group entity including group name and metadata.","typeName":"IShoppingMallAiBackendOrderGroup"},"authorizationRole":"admin","name":"create"},{"specification":"Update a specific order group record in the shopping mall system. This operation targets the shopping_mall_ai_backend_order_groups table, which represents batch orders or multi-order groupings for advanced order processing such as settlement or integration. Updates are allowed for fields like group_name, external_reference, and other business-related meta_info, ensuring only group-level information is modified. Updates are audited for compliance and business integrity.","path":"/shoppingMallAiBackend/admin/orderGroups/{orderGroupId}","method":"put","description":"This API operation enables modification of a specific order group in the shopping mall backend. It is primarily used by administrator-level users to update business context fields for an order group, such as group name, external references for partner integrations, or internal meta information. The operation enforces compliance with audit and traceability requirements, and any significant changes are logged in the order group's historical trail. The operation verifies the order group exists via the provided orderGroupId (UUID) parameter.\n\nBusiness rules ensure that certain core attributes (such as group_name, external_reference) are subject to validation for data quality, and unauthorized or non-admin modification attempts are rejected. All status and modification timestamps are updated, and only active (not deleted) order groups may be modified.\n\nThis endpoint is related to the batch settlement and multi-order grouping business logic of the platform, and is usually managed through back office interfaces or automated partner/channel integrations. Error conditions include attempts to update non-existent or logically deleted order groups, and field validation failures.","summary":"Update an order group (OrderGroups table) by orderGroupId","parameters":[{"name":"orderGroupId","description":"Target order group's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating the order group","typeName":"IShoppingMallAiBackendOrderGroup.IUpdate"},"responseBody":{"description":"Updated order group record","typeName":"IShoppingMallAiBackendOrderGroup"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Hard-delete (permanently remove) a specific order group from the shopping mall system. This operation deletes the shopping_mall_ai_backend_order_groups record identified by orderGroupId. If the schema supports only hard deletes (no soft delete column), then the record is physically removed. If soft deletion is supported (deleted_at), the operation should mark as deleted instead. This function is key for compliance and order lifecycle integrity.","path":"/shoppingMallAiBackend/admin/orderGroups/{orderGroupId}","method":"delete","description":"Deletes a specified order group. This operation physically removes the record if no 'deleted_at' soft delete column exists, or marks the deletion timestamp if soft delete is implemented in the schema. All related batch orders are handled according to the business rule and deletion cascades. Only administrators are authorized to delete order groups, and all deletes are logged through the audit system for regulatory and evidentiary purposes.\n\nBusiness logic ensures only order groups not already deleted are eligible for deletion. Errors include attempting to delete a group that doesn't exist or is already deleted, or insufficient permissions.\n\nThe operation is related to group order management and compliance reporting, and should be used cautiously in production to avoid loss of critical order batching records.","summary":"Delete (hard or soft) an order group by orderGroupId","parameters":[{"name":"orderGroupId","description":"Unique identifier for the order group to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a paginated history of status changes and workflow steps for a specific order. This operation queries shopping_mall_ai_backend_order_status_histories by orderId. It supports sorting, filtering, and pagination to explore the detailed audit trail and compliance records for order processing, crucial for forensics and customer support.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderStatusHistories","method":"patch","description":"Returns a paginated list of order status history records for the specified order. Every order in the shopping mall backend system has its lifecycle status tracked via status history rows, recording each state change (created, paid, shipped, cancelled, etc.) with actor identification, context/note, and timestamps.\n\nAuthentication is required; admin users can view any order, whereas sellers and customers can access only orders they own or for which they are authorized. Authorization is role-based and scoped according to the actor_type in the order status history. Responses are filtered to ensure only relevant and visible records are shown, and sensitive information is protected according to access permissions.\n\nThe request body supports advanced filtering, sorting, and paging, including time ranges, specific status types, actor filtering, etc. This endpoint is vital for audit, customer service, and compliance investigation workflows.","summary":"Get a paginated list of order status history records for an order (OrderStatusHistories table)","parameters":[{"name":"orderId","description":"Order's unique identifier for which status history is requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and paging filter for status histories","typeName":"IShoppingMallAiBackendOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated list of order status history records","typeName":"IPageIShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin","seller","customer"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a paginated history of status changes and workflow steps for a specific order. This operation queries shopping_mall_ai_backend_order_status_histories by orderId. It supports sorting, filtering, and pagination to explore the detailed audit trail and compliance records for order processing, crucial for forensics and customer support.","path":"/shoppingMallAiBackend/seller/orders/{orderId}/orderStatusHistories","method":"patch","description":"Returns a paginated list of order status history records for the specified order. Every order in the shopping mall backend system has its lifecycle status tracked via status history rows, recording each state change (created, paid, shipped, cancelled, etc.) with actor identification, context/note, and timestamps.\n\nAuthentication is required; admin users can view any order, whereas sellers and customers can access only orders they own or for which they are authorized. Authorization is role-based and scoped according to the actor_type in the order status history. Responses are filtered to ensure only relevant and visible records are shown, and sensitive information is protected according to access permissions.\n\nThe request body supports advanced filtering, sorting, and paging, including time ranges, specific status types, actor filtering, etc. This endpoint is vital for audit, customer service, and compliance investigation workflows.","summary":"Get a paginated list of order status history records for an order (OrderStatusHistories table)","parameters":[{"name":"orderId","description":"Order's unique identifier for which status history is requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and paging filter for status histories","typeName":"IShoppingMallAiBackendOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated list of order status history records","typeName":"IPageIShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin","seller","customer"],"name":"search","authorizationRole":"seller"},{"specification":"Retrieve a paginated history of status changes and workflow steps for a specific order. This operation queries shopping_mall_ai_backend_order_status_histories by orderId. It supports sorting, filtering, and pagination to explore the detailed audit trail and compliance records for order processing, crucial for forensics and customer support.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderStatusHistories","method":"patch","description":"Returns a paginated list of order status history records for the specified order. Every order in the shopping mall backend system has its lifecycle status tracked via status history rows, recording each state change (created, paid, shipped, cancelled, etc.) with actor identification, context/note, and timestamps.\n\nAuthentication is required; admin users can view any order, whereas sellers and customers can access only orders they own or for which they are authorized. Authorization is role-based and scoped according to the actor_type in the order status history. Responses are filtered to ensure only relevant and visible records are shown, and sensitive information is protected according to access permissions.\n\nThe request body supports advanced filtering, sorting, and paging, including time ranges, specific status types, actor filtering, etc. This endpoint is vital for audit, customer service, and compliance investigation workflows.","summary":"Get a paginated list of order status history records for an order (OrderStatusHistories table)","parameters":[{"name":"orderId","description":"Order's unique identifier for which status history is requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and paging filter for status histories","typeName":"IShoppingMallAiBackendOrderStatusHistory.IRequest"},"responseBody":{"description":"Paginated list of order status history records","typeName":"IPageIShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin","seller","customer"],"name":"search","authorizationRole":"customer"},{"specification":"Retrieve details of a specific order status history record by its ID. The API targets a single row in shopping_mall_ai_backend_order_status_histories for a given order based on orderId and orderStatusHistoryId parameters. Used to inspect audit context for a single workflow step on the order.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderStatusHistories/{orderStatusHistoryId}","method":"get","description":"Returns the details of a single order status history event, identified by both order ID and the specific status history record ID. The order status history records provide critical compliance and customer support information, showing exactly when and how a status change occurred, who performed it, and the workflow context for the event.\n\nThis operation enforces strict access controls: customers can only view their orders, sellers only their store's orders, and administrators have global access. If the record does not exist, or the actor lacks permission, an appropriate error is returned.\n\nThe response gives the full history record, including previous_status, new_status, actor_type, event_context, timestamps, and is central for dispute resolution and order lifecycle audits.","summary":"Get a single status history record for an order (OrderStatusHistories table) by orderStatusHistoryId","parameters":[{"name":"orderId","description":"Order identifier for the parent order","schema":{"type":"string","format":"uuid"}},{"name":"orderStatusHistoryId","description":"Unique identifier for the specific order status history record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Order status history record detail","typeName":"IShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin","seller","customer"],"name":"at","authorizationRole":"admin"},{"specification":"Retrieve details of a specific order status history record by its ID. The API targets a single row in shopping_mall_ai_backend_order_status_histories for a given order based on orderId and orderStatusHistoryId parameters. Used to inspect audit context for a single workflow step on the order.","path":"/shoppingMallAiBackend/seller/orders/{orderId}/orderStatusHistories/{orderStatusHistoryId}","method":"get","description":"Returns the details of a single order status history event, identified by both order ID and the specific status history record ID. The order status history records provide critical compliance and customer support information, showing exactly when and how a status change occurred, who performed it, and the workflow context for the event.\n\nThis operation enforces strict access controls: customers can only view their orders, sellers only their store's orders, and administrators have global access. If the record does not exist, or the actor lacks permission, an appropriate error is returned.\n\nThe response gives the full history record, including previous_status, new_status, actor_type, event_context, timestamps, and is central for dispute resolution and order lifecycle audits.","summary":"Get a single status history record for an order (OrderStatusHistories table) by orderStatusHistoryId","parameters":[{"name":"orderId","description":"Order identifier for the parent order","schema":{"type":"string","format":"uuid"}},{"name":"orderStatusHistoryId","description":"Unique identifier for the specific order status history record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Order status history record detail","typeName":"IShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin","seller","customer"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve details of a specific order status history record by its ID. The API targets a single row in shopping_mall_ai_backend_order_status_histories for a given order based on orderId and orderStatusHistoryId parameters. Used to inspect audit context for a single workflow step on the order.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderStatusHistories/{orderStatusHistoryId}","method":"get","description":"Returns the details of a single order status history event, identified by both order ID and the specific status history record ID. The order status history records provide critical compliance and customer support information, showing exactly when and how a status change occurred, who performed it, and the workflow context for the event.\n\nThis operation enforces strict access controls: customers can only view their orders, sellers only their store's orders, and administrators have global access. If the record does not exist, or the actor lacks permission, an appropriate error is returned.\n\nThe response gives the full history record, including previous_status, new_status, actor_type, event_context, timestamps, and is central for dispute resolution and order lifecycle audits.","summary":"Get a single status history record for an order (OrderStatusHistories table) by orderStatusHistoryId","parameters":[{"name":"orderId","description":"Order identifier for the parent order","schema":{"type":"string","format":"uuid"}},{"name":"orderStatusHistoryId","description":"Unique identifier for the specific order status history record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Order status history record detail","typeName":"IShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin","seller","customer"],"name":"at","authorizationRole":"customer"},{"specification":"Create a new status history event for a specific order. This records a workflow state change (status update), actor, context, and timestamp in shopping_mall_ai_backend_order_status_histories. Used only by permitted actors as per business rules on the order, with compliance and audit trail requirements enforced.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderStatusHistories","method":"post","description":"Creates a new order status history record for the specified order. This operation is invoked as part of workflow steps such as changing order state (e.g., moving to paid, shipped, delivered, cancelled, etc.), and records the before/after statuses, actor (role/type), and contextual notes.\n\nInput validation ensures status changes follow permitted state flows, matching business logic for order processing. Access is limited: customers may only update their own orders (for allowed status changes), sellers only for their shop's orders, admins can force/change on any order. All changes are recorded for compliance and dispute resolution, and rejection occurs if the status transition is illegal or if actor authorization is insufficient.","summary":"Create a new status history for an order (OrderStatusHistories table)","parameters":[{"name":"orderId","description":"Order ID for which a new status history is being created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for creating a new status history event","typeName":"IShoppingMallAiBackendOrderStatusHistory.ICreate"},"responseBody":{"description":"Created status history record","typeName":"IShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin","seller","customer"],"name":"create","authorizationRole":"admin"},{"specification":"Create a new status history event for a specific order. This records a workflow state change (status update), actor, context, and timestamp in shopping_mall_ai_backend_order_status_histories. Used only by permitted actors as per business rules on the order, with compliance and audit trail requirements enforced.","path":"/shoppingMallAiBackend/seller/orders/{orderId}/orderStatusHistories","method":"post","description":"Creates a new order status history record for the specified order. This operation is invoked as part of workflow steps such as changing order state (e.g., moving to paid, shipped, delivered, cancelled, etc.), and records the before/after statuses, actor (role/type), and contextual notes.\n\nInput validation ensures status changes follow permitted state flows, matching business logic for order processing. Access is limited: customers may only update their own orders (for allowed status changes), sellers only for their shop's orders, admins can force/change on any order. All changes are recorded for compliance and dispute resolution, and rejection occurs if the status transition is illegal or if actor authorization is insufficient.","summary":"Create a new status history for an order (OrderStatusHistories table)","parameters":[{"name":"orderId","description":"Order ID for which a new status history is being created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for creating a new status history event","typeName":"IShoppingMallAiBackendOrderStatusHistory.ICreate"},"responseBody":{"description":"Created status history record","typeName":"IShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin","seller","customer"],"name":"create","authorizationRole":"seller"},{"specification":"Create a new status history event for a specific order. This records a workflow state change (status update), actor, context, and timestamp in shopping_mall_ai_backend_order_status_histories. Used only by permitted actors as per business rules on the order, with compliance and audit trail requirements enforced.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderStatusHistories","method":"post","description":"Creates a new order status history record for the specified order. This operation is invoked as part of workflow steps such as changing order state (e.g., moving to paid, shipped, delivered, cancelled, etc.), and records the before/after statuses, actor (role/type), and contextual notes.\n\nInput validation ensures status changes follow permitted state flows, matching business logic for order processing. Access is limited: customers may only update their own orders (for allowed status changes), sellers only for their shop's orders, admins can force/change on any order. All changes are recorded for compliance and dispute resolution, and rejection occurs if the status transition is illegal or if actor authorization is insufficient.","summary":"Create a new status history for an order (OrderStatusHistories table)","parameters":[{"name":"orderId","description":"Order ID for which a new status history is being created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for creating a new status history event","typeName":"IShoppingMallAiBackendOrderStatusHistory.ICreate"},"responseBody":{"description":"Created status history record","typeName":"IShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin","seller","customer"],"name":"create","authorizationRole":"customer"},{"specification":"Update a specific order status history record for a given order and orderStatusHistoryId. This targets shopping_mall_ai_backend_order_status_histories and is subject to audit and compliance restrictions. Only legal transitions/history updates allowed. Edit capability is highly restricted.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderStatusHistories/{orderStatusHistoryId}","method":"put","description":"Updates an existing order status history record, by order and record ID. This operation is normally restricted to administrators and selected business actors, since order status histories are part of the immutable audit/compliance trail. However, specific business logic may allow edits (e.g., correcting misattributed actors, adding missing context, etc.). All changes are logged as secondary events for legal evidence. Editing a status history typically requires admin-level permission or higher-level business justification, and improper transitions, access to deleted or non-existent records are suitably error-handled.","summary":"Update a specific status history record for an order (OrderStatusHistories table)","parameters":[{"name":"orderId","description":"Order identifier of the parent order","schema":{"type":"string","format":"uuid"}},{"name":"orderStatusHistoryId","description":"Target status history record unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the order status history record","typeName":"IShoppingMallAiBackendOrderStatusHistory.IUpdate"},"responseBody":{"description":"Updated status history record","typeName":"IShoppingMallAiBackendOrderStatusHistory"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (hard or soft depending on schema) a status history record for an order. Removes or marks deleted the relevant row in shopping_mall_ai_backend_order_status_histories. This is highly restricted and should be performed only by authorized actors for compliance/audit reasons.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderStatusHistories/{orderStatusHistoryId}","method":"delete","description":"Deletes a status history record on a given order. This physically removes the record if schema lacks soft deletion; otherwise, sets deletion timestamp according to design. All such deletions are audited, must be justified, and normally only performed by administrators for business or compliance policy reasons. Related workflow events may be updated accordingly.","summary":"Delete (hard/soft) a status history record for an order (OrderStatusHistories table)","parameters":[{"name":"orderId","description":"Parent order identifier","schema":{"type":"string","format":"uuid"}},{"name":"orderStatusHistoryId","description":"Order status history record unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Get a paginated list of historical order snapshots for a specific order. Each snapshot records the entire state of the order at a business event (forensic, rollback, compliance). Queries shopping_mall_ai_backend_order_snapshots for the given orderId. Supports advanced pagination and filtering for compliance/reporting.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderSnapshots","method":"patch","description":"Returns a paginated list of order snapshot records for a specific order. Each snapshot represents a complete archival record of the order at a key moment: creation, status change, payment, fulfillment, etc. Snapshots are critical for compliance, fraud investigation, and business evidence. The request body supports comprehensive filters (date range, snapshot reason, etc.) and pagination.\n\nAccess is restricted to authorized actors: administrators, and, under certain conditions, sellers and customers (own orders only). All interactions are logged as part of the compliance evidence chain.","summary":"Get paginated list of order snapshots for an order (OrderSnapshots table)","parameters":[{"name":"orderId","description":"Unique order identifier for parent order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and paging filters for order snapshots","typeName":"IShoppingMallAiBackendOrderSnapshot.IRequest"},"responseBody":{"description":"Paginated results of order snapshots","typeName":"IPageIShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin","seller","customer"],"name":"search","authorizationRole":"admin"},{"specification":"Get a paginated list of historical order snapshots for a specific order. Each snapshot records the entire state of the order at a business event (forensic, rollback, compliance). Queries shopping_mall_ai_backend_order_snapshots for the given orderId. Supports advanced pagination and filtering for compliance/reporting.","path":"/shoppingMallAiBackend/seller/orders/{orderId}/orderSnapshots","method":"patch","description":"Returns a paginated list of order snapshot records for a specific order. Each snapshot represents a complete archival record of the order at a key moment: creation, status change, payment, fulfillment, etc. Snapshots are critical for compliance, fraud investigation, and business evidence. The request body supports comprehensive filters (date range, snapshot reason, etc.) and pagination.\n\nAccess is restricted to authorized actors: administrators, and, under certain conditions, sellers and customers (own orders only). All interactions are logged as part of the compliance evidence chain.","summary":"Get paginated list of order snapshots for an order (OrderSnapshots table)","parameters":[{"name":"orderId","description":"Unique order identifier for parent order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and paging filters for order snapshots","typeName":"IShoppingMallAiBackendOrderSnapshot.IRequest"},"responseBody":{"description":"Paginated results of order snapshots","typeName":"IPageIShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin","seller","customer"],"name":"search","authorizationRole":"seller"},{"specification":"Get a paginated list of historical order snapshots for a specific order. Each snapshot records the entire state of the order at a business event (forensic, rollback, compliance). Queries shopping_mall_ai_backend_order_snapshots for the given orderId. Supports advanced pagination and filtering for compliance/reporting.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderSnapshots","method":"patch","description":"Returns a paginated list of order snapshot records for a specific order. Each snapshot represents a complete archival record of the order at a key moment: creation, status change, payment, fulfillment, etc. Snapshots are critical for compliance, fraud investigation, and business evidence. The request body supports comprehensive filters (date range, snapshot reason, etc.) and pagination.\n\nAccess is restricted to authorized actors: administrators, and, under certain conditions, sellers and customers (own orders only). All interactions are logged as part of the compliance evidence chain.","summary":"Get paginated list of order snapshots for an order (OrderSnapshots table)","parameters":[{"name":"orderId","description":"Unique order identifier for parent order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and paging filters for order snapshots","typeName":"IShoppingMallAiBackendOrderSnapshot.IRequest"},"responseBody":{"description":"Paginated results of order snapshots","typeName":"IPageIShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin","seller","customer"],"name":"search","authorizationRole":"customer"},{"specification":"Get a single order snapshot (full order state at event) by orderId and orderSnapshotId. Accesses shopping_mall_ai_backend_order_snapshots. Used for compliance, rollback, or dispute-evidence inspection.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"get","description":"Fetches the detailed record of a specific order snapshot by parent order ID and snapshot ID. Each snapshot contains a frozen JSON representation of the order for legal and historical purposes. The endpoint inspects complete state at a key event (e.g. order created, paid, shipped, cancelled) for compliance or troubleshooting.\n\nRole-based access is enforced: admins may see all, sellers and customers only for eligible orders. Errors for missing records or access violations are provided. Used in conjunction with audit and forensic workflows.","summary":"Get single order snapshot for an order (OrderSnapshots table) by orderSnapshotId","parameters":[{"name":"orderId","description":"Order identifier (parent)","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"Snapshot record identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single order snapshot with archived state","typeName":"IShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin","seller","customer"],"name":"at","authorizationRole":"admin"},{"specification":"Get a single order snapshot (full order state at event) by orderId and orderSnapshotId. Accesses shopping_mall_ai_backend_order_snapshots. Used for compliance, rollback, or dispute-evidence inspection.","path":"/shoppingMallAiBackend/seller/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"get","description":"Fetches the detailed record of a specific order snapshot by parent order ID and snapshot ID. Each snapshot contains a frozen JSON representation of the order for legal and historical purposes. The endpoint inspects complete state at a key event (e.g. order created, paid, shipped, cancelled) for compliance or troubleshooting.\n\nRole-based access is enforced: admins may see all, sellers and customers only for eligible orders. Errors for missing records or access violations are provided. Used in conjunction with audit and forensic workflows.","summary":"Get single order snapshot for an order (OrderSnapshots table) by orderSnapshotId","parameters":[{"name":"orderId","description":"Order identifier (parent)","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"Snapshot record identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single order snapshot with archived state","typeName":"IShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin","seller","customer"],"name":"at","authorizationRole":"seller"},{"specification":"Get a single order snapshot (full order state at event) by orderId and orderSnapshotId. Accesses shopping_mall_ai_backend_order_snapshots. Used for compliance, rollback, or dispute-evidence inspection.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"get","description":"Fetches the detailed record of a specific order snapshot by parent order ID and snapshot ID. Each snapshot contains a frozen JSON representation of the order for legal and historical purposes. The endpoint inspects complete state at a key event (e.g. order created, paid, shipped, cancelled) for compliance or troubleshooting.\n\nRole-based access is enforced: admins may see all, sellers and customers only for eligible orders. Errors for missing records or access violations are provided. Used in conjunction with audit and forensic workflows.","summary":"Get single order snapshot for an order (OrderSnapshots table) by orderSnapshotId","parameters":[{"name":"orderId","description":"Order identifier (parent)","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"Snapshot record identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single order snapshot with archived state","typeName":"IShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin","seller","customer"],"name":"at","authorizationRole":"customer"},{"specification":"Create and archive a new order snapshot (full order state at event). Inserts a new record in shopping_mall_ai_backend_order_snapshots for evidence, rollback, and compliance. Used following significant order events (status change, fulfillment, etc.). Restricted to valid business actors.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderSnapshots","method":"post","description":"Creates a new full-state order snapshot for a specific order. Normally invoked by system processes or authorized users (admin, system, or order owners) upon certain business events. The snapshot preserves all key order data in a JSON field and associates the moment/reason.\n\nThe request payload must contain all required business context and state data. Creation is restricted by access, and all such actions are thoroughly logged for forensic traceability and rollback validation. Improper attempts are rejected with detailed error codes.","summary":"Create new order snapshot for an order (OrderSnapshots table)","parameters":[{"name":"orderId","description":"Order ID for parent order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order snapshot creation information","typeName":"IShoppingMallAiBackendOrderSnapshot.ICreate"},"responseBody":{"description":"Created order snapshot record","typeName":"IShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin","seller","customer"],"name":"create","authorizationRole":"admin"},{"specification":"Create and archive a new order snapshot (full order state at event). Inserts a new record in shopping_mall_ai_backend_order_snapshots for evidence, rollback, and compliance. Used following significant order events (status change, fulfillment, etc.). Restricted to valid business actors.","path":"/shoppingMallAiBackend/seller/orders/{orderId}/orderSnapshots","method":"post","description":"Creates a new full-state order snapshot for a specific order. Normally invoked by system processes or authorized users (admin, system, or order owners) upon certain business events. The snapshot preserves all key order data in a JSON field and associates the moment/reason.\n\nThe request payload must contain all required business context and state data. Creation is restricted by access, and all such actions are thoroughly logged for forensic traceability and rollback validation. Improper attempts are rejected with detailed error codes.","summary":"Create new order snapshot for an order (OrderSnapshots table)","parameters":[{"name":"orderId","description":"Order ID for parent order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order snapshot creation information","typeName":"IShoppingMallAiBackendOrderSnapshot.ICreate"},"responseBody":{"description":"Created order snapshot record","typeName":"IShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin","seller","customer"],"name":"create","authorizationRole":"seller"},{"specification":"Create and archive a new order snapshot (full order state at event). Inserts a new record in shopping_mall_ai_backend_order_snapshots for evidence, rollback, and compliance. Used following significant order events (status change, fulfillment, etc.). Restricted to valid business actors.","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderSnapshots","method":"post","description":"Creates a new full-state order snapshot for a specific order. Normally invoked by system processes or authorized users (admin, system, or order owners) upon certain business events. The snapshot preserves all key order data in a JSON field and associates the moment/reason.\n\nThe request payload must contain all required business context and state data. Creation is restricted by access, and all such actions are thoroughly logged for forensic traceability and rollback validation. Improper attempts are rejected with detailed error codes.","summary":"Create new order snapshot for an order (OrderSnapshots table)","parameters":[{"name":"orderId","description":"Order ID for parent order","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order snapshot creation information","typeName":"IShoppingMallAiBackendOrderSnapshot.ICreate"},"responseBody":{"description":"Created order snapshot record","typeName":"IShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin","seller","customer"],"name":"create","authorizationRole":"customer"},{"specification":"Update the archived data of an order snapshot record. Targets shopping_mall_ai_backend_order_snapshots by orderId and orderSnapshotId. Normally only allowed for administrators for legal or compliance correction. All changes are audited.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"put","description":"Updates snapshot record for a specific order and snapshot. Editing archived forensic records is only allowed under highly controlled conditions, usually administrator-level permission for legal or business correction reasons. All edits are audited, maintaining a full trace of before/after states and justifications.\n\nThis operation is highly restricted; typical business flows do not edit snapshots. If authorized and justified, such updates may include correction of archived JSON, snapshot reason, etc.","summary":"Update a specific order snapshot for an order (OrderSnapshots table)","parameters":[{"name":"orderId","description":"Order's (parent) unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"Snapshot record identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating order snapshot archive","typeName":"IShoppingMallAiBackendOrderSnapshot.IUpdate"},"responseBody":{"description":"Updated order snapshot record","typeName":"IShoppingMallAiBackendOrderSnapshot"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (hard or soft depending on schema) an order snapshot record. Targets shopping_mall_ai_backend_order_snapshots by orderId and orderSnapshotId. Normally only administrators or compliance actors may perform this operation. Cascades or preserves evidence by business rules.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderSnapshots/{orderSnapshotId}","method":"delete","description":"Deletes an order snapshot archive for a given order (parent) and snapshot (child) ID. Depending on schema design, this is either a hard-delete or a soft-delete via timestamp. This action is only performed by administrators, logged thoroughly, and triggers appropriate compliance or business cascade updates.\n\nErrors include attempts to delete non-existent or already deleted snapshots, or insufficient permission. The operation supports compliance evidence management, business data retention, and rollback workflows.","summary":"Delete (hard/soft) order snapshot for an order (OrderSnapshots table)","parameters":[{"name":"orderId","description":"Order's (parent) unique identifier","schema":{"type":"string","format":"uuid"}},{"name":"orderSnapshotId","description":"Order snapshot record unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation allows users to search, filter, and paginate their shopping cart records. It operates on the shopping_mall_ai_backend_carts table, providing advanced query options based on ownership, status, and other cart metadata. It enables both customers and administrators to retrieve relevant shopping cart data efficiently, supporting personal commerce workflows, operational dashboards, and customer service via PATCH for complex query input.","path":"/shoppingMallAiBackend/customer/carts","method":"patch","description":"Retrieve a paginated and filtered list of shopping cart records for the authenticated user. This endpoint enables customers or system admins to search across their active and historical carts by applying search criteria including status, creation date, or ownership. \n\nSecurity is enforced such that customers may only access their own carts, while administrators with appropriate privileges may search across all carts for audit, support, or operational purposes. The search functionality includes options for partial matches and advanced sorting on cart fields as defined in the Prisma schema, returning associated carts and contextual metadata.\n\nInput validation will ensure that the provided filters and sort options conform to the allowed schema fields. Error handling covers cases including invalid request parameters, permission violations, and system-level failures. This operation may be used in combination with cart detail, item, and checkout operations for advanced e-commerce workflows.","summary":"Search and paginate customer shopping carts.","parameters":[],"requestBody":{"description":"Criteria for searching and filtering carts, including pagination and advanced filtering fields.","typeName":"IShoppingMallAiBackendCart.IRequest"},"responseBody":{"description":"Paginated list of shopping cart records matching the search filters.","typeName":"IPageIShoppingMallAiBackendCart"},"authorizationRole":"customer","name":"search"},{"specification":"This operation allows users to search, filter, and paginate their shopping cart records. It operates on the shopping_mall_ai_backend_carts table, providing advanced query options based on ownership, status, and other cart metadata. It enables both customers and administrators to retrieve relevant shopping cart data efficiently, supporting personal commerce workflows, operational dashboards, and customer service via PATCH for complex query input.","path":"/shoppingMallAiBackend/admin/carts","method":"patch","description":"Retrieve a paginated and filtered list of shopping cart records for the authenticated user. This endpoint enables customers or system admins to search across their active and historical carts by applying search criteria including status, creation date, or ownership. \n\nSecurity is enforced such that customers may only access their own carts, while administrators with appropriate privileges may search across all carts for audit, support, or operational purposes. The search functionality includes options for partial matches and advanced sorting on cart fields as defined in the Prisma schema, returning associated carts and contextual metadata.\n\nInput validation will ensure that the provided filters and sort options conform to the allowed schema fields. Error handling covers cases including invalid request parameters, permission violations, and system-level failures. This operation may be used in combination with cart detail, item, and checkout operations for advanced e-commerce workflows.","summary":"Search and paginate customer shopping carts.","parameters":[],"requestBody":{"description":"Criteria for searching and filtering carts, including pagination and advanced filtering fields.","typeName":"IShoppingMallAiBackendCart.IRequest"},"responseBody":{"description":"Paginated list of shopping cart records matching the search filters.","typeName":"IPageIShoppingMallAiBackendCart"},"authorizationRole":"admin","name":"search"},{"specification":"This operation retrieves the details of a single shopping cart by its unique identifier (cartId). It operates against the shopping_mall_ai_backend_carts table, enforcing ownership and permission logic so users can only access their own carts unless they are administrators. The operation returns a full cart record including status, items (via sub-queries if needed), and metadata.","path":"/shoppingMallAiBackend/customer/carts/{cartId}","method":"get","description":"Fetch full details of an individual shopping cart using its unique cartId. The operation returns all cart metadata as defined in the schema, including cart status, customer identification, session data, timestamps, and deletion state.\n\nSecurity checks ensure customers may access only their own carts, while administrators have broader access for support, troubleshooting, or business analytics. Error conditions include not found (invalid cartId), permission denied, or system failure. This operation is essential for building shopping, checkout, and customer service experiences.","summary":"Get detail information of a cart given its cartId.","parameters":[{"name":"cartId","description":"Unique identifier of the target cart.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed shopping cart object as defined in schema.","typeName":"IShoppingMallAiBackendCart"},"authorizationRole":"customer","name":"at"},{"specification":"This operation retrieves the details of a single shopping cart by its unique identifier (cartId). It operates against the shopping_mall_ai_backend_carts table, enforcing ownership and permission logic so users can only access their own carts unless they are administrators. The operation returns a full cart record including status, items (via sub-queries if needed), and metadata.","path":"/shoppingMallAiBackend/admin/carts/{cartId}","method":"get","description":"Fetch full details of an individual shopping cart using its unique cartId. The operation returns all cart metadata as defined in the schema, including cart status, customer identification, session data, timestamps, and deletion state.\n\nSecurity checks ensure customers may access only their own carts, while administrators have broader access for support, troubleshooting, or business analytics. Error conditions include not found (invalid cartId), permission denied, or system failure. This operation is essential for building shopping, checkout, and customer service experiences.","summary":"Get detail information of a cart given its cartId.","parameters":[{"name":"cartId","description":"Unique identifier of the target cart.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed shopping cart object as defined in schema.","typeName":"IShoppingMallAiBackendCart"},"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new shopping cart record for a user, based on input parameters such as customerId, initial status, and (optionally) sessionToken. It acts on the shopping_mall_ai_backend_carts table, allowing users to initialize new carts for active shopping or as part of a checkout workflow. Business validation ensures the same user does not create multiple active carts without checkout, depending on policy.","path":"/shoppingMallAiBackend/customer/carts","method":"post","description":"Create a new shopping cart record for an authenticated customer. The request must include customerId, an initial status, and optionally a session token for guest logic. This endpoint supports the start of a shopping session, persistent cart creation, or other pre-checkout workflows.\n\nBusiness logic will prevent multiple simultaneous active carts per user based on platform policy. Security checks ensure only valid customers or admin processes can initiate cart creation. Errors include duplicate active carts, permission issues, or input data validation failures. The return includes the new cart’s schema-compliant representation.","summary":"Create a new shopping cart record for a customer.","parameters":[],"requestBody":{"description":"Information required to instantiate a new cart, including customer linkage, status, and optional session token.","typeName":"IShoppingMallAiBackendCart.ICreate"},"responseBody":{"description":"Detailed newly created shopping cart record.","typeName":"IShoppingMallAiBackendCart"},"authorizationRole":"customer","name":"create"},{"specification":"This operation creates a new shopping cart record for a user, based on input parameters such as customerId, initial status, and (optionally) sessionToken. It acts on the shopping_mall_ai_backend_carts table, allowing users to initialize new carts for active shopping or as part of a checkout workflow. Business validation ensures the same user does not create multiple active carts without checkout, depending on policy.","path":"/shoppingMallAiBackend/admin/carts","method":"post","description":"Create a new shopping cart record for an authenticated customer. The request must include customerId, an initial status, and optionally a session token for guest logic. This endpoint supports the start of a shopping session, persistent cart creation, or other pre-checkout workflows.\n\nBusiness logic will prevent multiple simultaneous active carts per user based on platform policy. Security checks ensure only valid customers or admin processes can initiate cart creation. Errors include duplicate active carts, permission issues, or input data validation failures. The return includes the new cart’s schema-compliant representation.","summary":"Create a new shopping cart record for a customer.","parameters":[],"requestBody":{"description":"Information required to instantiate a new cart, including customer linkage, status, and optional session token.","typeName":"IShoppingMallAiBackendCart.ICreate"},"responseBody":{"description":"Detailed newly created shopping cart record.","typeName":"IShoppingMallAiBackendCart"},"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing shopping cart record identified by cartId, modifying fields such as status, session association, or customer linkage. It operates against shopping_mall_ai_backend_carts, is restricted to owners (customers) or administrators, and logs changes for audit. Fails for non-existent or unauthorized cartId.","path":"/shoppingMallAiBackend/customer/carts/{cartId}","method":"put","description":"Update a shopping cart's properties by specifying its unique cartId and providing modified values such as status, session token, or other cart metadata according to the Prisma schema. The operation validates the user’s authority (owner or admin) and persists updates, tracking update timestamps.\n\nError scenarios include non-existence of the specified cartId, insufficient permissions, or input data validation errors. Successful updates return the latest cart state. Used in advanced cart management, recovery, and customer service workflows.","summary":"Update information for a specific cart by cartId.","parameters":[{"name":"cartId","description":"Unique identifier of the cart to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update—including status, session token, etc.—as permitted by schema.","typeName":"IShoppingMallAiBackendCart.IUpdate"},"responseBody":{"description":"Updated cart object with recent values.","typeName":"IShoppingMallAiBackendCart"},"authorizationRole":"customer","name":"update"},{"specification":"This operation updates an existing shopping cart record identified by cartId, modifying fields such as status, session association, or customer linkage. It operates against shopping_mall_ai_backend_carts, is restricted to owners (customers) or administrators, and logs changes for audit. Fails for non-existent or unauthorized cartId.","path":"/shoppingMallAiBackend/admin/carts/{cartId}","method":"put","description":"Update a shopping cart's properties by specifying its unique cartId and providing modified values such as status, session token, or other cart metadata according to the Prisma schema. The operation validates the user’s authority (owner or admin) and persists updates, tracking update timestamps.\n\nError scenarios include non-existence of the specified cartId, insufficient permissions, or input data validation errors. Successful updates return the latest cart state. Used in advanced cart management, recovery, and customer service workflows.","summary":"Update information for a specific cart by cartId.","parameters":[{"name":"cartId","description":"Unique identifier of the cart to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update—including status, session token, etc.—as permitted by schema.","typeName":"IShoppingMallAiBackendCart.IUpdate"},"responseBody":{"description":"Updated cart object with recent values.","typeName":"IShoppingMallAiBackendCart"},"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes (soft delete) a shopping cart referenced by cartId, updating its deleted_at field in the shopping_mall_ai_backend_carts table. It is limited to the owner (customer) or appropriate admin roles. Business logic may prevent deletion if cart is in use or in a locked state. Hard deletes are not performed unless explicitly described in business policy.","path":"/shoppingMallAiBackend/customer/carts/{cartId}","method":"delete","description":"Soft-delete a specific shopping cart identified by cartId by setting its deleted_at field. Only the owner or authorized admin can perform this operation. The cart is not fully purged from the database, preserving audit and rollback capabilities in accordance with the schema and compliance requirements.\n\nAttempting to delete a non-existent or non-owned cart results in an error. The operation is important for managing abandoned carts, account privacy, or compliance workflows.","summary":"Soft-delete an individual cart (mark as deleted, not hard delete).","parameters":[{"name":"cartId","description":"Unique identifier of the cart to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"customer","name":"erase"},{"specification":"This operation deletes (soft delete) a shopping cart referenced by cartId, updating its deleted_at field in the shopping_mall_ai_backend_carts table. It is limited to the owner (customer) or appropriate admin roles. Business logic may prevent deletion if cart is in use or in a locked state. Hard deletes are not performed unless explicitly described in business policy.","path":"/shoppingMallAiBackend/admin/carts/{cartId}","method":"delete","description":"Soft-delete a specific shopping cart identified by cartId by setting its deleted_at field. Only the owner or authorized admin can perform this operation. The cart is not fully purged from the database, preserving audit and rollback capabilities in accordance with the schema and compliance requirements.\n\nAttempting to delete a non-existent or non-owned cart results in an error. The operation is important for managing abandoned carts, account privacy, or compliance workflows.","summary":"Soft-delete an individual cart (mark as deleted, not hard delete).","parameters":[{"name":"cartId","description":"Unique identifier of the cart to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation searches and retrieves a paginated list of cart items for a specific cart (cartId), allowing advanced filtering by product, status, creation time, and other schema fields. The underlying data source is shopping_mall_ai_backend_cart_items. Permissions restrict the operation to the owner or administrators.","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartItems","method":"patch","description":"List and search cart items belonging to a specific shopping cart (cartId) with advanced search criteria and pagination. Filters may include product, status, creation and update timestamps, and business logic fields as permitted by the schema.\n\nSecurity ensures access is limited to the owning customer or operational/admins. Invalid cartId or insufficient access rights result in error responses. The output provides a paginated list of cart item records for use in UI rendering, analytics, or checkout processing.","summary":"Search and paginate cart items for a specified cartId.","parameters":[{"name":"cartId","description":"Identifier of the cart whose items are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search and pagination criteria for cart items, including status, product, and sort order.","typeName":"IShoppingMallAiBackendCartItem.IRequest"},"responseBody":{"description":"Paginated response with cart items matching criteria under the given cartId.","typeName":"IPageIShoppingMallAiBackendCartItem"},"authorizationRole":"customer","name":"search"},{"specification":"This operation searches and retrieves a paginated list of cart items for a specific cart (cartId), allowing advanced filtering by product, status, creation time, and other schema fields. The underlying data source is shopping_mall_ai_backend_cart_items. Permissions restrict the operation to the owner or administrators.","path":"/shoppingMallAiBackend/admin/carts/{cartId}/cartItems","method":"patch","description":"List and search cart items belonging to a specific shopping cart (cartId) with advanced search criteria and pagination. Filters may include product, status, creation and update timestamps, and business logic fields as permitted by the schema.\n\nSecurity ensures access is limited to the owning customer or operational/admins. Invalid cartId or insufficient access rights result in error responses. The output provides a paginated list of cart item records for use in UI rendering, analytics, or checkout processing.","summary":"Search and paginate cart items for a specified cartId.","parameters":[{"name":"cartId","description":"Identifier of the cart whose items are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search and pagination criteria for cart items, including status, product, and sort order.","typeName":"IShoppingMallAiBackendCartItem.IRequest"},"responseBody":{"description":"Paginated response with cart items matching criteria under the given cartId.","typeName":"IPageIShoppingMallAiBackendCartItem"},"authorizationRole":"admin","name":"search"},{"specification":"This operation retrieves a specific cart item by its cartId and cartItemId, returning all item-level details (productId, quantity, unit price, etc) from shopping_mall_ai_backend_cart_items. Permissions are enforced for customer ownership or admin access. Critical for UI detail popovers and customer support.","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartItems/{cartItemId}","method":"get","description":"Fetch the details of an individual cart item belonging to a specific shopping cart (cartId) by its unique cartItemId. Returns all metadata as defined in the schema, including product references, optionId, quantity, price, and timestamps.\n\nPermission checks restrict the query to the owning user or admins. Errors include not found, access denied, or system faults. Designed for deep linking, detailed UI modals, and support workflows.","summary":"Get detail of an individual cart item by its cartId and cartItemId.","parameters":[{"name":"cartId","description":"Identifier of the cart containing the item.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the target cart item.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete cart item record from the schema.","typeName":"IShoppingMallAiBackendCartItem"},"authorizationRole":"customer","name":"at"},{"specification":"This operation retrieves a specific cart item by its cartId and cartItemId, returning all item-level details (productId, quantity, unit price, etc) from shopping_mall_ai_backend_cart_items. Permissions are enforced for customer ownership or admin access. Critical for UI detail popovers and customer support.","path":"/shoppingMallAiBackend/admin/carts/{cartId}/cartItems/{cartItemId}","method":"get","description":"Fetch the details of an individual cart item belonging to a specific shopping cart (cartId) by its unique cartItemId. Returns all metadata as defined in the schema, including product references, optionId, quantity, price, and timestamps.\n\nPermission checks restrict the query to the owning user or admins. Errors include not found, access denied, or system faults. Designed for deep linking, detailed UI modals, and support workflows.","summary":"Get detail of an individual cart item by its cartId and cartItemId.","parameters":[{"name":"cartId","description":"Identifier of the cart containing the item.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the target cart item.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete cart item record from the schema.","typeName":"IShoppingMallAiBackendCartItem"},"authorizationRole":"admin","name":"at"},{"specification":"This operation creates a new cart item within the given cart (cartId), adding a product (and potentially a product option) to the user's cart. It writes to shopping_mall_ai_backend_cart_items, enforcing business validations (e.g., item uniqueness per cart, quantity limits, and product active status). Returns the new cart item record.","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartItems","method":"post","description":"Add a new cart item to a customer's shopping cart, specifying the cartId and providing productId, optionId (when applicable), quantity, and unit price as required by the schema. The operation enforces uniqueness constraints within the cart, validates item existence, and applies quantity limits as per business rules.\n\nErrors include violation of business logic (duplicate item, excessive quantity, etc), not found (product/option), or permission errors. On success, returns the full cartItem entity as described in schema. Essential for core e-commerce add-to-cart flows.","summary":"Create a new cart item (add to cart) under specified cartId.","parameters":[{"name":"cartId","description":"Target cart where product is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required for creating a new item in the cart, including productId, quantity, and optionId if necessary.","typeName":"IShoppingMallAiBackendCartItem.ICreate"},"responseBody":{"description":"The newly created cart item record conforming to schema.","typeName":"IShoppingMallAiBackendCartItem"},"authorizationRole":"customer","name":"create"},{"specification":"This operation creates a new cart item within the given cart (cartId), adding a product (and potentially a product option) to the user's cart. It writes to shopping_mall_ai_backend_cart_items, enforcing business validations (e.g., item uniqueness per cart, quantity limits, and product active status). Returns the new cart item record.","path":"/shoppingMallAiBackend/admin/carts/{cartId}/cartItems","method":"post","description":"Add a new cart item to a customer's shopping cart, specifying the cartId and providing productId, optionId (when applicable), quantity, and unit price as required by the schema. The operation enforces uniqueness constraints within the cart, validates item existence, and applies quantity limits as per business rules.\n\nErrors include violation of business logic (duplicate item, excessive quantity, etc), not found (product/option), or permission errors. On success, returns the full cartItem entity as described in schema. Essential for core e-commerce add-to-cart flows.","summary":"Create a new cart item (add to cart) under specified cartId.","parameters":[{"name":"cartId","description":"Target cart where product is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required for creating a new item in the cart, including productId, quantity, and optionId if necessary.","typeName":"IShoppingMallAiBackendCartItem.ICreate"},"responseBody":{"description":"The newly created cart item record conforming to schema.","typeName":"IShoppingMallAiBackendCartItem"},"authorizationRole":"admin","name":"create"},{"specification":"This operation updates a specific cart item (identified by cartItemId) within a specific cart (cartId). Permitted changes include quantity, product option, or related values as per schema. It acts against shopping_mall_ai_backend_cart_items, validates permissions and business logic (e.g., quantity constraints), and logs updates for compliance/audit.","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartItems/{cartItemId}","method":"put","description":"Modify a cart item’s properties by referencing both the containing cart (cartId) and the specific item (cartItemId). The request body allows changes to attributes like quantity, option, or notes, validated against available schema options and business policies.\n\nAccess is limited to the cart’s owner or administrative staff. Input errors, invalid permissions, or business logic failures generate error responses. Each update returns the modified item in compliance with the latest schema state.","summary":"Update information for a cart item given cartId and cartItemId.","parameters":[{"name":"cartId","description":"Cart containing the item being changed.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Identifier of the cart item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values allowed for updating the cart item, such as quantity, option, etc.","typeName":"IShoppingMallAiBackendCartItem.IUpdate"},"responseBody":{"description":"Updated cart item object as defined by schema.","typeName":"IShoppingMallAiBackendCartItem"},"authorizationRole":"customer","name":"update"},{"specification":"This operation updates a specific cart item (identified by cartItemId) within a specific cart (cartId). Permitted changes include quantity, product option, or related values as per schema. It acts against shopping_mall_ai_backend_cart_items, validates permissions and business logic (e.g., quantity constraints), and logs updates for compliance/audit.","path":"/shoppingMallAiBackend/admin/carts/{cartId}/cartItems/{cartItemId}","method":"put","description":"Modify a cart item’s properties by referencing both the containing cart (cartId) and the specific item (cartItemId). The request body allows changes to attributes like quantity, option, or notes, validated against available schema options and business policies.\n\nAccess is limited to the cart’s owner or administrative staff. Input errors, invalid permissions, or business logic failures generate error responses. Each update returns the modified item in compliance with the latest schema state.","summary":"Update information for a cart item given cartId and cartItemId.","parameters":[{"name":"cartId","description":"Cart containing the item being changed.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Identifier of the cart item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values allowed for updating the cart item, such as quantity, option, etc.","typeName":"IShoppingMallAiBackendCartItem.IUpdate"},"responseBody":{"description":"Updated cart item object as defined by schema.","typeName":"IShoppingMallAiBackendCartItem"},"authorizationRole":"admin","name":"update"},{"specification":"This operation soft-deletes (marks as deleted) a cart item by its cartItemId inside a cart (cartId). Only owners or administrators can delete. Updates the deleted_at field for compliance and historical analytics. Does not perform hard deletion unless policy explicitly requires.","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartItems/{cartItemId}","method":"delete","description":"Soft delete a cart item, given the container cartId and the item’s cartItemId, by marking its deleted_at field to preserve evidence and business context. Deletes are restricted to the cart’s owning customer or admins.\n\nInvalid cartId or cartItemId, permission failures, or system errors are handled via appropriate error responses. Used to implement ‘remove from cart’ and data subject privacy actions in a legal-compliance manner.","summary":"Soft delete a cart item in the specified cart (logical, not hard delete).","parameters":[{"name":"cartId","description":"Cart containing the cart item to delete.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the cart item to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"customer","name":"erase"},{"specification":"This operation soft-deletes (marks as deleted) a cart item by its cartItemId inside a cart (cartId). Only owners or administrators can delete. Updates the deleted_at field for compliance and historical analytics. Does not perform hard deletion unless policy explicitly requires.","path":"/shoppingMallAiBackend/admin/carts/{cartId}/cartItems/{cartItemId}","method":"delete","description":"Soft delete a cart item, given the container cartId and the item’s cartItemId, by marking its deleted_at field to preserve evidence and business context. Deletes are restricted to the cart’s owning customer or admins.\n\nInvalid cartId or cartItemId, permission failures, or system errors are handled via appropriate error responses. Used to implement ‘remove from cart’ and data subject privacy actions in a legal-compliance manner.","summary":"Soft delete a cart item in the specified cart (logical, not hard delete).","parameters":[{"name":"cartId","description":"Cart containing the cart item to delete.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"UUID of the cart item to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation searches and retrieves paginated cart snapshot history for a given cart (cartId), supporting curation, evidence, audit (e.g., checkout, timeout, manual save). Operates on shopping_mall_ai_backend_cart_snapshots, with result structuring, pagination, and advanced search. Permissions required. Facilitates compliance and rollback workflows.","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartSnapshots","method":"patch","description":"Search through cart snapshot history related to a specific cartId. Supports advanced query options such as filtering by snapshot reason, creation timestamp range, and pagination. Enables customers, support staff, or auditors to reconstruct cart state over time for evidence or rollback.\n\nParticipants may only access snapshots of their own carts unless they are system administrators. Errors are returned for insufficient permissions, invalid cartId, or unhandled search parameters. Useful for checkout analytics, compliance, and customer support scenarios.","summary":"Paginate and search cart snapshot history for a cartId.","parameters":[{"name":"cartId","description":"Cart whose snapshot history is being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query criteria and pagination options for searching cart snapshots.","typeName":"IShoppingMallAiBackendCartSnapshot.IRequest"},"responseBody":{"description":"Paginated listing of cart snapshot records matching query parameters.","typeName":"IPageIShoppingMallAiBackendCartSnapshot"},"authorizationRole":"customer","name":"search"},{"specification":"This operation searches and retrieves paginated cart snapshot history for a given cart (cartId), supporting curation, evidence, audit (e.g., checkout, timeout, manual save). Operates on shopping_mall_ai_backend_cart_snapshots, with result structuring, pagination, and advanced search. Permissions required. Facilitates compliance and rollback workflows.","path":"/shoppingMallAiBackend/admin/carts/{cartId}/cartSnapshots","method":"patch","description":"Search through cart snapshot history related to a specific cartId. Supports advanced query options such as filtering by snapshot reason, creation timestamp range, and pagination. Enables customers, support staff, or auditors to reconstruct cart state over time for evidence or rollback.\n\nParticipants may only access snapshots of their own carts unless they are system administrators. Errors are returned for insufficient permissions, invalid cartId, or unhandled search parameters. Useful for checkout analytics, compliance, and customer support scenarios.","summary":"Paginate and search cart snapshot history for a cartId.","parameters":[{"name":"cartId","description":"Cart whose snapshot history is being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query criteria and pagination options for searching cart snapshots.","typeName":"IShoppingMallAiBackendCartSnapshot.IRequest"},"responseBody":{"description":"Paginated listing of cart snapshot records matching query parameters.","typeName":"IPageIShoppingMallAiBackendCartSnapshot"},"authorizationRole":"admin","name":"search"},{"specification":"This operation retrieves detailed information for a single cart snapshot (cartSnapshotId) within a specific cart (cartId). Reads from shopping_mall_ai_backend_cart_snapshots, enforcing strict permissions. Returns the full snapshot (all fields) for operational, audit, or analytics use.","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartSnapshots/{cartSnapshotId}","method":"get","description":"Fetch detailed information of one cart snapshot record associated with a cartId and a specific cartSnapshotId. Returns every schema field, including snapshot payload, creation reason, and timestamp.\n\nAccess is restricted to the owning customer or admin users. Not found errors arise for wrong identifiers, permission errors for unauthorized requesters. This operation supports customer support and regulatory compliance processes.","summary":"Get cart snapshot history detail by cartId and cartSnapshotId.","parameters":[{"name":"cartId","description":"The cart containing the snapshot record.","schema":{"type":"string","format":"uuid"}},{"name":"cartSnapshotId","description":"UUID of the desired cart snapshot record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed cart snapshot record from the schema.","typeName":"IShoppingMallAiBackendCartSnapshot"},"authorizationRole":"customer","name":"at"},{"specification":"This operation retrieves detailed information for a single cart snapshot (cartSnapshotId) within a specific cart (cartId). Reads from shopping_mall_ai_backend_cart_snapshots, enforcing strict permissions. Returns the full snapshot (all fields) for operational, audit, or analytics use.","path":"/shoppingMallAiBackend/admin/carts/{cartId}/cartSnapshots/{cartSnapshotId}","method":"get","description":"Fetch detailed information of one cart snapshot record associated with a cartId and a specific cartSnapshotId. Returns every schema field, including snapshot payload, creation reason, and timestamp.\n\nAccess is restricted to the owning customer or admin users. Not found errors arise for wrong identifiers, permission errors for unauthorized requesters. This operation supports customer support and regulatory compliance processes.","summary":"Get cart snapshot history detail by cartId and cartSnapshotId.","parameters":[{"name":"cartId","description":"The cart containing the snapshot record.","schema":{"type":"string","format":"uuid"}},{"name":"cartSnapshotId","description":"UUID of the desired cart snapshot record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed cart snapshot record from the schema.","typeName":"IShoppingMallAiBackendCartSnapshot"},"authorizationRole":"admin","name":"at"},{"specification":"This API endpoint is designed to create a new shopping cart snapshot for a given cart in the ShoppingMallAiBackend system. The operation makes use of the shopping_mall_ai_backend_cart_snapshots table, where each snapshot captures the entire state of a user's shopping cart at a point in time, including all associated cart items, prices, and business context such as status and session token. The snapshot is intended for evidence, compliance, debugging, and customer experience restoration (for example, after checkout, app crash, or customer request). The schema ensures that each snapshot is properly linked to a cart and that all fundamental information about the current cart state is serialized and stored. This endpoint is primarily used after significant cart changes, on checkout, or error events, allowing for full lifecycle traceability. The operation strictly requires a valid cartId and a payload matching the expected snapshot creation schema, including business justification.","description":"Create a new snapshot of a customer's shopping cart in the system. This API operation records an exact, point-in-time copy of the cart's contents, status, customer association, and relevant session context in the shopping_mall_ai_backend_cart_snapshots table. The snapshot acts as key evidence for audits, rollback, incident investigation, and replaying user scenarios. Users, administrators, or compliance systems can invoke this operation after a significant shopping activity—such as checkout, timeout, or detected issue—to preserve all cart details before and after business or system logic changes. \n\nSecurity is enforced such that only authenticated users with the \"customer\" role, and owners of the cart, can create snapshots of their own carts. All snapshot records include full context, rationale (reason for snapshot), and differencing fields for subsequent retrieval, versioning, or rollback scenarios. Related APIs include retrieving cart snapshots, updating snapshots for compliance, and deleting obsolete or erroneous entries. If the cart is not found, or ownership fails validation, the operation will fail with an error. All snapshot content must be based exclusively on the actual shopping_mall_ai_backend_carts schema and not assume extra fields.","summary":"Create a cart snapshot for a given cart (shopping_mall_ai_backend_cart_snapshots table).","authorizationRoles":["customer"],"parameters":[{"name":"cartId","description":"The unique identifier of the shopping cart being snapshotted.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot creation details for the cart, including a serialized state, snapshot reason, etc.","typeName":"IShoppingMallAiBackendCartSnapshot.ICreate"},"responseBody":{"description":"Created cart snapshot for audit and compliance purposes.","typeName":"IShoppingMallAiBackendCartSnapshot"},"name":"create","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartSnapshots","method":"post","authorizationRole":"customer"},{"specification":"This operation allows updating the serialized snapshot data or reason for a specific cart snapshot. It targets the shopping_mall_ai_backend_cart_snapshots table, identified by both the cartId and the cartSnapshotId. Typical use cases include correcting or annotating a snapshot for compliance evidence, updating the reason code, rectifying error tagging, or attaching additional business metadata. All updates are strictly audited for security and compliance, requiring ownership or administrative privileges. The endpoint supports modification only of mutable fields—immutable attributes like snapshot creation time or cartId are never altered by PUT. This helps maintain the chain of custody and evidence authenticity for forensic and legal validation.","description":"Update a specific cart snapshot record by snapshot ID, allowing modifications of mutable fields such as the snapshot reason or non-evidence metadata. This API is primarily used in compliance, error correction, or audit scenarios where an existing cart snapshot requires metadata adjustment, addition of compliance notes, or legal annotations without undermining the integrity of original state capture. The operation restricts updates to allowed properties, never altering the serialized cart state or timestamps unless strictly permitted. Security is enforced so only authorized users (typically cart owners or administrative roles) may update their cart snapshots. Related operations include creation, retrieval, and deletion of cart snapshots. Any attempt to update immutable fields will result in a validation error.","summary":"Update a specific cart snapshot record for compliance/meta adjustment (shopping_mall_ai_backend_cart_snapshots).","authorizationRoles":["customer"],"parameters":[{"name":"cartId","description":"The unique identifier of the cart associated with the snapshot being updated.","schema":{"type":"string","format":"uuid"}},{"name":"cartSnapshotId","description":"The unique identifier of the cart snapshot to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the cart snapshot (e.g., snapshot reason, allowable metadata).","typeName":"IShoppingMallAiBackendCartSnapshot.IUpdate"},"responseBody":{"description":"Updated cart snapshot record reflecting new metadata or compliance context.","typeName":"IShoppingMallAiBackendCartSnapshot"},"name":"update","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartSnapshots/{cartSnapshotId}","method":"put","authorizationRole":"customer"},{"specification":"This API removes a cart snapshot record identified by cartId and cartSnapshotId from the shopping_mall_ai_backend_cart_snapshots table. The deletion is logical if the schema includes soft delete fields, allowing for audit retention and potential recovery, or hard if not. This is used for compliance/retention management, user-initiated data purges, or removing obsolete snapshots. Only owners or authorized roles can request deletion. All deletions are fully audited for compliance.","description":"Logically (or physically, if schema lacks soft deletes) delete a shopping cart snapshot for audit, compliance, or user-requested erasure. This operation supports GDPR/data privacy requirements, system cleanup, and management of obsolete or excessive snapshots associated with a cart. Authorization restricts actions to the cart owner or privileged admin users. If soft deleted, the snapshot is retained for retention policies but excluded from standard queries. Hard deletion is only performed if required and no soft delete fields exist. Related operations include snapshot creation and update. Attempts to remove a non-existent snapshot return a clear error.","summary":"Delete a cart snapshot (logical/physical deletion depending on schema) from shopping_mall_ai_backend_cart_snapshots.","authorizationRoles":["customer"],"parameters":[{"name":"cartId","description":"The unique identifier of the cart associated with the snapshot being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"cartSnapshotId","description":"The unique identifier of the cart snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","path":"/shoppingMallAiBackend/customer/carts/{cartId}/cartSnapshots/{cartSnapshotId}","method":"delete","authorizationRole":"customer"},{"specification":"This endpoint retrieves all payment records associated with a given order, with advanced filtering and pagination. The operation queries the shopping_mall_ai_backend_order_payments table, listing all related payment attempts, results, and relevant metadata for a specific order. It supports filtering by payment method, provider, status, date range, and result, and is paginated for compliance and UI performance. This API is typically called from order detail pages, the payment operations dashboard, and finance/compliance audits. Security checks ensure only the order owner (customer) or properly authorized roles (admin, finance) can access full payment histories. Business logic excludes logically deleted records unless auditing purposes require otherwise.","description":"Retrieve a filtered, paginated list of payment records for a specific order. The list includes all payment attempts, their methods, providers, transaction results, statuses, and relevant metadata needed for transaction history, customer self-service history, finance audits, or compliance investigations. Advanced search supports filtering by method, time window, or specific result. Only customers associated with the order, system administrators, or finance operators can perform this operation. If no payments are found, the result is an empty paginated list. Records with soft deletes are omitted from default queries unless specifically requested via compliance/audit context.","summary":"List order payment records for a specific order with filtering and pagination (shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The unique identifier of the order for which payment records are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filtering, pagination, and search criteria for retrieving order payments.","typeName":"IShoppingMallAiBackendOrderPayment.IRequest"},"responseBody":{"description":"Paginated, filtered list of order payment records for the specified order.","typeName":"IPageIShoppingMallAiBackendOrderPayment"},"name":"search","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderPayments","method":"patch","authorizationRole":"customer"},{"specification":"This endpoint retrieves all payment records associated with a given order, with advanced filtering and pagination. The operation queries the shopping_mall_ai_backend_order_payments table, listing all related payment attempts, results, and relevant metadata for a specific order. It supports filtering by payment method, provider, status, date range, and result, and is paginated for compliance and UI performance. This API is typically called from order detail pages, the payment operations dashboard, and finance/compliance audits. Security checks ensure only the order owner (customer) or properly authorized roles (admin, finance) can access full payment histories. Business logic excludes logically deleted records unless auditing purposes require otherwise.","description":"Retrieve a filtered, paginated list of payment records for a specific order. The list includes all payment attempts, their methods, providers, transaction results, statuses, and relevant metadata needed for transaction history, customer self-service history, finance audits, or compliance investigations. Advanced search supports filtering by method, time window, or specific result. Only customers associated with the order, system administrators, or finance operators can perform this operation. If no payments are found, the result is an empty paginated list. Records with soft deletes are omitted from default queries unless specifically requested via compliance/audit context.","summary":"List order payment records for a specific order with filtering and pagination (shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The unique identifier of the order for which payment records are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filtering, pagination, and search criteria for retrieving order payments.","typeName":"IShoppingMallAiBackendOrderPayment.IRequest"},"responseBody":{"description":"Paginated, filtered list of order payment records for the specified order.","typeName":"IPageIShoppingMallAiBackendOrderPayment"},"name":"search","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments","method":"patch","authorizationRole":"admin"},{"specification":"This endpoint retrieves the details of a specific payment entry associated with an order. Accesses the shopping_mall_ai_backend_order_payments table using both orderId and orderPaymentId as identifiers. The operation is used to display, audit, or verify a single transaction, typically for customer self-service history, admin/finance audits, or error investigation. Sensitive information is limited to authorized roles. Only the order owner (customer), admins, or finance roles are entitled to use this endpoint. Returns all payment fields defined in the schema.","description":"Retrieve a single payment record by its identifier for a given order. The operation returns all details of the order payment, including provider, payment method, amount, status, and detailed audit/tracing fields necessary for customer, admin, or finance review. If the payment record does not exist, a precise error will be returned. Security is enforced so only the order owner or authorized admin/finance can access this record.","summary":"Get a specific order payment record by ID (shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The unique identifier of the order containing the payment record.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"The unique identifier of the payment record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full payment record by ID for the order, with complete audit fields.","typeName":"IShoppingMallAiBackendOrderPayment"},"name":"at","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderPayments/{orderPaymentId}","method":"get","authorizationRole":"customer"},{"specification":"This endpoint retrieves the details of a specific payment entry associated with an order. Accesses the shopping_mall_ai_backend_order_payments table using both orderId and orderPaymentId as identifiers. The operation is used to display, audit, or verify a single transaction, typically for customer self-service history, admin/finance audits, or error investigation. Sensitive information is limited to authorized roles. Only the order owner (customer), admins, or finance roles are entitled to use this endpoint. Returns all payment fields defined in the schema.","description":"Retrieve a single payment record by its identifier for a given order. The operation returns all details of the order payment, including provider, payment method, amount, status, and detailed audit/tracing fields necessary for customer, admin, or finance review. If the payment record does not exist, a precise error will be returned. Security is enforced so only the order owner or authorized admin/finance can access this record.","summary":"Get a specific order payment record by ID (shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The unique identifier of the order containing the payment record.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"The unique identifier of the payment record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full payment record by ID for the order, with complete audit fields.","typeName":"IShoppingMallAiBackendOrderPayment"},"name":"at","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments/{orderPaymentId}","method":"get","authorizationRole":"admin"},{"specification":"This API endpoint allows the creation of a new payment record for a specific order. It inserts a row into the shopping_mall_ai_backend_order_payments table, binding the new payment to the given orderId. This is used during multi-step checkout, retries, or split payments, and is essential for finance reconciliation and audit. All mandatory fields required for payment creation must be provided in the request body (provider, method, transaction info, amount, result, etc.) in accordance with the schema. The operation ensures that all business rules regarding order ownership, amount calculation, and provider selection are validated before record creation. Only order owners (customers) or authorized business actors (admins) may invoke this endpoint.","description":"Create a new payment event record for an order. The operation is used for customer-initiated checkouts, payment retries, split/multi-payment handling, or administrative creation for compliance/accounting needs. Payment details (provider, method, amount, etc.) are specified in the request body according to strict schema requirements. Security rules enforce that only the order owner or authorized administrators can create payments for an order. If order status/business logic fails validation, the operation will be rejected with a precise error message. Related operations include retrieval, updating, and deletion of payments, all of which are auditable.","summary":"Create a payment record for an order (shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The unique identifier of the order for which the payment is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment creation details as per schema, including provider, method, amount, status, and context.","typeName":"IShoppingMallAiBackendOrderPayment.ICreate"},"responseBody":{"description":"Created payment record for the order, including all audit fields.","typeName":"IShoppingMallAiBackendOrderPayment"},"name":"create","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderPayments","method":"post","authorizationRole":"customer"},{"specification":"This API endpoint allows the creation of a new payment record for a specific order. It inserts a row into the shopping_mall_ai_backend_order_payments table, binding the new payment to the given orderId. This is used during multi-step checkout, retries, or split payments, and is essential for finance reconciliation and audit. All mandatory fields required for payment creation must be provided in the request body (provider, method, transaction info, amount, result, etc.) in accordance with the schema. The operation ensures that all business rules regarding order ownership, amount calculation, and provider selection are validated before record creation. Only order owners (customers) or authorized business actors (admins) may invoke this endpoint.","description":"Create a new payment event record for an order. The operation is used for customer-initiated checkouts, payment retries, split/multi-payment handling, or administrative creation for compliance/accounting needs. Payment details (provider, method, amount, etc.) are specified in the request body according to strict schema requirements. Security rules enforce that only the order owner or authorized administrators can create payments for an order. If order status/business logic fails validation, the operation will be rejected with a precise error message. Related operations include retrieval, updating, and deletion of payments, all of which are auditable.","summary":"Create a payment record for an order (shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The unique identifier of the order for which the payment is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment creation details as per schema, including provider, method, amount, status, and context.","typeName":"IShoppingMallAiBackendOrderPayment.ICreate"},"responseBody":{"description":"Created payment record for the order, including all audit fields.","typeName":"IShoppingMallAiBackendOrderPayment"},"name":"create","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments","method":"post","authorizationRole":"admin"},{"specification":"This operation updates an existing payment record for an order in the shopping_mall_ai_backend_order_payments table, identified by orderId and orderPaymentId. Common scenarios include correcting a payment method, updating transaction details, annotating payment context, or administratively marking results. Only mutable fields as specified by the update schema are modifiable—immutable fields (created_at, orderId, etc.) are not. Strict access control ensures only order owners or finance/admin operators are allowed to update records. All updates are fully tracked for audit and compliance, supporting rollback and forensics. Related APIs include create, retrieval, and deletion.","description":"Amend an order payment record, allowing changes to mutable fields, typically for compliance, error correction, or administrative processing. Supported modifications include updating payment result, provider, payment context, or other allowed adjustments. Updates to immutable fields or business-critical audit data are strictly prohibited. Authorization is enforced for order owners and administrators. Operations are logged for compliance tracking. Attempts to update a payment record with an invalid state or insufficient permissions are rejected with clear errors.","summary":"Update an existing payment record for an order (shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The unique identifier of the order containing the payment.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"The unique identifier of the payment record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the payment record (status, provider, transaction info, etc).","typeName":"IShoppingMallAiBackendOrderPayment.IUpdate"},"responseBody":{"description":"Updated payment record for the order, reflecting new audit context.","typeName":"IShoppingMallAiBackendOrderPayment"},"name":"update","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderPayments/{orderPaymentId}","method":"put","authorizationRole":"customer"},{"specification":"This operation updates an existing payment record for an order in the shopping_mall_ai_backend_order_payments table, identified by orderId and orderPaymentId. Common scenarios include correcting a payment method, updating transaction details, annotating payment context, or administratively marking results. Only mutable fields as specified by the update schema are modifiable—immutable fields (created_at, orderId, etc.) are not. Strict access control ensures only order owners or finance/admin operators are allowed to update records. All updates are fully tracked for audit and compliance, supporting rollback and forensics. Related APIs include create, retrieval, and deletion.","description":"Amend an order payment record, allowing changes to mutable fields, typically for compliance, error correction, or administrative processing. Supported modifications include updating payment result, provider, payment context, or other allowed adjustments. Updates to immutable fields or business-critical audit data are strictly prohibited. Authorization is enforced for order owners and administrators. Operations are logged for compliance tracking. Attempts to update a payment record with an invalid state or insufficient permissions are rejected with clear errors.","summary":"Update an existing payment record for an order (shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The unique identifier of the order containing the payment.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"The unique identifier of the payment record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the payment record (status, provider, transaction info, etc).","typeName":"IShoppingMallAiBackendOrderPayment.IUpdate"},"responseBody":{"description":"Updated payment record for the order, reflecting new audit context.","typeName":"IShoppingMallAiBackendOrderPayment"},"name":"update","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments/{orderPaymentId}","method":"put","authorizationRole":"admin"},{"specification":"This endpoint removes (soft or hard, per schema) a payment record for a specific order, binding orderId and orderPaymentId to delete from shopping_mall_ai_backend_order_payments. Primary use cases include erroneous records, compliance-driven data purges, payment cancellation for failed/duplicate events, or as part of order update/cancellation flows. Only order owners or authorized administrators can trigger deletion, which is audit-logged. If the schema uses soft deletes, the record remains for compliance; otherwise, it is physically removed. Attempting to delete non-existent or unauthorized records returns a clear error message. Related CRUD endpoints include creation, update, and lookup.","description":"Delete (logically or physically, according to schema) an order payment record. This API supports business flows for correcting duplicate/failed payments, handling retracted transactions, or maintaining orderly payment records per compliance mandates. Security and authorization checks restrict deletion to the order owner or privileged business roles. All deletions are audit logged and, if soft deletion is implemented, records can be retained for legal or business recovery. Hard deletion is only used where schema dictates. Related operations include creating, updating, and retrieving payment records for orders. A missing or already-deleted record yields a descriptive error.","summary":"Delete a payment record for an order (logical or physical per schema, shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The order's unique identifier associated with the payment to delete.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"Unique identifier of the payment record to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderPayments/{orderPaymentId}","method":"delete","authorizationRole":"customer"},{"specification":"This endpoint removes (soft or hard, per schema) a payment record for a specific order, binding orderId and orderPaymentId to delete from shopping_mall_ai_backend_order_payments. Primary use cases include erroneous records, compliance-driven data purges, payment cancellation for failed/duplicate events, or as part of order update/cancellation flows. Only order owners or authorized administrators can trigger deletion, which is audit-logged. If the schema uses soft deletes, the record remains for compliance; otherwise, it is physically removed. Attempting to delete non-existent or unauthorized records returns a clear error message. Related CRUD endpoints include creation, update, and lookup.","description":"Delete (logically or physically, according to schema) an order payment record. This API supports business flows for correcting duplicate/failed payments, handling retracted transactions, or maintaining orderly payment records per compliance mandates. Security and authorization checks restrict deletion to the order owner or privileged business roles. All deletions are audit logged and, if soft deletion is implemented, records can be retained for legal or business recovery. Hard deletion is only used where schema dictates. Related operations include creating, updating, and retrieving payment records for orders. A missing or already-deleted record yields a descriptive error.","summary":"Delete a payment record for an order (logical or physical per schema, shopping_mall_ai_backend_order_payments).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"The order's unique identifier associated with the payment to delete.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"Unique identifier of the payment record to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments/{orderPaymentId}","method":"delete","authorizationRole":"admin"},{"specification":"This API lists all payment logs (audit events, request/response/transaction lifecycle entries) for a specific order payment, as stored in the shopping_mall_ai_backend_order_payment_logs table. It supports advanced filtering, pagination, and search features, enabling detailed review and forensic analysis. Used by compliance and finance teams, as well as customers in self-service portals, to trace payment processing events, provider interactions, and error flows for a given order payment. Security controls ensure access is limited to order owners, admins, or finance roles. If no records are found, an empty list is returned. All compliance-related and audit logs are included if requested.","description":"Retrieve a paginated, filterable audit trail of payment log entries for a specific order payment. Each log captures a distinct lifecycle event, request, response, or error in the payment process, providing granular evidence for transaction investigation, dispute resolution, and compliance audits. Filters include log type, keyword, date range, or severity. Only order owners, admins, or operators with explicit finance compliance privileges are authorized. Empty results indicate no log entries for the given payment. Related API endpoints allow creation, updating, and deletion of payment logs, as well as reading individual entries.","summary":"List payment log entries for an order payment (shopping_mall_ai_backend_order_payment_logs).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"Unique identifier for the order containing the payment.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"Unique identifier of the payment for which logs are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and search configuration for retrieving log entries.","typeName":"IShoppingMallAiBackendOrderPaymentLog.IRequest"},"responseBody":{"description":"Paginated, filterable list of log entries for the order payment.","typeName":"IPageIShoppingMallAiBackendOrderPaymentLog"},"name":"search","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderPayments/{orderPaymentId}/orderPaymentLogs","method":"patch","authorizationRole":"customer"},{"specification":"This API lists all payment logs (audit events, request/response/transaction lifecycle entries) for a specific order payment, as stored in the shopping_mall_ai_backend_order_payment_logs table. It supports advanced filtering, pagination, and search features, enabling detailed review and forensic analysis. Used by compliance and finance teams, as well as customers in self-service portals, to trace payment processing events, provider interactions, and error flows for a given order payment. Security controls ensure access is limited to order owners, admins, or finance roles. If no records are found, an empty list is returned. All compliance-related and audit logs are included if requested.","description":"Retrieve a paginated, filterable audit trail of payment log entries for a specific order payment. Each log captures a distinct lifecycle event, request, response, or error in the payment process, providing granular evidence for transaction investigation, dispute resolution, and compliance audits. Filters include log type, keyword, date range, or severity. Only order owners, admins, or operators with explicit finance compliance privileges are authorized. Empty results indicate no log entries for the given payment. Related API endpoints allow creation, updating, and deletion of payment logs, as well as reading individual entries.","summary":"List payment log entries for an order payment (shopping_mall_ai_backend_order_payment_logs).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"Unique identifier for the order containing the payment.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"Unique identifier of the payment for which logs are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and search configuration for retrieving log entries.","typeName":"IShoppingMallAiBackendOrderPaymentLog.IRequest"},"responseBody":{"description":"Paginated, filterable list of log entries for the order payment.","typeName":"IPageIShoppingMallAiBackendOrderPaymentLog"},"name":"search","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments/{orderPaymentId}/orderPaymentLogs","method":"patch","authorizationRole":"admin"},{"specification":"Get a single detailed payment log entry by its unique identifier for a given order's payment. Reads from the shopping_mall_ai_backend_order_payment_logs table. The operation supports secure, evidence-grade retrieval of log data, useful for audits, compliance checks, and debugging. Only order owners, admins, or authorized finance/compliance personnel are permitted to retrieve log details. The full log context (request/response, error, or event metadata) is returned as defined in the schema. If not found, a clear error is provided. This endpoint complements list/search operations and supports deep-dive analysis.","description":"Get details of a specific payment log entry for a given order payment. Includes the full log record, metadata, event context, and any linkage to payment lifecycle, error reporting, or audit trail. This supports transaction traceability and regulatory reviews. Only order owner or privileged users can access the log entries. Attempting to retrieve a non-existent or unauthorized log will fail with an appropriate error. Related APIs include listing logs, creating a new log, and updating existing entries.","summary":"Retrieve details for a single payment log entry (shopping_mall_ai_backend_order_payment_logs).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"ID of the order containing the payment.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"ID of the payment for which the log entry belongs.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentLogId","description":"Unique identifier of the payment log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed payment log record for the specified order payment log ID.","typeName":"IShoppingMallAiBackendOrderPaymentLog"},"name":"at","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderPayments/{orderPaymentId}/orderPaymentLogs/{orderPaymentLogId}","method":"get","authorizationRole":"customer"},{"specification":"Get a single detailed payment log entry by its unique identifier for a given order's payment. Reads from the shopping_mall_ai_backend_order_payment_logs table. The operation supports secure, evidence-grade retrieval of log data, useful for audits, compliance checks, and debugging. Only order owners, admins, or authorized finance/compliance personnel are permitted to retrieve log details. The full log context (request/response, error, or event metadata) is returned as defined in the schema. If not found, a clear error is provided. This endpoint complements list/search operations and supports deep-dive analysis.","description":"Get details of a specific payment log entry for a given order payment. Includes the full log record, metadata, event context, and any linkage to payment lifecycle, error reporting, or audit trail. This supports transaction traceability and regulatory reviews. Only order owner or privileged users can access the log entries. Attempting to retrieve a non-existent or unauthorized log will fail with an appropriate error. Related APIs include listing logs, creating a new log, and updating existing entries.","summary":"Retrieve details for a single payment log entry (shopping_mall_ai_backend_order_payment_logs).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"ID of the order containing the payment.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"ID of the payment for which the log entry belongs.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentLogId","description":"Unique identifier of the payment log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed payment log record for the specified order payment log ID.","typeName":"IShoppingMallAiBackendOrderPaymentLog"},"name":"at","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments/{orderPaymentId}/orderPaymentLogs/{orderPaymentLogId}","method":"get","authorizationRole":"admin"},{"specification":"This endpoint enables creation of a new payment log entry for a specific order payment, inserting into shopping_mall_ai_backend_order_payment_logs. It is used for recording payment request events, gateway responses, error states, and business milestones in the payment lifecycle. The request body adheres to a strict creation schema specifying all required context and metadata. Roles authorized include order owner, administrators, and finance. All created logs are audit-traced. Nonexistent or unauthorized records will yield clear failure. Related operations include update, retrieval, and deletion of logs. The audit log is essential for compliance and operational traceability.","description":"Create a new payment log entry for a given order payment. This is invoked after a payment provider interaction, error, or business event, and stores all required context for compliance and auditing in the system. Security rules require ownership, admin, or finance role. The creation schema must be fully respected, capturing log type and log context. This operation powers traceability, dispute management, and compliance. All creates are tracked for audit purposes. Related endpoints include log entry update, retrieval, and listing.","summary":"Create a new payment log record for an order payment (shopping_mall_ai_backend_order_payment_logs).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"ID of the order for which the payment log is being created.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"ID of the payment for which the log is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment log creation data matching schema (log type, log context, etc).","typeName":"IShoppingMallAiBackendOrderPaymentLog.ICreate"},"responseBody":{"description":"Created payment log record for the order payment, for compliance/audit.","typeName":"IShoppingMallAiBackendOrderPaymentLog"},"name":"create","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderPayments/{orderPaymentId}/orderPaymentLogs","method":"post","authorizationRole":"customer"},{"specification":"This endpoint enables creation of a new payment log entry for a specific order payment, inserting into shopping_mall_ai_backend_order_payment_logs. It is used for recording payment request events, gateway responses, error states, and business milestones in the payment lifecycle. The request body adheres to a strict creation schema specifying all required context and metadata. Roles authorized include order owner, administrators, and finance. All created logs are audit-traced. Nonexistent or unauthorized records will yield clear failure. Related operations include update, retrieval, and deletion of logs. The audit log is essential for compliance and operational traceability.","description":"Create a new payment log entry for a given order payment. This is invoked after a payment provider interaction, error, or business event, and stores all required context for compliance and auditing in the system. Security rules require ownership, admin, or finance role. The creation schema must be fully respected, capturing log type and log context. This operation powers traceability, dispute management, and compliance. All creates are tracked for audit purposes. Related endpoints include log entry update, retrieval, and listing.","summary":"Create a new payment log record for an order payment (shopping_mall_ai_backend_order_payment_logs).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"ID of the order for which the payment log is being created.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"ID of the payment for which the log is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment log creation data matching schema (log type, log context, etc).","typeName":"IShoppingMallAiBackendOrderPaymentLog.ICreate"},"responseBody":{"description":"Created payment log record for the order payment, for compliance/audit.","typeName":"IShoppingMallAiBackendOrderPaymentLog"},"name":"create","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments/{orderPaymentId}/orderPaymentLogs","method":"post","authorizationRole":"admin"},{"specification":"This endpoint updates a payment log entry, identified by orderId, orderPaymentId, and orderPaymentLogId, in the shopping_mall_ai_backend_order_payment_logs table. Intended use cases include correcting an audit log context, annotating for compliance, or appending post-mortem details. Only mutable fields (log context, remarks) are updatable; timestamp and core identifiers are immutable. Access is limited to order owners, admins, or specialized compliance personnel. All updates are fully tracked for compliance and audit purposes. Invalid updates or permissions yield clear errors. This complements create, retrieve, and delete operations.","description":"Update fields of a specific payment log entry for an order payment, where those fields are explicitly allowed by the schema. Use cases include error correction, compliance annotation, or metadata supplementation for later audit. Security is enforced so only order owner or authorized admin roles may update the log entry. Related endpoints include creation, retrieval, and listing/payment log deletion. Any attempt to update immutable fields will result in an error.","summary":"Update payment log metadata or allowed fields for an order payment log (shopping_mall_ai_backend_order_payment_logs).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"ID of the order in question.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"ID of the payment for which this log is targeted.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentLogId","description":"ID of the payment log entry being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for this payment log entry, permitted by the schema (log context, remarks, etc).","typeName":"IShoppingMallAiBackendOrderPaymentLog.IUpdate"},"responseBody":{"description":"Updated payment log record with new audit context or annotation.","typeName":"IShoppingMallAiBackendOrderPaymentLog"},"name":"update","path":"/shoppingMallAiBackend/customer/orders/{orderId}/orderPayments/{orderPaymentId}/orderPaymentLogs/{orderPaymentLogId}","method":"put","authorizationRole":"customer"},{"specification":"This endpoint updates a payment log entry, identified by orderId, orderPaymentId, and orderPaymentLogId, in the shopping_mall_ai_backend_order_payment_logs table. Intended use cases include correcting an audit log context, annotating for compliance, or appending post-mortem details. Only mutable fields (log context, remarks) are updatable; timestamp and core identifiers are immutable. Access is limited to order owners, admins, or specialized compliance personnel. All updates are fully tracked for compliance and audit purposes. Invalid updates or permissions yield clear errors. This complements create, retrieve, and delete operations.","description":"Update fields of a specific payment log entry for an order payment, where those fields are explicitly allowed by the schema. Use cases include error correction, compliance annotation, or metadata supplementation for later audit. Security is enforced so only order owner or authorized admin roles may update the log entry. Related endpoints include creation, retrieval, and listing/payment log deletion. Any attempt to update immutable fields will result in an error.","summary":"Update payment log metadata or allowed fields for an order payment log (shopping_mall_ai_backend_order_payment_logs).","authorizationRoles":["customer","admin"],"parameters":[{"name":"orderId","description":"ID of the order in question.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"ID of the payment for which this log is targeted.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentLogId","description":"ID of the payment log entry being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for this payment log entry, permitted by the schema (log context, remarks, etc).","typeName":"IShoppingMallAiBackendOrderPaymentLog.IUpdate"},"responseBody":{"description":"Updated payment log record with new audit context or annotation.","typeName":"IShoppingMallAiBackendOrderPaymentLog"},"name":"update","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments/{orderPaymentId}/orderPaymentLogs/{orderPaymentLogId}","method":"put","authorizationRole":"admin"},{"specification":"This operation deletes a single order payment log record belonging to a specific order payment of a specific order. It targets the 'shopping_mall_ai_backend_order_payment_logs' table, which stores technical and business audit trail data for all payment-related activities and outcomes for each payment attempt. The delete method here is a hard delete, as there is no soft deletion field in the schema for this table. This endpoint requires three path parameters: the orderId (parent order), the orderPaymentId (the payment involved), and the orderPaymentLogId (the specific log to erase). Only an 'admin' should be able to execute this operation, ensuring compliance and auditability for payment data trace deletions. This method is used rarely, typically when a log entry is proven to be erroneous or presents privacy/regulatory requirements for expunction. Related endpoints include GET for details and PATCH for log trace searches.","path":"/shoppingMallAiBackend/admin/orders/{orderId}/orderPayments/{orderPaymentId}/orderPaymentLogs/{orderPaymentLogId}","method":"delete","description":"Delete a particular payment log entry for a specified order payment under the given order. This operation permanently removes the record from the 'shopping_mall_ai_backend_order_payment_logs' table, which keeps a full audit trail of payment request/response/error events for all payment attempts within the system. Hard deletion is used since there is no soft deletion column. Only platform administrators are authorized to execute this removal to maintain compliance and regulatory integrity. Deletion is permitted only with appropriate justification (e.g., privacy law compliance, duplicate data resolution, or correcting erroneous logs) and should be logged by the system for accountability. Attempting to delete non-existent or already-deleted records returns an error. Related: payment log detail/view, log list/search APIs for audit purposes.","summary":"Delete a payment log for a specific order payment (shopping_mall_ai_backend_order_payment_logs table)","parameters":[{"name":"orderId","description":"The unique identifier of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentId","description":"The unique identifier of the order payment to which the log belongs.","schema":{"type":"string","format":"uuid"}},{"name":"orderPaymentLogId","description":"The unique identifier of the order payment log record to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves a paginated and filterable list of coupon templates, supporting complex queries, search, and sorting operations. It covers the 'shopping_mall_ai_backend_coupon_templates' table, which represents definitions and rulesets of each unique coupon type, containing business codes, rules, validity, and constraints. This endpoint allows admin users to locate templates by parameters like name, code, active status, and validity period. The result is a page of coupon template summaries. Only users with 'admin' role can perform this operation. Related endpoints: Get detail (GET), Create (POST), Update (PUT), Delete (DELETE).","path":"/shoppingMallAiBackend/admin/couponTemplates","method":"patch","description":"Search and retrieve a filtered, paginated list of coupon templates from the system. This operation queries the 'shopping_mall_ai_backend_coupon_templates' table, allowing search by template name, code, type, validity window, enabled status, and other business attributes. The results are paginated and can be sorted by created_at, valid_from, or custom order. Only admin users can search coupon templates. This endpoint is essential for large-scale management of coupon rules, promotions, or compliance checks. Error cases include invalid search conditions or unauthorized user access.","summary":"Search, filter, and page through coupon templates (shopping_mall_ai_backend_coupon_templates table)","parameters":[],"requestBody":{"description":"Search criteria and pagination for coupon templates retrieval.","typeName":"IShoppingMallAiBackendCouponTemplate.IRequest"},"responseBody":{"description":"Paginated list of coupon template summaries matching search conditions.","typeName":"IPageIShoppingMallAiBackendCouponTemplate.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve the details for a single coupon template using its unique identifier. This operation interacts with the 'shopping_mall_ai_backend_coupon_templates' table, which defines master policy and rules for reusable coupon types. GET is used for readonly view and does not alter state. Any admin user may access this endpoint to inspect current rules, validity periods, and template metadata. Related: PATCH for search/filter, POST for creation, PUT for update, DELETE for removal.","path":"/shoppingMallAiBackend/admin/couponTemplates/{couponTemplateId}","method":"get","description":"Fetch the complete details of a specific coupon template, as stored in the 'shopping_mall_ai_backend_coupon_templates' table. This endpoint returns metadata, naming, validity intervals, rule sets, discount logic, and status for the template. Only admin users with sufficient authorization may access this content for policy review, campaign design, or compliance checks. The operation requires the couponTemplateId as a path parameter. Not found or deleted results in an appropriate error. This endpoint should be used together with template list/search and mutation endpoints for campaign management.","summary":"Get detailed information for a coupon template (shopping_mall_ai_backend_coupon_templates table)","parameters":[{"name":"couponTemplateId","description":"The unique identifier of the coupon template.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full coupon template entity data.","typeName":"IShoppingMallAiBackendCouponTemplate"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"This operation creates a new coupon template in the system. It writes to the 'shopping_mall_ai_backend_coupon_templates' table, which defines coupon rules, codes, business logic, and related event/campaign policies. Admin users can create templates with custom names, descriptions, types, validity ranges, discount amounts or percentages, and applicable rules. Creation requires all mandatory fields, and on success, returns the created template in detail. Used for launching new marketing events, seasonal campaigns, or permanent incentives. Related: Search/Search (PATCH), detail (GET), update (PUT), removal (DELETE).","path":"/shoppingMallAiBackend/admin/couponTemplates","method":"post","description":"Create a new coupon template record in the 'shopping_mall_ai_backend_coupon_templates' table with all required business policy, validity, and rule attributes. Only admin users may call this endpoint. Required input includes code, name, type, validity dates, discount logic, and whether issuance is enabled. If a duplicate code exists, returns a conflict error. Upon creation, returns the complete template entity. Use for ongoing or event-based coupon programs in the shopping mall.","summary":"Create a new coupon template (shopping_mall_ai_backend_coupon_templates table)","parameters":[],"requestBody":{"description":"The creation parameters and policy definition for a new coupon template.","typeName":"IShoppingMallAiBackendCouponTemplate.ICreate"},"responseBody":{"description":"Details of the newly created coupon template.","typeName":"IShoppingMallAiBackendCouponTemplate"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update an existing coupon template with new business rules, validity, or description. PATCHes the matching record in 'shopping_mall_ai_backend_coupon_templates' table based on its unique ID. Admin users may change policy text, enable status, validity range, discount logic, or metadata. Returns the new template state if successful. Operation is forbidden for non-admins. Related: Detail (GET), search (PATCH), create (POST), delete (DELETE).","path":"/shoppingMallAiBackend/admin/couponTemplates/{couponTemplateId}","method":"put","description":"Update an existing coupon template record (identified by couponTemplateId) in 'shopping_mall_ai_backend_coupon_templates'. Allows admin users to modify fields like name, rules, business description, validity, or other related policy logic. The endpoint expects the full set of updatable template fields in the request body, and returns the updated template entity on success. Operation fails with errors on missing, locked, or deleted records, or for validation violations. This endpoint must be used in compliance with business logic for campaign lifecycle management.","summary":"Update a coupon template (shopping_mall_ai_backend_coupon_templates table)","parameters":[{"name":"couponTemplateId","description":"The identifier of the coupon template to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values and attributes for the coupon template to update.","typeName":"IShoppingMallAiBackendCouponTemplate.IUpdate"},"responseBody":{"description":"Coupon template as updated and saved.","typeName":"IShoppingMallAiBackendCouponTemplate"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (soft delete) a coupon template, marking it deleted for future exclusion but retaining it as an audit/compliance record. This operation sets the deleted_at timestamp in the 'shopping_mall_ai_backend_coupon_templates' table. Only admin users may execute this. Coupon templates are never hard deleted for legal trace. Deletion is only allowed if no issued/use records exist, or after proper compliance check. Related endpoints: detail (GET), update (PUT), search (PATCH).","path":"/shoppingMallAiBackend/admin/couponTemplates/{couponTemplateId}","method":"delete","description":"Soft-delete a coupon template record identified by couponTemplateId, by setting the deleted_at column in the DB, using business/compliance logic for retention. This is never a true removal; the template data remains for auditing and history, but is hidden from active issuance/use. Only admin users are permitted to call this action. Returns nothing on success. Attempts to delete non-existent or already deleted records return an error. Always log the action for compliance/evidence.","summary":"Soft-delete a coupon template (shopping_mall_ai_backend_coupon_templates table)","parameters":[{"name":"couponTemplateId","description":"The identifier of the coupon template to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves a paginated/searchable list of issued coupon records (IShoppingMallAiBackendIssuedCoupon), supporting filter criteria such as code, customer, template, issue/use date, and status. Operates over the 'shopping_mall_ai_backend_issued_coupons' table, which contains all issued/assigned coupons to customers. Only 'admin' users are allowed to query this information for compliance, customer support, or business analytics. Results are paged and can be sorted by issue/use/expiry or code. Acts as primary API for coupon lifecycle management at the issued instance level. Related: GET detail, POST create, PUT update, DELETE delete.","path":"/shoppingMallAiBackend/admin/issuedCoupons","method":"patch","description":"Search issued coupons with flexible parameters (by code, owner, template, status, issue or expiry date, and more) and retrieve paginated results. This queries the 'shopping_mall_ai_backend_issued_coupons' table, used for full audit, user support, marketing analysis or compliance. Results may show customer info, template link, status, timestamps, and code fields. Admins only have access. Combine with detail, mutation, and history endpoints for full coupon tracking.","summary":"Search for issued coupon records (shopping_mall_ai_backend_issued_coupons table)","parameters":[],"requestBody":{"description":"Search criteria and pagination controls for issued coupons.","typeName":"IShoppingMallAiBackendIssuedCoupon.IRequest"},"responseBody":{"description":"Paginated result containing issued coupon summaries.","typeName":"IPageIShoppingMallAiBackendIssuedCoupon.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Get the full details of an issued coupon using its unique id. Reads from 'shopping_mall_ai_backend_issued_coupons', which contains coupon assignment, status, timing, and usage data per customer record. Typically used by admins for audit or support. Requires admin authorization. Related: PATCH search, POST create, PUT update, DELETE erase.","path":"/shoppingMallAiBackend/admin/issuedCoupons/{issuedCouponId}","method":"get","description":"Fetch a single issued coupon record, identified by issuedCouponId, from the 'shopping_mall_ai_backend_issued_coupons' table. This returns the coupon assignment, customer reference, template linkage, current status, code, usage timestamps, and expiration info. Only admin may invoke. Used together with mutation and search endpoints for full coupon support, audit, or compliance intervention.","summary":"Get details of an issued coupon (shopping_mall_ai_backend_issued_coupons table)","parameters":[{"name":"issuedCouponId","description":"Unique identifier of the issued coupon (IShoppingMallAiBackendIssuedCoupon).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the issued coupon record.","typeName":"IShoppingMallAiBackendIssuedCoupon"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new issued coupon instance for a customer and template. Writes to the 'shopping_mall_ai_backend_issued_coupons' table, creating assignment of a coupon instance to a specific customer. Enforces issuance rule checks, uniqueness, validity, and uses business logic for assignment (expiration date, status, etc.). Only admins may issue directly using this route. Used by support agents, retention campaigns, or exceptional (e.g., compensation) scenarios. Related to template search, lifecycle management, usage logs.","path":"/shoppingMallAiBackend/admin/issuedCoupons","method":"post","description":"Directly assign (issue) a coupon to a specific customer using a particular template and attributes. This endpoint inserts a new row in 'shopping_mall_ai_backend_issued_coupons', with all required references, expiration, and status fields. Transfers administrative rights for exceptional coupon cases or events. Returns created coupon details. Fails for duplicates, invalid template, or business rule violation.","summary":"Issue a new coupon to a customer (shopping_mall_ai_backend_issued_coupons table)","parameters":[],"requestBody":{"description":"Parameters for assigning new issued coupon, including template, owner, and expiry.","typeName":"IShoppingMallAiBackendIssuedCoupon.ICreate"},"responseBody":{"description":"Complete data for the newly issued coupon instance.","typeName":"IShoppingMallAiBackendIssuedCoupon"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update an issued coupon for a customer (status changes, expiry, etc.) in 'shopping_mall_ai_backend_issued_coupons' table. Allows admins to manage coupon lifecycle or resolve account support issues. Returns updated entity on success. Endpoint is for admins only, referenced by unique coupon id. Related: at (detail view), search (PATCH), create (POST), erase (DELETE) endpoints.","path":"/shoppingMallAiBackend/admin/issuedCoupons/{issuedCouponId}","method":"put","description":"Update any or all mutable attributes of a given issued coupon record in the 'shopping_mall_ai_backend_issued_coupons' table, such as status, expiry, or administrative remarks. Admin role required. Referenced by issuedCouponId in the path. Fails for locked/deleted records or business rule violation. Use together with other coupon tracking routes for full lifecycle management.","summary":"Update an existing issued coupon (shopping_mall_ai_backend_issued_coupons table)","parameters":[{"name":"issuedCouponId","description":"ID of the issued coupon to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields (status, expiry, etc.) for the issued coupon.","typeName":"IShoppingMallAiBackendIssuedCoupon.IUpdate"},"responseBody":{"description":"Updated issued coupon record.","typeName":"IShoppingMallAiBackendIssuedCoupon"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (soft delete) an issued coupon record, using the deleted_at column to exclude from future queries while preserving compliance history. Record is never hard deleted. Only admin may execute. Used for handling account closure, privacy law fulfillment, or correcting erroneous assignments. Returns nothing on success. Related endpoints: GET for details, PATCH for search, POST/PUT for mutation.","path":"/shoppingMallAiBackend/admin/issuedCoupons/{issuedCouponId}","method":"delete","description":"Soft-delete the issued coupon identified by issuedCouponId in 'shopping_mall_ai_backend_issued_coupons'. This operation sets deleted_at in the database and removes the coupon from active queries, but preserves for audit and regulatory proof. Only admins can perform this, and it must be logged for compliance. Attempts to delete non-existent or already-removed coupons throw an error. Not used for hard deletion.","summary":"Soft-delete an issued coupon record (shopping_mall_ai_backend_issued_coupons table)","parameters":[{"name":"issuedCouponId","description":"Unique identifier for issued coupon to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Search, paginate, and filter coupon event or audit history records in the system. This queries 'shopping_mall_ai_backend_coupon_histories', which tracks all business events for coupons (issue, use, expiry, cancel, admin intervention, etc.), including actor type, action, remarks, and timestamps. Only admins can perform this. This data supports business analytics, audit proof requirements, and customer support workflows. Use together with coupon/issued coupon endpoints for end-to-end lifecycle and compliance management.","path":"/shoppingMallAiBackend/admin/couponHistories","method":"patch","description":"Get a filtered and paginated set of coupon usage/audit event records from 'shopping_mall_ai_backend_coupon_histories'. Supported filter controls include coupon code, issued coupon id, actor, action, time range, and remarks. Returns evidence records for audit/reporting. Only available to admin users due to sensitive information (e.g., customer privacy, compliance reporting). Related endpoints: coupon & issued coupon GET/search, mutation endpoints for root entity management.","summary":"Search/filter/paginate coupon audit event records (shopping_mall_ai_backend_coupon_histories table)","parameters":[],"requestBody":{"description":"Search and filter parameters, sort and page controls for coupon history.","typeName":"IShoppingMallAiBackendCouponHistory.IRequest"},"responseBody":{"description":"Paginated list of coupon history (audit/event) records.","typeName":"IPageIShoppingMallAiBackendCouponHistory.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a detailed coupon history record by its unique identifier. ...","path":"/shoppingMallAiBackend/admin/couponHistories/{couponHistoryId}","method":"get","description":"Fetch a single coupon history entry based on its UUID. ...","summary":"Retrieve detailed coupon history by ID (shopping_mall_ai_backend_coupon_histories).","parameters":[{"name":"couponHistoryId","description":"Target coupon history's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete coupon history audit record.","typeName":"IShoppingMallAiBackendCouponHistory"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new coupon history record in the shopping_mall_ai_backend_coupon_histories table. ...","path":"/shoppingMallAiBackend/admin/couponHistories","method":"post","description":"Add a new coupon history entry that reflects a business workflow event regarding an issued coupon. ...","summary":"Create a new coupon history event (shopping_mall_ai_backend_coupon_histories).","parameters":[],"requestBody":{"description":"Coupon history creation object (business event audit record).","typeName":"IShoppingMallAiBackendCouponHistory.ICreate"},"responseBody":{"description":"Resulting coupon history audit record.","typeName":"IShoppingMallAiBackendCouponHistory"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update/correct a coupon history event in the audit log, ...","path":"/shoppingMallAiBackend/admin/couponHistories/{couponHistoryId}","method":"put","description":"Modify an existing coupon history record by its unique identifier. ...","summary":"Update coupon history event by ID (shopping_mall_ai_backend_coupon_histories).","parameters":[{"name":"couponHistoryId","description":"Target coupon history's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields/annotations to update in the coupon history event.","typeName":"IShoppingMallAiBackendCouponHistory.IUpdate"},"responseBody":{"description":"The updated coupon history audit record.","typeName":"IShoppingMallAiBackendCouponHistory"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete a coupon history event from the audit log ... records are soft-deleted (marked with deleted_at) ...","path":"/shoppingMallAiBackend/admin/couponHistories/{couponHistoryId}","method":"delete","description":"Soft-delete (mark as deleted) a specific coupon history record ...","summary":"Delete coupon history record by ID (soft delete).","parameters":[{"name":"couponHistoryId","description":"Target coupon history's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Advanced paginated search across all coupon snapshots ...","path":"/shoppingMallAiBackend/admin/couponSnapshots","method":"patch","description":"Search and retrieve a filtered, paginated set of coupon snapshots. ...","summary":"Search and paginate coupon snapshots (shopping_mall_ai_backend_coupon_snapshots).","parameters":[],"requestBody":{"description":"Search and pagination criteria for coupon snapshots.","typeName":"IShoppingMallAiBackendCouponSnapshot.IRequest"},"responseBody":{"description":"Paginated result set of coupon snapshot summaries.","typeName":"IPageIShoppingMallAiBackendCouponSnapshot.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetch full details for a single coupon snapshot record by its unique ID ...","path":"/shoppingMallAiBackend/admin/couponSnapshots/{couponSnapshotId}","method":"get","description":"Fetch a single point-in-time snapshot of an issued coupon by its UUID. ...","summary":"Retrieve detailed coupon snapshot by ID (shopping_mall_ai_backend_coupon_snapshots).","parameters":[{"name":"couponSnapshotId","description":"Target coupon snapshot's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed coupon snapshot record at the given point in time.","typeName":"IShoppingMallAiBackendCouponSnapshot"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a historical coupon snapshot in the shopping_mall_ai_backend_coupon_snapshots table. ...","path":"/shoppingMallAiBackend/admin/couponSnapshots","method":"post","description":"Insert a new coupon snapshot. ...","summary":"Create a new coupon snapshot (shopping_mall_ai_backend_coupon_snapshots).","parameters":[],"requestBody":{"description":"Complete coupon snapshot creation object.","typeName":"IShoppingMallAiBackendCouponSnapshot.ICreate"},"responseBody":{"description":"Inserted coupon snapshot audit record.","typeName":"IShoppingMallAiBackendCouponSnapshot"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update information on a previously recorded coupon snapshot in the shopping_mall_ai_backend_coupon_snapshots table. ...","path":"/shoppingMallAiBackend/admin/couponSnapshots/{couponSnapshotId}","method":"put","description":"Update a coupon snapshot record by its UUID. ...","summary":"Update coupon snapshot by ID (shopping_mall_ai_backend_coupon_snapshots).","parameters":[{"name":"couponSnapshotId","description":"Target coupon snapshot's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the coupon snapshot record.","typeName":"IShoppingMallAiBackendCouponSnapshot.IUpdate"},"responseBody":{"description":"Updated coupon snapshot record.","typeName":"IShoppingMallAiBackendCouponSnapshot"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Soft-delete a coupon snapshot (set deleted_at). ...","path":"/shoppingMallAiBackend/admin/couponSnapshots/{couponSnapshotId}","method":"delete","description":"Mark the specified coupon snapshot record as deleted by setting its deleted_at timestamp. ...","summary":"Delete coupon snapshot by ID (soft delete, compliance trace).","parameters":[{"name":"couponSnapshotId","description":"Target coupon snapshot's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Advanced search (with filtering and pagination) for coupon usage records ...","path":"/shoppingMallAiBackend/admin/couponUsages","method":"patch","description":"Search for coupon usage records with advanced filtering, supporting pagination, status filter, timeframes, and target customer or order. ...","summary":"Search and filter coupon usages (shopping_mall_ai_backend_coupon_usages).","parameters":[],"requestBody":{"description":"Filter and pagination criteria for coupon usages search.","typeName":"IShoppingMallAiBackendCouponUsage.IRequest"},"responseBody":{"description":"Paginated listing of coupon usage summary rows.","typeName":"IPageIShoppingMallAiBackendCouponUsage.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Fetch a single coupon usage record by its UUID from shopping_mall_ai_backend_coupon_usages. ...","path":"/shoppingMallAiBackend/admin/couponUsages/{couponUsageId}","method":"get","description":"Retrieve detailed information about a specific coupon usage event by its unique identifier. ...","summary":"Retrieve coupon usage by ID (detailed, shopping_mall_ai_backend_coupon_usages).","parameters":[{"name":"couponUsageId","description":"Target coupon usage's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full coupon usage record, including references and event metadata.","typeName":"IShoppingMallAiBackendCouponUsage"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Register a new coupon usage event in shopping_mall_ai_backend_coupon_usages. ...","path":"/shoppingMallAiBackend/admin/couponUsages","method":"post","description":"Create a new coupon usage entry, typically invoked post-payment when a coupon is applied to an order. ...","summary":"Create a new coupon usage record (shopping_mall_ai_backend_coupon_usages).","parameters":[],"requestBody":{"description":"Coupon usage creation object specifying relation to coupon, order, customer, and usage parameters.","typeName":"IShoppingMallAiBackendCouponUsage.ICreate"},"responseBody":{"description":"Newly created coupon usage record.","typeName":"IShoppingMallAiBackendCouponUsage"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update a coupon usage record identified by couponUsageId. This operation allows authorized users (e.g., admin) to modify the details of a coupon usage record such as associating it with another order, updating the redemption timestamp, or correcting the associated customer information. The operation is mapped to the shopping_mall_ai_backend_coupon_usages table, and input data must match the available updatable fields. Business rules ensure that only permissible fields can be changed after redemption, and historic audit trails must be preserved for compliance. Related business logic includes updating coupon usage status, re-validating order associations, and ensuring integrity of coupon-to-order mapping. Audit logging and compliance with coupon policies are mandatory. Operation errors are triggered when the coupon usage is not found, is in a non-editable state, or when attempting to link to an invalid order/customer. Authorization restricted to admin role.","description":"Modify an existing coupon usage record by its unique identifier (couponUsageId) in the shopping mall AI backend system. This API endpoint updates fields such as the referenced issued coupon, target order, customer, and usage timestamp. It enforces strict audit trails to comply with coupon usage integrity and compliance requirements. Only fields that are not immutable (e.g., association fields, used_at) may be edited, while business constraints prevent alteration of primary redemption details after finalization. The endpoint integrates with compliance and coupon lifecycle tables to provide a robust audit record of all changes. Errors may occur if the coupon usage is in a locked or expired state, if referenced fields violate business rules, or if the resource does not exist. Only users with 'admin' privileges may execute this operation. All modification activities are fully logged for future auditability and rollback if required.","summary":"Update a coupon usage record by couponUsageId (shopping_mall_ai_backend_coupon_usages table).","parameters":[{"name":"couponUsageId","description":"Unique identifier for the coupon usage record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the coupon usage record (order, customer, used_at, etc).","typeName":"IShoppingMallAiBackendCouponUsage.IUpdate"},"responseBody":{"description":"The updated coupon usage record with all latest values and references.","typeName":"IShoppingMallAiBackendCouponUsage"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"update","path":"/shoppingMallAiBackend/admin/couponUsages/{couponUsageId}","method":"put"},{"specification":"Delete a coupon usage record by couponUsageId. This operation removes the specified coupon usage from the system. Since the coupon usage table includes a soft delete timestamp ('deleted_at'), this operation will perform a soft delete for compliance and audit trail reasons. The operation is mapped to the shopping_mall_ai_backend_coupon_usages table. The API ensures the existence of the record before deleting and updates the 'deleted_at' field accordingly. This action must comply with business policies prohibiting removal of coupon usages attached to finalized or reconciled orders. Audit logging is mandatory. Only admin users may perform this operation. Attempting to delete an already deleted or non-existent record will result in an appropriate error.","description":"Soft-delete a coupon usage record identified by couponUsageId from the shopping mall AI backend database. The operation updates the 'deleted_at' field for the specified coupon usage to preserve audit trail and regulatory compliance, rather than removing the record permanently. Only coupon usages not attached to locked or reconciled orders are eligible for deletion. The endpoint returns a confirmation or success message upon completion. If the coupon usage record does not exist or is already soft-deleted, a not found or idempotent success result is returned. All delete operations are logged for auditing. Access is restricted to the 'admin' role.","summary":"Soft-delete a coupon usage record by couponUsageId (shopping_mall_ai_backend_coupon_usages table).","parameters":[{"name":"couponUsageId","description":"Unique identifier of the coupon usage record to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationRoles":["admin"],"name":"erase","path":"/shoppingMallAiBackend/admin/couponUsages/{couponUsageId}","method":"delete"},{"specification":"Search, filter, and paginate point wallet records for customers in the shopping mall backend. This operation retrieves point wallet summaries with advanced filter options (e.g., by customer ID, updated_at, current balance thresholds). The endpoint maps to the shopping_mall_ai_backend_points table. Typical use cases include administrative dashboards reviewing point balances, targeted customer reward audits, or reporting. The request body allows specifying search, ordering, and pagination information. Returned results include point wallet records and pagination metadata. Role-restricted for admin users to protect sensitive financial information.","description":"Retrieve a paginated, searchable list of customer point wallet records within the shopping mall AI backend. This operation supports complex filters such as customer association, point wallet balance ranges, or update timestamps. The API is backed by the shopping_mall_ai_backend_points schema table and returns summary information for each wallet. The response includes pagination objects and list data optimized for administrative review or reporting. Only authorized admin users can access point wallet data and search by sensitive criteria. Errors are returned if parameters are invalid, unauthorized, or incompatible with business logic for point data privacy.","summary":"Search and paginate point wallet records (shopping_mall_ai_backend_points table).","parameters":[],"requestBody":{"description":"Search, filter, and pagination options for point wallet records.","typeName":"IShoppingMallAiBackendPoint.IRequest"},"responseBody":{"description":"Paginated point wallet results, including data and pagination metadata.","typeName":"IPageIShoppingMallAiBackendPoint"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search","path":"/shoppingMallAiBackend/admin/points","method":"patch"},{"specification":"Retrieve a single customer point wallet record by its unique pointId. This operation returns the full state of a point wallet including customer association and latest balance. The operation is mapped to the shopping_mall_ai_backend_points table, with pointId as a unique identifier (UUID). This endpoint is typically used in admin dashboards or by point reward system integrators to display or verify an individual wallet. Authorization is required for admin. Errors occur if the point wallet does not exist or has been soft-deleted.","description":"Fetch the details of a customer point wallet by its unique pointId in the shopping mall AI backend system. The response includes all wallet properties, customer association, and latest balance data. The operation validates the existence of the point wallet and checks admin authorization before returning details. Audit logging applies to data reads for sensitive information management. If the record is missing or deleted, a not found error is returned. Available only to admin users for privacy policy compliance.","summary":"Get a customer point wallet record by pointId (shopping_mall_ai_backend_points table).","parameters":[{"name":"pointId","description":"Unique identifier of the point wallet to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete point wallet record for the specified pointId.","typeName":"IShoppingMallAiBackendPoint"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at","path":"/shoppingMallAiBackend/admin/points/{pointId}","method":"get"},{"specification":"Create a new customer point wallet record. This operation inserts a new row in the shopping_mall_ai_backend_points table, associating the wallet with a specific customer and initializing the point balance. It enforces uniqueness on customer_id and proper audit trail for creation. Only an admin is permitted to create point wallets. The request body must conform to the creation DTO and include all business-required fields. Creating a wallet for a customer who already has an active point wallet will trigger a constraint error. Successful creation returns the full new point wallet object.","description":"Register a new customer point wallet in the shopping mall AI backend. This API requires customer association and starting balance data in the request body. The endpoint maps to the shopping_mall_ai_backend_points table and enforces privilege, field validation, and business rules. Upon successful creation, a full wallet DTO is returned. Attempting to create a duplicate wallet for the same customer will fail. Admin authorization and compliance logging are enforced. Only admins can use this operation.","summary":"Create a new customer point wallet (shopping_mall_ai_backend_points table).","parameters":[],"requestBody":{"description":"Data for customer association and starting point wallet balance.","typeName":"IShoppingMallAiBackendPoint.ICreate"},"responseBody":{"description":"The newly created point wallet record.","typeName":"IShoppingMallAiBackendPoint"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"create","path":"/shoppingMallAiBackend/admin/points","method":"post"},{"specification":"Update an existing customer point wallet record by pointId. Updates are restricted to mutable fields (such as balance or remarks) and cannot change the customer association. The pointId uniquely identifies the wallet. The endpoint updates the shopping_mall_ai_backend_points table according to the provided data. Integrity enforcement and audit logging are required. Errors are returned for invalid pointId, attempt to update immutable fields, or violation of point management policies. Only admins are allowed to perform this update.","description":"Modify a customer point wallet's information as identified by pointId. This API operation supports changing permissible fields (like balance), with strict validation to prevent tampering with immutable fields. The operation maps to the shopping_mall_ai_backend_points table. Audit records ensure traceability and rollback. Only admins have permission. Errors may include locked or non-existent wallets, or invalid update content. The response returns the fully updated wallet record.","summary":"Update a customer point wallet by pointId (shopping_mall_ai_backend_points table).","parameters":[{"name":"pointId","description":"Unique identifier of the point wallet to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the point wallet (excluding customer_id).","typeName":"IShoppingMallAiBackendPoint.IUpdate"},"responseBody":{"description":"The updated customer point wallet record.","typeName":"IShoppingMallAiBackendPoint"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"update","path":"/shoppingMallAiBackend/admin/points/{pointId}","method":"put"},{"specification":"Delete (soft delete) a customer point wallet identified by pointId. This operation updates the deleted_at field in the shopping_mall_ai_backend_points table, auditing the action for compliance. Deletion is not physical removal but a logical deletion to preserve transaction and audit trails. Only wallets not referenced in active orders or with nonzero balance may be deleted unless business policy allows. The action is only available to system admins, with stringent permission checks and error feedback for disallowed deletions or missing wallets.","description":"Soft-delete a customer point wallet from the system by its unique pointId. The operation sets the deleted_at timestamp for policy compliance, without hard-deleting any data. An admin is required for this action, and audit trails are maintained. The endpoint returns success or confirmation data. Not found or idempotent success is returned if the wallet does not exist or is already deleted. Any wallet in use by non-finalized transactions may not be deleted unless a policy override applies. All deletes are logged. Only admin role.","summary":"Soft-delete a customer point wallet by pointId (shopping_mall_ai_backend_points table).","parameters":[{"name":"pointId","description":"Unique identifier of the point wallet to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationRoles":["admin"],"name":"erase","path":"/shoppingMallAiBackend/admin/points/{pointId}","method":"delete"},{"specification":"Search, filter, and paginate point wallet transaction (point history) records. This operation queries the shopping_mall_ai_backend_point_histories table using a flexible request body for search fields (point_wallet_id, change_type, actor_type), supporting business use cases like reviewing reward redemptions, points accrual, and compliance/audit review. Pagination and sort order options are included. The API ensures sensitive data protection and is only available to admin. Output is paginated with metadata. Errors may include invalid field combos or unauthorized user.","description":"Retrieve a list of point wallet transaction histories from the shopping mall AI backend. This endpoint supports complex filtering—such as by wallet, type of transaction, actor, and creation date—as well as pagination and sort ordering. Results are returned in paginated form for use in dashboards, financial audits, and compliance. Authorization restricts access to 'admin' users. Errors can be triggered by bad queries or unauthorized access. All accesses and results are logged for compliance.","summary":"Search and paginate point wallet transaction histories (shopping_mall_ai_backend_point_histories table).","parameters":[],"requestBody":{"description":"Filters, pagination, and sort settings for point history search.","typeName":"IShoppingMallAiBackendPointHistory.IRequest"},"responseBody":{"description":"Paginated point history records with summary and detail fields.","typeName":"IPageIShoppingMallAiBackendPointHistory"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search","path":"/shoppingMallAiBackend/admin/pointHistories","method":"patch"},{"specification":"Fetch a single point wallet transaction (history) record by pointHistoryId. Mapped to shopping_mall_ai_backend_point_histories, using the unique record identifier. Returns the exact state of the transaction with all associated fields. Used for audit, compliance, and review of a particular point reward event or redemption. Only available to admin role. Errors (e.g., not found) returned if record does not exist or user lacks authorization.","description":"Get details of a single point wallet transaction by pointHistoryId from the shopping mall AI backend. The output includes all fields and links for the specified transaction record. Authorization required is admin. Audit log is triggered for all sensitive financial data lookups. If a record is missing or deleted, a not found error occurs. No record is returned for unauthorized or soft-deleted histories.","summary":"Get a single point wallet transaction history by pointHistoryId (shopping_mall_ai_backend_point_histories table).","parameters":[{"name":"pointHistoryId","description":"Unique identifier of the point history/transaction to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Point wallet transaction record for the given pointHistoryId.","typeName":"IShoppingMallAiBackendPointHistory"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at","path":"/shoppingMallAiBackend/admin/pointHistories/{pointHistoryId}","method":"get"},{"specification":"Create a new point wallet transaction (point history) record. This endpoint allows authorized admin users to manually add a transaction log for a customer point wallet, such as adjustment, manual correction, or bonus accrual/redemption outside normal workflow. The endpoint is mapped to the shopping_mall_ai_backend_point_histories table. Business rules validate the wallet existence, change type, and actor, ensuring all references are auditable. Only admins may perform this operation. Output is the full new point history record. Errors are returned for invalid references or permissions.","description":"Insert a new record into the customer point wallet transaction histories. This endpoint registers manual or admin-side adjustments to point balances, or special events requiring out-of-band histories. The request must conform to the creation DTO, and admin privilege is strictly required. Audit, compliance, and cross-check validations are enforced. The endpoint returns the newly created point history transaction object. Errors occur for bad input, failed validations, or non-existent point wallet references. Only available to admins.","summary":"Create a new point wallet transaction (shopping_mall_ai_backend_point_histories table).","parameters":[],"requestBody":{"description":"New transaction details for the point wallet history record.","typeName":"IShoppingMallAiBackendPointHistory.ICreate"},"responseBody":{"description":"The new point wallet transaction record.","typeName":"IShoppingMallAiBackendPointHistory"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"create","path":"/shoppingMallAiBackend/admin/pointHistories","method":"post"},{"specification":"Update an existing point wallet transaction (history) record by pointHistoryId. Only admin users may edit operation logs. The endpoint is mapped to the shopping_mall_ai_backend_point_histories table. Permissible fields for update include transaction reason, remarks, or references, but not immutable fields (wallet, timestamp, amount, change type are usually locked). Updates are always audited. The request body must adhere to update DTO and business validation will reject illegal field changes. Errors occur for non-existent records, attempts to edit locked fields, or insufficient privilege.","description":"Modify an existing point wallet history transaction by its unique pointHistoryId. Updatable fields are limited to comments or admin logs; core transaction attributes are not editable once recorded for compliance reasons. Admin authorization is required. The operation checks for record existence, enforces update validation policy, and logs the change for later reference. Only 'admin' users may access. Attempting to update immutable fields or a finalized transaction results in a business-logic error.","summary":"Update a point wallet transaction by pointHistoryId (shopping_mall_ai_backend_point_histories table).","parameters":[{"name":"pointHistoryId","description":"Unique identifier of the point wallet transaction record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the history transaction (remarks, reference).","typeName":"IShoppingMallAiBackendPointHistory.IUpdate"},"responseBody":{"description":"The updated point wallet transaction history record.","typeName":"IShoppingMallAiBackendPointHistory"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"update","path":"/shoppingMallAiBackend/admin/pointHistories/{pointHistoryId}","method":"put"},{"specification":"Delete (soft delete) a point wallet transaction (history) record by pointHistoryId. This removes the transaction from normal reporting, but preserves audit and compliance records. The operation is mapped to the shopping_mall_ai_backend_point_histories table; deleted_at timestamp is updated instead of physical removal. Only admins can delete logs, and only if not prohibited by compliance rules. Errors include locked records or permission denied. All deletions are audit logged.","description":"Soft-delete a point wallet transaction (history) record from the system by pointHistoryId. This action is irreversible at the business logic layer but retains data for legal compliance and audits. The system sets the deleted_at field for the record and removes it from active reporting or UI display. Admin authorization is enforced, and business checks may block deletion of critical audit log entries. The operation does not hard-delete the row but marks as deleted logically. Attempting to delete already deleted or locked records may present a no-op or error. All deletes trigger audit logs.","summary":"Soft-delete a point wallet transaction by pointHistoryId (shopping_mall_ai_backend_point_histories table).","parameters":[{"name":"pointHistoryId","description":"Unique identifier of the point wallet history record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationRoles":["admin"],"name":"erase","path":"/shoppingMallAiBackend/admin/pointHistories/{pointHistoryId}","method":"delete"},{"specification":"This operation searches and retrieves a paginated list of coin wallet accounts in the system. It is based on the shopping_mall_ai_backend_coin_wallets table from the Prisma schema, providing search, filter, and sort capabilities including wallet type, status, or ownership (admin/seller/customer). The results are used for analytics, KYC, and monitoring of all coin asset flows in the platform.","path":"/shoppingMallAiBackend/admin/coinWallets","method":"patch","description":"Retrieve a filtered, paginated list of coin wallet accounts for all types of asset holders (customers, sellers, admins) in the system. This search operation supports filters such as wallet type, status (active, locked, withdrawn), and owner identity. Pagination and sorting options are provided for large result sets, facilitating backend management, compliance checks, and reporting. Security is essential, so the endpoint is typically restricted to privileged users (e.g. admin) to avoid exposing sensitive asset account info. This operation interacts directly with the shopping_mall_ai_backend_coin_wallets table, referencing only the fields defined in the Prisma schema, and does not include operations like balance updates or transactions.","summary":"Search and paginate coin wallet accounts for asset holders (shopping_mall_ai_backend_coin_wallets)","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for coin wallet filtering.","typeName":"IShoppingMallAiBackendCoinWallet.IRequest"},"responseBody":{"description":"Paginated list of coin wallets matching the provided search and filter criteria.","typeName":"IPageIShoppingMallAiBackendCoinWallet"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"This operation retrieves detailed information for a single coin wallet by its unique identifier. It operates on the shopping_mall_ai_backend_coin_wallets table and returns full wallet information, including owner references and asset-related attributes.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}","method":"get","description":"Get detailed information about a specific coin wallet, identified by coinWalletId. Returns all wallet attributes such as wallet type, status, address, owner references, and metadata directly as defined in the shopping_mall_ai_backend_coin_wallets schema. The response includes information necessary for auditing, troubleshooting, and wallet management. Access should be restricted to the wallet owner or administrators. Related operations include modifying or deleting wallets by ID.","summary":"Retrieve detailed information for a specific coin wallet (shopping_mall_ai_backend_coin_wallets)","parameters":[{"name":"coinWalletId","description":"Unique identifier of the coin wallet to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested coin wallet.","typeName":"IShoppingMallAiBackendCoinWallet"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"This operation creates a new coin wallet entry in the system. It writes to the shopping_mall_ai_backend_coin_wallets table using values like owner references (admin/customer/seller), wallet type, wallet status, wallet address, and optional label/security code.","path":"/shoppingMallAiBackend/admin/coinWallets","method":"post","description":"Create a new coin wallet attached to a specified owner (admin, seller, or customer). Validates that wallet_address is unique and that only one wallet per owner/type combination exists. Accepts detailed wallet setup parameters based on shopping_mall_ai_backend_coin_wallets table columns. This operation supports onboarding new users or asset classes onto the platform and logs all creation for compliance and tracking. Related endpoints allow wallet retrieval or updates by ID.","summary":"Create a new coin wallet (shopping_mall_ai_backend_coin_wallets)","parameters":[],"requestBody":{"description":"Payload for new coin wallet creation, including all required wallet fields as per schema.","typeName":"IShoppingMallAiBackendCoinWallet.ICreate"},"responseBody":{"description":"The created coin wallet record with assigned ID and details.","typeName":"IShoppingMallAiBackendCoinWallet"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"This operation updates an existing coin wallet by its unique ID, allowing modification of wallet attributes as permitted by the shopping_mall_ai_backend_coin_wallets schema (e.g. status, label, security code). It prevents modification of primary keys or wallet_address fields for compliance reasons.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}","method":"put","description":"Update mutable fields of a coin wallet identified by coinWalletId. Only allows changes to fields such as wallet status, label, or security code; wallet_address and owner fields remain immutable for traceability. Returns the full updated wallet entity for confirmation. Strict field checking is enforced to comply with regulatory and audit standards in asset management. Related endpoints are used to get, delete, or view wallet audit logs.","summary":"Update fields of an existing coin wallet (shopping_mall_ai_backend_coin_wallets)","parameters":[{"name":"coinWalletId","description":"The unique identifier of the coin wallet to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated values for the mutable fields of the coin wallet.","typeName":"IShoppingMallAiBackendCoinWallet.IUpdate"},"responseBody":{"description":"The updated coin wallet entity with modified fields.","typeName":"IShoppingMallAiBackendCoinWallet"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"This operation deletes a coin wallet entry by its unique identifier. Based on the shopping_mall_ai_backend_coin_wallets schema, deletion is performed logically (soft delete) by updating the deleted_at field rather than physical removal, supporting full audit and rollback as per schema design.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}","method":"delete","description":"Soft-delete a coin wallet entry, marking the deleted_at field. This preserves all wallet history and is mandated by the shopping_mall_ai_backend_coin_wallets schema for audit and compliance - no actual data is destroyed. Soft-deleted wallets are excluded from active searches, but can be restored or audited by admins when necessary. Deletion should be subject to business role checks and typically only admins can perform this action. Error scenarios include attempting to delete an already deleted wallet or a non-existent wallet.","summary":"Soft-delete (logical delete) a specific coin wallet (shopping_mall_ai_backend_coin_wallets)","parameters":[{"name":"coinWalletId","description":"The unique identifier of the coin wallet to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves a paginated list of coin transactions linked to a given coin wallet. Based on the shopping_mall_ai_backend_coin_transactions table, it supports filtering by transaction type, date range, and ordering. The results enable auditing, financial analysis, and workflow monitoring for the coin wallet.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinTransactions","method":"patch","description":"Get a filtered and paginated list of all coin transactions for a single wallet identified by coinWalletId. This endpoint supports filters like transaction type, period, referenceID or reason, and supports ordering by date or type. The request and response structure is based strictly on fields in shopping_mall_ai_backend_coin_transactions and linked wallet references. Common users of this operation are admins or wallet owners with permission to view transaction history. Related operations are creating, updating, or deleting transactions.","summary":"Search and paginate coin transactions for a coin wallet (shopping_mall_ai_backend_coin_transactions)","parameters":[{"name":"coinWalletId","description":"The UUID of the coin wallet to fetch transactions for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for filtering and paginating coin transactions linked to a wallet.","typeName":"IShoppingMallAiBackendCoinTransaction.IRequest"},"responseBody":{"description":"A paginated list of coin transaction records with context for the given wallet.","typeName":"IPageIShoppingMallAiBackendCoinTransaction"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"This operation retrieves the details of a specific coin transaction by its ID for a given wallet. Based on the shopping_mall_ai_backend_coin_transactions table, it returns authoritative transaction information as required for backup, rollback, and financial audit needs.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinTransactions/{coinTransactionId}","method":"get","description":"Get the full details of a coin transaction within the context of its parent wallet. Uses both walletId and transactionId for precise access to the record. Returns all fields noted in shopping_mall_ai_backend_coin_transactions and verifies lineage to the correct wallet. Results are often required for dispute resolution or detailed financial audits. Related endpoints allow for creation, modification, or deletion of transactions, all of which must maintain referential integrity.","summary":"Retrieve a specific coin transaction for a wallet (shopping_mall_ai_backend_coin_transactions)","parameters":[{"name":"coinWalletId","description":"The UUID of the coin wallet containing the transaction.","schema":{"type":"string","format":"uuid"}},{"name":"coinTransactionId","description":"The UUID of the coin transaction to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All details of the specified coin transaction record.","typeName":"IShoppingMallAiBackendCoinTransaction"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"This operation creates a new coin transaction linked to a given coin wallet. It operates on the shopping_mall_ai_backend_coin_transactions table and enforces business rules such as updating balances, setting reference codes, and ensuring all validations on amounts and transaction type. Only authorized users such as admins or the wallet owner can perform creation.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinTransactions","method":"post","description":"Create a new coin transaction within the specified wallet. Accepts transaction data (amount, transaction_type, reference_id, reason) as per schema and enforces business logic for consistency and integrity. Balances are automatically updated during transaction creation. This operation can be used for rewards, deposits, withdrawals, and adjustments. Integrity checks ensure that referenced wallet exists and that the transaction does not violate business constraints. Related endpoints provide for searching, retrieving, updating, and deleting transactions.","summary":"Create a new coin transaction for a wallet (shopping_mall_ai_backend_coin_transactions)","parameters":[{"name":"coinWalletId","description":"UUID of the parent coin wallet.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for creating a new coin transaction in the given wallet.","typeName":"IShoppingMallAiBackendCoinTransaction.ICreate"},"responseBody":{"description":"The created coin transaction record including balance after transaction.","typeName":"IShoppingMallAiBackendCoinTransaction"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"This operation updates a specific coin transaction by its ID within a wallet. Allowed changes may include transaction_reason or note adjustments, depending on audit rules. The operation is grounded in the shopping_mall_ai_backend_coin_transactions schema, and typically only allows updates to non-key audit fields preserving financial traceability.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinTransactions/{coinTransactionId}","method":"put","description":"Update mutable fields in a coin transaction for a specified wallet. Only allows non-key, audit-friendly fields to be modified (such as transaction_reason). Fields like transaction_amount, wallet_id, or transaction_type are immutable post-creation for trace and business compliance. Returns the updated transaction object with all fields as required by shopping_mall_ai_backend_coin_transactions. Related endpoints allow transaction retrieval or deletion.","summary":"Update a coin transaction's non-key fields (shopping_mall_ai_backend_coin_transactions)","parameters":[{"name":"coinWalletId","description":"The UUID of the parent coin wallet.","schema":{"type":"string","format":"uuid"}},{"name":"coinTransactionId","description":"The UUID of the coin transaction to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating allowable fields (e.g., transaction_reason) of a coin transaction.","typeName":"IShoppingMallAiBackendCoinTransaction.IUpdate"},"responseBody":{"description":"Updated coin transaction record with new values.","typeName":"IShoppingMallAiBackendCoinTransaction"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"This operation soft-deletes (logically deletes) a coin transaction by its ID within the context of a coin wallet. Following shopping_mall_ai_backend_coin_transactions schema, the transaction's deleted_at field is set for compliance trace and audit; no physical deletion occurs. This operation is strictly for administrators or privileged wallet owners. Deletions are tracked and used for fraud monitoring and recovery. Related operations are retrieval, creation, or update of the transaction.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinTransactions/{coinTransactionId}","method":"delete","description":"Logically delete a coin transaction for traceability and audit. The transaction is flagged as deleted (deleted_at is set) but not removed from the database. This is important for financial integrity and audit history. Only admins or wallet owners may perform this action, and deleted transactions are removed from active result sets but retained for compliance inspection. Error cases occur when deleting already-deleted or non-existent transaction IDs.","summary":"Soft-delete a coin transaction record (shopping_mall_ai_backend_coin_transactions)","parameters":[{"name":"coinWalletId","description":"The UUID of the parent coin wallet.","schema":{"type":"string","format":"uuid"}},{"name":"coinTransactionId","description":"The UUID of the coin transaction to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"This operation retrieves a paginated list of coin balance records for a given coin wallet for audit and historical reconciliation. Rooted in shopping_mall_ai_backend_coin_balances, this search supports filtering by timestamps if required in future evolutions. Used for compliance, UI summary, and troubleshooting. Only admins or wallet owners should access this endpoint.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinBalances","method":"patch","description":"Get all (historical or current) coin balances for a specified wallet. This operation supports result pagination and may support date/time filtering as per business requirements even if the schema currently stores single latest state. Used for reconciling balance changes and forensics. The operation is based strictly on shopping_mall_ai_backend_coin_balances schema, excluding any physical deletion logic. Access control is strict for user financial privacy.","summary":"Search and paginate coin balances for a wallet (shopping_mall_ai_backend_coin_balances)","parameters":[{"name":"coinWalletId","description":"The UUID of the coin wallet for which to retrieve balances.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for searching coin balances (e.g., pagination, optional filters).","typeName":"IShoppingMallAiBackendCoinBalance.IRequest"},"responseBody":{"description":"A paginated list of coin balances (current and historical, if relevant).","typeName":"IPageIShoppingMallAiBackendCoinBalance"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"This operation gets the details of a specific coin balance entry for a wallet by coinBalanceId. The operation is based on shopping_mall_ai_backend_coin_balances and is required for detailed audits, customer inquiries, or balance dispute resolution. Returns only known fields in schema.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinBalances/{coinBalanceId}","method":"get","description":"Retrieve the details of a single coin balance record for the specified wallet and balance ID. Returns all fields from shopping_mall_ai_backend_coin_balances as defined in the schema. This operation is used in financial audits and application troubleshooting for digital asset management. Only admins or owners may use this endpoint. Related operations are coin balance search, update (if applicable), or wallet/account summary APIs.","summary":"Get a coin wallet's balance detail (shopping_mall_ai_backend_coin_balances)","parameters":[{"name":"coinWalletId","description":"The UUID of the coin wallet linked to the balance record.","schema":{"type":"string","format":"uuid"}},{"name":"coinBalanceId","description":"The UUID of the specific coin balance record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed coin balance record data as defined in the schema.","typeName":"IShoppingMallAiBackendCoinBalance"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"This operation creates a new coin balance record for a specific coin wallet. The coin balance entity stores the reconciled balance information associated with a coin wallet, which represents the state after all coin transactions have been replayed for that wallet. This operation is critical for tracking the auditable state of a wallet, enabling snapshot, reconciliation, and real-time balance accuracy within the financial and rewards ecosystem. This API is mapped to the ShoppingMallAiBackendCoinBalances table in the Prisma schema, and is primarily invoked by admin or back-office functions during wallet initialization or on-demand reconciliation.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinBalances","method":"post","description":"Create a new coin balance tied to a specific coin wallet. This records the currently reconciled balance for the wallet, allowing for up-to-date reporting and audit. The initial balance is usually based on the sum of all transactions for the wallet and is required for performance and compliance querying. Only admin roles are authorized to perform this operation.\n\nThis operation writes to the ShoppingMallAiBackendCoinBalances table, which has a unique constraint on the wallet_id field. The request must provide all required information for balance creation, such as wallet_id, balance, and balance_at (point-in-time). Audit fields ensure traceability for regulatory and operational purposes. By using POST, this endpoint distinguishes balance creation from updates, and prevents accidental overwrites.\n\nAudit logs and business rule triggers ensure all state changes are tracked for compliance. Attempting to create a balance for a non-existing wallet or re-creating for an existing one will result in an error. Verification of wallet identity and permission checks are mandatory.","summary":"Create a new coin wallet balance entry for a specified wallet (ShoppingMallAiBackendCoinBalances).","parameters":[{"name":"coinWalletId","description":"The unique identifier (UUID) of the target coin wallet to associate this balance with.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New coin balance creation information for the target wallet.","typeName":"IShoppingMallAiBackendCoinBalance.ICreate"},"responseBody":{"description":"The created coin balance record with audit properties.","typeName":"IShoppingMallAiBackendCoinBalance"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"create"},{"specification":"This operation updates an existing coin balance record for a specific coin wallet. The coin balance maintains the latest actual reconciled balance for compliance, fast queries, and transactional integrity. This is mapped to the ShoppingMallAiBackendCoinBalances table and ensures that only authorized updates, such as balance correction, audit adjustments, or manual reconciliation, are allowed. Used predominantly by administrative tools for regulatory, technical, or operational correction, not by regular users.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinBalances/{coinBalanceId}","method":"put","description":"Update the reconciled coin balance for the designated coin wallet and balance entry. This operation allows service admins to adjust the point-in-time balance, update audit fields, or resolve a detected discrepancy between transactional records and wallet balance.\n\nThis endpoint writes to ShoppingMallAiBackendCoinBalances, referencing the coinWalletId and coinBalanceId (UUIDs) to ensure correct record selection. Only designated admin roles can update, ensuring no unauthorized modifications. All writes are audit-logged for compliance.\n\nIf the target balance record cannot be found, an error is returned; soft deletes are not present in this table. Allows payload validation and triggers system events for audit and re-aggregation.\n\nErrors are triggered when trying to update a balance for non-existing wallet or entry, or when trying to modify immutable audit properties.","summary":"Update an existing coin wallet balance entry for compliance or reconciliation purposes (ShoppingMallAiBackendCoinBalances).","parameters":[{"name":"coinWalletId","description":"Unique identifier (UUID) of the coin wallet to associate with the balance.","schema":{"type":"string","format":"uuid"}},{"name":"coinBalanceId","description":"Unique identifier (UUID) of the coin balance record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload with new coin balance and audit properties to update a coin balance record.","typeName":"IShoppingMallAiBackendCoinBalance.IUpdate"},"responseBody":{"description":"The updated coin balance record.","typeName":"IShoppingMallAiBackendCoinBalance"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"update"},{"specification":"This operation deletes (removes) an existing coin balance entry from a coin wallet. The table ShoppingMallAiBackendCoinBalances does not include a soft deletion field, so this is a hard delete. All traces of the deleted coin balance will be removed from the main table while compliance logs must be maintained elsewhere. This operation is restricted for irreversible administrative actions only. Used if a wallet is disabled, a record needs to be purged, or is incorrect according to audit findings.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinBalances/{coinBalanceId}","method":"delete","description":"Deletes the specified coin wallet balance record, identified by coinBalanceId, for the designated coin wallet. As this table uses a hard-delete (no deleted_at), the balance record is permanently erased along with audit context.\n\nThis is a compliance-critical operation reserved for admin roles. Any deletion action must trigger a corresponding audit log indicating who, when, and why the removal was performed. The operation checks both coinWalletId and coinBalanceId for identity.\n\nIf the record cannot be found, an error is returned. All deletion operations have legal and operational implications.\n\nNo response body is returned by this DELETE operation.","summary":"Delete (hard) a coin wallet balance entry by ID (ShoppingMallAiBackendCoinBalances).","parameters":[{"name":"coinWalletId","description":"Unique identifier (UUID) of the coin wallet owning the coin balance to delete.","schema":{"type":"string","format":"uuid"}},{"name":"coinBalanceId","description":"Unique identifier (UUID) of the coin wallet balance record to hard delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationRoles":["admin"],"name":"erase"},{"specification":"This operation provides a filtered, paginated list search of all coin wallet snapshot records belonging to a specific coin wallet. The coinSnapshots entity stores point-in-time, immutable snapshots of wallet state, created on closure, audit, or at regular intervals. This is mapped to ShoppingMallAiBackendCoinSnapshots table and allows operational, compliance, and technical staff to review or investigate coin wallet state evolution. This PATCH endpoint supports complex queries including time range, snapshot type, reason, and audit properties. Only admin roles have access.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinSnapshots","method":"patch","description":"Search and retrieve paginated coin wallet snapshots for a specific wallet. Supports query payloads for filtering by snapshot time, type, reason, as well as advanced sorting and pagination. The response includes audit details and full snapshot business data.\n\nThe ShoppingMallAiBackendCoinSnapshots table is queried, referencing coinWalletId for contextual scoping and applying optional filters as per the request payload. Returns a standard paginated structure with filtering and summary data for operational review.\n\nOperation audit logging is performed for all query actions, and search activity may be included in compliance logs. Only users with admin privileges can access this resource.","summary":"Paginated list/search of coin wallet snapshots with query filters (ShoppingMallAiBackendCoinSnapshots).","parameters":[{"name":"coinWalletId","description":"Unique identifier (UUID) of the wallet for which to search snapshots.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot search and filter criteria, including date range and pagination.","typeName":"IShoppingMallAiBackendCoinSnapshot.IRequest"},"responseBody":{"description":"Paginated, filtered list of coin wallet snapshots with audit and business data.","typeName":"IPageIShoppingMallAiBackendCoinSnapshot"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search"},{"specification":"This endpoint retrieves a detailed view of a specific coin snapshot for a given wallet, returning all point-in-time data fields stored in that snapshot. Coin snapshots provide audit, rollback, and forensic support, as they encapsulate the state of a wallet at a defined moment. This operation maps to the ShoppingMallAiBackendCoinSnapshots table and is vital for compliance, root-cause, and operational review.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinSnapshots/{coinSnapshotId}","method":"get","description":"Fetch the complete details of a single coin wallet snapshot identified by coinSnapshotId belonging to wallet coinWalletId. The operation returns all snapshot schema fields, including audit/actor information and the full state capture used for evidence or recovery.\n\nAccess is limited to admin-level operators, with full audit trail logging for compliance. If the specified snapshot cannot be found or does not belong to the supplied coinWalletId, a not-found error is returned.\n\nThis GET endpoint is fundamental for providing reliability, auditability, and investigation support in the coin wallet subsystem.","summary":"Retrieve a specific coin wallet snapshot entry for a wallet (ShoppingMallAiBackendCoinSnapshots).","parameters":[{"name":"coinWalletId","description":"Unique identifier (UUID) of the wallet owning the snapshot to retrieve.","schema":{"type":"string","format":"uuid"}},{"name":"coinSnapshotId","description":"UUID of the coin wallet snapshot to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All snapshot and audit fields for the requested coin wallet snapshot.","typeName":"IShoppingMallAiBackendCoinSnapshot"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at"},{"specification":"This operation creates a new immutable snapshot record for a given coin wallet. Each snapshot represents a point-in-time state of the wallet, including all relevant fields for audit, regulatory, or technical recovery purposes. The operation is linked to the ShoppingMallAiBackendCoinSnapshots table and is only permitted for admin roles or automated processes. The request payload must provide the wallet reference and all state metadata required by snapshot creation policy.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinSnapshots","method":"post","description":"Create a new point-in-time snapshot for the designated coin wallet, capturing all schema-defined state and audit fields for compliance and future recovery. The operation ensures robust evidence chains, legal compliance, and supports state rollback as required by policy.\n\nAll data recorded is immutable after creation, and strict type and value validation is enforced according to schema. Audit fields—such as reason, initiator, and time—are mandatory and logged in compliance systems. Errors are returned if wallet identity validation fails or required data is missing.","summary":"Create a new point-in-time snapshot for a wallet's coin balance (ShoppingMallAiBackendCoinSnapshots).","parameters":[{"name":"coinWalletId","description":"UUID of the wallet for which to create a snapshot record.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All snapshot and audit details for the new coin wallet snapshot record.","typeName":"IShoppingMallAiBackendCoinSnapshot.ICreate"},"responseBody":{"description":"The new, immutable coin wallet snapshot record.","typeName":"IShoppingMallAiBackendCoinSnapshot"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"create"},{"specification":"This operation updates metadata or context for an existing coin snapshot, identified by coinSnapshotId under the specific coinWalletId. Since coin snapshots are typically immutable for audit, only strictly authorized (compliance officer, super-admin) roles should perform updates; these may include fixing documentation fields or correcting regulatory context—not changing core balance values. The schema allows only safe, trackable amendments. Fully audit-logged, and linked to operational and legal review.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinSnapshots/{coinSnapshotId}","method":"put","description":"Update metadata (not core immutable state) for a coin wallet snapshot belonging to a specific wallet. Examples of updatable fields include documentation improvements, correction of reference context, or regulatory annotation fields. Improvements must not affect the original wallet state at time of snapshot, and all updates are continuously tracked in compliance logs.\n\nIf a snapshot is not found or the update attempts to modify immutable fields, a detailed error is returned and no update is performed. The endpoint requires both coinWalletId and coinSnapshotId.\n\nStrict role and update field validation is enforced to maintain forensic integrity of the snapshot chain.","summary":"Update metadata or documentation fields for a coin wallet snapshot (ShoppingMallAiBackendCoinSnapshots).","parameters":[{"name":"coinWalletId","description":"The UUID of the wallet for which the snapshot belongs.","schema":{"type":"string","format":"uuid"}},{"name":"coinSnapshotId","description":"UUID of the snapshot record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable snapshot metadata fields (no changes to immutable state values).","typeName":"IShoppingMallAiBackendCoinSnapshot.IUpdate"},"responseBody":{"description":"The updated coin wallet snapshot record, including all context and audit metadata.","typeName":"IShoppingMallAiBackendCoinSnapshot"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"update"},{"specification":"This operation deletes (hard remove) the specified coin wallet snapshot entry, indicated by coinSnapshotId for the given coinWalletId. There is no soft-deletion field in the ShoppingMallAiBackendCoinSnapshots table; upon deletion, the snapshot is irreversibly purged. Deletion is allowed only for exceptional compliance, audit, or legal correction events. Used by compliance officers or super-admins, with complete audit trail required.","path":"/shoppingMallAiBackend/admin/coinWallets/{coinWalletId}/coinSnapshots/{coinSnapshotId}","method":"delete","description":"Delete the specified coin wallet snapshot record. As no deleted_at exists in this table, this is a hard, irreversible operation and should only be called if the snapshot was created in error or its retention is no longer required by policy/compliance.\n\nThe operation requires confirmation of both coinWalletId context and audit justification. All deletions are logged and require prior compliance approval. No response is returned.","summary":"Delete (hard) a coin wallet snapshot record (ShoppingMallAiBackendCoinSnapshots).","parameters":[{"name":"coinWalletId","description":"UUID of the coin wallet for which the snapshot entry is to be removed.","schema":{"type":"string","format":"uuid"}},{"name":"coinSnapshotId","description":"UUID of the coin wallet snapshot record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationRoles":["admin"],"name":"erase"},{"specification":"This operation provides search, filter, and paginated results for all mileage wallet records in the system. The ShoppingMallAiBackendMileageWallets table holds all mileage/points balances for customers, an integral feature for loyalty, promotions, and rewards. This PATCH endpoint supports advanced queries, such as searching by wallet program, status, balance range, and customer scope; includes pagination and sorting. Typically used by admins for program management, compliance review, and campaign operations.","path":"/shoppingMallAiBackend/admin/mileageWallets","method":"patch","description":"Search/filter mileage wallet records system-wide. Can filter by customer, program, status, label, or balance range, and provides paged and sorted result output. The endpoint responds with a paginated collection of IShoppingMallAiBackendMileageWallet objects as per query criteria.\n\nSearches are restricted to admin users due to the financial and personal nature of wallet data. All operations are audit logged for transparency and compliance, and advanced filters support flexible reporting and management use cases.\n\nErrors or empty searches return empty result sets and have no negative impact on source data.","summary":"Paginated, filtered search/index of mileage wallet records (ShoppingMallAiBackendMileageWallets).","parameters":[],"requestBody":{"description":"Search/filter definition for retrieving mileage wallet records with pagination.","typeName":"IShoppingMallAiBackendMileageWallet.IRequest"},"responseBody":{"description":"Paginated list of mileage wallets matching search criteria.","typeName":"IPageIShoppingMallAiBackendMileageWallet"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search"},{"specification":"This operation retrieves the details of a single mileage wallet entry by its unique identifier. The ShoppingMallAiBackendMileageWallets table maintains all data for a customer's loyalty or points wallet. Provides full current field values and audit information for review, support, or reconciliation. This GET endpoint is critical for compliance and user support, and is only available to admin roles.","path":"/shoppingMallAiBackend/admin/mileageWallets/{mileageWalletId}","method":"get","description":"Get full details of a specific mileage wallet record by mileageWalletId. The response includes all schema fields, including program name, status, label, customer reference, balance, and audit fields. If not found, a not-found error is returned.\n\nAll calls are logged for compliance, with access restricted to admins only. Used in financial/audit reconciliation, customer support, or campaign reporting.","summary":"Retrieve full detail of a single mileage wallet entry (ShoppingMallAiBackendMileageWallets).","parameters":[{"name":"mileageWalletId","description":"UUID of the target mileage wallet record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full IShoppingMallAiBackendMileageWallet record with audit fields.","typeName":"IShoppingMallAiBackendMileageWallet"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at"},{"specification":"This operation creates a new mileage wallet record for a customer, in a specific wallet program with designated attributes. The ShoppingMallAiBackendMileageWallets table tracks customer program, status, points balance, and required security attributes. Creating a mileage wallet is restricted to admins and requires all business fields (customer_id, wallet_program, status, etc.) in the payload. All creations are audit-logged.","path":"/shoppingMallAiBackend/admin/mileageWallets","method":"post","description":"Create a new mileage wallet entry for a specific customer in a defined rewards program. The payload must specify customer ID, wallet program, status, (optionally a label or security code), and audit fields. Only admin roles can execute this operation, as mileage wallets are financial properties and must be tightly controlled.\n\nThe operation validates uniqueness for customer-program tuple. Audit logging captures the actor and full context of wallet creation. Creation fails if the referenced customer does not exist or if a duplicate wallet for the program exists.","summary":"Create a new mileage wallet record for a customer and program (ShoppingMallAiBackendMileageWallets).","parameters":[],"requestBody":{"description":"Definition and business attributes for the new mileage wallet entry.","typeName":"IShoppingMallAiBackendMileageWallet.ICreate"},"responseBody":{"description":"Full mileage wallet record upon creation, including audit fields.","typeName":"IShoppingMallAiBackendMileageWallet"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"create"},{"specification":"This operation updates an existing mileage wallet record, including allowable attributes (status, label, security_code), but not immutable fields such as wallet_id or customer_id. The ShoppingMallAiBackendMileageWallets table stores a tight linkage of the wallet to customer and program; only changeable fields are permitted to be patched, and all modifications are fully audit-logged for compliance. Only admins have permission. Attempting to update disallowed fields or a non-existent record yields a validation error.","path":"/shoppingMallAiBackend/admin/mileageWallets/{mileageWalletId}","method":"put","description":"Update permissible attributes of a mileage wallet entry by mileageWalletId. Only updatable fields (status, label, security_code, etc.) may be changed. Enforcement of business logic and field-level validation is performed, and all updates are audit-logged for compliance.\n\nAdmins only. Updating non-existent or immutable wallet record yields an error. No soft-deletion is supported in this endpoint.","summary":"Update allowed fields of mileage wallet record (ShoppingMallAiBackendMileageWallets).","parameters":[{"name":"mileageWalletId","description":"UUID of the mileage wallet record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for an existing mileage wallet entry, following schema constraints.","typeName":"IShoppingMallAiBackendMileageWallet.IUpdate"},"responseBody":{"description":"Updated mileage wallet entry after changes (with audit fields).","typeName":"IShoppingMallAiBackendMileageWallet"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"update"},{"specification":"This operation deletes a specific mileage wallet by its unique identifier. It operates on the mileage_wallets table, ensuring that only wallets with the provided UUID are affected. The deletion is a hard delete, as there is a 'deleted_at' field used for soft deletion in the schema. All transactional and compliance requirements are obeyed. This operation is essential for scenarios where a customer requests closure of their mileage wallet, or when an admin needs to remove a wallet for regulatory or business reasons.","path":"/shoppingMallAiBackend/customer/mileageWallets/{mileageWalletId}","method":"delete","description":"This API endpoint permanently deactivates and removes a mileage wallet from use, marking it as deleted via the 'deleted_at' field for traceability. The operation ensures that all wallet transactions, audit logs, and references remain intact for compliance, but the wallet itself will not be usable in new operations. Only authorized users—typically admins or the owner customer—may request this operation. Security audits log the request, and attempts to erase a non-existent or already deleted wallet result in a clear error message with specific error codes. Soft deletion preserves evidence for  business and regulatory reporting. If related transactions exist, the wallet reference remains for consistent historical reporting.","summary":"Soft delete a mileage wallet from the system (mileage_wallets table).","parameters":[{"name":"mileageWalletId","description":"The unique identifier of the mileage wallet to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","authorizationRole":"customer"},{"specification":"This operation deletes a specific mileage wallet by its unique identifier. It operates on the mileage_wallets table, ensuring that only wallets with the provided UUID are affected. The deletion is a hard delete, as there is a 'deleted_at' field used for soft deletion in the schema. All transactional and compliance requirements are obeyed. This operation is essential for scenarios where a customer requests closure of their mileage wallet, or when an admin needs to remove a wallet for regulatory or business reasons.","path":"/shoppingMallAiBackend/admin/mileageWallets/{mileageWalletId}","method":"delete","description":"This API endpoint permanently deactivates and removes a mileage wallet from use, marking it as deleted via the 'deleted_at' field for traceability. The operation ensures that all wallet transactions, audit logs, and references remain intact for compliance, but the wallet itself will not be usable in new operations. Only authorized users—typically admins or the owner customer—may request this operation. Security audits log the request, and attempts to erase a non-existent or already deleted wallet result in a clear error message with specific error codes. Soft deletion preserves evidence for  business and regulatory reporting. If related transactions exist, the wallet reference remains for consistent historical reporting.","summary":"Soft delete a mileage wallet from the system (mileage_wallets table).","parameters":[{"name":"mileageWalletId","description":"The unique identifier of the mileage wallet to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Search and retrieve a paginated list of mileage transactions for a specific wallet. This operation applies advanced filtering and sorting to the mileage_transactions table, supporting real-time account reconciliation, audit, and historical review. Pagination and search criteria such as transaction type, date range, and amount are included in the request body.","path":"/shoppingMallAiBackend/customer/mileageWallets/{mileageWalletId}/mileageTransactions","method":"patch","description":"Retrieve a filtered and paginated collection of all mileage transactions linked to the specified wallet. Supports advanced criteria: transaction_type, transaction date range, minimum/maximum amounts, status, and actor. Includes real-time (as-of-now) and audit scenarios. Only wallet owners and authorized admins can perform this operation. The result includes essential transaction details for compliance and reconciliation. Excessive or unauthorized queries may be rate-limited or logged for audit purposes. Related APIs include transaction retrieval by ID and the creation/update endpoints for mileage transactions. This endpoint references the mileage_transactions table, which audits every change for evidence and legal retention.","summary":"Paginated, filtered search of mileage transactions for a wallet","parameters":[{"name":"mileageWalletId","description":"Target mileage wallet's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter criteria, sort, and pagination instructions for mileage transactions","typeName":"IShoppingMallAiBackendMileageTransaction.IRequest"},"responseBody":{"description":"Paged set of transactions matching the query for that wallet, with summary and audit info","typeName":"IPageIShoppingMallAiBackendMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"search","authorizationRole":"customer"},{"specification":"Search and retrieve a paginated list of mileage transactions for a specific wallet. This operation applies advanced filtering and sorting to the mileage_transactions table, supporting real-time account reconciliation, audit, and historical review. Pagination and search criteria such as transaction type, date range, and amount are included in the request body.","path":"/shoppingMallAiBackend/admin/mileageWallets/{mileageWalletId}/mileageTransactions","method":"patch","description":"Retrieve a filtered and paginated collection of all mileage transactions linked to the specified wallet. Supports advanced criteria: transaction_type, transaction date range, minimum/maximum amounts, status, and actor. Includes real-time (as-of-now) and audit scenarios. Only wallet owners and authorized admins can perform this operation. The result includes essential transaction details for compliance and reconciliation. Excessive or unauthorized queries may be rate-limited or logged for audit purposes. Related APIs include transaction retrieval by ID and the creation/update endpoints for mileage transactions. This endpoint references the mileage_transactions table, which audits every change for evidence and legal retention.","summary":"Paginated, filtered search of mileage transactions for a wallet","parameters":[{"name":"mileageWalletId","description":"Target mileage wallet's unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter criteria, sort, and pagination instructions for mileage transactions","typeName":"IShoppingMallAiBackendMileageTransaction.IRequest"},"responseBody":{"description":"Paged set of transactions matching the query for that wallet, with summary and audit info","typeName":"IPageIShoppingMallAiBackendMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve the detailed record for a specific mileage transaction by its unique ID and owning wallet. This operation reads directly from the mileage_transactions table using both the transaction ID and wallet ID for accuracy, fulfilling audit, reconciliation, and end-user transaction drilldown needs. This operation is critical for ensuring financial accuracy and compliance—a single transaction may be investigated for regulation, review, or support purposes.","path":"/shoppingMallAiBackend/customer/mileageWallets/{mileageWalletId}/mileageTransactions/{mileageTransactionId}","method":"get","description":"Fetches all available data on the requested transaction—including amount, balance after, type, actor, and creation timestamp—using the wallet and transaction identifiers as composite keys for secure retrieval. Security controls verify the requesting user matches the wallet owner or holds admin privileges. Attempts to retrieve a non-existent or unauthorized transaction return clear error codes. This endpoint helps with customer support, disputes, reconciliations, and regulatory investigations.","summary":"Retrieve a specific mileage transaction for a wallet by IDs","parameters":[{"name":"mileageWalletId","description":"Wallet's unique ID for the mileage wallet","schema":{"type":"string","format":"uuid"}},{"name":"mileageTransactionId","description":"Unique mileage transaction ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for the specific mileage transaction requested by wallet and transaction IDs","typeName":"IShoppingMallAiBackendMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieve the detailed record for a specific mileage transaction by its unique ID and owning wallet. This operation reads directly from the mileage_transactions table using both the transaction ID and wallet ID for accuracy, fulfilling audit, reconciliation, and end-user transaction drilldown needs. This operation is critical for ensuring financial accuracy and compliance—a single transaction may be investigated for regulation, review, or support purposes.","path":"/shoppingMallAiBackend/admin/mileageWallets/{mileageWalletId}/mileageTransactions/{mileageTransactionId}","method":"get","description":"Fetches all available data on the requested transaction—including amount, balance after, type, actor, and creation timestamp—using the wallet and transaction identifiers as composite keys for secure retrieval. Security controls verify the requesting user matches the wallet owner or holds admin privileges. Attempts to retrieve a non-existent or unauthorized transaction return clear error codes. This endpoint helps with customer support, disputes, reconciliations, and regulatory investigations.","summary":"Retrieve a specific mileage transaction for a wallet by IDs","parameters":[{"name":"mileageWalletId","description":"Wallet's unique ID for the mileage wallet","schema":{"type":"string","format":"uuid"}},{"name":"mileageTransactionId","description":"Unique mileage transaction ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for the specific mileage transaction requested by wallet and transaction IDs","typeName":"IShoppingMallAiBackendMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new mileage transaction (e.g., accrue, redeem, expire, correction) for a wallet. Operates on the mileage_transactions table, requiring correct wallet ownership and business/rules validation. Every transaction is audit logged and recalculates balance per the schema logic.","path":"/shoppingMallAiBackend/customer/mileageWallets/{mileageWalletId}/mileageTransactions","method":"post","description":"Records a new mileage transaction for the specified wallet—with required amount, transaction_type, reference_id, and reason—directly updating balances and logs. Security verifies the requestor as the wallet owner or admin. Input validation ensures negative balances, illegal types, or duplicate references are rejected with error messages. Audit logs provide an indelible record for compliance. Related endpoints: transaction search, retrieve by ID, and update. Transaction type must match system-accepted business events (e.g., accrue, redeem).","summary":"Create a new mileage transaction for the specified wallet","parameters":[{"name":"mileageWalletId","description":"Unique identifier of the mileage wallet to which the transaction is added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Transaction creation payload -- type, amount, reason, reference, etc.","typeName":"IShoppingMallAiBackendMileageTransaction.ICreate"},"responseBody":{"description":"Record of the newly created mileage transaction, including audit data","typeName":"IShoppingMallAiBackendMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"create","authorizationRole":"customer"},{"specification":"Create a new mileage transaction (e.g., accrue, redeem, expire, correction) for a wallet. Operates on the mileage_transactions table, requiring correct wallet ownership and business/rules validation. Every transaction is audit logged and recalculates balance per the schema logic.","path":"/shoppingMallAiBackend/admin/mileageWallets/{mileageWalletId}/mileageTransactions","method":"post","description":"Records a new mileage transaction for the specified wallet—with required amount, transaction_type, reference_id, and reason—directly updating balances and logs. Security verifies the requestor as the wallet owner or admin. Input validation ensures negative balances, illegal types, or duplicate references are rejected with error messages. Audit logs provide an indelible record for compliance. Related endpoints: transaction search, retrieve by ID, and update. Transaction type must match system-accepted business events (e.g., accrue, redeem).","summary":"Create a new mileage transaction for the specified wallet","parameters":[{"name":"mileageWalletId","description":"Unique identifier of the mileage wallet to which the transaction is added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Transaction creation payload -- type, amount, reason, reference, etc.","typeName":"IShoppingMallAiBackendMileageTransaction.ICreate"},"responseBody":{"description":"Record of the newly created mileage transaction, including audit data","typeName":"IShoppingMallAiBackendMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update an existing mileage transaction by transaction ID and wallet ID. Operates on the mileage_transactions table, enabling correction, clarification, or metadata updates. This function is tightly controlled for auditability: only admin and proper wallet owners may update with traceable reason codes. Prior and current states are snapshotted for audit logs per compliance requirements. All validation ensures transaction balances and business rules remain consistent.","path":"/shoppingMallAiBackend/customer/mileageWallets/{mileageWalletId}/mileageTransactions/{mileageTransactionId}","method":"put","description":"Edits details of a specified transaction, such as reason, status, or actuating actor, referencing the wallet and the transaction. Only allowable fields are mutable per business rules—amount and type may only be changed by admins under strict controls. Attempts to update non-existent or locked transactions return detailed errors. Security, rollback, and snapshotting of prior state are enforced for compliance.","summary":"Update mileage transaction details for a given wallet and transaction","parameters":[{"name":"mileageWalletId","description":"Wallet's unique ID for the mileage wallet","schema":{"type":"string","format":"uuid"}},{"name":"mileageTransactionId","description":"The unique ID of the mileage transaction to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Transaction update details, referencing only updatable fields authorized per business rules","typeName":"IShoppingMallAiBackendMileageTransaction.IUpdate"},"responseBody":{"description":"Updated state of the mileage transaction, with full audit snapshot","typeName":"IShoppingMallAiBackendMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"update","authorizationRole":"customer"},{"specification":"Update an existing mileage transaction by transaction ID and wallet ID. Operates on the mileage_transactions table, enabling correction, clarification, or metadata updates. This function is tightly controlled for auditability: only admin and proper wallet owners may update with traceable reason codes. Prior and current states are snapshotted for audit logs per compliance requirements. All validation ensures transaction balances and business rules remain consistent.","path":"/shoppingMallAiBackend/admin/mileageWallets/{mileageWalletId}/mileageTransactions/{mileageTransactionId}","method":"put","description":"Edits details of a specified transaction, such as reason, status, or actuating actor, referencing the wallet and the transaction. Only allowable fields are mutable per business rules—amount and type may only be changed by admins under strict controls. Attempts to update non-existent or locked transactions return detailed errors. Security, rollback, and snapshotting of prior state are enforced for compliance.","summary":"Update mileage transaction details for a given wallet and transaction","parameters":[{"name":"mileageWalletId","description":"Wallet's unique ID for the mileage wallet","schema":{"type":"string","format":"uuid"}},{"name":"mileageTransactionId","description":"The unique ID of the mileage transaction to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Transaction update details, referencing only updatable fields authorized per business rules","typeName":"IShoppingMallAiBackendMileageTransaction.IUpdate"},"responseBody":{"description":"Updated state of the mileage transaction, with full audit snapshot","typeName":"IShoppingMallAiBackendMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete a mileage transaction for a wallet by transaction and wallet IDs, performing a soft delete per schema using the 'deleted_at' timestamp. This preserves audit/compliance checkpoints. Function applies to the mileage_transactions table and is used for transaction corrections, regulatory purges, or rollbacks. Only the wallet owner or an admin can execute this action.","path":"/shoppingMallAiBackend/customer/mileageWallets/{mileageWalletId}/mileageTransactions/{mileageTransactionId}","method":"delete","description":"Soft-deletes a single transaction record—marking the 'deleted_at' field, not physically removing it—in the mileage_transactions table for a specific wallet/transaction pair. Ensures compliance by preserving audit and rollback evidence. Unavailable or already deleted records trigger explicit error responses, and all deletions are logged for evidence.","summary":"Soft delete a mileage transaction by IDs from a wallet","parameters":[{"name":"mileageWalletId","description":"The unique mileage wallet ID for the parent account","schema":{"type":"string","format":"uuid"}},{"name":"mileageTransactionId","description":"Unique ID for the transaction to delete (soft delete)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","authorizationRole":"customer"},{"specification":"Delete a mileage transaction for a wallet by transaction and wallet IDs, performing a soft delete per schema using the 'deleted_at' timestamp. This preserves audit/compliance checkpoints. Function applies to the mileage_transactions table and is used for transaction corrections, regulatory purges, or rollbacks. Only the wallet owner or an admin can execute this action.","path":"/shoppingMallAiBackend/admin/mileageWallets/{mileageWalletId}/mileageTransactions/{mileageTransactionId}","method":"delete","description":"Soft-deletes a single transaction record—marking the 'deleted_at' field, not physically removing it—in the mileage_transactions table for a specific wallet/transaction pair. Ensures compliance by preserving audit and rollback evidence. Unavailable or already deleted records trigger explicit error responses, and all deletions are logged for evidence.","summary":"Soft delete a mileage transaction by IDs from a wallet","parameters":[{"name":"mileageWalletId","description":"The unique mileage wallet ID for the parent account","schema":{"type":"string","format":"uuid"}},{"name":"mileageTransactionId","description":"Unique ID for the transaction to delete (soft delete)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Advanced list search for all product inquiries across the marketplace. Operates on the product_inquiries table, supports search/filter by product, customer, status, public/private, AI spam flags, sentiment, time range, full-text search, and pagination/sorting. Used by customers, sellers, and admins for reviewing customer-product interaction history.","path":"/shoppingMallAiBackend/customer/productInquiries","method":"patch","description":"Returns a paginated set of product inquiries, filtering as needed by any supported field: product ID, customer ID, public status, title/body full-text search, AI flag thresholds, date ranges, and status. Supports access controls: customers see their own, sellers see their product inquiries, admins can see all. Excessive queries may be throttled. Best practice is to use this API for dashboard lists, inboxes, and audit/reporting tools. Responses include summaries and relevant inquiry attributes. Attempts with disallowed filters generate proper error responses indicating unsupported query logic.","summary":"Advanced, filterable, paginated search for product inquiries","parameters":[],"requestBody":{"description":"Filter, sorting, and pagination instructions for product inquiry list retrieval","typeName":"IShoppingMallAiBackendProductInquiry.IRequest"},"responseBody":{"description":"Paged result set of filtered, sorted product inquiries, annotated for UI and audit","typeName":"IPageIShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"customer"},{"specification":"Advanced list search for all product inquiries across the marketplace. Operates on the product_inquiries table, supports search/filter by product, customer, status, public/private, AI spam flags, sentiment, time range, full-text search, and pagination/sorting. Used by customers, sellers, and admins for reviewing customer-product interaction history.","path":"/shoppingMallAiBackend/seller/productInquiries","method":"patch","description":"Returns a paginated set of product inquiries, filtering as needed by any supported field: product ID, customer ID, public status, title/body full-text search, AI flag thresholds, date ranges, and status. Supports access controls: customers see their own, sellers see their product inquiries, admins can see all. Excessive queries may be throttled. Best practice is to use this API for dashboard lists, inboxes, and audit/reporting tools. Responses include summaries and relevant inquiry attributes. Attempts with disallowed filters generate proper error responses indicating unsupported query logic.","summary":"Advanced, filterable, paginated search for product inquiries","parameters":[],"requestBody":{"description":"Filter, sorting, and pagination instructions for product inquiry list retrieval","typeName":"IShoppingMallAiBackendProductInquiry.IRequest"},"responseBody":{"description":"Paged result set of filtered, sorted product inquiries, annotated for UI and audit","typeName":"IPageIShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Advanced list search for all product inquiries across the marketplace. Operates on the product_inquiries table, supports search/filter by product, customer, status, public/private, AI spam flags, sentiment, time range, full-text search, and pagination/sorting. Used by customers, sellers, and admins for reviewing customer-product interaction history.","path":"/shoppingMallAiBackend/admin/productInquiries","method":"patch","description":"Returns a paginated set of product inquiries, filtering as needed by any supported field: product ID, customer ID, public status, title/body full-text search, AI flag thresholds, date ranges, and status. Supports access controls: customers see their own, sellers see their product inquiries, admins can see all. Excessive queries may be throttled. Best practice is to use this API for dashboard lists, inboxes, and audit/reporting tools. Responses include summaries and relevant inquiry attributes. Attempts with disallowed filters generate proper error responses indicating unsupported query logic.","summary":"Advanced, filterable, paginated search for product inquiries","parameters":[],"requestBody":{"description":"Filter, sorting, and pagination instructions for product inquiry list retrieval","typeName":"IShoppingMallAiBackendProductInquiry.IRequest"},"responseBody":{"description":"Paged result set of filtered, sorted product inquiries, annotated for UI and audit","typeName":"IPageIShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a single product inquiry record by unique inquiry ID. Reads directly from the product_inquiries table. Used by customers, sellers, or admins for support, evidence review, and communication workflows. This operation is critical for cases where full detail (including AI spam/sentiment flags) must be viewed by authorized parties.","path":"/shoppingMallAiBackend/customer/productInquiries/{productInquiryId}","method":"get","description":"Returns the complete detail for the identified product inquiry, including fields such as customer, product, title, body, status, public/private, AI flags, and answer reference. Access control restricts retrieval to owners, product sellers, or admins as appropriate to preserve privacy. Unauthorized or not found returns specific error codes or messages. Linked views include previous/next navigation in review UIs or bulk download reporting for admins. For evidence, full audit snapshots are maintained historically.","summary":"Retrieve full product inquiry record by ID, all fields","parameters":[{"name":"productInquiryId","description":"Unique ID of the product inquiry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail for the specified product inquiry, with all domain and AI analysis fields","typeName":"IShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieve a single product inquiry record by unique inquiry ID. Reads directly from the product_inquiries table. Used by customers, sellers, or admins for support, evidence review, and communication workflows. This operation is critical for cases where full detail (including AI spam/sentiment flags) must be viewed by authorized parties.","path":"/shoppingMallAiBackend/seller/productInquiries/{productInquiryId}","method":"get","description":"Returns the complete detail for the identified product inquiry, including fields such as customer, product, title, body, status, public/private, AI flags, and answer reference. Access control restricts retrieval to owners, product sellers, or admins as appropriate to preserve privacy. Unauthorized or not found returns specific error codes or messages. Linked views include previous/next navigation in review UIs or bulk download reporting for admins. For evidence, full audit snapshots are maintained historically.","summary":"Retrieve full product inquiry record by ID, all fields","parameters":[{"name":"productInquiryId","description":"Unique ID of the product inquiry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail for the specified product inquiry, with all domain and AI analysis fields","typeName":"IShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve a single product inquiry record by unique inquiry ID. Reads directly from the product_inquiries table. Used by customers, sellers, or admins for support, evidence review, and communication workflows. This operation is critical for cases where full detail (including AI spam/sentiment flags) must be viewed by authorized parties.","path":"/shoppingMallAiBackend/admin/productInquiries/{productInquiryId}","method":"get","description":"Returns the complete detail for the identified product inquiry, including fields such as customer, product, title, body, status, public/private, AI flags, and answer reference. Access control restricts retrieval to owners, product sellers, or admins as appropriate to preserve privacy. Unauthorized or not found returns specific error codes or messages. Linked views include previous/next navigation in review UIs or bulk download reporting for admins. For evidence, full audit snapshots are maintained historically.","summary":"Retrieve full product inquiry record by ID, all fields","parameters":[{"name":"productInquiryId","description":"Unique ID of the product inquiry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail for the specified product inquiry, with all domain and AI analysis fields","typeName":"IShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new product inquiry (customer-to-seller question on a product). Operates on the product_inquiries table, with all required attributes: customer, product, title, body, public setting, etc. Input is validated for spam, maximum lengths, inappropriate content, and customer identity as per schema/business compliance.","path":"/shoppingMallAiBackend/customer/productInquiries","method":"post","description":"Creates a new product inquiry in the system, linking the customer, target product, and inquiry content. Validates all inputs: max length, profanity, required fields, and spam analysis (AI/heuristics). Only an authenticated customer may create inquiries. After creation, triggers notification to the relevant seller and enforces appropriate permissions. Error responses are returned for invalid input or insufficient privileges. Related endpoints: search inquiry, get by ID, update, or delete. All actions are logged for audit/evidence.","summary":"Create a new product inquiry entry for a product","parameters":[],"requestBody":{"description":"Inquiry creation payload containing the required attributes for a customer-to-seller product question","typeName":"IShoppingMallAiBackendProductInquiry.ICreate"},"responseBody":{"description":"Newly created product inquiry record, including assigned ID and initial workflow status","typeName":"IShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer"},{"specification":"Update details of a product inquiry by ID, referencing the product_inquiries table. Permitted fields for update include body, status (draft/answered/etc.), and public/private setting. All changes are validated and logged for evidence. Access is limited to authorized customers and sellers, with admins able to override as per compliance workflow. Snapshot auditing ensures rollback and dispute traceability.","path":"/shoppingMallAiBackend/customer/productInquiries/{productInquiryId}","method":"put","description":"Updates the allowable mutable fields in a specific inquiry, by unique ID. Only the creator customer, the product's seller, or authorized admin can perform the operation. Fields updated are tracked in historical snapshots used for rollback or audit compliance. Attempts to update restricted fields, non-existent or unauthorized inquiries are blocked and return clear error codes. Major use cases: correcting an inquiry, responding to requests for clarification, or workflow status updates.","summary":"Update existing product inquiry details by ID","parameters":[{"name":"productInquiryId","description":"Unique identifier of the inquiry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for product inquiry, referencing mutable fields only per business logic","typeName":"IShoppingMallAiBackendProductInquiry.IUpdate"},"responseBody":{"description":"Updated product inquiry state after successful change, including snapshot metadata","typeName":"IShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer","seller","admin"],"name":"update","authorizationRole":"customer"},{"specification":"Update details of a product inquiry by ID, referencing the product_inquiries table. Permitted fields for update include body, status (draft/answered/etc.), and public/private setting. All changes are validated and logged for evidence. Access is limited to authorized customers and sellers, with admins able to override as per compliance workflow. Snapshot auditing ensures rollback and dispute traceability.","path":"/shoppingMallAiBackend/seller/productInquiries/{productInquiryId}","method":"put","description":"Updates the allowable mutable fields in a specific inquiry, by unique ID. Only the creator customer, the product's seller, or authorized admin can perform the operation. Fields updated are tracked in historical snapshots used for rollback or audit compliance. Attempts to update restricted fields, non-existent or unauthorized inquiries are blocked and return clear error codes. Major use cases: correcting an inquiry, responding to requests for clarification, or workflow status updates.","summary":"Update existing product inquiry details by ID","parameters":[{"name":"productInquiryId","description":"Unique identifier of the inquiry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for product inquiry, referencing mutable fields only per business logic","typeName":"IShoppingMallAiBackendProductInquiry.IUpdate"},"responseBody":{"description":"Updated product inquiry state after successful change, including snapshot metadata","typeName":"IShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer","seller","admin"],"name":"update","authorizationRole":"seller"},{"specification":"Update details of a product inquiry by ID, referencing the product_inquiries table. Permitted fields for update include body, status (draft/answered/etc.), and public/private setting. All changes are validated and logged for evidence. Access is limited to authorized customers and sellers, with admins able to override as per compliance workflow. Snapshot auditing ensures rollback and dispute traceability.","path":"/shoppingMallAiBackend/admin/productInquiries/{productInquiryId}","method":"put","description":"Updates the allowable mutable fields in a specific inquiry, by unique ID. Only the creator customer, the product's seller, or authorized admin can perform the operation. Fields updated are tracked in historical snapshots used for rollback or audit compliance. Attempts to update restricted fields, non-existent or unauthorized inquiries are blocked and return clear error codes. Major use cases: correcting an inquiry, responding to requests for clarification, or workflow status updates.","summary":"Update existing product inquiry details by ID","parameters":[{"name":"productInquiryId","description":"Unique identifier of the inquiry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for product inquiry, referencing mutable fields only per business logic","typeName":"IShoppingMallAiBackendProductInquiry.IUpdate"},"responseBody":{"description":"Updated product inquiry state after successful change, including snapshot metadata","typeName":"IShoppingMallAiBackendProductInquiry"},"authorizationRoles":["customer","seller","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Soft delete a product inquiry by its unique identifier. Only the original customer, the relevant seller, or an admin may perform this operation. The delete action is a soft delete via the 'deleted_at' field to preserve audit and compliance evidence. Operates on the product_inquiries table. Withdrawal, abuse, or privacy requests are handled here, with all related evidence and audit requirements documented.","path":"/shoppingMallAiBackend/customer/productInquiries/{productInquiryId}","method":"delete","description":"Marks the selected inquiry as deleted, performing a soft delete using the 'deleted_at' timestamp. The record persists for evidence/compliance. Unauthorized or inappropriate deletion requests are rejected, and explicit error responses are standard. After deletion, the inquiry is excluded from normal search and view operations but may appear in audit/reporting interfaces.","summary":"Soft delete a product inquiry by ID and authorized user","parameters":[{"name":"productInquiryId","description":"Unique identifier of the product inquiry to soft delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","admin"],"name":"erase","authorizationRole":"customer"},{"specification":"Soft delete a product inquiry by its unique identifier. Only the original customer, the relevant seller, or an admin may perform this operation. The delete action is a soft delete via the 'deleted_at' field to preserve audit and compliance evidence. Operates on the product_inquiries table. Withdrawal, abuse, or privacy requests are handled here, with all related evidence and audit requirements documented.","path":"/shoppingMallAiBackend/seller/productInquiries/{productInquiryId}","method":"delete","description":"Marks the selected inquiry as deleted, performing a soft delete using the 'deleted_at' timestamp. The record persists for evidence/compliance. Unauthorized or inappropriate deletion requests are rejected, and explicit error responses are standard. After deletion, the inquiry is excluded from normal search and view operations but may appear in audit/reporting interfaces.","summary":"Soft delete a product inquiry by ID and authorized user","parameters":[{"name":"productInquiryId","description":"Unique identifier of the product inquiry to soft delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","admin"],"name":"erase","authorizationRole":"seller"},{"specification":"Soft delete a product inquiry by its unique identifier. Only the original customer, the relevant seller, or an admin may perform this operation. The delete action is a soft delete via the 'deleted_at' field to preserve audit and compliance evidence. Operates on the product_inquiries table. Withdrawal, abuse, or privacy requests are handled here, with all related evidence and audit requirements documented.","path":"/shoppingMallAiBackend/admin/productInquiries/{productInquiryId}","method":"delete","description":"Marks the selected inquiry as deleted, performing a soft delete using the 'deleted_at' timestamp. The record persists for evidence/compliance. Unauthorized or inappropriate deletion requests are rejected, and explicit error responses are standard. After deletion, the inquiry is excluded from normal search and view operations but may appear in audit/reporting interfaces.","summary":"Soft delete a product inquiry by ID and authorized user","parameters":[{"name":"productInquiryId","description":"Unique identifier of the product inquiry to soft delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","seller","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Allow clients to perform paginated, filtered searches over inquiry snapshot records for a particular inquiry, for evidence, rollback, or compliance review. Operates on the inquiry_snapshots table tied to a product inquiry ID. Supports filtering by actor, date/time range, history event type, and auditing fields. Used for display, audit, and complaint workflows in the context of customer-admin or regulatory requests.","path":"/shoppingMallAiBackend/customer/productInquiries/{productInquiryId}/inquirySnapshots","method":"patch","description":"Enables paginated/filtered search of all snapshots of a product inquiry—by inquiry ID—for rollback, discrepancy analysis, or compliance evidence. Snapshots record all key state fields, actors, timestamps, and AI analysis states at the time of change. Accessible by the inquiry owner (customer), related seller, or admin. Audit requirements ensure evidence is preserved as required by business rules. Excessive or unauthorized search attempts are logged for compliance monitoring.","summary":"Paginated, filterable search of inquiry snapshot history by inquiry ID","parameters":[{"name":"productInquiryId","description":"Unique ID of the product inquiry for which to search snapshots","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot list search and filter criteria, with sort and pagination control","typeName":"IShoppingMallAiBackendInquirySnapshot.IRequest"},"responseBody":{"description":"Paged result set of inquiry snapshot records with audit fields","typeName":"IPageIShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"customer"},{"specification":"Allow clients to perform paginated, filtered searches over inquiry snapshot records for a particular inquiry, for evidence, rollback, or compliance review. Operates on the inquiry_snapshots table tied to a product inquiry ID. Supports filtering by actor, date/time range, history event type, and auditing fields. Used for display, audit, and complaint workflows in the context of customer-admin or regulatory requests.","path":"/shoppingMallAiBackend/seller/productInquiries/{productInquiryId}/inquirySnapshots","method":"patch","description":"Enables paginated/filtered search of all snapshots of a product inquiry—by inquiry ID—for rollback, discrepancy analysis, or compliance evidence. Snapshots record all key state fields, actors, timestamps, and AI analysis states at the time of change. Accessible by the inquiry owner (customer), related seller, or admin. Audit requirements ensure evidence is preserved as required by business rules. Excessive or unauthorized search attempts are logged for compliance monitoring.","summary":"Paginated, filterable search of inquiry snapshot history by inquiry ID","parameters":[{"name":"productInquiryId","description":"Unique ID of the product inquiry for which to search snapshots","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot list search and filter criteria, with sort and pagination control","typeName":"IShoppingMallAiBackendInquirySnapshot.IRequest"},"responseBody":{"description":"Paged result set of inquiry snapshot records with audit fields","typeName":"IPageIShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Allow clients to perform paginated, filtered searches over inquiry snapshot records for a particular inquiry, for evidence, rollback, or compliance review. Operates on the inquiry_snapshots table tied to a product inquiry ID. Supports filtering by actor, date/time range, history event type, and auditing fields. Used for display, audit, and complaint workflows in the context of customer-admin or regulatory requests.","path":"/shoppingMallAiBackend/admin/productInquiries/{productInquiryId}/inquirySnapshots","method":"patch","description":"Enables paginated/filtered search of all snapshots of a product inquiry—by inquiry ID—for rollback, discrepancy analysis, or compliance evidence. Snapshots record all key state fields, actors, timestamps, and AI analysis states at the time of change. Accessible by the inquiry owner (customer), related seller, or admin. Audit requirements ensure evidence is preserved as required by business rules. Excessive or unauthorized search attempts are logged for compliance monitoring.","summary":"Paginated, filterable search of inquiry snapshot history by inquiry ID","parameters":[{"name":"productInquiryId","description":"Unique ID of the product inquiry for which to search snapshots","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot list search and filter criteria, with sort and pagination control","typeName":"IShoppingMallAiBackendInquirySnapshot.IRequest"},"responseBody":{"description":"Paged result set of inquiry snapshot records with audit fields","typeName":"IPageIShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a specific inquiry snapshot associated with a product inquiry. This operation fetches the full immutable state of a product inquiry at a particular historical change, identified by its snapshot ID. It is based on the shopping_mall_ai_backend_inquiry_snapshots table, which stores snapshots for compliance, rollback, and evidence. This operation is vital for audit events and legal recovery, ensuring historical views and supporting dispute workflows.","path":"/shoppingMallAiBackend/customer/productInquiries/{productInquiryId}/inquirySnapshots/{inquirySnapshotId}","method":"get","description":"This endpoint retrieves the detailed snapshot of a specific product inquiry event. The inquiry snapshot preserves the full state of the inquiry (title, body, public/private status, status code, actor, AI sentiment score, AI spam score, and timestamp) at a point in time. It provides legal and business evidence for compliance and supports full historical traceability for customer service, regulatory, and dispute management.\n\nThe operation reads from the inquiry_snapshots table, supporting granular restoration and rollback. Security-wise, only the inquiry owner, assigned seller, or admin are authorized. Error handling includes not found, unauthorized, or access to a deleted inquiry snapshot.\n\nThis operation complements inquiry state management APIs and is typically used in workflows requiring state restoration, change tracking, or external legal audits.","summary":"Get a specific inquiry snapshot by ID for a product inquiry (IShoppingMallAiBackendInquirySnapshot).","parameters":[{"name":"productInquiryId","description":"Unique identifier of the target product inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquirySnapshotId","description":"Unique identifier of the specific inquiry snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot information for the product inquiry at the specified event/time.","typeName":"IShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieve a specific inquiry snapshot associated with a product inquiry. This operation fetches the full immutable state of a product inquiry at a particular historical change, identified by its snapshot ID. It is based on the shopping_mall_ai_backend_inquiry_snapshots table, which stores snapshots for compliance, rollback, and evidence. This operation is vital for audit events and legal recovery, ensuring historical views and supporting dispute workflows.","path":"/shoppingMallAiBackend/seller/productInquiries/{productInquiryId}/inquirySnapshots/{inquirySnapshotId}","method":"get","description":"This endpoint retrieves the detailed snapshot of a specific product inquiry event. The inquiry snapshot preserves the full state of the inquiry (title, body, public/private status, status code, actor, AI sentiment score, AI spam score, and timestamp) at a point in time. It provides legal and business evidence for compliance and supports full historical traceability for customer service, regulatory, and dispute management.\n\nThe operation reads from the inquiry_snapshots table, supporting granular restoration and rollback. Security-wise, only the inquiry owner, assigned seller, or admin are authorized. Error handling includes not found, unauthorized, or access to a deleted inquiry snapshot.\n\nThis operation complements inquiry state management APIs and is typically used in workflows requiring state restoration, change tracking, or external legal audits.","summary":"Get a specific inquiry snapshot by ID for a product inquiry (IShoppingMallAiBackendInquirySnapshot).","parameters":[{"name":"productInquiryId","description":"Unique identifier of the target product inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquirySnapshotId","description":"Unique identifier of the specific inquiry snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot information for the product inquiry at the specified event/time.","typeName":"IShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve a specific inquiry snapshot associated with a product inquiry. This operation fetches the full immutable state of a product inquiry at a particular historical change, identified by its snapshot ID. It is based on the shopping_mall_ai_backend_inquiry_snapshots table, which stores snapshots for compliance, rollback, and evidence. This operation is vital for audit events and legal recovery, ensuring historical views and supporting dispute workflows.","path":"/shoppingMallAiBackend/admin/productInquiries/{productInquiryId}/inquirySnapshots/{inquirySnapshotId}","method":"get","description":"This endpoint retrieves the detailed snapshot of a specific product inquiry event. The inquiry snapshot preserves the full state of the inquiry (title, body, public/private status, status code, actor, AI sentiment score, AI spam score, and timestamp) at a point in time. It provides legal and business evidence for compliance and supports full historical traceability for customer service, regulatory, and dispute management.\n\nThe operation reads from the inquiry_snapshots table, supporting granular restoration and rollback. Security-wise, only the inquiry owner, assigned seller, or admin are authorized. Error handling includes not found, unauthorized, or access to a deleted inquiry snapshot.\n\nThis operation complements inquiry state management APIs and is typically used in workflows requiring state restoration, change tracking, or external legal audits.","summary":"Get a specific inquiry snapshot by ID for a product inquiry (IShoppingMallAiBackendInquirySnapshot).","parameters":[{"name":"productInquiryId","description":"Unique identifier of the target product inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquirySnapshotId","description":"Unique identifier of the specific inquiry snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot information for the product inquiry at the specified event/time.","typeName":"IShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new inquiry snapshot for a product inquiry. This operation records the current state of a given inquiry as an immutable snapshot in the shopping_mall_ai_backend_inquiry_snapshots table. This is essential for maintaining audit trails, satisfying compliance requirements, or preserving change logs for business, legal, or customer recovery purposes. The snapshot includes actors, all inquiry fields, and AI analysis attributes.","path":"/shoppingMallAiBackend/customer/productInquiries/{productInquiryId}/inquirySnapshots","method":"post","description":"This endpoint creates a new snapshot record for the specified product inquiry. The operation saves the current state of the inquiry including its title, body, public flag, status, actor, AI sentiment and spam scores, and timestamps. Each snapshot is preserved as evidence of inquiry state at the event for later rollback, compliance, and legal requirements.\n\nSecurity: Only the inquiry owner (customer), the assigned seller, or an admin can trigger a snapshot. Business logic ensures proper audit logging and limits frequency to prevent abuse. Returns the newly created snapshot entity.\n\nRelated operations: Used after meaningful changes or before critical workflow transitions (block, answer, escalate, etc). Error cases cover permission, missing inquiry, or invalid state transitions.","summary":"Create a new inquiry snapshot for a product inquiry (IShoppingMallAiBackendInquirySnapshot.ICreate).","parameters":[{"name":"productInquiryId","description":"Unique identifier of the parent product inquiry.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot creation details according to business and audit requirements.","typeName":"IShoppingMallAiBackendInquirySnapshot.ICreate"},"responseBody":{"description":"Created inquiry snapshot resource (point-in-time record).","typeName":"IShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"create","authorizationRole":"customer"},{"specification":"Create a new inquiry snapshot for a product inquiry. This operation records the current state of a given inquiry as an immutable snapshot in the shopping_mall_ai_backend_inquiry_snapshots table. This is essential for maintaining audit trails, satisfying compliance requirements, or preserving change logs for business, legal, or customer recovery purposes. The snapshot includes actors, all inquiry fields, and AI analysis attributes.","path":"/shoppingMallAiBackend/seller/productInquiries/{productInquiryId}/inquirySnapshots","method":"post","description":"This endpoint creates a new snapshot record for the specified product inquiry. The operation saves the current state of the inquiry including its title, body, public flag, status, actor, AI sentiment and spam scores, and timestamps. Each snapshot is preserved as evidence of inquiry state at the event for later rollback, compliance, and legal requirements.\n\nSecurity: Only the inquiry owner (customer), the assigned seller, or an admin can trigger a snapshot. Business logic ensures proper audit logging and limits frequency to prevent abuse. Returns the newly created snapshot entity.\n\nRelated operations: Used after meaningful changes or before critical workflow transitions (block, answer, escalate, etc). Error cases cover permission, missing inquiry, or invalid state transitions.","summary":"Create a new inquiry snapshot for a product inquiry (IShoppingMallAiBackendInquirySnapshot.ICreate).","parameters":[{"name":"productInquiryId","description":"Unique identifier of the parent product inquiry.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot creation details according to business and audit requirements.","typeName":"IShoppingMallAiBackendInquirySnapshot.ICreate"},"responseBody":{"description":"Created inquiry snapshot resource (point-in-time record).","typeName":"IShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"create","authorizationRole":"seller"},{"specification":"Create a new inquiry snapshot for a product inquiry. This operation records the current state of a given inquiry as an immutable snapshot in the shopping_mall_ai_backend_inquiry_snapshots table. This is essential for maintaining audit trails, satisfying compliance requirements, or preserving change logs for business, legal, or customer recovery purposes. The snapshot includes actors, all inquiry fields, and AI analysis attributes.","path":"/shoppingMallAiBackend/admin/productInquiries/{productInquiryId}/inquirySnapshots","method":"post","description":"This endpoint creates a new snapshot record for the specified product inquiry. The operation saves the current state of the inquiry including its title, body, public flag, status, actor, AI sentiment and spam scores, and timestamps. Each snapshot is preserved as evidence of inquiry state at the event for later rollback, compliance, and legal requirements.\n\nSecurity: Only the inquiry owner (customer), the assigned seller, or an admin can trigger a snapshot. Business logic ensures proper audit logging and limits frequency to prevent abuse. Returns the newly created snapshot entity.\n\nRelated operations: Used after meaningful changes or before critical workflow transitions (block, answer, escalate, etc). Error cases cover permission, missing inquiry, or invalid state transitions.","summary":"Create a new inquiry snapshot for a product inquiry (IShoppingMallAiBackendInquirySnapshot.ICreate).","parameters":[{"name":"productInquiryId","description":"Unique identifier of the parent product inquiry.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot creation details according to business and audit requirements.","typeName":"IShoppingMallAiBackendInquirySnapshot.ICreate"},"responseBody":{"description":"Created inquiry snapshot resource (point-in-time record).","typeName":"IShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update an existing inquiry snapshot for a product inquiry. Allows for administrative amendments in situations requiring annotation or correction of historical state for compliance or error remediation. Operates on the shopping_mall_ai_backend_inquiry_snapshots table, supporting correction of metadata, status, or actor at a snapshot event (but not the logical business state).","path":"/shoppingMallAiBackend/admin/productInquiries/{productInquiryId}/inquirySnapshots/{inquirySnapshotId}","method":"put","description":"This operation updates certain metadata for a specific inquiry snapshot belonging to a product inquiry. Intended for administrative or compliance-corrective editing of the historical record; does not alter original business content except for annotations, actor info, or status correction (as allowed by business rules).\n\nSecurity: Only admin or system roles can update inquiry snapshots. Error handling: not found, permission denied, or business rule violation (immutable content). Used in incident, forensic, or compliance scenarios and should be rare. Logs all changes for audit.","summary":"Update metadata for a specific inquiry snapshot (IShoppingMallAiBackendInquirySnapshot.IUpdate).","parameters":[{"name":"productInquiryId","description":"Unique identifier of the parent product inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquirySnapshotId","description":"Unique identifier of the inquiry snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields permitted for update in inquiry snapshot metadata.","typeName":"IShoppingMallAiBackendInquirySnapshot.IUpdate"},"responseBody":{"description":"Updated inquiry snapshot resource with revised metadata.","typeName":"IShoppingMallAiBackendInquirySnapshot"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (soft delete) an inquiry snapshot for a product inquiry. This operation marks the specified inquiry snapshot as deleted, preserving record for compliance but removing it from normal business visibility. Operates on shopping_mall_ai_backend_inquiry_snapshots, setting deleted_at timestamp for traceability.","path":"/shoppingMallAiBackend/admin/productInquiries/{productInquiryId}/inquirySnapshots/{inquirySnapshotId}","method":"delete","description":"This operation marks a specific inquiry snapshot resource as deleted in the context of the parent product inquiry. The snapshot is retained for audit and compliance, but no longer appears in general inquiry histories. Only administrators can execute this operation.\n\nPerforming this action guarantees legal and compliance safeguards regarding audit trails and dispute management. Attempts to delete immutable, evidence-locked, or referenced snapshots result in an error. Logs event with operator and timestamp.","summary":"Delete (soft delete) a specific inquiry snapshot (IShoppingMallAiBackendInquirySnapshot).","parameters":[{"name":"productInquiryId","description":"Unique identifier of the parent product inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquirySnapshotId","description":"Unique identifier of the inquiry snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Search and retrieve a filtered, paginated list of product reviews for the shopping mall platform. This operation provides advanced searching, sorting, and pagination over the shopping_mall_ai_backend_product_reviews table, supporting business analytics, compliance queries, and end-user/buyer review exploration. Filters include product, customer, order item, rating range, status, and time window.","path":"/shoppingMallAiBackend/customer/productReviews","method":"patch","description":"This endpoint enables advanced querying and full-text search for product reviews. Users, sellers, or admins can search reviews by product, customer, rating, status, AI attributes, and various business filters. The operation is critical for customer experience, business intelligence, and compliance analysis.\n\nSecurity model: Customers may only query their own reviews, sellers get reviews on owned products, and admins may access all. Supports pagination and result ordering (newest, rating high-low, etc). Error handling includes invalid filters, forbidden access, or query overload prevention.\n\nThis operation supports business reporting, user dashboards, and is integrated into aggregated rating and analytics flows.","summary":"Search for product reviews using advanced filters (IPageIShoppingMallAiBackendProductReview.ISummary).","parameters":[],"requestBody":{"description":"Search and filter criteria for product reviews.","typeName":"IShoppingMallAiBackendProductReview.IRequest"},"responseBody":{"description":"Paginated list of product review summaries matching search criteria.","typeName":"IPageIShoppingMallAiBackendProductReview.ISummary"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"customer"},{"specification":"Search and retrieve a filtered, paginated list of product reviews for the shopping mall platform. This operation provides advanced searching, sorting, and pagination over the shopping_mall_ai_backend_product_reviews table, supporting business analytics, compliance queries, and end-user/buyer review exploration. Filters include product, customer, order item, rating range, status, and time window.","path":"/shoppingMallAiBackend/seller/productReviews","method":"patch","description":"This endpoint enables advanced querying and full-text search for product reviews. Users, sellers, or admins can search reviews by product, customer, rating, status, AI attributes, and various business filters. The operation is critical for customer experience, business intelligence, and compliance analysis.\n\nSecurity model: Customers may only query their own reviews, sellers get reviews on owned products, and admins may access all. Supports pagination and result ordering (newest, rating high-low, etc). Error handling includes invalid filters, forbidden access, or query overload prevention.\n\nThis operation supports business reporting, user dashboards, and is integrated into aggregated rating and analytics flows.","summary":"Search for product reviews using advanced filters (IPageIShoppingMallAiBackendProductReview.ISummary).","parameters":[],"requestBody":{"description":"Search and filter criteria for product reviews.","typeName":"IShoppingMallAiBackendProductReview.IRequest"},"responseBody":{"description":"Paginated list of product review summaries matching search criteria.","typeName":"IPageIShoppingMallAiBackendProductReview.ISummary"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Search and retrieve a filtered, paginated list of product reviews for the shopping mall platform. This operation provides advanced searching, sorting, and pagination over the shopping_mall_ai_backend_product_reviews table, supporting business analytics, compliance queries, and end-user/buyer review exploration. Filters include product, customer, order item, rating range, status, and time window.","path":"/shoppingMallAiBackend/admin/productReviews","method":"patch","description":"This endpoint enables advanced querying and full-text search for product reviews. Users, sellers, or admins can search reviews by product, customer, rating, status, AI attributes, and various business filters. The operation is critical for customer experience, business intelligence, and compliance analysis.\n\nSecurity model: Customers may only query their own reviews, sellers get reviews on owned products, and admins may access all. Supports pagination and result ordering (newest, rating high-low, etc). Error handling includes invalid filters, forbidden access, or query overload prevention.\n\nThis operation supports business reporting, user dashboards, and is integrated into aggregated rating and analytics flows.","summary":"Search for product reviews using advanced filters (IPageIShoppingMallAiBackendProductReview.ISummary).","parameters":[],"requestBody":{"description":"Search and filter criteria for product reviews.","typeName":"IShoppingMallAiBackendProductReview.IRequest"},"responseBody":{"description":"Paginated list of product review summaries matching search criteria.","typeName":"IPageIShoppingMallAiBackendProductReview.ISummary"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve detailed information about a single product review entity by its unique review identifier. Looks up a review from shopping_mall_ai_backend_product_reviews, returning all business, rating, order, and AI moderation fields. Used in detailed review displays and compliance audit.","path":"/shoppingMallAiBackend/customer/productReviews/{productReviewId}","method":"get","description":"Retrieves the full, detailed record of a product review by ID. Returns all business-relevant data (author info, product reference, order item, title, body, rating, status, AI moderation data, timestamps). Access is strictly controlled: customers can get only their own reviews, sellers can get reviews for their products, and admins have access across the system.\n\nCritical for customer-facing review detail pages, order histories, and moderation. Handles not found, forbidden, and deleted review errors, and is protected for privacy and compliance. Related to review list/search and review history endpoints.","summary":"Get a product review by ID (IShoppingMallAiBackendProductReview).","parameters":[{"name":"productReviewId","description":"Unique identifier for the requested product review.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the specified product review.","typeName":"IShoppingMallAiBackendProductReview"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieve detailed information about a single product review entity by its unique review identifier. Looks up a review from shopping_mall_ai_backend_product_reviews, returning all business, rating, order, and AI moderation fields. Used in detailed review displays and compliance audit.","path":"/shoppingMallAiBackend/seller/productReviews/{productReviewId}","method":"get","description":"Retrieves the full, detailed record of a product review by ID. Returns all business-relevant data (author info, product reference, order item, title, body, rating, status, AI moderation data, timestamps). Access is strictly controlled: customers can get only their own reviews, sellers can get reviews for their products, and admins have access across the system.\n\nCritical for customer-facing review detail pages, order histories, and moderation. Handles not found, forbidden, and deleted review errors, and is protected for privacy and compliance. Related to review list/search and review history endpoints.","summary":"Get a product review by ID (IShoppingMallAiBackendProductReview).","parameters":[{"name":"productReviewId","description":"Unique identifier for the requested product review.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the specified product review.","typeName":"IShoppingMallAiBackendProductReview"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve detailed information about a single product review entity by its unique review identifier. Looks up a review from shopping_mall_ai_backend_product_reviews, returning all business, rating, order, and AI moderation fields. Used in detailed review displays and compliance audit.","path":"/shoppingMallAiBackend/admin/productReviews/{productReviewId}","method":"get","description":"Retrieves the full, detailed record of a product review by ID. Returns all business-relevant data (author info, product reference, order item, title, body, rating, status, AI moderation data, timestamps). Access is strictly controlled: customers can get only their own reviews, sellers can get reviews for their products, and admins have access across the system.\n\nCritical for customer-facing review detail pages, order histories, and moderation. Handles not found, forbidden, and deleted review errors, and is protected for privacy and compliance. Related to review list/search and review history endpoints.","summary":"Get a product review by ID (IShoppingMallAiBackendProductReview).","parameters":[{"name":"productReviewId","description":"Unique identifier for the requested product review.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the specified product review.","typeName":"IShoppingMallAiBackendProductReview"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new product review. The operation allows a customer who has purchased a product (and has an applicable order_item) to leave a review. Operates on the shopping_mall_ai_backend_product_reviews table, validating business logic for duplicate, abusive, or non-purchased-product review attempts. AI moderation and compliance tracing are triggered on creation.","path":"/shoppingMallAiBackend/customer/productReviews","method":"post","description":"Allows a customer to submit a new product review after completing a purchase, referencing the related product and order item. Full user identity, purchase validation, and AI moderation are enforced. Fields include title (optional), body, rating, and relevant order/product reference. Stores AI sentiment/spam results, and all state data required for compliance.\n\nIf duplicate review is attempted, policy violation or abusive content, the operation rejects the creation and delivers descriptive errors (maximum one review per product per order allowed). This endpoint is involved in customer review histories, moderation, and contributes directly to public reputation and analytics.\n\nSuccessful operation returns the created review resource.","summary":"Create a new product review (IShoppingMallAiBackendProductReview.ICreate).","parameters":[],"requestBody":{"description":"Details required for creating a product review, including purchase and author data.","typeName":"IShoppingMallAiBackendProductReview.ICreate"},"responseBody":{"description":"Resource representation of the newly created product review.","typeName":"IShoppingMallAiBackendProductReview"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer"},{"specification":"Update an existing product review. Permits a customer (author), admin, or (where permitted) seller to edit a product review. Operates on shopping_mall_ai_backend_product_reviews, supporting correction, clarification, or compliance editing. All updates are compliance-traced and validated against policy (one-time edit, windowed updates, AI moderation).","path":"/shoppingMallAiBackend/customer/productReviews/{productReviewId}","method":"put","description":"Edits business content or business status of an identified product review. Customers may update their own reviews (within allowed time or with admin escalation), admins can edit for compliance, sellers may annotate/flag (if allowed by policy). All changes are logged. Fields editable depend on policy (typically: title, body, rating, status). AI moderation is triggered on update.\n\nCertain updates are prohibited (e.g., review already deleted, outside update window, compliance lock). Attempts to breach business rules result in descriptive errors and audit logging. Success returns the updated resource with all visible fields.","summary":"Update a product review by ID (IShoppingMallAiBackendProductReview.IUpdate).","parameters":[{"name":"productReviewId","description":"Unique identifier for the review to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the product review and compliance data.","typeName":"IShoppingMallAiBackendProductReview.IUpdate"},"responseBody":{"description":"Updated resource representation of the product review.","typeName":"IShoppingMallAiBackendProductReview"},"authorizationRoles":["customer","admin"],"name":"update","authorizationRole":"customer"},{"specification":"Update an existing product review. Permits a customer (author), admin, or (where permitted) seller to edit a product review. Operates on shopping_mall_ai_backend_product_reviews, supporting correction, clarification, or compliance editing. All updates are compliance-traced and validated against policy (one-time edit, windowed updates, AI moderation).","path":"/shoppingMallAiBackend/admin/productReviews/{productReviewId}","method":"put","description":"Edits business content or business status of an identified product review. Customers may update their own reviews (within allowed time or with admin escalation), admins can edit for compliance, sellers may annotate/flag (if allowed by policy). All changes are logged. Fields editable depend on policy (typically: title, body, rating, status). AI moderation is triggered on update.\n\nCertain updates are prohibited (e.g., review already deleted, outside update window, compliance lock). Attempts to breach business rules result in descriptive errors and audit logging. Success returns the updated resource with all visible fields.","summary":"Update a product review by ID (IShoppingMallAiBackendProductReview.IUpdate).","parameters":[{"name":"productReviewId","description":"Unique identifier for the review to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the product review and compliance data.","typeName":"IShoppingMallAiBackendProductReview.IUpdate"},"responseBody":{"description":"Updated resource representation of the product review.","typeName":"IShoppingMallAiBackendProductReview"},"authorizationRoles":["customer","admin"],"name":"update","authorizationRole":"admin"},{"specification":"Delete (soft delete) an existing product review. Allows customers (review owners) or admins to mark a review as deleted (compliance soft delete), respecting evidence retention and audit policies. Changes status and sets deleted_at timestamp in shopping_mall_ai_backend_product_reviews.","path":"/shoppingMallAiBackend/customer/productReviews/{productReviewId}","method":"delete","description":"Marks a product review as deleted (soft delete) for business, legal, or compliance reasons. Soft delete preserves the review for traceability and audits but removes it from general public or customer UI. Only the review owner (customer) or admin may perform this operation.\n\nReviews linked to disputes, complaints, or compliance evidence may be restricted from deletion. All operations are logged. Attempts on non-existent or already deleted reviews return appropriate errors.","summary":"Delete (soft delete) a product review by ID (IShoppingMallAiBackendProductReview).","parameters":[{"name":"productReviewId","description":"Unique identifier for the review to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","authorizationRole":"customer"},{"specification":"Delete (soft delete) an existing product review. Allows customers (review owners) or admins to mark a review as deleted (compliance soft delete), respecting evidence retention and audit policies. Changes status and sets deleted_at timestamp in shopping_mall_ai_backend_product_reviews.","path":"/shoppingMallAiBackend/admin/productReviews/{productReviewId}","method":"delete","description":"Marks a product review as deleted (soft delete) for business, legal, or compliance reasons. Soft delete preserves the review for traceability and audits but removes it from general public or customer UI. Only the review owner (customer) or admin may perform this operation.\n\nReviews linked to disputes, complaints, or compliance evidence may be restricted from deletion. All operations are logged. Attempts on non-existent or already deleted reviews return appropriate errors.","summary":"Delete (soft delete) a product review by ID (IShoppingMallAiBackendProductReview).","parameters":[{"name":"productReviewId","description":"Unique identifier for the review to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Search and retrieve a paginated list of review snapshots for a given product review. Enables compliance, audit, and rollbacks by providing complete chronological history of review changes. Operates on shopping_mall_ai_backend_review_snapshots. Supported filters: rating, actor, status, time window, etc.","path":"/shoppingMallAiBackend/customer/productReviews/{productReviewId}/reviewSnapshots","method":"patch","description":"Enables full search and retrieval of all historical snapshots for a specific product review. Each snapshot provides the business content, rating, status, actor, and metadata as it was at the time. Access is controlled—customers see their review snapshots, sellers access snapshots for owned product reviews, admins have unrestricted visibility.\n\nSupports detailed audit, reverse chronological ordering, and bulk export. Used in legal disputes, recovery, and compliance reporting. Errors are returned for invalid IDs, insufficient permission, or out-of-bounds filters.","summary":"Search all snapshots of a product review (IPageIShoppingMallAiBackendReviewSnapshot).","parameters":[{"name":"productReviewId","description":"Unique identifier of the parent product review.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter criteria for review snapshots.","typeName":"IShoppingMallAiBackendReviewSnapshot.IRequest"},"responseBody":{"description":"Paginated list of review snapshot resources matching query filters.","typeName":"IPageIShoppingMallAiBackendReviewSnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"customer"},{"specification":"Search and retrieve a paginated list of review snapshots for a given product review. Enables compliance, audit, and rollbacks by providing complete chronological history of review changes. Operates on shopping_mall_ai_backend_review_snapshots. Supported filters: rating, actor, status, time window, etc.","path":"/shoppingMallAiBackend/seller/productReviews/{productReviewId}/reviewSnapshots","method":"patch","description":"Enables full search and retrieval of all historical snapshots for a specific product review. Each snapshot provides the business content, rating, status, actor, and metadata as it was at the time. Access is controlled—customers see their review snapshots, sellers access snapshots for owned product reviews, admins have unrestricted visibility.\n\nSupports detailed audit, reverse chronological ordering, and bulk export. Used in legal disputes, recovery, and compliance reporting. Errors are returned for invalid IDs, insufficient permission, or out-of-bounds filters.","summary":"Search all snapshots of a product review (IPageIShoppingMallAiBackendReviewSnapshot).","parameters":[{"name":"productReviewId","description":"Unique identifier of the parent product review.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter criteria for review snapshots.","typeName":"IShoppingMallAiBackendReviewSnapshot.IRequest"},"responseBody":{"description":"Paginated list of review snapshot resources matching query filters.","typeName":"IPageIShoppingMallAiBackendReviewSnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"seller"},{"specification":"Search and retrieve a paginated list of review snapshots for a given product review. Enables compliance, audit, and rollbacks by providing complete chronological history of review changes. Operates on shopping_mall_ai_backend_review_snapshots. Supported filters: rating, actor, status, time window, etc.","path":"/shoppingMallAiBackend/admin/productReviews/{productReviewId}/reviewSnapshots","method":"patch","description":"Enables full search and retrieval of all historical snapshots for a specific product review. Each snapshot provides the business content, rating, status, actor, and metadata as it was at the time. Access is controlled—customers see their review snapshots, sellers access snapshots for owned product reviews, admins have unrestricted visibility.\n\nSupports detailed audit, reverse chronological ordering, and bulk export. Used in legal disputes, recovery, and compliance reporting. Errors are returned for invalid IDs, insufficient permission, or out-of-bounds filters.","summary":"Search all snapshots of a product review (IPageIShoppingMallAiBackendReviewSnapshot).","parameters":[{"name":"productReviewId","description":"Unique identifier of the parent product review.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter criteria for review snapshots.","typeName":"IShoppingMallAiBackendReviewSnapshot.IRequest"},"responseBody":{"description":"Paginated list of review snapshot resources matching query filters.","typeName":"IPageIShoppingMallAiBackendReviewSnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieve a specific review snapshot by ID for a product review. Supports audit, rollback, legal, and compliance traceability. Fetches from shopping_mall_ai_backend_review_snapshots the detailed state of the review at a given change event (snapshot).","path":"/shoppingMallAiBackend/customer/productReviews/{productReviewId}/reviewSnapshots/{reviewSnapshotId}","method":"get","description":"Fetches the full details of a specific snapshot resource for a product review, including ratings, statuses, actors, AI scores, and all review content as it existed at that snapshot event. Access is security-controlled by role and review ownership.\n\nThis operation is essential for forensic trace, business continuity, and full compliance evidence practices. Related to temporal audit, dispute management, and major site history features. Errors include not found, unauthorized, or compliance-locked snapshot access.","summary":"Get a specific review snapshot for a product review (IShoppingMallAiBackendReviewSnapshot).","parameters":[{"name":"productReviewId","description":"Unique identifier of the product review.","schema":{"type":"string","format":"uuid"}},{"name":"reviewSnapshotId","description":"Unique identifier of the specific review snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Snapshot resource representing the state of the review at the event.","typeName":"IShoppingMallAiBackendReviewSnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"customer"},{"specification":"Retrieve a specific review snapshot by ID for a product review. Supports audit, rollback, legal, and compliance traceability. Fetches from shopping_mall_ai_backend_review_snapshots the detailed state of the review at a given change event (snapshot).","path":"/shoppingMallAiBackend/seller/productReviews/{productReviewId}/reviewSnapshots/{reviewSnapshotId}","method":"get","description":"Fetches the full details of a specific snapshot resource for a product review, including ratings, statuses, actors, AI scores, and all review content as it existed at that snapshot event. Access is security-controlled by role and review ownership.\n\nThis operation is essential for forensic trace, business continuity, and full compliance evidence practices. Related to temporal audit, dispute management, and major site history features. Errors include not found, unauthorized, or compliance-locked snapshot access.","summary":"Get a specific review snapshot for a product review (IShoppingMallAiBackendReviewSnapshot).","parameters":[{"name":"productReviewId","description":"Unique identifier of the product review.","schema":{"type":"string","format":"uuid"}},{"name":"reviewSnapshotId","description":"Unique identifier of the specific review snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Snapshot resource representing the state of the review at the event.","typeName":"IShoppingMallAiBackendReviewSnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"seller"},{"specification":"Retrieve a specific review snapshot by ID for a product review. Supports audit, rollback, legal, and compliance traceability. Fetches from shopping_mall_ai_backend_review_snapshots the detailed state of the review at a given change event (snapshot).","path":"/shoppingMallAiBackend/admin/productReviews/{productReviewId}/reviewSnapshots/{reviewSnapshotId}","method":"get","description":"Fetches the full details of a specific snapshot resource for a product review, including ratings, statuses, actors, AI scores, and all review content as it existed at that snapshot event. Access is security-controlled by role and review ownership.\n\nThis operation is essential for forensic trace, business continuity, and full compliance evidence practices. Related to temporal audit, dispute management, and major site history features. Errors include not found, unauthorized, or compliance-locked snapshot access.","summary":"Get a specific review snapshot for a product review (IShoppingMallAiBackendReviewSnapshot).","parameters":[{"name":"productReviewId","description":"Unique identifier of the product review.","schema":{"type":"string","format":"uuid"}},{"name":"reviewSnapshotId","description":"Unique identifier of the specific review snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Snapshot resource representing the state of the review at the event.","typeName":"IShoppingMallAiBackendReviewSnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"at","authorizationRole":"admin"},{"specification":"Create a new review snapshot for a product review. This operation persists the current review state as a snapshot for evidence, rollback, or compliance. Operates on the shopping_mall_ai_backend_review_snapshots table, supporting point-in-time data capture at every significant review change. Snapshots include rating, content, actor, and business fields.","path":"/shoppingMallAiBackend/customer/productReviews/{productReviewId}/reviewSnapshots","method":"post","description":"Creates a new snapshot of the product review's current state, preserving all business fields (body, rating, status, actor, and AI moderation data) for historical, audit, or legal purposes. This is necessary for every major review update or business process step (such as moderation, dispute, or edit).\n\nSecurity: Only review owners (customers), sellers (for owned reviews), or admins can create snapshots. All creation triggers compliance/audit logging. Errors include invalid review status, permission denied, or non-existent parent review.","summary":"Create a new snapshot for a product review (IShoppingMallAiBackendReviewSnapshot.ICreate).","parameters":[{"name":"productReviewId","description":"Unique identifier of the product review to snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field values for creating a new review snapshot.","typeName":"IShoppingMallAiBackendReviewSnapshot.ICreate"},"responseBody":{"description":"Created review snapshot resource (point-in-time copy of review state).","typeName":"IShoppingMallAiBackendReviewSnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"create","authorizationRole":"customer"},{"specification":"Create a new review snapshot for a product review. This operation persists the current review state as a snapshot for evidence, rollback, or compliance. Operates on the shopping_mall_ai_backend_review_snapshots table, supporting point-in-time data capture at every significant review change. Snapshots include rating, content, actor, and business fields.","path":"/shoppingMallAiBackend/seller/productReviews/{productReviewId}/reviewSnapshots","method":"post","description":"Creates a new snapshot of the product review's current state, preserving all business fields (body, rating, status, actor, and AI moderation data) for historical, audit, or legal purposes. This is necessary for every major review update or business process step (such as moderation, dispute, or edit).\n\nSecurity: Only review owners (customers), sellers (for owned reviews), or admins can create snapshots. All creation triggers compliance/audit logging. Errors include invalid review status, permission denied, or non-existent parent review.","summary":"Create a new snapshot for a product review (IShoppingMallAiBackendReviewSnapshot.ICreate).","parameters":[{"name":"productReviewId","description":"Unique identifier of the product review to snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field values for creating a new review snapshot.","typeName":"IShoppingMallAiBackendReviewSnapshot.ICreate"},"responseBody":{"description":"Created review snapshot resource (point-in-time copy of review state).","typeName":"IShoppingMallAiBackendReviewSnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"create","authorizationRole":"seller"},{"specification":"Create a new review snapshot for a product review. This operation persists the current review state as a snapshot for evidence, rollback, or compliance. Operates on the shopping_mall_ai_backend_review_snapshots table, supporting point-in-time data capture at every significant review change. Snapshots include rating, content, actor, and business fields.","path":"/shoppingMallAiBackend/admin/productReviews/{productReviewId}/reviewSnapshots","method":"post","description":"Creates a new snapshot of the product review's current state, preserving all business fields (body, rating, status, actor, and AI moderation data) for historical, audit, or legal purposes. This is necessary for every major review update or business process step (such as moderation, dispute, or edit).\n\nSecurity: Only review owners (customers), sellers (for owned reviews), or admins can create snapshots. All creation triggers compliance/audit logging. Errors include invalid review status, permission denied, or non-existent parent review.","summary":"Create a new snapshot for a product review (IShoppingMallAiBackendReviewSnapshot.ICreate).","parameters":[{"name":"productReviewId","description":"Unique identifier of the product review to snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field values for creating a new review snapshot.","typeName":"IShoppingMallAiBackendReviewSnapshot.ICreate"},"responseBody":{"description":"Created review snapshot resource (point-in-time copy of review state).","typeName":"IShoppingMallAiBackendReviewSnapshot"},"authorizationRoles":["customer","seller","admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update an existing review snapshot. This operation targets the shopping_mall_ai_backend_review_snapshots table, which stores historical snapshots of product reviews for audit, compliance, and rollback use cases. The update allows an authorized admin or business operator to correct a previously created review snapshot record, for example, if a correction is required for compliance or investigative purposes. This should be used sparingly for correction of audit records, and the reason for the update must be logged at the application level for full traceability. If the operation is attempting to update immutable or business-locked fields, a proper error should be returned.","path":"/shoppingMallAiBackend/admin/productReviews/{productReviewId}/reviewSnapshots/{reviewSnapshotId}","method":"put","description":"Update a specific review snapshot linked to a product review. This endpoint operates on the IShoppingMallAiBackendReviewSnapshot entity. Review snapshots capture the point-in-time state of a review—including content, rating, status, and audit fields. Authorized admins may update the snapshot content if legal or compliance correction is warranted, but audit trail and field-level integrity must always be preserved. The reviewSnapshotId must match the existing review snapshot for the designated product review. Security precautions and role-based traceability must be enforced, and a complete history of changes should be retained for legal audit. Attempts to alter locked/historically critical fields must fail with descriptive exception.","summary":"Update an existing review snapshot (IShoppingMallAiBackendReviewSnapshot) for a specific product review.","parameters":[{"name":"productReviewId","description":"Target product review's unique identifier (UUID) to which the snapshot belongs.","schema":{"type":"string","format":"uuid"}},{"name":"reviewSnapshotId","description":"Unique identifier (UUID) of the review snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the review snapshot. Must match the schema for IShoppingMallAiBackendReviewSnapshot.IUpdate, only allowed fields may be altered. All updates must follow audit and compliance policies.","typeName":"IShoppingMallAiBackendReviewSnapshot.IUpdate"},"responseBody":{"description":"Updated review snapshot entity upon successful update.","typeName":"IShoppingMallAiBackendReviewSnapshot"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"update"},{"specification":"Erase (delete) a review snapshot given its unique identifiers. This operation targets the shopping_mall_ai_backend_review_snapshots table, which archives historical review snapshots for audit and regulatory compliance. Erasing a snapshot will set the deleted_at field by soft delete if the schema supports it, ensuring nothing is physically lost for legal evidence. Hard delete operations must be strictly avoided. Only admins or appropriate system roles should erase review snapshots. Attempts to erase immutable, locked, or business-required snapshots must return proper errors.","path":"/shoppingMallAiBackend/admin/productReviews/{productReviewId}/reviewSnapshots/{reviewSnapshotId}","method":"delete","description":"Delete (soft-erase) a specific review snapshot. This operation is reserved for administrators and is subject to strict compliance checks. It does not physically remove the review snapshot record, but sets a deleted_at timestamp and makes it unavailable for standard queries. Regulatory and legal audit requirements demand that all erasures are fully tracked with before/after snapshots, and a record of the delete action (including who performed it and why) is retained in an audit log. The system should return appropriate error responses if the review snapshot cannot be erased due to compliance lock or legal hold.","summary":"Erase (soft-delete) an existing review snapshot for a product review.","parameters":[{"name":"productReviewId","description":"Target product review's unique identifier (UUID) to which the snapshot belongs.","schema":{"type":"string","format":"uuid"}},{"name":"reviewSnapshotId","description":"Unique identifier (UUID) of the review snapshot being erased.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationRoles":["admin"],"name":"erase"},{"specification":"List or search moderation events with filtering, sorting, and pagination. This operation queries the shopping_mall_ai_backend_moderation_events table, which logs all moderation actions on reviews and inquiries (such as block, unblock, edit, warn, escalate). Business users and compliance officers rely on sophisticated search for tracing actions, detecting abuse, generating audit reports, and identifying user patterns. Supports multi-criteria search (by target entity, event_type, actor, date range), enforced by strict pagination to control response size for performance and privacy.","path":"/shoppingMallAiBackend/admin/moderationEvents","method":"patch","description":"Search or filter moderation events by given criteria, supporting advanced audit, legal, and compliance needs. The search supports filters such as actor_type, event_type, target_inquiry_id, target_review_id, date range, and text search in reason. Returns paginated results with sensitive data filtered according to role and privacy policies. The endpoint is intended primarily for admin or compliance auditor use, and all search queries should be logged for compliance monitoring.","summary":"List/search moderation events with advanced filtering and pagination.","parameters":[],"requestBody":{"description":"Search and filter parameters, including actor, event type, target entities, reason, and date range. Must match IShoppingMallAiBackendModerationEvent.IRequest.","typeName":"IShoppingMallAiBackendModerationEvent.IRequest"},"responseBody":{"description":"Paginated moderation event summaries matching provided criteria.","typeName":"IPageIShoppingMallAiBackendModerationEvent.ISummary"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search"},{"specification":"Get a single moderation event by its unique ID. Targets the shopping_mall_ai_backend_moderation_events table, which captures all admin and automated moderation actions for reviews/inquiries. Returns all fields of the specified event, including links to the acted entity, actor metadata, event type, attached evidence, and audit trail details. Used for compliance workflow, dispute resolution, and audit evidence. If event does not exist or user is not authorized, return clear error.","path":"/shoppingMallAiBackend/admin/moderationEvents/{moderationEventId}","method":"get","description":"Retrieve detailed information about a specific moderation event (by UUID). Returns all fields, including event_type, actor information, links to affected inquiry/review, moderation evidence reference, timestamp, and reason. Full record must reflect compliance and privacy requirements. If not found, provide a suitable error message conforming to API standards.","summary":"Retrieve a single moderation event record by UUID.","parameters":[{"name":"moderationEventId","description":"UUID of the moderation event record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation event record matching the provided moderationEventId.","typeName":"IShoppingMallAiBackendModerationEvent"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at"},{"specification":"Create a new moderation event for review or inquiry. Inserts a record into the shopping_mall_ai_backend_moderation_events table (such as block, unblock, edit, escalate, etc.), records actor and moderation outcome, and links to target inquiry/review. Used for compliance, business logic, and AI moderation traceability. Request body must conform strictly to IShoppingMallAiBackendModerationEvent.ICreate, and audit trail must capture all context for later dispute or compliance audit. Only authorized moderators or admin can create moderation events via this endpoint.","path":"/shoppingMallAiBackend/admin/moderationEvents","method":"post","description":"Create a new moderation event. Accepts all required info (event_type, target_inquiry_id/target_review_id, actor_id, reason, attached evidence). Triggers business flows for content state update for the inquiry/review targeted. All moderation actions must be tracked, and evidence (if present) must be securely linked. On success, returns the created moderation event with all fields.","summary":"Create a new moderation event (block, unblock, edit, escalate, etc.) for a review or inquiry.","parameters":[],"requestBody":{"description":"Creation parameters for moderation event, conforming to IShoppingMallAiBackendModerationEvent.ICreate.","typeName":"IShoppingMallAiBackendModerationEvent.ICreate"},"responseBody":{"description":"The created moderation event record.","typeName":"IShoppingMallAiBackendModerationEvent"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"create"},{"specification":"Update a moderation event. Modifies fields in shopping_mall_ai_backend_moderation_events, such as reason, event_type, attached evidence, etc., for an existing moderation action. Used for correcting, escalating, or amending moderation outcomes. Strict role controls apply; only original actor or supervisor/admin may update. All changes must be audit-logged. Attempts to update immutable or compliance-locked fields must fail with error. Returns updated moderation event record if successful.","path":"/shoppingMallAiBackend/admin/moderationEvents/{moderationEventId}","method":"put","description":"Update an existing moderation event for a review or inquiry. Allows changing modifiable fields, typically reason or evidence references. Full audit controls required. Only staff with suitable authorization may use this endpoint. Any update to moderation event must result in audit log entry tracking previous and updated states for legal defensibility. Attempts to update immutable fields (e.g., original actor, timestamps) are not permitted.","summary":"Update fields of an existing moderation event record by UUID.","parameters":[{"name":"moderationEventId","description":"UUID of the moderation event to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the moderation event. Must conform to IShoppingMallAiBackendModerationEvent.IUpdate schema, and only authorized changes will be accepted.","typeName":"IShoppingMallAiBackendModerationEvent.IUpdate"},"responseBody":{"description":"The updated moderation event record, post-update.","typeName":"IShoppingMallAiBackendModerationEvent"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"update"},{"specification":"Delete (soft-erase) a moderation event. Sets deleted_at for the record in shopping_mall_ai_backend_moderation_events to mark as erased; operation is soft-delete (not physical erase) for audit and compliance. Only admins or high-level moderators may perform. Audit trail required for each erasure. Operation must enforce legal/compliance policy disallowing deletion of locked or critical moderation audit records. Returns confirmation or error for locked records.","path":"/shoppingMallAiBackend/admin/moderationEvents/{moderationEventId}","method":"delete","description":"Erase (soft-delete) a moderation event record by ID. Reserved for admin roles. Sets deleted_at timestamp, hides record from standard queries, and triggers audit record. For compliance: record the actor, timestamp, and reason for delete action at application layer. Hard-delete is forbidden unless regulatory exception applies. Returns no content upon success.","summary":"Erase a moderation event record (soft-delete) by UUID.","parameters":[{"name":"moderationEventId","description":"UUID of the moderation event to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationRoles":["admin"],"name":"erase"},{"specification":"List/search all appeals submitted for moderation events, supporting pagination, filters (status, appellant, date range), and full compliance trail. Operates on shopping_mall_ai_backend_appeals table, which tracks objections filed by customers, sellers, admins for review and inquiry moderation outcomes. This enables compliance, transparency, and systematic handling of disputes. Filtering on appellant, status, decision is supported. All actions must be fully audit-logged. Results are paginated for performance and security.","path":"/shoppingMallAiBackend/admin/appeals","method":"patch","description":"Search appeals against moderation events by various criteria including status, appellant_id, decision_comment, date created, etc. Applies policy for privacy, result visibility, and audit-trail completeness. Supports paginated result sets and compliance export if needed. Only authorized staff may list appeals with full details.","summary":"Search/list appeals to moderation events, filterable and paginated.","parameters":[],"requestBody":{"description":"Search and filter criteria for appeals, conforming to IShoppingMallAiBackendAppeal.IRequest.","typeName":"IShoppingMallAiBackendAppeal.IRequest"},"responseBody":{"description":"Paginated list of appeals matching the search criteria.","typeName":"IPageIShoppingMallAiBackendAppeal.ISummary"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search"},{"specification":"Get a single appeal record by ID. Targets shopping_mall_ai_backend_appeals, which stores objections to moderation events for reviews and inquiries. Each appeal record links to a moderation event, the appellant (user, seller, or admin), current status, and decision/notes. Returns all metadata and context. Used in compliance workflows, policy review, and dispute resolution tracking. If not found or unauthorized, returns proper error code/message.","path":"/shoppingMallAiBackend/admin/appeals/{appealId}","method":"get","description":"Retrieve a full detailed record of a specific appeal by its ID (UUID). Returns status, decision comments, references to moderation event, timestamps, and all audit fields. If record is not found, appropriate error response as per OpenAPI conventions is returned. Requires authorization (admin roles) for full access.","summary":"Retrieve a single appeal record for a moderation event by UUID.","parameters":[{"name":"appealId","description":"Unique identifier (UUID) of the appeal record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete appeal record object for the given appealId.","typeName":"IShoppingMallAiBackendAppeal"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at"},{"specification":"Create a new appeal (objection) to a moderation event, usually from a customer, seller, or admin. Inserts into the shopping_mall_ai_backend_appeals table, capturing moderation_event_id, appellant_id, reason, and initial status. Only authorized users (depending on business policy, usually the original affected party or their representative) may submit an appeal. Strict role and business rules apply to ensure only one appeal per moderation_event. On success, returns created appeal record with all metadata. All actions are tracked for audit and compliance.","path":"/shoppingMallAiBackend/customer/appeals","method":"post","description":"Submit a new appeal to a prior moderation event. Required fields: moderation_event_id (target event), appellant_id (who is appealing), reason, and initial status. Returns the newly created appeal record. On duplicate appeals or policy violation, returns error. Submission must be attributed, and all actions must be retained in audit trail.","summary":"Create a new appeal (objection) related to a moderation event.","parameters":[],"requestBody":{"description":"Creation information for an appeal, matching IShoppingMallAiBackendAppeal.ICreate schema.","typeName":"IShoppingMallAiBackendAppeal.ICreate"},"responseBody":{"description":"The created appeal record with full details.","typeName":"IShoppingMallAiBackendAppeal"},"authorizationRole":"customer","authorizationRoles":["customer","seller","admin"],"name":"create"},{"specification":"Create a new appeal (objection) to a moderation event, usually from a customer, seller, or admin. Inserts into the shopping_mall_ai_backend_appeals table, capturing moderation_event_id, appellant_id, reason, and initial status. Only authorized users (depending on business policy, usually the original affected party or their representative) may submit an appeal. Strict role and business rules apply to ensure only one appeal per moderation_event. On success, returns created appeal record with all metadata. All actions are tracked for audit and compliance.","path":"/shoppingMallAiBackend/seller/appeals","method":"post","description":"Submit a new appeal to a prior moderation event. Required fields: moderation_event_id (target event), appellant_id (who is appealing), reason, and initial status. Returns the newly created appeal record. On duplicate appeals or policy violation, returns error. Submission must be attributed, and all actions must be retained in audit trail.","summary":"Create a new appeal (objection) related to a moderation event.","parameters":[],"requestBody":{"description":"Creation information for an appeal, matching IShoppingMallAiBackendAppeal.ICreate schema.","typeName":"IShoppingMallAiBackendAppeal.ICreate"},"responseBody":{"description":"The created appeal record with full details.","typeName":"IShoppingMallAiBackendAppeal"},"authorizationRole":"seller","authorizationRoles":["customer","seller","admin"],"name":"create"},{"specification":"Create a new appeal (objection) to a moderation event, usually from a customer, seller, or admin. Inserts into the shopping_mall_ai_backend_appeals table, capturing moderation_event_id, appellant_id, reason, and initial status. Only authorized users (depending on business policy, usually the original affected party or their representative) may submit an appeal. Strict role and business rules apply to ensure only one appeal per moderation_event. On success, returns created appeal record with all metadata. All actions are tracked for audit and compliance.","path":"/shoppingMallAiBackend/admin/appeals","method":"post","description":"Submit a new appeal to a prior moderation event. Required fields: moderation_event_id (target event), appellant_id (who is appealing), reason, and initial status. Returns the newly created appeal record. On duplicate appeals or policy violation, returns error. Submission must be attributed, and all actions must be retained in audit trail.","summary":"Create a new appeal (objection) related to a moderation event.","parameters":[],"requestBody":{"description":"Creation information for an appeal, matching IShoppingMallAiBackendAppeal.ICreate schema.","typeName":"IShoppingMallAiBackendAppeal.ICreate"},"responseBody":{"description":"The created appeal record with full details.","typeName":"IShoppingMallAiBackendAppeal"},"authorizationRole":"admin","authorizationRoles":["customer","seller","admin"],"name":"create"},{"specification":"Update (patch) an appeal record. Operation allows changing modifiable fields (status, decision_comment, etc.) in shopping_mall_ai_backend_appeals. Used by authorized party or admin to respond or resolve appeal, update outcome, or add decision comments. All changes are tightly audit-logged. Only permitted fields (as per schema and business policy) may be updated. Policy disallows editing immutable fields such as moderation_event_id. Access controlled by business logic: typically only the original appellant or system role may patch an appeal.","path":"/shoppingMallAiBackend/admin/appeals/{appealId}","method":"put","description":"Modify an existing appeal record. Allows updating fields such as status, decision comment, and outcome for an existing objection to a moderation event. Protects compliance, audit, and workflow integrity by ensuring only authorized and traceable changes. Any attempt to change immutable fields or patch after final outcome should be rejected with an error. Returns updated appeal record if successful.","summary":"Update an existing appeal record for a moderation event (patch allowed fields only).","parameters":[{"name":"appealId","description":"UUID of the appeal record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the appeal record, conforming to IShoppingMallAiBackendAppeal.IUpdate schema.","typeName":"IShoppingMallAiBackendAppeal.IUpdate"},"responseBody":{"description":"Updated appeal record after update is successful.","typeName":"IShoppingMallAiBackendAppeal"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"update"},{"specification":"Erase (soft-delete) an appeal. Sets deleted_at and marks the record as inactive/unusable. Shopping_mall_ai_backend_appeals structure is designed for compliance: deleted records are not physically removed but are filtered out from queries and cannot be edited further. All erasures must be tightly audit-logged including actor and timestamp. If appeal is under legal hold, return error. Only system-level admin or compliance officers may delete appeal records.","path":"/shoppingMallAiBackend/admin/appeals/{appealId}","method":"delete","description":"Delete (soft-erase) a specific appeal record by setting deleted_at. Reserved for admin/compliance roles. Removes the appeal from all standard interfaces while preserving the audit log for future reference. Application logic must track who performed the delete and reason. No hard delete is permitted except by regulatory override. Compliance policies should strictly enforce record immutability for appeals under review or decision lock.","summary":"Erase (soft-delete) an appeal record for a moderation event.","parameters":[{"name":"appealId","description":"UUID of the appeal record to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationRoles":["admin"],"name":"erase"},{"specification":"This operation allows authenticated customers to search, filter, and retrieve a paginated list of their favorite products. It operates on the shopping_mall_ai_backend_favorite_products table. The endpoint supports complex search parameters, including product name or ID, favorited date range, and pagination options. The response returns favorited product details, and integrates with personalization and alert systems, aligning with AI recommendation enrichment in the shopping mall platform.","path":"/shoppingMallAiBackend/customer/favoriteProducts","method":"patch","description":"Retrieve a filtered and paginated list of favorite product records for the authenticated customer. The operation provides complex query capabilities, supporting searching by related product attributes, filtering by date of favoriting, and paginating results for efficient client display.\n\nEach result in the list presents product details along with the timestamp when the product was favorited. Access is limited to customers; sellers and admins do not operate on personal favorite lists but may reference analytics on the backend.\n\nAI-driven systems leverage bulk favorite data for recommendation, behavioral analysis, and customer engagement notifications (e.g., price drop or restock alerts). The operation enforces data security by restricting access to the requesting user's favorite list only.","summary":"Search and retrieve a paginated list of a customer's favorite products.","parameters":[],"requestBody":{"description":"Search/filter criteria and pagination for retrieving favorite product entries.","typeName":"IShoppingMallAiBackendFavoriteProduct.IRequest"},"responseBody":{"description":"Paginated list of favorite product records with related product details.","typeName":"IPageIShoppingMallAiBackendFavoriteProduct"},"authorizationRoles":["customer"],"name":"search","authorizationRole":"customer"},{"specification":"This operation retrieves the details of a single favorite product entry for the authenticated customer. It is based on the shopping_mall_ai_backend_favorite_products table, identified by favoriteProductId (UUID). The operation returns favorited product metadata including product ID, favorited timestamp, and nested product details suitable for client display/activity logs.","path":"/shoppingMallAiBackend/customer/favoriteProducts/{favoriteProductId}","method":"get","description":"Fetch the detailed record for a specific 'favorite product' identified by favoriteProductId. The returned entity includes core metadata from the favorite entry combined with comprehensive product details for UI or notification rendering.\n\nAccess to this record is strictly scoped to the owner customer. Admins/sellers may utilize underlying analytics interfaces for system-wide favorite insights, but are restricted from direct per-customer lookup from this endpoint.\n\nExtensive validation ensures that non-owned records or soft-deleted favorites return appropriate not found or access-denied errors.","summary":"Retrieve the details of a single favorite product by ID.","parameters":[{"name":"favoriteProductId","description":"Unique identifier of the favorite product record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete favorite product record and referenced product details.","typeName":"IShoppingMallAiBackendFavoriteProduct"},"authorizationRoles":["customer"],"name":"at","authorizationRole":"customer"},{"specification":"Create a new favorite product entry for the authenticated customer. This operation inserts a new record into the shopping_mall_ai_backend_favorite_products table, associating the customer with the indicated product. Proper validation ensures idempotency—duplicate attempts for the same product will be handled gracefully. Business logic supports subsequent notification triggers and AI personalization workflows.","path":"/shoppingMallAiBackend/customer/favoriteProducts","method":"post","description":"Allow a customer to favorite a product by specifying a valid product ID. This operation creates a new favoriteProducts record that links the authenticated customer with the target product. Duplicate attempts gracefully return existing favorite or error if already favorited and active.\n\nOn success, side effects may trigger real-time notifications (for price drops or restocks) and contribute to AI/ML recommendation datasets, increasing system behavioral insight for both customer and business.\n\nPermissions are limited to end-customers; sellers and admins cannot favorite products via this endpoint.","summary":"Mark a product as favorite for the authenticated customer.","parameters":[],"requestBody":{"description":"Data to create a favorite product link (requires productId).","typeName":"IShoppingMallAiBackendFavoriteProduct.ICreate"},"responseBody":{"description":"Created favorite product record and details.","typeName":"IShoppingMallAiBackendFavoriteProduct"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer"},{"specification":"Update the properties of an existing favorite product entry, such as soft-unfavorite or related metadata. The operation addresses the shopping_mall_ai_backend_favorite_products table via favoriteProductId. It validates that the caller owns the entry and may update state or auxiliary fields.","path":"/shoppingMallAiBackend/customer/favoriteProducts/{favoriteProductId}","method":"put","description":"Update a specific favorite product entry, primarily to support metadata modifications or soft unfavorite (set deleted_at). The operation ensures that only the authenticated customer can update their own favorite records.\n\nBusiness logic enforces consistency and may trigger notification cleanup or new data enrichment for AI/analytics workflows. Key error scenarios include access to non-existent or non-owned records and handling of soft-deleted (unfavorited) records.\n\nSellers and admins are not permitted to interact with this endpoint for favorite management purposes.","summary":"Update metadata or state of a favorite product.","parameters":[{"name":"favoriteProductId","description":"Unique identifier of the favorite product entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for favorite product metadata or unfavorite action.","typeName":"IShoppingMallAiBackendFavoriteProduct.IUpdate"},"responseBody":{"description":"Updated favorite product record after changes.","typeName":"IShoppingMallAiBackendFavoriteProduct"},"authorizationRoles":["customer"],"name":"update","authorizationRole":"customer"},{"specification":"Delete (unfavorite) a favorite product entry. This operation performs a soft deletion by setting the deleted_at timestamp in the shopping_mall_ai_backend_favorite_products table for the entry identified by favoriteProductId. Enforces strict ownership checks and ensures idempotent soft-unfavorite operations.","path":"/shoppingMallAiBackend/customer/favoriteProducts/{favoriteProductId}","method":"delete","description":"Soft-delete (unfavorite) the specified product from the authenticated customer's favorites by marking the record's deleted_at value. Only user-owned records may be affected. If the record is already soft-deleted or does not exist, an error or idempotent response will result.\n\nOn success, removal may result in updates to real-time alert subscriptions and AI-driven personalization (removal from recommendation/top picks or activity scoring).\n\nNo request/response body is required for this operation, only the favoriteProductId path parameter.","summary":"Unfavorite (soft-delete) a favorite product by ID.","parameters":[{"name":"favoriteProductId","description":"Unique identifier of the favorite product entry to unfavorite.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"erase","authorizationRole":"customer"},{"specification":"Retrieve the authenticated user's paginated list of favorited inquiries (bookmarked Q&A/customer support records). Operates on the shopping_mall_ai_backend_favorite_inquiries table. Supports filtering by inquiry attribute, date, and supports integration with notification/reminder systems, feeding AI and engagement analytics.","path":"/shoppingMallAiBackend/customer/favoriteInquiries","method":"patch","description":"Return a filtered, paginated list of the customer's favorite inquiries. This operation enables search/filtering by attributes (inquiry status, title/content) and temporal ranges. The endpoint supports results suitable for personal dashboards and proactive event notifications (answer posted, status change, etc.).\n\nThe result set includes key snapshot data and is available only to the owning customer, reinforcing privacy and business rule enforcement.","summary":"Search and list favorited inquiries for the user.","parameters":[],"requestBody":{"description":"Filtering/search criteria and pagination for inquiry favorites.","typeName":"IShoppingMallAiBackendFavoriteInquiry.IRequest"},"responseBody":{"description":"Paginated list of favorite inquiry records with inquiry details.","typeName":"IPageIShoppingMallAiBackendFavoriteInquiry"},"authorizationRoles":["customer"],"name":"search","authorizationRole":"customer"},{"specification":"Get the details of a single favorite inquiry for a customer, identified by favoriteInquiryId. Returns references to the inquiry and favoriting metadata, integrating with the shopping_mall_ai_backend_favorite_inquiries table. The operation provides a basis for consumer notification management and AI-driven engagement metrics.","path":"/shoppingMallAiBackend/customer/favoriteInquiries/{favoriteInquiryId}","method":"get","description":"Retrieve a single favorite inquiry record for the authenticated customer by its favoriteInquiryId. Returns inquiry attributes, favorited timestamp, and associated metadata for notification and dashboard rendering.\n\nStrict ownership checks prevent access to non-owned records. Soft-deleted (unfavorited) records will return not-found or error as appropriate.","summary":"Get details of a single favorite inquiry by ID.","parameters":[{"name":"favoriteInquiryId","description":"Unique identifier of the favorite inquiry record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed favorite inquiry record and referenced inquiry data.","typeName":"IShoppingMallAiBackendFavoriteInquiry"},"authorizationRoles":["customer"],"name":"at","authorizationRole":"customer"},{"specification":"Mark a customer inquiry as a favorite. This adds a record to the shopping_mall_ai_backend_favorite_inquiries table, providing persistent reference for the authenticated user. Business rules enforce idempotency and validation on the candidate inquiry (must be accessible/visible to the user).","path":"/shoppingMallAiBackend/customer/favoriteInquiries","method":"post","description":"Allow a user to save/bookmark a product inquiry to their personal favorite inquiries list by providing a valid inquiry ID. On success, the persistent link enables notification triggers for answer updates and is consumable by AI engagement systems.\n\nThe operation ensures that the inquiry exists, is visible, and accessible to the user, and that no duplicate favorite exists. Upon duplicate, existing favorite is returned or appropriate error is surfaced. Only customer roles may utilize this endpoint.","summary":"Favorite an inquiry for the authenticated user.","parameters":[],"requestBody":{"description":"Payload to create a favorite inquiry (must supply inquiryId).","typeName":"IShoppingMallAiBackendFavoriteInquiry.ICreate"},"responseBody":{"description":"Created favorite inquiry record.","typeName":"IShoppingMallAiBackendFavoriteInquiry"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer"},{"specification":"Update metadata or soft-unfavorite a favorite inquiry. Operates on the shopping_mall_ai_backend_favorite_inquiries table, identified by favoriteInquiryId. Permits changes such as toggling state or updating auxiliary info. Only owning user may perform updates.","path":"/shoppingMallAiBackend/customer/favoriteInquiries/{favoriteInquiryId}","method":"put","description":"Update metadata or mark a favorite inquiry as unfavorited (soft-delete by setting deleted_at). The operation validates ownership and enforces business logic for notification and AI systems. Error management ensures non-existent or already-unfavorited records are properly reported.\n\nThis endpoint is for user-level favorite logic; system-wide analytics or admin actions are handled elsewhere.","summary":"Update or unfavorite a favorite inquiry entry.","parameters":[{"name":"favoriteInquiryId","description":"Unique identifier of the favorite inquiry record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update details for a favorite inquiry entry.","typeName":"IShoppingMallAiBackendFavoriteInquiry.IUpdate"},"responseBody":{"description":"Updated favorite inquiry record after mutation.","typeName":"IShoppingMallAiBackendFavoriteInquiry"},"authorizationRoles":["customer"],"name":"update","authorizationRole":"customer"},{"specification":"Remove (unfavorite) a favorite inquiry for the authenticated user. This is a soft deletion (sets deleted_at timestamp) within shopping_mall_ai_backend_favorite_inquiries table for the entry identified by favoriteInquiryId. Idempotency and strict ownership checks are enforced.","path":"/shoppingMallAiBackend/customer/favoriteInquiries/{favoriteInquiryId}","method":"delete","description":"Remove a bookmarked inquiry from the user's favorited inquiries list via soft-delete (deleted_at). Ownership is enforced; only the user who bookmarked may remove. If entry is already removed, idempotency ensures graceful error or confirmation.\n\nAffects AI engagement and notifications by unsubscribing from further activity in the favorited thread or inquiry.","summary":"Unfavorite (soft-delete) a favorite inquiry by ID.","parameters":[{"name":"favoriteInquiryId","description":"Unique identifier of the favorite inquiry record to unfavorite.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"erase","authorizationRole":"customer"},{"specification":"Search and return a paginated list of a user's favorited addresses for quick selection and personalization. Operates on shopping_mall_ai_backend_favorite_addresses, returning address metadata and related timestamps. Supports filtering by alias or address fields and integrates with recent-order destination suggestions and AI fulfillment optimization.","path":"/shoppingMallAiBackend/customer/favoriteAddresses","method":"patch","description":"Retrieve a list of addresses that the authenticated customer has marked as favorites, with filters for alias, main/delivery attributes, and date ranges. Results enable efficient address selection, supporting downstream order workflows and personal suggestions.\n\nOutput includes address metadata suitable for UI, order forms, and address management activities. Only the customer can access and manage their own favorites via this endpoint.","summary":"List and search favorite addresses for the user.","parameters":[],"requestBody":{"description":"Search/filter fields and paging for address favorites.","typeName":"IShoppingMallAiBackendFavoriteAddress.IRequest"},"responseBody":{"description":"Paginated favorite address list with address metadata for display.","typeName":"IPageIShoppingMallAiBackendFavoriteAddress"},"authorizationRoles":["customer"],"name":"search","authorizationRole":"customer"},{"specification":"Get detailed information for a single favorite address record using favoriteAddressId. Returns bookmarked address data and time of favoriting; integrates with shopping_mall_ai_backend_favorite_addresses. The endpoint is critical for streamlined checkouts and address management UIs.","path":"/shoppingMallAiBackend/customer/favoriteAddresses/{favoriteAddressId}","method":"get","description":"Fetch the detailed information for one favorite address as selected by favoriteAddressId. The response contains all address details, timestamps, and personalization context for user pre-fill.\n\nRobust error handling ensures only owner access and not-found responses for deleted/missing records. Integration with AI-driven checkout acceleration and smart logistics is feasible from this data.","summary":"Get details of a single favorite address by ID.","parameters":[{"name":"favoriteAddressId","description":"Unique identifier of the favorite address record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed favorite address record and associated address fields.","typeName":"IShoppingMallAiBackendFavoriteAddress"},"authorizationRoles":["customer"],"name":"at","authorizationRole":"customer"},{"specification":"Creates a new favorite address entry for a customer. Operates on the shopping_mall_ai_backend_favorite_addresses table, linking a customer with one of their addresses. This allows users to bookmark frequently used or preferred addresses for quick access during checkout and order placement. The API validates that the address exists and that the customer owns the address before creating the favorite entry. Soft delete logic applies via the 'deleted_at' field for unfavoriting. Related business logic includes triggering notifications for address changes if linked addresses are updated, and ensuring no duplicate favorite entries per customer-address pair. History and snapshot tables support audit and rollback. This record enables rapid, personalized ordering and supports downstream notification and recommendation systems.","path":"/shoppingMallAiBackend/customer/favoriteAddresses","method":"post","description":"Create a new favorite address for a customer by linking their user ID with a specific address. The request validates both customer and address ownership and prevents duplication based on the unique constraint. Soft deletion allows for restoring or removing favorites without data loss. The operation ensures transactional integrity by updating related snapshot and notification tables where needed. Only authorized users may add favorites for their own accounts. Admins may create on behalf for troubleshooting or migration flows. Error handling covers duplicate favorite creation, invalid address ownership, and permission denial. Related audit logs and event triggers update downstream recommendation and quick-order systems.","summary":"Create a new favorite address record for a user, linking to an existing address entry.","parameters":[],"requestBody":{"description":"Favorite address creation details: specifies both the customer and the user-owned address to be marked as favorite.","typeName":"IShoppingMallAiBackendFavoriteAddress.ICreate"},"responseBody":{"description":"Details of the newly created favorite address record.","typeName":"IShoppingMallAiBackendFavoriteAddress"},"authorizationRole":"customer","authorizationRoles":["customer"],"name":"create"},{"specification":"Updates an existing favorite address entry for a customer. Operates on the shopping_mall_ai_backend_favorite_addresses table to modify metadata associated with the favorite. This may support use cases such as updating when the underlying address information changes, re-activating a soft-deleted favorite, or changing favorite-related display attributes if present. The operation uses the 'favoriteAddressId' as a path parameter to uniquely identify the favorite entry. Ensures only the owning customer or authorized admin can perform updates, and belongs to the target user's address set. Triggers audit logs and may update snapshots if favorite details change. Soft delete restoration is handled by nulling the 'deleted_at' timestamp.","path":"/shoppingMallAiBackend/customer/favoriteAddresses/{favoriteAddressId}","method":"put","description":"Update an existing favorite address entry. Requires that the favoriteAddressId references a valid favorite address owned by the requesting user. Supports restoration (un-favorite/restore) and, where implemented, updating display or notification preferences. Ensures only the favorite's owner or authorized admin can modify it. Operation handles error scenarios such as invalid ID, permission denial, or attempts to update an already deleted favorite. Related audits document before/after state changes. Soft deletion and restoration are managed by setting or clearing the 'deleted_at' timestamp.","summary":"Update a favorite address record identified by favoriteAddressId.","parameters":[{"name":"favoriteAddressId","description":"Unique identifier of the favorite address entry to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update details for the favorite address record, possibly including restoration after deletion or metadata changes.","typeName":"IShoppingMallAiBackendFavoriteAddress.IUpdate"},"responseBody":{"description":"The updated favorite address record after modification.","typeName":"IShoppingMallAiBackendFavoriteAddress"},"authorizationRole":"customer","authorizationRoles":["customer"],"name":"update"},{"specification":"Deletes (soft delete) a favorite address record by setting the 'deleted_at' timestamp. Operates on shopping_mall_ai_backend_favorite_addresses, making the favorite entry inactive without removing data from the database. Enforces that only the favorite's owner or an admin (for account assistance) can perform the operation. The path parameter 'favoriteAddressId' uniquely identifies the record to delete. Related snapshot and notification entities remain accessible for audits and compliance. Actual deletion is not performed to ensure auditability and recovery. The operation updates notification and favorite snapshot systems for downstream impacts.","path":"/shoppingMallAiBackend/customer/favoriteAddresses/{favoriteAddressId}","method":"delete","description":"Soft deletes (unfavorites) a favorite address record identified by favoriteAddressId. Ownership of the favorite and the underlying address are verified before deletion. Deactivation is performed by setting the 'deleted_at' field. The operation ensures that only the user or an admin can perform deletion, and special errors are returned for unauthorized or invalid requests. Notification and audit systems record the removal for downstream personalization and compliance.","summary":"Soft delete (unfavorite) a favorite address record by ID.","parameters":[{"name":"favoriteAddressId","description":"UUID of the favorite address to be soft deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"customer","authorizationRoles":["customer"],"name":"erase"},{"specification":"Searches and retrieves a filtered, paginated list of favorite snapshot records for the authenticated user. Operates on shopping_mall_ai_backend_favorite_snapshots, supporting search by type (PRODUCT, INQUIRY, ADDRESS), creation time, related object ID, customer, etc. Enables audit, evidence review, recovery, and compliance actions. The operation supports pagination (page, pageSize), sorting (created_at), and optional filters (object type, customer, etc) in the request body, as well as keyword text search on the serialized JSON state. Only authorized users can access their own snapshots; admins may audit for compliance. This is essential for recovery, rollback, and evidence as required by business rules.","path":"/shoppingMallAiBackend/customer/favoriteSnapshots","method":"patch","description":"Search and retrieve paginated favorite snapshot records for a user. The request body accepts advanced filtering, such as time ranges, object types, customer constraints, and keyword queries on snapshot contents. This endpoint is critical for audit/compliance, recovery from accidental deletion, and review of past favorite object states. Pagination and sorting parameters enable efficient navigation through large histories. Response includes both data and pagination metadata. Only the snapshot's owner or authorized admin may access full details. Business logic covers audit trail, privacy enforcement, and evidence compliance.","summary":"Filter, search, and paginate favorite snapshot records for a user or admin auditor.","parameters":[],"requestBody":{"description":"Query and filter parameters for favorite snapshot search. Includes pagination, sorting, and advanced filters such as object type and created_at range.","typeName":"IShoppingMallAiBackendFavoriteSnapshot.IRequest"},"responseBody":{"description":"Paginated search results of favorite snapshot records, including pagination metadata and a list of snapshots.","typeName":"IPageIShoppingMallAiBackendFavoriteSnapshot"},"authorizationRole":"customer","authorizationRoles":["customer","admin"],"name":"search"},{"specification":"Searches and retrieves a filtered, paginated list of favorite snapshot records for the authenticated user. Operates on shopping_mall_ai_backend_favorite_snapshots, supporting search by type (PRODUCT, INQUIRY, ADDRESS), creation time, related object ID, customer, etc. Enables audit, evidence review, recovery, and compliance actions. The operation supports pagination (page, pageSize), sorting (created_at), and optional filters (object type, customer, etc) in the request body, as well as keyword text search on the serialized JSON state. Only authorized users can access their own snapshots; admins may audit for compliance. This is essential for recovery, rollback, and evidence as required by business rules.","path":"/shoppingMallAiBackend/admin/favoriteSnapshots","method":"patch","description":"Search and retrieve paginated favorite snapshot records for a user. The request body accepts advanced filtering, such as time ranges, object types, customer constraints, and keyword queries on snapshot contents. This endpoint is critical for audit/compliance, recovery from accidental deletion, and review of past favorite object states. Pagination and sorting parameters enable efficient navigation through large histories. Response includes both data and pagination metadata. Only the snapshot's owner or authorized admin may access full details. Business logic covers audit trail, privacy enforcement, and evidence compliance.","summary":"Filter, search, and paginate favorite snapshot records for a user or admin auditor.","parameters":[],"requestBody":{"description":"Query and filter parameters for favorite snapshot search. Includes pagination, sorting, and advanced filters such as object type and created_at range.","typeName":"IShoppingMallAiBackendFavoriteSnapshot.IRequest"},"responseBody":{"description":"Paginated search results of favorite snapshot records, including pagination metadata and a list of snapshots.","typeName":"IPageIShoppingMallAiBackendFavoriteSnapshot"},"authorizationRole":"admin","authorizationRoles":["customer","admin"],"name":"search"},{"specification":"Retrieves a detailed favorite snapshot record by its unique identifier. Operates on shopping_mall_ai_backend_favorite_snapshots and is typically used by the favorite's owner to view historical object state, or by an admin for audit purposes. The 'favoriteSnapshotId' path parameter specifies the exact record to retrieve. Checks include validating access permissions and ensuring the snapshot exists. Response payload returns the full favorite snapshot entity including object type, object snapshot, creation metadata, and associated favorite references. Downstream business logic includes legal evidence review, rollback, and customer support.","path":"/shoppingMallAiBackend/customer/favoriteSnapshots/{favoriteSnapshotId}","method":"get","description":"Retrieve a specific favorite snapshot record by its ID. Only the snapshot's owner, an authorized administrator, or a system/compliance auditor may access the record. The operation validates existence and permission, then returns the historical snapshot content for audit or restoration. Common use cases include troubleshooting, recovery, or fulfilling user data access requests under compliance policies. Related notification or log systems may update for read tracking.","summary":"Get a single favorite snapshot record by its unique ID.","parameters":[{"name":"favoriteSnapshotId","description":"Unique identifier (UUID) of the favorite snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete favorite snapshot record containing snapshot object ID, object type, related favorite reference, and serialized object data.","typeName":"IShoppingMallAiBackendFavoriteSnapshot"},"authorizationRole":"customer","authorizationRoles":["customer","admin"],"name":"at"},{"specification":"Retrieves a detailed favorite snapshot record by its unique identifier. Operates on shopping_mall_ai_backend_favorite_snapshots and is typically used by the favorite's owner to view historical object state, or by an admin for audit purposes. The 'favoriteSnapshotId' path parameter specifies the exact record to retrieve. Checks include validating access permissions and ensuring the snapshot exists. Response payload returns the full favorite snapshot entity including object type, object snapshot, creation metadata, and associated favorite references. Downstream business logic includes legal evidence review, rollback, and customer support.","path":"/shoppingMallAiBackend/admin/favoriteSnapshots/{favoriteSnapshotId}","method":"get","description":"Retrieve a specific favorite snapshot record by its ID. Only the snapshot's owner, an authorized administrator, or a system/compliance auditor may access the record. The operation validates existence and permission, then returns the historical snapshot content for audit or restoration. Common use cases include troubleshooting, recovery, or fulfilling user data access requests under compliance policies. Related notification or log systems may update for read tracking.","summary":"Get a single favorite snapshot record by its unique ID.","parameters":[{"name":"favoriteSnapshotId","description":"Unique identifier (UUID) of the favorite snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete favorite snapshot record containing snapshot object ID, object type, related favorite reference, and serialized object data.","typeName":"IShoppingMallAiBackendFavoriteSnapshot"},"authorizationRole":"admin","authorizationRoles":["customer","admin"],"name":"at"},{"specification":"Creates a new favorite snapshot entry. Associates a snapshot of the favorited object (product/inquiry/address) with the current state at the time of favorite action. Operates on shopping_mall_ai_backend_favorite_snapshots. Request must specify the favorite type (target_type), the snapshot object ID, and a serialized representation of the state. Used for legal compliance, evidence, rollback, and audit. The operation ensures the favorite exists and is owned by the calling user. If the favorite entry has been previously deleted, snapshot creation is denied until restoration. Used in workflows for favorite creation, update, and historical evidence tracking.","path":"/shoppingMallAiBackend/customer/favoriteSnapshots","method":"post","description":"Create a favorite snapshot representing the state of a favorite product, inquiry, or address at a specific point in time. The request requires indication of object type and must point to an existing, valid favorite entry. Ensures snapshot is created only if the favorite is active. The created snapshot enables recovery, rollback, audit, and legal evidence management. Ownership and permission checks are performed before creation. Upon success, the new snapshot record is returned, ready for downstream compliance and restoration workflows.","summary":"Create a snapshot record for a favorite object (product, inquiry, or address) with current serialized state.","parameters":[],"requestBody":{"description":"Required data for creating a new favorite snapshot. Includes references to favorite product/inquiry/address and the current serialized object state.","typeName":"IShoppingMallAiBackendFavoriteSnapshot.ICreate"},"responseBody":{"description":"The newly created favorite snapshot record containing reference and serialized object state.","typeName":"IShoppingMallAiBackendFavoriteSnapshot"},"authorizationRole":"customer","authorizationRoles":["customer"],"name":"create"},{"specification":"Updates an existing favorite snapshot record with new serialized state or metadata. Operates on shopping_mall_ai_backend_favorite_snapshots and supports use cases including correcting a previous snapshot, updating evidence post-restoration, or updating object references. The 'favoriteSnapshotId' path parameter specifies which snapshot to update. Request body must include change details. Only the snapshot's owner or admin may update the record. Business logic includes validation of favorite association, enforcement of immutability on certain fields, and audit logging. Used for evidence correction, audit updates, and business recovery flows.","path":"/shoppingMallAiBackend/customer/favoriteSnapshots/{favoriteSnapshotId}","method":"put","description":"Update a favorite snapshot record, allowing correction or restoration of serialized object content or associated references. The specified favoriteSnapshotId must belong to the calling user or an authorized admin. Only permitted metadata or state fields may be altered; immutable fields (such as creation timestamp) remain unchanged. Critical for compliance corrections, audit trail maintenance, and legal or user-requested edits. Operation performs permission, existence, and change validation checks.","summary":"Update a favorite snapshot record by ID, replacing object state or references as permitted.","parameters":[{"name":"favoriteSnapshotId","description":"UUID of the favorite snapshot record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updates to snapshot content, including new serialized state or favorite association, as allowed.","typeName":"IShoppingMallAiBackendFavoriteSnapshot.IUpdate"},"responseBody":{"description":"The updated favorite snapshot record after modifications.","typeName":"IShoppingMallAiBackendFavoriteSnapshot"},"authorizationRole":"customer","authorizationRoles":["customer","admin"],"name":"update"},{"specification":"Updates an existing favorite snapshot record with new serialized state or metadata. Operates on shopping_mall_ai_backend_favorite_snapshots and supports use cases including correcting a previous snapshot, updating evidence post-restoration, or updating object references. The 'favoriteSnapshotId' path parameter specifies which snapshot to update. Request body must include change details. Only the snapshot's owner or admin may update the record. Business logic includes validation of favorite association, enforcement of immutability on certain fields, and audit logging. Used for evidence correction, audit updates, and business recovery flows.","path":"/shoppingMallAiBackend/admin/favoriteSnapshots/{favoriteSnapshotId}","method":"put","description":"Update a favorite snapshot record, allowing correction or restoration of serialized object content or associated references. The specified favoriteSnapshotId must belong to the calling user or an authorized admin. Only permitted metadata or state fields may be altered; immutable fields (such as creation timestamp) remain unchanged. Critical for compliance corrections, audit trail maintenance, and legal or user-requested edits. Operation performs permission, existence, and change validation checks.","summary":"Update a favorite snapshot record by ID, replacing object state or references as permitted.","parameters":[{"name":"favoriteSnapshotId","description":"UUID of the favorite snapshot record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updates to snapshot content, including new serialized state or favorite association, as allowed.","typeName":"IShoppingMallAiBackendFavoriteSnapshot.IUpdate"},"responseBody":{"description":"The updated favorite snapshot record after modifications.","typeName":"IShoppingMallAiBackendFavoriteSnapshot"},"authorizationRole":"admin","authorizationRoles":["customer","admin"],"name":"update"},{"specification":"Deletes (soft deletes) a favorite snapshot record by setting the 'deleted_at' field or logically retiring the entry. Operates on shopping_mall_ai_backend_favorite_snapshots. Only the snapshot's owner or an authorized admin may perform the operation. This is used for legal compliance when a user un-favorites an object, for privacy, or for evidence management. Downstream systems rely on this action for restoring states, managing object histories, and audit compliance. Actual row deletion is not performed to maintain audit trails and recovery capabilities.","path":"/shoppingMallAiBackend/customer/favoriteSnapshots/{favoriteSnapshotId}","method":"delete","description":"Soft deletes a favorite snapshot record, making it inactive while retaining the underlying data for audit and compliance. Deletion is performed by the owner or an authorized administrator. The record can be restored in case of error, but after deletion, cannot be used for evidence or restoration until recovered. Audits are updated with before and after states. All dependent systems are notified for compliance updates.","summary":"Soft delete (retire) a favorite snapshot record by its ID.","parameters":[{"name":"favoriteSnapshotId","description":"UUID of the favorite snapshot record to be logically deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"customer","authorizationRoles":["customer","admin"],"name":"erase"},{"specification":"Deletes (soft deletes) a favorite snapshot record by setting the 'deleted_at' field or logically retiring the entry. Operates on shopping_mall_ai_backend_favorite_snapshots. Only the snapshot's owner or an authorized admin may perform the operation. This is used for legal compliance when a user un-favorites an object, for privacy, or for evidence management. Downstream systems rely on this action for restoring states, managing object histories, and audit compliance. Actual row deletion is not performed to maintain audit trails and recovery capabilities.","path":"/shoppingMallAiBackend/admin/favoriteSnapshots/{favoriteSnapshotId}","method":"delete","description":"Soft deletes a favorite snapshot record, making it inactive while retaining the underlying data for audit and compliance. Deletion is performed by the owner or an authorized administrator. The record can be restored in case of error, but after deletion, cannot be used for evidence or restoration until recovered. Audits are updated with before and after states. All dependent systems are notified for compliance updates.","summary":"Soft delete (retire) a favorite snapshot record by its ID.","parameters":[{"name":"favoriteSnapshotId","description":"UUID of the favorite snapshot record to be logically deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationRoles":["customer","admin"],"name":"erase"},{"specification":"Performs a paginated, filtered search over favorite notification event records for the authenticated user or an admin auditor. Operates on shopping_mall_ai_backend_favorite_notifications, supporting query by type (notification_type), read status, channel, relate","path":"/shoppingMallAiBackend/customer/favoriteNotifications","method":"patch","description":"Search for and retrieve paginated favorite notification records for a user or admin auditor. Allows filtering by notification type, read/unread status, delivery channel, associated favorite object, and creation date ranges. The request body supports advanced filtering, sorting, and pagination for efficient querying in notification-heavy environments. Only notification owners or admins can access these records. The response includes notification data and pagination metadata for list rendering and bulk actions. Notifies downstream systems for read status updates and analytics.","summary":"Search, filter, and paginate favorite notification event records for the user or admin.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for favorite notification events, including type, read status, and channel.","typeName":"IShoppingMallAiBackendFavoriteNotification.IRequest"},"responseBody":{"description":"Paginated list of favorite notification records and pagination metadata.","typeName":"IPageIShoppingMallAiBackendFavoriteNotification"},"authorizationRole":"customer","authorizationRoles":["customer","admin"],"name":"search"},{"specification":"Performs a paginated, filtered search over favorite notification event records for the authenticated user or an admin auditor. Operates on shopping_mall_ai_backend_favorite_notifications, supporting query by type (notification_type), read status, channel, relate","path":"/shoppingMallAiBackend/admin/favoriteNotifications","method":"patch","description":"Search for and retrieve paginated favorite notification records for a user or admin auditor. Allows filtering by notification type, read/unread status, delivery channel, associated favorite object, and creation date ranges. The request body supports advanced filtering, sorting, and pagination for efficient querying in notification-heavy environments. Only notification owners or admins can access these records. The response includes notification data and pagination metadata for list rendering and bulk actions. Notifies downstream systems for read status updates and analytics.","summary":"Search, filter, and paginate favorite notification event records for the user or admin.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for favorite notification events, including type, read status, and channel.","typeName":"IShoppingMallAiBackendFavoriteNotification.IRequest"},"responseBody":{"description":"Paginated list of favorite notification records and pagination metadata.","typeName":"IPageIShoppingMallAiBackendFavoriteNotification"},"authorizationRole":"admin","authorizationRoles":["customer","admin"],"name":"search"},{"specification":"Retrieves a favorite notification record by its unique identifier. Operates on shopping_mall_ai_backend_favorite_notifications, used primarily by the notification's owner or by admins for audit/compliance validation. Requires 'favoriteNotificationId' as a path parameter. Ensures the requesting user or auditor is authorized, then fetches all details including event type, target favorite references, channel, read state, and any additional delivery metadata. Linked to bulk notification read/update actions and advanced notification settings.","path":"/shoppingMallAiBackend/customer/favoriteNotifications/{favoriteNotificationId}","method":"get","description":"Get a specific favorite notification record by unique ID. Only notification owners and administrators may access complete details. Enables workflow for marking as read, auditing, or reviewing notification delivery status. Useful for read receipts, delivery troubleshooting, and legal access reviews. Updates audit and event systems to reflect access where applicable.","summary":"Retrieve a favorite notification event by its unique ID.","parameters":[{"name":"favoriteNotificationId","description":"UUID of the favorite notification event record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Requested favorite notification event record, including delivery status and references.","typeName":"IShoppingMallAiBackendFavoriteNotification"},"authorizationRole":"customer","authorizationRoles":["customer","admin"],"name":"at"},{"specification":"Retrieves a favorite notification record by its unique identifier. Operates on shopping_mall_ai_backend_favorite_notifications, used primarily by the notification's owner or by admins for audit/compliance validation. Requires 'favoriteNotificationId' as a path parameter. Ensures the requesting user or auditor is authorized, then fetches all details including event type, target favorite references, channel, read state, and any additional delivery metadata. Linked to bulk notification read/update actions and advanced notification settings.","path":"/shoppingMallAiBackend/admin/favoriteNotifications/{favoriteNotificationId}","method":"get","description":"Get a specific favorite notification record by unique ID. Only notification owners and administrators may access complete details. Enables workflow for marking as read, auditing, or reviewing notification delivery status. Useful for read receipts, delivery troubleshooting, and legal access reviews. Updates audit and event systems to reflect access where applicable.","summary":"Retrieve a favorite notification event by its unique ID.","parameters":[{"name":"favoriteNotificationId","description":"UUID of the favorite notification event record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Requested favorite notification event record, including delivery status and references.","typeName":"IShoppingMallAiBackendFavoriteNotification"},"authorizationRole":"admin","authorizationRoles":["customer","admin"],"name":"at"},{"specification":"Creates a new favorite notification entry. Operates on shopping_mall_ai_backend_favorite_notifications, linking a favorite event with a notification channel and state for delivery. Request specifies which favorite object (product, inquiry, address) triggered the event, the notification type, channel (PUSH, EMAIL, etc.), and initial read state. Used for delivering alerts for favorite object changes, restocks, responses, or events. Ensures only authorized users or admin workflows can create notifications. Records delivery context for troubleshooting and analytics. Soft deletion via deleted_at is supported for bulk cleanup or privacy compliance.","path":"/shoppingMallAiBackend/customer/favoriteNotifications","method":"post","description":"Create a notification event for a favorite object event. Input specifies the triggering favorite object, event type, delivery channel, and initial state. Ensures the favorite object exists and is owned by the recipient. Triggers downstream delivery or queuing systems for actual message delivery. Handlers validate inputs and block unauthorized or duplicate notifications. Useful for real-time event processing, scheduled alerts, or manual admin notification actions. Supports rich delivery metadata for tracking, audit, and analytics.","summary":"Create a favorite notification event for a favorite object update, state, or action.","parameters":[],"requestBody":{"description":"Notification creation details: favorite object reference, event type, channel, and delivery state.","typeName":"IShoppingMallAiBackendFavoriteNotification.ICreate"},"responseBody":{"description":"The newly created favorite notification event record.","typeName":"IShoppingMallAiBackendFavoriteNotification"},"authorizationRole":"customer","authorizationRoles":["customer"],"name":"create"},{"specification":"Updates an existing favorite notification record, allowing changes to delivery status, channel, or associated metadata. Operates on shopping_mall_ai_backend_favorite_notifications. Requires path parameter 'favoriteNotificationId' to identify the record to update. Used for marking as read, updating delivery metadata, or changing event handling state. Only the owner or admin may perform updates. Audit trail of changes is enforced for compliance and analytics. Business logic covers permission validation, change constraints (e.g., only unread events can be marked as read), and propagation to downstream analytics and notification engines.","path":"/shoppingMallAiBackend/customer/favoriteNotifications/{favoriteNotificationId}","method":"put","description":"Update a favorite notification event record, such as marking as read, updating delivery details, or changing associated metadata. Must be performed by the notification's recipient or an authorized admin. Validates existence and change constraints before applying updates. Tracks before/after state for audit and compliance reporting. Notifies downstream systems and supports bulk update workflows as needed.","summary":"Update a favorite notification record by ID, changing read state, delivery, or metadata as authorized.","parameters":[{"name":"favoriteNotificationId","description":"UUID of the favorite notification record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the favorite notification record, such as read/unread status, delivery channel, or delivery metadata.","typeName":"IShoppingMallAiBackendFavoriteNotification.IUpdate"},"responseBody":{"description":"The updated favorite notification event record after changes are applied.","typeName":"IShoppingMallAiBackendFavoriteNotification"},"authorizationRole":"customer","authorizationRoles":["customer","admin"],"name":"update"},{"specification":"Updates an existing favorite notification record, allowing changes to delivery status, channel, or associated metadata. Operates on shopping_mall_ai_backend_favorite_notifications. Requires path parameter 'favoriteNotificationId' to identify the record to update. Used for marking as read, updating delivery metadata, or changing event handling state. Only the owner or admin may perform updates. Audit trail of changes is enforced for compliance and analytics. Business logic covers permission validation, change constraints (e.g., only unread events can be marked as read), and propagation to downstream analytics and notification engines.","path":"/shoppingMallAiBackend/admin/favoriteNotifications/{favoriteNotificationId}","method":"put","description":"Update a favorite notification event record, such as marking as read, updating delivery details, or changing associated metadata. Must be performed by the notification's recipient or an authorized admin. Validates existence and change constraints before applying updates. Tracks before/after state for audit and compliance reporting. Notifies downstream systems and supports bulk update workflows as needed.","summary":"Update a favorite notification record by ID, changing read state, delivery, or metadata as authorized.","parameters":[{"name":"favoriteNotificationId","description":"UUID of the favorite notification record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the favorite notification record, such as read/unread status, delivery channel, or delivery metadata.","typeName":"IShoppingMallAiBackendFavoriteNotification.IUpdate"},"responseBody":{"description":"The updated favorite notification event record after changes are applied.","typeName":"IShoppingMallAiBackendFavoriteNotification"},"authorizationRole":"admin","authorizationRoles":["customer","admin"],"name":"update"},{"specification":"This operation performs a hard delete of a favorite notification. It operates on the shopping_mall_ai_backend_favorite_notifications table, which logs notification events tied to a customer's favorite object (product, inquiry, or address). A favorite notification may represent a push/email/SMS alert sent to a customer (e.g., for product restock, price drop, inquiry reply, or address change). The operation requires the unique favoriteNotificationId (UUID) as a path parameter. Because the underlying schema does not provide a soft delete field, this is a permanent removal operation. Only users with a valid customer session matching the notification owner, or an admin, may perform deletion. It is critical to maintain audit and compliance logs before erasure.","path":"/shoppingMallAiBackend/customer/favoriteNotifications/{favoriteNotificationId}","method":"delete","description":"Delete a favorite notification event from the system permanently. This operation irreversibly erases the notification record from the shopping_mall_ai_backend_favorite_notifications table identified by its unique favoriteNotificationId. This table tracks notification events (such as restock or price drop) for customer favorites. Only the notification owner (customer) or admin with appropriate authorization may perform this operation. Security checks ensure that the requesting user's identity matches the record's owner, or that the user holds system admin privileges. The operation is audited for compliance, as deletion is not reversible and may impact notification history integrity.","summary":"Delete a favorite notification (hard delete) by favoriteNotificationId","parameters":[{"name":"favoriteNotificationId","description":"Unique identifier for the favorite notification to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","authorizationRole":"customer"},{"specification":"This operation performs a hard delete of a favorite notification. It operates on the shopping_mall_ai_backend_favorite_notifications table, which logs notification events tied to a customer's favorite object (product, inquiry, or address). A favorite notification may represent a push/email/SMS alert sent to a customer (e.g., for product restock, price drop, inquiry reply, or address change). The operation requires the unique favoriteNotificationId (UUID) as a path parameter. Because the underlying schema does not provide a soft delete field, this is a permanent removal operation. Only users with a valid customer session matching the notification owner, or an admin, may perform deletion. It is critical to maintain audit and compliance logs before erasure.","path":"/shoppingMallAiBackend/admin/favoriteNotifications/{favoriteNotificationId}","method":"delete","description":"Delete a favorite notification event from the system permanently. This operation irreversibly erases the notification record from the shopping_mall_ai_backend_favorite_notifications table identified by its unique favoriteNotificationId. This table tracks notification events (such as restock or price drop) for customer favorites. Only the notification owner (customer) or admin with appropriate authorization may perform this operation. Security checks ensure that the requesting user's identity matches the record's owner, or that the user holds system admin privileges. The operation is audited for compliance, as deletion is not reversible and may impact notification history integrity.","summary":"Delete a favorite notification (hard delete) by favoriteNotificationId","parameters":[{"name":"favoriteNotificationId","description":"Unique identifier for the favorite notification to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a paginated and optionally filtered/sorted list of articles (BBS posts, news, FAQs, or site content) from the shopping_mall_ai_backend_articles table. Supports querying by status, category, title keywords, and author, along with sorting and paging parameters. Integrates with article categories and supports multi-author entities (customer/seller/admin). Responds with summary information suitable for listing page display, including status and engagement metrics. Only articles with published status are shown to non-admin users; admins can filter on all statuses.","path":"/shoppingMallAiBackend/articles","method":"get","description":"This endpoint fetches a paginated list of articles from the shopping_mall_ai_backend_articles table. Each article may be a BBS post, FAQ, or news item, authored by users, sellers, or admins. Query supports filtering by status, category, title, author, and sorting options. Paging is standard (page, pageSize), and returned fields include articleId, title, summary, status, and engagement metrics. Non-admin users will only see articles marked published; admin users may filter all statuses. Security measures prevent exposure of drafts or hidden articles to unauthorized users. This is a foundational content browsing feature.","summary":"Get a paginated, filterable list of articles for content listing pages.","parameters":[],"requestBody":null,"responseBody":{"description":"Paged result of article summaries.","typeName":"IPageIShoppingMallAiBackendArticle.ISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null},{"specification":"Advanced search and pagination (with filter, sort, and complex query support) for articles in the shopping_mall_ai_backend_articles table. Accepts search parameters in the request body (filter by category, status, title/keyword, author, time range, etc.), as well as paging options. Used by admin panels and advanced UIs to support granular content management. Returns paginated data with summary article schema. All returned references are aligned to content security/role, i.e., only listings allowed by authorization.","path":"/shoppingMallAiBackend/admin/articles","method":"patch","description":"Perform a complex filtered search and paged listing retrieval of articles from shopping_mall_ai_backend_articles. The search request body supports various filtering: multiple status values (published, draft), category, keyword search in title or body, author, or time window. Additionally, flexible sorting (by date, popularity, etc) and paging are supported. Advanced usage is generally for admin or content manager roles, but support is present for complex public queries with only published articles returned. Records returned are summary type for listing, and internal permissions are always enforced for restricted post types.","summary":"Search and get a paginated, filtered list of articles (advanced criteria).","parameters":[],"requestBody":{"description":"Advanced article search, filter, and pagination criteria.","typeName":"IShoppingMallAiBackendArticle.IRequest"},"responseBody":{"description":"Paged result of articles matching search criteria.","typeName":"IPageIShoppingMallAiBackendArticle.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves the detailed information for a specific article, identified by articleId (UUID) from the shopping_mall_ai_backend_articles table. Returns all article fields as well as linked information such as the author's identity, category, and status. Enforces authorization so that only published or draft articles owned by the requester are accessible to non-admins. Used for article detail view, editing, or admin review. Audit trail is maintained on access.","path":"/shoppingMallAiBackend/articles/{articleId}","method":"get","description":"Fetch full detail information for a specific article/bbs entry by articleId. Response includes all fields in shopping_mall_ai_backend_articles with author metadata and category linkage resolved. Access permissions ensure that only publicly available or owned drafts are visible to non-admins. Audit logging may be implemented to track sensitive article access (e.g. for draft, admin-only, or deleted content). Used by article detail pages, edit windows, or content preview panels.","summary":"Get article detail by articleId, including all metadata and access checks.","parameters":[{"name":"articleId","description":"Unique identifier of the article to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for a single article.","typeName":"IShoppingMallAiBackendArticle"},"authorizationRoles":[],"name":"at","authorizationRole":null},{"specification":"Removes a specific comment associated with an article. This operation acts on the shopping_mall_ai_backend_article_comments table, which contains all comments and threaded replies for articles. It is intended for use by admins or authors with proper authorization to enforce moderation, compliance, or handle abuse. When invoked, it performs a hard delete if the comment's deleted_at field does not exist, otherwise sets the deleted_at timestamp to indicate a logical (soft) deletion. No response body is returned. Must enforce comment hierarchy integrity: if child replies exist, deletes them recursively if allowed by business rules, or prevents deletion and returns an error. Related resource: shopping_mall_ai_backend_articles (article master record). Key errors: comment not found, insufficient permissions, child comments exist.","path":"/shoppingMallAiBackend/admin/articles/{articleId}/comments/{commentId}","method":"delete","description":"Deletes a specific comment for an article, using the commentId and articleId path parameters. The operation will soft delete by setting deleted_at (if field exists per schema), otherwise performs a permanent deletion. Intended for use in content moderation, compliance, or author self-servicing. Handles cascading deletion or prevents deletion if replies exist, depending on business settings. Only authorized users (admin, author) may execute. Error responses provided for not found, forbidden, or child reply existence.","summary":"Delete (soft or hard) a comment on an article (shopping_mall_ai_backend_article_comments).","parameters":[{"name":"articleId","description":"ID of the parent article for which the comment is associated.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieves all article categories for content articles, operating on the shopping_mall_ai_backend_article_categories table. Fetches all active or matching content article categories to support navigation and content grouping. Article categories support tree and parent-child nesting for fine-grained organization. This endpoint is used for category navigation, search, and content organization in CMS/admin UI. Returns a paginated list of category summaries, including tree structure, category code, name, status. Supports query parameters for search, pagination, and filter options as defined by IRequest DTO.","path":"/shoppingMallAiBackend/admin/articleCategories","method":"get","description":"Lists all content article categories (shopping_mall_ai_backend_article_categories), returning their tree structure, summary meta, and active status. Results are paginated and filterable per business requirements for content navigation and category management. Typical consumers: UI dashboard, admin tools, CMS. Secure for admin/manager access.","summary":"Get paginated list of all article categories (shopping_mall_ai_backend_article_categories).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated and filterable list of all content article categories with summary information for navigation, search, and CMS use.","typeName":"IPageIShoppingMallAiBackendArticleCategory"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin"},{"specification":"Searches and retrieves a paginated, filtered list of article categories in the shopping mall backend system, acting on the shopping_mall_ai_backend_article_categories table. Supports advanced search, filter, sorting, and pagination based on category tree, parent-child relation, code, name, and activation status. Used by admin/CMS for tree-editing, category audits, maintenance. Accepts IRequest DTO in requestBody for specifying search conditions such as parent ID, name or code searches, visibility, and sort order. Returns IPageIShoppingMallAiBackendArticleCategory for paginated results.","path":"/shoppingMallAiBackend/admin/articleCategories","method":"patch","description":"Search and filter content article categories (shopping_mall_ai_backend_article_categories) by tree, parent, code, or other filter conditions. Paginated, supports advanced filter, used for CMS administration and navigation tree audits. Accepts search conditions via IRequest. Result is IPageIShoppingMallAiBackendArticleCategory.","summary":"Search & filter paginated list of article categories (shopping_mall_ai_backend_article_categories).","parameters":[],"requestBody":{"description":"Search/filter/sort/pagination conditions for article category query.","typeName":"IShoppingMallAiBackendArticleCategory.IRequest"},"responseBody":{"description":"Result of paginated article category search/filter operation, with all matched categories.","typeName":"IPageIShoppingMallAiBackendArticleCategory"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves the detail of a single article category by ID, from the shopping_mall_ai_backend_article_categories table. Returns all details of a specific article category, including its tree position, parent, status, and metadata. Used for admin/CMS category editing, display, and navigation. Returns an IShoppingMallAiBackendArticleCategory DTO.","path":"/shoppingMallAiBackend/admin/articleCategories/{categoryId}","method":"get","description":"Retrieves full details of a single article category (shopping_mall_ai_backend_article_categories) by categoryId. Includes all metadata, parent links, and status and is used in admin, CMS, and auditing tools.","summary":"Get detail of a single article category by ID (shopping_mall_ai_backend_article_categories).","parameters":[{"name":"categoryId","description":"Unique identifier (UUID) of the category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail about the requested article category entity.","typeName":"IShoppingMallAiBackendArticleCategory"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Admin operation to create a new article category in the shopping mall AI backend system. Targets shopping_mall_ai_backend_article_categories. Accepts all fields required to define a category (name, code, parent_id, display_order, etc) in ICreate DTO. Incorporates validation for unique code, correct parent assignment, and active status. Returns newly created article category details. Used in admin or CMS navigation management.","path":"/shoppingMallAiBackend/admin/articleCategories","method":"post","description":"Creates a new article category in the shopping mall backend (shopping_mall_ai_backend_article_categories). Requires admin permissions. Accepts full input via IShoppingMallAiBackendArticleCategory.ICreate DTO, validates uniqueness and parent linkage.","summary":"Create new article category (shopping_mall_ai_backend_article_categories).","parameters":[],"requestBody":{"description":"Full category information to create new article category, must include required fields (code, name, tree, status, etc).","typeName":"IShoppingMallAiBackendArticleCategory.ICreate"},"responseBody":{"description":"The created article category entity with full details.","typeName":"IShoppingMallAiBackendArticleCategory"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Update (put) an article category entity (shopping_mall_ai_backend_article_categories) for CMS or admin UI. Accepts full update via IUpdate DTO, including name, visibility, sorting, parent, and code. Requires admin permission and validation of business rules (uniqueness, parent-child, etc). Returns updated category details.","path":"/shoppingMallAiBackend/admin/articleCategories/{categoryId}","method":"put","description":"Updates an article category in shopping_mall_ai_backend_article_categories by its ID. Full replacement update. Requires admin authorization. Returns new version with updated fields, and validates for uniqueness, parent assignment, and tree integrity.","summary":"Update article category (shopping_mall_ai_backend_article_categories).","parameters":[{"name":"categoryId","description":"The unique ID of the article category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Category data to update; all updatable fields as per IUpdate DTO.","typeName":"IShoppingMallAiBackendArticleCategory.IUpdate"},"responseBody":{"description":"Updated article category entity with new details.","typeName":"IShoppingMallAiBackendArticleCategory"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes (soft or hard) an article category record from shopping_mall_ai_backend_article_categories by its unique ID. Handles either logical (soft) or hard deletion depending on whether deleted_at is in the schema. Integrity checks are performed to ensure no active child categories or linked articles exist before deletion. Used in admin/CMS UI. No response body returned.","path":"/shoppingMallAiBackend/admin/articleCategories/{categoryId}","method":"delete","description":"Deletes an article category given its categoryId. Soft or hard delete based on schema support. Fails if category has non-deleted children or referenced articles. Returns error for not found or integrity violation. Only admin may execute.","summary":"Delete (soft/hard) an article category (shopping_mall_ai_backend_article_categories).","parameters":[{"name":"categoryId","description":"ID of the article category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Advanced filtered listing/search of compliance events in the audit/compliance log system (shopping_mall_ai_backend_compliance_events). Supports search, query filtering, pagination, and sorting for system compliance and audit events. Accepts rich search criteria in IRequest DTO, including event type, actor, date ranges, target types, and affected entities. Returns paginated results as IPageIShoppingMallAiBackendComplianceEvent. Used by compliance officers, admins, and audit dashboards.","path":"/shoppingMallAiBackend/admin/complianceEvents","method":"patch","description":"Search, filter, and list compliance event logs (shopping_mall_ai_backend_compliance_events) with advanced filter conditions. Pagination, sorting, event type, actor type, actor id, target type are filterable. Used for compliance dashboards, legal/audit review, and integrity checks. IRequest contains all allowed filters.","summary":"Search and filter paginated compliance events (shopping_mall_ai_backend_compliance_events).","parameters":[],"requestBody":{"description":"Search, filter, and pagination conditions for compliance event queries.","typeName":"IShoppingMallAiBackendComplianceEvent.IRequest"},"responseBody":{"description":"Paginated, filtered compliance event audit/event logs in the compliance log system.","typeName":"IPageIShoppingMallAiBackendComplianceEvent"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin"},{"specification":"Retrieves detailed information about a specific compliance event from the shopping_mall_ai_backend_compliance_events table. Used in compliance, auditing, and forensic review. Returns all event metadata, actor information, and entity references for a given compliance event by ID. DTO is IShoppingMallAiBackendComplianceEvent.","path":"/shoppingMallAiBackend/admin/complianceEvents/{complianceEventId}","method":"get","description":"Fetches detail of a single compliance event by its complianceEventId, including actor, target, event payload, and all metadata. Used for compliance/audit dashboard or export/reporting. Requires admin authorization.","summary":"Get detail about a specific compliance event (shopping_mall_ai_backend_compliance_events).","parameters":[{"name":"complianceEventId","description":"Unique identifier of the compliance event.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed compliance event data and metadata fields.","typeName":"IShoppingMallAiBackendComplianceEvent"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin"},{"specification":"Creates a new compliance event in the compliance event log (shopping_mall_ai_backend_compliance_events), recording system or business regulatory actions. Accepts input data in ICreate DTO, including event type, actor (admin/customer/seller), target type, payload. Enforces strict input validation and compliance metadata consistency. Returns the created compliance event entity with all data filled. Used by admin or system apps only.","path":"/shoppingMallAiBackend/admin/complianceEvents","method":"post","description":"Records a new compliance/audit event for legal, regulatory, or business policy tracking. Only authorized admin/system can use. Input DTO: IShoppingMallAiBackendComplianceEvent.ICreate with all required event metadata, target linkage and actor context.","summary":"Create a compliance event in system log (shopping_mall_ai_backend_compliance_events).","parameters":[],"requestBody":{"description":"Compliance event data (event type, actor, target, payload, metadata, etc).","typeName":"IShoppingMallAiBackendComplianceEvent.ICreate"},"responseBody":{"description":"Created compliance event entity with all compliance/audit metadata filled.","typeName":"IShoppingMallAiBackendComplianceEvent"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin"},{"specification":"Updates an existing compliance event in the audit log, at shopping_mall_ai_backend_compliance_events table. Allows modification/correction of event type, actor, target, payload, etc, as permitted by business process or regulatory standards. Requires all updateable fields via IUpdate DTO. Returns updated compliance event entity. Used for compliance correction, audit process, or reclassification.","path":"/shoppingMallAiBackend/admin/complianceEvents/{complianceEventId}","method":"put","description":"Updates details of a compliance event (shopping_mall_ai_backend_compliance_events) based on its ID. Input DTO: IShoppingMallAiBackendComplianceEvent.IUpdate, updating event metadata, payload, linkages. Only admin may execute. Changes are recorded for audit consistency.","summary":"Update details of a compliance event (shopping_mall_ai_backend_compliance_events).","parameters":[{"name":"complianceEventId","description":"ID of the compliance event to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the compliance event entity (metadata, event context, etc) via IUpdate DTO.","typeName":"IShoppingMallAiBackendComplianceEvent.IUpdate"},"responseBody":{"description":"Updated compliance event record with corrected metadata and context.","typeName":"IShoppingMallAiBackendComplianceEvent"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin"},{"specification":"Deletes a compliance event by its unique ID from the shopping_mall_ai_backend_compliance_events table. Performs logical (soft) delete if supported via deleted_at, or physical removal otherwise. Must check for references from compliance snapshots or other audit logs and block deletion if integrity may be impaired. Used for compliance error correction, business process, or audit log clean-up. No response body returned.","path":"/shoppingMallAiBackend/admin/complianceEvents/{complianceEventId}","method":"delete","description":"Deletes (soft/hard) a compliance event from the audit/compliance log. Requires ID of event. Only admin may execute. Integrity checks performed to avoid orphaning compliance snapshots or regulatory chain-breaking. Returns error for not found, permission denied, or integrity issues.","summary":"Delete compliance event by ID (shopping_mall_ai_backend_compliance_events).","parameters":[{"name":"complianceEventId","description":"Unique ID of the compliance event to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin"},{"specification":"Retrieve a paginated and filtered list of compliance snapshots associated with a specific compliance event for advanced audit, compliance traceability, or regulatory review. Utilizes the shopping_mall_ai_backend_compliance_snapshots table and supports complex search, multi-criteria filtering (such as entity type, entity id, timestamp, and state), and advanced pagination for bulk audit and investigation use cases. Designed to ensure full coverage for compliance event drilldown, with capabilities for targeted data access as required by compliance officers.","path":"/shoppingMallAiBackend/admin/complianceEvents/{complianceEventId}/complianceSnapshots","method":"patch","description":"Fetches a list of compliance snapshots attached to a specific compliance event, offering multi-criteria filtering (by entity type, timestamp, or entity id) and advanced pagination. This operation references the 'shopping_mall_ai_backend_compliance_snapshots' table and is essential for compliance officers and admins who must conduct detailed audits or reviews of all evidence or system states captured during a particular event.\n\nSecurity enforcement applies: only users with the 'admin' role can access this endpoint due to the sensitivity of compliance data. The results adhere strictly to the current compliance snapshot schema, ensuring audit completeness and privacy preservation. Error handling provides granular messages for invalid complianceEventId parameters or unauthorized access attempts.\n\nThis operation is commonly used together with event and audit log detail APIs to reconstruct the full regulatory or incident context surrounding a compliance event.","summary":"List/search compliance snapshots by event (shopping_mall_ai_backend_compliance_snapshots).","parameters":[{"name":"complianceEventId","description":"Target compliance event's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complex search and filter parameters for compliance snapshots tied to a compliance event.","typeName":"IShoppingMallAiBackendComplianceSnapshot.IRequest"},"responseBody":{"description":"Paginated result set of compliance snapshots matching query and event ID.","typeName":"IPageIShoppingMallAiBackendComplianceSnapshot"},"authorizationRole":"admin","name":"searchByComplianceEvent"},{"specification":"Retrieve the detailed contents of a single compliance snapshot record belonging to a specific compliance event. The endpoint accesses the shopping_mall_ai_backend_compliance_snapshots table and returns comprehensive evidence data for one snapshot, including all JSON, entity references, and created metadata. Designed for forensics, rollback reference, and traceability in legal/compliance circumstances.","path":"/shoppingMallAiBackend/admin/complianceEvents/{complianceEventId}/complianceSnapshots/{complianceSnapshotId}","method":"get","description":"Fetch a single compliance snapshot by snapshot id and event id. This operation directly queries the 'shopping_mall_ai_backend_compliance_snapshots' table, returning all historical data for the snapshot, including payloads and references necessary for audit or regulatory evidence. This endpoint is restricted to 'admin' role for data security, and includes robust not-found and permission error handling. This operation is meant for use by compliance, audit, or legal officers when investigating a specific compliance event and verifying point-in-time system or data states.","summary":"Get compliance snapshot detail for a specific event and snapshot id (shopping_mall_ai_backend_compliance_snapshots).","parameters":[{"name":"complianceEventId","description":"Target compliance event's unique ID (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"complianceSnapshotId","description":"Unique compliance snapshot ID (UUID) belonging to that event.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete compliance snapshot detail for the given id and event.","typeName":"IShoppingMallAiBackendComplianceSnapshot"},"authorizationRole":"admin","name":"at"},{"specification":"Create a new compliance snapshot record under a specific compliance event reference. Records a point-in-time evidence snapshot of system or data state for regulatory, compliance, or audit purposes. Utilizes the shopping_mall_ai_backend_compliance_snapshots table, with strict entity typing and serialization requirements to meet compliance auditability.","path":"/shoppingMallAiBackend/admin/complianceEvents/{complianceEventId}/complianceSnapshots","method":"post","description":"Creates a new compliance snapshot for a given compliance event. Requires proper entity type and serialized evidence payload, conforming strictly to data retention and compliance rules. Input data is validated for structure and type, and on creation event context is logged for audit. Only 'admin' users may call this API. Errors will be returned if the referenced event id does not exist, if required fields are missing, or if the acting user is not authorized. This endpoint is necessary for regulatory evidence preservation workflows or manual augmentation by auditors or compliance staff.","summary":"Create compliance snapshot for an event (shopping_mall_ai_backend_compliance_snapshots).","parameters":[{"name":"complianceEventId","description":"Target compliance event's unique ID (UUID) under which to attach the snapshot.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload and metadata to create a new compliance snapshot attached to a compliance event.","typeName":"IShoppingMallAiBackendComplianceSnapshot.ICreate"},"responseBody":{"description":"Created compliance snapshot detail.","typeName":"IShoppingMallAiBackendComplianceSnapshot"},"authorizationRole":"admin","name":"create"},{"specification":"Update an existing compliance snapshot under a specific compliance event with new evidence, changes, or corrections for compliance, audit, or legal trace requirements. Writes into shopping_mall_ai_backend_compliance_snapshots, allowing for correction and extension of previously recorded evidence, while maintaining audit history as required. Strict data integrity, role, and update policy is enforced.","path":"/shoppingMallAiBackend/admin/complianceEvents/{complianceEventId}/complianceSnapshots/{complianceSnapshotId}","method":"put","description":"Update compliance snapshot details and payload for a given event and snapshot id. All evidence changes are versioned as per compliance policy, with full traceability. The endpoint checks for matching compliance event and snapshot IDs, and validates that the acting admin's changes comply with audit chain standards before updating. Only 'admin' role may perform this operation. Any data modification must be justified and is capture-logged for compliance recovery.","summary":"Update a compliance snapshot's evidence (shopping_mall_ai_backend_compliance_snapshots).","parameters":[{"name":"complianceEventId","description":"Target compliance event's unique ID (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"complianceSnapshotId","description":"Compliance snapshot to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New evidence or corrected payload for the compliance snapshot.","typeName":"IShoppingMallAiBackendComplianceSnapshot.IUpdate"},"responseBody":{"description":"Updated compliance snapshot details.","typeName":"IShoppingMallAiBackendComplianceSnapshot"},"authorizationRole":"admin","name":"update"},{"specification":"Delete (soft delete) a compliance snapshot from a specific compliance event. For regulatory trace, the entry is not hard-deleted; the deleted_at timestamp is set and exclusion from active audits is enforced. Utilizes the shopping_mall_ai_backend_compliance_snapshots table and enforces all regulatory retention and audit trace policies.","path":"/shoppingMallAiBackend/admin/complianceEvents/{complianceEventId}/complianceSnapshots/{complianceSnapshotId}","method":"delete","description":"Performs a soft delete of the specified compliance snapshot. This operation updates 'deleted_at' timestamp but retains the record for regulatory traceability. Only 'admin' users may call this endpoint, and all delete operations are audit-logged for legal review. Errors are thrown if the event or snapshot is not found or if retention policy prohibits the operation. Commonly used in compliance audit incident closures or evidence retirement workflows.","summary":"Soft delete a compliance snapshot by event and id (shopping_mall_ai_backend_compliance_snapshots).","parameters":[{"name":"complianceEventId","description":"Target compliance event's unique ID (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"complianceSnapshotId","description":"Compliance snapshot to soft delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Search and page through all compliance snapshots in the system with advanced multi-criteria querying (by event, entity type, entity id, time, etc). Reads from shopping_mall_ai_backend_compliance_snapshots, allowing audits and regulatory officers to trace evidence across all compliance events and system states with optional bulk filtering and sorting. Paginated responses ensure large-scale compliance review can be efficiently managed.","path":"/shoppingMallAiBackend/admin/complianceSnapshots","method":"patch","description":"This endpoint retrieves a paginated, optionally filtered list of all compliance snapshots in the system, regardless of event. Filtering criteria include compliance event, entity type, entity id, and date/time ranges. Results support compliance audits and global evidence trace operations. Only 'admin' users may access this endpoint, with strict permissions for audit data. Error conditions include invalid filter syntax or insufficient permissions. Used as part of compliance and regulatory investigation workflows.","summary":"Search all compliance snapshots (shopping_mall_ai_backend_compliance_snapshots).","parameters":[],"requestBody":{"description":"Filtering, search, pagination, and sorting for system-wide compliance snapshots.","typeName":"IShoppingMallAiBackendComplianceSnapshot.IRequest"},"responseBody":{"description":"Paginated compliance snapshot result set for query.","typeName":"IPageIShoppingMallAiBackendComplianceSnapshot"},"authorizationRole":"admin","name":"search"},{"specification":"Retrieve the details of a single compliance snapshot using its unique snapshot id. Queries shopping_mall_ai_backend_compliance_snapshots and returns all metadata, serialized evidence payload, entity references, and state, supporting full compliance, rollback, or legal examination scenarios.","path":"/shoppingMallAiBackend/admin/complianceSnapshots/{complianceSnapshotId}","method":"get","description":"Fetch the details and evidence payload of a single compliance snapshot by id. This endpoint gives compliance officers or trusted admins the point-in-time evidence for audits, rollback, or legal reviews. Strictly follows compliance snapshot schema, and only accessible to 'admin' users; all accesses are logged for compliance officer review. Not-found and unauthorized errors are handled distinctly. Commonly called by tools reviewing or cross-referencing multiple event traces.","summary":"Get global snapshot detail by id (shopping_mall_ai_backend_compliance_snapshots).","parameters":[{"name":"complianceSnapshotId","description":"The unique compliance snapshot UUID to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detail of requested compliance snapshot.","typeName":"IShoppingMallAiBackendComplianceSnapshot"},"authorizationRole":"admin","name":"at"},{"specification":"Retrieve a paginated and filtered list of business rules (policies/constraints) currently enforced in the system for compliance, audit, and business logic inspection. Accesses the shopping_mall_ai_backend_business_rules table with advanced search and pagination criteria (by code, description, enforcement, activity window) for review in compliance, developer, or policy dashboards.","path":"/shoppingMallAiBackend/admin/businessRules","method":"patch","description":"Fetch a paginated list of active business rules and policies, supporting comprehensive filtering by code, description, status, or date windows. Returns result in summary or full data mode, strictly using IPageIShoppingMallAiBackendBusinessRule schema for uniformity across audits and dashboards. Only 'admin' role can search and list system business rules. Useful for compliance reporting, business logic review, and system health dashboards. Handles not-found and permission errors with precision. Linked to system-wide compliance trace workflows for policy change monitoring.","summary":"Search business rules and policies (shopping_mall_ai_backend_business_rules).","parameters":[],"requestBody":{"description":"Filter/search and pagination parameters for business rule audit listing.","typeName":"IShoppingMallAiBackendBusinessRule.IRequest"},"responseBody":{"description":"Paginated business rules result set.","typeName":"IPageIShoppingMallAiBackendBusinessRule"},"authorizationRole":"admin","name":"search"},{"specification":"Retrieve the detail for a single business rule, including all descriptions, effective dates, enforcement status, and change rationale. Reads from shopping_mall_ai_backend_business_rules and supports compliance, policy review, and developer dashboard use. Used to drill-down into compliance and business logic enforcement history.","path":"/shoppingMallAiBackend/admin/businessRules/{businessRuleId}","method":"get","description":"Returns all available metadata, status, change history, and compliance descriptions for the specified business rule record. Supports only 'admin' role; used for policy audits, logic trace, and system design reviews. Returns not-found or permission errors as required. Often paired with listing or creation endpoints for end-to-end policy lifecycle management.","summary":"Get business rule or policy detail (shopping_mall_ai_backend_business_rules).","parameters":[{"name":"businessRuleId","description":"Unique business rule identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full business rule details for the given UUID.","typeName":"IShoppingMallAiBackendBusinessRule"},"authorizationRole":"admin","name":"at"},{"specification":"Create and persist a new business rule record for policy, compliance, or regulatory purposes. Accepts all necessary description, code, enforcement, and effective/expiry data. Writes new entry to shopping_mall_ai_backend_business_rules, available for subsequent audit, regulatory, or developer dashboard work. Validates input for code uniqueness and data integrity.","path":"/shoppingMallAiBackend/admin/businessRules","method":"post","description":"Creates a new business rule, policy, or compliance constraint in the system. Input must provide code, rule description, enforcement, and effective windows as per schema requirements. Only 'admin' may use this endpoint, and attempts to create rules with duplicate codes or invalid parameters will result in error. All activity is audit-logged for long-term compliance. Commonly called as part of compliance change approval workflows.","summary":"Create a new system business rule or policy (shopping_mall_ai_backend_business_rules).","parameters":[],"requestBody":{"description":"Business rule creation payload as per policy requirements.","typeName":"IShoppingMallAiBackendBusinessRule.ICreate"},"responseBody":{"description":"Created business rule/policy detail record.","typeName":"IShoppingMallAiBackendBusinessRule"},"authorizationRole":"admin","name":"create"},{"specification":"Update an existing business rule to reflect revised policy, regulatory changes, or business process adjustments. Updates one record in shopping_mall_ai_backend_business_rules, preserving audit history and change rationale as required for compliance reporting and developer traceability.","path":"/shoppingMallAiBackend/admin/businessRules/{businessRuleId}","method":"put","description":"Modifies the targeted business rule identified by UUID. Only 'admin' users may perform this operation. All changes are version-audited and reasons must be tracked for compliance. Errors are thrown for invalid ID, rule code conflicts, or permission failures. Used for end-to-end lifecycle management of regulated business rules or policies.","summary":"Update a business rule or policy record (shopping_mall_ai_backend_business_rules).","parameters":[{"name":"businessRuleId","description":"The business rule/policy UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updates to the business rule as per schema policy.","typeName":"IShoppingMallAiBackendBusinessRule.IUpdate"},"responseBody":{"description":"Updated business rule data record.","typeName":"IShoppingMallAiBackendBusinessRule"},"authorizationRole":"admin","name":"update"},{"specification":"Delete (soft delete) a business rule from the system for deprecation, policy retirement, or regulatory change. The endpoint only sets the deleted_at timestamp; no hard deletion occurs to ensure regulatory auditability and long-term trace. Uses shopping_mall_ai_backend_business_rules and enforces all compliance policy requirements for deletion and retention.","path":"/shoppingMallAiBackend/admin/businessRules/{businessRuleId}","method":"delete","description":"Performs a soft delete of a business rule or policy identified by UUID. Entry remains in audit trail/table but is excluded from active use and future audit reports. Only 'admin' users may call this endpoint and all deletions are audit-logged. Any attempt to delete a non-existent or protected rule returns a specific error. Used during policy deprecation, legacy constraint cleanup, or regulatory revision cycles.","summary":"Soft delete/remove business rule (shopping_mall_ai_backend_business_rules).","parameters":[{"name":"businessRuleId","description":"The business rule/policy UUID to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase"},{"specification":"Enables advanced, filtered, and paginated search of all access logs within the system. Access logs track every API call, admin/customer/seller user activity, file download, token refresh, and other major accesses for compliance and security. The search functionality allows filtering by time, actor (id and type), access type, IP address, as well as searching by user agent, location, or payload contents. Designed for audit, security forensics, and regulatory compliance workflows. Returns a paginated list of access log summaries with all appropriate filtering and sorting options.","path":"/shoppingMallAiBackend/admin/accessLogs","method":"patch","description":"This operation allows administrators to retrieve and search the complete list of system access logs. Each access log entry represents a discrete system access event, such as logins, API calls, file downloads, admin actions, etc., and is tied to specific actors (customers, sellers, admins, or subsystems). Multiple filtering options include time period, actor identity, access type, IP address, and context information like user agent and geolocation. The response provides paginated access log summary information suitable for audit, compliance, and forensic investigation. Security is paramount: only users with the admin role are authorized. Pagination, complex search, and sort features ensure handling of large datasets with regulatory compliance in mind. Related APIs include the single log retrieval endpoint and similar logging endpoints for other domains.","summary":"Search and retrieve a filtered, paginated list of access logs (shopping_mall_ai_backend_access_logs table).","parameters":[],"requestBody":{"description":"Search, filter, pagination, and sort parameters for access log query.","typeName":"IShoppingMallAiBackendAccessLog.IRequest"},"responseBody":{"description":"Paginated list of access log summaries matching search criteria.","typeName":"IPageIShoppingMallAiBackendAccessLog.ISummary"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search"},{"specification":"Retrieves the detailed information for a specific access log entry, referenced uniquely by its ID (UUID). The access log record provides complete forensic evidence for a system access event, including actor, source IP, access type, and audit payload. Used for security auditing, regulatory compliance, incident analysis, or deep system monitoring. Only accessible to admin users; integrates with access log search and underlying access log evidence chain.","path":"/shoppingMallAiBackend/admin/accessLogs/{accessLogId}","method":"get","description":"Retrieve complete detail for a single access log entry specified by accessLogId. The access log includes all metadata (timestamp, actor type/id, source IP, user agent, location, and full audit payload where available). Access is restricted to administrators for security and audit purposes. Supports downstream investigation of suspicious or regulated access events, and full evidence trail management. This endpoint is typically used in conjunction with or as a drilldown from the log search endpoint.","summary":"Retrieve detailed data for a specific access log entry by ID (shopping_mall_ai_backend_access_logs table).","parameters":[{"name":"accessLogId","description":"Unique access log record identifier (UUID) to look up.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Access log detail object for the specified ID.","typeName":"IShoppingMallAiBackendAccessLog"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at"},{"specification":"Enables advanced, paginated search and filtering of security logs within the AI shopping mall system. Security logs capture significant security-related events and anomaly detections, such as failed logins, brute force attempts, policy violations, and intrusion incidents. Designed for security ops, audit, and regulatory reporting, this operation allows filtering by event type, actor, alert level, time period, and payload context. Returns paginated security log summaries for efficient forensics and compliance management.","path":"/shoppingMallAiBackend/admin/securityLogs","method":"patch","description":"This operation allows authorized system administrators to search and retrieve security-related log events such as failed authentication attempts, brute-force activity, system access violations, and detected threats. Security logs are fundamental for compliance, incident response, and proactive threat management. Supports complex search and filtering by event type, actor type/id, severity (alert level), and time period. Access is strictly limited to admin role users due to the sensitive nature of this data. Provides pagination and advanced result sorting to support deep investigation and regulatory reporting. Related endpoints include single log detail retrieval and other compliance log querying APIs.","summary":"Search and retrieve a filtered, paginated list of security logs (shopping_mall_ai_backend_security_logs table).","parameters":[],"requestBody":{"description":"Search, filter, pagination, and sort parameters for security log query.","typeName":"IShoppingMallAiBackendSecurityLog.IRequest"},"responseBody":{"description":"Paginated security log summaries for listings and audit review.","typeName":"IPageIShoppingMallAiBackendSecurityLog.ISummary"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search"},{"specification":"Retrieve the full detail of a specific security log entry by unique ID. Security logs represent system events related to security risk, such as failed logins, attack attempts, and policy violations. This endpoint supports regulatory investigation, forensics, and incident analysis, providing comprehensive information regarding the implicated security event for compliance and auditing. Only admin users are authorized to access single security log details.","path":"/shoppingMallAiBackend/admin/securityLogs/{securityLogId}","method":"get","description":"Returns the detailed record for a given security log entry. Provides all context on the event, including actor, event_type, alert level, payload, and occurrence timestamp. Enables security auditing, risk scoring, and regulatory reporting. Access is strictly reserved for admins. Used in follow-up to threat detections via the security log search endpoint.","summary":"Retrieve detail for a specific security log record by ID (shopping_mall_ai_backend_security_logs table).","parameters":[{"name":"securityLogId","description":"Unique record identifier for the security log event (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed security log object as stored for the given ID.","typeName":"IShoppingMallAiBackendSecurityLog"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at"},{"specification":"Provides powerful, paginated search and filtering for system-wide events in the shopping mall backend, including deployment, scheduled job, maintenance, config change, and critical operational incidents. Allows filtering and sorting by event type, severity, time, and free-text payload. Used by admins for health monitoring, incident tracking, SRE operations, and long-term technical audit. System events span scheduled automations, deployments, monitoring triggers, and process changes.","path":"/shoppingMallAiBackend/admin/systemEvents","method":"patch","description":"This API allows authorized administrators to search and review system-wide infrastructure and operations events. Each system event record includes event type (such as deployment, incident, maintenance, etc.), summary, event payload, severity, and precise timing. Filtering supports event type, time, severity, and content-based queries. Returns paginated event summaries to support root cause analyses, system maintenance reviews, and SRE analytics. Only admins may access this sensitive operational data. Events may be correlated with error logs, access logs, and audit logs for a comprehensive compliance picture.","summary":"Advanced search and listing of system-wide events (shopping_mall_ai_backend_system_events table).","parameters":[],"requestBody":{"description":"Search, filter, and pagination information for querying system events.","typeName":"IShoppingMallAiBackendSystemEvent.IRequest"},"responseBody":{"description":"Paginated event summaries for operational incident review.","typeName":"IPageIShoppingMallAiBackendSystemEvent.ISummary"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search"},{"specification":"Exposes the complete detail of a single system event record, identified by its unique ID. System events log critical infrastructure triggers, automated jobs, deployments, maintenance actions, and significant operational milestones. Facilitates disaster/incident review, health monitoring, system SRE, and regulatory root-cause audits. Only accessible by admins for platform integrity.","path":"/shoppingMallAiBackend/admin/systemEvents/{systemEventId}","method":"get","description":"Retrieves comprehensive record details for a specific system event, including full event type, summary, event payload, severity classification, and timestamps. Supports cross-referencing with other logs and compliance investigations. Only the admin role is authorized. Enables operational review following system anomalies, platform maintenance, and major infrastructure updates.","summary":"Fetch full details for a specified system event log record (shopping_mall_ai_backend_system_events table).","parameters":[{"name":"systemEventId","description":"Unique identifier for the target system event record (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"System event detailed information for the given ID.","typeName":"IShoppingMallAiBackendSystemEvent"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at"},{"specification":"Supports filtered, paginated search of recorded business error logs and exceptions in the system. Error logs capture platform business, application, and technical errors: API/server faults, failed integrations, external partner failures, payment errors, validation issues, etc. Important for SRE, compliance, postmortem analysis, and customer support impact tracing. Features include search by error code/type, root cause entity, severity, date range, and error message pattern. Returns paginated error log summaries.","path":"/shoppingMallAiBackend/admin/errorLogs","method":"patch","description":"Allows administrators to search and retrieve business and technical error logs for the e-commerce platform. These logs contain records of API errors, business rule violations, payment failures, integration problems, and unexpected platform exceptions. Filtering and pagination options support investigation by error code, entity, and severity. Only admins may access these sensitive error records. Typically used for post-incident review and regulatory evidence collection. Integrates with system event and audit logs for complete platform observability.","summary":"Search and retrieve filtered business and technical error logs (shopping_mall_ai_backend_error_logs table).","parameters":[],"requestBody":{"description":"Parameters for searching, filtering, paginating, and sorting error logs.","typeName":"IShoppingMallAiBackendErrorLog.IRequest"},"responseBody":{"description":"Paginated error log summaries for error diagnosis and SRE analysis.","typeName":"IPageIShoppingMallAiBackendErrorLog.ISummary"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search"},{"specification":"Retrieves the full detail of an individual error log record via its unique errorLogId (UUID). Business error logs record detailed error event data, including error codes, messages, root cause entity, stack/context, and severity. Used for investigation, SRE/regulatory/legal reports, and root cause analysis. Only accessible to admin users for platform data protection. Can be cross-referenced with system events, audit logs, or access logs for incident correlation.","path":"/shoppingMallAiBackend/admin/errorLogs/{errorLogId}","method":"get","description":"Returns the detailed error log record corresponding to a specific errorLogId. Fields include error code, message, stack/context, root cause entity type and ID, severity, and full context for root cause/troubleshooting. Only the admin role is authorized to access this endpoint. This API is key for debugging mission-critical failures and providing audit trails for regulatory and legal compliance investigations.","summary":"Retrieve detailed error log entry for a specified ID (shopping_mall_ai_backend_error_logs table).","parameters":[{"name":"errorLogId","description":"Unique ID of the error log record to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed error log record for specified errorLogId.","typeName":"IShoppingMallAiBackendErrorLog"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at"},{"specification":"Enables advanced, paginated search and filtering of all platform audit log records. Audit logs constitute the definitive end-to-end trail for key business, admin, or user actions on the system (including create, update, policy change, compliance, and destructive actions). Filters support actor, action type, time period, target type/id, and audit description queries. Returns paginated audit log summary records, essential for regulatory, compliance, and forensic investigations.","path":"/shoppingMallAiBackend/admin/auditLogs","method":"patch","description":"This endpoint allows administrator users to perform an advanced search and filtered listing of platform-wide audit logs. Each audit log entry records critical actions (create/update/delete/access/export/review etc.) with actor, action type, target entity, and description. Filtering by action, actor, time, entity, or description is provided. Only admins are authorized; used for compliance, regulatory, and incident investigation. Provides paginated summary records and supports drilldown to individual audit log details.","summary":"Advanced search and listing of audit logs (shopping_mall_ai_backend_audit_logs table).","parameters":[],"requestBody":{"description":"Parameters for searching, filtering, paginating, and sorting audit logs.","typeName":"IShoppingMallAiBackendAuditLog.IRequest"},"responseBody":{"description":"Paginated audit log summary records matching search criteria.","typeName":"IPageIShoppingMallAiBackendAuditLog.ISummary"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"search"},{"specification":"Retrieves comprehensive details for a specific audit log record given by auditLogId (UUID). Each audit log entry contains all context about critical business, admin, or user actions, including actor, type, target, audit payload, and timeline metadata. Used for incident investigation, regulatory/legal audits, and compliance requirements. Only accessible to admin users for security, traceability, and regulatory protection.","path":"/shoppingMallAiBackend/admin/auditLogs/{auditLogId}","method":"get","description":"Returns the complete audit record for the given auditLogId. Includes context on who, what action, what target entity, detailed audit description, and payload (such as previous/after state). This API is critical to support compliance and regulatory investigations, forensics, and complex incident reviews. Access is strictly reserved for system admins. Integrates with log search endpoints for audit drilldown flows.","summary":"Fetch full audit log detail for a specified ID (shopping_mall_ai_backend_audit_logs table).","parameters":[{"name":"auditLogId","description":"Unique identifier for the audit log entry (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit log record for given ID.","typeName":"IShoppingMallAiBackendAuditLog"},"authorizationRole":"admin","authorizationRoles":["admin"],"name":"at"},{"specification":"Design the authentication API operation for customer registration using the email and password_hash fields in the shopping_mall_ai_backend_customers table. This operation registers a new customer by accepting identity information, and issues initial JWT tokens for immediate login – enabling instant access after sign-up. It is a public endpoint for new-user creation, referencing the email field for identity and password_hash for authentication setup. The API issues JWT token upon success and includes setHeaders, with { Authorization } for client session management. Critical for onboarding and compliance audit histories, registration status (email_verified), and business event triggers (joined_at) are updated through this endpoint. The operation must reference the customer entity creation event for historical and regulatory auditing, including logic for handling duplicate emails.","description":"This API endpoint enables customer self-registration as defined in the shopping_mall_ai_backend_customers table. It leverages the unique email field for customer ID, and stores password credentials in password_hash. The service issues a new JWT token upon successful sign-up, using a response body that includes setHeaders for { Authorization: string } per advanced security requirements. Registration triggers joined_at, initial status, email verification state, and associated customer history events for compliant onboarding.\n\nThis operation is public, requiring no prior authentication. Business logic requires validation for unique email constraint and secure password hashing, with clear error feedback in violation scenarios. All changes must be audit-logged for compliance as per customer_histories schema.\n\nUpon successful registration, clients receive JWT tokens, are authorized immediately, and all relevant audit, onboarding, and registration steps are automatically triggered. Failure cases (duplicate, validation, security) are handled with precise error codes, and related APIs include signIn, validateToken, and customer profile management.","summary":"Register a new customer (shopping_mall_ai_backend_customers) and issue JWT token.","parameters":[],"requestBody":{"description":"Customer registration details for new account creation.","typeName":"ICustomerSignUp.Request"},"responseBody":{"description":"JWT sign-up response with setHeaders for { Authorization: string } and customer entity info.","typeName":"ICustomerSignUp.Response"},"authorizationRole":null,"name":"signUp","path":"/auth/customer/register","method":"post"},{"specification":"Design the authentication API endpoint to enable customers to log in using the email and password_hash fields from the shopping_mall_ai_backend_customers schema. This operation verifies credentials, issues JWT tokens upon successful authentication, and supports standard login flows. The endpoint uses POST, with email as the identity and password_hash for password checking. It operates with no prior authentication, serving external clients needing customer login. All successful logins trigger last_login_at updates and customer_histories logging. The operation's response body returns the JWT access token and secure session headers. Error handling addresses credential mismatch, inactive status, and locks (status field).","description":"Provides customer login/authentication as defined in the shopping_mall_ai_backend_customers table. Accepts email and password credentials, validates against the password_hash, and issues JWT tokens for authenticated API use. The endpoint sets the last_login_at timestamp, updates login event history (customer_histories), and returns tokens in the response. Credentials are checked for validity with business logic enforcing status checks (active, locked, dormant) – with errors returned for unauthorized access. The endpoint is public, uses strong hashing on secret comparison, and enforces unique email for user identity. Related operations include signUp, signOut, and changePassword.","summary":"Authenticate customer (shopping_mall_ai_backend_customers) and issue JWT token.","parameters":[],"requestBody":{"description":"Customer login credentials (email and password).","typeName":"ICustomerSignIn.Request"},"responseBody":{"description":"Successful authentication JWT response and authorization header.","typeName":"ICustomerSignIn.Response"},"authorizationRole":null,"name":"signIn","path":"/auth/customer/login","method":"post"},{"specification":"Design the authenticated customer log-out endpoint, enabling users in the customer role to sign out, which invalidates the current JWT session. The operation logs the sign-out event in customer_histories and updates authentication state, ensuring token invalidation per security policies, with audit traceability. Only accessible by currently authenticated customers. No request body is required; tokens are revoked and sign-out workflows completed. Failure cases (invalid token, session missing) are handled with appropriate error codes.","description":"Implements customer log-out in the shopping_mall_ai_backend_customers authentication flow. The endpoint signs out the current authenticated customer by invalidating their JWT session, ending authentication for subsequent requests. All changes must be audit-logged, referencing the customer_histories table for compliance and traceability. The endpoint is accessible only by authenticated customers, and ensures active tokens are revoked and session state terminated. It supports regulatory and security requirements for instant session invalidation as per best practice. If logout is attempted while unauthenticated, returns an error indicating no active session. Related operations: signIn for login and validateToken for authentication check.","summary":"Invalidate JWT session and sign out current customer (shopping_mall_ai_backend_customers).","parameters":[],"requestBody":null,"responseBody":{"description":"Logout operation result confirmation (no content on success).","typeName":"ICustomerSignOut.Response"},"authorizationRole":"customer","name":"signOut","path":"/auth/customer/logout","method":"post"},{"specification":"Implement a token validation API for customer JWT authentication, operated as a public endpoint to check the validity of provided tokens. No request body is required as token is passed via the Authorization header. The endpoint checks JWT signature, expiry, and claims according to the shopping_mall_ai_backend_customers role's business logic. It returns the authentication status and associated customer information if valid. Audit and compliance traces are required for attempted validations, with error handling for expired, tampered, or revoked tokens.","description":"Validates customer JWT tokens, checking signature, expiration, and claims as specified by authentication policies for shopping_mall_ai_backend_customers. The API provides authentication status and information about the customer account attached to the token if valid. Auditing requirements demand all validation attempts are logged. No request body is expected, as the JWT is supplied in the Authorization header. The endpoint is accessible without authentication, enabling frontends and external systems to verify token status for session control. Related to signIn and signOut workflows.","summary":"Validate customer JWT token for authentication status (shopping_mall_ai_backend_customers).","parameters":[],"requestBody":null,"responseBody":{"description":"Token validation result and customer details if token is valid.","typeName":"ICustomerValidateToken.Response"},"authorizationRole":null,"name":"validateToken","path":"/auth/customer/validate","method":"post"},{"specification":"Create an authenticated endpoint for changing a customer's password, enabling secure password update for currently logged-in users. The customer provides their current password (checked against password_hash) and the new password. On success, password_hash is updated in shopping_mall_ai_backend_customers, and a customer_histories event is written for regulatory evidence. Access is restricted to authenticated customer sessions via JWT. Password strength validation and current password verification are enforced. All password changes are audit-logged for compliance. Error handling covers failures for invalid credentials, insufficient password policy, or other security concerns. Related endpoints: signIn, signOut (for session reset upon password change).","description":"This API enables password changes for authenticated customer accounts using shopping_mall_ai_backend_customers table fields. It verifies the provided current password against the existing password_hash, ensures the new password meets security policies, updates the password_hash upon success, and records the change in customer_histories for full compliance traceability. Only accessible to authenticated users in the customer role. Password changes force session reset; error responses distinguish between incorrect current password, weak new password, or systemic/biz rule failures. Supports secure account maintenance and risk mitigation workflows.","summary":"Change password for current customer (shopping_mall_ai_backend_customers).","parameters":[],"requestBody":{"description":"Current password and new password to update credentials.","typeName":"ICustomerChangePassword.Request"},"responseBody":{"description":"Change password operation status/result confirmation.","typeName":"ICustomerChangePassword.Response"},"authorizationRole":"customer","name":"changePassword","path":"/auth/customer/password","method":"put"},{"specification":"Generate core JWT-based authentication and authorization API operations for the admin role according to the system's RBAC, using the fields and constraints found in the shopping_mall_ai_backend_admins Prisma schema. The admin table contains 'email' for identity, 'password_hash' for authentication, and 'status', supporting all required flows for registration, login, logout, token validation, and password change. No email verification or reset tokens are present, so only the essential 5 operations must be included. The system enforces robust RBAC and security per compliance requirements, and each operation description must reference the exact schema fields used for implementation.","description":"This operation allows new admin accounts to register to the platform by providing their email and password, which are stored in the 'email' and 'password_hash' fields of shopping_mall_ai_backend_admins. The operation creates a new admin row and issues initial JWT tokens. Registration is public with no prior authentication required. Sensitive fields such as password hash are handled securely, and system constraints ensure email uniqueness. The response includes a setHeaders field for automatic Authorization header assignment by clients. All actions are audited in compliance logs, and successful registration integrates with the core admin authentication workflow. Related operations include signIn, signOut, validateToken, and changePassword for a complete admin authentication cycle.","summary":"Register a new admin (shopping_mall_ai_backend_admins) and issue an initial JWT (signUp, admin)","parameters":[],"requestBody":{"description":"Required registration information: email and password to create a new admin entry in shopping_mall_ai_backend_admins.","typeName":"IAdminAuth.SignUp"},"responseBody":{"description":"JWT authorization response including setHeaders with Authorization for SDK use. Returns admin public profile and JWT.","typeName":"IAdminAuth.JwtWithProfile"},"authorizationRole":null,"name":"signUp","path":"/auth/admin/register","method":"post"},{"specification":"Generate the JWT login endpoint for the admin role using credentials stored in the shopping_mall_ai_backend_admins Prisma schema (fields 'email' and 'password_hash'). This operation validates input credentials against stored values, issues signed JWTs for app use, and adheres to system RBAC protocols. System compliance logging is enforced, and authentication is required for all protected admin endpoints. The endpoint must only be accessible with valid credentials, and security measures such as timing-attack prevention and lockout on repeated failures are handled by the business logic.","description":"This API allows an admin to log in by providing their email and password. Credentials are verified against the 'email' and 'password_hash' fields in shopping_mall_ai_backend_admins. On success, a JWT is issued, enabling access to protected admin endpoints according to RBAC policy. Each login event is recorded in admin audit logs and compliance events. Failed attempts are subject to lockout policies. This operation does not require prior authentication and is the entry point for admin JWT acquisition. Use together with signUp, signOut, validateToken, and changePassword to enable the full admin authentication cycle.","summary":"Login (sign in) as an admin using email and password (shopping_mall_ai_backend_admins) and receive JWT (signIn, admin)","parameters":[],"requestBody":{"description":"Credentials (email, password) for admin authentication using shopping_mall_ai_backend_admins data.","typeName":"IAdminAuth.SignIn"},"responseBody":{"description":"Response containing JWT and admin identity fields for session use.","typeName":"IAdminAuth.JwtWithProfile"},"authorizationRole":null,"name":"signIn","path":"/auth/admin/login","method":"post"},{"specification":"Defines the POST endpoint for logging out an authenticated admin by invalidating their current JWT token. This operation uses the admin identity (validated via JWT) and performs logout actions, such as token blacklisting, compliance event logging, and session termination. Data for the admin is retrieved from shopping_mall_ai_backend_admins, and the logout process does not remove or change admin profile fields but targets the session itself.","description":"Invalidate the active JWT session for the authorized admin. The endpoint uses the admin's identity confirmed from the JWT and securely terminates the session, enforcing the system's RBAC and compliance policies. Logout actions are recorded in the admin audit and compliance logs for traceability. The admin remains in shopping_mall_ai_backend_admins but loses active session privileges. This API is a critical step in the overall authentication workflow and should be used with signUp, signIn, validateToken, and changePassword for secure access lifecycle management.","summary":"Logout (signOut) the authenticated admin and terminate JWT session (shopping_mall_ai_backend_admins)","parameters":[],"requestBody":null,"responseBody":{"description":"Logout confirmation response (no admin data disclosed; only status reported).","typeName":"IAdminAuth.SignOutResult"},"authorizationRole":"admin","name":"signOut","path":"/auth/admin/logout","method":"post"},{"specification":"Defines POST endpoint for validating an authentication JWT for the admin role. The operation checks the token's signature, expiration, and authorization scope according to the shopping_mall_ai_backend_admins entity and overall system RBAC. Used to confirm the authenticity and validity of the presented token without requiring interaction with admin database fields beyond existence and validity. Supports security and compliance logging.","description":"Verify the validity of an admin JWT for session authentication. This no-auth endpoint supports token validity checking based on the system's RBAC and JWT policies, confirming the admin user's authorization status and session validity. Returns authentication status and any relevant admin RBAC info without modifying shopping_mall_ai_backend_admins data. Ensures integration in authentication flows that require passive token validation, such as session checks, background token renewal triggers, and access enforcement endpoints.","summary":"Validate JWT token for admin session and authorization (shopping_mall_ai_backend_admins)","parameters":[],"requestBody":{"description":"JWT token (Bearer token) or input required for signature/expiration/session validation for admin users.","typeName":"IAdminAuth.ValidateToken"},"responseBody":{"description":"Token validation result with status and optional admin session/profile information.","typeName":"IAdminAuth.JwtValidationResult"},"authorizationRole":null,"name":"validateToken","path":"/auth/admin/validate","method":"post"},{"specification":"Defines PUT endpoint for authenticated admins to change their password. Both current and new passwords are required for validation. It uses shopping_mall_ai_backend_admins fields: 'password_hash' (current) and updates to the new securely-hashed password according to compliance. Operation verifies the current credentials, logs the event, and enforces security policy (e.g., logout all other sessions, compliance logging). Admin's record in shopping_mall_ai_backend_admins is updated with the new hashed password if validation succeeds.","description":"Allows an authenticated admin to securely change their login password, by providing current password and desired new password. Uses the 'password_hash' field in shopping_mall_ai_backend_admins to validate the old password and securely store the new hashed password. All events are compliance-audited. This operation is critical for RBAC maintenance and user security, ensuring only the correct admin can change their credentials. Integrates with the core authentication cycle: signUp, signIn, signOut, and validateToken for compliant access control.","summary":"Change password for authenticated admin (shopping_mall_ai_backend_admins, password_hash)","parameters":[],"requestBody":{"description":"Password change payload with current and new password fields for admin.","typeName":"IAdminAuth.ChangePassword"},"responseBody":{"description":"Result of password change; status info. No password or sensitive data is returned.","typeName":"IAdminAuth.ChangePasswordResult"},"authorizationRole":"admin","name":"changePassword","path":"/auth/admin/password","method":"put"},{"specification":"Provides essential JWT-based authentication and authorization endpoints for the 'seller' role of the ShoppingMallAiBackend. These endpoints allow sellers to register (sign-up), authenticate (sign-in), log out, validate JWT tokens, and change their password. All operations are designed according to industry-standard security and business requirements extracted from detailed requirements analysis and Prisma schema. Response for signUp must include setHeaders for Authorization; password management requires verification with hashed credentials; email is the unique identifier. No advanced token refresh or password reset mechanisms are present in the seller schema, so only core flows are included.","description":"This registration endpoint allows a new seller to create an account by providing essential credentials: email (unique identifier), password (stored as password_hash), company profile (company_name, business_number, representative_name), address, and phone. Upon successful registration, the system issues JWT tokens (embedded in the setHeaders field in the response) for session management. The operation ensures email uniqueness by referencing the shopping_mall_ai_backend_sellers.email column and stores hashed passwords in password_hash. It audits the joined_at, created_at, and updated_at timestamps alongside the seller profile fields. Security is enforced via JWT and proper password hashing mechanisms. This endpoint is critical for the initial onboarding of new sellers and integration with KYC/business verification, as described in the business requirements. Error handling includes duplicate email/business_number detection and validation of all required fields. Registration is a public API with no authentication required. Related: signIn, changePassword, signOut, validateToken.","summary":"Register a new seller account and issue JWT (shopping_mall_ai_backend_sellers)","parameters":[],"requestBody":{"description":"Profile, credential, and business information for creating a new seller account.","typeName":"ISellerAuth.SignUp"},"responseBody":{"description":"Seller auth registration response including JWT (setHeaders) and registered seller profile.","typeName":"ISellerAuth.AuthResponseWithHeaders"},"authorizationRole":null,"name":"signUp","path":"/auth/seller/register","method":"post"},{"specification":"Provides JWT-based seller login functionality. Upon providing a valid email and password, the seller receives JWT tokens for authenticated access to seller APIs. Verifies credentials against shopping_mall_ai_backend_sellers.email and password_hash. Includes account status and email verification checks as part of business rules. Sets token expiration policies as per requirements (e.g., 30 min access, 15-30 days refresh, if present). No refresh or password reset fields are defined in schema, so only authentication is supported. Errors include invalid credentials, locked/suspended status, or missing email verification. Related: signUp, signOut, validateToken, changePassword.","description":"Allows a registered seller to authenticate by supplying their email and password. Credentials are validated against shopping_mall_ai_backend_sellers (email as unique login, password_hash for verification). On success, issues JWT tokens for API access and returns relevant seller profile fields. Enforces business logic for account status (pending, active, suspended, withdrawn) and email verification (email_verified field). Error responses occur if the account is not found, credentials are incorrect, status is not 'active', or email_verified is false. This endpoint is public; on authentication, tokens are returned for subsequent requests. Uses industry-standard JWT practices. Related operations include signUp, signOut, validateToken, and changePassword.","summary":"Authenticate seller and issue JWT (shopping_mall_ai_backend_sellers)","parameters":[],"requestBody":{"description":"Seller email and password for authentication attempt.","typeName":"ISellerAuth.SignIn"},"responseBody":{"description":"Seller authentication result with JWT and seller profile.","typeName":"ISellerAuth.AuthResponse"},"authorizationRole":null,"name":"signIn","path":"/auth/seller/login","method":"post"},{"specification":"Logs out an authenticated seller by invalidating the JWT session. No parameters required. Ensures session termination and removes any client-resident authentication headers or tokens. Audits logout event for compliance (e.g., inserts in seller_histories with triggered_by 'seller' or 'system'). Only accessible to authenticated sellers; enforced by JWT middleware.","description":"Allows an authenticated seller to log out, explicitly terminating their JWT session on the client and (optionally) on the server by updating status/history as needed. This is a role-protected endpoint, requiring a valid JWT for the seller. Audits the logout event in compliance records and may update last activity fields where feasible. Related: signIn, changePassword, validateToken, signUp.","summary":"Invalidate seller JWT session and log out (shopping_mall_ai_backend_sellers)","parameters":[],"requestBody":null,"responseBody":{"description":"Logout operation acknowledgment (no sensitive data returned).","typeName":"ISellerAuth.SignOutResponse"},"authorizationRole":"seller","name":"signOut","path":"/auth/seller/logout","method":"post"},{"specification":"Endpoint to validate a JWT's authenticity and active status for seller APIs. Accepts token (usually provided in Authorization header) and returns current authentication status, role claims, and minimal profile metadata. Supporting stateless JWT validation; does not require authentication (can be used to check validity of an externally supplied token). Does not perform refresh as seller schema has no refresh token field. Related to signIn, signOut, changePassword.","description":"This operation checks whether a given JWT is valid (untampered, unexpired, and issued for a current seller account). Validates the token's signature, expiration, and embedded claims (e.g., userId, role=seller, status, permissions). If valid, returns seller identity and minimal profile fields. If invalid, returns explicit error code and rejects request as unauthorized. This endpoint is essential for dynamic authentication status checks on the client. No request body required; the token is sent via Authorization header. Related: signIn, signOut, changePassword, signUp.","summary":"Validate seller JWT token status/authentication (shopping_mall_ai_backend_sellers)","parameters":[],"requestBody":null,"responseBody":{"description":"Validation result and current seller authentication claims.","typeName":"ISellerAuth.ValidateTokenResponse"},"authorizationRole":null,"name":"validateToken","path":"/auth/seller/validate","method":"post"},{"specification":"Allows an authenticated seller to change their password by providing the current password and a new password. Validates the current password against password_hash. On success, updates password_hash in shopping_mall_ai_backend_sellers and creates an audit/history record. Only accessible to sellers authenticated via JWT. Triggers error if current password is incorrect, the account is not active, or does not exist. Related: signIn, signOut, signUp, validateToken.","description":"This endpoint enables an authenticated seller to change their own password, enforcing business rules for password management. The seller must supply their current password (validated against password_hash) and a new password (checked for security/compliance). On success, updates password_hash and records a seller_histories event with event_type 'password_changed'. Requires the seller to be authenticated (JWT required); role-protected as 'seller'. Error cases include incorrect current password, status not active, or new password not meeting policy. Related endpoints: signIn, signUp, signOut, validateToken.","summary":"Change password for authenticated seller (shopping_mall_ai_backend_sellers)","parameters":[],"requestBody":{"description":"Current and new password for the seller password change operation.","typeName":"ISellerAuth.ChangePassword"},"responseBody":{"description":"Password change successful acknowledgment response.","typeName":"ISellerAuth.ChangePasswordResponse"},"authorizationRole":"seller","name":"changePassword","path":"/auth/seller/password","method":"put"}]