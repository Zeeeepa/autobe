[
  {
    "specification": "This operation retrieves a list of customer entities, with support for search, filtering, and pagination. It is based on the ai_ecommerce_customers table in the Prisma schema. The endpoint enables client applications to fetch multiple customer records at once, optionally filtered by attributes like creation date, status, or other criteria defined in search parameters. The response includes a paginated set of ai_ecommerce_customers entities, potentially with relevant metadata about pagination and overall count.",
    "description": "This endpoint serves as the primary list retrieval mechanism for all registered customers in the system, as defined in the ai_ecommerce_customers Prisma model. According to the Prisma schema comments, each customer is linked 1:1 to a user profile and may reference addresses, OAuth info, and audit logs, but only the customer entity is directly returned here. It is intended for use by administrators or customer-support tools that need batch access to customer data with options for searching, filtering, or pagination (e.g., filtering by deleted vs. active). Security requirements dictate that only users with read access to customer information, generally admins or privileged customer service roles, should access this endpoint. List operations should handle large datasets via pagination tokens or offset/limit parameters and defensively limit resource usage by refusing abusive request patterns. Returned customer records never expose sensitive or relationally linked data beyond what is authorized in the ai_ecommerce_customers summary. Related detail endpoints should be used for full relational information or sensitive data exposure, and all errors (e.g., invalid paging tokens) should be clearly reported.",
    "summary": "Retrieve a paginated, filterable list of ai_ecommerce_customers entities representing platform customers.",
    "parameters": [],
    "requestBody": {
      "description": "Search filters, pagination, or sort options for ai_ecommerce_customers list retrieval.",
      "typeName": "ai_ecommerce_customers.IRequest"
    },
    "responseBody": {
      "description": "Paginated container of ai_ecommerce_customers entities and metadata.",
      "typeName": "IPageai_ecommerce_customers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/customers",
    "method": "patch"
  },
  {
    "specification": "This operation retrieves the details of a single customer entity, identified by its UUID, from the ai_ecommerce_customers table. It provides direct access to all public fields and relationships of a customer entity, suitable for administrative and customer service contexts. The result may include both base customer info and references to related entities as described in the Prisma model.",
    "description": "This endpoint is the direct detail accessor for a customer in the ai_ecommerce_customers table, used by administrators or automated support processes. The UUID path parameter is validated for existence and correct format, and leverages Prisma 1:1 relation to the ai_ecommerce_user_profiles model. The endpoint is secured to prevent unauthorized access and only exposes profile, audit, and reference information as dictated by the system's privacy and compliance rules. Error cases—such as not found, invalid ID, or unauthorized access—must return clear error objects. When a customer is soft-deleted, this endpoint must indicate such state.",
    "summary": "Fetch details of a specific ai_ecommerce_customers entity by its UUID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the target ai_ecommerce_customers entity to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full details of the requested ai_ecommerce_customers entity, including related profile info as permitted.",
      "typeName": "ai_ecommerce_customers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/customers/{id}",
    "method": "get"
  },
  {
    "specification": "This endpoint creates a new customer record in the ai_ecommerce_customers table by accepting customer registration data. It enforces the business rules described in the schema comments—e.g. 1:1 linkage to ai_ecommerce_user_profiles, uniqueness, and all compliance requirements such as soft-deletion handling. Only system components or privileged frontends call this operation.",
    "description": "Per ai_ecommerce_customers Prisma model, creation of a customer requires providing all required fields, linking to a unique ai_ecommerce_user_profiles entity, and ensuring clean 1:1 relationships. The input must be fully validated, both for required properties and business rules dictating uniqueness, relational integrity, and compliance (such as not duplicating deleted/recycled identities). Security-critical: only authorized roles are allowed to create customers via this method. The operation is transactional: either the customer is created or the system returns a clear validation/audit error, with no partial updates. Upon success, returns the created ai_ecommerce_customers entity with full base details; relational details may require further lookup.",
    "summary": "Create a new ai_ecommerce_customers entity with customer registration details.",
    "parameters": [],
    "requestBody": {
      "description": "New customer data, conforming to ai_ecommerce_customers.IRegister.",
      "typeName": "ai_ecommerce_customers.IRegister"
    },
    "responseBody": {
      "description": "The newly created ai_ecommerce_customers entity with identifiers and status.",
      "typeName": "ai_ecommerce_customers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/customers",
    "method": "post"
  },
  {
    "specification": "This endpoint updates an existing customer in the ai_ecommerce_customers table by its UUID. It applies only to non-destructive field-level edits (profile changes, lifecycle status changes, soft-deletes), and fully enforces system relational and compliance rules.",
    "description": "The operation targets an existing ai_ecommerce_customers entity for update, using the UUID path parameter with strict validation for existence and updatability (e.g. not already deleted). According to Prisma schema comments, all updates must respect immutability of primary relations (such as 1:1 linkage to user profiles), and must record updated_at for traceability. Only authorized system actors (generally admins) can perform this update. All updates are transactional, failures due to constraint violation or attempted illegal changes return a clear error. Changes are logged in audit trails according to compliance requirements. Only allowed/updatable fields can be patched; immutable/derived fields are ignored or blocked.",
    "summary": "Update an existing ai_ecommerce_customers entity by UUID according to system rules.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of ai_ecommerce_customers entity to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Customer update data (allowed fields only) for ai_ecommerce_customers.",
      "typeName": "ai_ecommerce_customers.IUpdate"
    },
    "responseBody": {
      "description": "The updated ai_ecommerce_customers entity, including unchanged/derived fields.",
      "typeName": "ai_ecommerce_customers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/customers/{id}",
    "method": "put"
  },
  {
    "specification": "This operation soft-deletes an existing customer in the ai_ecommerce_customers table, identified by its UUID. It enforces business and compliance rules for 'logical' deletion, which sets deleted_at and preserves the entity for audit/compliance.",
    "description": "Per schema spec/comment, deletions for ai_ecommerce_customers must not remove records but set the deleted_at timestamp, making them inactive while retaining them for future audits or legal review. The endpoint is transactional: only administrators can delete customers, and validation ensures customer is not already deleted or locked. Audit logs are automatically updated in compliance with traceability rules. Any attempted deletes on non-existent or already-deleted customers return a proper error code and message. Post-deletion, the endpoint returns the updated (soft-deleted) customer entity reference.",
    "summary": "Soft-delete an ai_ecommerce_customers entity by its UUID per compliance requirements.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of ai_ecommerce_customers entity to soft-delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The ai_ecommerce_customers entity with deleted_at set (soft-deleted).",
      "typeName": "ai_ecommerce_customers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/customers/{id}",
    "method": "delete"
  },
  {
    "specification": "This operation retrieves a list of seller entities with support for search, filtering, and pagination. Backed by ai_ecommerce_sellers Prisma model, it allows the system to provide a browsable/filterable list of seller accounts with summaries. Usage includes admin dashboards, onboarding tools, or compliance monitoring interfaces.",
    "description": "The PATCH /ai_ecommerce/sellers endpoint serves as the recommended method for retrieving a paginated, optionally filtered list of sellers, as required by the ai_ecommerce_sellers Prisma schema. Each seller record is linked to a unique profile via a 1:1 FK, and additional business metadata is available only through supplemental detail endpoints. Only admin or privileged compliance roles may query this endpoint; access is logged to the audit table for all queries. Search, filtering, and offset/limit pagination are supported and must be handled efficiently to avoid resource/exposure abuse. Errors in request structure or authorization must return clear errors with cause and remedy info. Only data fields authorized by security policy are returned; sensitive info handled only in secure contexts or details endpoints.",
    "summary": "Retrieve paginated/filterable list of ai_ecommerce_sellers entities.",
    "parameters": [],
    "requestBody": {
      "description": "Filtering/search/sorting parameters for seller list retrieval.",
      "typeName": "ai_ecommerce_sellers.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of ai_ecommerce_sellers summary entities.",
      "typeName": "IPageai_ecommerce_sellers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/sellers",
    "method": "patch"
  },
  {
    "specification": "This operation fetches the detailed record for a single seller entity by its unique UUID, based on ai_ecommerce_sellers model. Returns public and authorized relational data for the seller profile.",
    "description": "GET /ai_ecommerce/sellers/{id} performs secure, validated lookups on sellers using a UUID PK. Only system administrators or authorized compliance agents may access this method. Returns all permissible, non-sensitive data on the seller (as per schema), including profile linkage, and indicates soft-delete status if set. Invalid or unauthorized accesses are clearly rejected with error detail. Relational data beyond the seller record (such as products, onboarding status) should be retrieved by additional lookups to maintain compliance with 3NF and sensitive data boundaries as described in schema comments.",
    "summary": "Get full record of a single ai_ecommerce_sellers entity by UUID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the ai_ecommerce_sellers record to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed ai_ecommerce_sellers entity, including UUID and all standard/authorized public fields.",
      "typeName": "ai_ecommerce_sellers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/sellers/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new seller entity in the ai_ecommerce_sellers table. Accepts required input fields as indicated in the schema model, ensuring all relational constraints and business logic are enforced. Typically executed by admin panels or onboarding workflows.",
    "description": "To create a seller, POST /ai_ecommerce/sellers, receive fully validated seller info, link to a (unique) user profile, and write the entity under transactional validity guarantees. Only authorized actors (system admin or privileged process) can create sellers. All validation and uniqueness constraints from the table comments are enforced—such as 1:1 profile linkage, proper onboarding, and exclusion of previously deleted/suspended identities. Upon successful creation, returns the complete new seller entity. Errors in request data (malformed/missing/constraint-violating) yield clear, actionable error responses, and no record is inserted. Audit/compliance logs must be updated for every call.",
    "summary": "Create and onboard a new ai_ecommerce_sellers entity with validated input.",
    "parameters": [],
    "requestBody": {
      "description": "Validated seller creation data package according to model rules.",
      "typeName": "ai_ecommerce_sellers.IRegister"
    },
    "responseBody": {
      "description": "The newly created ai_ecommerce_sellers entity (base profile).",
      "typeName": "ai_ecommerce_sellers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/sellers",
    "method": "post"
  },
  {
    "specification": "Updates an existing seller entity in the ai_ecommerce_sellers table, identified by UUID. Applies validated/authorized field changes, never allows destructive or non-authorized updates. Used in admin, compliance, or onboarding contexts.",
    "description": "PUT /ai_ecommerce/sellers/{id} updates permissible fields in a seller record, full transactionality and audit logging enforced. Applies 3NF business rules (PKs/relations immutable, audit fields updated, soft-delete handled with separate endpoint). Validation ensures seller exists and can be updated (not locked, not deleted). Only authorized system roles may use this. Changes are logged for compliance and audit, and failed updates (constraint violation, unauthorized access) are clearly rejected with explanations. Updated seller entity is returned, including unchanged/derived fields.",
    "summary": "Update an existing ai_ecommerce_sellers entity by UUID within allowed business rules.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of ai_ecommerce_sellers entity to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Seller update data for fields permitted by model/schema.",
      "typeName": "ai_ecommerce_sellers.IUpdate"
    },
    "responseBody": {
      "description": "The updated ai_ecommerce_sellers entity (as permitted by system rules).",
      "typeName": "ai_ecommerce_sellers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/sellers/{id}",
    "method": "put"
  },
  {
    "specification": "Soft-deletes a seller entity by UUID, following business and compliance requirements described in the ai_ecommerce_sellers model. Sets deleted_at but never removes the physical row for audit/compliance.",
    "description": "DELETE /ai_ecommerce/sellers/{id} marks a seller as deleted by updating the deleted_at timestamp. Only system administrators may perform this operation, which is non-reversible except by explicit audit-based reactivation. All endpoints and business logic must respect soft-delete. Attempts to delete non-existent, locked, or already deleted sellers return an appropriate error and leave data unchanged. Audit logging is enforced, and the endpoint must return the result state of the seller after soft-delete. Sensitive/admin-only action, never available to regular users.",
    "summary": "Soft-delete an ai_ecommerce_sellers entity by UUID (business/compliance required pattern).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of seller to soft-delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The ai_ecommerce_sellers entity following soft-delete (deleted_at set, state updated).",
      "typeName": "ai_ecommerce_sellers"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/sellers/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a paginated, optionally filtered list of administrator entities, as defined in ai_ecommerce_administrators table. Used in platform compliance, support tools, or system audit pipelines.—provides a summary list of admin records without relational user detail.",
    "description": "PATCH /ai_ecommerce/administrators is the standard system-listing endpoint for all administrators. Returns a page of admin summary records as defined by Prisma model. This endpoint supports filtering, pagination, and search as per standard system requirements, but does not expose full user/profile details. Only admin or system audit roles may use this endpoint. List results are strictly read-only. Proper resource control and security boundaries are enforced. If there are unauthorized or malformed requests, a compliance-safe error is returned. Use GET detail endpoint for 1:1 relational info.",
    "summary": "Retrieve a paginated, filtered list of ai_ecommerce_administrators entities.",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination options for admin list retrieval.",
      "typeName": "ai_ecommerce_administrators.IRequest"
    },
    "responseBody": {
      "description": "Paginated summary list of ai_ecommerce_administrators matching the filter criteria.",
      "typeName": "IPageai_ecommerce_administrators"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/administrators",
    "method": "patch"
  },
  {
    "specification": "Fetches detail about a specific administrator entity by UUID according to ai_ecommerce_administrators schema. Returns full record details as authorized (no sensitive relational info unless permitted). Used for audit, admin management, and compliance tools.",
    "description": "GET /ai_ecommerce/administrators/{id} returns the administrator entity matching the supplied UUID path parameter if it exists and is authorized for the requestor. Includes all permitted standard fields (UUID, profile FK, audit timestamps) and marks soft-deleted records transparently. Access denied/errors for non-existent, deleted, or unauthorized lookups are clearly indicated via error code/message. Relational details beyond core admin record require explicit call to related endpoints or higher privilege. Designed for audit, compliance, or management operations, never for user-facing display.",
    "summary": "Retrieve an ai_ecommerce_administrators entity by UUID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the administrator to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full detail of the ai_ecommerce_administrators entity by UUID.",
      "typeName": "ai_ecommerce_administrators"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/administrators/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new administrator account for the AI-ready shopping mall backend. This operation corresponds to the table ai_ecommerce_administrators and requires details such as a unique user profile link and timestamps. Used when onboarding a new admin to the platform. Only administrators with system privileges can perform this operation. Soft-deletion should be handled at business logic level. All authentication and audit logging should follow platform compliance.",
    "description": "This endpoint allows creation of a new administrator within the \"ai_ecommerce_administrators\" table. The administrator will be linked to a unique user profile from \"ai_ecommerce_user_profiles\" via the profile_id. Upon creation, both created_at and updated_at fields must be set to the current timestamp. The endpoint enforces system-wide admin privilege separation, ensuring no business/admin role confusion. Only privileged users can invoke this creation operation; audit log integration is recommended.\n\nAdministrators are high-privilege actors in the platform. Attempts to use an email/profile already assigned to an admin should return an error. Profile association is required and unique. Deletion is implemented via soft-delete (deleted_at); actual record removal is never performed for compliance tracking.\n\nRelated operations: update admin details (PUT), delete (soft-delete) admin (DELETE), retrieve (GET), and list with search/pagination (PATCH).",
    "summary": "Create new administrator entity in ai_ecommerce_administrators table.",
    "parameters": [],
    "requestBody": {
      "description": "Administrator creation data (profile link, timestamps, etc) per ai_ecommerce_administrators schema.",
      "typeName": "IAiEcommerceAdministrator.ICreate"
    },
    "responseBody": {
      "description": "The newly created administrator record.",
      "typeName": "IAiEcommerceAdministrator"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/administrators",
    "method": "post"
  },
  {
    "specification": "Update the details of an existing administrator in the ai_ecommerce_administrators table. This supports management of admin account details, ensuring audit compliance. Only the admin's unique id can be used; profile association cannot be changed. Soft-deletion is not handled here; see DELETE for that action. Role: essential for updating admin records according to compliance and regulatory requirements.",
    "description": "This operation updates fields (except identity/profile association) for an existing administrator entity in the \"ai_ecommerce_administrators\" table, referenced by id path parameter. The updated_at timestamp must be modified to the current update time. The operation enforces compliance separation between business and admin accounts. Only authorized actors (super-admin or privileged admin role) may update admins. Attempting to update a deleted (soft-deleted, deleted_at not null) admin should fail.\n\nAssociated business logic should include audit trail logging. Errors are returned if profile_id is attempted to be changed or if user does not exist. For role changes, see dedicated RBAC endpoints if applicable.",
    "summary": "Update existing administrator information in ai_ecommerce_administrators table.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the administrator to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update for the administrator (except for identity association).",
      "typeName": "IAiEcommerceAdministrator.IUpdate"
    },
    "responseBody": {
      "description": "The updated administrator record.",
      "typeName": "IAiEcommerceAdministrator"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/administrators/{id}",
    "method": "put"
  },
  {
    "specification": "Delete an administrator record from ai_ecommerce_administrators by soft-deletion (set deleted_at). Only system-level actors may invoke this. Operation is subject to audit. This endpoint never performs hard deletion for compliance reasons.",
    "description": "This operation marks an administrator entity as deleted by setting the deleted_at field. The administrator is referenced by their unique id. Role association and system compliance checks apply. Successful operation results in the administrator account being deactivated but retained in the database for regulatory and compliance auditability. Any attempt to reuse the admin profile/email identity should handle uniqueness error. Soft-deleted admins cannot be reactivated via this endpoint; use admin reactivation (if available).",
    "summary": "Soft-delete an administrator in ai_ecommerce_administrators (sets deleted_at timestamp).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the administrator to soft-delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The soft-deleted administrator record.",
      "typeName": "IAiEcommerceAdministrator"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/administrators/{id}",
    "method": "delete"
  },
  {
    "specification": "Fetch a paginated, searchable list of user profiles from ai_ecommerce_user_profiles, with support for flexible filtering, full-text search, and sorting. This endpoint is used for administrative or customer self-management portals. Returns only non-deleted profiles (if soft-delete logic applies).",
    "description": "This PATCH operation retrieves a list of user profiles in the ai_ecommerce_user_profiles table, supporting advanced search queries, pagination, and sorting according to the needs of customer service, admin, or user-facing profile listings. \n\nRequest body must support full-text search (e.g., by nickname, email), page/size controls, and sort key/direction. Returned results should never include soft-deleted (if such field exists) profiles. For detailed view, use GET by id; for creation or modification, POST/PUT endpoints. Security note: output should never include sensitive credentials or PII not required by user role.\n\nThis endpoint is commonly used by platform operators to manage users, as well as for customers to manage their own profile listings in multi-profile scenarios.",
    "summary": "Search and paginate user profiles in ai_ecommerce_user_profiles.",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination request for user profiles.",
      "typeName": "IAiEcommerceUserProfile.IRequest"
    },
    "responseBody": {
      "description": "A paginated, filtered result set of user profiles.",
      "typeName": "IPageIAiEcommerceUserProfile"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userProfiles",
    "method": "patch"
  },
  {
    "specification": "Retrieve the details of a single user profile by their unique id from ai_ecommerce_user_profiles. Used for self-service or admin support scenarios. Returns non-sensitive, profile-related metadata only. Security context determines output detail.",
    "description": "This GET operation fetches a single user profile record by id from the ai_ecommerce_user_profiles table. Suitable for detailed profile views by the owning user or administrative portal. Never exposes credential hashes or sensitive payment/profile data.\n\nInvalid or missing id yields an error response. Business logic should mask/omit fields depending on requester privilege and context. Associated endpoints: search (PATCH), update (PUT), create (POST), and delete (if supported).",
    "summary": "Get user profile details by id from ai_ecommerce_user_profiles.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for user profile to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The requested user profile record.",
      "typeName": "IAiEcommerceUserProfile"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userProfiles/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new user profile in ai_ecommerce_user_profiles. Used for registration flows and administrative creation. Only one email per profile is allowed. No sensitive tokens or credential hashes included in response or logs.",
    "description": "This POST endpoint creates a new user profile row in ai_ecommerce_user_profiles. Profiles represent the core, normalized metadata for user identity (nickname, avatar_uri, email, etc). Mandatory fields include nickname, email (must be unique), and communication_consent. \n\nAttempting to create a profile with an email already in use must result in an error. Upon creation, returns the newly created profile sans sensitive fields. Associated endpoints: update (PUT), get (GET), search (PATCH), and delete (if allowed by business logic). Creation of identity associations (customer, seller, or admin) are handled via separate endpoints.",
    "summary": "Create new user profile in ai_ecommerce_user_profiles.",
    "parameters": [],
    "requestBody": {
      "description": "User profile creation payload (core display and communication fields).",
      "typeName": "IAiEcommerceUserProfile.ICreate"
    },
    "responseBody": {
      "description": "The newly created user profile.",
      "typeName": "IAiEcommerceUserProfile"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userProfiles",
    "method": "post"
  },
  {
    "specification": "Update a user profile record in ai_ecommerce_user_profiles by id. Restricted fields (e.g., email) may require business logic verification. Timestamp tracking is required for audit/compliance. Idempotent update operation.",
    "description": "PUT on /ai_ecommerce/userProfiles/{id} updates one user profile record referenced by id. Allowed fields can include display and communication preferences, but email modification requires unique constraint enforcement. All updates must set updated_at to the current timestamp. \n\nAccess governed by requester privilege (self-service or admin role). Returns the updated profile. Errors surface if attempting concurrent or invalid changes (e.g., setting email to one already in use by another profile).",
    "summary": "Update user profile by id in ai_ecommerce_user_profiles.",
    "parameters": [
      {
        "name": "id",
        "description": "User profile id (uuid) to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Profile field updates for user profile.",
      "typeName": "IAiEcommerceUserProfile.IUpdate"
    },
    "responseBody": {
      "description": "The updated user profile.",
      "typeName": "IAiEcommerceUserProfile"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userProfiles/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a user profile record in ai_ecommerce_user_profiles by id, performing soft-delete only (setting deleted_at timestamp). Used for account closure and compliance. May only be invoked by authorizing user/admin. Never hard deletes for compliance.",
    "description": "DELETE /ai_ecommerce/userProfiles/{id} marks the specified profile as deleted by setting the deleted_at field. Does not remove record for compliance; all identity/account associations must be updated within business logic. No credentials or identity fields returned; only record state and metadata. Only the record owner or admin can invoke. Associated endpoints: update (PUT), fetch (GET), list/search (PATCH).",
    "summary": "Soft-delete a user profile by id in ai_ecommerce_user_profiles.",
    "parameters": [
      {
        "name": "id",
        "description": "ID of profile to delete (soft-delete).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The soft-deleted user profile record.",
      "typeName": "IAiEcommerceUserProfile"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userProfiles/{id}",
    "method": "delete"
  },
  {
    "specification": "Search, filter, and paginate user addresses in ai_ecommerce_user_addresses. Enables management and lookup of delivery/billing addresses, with fulltext and classification filtering. Accessible by owner, admin/support team, or for order-delivery address lookup flows.",
    "description": "This PATCH endpoint returns a list of user addresses, supporting advanced fulltext and property-based search, as well as classification (e.g., by address_type, region), pagination, and sorting. The address book is used in checkout, account management, and for fraud/compliance audit. Only non-deleted addresses (deleted_at=null) are included. Associated endpoints: single-fetch (GET), update (PUT), create (POST), and (if applicable) delete.",
    "summary": "Search/filter/paginate user addresses in ai_ecommerce_user_addresses.",
    "parameters": [],
    "requestBody": {
      "description": "Filter and pagination request for address book lookup.",
      "typeName": "IAiEcommerceUserAddress.IRequest"
    },
    "responseBody": {
      "description": "Paginated, filtered list of user addresses.",
      "typeName": "IPageIAiEcommerceUserAddress"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAddresses",
    "method": "patch"
  },
  {
    "specification": "Fetch single user address by id from ai_ecommerce_user_addresses. Used in profile delivery, checkout, or admin support. Profile owner or privileged role may access. Returns non-sensitive delivery address info only.",
    "description": "GET /ai_ecommerce/userAddresses/{id} retrieves a single address row identified by id from the ai_ecommerce_user_addresses table. The endpoint ensures only non-deleted addresses are available. All returning info is non-sensitive and for delivery/billing use only. Error returned if id not found or user is unauthorized. Associated endpoints: create (POST), update (PUT), delete (if supported), list (PATCH).",
    "summary": "Get user address by id from ai_ecommerce_user_addresses.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique id of user address to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The requested user address record.",
      "typeName": "IAiEcommerceUserAddress"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAddresses/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new user address record in ai_ecommerce_user_addresses, supporting customer address book expansion for checkout or profile management. Enforces normalization and uniqueness where applicable. Only authenticated users or support/admin roles may create. Must validate region/country and required address fields.",
    "description": "This POST endpoint supports creation of a new delivery/billing/user address row in ai_ecommerce_user_addresses. Mandatory fields include profile linkage, address type, name, delivery lines, and contact info. Upon creation, only returns the created address record. Validation must ensure region, address_type, and is_default business logic. Associated endpoints: update (PUT), fetch (GET), list/filter (PATCH), soft-delete (if supported).",
    "summary": "Create a new user address in ai_ecommerce_user_addresses.",
    "parameters": [],
    "requestBody": {
      "description": "User address creation payload (profile id, address fields, etc).",
      "typeName": "IAiEcommerceUserAddress.ICreate"
    },
    "responseBody": {
      "description": "The newly created user address record.",
      "typeName": "IAiEcommerceUserAddress"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAddresses",
    "method": "post"
  },
  {
    "specification": "Update an existing user address in ai_ecommerce_user_addresses by id. Permits changing delivery type, filling details, or updating contact information. Validates ownership/business logic for is_default, region, and required fields. Returns new record state. Only privileged/owning actors can use.",
    "description": "PUT /ai_ecommerce/userAddresses/{id} updates the specified user address with new details. Validation includes uniqueness of address for profile, up-to-date timestamp, and consistent legal compliance. Returned object is current database row. Associated endpoints: create (POST), fetch (GET), list (PATCH), and (if supported) soft-delete.",
    "summary": "Update an existing user address in ai_ecommerce_user_addresses.",
    "parameters": [
      {
        "name": "id",
        "description": "User address to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Payload of address updates for ai_ecommerce_user_addresses.",
      "typeName": "IAiEcommerceUserAddress.IUpdate"
    },
    "responseBody": {
      "description": "The updated user address record.",
      "typeName": "IAiEcommerceUserAddress"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAddresses/{id}",
    "method": "put"
  },
  {
    "specification": "Implements DELETE operation for deleting a user address by its ID. This operation is for the /ai_ecommerce/userAddresses/{id} endpoint. A user address represents a delivery or billing address tied to a user profile for e-commerce transactions. This endpoint deletes a specific address logically (soft-delete) or physically (hard delete), based on system policy. Table: ai_ecommerce_user_addresses (or ai_ecommerce_user_address, depending on schema normalization). User must have appropriate permissions to delete their own address. Action is audited. Related address usage (active orders, default flags) is validated by business logic before deletion is permitted.",
    "description": "This endpoint deletes a specific user address record from the ai_ecommerce_user_addresses table.\n\nThe endpoint accepts a path parameter 'id' which represents the unique identifier of the user address to be deleted. The action typically performs a soft-delete, setting the deleted_at field so that the address is no longer shown in standard queries but is retained for audit and compliance. Hard deletes may be executed based on policy or admin privileges.\n\nBusiness logic validates that the address is not in use on an active order or as the user's default delivery address before allowing deletion. The operation enforces strict permission checks so that only the address owner or a privileged administrator can execute this deletion. Deletion is logged in the audit system for traceability.\n\nRelated operations include creating, updating, retrieving, and listing user addresses via other /ai_ecommerce/userAddresses endpoints.",
    "summary": "Delete a user address by ID (ai_ecommerce_user_addresses table)",
    "parameters": [
      {
        "name": "id",
        "description": "The unique identifier of the user address to delete",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAddresses/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements PATCH operation for searching, filtering, and listing user OAuth (social/login) accounts for a given profile or set of filter criteria. Table: ai_ecommerce_user_oauth. This supports administrative review of all OAuth bindings, as well as user-centric queries (e.g., 'which external accounts are linked to my profile?'). Supports filtering by provider, user, or linkage date. Results are paginated and sorted. Strict RBAC ensures a user can only view their own linked providers; admins may view all.",
    "description": "This endpoint allows listing and complex querying of user OAuth accounts from the ai_ecommerce_user_oauth table.\n\nIt accepts advanced search parameters in the request body (such as provider, profile_id, linkage date, etc.) and returns a paginated list of OAuth account bindings matching those criteria. This is commonly used by administrators for audit purposes or by the current user to view their external linked accounts (Google, Apple, etc).\n\nThe endpoint enforces security policies so that users can see only their linked OAuth accounts, while administrators may apply broader search queries as needed. Supports pagination, sorting, and filtered retrieval.\n\nRelated endpoints: POST (create link), GET (get details), PUT (update), DELETE (remove OAuth linkage).",
    "summary": "Search/list user OAuth account bindings (ai_ecommerce_user_oauth table)",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination parameters for retrieving OAuth account links",
      "typeName": "ai_ecommerce_user_oauth.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of OAuth account links matching search criteria",
      "typeName": "IPageai_ecommerce_user_oauth"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userOauth",
    "method": "patch"
  },
  {
    "specification": "Implements GET operation to retrieve details for a specific user OAuth linkage by its ID. Table: ai_ecommerce_user_oauth. Used for showing which social login or external provider accounts have been connected to a profile. Security: a user may only retrieve their own bindings, admins may access all for audit. Returns the full metadata for the OAuth connection.",
    "description": "This endpoint retrieves detailed information about a specific user OAuth connection from the ai_ecommerce_user_oauth table.\n\nIt takes a path parameter 'id' referencing the unique OAuth binding ID. The returned record includes the auth provider, provider user ID, linkage timestamp, and related profile.\n\nBusiness rules ensure only the account owner or priviledged administrators can access this record. The endpoint is typically used to display which external identities are linked to the user's account, and for account troubleshooting or unlinking logic.\n\nRelated endpoints: listing all OAuth links for a profile, adding/removing connections.",
    "summary": "Get details of a user OAuth account link by ID (ai_ecommerce_user_oauth table)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the OAuth account linkage",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Complete details on the linked OAuth account",
      "typeName": "ai_ecommerce_user_oauth"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userOauth/{id}",
    "method": "get"
  },
  {
    "specification": "Implements POST operation to link (create) a new external OAuth (social login) provider to a user profile. Table: ai_ecommerce_user_oauth. This is used when a user first connects Google/Apple/Kakao/etc. to their profile. Security: Only the authenticated user may associate a provider with their own profile. Validates for uniqueness per provider+provider_user_id per schema constraints. Raises error if provider/user combo already linked.",
    "description": "This endpoint creates (links) a new external OAuth provider account to a user's profile in the ai_ecommerce_user_oauth table.\n\nThe request body includes provider name (e.g., 'google', 'apple'), provider_user_id, and the owning profile_id. Server logic ensures that this provider-user pair is unique and not already linked to another account, per schema constraints. Linking additional providers to an already-linked profile is allowed but a single provider+provider_user_id combination may not be reused. \n\nSecurity constraints enforce that a user can only add OAuth linkages to their own account (or that an admin is explicitly authorized). Upon creation, an audit log records the event.\n\nRelated operations: retrieving, listing, updating, and deleting OAuth links.",
    "summary": "Create/link a new external OAuth provider to a user profile (ai_ecommerce_user_oauth table)",
    "parameters": [],
    "requestBody": {
      "description": "New OAuth provider binding information for a user profile",
      "typeName": "ai_ecommerce_user_oauth.ICreate"
    },
    "responseBody": {
      "description": "Detailed record for the created OAuth account linkage",
      "typeName": "ai_ecommerce_user_oauth"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userOauth",
    "method": "post"
  },
  {
    "specification": "Implements PUT operation to update details of an existing user OAuth linkage. Table: ai_ecommerce_user_oauth. This covers scenarios such as revalidating provider credentials, updating metadata, or correcting linkage errors. Only the linkage owner (or authorized admin) may perform this operation. Validates provider-user uniqueness per schema before updating.",
    "description": "This endpoint updates an existing user OAuth provider connection in the ai_ecommerce_user_oauth table.\n\nIt is addressed by path parameter 'id', and the request body supplies updated values—such as new provider credential info or metadata changes. Before updating, business logic checks that the new provider+provider_user_id do not conflict with any other record. Strict permission checks ensure only the account owner or authorized personnel may update the link. The change is audit-logged for traceability.\n\nRelated endpoints: GET (detail), PATCH (listing), DELETE (remove), POST (create new linkage).",
    "summary": "Update a user OAuth provider linkage by ID (ai_ecommerce_user_oauth table)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique OAuth account linkage ID to update",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated OAuth account linkage data",
      "typeName": "ai_ecommerce_user_oauth.IUpdate"
    },
    "responseBody": {
      "description": "Updated details for OAuth linkage",
      "typeName": "ai_ecommerce_user_oauth"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userOauth/{id}",
    "method": "put"
  },
  {
    "specification": "Implements DELETE operation to remove a specific user OAuth account linkage by its ID. Table: ai_ecommerce_user_oauth. This is used to unlink an external provider from the user profile. Security: Only account owner or admin may remove. Unlinks the social identity, requiring user to use another login method or reconnect.",
    "description": "This endpoint removes (unlinks) an OAuth provider connection from the ai_ecommerce_user_oauth table for the specified ID.\n\nThe operation requires a path parameter 'id', referencing the OAuth linkage to remove. The delete operation is typically a hard delete removing all linkage metadata, though soft delete could also be enabled for compliance. Only the account owner or a privileged administrator may execute this operation. Attempts to remove a non-existent or unauthorized linkage result in error.\n\nRelated endpoints are available for create, update, retrieve, and list OAuth linkages. The deletion is audit-logged.",
    "summary": "Delete (unlink) a user OAuth account linkage by ID (ai_ecommerce_user_oauth table)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique OAuth linkage identifier to delete",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userOauth/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements PATCH operation for listing/searching user audit logs. Table: ai_ecommerce_user_audit_logs. This allows filtered and paginated querying of audit log events for a user or admin profile (such as logins, profile updates, password resets). Used by users to view their action logs or by administrators for compliance review. Supports filters by event_type, created_at, and other metadata.",
    "description": "Retrieves a paginated and filtered list of user audit logs from the ai_ecommerce_user_audit_logs table.\n\nThe request body supports search and filter criteria (such as profile_id, event_type, date ranges). Results are paginated according to parameters. Used by users wishing to audit their account history and by admins during security investigations or compliance checks.\n\nPermission checks enforce that users may only retrieve logs corresponding to their own profile, while administrators can review any user's logs. Extensive filtering and paginated access are supported.\n\nRelated endpoints: POST (create log record), GET (detail), PUT (update), DELETE (remove log).",
    "summary": "List/search user audit logs (ai_ecommerce_user_audit_logs table)",
    "parameters": [],
    "requestBody": {
      "description": "Audit log search/filter and pagination parameters",
      "typeName": "ai_ecommerce_user_audit_logs.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of audit logs matching query",
      "typeName": "IPageai_ecommerce_user_audit_logs"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAuditLogs",
    "method": "patch"
  },
  {
    "specification": "Implements GET operation to retrieve details for a specific user audit log record by its ID. Table: ai_ecommerce_user_audit_logs. Used for compliance auditing, user security, or action history review. Access is limited to the log record owner (or admin).",
    "description": "Retrieves the details of a specific user audit log record from the ai_ecommerce_user_audit_logs table.\n\nThe endpoint takes a path parameter 'id' specifying the audit log entry to retrieve. Returned data includes event_type, event_payload, timestamps, and references to the acted-upon profile.\n\nSecurity restrictions ensure only the affected user or authorized administrator can access this record. This is used for personal activity auditing, compliance, or troubleshooting account events.\n\nRelated endpoints: PATCH (listing/search), POST (create record), PUT (update), DELETE (remove log entry).",
    "summary": "Get user audit log detail by ID (ai_ecommerce_user_audit_logs table)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the audit log record",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full details of the audit log record",
      "typeName": "ai_ecommerce_user_audit_logs"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAuditLogs/{id}",
    "method": "get"
  },
  {
    "specification": "Implements POST operation to create a new user audit log entry for a user profile. Table: ai_ecommerce_user_audit_logs. Accepts an event_type and optional payload in the request body. Used to log security and profile change events (registration, login, update, etc). All events are immutable and append-only. Security: Only an acting user or admin may generate logs for their/assigned profile.",
    "description": "Creates a new user audit log event in the ai_ecommerce_user_audit_logs table.\n\nThe POST request body includes the required profile_id, event_type, and optional event_payload. Upon creation, a new, immutable audit log record is written for compliance and personal activity tracking. Security enforcement ensures that users can only log events for their own profile and that all entries are non-editable after creation. Related tables may trigger business logic for certain event types (e.g., suspicious login alerts).\n\nRelated endpoints: PATCH (search/list), GET (retrieve), PUT (update for exceptional cases), DELETE (hard/soft delete if allowed by compliance policy).",
    "summary": "Create user audit log record (ai_ecommerce_user_audit_logs table)",
    "parameters": [],
    "requestBody": {
      "description": "User audit log entry creation fields (profile, type, payload)",
      "typeName": "ai_ecommerce_user_audit_logs.ICreate"
    },
    "responseBody": {
      "description": "Created audit log entry details",
      "typeName": "ai_ecommerce_user_audit_logs"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAuditLogs",
    "method": "post"
  },
  {
    "specification": "Implements PUT operation to update an existing user audit log entry. Table: ai_ecommerce_user_audit_logs. Use cases: correcting event payloads or error metadata (rare, usually by admin/automation). Logs are generally append-only; update is supported only for legal/compliance necessity or correction. All updates are audited and revertible via history.",
    "description": "Updates the details of a specific user audit log in ai_ecommerce_user_audit_logs, identified by the path parameter 'id'.\n\nRequest body provides new event type, payload or metadata. Only authorized personnel or the event owner (when allowed by policy) can perform updates. Most audit logs are immutable; this operation is used in rare compliance or incident-management cases. Changes are tracked for legal audit history.\n\nRelated endpoints: POST (create), GET (retrieve), PATCH (listing), DELETE (soft delete).",
    "summary": "Update user audit log by ID (ai_ecommerce_user_audit_logs table)",
    "parameters": [
      {
        "name": "id",
        "description": "The audit log entry's unique identifier to update",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Audit log update fields (event, payload)",
      "typeName": "ai_ecommerce_user_audit_logs.IUpdate"
    },
    "responseBody": {
      "description": "Updated audit log entry detail",
      "typeName": "ai_ecommerce_user_audit_logs"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAuditLogs/{id}",
    "method": "put"
  },
  {
    "specification": "Implements DELETE operation to remove a user audit log entry by its unique ID. Table: ai_ecommerce_user_audit_logs. Typically used to hard-delete records for compliance with erasure requests (e.g., GDPR), or by admins in case of erroneous entries. Security: Only the record owner or an administrator may delete. Deletion is audit-logged. Soft/hard delete strategy enforced by platform policy.",
    "description": "Deletes a specific user audit log entry from the ai_ecommerce_user_audit_logs table.\n\nThe endpoint accepts the path parameter 'id' for the log record to delete. Only the log record owner or authorized admin may invoke this operation (e.g., in response to a legal/compliance erasure request, or to purge erroneous entries). The delete operation follows platform rules: soft or hard as dictated by business logic. The deletion event is itself logged to an immutable audit trail for traceability.\n\nRelated operations: POST (create new log), GET (retrieve), PUT (update), PATCH (list/search).",
    "summary": "Delete a user audit log record by ID (ai_ecommerce_user_audit_logs table)",
    "parameters": [
      {
        "name": "id",
        "description": "The audit log ID to delete",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/userAuditLogs/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements PATCH operation for listing, searching, and paginating seller business profiles. Table: ai_ecommerce_seller_business_profiles. Supports advanced filter criteria such as business name, registration number, or status for administration. Used primarily by platform admins for managing seller onboarding and compliance workflows. Security role enforcement: Only admins or authorized platform users can perform this query. Results are returned in paged format for scalability.",
    "description": "Lists, filters, and paginates seller business profile records from the ai_ecommerce_seller_business_profiles table.\n\nThe request body supplies filter and search criteria (such as business_name, registration_number), supporting complex administrative queries. The result set is paginated and can be sorted by various business attributes. Permission checks ensure only admin or platform staff can use this endpoint. Intended for onboarding, compliance, or metrics dashboards.\n\nOther operations for this entity include POST (onboard new seller), GET (profile details), PUT (profile updates), DELETE (soft-deactivate or fully delete profile).",
    "summary": "List/search seller business profiles (ai_ecommerce_seller_business_profiles table)",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination parameters for seller business profiles",
      "typeName": "ai_ecommerce_seller_business_profiles.IRequest"
    },
    "responseBody": {
      "description": "Paged list of seller business profiles",
      "typeName": "IPageai_ecommerce_seller_business_profiles"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/sellerBusinessProfiles",
    "method": "patch"
  },
  {
    "specification": "Fetch detailed information for a specific seller business profile. This operation is directly mapped to the ai_ecommerce_seller_business_profiles table, which contains structured business profile details for each seller for onboarding, verification, and compliance. The endpoint enables retrieval of all business profile details for a seller, including business name, registration number, tax ID, contact info, address, and creation/modification metadata. Permissions should restrict access to authorized administrators and (possibly) the owning seller; customers must be denied. This operation should validate UUID format for ID and handle not-found errors gracefully. If the business profile has been soft deleted (deleted_at is not null), the operation should indicate logical deletion status. Used as part of compliance reviews, onboarding workflows, or profile details views.",
    "description": "This API operation retrieves a single seller business profile entry from the ai_ecommerce_seller_business_profiles table by its unique UUID. The endpoint returns all columns: id, seller_id, business_name, business_registration_number, tax_id, contact info/email, address, city/state/postal/country, creation/updated timestamps, and soft-deletion status. Permissions should enforce that only authorized administrator or the seller themselves may access this resource. If the business profile is found and not soft-deleted, details are fully returned; if soft-deleted, a flag/field indicates status. Errors: 404 if not found, 403 if permission denied, or 410 if record is soft deleted and cannot be exposed. Links to associated onboarding or verification documents can be referenced by the caller (external operations).",
    "summary": "Get seller business profile details (ai_ecommerce_seller_business_profiles table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the seller business profile to retrieve (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Complete seller business profile details.",
      "typeName": "IAiEcommerceSellerBusinessProfile"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerBusinessProfiles/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new seller business profile. This endpoint directly creates a record in the ai_ecommerce_seller_business_profiles table, which holds structured business profile information for sellers. The request must include required fields: seller_id (FK to sellers), business_name, business_registration_number, tax_id (optional), contact fields, address, city/state/postal/country. Business logic must ensure only one profile per seller (unique seller_id); attempts to create duplicate must return error. Onboarded administrators and the owning seller can use this endpoint, with permissions enforced server-side. Creation timestamp is auto-generated. Validates required fields, duplicates, and foreign key constraints (e.g., seller must exist).",
    "description": "This API operation creates a new seller business profile in the ai_ecommerce_seller_business_profiles table. The request body must supply all required business profile details: seller_id, business_name, business_registration_number, optional tax_id, contact info, address, and compliance fields. The endpoint inserts the new row, enforcing uniqueness by seller_id and regulatory constraints (unique business_registration_number and tax_id). Timestamp fields are set automatically. Standard errors are thrown on FK or duplicate constraint violations. Permissions restrict access to administrators and sellers acting on their own account; all input is validated for format and completeness.",
    "summary": "Create a seller business profile (ai_ecommerce_seller_business_profiles table).",
    "parameters": [],
    "requestBody": {
      "description": "Business profile creation details.",
      "typeName": "IAiEcommerceSellerBusinessProfile.ICreate"
    },
    "responseBody": {
      "description": "Newly created seller business profile.",
      "typeName": "IAiEcommerceSellerBusinessProfile"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerBusinessProfiles",
    "method": "post"
  },
  {
    "specification": "Update an existing seller business profile. This endpoint updates a record in ai_ecommerce_seller_business_profiles identified by its UUID primary key. Updatable fields include any business profile details except the primary key: business name, business registration number, tax ID, contact details, address, city/state/postal/country. Only authorized administrators or the owning seller may update. The seller_id must not be changeable. Uniqueness and FK constraints are enforced (e.g., business_registration_number must remain unique). The deleted_at field is used for soft deletion and must not be overwritten except through the delete endpoint. Updated_at is set automatically by the system.",
    "description": "This endpoint updates specific fields of an existing seller business profile in ai_ecommerce_seller_business_profiles, located by its UUID id. Only updatable business profile fields may change; seller_id and deleted_at are not modifiable directly. The operation checks for uniqueness, FK, and validation constraints on inputs. Permissions are enforced so that only an administrator or the owning seller may update records. Soft deleted entries (deleted_at set) cannot be updated and should return an error. Errors: 404 if not found, 409 if uniqueness constraint fails, 403 if unauthorized. Returns the updated profile on success.",
    "summary": "Update a seller business profile (ai_ecommerce_seller_business_profiles table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the seller business profile to update (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated seller business profile details.",
      "typeName": "IAiEcommerceSellerBusinessProfile.IUpdate"
    },
    "responseBody": {
      "description": "Updated seller business profile data.",
      "typeName": "IAiEcommerceSellerBusinessProfile"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerBusinessProfiles/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft-delete) a seller business profile. This endpoint marks the record in ai_ecommerce_seller_business_profiles as deleted by updating deleted_at; the row is retained for audit/compliance. Only authorized administrators or the owning seller may perform deletion. If the profile is already soft deleted, returns appropriate status. Once deleted, the profile cannot be edited or read except by compliance/audit. Permission logic must prevent unrelated users from deleting. The endpoint does not physically remove the row, but ensures compliance data is preserved.",
    "description": "Marks a seller business profile as deleted by setting deleted_at in ai_ecommerce_seller_business_profiles. Deletion is soft (row remains for audit/regulatory). Only permitted for authorized administrators or the owning seller. If deleted profile is referenced elsewhere (e.g., onboarding/audit tables), deletion is permitted as those are retained for compliance. Duplicate invokes on already-deleted profiles return an error or appropriate message/status. Permissions and proper auditing are critical.",
    "summary": "Delete (soft-delete) a seller business profile (ai_ecommerce_seller_business_profiles table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the seller business profile to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Delete confirmation/status for the business profile.",
      "typeName": "IAiEcommerceSellerBusinessProfile.IDeleteResult"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerBusinessProfiles/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a paginated, filterable list of seller onboarding logs (ai_ecommerce_seller_onboarding_logs table). This endpoint supports advanced search, filtering, and pagination using request body fields (such as seller_id, business_profile_id, admin_id, workflow step, state, date range). Permissions: Administrators have broad access, sellers may see their own onboarding history. Used in onboarding dashboards, compliance review, and seller self-service onboarding flow.",
    "description": "Returns a filtered, paginated result set of seller onboarding logs from ai_ecommerce_seller_onboarding_logs. Accepts request body specifying filtering criteria: seller, business_profile, admin, workflow step, status, created range, etc. Returns total, pagination info, and matching onboarding log rows with all fields (id, seller_id, step, action, state, reason, timestamps, etc). Role-based filtering is enforced. Used to review onboarding processes, audit progress, and enable compliance checks. Errors on invalid filters or unauthorized access.",
    "summary": "List/query seller onboarding logs (ai_ecommerce_seller_onboarding_logs table, paginated/filterable).",
    "parameters": [],
    "requestBody": {
      "description": "Onboarding log search/query/filter and pagination controls.",
      "typeName": "Pageable.IAiEcommerceSellerOnboardingLogs.IRequest"
    },
    "responseBody": {
      "description": "Paginated onboarding log list data.",
      "typeName": "Pageable.IAiEcommerceSellerOnboardingLogs"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerOnboardingLogs",
    "method": "patch"
  },
  {
    "specification": "Retrieve a single seller onboarding log entry by UUID from ai_ecommerce_seller_onboarding_logs. This is a GET operation for detailed review of a specific onboarding step/action. Returns all columns, including step, action, actor/admin, decision state, rationale, and timestamps. Permissions must restrict to administrator and the relevant seller. Used in audit, onboarding review UIs, and compliance traceability.",
    "description": "Fetches a detailed seller onboarding log record from ai_ecommerce_seller_onboarding_logs by id (UUID). Returns all row fields: seller_id, admin_id, related business_profile_id, step, action, state, reason, and created timestamp. Enforces permissions: only administrators or the onboarding seller (or designated user) allowed access. Used in compliance review, onboarding workflow displays, and audit trail retrieval. Errors for not found/permission denied.",
    "summary": "Get seller onboarding log details (ai_ecommerce_seller_onboarding_logs table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for onboarding log to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Single seller onboarding log details.",
      "typeName": "IAiEcommerceSellerOnboardingLog"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerOnboardingLogs/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new seller onboarding log row to track workflow/audit steps for sellers. Writes to ai_ecommerce_seller_onboarding_logs. Input must provide seller_id, business_profile_id, step, action, actor/admin, state, rationale. Permissions: Only administrators or the seller involved may submit onboarding log entries. Used during onboarding flows, compliance checks, and business process traceability. Validates all inputs (e.g., step/action must be defined enums). Timestamps are auto-set.",
    "description": "Adds a new onboarding event record to ai_ecommerce_seller_onboarding_logs, associating with seller, potentially admin, and relevant business profile. Accepts all necessary onboarding workflow metadata in request body: step, action, state, and rationale details. Foreign keys validated, permission logic confirms ownership/authorization. On success, returns the newly created onboarding log row for workflow monitoring, audit, or compliance. Errors: 403 forbidden, 400 bad input, or 409 on FK violation.",
    "summary": "Create seller onboarding log (ai_ecommerce_seller_onboarding_logs table).",
    "parameters": [],
    "requestBody": {
      "description": "New onboarding event details for a seller.",
      "typeName": "IAiEcommerceSellerOnboardingLog.ICreate"
    },
    "responseBody": {
      "description": "New seller onboarding log data.",
      "typeName": "IAiEcommerceSellerOnboardingLog"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerOnboardingLogs",
    "method": "post"
  },
  {
    "specification": "Update specific fields in a seller onboarding log row, by UUID (ai_ecommerce_seller_onboarding_logs). Allows step, action, state, and rationale fields to be changed during onboarding workflow. Administrator or the owning seller required for access. Updates timestamps. Business rules: Immutable fields (created_at, IDs) are never updated. Cannot update if log is part of finalized onboarding (may error if step/status locked).",
    "description": "Updates designated mutable fields (step, action, state, rationale, admin assignment) of a seller onboarding log row, by UUID. All input validated for enum legality and FK integrity. Only permissible to alter in-progress onboarding entries; completed/final logs are immutable. Permissions restrict to administrator and owner sellers. Returns the updated log entry. Errors: 403 forbidden, 404 not found, 409 on business logic failure/integrity check.",
    "summary": "Update seller onboarding log (ai_ecommerce_seller_onboarding_logs table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for onboarding log to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated onboarding log details.",
      "typeName": "IAiEcommerceSellerOnboardingLog.IUpdate"
    },
    "responseBody": {
      "description": "Updated onboarding log entry.",
      "typeName": "IAiEcommerceSellerOnboardingLog"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerOnboardingLogs/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft-delete) a seller onboarding log record (ai_ecommerce_seller_onboarding_logs table). This operation marks the log as deleted and does not remove it from the database, for regulatory and audit retention. Access is restricted to authorized administrators or the seller. Handles already-deleted state. Resulting soft-deleted logs remain available for compliance entities only.",
    "description": "Soft-deletes a seller onboarding log row, by setting deleted_at. Enforced permissions ensure only the relevant administrator or owning seller may invoke. If row is already soft-deleted, returns an appropriate condition/status. Used for onboarding audits, regulatory compliance, or workflow error correction (not for permanent erasure).",
    "summary": "Delete (soft-delete) seller onboarding log (ai_ecommerce_seller_onboarding_logs table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for onboarding log to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Delete confirmation/status for onboarding log.",
      "typeName": "IAiEcommerceSellerOnboardingLog.IDeleteResult"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerOnboardingLogs/{id}",
    "method": "delete"
  },
  {
    "specification": "Query a paginated, filterable list of seller verification documents (ai_ecommerce_seller_verification_documents table). This endpoint supports advanced filtering (by seller, profile, type, date, verified status) and pagination via request body. Used by compliance teams, sellers for review/status, and onboarding flows. Only administrators and the relevant seller have access. Business rules enforce compliance/retention: all links and document URIs are audit-trailed.",
    "description": "Returns a paginated, filtered result set of seller verification documents. The request body defines filter fields (seller_id, business_profile_id, type, verified_at, etc.) and pagination controls. Responds with the list, each row including all document metadata fields: document type, URL, issue/expiry/verified/deleted timestamps, etc. Permissions are enforced, errors for invalid filters. Used to display verification attachments in onboarding and compliance dashboards. Handles soft-deleted (deleted_at) documents; those are flagged in responses.",
    "summary": "List/query seller verification documents (ai_ecommerce_seller_verification_documents table, paginated/filterable).",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination controls for verification documents.",
      "typeName": "Pageable.IAiEcommerceSellerVerificationDocuments.IRequest"
    },
    "responseBody": {
      "description": "Paginated result set of seller verification documents.",
      "typeName": "Pageable.IAiEcommerceSellerVerificationDocuments"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerVerificationDocuments",
    "method": "patch"
  },
  {
    "specification": "Get detailed metadata for a specific seller verification document by UUID (ai_ecommerce_seller_verification_documents table). Used for reviewing proof documents uploaded by sellers in onboarding or compliance. Only authorized administrators or the owner seller may access. Returns document type, owner/seller, profile, file URL, timestamps, and verified/deleted status. Handles not found, soft-deleted cases, and permission denied (404/403/410 as needed).",
    "description": "Retrieves a single seller verification document entry from ai_ecommerce_seller_verification_documents by id (UUID). Returns all column values: id, seller_id, business_profile_id, document_type, URL, issue_date, expiry_date, verified_at, deleted_at, etc. Permissions restrict to administrators and the relevant seller. Used in compliance workflows and onboarding validation. Soft-deleted and not found rows are differentiated for full auditability.",
    "summary": "Get seller verification document details (ai_ecommerce_seller_verification_documents table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for seller verification document to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Details for the identified seller verification document.",
      "typeName": "IAiEcommerceSellerVerificationDocument"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerVerificationDocuments/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new seller verification document entry for onboarding/compliance (ai_ecommerce_seller_verification_documents table). A seller or administrator can upload or register a document with all required metadata fields (document_type, file URL, dates, links to seller/business_profile). Business logic validates ownership and document type, and ensures document and link uniqueness. Permissions restrict to owning seller or administrator. On success, returns full document metadata with all columns. Used in onboarding flows and compliance dashboards. Soft deleted documents are not recreated but re-activated via dedicated flow if needed.",
    "description": "This operation creates a new row in ai_ecommerce_seller_verification_documents, storing all metadata for a seller's verification/proof document. Input body must include seller_id, business_profile_id, document_type, file URL, issue and optional expiry date, etc. Uniqueness/ownership is checked, and permissions enforced: Only the seller or platform administrator may create new entries. Used when onboarding requires document upload, or compliance requires new proof. Returns full row on success, with all relationship links. Errors for invalid input, permission denied, or duplicate constraints.",
    "summary": "Create seller verification document (ai_ecommerce_seller_verification_documents table).",
    "parameters": [],
    "requestBody": {
      "description": "Full document registration details for onboarding/compliance proof.",
      "typeName": "IAiEcommerceSellerVerificationDocument.ICreate"
    },
    "responseBody": {
      "description": "Details of the newly created seller verification document.",
      "typeName": "IAiEcommerceSellerVerificationDocument"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/sellerVerificationDocuments",
    "method": "post"
  },
  {
    "specification": "Updates an existing seller verification document's metadata or details. Associated with the ai_ecommerce_seller_verification_documents Prisma table. Used to modify document type, expiry date, or mark as verified, allowing sellers or administrators to maintain compliance records.",
    "description": "This operation updates the properties of a seller verification document, such as document type, expiry date, and verification status. The endpoint is used during onboarding compliance, seller audits, or when a seller resubmits updated business documentation for regulatory purposes. Security must ensure that only privileged roles (such as admins or the seller themselves) can update this document, and that only permitted fields are editable post-verification (e.g., file URL may not be editable if already verified). The ai_ecommerce_seller_verification_documents table enforces a strict link to sellers and business profiles, and each document is atomic—handling a single certificate, registration or identification image. Validation should check document expiry standards, uniqueness (e.g., does not overwrite another document of the same type for the seller), and audit all status/state changes. If the document is already soft-deleted or archived, updates should be rejected or require special privileges. Related APIs: GET for detail view, DELETE for removal, PATCH for advanced search/listing.",
    "summary": "Update a seller verification document by ID (ai_ecommerce_seller_verification_documents)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the seller verification document to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Information to update for the verification document.",
      "typeName": "IAiEcommerceSellerVerificationDocument.IUpdate"
    },
    "responseBody": {
      "description": "Updated seller verification document details.",
      "typeName": "IAiEcommerceSellerVerificationDocument"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/sellerVerificationDocuments/{id}",
    "method": "put"
  },
  {
    "specification": "Soft-deletes an existing seller verification document. Associated with the ai_ecommerce_seller_verification_documents Prisma table. Used to mark business documents as removed for compliance or upon seller's request without physical deletion from the database.",
    "description": "This operation performs a soft delete on the seller's verification document by setting its deleted_at timestamp. It is typically used when documents expire, are replaced, or are removed for regulatory reasons. Security must ensure only administrators or the owner seller have rights to remove documents. The document's existence and non-deleted status are validated before deletion. All delete events should be recorded in compliance or audit log tables. Deleting a document does not affect associated business profiles or sellers, and ensures recoverability should a wrongful deletion occur. Related APIs: GET for read, PUT for update, PATCH for search/list.",
    "summary": "Soft-delete a seller verification document by ID (ai_ecommerce_seller_verification_documents)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the seller verification document to remove.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of soft-delete operation (typically the deleted document object with deleted_at timestamp set).",
      "typeName": "IAiEcommerceSellerVerificationDocument"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/sellerVerificationDocuments/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a filtered, paginated list of administrator action logs. Based on the ai_ecommerce_admin_action_logs Prisma table. Supports advanced search and administrative compliance queries across all sensitive platform actions.",
    "description": "This operation fetches a list of administrator action log records, possibly filtered by actor, target type, date range, action type, or status. Used for compliance audits, incident investigations, and privilege changes. The endpoint allows sorting and paging of results, supporting large-scale organizational oversight. Security restrictions should permit access only by administrative roles with proper privilege. The underlying ai_ecommerce_admin_action_logs table stores immutable records; query-only, never updates. This PATCH uses a request body to define complex search and pagination filters, including full-text search on action detail or type fields. Related API operations: POST to create logs (for custom/manual insertion), GET by ID for detail view, or DELETE for redaction (rare, for compliance).",
    "summary": "List/search administrator action logs (ai_ecommerce_admin_action_logs) with filters and pagination.",
    "parameters": [],
    "requestBody": {
      "description": "Filter, sorting, and pagination details for log listing.",
      "typeName": "IAdminActionLog.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of administrator action logs.",
      "typeName": "IPageAdminActionLog"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/adminActionLogs",
    "method": "patch"
  },
  {
    "specification": "Retrieves the detailed record for a specific administrator action log. Associated with the ai_ecommerce_admin_action_logs Prisma table. Used for single event audit and privilege tracking.",
    "description": "This endpoint fetches all details for a specified administrator action log by its unique ID. The primary use is compliance investigation, historical platform event analysis, or resolving incidents. The caller must have a privileged admin role; sensitive event data (such as exact action detail or link to sensitive seller/customer info) may require further permission checks or access masking. If the ID does not exist or has been redacted (deleted), the endpoint returns an error or a not-found response. Related operations: PATCH for list/search, POST for log creation, PUT for updates (if logs are editable), and DELETE for redactions.",
    "summary": "Retrieve a specific administrator action log by ID (ai_ecommerce_admin_action_logs)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the admin action log to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full details of the administrator action log.",
      "typeName": "IAdminActionLog"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/adminActionLogs/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new administrator action log entry. Associated with the ai_ecommerce_admin_action_logs Prisma table. This atomic operation is used for compliance/audit tracking of privileged admin actions.",
    "description": "This operation logs a new administrator action, capturing who performed it, which role and seller/entity it affected, the target type, action type, and timestamp. Used by system or admin UI to record all critical configuration, role assignment, onboarding, or compliance events. Creation must validate that administrator ID and role (if provided) exist and are permitted to record the specified action type. All admin action logs are write-once, immutable after creation; no accidental overwriting. Sensitive fields (like action_detail) are stored with encrypted or internal-only access as needed. Audit events must be robust and tamper-proof for legal investigations. Redactions or edits to logs are not permitted outside restricted circumstances (handled by DELETE or special compliance endpoints). Related APIs: PATCH for search/list, GET for retrieval, DELETE for redaction, PUT/POST is not permitted for external edits (except insert).",
    "summary": "Create a new administrator action log (ai_ecommerce_admin_action_logs)",
    "parameters": [],
    "requestBody": {
      "description": "Data for the new action log record.",
      "typeName": "IAdminActionLog.ICreate"
    },
    "responseBody": {
      "description": "Created administrator action log record.",
      "typeName": "IAdminActionLog"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/adminActionLogs",
    "method": "post"
  },
  {
    "specification": "Updates fields on an existing administrator action log. Associated with the ai_ecommerce_admin_action_logs Prisma table. Used for rare redaction, annotation, or compliance correction; logs are otherwise append-only.",
    "description": "This endpoint allows privileged admin users to redact, annotate, or append information to an existing admin action log record, for compliance or legal purposes. Typical fields updated may include action_detail or certain state/annotation flags; audit rules will restrict what can be changed after initial creation. The operation should be strictly controlled, with all changes themselves being audit-logged in a separate compliance or action log. If the record is immutable for business rules, this operation should require special privileges or throw a forbidden error. This operation is not for normal workflow, but for legal, compliance, or correction purposes. Related operations: GET by ID, PATCH for search, POST for new log creation, DELETE for redaction.",
    "summary": "Update an administrator action log by ID (ai_ecommerce_admin_action_logs)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the action log to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update on the log record.",
      "typeName": "IAdminActionLog.IUpdate"
    },
    "responseBody": {
      "description": "Updated administrator action log record.",
      "typeName": "IAdminActionLog"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/adminActionLogs/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes (redacts) an administrator action log record. Associated with the ai_ecommerce_admin_action_logs Prisma table. Used for compliance-driven redaction, not normal workflow, because logs are generally append-only.",
    "description": "This operation performs a logical (soft) delete or redaction of an admin action log entry, typically for compliance, legal, or privacy reasons. All delete requests must be authorized for superadmin or compliance roles, with auditability and tracking of the redaction decision. The actual data should be retained for legal traceability with masking or an explicit redacted state. Operation must validate the existence and state of the log before deletion. This does not disrupt the audit trail as all deletions themselves are also logged with timestamp and actor. Related APIs: GET by ID, PATCH for listing, POST for creation, PUT for annotation/redact (if allowed).",
    "summary": "Redact (soft-delete) an administrator action log by ID (ai_ecommerce_admin_action_logs)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the administrator action log to redact/delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of redaction/deletion (the log record with updated state).",
      "typeName": "IAdminActionLog"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/adminActionLogs/{id}",
    "method": "delete"
  },
  {
    "specification": "Searches and paginates through role definitions (RBAC entities). Associated with the ai_ecommerce_roles Prisma table. Used for admin RBAC management, filtering by role name/attributes.",
    "description": "This operation returns a filtered, paginated list of roles in the system, supporting RBAC administration. Typical filters include role name, creation/update dates, or description keywords. The endpoint supports pagination and sorting as the number of roles may be large. Administrative privilege is required, as role data is considered sensitive for security. This PATCH endpoint uses a complex request body for advanced queries, allowing for full-text search and attribute filtering. Related APIs: POST for role creation, PUT/DELETE for modification, GET by ID for details.",
    "summary": "List/search roles in RBAC system (ai_ecommerce_roles) with filters and pagination.",
    "parameters": [],
    "requestBody": {
      "description": "Filter, sort, and pagination info for roles query.",
      "typeName": "IRole.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of roles matching filters.",
      "typeName": "IPageRole"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/roles",
    "method": "patch"
  },
  {
    "specification": "Retrieves a specific RBAC role definition by ID. Associated with the ai_ecommerce_roles Prisma table. Used for RBAC administration, role detail display, and security audits.",
    "description": "This endpoint fetches the detail for a single role via its unique ID. It is used in RBAC admin panels for editing, display, or privilege summary, and in platform security audits. Security checks must ensure only administrator roles can access this data. If the role is not found, a not-found error should be returned. Related endpoints: PATCH for search/list, POST for addition, PUT/DELETE for modification, GET for detail view.",
    "summary": "Get RBAC role detail by ID (ai_ecommerce_roles)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the role to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Role detail object/record.",
      "typeName": "IRole"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/roles/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new RBAC role. Associated with the ai_ecommerce_roles Prisma table. Used for administrative role management; standard RBAC operation.",
    "description": "This operation defines and inserts a new role for RBAC (e.g., 'auditor', 'product_manager'). Role names must be unique across the platform. Only admins can use this endpoint. Additional validation ensures role names do not conflict, and description is optional. Once added, roles can then be assigned to users or used in permission mapping flows. Related operations: PATCH for list, PUT/DELETE for edit/removal, GET by ID for detail.",
    "summary": "Create a new RBAC role (ai_ecommerce_roles)",
    "parameters": [],
    "requestBody": {
      "description": "Fields for the new role definition.",
      "typeName": "IRole.ICreate"
    },
    "responseBody": {
      "description": "Created role definition object.",
      "typeName": "IRole"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/roles",
    "method": "post"
  },
  {
    "specification": "Updates a RBAC role definition. Associated with the ai_ecommerce_roles Prisma table. Used for editing role names, description, or attributes by admins.",
    "description": "This endpoint updates the definition (name, description, attributes) of a specific role ID. Administrators may use this when editing privilege names or adjusting descriptions. All updates must enforce global uniqueness of role names. The PATCH endpoint may allow partial updates; full replace is typically PUT. Security/authorization rules must ensure only admin users can update roles. Related endpoints: GET by ID for details, PATCH for list, POST for addition, DELETE for removal.",
    "summary": "Update a RBAC role by ID (ai_ecommerce_roles)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the role to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Role fields to update.",
      "typeName": "IRole.IUpdate"
    },
    "responseBody": {
      "description": "Updated role object/record.",
      "typeName": "IRole"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/roles/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes (logically, soft) a RBAC role by ID. Associated with the ai_ecommerce_roles Prisma table. Required for RBAC admin and compliance—roles may not be hard deleted if in use.",
    "description": "This operation soft-deletes (marks as removed) a role in the RBAC system by its unique ID. Deletion is only permitted if the role is not currently assigned—otherwise, an error is returned. Admin privilege is required for this action. The operation checks for existence and assignment state before removal. Related endpoints: POST for creation, GET for detail, PATCH for search/list, PUT for update.",
    "summary": "Soft-delete a RBAC role by ID (ai_ecommerce_roles)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the role to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of soft-delete operation (role record with status/flag updated).",
      "typeName": "IRole"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/roles/{id}",
    "method": "delete"
  },
  {
    "specification": "API for searching/listing permission entities in the system. This endpoint fetches a paginated, searchable, and sortable list of permissions that exist in the RBAC system based on the ai_ecommerce_permissions Prisma table. This operation is essential for managing permissions as part of the system's role-based access control (RBAC) infrastructure. It allows admins or RBAC managers to locate and audit permission records, filter by name or description, and can return both active and inactive permissions. Pagination parameters and complex filters are supported as per the standard list conventions for large-scale, multi-tenant systems. The results may be consumed by the admin UI or by automated systems for access reviews. Enforces no modification; strictly retrieval of permission listings.",
    "description": "This PATCH operation retrieves a list of permissions defined in the ai_ecommerce_permissions database table. Each permission entry represents an atomic access right (such as 'manage_orders', 'approve_seller', etc.) and is used to implement the RBAC requirements analyzed from the Seller/Admin specification.\n\nThe endpoint allows retrieval with advanced query capabilities: filters by permission name, type, status, and supports pagination, sorting, and searching. Only users with appropriate admin or access management roles should be permitted to use this endpoint—strict audit logging applies. No modifications, creations, or deletions can be performed via this API. Use this operation together with POST (create), PUT (edit), GET (detail), and DELETE (remove) to manage the overall permission lifecycle.\n\nValidation logic includes proper parsing of query filters, safe execution with appropriate RBAC scopes, and robust error handling for invalid filters or excessive page sizes. If no permissions are found based on the filters, the endpoint returns an empty results array with pagination metadata.",
    "summary": "Search, filter, and paginate permissions (ai_ecommerce_permissions table).",
    "parameters": [],
    "requestBody": {
      "description": "Request criteria for listing and searching permissions. Includes pagination, search, and filter options.",
      "typeName": "ai_ecommerce_permission.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of permission entities meeting search criteria.",
      "typeName": "IPageai_ecommerce_permission"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/permissions",
    "method": "patch"
  },
  {
    "specification": "Fetch detailed information for a specific permission by ID. This operation returns the full entity for a permission from ai_ecommerce_permissions, allowing admin tools to audit, display, or review the configuration of that RBAC permission.",
    "description": "This GET operation retrieves the full detail of a single permission identified by its unique ID. Each permission entity is derived from the ai_ecommerce_permissions table and forms the granular atomic access units of the RBAC system, as per Seller/Admin specifications.\n\nThe response includes all key fields: name and description (fully normalized), creation timestamp, and any other relevant permission metadata. The operation requires the requester to have adequate privileges (admin or RBAC manager), and all reads are audit-logged for compliance. This API is typically used to display, verify, or inspect explicit access rights granted to roles or users.\n\nIf the permission is not found, the API returns a 404 Not Found error. Business logic enforces that only authenticated and privileged users may query this endpoint directly; others may receive a forbidden or unauthorized error.",
    "summary": "Get a specific permission's full details by ID (ai_ecommerce_permissions table).",
    "parameters": [
      {
        "name": "id",
        "description": "Target permission's UUID",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full permission entity details matching provided ID.",
      "typeName": "ai_ecommerce_permission"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/permissions/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new permission in the system. Used by access managers or admin tools to define new atomic RBAC permissions in the ai_ecommerce_permissions table (not role assignments, but permission entities).",
    "description": "This POST operation creates a new atomic permission in the ai_ecommerce_permissions table. Permissions here represent fine-grained access rights (such as 'manage_orders' or 'export_data') critical for building a robust RBAC (Role-Based Access Control) system as outlined in the Seller/Admin requirements.\n\nRequest must specify permission name (unique), human-readable description, and any classification fields. Service validates the uniqueness of the name, enforces required metadata, and performs audit logging. Only administrators or RBAC agents are allowed access; insertions are denied for duplicate names or invalid payloads. Creation triggers may be integrated with access-control policies or permission review workflows.\n\nClients use this API to onboard new features, expand the RBAC universe, or implement access control extensions. Related operations: PATCH for search/list, PUT for edit, GET for detail, DELETE for removal.",
    "summary": "Create a new permission record (ai_ecommerce_permissions table).",
    "parameters": [],
    "requestBody": {
      "description": "Permission information for new creation. Must include required unique permission name.",
      "typeName": "ai_ecommerce_permission.ICreate"
    },
    "responseBody": {
      "description": "Details of the newly created permission entry.",
      "typeName": "ai_ecommerce_permission"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/permissions",
    "method": "post"
  },
  {
    "specification": "Update a permission entity by ID. This endpoint allows editing details of a specific permission in ai_ecommerce_permissions, such as changing its description or name (if allowed).",
    "description": "This PUT operation updates fields (typically description, and possibly name if business rules permit) on an existing permission in the ai_ecommerce_permissions table. It enforces seller/admin RBAC conventions by only allowing authorized actors to change atomic permission entries.\n\nThe input payload specifies which fields to update (usually description, but potentially name for non-immutable records). Validation ensures permission name uniqueness and audit logging of all changes. Typical business logic includes permission existence checks, proper safe update semantics, and rollback on conflict. On success, returns the updated permission record; on error, an appropriate error message (e.g., duplicate name, not found, or forbidden).\n\nThis API is used to correct typos, change access descriptions, or migrate permission names. Pair with GET for details, PATCH for listing, POST for new, DELETE for removal.",
    "summary": "Edit an existing permission (ai_ecommerce_permissions table).",
    "parameters": [
      {
        "name": "id",
        "description": "Permission entity's UUID to update",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Update information for target permission entity.",
      "typeName": "ai_ecommerce_permission.IUpdate"
    },
    "responseBody": {
      "description": "The updated permission record after modification.",
      "typeName": "ai_ecommerce_permission"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/permissions/{id}",
    "method": "put"
  },
  {
    "specification": "Remove a permission entity by ID. This operation deletes a permission from the ai_ecommerce_permissions table and is restricted to access management roles.",
    "description": "This DELETE operation permanently removes a permission entity from the ai_ecommerce_permissions table, fulfilling the needs of system administrators to remove obsolete or unneeded permissions, as specified by RBAC business logic in the Seller/Admin requirements.\n\nRequires proper privilege; only high-level access managers can delete permission entities. Operation is fully audit-logged. The entity is deleted using a strict by-ID match; if the entity is in use by any roles, logic should reject or warn (business/service dependent). Successful deletion returns a confirmation object; not-found errors return 404. Use with GET, PATCH, PUT, and POST endpoints to complete the permission lifecycle.",
    "summary": "Delete a permission entity (ai_ecommerce_permissions table).",
    "parameters": [
      {
        "name": "id",
        "description": "Permission entity's UUID for deletion",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation result of the delete operation (success or failure).",
      "typeName": "ai_ecommerce_permission.IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/permissions/{id}",
    "method": "delete"
  },
  {
    "specification": "List/search the ai_ecommerce_products table entities using filtering, pagination, and search. This endpoint is used to fetch products for admin/seller dashboards, analytics, or public catalog display as analyzed in ProductCatalog requirements. Highly scalable for large product sets.",
    "description": "This PATCH operation fetches a paginated list of product entities from the ai_ecommerce_products table, supporting search, filter, and sort. Each product is a core sellable item, fully normalized (no embedded SKUs or options—these are referenced separately).\n\nAPI enables search by title, filter by seller, status, approval_state, and creation date. It supports query expansion for marketplace features, seller management, or analytics dashboards. Permissions should restrict visibility by actor (e.g., sellers see only their products, admins see all).\n\nBusiness logic ensures proper pagination, validation of filtering fields, and audit logging for monitored or sensitive queries. This endpoint is foundational to product browsing, admin management, and AI-powered discovery. Use with GET for detail, PUT/POST for editing/adding, DELETE for removing products.",
    "summary": "Paginated search/filter of products (ai_ecommerce_products table).",
    "parameters": [],
    "requestBody": {
      "description": "Paginated/search request for products; includes filter and sort options.",
      "typeName": "ai_ecommerce_product.IRequest"
    },
    "responseBody": {
      "description": "Paginated product list and search results.",
      "typeName": "IPageai_ecommerce_product"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/products",
    "method": "patch"
  },
  {
    "specification": "Retrieve detailed information for a single product by its unique ID. Used for displaying or managing product details as required by ProductCatalog specification.",
    "description": "This GET operation fetches the complete details of a single product from the ai_ecommerce_products table using its unique UUID. Product information includes all atomic, non-aggregated product metadata—referenced details such as SKUs, options, or related media are accessed via their own APIs.\n\nThe returned object contains product title, description, status, approval state, owner (seller), and primary audit information. Permissions restrict visibility by user role (seller can see only their own, admins have full access). Reads are fully logged for task traceability.\n\nIf product not found, a 404 Not Found is returned. Failure cases also include lacking proper permissions, requesting deleted products, or accessing a product outside authorized scope. Use PATCH for search, PUT/POST for edit/create, DELETE for removal.",
    "summary": "Get details for a single product by ID (ai_ecommerce_products table).",
    "parameters": [
      {
        "name": "id",
        "description": "Product's unique UUID",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full product entity details for requested product ID.",
      "typeName": "ai_ecommerce_product"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/products/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new product in the ecommerce platform. This operation adds a product entity to ai_ecommerce_products, used for seller onboarding, catalog management, or admin bulk import. Follows ProductCatalog 3NF standards.",
    "description": "This POST operation inserts a new product row into ai_ecommerce_products with required details (title, description, seller_id, etc). It is intended for use by sellers, onboarding agents, or system administrators expanding the catalog.\n\nInput validates required product data, ownership, business and workflow status, and uniqueness (seller/title). Audit logging is enforced and appropriate privilege checks are performed. If product already exists (same seller and title) or if required fields are invalid, operation responds with error. On success, the created product entity is returned with full normalized details.\n\nRelated operations: PATCH for search, GET for detail, PUT for update, DELETE for removal. Permissions and access audit controls apply as per RBAC policy.",
    "summary": "Create a new product entity (ai_ecommerce_products table).",
    "parameters": [],
    "requestBody": {
      "description": "Product creation payload, including all required fields.",
      "typeName": "ai_ecommerce_product.ICreate"
    },
    "responseBody": {
      "description": "Newly created product details.",
      "typeName": "ai_ecommerce_product"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/products",
    "method": "post"
  },
  {
    "specification": "Update an existing product by UUID. Enables editing product fields in ai_ecommerce_products for catalog management or seller dashboard. Subject to ProductCatalog validation.",
    "description": "This PUT operation edits an existing product row in ai_ecommerce_products, identified by its UUID. Updatable fields typically include title, description, status, and approval state—no child entities (SKUs, options, media) are modified by this API.\n\nOnly validated, privileged users may update products they own or have access to. Changes are strictly audit-logged. Name/uniqueness validation applies for seller/title pair. Failure modes: not found, permission denied, or invalid payload. Returns the updated product entity if successful.\n\nPairs with GET for details, PATCH for listing, POST for creation, and DELETE for removal to implement the product resource lifecycle.",
    "summary": "Update a product entity by UUID (ai_ecommerce_products table).",
    "parameters": [
      {
        "name": "id",
        "description": "Product ID to update (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields and values for updating the target product.",
      "typeName": "ai_ecommerce_product.IUpdate"
    },
    "responseBody": {
      "description": "Product record after successful update.",
      "typeName": "ai_ecommerce_product"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/products/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a product entity by UUID. This endpoint permanently removes (or soft-deletes depending on system config) a product row in ai_ecommerce_products, fulfilling inventory/catalog cleanup needs.",
    "description": "This DELETE operation deletes (soft or hard, as configured by service) a product entity in ai_ecommerce_products table, looked up by its ID. Business rules confirm product not referenced by active SKUs/orders before deletion; system enforces strict RBAC for admin/seller.\n\nIf the entity is not found, returns a 404 error; if deletion is forbidden by relationships, responds with an appropriate error. On success, confirmation or deleted entity details may be returned. Use with PATCH (search), POST (create), GET (detail), and PUT (update) for managing the whole product lifecycle.\n\nThe operation is fully audit-logged and subject to access controls.",
    "summary": "Remove (delete) a product by UUID (ai_ecommerce_products table).",
    "parameters": [
      {
        "name": "id",
        "description": "Product UUID for deletion",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Result of the delete operation, can include status or deleted entity snapshot.",
      "typeName": "ai_ecommerce_product.IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/products/{id}",
    "method": "delete"
  },
  {
    "specification": "List/search/paginate SKUs in the system. This endpoint returns a paginated and filtered list of SKU entities in ai_ecommerce_skus. Admins, sellers, and system tools use this for inventory/fulfillment views as per ProductCatalog requirements.",
    "description": "This PATCH operation implements paginated retrieval/search/filter for SKU entities based on ai_ecommerce_skus as analyzed from the ProductCatalog requirements. Allows clients to filter SKUs by product, status, code, or price. Pagination and search fields conform to scalable best practices for product/fulfillment systems.\n\nThe endpoint returns SKUs with atomic detail (SKU ID, product, price, status, etc.) but does not embed inventory/history/option information, which are accessed by related APIs. Results are restricted by permissions—sellers see only their own, admins/ops have expanded access. Logging standards enforce full traceability of all retrieval actions.\n\nUse this endpoint together with GET for detail, POST/PUT for add/edit, DELETE for remove to manage the full SKU lifecycle. Error handling covers invalid queries, forbidden access, and data anomalies.",
    "summary": "Paginate, search, and filter SKUs (ai_ecommerce_skus table).",
    "parameters": [],
    "requestBody": {
      "description": "Search/pagination/filter criteria for SKU listing.",
      "typeName": "ai_ecommerce_sku.IRequest"
    },
    "responseBody": {
      "description": "Paginated/results list of SKU entities matching search criteria.",
      "typeName": "IPageai_ecommerce_sku"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/skus",
    "method": "patch"
  },
  {
    "specification": "Get detail for a single SKU by its ID, as required for inventory/product management and analytics dashboards. This endpoint fetches a complete SKU entity from ai_ecommerce_skus, fulfilling atomic SKU retrieval needs.",
    "description": "This GET operation retrieves a specific SKU entity (stock keeping unit) by UUID from ai_ecommerce_skus. A SKU represents an atomic, sellable product variant, with properties such as code, price, currency, and is_active status, as defined in the ProductCatalog schema and requirements.\n\nReturns all atomic properties of the SKU entity, but does not embed inventory or product—those linkages are accessed by reference. This endpoint is foundational for fulfillment, order composition and analytics. Only RBAC-authorized users (seller/admin) can access this endpoint for SKUs they own or are permitted to query. Error handling returns 404 for missing or inaccessible SKUs.\n\nFrequently used with PATCH (search/list), POST/PUT (edit/add), DELETE (remove)—all operations are strictly audit-logged and permission controlled.",
    "summary": "Get full details of a specific SKU by UUID (ai_ecommerce_skus table).",
    "parameters": [
      {
        "name": "id",
        "description": "SKU entity's UUID for atomic lookup",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full SKU entity with all atomic properties.",
      "typeName": "ai_ecommerce_sku"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/skus/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new SKU record for ai_ecommerce_skus table. This operation allows a client to add a new SKU (Stock Keeping Unit) entity, which represents a specific sellable variation of a product (such as size, color, etc) within the e-commerce platform. The SKU links to the parent product and records its code, price, currency, and activation status. The SKU is a fundamental unit for inventory management, pricing, and order processing. Attributes required for creation include the parent product ID, SKU code, price, currency, and active flag. This endpoint enforces unique SKU code per product, and proper product association. Use for onboarding new product variants and enabling their sale through the system.",
    "description": "This operation creates a new SKU in the ai_ecommerce_skus table, which is the atomic representation for product variations (such as color, size, etc.). According to the Prisma schema, each SKU must be linked to a product via product_id, have a unique code within that product, a price (double precision), a currency (ISO code), and a boolean active status. The operation does not handle aggregates or derived inventory data, maintaining strict normalization as defined in the schema's comments. Business logic applies uniqueness constraints on (code, product_id), and links each SKU to a parent product.\n\nUpon POST, the system validates the SKU code for uniqueness and that the referenced product_id exists. If validation passes, a new SKU entity is created with timestamps for creation and update; otherwise, an appropriate error message is returned. Any optional fields as described in the schema (such as options or inventory) are managed in their respective tables.\n\nThis operation is a core part of catalog onboarding and inventory configuration, often used in conjunction with product and inventory endpoints. Error handling includes duplicate SKU code rejections and non-existent product references.\n\nRelated endpoints include PATCH for searching SKUs and PUT/DELETE for updates and deactivation.",
    "summary": "Create a new SKU record in ai_ecommerce_skus (ProductCatalog domain).",
    "parameters": [],
    "requestBody": {
      "description": "SKU creation payload for ai_ecommerce_skus.",
      "typeName": "ai_ecommerce_skus.ICreate"
    },
    "responseBody": {
      "description": "Created SKU entity with all attributes from ai_ecommerce_skus.",
      "typeName": "ai_ecommerce_skus"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/skus",
    "method": "post"
  },
  {
    "specification": "Update an existing SKU for ai_ecommerce_skus table. This endpoint allows updating the details of a specific SKU entity, such as its price, code, currency, or activation status. The SKU is identified by its unique ID parameter in the path. The operation ensures the SKU remains linked to its parent product and that the code is still unique within that product. Typical usage is for catalog maintenance.",
    "description": "This operation updates the record of a specific SKU (Stock Keeping Unit) in the ai_ecommerce_skus table, using the provided SKU ID as the path parameter. As per the schema, the updatable attributes include code, price, currency, and is_active status, among others. Business rules ensure that the SKU remains unique per product and maintain referential integrity with the parent product. Changing the SKU code or product association may result in uniqueness checks.\n\nValidation includes checking that the SKU exists, that new code values (if changed) do not violate (code, product_id) uniqueness, and that any referenced product exists. Successful updates modify the updated_at timestamp. Error conditions include non-existent SKU ID, uniqueness violation, or invalid data.\n\nThis endpoint is typically used by catalog admins or seller tools and may be used in conjunction with inventory updates for associated SKUs.",
    "summary": "Update an existing SKU (ai_ecommerce_skus) by ID (ProductCatalog domain).",
    "parameters": [
      {
        "name": "id",
        "description": "Target SKU's ID in ai_ecommerce_skus.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "SKU update payload for ai_ecommerce_skus.",
      "typeName": "ai_ecommerce_skus.IUpdate"
    },
    "responseBody": {
      "description": "Updated SKU entity data from ai_ecommerce_skus.",
      "typeName": "ai_ecommerce_skus"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/skus/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft-delete) an existing SKU identified by ID from ai_ecommerce_skus. This operation marks the SKU as deleted in the system (GDPR compliance), used for catalog maintenance and inventory control. Removal is usually enforced by setting deleted_at, not physical removal.",
    "description": "This endpoint performs a soft-delete (logical delete) of a SKU in ai_ecommerce_skus, setting the deleted_at timestamp for compliance and audit purposes as described in the schema comments. The operation is initiated using the SKU's unique ID as a path parameter. Business logic may ensure that SKUs in active orders or with inventory cannot be physically deleted.\n\nUpon execution, the endpoint verifies existence of the target SKU, applies inactivation and soft-delete rules, and updates appropriate audit trails. Hard deletes should not be used except for legal requirements. Related audit and inventory records should be reviewed/updated by adjacent processes as needed. Returns success/failure status.\n\nError conditions include non-existent SKU or violation of catalog integrity constraints.",
    "summary": "Soft-delete (logical removal) a SKU by ID (ai_ecommerce_skus; ProductCatalog domain).",
    "parameters": [
      {
        "name": "id",
        "description": "Target SKU's ID in ai_ecommerce_skus.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/skus/{id}",
    "method": "delete"
  },
  {
    "specification": "Search, filter, or paginate product categories in ai_ecommerce_categories. This PATCH endpoint allows for complex queries with filters and pagination for efficient browsing or admin use. Supports typical category search scenario and hierarchy exploration.",
    "description": "PATCH to /ai_ecommerce/categories enables advanced querying for product categories in the ai_ecommerce_categories table, based on complex input for search, filtering, or pagination criteria. As per the schema, a category may be filtered by fields like name, parent_id, created_at, or other attributes. Output is typically paginated and allows hierarchical exploration.\n\nThis endpoint is used for admin UIs, catalog managers, or AI-content queries, and must respect category path/parent-child structure (parent_id field). Soft-deleted categories are usually excluded unless explicitly requested. Business rules ensure only legal combinations of filters and enforce sorting and pagination limits.\n\nReturns a paginated list of categories matching the search query. Related endpoints include GET for detail, POST for creation, and PUT/DELETE for update/removal.",
    "summary": "Search, filter, or paginate categories in ai_ecommerce_categories (ProductCatalog domain).",
    "parameters": [],
    "requestBody": {
      "description": "Filter and pagination parameters for listing categories.",
      "typeName": "ai_ecommerce_categories.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of ai_ecommerce_categories.",
      "typeName": "IPageai_ecommerce_categories"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/categories",
    "method": "patch"
  },
  {
    "specification": "Retrieve detail information of a single product category by its unique ID from ai_ecommerce_categories. Used for displaying category details in product navigation or admin UI.",
    "description": "GET /ai_ecommerce/categories/{id} retrieves complete detail for a specific category by PK, including parent-child links and descriptive fields. As defined in the Prisma schema and ERD, a category has a name, description, parent_id (nullable, for hierarchy), and creation/update timestamps. This operation is central to resolving category metadata for catalog navigation, admin dashboards, or analytics.\n\nUpon request, it validates the category exists and returns full record detail; otherwise an error is returned. May be used downstream for product listing, category tree building, or as a parent selection endpoint for category creation/update forms.",
    "summary": "Get details for a single category in ai_ecommerce_categories (ProductCatalog domain).",
    "parameters": [
      {
        "name": "id",
        "description": "The category ID for ai_ecommerce_categories.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Complete ai_ecommerce_categories entity detail.",
      "typeName": "ai_ecommerce_categories"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/categories/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new product category in ai_ecommerce_categories, allowing expansion of catalog taxonomy/hierarchy. Used by catalog managers/admin interfaces.",
    "description": "POST /ai_ecommerce/categories creates a category entity for organizing products. As per schema, a category requires a name (unique under parent_id), description, and (optionally) parent_id for hierarchy. The operation enforces correct parent-child structure and uniqueness rules. Timestamps and all category metadata are recorded.\n\nAfter validating request payload, the system adds the new category and returns its complete record. This endpoint supports admin-driven taxonomy evolution, navigation updates, and integrations for AI/ML-based categorization. Related endpoints: PATCH for query, PUT/DELETE for update/removal.",
    "summary": "Create new category in ai_ecommerce_categories (ProductCatalog domain).",
    "parameters": [],
    "requestBody": {
      "description": "Category creation payload for ai_ecommerce_categories.",
      "typeName": "ai_ecommerce_categories.ICreate"
    },
    "responseBody": {
      "description": "Created category entity (ai_ecommerce_categories).",
      "typeName": "ai_ecommerce_categories"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/categories",
    "method": "post"
  },
  {
    "specification": "Update an existing product category record by its ID in ai_ecommerce_categories. Used for taxonomy adjustments and navigation management.",
    "description": "PUT /ai_ecommerce/categories/{id} allows updating an existing category's metadata (name, description, parent_id, etc.) as defined in the schema. Unique constraints for (name, parent_id) are enforced. The operation validates that the category exists, applies the update, and returns updated entity. Audit trail is maintained.\n\nMay trigger navigation/UI refresh in catalog applications or admin systems. Input validation includes parent-child loop prevention and uniqueness. Related endpoints: PATCH (search), GET (detail), POST (new), DELETE (removal).",
    "summary": "Update category details in ai_ecommerce_categories by ID (ProductCatalog domain).",
    "parameters": [
      {
        "name": "id",
        "description": "The category ID for ai_ecommerce_categories.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Category update payload for ai_ecommerce_categories.",
      "typeName": "ai_ecommerce_categories.IUpdate"
    },
    "responseBody": {
      "description": "Updated ai_ecommerce_categories entity data.",
      "typeName": "ai_ecommerce_categories"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/categories/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft-delete) a category entity from ai_ecommerce_categories table by ID. Used for catalog pruning or navigation changes.",
    "description": "DELETE /ai_ecommerce/categories/{id} marks a category as deleted by setting deleted_at (if supported by schema), ensuring soft-removal for compliance and audit purposes. Cannot be physically deleted if referenced by products or as a parent. Fails with an error on constraint violations. Used for taxonomy management, navigation updates, or compliance processing. Returns success/failure.",
    "summary": "Soft-delete (remove) a category by ID from ai_ecommerce_categories (ProductCatalog domain).",
    "parameters": [
      {
        "name": "id",
        "description": "Target category's ID (ai_ecommerce_categories).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/categories/{id}",
    "method": "delete"
  },
  {
    "specification": "Search, filter, or paginate inventory records in ai_ecommerce_inventories. Supports advanced operational queries by warehouse, SKU, location, etc. PATCH with filter parameters for flexible inventory analytics.",
    "description": "PATCH /ai_ecommerce/inventories allows for advanced inventory listing and search by various criteria per ai_ecommerce_inventories schema. Clients may filter, sort, or paginate inventory records by fields like sku, location, quantity, etc. Critical for warehouse management, demand planning, or analytics workflows. Soft-deleted records typically excluded, all filtering follows audit and compliance comments in schema.",
    "summary": "List/search/paginate inventories in ai_ecommerce_inventories (ProductCatalog domain).",
    "parameters": [],
    "requestBody": {
      "description": "Inventory search/filter parameters for ai_ecommerce_inventories.",
      "typeName": "ai_ecommerce_inventories.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of inventory records from ai_ecommerce_inventories.",
      "typeName": "IPageai_ecommerce_inventories"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inventories",
    "method": "patch"
  },
  {
    "specification": "Get detail information for an inventory record in ai_ecommerce_inventories by ID. Used for warehouse system, admin, or analytics inspection.",
    "description": "GET /ai_ecommerce/inventories/{id} retrieves the inventory record by primary key. According to schema, an inventory entity includes SKU linkage, location, quantity (available and reserved), and audit timestamps. Output is typically used in admin dashboards, warehouse screens, or order fulfillment systems. Fails with error if not found.",
    "summary": "Get detail for a single inventory record by ID (ai_ecommerce_inventories; ProductCatalog domain).",
    "parameters": [
      {
        "name": "id",
        "description": "Inventory primary key (ai_ecommerce_inventories).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detail record from ai_ecommerce_inventories by ID.",
      "typeName": "ai_ecommerce_inventories"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inventories/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new inventory record in ai_ecommerce_inventories for SKU/location/stock. Used by warehouse system or admin UI to onboard inventory entries.",
    "description": "POST /ai_ecommerce/inventories creates a new inventory record for a specific SKU and location. As per schema annotation, the request must include sku_id, location, quantity_available, and quantity_reserved. Uniqueness is enforced per (sku_id, location). Record captures stock for a particular warehouse or fulfillment center. Compliance rules ensure stock accuracy; soft-deletable if inventory is purged. Used for adding new items in stock, creating stock at new locations, or populating initial product inventory.",
    "summary": "Create new inventory item in ai_ecommerce_inventories (ProductCatalog domain).",
    "parameters": [],
    "requestBody": {
      "description": "Inventory creation payload per ai_ecommerce_inventories.",
      "typeName": "ai_ecommerce_inventories.ICreate"
    },
    "responseBody": {
      "description": "Inserted inventory record for ai_ecommerce_inventories.",
      "typeName": "ai_ecommerce_inventories"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inventories",
    "method": "post"
  },
  {
    "specification": "Update inventory record in ai_ecommerce_inventories by its ID; adjust stock, location, or audit data. Used for inventory system operations and admin stock management.",
    "description": "PUT /ai_ecommerce/inventories/{id} modifies the record of a particular inventory row. The schema supports editing SKU, location, quantities, and timestamp metadata. Business validation ensures stock uniqueness (sku_id, location) and referential integrity with SKU table. Used by admin/warehouse systems for corrections or inventory event tracking. May trigger analytics or audit trail updates.",
    "summary": "Update inventory record by ID (ai_ecommerce_inventories; ProductCatalog domain).",
    "parameters": [
      {
        "name": "id",
        "description": "Inventory item ID (ai_ecommerce_inventories).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Inventory update data, ai_ecommerce_inventories.",
      "typeName": "ai_ecommerce_inventories.IUpdate"
    },
    "responseBody": {
      "description": "Updated inventory entity record (ai_ecommerce_inventories).",
      "typeName": "ai_ecommerce_inventories"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inventories/{id}",
    "method": "put"
  },
  {
    "specification": "Endpoint for deleting a specific inventory record. This corresponds to the ai_ecommerce_inventories table, which normalizes inventory per SKU and location for real-time audit, fulfillment, and compliance. By deleting the particular inventory entry, the system can reflect stock changes, warehouse movements, or administrative corrections. Key security and audit requirements include recording the actor and reason for deletion, with proper business rule enforcement for cascade and compliance. The operation ensures strict referential integrity and compliance standards as described in the schema.",
    "description": "This operation removes (deletes) a single inventory record identified by its unique ID, reflecting business requirements for stock adjustment and compliance. The deletion process ensures that inventory records are managed atomically, without affecting unrelated inventory for other SKUs or locations. This operation triggers audit logging and may impact fulfillment flows if open orders rely on the deleted inventory. Permission checks must confirm that the acting user (admin, seller, or automated) is authorized to remove inventory records. Error handling covers non-existent entries, unauthorized access, and referential integrity violations. This endpoint is strictly bounded by inventory management and compliance policies defined in the underlying DB schema documentation.",
    "summary": "Delete a specific inventory record in ai_ecommerce_inventories table by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Target inventory's unique ID (UUID) that is to be deleted. This value must match the primary key in ai_ecommerce_inventories.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/inventories/{id}",
    "method": "delete"
  },
  {
    "specification": "List/search media assets (such as images or files) across the platform. The endpoint aligns with ai_ecommerce_media table, which records product, SKU, or category attachments for catalog and marketing use-cases. Allows filtering by owner type, media type, date ranges, language, and other business criteria. Key business rules: pagination, access control (e.g., only owner/seller/admin can see certain files), and soft deletion awareness. Audit and compliance monitoring are integrated per schema description.",
    "description": "Returns a paginated/searchable list of media assets stored in the ai_ecommerce_media table. Filtering options enable stakeholders (admins, sellers, content managers) to locate specific files by owner type (e.g., product, sku, category), media type, language, date of upload, and soft-delete status. Results may be restricted based on role (e.g., only admins and content owners can list all files). The endpoint integrates pagination parameters for scalable result sets, and implements logging for analytics/compliance. Error handling includes role-based permission denial, invalid query filters, and internal database issues.",
    "summary": "Search, filter, and list media records from ai_ecommerce_media table.",
    "parameters": [],
    "requestBody": {
      "description": "Search/filter/pagination parameters for media listing and filtering.",
      "typeName": "IAiEcommerceMedia.IRequest"
    },
    "responseBody": {
      "description": "Paginated, filtered list of ai_ecommerce_media results.",
      "typeName": "IPageIAiEcommerceMedia"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/media",
    "method": "patch"
  },
  {
    "specification": "Fetch a specific media asset by its ID. The ai_ecommerce_media entity links to product, SKU, or category as owner and supports platform multimedia requirements. Key business rules: return all metadata (including URI, media type, owner type, and localization information). Enforces access control (admin, content owner, compliance roles). Audit logging of view events and download/access may also be performed.",
    "description": "Retrieves detailed information about a single media asset identified by its UUID from the ai_ecommerce_media table. The returned object includes metadata (URI, media ownership type, media/language, etc.), with access restrictions per privacy, compliance, and role. Non-existent assets, unauthorized access attempts, and soft-deleted resources are handled according to business rules. Access to media content is typically provided only to administrators, sellers, or other roles with legitimate business need. Audit logging may record access for compliance.",
    "summary": "Get detailed information about a specific media asset by ID in ai_ecommerce_media.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier (UUID) for the media record being requested.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Single ai_ecommerce_media object including all metadata/properties.",
      "typeName": "IAiEcommerceMedia"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/media/{id}",
    "method": "get"
  },
  {
    "specification": "Creates (uploads/registers) a new media asset in the platform's media library. This aligns with ai_ecommerce_media, supporting all multimedia attachments for catalog, SKU, or category. Strict normalization and compliance standards apply for file URI, type, and business metadata. Only authorized users such as content admins/sellers may register new files. Audit, validation (file size/type), and business logic (e.g., owner entity check) enforced as per schema requirements.",
    "description": "This operation uploads/registers a new media entry in ai_ecommerce_media, storing URI, media type, language, and owner context. The payload must include all required business metadata and enforce validation on media constraints. File upload may be decoupled if using an external storage URI pattern. The system maintains audit logs on creation for traceability. Permissions checks ensure only content admins and product/seller owners can add valid multimedia assets. Validation failures, unauthorized attempts, and referential integrity issues return errors documented in the OpenAPI.",
    "summary": "Create/upload/register a new media asset by posting to ai_ecommerce_media.",
    "parameters": [],
    "requestBody": {
      "description": "New ai_ecommerce_media object to create/register. Must conform to business and compliance metadata schema.",
      "typeName": "IAiEcommerceMedia.ICreate"
    },
    "responseBody": {
      "description": "Full ai_ecommerce_media object just created (with ID and all metadata).",
      "typeName": "IAiEcommerceMedia"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/media",
    "method": "post"
  },
  {
    "specification": "Update the metadata for an existing media asset. This aligns with ai_ecommerce_media, which strictly manages each asset by unique ID and ensures only authorized updates to file properties such as URI, language, type, or owner. Validation ensures immutability where dictated (e.g., cannot change media type for security rules). All update actions are subject to audit and compliance constraints. Restricted to admin/content owners.",
    "description": "Updates the properties (except for immutable keys, as dictated by business logic) of an existing media object in ai_ecommerce_media identified by its UUID. Only authorized roles (admin or content owners) may update the record, and changes are subject to business validation (media type cannot change for certain types or after approval). Full audit and compliance tracking is enforced per platform rules. Non-existent entries, soft-deleted records, and invalid updates are handled according to business policy. Audit logging may capture previous state snapshots for rollback or compliance investigation.",
    "summary": "Update the metadata or properties of a media asset in ai_ecommerce_media by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID (UUID) for the media asset being updated.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Patch (update) payload for updatable fields of ai_ecommerce_media.",
      "typeName": "IAiEcommerceMedia.IUpdate"
    },
    "responseBody": {
      "description": "Updated ai_ecommerce_media object with new metadata.",
      "typeName": "IAiEcommerceMedia"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/media/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a specific media asset from the system (soft or hard delete per policy). This operates on ai_ecommerce_media entity which contains images/files attached to products, SKUs, categories. Authorized content admins, owners, or compliance roles may perform deletion, which may trigger compliance logging and protected asset rules. Mutation is not allowed if asset is in required use for compliance records.",
    "description": "Deletes a media record identified by unique ID from ai_ecommerce_media. Depending on business configuration, performs soft or hard delete with audit trail and compliance capture. Deletion can only be performed by an administrator or content owner and is blocked if the media is in use or subject to compliance hold. Errors on unauthorized access, absence of record, or protected state. Successful deletion updates referential state and triggers audit logging as described in the schema.",
    "summary": "Delete a specific media asset by unique ID in ai_ecommerce_media.",
    "parameters": [
      {
        "name": "id",
        "description": "ID (UUID) of the media record to be deleted.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/media/{id}",
    "method": "delete"
  },
  {
    "specification": "Paginated search/listing of product option records for catalog products. Corresponds to ai_ecommerce_product_options, which strictly normalizes per-product/option/value and optionally per-SKU option mapping for advanced personalization. Key search filters include product ID, SKU ID, option name/value, creator, and timestamp. The result set must be restrictable by role and paginated for performance. Query validation, compliance, and access control enforced per schema.",
    "description": "Returns a paginated and filterable list of product option records in ai_ecommerce_product_options. Stakeholders can filter by parent product, SKU, option name/value, creation date, or role if required. Pagination and sorting parameters are supported for scalable list retrieval. Results are filterable based on acting role (admin, seller, or catalog manager) and may be limited according to business rules. Full audit and compliance logging applies and error handling covers permission denial, non-existent filter targets, and system failures.",
    "summary": "List/search/paginate product option records from ai_ecommerce_product_options table.",
    "parameters": [],
    "requestBody": {
      "description": "Search/filter/pagination parameters for listing product options.",
      "typeName": "IAiEcommerceProductOptions.IRequest"
    },
    "responseBody": {
      "description": "Paginated, filtered list of product option records.",
      "typeName": "IPageIAiEcommerceProductOptions"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/productOptions",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific product option (option_name/value) record by its unique ID. This relates to ai_ecommerce_product_options, which maintains atomic option mapping for products and SKUs. Returns the full record, including assignment to product/SKU/option name/value/creation date. Enforces strict access control (role, data ownership, compliance) and audits all access.",
    "description": "Gets detailed information for a single ai_ecommerce_product_options record, as identified by its UUID. Returns the full schema, with all fields and relationships (product reference, SKU reference, option name/value, timestamps). Only authorized users (admins, sellers, or owners) may retrieve the object. Auditing, compliance, and error handling apply (e.g., not found, unauthorized, soft-deleted).",
    "summary": "Get a product option record by unique ID from ai_ecommerce_product_options.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID (UUID) for the product option record being requested.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Single ai_ecommerce_product_options object with all related fields.",
      "typeName": "IAiEcommerceProductOptions"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/productOptions/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new product option record for a catalog product or its SKU. The ai_ecommerce_product_options table maintains normalized rows for each field-value (option_name/option_value) per product (optionally, per SKU for advanced variants). Payload must provide validated option name, value, and valid parent product/SKU reference. Role-based permission, data validation, and compliance logging enforced per business rules.",
    "description": "Creates (inserts) a new atomic option (name/value) for the specified product or SKU into ai_ecommerce_product_options. Requires all necessary business metadata and foreign key integrity. Strict compliance and validation are applied, including unique constraint enforcement, data type checks, and entity ownership validation. The operation is authorized for admin, seller, or catalog manager roles. Full audit and rollback support are built into the workflow.",
    "summary": "Create a new product option record in ai_ecommerce_product_options table.",
    "parameters": [],
    "requestBody": {
      "description": "Payload for new ai_ecommerce_product_options record (option name/value/product/sku references, etc.)",
      "typeName": "IAiEcommerceProductOptions.ICreate"
    },
    "responseBody": {
      "description": "Created ai_ecommerce_product_options object including its ID and all fields.",
      "typeName": "IAiEcommerceProductOptions"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/productOptions",
    "method": "post"
  },
  {
    "specification": "Update an existing product option record by unique ID. The ai_ecommerce_product_options enables edit/fix of atomic option-name/value records per product or SKU. Only mutable fields (per business logic) are updatable; immutable fields (e.g., product or SKU reference) may be locked after creation. Strict role-based access, referential integrity, and audit logging enforced per schema documentation.",
    "description": "Updates an ai_ecommerce_product_options record as identified by unique UUID. User may supply new option value or rename, subject to business validation and mutability rules. Only authorized roles (admin, product owner, or catalog manager) can mutate these objects, and unauthorized updates generate compliance logs and errors. Audit logic records changes for rollback and compliance review.",
    "summary": "Update (patch) the fields of a product option record in ai_ecommerce_product_options, by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID (UUID) for the product option record being updated.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Patch/update payload for the ai_ecommerce_product_options record.",
      "typeName": "IAiEcommerceProductOptions.IUpdate"
    },
    "responseBody": {
      "description": "Updated ai_ecommerce_product_options record, all fields.",
      "typeName": "IAiEcommerceProductOptions"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/productOptions/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (remove) a product option record by its unique ID. Product option records map atomic option-name/value to products or SKUs in ai_ecommerce_product_options. Deletion is soft or hard-deleted per business rules, maintains audit/compliance logs, and may impact catalog personalization or variant handling. Authorization restricted to administrators/sellers on owned records.",
    "description": "Deletes the atomic product option record identified by UUID from ai_ecommerce_product_options. Role authorization and compliance audit logging enforced. In-use/invariant options may be blocked from removal based on system configuration and business rules. Soft/hard deletion behavior applies. Error handling for unauthorized, non-existent, or protected state.",
    "summary": "Delete a product option record from ai_ecommerce_product_options by unique ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID (UUID) of the product option to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/productOptions/{id}",
    "method": "delete"
  },
  {
    "specification": "Paginated search and filter operation for product compliance rules catalog. Corresponds to ai_ecommerce_product_compliance_rules—each is an atomic rule enforced at catalog or product onboarding (e.g., age, region, safety). This endpoint enables admin or compliance officer to list, search, and paginate compliance rules assigned to products throughout the system. Includes filtering by rule name/description, created at, and status if applicable. Enforces compliance audit access controls.",
    "description": "Returns a paginated, filtered, and optionally searchable list of compliance rules as stored in ai_ecommerce_product_compliance_rules. Useful for compliance team to monitor, review, and update rule sets for catalog processes. Pagination and filter arguments should be implemented in the request body. Results restricted to compliance and admin roles. Error handling manages permission checks, filter misconfiguration, and database issues. Supports analytics logging for compliance dashboards.",
    "summary": "List and search product compliance rules from ai_ecommerce_product_compliance_rules table.",
    "parameters": [],
    "requestBody": {
      "description": "Filtering/pagination parameters for searching compliance rules.",
      "typeName": "IAiEcommerceProductComplianceRules.IRequest"
    },
    "responseBody": {
      "description": "Paginated, filtered result list of compliance rules.",
      "typeName": "IPageIAiEcommerceProductComplianceRules"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/productComplianceRules",
    "method": "patch"
  },
  {
    "specification": "Get a single product compliance rule by its unique ID. Associated with the ai_ecommerce_product_compliance_rules table. Returns detailed compliance rule information for back office and catalog compliance management.",
    "description": "Retrieves a specific product compliance rule from the ai_ecommerce_product_compliance_rules table using the provided unique rule identifier (id). The endpoint enforces 3NF normalization, fetching a single atomic record containing the rule's name, description, and creation timestamp. Used in the context of catalog compliance audits or when validating product eligibility. Only authorized users (e.g., catalog admins, compliance staff) may access this endpoint. Handles errors for not-found or access violations; also serves downstream processes auditing rule assignments to products. Complementary endpoints include list, create, update, and delete operations for compliance rules.",
    "summary": "Get detail of a product compliance rule (ai_ecommerce_product_compliance_rules).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique product compliance rule ID (UUID) to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed product compliance rule record.",
      "typeName": "ai_ecommerce_product_compliance_rules"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/productComplianceRules/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new product compliance rule. Associated with the ai_ecommerce_product_compliance_rules table. Allows admins to define a new rule for product catalog compliance.",
    "description": "Creates a new product compliance rule in the ai_ecommerce_product_compliance_rules table. This operation is used when new compliance criteria must be recorded to support regulatory changes or business requirements. The input includes rule_name, description, and optionally an initial status. Created rules enforce catalog 3NF and are referenced by products to determine catalog eligibility. Only compliance admins or product managers should have access to this endpoint. On creation, the rule is auditable and available for assignment to products or audits. Proper validation ensures rule_name uniqueness, atomicity, and adherence to regulatory documentation. Errors surface for duplicate or missing required fields. Other endpoints include update, delete, get, and list compliance rules.",
    "summary": "Create a product compliance rule (ai_ecommerce_product_compliance_rules).",
    "parameters": [],
    "requestBody": {
      "description": "New compliance rule data.",
      "typeName": "ai_ecommerce_product_compliance_rules.ICreate"
    },
    "responseBody": {
      "description": "The created product compliance rule.",
      "typeName": "ai_ecommerce_product_compliance_rules"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/productComplianceRules",
    "method": "post"
  },
  {
    "specification": "Update an existing product compliance rule by its ID. Associated with ai_ecommerce_product_compliance_rules table. Allows changes to rule name or description for catalog compliance adjustments.",
    "description": "Updates the specified product compliance rule in the ai_ecommerce_product_compliance_rules table. This operation permits catalog administrators or compliance staff to modify rule attributes such as the rule name or description to reflect process changes or regulatory updates. Validation ensures unchanged unique identifiers and avoids data anomalies. All updates are audit-trailed. Permission checks verify only authorized actors can update rules. Errors are surfaced for not-found rules, invalid data, or access violations. Related endpoints: compliance rule creation, get, delete, and list operations.",
    "summary": "Update a product compliance rule (ai_ecommerce_product_compliance_rules).",
    "parameters": [
      {
        "name": "id",
        "description": "Product compliance rule ID (UUID) to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "New values for the compliance rule (partial or all fields).",
      "typeName": "ai_ecommerce_product_compliance_rules.IUpdate"
    },
    "responseBody": {
      "description": "The updated product compliance rule record.",
      "typeName": "ai_ecommerce_product_compliance_rules"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/productComplianceRules/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a product compliance rule by unique ID. Associated with ai_ecommerce_product_compliance_rules table. Used for compliance/admin management flows.",
    "description": "Physically deletes a product compliance rule from the ai_ecommerce_product_compliance_rules table given the unique rule ID. Intended for admin/compliance role users when a rule is obsolete or replaced. This operation enforces referential integrity; rules referenced by products should be validated before deletion to avoid orphaned data. On success, the endpoint returns confirmation; errors are surfaced for not-found rules or failed constraints. Audits and downstream analytics should process reference removal appropriately. Access restricted to compliance or platform admin roles.",
    "summary": "Delete a product compliance rule (ai_ecommerce_product_compliance_rules).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique product compliance rule ID (UUID) to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of successful deletion.",
      "typeName": "ai_ecommerce_product_compliance_rules.IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/productComplianceRules/{id}",
    "method": "delete"
  },
  {
    "specification": "List product tags with search, pagination, and filtering. Associated with ai_ecommerce_product_tags table. Used for tag browsing, analytics, and management.",
    "description": "Returns a paginated and filterable list of all product tags from the ai_ecommerce_product_tags table. Supports searching by tag name, creation timestamp, and advanced sorting. Used in product catalog UIs, tag management, or analytics dashboards. Access is available to catalog admins, content managers, and, where appropriate, integrated apps. Pagination parameters and search filters are provided in the request body. Related endpoints support creation, detail fetch, update, and deletion of tags.",
    "summary": "List product tags with pagination/search (ai_ecommerce_product_tags).",
    "parameters": [],
    "requestBody": {
      "description": "List/search/filter options for product tags.",
      "typeName": "ai_ecommerce_product_tags.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of product tags.",
      "typeName": "ai_ecommerce_product_tags.IPage"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/productTags",
    "method": "patch"
  },
  {
    "specification": "Get details for a single product tag by ID. Associated with ai_ecommerce_product_tags table. Used for tag drill-down, tag analytics, or tag assignment UIs.",
    "description": "Retrieves an atomic product tag record from the ai_ecommerce_product_tags table using the tag's unique ID. Returns tag name, creation timestamp, and other properties for catalog admin or analytics flows. Used in tag detail modals, assignment tools, or analytics dashboards. Permission checks apply; errors return if tag is not found or access is denied. Complements tag list, create, update, and delete APIs.",
    "summary": "Get detail of a product tag (ai_ecommerce_product_tags).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique tag ID (UUID) to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed product tag record.",
      "typeName": "ai_ecommerce_product_tags"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/productTags/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new product tag. Associated with the ai_ecommerce_product_tags table. Used by catalog/content admins or personalization flows.",
    "description": "Creates a new product tag in the ai_ecommerce_product_tags table, with required tag name and optional properties. Enforces tag uniqueness per business requirements. Tag creation supports both catalog admin and power-user flows. On success, returns the created atomic tag. Errors surfaced for duplicates or missing data. Related endpoints: tag list, fetch detail, update, delete.",
    "summary": "Create a product tag (ai_ecommerce_product_tags).",
    "parameters": [],
    "requestBody": {
      "description": "New product tag data.",
      "typeName": "ai_ecommerce_product_tags.ICreate"
    },
    "responseBody": {
      "description": "The created product tag record.",
      "typeName": "ai_ecommerce_product_tags"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/productTags",
    "method": "post"
  },
  {
    "specification": "Update a product tag by its ID. Associated with ai_ecommerce_product_tags table. Used for catalog or admin adjustments.",
    "description": "Updates a specific product tag by its ID in the ai_ecommerce_product_tags table. Supports changing tag name for catalog consistency or analytics clarity. Permission checks enforced; business logic validates unique names and atomicity. Audit trail maintained for changes. Complements tag list, detail, create, and delete endpoints.",
    "summary": "Update a product tag (ai_ecommerce_product_tags).",
    "parameters": [
      {
        "name": "id",
        "description": "Product tag ID (UUID) to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Partial or full product tag data for update.",
      "typeName": "ai_ecommerce_product_tags.IUpdate"
    },
    "responseBody": {
      "description": "Updated product tag record.",
      "typeName": "ai_ecommerce_product_tags"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/productTags/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a product tag by unique ID. Associated with ai_ecommerce_product_tags table. Removes a tag from catalog for admin/content workflows.",
    "description": "Deletes a product tag record from the ai_ecommerce_product_tags table using the tag's UUID. Enforces referential integrity and business logic—cannot delete tag used elsewhere without validation. Returns confirmation of success or error if tag is not found or removal fails due to constraints. Permission-guarded to catalog/admin roles. Events and audit logs should be updated for downstream analytics. Complements tag list, create, fetch, and update APIs.",
    "summary": "Delete a product tag (ai_ecommerce_product_tags).",
    "parameters": [
      {
        "name": "id",
        "description": "Tag ID (UUID) to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of deletion.",
      "typeName": "ai_ecommerce_product_tags.IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/productTags/{id}",
    "method": "delete"
  },
  {
    "specification": "List product inquiries with search and pagination. Associated with ai_ecommerce_inquiry table. Used for catalog, order, and customer support workflows.",
    "description": "Returns a paginated, filterable list of product or order inquiries from the ai_ecommerce_inquiry table. Allows filtering by product, customer, order, status, created/updated dates, and supports advanced search or full-text queries. Output includes paged results with basic inquiry information. Used in catalog/admin dashboards and customer support suites. Only inquiries meeting access/role criteria are visible to user. Request body provides search, sort, and pagination details. Complements endpoints for inquiry detail fetch, create, update, and delete.",
    "summary": "List inquiries with pagination/search (ai_ecommerce_inquiry).",
    "parameters": [],
    "requestBody": {
      "description": "List/search/filter options for inquiries.",
      "typeName": "ai_ecommerce_inquiry.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of inquiries.",
      "typeName": "ai_ecommerce_inquiry.IPage"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inquiries",
    "method": "patch"
  },
  {
    "specification": "Get a single inquiry by its unique ID. Associated with ai_ecommerce_inquiry table. Used for inquiry drilldown and response.",
    "description": "Fetches an inquiry record from the ai_ecommerce_inquiry table by its unique ID. Returns full inquiry details, including body, status, author, timestamps, and related entities. Used for detail viewing in catalog management, customer service response, and audit functions. Only authorized users (based on RBAC and inquiry visibility) may access. Handles not-found errors and enforces view permission checks. Complements paginated list, create, update, and delete endpoints.",
    "summary": "Get detail of an inquiry (ai_ecommerce_inquiry).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the inquiry to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed inquiry record.",
      "typeName": "ai_ecommerce_inquiry"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inquiries/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new inquiry. Associated with ai_ecommerce_inquiry table. Used by customers to submit inquiries about products or orders.",
    "description": "Creates a product or order inquiry in ai_ecommerce_inquiry table. Input includes author (customer), target product, optional order, inquiry body, privacy status, and required meta fields. On success, the inquiry is auditable, available for customer service and compliance. RBAC and business logic ensure only valid users can create inquiries; required validations include customer/product existence and field atomicity. Errors surfaced for invalid references, permission violations, or incomplete data. Other endpoints: inquiry list, fetch, update, and delete.",
    "summary": "Create an inquiry (ai_ecommerce_inquiry).",
    "parameters": [],
    "requestBody": {
      "description": "Inquiry creation data.",
      "typeName": "ai_ecommerce_inquiry.ICreate"
    },
    "responseBody": {
      "description": "The created inquiry record.",
      "typeName": "ai_ecommerce_inquiry"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inquiries",
    "method": "post"
  },
  {
    "specification": "Updates a specific inquiry by ID. This endpoint is for modifying existing ai_ecommerce_inquiry records, which represent product or order questions submitted by customers. The update includes fields such as title, body, status, and privacy, as well as tracking audit and compliance changes. It enforces permissions for inquiry ownership and checks status constraints (open, closed, etc).",
    "description": "This operation allows editing the details of an existing inquiry in the ai_ecommerce_inquiry table, such as changing the title, updating the inquiry body, setting the status (e.g., open, closed, resolved), or toggling visibility (is_private). It ensures that only the author (customer) or authorized support staff can perform the modification. Audit tracking, workflow integrity, and compliance rules (e.g., only 'open' inquiries may be updated) are enforced. Update timestamps track last edit for rollback and history. Related historical state is kept in inquiry_snapshots. If permissions or state constraints are violated, returns a proper error response. All field validations and change logs adhere to the schema's description and workflow. Dependencies: Existing inquiry must exist; GET /ai_ecommerce/inquiries/{id} should be used to load inquiry for UI before updating.",
    "summary": "Update an inquiry record in ai_ecommerce_inquiry by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Target inquiry's unique identifier (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Update info for the inquiry (partial or full changes).",
      "typeName": "IAiEcommerceInquiry.IUpdate"
    },
    "responseBody": {
      "description": "The updated inquiry record.",
      "typeName": "IAiEcommerceInquiry"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inquiries/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes a specific inquiry entry from the ai_ecommerce_inquiry table by its unique identifier. Enables compliant logical deletion for regulatory, privacy, or user-requested reasons.",
    "description": "Performs a compliant logical (soft) deletion of the ai_ecommerce_inquiry record specified by UUID. This does not physically remove the row, but marks it as deleted, making it inaccessible to standard queries and hidden in general UI. Audit and compliance events are logged to maintain full traceability. Privilege checks ensure only inquiry owners, admins, or authorized support can perform deletions. State checks ensure only deletable statuses are affected. Historical snapshots are preserved separately. If constraints or active dependencies exist (e.g., replies), appropriate errors are returned.",
    "summary": "Soft-delete an inquiry record by ID in ai_ecommerce_inquiry.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique inquiry UUID to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Soft-deleted (logically removed) inquiry record.",
      "typeName": "IAiEcommerceInquiry"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inquiries/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a paginated, searchable list of review records from the ai_ecommerce_review table. Used for customer, product, or admin filtering and moderation workflows.",
    "description": "This endpoint returns a filtered, searchable, and paginated set of reviews, leveraging ai_ecommerce_review schema fields for filtering such as customer_id, product_id, status, rating, or date. Designed for both customer-facing review lists and for admin/seller moderation dashboards. Enforces privacy rules (is_private), verified purchase filtering, and can optionally filter by status (active/deleted/hidden). Supports search by keywords in title/body and sorting by date/rating. Pagination controls (page, pageSize) are required. Relies on schema indexes for performance.",
    "summary": "List/search reviews in ai_ecommerce_review (paginated, filterable).",
    "parameters": [],
    "requestBody": {
      "description": "Filter/search parameters for review list (pagination, search, filters).",
      "typeName": "IAiEcommerceReview.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of review summary records.",
      "typeName": "IPageIAiEcommerceReview"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reviews",
    "method": "patch"
  },
  {
    "specification": "Retrieves a single review by its unique ID from the ai_ecommerce_review table. Used in product detail, account, or moderation views to show all details.",
    "description": "This endpoint fetches the detail of a review identified by its UUID, returning all schema properties including text body, rating, privacy, relational product/order/customer references, created/updated/deleted timestamps, and verification status. Supports access control for privacy-protected reviews: only authorized actors (customer, seller, admin) may view private reviews. Used for detailed review modal or product admin dashboards. Returns 404 if review not found or access denied.",
    "summary": "Fetch detail of a review by ID from ai_ecommerce_review.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique review record UUID to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed review record.",
      "typeName": "IAiEcommerceReview"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reviews/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new review entry in the ai_ecommerce_review table. Enables customers to provide feedback, ratings, and optional contextual text after verified purchases.",
    "description": "Customer-facing endpoint for submitting a product/order review after purchase or fulfillment. Accepts fields such as customer, product, order, rating, title, body, and privacy controls. Validates single-review-per-order-product rule and ensures required fields meet business constraints (i.e., only verified purchases). Triggers additional workflows (notifications, rewards, analytics) on successful insert as described in domain schema. Creates a full review record, triggers audit log. Handles duplicate and constraint errors with descriptive responses. Relies on the customer's verified status for posting. Related: GET /ai_ecommerce/reviews/{id} for retrieving just-created review.",
    "summary": "Create a new review in ai_ecommerce_review.",
    "parameters": [],
    "requestBody": {
      "description": "Details for creating a review (customer/product/order association, content, etc).",
      "typeName": "IAiEcommerceReview.ICreate"
    },
    "responseBody": {
      "description": "The created review entry.",
      "typeName": "IAiEcommerceReview"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reviews",
    "method": "post"
  },
  {
    "specification": "Updates an existing review record in the ai_ecommerce_review table by its UUID. Allows editing review text, rating, or privacy after creation within policy constraints.",
    "description": "Allows a customer (or moderator) to edit an existing review, changing its content, rating, or privacy setting. Applies only if the review is editable per business rules (not deleted, not locked by moderation). All updates are tracked by last updated timestamp, and historical states are preserved in review_snapshots for rollback/history. Enforces validation for content, rating range, and required fields. Rejects updates if constraints or status rules are violated. Used in account/review-management dashboard or moderation panel. Related: GET /ai_ecommerce/reviews/{id} recommended for fetching prior to update.",
    "summary": "Update an existing review by ID in ai_ecommerce_review.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique UUID for the review to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update on the review (rating, body, etc).",
      "typeName": "IAiEcommerceReview.IUpdate"
    },
    "responseBody": {
      "description": "The updated review record.",
      "typeName": "IAiEcommerceReview"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reviews/{id}",
    "method": "put"
  },
  {
    "specification": "Logically deletes a review from ai_ecommerce_review by marking it as deleted (soft delete). Complies with audit/regulatory requirements; preserves historical data.",
    "description": "Performs a soft deletion of a review record by its UUID. The review is not physically removed but is hidden from standard queries and user interfaces. Only owners, sellers, or moderators with permission can request this operation. Triggers audit/history tracking and updates related review_snapshots. Returns error if not found or not deletable by current user. Related: GET /ai_ecommerce/reviews/{id} to check delete eligibility.",
    "summary": "Soft-delete a review by ID in ai_ecommerce_review.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for the review to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Soft-deleted review record (logically removed).",
      "typeName": "IAiEcommerceReview"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reviews/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a paginated, searchable list of forum threads from the ai_ecommerce_forum_thread table. Used for customer community/QA navigation and moderation.",
    "description": "Returns a list of forum threads with filtering and search options (by customer, category, status, keyword). Pagination and sorting supported for efficient display and navigation. Enforces access rules for privacy-protected threads, visibility status, and supports filters for pinned/closed. Used for building community boards, moderation dashboards, or profile Q&A histories. Returns summary-level info per thread in the result set. Pagination, filtering, and search params provided in request body. Relies on efficient indexing and status constraints.",
    "summary": "List/search forum threads in ai_ecommerce_forum_thread (paginated, filterable).",
    "parameters": [],
    "requestBody": {
      "description": "Filter/search parameters for thread listing (pagination, search, filters).",
      "typeName": "IAiEcommerceForumThread.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of forum thread summary records.",
      "typeName": "IPageIAiEcommerceForumThread"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/forumThreads",
    "method": "patch"
  },
  {
    "specification": "Fetches detail of a forum thread by its UUID. Returns all fields in ai_ecommerce_forum_thread, including status, privacy, and relationships, for use in community and moderation views.",
    "description": "This endpoint returns the full detail for a forum thread (Q&A or discussion) identified by UUID. Includes all thread fields (title, body, pinned, privacy, status, timestamps) and relational references (customer, category, product). Access control rules determine who may view private/pinned threads. Used for thread view, editing, or moderation functions. Returns 404 if thread does not exist or access denied. Used to power detailed view modals, thread detail pages, and admin/seller dashboards.",
    "summary": "Fetch detail of a forum thread from ai_ecommerce_forum_thread by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for the forum thread to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full forum thread detail record.",
      "typeName": "IAiEcommerceForumThread"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/forumThreads/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new forum thread in the ai_ecommerce_forum_thread table for general community discussion or Q&A support.",
    "description": "Customer-facing endpoint to initiate a new community thread or product/QA topic. Requires customer authentication/authorization, accepts fields (title, body, context - category/product, privacy flag). Ensures moderation, spam, and content constraints as documented. Triggers audit logs and notifications. Inserts full thread record; triggers post-insert hooks. Related: GET /ai_ecommerce/forumThreads/{id} for newly created thread's details.",
    "summary": "Create a new forum thread in ai_ecommerce_forum_thread table.",
    "parameters": [],
    "requestBody": {
      "description": "Details for the new thread (title, body, context, privacy, etc).",
      "typeName": "IAiEcommerceForumThread.ICreate"
    },
    "responseBody": {
      "description": "Created forum thread record.",
      "typeName": "IAiEcommerceForumThread"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/forumThreads",
    "method": "post"
  },
  {
    "specification": "Updates a forum thread record in ai_ecommerce_forum_thread table by ID. Allows editing thread content, title, status, and settings as appropriate.",
    "description": "Enables editing of an existing forum thread’s details (title, body, status, is_pinned, privacy, etc) by authorized users (creator, moderator, admin). Only allowed if thread is not deleted/archived and user has edit rights. Timestamps/logging handled per schema for audit/history/rollback. Returns updated thread detail. Returns error if forbidden or constraints violated (e.g., closed threads cannot be edited). GET /ai_ecommerce/forumThreads/{id} recommended before updating.",
    "summary": "Update forum thread by ID in ai_ecommerce_forum_thread table.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of forum thread to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update on the thread (partial or full record).",
      "typeName": "IAiEcommerceForumThread.IUpdate"
    },
    "responseBody": {
      "description": "Updated forum thread record.",
      "typeName": "IAiEcommerceForumThread"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/forumThreads/{id}",
    "method": "put"
  },
  {
    "specification": "Soft-deletes a forum thread in ai_ecommerce_forum_thread by marking it as deleted. Audit and regulatory-compliant; does not erase data.",
    "description": "Logically removes (soft deletes) a forum thread by setting the deleted_at field, hiding from standard forums and UIs. Only thread owner or privileged moderators/admins may perform this operation. Audit logs and regulatory compliance maintained. Status checks verify thread can be deleted (not closed, locked, etc). Related: GET /ai_ecommerce/forumThreads/{id} before deletion to ensure eligibility.",
    "summary": "Soft-delete forum thread record by ID in ai_ecommerce_forum_thread.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the forum thread to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Soft-deleted forum thread detail record.",
      "typeName": "IAiEcommerceForumThread"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/forumThreads/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements search and list API for comments in the ai_ecommerce_comment table. Supports advanced filtering, pagination, and search through request body parameters. Allows clients to retrieve a paginated list of comments based on various criteria, such as author, target entity, parent comment, created date, and full-text body search. Returns total result count, page info, and comment records.",
    "description": "This PATCH operation allows clients to query and search for comments in the ai_ecommerce_comment table using flexible search parameters. The body can include criteria for filtering by customer_id, related thread, inquiry, review, parent_id, body keyword, depth, created/updated/deleted timestamps, or any combination. Pagination fields (limit, offset), sort options, and advanced full-text search are supported.\n\nThis endpoint is typically used for listing comments within a given forum thread, inquiry discussion, review feedback, or nested comment context. Only comments not soft-deleted (where deleted_at is null) are returned by default unless specifically requested. The response body is a paginated list structure containing comment metadata and optionally total count for UI paging.\n\nSecurity rules may restrict visibility of certain comments by role or privacy settings. Errors are raised for malformed queries or permission violations.",
    "summary": "Search or list comments from ai_ecommerce_comment with multi-condition query and pagination.",
    "parameters": [],
    "requestBody": {
      "description": "Comment search and filter criteria, plus pagination/sort options.",
      "typeName": "ai_ecommerceComment.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of comments with metadata, for UI display or moderation.",
      "typeName": "ai_ecommerceComment.IPage"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/comments",
    "method": "patch"
  },
  {
    "specification": "Retrieves a single comment's full details by comment ID from ai_ecommerce_comment. Used to display or moderate a specific comment record.",
    "description": "This GET endpoint returns the complete details of a single comment from ai_ecommerce_comment by its unique ID path parameter. Returns all atomic properties, including author, parent, referenced discussion/thread/inquiry/review, and body. Used for viewing comment content, context, and audit info by moderators, admin, or the comment's owner. Soft-deleted comments should not be shown unless admin privileges allow. Returns 404 if ID does not exist.",
    "summary": "Get detailed information for a specific comment by id from ai_ecommerce_comment.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the comment to retrieve",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Atomic detail of the requested comment object, or error if not found.",
      "typeName": "ai_ecommerceComment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/comments/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new comment record in ai_ecommerce_comment. Clients may attach comment to a thread, inquiry, review, or another comment. Comment author context is required in body. Used across community, review, and inquiry systems.",
    "description": "This POST endpoint accepts the information to create a comment in the ai_ecommerce_comment table. The request body contains fields for body text, author (customer_id), and target association (forum_thread_id, inquiry_id, review_id, or parent_id). The system enforces that only one of the target FK fields is non-null for atomicity. The resulting comment will have a generated unique ID, timestamps, depth, and relationship pointers.\n\nAPIs applying this endpoint should provide appropriate context (e.g., posting to a thread, nested reply, etc.). Moderation or privacy rules may restrict comment creation under certain conditions. On success, returns all details of new comment.",
    "summary": "Create a new comment in ai_ecommerce_comment table with association to a thread/inquiry/review/parent.",
    "parameters": [],
    "requestBody": {
      "description": "Specification for new comment, including text, target context, and author.",
      "typeName": "ai_ecommerceComment.ICreate"
    },
    "responseBody": {
      "description": "Full details of the created comment row.",
      "typeName": "ai_ecommerceComment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/comments",
    "method": "post"
  },
  {
    "specification": "Updates an existing comment in ai_ecommerce_comment by its ID. Allows editing by author or moderators; only allowed fields can be updated, e.g., body text, optionally parent/thread/inquiry/review relation, or privacy flags. Returns updated comment state.",
    "description": "This PUT endpoint allows the author or a moderator to update an existing comment's details by ID in the ai_ecommerce_comment table. Updatable fields include body (main text), and possibly associations, subject to business logic. Returns full details of updated comment state.\n\nEditing may be disallowed for deleted or locked comments. Security rules must enforce that only the comment's owner, or admins/moderators, can update the record. Returns error on permission errors or constraint violations.",
    "summary": "Update a comment row in ai_ecommerce_comment by its unique id.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the comment to update",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields allowed for update in comment (body, associations, etc).",
      "typeName": "ai_ecommerceComment.IUpdate"
    },
    "responseBody": {
      "description": "All updated comment fields after modification.",
      "typeName": "ai_ecommerceComment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/comments/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft-delete) a comment from ai_ecommerce_comment by its ID. This operation marks the row as deleted without full erasure for audit compliance.",
    "description": "This DELETE endpoint soft-deletes the comment identified by id from the ai_ecommerce_comment table by setting deleted_at timestamp. Used by the comment's author, moderator, or admin to hide content, either for self-removal or moderation. Hard deletes are not permitted (for compliance reasons). Returns 204 on success, or error if not found or unauthorized.",
    "summary": "Soft-delete a comment by id in ai_ecommerce_comment for moderation or owner self-removal.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the comment to delete (soft).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/comments/{id}",
    "method": "delete"
  },
  {
    "specification": "Supports paged searching and filtering on replies (ai_ecommerce_reply). Used by seller/admin/public clients to retrieve replies with advanced filters and search. Returns reply list with page info.",
    "description": "This PATCH endpoint allows querying the ai_ecommerce_reply table for replies using a flexible request body containing filters: author (seller_id or administrator_id), target type/id (comment, thread, inquiry, review), created/updated/deleted timestamps, and text keyword search in body. Results are returned as paged data, with total count and per-reply summary.\n\nUsed to list replies for moderation, customer support, or forum display. Security checks restrict accesses to own/shop replies unless elevated role. Returns total and paging for UI display.",
    "summary": "Search or list replies (ai_ecommerce_reply) by parameters and pagination.",
    "parameters": [],
    "requestBody": {
      "description": "Criteria for reply search/listing, including paging and filter options.",
      "typeName": "ai_ecommerceReply.IRequest"
    },
    "responseBody": {
      "description": "Paginated result of replies with per-row metadata.",
      "typeName": "ai_ecommerceReply.IPage"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/replies",
    "method": "patch"
  },
  {
    "specification": "Get single reply record by its unique id from ai_ecommerce_reply. Used by all system actors for viewing a reply's details.",
    "description": "This GET endpoint returns detailed information for a specific reply from the ai_ecommerce_reply table by id. Returns all fields: author (seller/admin), body, and context references (comment/thread/inquiry/review). Used for contextual rendering or moderation. Admin access may be required for replies to deleted/commented threads. Returns 404 if not found or not permitted.",
    "summary": "Retrieve reply details by id (ai_ecommerce_reply).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique reply identifier (UUID) to fetch details.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Details for the reply row from database.",
      "typeName": "ai_ecommerceReply"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/replies/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new reply record in ai_ecommerce_reply for a comment, thread, inquiry, or review. Used across moderation/public discussion flows.",
    "description": "This POST endpoint inserts a new reply into ai_ecommerce_reply. The body provides reply text, author (seller_id or administrator_id), and references to target (comment/thread/inquiry/review). Business logic ensures only one target is non-null per reply. Admins and sellers use this method to formally answer content. On success, returns the created row details.",
    "summary": "Create a new reply for a forum comment, inquiry, thread, or review (ai_ecommerce_reply).",
    "parameters": [],
    "requestBody": {
      "description": "New reply request details and relationship pointers.",
      "typeName": "ai_ecommerceReply.ICreate"
    },
    "responseBody": {
      "description": "Full data row of created reply.",
      "typeName": "ai_ecommerceReply"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/replies",
    "method": "post"
  },
  {
    "specification": "Update existing reply row in ai_ecommerce_reply by id. Permits editing by author or admins. Updates allowed fields (body, target assignment as business logic permits).",
    "description": "This PUT method updates a reply in ai_ecommerce_reply by its id. Allowed updates: reply body text, or possibly reassign to different discussion context by changing association fields. Author, moderators, or admins can update. Only non-deleted replies are updatable. Returns latest row state or error if not permitted.",
    "summary": "Edit/update an existing reply row by id in ai_ecommerce_reply.",
    "parameters": [
      {
        "name": "id",
        "description": "Reply row UUID to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Editable reply fields (body text, target references).",
      "typeName": "ai_ecommerceReply.IUpdate"
    },
    "responseBody": {
      "description": "Fully updated reply row data state.",
      "typeName": "ai_ecommerceReply"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/replies/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes (soft-deletes) a reply row in ai_ecommerce_reply by id. Used for moderation and admin/self-removal.",
    "description": "DELETEs the reply row specified by id from ai_ecommerce_reply, setting deleted_at for audit compliance. Only author or admin/moderator may delete. This operation does not fully delete from disk—only soft-deletes for compliance and rollback. Returns 204 on success; error if not found or unauthorized.",
    "summary": "Soft-delete a reply by id in ai_ecommerce_reply.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique id of reply for soft-deletion.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/replies/{id}",
    "method": "delete"
  },
  {
    "specification": "List reports (abuse, spam, etc.) in ai_ecommerce_report with advanced filters, search, and paging. Used by admins/moderators to triage reports.",
    "description": "PATCH endpoint supports paged searching and filtering of abuse reports in ai_ecommerce_report. Request body allows filtering by reporter, target type/id (comment/review/thread), status, created/resolved ranges, and keyword/motive/notes search. Used for moderation dashboards or analytics. Result is a paged response with total count and results.\n\nTypically restricted to admin or moderator actors. UI lists reports for triage and processing. 404 for permission denied, malformed queries, or zero results if filtering is too strict.",
    "summary": "Search/paged list reports of abuse/violation in ai_ecommerce_report.",
    "parameters": [],
    "requestBody": {
      "description": "Report query/filter/pagination parameters.",
      "typeName": "ai_ecommerceReport.IRequest"
    },
    "responseBody": {
      "description": "Paged results/report metadata for triage or admin analytics.",
      "typeName": "ai_ecommerceReport.IPage"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reports",
    "method": "patch"
  },
  {
    "specification": "Get a single report row from ai_ecommerce_report by ID. Returns all report fields, reporter, target, reason, and resolution.",
    "description": "This GET endpoint finds a single report of abuse/violation in ai_ecommerce_report by id. Response gives detail for triage: reporter, target, status, description, created/resolved times, etc. Permission required—generally admin/moderator. Used for moderation review UI and analytics. 404 if not found or not permitted by role.",
    "summary": "Get details of a single abuse report by id in ai_ecommerce_report.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique report row identifier to retrieve (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Atomic detailed report row data.",
      "typeName": "ai_ecommerceReport"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reports/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new report (abuse, spam, or violation) as per the ai_ecommerce_report table. This allows a user to report a comment, review, or thread for moderation. The body must include identifiers for the reporter, reported entity (comment, review, or thread), reason, status, and detailed comment if provided. The system should create a traceable entry and trigger moderation workflows as described in the schema comments. Validation includes only one target type per report and existence of required relations. On creation, a new report is logged for later resolution.",
    "description": "This operation enables users (typically customers) to create an abuse or violation report, triggering the moderation and compliance workflows for community content. Reports can target a specific comment, review, or forum thread, with only one target allowed per report as enforced in the ER schema. The API must validate that a corresponding target entity exists and that the reporter relationship is correct.\n\nThe report includes a human-readable reason, status (workflow enum), and an optional detailed comment, forming the initial context for human or automated moderation. Upon creation, the system should log the event and make it available for follow-up moderation actions. Error handling must include duplicate reporting prevention and entity existence checks. This API is related to moderation audit endpoints and may trigger asynchronous notifications for admins or sellers. All data conforms to strict 3NF—no duplication or aggregation of target info here. Only authorized users may create a report; entity relations are audited.",
    "summary": "Create a new abuse/report entry in ai_ecommerce_report (Community table)",
    "parameters": [],
    "requestBody": {
      "description": "Report creation payload for ai_ecommerce_report",
      "typeName": "IAiEcommerceReport.ICreate"
    },
    "responseBody": {
      "description": "Created report object following ai_ecommerce_report definition",
      "typeName": "IAiEcommerceReport"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reports",
    "method": "post"
  },
  {
    "specification": "Update an existing abuse/violation report, as defined by ai_ecommerce_report, using the report id path parameter. This allows for workflow state changes (e.g., updating status after moderation), editing reason or comments, or appending resolution data. Enforces existence of report and compliance with the schema's immutable target foreign keys. Only permissible fields (reason, status, etc.) can be updated. Triggers audit logging for sensitive changes.",
    "description": "This endpoint supports administrative or authorized resolution handling for abuse/violation reports. The API requires a valid report id and corresponding mutable data in the body. It prohibits changing report targets but supports updating status, reason, or admin resolver information (such as resolved_by_id). Strict validation is performed to ensure workflow legality. All changes are logged for compliance, and the previous state may be snapshotted for audit purposes.\n\nAction is restricted to authorized roles (e.g., administrators/moderators), and attempts to edit immutable relationships (e.g., reporter, report target) must be rejected. Upon success, the updated report is returned, and clients may query audit logs for details of the change.",
    "summary": "Update details or resolution status for an existing ai_ecommerce_report by report id",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the report to update",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Report update payload for ai_ecommerce_report",
      "typeName": "IAiEcommerceReport.IUpdate"
    },
    "responseBody": {
      "description": "The updated report object",
      "typeName": "IAiEcommerceReport"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reports/{id}",
    "method": "put"
  },
  {
    "specification": "Delete an existing report entry (ai_ecommerce_report) by id, implementing soft deletion as per the database schema and audit requirements. The operation must restrict access to authorized actors (typically administrators or the original reporter, as permitted by business rules). Deletion marks the report as deleted but retains the entry for compliance audit.",
    "description": "This endpoint marks an abuse/violation report as deleted (logical delete) instead of hard removal. It is only accessible to authorized users (such as administrators or the original reporter if business policy allows). Deletion operations do not remove historical or linked moderation records. Upon success, the entry's deleted_at timestamp is updated. The API is tightly integrated with audit controls: all actions must be logged, and attempts to delete non-existent or already deleted entries are gracefully handled. This endpoint provides the compliance foundation required for regulatory audit and legal defensibility, per the strict 3NF model—data is never physically erased unless legally required.",
    "summary": "Logically delete an ai_ecommerce_report entry by id (Community table)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the report to delete",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Deletion confirmation and the soft-deleted report object",
      "typeName": "IAiEcommerceReport"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/reports/{id}",
    "method": "delete"
  },
  {
    "specification": "Search, filter, or list moderation actions, as per the ai_ecommerce_moderation_action table. This supports pagination, filtering by admin, action_type, target entity, and status. Fulfills moderation dashboard and compliance audit requirements. Returns a paged list of moderation actions with flexible search criteria.",
    "description": "Retrieves a (possibly paginated) list of moderation actions recorded in ai_ecommerce_moderation_action, with advanced searching and filtering features. Query parameters or request body can specify actor (administrator), action type, target entity (comment, review, or thread), and state (e.g., reversed, rationale, date window). Results are ordered and paginated as appropriate for use in admin dashboards or analytics. User permissions restrict returned data to only those records the actor is allowed to view. The operation is central to moderation audit workflows—as required for internal and regulatory review. Each item in the result set fully conforms to the moderation action schema, and audit controls protect from unauthorized inspection.",
    "summary": "Search or list moderation actions (ai_ecommerce_moderation_action), supporting filters/pagination",
    "parameters": [],
    "requestBody": {
      "description": "Criteria for searching moderation actions, supporting filtering and pagination",
      "typeName": "IModerationAction.IRequest"
    },
    "responseBody": {
      "description": "Page of moderation actions according to search criteria",
      "typeName": "IPageIModerationAction"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/moderationActions",
    "method": "patch"
  },
  {
    "specification": "Get a single moderation action by id from ai_ecommerce_moderation_action, for detailed audit or review. Only authorized actors (admins, superusers) may access.",
    "description": "Retrieves a specific moderation action entry, including all details required for internal or regulatory auditing. The id path parameter identifies the exact moderation action record to fetch. This endpoint is used by compliance dashboards to view history, rationale, and reversal details for a given moderation action. Strict access controls ensure only authorized parties may retrieve the information. The result conforms to the moderation action schema, with all atomic fields (administrator, rationale, action_type, timestamps, etc.). Audit logs record each read access for regulatory traceability. If the action does not exist or access is denied, appropriate errors are returned.",
    "summary": "Get details for a single moderation action by id (ai_ecommerce_moderation_action)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique id for the moderation action",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full moderation action record (ai_ecommerce_moderation_action)",
      "typeName": "IModerationAction"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/moderationActions/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new moderation action entry in ai_ecommerce_moderation_action (e.g., action/reversal on a comment, review, or thread). The entry records admin, rationale, action_type, target, and reversal state—all required by audit and compliance workflows. This is part of the community and content moderation subsystem.",
    "description": "This endpoint is used by administrators or authorized roles to record a formal moderation action affecting a comment, review, or thread. The API must validate the legitimacy of both the target and the actor (administrator only), confirm allowed action_type (enum in app logic), and require a rationale for every action. Reversal and audit status are handled according to the moderation lifecycle. On creation, the operation logs a unique moderation action for full traceability and triggers asynchronous compliance/audit updates (e.g., notifies user affected, updates dashboards). This is critical for regulatory and internal responses to community content issues and maintains a strict audit chain for legal review.",
    "summary": "Record and create a new moderation action (ai_ecommerce_moderation_action)",
    "parameters": [],
    "requestBody": {
      "description": "New moderation action (require all audit fields)",
      "typeName": "IModerationAction.ICreate"
    },
    "responseBody": {
      "description": "Created moderation action object",
      "typeName": "IModerationAction"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/moderationActions",
    "method": "post"
  },
  {
    "specification": "Update an existing moderation action (ai_ecommerce_moderation_action) by id. Permits editing rationale, reversal state, or action metadata—per compliance audit requirements. Immutable target relationships must not be altered.",
    "description": "Permits authorized admins to edit details of a moderation action, such as the rationale, reversal status, or notes, referenced by id. Operations must not alter target entity FKs or original actor, in compliance with strict audit requirements. Every change is logged, and previous state may be versioned or snapshotted for rollback. Attempts to update immutable relationships (target, actor) should return an error. Changes are critical for updated compliance records, review by higher-level administration, or investigation by regulators. On success, the full updated moderation action record is returned.",
    "summary": "Update rationale, reversal status, or metadata for an existing moderation action (ai_ecommerce_moderation_action)",
    "parameters": [
      {
        "name": "id",
        "description": "Moderation action unique identifier to update",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Update information allowed by moderation action policy",
      "typeName": "IModerationAction.IUpdate"
    },
    "responseBody": {
      "description": "Updated moderation action record",
      "typeName": "IModerationAction"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/moderationActions/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft delete) an existing moderation action entry in ai_ecommerce_moderation_action by id, for compliance and auditability. Permissions restrict to high-level administrators.",
    "description": "This endpoint allows a moderation action record to be marked as logically deleted, updating its deleted_at timestamp rather than erasing the row. Only the highest levels of administrative privilege may use this operation, and all deletions are logged for regulatory compliance. This is required for scenarios such as erroneous moderation, reversal on appeal, or GDPR-like legal deletion. The action must not erase any existing child or referenced audit records, which remain for system/legal trace. Attempts to delete a non-existent or already deleted record are idempotently handled. Response includes the soft-deleted moderation action record as compliance documentation.",
    "summary": "Logically delete a moderation action record by id (ai_ecommerce_moderation_action)",
    "parameters": [
      {
        "name": "id",
        "description": "Moderation action to delete (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Deleted (soft) moderation action record",
      "typeName": "IModerationAction"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/moderationActions/{id}",
    "method": "delete"
  },
  {
    "specification": "Search or list all inquiry history snapshots for audit and rollback, as defined by ai_ecommerce_inquiry_snapshot. Supports filtering by inquiry id, time range, actor, or reason. Used in internal and regulatory audit workflows. Returns paginated list based on search criteria.",
    "description": "Retrieves a list of historical snapshots for inquiries, typically for compliance, audit, or rollback investigations. Filters support inquiry id, actor, time, or snapshot reason. Results are paginated and ordered chronologically for ease of review and rollback workflows. Endpoint is used by administrators, auditors, or system tools needing a high-fidelity record of all edits and state changes to product or order inquiries. Each entry in the result set is an atomic snapshot instance, conforming to 3NF. Audit controls enforce role-based access, and attempts to access unauthorized or unrelated snapshots are denied. Related to API endpoints for inquiry edit history and snapshot rollbacks.",
    "summary": "Search or list inquiry snapshots (ai_ecommerce_inquiry_snapshot), with paged filtering/search",
    "parameters": [],
    "requestBody": {
      "description": "Search/filter criteria for inquiry snapshots, supports filtering/pagination",
      "typeName": "IInquirySnapshot.IRequest"
    },
    "responseBody": {
      "description": "Paged result of inquiry snapshots meeting criteria",
      "typeName": "IPageIInquirySnapshot"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inquirySnapshots",
    "method": "patch"
  },
  {
    "specification": "Retrieve a single inquiry snapshot record by id as per ai_ecommerce_inquiry_snapshot, for audit or rollback review. Only authorized admins/auditors permitted.",
    "description": "Retrieves the full context for a single inquiry snapshot identified by its id, including all atomic data required for compliance and audit. Strict access control ensures only privileged users (admin, auditor, or system role) may fetch the snapshot. Used in audit dashboards and rollback/restore workflows, returning the complete data as defined in the schema—including inquiry linkage, actor, prior content, status, and rationale. Retrieval is fully audited and never exposes sensitive content to unauthorized users. If the record is not found or access is denied, errors are returned as per system audit rules.",
    "summary": "Get a specific inquiry snapshot by id (ai_ecommerce_inquiry_snapshot)",
    "parameters": [
      {
        "name": "id",
        "description": "Inquiry snapshot unique record id (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Inquiry snapshot full record",
      "typeName": "IInquirySnapshot"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inquirySnapshots/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new inquiry snapshot, as defined in ai_ecommerce_inquiry_snapshot, for audit and rollback purposes. This is triggered by edits or state change to an inquiry. All atomic fields must be set, including linkage to inquiry and actor.",
    "description": "Admin, system, or authorized action to create a new historical snapshot of an inquiry, storing pre-edit state for rollback or audit purposes. The API takes all required fields (inquiry id, actor, title/body, status, reason, and timestamp) and stores a new atomic entry. Snapshots are immutable; this operation may be invoked automatically during inquiry edit or status change flows. In compliance systems, this forms the basis of complete auditability and rollback mechanics. Any error in linkage or required fields is handled according to regulatory requirements, and all access and changes are logged for legal review. On success, returns the created inquiry snapshot record.",
    "summary": "Create a historical inquiry snapshot record (ai_ecommerce_inquiry_snapshot)",
    "parameters": [],
    "requestBody": {
      "description": "Inquiry snapshot creation payload for ai_ecommerce_inquiry_snapshot",
      "typeName": "IInquirySnapshot.ICreate"
    },
    "responseBody": {
      "description": "The full created inquiry snapshot record",
      "typeName": "IInquirySnapshot"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inquirySnapshots",
    "method": "post"
  },
  {
    "specification": "Update an existing inquiry snapshot by id, for correcting audit data, rationale, or metadata. Path id identifies the row; body contains only mutable audit fields. Never allows changing linkage to inquiry or actor post-creation. Used in rare compliance adjustments—strictly by super-admins/privileged auditors.",
    "description": "Allows system administrators or platform auditors to update mutable fields (such as rationale or status, if allowed) of an inquiry snapshot. Never permits changing immutable properties (inquiry/actor linkage, content from original change). All updates are logged, may require a double-audit or escalation for regulatory reasons. Used sparingly, typically to address compliance errors or correct erroneous rationale codes, never to alter logical history. Returns full, updated record. Attempts to alter immutable parts will fail and be logged for legal review.",
    "summary": "Update mutable audit fields for an inquiry snapshot by id (ai_ecommerce_inquiry_snapshot)",
    "parameters": [
      {
        "name": "id",
        "description": "Unique record id for the inquiry snapshot",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Update payload of mutable audit fields in inquiry snapshot",
      "typeName": "IInquirySnapshot.IUpdate"
    },
    "responseBody": {
      "description": "Updated inquiry snapshot record",
      "typeName": "IInquirySnapshot"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/inquirySnapshots/{id}",
    "method": "put"
  },
  {
    "specification": "Implements deletion of a specific inquiry snapshot for audit/history/rollback. This operation targets the ai_ecommerce_inquiry_snapshot entity, providing the capability to remove a snapshot entry by its unique identifier (UUID). Snapshot deletions may be restricted for audit or compliance reasons, with proper validations to ensure only authorized roles can perform soft or hard deletion. This operation is designed for administrators or compliance officers maintaining system record hygiene or responding to data retention requests. Proper logging of this action for audit purposes is mandatory. Related: GET/PUT/POST/PATCH endpoints for inquiry snapshots, and similar review snapshot CRUD operations. The ID must be referenced accurately as per ai_ecommerce_inquiry_snapshot schema.",
    "description": "This endpoint deletes a specific inquiry snapshot from the ai_ecommerce_inquiry_snapshot table using its unique ID. Inquiry snapshots are append-only historical records of inquiry edits or status changes, crucial for audit trails, rollback, and investigations. Deleting a snapshot is typically a compliance or admin action—subject to role restrictions and logging. Only entries identified by their UUID can be deleted, and the operation may soft-delete rather than hard-delete for regulatory traceability. It must check for dependencies, authorization, and must ensure the deletion action is audit-logged for compliance oversight. Errors must be raised if non-existent IDs are specified or if the actor lacks privileges. Other endpoints for creating, updating, or listing snapshots are available to provide a full snapshot management lifecycle.",
    "summary": "Delete an inquiry snapshot by ID (ai_ecommerce_inquiry_snapshot table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the inquiry snapshot to delete",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/inquirySnapshots/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements advanced search and retrieval for review snapshots, using the ai_ecommerce_review_snapshot entity. This PATCH endpoint allows complex querying (pagination, filters, search terms, etc.) conforming to RESTful conventions for resource collections with sophisticated parameters. Used by admin panels, compliance workflows, or analytics systems to paginate, filter, or audit review status/history. Follows strict 3NF and includes support for querying over audit and rollback information. Relates closely to GET/POST/PUT/DELETE reviewSnapshot endpoints for complete CRUD access. Request/response objects are derived from Iai_ecommerceReviewSnapshot.IRequest and IPageIai_ecommerceReviewSnapshot schemas.",
    "description": "Performs a special query over review snapshots, supporting search, pagination, and deep filtering based on attributes of the ai_ecommerce_review_snapshot table. Possible filters include review ID, customer, date ranges, and reason for snapshot. This endpoint is designed for compliance review, audits, bulk history exploration, or admin dashboard listing of historical review states. Returned objects are paged for scalability, with appropriate error handling for malformed queries or inadequate access scope. Related endpoints allow CRUD operations on individual review snapshot records. This operation supports full audit trail navigation for system, compliance, or analytics workflows.",
    "summary": "Query review snapshots with advanced filtering and search (ai_ecommerce_review_snapshot table).",
    "parameters": [],
    "requestBody": {
      "description": "Review snapshot query parameters (filters, pagination, etc.) for advanced search.",
      "typeName": "Iai_ecommerceReviewSnapshot.IRequest"
    },
    "responseBody": {
      "description": "The result is a paginated list of review snapshot objects matching the query, as defined in ai_ecommerce_review_snapshot.",
      "typeName": "IPageIai_ecommerceReviewSnapshot"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/reviewSnapshots",
    "method": "patch"
  },
  {
    "specification": "Retrieves a single review snapshot record by its unique ID from ai_ecommerce_review_snapshot. Used by system operators, admin dashboards, and compliance personnel to inspect historical review state, audit trail, or for rollback/investigation procedures. The operation enforces role-based access and logs the access for audit review. Returns all atomic review snapshot attributes, suitable for full inspection. Errors are surfaced for non-existent IDs or permission violations. Related endpoints allow list, create, update, and delete lifecycle management of review snapshots.",
    "description": "This endpoint fetches the atomic, full details of a single review snapshot in the ai_ecommerce_review_snapshot entity. Typical use cases include forensic inspection of a review change, regulatory audit, or rollback eligibility testing. The snapshot includes title, body, rating, status, snapshot reason, and timestamps. Only authorized users (admin, compliance, select analysts) may use this endpoint, and accesses must be audit-logged for compliance. Error handling includes missing UUIDs or unauthorized/unauthenticated requests. This forms part of a set of CRUD endpoints for managing persistent review change history.",
    "summary": "Get a specific review snapshot by ID (ai_ecommerce_review_snapshot table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the review snapshot to retrieve",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Review snapshot details object as defined by ai_ecommerce_review_snapshot.",
      "typeName": "Iai_ecommerceReviewSnapshot"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/reviewSnapshots/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new review snapshot record in ai_ecommerce_review_snapshot, supporting audit/history/rollback compliance for review changes. This operation is used by system workflows, admin panels, or automated audit triggers whenever a review record is edited or needs state versioning. Input validation is strict, conforming to Iai_ecommerceReviewSnapshot.ICreate schema, with all atomic fields (review_id, captured_by_id, status, reason, etc.) required. Successful operation produces a persistently stored, append-only snapshot, returning the new record for further inspection. Related endpoints support update, retrieval, deletion, and listing of review snapshots for full lifecycle management.",
    "description": "This endpoint creates a new entry in the ai_ecommerce_review_snapshot entity, representing a full rollback/audit point for a review. Typical triggers for this operation include an explicit review edit, moderation, or compliance event. Data supplied must adhere to audit and integrity rules—no manipulation or denormalization. The interface ensures correct population of all atomic attributes, requiring proper authorization for creation. The created snapshot is immutable post-creation, supporting append-only history for strict compliance. All successful operations are audit-logged for transparency. Errors result from invalid payload, missing required fields, or permissions problems. This function supports regulatory and business requirements for full, immutable review history logging.",
    "summary": "Create a review snapshot (audit/history point) in ai_ecommerce_review_snapshot.",
    "parameters": [],
    "requestBody": {
      "description": "Review snapshot creation details according to audit and rollback requirements.",
      "typeName": "Iai_ecommerceReviewSnapshot.ICreate"
    },
    "responseBody": {
      "description": "Success returns the newly created review snapshot record from ai_ecommerce_review_snapshot.",
      "typeName": "Iai_ecommerceReviewSnapshot"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/reviewSnapshots",
    "method": "post"
  },
  {
    "specification": "Updates a review snapshot entry in ai_ecommerce_review_snapshot, typically restricted to particular fields for audit consistency. This is an advanced, restricted operation (most snapshot management is append-only), but allows for compliance correction or administrative overrides. Only authorized (admin/audit) users may use this, with strict validation of updatable fields per Iai_ecommerceReviewSnapshot.IUpdate schema. Every change must be audit-logged, and mutation triggers compliance review. Related endpoints handle create, get, list, and delete actions—this endpoint fills the administrative upsert/correction scenario, not end-user patching.",
    "description": "This endpoint enables an authorized admin or compliance officer to update a review snapshot record in ai_ecommerce_review_snapshot. Typical updates include correcting incorrectly-logged data, fixing audit errors, or adding omitted metadata. Full validation is performed to prevent unauthorized or destructive mutation; only specific, allowed fields may be altered. The operation is audited in the compliance log. All update attempts against non-existent, deleted, or locked records return errors. This endpoint is intended for rare administrative interventions, not casual edits.",
    "summary": "Update a review snapshot (admin/compliance correction, ai_ecommerce_review_snapshot table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the review snapshot being updated.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "The update payload for permitted review snapshot fields, follows Iai_ecommerceReviewSnapshot.IUpdate.",
      "typeName": "Iai_ecommerceReviewSnapshot.IUpdate"
    },
    "responseBody": {
      "description": "Returns the updated review snapshot record from ai_ecommerce_review_snapshot.",
      "typeName": "Iai_ecommerceReviewSnapshot"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/reviewSnapshots/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes a review snapshot by ID from ai_ecommerce_review_snapshot, supporting compliance retention, audit rollback, or admin correction scenarios. Access is strictly limited to appropriately privileged roles. This may trigger a soft delete or compliance state flag, not always a hard deletion, as per platform audit policies. All deletion attempts are logged for future traceability. Error responses include inadequate permission and invalid ID. Related: get, patch, post, and put endpoints for managing review snapshots full lifecycle.",
    "description": "Allows a privileged compliance or admin user to mark a review snapshot in ai_ecommerce_review_snapshot as deleted. Reasons include data correction, retention expiry, or audit intervention. The operation is subject to regulatory rules—often soft-delete for full traceability—and each delete event is recorded for compliance. Operation fails on non-existent IDs or for unauthorized actors. Part of the standard snapshot lifecycle API.",
    "summary": "Delete a review snapshot by ID (compliance/audit, ai_ecommerce_review_snapshot table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the review snapshot to delete",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/reviewSnapshots/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements advanced search and retrieval of shopping cart records, using the ai_ecommerce_cart table. This PATCH collection endpoint supports deep filtering, pagination, and device/user-based queries per REST conventions—critical for user dashboard, admin panel, or system analytics. Fully 3NF: only raw cart records, no computed quantities/prices here. Request/response interface uses Iai_ecommerceCart.IRequest and IPageIai_ecommerceCart for typed input/output. Related endpoints enable traditional get/post/put/delete access for individual cart records, as well as cart item management under a separate endpoint.",
    "description": "Performs an advanced query over the full set of ai_ecommerce_cart records, with support for search by user, session/device, status, and timestamp fields. Typical consumers: customer dashboard (with device context), admin panel, analytics/reporting. Returned records are paginated; queries may use filters for cart status, customer, date, device, active/deleted states, etc. This operation enables dashboard and reporting views, not end-user item-level modification (handled by related item endpoints). All searches audited for compliance. Full CRUD lifecycle for carts handled via related endpoints /ai_ecommerce/cart/{id}, /ai_ecommerce/cartItems, etc.",
    "summary": "List/query carts with advanced search/filtering (ai_ecommerce_cart table).",
    "parameters": [],
    "requestBody": {
      "description": "Filter/search/pagination input for querying ai_ecommerce_cart records.",
      "typeName": "Iai_ecommerceCart.IRequest"
    },
    "responseBody": {
      "description": "Paginated list/metadata and array of cart objects from ai_ecommerce_cart.",
      "typeName": "IPageIai_ecommerceCart"
    },
    "authorizationRoles": [
      "customer",
      "administrator"
    ],
    "path": "/ai_ecommerce/cart",
    "method": "patch"
  },
  {
    "specification": "Fetches a specific shopping cart record (ai_ecommerce_cart table) by primary key (UUID). Enables retrieval of detailed cart metadata for a given customer/session/device, for direct display or programmatic analysis. Used by dashboard, cart recovery, or admin backoffice to inspect individual cart state and attributes. Direct operations (add/update item) handled elsewhere. Standard error handling for missing/unauthorized record. Related endpoints support PATCH (searching), POST (creation), PUT/DELETE (update/remove), and separate cart item management APIs.",
    "description": "Retrieves a single ai_ecommerce_cart record—identified by its UUID. This API is typically used by dashboard components, order checkout, or administrative audits. The returned cart contains atomic metadata: customer, device, status, and timestamps. Customer-specific item modifications are managed via the /cartItems endpoint. Authorization controls ensure that users see only their own carts, unless admin-privileged for audit purposes. Access attempts are audit-logged. Related endpoints cover full CRUD lifecycle for carts and cart items.",
    "summary": "Get a specific shopping cart by ID (ai_ecommerce_cart table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the cart to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full metadata and status fields from the ai_ecommerce_cart table for the given cart.",
      "typeName": "Iai_ecommerceCart"
    },
    "authorizationRoles": [
      "customer",
      "administrator"
    ],
    "path": "/ai_ecommerce/cart/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new cart record in ai_ecommerce_cart, typically at session start, login, or on-demand by customer/app. Used in new session workflows, device switching, or merging guest carts. This operation ensures that cart creation enforces proper customer and device context, validates for duplicates, and stores required atomic fields only (no items at creation). Input follows Iai_ecommerceCart.ICreate structure; output is the resulting cart record object. All creations are logged for session/audit purposes. Matching endpoints for get, patch, put, delete, and item creation exist.",
    "description": "This endpoint creates a new ai_ecommerce_cart, initializing the top-level metadata for a new customer/session cart state. Called at session start, login handshake, or guest cart promotion scenarios. Only atomic cart metadata and customer/device references are included; items are appended via separate item operation endpoint(s). Authorization and traceability enforced for compliance. Errors can result from duplicate active carts for same user/session, invalid input, or insufficient privileges. Success returns new cart object as per schema. Corresponds to the ai_ecommerce_cart main CRUD lifecycle.",
    "summary": "Create a new shopping cart (ai_ecommerce_cart table).",
    "parameters": [],
    "requestBody": {
      "description": "Details for new cart creation—customer, device, etc., per Iai_ecommerceCart.ICreate.",
      "typeName": "Iai_ecommerceCart.ICreate"
    },
    "responseBody": {
      "description": "Created cart object with primary fields as per ai_ecommerce_cart.",
      "typeName": "Iai_ecommerceCart"
    },
    "authorizationRoles": [
      "customer",
      "administrator"
    ],
    "path": "/ai_ecommerce/cart",
    "method": "post"
  },
  {
    "specification": "Updates the metadata of an existing cart in ai_ecommerce_cart, using its primary key (UUID). This operation covers updates to status, device context, or atomic cart attributes—but NOT the items (handled in a separate endpoint). Only users with appropriate permissions may call this function. Receives Iai_ecommerceCart.IUpdate structure and returns modified cart record. Modifications are logged for session/audit tracing. Related endpoints provide CRUD for cart and cart items separately.",
    "description": "Allows updates to atomic, allowed fields of the ai_ecommerce_cart table for a specified cart UUID. Use cases include device context update, cart status change, cart promotion/merge, or cart session management. Cart item modifications are never performed in this endpoint. Strict authorization and integrity checks apply, and changes are compliance-audited. Errors include unauthorized ID, non-existent cart, or invalid update attempts. Part of standard CRUD lifecycle for cart objects (POST/create, PATCH/list, DELETE/remove, cartItems for item CRUD).",
    "summary": "Update cart metadata/details by ID (ai_ecommerce_cart table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the cart record to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Partial/full update structure for cart details (NOT items).",
      "typeName": "Iai_ecommerceCart.IUpdate"
    },
    "responseBody": {
      "description": "Updated cart object from ai_ecommerce_cart table.",
      "typeName": "Iai_ecommerceCart"
    },
    "authorizationRoles": [
      "customer",
      "administrator"
    ],
    "path": "/ai_ecommerce/cart/{id}",
    "method": "put"
  },
  {
    "specification": "Removes a cart record from ai_ecommerce_cart by primary key (UUID), typically a soft delete for compliance/GDPR or device session cleanup. Used in cart abandonment, device logout, or user-requested removal flows. This operation never affects contained cart items directly (handled in cartItems endpoints, which cascade or isolate items based on business logic). All delete actions are audit-logged, with error handling for missing IDs, or priv/ownership failures. This is a core lifecycle endpoint for cart management, alongside PATCH (search), POST (create), GET (get), PUT (update), and cartItems CRUD.",
    "description": "Deletes a shopping cart record by its UUID from ai_ecommerce_cart, with standard verification, audit, and possible soft/hard delete logic. Only authorized users (cart owners or admin) may perform this action. Deletion leaves cart items orphaned or triggers secondary cleanup per business policy (not in this endpoint). Attempts on non-existent, already-deleted, or unauthorized carts return errors. Compliance logging is mandatory.",
    "summary": "Delete a cart by ID (ai_ecommerce_cart table).",
    "parameters": [
      {
        "name": "id",
        "description": "UUID primary key of the cart to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "customer",
      "administrator"
    ],
    "path": "/ai_ecommerce/cart/{id}",
    "method": "delete"
  },
  {
    "specification": "Performs advanced search/list of cart item records from ai_ecommerce_cart_item, supporting filtering/pagination. The endpoint provides complex query operations (e.g., by cart_id, sku_id, date range, etc.), typically for dashboards, order systems, or audit analytics workflows. It does NOT mutate items, but lists filtered sets for display or logic branching. Follows Iai_ecommerceCartItem.IRequest and returns paginated records per IPageIai_ecommerceCartItem schema. Related endpoints offer CRUD for individual items, addition/removal, and parent cart manipulation.",
    "description": "Allows searching, paginated listing, and deep filtering of cart items (ai_ecommerce_cart_item) for dashboard display, analytics, or advanced business operations. Supports query operations on cart, customer, SKU, quantity, or timestamp. All operations read-only, producing paginated result lists as per analytics/search use. For CRUD (add/update/remove item), see separate cartItems endpoints using POST/PUT/DELETE. Error handling covers malformed request, unauthorized resource scope, and pagination failures. Operation is audited for compliance.",
    "summary": "List/search cart items with advanced filtering (ai_ecommerce_cart_item).",
    "parameters": [],
    "requestBody": {
      "description": "Query/filter params for cart item search (Iai_ecommerceCartItem.IRequest).",
      "typeName": "Iai_ecommerceCartItem.IRequest"
    },
    "responseBody": {
      "description": "Paginated result: array of cart item records and metadata (IPageIai_ecommerceCartItem).",
      "typeName": "IPageIai_ecommerceCartItem"
    },
    "authorizationRoles": [
      "customer",
      "administrator"
    ],
    "path": "/ai_ecommerce/cartItems",
    "method": "patch"
  },
  {
    "specification": "Get a cart item by its unique ID. This operation retrieves the details of a single cart item. Related Prisma table: ai_ecommerce_cart_item.",
    "description": "Retrieves a single cart item based on its unique identifier. The API fetches the complete information for the cart item, including its association to the parent cart and SKU. This operation is typically used for viewing detailed cart item data, such as quantity, addition date, and related SKU.\n\nThe endpoint enforces security to ensure that only authorized users (i.e., the cart owner or privileged admin) can access the item information. Permissions and business logic restrict the view so that users cannot inspect or manipulate others' carts.\n\nThe operation depends on the ai_ecommerce_cart_item table from the Prisma schema. If the cart item with the requested ID does not exist, a not found error is returned. Error handling covers permission issues and missing records. The identifier must match exactly with the cart item's primary key.",
    "summary": "Retrieve a cart item from ai_ecommerce_cart_item by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the cart item to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Cart item detail fetched by its ID.",
      "typeName": "IAiEcommerceCartItem"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/cartItems/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new cart item. This operation adds a product SKU to the customer's cart. Related table: ai_ecommerce_cart_item.",
    "description": "Allows authorized users to add a SKU to their cart by creating a new cart item record. The body specifies cart ID, SKU ID, and quantity, referencing the ai_ecommerce_cart_item table from the Prisma schema. Data validation ensures only allowed quantities and existing cart/SKU IDs are used.\n\nBusiness logic restricts users to managing only their own carts. Attempts to add duplicate SKUs should increment quantity rather than create new records. Validation and error handling include invalid IDs, permission checks, and stock availability. This operation is foundational for the add-to-cart experience.\n\nIf successful, the new cart item details are returned. If the input data is invalid, appropriate error codes are returned. Permissions may require the authenticated user role.",
    "summary": "Create a new cart item in ai_ecommerce_cart_item.",
    "parameters": [],
    "requestBody": {
      "description": "New cart item creation data.",
      "typeName": "IAiEcommerceCartItem.ICreate"
    },
    "responseBody": {
      "description": "Details of the cart item created.",
      "typeName": "IAiEcommerceCartItem"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/cartItems",
    "method": "post"
  },
  {
    "specification": "Update an existing cart item. This operation modifies quantity or SKU for a cart item in ai_ecommerce_cart_item.",
    "description": "Updates a cart item's details (typically quantity) by referencing its ID. The operation ensures that the customer can only update their own cart item records and respects business validation. On update, checks are made for inventory constraints and business rules (e.g., non-negative quantity).\n\nPermissions are enforced so that a user can only modify their own cart contents except for admins. Successful operations return updated cart item data. A not-found or forbidden error is returned if the record cannot be found or the operation is not permitted.\n\nReference the ai_ecommerce_cart_item table for entity details and update policies.",
    "summary": "Update a cart item in ai_ecommerce_cart_item by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the cart item to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Cart item update information.",
      "typeName": "IAiEcommerceCartItem.IUpdate"
    },
    "responseBody": {
      "description": "Cart item details after update.",
      "typeName": "IAiEcommerceCartItem"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/cartItems/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a cart item. Removes the specified record from ai_ecommerce_cart_item.",
    "description": "Deletes a cart item by its ID, removing the specified SKU from the user's cart. The endpoint enforces that users may only delete items from their own cart unless otherwise permitted by elevated roles (e.g., admin).\n\nUpon successful deletion, the response confirms removal. If the item does not exist or the user lacks permission, an error is returned. Uses ai_ecommerce_cart_item as the backing table. Security and business checks (e.g., cannot remove other's items) are in place.",
    "summary": "Delete a cart item from ai_ecommerce_cart_item by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the cart item to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of cart item deletion.",
      "typeName": "IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/cartItems/{id}",
    "method": "delete"
  },
  {
    "specification": "Get a paginated list of orders with searching and sorting. Uses PATCH for complex search/filter request body. Related table: ai_ecommerce_order.",
    "description": "Retrieves a list of orders according to search, pagination, and sorting parameters provided in the request body. Returns a paginated data structure with order summaries.\n\nUses ai_ecommerce_order as the backing table. The request body can include complex filtering (e.g., by status, customer ID, date range) and sorting options due to PATCH semantics. Security enforces that users may only query their own orders unless they have elevated permissions (admin/seller support roles).\n\nReturns paginated order list with associated metadata (e.g., total count, current page). Validation ensures proper query structure. Related endpoints include order creation, detail (GET), and update (PUT). Error handling returns validation or permission errors as needed.",
    "summary": "Retrieve paginated/searchable orders from ai_ecommerce_order.",
    "parameters": [],
    "requestBody": {
      "description": "Search and pagination/sorting parameters for order list retrieval.",
      "typeName": "IAiEcommerceOrder.IRequest"
    },
    "responseBody": {
      "description": "Paginated order list with search result data.",
      "typeName": "IPageIAiEcommerceOrder"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orders",
    "method": "patch"
  },
  {
    "specification": "Retrieve order by ID. Returns complete details from ai_ecommerce_order.",
    "description": "Retrieves a specific order's complete data using its unique identifier. Only the order owner or users with elevated privileges (e.g., support/admin roles) are allowed access. The endpoint provides order details, payment state, shipment status, and all audit fields.\n\nThe operation is secured and respects privacy (cannot access other users' orders). Error handling covers missing records or unauthorized access. The path parameter corresponds to the order's primary key in ai_ecommerce_order.",
    "summary": "Get details for one ai_ecommerce_order by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the order record to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full order detail for the specified order.",
      "typeName": "IAiEcommerceOrder"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orders/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new order (checkout). Uses POST and references the ai_ecommerce_order table.",
    "description": "Creates an order record upon user checkout. The payload contains all necessary order creation details, e.g., cart ID, shipping address, payment method or reference, and customer info. Security mandates that only authenticated customers can create their orders (or via admin tools/integration points).\n\nBusiness rules check valid carts, available inventory, proper payment/authorization, and valid address. On success, returns the newly created order record. Related table: ai_ecommerce_order. Error handling for invalid, duplicate, or unauthorized attempts is present.",
    "summary": "Create a new ai_ecommerce_order record (checkout).",
    "parameters": [],
    "requestBody": {
      "description": "Order creation payload for checkout operation.",
      "typeName": "IAiEcommerceOrder.ICreate"
    },
    "responseBody": {
      "description": "Details of created order record.",
      "typeName": "IAiEcommerceOrder"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orders",
    "method": "post"
  },
  {
    "specification": "Update an existing order by its ID. Uses PUT and references ai_ecommerce_order.",
    "description": "Updates order fields (shipping address, status, etc.) using the record's unique identifier. The required body data aligns with the ai_ecommerce_order table as per Prisma schema. Security controls enforce permissions: owners may only update modifiable fields, while support/admins can apply broader changes according to business rules.\n\nAppropriate error handling for permission validation, not-found entities, and invalid modifications. The identifier in the route corresponds to the order's PK, and update input is strictly validated.",
    "summary": "Update ai_ecommerce_order record by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Order record's unique ID to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Order update payload for the specified order.",
      "typeName": "IAiEcommerceOrder.IUpdate"
    },
    "responseBody": {
      "description": "Full details after order update.",
      "typeName": "IAiEcommerceOrder"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orders/{id}",
    "method": "put"
  },
  {
    "specification": "Delete an order by its unique ID. Uses ai_ecommerce_order as the backing table.",
    "description": "Deletes (or soft-deletes) a specified order by its ID. Security controls ensure only the owner or an administrator may perform this action. Deletion typically represents a business process (cancellation, void) rather than full physical removal. Appropriate not found and permission errors are handled.\n\nThe endpoint confirms removal if successful. Errors handled for not-found or unauthorized attempts. The 'id' parameter matches the PK in ai_ecommerce_order.",
    "summary": "Delete an ai_ecommerce_order by ID (cancel/void).",
    "parameters": [
      {
        "name": "id",
        "description": "Order record's unique identifier to delete (cancel).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of order deletion/cancellation.",
      "typeName": "IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orders/{id}",
    "method": "delete"
  },
  {
    "specification": "Get paginated/searchable list of order items. PATCH with request body for search/filter. Related table: ai_ecommerce_order_item.",
    "description": "Retrieves a paginated and searchable list of order item records, enabling filtering by order ID, SKU, and other criteria. The PATCH body provides search, filter, and sorting parameters for complex querying.\n\nSecurity checks enforce that only authorized actors may fetch this data, and only for their own orders unless permitted by elevated role. The response provides summary data for each order item, suitable for detailed or analytical UI use cases.\n\nBacked by ai_ecommerce_order_item. Related endpoints include single/order-wide retrieval, creation, and update. Error handling for permissions, not found states, and bad filtering is standard.",
    "summary": "Get paginated/searchable order items from ai_ecommerce_order_item.",
    "parameters": [],
    "requestBody": {
      "description": "Search and filter request body for order items.",
      "typeName": "IAiEcommerceOrderItem.IRequest"
    },
    "responseBody": {
      "description": "Paginated data structure of order items.",
      "typeName": "IPageIAiEcommerceOrderItem"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderItems",
    "method": "patch"
  },
  {
    "specification": "Get order item by ID. Returns details for one record in ai_ecommerce_order_item.",
    "description": "Fetches full details for a single order item by its unique identifier. Security rules mandate the order owner or admin can perform this query. Returns detailed fields, including order and SKU links.\n\nThe ID corresponds to the order item's primary key. Not found and permission errors are covered. Prisma table: ai_ecommerce_order_item.",
    "summary": "Fetch a single order item from ai_ecommerce_order_item by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the order item to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Details of the requested order item.",
      "typeName": "IAiEcommerceOrderItem"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderItems/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new order item. Used for administrative or system functions. POST; references ai_ecommerce_order_item.",
    "description": "Inserts a new record into ai_ecommerce_order_item, representing an item added to an order. Creation may only be allowed for system or administrative users—regular customers cannot arbitrarily create order items (normal order creation is via the order API).\n\nThe input includes the order ID, SKU ID, and quantity, with data validation against inventory and business rules. On success, the operation returns the created item data. Permission and integrity errors handled via error codes.\n\nRelated table: ai_ecommerce_order_item. Linked with order and SKU records by foreign keys.",
    "summary": "Create a new order item in ai_ecommerce_order_item.",
    "parameters": [],
    "requestBody": {
      "description": "Order item creation payload.",
      "typeName": "IAiEcommerceOrderItem.ICreate"
    },
    "responseBody": {
      "description": "The new order item details.",
      "typeName": "IAiEcommerceOrderItem"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderItems",
    "method": "post"
  },
  {
    "specification": "Update an order item resource. The operation modifies details of an existing order item, such as its quantity or SKU association, based on the ai_ecommerce_order_item Prisma table. The table enables tracking each SKU/quantity in an order at checkout; each row records a product/variation purchased, with atomic references and purchase quantity. The endpoint must enforce atomicity and compliance with audit logic. Related tables include ai_ecommerce_order (to which this row belongs) and ai_ecommerce_sku (the SKU purchased).",
    "description": "This endpoint updates an existing order item. Based on the ai_ecommerce_order_item schema, it accepts updates to the purchased SKU and quantity for a specific order item identified by its id. Order items represent each product/variant purchased in a given order and are fundamental for fulfillment, analytics, and return matching. The endpoint must respect referential integrity with the underlying order and SKU, as enforced by the schema (order_id, sku_id). Validation includes ensuring that the new quantity does not violate business or inventory rules. All changes are audited, reflecting immutable audit logging implemented elsewhere. Attempting to update a non-existent item or providing invalid SKU/order references should result in a suitable error. The operation is typically accessible to privileged roles such as sellers, administrators, or automation roles involved in order processing.",
    "summary": "Update an order item in ai_ecommerce_order_item table.",
    "parameters": [
      {
        "name": "id",
        "description": "Target order item ID (UUID) for update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated information for the order item, such as SKU or quantity.",
      "typeName": "IAiEcommerceOrderItem.IUpdate"
    },
    "responseBody": {
      "description": "Full details of the updated order item.",
      "typeName": "IAiEcommerceOrderItem"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderItems/{id}",
    "method": "put"
  },
  {
    "specification": "Delete an order item by its ID. This operation implements removal of a specific line item, corresponding to a SKU purchased in an order. Per ai_ecommerce_order_item, each row is a unique identifier for partial fulfillment, returns, and audit logic. Deletion must respect transactional integrity and be reflected in audit trail as mandated by 3NF/fulfillment compliance. If the order is fulfilled or in a non-removable state, attempt to return a business logic error. Only privileged users such as administrators or authorized sellers may execute this action.",
    "description": "Deletes the specified order item. Based on the ai_ecommerce_order_item schema, each order item is essential for fulfillment and inventory reconciliation. Deleting an item may represent a partial order cancelation or an error correction and must be logged in audit tables. Deletion will typically only succeed on items that are not yet fulfilled, returned, or otherwise past a business-defined update threshold. Operations must check for referential and lifecycle violations and return documentation-compliant error messages where appropriate. Deletion may or may not be a soft delete, but resulting record mutation must comply with platform audit requirements.",
    "summary": "Delete an order item in ai_ecommerce_order_item table.",
    "parameters": [
      {
        "name": "id",
        "description": "Target order item ID (UUID) for deletion.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Result of order item deletion, e.g., success or error message.",
      "typeName": "IAiEcommerceOrderItem.IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderItems/{id}",
    "method": "delete"
  },
  {
    "specification": "Get a filtered and potentially paginated list of payment resources, following ai_ecommerce_payment. This operation enables searching, filtering, or aggregating over payment transactions. The ai_ecommerce_payment table represents payment transactions for orders or wallet actions, with each row including amount, provider, method, status, and references to order or wallet. This endpoint is commonly used by administrators and sellers to audit payments, process refunds, and monitor transactions.",
    "description": "Retrieve a list of payments matching given criteria, supporting pagination, search, and filtering. Payments are defined in ai_ecommerce_payment with details such as amount, provider, method, payment_reference, and status. The endpoint is used for compliance, reconciliation, or business analytics scenarios, where filtering by status, date, or provider may be required. Pagination and advanced filtering (e.g., by customer/order/payment_reference) should be included in the request body, following the pattern established for PATCH list endpoints. The response contains the filtered list and total count information. Handling of access is dependent on role/privilege, but typically accessible only to finance, admin, or seller actors. Validation errors (e.g., invalid filters or unsupported pagination values) must return appropriate error objects.",
    "summary": "List/search payments in ai_ecommerce_payment table (PATCH with search/filter info).",
    "parameters": [],
    "requestBody": {
      "description": "Paging, filtering, and search for payments list results.",
      "typeName": "IAiEcommercePayment.IRequest"
    },
    "responseBody": {
      "description": "Paged/search results for payments, and total count.",
      "typeName": "IPageIAiEcommercePayment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/payments",
    "method": "patch"
  },
  {
    "specification": "Retrieve the details for a specific payment resource, following ai_ecommerce_payment. Used for per-transaction review, audit trails, or order/payment matching. Each payment represents a single transaction for orders, wallet actions, or refunds, including amount, provider, payment_reference, and status. Often called to display payment details in admin UI or order review interfaces. Ensures the ability to fetch full transaction audit details by ID.",
    "description": "Get a single payment record by its payment ID. Per ai_ecommerce_payment, each record tracks a transaction (amount, status, provider, order linkage, etc.). This endpoint is essential for support and admin workflows (e.g., resolving disputes, checking payment history, synchronizing third-party payment events). Attempting to fetch a non-existent or unauthorized resource should yield a relevant error message. All access must be role authorized, and sensitive payment details should be handled in compliance with platform security policy (e.g., PCI DSS).",
    "summary": "Get payment details from ai_ecommerce_payment table by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Target payment ID (UUID) for retrieval.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full details of the specified payment transaction.",
      "typeName": "IAiEcommercePayment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/payments/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new payment record following the ai_ecommerce_payment schema. Each payment entry documents a single payment event related to orders or wallet actions, including amount, provider, method, payment_reference, and status, with linkage to order/payment logic. Entries are created by checkout processes, wallet top-ups, refund workflows, or payment integrations. All required details must be validated (amount, provider, payment reference, method, status). Post-creation, the entry must be auditable for reconciliation and compliance.",
    "description": "Create a new payment in the system. Payment records represent completed (or pending) monetary events for orders, wallets, or refunds, capturing amount, provider, method, and references to other transactional objects. All values must pass validation for compliance and business logic. The endpoint should enforce referential integrity (valid order/payment_reference), valid statuses, and plausible value checks. Creation triggers audit/integration events. Attempts to create malformed records or duplicates must return proper error responses following API policy.",
    "summary": "Create a payment record in ai_ecommerce_payment table.",
    "parameters": [],
    "requestBody": {
      "description": "Details of payment to create.",
      "typeName": "IAiEcommercePayment.ICreate"
    },
    "responseBody": {
      "description": "The newly created payment resource details.",
      "typeName": "IAiEcommercePayment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/payments",
    "method": "post"
  },
  {
    "specification": "Update an existing payment resource. Per ai_ecommerce_payment, each payment is a single transaction event associated with orders or other flows; the update operation allows modification of selected fields (e.g., status, payment_reference). Payment updates must respect immutability rules (business logic may restrict status updates, etc.) and must be audited for traceability. Validation includes verifying payment is mutable, updating only permitted fields, and re-synchronizing related business logic. Used in scenarios such as refund processing or resolving ambiguous payment status with the provider.",
    "description": "Update a payment by its ID based on ai_ecommerce_payment schema. Endpoint is used to modify a payment after its initial creation, e.g., to update its status to 'completed', apply a refund reference, or mark as canceled. Each change is audited for compliance. Endpoint must ensure referential correctness and business rules. Attempts to mutate immutable payments or change critical data after irrevocable settlement must be rejected with suitable error messages. Security and authorization must match the sensitivity of payment data.",
    "summary": "Update a payment resource in ai_ecommerce_payment table.",
    "parameters": [
      {
        "name": "id",
        "description": "Target payment ID (UUID) for update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "The updated payment field values (possibly status, reference, or method).",
      "typeName": "IAiEcommercePayment.IUpdate"
    },
    "responseBody": {
      "description": "Full details of the updated payment record.",
      "typeName": "IAiEcommercePayment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/payments/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a payment record. This operation removes a specific payment transaction and should be used only by privileged actors, given the sensitive/audited nature of payment data. Per ai_ecommerce_payment, payments are immutable upon settlement or legal finality; only allowable deletions are incomplete, duplicate, or test transactions. Deletion must respect regulatory logs and audit compliance.",
    "description": "Delete a payment in the ai_ecommerce_payment table. Removing payment records is a privileged operation, generally limited, and must be carefully audited. Payment deletions are strictly regulated, typically only allowed for erroneous or test records. Successfully deleted records must log the action for compliance and financial auditing. Error responses must indicate if the record cannot be deleted due to legal/business constraints or if non-existent.",
    "summary": "Delete a payment record from ai_ecommerce_payment table.",
    "parameters": [
      {
        "name": "id",
        "description": "Target payment ID (UUID) for deletion.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Result of payment deletion indicating success or error.",
      "typeName": "IAiEcommercePayment.IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/payments/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a list of order status logs, supporting search, filter, and pagination, for ai_ecommerce_order_status_log. Each record in ai_ecommerce_order_status_log is an immutable audit of an order’s status transitions (e.g., pending→paid, shipped, delivered), including actor and timestamp. This PATCH endpoint supports fetching logs by order, actor, or status in a paged and filtered manner for compliance, reporting, or investigation.",
    "description": "Fetch order status transition logs in a filtered or paginated mode. ai_ecommerce_order_status_log tracks every audit-worthy status transition for orders, storing details such as status change, actor, and timestamps. This endpoint is intended for order or compliance analytics by administrators, sellers, or customer support. Advanced filters may include date ranges, status codes, actor IDs/types, or order IDs. Errors for unsupported filters or permission denials should be handled per platform policy, and sensitive log information must be managed according to compliance requirements.",
    "summary": "List/filter order status logs from ai_ecommerce_order_status_log table.",
    "parameters": [],
    "requestBody": {
      "description": "Filters and pagination for order status logs list.",
      "typeName": "IAiEcommerceOrderStatusLog.IRequest"
    },
    "responseBody": {
      "description": "Paged results of order status logs and summary info.",
      "typeName": "IPageIAiEcommerceOrderStatusLog"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderStatusLogs",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific order status log entry by ID, per ai_ecommerce_order_status_log. Each order status log represents a discrete, immutable state change for an order (e.g., pending to paid), including actor, old/new status, and timestamp info. This endpoint is typically used by admins, compliance officers, or order support processes for root-cause analysis, auditing, or reporting.",
    "description": "Fetch a single order status log entry by its unique ID (UUID). ai_ecommerce_order_status_log offers immutable, audit-compliant logs of all order status transitions. The endpoint returns a record with all details, including actor, old and new status, and change timestamp. Missing or unauthorized entries should yield a proper error result. Highly privileged access only (admin/support/seller).",
    "summary": "Get a specific order status log record from ai_ecommerce_order_status_log by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Target order status log ID (UUID) for retrieval.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full details of the order status log entry.",
      "typeName": "IAiEcommerceOrderStatusLog"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderStatusLogs/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new order status log record. ai_ecommerce_order_status_log is used to document a single order’s status transition event (e.g., 'paid', 'shipped', 'delivered'), including all actors, status info, and audit timestamp, as required by compliance and fulfillment logic. Creation is restricted to privileged logic—e.g., only business logic, support, or admin flows.",
    "description": "Insert a new order status log. The endpoint must receive all required log details per ai_ecommerce_order_status_log: order_id, old/new status, actor (including id and type), and timestamp per 3NF normalization. Validation rules must ensure that referenced order and actor entities exist and that business logic allows the transition. Upon insertion, log is immutable. Non-existent or inappropriate references yield an error. Auditing, role checks, and change notification should be handled as appropriate for compliance use cases.",
    "summary": "Insert a new order status log in ai_ecommerce_order_status_log table.",
    "parameters": [],
    "requestBody": {
      "description": "Details of the new order status log record.",
      "typeName": "IAiEcommerceOrderStatusLog.ICreate"
    },
    "responseBody": {
      "description": "The created order status log record details.",
      "typeName": "IAiEcommerceOrderStatusLog"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderStatusLogs",
    "method": "post"
  },
  {
    "specification": "Update an existing order status log record by ID (PUT) in ai_ecommerce_order_status_log. Typically reserved for status log corrections or audit amendments (rare). Must preserve audit trail and restrict update privileges appropriately. Only certain fields (such as correction or error note) may be mutable per compliance/risk policy.",
    "description": "Edits an order status log record given its ID. ai_ecommerce_order_status_log is generally immutable, but this endpoint exists to support rare correction/audit flows. Business rules may limit what is changeable. Update attempts on non-existent or locked records must yield suitable error responses. All modifications must ensure strict compliance logging. Only privileged support, admin roles, or auditing flows may use this operation.",
    "summary": "Edit an order status log record from ai_ecommerce_order_status_log by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the order status log to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update in the status log record (per field-level update policy).",
      "typeName": "IAiEcommerceOrderStatusLog.IUpdate"
    },
    "responseBody": {
      "description": "Full details of the updated order status log record.",
      "typeName": "IAiEcommerceOrderStatusLog"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderStatusLogs/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft or hard) an order status log record by its ID. ai_ecommerce_order_status_log is an immutable audit log, and deletion is typically very rare, reserved for compliance or error correction (e.g., GDPR, audit fraud fix). Deletion must be strictly audited (elsewhere) and deny most non-privileged actors. Returns delete confirmation and/or error on violation of business/legality rules.",
    "description": "Performs a delete of the order status log entry by ID. The endpoint must enforce maximum compliance/audit rules. Should only be allowed by administrators or compliance officers; in practice, this is a sensitive, tightly restricted operation. Endpoint must return unambiguous error/success result indicating outcome and whether the log was removed or operation was denied. All deletions are tracked in the platform audit tables.",
    "summary": "Delete an order status log record from ai_ecommerce_order_status_log by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the status log record to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Result of the status log deletion; success or compliance error.",
      "typeName": "IAiEcommerceOrderStatusLog.IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/orderStatusLogs/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements list retrieval, search, and pagination for shipment records. Linked to the ai_ecommerce_shipment table, supports querying (filter by shipping_status, carrier, tracking_number, order_id, dates, etc.) for logistics and fulfillment teams. Returns a paginated list based on search criteria. Extendable for future complex querying needs.",
    "description": "This operation allows authorized users (admins, sellers) to search, filter, and retrieve paginated lists of shipment records. It is based on the ai_ecommerce_shipment table, which maintains atomic, 3NF-compliant shipment data linked to orders for logistics and audit compliance.\n\nThe endpoint supports flexible filtering (status, dates, carrier, tracking, etc.) and will always return only active (non-deleted) rows by default. It must enforce business-level permission checks. Typical use cases: shipment dashboards, order tracking screens, admin shipment audits, seller fulfillment report generation.\n\nQuery performance and accuracy are essential for operational use. Error handling must distinctly signal filter issues, missing permissions, or unexpected DB errors. Extensible to include aggregation or analytics in the future.",
    "summary": "Paginated, filterable list retrieval of shipment records from ai_ecommerce_shipment table.",
    "parameters": [],
    "requestBody": {
      "description": "Shipment search and filtering parameters.",
      "typeName": "ai_ecommerce_shipment.IRequest"
    },
    "responseBody": {
      "description": "Paginated shipment list matching filtering criteria.",
      "typeName": "ai_ecommerce_shipment.IPage"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/shipments",
    "method": "patch"
  },
  {
    "specification": "Retrieves detail for a single shipment entry by shipment id. Directly maps to ai_ecommerce_shipment, exposing all columns and order/fulfillment context. Used for shipment tracking, audit, resolution.",
    "description": "This API retrieves all available data for a single shipment (ai_ecommerce_shipment), including the shipment's status, carrier info, associated order, tracking number, timestamps, and fulfillment metadata. It enables shipment tracking for both customer service and logistics teams.\n\nOnly accessible to authorized actors (admin, seller for their own shipments, or customer for their order's shipment). If the shipment does not exist (wrong id or deleted), the API should return a clear error. Related shipments must be auditable for regulatory/operational traceability.\n\nExpected use cases: shipment status interfaces, tracking panels, audit rollup/reporting by operations/admins.",
    "summary": "Get detail of a shipment (ai_ecommerce_shipment) by id.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique shipment id to lookup (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed shipment record.",
      "typeName": "ai_ecommerce_shipment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/shipments/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new shipment record—invoked when a new outbound shipment is scheduled for an order. Directly maps to insert on ai_ecommerce_shipment table. Requires full set of atomic shipment properties required for fulfillment/traceability.",
    "description": "This endpoint allows logistics/admin systems to register the creation of a new shipment, storing all relevant fulfillment and tracking info in ai_ecommerce_shipment. Mandatory columns (order_id, shipping_status, etc.) must be supplied and validated.\n\nBusiness logic enforces existence of the referenced order, proper status, and prevents duplicate shipment creation for the same order. Successful creation returns the new record (with DB-generated id). Rejects if critical references (order, carrier, etc.) are invalid or if shipment for order already exists.\n\nTypical uses: logistics automation, admin shipment scheduling, post-purchase workflow triggers.",
    "summary": "Create a new shipment record in ai_ecommerce_shipment table.",
    "parameters": [],
    "requestBody": {
      "description": "Details for the new shipment to be created.",
      "typeName": "ai_ecommerce_shipment.ICreate"
    },
    "responseBody": {
      "description": "Created shipment entity (with generated id).",
      "typeName": "ai_ecommerce_shipment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/shipments",
    "method": "post"
  },
  {
    "specification": "Updates an existing shipment (ai_ecommerce_shipment), typically during status changes, tracking info update, or correcting carrier/tracking fields. Directly maps to DB update by id. All critical fulfillment fields are eligible for update with validations, following 3NF.",
    "description": "This API allows for updating a shipment record, referenced by its id, in ai_ecommerce_shipment. Payload may include updated status, carrier, tracking information, updates to shipped_at or delivered_at fields, or other mutable metadata. All changes are validated against business rules (e.g., status transitions, fulfillment integrity, editability windows).\n\nOptimistic concurrency is recommended to avoid overwrites. Proper error responses for non-existent rows, forbidden status updates, or constraint violations. History/audit requirements should be fulfilled for compliance.",
    "summary": "Update shipment data by id in ai_ecommerce_shipment table.",
    "parameters": [
      {
        "name": "id",
        "description": "ID of shipment to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields and values to be updated for the shipment.",
      "typeName": "ai_ecommerce_shipment.IUpdate"
    },
    "responseBody": {
      "description": "Updated shipment record.",
      "typeName": "ai_ecommerce_shipment"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/shipments/{id}",
    "method": "put"
  },
  {
    "specification": "Removes (soft or hard, per policy) a shipment record by id, mapping to ai_ecommerce_shipment delete/soft-delete. Used for correcting erroneously created shipments, error resolution, or admin cleanup.",
    "description": "This API allows for deletion (soft, by default) of a shipment identified by id. If the shipment is referenced elsewhere (e.g., for fulfillment audit) or is not eligible for deletion under business rules, the operation should be blocked with a clear error message. The record should be marked deleted_at, not physically erased, to maintain traceability unless explicit policy mandates hard delete.\n\nAuthorization: Only accessible to admin/ops roles, not customers or sellers (unless through process). Handles shipment cleanup, error rectification, and ensures proper cascade for fulfillment trace/audit. Errors must clearly indicate delete eligibility and references.",
    "summary": "Delete a shipment record by id (ai_ecommerce_shipment).",
    "parameters": [
      {
        "name": "id",
        "description": "ID (uuid) of the shipment to be deleted.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Result status of deletion operation.",
      "typeName": "ai_ecommerce_shipment.IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/shipments/{id}",
    "method": "delete"
  },
  {
    "specification": "Provides paginated, filterable list of return (and cancellation) requests from ai_ecommerce_return_request. Supports business, compliance, and user support workflows. Linked to orders/customers, supporting search by status/date/type, etc.",
    "description": "This operation retrieves multiple return request records, supporting business logic for refunds, returns, cancellation, and compliance. Uses ai_ecommerce_return_request as the backend data store. Filters include status, type, date, and customer/order ids. Results are paginated.\n\nIntended for agents/admins reviewing returns, platform audits, and sellers monitoring customer return flows. Always returns only non-deleted requests. Can be extended to include aggregation or summary analytics.",
    "summary": "List/search ai_ecommerce_return_request records with pagination/filtering.",
    "parameters": [],
    "requestBody": {
      "description": "Filter/search params for returns/cancellation requests.",
      "typeName": "ai_ecommerce_return_request.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of return/cancellation request records.",
      "typeName": "ai_ecommerce_return_request.IPage"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/returnRequests",
    "method": "patch"
  },
  {
    "specification": "Retrieves single return or cancellation request details from ai_ecommerce_return_request by id (UUID). Used for support tracking, workflow, refund/cancellation, and audit.",
    "description": "Returns detailed information for a customer-initiated return/cancellation tracked in ai_ecommerce_return_request, querying by id. Includes all compliance/audit fields, with order association, type, status, reason, timestamps, and outcome history.\n\nAuthorization: Only the owning customer, admin, or relevant support agents may access sensitive request details. Missing/nonexistent or soft deleted requests should emit a clear error.\n\nTypical consumers: support dashboards, seller resolution/responses, platform audits, refund processing workflows.",
    "summary": "Get detailed ai_ecommerce_return_request record by id.",
    "parameters": [
      {
        "name": "id",
        "description": "Return request id (uuid).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed return/cancellation request entity.",
      "typeName": "ai_ecommerce_return_request"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/returnRequests/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new return request or order cancellation in ai_ecommerce_return_request. Used by customer self-service and admin/support on behalf. Captures all info for business/audit needs. Enforces validation on order association, return/cancel type, and compliance constraints.",
    "description": "This API enables end users or authorized support/admins to open a new return/cancellation request for an order. The body must include order_id, customer_id, type, status, and optional reason/notes. Logic covers eligibility, duplicates, and compliance flags (e.g., return window limits, already returned/canceled).\n\nIf the referenced order does not exist, or the request fails business rules, a descriptive error is returned. Success returns the new request record (with generated id and initial status). Records are always auditable, traced for all compliance logic.",
    "summary": "Open new return/cancellation request (ai_ecommerce_return_request).",
    "parameters": [],
    "requestBody": {
      "description": "Details for the return/cancellation request to be created.",
      "typeName": "ai_ecommerce_return_request.ICreate"
    },
    "responseBody": {
      "description": "Created return/cancellation request entity.",
      "typeName": "ai_ecommerce_return_request"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/returnRequests",
    "method": "post"
  },
  {
    "specification": "Edits/updates an existing return or cancellation request in ai_ecommerce_return_request by id. Used for status updates, information corrections, or workflow progression. Performs all business validations for status transitions, mutable fields, and compliance controls.",
    "description": "Updates a return request, referenced by id. Modifiable fields may include status, reason, and other audit-controlled values. Only eligible if status permits mutation (e.g., not closed, refunded, or terminally rejected). Constraints validate identity/eligibility of requesting actor. Records are always changed with compliance/audit guarantees (timestamps, who/why for change tracking).\n\nPartial updates allowed (PATCH logic can be supported at handler level)—all changes validated and returned as updated record. Errors on non-existent, immutable, or forbidden updates must be clear. Typical users: admin, agent, or customer (for their own requests).",
    "summary": "Update return/cancellation request (ai_ecommerce_return_request) by id.",
    "parameters": [
      {
        "name": "id",
        "description": "ID of return/cancellation request to update (uuid).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updatable fields for the return/cancellation request.",
      "typeName": "ai_ecommerce_return_request.IUpdate"
    },
    "responseBody": {
      "description": "Updated return/cancellation request record.",
      "typeName": "ai_ecommerce_return_request"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/returnRequests/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes (soft/hard per policy) a return or cancellation request from ai_ecommerce_return_request by id (uuid). Used for error correction, admin cleanup, or compliance removal. Enforces full business validation for delete eligibility, references, audit retention.",
    "description": "Allows permitted actors (e.g., admin/support) to mark a return/cancellation request as deleted. Effector role and eligibility checked for policy compliance. If referenced in audit or not eligible for deletion, operation is blocked. Record marked by deleted_at unless configuration demands hard delete.\n\nReturns operation outcome/status. Handles error reporting on reference/constraint or permissions.",
    "summary": "Delete a return/cancellation request by id (ai_ecommerce_return_request).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of return/cancellation request to delete (uuid).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Deletion status/result for the return/cancellation request.",
      "typeName": "ai_ecommerce_return_request.IDeleteResult"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/returnRequests/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a paginated/filterable list of coupon records from ai_ecommerce_coupon. Used for monitoring, customer wallet/accounting, and platform/seller promotion administration.",
    "description": "This operation returns a paginated, searchable list of coupon records from ai_ecommerce_coupon, filtered by status, code, owner, issuer, rule, dates, etc. Enforces permissions: owner/admin/seller visibility. Typical use cases: customer wallet coupon listing, sales ops reporting, admin cleanup, platform promo dashboards. Return only non-expired and active coupons except by explicit admin search.\n\nResult set includes coupon detail, issuer/owner, promotion context, and compliance/limit metadata. Pagination and search must be efficient for operational uses.",
    "summary": "Filter/search paginated coupons list from ai_ecommerce_coupon.",
    "parameters": [],
    "requestBody": {
      "description": "Filtering/search parameters for coupon queries.",
      "typeName": "ai_ecommerce_coupon.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of coupons matching criteria.",
      "typeName": "ai_ecommerce_coupon.IPage"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/coupons",
    "method": "patch"
  },
  {
    "specification": "Retrieve single coupon detail from ai_ecommerce_coupon by coupon id (UUID). Used for wallet display, support, admin/seller promo management, or coupon redemption context.",
    "description": "Returns all details for a single coupon by its id. Includes owner (customer), issuer (seller or platform), linked discount rule, usage/expiry data, and status. If coupon is invalid/expired/deleted, must error distinctly. Permission enforcement ensures only authorized customer/admin/seller can fetch the detail for compliance and fraud protection. \n\nUse cases: displaying wallet coupons, validating coupon during checkout, support investigation of ownership/refund/validity, admin or seller promo management.",
    "summary": "Get detailed coupon (ai_ecommerce_coupon) by id.",
    "parameters": [
      {
        "name": "id",
        "description": "Coupon id (UUID) for detail lookup.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Coupon detail entity.",
      "typeName": "ai_ecommerce_coupon"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/coupons/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new coupon in the system, implementing the creation operation for the ai_ecommerce_coupon table in the DiscountLoyaltyPayment domain. This endpoint accepts all necessary coupon creation data, including customer association, issuing seller information, discount rule linkage, coupon code, issuance/expiration info, and redemption constraints. It enforces normalized creation without duplicate/cached fields. Security: usually requires administrator or seller privileges. All input must pass business rule validation, such as uniqueness constraints and rule linkage. Related endpoints include those for editing/deleting coupons and retrieving coupon usage. Errors handled include duplicate code, invalid user/seller, or business rules violations.",
    "description": "This API endpoint allows platform administrators or sellers to create a new coupon in the DiscountLoyaltyPayment system, as specified by the ai_ecommerce_coupon Prisma table. The input must provide all fields required for the coupon's lifetime, including which customer (if personalized), which seller (for seller-issued promotions), the associated discount rule, the unique coupon code, issuance/expiration timestamps, and all redemption/usage constraints (such as limits and active flag). The endpoint enforces business logic by validating unique constraints (code/customer pair), foreign key resolvability (customer_id, seller_id, discount_rule_id), and input formats (dates, codes). Duplicate codes or invalid relationships return detailed errors. This is for normalized creation—no aggregates or denormalized values accepted.",
    "summary": "Create a new coupon (ai_ecommerce_coupon table).",
    "parameters": [],
    "requestBody": {
      "description": "Coupon creation payload.",
      "typeName": "IAiEcommerceCoupon.ICreate"
    },
    "responseBody": {
      "description": "Created coupon record.",
      "typeName": "IAiEcommerceCoupon"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/coupons",
    "method": "post"
  },
  {
    "specification": "Update details for an existing coupon by its unique ID in the ai_ecommerce_coupon table. This endpoint allows administrators or sellers to update eligible coupon fields (expiration, metadata, limits), but typically cannot change core associations like code or customer_id after creation. Security checks are enforced to restrict who can edit the coupon. Validation covers business rule enforcement for ongoing promotion integrity. Related endpoints include get coupon by ID or coupon deletion.",
    "description": "This PUT operation targets updating an existing coupon in the ai_ecommerce_coupon table (DiscountLoyaltyPayment domain). Permitted fields for update may include expiration, usage limits, and metadata, but the coupon code, customer, and issuance are often immutable after creation for auditability and compliance. On submission, the system checks permissions, enforces normalization (e.g., no duplicate coupon code assignment), and validates input formats. Attempts to update forbidden fields will result in business logic errors; for example, code might not be updatable after first use. Foreign key references (e.g., to rule or seller) must remain valid. Usage scenarios include campaign extensions, early deactivation, and rule adjustments. Error handling responds to invalid input, non-existent coupon, or privilege violation.",
    "summary": "Update coupon details by ID (ai_ecommerce_coupon table).",
    "parameters": [
      {
        "name": "id",
        "description": "Target coupon's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Coupon update information.",
      "typeName": "IAiEcommerceCoupon.IUpdate"
    },
    "responseBody": {
      "description": "Updated coupon record.",
      "typeName": "IAiEcommerceCoupon"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/coupons/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft-delete or fully remove) a coupon by its unique ID from the ai_ecommerce_coupon table, supporting compliance and administrative needs for the DiscountLoyaltyPayment domain. Typically restricted to administrators or authorized sellers, deletion is subject to constraints (e.g., cannot fully remove used/expired coupons for auditability). Endpoint enforces audit/compliance by marking a coupon as inactive or deleting under strict rules. Related endpoints: creation, update, retrieval by ID.",
    "description": "This DELETE operation targets the removal or soft-deletion of a coupon given its unique ID, as implemented in the ai_ecommerce_coupon table. For compliance, most deletions will be soft-deletes—setting an inactive state or deleted_at timestamp for later audit. Coupon deletion may be restricted for active, redeemed, or expired coupons. Security ensures only authorized actors can perform deletion, and business logic prevents loss of audit trails. On success, the system returns confirmation of state change. Failure modes include non-existent coupon ID, privilege violation, or restricted deletion due to compliance requirements.",
    "summary": "Delete a coupon by ID (ai_ecommerce_coupon table).",
    "parameters": [
      {
        "name": "id",
        "description": "Target coupon's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of coupon deletion or state change.",
      "typeName": "IDeleteConfirmation"
    },
    "authorizationRoles": [
      "administrator",
      "seller"
    ],
    "path": "/ai_ecommerce/coupons/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a paginated list of loyalty point transactions (ai_ecommerce_loyalty_point), supporting searching/filtering (e.g., by customer, order, date, reason). This endpoint allows analytical review or export of all loyalty points changes for reporting and customer support. Security: Only administrators or the referenced customer can retrieve records. Supports business logic filters such as date range, customer, order, or reason.",
    "description": "This PATCH operation retrieves a filtered list of loyalty point records from ai_ecommerce_loyalty_point, with support for pagination, date filtering, customer-order filtering, and search by reason or event type. Required for operational reporting, customer service, and analytics. The request body should allow filters such as customer_id, order_id, date ranges, tier, and reason, along with page/size controls. Returns items with matching criteria, including paginated total count and item data. Authorization ensures only allowed actors can view records. Related endpoints: retrieve by ID, create accrual/write transaction, update (for correction), delete (for audit correction).",
    "summary": "List/search loyalty point transactions (ai_ecommerce_loyalty_point).",
    "parameters": [],
    "requestBody": {
      "description": "Filter, pagination, and search criteria for loyalty points.",
      "typeName": "IAiEcommerceLoyaltyPoint.IListRequest"
    },
    "responseBody": {
      "description": "Paginated result of loyalty point records.",
      "typeName": "IPageIAiEcommerceLoyaltyPoint"
    },
    "authorizationRoles": [
      "administrator",
      "customer"
    ],
    "path": "/ai_ecommerce/loyaltyPoints",
    "method": "patch"
  },
  {
    "specification": "Retrieve a single loyalty point record from the ai_ecommerce_loyalty_point table by its unique ID. Used for detailed audit, support, or customer self-service review. Authorization: Only administrators or the customer related to the record may access. Related APIs provide listing, creation/accrual, corrections, and deletions.",
    "description": "This GET operation fetches a single loyalty point transaction record, by its UUID, from the ai_ecommerce_loyalty_point table in the DiscountLoyaltyPayment domain. It is used for detailed examination of loyalty program events—accruals, redemptions, manual adjustments—either for audit or operational review. Authorization is enforced so that only the record owner (customer) or an administrator can retrieve sensitive detail. Business logic ensures the ID is found and not deleted; errors are returned for missing/invalid IDs or privilege issues. Returns the normalized point event record, with all relevant references (e.g., order, tier, etc.) resolved as needed.",
    "summary": "Get a loyalty point record by ID (ai_ecommerce_loyalty_point).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique loyalty point record ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Single loyalty point transaction record.",
      "typeName": "IAiEcommerceLoyaltyPoint"
    },
    "authorizationRoles": [
      "administrator",
      "customer"
    ],
    "path": "/ai_ecommerce/loyaltyPoints/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new loyalty point transaction (accrual, redemption, or adjustment) in the DiscountLoyaltyPayment system. Implements the ai_ecommerce_loyalty_point table creation logic. Requires all details for posting an event: customer, event type (reason), amount, and related references. Input validation: positive/negative points, allowed reason codes, date must not be in the future. Administrator or system privilege typically required for adjustments; customers for earning/spending. Security & audit controls enforced.",
    "description": "This POST operation creates a new loyalty point event in the ai_ecommerce_loyalty_point table, representing point accrual, redemption, or administrative adjustment. Input must meet schemas for atomic, normalized point events—customer reference, optional order, tier at event time, change amount (positive or negative), and event reason. System validates the operation for business rules (e.g., sufficient balance for redemption, valid order for purchase events, allowed reason codes). Privilege checks apply: customers may only create in response to purchases, while administrators can post manual adjustments. Successfully returns the created event. Failure scenarios include invalid foreign keys, date logic, or rule violations.",
    "summary": "Create a new loyalty point event (ai_ecommerce_loyalty_point).",
    "parameters": [],
    "requestBody": {
      "description": "Payload for loyalty point event creation.",
      "typeName": "IAiEcommerceLoyaltyPoint.ICreate"
    },
    "responseBody": {
      "description": "Created loyalty point record.",
      "typeName": "IAiEcommerceLoyaltyPoint"
    },
    "authorizationRoles": [
      "administrator",
      "customer"
    ],
    "path": "/ai_ecommerce/loyaltyPoints",
    "method": "post"
  },
  {
    "specification": "Update a loyalty point event in the ai_ecommerce_loyalty_point table by ID. Permitted only for corrections prior to finalization or in rare cases (e.g., administrator adjustment). Input includes only updatable fields (such as correction of reason or amount, not customer/order association). Auditable operation with strict business rule and compliance enforcement. Security: only administrators can typically update after creation except in system-driven scenarios.",
    "description": "This operation updates select fields of an existing loyalty point record, identified by ID, in ai_ecommerce_loyalty_point. Most loyalty point events should never be edited after creation for compliance, but correction scenarios (administrator error, reversal) are allowed. Updatable fields might include reason, change amount, or tier at event time, but not the core actor (customer/order). Endpoint enforces audit logging, compliance, and privilege control, and will reject forbidden field changes or late edits per policy. Returns the normalized, updated point event upon success. Error handling covers non-existent ID, invalid business state, or privilege error.",
    "summary": "Update a loyalty point record (ai_ecommerce_loyalty_point) by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Target loyalty point ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Update data for loyalty point record.",
      "typeName": "IAiEcommerceLoyaltyPoint.IUpdate"
    },
    "responseBody": {
      "description": "Updated loyalty point record.",
      "typeName": "IAiEcommerceLoyaltyPoint"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/loyaltyPoints/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft-delete or fully remove) a loyalty point record by its ID from the ai_ecommerce_loyalty_point table. Intended for compliance or administrative correction. Security: usually restricted to administrator-level permission. Auditability and soft-delete logic enforced as per compliance rules. Related endpoints: creation, update, get-by-ID.",
    "description": "This endpoint removes or marks as deleted a loyalty point event record in ai_ecommerce_loyalty_point, by unique ID. For compliance, usually this operation marks the record as deleted for audit trace, not a hard delete. Allowed only for administrators or under very specific business conditions (e.g., correction of error). Endpoint enforces strict privilege control and compliance audit requirements. Upon success, returns a confirmation object; errors include record not found, privilege violation, or compliance restriction. No irreversible removal if forbidden by compliance policy.",
    "summary": "Delete (soft-delete) loyalty point record by ID (ai_ecommerce_loyalty_point).",
    "parameters": [
      {
        "name": "id",
        "description": "Loyalty point record's unique ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Result/confirmation of record deletion or state change.",
      "typeName": "IDeleteConfirmation"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/loyaltyPoints/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a paginated list of loyalty tiers (ai_ecommerce_loyalty_tier) with search and filtering support. Used by platform/administrators or system UIs to display, filter, and manage tiers (e.g. by points required, order, or name). Only administrators may manage tiers. Supports full lifecycle, including listing for assignment to users. Pagination etc. supported.",
    "description": "This PATCH endpoint retrieves the list of loyalty tier records from the ai_ecommerce_loyalty_tier table, supporting pagination, filtering, and sorting for operational, configuration, or display needs. Input supports filtering by name, minimum points, or order. The result contains normalized tier records in paginated form, usable by administrator UIs or system config logic. Authorization restricts to administrator or system actors. Related endpoints: create/update tier, get-by-ID, delete.",
    "summary": "List/search loyalty tiers (ai_ecommerce_loyalty_tier).",
    "parameters": [],
    "requestBody": {
      "description": "Filtering and pagination request body for loyalty tiers.",
      "typeName": "IAiEcommerceLoyaltyTier.IListRequest"
    },
    "responseBody": {
      "description": "Paginated result of loyalty tier records.",
      "typeName": "IPageIAiEcommerceLoyaltyTier"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/loyaltyTiers",
    "method": "patch"
  },
  {
    "specification": "Fetch a single loyalty tier by its unique ID from the ai_ecommerce_loyalty_tier table. Used for detail view, editing, or assignment logic. Authorization: administrator only. Input is the tier UUID. Related endpoints: list/search, create, update, delete.",
    "description": "This endpoint retrieves one loyalty tier record from the ai_ecommerce_loyalty_tier table in DiscountLoyaltyPayment by its unique ID (UUID). Used by administrators for viewing or preparing to update tier information, or for system assignment logic. Input must be a valid UUID; output is the normalized tier record. Authorization ensures only administrators may fetch; errors returned for not-found or privilege violations. No soft-deletion assumed for tiers; business logic may enforce uniqueness or audit consistency.",
    "summary": "Get a loyalty tier by ID (ai_ecommerce_loyalty_tier).",
    "parameters": [
      {
        "name": "id",
        "description": "Target loyalty tier's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Loyalty tier record detail.",
      "typeName": "IAiEcommerceLoyaltyTier"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/loyaltyTiers/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new loyalty tier in the ai_ecommerce_loyalty_tier table, supporting the onboarding of new reward levels. Only administrators may create. Input includes all tier-defining fields: name, min points, multiplier, sort order. Audit captured for compliance. Related endpoints: list, update, delete.",
    "description": "This POST endpoint adds a new loyalty tier record into the ai_ecommerce_loyalty_tier table (DiscountLoyaltyPayment). Input must specify name, required points, multiplier, and sort order. System enforces uniqueness, proper range on fields, and audit rules. Validations include ensuring no duplicate names and numeric/format restrictions. Requires administrator privileges. Returns the created normalized tier record or error on failure. Related APIs: list all tiers, get tier by ID, edit, and delete.",
    "summary": "Create a loyalty tier (ai_ecommerce_loyalty_tier).",
    "parameters": [],
    "requestBody": {
      "description": "Payload for tier creation.",
      "typeName": "IAiEcommerceLoyaltyTier.ICreate"
    },
    "responseBody": {
      "description": "Created tier record.",
      "typeName": "IAiEcommerceLoyaltyTier"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/loyaltyTiers",
    "method": "post"
  },
  {
    "specification": "Update an existing loyalty tier (ai_ecommerce_loyalty_tier) by ID. Used for maintaining/updating reward program levels. Administrators only, with strict field control and compliance audit. Input is the tier ID and only updatable fields such as name, points, multiplier or sort order. Uniqueness/business logic enforced by system.",
    "description": "PUT operation for updating a loyalty tier record specified by ID in ai_ecommerce_loyalty_tier. Input is the tier UUID and the set of updatable fields (name, multiplier, minimum points, sort order). Non-editable fields (if any) are rejected on input. System enforces business rules: uniqueness of name/order, numeric validation, and compliance audit trace. Authorization ensures administrators only can update. Returns updated normalized tier record or error if update is invalid (e.g. duplicate name/order).",
    "summary": "Update a loyalty tier by ID (ai_ecommerce_loyalty_tier).",
    "parameters": [
      {
        "name": "id",
        "description": "Target loyalty tier ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Update data for loyalty tier record.",
      "typeName": "IAiEcommerceLoyaltyTier.IUpdate"
    },
    "responseBody": {
      "description": "Updated loyalty tier record.",
      "typeName": "IAiEcommerceLoyaltyTier"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/loyaltyTiers/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a specific loyalty tier. This operation removes the loyalty tier resource identified by the specified ID. It is used to manage the available loyalty tiers on the AI E-commerce platform. The operation references the ai_ecommerce_loyalty_tier table in the database.",
    "description": "This API endpoint enables administrators to delete a loyalty tier from the AI E-commerce loyalty program. The ai_ecommerce_loyalty_tier table stores information about each customer loyalty tier (e.g., 'Silver', 'Gold', 'Diamond'), including its minimum point requirement, multiplier, and display order.\n\nWhen a DELETE request is made to this endpoint with a valid loyalty tier ID, the corresponding entry will be deleted from the database. This operation should be restricted to administrators or privileged roles, as deleting a tier may impact loyalty benefits, analytics, and historical records for customers. Associated loyalty point transactions or references are not deleted but will need separate handling in client logic. Attempting to delete a tier that is referenced in point transactions may fail or return an error depending on business rules.\n\nDeleting tiers may also affect analytics calculations, customer eligibility, and ongoing promotions. Permission and audit logging are recommended for compliance. This operation is part of overall loyalty program configuration (CRUD) and should be paired with create, update, and list tier operations for full management.",
    "summary": "Delete a loyalty tier (ai_ecommerce_loyalty_tier).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the loyalty tier to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/loyaltyTiers/{id}",
    "method": "delete"
  },
  {
    "specification": "List and search available customer wallets. This operation supports pagination, filtering, and complex queries for the ai_ecommerce_wallet table.",
    "description": "This PATCH endpoint retrieves a paginated list of customer wallets from the ai_ecommerce_wallet table. The wallet entity holds information about customer wallets for platform credits, storing wallet currency, creation timestamp, and active status (without running balances). Clients can provide complex query parameters in the request body for pagination, sorting, or filtering (e.g., by customer_id, currency_code, active status).\n\nThe endpoint is typically used by administrators for management and oversight, or by customers to view their own wallets. Permissions should restrict full listings to privileged roles to protect account privacy. This operation is essential for financial analytics, reconciliations, customer support, and wallet discovery. The response contains wallet summaries as defined in the ai_ecommerce_wallet schema and may include additional pagination or filter metadata for client UI.",
    "summary": "List/search customer wallets (ai_ecommerce_wallet).",
    "parameters": [],
    "requestBody": {
      "description": "Filter, pagination, and search parameters for wallet list retrieval.",
      "typeName": "ai_ecommerce_wallet.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of customer wallet summaries.",
      "typeName": "IPageai_ecommerce_wallet"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/wallets",
    "method": "patch"
  },
  {
    "specification": "Get an individual wallet resource. This operation fetches the details for a single ai_ecommerce_wallet entity based on its unique identifier.",
    "description": "This GET endpoint retrieves the details for a specific wallet resource from the ai_ecommerce_wallet table. Each wallet entry contains metadata such as the associated customer, wallet currency, status, and creation information (but does not include the running balance, which must be computed separately).\n\nUsed primarily by the owning customer or platform admins, this endpoint supports secure retrieval for account management, financial audits, and wallet reconciliation. The request must specify a valid wallet ID as a URL path parameter. The response returns all non-sensitive wallet data for the identified wallet. Sensitive actions and direct balance modification must be implemented elsewhere. Permissions may restrict access to the wallet owner and authorized administrators. Audit logs for access are recommended.",
    "summary": "Get a customer wallet by ID (ai_ecommerce_wallet).",
    "parameters": [
      {
        "name": "id",
        "description": "Wallet ID to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Customer wallet details.",
      "typeName": "ai_ecommerce_wallet"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/wallets/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new customer wallet. This operation inserts a record into the ai_ecommerce_wallet table based on provided creation data.",
    "description": "This POST endpoint enables the creation of a new wallet in the ai_ecommerce_wallet table. The request body must supply all required information, such as the customer_id and wallet currency_code. Only one wallet per customer/currency pair is allowed (enforced by unique index). Optionally, is_active may be set on creation.\n\nWallet creation may be used to support new account opening, enable multi-currency wallets, or initialize platform credit accounts for new users. Access control should ensure that only privileged users (or the customer themselves) can create wallets. All written wallet records are auditable, and business logic must enforce unique constraints across customer_id and currency_code to prevent duplicates. Sensitive, privileged operations (such as adjusting balances) must not be handled in this endpoint.",
    "summary": "Create a new customer wallet (ai_ecommerce_wallet).",
    "parameters": [],
    "requestBody": {
      "description": "Information needed to create the wallet (customer, currency, etc.).",
      "typeName": "ai_ecommerce_wallet.ICreate"
    },
    "responseBody": {
      "description": "Created wallet resource.",
      "typeName": "ai_ecommerce_wallet"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/wallets",
    "method": "post"
  },
  {
    "specification": "Update an existing customer wallet. This endpoint modifies ai_ecommerce_wallet properties by ID.",
    "description": "This PUT endpoint updates the details for an existing wallet resource in the ai_ecommerce_wallet table. Updates may include activating or deactivating a wallet or changing metadata such as the currency code. Only valid, mutable fields as defined in the ai_ecommerce_wallet schema should be changed; balance changes are not performed via this endpoint.\n\nThe path parameter indicates the wallet resource to update. Permissions should ensure that only wallet owners and/or authorized admins can update wallets. Update actions should be logged for compliance. Attempts to update with duplicate customer/currency_code combinations or to update immutable fields should result in errors per business rules.",
    "summary": "Update a customer wallet by ID (ai_ecommerce_wallet).",
    "parameters": [
      {
        "name": "id",
        "description": "Wallet ID to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "New wallet properties to update.",
      "typeName": "ai_ecommerce_wallet.IUpdate"
    },
    "responseBody": {
      "description": "Updated wallet details.",
      "typeName": "ai_ecommerce_wallet"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/wallets/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a customer wallet. This operation removes the ai_ecommerce_wallet record for the specified ID.",
    "description": "This DELETE endpoint deletes an existing wallet from the ai_ecommerce_wallet table, identified by the wallet ID path parameter. Deleting a wallet may impact a customer's ability to use wallet funds, make deposits, or conduct payments, so appropriate checks must be performed. Soft-delete patterns may be used depending on business policy.\n\nOnly authorized customers or platform administrators can perform wallet deletions. Audit and compliance logging should be implemented for this operation. Wallets must no longer be referenced by open transactions prior to deletion, or the operation should return an appropriate error.",
    "summary": "Delete a customer wallet by ID (ai_ecommerce_wallet).",
    "parameters": [
      {
        "name": "id",
        "description": "Wallet ID to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/wallets/{id}",
    "method": "delete"
  },
  {
    "specification": "Get a paginated list/search result of wallet transactions (ai_ecommerce_wallet_transaction table).",
    "description": "This PATCH endpoint retrieves a paginated and filtered list of wallet transaction activity. The ai_ecommerce_wallet_transaction table records all inflows and outflows for customer wallets, with fields for associated wallet, order, payment, change amount, currency, transaction type, and timestamp.\n\nUse this endpoint to audit customer wallet transactions, perform reconciliation, user account management, or compliance reporting. The request body supports pagination, filtering (e.g., by transaction type, customer, order), and advanced searching. Sensitive data should be limited in the response as appropriate. Audit logs should record access for compliance.",
    "summary": "Search paginated wallet transactions (ai_ecommerce_wallet_transaction).",
    "parameters": [],
    "requestBody": {
      "description": "Filter/pagination/search options for transaction listing.",
      "typeName": "ai_ecommerce_wallet_transaction.IRequest"
    },
    "responseBody": {
      "description": "Paginated wallet transaction data.",
      "typeName": "IPageai_ecommerce_wallet_transaction"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/walletTransactions",
    "method": "patch"
  },
  {
    "specification": "Get an individual wallet transaction. This operation fetches a wallet transaction from ai_ecommerce_wallet_transaction by ID.",
    "description": "This GET endpoint retrieves a single wallet transaction from the ai_ecommerce_wallet_transaction table. Each transaction documents a specific inflow or outflow for a customer wallet, with details such as wallet, order/payment association, amount, currency, type, and timestamp.\n\nRestricted to the wallet owner or privileged users, this endpoint is used for transaction lookup, financial audits, or customer support. Path parameter must be a valid UUID for the transaction. Access must be logged, and sensitive fields must be filtered depending on role.",
    "summary": "Get a wallet transaction by ID (ai_ecommerce_wallet_transaction).",
    "parameters": [
      {
        "name": "id",
        "description": "Transaction ID to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Wallet transaction detail.",
      "typeName": "ai_ecommerce_wallet_transaction"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/walletTransactions/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new wallet transaction. This operation adds a new inflow/outflow record to ai_ecommerce_wallet_transaction.",
    "description": "This POST endpoint creates a new wallet transaction (deposit, payment, refund, etc.) for a given wallet. The request body provides all required transaction info such as wallet ID, amount, currency, transaction type, and optional related order/payment IDs. No aggregate or live balance fields are mutated here.\n\nCreation is typically triggered by deposit, purchase, or platform adjustments. The endpoint must enforce permissions and audit logging to ensure only valid, authorized operations are performed. Business logic must validate change_amount, wallet status, and transaction type constraints. Double-spending and orphan transactions must be prevented by transactional checks. Only insert operations (no direct updates to running balance via this endpoint).",
    "summary": "Create a wallet transaction (ai_ecommerce_wallet_transaction).",
    "parameters": [],
    "requestBody": {
      "description": "Wallet transaction data to be created.",
      "typeName": "ai_ecommerce_wallet_transaction.ICreate"
    },
    "responseBody": {
      "description": "Created wallet transaction.",
      "typeName": "ai_ecommerce_wallet_transaction"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/walletTransactions",
    "method": "post"
  },
  {
    "specification": "Update an existing wallet transaction. This operation patches ai_ecommerce_wallet_transaction by UUID.",
    "description": "This PUT endpoint updates the properties of a specific wallet transaction identified by ID. Only permitted, mutable fields should be allowed in the request body (e.g., correction of transaction metadata), and business rules (such as locked/immutable status after posting) must be enforced.\n\nPath parameter is the transaction ID. The request body specifies updated transaction property values. Permissions should ensure only authorized roles update wallet transactions. Updates may be limited or logged for regulatory compliance. Immutability rules for completed/refunded transactions may result in error if violated.",
    "summary": "Update a wallet transaction by ID (ai_ecommerce_wallet_transaction).",
    "parameters": [
      {
        "name": "id",
        "description": "Transaction ID to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update in the wallet transaction.",
      "typeName": "ai_ecommerce_wallet_transaction.IUpdate"
    },
    "responseBody": {
      "description": "Updated wallet transaction details.",
      "typeName": "ai_ecommerce_wallet_transaction"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/walletTransactions/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a wallet transaction. This operation deletes the ai_ecommerce_wallet_transaction row for the specified UUID.",
    "description": "This DELETE endpoint deletes a wallet transaction identified by the UUID path parameter, from ai_ecommerce_wallet_transaction. Only authorized accounts (admin or wallet owner) should be able to delete a transaction, and only if not locked/settled.\n\nDeletion may be soft or hard depending on compliance rules. The endpoint must enforce business rules around immutability, audit, and reconciliation, as direct deletion of wallet transactions can undermine audit integrity. Audit logs and additional permission checks are highly recommended.",
    "summary": "Delete a wallet transaction by ID (ai_ecommerce_wallet_transaction).",
    "parameters": [
      {
        "name": "id",
        "description": "Transaction ID to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/walletTransactions/{id}",
    "method": "delete"
  },
  {
    "specification": "List, search, and page all available payment integration configurations. Source table: ai_ecommerce_payment_integration.",
    "description": "This PATCH endpoint returns a list or filtered set of payment integration providers. Each integration in ai_ecommerce_payment_integration defines a payment provider, its active status, provider name, and configuration settings. Used for admin configuration, onboarding new gateways, or auditing integrated providers.\n\nClient can provide pagination, filter, and sort request body to find integrations matching certain criteria (e.g., active, by provider_name). Sensitive configuration blobs must be treated carefully in the response to avoid credential leakage. Access to the endpoint is typically restricted to privileged users and audit logs are recommended.",
    "summary": "Search/list payment integration configurations (ai_ecommerce_payment_integration).",
    "parameters": [],
    "requestBody": {
      "description": "Filter, pagination, and search info for payment providers.",
      "typeName": "ai_ecommerce_payment_integration.IRequest"
    },
    "responseBody": {
      "description": "Paginated payment integration provider configurations.",
      "typeName": "IPageai_ecommerce_payment_integration"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/paymentIntegrations",
    "method": "patch"
  },
  {
    "specification": "Fetch a specific payment integration configuration by its unique identifier. This operation retrieves all configuration details and metadata for a payment provider integration in the system (such as Stripe, KakaoPay, etc). The endpoint is mapped to the ai_ecommerce_payment_integration table, which stores the provider's name, settings JSON, active flag, and audit timestamps. Retrieval of a single integration enables administrative tasks including configuration review, debugging, or preparing for editing/deactivation. Access is generally restricted to admin/operator roles. The operation enforces that the provided id corresponds to a valid UUID. Related operations include creating, updating, or deleting payment integrations for managing supported payment providers.",
    "description": "This operation returns the detailed configuration and audit metadata for a single payment integration record, as defined in the ai_ecommerce_payment_integration table. The endpoint id parameter is required and must be a valid UUID referencing an existing integration.\n\nThe endpoint is intended for administrative use, such as reviewing or validating the current configuration of payment providers on the platform. This supports payment onboarding flows and compliance monitoring. Security requirements may include RBAC policies, ensuring only authorized administrators/managers access this sensitive setting. \n\nError responses are expected if the integration is not found, access is denied, or the id does not correspond to a valid record. This endpoint is typically used in conjunction with creation (POST), update (PUT), and deletion (DELETE) operations for the ai_ecommerce_payment_integration resource.\n\nSee also: POST /ai_ecommerce/paymentIntegrations, PUT /ai_ecommerce/paymentIntegrations/{id}, DELETE /ai_ecommerce/paymentIntegrations/{id}.",
    "summary": "Get payment integration configuration by id (ai_ecommerce_payment_integration).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique identifier of the payment integration to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The payment integration configuration and metadata.",
      "typeName": "IAiEcommercePaymentIntegration"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/paymentIntegrations/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new payment provider integration. This adds a new record to the ai_ecommerce_payment_integration table, storing details such as provider name, config JSON, active status, and creation metadata. Used for onboarding new payment methods, updating available payment gateways, or integrating with external payment processors. This endpoint is only available to platform administrators/operators. All necessary configuration data must be provided in the request body, which conforms to the IAiEcommercePaymentIntegration.ICreate schema.",
    "description": "This endpoint allows administrators to register a new payment integration, such as adding Stripe or KakaoPay as a supported provider. The request body defines all required fields in the ai_ecommerce_payment_integration table, including provider name (string), configuration_json (stringified JSON with encrypted keys or settings), is_active (boolean), and created_at (datetime).\n\nBehaviors include validating that the provider name is unique, encrypting sensitive info, and triggering provider verification workflows if needed. Only platform administrators/operators are authorized to use this endpoint, enforcing RBAC and audit logging. Similar operations include retrieval (GET by id), update (PUT), and deletion (DELETE) for existing records.\n\nFailure scenarios include invalid configuration, missing required fields, duplicate provider name, or lack of permissions.",
    "summary": "Create new payment integration (ai_ecommerce_payment_integration).",
    "parameters": [],
    "requestBody": {
      "description": "Details for the new payment integration provider.",
      "typeName": "IAiEcommercePaymentIntegration.ICreate"
    },
    "responseBody": {
      "description": "Created payment integration configuration and metadata.",
      "typeName": "IAiEcommercePaymentIntegration"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/paymentIntegrations",
    "method": "post"
  },
  {
    "specification": "Update the configuration of a payment provider integration by its unique identifier. The operation modifies an existing record in the ai_ecommerce_payment_integration table, used for refreshing API keys, toggling is_active, or updating provider configuration JSON. This is a privileged action available to administrators with appropriate permissions. The endpoint requires the id parameter and a full update request body (IAiEcommercePaymentIntegration.IUpdate). Typical use cases: re-enabling a paused integration, rotating credentials, or updating provider metadata.",
    "description": "This endpoint updates all or part of an existing payment integration's configuration in the ai_ecommerce_payment_integration table. The request must specify the id of the integration to update, along with a request body containing the updated configuration (such as provider name, configuration_json, is_active, etc). Operations may include validation of provider name uniqueness, sensitive key encryption, and compliance logging. \n\nAuthorization is required (administrator/operator). The endpoint may trigger related system events/audit logs after success or failure. Error handling covers missing ids, uniqueness violations, invalid configuration JSON, or permission errors. Related operations: GET for detail, POST for new integration, DELETE for removal.",
    "summary": "Update payment integration configuration by id (ai_ecommerce_payment_integration).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique identifier of the payment integration to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated payment integration configuration.",
      "typeName": "IAiEcommercePaymentIntegration.IUpdate"
    },
    "responseBody": {
      "description": "The updated payment integration record.",
      "typeName": "IAiEcommercePaymentIntegration"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/paymentIntegrations/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (deactivate) a specific payment integration provider by id. This operation removes or disables a configured payment provider in the ai_ecommerce_payment_integration table, identified by its unique id. This function is used in cases where a payment gateway must be disabled, removed for compliance, or offboarded from the platform. Only administrators/operators can perform this action; generally, the record is soft-deleted for auditability.",
    "description": "The endpoint deactivates or removes a payment integration provider configuration record, identified by its id (UUID). The deletion process may be a soft delete, preserving the audit trail for compliance. This protects the platform from accidental provider removal and enables audit reporting. Authorization for this endpoint is limited to administrators/operators; audit logging is required. The endpoint's successful completion means the payment integration is no longer active and thus cannot be selected for new transactions, but historical records are maintained.\n\nFailure scenarios include not found, already deactivated, or permission denied. Typical auxiliary actions: system events for integration removal, compliance verification triggers.",
    "summary": "Delete payment integration by id (ai_ecommerce_payment_integration).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique id of the payment integration to deactivate or remove.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The deleted/deactivated payment integration record.",
      "typeName": "IAiEcommercePaymentIntegration"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/paymentIntegrations/{id}",
    "method": "delete"
  },
  {
    "specification": "List discount rules with flexible filtering, search, and pagination. This endpoint serves as the central API for retrieving and searching discount rule definitions in the ai_ecommerce_discount_rule table, which supports coupon, loyalty, and promotional engine logic. Request body allows rich query options for rule_type, text search (predicate_json or description), sorting, and pagination structure (per IAiEcommerceDiscountRule.IRequest). Used by both admin UIs and programmatic engines for previewing or auditing promotion logic.",
    "description": "Returns a paginated list of discount rule definitions from the ai_ecommerce_discount_rule resource, supporting search, sort, and filtering parameters passed in the request body (such as rule_type and arbitrary query logic against predicate_json or description). This is the main endpoint for discovering, reviewing, and administrating all discount and promotional rules in the system. \n\nAccess is controlled by roles (administrator/operator); results are paginated (see IAiEcommercePageIAiEcommerceDiscountRule response) and may be sorted by created_at, rule_type, or relevance. Failure modes: invalid request parameters, permission error, or internal query error. This endpoint is frequently used in UIs and backoffice admin tools for campaign management, compliance, and system tuning.",
    "summary": "List/search discount rules (ai_ecommerce_discount_rule).",
    "parameters": [],
    "requestBody": {
      "description": "Flexible filtering, sorting, and pagination for discount rule search.",
      "typeName": "IAiEcommerceDiscountRule.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of discount rule definitions.",
      "typeName": "IAiEcommercePageIAiEcommerceDiscountRule"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/discountRules",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific discount rule by its unique identifier. This operation returns the full definition and metadata for a discount/promotion rule from ai_ecommerce_discount_rule table, such as fixed-amount, percentage, or stacking type. This is used to fetch details for campaign setup/editing, compliance, or rule analysis. Only accessible to authorized administrator/operator roles. The identifier must be a valid UUID and correspond to an existing discount rule.",
    "description": "This endpoint returns the definition and configuration details for a single discount or promotion rule as described in the ai_ecommerce_discount_rule table. Authorization is required (usually administrator/operator roles). The id parameter must be a valid UUID referencing an existing discount rule. Typical use cases include campaign preparation, editing, compliance review, and promotion debugging. \n\nReturns metadata such as rule_type, description, predicate_json, and creation date. Not found, permission denied, or invalid id are standard failure scenarios. Related operations: listing (PATCH), creation (POST), updating (PUT), and deletion (DELETE) for ai_ecommerce_discount_rule resources.",
    "summary": "Get discount rule by id (ai_ecommerce_discount_rule).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the discount rule to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Discount rule definition and metadata.",
      "typeName": "IAiEcommerceDiscountRule"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/discountRules/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new discount rule. This endpoint is used to define new coupon, loyalty, or promotional rules in ai_ecommerce_discount_rule. The request body provides the rule_type (e.g. percentage, fixed_amount), description, and predicate JSON logic (flexibly describing eligibility, stacking, etc). Used mainly by administrators/operators to extend and manage promotion engines. The schema is strictly IAiEcommerceDiscountRule.ICreate, and results in a new rule record for later assignment to coupons, campaigns, etc.",
    "description": "This operation allows privileged users (administrator/operator) to define a new discount rule that can be used for coupons, promotions, or loyalty programs in the ai_ecommerce_discount_rule table. The required properties include rule_type, description, and predicate_json specifying the eligibility/logic for the discount. The endpoint creates a new resource and returns the created rule record (metadata included).\n\nFailure scenarios: invalid rule definition, missing required property, permission denied, duplicate rule, or storage error. Related actions: rule listing (PATCH), rule detail retrieval (GET), update (PUT), and deletion (DELETE).",
    "summary": "Create new discount rule (ai_ecommerce_discount_rule).",
    "parameters": [],
    "requestBody": {
      "description": "Discount rule creation data.",
      "typeName": "IAiEcommerceDiscountRule.ICreate"
    },
    "responseBody": {
      "description": "The created discount rule resource.",
      "typeName": "IAiEcommerceDiscountRule"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/discountRules",
    "method": "post"
  },
  {
    "specification": "Update a discount rule by its unique identifier. This is used for editing rule definition, logic, or metadata in ai_ecommerce_discount_rule table. Typical properties include rule_type, description, and flexible predicate_json (config JSON). The endpoint requires the id parameter (UUID) and a request body confirming to IAiEcommerceDiscountRule.IUpdate. Commonly used for campaign adjustments, promotion editing, and compliance tuning. Accessible only to authorized roles (administrator/operator).",
    "description": "The endpoint modifies an existing discount/promotion rule's configuration by id, operating on the ai_ecommerce_discount_rule table. The request must provide the id (UUID) and a body with the new rule_type, description, and predicate_json properties (as supported by the schema). Validation includes uniqueness and business rules for rule logic. Full audit/compliance is logged. Only administrators/operators have access. Errors include not found, invalid update data, permission denied, or uniqueness conflict. Related actions: GET for detail, PATCH for search, POST for creation, DELETE for removal.",
    "summary": "Update discount rule by id (ai_ecommerce_discount_rule).",
    "parameters": [
      {
        "name": "id",
        "description": "The id (UUID) of the discount rule to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated discount rule details.",
      "typeName": "IAiEcommerceDiscountRule.IUpdate"
    },
    "responseBody": {
      "description": "Updated discount rule definition.",
      "typeName": "IAiEcommerceDiscountRule"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/discountRules/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a discount rule by its unique identifier. Used to safely remove outdated, duplicated, or noncompliant rule records from the ai_ecommerce_discount_rule table. Ensures the rule is not used in active campaigns/coupons before deletion. Soft-deletion is typical for retention and audit. Only authorized (administrator/operator) roles may perform this action. The id must be a valid UUID for the rule to delete. Deletion is logged for compliance.",
    "description": "This endpoint deletes (or deactivates) a discount or promotion rule specified by its id (UUID). The operation enforces RBAC (administrator/operator only) and ensures the deleted rule is not referenced in active promotions/coupons to prevent data integrity issues. The actual removal may be a soft delete, marking the rule as inactive while keeping metadata for compliance.\n\nThe endpoint returns the deleted or deactivated resource for audit purposes. Errors include not found, integrity violation, or access denied. Related operations: PATCH for listing/search, GET for details, POST for create, PUT for update.",
    "summary": "Delete discount rule by id (ai_ecommerce_discount_rule).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique id of the discount rule to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The deleted or deactivated discount rule.",
      "typeName": "IAiEcommerceDiscountRule"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/discountRules/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a flexible, paginated list of favorite products. This PATCH endpoint supports customer UIs, admin analytics, and system-level access, with filtering, search, and sort on the ai_ecommerce_favorite table. Request body follows IAiEcommerceFavorite.IRequest format, supporting searching by customer or product, filtering by tags, and UI-driven paging/sorting. Results are returned in a paged IAiEcommercePageIAiEcommerceFavorite response, with authorization depending on RBAC (customer limited to own data; admin/operator/analytics roles may access across customers).",
    "description": "Returns a paginated, filtered set of favorite product records as stored in ai_ecommerce_favorite. The filtering/searching/sorting model includes criteria such as customer_id, product_id, or favorite_tag_id. Request body follows IAiEcommerceFavorite.IRequest for search logic, page, and order. The response is paginated and includes IAiEcommerceFavorite records (plus metadata).\n\nAuthorization: By default, customers see only their own favorites; admins/operators may query system-wide. Typical errors: permission denied, invalid query, or engine error. Main use case: UI/catalog favorites browsing, analytics, or admin curation. Related endpoints: CRUD for individual favorite records and tags.",
    "summary": "List/search favorite products (ai_ecommerce_favorite).",
    "parameters": [],
    "requestBody": {
      "description": "Flexible filter/search/sort/pagination request for favorites listing.",
      "typeName": "IAiEcommerceFavorite.IRequest"
    },
    "responseBody": {
      "description": "Paginated favorite product result list.",
      "typeName": "IAiEcommercePageIAiEcommerceFavorite"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favorites",
    "method": "patch"
  },
  {
    "specification": "Retrieve a single favorite product record by its unique identifier. Typically used for customer UI detail view, admin inspection, or analytics. The endpoint returns the favorite's ID, customer, product, optional tag, and created timestamp as stored in ai_ecommerce_favorite. The id must be a valid UUID and reference an actual favorite record. Only the resource owner (customer), or privileged roles (admin/operator/analytics), may access this endpoint (RBAC enforced).",
    "description": "Returns a detail view of one favorite product relationship, as stored in ai_ecommerce_favorite. The id parameter must be a valid UUID. RBAC: customers may only get their own resources; admins/operators/analytics may access any. Typically used in UI detail pages, admin catalog browsing, or analytics review. If not found, or denied by RBAC, standard error responses returned. Fields include: id, customer_id, product_id, favorite_tag_id, created_at. Related endpoints include searching/paging the favorites list, creating, updating, or deleting favorites.",
    "summary": "Get favorite product by id (ai_ecommerce_favorite).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the favorite product record to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Favorite product record detail.",
      "typeName": "IAiEcommerceFavorite"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favorites/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new favorite product record. Available to authenticated customers (adding their own favorite), or by admin/operator roles (systemic favorite creation, analytics, recommendations, or UI bulk tools). The request body conforms to IAiEcommerceFavorite.ICreate, with customer_id, product_id, and optional tag. Result is a fully-detailed favorite entry, as stored in ai_ecommerce_favorite table. Use cases: customer favoriting a product, admin importing favorites, system recommendations. RBAC: customers may only create for themselves; others require privileged roles.",
    "description": "This endpoint creates a new favorite product entry by inserting a row in ai_ecommerce_favorite. Expected properties are customer_id (UUID), product_id (UUID), and optionally favorite_tag_id (UUID to group/tag). Only the customer (authenticated) can favorite their own product directly, but admins/operators/analytics may create records for analytics, UX onboarding, or other programmatic needs. Fields validated include resource ownership and tag linkage. Output is full favorite product record.\n\nTypical failure cases: not authorized, record already exists, missing required fields, or integrity violations. Related endpoints: searching (PATCH), retrieving (GET by id), or removing (DELETE, not present here).",
    "summary": "Create new favorite product (ai_ecommerce_favorite).",
    "parameters": [],
    "requestBody": {
      "description": "Favorite product creation data.",
      "typeName": "IAiEcommerceFavorite.ICreate"
    },
    "responseBody": {
      "description": "The newly created favorite product detail.",
      "typeName": "IAiEcommerceFavorite"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favorites",
    "method": "post"
  },
  {
    "specification": "Update an existing favorite. This operation is tied to the ai_ecommerce_favorite table. It allows a user to update a favorite record, such as changing its tag or associated metadata. Updating a favorite enables customers to curate and manage their list of favorite products accurately. The endpoint requires the favorite id as a path parameter. Only the owner of the favorite or authorized admin should be allowed to update. All update actions are subject to audit trail, and strict validation around id existence, ownership, and valid modifications are enforced.",
    "description": "This API endpoint is designed to update an existing favorite in the ai_ecommerce_favorite table. Each favorite represents a customer marking a product with an optional tag for personal organization. The API ensures strict permission checks; only the favorite's owner or an authorized administrator may update it. Changes can include switching the associated favorite_tag, updating linkages to products, or other allowed properties. Before any update, the API verifies that the favorite exists and that the requestor is allowed to modify it. All update actions are written to the audit log for compliance purposes. Invalid updates, attempts to reference non-existent favoriteTagId or productId, or insufficient permissions result in rejected requests with appropriate error messages. The update action joins other endpoints for favorites (add, remove, list) to form a complete CRUD suite for personal curation features in the next-gen shopping mall.",
    "summary": "Update a favorite entry (ai_ecommerce_favorite).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique identifier of the favorite to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated information for the favorite entry.",
      "typeName": "IAiEcommerceFavorite.IUpdate"
    },
    "responseBody": {
      "description": "The updated favorite record.",
      "typeName": "IAiEcommerceFavorite"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favorites/{id}",
    "method": "put"
  },
  {
    "specification": "Delete an existing favorite from the ai_ecommerce_favorite table. This operation permanently removes the favorite association for a customer. The endpoint requires the favorite id and ensures the user is authorized to delete their own favorite. Audit trails are generated for each delete.",
    "description": "This endpoint facilitates deletion of a favorite record from ai_ecommerce_favorite. Each favorite links a customer to a product (and optional tag). Only the owner or a privileged admin may perform this action; all permissions are checked before deletion proceeds. On successful deletion, the record is removed, and compliance audit log is updated. Appropriate error responses are issued for unauthorized attempts or missing records. This operation is complemented by create (POST), update (PUT), and retrieval (PATCH, GET) endpoints, providing a full lifecycle for the favorite resource.",
    "summary": "Delete a favorite entry (ai_ecommerce_favorite).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique identifier of the favorite to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favorites/{id}",
    "method": "delete"
  },
  {
    "specification": "Fetch a paginated and filterable list of favorite tags belonging to the current customer. This endpoint helps users manage, search, and browse all the tags used to organize their favorite products. The data is sourced from ai_ecommerce_favorite_tag and supports sorting, searching, and paging.",
    "description": "Retrieves a list of all favorite tags for the authenticated customer from the ai_ecommerce_favorite_tag table. Results can be filtered, sorted by creation timestamp or tag name, and paginated. Security and permissions ensure that only tags belonging to the caller are returned. The response includes enough context to allow the user to display or manage tags within their personalization interface. Associated endpoints support CRUD on tags. All list accesses are subject to rate limiting and auditing for suspicious activity.",
    "summary": "List and search customer favorite tags (ai_ecommerce_favorite_tag).",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination criteria for favorite tags.",
      "typeName": "IAiEcommerceFavoriteTag.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of favorite tags for the customer.",
      "typeName": "IPageIAiEcommerceFavoriteTag"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favoriteTags",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific favorite tag by ID from ai_ecommerce_favorite_tag. Used to display or manage a single tag in a user's favorites organization system.",
    "description": "Returns full details for a single favorite tag identified by its id from the ai_ecommerce_favorite_tag table. Only the owner or an authorized admin can access this resource. Provides complete information such as the tag's name, creation date, and any referencing favorite entries. Returns 404 if not found or the caller has no access. This API fits into a broader favorite tag management CRUD feature, supporting read, update, and delete operations. Permission and security checks are strictly enforced based on tag ownership.",
    "summary": "Get favorite tag by ID (ai_ecommerce_favorite_tag).",
    "parameters": [
      {
        "name": "id",
        "description": "The ID of the favorite tag to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Favorite tag details.",
      "typeName": "IAiEcommerceFavoriteTag"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favoriteTags/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new favorite tag for a customer. Tags allow customers to group favorites. The new tag is recorded in ai_ecommerce_favorite_tag and returned upon successful creation.",
    "description": "This endpoint creates a new favorite tag associated with the calling customer in the ai_ecommerce_favorite_tag table. The tag name must be unique for the customer, and validation ensures no duplicate tags are created. Permission checks restrict creation to the tag owner profile only (or privileged admin when applicable). The operation is logged for audit and compliance, and errors are raised on name conflict or invalid data. The API is part of the customer's toolkit for organizing products with custom tags, complimented by update, search, and delete endpoints.",
    "summary": "Create a new favorite tag (ai_ecommerce_favorite_tag).",
    "parameters": [],
    "requestBody": {
      "description": "Data for the new favorite tag.",
      "typeName": "IAiEcommerceFavoriteTag.ICreate"
    },
    "responseBody": {
      "description": "Details of the created favorite tag.",
      "typeName": "IAiEcommerceFavoriteTag"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favoriteTags",
    "method": "post"
  },
  {
    "specification": "Update a favorite tag. Lets users rename or re-categorize a tag organizing their favorites. Updates the ai_ecommerce_favorite_tag record and returns the new state.",
    "description": "Updates an existing favorite tag for a customer within the ai_ecommerce_favorite_tag table based on tag id. Users may rename their tags or otherwise modify tag properties. All permission checks are strictly enforced, and duplicate tag names within the same customer profile are prevented. Successful updates write an audit event. On conflict (name not unique) or insufficient permissions, returns appropriate error. The endpoint supports the broader favorite tags management workflow with create, list, and delete APIs.",
    "summary": "Update a favorite tag (ai_ecommerce_favorite_tag).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique id of the favorite tag to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated information for the favorite tag.",
      "typeName": "IAiEcommerceFavoriteTag.IUpdate"
    },
    "responseBody": {
      "description": "Updated favorite tag information.",
      "typeName": "IAiEcommerceFavoriteTag"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favoriteTags/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a favorite tag record from ai_ecommerce_favorite_tag. Tags are used for organizing personal favorites. The API requires a tag ID and verifies ownership/security before removal. Each deletion is audited.",
    "description": "Deletes a specific favorite tag, checking ownership, permission, and referential integrity. Will fail if tag is in use by existing favorites unless forced or only soft deletes allowed. The API writes a compliance event to the audit log. Not found, permission denied, or conflict errors are handled with clear responses for robust developer use. Complements favorite tag CRUD endpoints (add, update, list, get).",
    "summary": "Delete a favorite tag (ai_ecommerce_favorite_tag).",
    "parameters": [
      {
        "name": "id",
        "description": "The id of the favorite tag to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/favoriteTags/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a paginated list of recommendations for the authenticated customer from ai_ecommerce_recommendation. Supports filtering, search, and ordering. Used for displaying AI-powered product recommendations to the user.",
    "description": "Returns a customer-specific paginated, filterable list of product recommendations generated by the personalization engine. Data comes from the ai_ecommerce_recommendation table and may be scoped by time, reason code, or snapshot context. Supports full-search, AI-influenced ranking, and allows for browsing of recommendation history. The endpoint supports security restrictions to only expose recommendations owned by the authorized user (or appropriate admin). It supports searching, sorting, and pagination for user-friendly and scalable presentation. Complements create, detail, update, and delete recommendation endpoints.",
    "summary": "List and search recommendations (ai_ecommerce_recommendation).",
    "parameters": [],
    "requestBody": {
      "description": "Search and pagination query for recommendations.",
      "typeName": "IAiEcommerceRecommendation.IRequest"
    },
    "responseBody": {
      "description": "Paginated result of recommendations.",
      "typeName": "IPageIAiEcommerceRecommendation"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/recommendations",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific recommendation by its unique id from ai_ecommerce_recommendation. Used by customers to see details behind an AI-powered recommendation.",
    "description": "Returns a single detailed recommendation record from ai_ecommerce_recommendation based on id, provided the requestor has permission. Only authenticated profile owner or privileged admin can fetch the recommendation. This endpoint gives transparency into why a product was recommended, when, and which snapshot/context was used. Returns 404 if not found or if the access is forbidden. This resource also supports the update, delete, and list endpoints for a complete recommendation management experience.",
    "summary": "Get recommendation by ID (ai_ecommerce_recommendation).",
    "parameters": [
      {
        "name": "id",
        "description": "The id of the recommendation record to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The recommendation record details.",
      "typeName": "IAiEcommerceRecommendation"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/recommendations/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new recommendation record in ai_ecommerce_recommendation. This operation allows administrative/manual additions of recommendations (e.g., testing or white-listing for users). Creates a new recommendation row and returns the result.",
    "description": "Allows creation of a new AI-powered product recommendation entry for a user in the ai_ecommerce_recommendation table. Typically used by admin tools, QA, or for onboarding. Validates customer existence, referenced product, and context (snapshot id if present). Permission checks restrict creation to authorized users or admins. Validation includes deduplication and cross-checks for rule conflicts. All creation events are recorded in the audit log. Errors are returned for invalid input, permission denied, or unique constraint violations. Complements the standard recommendation CRUD endpoints.",
    "summary": "Create a new recommendation (ai_ecommerce_recommendation).",
    "parameters": [],
    "requestBody": {
      "description": "New recommendation data.",
      "typeName": "IAiEcommerceRecommendation.ICreate"
    },
    "responseBody": {
      "description": "Created recommendation record.",
      "typeName": "IAiEcommerceRecommendation"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/recommendations",
    "method": "post"
  },
  {
    "specification": "Update an existing recommendation entry in ai_ecommerce_recommendation. This operation supports corrections, re-assignment, or admin-side modifications of an AI recommendation. Requires id and update payload.",
    "description": "Allows updating fields in an existing ai_ecommerce_recommendation record, such as adjusting the reason_code, snapshot, or associated product. Only permitted for the owner or an authorized admin, and always recorded in an audit log. Validates all inputs carefully, including the existence and permission to update the record. Errors are handled for not found, permission denied, or validation issues (such as linking to an invalid product or snapshot). All update and modification actions integrate with the full recommendation management API suite.",
    "summary": "Update a recommendation entry (ai_ecommerce_recommendation).",
    "parameters": [
      {
        "name": "id",
        "description": "The id of the recommendation to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "The update data for the recommendation entry.",
      "typeName": "IAiEcommerceRecommendation.IUpdate"
    },
    "responseBody": {
      "description": "Updated recommendation record.",
      "typeName": "IAiEcommerceRecommendation"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/recommendations/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a recommendation record in ai_ecommerce_recommendation. Removes an AI-generated recommendation for the profile/customer, typically for privacy or admin override. Deletion is permanent and audited for compliance.",
    "description": "Deletes a specific AI recommendation record by id from ai_ecommerce_recommendation, subject to strict permission checks. Logically or physically removes the record, enforcing ownership, security, and referential rules. Triggers audit trail log for legal/compliance purposes. The delete API compliments the suite of create, update, list, and detail endpoints for recommendations, forming a complete life cycle for user-driven AI personalization.",
    "summary": "Delete a recommendation by ID (ai_ecommerce_recommendation).",
    "parameters": [
      {
        "name": "id",
        "description": "The id of the recommendation to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/recommendations/{id}",
    "method": "delete"
  },
  {
    "specification": "This operation fetches a paginated list of personalization snapshot entities (ai_ecommerce_snapshots) with search and sorting features. Snapshots are user-state captures (favorites, settings, etc.) for portability and analytics. This enables frontend apps or admin UI to retrieve multiple snapshots, optionally filtered by customer, type, or time range. Underlying table: ai_ecommerce_snapshots.",
    "description": "The PATCH /ai_ecommerce/snapshots endpoint allows retrieval of a filtered, paginated list of personalization snapshots. The response enables UIs and backend services to display available user or system snapshots, with query functionality for customer ID, snapshot type, taken date, etc. Security-wise, sensitive snapshots may require admin or user authentication. The endpoint strictly adheres to the structure of the ai_ecommerce_snapshots table, including all atomic properties defined there. Standard business and audit validation should be applied. Error behaviors include 400 for invalid queries and 403 for unauthorized access.",
    "summary": "Fetches a list of ai_ecommerce_snapshots (personalization snapshots) with filtering and pagination.",
    "parameters": [],
    "requestBody": {
      "description": "Filtering and pagination information for snapshot listing.",
      "typeName": "IAiEcommerceSnapshot.IRequest"
    },
    "responseBody": {
      "description": "Paginated result of listed personalization snapshots.",
      "typeName": "IPageIAiEcommerceSnapshot"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/snapshots",
    "method": "patch"
  },
  {
    "specification": "This operation retrieves the details of a specific ai_ecommerce_snapshot entity, which represents a snapshot of a user's personalization or settings state. Used for device restore, analytics, or audits.",
    "description": "The GET /ai_ecommerce/snapshots/{id} endpoint returns all atomic details for a single personalization snapshot, as defined in the ai_ecommerce_snapshots table. It requires the snapshot ID as a path parameter (UUID). Security may restrict access to only owners, administrators, or auditors. Main uses: restoring user state, compliance investigation, or device migrations. Adheres to audit/compliance requirements by returning full snapshot metadata and URI.",
    "summary": "Fetches details for a specific ai_ecommerce_snapshot row by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the target ai_ecommerce_snapshot.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed personalization snapshot record.",
      "typeName": "IAiEcommerceSnapshot"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/snapshots/{id}",
    "method": "get"
  },
  {
    "specification": "This operation creates a new ai_ecommerce_snapshot entity. Used when a user or system process captures and stores a personalization state (e.g., before changes, for cloud sync, or analytics/ranking purposes).",
    "description": "The POST /ai_ecommerce/snapshots endpoint creates a new personalization snapshot and stores atomic info (customer_id, type, timestamp, blob_uri, etc.) as per ai_ecommerce_snapshots schema. Business logic must validate ownership, ensure valid snapshot type, and attach secure URI. After creation, the system may trigger downstream analytics or device syncs. Returns the resulting snapshot row, or error if validation fails. Errors include 400 for invalid input, 403 for permission issues.",
    "summary": "Creates a new ai_ecommerce_snapshot entry (personalization snapshot).",
    "parameters": [],
    "requestBody": {
      "description": "Payload with all atomic fields needed for snapshot creation.",
      "typeName": "IAiEcommerceSnapshot.ICreate"
    },
    "responseBody": {
      "description": "Created personalization snapshot record.",
      "typeName": "IAiEcommerceSnapshot"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/snapshots",
    "method": "post"
  },
  {
    "specification": "This operation updates an existing ai_ecommerce_snapshot entity by ID, allowing details like the associated blob URI, snapshot_type, or customer mapping to be modified.",
    "description": "The PUT /ai_ecommerce/snapshots/{id} endpoint modifies an existing personalization snapshot using the provided payload. Validation must confirm that the record exists, the current user has rights to update it (e.g., owner or admin), and the fields respect business rules (immutability for taken_at, proper type, URI, etc.). Results in a complete, updated snapshot row returned, or errors if constraints are violated (400, 403, 404 as appropriate).",
    "summary": "Updates fields for an ai_ecommerce_snapshot by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the target ai_ecommerce_snapshot.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Data to update the existing snapshot record.",
      "typeName": "IAiEcommerceSnapshot.IUpdate"
    },
    "responseBody": {
      "description": "Updated personalization snapshot record.",
      "typeName": "IAiEcommerceSnapshot"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/snapshots/{id}",
    "method": "put"
  },
  {
    "specification": "This operation deletes a personalization snapshot entity by ID, supporting soft-delete functionality with audit/compliance preservation. Used for user privacy or administrative clean-up requests.",
    "description": "The DELETE /ai_ecommerce/snapshots/{id} endpoint marks the specified snapshot as deleted (soft delete) or removes it if business rules require. Validation ensures only authorized actors (owner, admin) can delete the snapshot. Retains audit trace per compliance requirements. Errors include 404 (not found), or 403 (unauthorized deletion attempts).",
    "summary": "Deletes (soft-delete) ai_ecommerce_snapshot entity by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the ai_ecommerce_snapshot to be deleted.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Delete acknowledgment or deleted record details.",
      "typeName": "IAiEcommerceSnapshot"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/snapshots/{id}",
    "method": "delete"
  },
  {
    "specification": "Fetches a paginated, filtered list of ai_ecommerce_personalization_config records which store configuration and parameter settings for personalization (global or per-user). Used by admins and user-facing portals for preview, audit, and AI/model version management.",
    "description": "The PATCH /ai_ecommerce/personalizationConfigs endpoint provides search and list retrieval for personalization config parameters. It allows filtering by admin, customer, config_key, applied_at, etc. Security roles may restrict access to sensitive configs. Returns paginated results as per ai_ecommerce_personalization_config structure. Fails with 400 for bad input, or 403 for insufficient privileges.",
    "summary": "Fetch all ai_ecommerce_personalization_config records with search/pagination.",
    "parameters": [],
    "requestBody": {
      "description": "Request filter and pagination for config listing.",
      "typeName": "IAiEcommercePersonalizationConfig.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of personalization config records.",
      "typeName": "IPageIAiEcommercePersonalizationConfig"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationConfigs",
    "method": "patch"
  },
  {
    "specification": "Retrieves a single ai_ecommerce_personalization_config record by ID for inspection or audit/history/replay purposes. Used by admin panels, AI workflows, or advanced user profile systems.",
    "description": "The GET /ai_ecommerce/personalizationConfigs/{id} endpoint fetches the full detail row for a personalization config setting, by unique ID (UUID). Access may be restricted to system/admin roles. Returns all atomic fields as structured in ai_ecommerce_personalization_config. Typical scenarios: audit, debug, rollback preview. Returns 404 if not found, 403 if unauthorized.",
    "summary": "Fetches a single ai_ecommerce_personalization_config by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the ai_ecommerce_personalization_config record.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Personalization config record details.",
      "typeName": "IAiEcommercePersonalizationConfig"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationConfigs/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new ai_ecommerce_personalization_config for global system or per-customer experimentation, feature flag, or tuning parameter. Required by admin UIs, onboarding flows, and AI/model deployment.",
    "description": "The POST /ai_ecommerce/personalizationConfigs endpoint records a new config (admin/customer/config_key/config_value, applied_at). Business validation ensures config key uniqueness for time/customers, roles for who may insert such configs, etc. After insertion, triggers analytics or config reload downstream as required. Provides created config record, or validation error responses (400, 403).",
    "summary": "Creates a new ai_ecommerce_personalization_config entry.",
    "parameters": [],
    "requestBody": {
      "description": "Payload for new personalization config creation.",
      "typeName": "IAiEcommercePersonalizationConfig.ICreate"
    },
    "responseBody": {
      "description": "Created config record.",
      "typeName": "IAiEcommercePersonalizationConfig"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationConfigs",
    "method": "post"
  },
  {
    "specification": "Updates an existing ai_ecommerce_personalization_config row by its ID. Enables admins or users to update personalization rules, model versions, or parameter toggles. Applied for rollback, config management, etc.",
    "description": "The PUT /ai_ecommerce/personalizationConfigs/{id} endpoint modifies config settings (admin_id, config_key, value, etc.) as per strict business rules (some fields may be immutable such as applied_at). Validates authorized user can perform update, and record existence. Returns full updated record or errors for forbidden, not found, or validation.",
    "summary": "Modifies ai_ecommerce_personalization_config record by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the config to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Update payload for personalization config.",
      "typeName": "IAiEcommercePersonalizationConfig.IUpdate"
    },
    "responseBody": {
      "description": "Resulting updated config record.",
      "typeName": "IAiEcommercePersonalizationConfig"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationConfigs/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes a personalization config by ID, supporting admin/device/user cleanup of configs and model/parameter records.",
    "description": "The DELETE /ai_ecommerce/personalizationConfigs/{id} endpoint removes (or marks deleted) a config row by ID for privacy, rollback, or admin cleanup. Strictly validates actor privilege, soft-deletes or hard-deletes per compliance rules. Retains audit trace. Returns deleted/removed config row or confirmation acknowledgment.",
    "summary": "Deletes an ai_ecommerce_personalization_config by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "ID of config to remove.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Delete result or record confirmation.",
      "typeName": "IAiEcommercePersonalizationConfig"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationConfigs/{id}",
    "method": "delete"
  },
  {
    "specification": "Fetches a paginated list of ai_ecommerce_personalization_analytics records, representing user/admin/product-level personalization engagement (e.g., favorite added, recommendation clicked).",
    "description": "The PATCH /ai_ecommerce/personalizationAnalytics endpoint provides filtered analytics events for dashboards or export. Allows search by customer, product, admin, event type, time window, etc. Pagination, sorting, and full entity fields as per ai_ecommerce_personalization_analytics schema. Used by reporting UIs, analytics systems, or audit functions. 400/403 for invalid filters/access.",
    "summary": "Searches and returns personalization analytics records with filtering.",
    "parameters": [],
    "requestBody": {
      "description": "Search/filter/pagination for analytics events.",
      "typeName": "IAiEcommercePersonalizationAnalytics.IRequest"
    },
    "responseBody": {
      "description": "List of filtered analytics events.",
      "typeName": "IPageIAiEcommercePersonalizationAnalytics"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationAnalytics",
    "method": "patch"
  },
  {
    "specification": "Retrieves a single ai_ecommerce_personalization_analytics event by ID for detail investigation, dashboards, or export API needs.",
    "description": "The GET /ai_ecommerce/personalizationAnalytics/{id} endpoint fetches one analytics entry, by event UUID. Use cases: export, compliance, personalized reporting. Returns 404 if not found, 403 if unauthorized. Underlying table: ai_ecommerce_personalization_analytics.",
    "summary": "Gets details of a specific ai_ecommerce_personalization_analytics record by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of the analytics record.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Analytics record detail result.",
      "typeName": "IAiEcommercePersonalizationAnalytics"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationAnalytics/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new personalization analytics entry. This operation allows the creation of analytics records for user interactions or personalizations, such as clicks, adds to favorites, or recommendations engagement. The ai_ecommerce_personalization_analytics table is responsible for storing per-event, atomic analytics tracking without aggregations; all operational, audit, and personalization reporting flows depend on this record creation. The request must provide all required atomic properties such as customer_id, event_type, event_at, and optionally admin_id, product_id, and details_json. This closely follows 3NF to ensure precise and immutable tracking for future analytics, regulatory review, and system integrations.",
    "description": "This operation adds a new row to the ai_ecommerce_personalization_analytics table using POST. Each record logs an atomic event of user personalization analytics, such as when a user adds a product to their favorites, interacts with a personalized recommendation, or performs other tracked personalization actions. The request payload must include mandatory fields: customer_id (UUID of the acting user), event_type (nature of analytics event), and event_at (event timestamp). Optional fields: admin_id (if event involved an admin), product_id (relevant product, if applicable), details_json (extra JSON for extensibility).\n\nThe endpoint is fundamental for recording granular analytics and user engagement, required for regulatory compliance and AI model training. Its design prevents the duplication of aggregate metrics, keeping all data strictly atomic as described in the DB schema. The caller must guarantee that event_type is a valid string and that all foreign keys refer to legitimate entities.\n\nSecurity: Proper authentication/authorization is expected, allowing only legitimate services or users to submit analytics events. Auditing or compliance review must be possible using this log.\n\nRelated APIs include event listing and per-user analytics retrieval, but this is single-row creation only.",
    "summary": "Create a new personalization analytics record in ai_ecommerce_personalization_analytics.",
    "parameters": [],
    "requestBody": {
      "description": "Analytics event data to log in personalization analytics table.",
      "typeName": "IAiEcommercePersonalizationAnalytics.ICreate"
    },
    "responseBody": {
      "description": "The newly created personalization analytics record.",
      "typeName": "IAiEcommercePersonalizationAnalytics"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationAnalytics",
    "method": "post"
  },
  {
    "specification": "Update an existing ai_ecommerce_personalization_analytics record by its unique ID. This operation enables strict, atomic updates to analytics event records (e.g., for correcting event details, amending auxiliary data, or compliance redaction). As per standards for the ai_ecommerce_personalization_analytics table, every update must match the schema's atomic, non-aggregated data constraints. Used in cases such as correcting analytics, appending extra metadata, or marking records for compliance.",
    "description": "Updates a personalization analytics record in ai_ecommerce_personalization_analytics by its unique identifier. Permitted modifications include any combination of updatable fields (e.g., admin_id, event_type, event_at, details_json) subject to 3NF and schema rules, as described in the DB comments. The target record must exist; otherwise, an error is returned. Typically, such updates should be rare and limited to compliance or correction scenarios, as analytics are usually append-only logs.\n\nAuthorization is required and should be strictly enforced; only privileged service-level actors or admins should use this endpoint.\n\nError handling should clearly distinguish between not-found, forbidden, and validation failures. This endpoint is not for mass analytics event manipulation; batch changes must use a separate API. Related APIs: event creation (POST), event retrieval (GET), event search/listing (PATCH).",
    "summary": "Update personalization analytics record in ai_ecommerce_personalization_analytics by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the personalization analytics event to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update in the analytics record.",
      "typeName": "IAiEcommercePersonalizationAnalytics.IUpdate"
    },
    "responseBody": {
      "description": "The updated analytics record after modification.",
      "typeName": "IAiEcommercePersonalizationAnalytics"
    },
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationAnalytics/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a specific personalization analytics event by ID from ai_ecommerce_personalization_analytics. This operation is intended for strict compliance and audit correction—not for routine analytics management. It fully removes a single analytic tracking row, as per 3NF; this event is permanent and must be properly authorized/audited.",
    "description": "Deletes the specified row in ai_ecommerce_personalization_analytics using its unique ID. Deletion is typically only for compliance or legal reasons (such as GDPR data erasure, correction of spam/fraud, or regulatory auditing). The system must verify existence, check authorization, and log this action for full regulatory traceability.\n\nUpon successful deletion, the operation must irreversibly remove the specified entry and return a standard confirmation response. If the event does not exist, a Not Found or compliance-specific error is returned.\n\nMust only be callable by privileged users or background compliance process.\n\nRelated endpoint: POST for analytic creation, PUT for update.",
    "summary": "Delete an atomic personalization analytics event by ID in ai_ecommerce_personalization_analytics.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the personalization analytics event to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/ai_ecommerce/personalizationAnalytics/{id}",
    "method": "delete"
  },
  {
    "specification": "Query and retrieve a filtered list of ai_ecommerce_audit_logs entries with support for search, pagination, and sorting. This operation exposes system/platform audit log data for admin or authorized analytics; used for display, filtering, or regulatory inquiries. Implements pattern for PATCH list retrieval endpoints with search. Underlying table: ai_ecommerce_audit_logs; supports filter by actor, action type, target table, timestamp, etc.",
    "description": "Retrieves a paginated list of audit log entries from ai_ecommerce_audit_logs according to input search/pagination criteria. Input can include filters: actor_admin_id, actor_customer_id, actor_seller_id, action_type, target_table, target_id, and timestamp range. The endpoint supports sort order, page size, and page number or cursor as required.\n\nAuthorization: Only system admins or authorized analytics users may access detailed audit data. The schema is strictly 3NF, and log deletion must remain tracked for compliance.\n\nReturns a paged result object with the audit log data and pagination metadata.\n\nRelated endpoints: audit log detail (GET), log creation (POST), audit log update (PUT), audit log deletion (DELETE).",
    "summary": "Get a paginated, filtered list of audit logs from ai_ecommerce_audit_logs.",
    "parameters": [],
    "requestBody": {
      "description": "Audit log search criteria for filtered, paginated retrieval.",
      "typeName": "IAiEcommerceAuditLogs.IRequest"
    },
    "responseBody": {
      "description": "A paginated collection of audit log entries, with pagination metadata.",
      "typeName": "IPageAiEcommerceAuditLogs"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLogs",
    "method": "patch"
  },
  {
    "specification": "Fetch detailed data for a single audit log entry by ID from ai_ecommerce_audit_logs. This operation returns full log context and all atomic fields for one row, enabling audit trails, compliance review, or drill-down from list view. Directly tied to ai_ecommerce_audit_logs table, this operation prevents accidental export of multiple records.",
    "description": "Retrieves comprehensive detail for a single audit/event log entry by its unique identifier from ai_ecommerce_audit_logs. Returns all schema-defined fields, including actor info, event context, and timestamp. Used for compliance audits, drill-downs, and forensics.\n\nRequires explicit authorization (admin/analytics role). If the entry does not exist, a Not Found error is returned.\n\nRelated: PATCH for search/list, POST for creation, PUT for updates, DELETE for removals.",
    "summary": "Retrieve a single audit log entry by ID from ai_ecommerce_audit_logs.",
    "parameters": [
      {
        "name": "id",
        "description": "Audit log entry unique identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full detail of the specified audit log entry.",
      "typeName": "IAiEcommerceAuditLogs"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLogs/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new platform/system audit log entry (event) in ai_ecommerce_audit_logs. Used by core platform for all audit/compliance-sensitive actions. Each POST call adds a new, immutable row representing a major user/admin/system event. All fields required by schema must be enforced—no aggregation or derived data allowed.",
    "description": "Creates a new, atomic event log row in ai_ecommerce_audit_logs. POST payload must supply all required schema fields: actor_customer_id, actor_seller_id, actor_admin_id (as appropriate), action_type, target_table, target_id, description, and timestamp. Used for platform security, compliance, and trace/audit workflows.\n\nReturns the newly created event log entry including all fields. Failure on validation/authorization returns explicit errors. The system must guarantee event atomicity.\n\nStrict compliance with permissions and data privacy is expected; only authorized subsystems or users may invoke this endpoint.\n\nRelated endpoints: PATCH for list, GET for detail, PUT for update, DELETE for removal.",
    "summary": "Create a new, atomic audit log entry in ai_ecommerce_audit_logs.",
    "parameters": [],
    "requestBody": {
      "description": "Data for new audit log event to insert.",
      "typeName": "IAiEcommerceAuditLogs.ICreate"
    },
    "responseBody": {
      "description": "The newly created audit log entry.",
      "typeName": "IAiEcommerceAuditLogs"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLogs",
    "method": "post"
  },
  {
    "specification": "Update an existing audit log event in ai_ecommerce_audit_logs by unique row ID. PATCH or PUT is used for compliance-mandated corrections, error redaction, or additional metadata. The schema enforces 3NF: no aggregates, only atomic field changes. Only privileged/admin users may perform this action.",
    "description": "Updates a single, existing audit log record in ai_ecommerce_audit_logs. Permitted updates may include action_type, description, actor fields, or timestamp, but no batch or mass edits. If the target entry does not exist, a not found error is returned; on validation failure, a standard error is returned. All update operations are auditable and should record prior versions (rollback may need separate endpoint).\n\nStrict permissions: Only administrator or compliance roles can alter logs. This endpoint is rarely used in normal operations—mostly for compliance, legal, or correction purposes.\n\nRelated: POST for new log event, PATCH for listing, DELETE for removal, GET for detail.",
    "summary": "Update one audit log record in ai_ecommerce_audit_logs by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique log entry to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields and new values to patch in the audit log entry.",
      "typeName": "IAiEcommerceAuditLogs.IUpdate"
    },
    "responseBody": {
      "description": "The audit log entry after update.",
      "typeName": "IAiEcommerceAuditLogs"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLogs/{id}",
    "method": "put"
  },
  {
    "specification": "Remove a single platform audit log entry from ai_ecommerce_audit_logs by its unique identifier. This operation performs strict audit/compliance deletions only—not to be used routinely. Designed to support GDPR/PII erasure or audit redaction. Entry must be removed in such a way that compliance requirements for deletion are met and the action is properly logged.",
    "description": "Deletes a single audit/event log from ai_ecommerce_audit_logs, fully erasing the record from the platform event history for compliance (e.g., handling right-to-be-forgotten requests, removing fraudulent/test logs, or supporting legal requirements). The operation requires elevated permissions and audit trail of the deletion. A record not found error is returned if the entry does not exist.\n\nUse with extreme caution: operational and security events depend on the integrity of the audit log for post-mortem and compliance inquiries.\n\nRelated operations: POST to create, PATCH to list, GET for detail, PUT for update.",
    "summary": "Delete a specific audit log entry by ID from ai_ecommerce_audit_logs.",
    "parameters": [
      {
        "name": "id",
        "description": "Audit log event unique ID to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLogs/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a paginated, filtered set of ai_ecommerce_system_events for analytics and event-driven system trace. Used by platform admin/ops or integration services to inspect raw system event logs. Table: ai_ecommerce_system_events. Search, sort, filter fields on event_type, target_table, time, etc. Supports listing pattern via PATCH with body.",
    "description": "Returns a paginated list of system events from ai_ecommerce_system_events. The request body supports flexible filters—event_type, target_table, time range, or sorting—as well as pagination parameters (page number/size or cursor semantics).\n\nAccess is strictly restricted to platform admins, system analytics, or privileged integration users. Returns both records and pagination metadata for efficient analytics and dashboarding, supporting drill-down and further navigation.\n\nFull compliance with data privacy and system event audit design is required. Related endpoints: GET for detail, POST for event insert, PUT for update, DELETE for deletion.",
    "summary": "List/patch system events from ai_ecommerce_system_events with filtering and pagination.",
    "parameters": [],
    "requestBody": {
      "description": "Query and filter params for system event listings.",
      "typeName": "IAiEcommerceSystemEvents.IRequest"
    },
    "responseBody": {
      "description": "Paged results for system event logs.",
      "typeName": "IPageAiEcommerceSystemEvents"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvents",
    "method": "patch"
  },
  {
    "specification": "Lookup and retrieve full detail for a single system event row in ai_ecommerce_system_events by unique identifier. Used for full event context drill-down, integration debug, or compliance trace. Table: ai_ecommerce_system_events. Underlying entity is immutable, atomic, never updates aggregates or batch results.",
    "description": "Fetches the complete set of information for one system event, as recorded in ai_ecommerce_system_events, using its unique ID. Returns all fields for this event row, including type, target table, payload, and time info. Used in admin, analytics, or integration scenarios for detailed investigation or reporting.\n\nPrincipal users: platform administrators and analytics officers, not public endpoints.\n\nError results: Not-found for absent records; full detail on success.\n\nRelated: PATCH for list, POST to create, PUT to update, DELETE for removal.",
    "summary": "Get one system event in ai_ecommerce_system_events by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "System event record unique ID.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full row data for requested system event.",
      "typeName": "IAiEcommerceSystemEvents"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvents/{id}",
    "method": "get"
  },
  {
    "specification": "Insert a new system-level event entry into ai_ecommerce_system_events. This is used by integration layers, orchestration, or custom event publisher logic to track/trace system-domain events for core audit, analytics, or event-driven features. Event row is atomic, no pre-computed/aggregate values allowed; required fields must be present, and record is immutable post-insertion. App code must ensure event_type, target_id, target_table (if defined), and payload_json all conform to schema and normalization rules.",
    "description": "Adds a new event to the ai_ecommerce_system_events table. The payload must fully define all schema-required event fields: event_type, target_table, target_id, payload_json, and created_at timestamp. Permitted users/services must be authenticated and authorized. The event record is immutable after creation for compliance/materialized view processing.\n\nReturns fully inserted event record on success with all schema-defined fields. Errors may occur on bad input, missing required fields, or authorization failure.\n\nRelated endpoint: PATCH for search/list, GET for detail, PUT for update, DELETE for removal.",
    "summary": "Insert new system event entry in ai_ecommerce_system_events.",
    "parameters": [],
    "requestBody": {
      "description": "All event fields required to insert new system event row.",
      "typeName": "IAiEcommerceSystemEvents.ICreate"
    },
    "responseBody": {
      "description": "Full entity of newly created system event row.",
      "typeName": "IAiEcommerceSystemEvents"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvents",
    "method": "post"
  },
  {
    "specification": "Update the atomic fields of a single ai_ecommerce_system_events row by its unique ID. Used for admin/integration error correction, compliance, or attaching additional detail to historical events. Patch is not for mass or batch operations. Only a privileged administrator or integration system can invoke this endpoint. No aggregation fields/derived totals are allowed.",
    "description": "Modifies a single system event in ai_ecommerce_system_events identified by its unique row ID, allowing updates to primary event content: event_type, target_table, payload_json, and timestamp if required. The system must enforce atomic/3NF-only changes and prevent accidental modification to historical or system-locked records unless explicitly authorized for compliance correction.\n\nStrict RBAC and audit logging are critical; this is a privileged-only action. All changes must be traceable.\n\nReturns updated row on success. Related endpoint: POST for insert, PATCH for listing/search, GET for detail, DELETE for removal.",
    "summary": "Update a single system event log row in ai_ecommerce_system_events by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the system event to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields and values for system event update; only mutable atomic fields allowed.",
      "typeName": "IAiEcommerceSystemEvents.IUpdate"
    },
    "responseBody": {
      "description": "The updated system event row entity.",
      "typeName": "IAiEcommerceSystemEvents"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvents/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes a system event by its unique identifier. This operation enables platform operators or administrators to remove a domain or integration event from the audit/event log. The operation is associated with the ai_ecommerce_system_events table. Typical use: compliance-initiated event removal, event redaction for privacy/GDPR, or correction of duplicate system event entries. The deletion operation must ensure the event is only soft-deleted (flagged as deleted) for compliance purposes, not truly erased for tamper-evident audit trail. Permissions: Only high-privileged administrators can invoke. Error handling: returns not found for missing event, forbidden for inadequate privilege, and validation error if ID is malformed. Related APIs: event log retrieval (GET), event querying (PATCH), and compliance audit APIs. Security consideration: irreversible operation, must be logged by platform audit log.",
    "description": "This API operation provides a secure method for deleting a system event (ai_ecommerce_system_events) by its unique identifier. System events track domain events, integration callbacks, and key platform actions at the lowest granularity; they are immutable by default, but exceptionally, compliance or head admin may request redaction. Deletion here updates the event record with a deleted_at timestamp for soft-deletion, preserving the append-only audit log pattern. The resource path includes the event's unique UUID (id), which is strictly validated as a 36-character string in canonical UUID format. Security: Only administrator role may execute this operation, and their actions are subsequently logged to the platform audit trail. Business logic: If the event was already deleted or does not exist, a 404 is returned with explanatory payload; if privilege is insufficient, a 403 error is returned. All operations undergo rigorous permission checks and must be accompanied by an audit log update referencing the deleted event and actor. Use in practice: event or integration record removal, e.g., upon GDPR data subject request, system error correction, or legal takedown. Must only soft-delete, never hard/physical deletion, preserving a tamper-evident audit record.",
    "summary": "Soft-delete a system event (ai_ecommerce_system_events) by ID for compliance redaction/audit.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the system event to delete (UUID format).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvents/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a filtered and paginated list of compliance audit records. This PATCH operation queries ai_ecommerce_compliance_audits for matching audit events based on search filters, date ranges, status/request type, or actor. Enables complex searching (by subject, type, status) for compliance officers, privacy specialists, or auditors. Uses a request body referencing IComplianceAudit.IRequest, and returns IPageIComplianceAudit. Results always paginated, with total count metadata. Associated DB table: ai_ecommerce_compliance_audits.",
    "description": "This endpoint enables complex search and filtering over compliance audit records managed in the ai_ecommerce_compliance_audits table. The API uses a PATCH method due to the requirement for a flexible, structured JSON body for complex queries (ranges, string matching, actor filters, status, etc). Key columns filterable: audit_type, subject_table, subject_id, admin_id, status, created_at (range). Access is restricted to highly privileged administrators with strict RBAC enforcement. Pagination is required: request contains page/limit, and response contains total, data, current page, total pages, etc. Typical use cases: compiling audit trails for GDPR requests, compliance evidence bundles, or regulator review reports. Business logic: sorting on created_at or status, support for partial string matches on notes, support for both AND/OR conditions (if supported by query design). Error handling: returns validation error for malformed queries, forbidden for out-of-scope access, and empty page for no match. Output is always a paginated list with summary statistics. Related APIs: GET single audit record, POST create compliance action, PUT update audit record.",
    "summary": "Search and paginate compliance audits (ai_ecommerce_compliance_audits) with complex filter/search request.",
    "parameters": [],
    "requestBody": {
      "description": "Query parameters for filtering/searching compliance audits (IComplianceAudit.IRequest).",
      "typeName": "IComplianceAudit.IRequest"
    },
    "responseBody": {
      "description": "Paginated result set of compliance audits matching query (IPageIComplianceAudit).",
      "typeName": "IPageIComplianceAudit"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudits",
    "method": "patch"
  },
  {
    "specification": "Get a specific compliance audit record by its unique ID. This GET API reads a single ai_ecommerce_compliance_audits entry, providing audit type, subject, actor, status, timestamp, and notes. Used for regulator review, compliance investigation, or audit trail lookup. Returns IComplianceAudit in response.",
    "description": "This API retrieves a single compliance audit record from the ai_ecommerce_compliance_audits table, filtered by unique UUID (id) as a path parameter. The endpoint is commonly accessed by administrators or authorized legal agents. Typical use: retrieve GDPR, PCI, or KISA audit log for a specific event/request. Path parameter id is a string with uuid format, and the output is a rich object containing all columns in the table, with referenced admin/subject metadata as needed. Permission is limited to roles with administrator-level access. If the specified record does not exist or is not visible to the requesting user (due to RBAC), a 404 Not Found is returned with a compliance-formatted error. If permission is low, a 403 error is returned. Output is a single IComplianceAudit object as defined in components.schemas. Related APIs: PATCH list audits, POST create compliance event, PUT update, DELETE compliance event.",
    "summary": "Retrieve a single compliance audit record (ai_ecommerce_compliance_audits) by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for the compliance audit entry.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Single compliance audit record as detailed object (IComplianceAudit).",
      "typeName": "IComplianceAudit"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudits/{id}",
    "method": "get"
  },
  {
    "specification": "Create (insert) a new compliance audit record into the ai_ecommerce_compliance_audits table. This POST API initiates a compliance event, e.g., GDPR erasure request, PCI audit, policy update, or regulator inquiry. The request body must follow IComplianceAudit.ICreate structure; creates new audit record and returns the created IComplianceAudit. Used by administrators or system logic.",
    "description": "This endpoint enables authorized administrative users to initiate a new compliance audit event. The request body follows IComplianceAudit.ICreate, typically containing audit_type, subject_table, subject_id, status, notes, admin_id, and created_at (if system-supplied). On success, a newly-created compliance audit record is persisted and returned as IComplianceAudit. Only privileged users with RBAC role (administrator) can invoke. Typical use: regulator requests, internal audit timeline, policy review recording, privacy compliance events, or external audits. Business rules: audit_type, subject_table, and subject_id are required, status and notes describe logic; input is validated for enums/constraints on types/status; creation auto-fills timestamp if not provided. 409 error for duplicate audit_type/subject_id, validation error for missing required fields, forbidden for insufficient role. Related APIs: PATCH (search), GET/PUT/DELETE single record.",
    "summary": "Create a new compliance audit record (ai_ecommerce_compliance_audits) for legal/compliance action.",
    "parameters": [],
    "requestBody": {
      "description": "Information for new compliance audit event (IComplianceAudit.ICreate).",
      "typeName": "IComplianceAudit.ICreate"
    },
    "responseBody": {
      "description": "The created compliance audit record as object (IComplianceAudit).",
      "typeName": "IComplianceAudit"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudits",
    "method": "post"
  },
  {
    "specification": "Update a compliance audit record by ID (PUT). Updates ai_ecommerce_compliance_audits table entry by UUID. This is a full update operation: replaces all mutable fields for the audit record (status, notes, etc). Used by administrators to correct or update audit trail. Uses IComplianceAudit.IUpdate for the request, returns updated IComplianceAudit.",
    "description": "This endpoint allows full update (replacement) of a compliance audit entry in the ai_ecommerce_compliance_audits table. The record is identified by its UUID (id in path), and replaced with the fields in IComplianceAudit.IUpdate from the body (status, notes, etc.). Only allowed to administrator role with strict permission checks and secondary audit logging of the update. Typical use: update outcome status, correction to audit trail, supplementary notes. Validation rules: Only mutable fields can be updated; immutable keys (audit_type, subject_id, created_at) are not alterable. Idempotent: repeated calls with same input have no further effect. 404 for nonexistent record, 403 for insufficient privilege, validation error for bad input. Response is the updated IComplianceAudit. Related endpoint: GET, PATCH (list), POST (create), DELETE.",
    "summary": "Update (replace) a compliance audit record (ai_ecommerce_compliance_audits) by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for compliance audit record to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Replacement data for compliance audit record (IComplianceAudit.IUpdate).",
      "typeName": "IComplianceAudit.IUpdate"
    },
    "responseBody": {
      "description": "Updated compliance audit record as object (IComplianceAudit).",
      "typeName": "IComplianceAudit"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudits/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a compliance audit record by ID. This operation soft-deletes an audit record (sets deleted_at), for rare compliance requirements (e.g. legal erasure). The operation is allowed for administrator superusers and ensures soft, not hard deletion. Associated DB table: ai_ecommerce_compliance_audits. All deletions must be audit-logged.",
    "description": "This API enables privileged administrator to remove a compliance audit entry from the ai_ecommerce_compliance_audits table, identified by UUID in path. Deletion is implemented as a soft-delete (sets deleted_at timestamp) for full regulatory traceability—no hard physical deletions allowed. Primary use: GDPR/PII erasure, fraud correction, or compliance takedown by legal order. On success, the resource is now logically deleted, but available in audit trails. Only enabled for administrator superusers with full audit trace. If already deleted or not found, 404 returned. Forbidden for lower privilege. All deletions are themselves logged in the platform audit log for traceability. Related endpoints: POST (create), PATCH (search), PUT (update), GET (retrieve).",
    "summary": "Soft-delete a compliance audit record (ai_ecommerce_compliance_audits) by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for compliance audit record to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudits/{id}",
    "method": "delete"
  },
  {
    "specification": "Search and filter platform (system) audit logs (ai_ecommerce_audit_log) with a complex request object. PATCH method is required to support structured query bodies (date ranges, type, actors, etc). Returns paginated data (IPageIAuditLog), supports filtering by actor, action type, time, or target business object. Used by administrators for investigations. Table: ai_ecommerce_audit_log.",
    "description": "This endpoint enables advanced filtering and pagination of platform-wide audit log records in ai_ecommerce_audit_log. The PATCH method accommodates structured search bodies with combinations of filters: actor (customer/seller/administrator), action_type, target_table, target_id, date/time range, free-text description matches, etc. Input object: IAuditLog.IRequest. Output: IPageIAuditLog (paginated data). Permissions: RBAC for administrator. Typical use: compliance audit, investigation, monitoring for suspicious activity, attribution of events. Pagination: Both input and output include parameters for page, limit, sort. Business logic: supports multi-role actor search, time window filtering, relevance-based sort. Returns only data visible to the current user's role. Error handling: validation error for bad queries, forbidden if access exceeds scope, and empty page if no match. Related APIs: GET/PUT/DELETE audit log entry, POST create audit log (for system actions).",
    "summary": "Paginated search and filter for platform audit log records (ai_ecommerce_audit_log).",
    "parameters": [],
    "requestBody": {
      "description": "Complex search/filter query for audit logs (IAuditLog.IRequest).",
      "typeName": "IAuditLog.IRequest"
    },
    "responseBody": {
      "description": "Paginated audit log results (IPageIAuditLog).",
      "typeName": "IPageIAuditLog"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLog",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific audit log entry by unique UUID from ai_ecommerce_audit_log. Used to view the full content of a platform audit record for an action taken by customer, seller, administrator, or system integration. Returns IAuditLog. Permission controlled for security/compliance.",
    "description": "This GET API fetches a single platform audit log record (ai_ecommerce_audit_log) identified by UUID (id) in the path. The operation exposes all audit fields, including actor info (customer/seller/administrator), action_type, target_table, target_id (referencing the target object/table), description/context, created_at, and deleted_at. Access is restricted to authorized administrator with RBAC enforcement. Business logic: only the record owner, participants, or superusers can retrieve detailed audit event. Security consideration: data is sensitive; response may hide/redact fields depending on the role/actor. 404 is returned for non-existent or deleted audit, 403 for permissions, and standard error for invalid UUID. The response is an IAuditLog object. Related endpoints: PATCH (list/search), POST (create), PUT (update), DELETE (soft delete).",
    "summary": "Retrieve one audit log record (ai_ecommerce_audit_log) by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID for the audit log record to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed audit log row (IAuditLog).",
      "typeName": "IAuditLog"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLog/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new audit log record in ai_ecommerce_audit_log. POST operation for logging a new audit event (action, target, actor, time, description). Used by administrator or system event handlers. Request body follows IAuditLog.ICreate, response is IAuditLog (the new record). Audits are immutable post-creation, only soft-deletable.",
    "description": "This endpoint creates a new platform audit log entry in ai_ecommerce_audit_log, with all necessary audit context fields: actors, action_type, target object/table, description, and timestamp. Request body: IAuditLog.ICreate (with actors, action, etc). Used by system event handlers, admin UI, compliance reporting, or incident investigation. Business rules: Action types and roles validated, target object must exist, timestamps auto-filled or provided. Only permitted to administrator role. 409 for duplicate, validation error for missing or malformed data, 403 for insufficient privilege. Once created, audit logs are immutable (edit/deletion only via soft delete). Response is IAuditLog (full log row as object). Related endpoints: PATCH (search), GET, PUT, DELETE single audit row.",
    "summary": "Create new audit log record (ai_ecommerce_audit_log) for platform event/investigation.",
    "parameters": [],
    "requestBody": {
      "description": "Information for audit row creation (IAuditLog.ICreate).",
      "typeName": "IAuditLog.ICreate"
    },
    "responseBody": {
      "description": "Created audit record as object (IAuditLog).",
      "typeName": "IAuditLog"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLog",
    "method": "post"
  },
  {
    "specification": "Update an audit log entry by UUID (PUT, full replacement). This replaces mutable fields for a record in ai_ecommerce_audit_log, e.g., to amend description or additional context information (never actors or action_type). Used only in rare admin operations; audit log records should generally be immutable. Request body: IAuditLog.IUpdate, response: updated IAuditLog.",
    "description": "This endpoint allows a full field replacement (PUT) of a single audit log entry in ai_ecommerce_audit_log. Path parameter: id (uuid). Only mutable fields may be replaced (e.g., description, context). Action types and actors are immutable, as are timestamped facts. Typical use: compliance correction, supplementary context, error amendment. Highly privileged (administrator) only. Request must follow IAuditLog.IUpdate, return is updated IAuditLog. Rejected if immutable fields are attempted to be changed. 404 for no such record, forbidden for low privilege, 409 on duplicate. Changes are themselves audit-logged. Related endpoints: PATCH (search/list), GET (read one), POST (create), DELETE (soft delete).",
    "summary": "Update (full replace) mutable fields of an audit log entry (ai_ecommerce_audit_log) by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of audit log record to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Replacement data for audit log record (IAuditLog.IUpdate).",
      "typeName": "IAuditLog.IUpdate"
    },
    "responseBody": {
      "description": "Updated audit log row (IAuditLog).",
      "typeName": "IAuditLog"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLog/{id}",
    "method": "put"
  },
  {
    "specification": "Soft-delete (flag as deleted) an audit log entry by UUID in ai_ecommerce_audit_log. Used for rare compliance/legal/PII removal cases (e.g., GDPR erasure).",
    "description": "This endpoint soft-deletes an existing audit log record (ai_ecommerce_audit_log) by its UUID. Only highly privileged actors (administrator) may invoke. Operation sets the deleted_at timestamp; does not physically erase data, in accordance with tamper-evident audit requirements. Used for rare GDPR, PII removal, or legal erasure. Returns 404 if the record is missing or already deleted, 403 if insufficient privilege, validation error for malformed UUID. All deletions are themselves audit-logged. Related endpoints: POST (create), PATCH (list), PUT (update), GET (read one).",
    "summary": "Soft-delete an audit log record (ai_ecommerce_audit_log) by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "UUID of audit log record to soft-delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/auditLog/{id}",
    "method": "delete"
  },
  {
    "specification": "Advanced search for system/integration events (ai_ecommerce_system_event table) using arbitrary filters and pagination. PATCH method enables flexible, structured query body for complex conditions: event_type, target_table, date intervals, etc. Returns paginated list (IPageISystemEvent). Used for log analysis, compliance, integration debugging. Table: ai_ecommerce_system_event.",
    "description": "This API performs an advanced, paginated search on the ai_ecommerce_system_event table (system/integration event logs). Uses PATCH method since the query requires a structured request body (ISystemEvent.IRequest) for filtering: event_type, target_table, target_id, payload content, date intervals, etc. Output: IPageISystemEvent (paginated system events). Permissions: administrator. Typical usage: debug integration events, search for specific callbacks, compliance audits, performance analytics. Pagination: request includes page, limit, filters, sort; response includes total, data. Business rules: Results visible only to permitted roles; search supports partial/string/fulltext matches (depending on implementation). Error handling: invalid queries get 400; forbidden access gets 403. All fetches are logged. Related endpoint: GET/DELETE system event, POST for system event creation/injection.",
    "summary": "Paginated, filterable search for system/integration event logs (ai_ecommerce_system_event).",
    "parameters": [],
    "requestBody": {
      "description": "Search/filter query for system events (ISystemEvent.IRequest).",
      "typeName": "ISystemEvent.IRequest"
    },
    "responseBody": {
      "description": "Paginated system event data (IPageISystemEvent).",
      "typeName": "IPageISystemEvent"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvent",
    "method": "patch"
  },
  {
    "specification": "Get a single system event entry by its ID for audit and debugging. Table: ai_ecommerce_system_event",
    "description": "This endpoint retrieves a specific system event from the ai_ecommerce_system_event table using its unique event ID. System events, as described in the Prisma schema, log discrete system and integration events (domain events, callbacks, webhooks, etc.) for traceability, debugging, and real-time analytics. Each event record stores event type, target table/entity, entity ID, a JSON-encoded payload, and timestamp.\n\nOnly one event is returned per request. Events are immutable and never deleted except for rare compliance removal. Used by admin tools and analytics dashboards. For example, this endpoint allows compliance officers or devops engineers to investigate the full details of a particular event in the case of a system anomaly, regulatory inquiry, or forensics. Soft deleted events (if present) may or may not be returned subject to permissions.",
    "summary": "Get a single system event by ID (ai_ecommerce_system_event).",
    "parameters": [
      {
        "name": "id",
        "description": "Target system event's unique UUID.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Fetched system event record.",
      "typeName": "IAiEcommerceSystemEvent"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvent/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new system event record. Table: ai_ecommerce_system_event",
    "description": "This endpoint creates a new row in the ai_ecommerce_system_event table, used to log domain or integration events for traceability, debugging, and analytics applications as described in the Prisma schema. Each event includes event type, affected table/entity, event payload (JSON), and creation timestamp.\n\nEvents are written by backend logic, admin tools, or external services to build a comprehensive event history for audit and debugging. Example use: backend posts to this API at critical system moments or when receiving a webhook. The endpoint always logs as append-only; it never overwrites events. Input values require validation against enumerated/expected event types and payload structure.\n\nOnly users with appropriate admin or service-level privileges may write system events (not for public/customer use).",
    "summary": "Log a new system event (ai_ecommerce_system_event).",
    "parameters": [],
    "requestBody": {
      "description": "New system event data to be logged.",
      "typeName": "IAiEcommerceSystemEvent.ICreate"
    },
    "responseBody": {
      "description": "Created system event record.",
      "typeName": "IAiEcommerceSystemEvent"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvent",
    "method": "post"
  },
  {
    "specification": "Update an existing system event record by ID. Table: ai_ecommerce_system_event",
    "description": "Update the contents of a specified system event (ai_ecommerce_system_event) by its unique ID. Only authorized roles (administrator) may update events, and only mutable fields (if any) are permitted per business rules. Note that actual system events should generally be immutable, but this endpoint is reserved for rare cases such as compliance remediation or retroactive corrections where strictly allowed.\n\nPayload must include only the fields permitted for update (as described in the schema). All updates are tracked and audited. Non-authorized roles will be denied access. Attempting to update immutable fields or non-existent events will result in errors.",
    "summary": "Update a system event by ID (ai_ecommerce_system_event).",
    "parameters": [
      {
        "name": "id",
        "description": "Target system event's unique UUID.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields for system event update.",
      "typeName": "IAiEcommerceSystemEvent.IUpdate"
    },
    "responseBody": {
      "description": "Updated system event record.",
      "typeName": "IAiEcommerceSystemEvent"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvent/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft delete) a system event by ID for compliance. Table: ai_ecommerce_system_event",
    "description": "Soft delete or hard delete a system event in the ai_ecommerce_system_event table, identified by unique ID. Used for legal/audit compliance such as GDPR data erasure requests or administrative mistake remediation. Deletions are tracked in audit logs.\n\nMost system events are append-only, so this operation is strictly controlled by roles (administrator only). Attempting to delete non-existent or already-deleted events returns an error. After deletion, subsequent reads for this id will reflect 'soft deleted' or not found status (depending on implementation/policy).",
    "summary": "Delete a system event by ID (ai_ecommerce_system_event).",
    "parameters": [
      {
        "name": "id",
        "description": "Target system event's unique UUID.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/systemEvent/{id}",
    "method": "delete"
  },
  {
    "specification": "Get a paginated/searchable list of compliance audits. Table: ai_ecommerce_compliance_audit",
    "description": "Retrieve a list of compliance audit records from the ai_ecommerce_compliance_audit table. Supports searching, pagination, and sorting. Each audit record logs a regulatory, privacy, or compliance action as required by audit and compliance rules (see schema), with references to administrator, audit type, subject entity, status, notes, and timestamp.\n\nAdmins/auditors use this endpoint for compliance investigations, policy review traces, or regulatory export. Results can be filtered by audit_type, status, subject_table, created_at, or admin_id. Usage typically includes regular reviews, policy self-checks, external regulator requirements, or platform security reporting. Access is restricted to administrators/compliance roles.",
    "summary": "List/search compliance audits (ai_ecommerce_compliance_audit).",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination details for compliance audit records.",
      "typeName": "IListAiEcommerceComplianceAudit.Request"
    },
    "responseBody": {
      "description": "Paginated data and results for audit logs.",
      "typeName": "IPageIAiEcommerceComplianceAudit"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudit",
    "method": "patch"
  },
  {
    "specification": "Get a single compliance audit record by ID. Table: ai_ecommerce_compliance_audit",
    "description": "Retrieve one compliance audit record (ai_ecommerce_compliance_audit) using its unique audit ID. Used by compliance officers and platform auditors when reviewing a particular regulatory, privacy, or security action. The record includes all detail fields (admin actor, audit type, subject entity, status, notes, timestamp) as per schema.\n\nOnly admin/compliance roles are authorized. This endpoint supports legal and regulatory traceability functions and supports downstream audit/reporting/report export flows. If the audit record is deleted/not found, appropriate error/status response is returned.",
    "summary": "Get a compliance audit by ID (ai_ecommerce_compliance_audit).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique compliance audit row ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Compliance audit log row by ID.",
      "typeName": "IAiEcommerceComplianceAudit"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudit/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new compliance audit record. Table: ai_ecommerce_compliance_audit",
    "description": "Adds a compliance-relevant audit event to ai_ecommerce_compliance_audit. Used for platform policy enforcement, privacy/legal/PII actions, policy/process justification, or post-facto review. Strict 3NF: all properties are atomic (admin_id, audit_type, subject_table, subject_id, status, notes, created_at).\n\nOnly privileged admin roles may create audit records. Each row is an immutable compliance event. Errors on invalid input or privilege escalation (cannot be created as non-admin). The created row is returned for further compliance workflows as necessary.",
    "summary": "Create a compliance audit event (ai_ecommerce_compliance_audit).",
    "parameters": [],
    "requestBody": {
      "description": "Compliance audit creation fields.",
      "typeName": "IAiEcommerceComplianceAudit.ICreate"
    },
    "responseBody": {
      "description": "Created compliance audit row.",
      "typeName": "IAiEcommerceComplianceAudit"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudit",
    "method": "post"
  },
  {
    "specification": "Update a compliance audit event by ID. Table: ai_ecommerce_compliance_audit",
    "description": "Update a compliance audit event by unique audit log ID (ai_ecommerce_compliance_audit table). Only privileged admin/compliance roles. Updatable fields: possibly status, notes, or admin_id (check schema-level updatability for status vs. immutable fields).\n\nAll updates are audit-logged and subject to policy enforcement. Uses strict idempotency: only provided fields are changed. Unauthorized role access, or update of deleted/non-existent row, raises error. Used for correcting audit event status or appending notes.",
    "summary": "Update a compliance audit event by ID (ai_ecommerce_compliance_audit).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique compliance audit row ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update for compliance audit.",
      "typeName": "IAiEcommerceComplianceAudit.IUpdate"
    },
    "responseBody": {
      "description": "Updated compliance audit row.",
      "typeName": "IAiEcommerceComplianceAudit"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudit/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (soft delete) a compliance audit event by ID. Table: ai_ecommerce_compliance_audit",
    "description": "Soft delete or remove a compliance audit event entry (ai_ecommerce_compliance_audit) by unique audit log ID. Used for remediation of errant records or compliance erasure requests. Deletions are audit-logged and strictly controlled for RBAC (administrators only).\n\nAccessing deleted or non-existent entity by other endpoints will reflect proper error or deletion status. Critical action for compliance-sensitive content.",
    "summary": "Delete a compliance audit log by ID (ai_ecommerce_compliance_audit).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique compliance audit row ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/complianceAudit/{id}",
    "method": "delete"
  },
  {
    "specification": "List or search community last activity materialized views (mv_community_last_activity).",
    "description": "Get a paginated/searchable list of last activity records from the materialized view mv_community_last_activity (read-only table). Used for dashboards, AI/ranking, analytics, or reporting. Each row contains reference IDs for main actors/content and activity time/type.\n\nFilters include customer, date range, activity type. Only administrators or advanced analysts may use this endpoint. Data may not be up-to-the-second fresh given materialized view lag. No creation, mutation, or deletion allowed (read/search only).",
    "summary": "List/search last community activity (mv_community_last_activity).",
    "parameters": [],
    "requestBody": {
      "description": "List/search filters and pagination details.",
      "typeName": "IMvCommunityLastActivity.IRequest"
    },
    "responseBody": {
      "description": "Paginated last community activity results.",
      "typeName": "IPageIMvCommunityLastActivity"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvCommunityLastActivity",
    "method": "patch"
  },
  {
    "specification": "Fetch (lookup) a single last activity entity for a user or item. Table: mv_community_last_activity (materialized view)",
    "description": "Get a specific content/user/entity last activity record from the mv_community_last_activity materialized view by its unique ID. Used for dashboard lookup, user segmentation, AI ranking features, or targeted content curation. Read-only per the nature of materialized views.\n\nReturned entity includes all FK references and activity type/time as described in the schema. Errors if requested record is not found.",
    "summary": "Get a last activity record by ID (mv_community_last_activity).",
    "parameters": [
      {
        "name": "id",
        "description": "Primary key for the last activity record (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Last community activity row (by ID).",
      "typeName": "IMvCommunityLastActivity"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvCommunityLastActivity/{id}",
    "method": "get"
  },
  {
    "specification": "Attempt append new record to mv_community_last_activity (MV). Not recommended unless materialized view is writable.",
    "description": "Writes a new last activity record directly to mv_community_last_activity, normally a materialized view. Use only if this MV is implemented as a writable view or in flavors where direct inserts are accepted.\n\nBy convention, most production materialized views are read-only, so API surface for POST is hidden or locked. If forcibly enabled, only the correct schema Must be used. All audit/trace context must be atomically encoded.\n\nViolating view constraints or improper input yields errors. Usage only for platform administrators; improper use risks breaking analytics or dashboards.",
    "summary": "Insert new last activity record to mv_community_last_activity (danger/rare: MV usually not writable).",
    "parameters": [],
    "requestBody": {
      "description": "Row to insert into mv_community_last_activity (writable MV only).",
      "typeName": "IMvCommunityLastActivity.ICreate"
    },
    "responseBody": {
      "description": "Created last community activity record.",
      "typeName": "IMvCommunityLastActivity"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvCommunityLastActivity",
    "method": "post"
  },
  {
    "specification": "Update the mvCommunityLastActivity entity, which represents the materialized view of the last activity in the community domain for the ai_ecommerce platform. This operation allows updating all fields for a given last activity record based on its unique ID, following RESTful PUT semantics. It is associated with the mv_community_last_activity table. The endpoint should receive the entire resource object and replaces the existing record. Security: Should require admin or system role with appropriate privileges. Validation: ID must exist; replaces the entire record. Error handling: returns not found if ID does not exist. Related: DELETE endpoint to remove a record.",
    "description": "This API operation updates a complete mvCommunityLastActivity record—the materialized view of a user's or entity's most recent community activity. The ai_ecommerce.mv_community_last_activity table supports reporting, recommendation, and analytics by caching cross-entity activity data. Fields include activity references (to customer, thread, comment, inquiry, review), activity type, and timestamp. The operation fully replaces all fields for the provided ID, enforcing strict 3NF normalization from the ERD. Security: Only privileged users (platform administrators) should be allowed to update this view data, as it could impact analytics and AI models. Related operations: DELETE for removal; PATCH not used since full resource is replaced. Expected behavior: 404 if the ID does not exist, 200 with resource if successful.",
    "summary": "Update a mvCommunityLastActivity record (ai_ecommerce.mv_community_last_activity).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the mvCommunityLastActivity resource to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated mvCommunityLastActivity resource data.",
      "typeName": "mvCommunityLastActivity.IUpdate"
    },
    "responseBody": {
      "description": "The updated mvCommunityLastActivity record.",
      "typeName": "mvCommunityLastActivity"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvCommunityLastActivity/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a mvCommunityLastActivity entity from ai_ecommerce materialized views. Used to remove cached last-activity information from the analytics/reporting layer, not for permanent business or community object deletion. Linked to the mv_community_last_activity table, referenced for compliance cleanup, analytics resets. Security: restricted to administrator roles. Validation: ID must exist. Returns success/failure status. Related: PUT for updating entries.",
    "description": "Deletes a specific mvCommunityLastActivity entry from the ai_ecommerce.mv_community_last_activity table. This materialized view is used for advanced reporting—removing an entry will remove it from analytics and recommendations. Access control is required: only admin-level privileged actors may perform deletions. If the record does not exist, a 404 should be returned. Related APIs include PUT for record replacement/creation. Operation should not affect business data, only analytics cache/store. Error handling: clear not found response if ID is missing.",
    "summary": "Delete a mvCommunityLastActivity record (ai_ecommerce.mv_community_last_activity).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the mvCommunityLastActivity resource to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvCommunityLastActivity/{id}",
    "method": "delete"
  },
  {
    "specification": "Search or filter ai_ecommerce.mv_daily_stats materialized view records, typically for date/pagination, analytics/reporting. Associated table: mv_daily_stats. Enables analytics dashboards to retrieve filtered or paged daily aggregation data (orders, revenue, logins, etc). Security: admin roles. Supports advanced filtering, sorting, and pagination via request body. Related: GET for single record, POST for inserting new stat, PUT for update, DELETE for record removal.",
    "description": "Retrieves a filtered, paginated, or searched list of mvDailyStats records. The ai_ecommerce.mv_daily_stats table is a materialized view that stores analytic aggregations of daily platform stats (order count, revenue, logins, signups, review count). This PATCH operation enables dashboard UIs and analytics clients to get filtered results, e.g., by stat_date, order_count threshold, revenue ranges, etc. Follows best practice for handling complex search with JSON bodies. Authorization is limited to administrators due to the sensitivity of analytics data. Related resource endpoints handle create (POST), update (PUT), delete (DELETE), and detail retrieval (GET).",
    "summary": "List or search mvDailyStats records (ai_ecommerce.mv_daily_stats).",
    "parameters": [],
    "requestBody": {
      "description": "Filters and search parameters for mvDailyStats query.",
      "typeName": "mvDailyStats.IRequest"
    },
    "responseBody": {
      "description": "Paginated/filtered mvDailyStats results.",
      "typeName": "IPageMvDailyStats"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvDailyStats",
    "method": "patch"
  },
  {
    "specification": "Retrieve a single mvDailyStats analytics record by ID. Associated with ai_ecommerce.mv_daily_stats materialized view, supporting single-record analytics inspection. ID is a UUID of the view row. Returns full aggregation stats for that date. Errors if record not found. Security: admin roles. Related: PATCH for search, POST for insert, PUT for update, DELETE for removal.",
    "description": "Returns a single mvDailyStats record from the ai_ecommerce.mv_daily_stats table, addressing a specific record by its unique ID. This materialized view caches daily platform statistics for dashboard, reporting, and AI analytics (including order count, revenue, logins, signups, and review counts). Operation is read-only—no modification occurs. 404 returned if no such record exists. Security/enforcement: restricted to admin-level users due to sensitive business data. Related APIs include PATCH for listing, POST/PUT for modifying, DELETE for removal.",
    "summary": "Get single mvDailyStats record (ai_ecommerce.mv_daily_stats).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the mvDailyStats record to read.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The requested mvDailyStats record.",
      "typeName": "mvDailyStats"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvDailyStats/{id}",
    "method": "get"
  },
  {
    "specification": "Insert a new ai_ecommerce.mv_daily_stats analytics record. Linked to the materialized view for dashboard/reporting analytics. Accepts all fields for creation of a new row. Admin roles only. Related: PATCH for list/search, GET for detail, PUT for update, DELETE for removal.",
    "description": "Creates an mvDailyStats entity—an analytics snapshot of platform activity for a specific day—in the ai_ecommerce.mv_daily_stats materialized view. Required for custom nightly aggregation or manual repair by an operator. All fields are provided; ID is typically auto-generated, but may be client-supplied per ERD. Authorization restricted to privileged users (administrators). Related endpoints: PATCH for listing, GET/PUT for detail/edit, DELETE for removal. Validates input, returns created record or errors if key conflicts.",
    "summary": "Create a mvDailyStats record (ai_ecommerce.mv_daily_stats).",
    "parameters": [],
    "requestBody": {
      "description": "Creation information for mvDailyStats.",
      "typeName": "mvDailyStats.ICreate"
    },
    "responseBody": {
      "description": "The created mvDailyStats record.",
      "typeName": "mvDailyStats"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvDailyStats",
    "method": "post"
  },
  {
    "specification": "Update an existing ai_ecommerce.mv_daily_stats analytics record by ID, replacing all fields for the specified stat row. Used to manually correct analytics or back-fill/correct batch operations. This is a full-replacement (PUT) operation. Associated table: mv_daily_stats. Admin authorization only. Validates ID exists, otherwise returns 404. Related endpoints: PATCH for list/search, POST for create, DELETE for deletion.",
    "description": "Fully updates a single mvDailyStats record by unique ID in the ai_ecommerce.mv_daily_stats materialized view. Used for manual correction or authorized batch editing by privileged accounts. Every field of the record must be supplied; the update replaces the current persisted stats in full compliance with database normalization. Related endpoints: PATCH for complex search, POST for create, GET for detail, DELETE for removal. Expected errors: 404 for not found, 400 for validation issues. Authorization is restricted to privileged users (administrators).",
    "summary": "Update a mvDailyStats record (ai_ecommerce.mv_daily_stats).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the mvDailyStats resource to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Full replacement of mvDailyStats record.",
      "typeName": "mvDailyStats.IUpdate"
    },
    "responseBody": {
      "description": "The updated mvDailyStats record.",
      "typeName": "mvDailyStats"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvDailyStats/{id}",
    "method": "put"
  },
  {
    "specification": "Delete mvDailyStats record from ai_ecommerce.mv_daily_stats analytics view. This operation removes a cached aggregation entry, typically for data cleaning or error correction in analytics. Associated table: ai_ecommerce.mv_daily_stats. Authorization: admin. Validates ID existence. Returns success or not found. Related endpoints: GET/PATCH/POST/PUT for other operations.",
    "description": "Deletes a single mvDailyStats entry from the ai_ecommerce.mv_daily_stats table, removing a specific day's analytics from all dashboard, reporting, or AI pipeline use. This is an analytics-layer delete—not business transaction delete. Operation should check for ID existence, return 404 if missing. Only privileged roles (admin) may perform. Related endpoints include PATCH for querying, GET for reading, POST/PUT for creation/updates. Error cases: returns not found if no such record.",
    "summary": "Delete a mvDailyStats record (ai_ecommerce.mv_daily_stats).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the mvDailyStats resource to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvDailyStats/{id}",
    "method": "delete"
  },
  {
    "specification": "List or search mvTrendingProducts records from ai_ecommerce.mv_trending_products—materialized analytics view for trending product stats. PATCH supports advanced filtering, pagination, sorting as body. Associated with trending analytics, dashboard feeds, and AI pipeline. Security: admin only. Related: GET for single record, POST for create, PUT for update, DELETE for remove.",
    "description": "Retrieves a filtered set of mvTrendingProducts records (ai_ecommerce.mv_trending_products materialized view). Used by analytics dashboards, recommendation engines, and admin tools to power trending stats, sort by trend rank, stat date, or period. Filters in request body allow complex query logic with search by stat_period, stat_date, scores, rank, or product_id. The PATCH method is chosen for custom JSON body filters per REST/API best practices. Results are paginated and access is restricted to business administrators. Related endpoints: GET for detail, POST/PUT for edit, DELETE for removal.",
    "summary": "Search or list mvTrendingProducts records (ai_ecommerce.mv_trending_products).",
    "parameters": [],
    "requestBody": {
      "description": "Query parameters for mvTrendingProducts search/list.",
      "typeName": "mvTrendingProducts.IRequest"
    },
    "responseBody": {
      "description": "Paginated/filter result set of mvTrendingProducts rows.",
      "typeName": "IPageMvTrendingProducts"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvTrendingProducts",
    "method": "patch"
  },
  {
    "specification": "Return a single mvTrendingProducts analytics record by ID, for inspection of trending product metrics (e.g., rank, period, counts). ai_ecommerce.mv_trending_products is a materialized view table. Returns complete row object. Requires admin. Related endpoints: PATCH for list/search, POST for create, PUT for update, DELETE for remove.",
    "description": "Returns the complete mvTrendingProducts record from ai_ecommerce.mv_trending_products identified by the unique ID in the path parameter. Contains fields such as product ID, stat period/date, trend rank, sales/views count, composite score. Used in admin dashboards and recommendation analytics for tracing trending product state. Read-only operation, returns 404 if no such record exists. Security is restricted to privileged business admin accounts. Related operations: PATCH for listing, POST/PUT for creation/updates, DELETE for remove.",
    "summary": "Get a single mvTrendingProducts record (ai_ecommerce.mv_trending_products).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the mvTrendingProducts resource to return.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Requested mvTrendingProducts resource.",
      "typeName": "mvTrendingProducts"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvTrendingProducts/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new mvTrendingProducts analytics/materialized view entry. Associated with ai_ecommerce.mv_trending_products table, for manual backfill or advanced analytics pipelining. Accepts all fields for resource creation. Authorization: admin only. Related endpoints: PATCH for listing/search, GET for detail, PUT for updates, DELETE for removal.",
    "description": "Creates a new mvTrendingProducts record—the analytic summary for trending products—within the ai_ecommerce.mv_trending_products materialized view. Used for manual injection or repair in cases where analytics pipeline needs to override or reconstruct trending stats. Requires all resource fields as POST body data. Security is restricted to privileged users due to the impact on analytics outputs. Related endpoints include PATCH/GET/PUT/DELETE as customary RESTful operations. Input validation and uniqueness enforcement by system.",
    "summary": "Create a mvTrendingProducts record (ai_ecommerce.mv_trending_products).",
    "parameters": [],
    "requestBody": {
      "description": "Creation data for mvTrendingProducts resource.",
      "typeName": "mvTrendingProducts.ICreate"
    },
    "responseBody": {
      "description": "The created mvTrendingProducts record.",
      "typeName": "mvTrendingProducts"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvTrendingProducts",
    "method": "post"
  },
  {
    "specification": "Update full mvTrendingProducts analytics record by unique ID. Replaces all resource fields by new values. ai_ecommerce.mv_trending_products is a materialized view table. This supports manual repair, correction, or backfill. Requires full data in body. Requires privileged role. Related: PATCH for search, POST for create, DELETE for removal, GET for detail.",
    "description": "Updates all fields of a single mvTrendingProducts record within ai_ecommerce.mv_trending_products. PUT replaces the full entry for correction, data repair, or advanced admin workflow. All fields are required and overwrite any persisted stats for that trending product/date/period combination. Authorization restricted to administrators; operation is only for analytics repair or manual override. Returns 404 if the specified ID is not found. Related endpoints: POST for creation, PATCH for listing, DELETE for removal, GET for details.",
    "summary": "Update a mvTrendingProducts record (ai_ecommerce.mv_trending_products).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the mvTrendingProducts resource to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated full mvTrendingProducts resource data.",
      "typeName": "mvTrendingProducts.IUpdate"
    },
    "responseBody": {
      "description": "The updated mvTrendingProducts record.",
      "typeName": "mvTrendingProducts"
    },
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvTrendingProducts/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a mvTrendingProducts analytics row by ID from ai_ecommerce.mv_trending_products table. Typically for analytics correction, cleanup, or admin repair. Admin authorization only. Related: PATCH for list, POST for create, GET for detail, PUT for update.",
    "description": "Deletes the specified mvTrendingProducts row from the ai_ecommerce.mv_trending_products materialized view analytics table. Used for manual cleanup, analytics correction, or pipeline repair, with heavy access restrictions (administrator). Does not delete associated business records, only cached analytics. Will return 404 if not found, 204 on success. Related endpoints: GET, PATCH, POST, PUT as standard for resource operations.",
    "summary": "Delete a mvTrendingProducts record (ai_ecommerce.mv_trending_products).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the mvTrendingProducts resource to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "administrator"
    ],
    "path": "/ai_ecommerce/mvTrendingProducts/{id}",
    "method": "delete"
  }
]