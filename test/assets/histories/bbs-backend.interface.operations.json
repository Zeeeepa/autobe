[
  {
    "specification": "This operation retrieves a filtered, paginated, and sorted list of user accounts (discussionboard_user). It fulfills use cases such as management interfaces, search, and user directories. The request supports advanced search by display name/email/activity status, paging controls, and sorting by registration or update time. The endpoint is essential for admin/user management screens and analytics. The response is a paginated collection of user summaries with meta info (total count, next cursor, etc).",
    "description": "This PATCH endpoint for discussionboard_user allows clients to retrieve a list of users by supplying filter conditions (e.g. search/role/is_active), as well as pagination and sorting options. For instance, an admin needs to find all users registered this month, users whose display name matches a keyword, or to browse users sorted by recent activity. Security: Only accessible to authorized roles (admin or moderator). Validation includes correct filter field values, allowed sort fields, and page size limits. If the request uses unsupported or invalid search parameters, a 400 error is returned. If no users are found, an empty array is returned with pagination metadata.",
    "summary": "List and search users for discussionboard_user (user management)",
    "parameters": [],
    "requestBody": {
      "description": "Filtering, pagination, and sorting options for user list retrieval.",
      "typeName": "IDiscussionboardUser.IRequest"
    },
    "responseBody": {
      "description": "Paginated user summary list with meta and data fields.",
      "typeName": "IPageDiscussionboardUser.ISummary"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/users",
    "method": "patch"
  },
  {
    "specification": "This operation fetches detailed information about a single user account in the system (discussionboard_user). Designed for user profile view, admin moderation, or account detail pages. Key for editing, investigating, or managing a user. Fetched by unique user ID (UUID).",
    "description": "GET /discussionboard/users/{id} retrieves complete details for the specified user, including email, display name, avatar, account status (active/banned), and timestamps. Permissions: Only the user themselves, moderators, or admins can access this endpoint. Validation: id must be valid UUID, and user must exist. Error 404 is given if no matching user. Audit logs may be generated for access depending on settings. Used primarily for displaying a user's profile or as a prelude to management actions.",
    "summary": "Fetch a single user's details for discussionboard_user (user management)",
    "parameters": [
      {
        "name": "id",
        "description": "Target user's ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "User account details",
      "typeName": "IDiscussionboardUser"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/users/{id}",
    "method": "get"
  },
  {
    "specification": "This operation allows the creation of a new user account (discussionboard_user). Supports registration, user onboarding by admins, or self-signup flows. The request body contains credentials and basic profile info. Upon success, returns the newly created user record (sans sensitive hashes).",
    "description": "POST /discussionboard/users creates a new user account with email, password (hashed internally), display name, and optional avatar. Email must be unique. Validation: email format, password security rules, displayName non-empty. Permissions: Public for user self-registration, restricted for admin-invoked creation. Duplicate email returns 409 conflict. New user's status is_active by default unless admin registration. Returns created user object.",
    "summary": "Register/create account for discussionboard_user (user management)",
    "parameters": [],
    "requestBody": {
      "description": "Account registration information",
      "typeName": "IDiscussionboardUser.ICreate"
    },
    "responseBody": {
      "description": "Created user's complete info (password_hash NOT returned)",
      "typeName": "IDiscussionboardUser"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/users",
    "method": "post"
  },
  {
    "specification": "This operation updates all mutable fields of a single user account (discussionboard_user), such as email, display name, or avatar. Enables admin editing of user records or user-initiated profile/account changes. Replaces all updatable fields. Account state changes (e.g., ban, activate) may invoke business logic. Returns the updated user info.",
    "description": "PUT /discussionboard/users/{id} updates the specified user record with fields from the request body (e.g., changing display name, email, or avatar). Requires id to be a valid user UUID. Permissions: Only the authenticated user, moderators, or admins may update. Validation: uniqueness for email (if changed), required fields, limitations on self-state changes (e.g. cannot self-ban). On success, updated user info is returned. Error 404 if user does not exist or insufficient permissions.",
    "summary": "Update full user record for discussionboard_user (user management)",
    "parameters": [
      {
        "name": "id",
        "description": "Target user's ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "New values for user record (all mutable fields)",
      "typeName": "IDiscussionboardUser.IUpdate"
    },
    "responseBody": {
      "description": "Updated user account record",
      "typeName": "IDiscussionboardUser"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/users/{id}",
    "method": "put"
  },
  {
    "specification": "This operation deletes (soft-deletes) a user account from the system (discussionboard_user) by setting its deleted_at field. Required for admin moderation and user privacy. Leaves the record in the DB for retention/audit. Does not allow deletion of protected system accounts. Returns status or deleted record.",
    "description": "DELETE /discussionboard/users/{id} marks the target user as deleted (deleted_at is set, but data is retained for compliance/audit). Only admins or possibly moderators may perform deletions. Validation: user existence, permission checks, account is not protected/admin. Error 403 if protected, error 404 if user not found. Most actions on deleted users are blocked thereafter.",
    "summary": "Soft delete a user (set deleted_at) for discussionboard_user (user management)",
    "parameters": [
      {
        "name": "id",
        "description": "Target user's ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Deleted user's record or deletion result",
      "typeName": "IDiscussionboardUser"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/users/{id}",
    "method": "delete"
  },
  {
    "specification": "This operation lists user profile records (discussionboard_user_profile) with search and pagination. Used for admin profile management, analytics, or browsing. Allows filtering by bio fields or location. Paged, filterable search for viewing all user profiles.",
    "description": "PATCH /discussionboard/users/profiles fetches a paginated and sortable list of user profiles, with optional filtering by bio/location/website/tags. Used by admins to browse and search user profiles, or for analytics. Page controls and sort order are enforced. 400 error for invalid filters. Returns paginated profile summaries.",
    "summary": "List and search user profiles for discussionboard_user_profile",
    "parameters": [],
    "requestBody": {
      "description": "Profile filtering, pagination, and sort specification",
      "typeName": "IDiscussionboardUserProfile.IRequest"
    },
    "responseBody": {
      "description": "Paginated profile summaries with meta-data",
      "typeName": "IPageDiscussionboardUserProfile.ISummary"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/users/profiles",
    "method": "patch"
  },
  {
    "specification": "This operation returns a specific user profile (discussionboard_user_profile) by id. Used for admin or moderator review, or to show extended profile info (bio, location, website, social links). ID is the profile's PK (UUID, usually same as user_id).",
    "description": "GET /discussionboard/users/profiles/{id} fetches full detail for a user profile based on profile id (UUID). Permissions: admin, moderator, or the user themselves can access. Returns the extended user profile object, or 404 if not found. Used in profile pages or admin tools.",
    "summary": "Fetch a user's profile detail for discussionboard_user_profile",
    "parameters": [
      {
        "name": "id",
        "description": "Profile record UUID (usually same as user_id)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed user profile information",
      "typeName": "IDiscussionboardUserProfile"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/users/profiles/{id}",
    "method": "get"
  },
  {
    "specification": "This operation creates a new profile record for a user (discussionboard_user_profile). Used to supplement the main user record with profile/bio data. Can be invoked by the user at signup or admin creating a profile for another user. Returns created profile.",
    "description": "POST /discussionboard/users/profiles creates a profile record with bio/location/social/website data. Must reference a real user_id. Validation: user existence, only one profile per user, correct data types on optional fields. Permissions: self or admin only. 409 conflict if profile already exists for that user.",
    "summary": "Create profile for user for discussionboard_user_profile",
    "parameters": [],
    "requestBody": {
      "description": "Profile record creation info",
      "typeName": "IDiscussionboardUserProfile.ICreate"
    },
    "responseBody": {
      "description": "Created profile",
      "typeName": "IDiscussionboardUserProfile"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/users/profiles",
    "method": "post"
  },
  {
    "specification": "This operation updates an existing user profile (discussionboard_user_profile) by full-replace of mutable fields. Intended for profile edit flows, admin mass edits, or self-service profile updates. Verifies profile exists, validates that only allowed fields are changed. Returns new version of profile.",
    "description": "PUT /discussionboard/users/profiles/{id} overwrites the profile record with values from the request body (bio, location, social links). Validation: profile existence, field constraints, user permission (self/admin/mod). Error 404 if not found, 403 insufficient permissions. Returns updated profile object on success.",
    "summary": "Update user profile for discussionboard_user_profile",
    "parameters": [
      {
        "name": "id",
        "description": "Target profile id (UUID—usually same as user id)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Profile update data (full object)",
      "typeName": "IDiscussionboardUserProfile.IUpdate"
    },
    "responseBody": {
      "description": "Updated user profile",
      "typeName": "IDiscussionboardUserProfile"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/users/profiles/{id}",
    "method": "put"
  },
  {
    "specification": "This operation deletes (soft-deletes) a user's profile (discussionboard_user_profile), used for account closure or privacy (delete bio/location/social). Sets deleted_at on the profile. Allows user or admin to remove profile data while retaining main account. Returns deleted profile object or deletion result.",
    "description": "DELETE /discussionboard/users/profiles/{id} sets deleted_at on the profile, removing bio and personal info. Authorization: admin/mod, or self (may be configurable). Profile must exist. 404 if not found. Used for compliance/account deletion tools. Afterward, user_id remains but profile/bio is hidden.",
    "summary": "Delete or anonymize a user profile for discussionboard_user_profile",
    "parameters": [
      {
        "name": "id",
        "description": "Profile (user) id UUID",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Deleted/anonymized profile result",
      "typeName": "IDiscussionboardUserProfile"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/users/profiles/{id}",
    "method": "delete"
  },
  {
    "specification": "This operation lists all moderator role assignments (discussionboard_moderator) with search and pagination. Used by admins to see who is assigned as moderator (platform or board-scoped). Provides moderator info, assignment times, revoked status, and associated boards. Supports filtering by board/user or revoked state.",
    "description": "PATCH /discussionboard/moderators lists moderator roles with paging and filtering by board_id, user_id, active/revoked state, etc. Used by admins managing moderation teams, compliance reviews, or searching for mods by board. Only accessible to admins. Pagination, sort and filter fields validated per API schema; errors returned for invalid input. Returns paginated moderator assignment summaries.",
    "summary": "List/search moderator role assignments for discussionboard_moderator",
    "parameters": [],
    "requestBody": {
      "description": "Moderator search/filter/pagination options",
      "typeName": "IDiscussionboardModerator.IRequest"
    },
    "responseBody": {
      "description": "Paginated moderator assignment list with meta",
      "typeName": "IPageDiscussionboardModerator.ISummary"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/moderators",
    "method": "patch"
  },
  {
    "specification": "This operation returns details about a specific moderator assignment (discussionboard_moderator), typically for audit, detail view in admin/mod panel, or compliance checking. Fetches by moderator-assignment id (PK/UUID).",
    "description": "GET /discussionboard/moderators/{id} fetches the details of the moderator role assignment (who, which board, assigned by whom, when assigned/revoked). Authorization: admin/mod only. Used in audit, permission checks, or UI details for role control. 404 returned if id not found.",
    "summary": "View one moderator assignment for discussionboard_moderator",
    "parameters": [
      {
        "name": "id",
        "description": "Moderator assignment id UUID",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Moderator assignment details",
      "typeName": "IDiscussionboardModerator"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/moderators/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a moderator assignment in the discussionboard platform. This operation corresponds to the discussionboard_moderator Prisma table and enables admins to assign users as moderators, either platform-wide or for specific boards. Key fields such as user_id, board_id, assigned_by_admin_id, and assigned_at must be provided. Input validation should ensure that the user exists and assignment constraints (e.g., cannot assign same user to a board twice if still active) are respected. This endpoint may also enforce admin authorization based on role and should return the created moderator assignment including all audit information. Related APIs: revoking moderator (DELETE) and updating assignments (PUT).",
    "description": "This endpoint allows admins to assign a user as a moderator to the platform or to a specific board. It is secured to admin roles and writes a new record in the discussionboard_moderator table. Auditing the assigned_by_admin_id and assignment timestamp ensures compliance with traceability and role management business rules. The operation checks that the target user exists and is not currently revoked for the same board. All fields (user_id, board_id if applicable, assigned_at, assigned_by_admin_id) must be included in the request body. Any attempts to assign duplicate or conflicting moderator roles will be prevented via application or database constraints. On success, returns the complete moderator assignment record, mirroring the Prisma model properties (id, user_id, board_id, assigned_by_admin_id, assigned_at, revoked_at). Authorization is restricted to users with the 'admin' role; other roles receive access denied errors or appropriate error messages.",
    "summary": "Assign a user as a moderator (discussionboard_moderator table).",
    "parameters": [],
    "requestBody": {
      "description": "Moderator assignment input (user_id, board_id, assigned_by_admin_id, assigned_at).",
      "typeName": "IDiscussionboardModerator.ICreate"
    },
    "responseBody": {
      "description": "Created moderator assignment record.",
      "typeName": "IDiscussionboardModerator"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/moderators",
    "method": "post"
  },
  {
    "specification": "Updates an existing moderator assignment in the discussionboard_moderator table. This operation is used to change properties such as board scope or to revoke/restore moderator status for the specified assignment (e.g. set revoked_at). It is used by platform admins to manage existing moderator assignments and enforce moderation policies. Validates correct moderator id and applies business logic like ensuring only active assignments can be altered. Closely tied to audit requirements and moderator lifecycle management in the DB schema.",
    "description": "This endpoint permits updating details for an existing moderator assignment (row in discussionboard_moderator), addressed by its id path parameter. Allowed changes include modifying the assignment's scope (board_id), revoking privileges (setting revoked_at), or updating assignment metadata. Only authorized admins can perform updates, and all changes are tracked by audit logging. Functionality tightly adheres to role, board, and status constraints as defined on the model. Attempting to update a non-existent or already-revoked assignment results in not found or conflict errors. Related operations: assigning moderators (POST), revoking assignments (DELETE).",
    "summary": "Update moderator assignment properties or revoke status.",
    "parameters": [
      {
        "name": "id",
        "description": "Target moderator assignment's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated moderator assignment details.",
      "typeName": "IDiscussionboardModerator.IUpdate"
    },
    "responseBody": {
      "description": "Updated moderator assignment record.",
      "typeName": "IDiscussionboardModerator"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/moderators/{id}",
    "method": "put"
  },
  {
    "specification": "Removes or revokes a moderator assignment, marking it indefinitely revoked in the discussionboard_moderator table. Implements the business process of de-moderating a user, either platform-wide or per board. Also supports soft deletion/revocation via updated revoked_at timestamp, not hard removal, as per audit compliance. Uses the specified assignment id for precise targeting, and limits access to admin roles.",
    "description": "This endpoint permanently revokes a moderator role by marking the discussionboard_moderator record as revoked (setting revoked_at and other status fields as needed). It enforces business rules by preventing repeated assignment without reactivation and guarantees that full audit logs are kept for compliance. Only platform or organization admins may use this operation, which results in removal of moderator rights from the user for the specified context (platform or particular board). All related role management and notification flows are triggered as per platform policy. Attempting to delete a non-existent or already-revoked assignment yields an error response, which should clarify the cause. The operation is tightly integrated with role assignment history and compliance features.",
    "summary": "Revoke (delete/soft delete) moderator assignment by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Target moderator assignment's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Moderator assignment revocation confirmation.",
      "typeName": "IDiscussionboardModerator"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/moderators/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a list of admin assignments, possibly with filtering and pagination, from the discussionboard_admin table. Supports searching by role, user, or assignment status. Used for platform admin management dashboards or audit/history lookups. The request may include query parameters for filtering, but complex filters should be part of the request body if needed. Results reflect current assignments as well as assignment history (including revoked entries).",
    "description": "Returns a paginated or filtered list of all admin assignment records (entries in the discussionboard_admin table), optionally filtered by user, assignment status, or date. This endpoint is restricted to users with 'admin' permissions and is used for managing, auditing, or reporting all elevated admin roles on the platform. The list includes all properties of the admin assignment model (id, user_id, assigned_by_admin_id, assigned_at, revoked_at) and is sorted by created/assigned_at by default. Related endpoints: create admin (POST), update admin (PUT), delete admin (DELETE).",
    "summary": "List all admin assignments (discussionboard_admin table), filtered and paginated.",
    "parameters": [],
    "requestBody": {
      "description": "Admin assignment search/filter parameters.",
      "typeName": "IDiscussionboardAdmin.IRequest"
    },
    "responseBody": {
      "description": "Paginated/admin assignment list result.",
      "typeName": "IPageIDiscussionboardAdmin"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/admins",
    "method": "patch"
  },
  {
    "specification": "Retrieves detailed information about a single admin assignment from discussionboard_admin table, using the unique assignment id. Supports precise audit, role management, or viewing of admin privilege assignments. Useful for reviewing specific assignment histories or status, and displaying all assignment properties as per schema.",
    "description": "Fetches and returns the data for a specified admin assignment by id, reflecting all tracked properties: id, user_id, assigned_by_admin_id, assigned_at, revoked_at. The endpoint ensures the requesting user has appropriate permissions (admin) and returns an error if the record is not found. Used for detailed view panels in admin dashboards, or when performing checks/audit on privileged users. Related endpoints: update admin assignment (PUT), delete assignment (DELETE), list admins (PATCH).",
    "summary": "Fetch single admin assignment details by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Admin assignment record's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Admin assignment detailed record.",
      "typeName": "IDiscussionboardAdmin"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/admins/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new admin assignment by inserting a record in the discussionboard_admin table. Used to grant admin rights to users based on assignment by an existing admin. Writes all audit-traceable properties and enforces uniqueness/role business rules. Ensures requesting user is authorized to grant admin roles (role = admin).",
    "description": "Assigns admin privileges to a user by creating a new entry in the discussionboard_admin table. Requires details such as user_id, assigned_by_admin_id, and assigned_at. Only existing admins can perform this operation, and attempts to assign admin role to the same user multiple times (while active) should be rejected. All operations are recorded for audit. The response is the created admin assignment row, representing the full Prisma entity schema. Related operations: listing, updating, and deleting admin assignments.",
    "summary": "Grant admin role to a user (admin assignment creation).",
    "parameters": [],
    "requestBody": {
      "description": "Admin assignment creation input.",
      "typeName": "IDiscussionboardAdmin.ICreate"
    },
    "responseBody": {
      "description": "Created admin assignment record.",
      "typeName": "IDiscussionboardAdmin"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/admins",
    "method": "post"
  },
  {
    "specification": "Updates details about an existing admin assignment (such as revoked_at, or assignment metadata) in the discussionboard_admin table, as part of admin privilege management. Intended for use by platform admins only. Supports revocation, update of assignment properties, or restoration of privilege where business logic allows. Ensures changes are fully auditable and forward-compatible with compliance.",
    "description": "This operation updates an existing admin assignment (by id) with new details, such as revoking the assignment (setting revoked_at), changing assignment properties, or altering audit metadata. Only platform admins may execute this operation, which is fully logged in the audit trail. Appropriate validation is enforced, such as not updating non-existent assignment records, and checking status transitions are valid. Attempting to update an already revoked or non-existent assignment yields an error, and all updates result in the latest assignment record as returned data.",
    "summary": "Update admin assignment (revoke, restore, edit properties).",
    "parameters": [
      {
        "name": "id",
        "description": "Admin assignment record's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated admin assignment payload.",
      "typeName": "IDiscussionboardAdmin.IUpdate"
    },
    "responseBody": {
      "description": "Updated admin assignment.",
      "typeName": "IDiscussionboardAdmin"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/admins/{id}",
    "method": "put"
  },
  {
    "specification": "Soft-deletes or revokes an admin assignment in the discussionboard_admin table, by marking revoked_at and updating status. Implements business logic for admin demotion or assignment expiration, and ensures all deletions are soft for audit compliance.",
    "description": "This endpoint allows platform admins to revoke or delete an admin assignment, marking the discussionboard_admin record as revoked (sets revoked_at). Actual deletion is typically soft, for audit and recoverability reasons. If the specified assignment is already revoked or doesn't exist, an error is returned explaining the status or absence. Related endpoints include admin assignment list, update, and detail view. All actions trigger necessary notifications and compliance records.",
    "summary": "Revoke or delete admin assignment (soft delete by ID).",
    "parameters": [
      {
        "name": "id",
        "description": "Target admin assignment record's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Revoked/deleted admin assignment record.",
      "typeName": "IDiscussionboardAdmin"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/admins/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a paginated, filterable list of role assignment journal entries from the discussionboard_role_assignment table, supporting compliance, user management, and admin/audit dashboards. Returns assignment change history, current/expired assignments, and can support complex search via request body filters. Used for tracking all role escalations and demotions on the platform.",
    "description": "Lists all role assignment records in the discussionboard_role_assignment table, supporting filter/sort/paging as needed (often in the request body for complex scenarios). Only accessible to platform admins for audit, compliance, and user privilege tracing. Exposes id, user_id, assigned_by_admin_id, role, assigned_at, revoked_at fields, and delivers search results paginated for platform scale. Used in combination with detail (GET), create (POST), update (PUT), and delete (DELETE) endpoints for a full role management solution.",
    "summary": "List all role assignment journal entries (paginated/filterable).",
    "parameters": [],
    "requestBody": {
      "description": "Role assignment search/filter/sort parameters.",
      "typeName": "IDiscussionboardRoleAssignment.IRequest"
    },
    "responseBody": {
      "description": "Paginated/filtered list of role assignment journal records",
      "typeName": "IPageIDiscussionboardRoleAssignment"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/roleAssignments",
    "method": "patch"
  },
  {
    "specification": "Fetches detailed information on a single role assignment journal entry from the discussionboard_role_assignment table for precise audit or administrative review, using the id path parameter. Only accessible to admins.",
    "description": "Fetches and returns full details about a specific role assignment journal entry in the discussionboard_role_assignment table, using the unique assignment id provided in the path. Returns all properties of the journal (id, user_id, assigned_by_admin_id, role, assigned_at, revoked_at) to support critical compliance review or permission management. Only accessible to users with admin role. Related endpoints: update, delete, create, list role assignments.",
    "summary": "Read details of a role assignment journal entry by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Target role assignment journal entry's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Role assignment detailed record.",
      "typeName": "IDiscussionboardRoleAssignment"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/roleAssignments/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new role assignment journal entry in the discussionboard_role_assignment table, documenting promotion/demotion across user/moderator/admin roles. Used by admins to effect and audit privilege transitions. Ensures audit compliance and input validation on roles, users, and assignment logic.",
    "description": "Assigns a new role (user, moderator, admin) to a user by creating a journal entry with all appropriate details, including user_id, assigned_by_admin_id, role type, assigned_at, and (optionally) revoked_at. Only platform admins may execute, and validation is performed to ensure logically allowed transitions (no conflicting or duplicate assignments). Upon success, returns the created role assignment journal record for audit/compliance. Related endpoints: update, delete, list, detail of assignments.",
    "summary": "Create a new role assignment journal entry (promotion/demotion).",
    "parameters": [],
    "requestBody": {
      "description": "Role assignment journal input (user_id, assigned_by_admin_id, role, assigned_at, revoked_at).",
      "typeName": "IDiscussionboardRoleAssignment.ICreate"
    },
    "responseBody": {
      "description": "Created role assignment journal entry.",
      "typeName": "IDiscussionboardRoleAssignment"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/roleAssignments",
    "method": "post"
  },
  {
    "specification": "Update (or revoke) a role assignment journal entry in the discussionboard_role_assignment table. Supports changing assignment details or marking a role as revoked. Used for compliance, audit, and privilege management by platform admins. Ensures all transitions are recorded.",
    "description": "Updates an existing role assignment journal entry, supporting revocation or restoration flows. This endpoint allows modification of properties including revoked_at, assigned_by_admin_id, or role type, but always with full audit trail. Only admins may execute this operation. Related endpoints are create, get, delete, and list assignments. Returning the updated journal object for downstream workflows.",
    "summary": "Update an existing role assignment journal entry (revoke, change role, etc.)",
    "parameters": [
      {
        "name": "id",
        "description": "Target role assignment journal entry's ID (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated role assignment journal record.",
      "typeName": "IDiscussionboardRoleAssignment.IUpdate"
    },
    "responseBody": {
      "description": "Updated role assignment journal entry.",
      "typeName": "IDiscussionboardRoleAssignment"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/roleAssignments/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a specific role assignment in the discussion board system. This operation targets the 'discussionboard_role_assignment' table in Prisma. It removes a role assignment record given its unique identifier. The endpoint is mainly used by admins to handle escalation/demotion or resolve accidents by completely deleting a role assignment. The process must enforce audit logging and permissions so only authorized administrators can perform deletions. On success, the record is permanently deleted or flagged for deletion (if soft delete is implemented).\n\nThis operation is self-contained but should be logged in the audit trail.",
    "description": "This API deletes a specific role assignment from the 'discussionboard_role_assignment' table, given its ID. Role assignments are critical for managing user permissions, such as escalating user privileges to moderator or admin or demoting them back to regular users. Administrative permissions are required to perform this action, and all deletion attempts are recorded in the system audit log ('discussionboard_audit_log') to ensure traceability. Business rules dictate that only authorized users (typically admins) can remove such records, and the API will validate the user's authority before proceeding. \n\nSoft-deleted records should be handled according to retention policy, with permanent deletes available to super-admins. Related audit and historical entries are not deleted, as they serve as system logs and compliance references. Edge case handling: attempts to delete non-existent IDs or unauthorized attempts result in appropriate error responses.",
    "summary": "Delete a role assignment (discussionboard_role_assignment).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique identifier of the role assignment to delete. Must be a valid UUID referencing a row in discussionboard_role_assignment.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/roleAssignments/{id}",
    "method": "delete"
  },
  {
    "specification": "List organizations in the discussion board platform, allowing for advanced filtering, searching, and pagination. This operation queries the 'discussionboard_organization' table in Prisma. It allows clients (such as admin panels or analytics dashboards) to retrieve lists of organizations, with options for keyword search and sorting.\n\nPagination and filtering must be provided in the request body to support scalable queries. Only metadata of organizations is returned as per schema normalization, and user-specific relations are handled elsewhere. This can be used for organizational admin flows, external integration views, or reporting.",
    "description": "This API retrieves a paginated and searchable list of organization records from the 'discussionboard_organization' table. Filtering options (such as name or creation date) can be provided in the request body, with full pagination support (page, size, sort order, etc). Each result entry includes atomic organizational metadata (ID, name, created_at, updated_at) but does not include child relations or user lists, which should be retrieved from other APIs.\n\nAdmins and platform operators may use this API for management, compliance, or integration. Attempts to use invalid search or pagination parameters will result in validation errors.",
    "summary": "List/search organizations (discussionboard_organization).",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination options for listing organizations.",
      "typeName": "IDiscussionboardOrganization.IRequest"
    },
    "responseBody": {
      "description": "Paginated and filtered list of organization entities.",
      "typeName": "IPageIDiscussionboardOrganization"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/organizations",
    "method": "patch"
  },
  {
    "specification": "Fetch metadata for a specific organization from the discussion board system. Uses the 'discussionboard_organization' table in Prisma, retrieving the entity with its unique ID. Used by admins, system integrators, or analytic dashboards to review, audit, or reference organizational entities by ID. The endpoint ensures authorization and retrieves only atomic fields (no related users or boards), following normalization.\n\nRole-based access or restrictions may apply as per business logic.",
    "description": "Retrieves a specific organization entity from the 'discussionboard_organization' Prisma table by its unique identifier (UUID). This is used for management, compliance, and reference within admin flows or integrations, especially in enterprise/multi-tenant environments. The API validates permissions before returning data and only exposes atomic organization fields (id, name, created_at, updated_at). Related users, boards, or assignments must be fetched separately via their own APIs. If the organization does not exist, an appropriate error or 404 is returned.",
    "summary": "Get a specific organization (discussionboard_organization).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique identifier of the organization. Must be a valid UUID referencing a row in discussionboard_organization.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Metadata for the requested organization entity.",
      "typeName": "IDiscussionboardOrganization"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/organizations/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new organization entity within the discussion board system. Operates on the 'discussionboard_organization' table in Prisma. This endpoint is typically used by admins to add organizational groupings for user/role management or external integration. The request body must contain the required creation fields as per schema. On success, returns the newly created organization.",
    "description": "Creates a new organization in the platform by inserting a row into the 'discussionboard_organization' table. The API validates required fields (such as organization name) and enforces business rules (like unique name constraints). Only users with admin privileges may call this endpoint, and the action is recorded in the audit log for compliance. Upon success, the API returns the metadata of the new organization. Duplicate names or invalid input result in validation errors. \n\nThis can be extended for integration with external directories or SSO in enterprise scenarios.",
    "summary": "Create a new organization (discussionboard_organization).",
    "parameters": [],
    "requestBody": {
      "description": "New organization entity to create.",
      "typeName": "IDiscussionboardOrganization.ICreate"
    },
    "responseBody": {
      "description": "Newly created organization record.",
      "typeName": "IDiscussionboardOrganization"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/organizations",
    "method": "post"
  },
  {
    "specification": "Update metadata for an existing organization by ID. This endpoint updates values in the 'discussionboard_organization' table within Prisma. Only atomic (top-level) properties such as name or description are modifiable. Enforces unique name constraint and requires admin-level authorization. Previous values and changes are captured in the audit log for traceability.",
    "description": "Updates an existing organization record in the 'discussionboard_organization' table identified by its unique ID. Only allowed fields (e.g., organization name) can be updated—system-controlled or child relationships remain unaffected. The input is validated, and attempts to set duplicate or invalid values result in errors. Admin permissions required. All changes are logged to the audit log ('discussionboard_audit_log') for compliance and traceability.",
    "summary": "Update organization metadata (discussionboard_organization).",
    "parameters": [
      {
        "name": "id",
        "description": "The unique identifier of the organization to update. Must reference a row in discussionboard_organization.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Updated organization fields (atomic values only).",
      "typeName": "IDiscussionboardOrganization.IUpdate"
    },
    "responseBody": {
      "description": "Updated organization entity.",
      "typeName": "IDiscussionboardOrganization"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/organizations/{id}",
    "method": "put"
  },
  {
    "specification": "Delete an organization given its unique ID. Operates on the 'discussionboard_organization' table in Prisma. Used by authorized platform admins to remove obsolete or merged organization entities. The operation validates permissions, enforces referential integrity, and records the action in the audit log. Can be extended for soft-deletion if required by policy.",
    "description": "Deletes an organization in the system using its unique identifier. This action is restricted to administrative users and triggers audit event creation. Related subordinate entities (users, boards) are not affected, but referential integrity is ensured at the database level. Attempting to delete a non-existent organization, or unauthorized access, results in error handling.",
    "summary": "Delete an organization (discussionboard_organization).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the organization to delete (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/organizations/{id}",
    "method": "delete"
  },
  {
    "specification": "List, search, and filter discussion boards within the platform. This endpoint queries 'discussionboard_board' in Prisma. Provides advanced filtering, search, and pagination, suitable for use in admin panels, navigation pages, or analytics. Pagination and filter criteria must be provided in the request body for scalable queries. Only atomic board fields are returned; related threads, topics, or settings are handled by separate APIs.",
    "description": "Retrieves a list of discussion boards with support for pagination, filtering, and keyword search (e.g., by board name, status, or creation date). The request body can include search terms, sort order, and page/size settings. Only metadata for each board (e.g., id, name, slug, description, created_at, is_archived) is returned as per database normalization. Business rules: only authorized roles can access full lists for management or analytics—API validates accordingly. Errors are handled for invalid query parameters or insufficient permissions.",
    "summary": "List/search boards (discussionboard_board).",
    "parameters": [],
    "requestBody": {
      "description": "Search/filter/pagination criteria for boards.",
      "typeName": "IDiscussionboardBoard.IRequest"
    },
    "responseBody": {
      "description": "Paginated and filtered list of boards.",
      "typeName": "IPageIDiscussionboardBoard"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/boards",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific board's metadata using its unique identifier. The endpoint reads from 'discussionboard_board' in Prisma. Used by administrators, system integrators, or management dashboards to fetch atomic board information by ID. Authorization is enforced.",
    "description": "Fetches the metadata of a specific board (forum) by its unique ID. Only fields from the 'discussionboard_board' table (id, name, slug, description, etc.) are returned; related child entities such as threads or topics are fetched via separate APIs. Business logic includes permission checks to restrict access to authorized users. If no entity is found, a 404 or error is returned.",
    "summary": "Get a specific board (discussionboard_board).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the board to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Board entity metadata.",
      "typeName": "IDiscussionboardBoard"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/boards/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new board entity in the platform. This endpoint writes to the 'discussionboard_board' table using provided request data. Used by admins to set up new forums, boards, or categories. Only atomic fields may be written directly; other related entities are handled by separate setup flows. All creations are logged for system audit.",
    "description": "Creates a new board (forum) by inserting a row into 'discussionboard_board'. Request body must contain all required fields (name, slug, description, etc.) and is validated for uniqueness and correct format. Only users with admin role can use this API. Audit logs are written upon creation. Related threads, settings, and topics must be managed via their own APIs. Attempts to create duplicate or invalid boards result in validation errors.",
    "summary": "Create a new board (discussionboard_board).",
    "parameters": [],
    "requestBody": {
      "description": "Fields needed to create a board.",
      "typeName": "IDiscussionboardBoard.ICreate"
    },
    "responseBody": {
      "description": "Metadata of the created board entity.",
      "typeName": "IDiscussionboardBoard"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/boards",
    "method": "post"
  },
  {
    "specification": "Update existing board metadata by ID. Endpoint updates fields in the 'discussionboard_board' table. Only atomic/updatable fields may be modified (e.g., name, slug, description, is_archived). Access restricted to admins. All changes are logged for compliance. Linked threads/topics require separate APIs for management.",
    "description": "Updates an existing board in the platform, given its unique ID. Only updatable fields are processed; all other relations (e.g., linked topics/threads) are not affected. Requires admin authorization. Validates for uniqueness (e.g., unique slug) and rejects invalid changes. The operation is logged for audit purposes. Referenced children or settings are managed by respective endpoints.",
    "summary": "Update board metadata (discussionboard_board).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the board to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Board metadata fields to update.",
      "typeName": "IDiscussionboardBoard.IUpdate"
    },
    "responseBody": {
      "description": "Updated board record.",
      "typeName": "IDiscussionboardBoard"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/boards/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a board by its unique identifier from the platform. Operates on the 'discussionboard_board' table in Prisma. Typically used by administrators for deprecating, merging, or archiving forums. The operation validates permissions, performs (soft) deletion, and writes an audit event.",
    "description": "Deletes a board (discussion area) given its ID. Only admins may execute this action. All deletions are tracked via the audit log, and business logic decides whether this is a soft or hard delete (implementation-specific). Related child entities (topics, threads) are not directly deleted but may be affected according to cascading rules or retention policy. Errors are returned for non-existent IDs or unauthorized attempts.",
    "summary": "Delete a board (discussionboard_board).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique board ID (UUID) to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/boards/{id}",
    "method": "delete"
  },
  {
    "specification": "List, search, and filter board settings. This endpoint retrieves settings from the 'discussionboard_board_settings' table with advanced search and pagination. Typically used in admin panels or for auditing purposes. The request body provides filter and search criteria. Does not directly modify or delete settings.",
    "description": "Retrieves a searchable, paginated list of board settings records from 'discussionboard_board_settings'. Used mainly by admins and auditing systems, this API supports keyword filtering, paging, and sorting based on allowed fields (e.g., board_id, effective_at). Only atomic fields (no related nested entities) are returned as per 3NF normalization. Attempts to filter on non-existent columns or by unauthorized users will result in an error.",
    "summary": "List/search board settings (discussionboard_board_settings).",
    "parameters": [],
    "requestBody": {
      "description": "Search and filter criteria for board settings.",
      "typeName": "IDiscussionboardBoardSettings.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of board settings records.",
      "typeName": "IPageIDiscussionboardBoardSettings"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/boards/settings",
    "method": "patch"
  },
  {
    "specification": "Get detailed information about a specific discussion board settings entry, as identified by its ID. This retrieves all settings metadata, including permission flags, length constraints, feature toggles, versioning, and audit tracking for the settings. The endpoint is critical for administrators or board managers who wish to review or modify configuration parameters for a given board, ensure compliance with board policies, or support versioned settings rollback. Data is returned in full, including all relevant foreign key references (e.g., board, modified_by user, default_topic). The underlying Prisma DB table is 'discussionboard_board_settings'.",
    "description": "This API operation enables retrieval of a single discussion board setting entry by its unique identifier. It provides the full representation of board-level configuration, encapsulating permission flags (e.g., can_users_post), feature toggles (allow_image_uploads, allow_file_attachments), min/max post length, effective versioning, who last modified the settings, and board context. \n\nSecurity considerations: Access may be limited to board owners, moderators, and admins.\n\nThe operation enforces referential consistency against the 'discussionboard_board_settings' Prisma schema table, ensuring settings are fetched by the primary key. Business logic includes returning 404 if not found, and supporting granular audit queries and compliance checks. \n\nExpected behavior: If the setting is not found or the user lacks permission (as per related business rules), appropriate error codes and descriptions should be returned.",
    "summary": "Get a specific board settings entry by ID (discussionboard_board_settings)",
    "parameters": [
      {
        "name": "id",
        "description": "Target board settings entry's ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "The full board settings data structure, including all configuration details and metadata.",
      "typeName": "IBoardSettings"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/settings/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new discussion board settings entry, defining configuration parameters for a board. This endpoint is used by admins or authorized board managers to introduce new configuration objects for feature toggles, post length, permissions, and policy parameters on a board. The data model adheres strictly to the 'discussionboard_board_settings' Prisma DB table, including audit and versioning fields. Required for initializing board settings when establishing new boards or updating change histories. Request body references IBoardSettings.ICreate.",
    "description": "This API endpoint creates a new board settings record, capturing all configuration options for a discussion board (e.g., what users can post, file/image attachment toggles, min/max content requirements, default topics, version, effective date, and audit trails for change control). \n\nPermission: Typically restricted to admins or board managers.\n\nIt references the 'discussionboard_board_settings' table and should enforce foreign key integrity against the associated board and users. On success, responds with full settings structure. Validations include allowed field ranges, user authorization, and non-overriding of current live settings (should not create multiple active configurations for the same board/version tuple).\n\nCommon error handling includes duplicate configuration for same board/version, missing board/user, or validation failure for config limits.",
    "summary": "Create a new board settings entry (discussionboard_board_settings)",
    "parameters": [],
    "requestBody": {
      "description": "Creation payload defining all configuration fields for a board's settings.",
      "typeName": "IBoardSettings.ICreate"
    },
    "responseBody": {
      "description": "Full created board settings structure, matching Prisma schema.",
      "typeName": "IBoardSettings"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/settings",
    "method": "post"
  },
  {
    "specification": "Update an existing board settings entry by ID, changing configuration fields such as permissions, feature toggles, content requirements, and versioning. This operation strictly follows the 'discussionboard_board_settings' Prisma DB schema for atomic update of settings details, supports audit tracking and board-specific config management. Used by board owners/admins to revise board-specific policy and moderate features. Request body references IBoardSettings.IUpdate, targeted by {id}.",
    "description": "This endpoint allows atomic updating of a board's settings given its unique settings ID. It enables modification of permissions, default topics, versioning (incremented for each config change), content limits, upload toggles, and audit trails. Security must ensure only authorized managers/admins are permitted.\n\nThe endpoint validates existence of the entry in 'discussionboard_board_settings', correctly applies business rules (e.g., not decreasing version number), and tracks modification meta. Related board and topic FKs are validated for referential integrity. On success, returns the post-update settings object for auditing/log viewing.\n\nHandles errors including not found, validation violation (length, types), unauthorized attempts, and failed referential lookups.",
    "summary": "Update a board settings entry by ID (discussionboard_board_settings)",
    "parameters": [
      {
        "name": "id",
        "description": "Target board settings entry's ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Payload for updated configuration fields for existing board settings.",
      "typeName": "IBoardSettings.IUpdate"
    },
    "responseBody": {
      "description": "Updated settings data matching Prisma schema representation.",
      "typeName": "IBoardSettings"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/settings/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a specific board settings entry, identified by ID. Implements board configuration cleanup or archival as per business rules. This operation soft-deletes or removes the specified board settings row from the 'discussionboard_board_settings' table. Used during settings rollback, removal, or administrative clean-up. Only admins or owners may access. No request body.",
    "description": "This API operation deletes (soft delete, if soft deletion is implemented) a single board settings entry as identified by its ID, removing all configuration records for the associated board version from active usage. Access is typically limited to admins or board managers with elevated permissions.\n\nThe record is looked up in 'discussionboard_board_settings' by PK. Business rules may require returning to previous configuration states or retaining for new changes. On success, appropriate status is returned and the record becomes inaccessible from future list/GET queries.\n\nCommon errors: record not found, unauthorized operation.",
    "summary": "Delete a board settings entry by ID (discussionboard_board_settings)",
    "parameters": [
      {
        "name": "id",
        "description": "Target board settings entry's ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/boards/settings/{id}",
    "method": "delete"
  },
  {
    "specification": "Search and list all discussion board topics, supporting advanced filtering and pagination (with batch retrieval). The endpoint allows users, admins, or moderators to search topics for a given board or across the system, returning topics matching filters (name, board, status, etc.). Underlying table is 'discussionboard_topic'. Request body provides search filters and pagination info referencing IBoardTopic.IRequest. Returns a paginated response.",
    "description": "This operation facilitates searching and batch retrieval of topics for one or more discussion boards, supporting both keyword and filter-based lookups. Searches the 'discussionboard_topic' table using filter conditions defined in the request body (e.g., name substring, board ID, slug, or deletion state), combined with sorting and pagination options.\n\nIt is primarily designed for topic navigation, board administration, and categorization reporting. Business logic enforces permission checks where necessary and implements proper pagination for UI or export flows. Edge cases include empty results, over-paginated requests, and filter validation.\n\nReturn value is a paginated list object containing topic summaries and metadata; related board and topic IDs are referenced as per schema.",
    "summary": "List and search board topics (batch, discussionboard_topic)",
    "parameters": [],
    "requestBody": {
      "description": "Query and filter criteria for searching topics, along with pagination information.",
      "typeName": "IBoardTopic.IRequest"
    },
    "responseBody": {
      "description": "Paginated result list for found topics, with summary fields.",
      "typeName": "IPageIBoardTopic"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/topics",
    "method": "patch"
  },
  {
    "specification": "Retrieve detailed metadata for a specific discussion board topic, identified by its unique ID. Used for viewing topic content, assignment to threads, or editing. Strictly gets all topic fields from 'discussionboard_topic', including name, board relation, slug, description, audit timestamps, and state. No request body required, data is selected by PK.",
    "description": "This API provides all details for a single board topic entity as identified by its unique ID, returning metadata on the topic's name, slug, parent board, description, timestamps, and deletion status. Used for displaying in admin/board interfaces or topic editing flows (e.g. preparing options for thread creation).\n\nSecurity: Typically accessible to any authenticated user, but board/topic state may change returned content.\n\nImplements direct lookup in 'discussionboard_topic', 404 if not found. Returns all fields as per Prisma schema, board relationship included if needed.",
    "summary": "Get a specific board topic by ID (discussionboard_topic)",
    "parameters": [
      {
        "name": "id",
        "description": "Target topic ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full topic data structure as defined in Prisma schema.",
      "typeName": "IBoardTopic"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/topics/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new topic for a discussion board, specifying the topic's name, board, slug, description, and metadata. Used by board moderators/admins for managing categorization of threads. Inserts an entry into the 'discussionboard_topic' Prisma DB table. Requires all unique and foreign key constraints to be satisfied. Request body references IBoardTopic.ICreate.",
    "description": "This API operation creates a new topic entry for use in board thread categorization and navigation. Payload defines the topic's name, associated board, URL-friendly slug, display description, and related audit details. Only authorized users (moderators/admins) may use this operation.\n\nThe record is inserted into 'discussionboard_topic' after validating uniqueness and referential constraints. On successful creation, all topic metadata is returned, enabling confirmation or further editing.\n\nBusiness logic includes enforcing board-topic uniqueness for slugs, handling errors such as duplicate names/slugs, missing or invalid foreign keys, and permission failures.",
    "summary": "Create a new board topic (discussionboard_topic)",
    "parameters": [],
    "requestBody": {
      "description": "Payload defining the new topic's fields and board association.",
      "typeName": "IBoardTopic.ICreate"
    },
    "responseBody": {
      "description": "Created topic data as defined in Prisma.",
      "typeName": "IBoardTopic"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/topics",
    "method": "post"
  },
  {
    "specification": "Update an existing topic, identified by its ID, to change properties like name, slug, description, or board assignment. This operation is used by moderators/admins for topic renaming, moving topics between boards, or metadata correction. Strictly applies to the 'discussionboard_topic' Prisma DB entity. Input references IBoardTopic.IUpdate, filtered by {id}.",
    "description": "This API operation atomically updates fields of an existing topic as selected by its unique identifier. Supported fields include topic name, slug, parent board, description, and metadata (timestamps, status). Moderators or admins use this endpoint to maintain category organization, address naming conflicts, or realign topics to different boards.\n\nBusiness logic includes permission enforcement, conflict-checking on new names/slugs, referential checks for board ID, and audit revision on updates. The endpoint fetches the topic from 'discussionboard_topic', applies updates if valid, and returns the post-update topic details.",
    "summary": "Update a specific board topic by ID (discussionboard_topic)",
    "parameters": [
      {
        "name": "id",
        "description": "Target topic ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Update payload for mutable topic fields.",
      "typeName": "IBoardTopic.IUpdate"
    },
    "responseBody": {
      "description": "Updated topic info, per Prisma schema.",
      "typeName": "IBoardTopic"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/topics/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a specific topic from a discussion board as identified by ID. This endpoint soft-deletes (or removes) the topic entry from the 'discussionboard_topic' table, supporting cleanup, reorganization, or policy enforcement by admins and moderators. No request body required. Only accessible by authorized users.",
    "description": "This operation deletes or soft-deletes a board topic in the discussion platform, using its unique ID. It ensures proper permissions are in place (typically moderator/admin only), and removes the topic from active usage. Soft deletion may mark topic as deleted rather than physical removal for audit/history compliance.\n\nImplements 404 or permission failure handling. Affects parts of the UI that present category lists or restrict thread tagging, as per business rules. The deleted topic cannot be used for future thread categorization unless restored by policy.",
    "summary": "Delete a board topic by ID (discussionboard_topic)",
    "parameters": [
      {
        "name": "id",
        "description": "Target topic ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/boards/topics/{id}",
    "method": "delete"
  },
  {
    "specification": "List/archive search for board archives, with batch/paginated retrieval and search filters for board archive snapshots. Used by admins/moderators to audit board archival events or restore board states. Underlying entity: 'discussionboard_board_archive'. The request body supplies search and pagination info (IBoardArchive.IRequest). Returns paginated board archive records, optionally filtered by board, archived_at, or archived_by_user.",
    "description": "This endpoint provides advanced search and pagination of historical board archive snapshots, as stored in the 'discussionboard_board_archive' table. Admins and moderators use this for audit, rollback, or reporting purposes, easily drilling into archive history by board or user. The request payload defines filtering by archive date, board, or originator, plus pagination and sorting.\n\nBusiness logic includes permission enforcement, validation of filters, and correct handling of pagination. The endpoint returns a list object with archive metadata, ordered and filtered as defined by the query parameters.",
    "summary": "List/search board archive snapshots (batch, discussionboard_board_archive)",
    "parameters": [],
    "requestBody": {
      "description": "Filtering/sorting and page info for archive search queries.",
      "typeName": "IBoardArchive.IRequest"
    },
    "responseBody": {
      "description": "Paginated snapshot of archived board metadata.",
      "typeName": "IPageIBoardArchive"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/archives",
    "method": "patch"
  },
  {
    "specification": "Retrieve details of a specific board archive snapshot by unique ID, to review historic forum metadata at an archival point in time. Read operation exposing all atomic fields from the 'discussionboard_board_archive' Prisma table, including name/description snapshot, slug, archived by, and datetime. Used for rollback preview, audit trails, or historic record display. Path param = ID.",
    "description": "This operation enables viewing of a single historic board archive snapshot by unique ID, surfacing all data retained at the time of archiving. Used for compliance audit, admin rollback previews, and board history comparison. Metadata includes who archived, moment in time, and frozen name/slug/description content.\n\nImplements lookup by PK in 'discussionboard_board_archive', returns full details if found, 404 if missing or permission denied. Supports business flows for time travel, board restoration, and audit compliance.",
    "summary": "Get a specific board archive snapshot by ID (discussionboard_board_archive)",
    "parameters": [
      {
        "name": "id",
        "description": "Target archive snapshot's ID (UUID)",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full historical archive info as captured in board snapshot.",
      "typeName": "IBoardArchive"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/archives/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new board archive snapshot, recording the current state of the board's metadata for compliance and rollback. Used by admins or moderators when archiving/disabling a board, captures name/slug/description snapshots and archive metadata. Implements 'discussionboard_board_archive' Prisma table insertion. Input payload is IBoardArchive.ICreate.",
    "description": "This endpoint allows moderation staff or system automation to create a new board archive record, capturing all metadata as a historic snapshot for rollback, legal, or compliance purposes. The request body defines what is archived (board, by whom, at what point), and data is validated against 'discussionboard_board_archive' constraints.\n\nSuccessful creation returns the archived record for confirmation and legal/audit needs. Business rules enforce only one archive per board at a given timestamp. Referenced board/user must exist, with all policy validations applied.\n\nError cases include missing references, duplicate timestamp, or invalid archive info.",
    "summary": "Create a new board archive snapshot (discussionboard_board_archive)",
    "parameters": [],
    "requestBody": {
      "description": "Payload to create a board archive, capturing current board metadata.",
      "typeName": "IBoardArchive.ICreate"
    },
    "responseBody": {
      "description": "Board archive snapshot returned after successful insertion.",
      "typeName": "IBoardArchive"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/boards/archives",
    "method": "post"
  },
  {
    "specification": "Implements the updating of a specific discussion board archive record in the 'discussionboard_board_archive' table. This allows modifying meta-snapshots of a board at a given archival point. Permits updates to archival details such as the name/description/slug snapshot or who archived it. Only accessible to admins or moderators, as per business logic. Ensures integrity by validating references to the associated board and user, and enforces audit logging. Handles cases where the archive may be in recoverable or locked state. On successful update, returns the updated board archive.",
    "description": "This API modifies a discussion board archive record, identified by its unique id. According to the DB schema, only users with administrator or moderator privileges should be able to update board archival metadata, such as the board's archived name, description, or slug at the time of archive. Audit information, including which user performed the update, should be maintained. The system validates that the archive exists and that the new data does not violate unique constraints or relate to deleted resources.\n\nIf the requested archive does not exist, returns not found. If the user lacks sufficient permissions, returns forbidden. Related audit logs and system events must record this action for system transparency. Normally, this operation is used in conjunction with board lifecycle management flows, such as restoring or correcting an archival snapshot. The implementation must check that board and user references remain consistent, and that the edit is allowed (e.g., not for locked/finalized archives). Any violation of referential integrity or archiving policy triggers an error response.\n\nThis API requires that the path parameter 'id' matches a valid entry in the 'discussionboard_board_archive' table. All updates must comply with the business rules for archival editing, and errors or policy violations must be properly reported.",
    "summary": "Update a specific discussion board archive record (discussionboard_board_archive).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the board archive to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "New archive record values to update (one or more).",
      "typeName": "IDiscussionboardBoardArchive.IUpdate"
    },
    "responseBody": {
      "description": "Updated board archive record.",
      "typeName": "IDiscussionboardBoardArchive"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/boards/archives/{id}",
    "method": "put"
  },
  {
    "specification": "Implements deletion of a specific board archive record from the 'discussionboard_board_archive' table. This operation is reserved for system administrators or designated compliance authorities, and is used in contexts such as correcting erroneous archivals or managing retention. Deletes the archive record and ensures that no referential integrity issues arise. All deletions are soft (timestamped), per data recovery and auditability requirements, and actions are logged for compliance/audit.",
    "description": "This API deletes a discussion board archive record specified by the path parameter 'id'. In accordance with the schema, this marks the archive as deleted (soft-delete by setting the deleted_at timestamp), not physical removal, satisfying both data retention and regulatory compliance needs. The operation enforces that only users with elevated privileges (admin/moderator) may perform deletions.\n\nCascading policies ensure any references to this archive remain valid (archived boards may not be restored without an archive reference). If attempted on a non-existent, already deleted, or protected archive (e.g., required for regulatory hold), returns appropriate error messages. This operation is typically performed during content house-cleaning, error correction, or compliance-requested expungement. Audit logs are created to track the who, when, and why of every deletion.\n\nIf deletion fails due to constraints or system state, an explicit error message is returned. Ownership and permission checks prevent unauthorized uses. The operation must confirm that 'id' matches a valid archive entry before proceeding. All resulting deletion events are written to an audit log.",
    "summary": "Delete (soft-delete) a specific board archive record (discussionboard_board_archive).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the board archive to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/boards/archives/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a paginated, filtered list of discussion threads in the 'discussionboard_thread' table, supporting searching, filtering, and sorting as per business logic. Typical filters may include board, topic, creator, date, status (pinned/locked/deleted), and textual search over title or content. Implements thread listing for content feeds, board homepages, or advanced search results. Pagination parameters control offset, limit, and order to optimize frontend consumption.",
    "description": "This API provides a paginated, searchable, and filterable list of discussion threads, as defined in the 'discussionboard_thread' table. It supports use cases such as displaying all threads in a board, searching by title or topic, filtering by user, or showing only pinned threads. The endpoint accepts advanced filters (board_id, topic_id, created_by_user_id, is_pinned, is_locked, is_deleted, date ranges) and text search fields. Supports ordering by creation/update date, title, and relevance.\n\nStrict validation is applied to ensure only permissible filtering/sorting parameters are allowed, in accordance with board and user visibility rules. Pagination uses limit/offset or cursor-based approaches depending on settings. Only threads accessible to the calling user (respecting board visibility, bans, deletions, and roles) will be listed. The response returns a page of thread summary objects, excluding posts and sensitive metadata. Frontend clients use successive calls to implement infinite scroll or board topic navigation.\n\nThis list operation works in concert with detailed thread retrieval and post listing APIs, and respects user role-based access control (private boards, hidden threads, etc). Errors or overbroad/incomplete queries result in appropriate responses.",
    "summary": "List/filter/search discussion threads (discussionboard_thread) with pagination and search.",
    "parameters": [],
    "requestBody": {
      "description": "Thread list search, filter, sort, and pagination parameters.",
      "typeName": "IDiscussionboardThread.IRequest"
    },
    "responseBody": {
      "description": "Paginated thread summary result set.",
      "typeName": "IPageIDiscussionboardThread"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/threads",
    "method": "patch"
  },
  {
    "specification": "Retrieves details of a single discussion thread from the 'discussionboard_thread' table by its id. Intended for viewing full thread metadata and content details. Ensures permissions are checked so that only authorized users (according to board, thread, and user status) can access non-deleted, accessible threads. Normalizes related entity fetching (board, topic) and excludes soft-deleted threads unless specifically authorized.",
    "description": "This API obtains detailed information for the specified discussion thread, identified by the unique id path parameter. Returns all metadata for that thread as defined in the schema, such as title, board, topic, creator, status flags, and timestamps. If the thread has been soft-deleted, permissions logic controls whether it is accessible (e.g., for moderators/admins only). Does not return associated posts directly (which are fetched by a different endpoint).\n\nPermissions ensure the requesting user can view the thread, honoring access restrictions based on board state (archived, hidden), thread state (locked, deleted), and user membership/ban status. If the thread does not exist or is not viewable to the caller, returns an error. Full audit logging is performed for elevated role access. Used to power thread detail and reading pages.",
    "summary": "Retrieve a single discussion thread by id (discussionboard_thread).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the thread to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full thread details.",
      "typeName": "IDiscussionboardThread"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/threads/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new discussion thread in the 'discussionboard_thread' table. Used when users post new topics for discussion. Requires board, title, (optional) topic, and initial metadata. Triggers audit logs and may notify board followers/subscribers. Enforces business rules such as permission to post, thread uniqueness, and title limits. Returns created thread object on success.",
    "description": "This API creates a new discussion thread, with required fields (board_id, title) and optional ones (topic_id, initial status flags, etc.) as defined in the business schema. Only users with permission to post in the target board may create threads—role and state of the board are validated (e.g., locked, archived, or restricted boards). The system ensures that the slug is unique for the board, and title/metadata conform to length and content policies.\n\nUpon success, triggers notification logic and audit logging, and returns the full thread object. Duplicate, conflicting, or malformed thread creation attempts fail with an appropriate error message. This operation does not create initial posts, which must be sent separately. Usage is coordinated with post creation APIs to build up full threads.",
    "summary": "Create a new discussion thread (discussionboard_thread).",
    "parameters": [],
    "requestBody": {
      "description": "New thread creation data.",
      "typeName": "IDiscussionboardThread.ICreate"
    },
    "responseBody": {
      "description": "Newly created thread object.",
      "typeName": "IDiscussionboardThread"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/threads",
    "method": "post"
  },
  {
    "specification": "Updates an existing discussion thread in the 'discussionboard_thread' table by id. Allows thread creators, moderators, or admins to modify thread metadata (title, status flags, topic, etc.). Only enabled when permitted by role policy, board state, and thread lock/deletion. Changes are audited per compliance requirements. Returns modified thread object or errors for unauthorized/invalid requests.",
    "description": "This API updates thread metadata, such as title, topic, pinned/locked state, in the discussionboard_thread table, referencing by thread id as the path parameter. Only thread creator, moderators, or administrators are allowed to update threads, unless overridden by business rules (e.g., locked, deleted, or archived threads may be read-only). Restricted to editable fields as defined by schema and permission logic. Changes are recorded via an audit log record.\n\nRequest integrity checks include thread existence, ownership, editability, board/topic validation, and user ban/role status. On forbidden/ineligible updates, an error is returned. The operation must strictly follow constraints on metadata change and not allow retroactive state changes outside policy. Returns the updated thread object on success.\n\nOverall, this update endpoint complements the thread detail and list APIs by enabling the frontend to support renaming, retagging, or status changes workflow.",
    "summary": "Update a specific discussion thread by id (discussionboard_thread).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the thread to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Thread update data (editable fields only).",
      "typeName": "IDiscussionboardThread.IUpdate"
    },
    "responseBody": {
      "description": "Updated thread object.",
      "typeName": "IDiscussionboardThread"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/threads/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes a discussion thread by id from 'discussionboard_thread'. Operation marks the thread as deleted (soft delete) per data recoverability/audit requirements. Only thread creators, moderators, or admins may perform genuine delete. References are validated, and business/policy constraints are enforced. Audit logs are recorded for compliance.",
    "description": "This API performs a soft delete on a thread record, identified by the unique id in the path parameter. This fulfills recoverability and retention requirements—thread is marked as deleted but not physically removed. Deletion is only allowed if the user is the owner or holds a moderator/admin role for the relevant board. Special-case board/thread-level locks, retention, or legal holds are enforced before delete proceeds.\n\nDeletion triggers audit log and notification logic, and references to posts/comments under the thread remain intact, but are hidden from standard client queries. Errors returned for not found, forbidden, or conflict on deletion attempts. This operation complements recovery/retention logic and is to be coordinated with post and comment deletion in moderation workflows.",
    "summary": "Delete (soft-delete) a discussion thread by id (discussionboard_thread).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the thread to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/threads/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a paginated, searchable, and filterable list of posts in the 'discussionboard_post' table. Accepts filters (thread, author, date, is_edited/deleted, text search) with pagination/sort, supporting both standard thread read and advanced discovery. Excludes soft-deleted items unless permitted. Used for thread detail pages, user histories, and content search.",
    "description": "This API returns a list of posts matching the specified search, filter, and pagination parameters. It is used for thread reading (all posts in a thread), user post histories, or global discovery—for instance, showing all posts containing a keyword. Accepts thread_id, created_by_user_id, is_edited, is_deleted, date ranges, and search queries as filter input. Enforces visibility constraints on soft-deleted, locked, or otherwise restricted posts depending on the role of the calling user.\n\nSort order (by date, relevance, etc.), page size, and offset are controlled via the request body. Outputs a paginated set of post summary or detail objects as appropriate. When combined with comment and like endpoints, supports social and engagement UI features. Returns only posts viewable to calling user, and omits sensitive/admin data for regular users. Audit logs may track high-volume export requests.",
    "summary": "List/filter/search posts (discussionboard_post) with pagination and search.",
    "parameters": [],
    "requestBody": {
      "description": "Post list search, filtering, sorting, and pagination parameters.",
      "typeName": "IDiscussionboardPost.IRequest"
    },
    "responseBody": {
      "description": "Paginated result of posts.",
      "typeName": "IPageIDiscussionboardPost"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/posts",
    "method": "patch"
  },
  {
    "specification": "Retrieves the details of a single post from 'discussionboard_post' by its id. For reading post content, metadata, and relations to thread/author/attachments. Handles permission checks: deleted, locked, or hidden posts require additional roles; otherwise, regular users can freely access public posts. Excludes sensitive audit/owner fields from response.",
    "description": "This API returns the details for the post referenced by the path parameter id. Response includes all post fields as per the schema, such as content, author, timestamps, is_edited, and any links to thread or attachments if designed to include them. Permission checks ensure that either regular or elevated roles can view posts: for deleted or hidden posts, only creator/mods/admins may view. Audit logs update sensitive read events as required by platform policy.\n\nUsed for thread reading as well as user post history and backends analytics.",
    "summary": "Retrieve a single post by id (discussionboard_post).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the post to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full post details.",
      "typeName": "IDiscussionboardPost"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/posts/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new post within a thread context, stored in 'discussionboard_post'. Used for user participation in discussions—posting responses or the initial post of a thread. Requires thread_ref, content, author, and other metadata. Validates thread existence, permission to post (locked/archived), enforces content validation, notifies subscribed users. Returns created post object on success.",
    "description": "This API creates a new post in a given thread. Required fields in the request body are thread_id, content, and created_by_user_id (the latter often set by backend session authentication). Optionally supports fields such as attachment metadata and is_edited. The platform enforces content validation (length, forbidden content/patterns), verifies thread is open to posting, and blocks attempts in locked/archived threads. Post creation may trigger notification to thread followers as well as logging events for analytics and compliance.\n\nUpon success, returns full details of the created post. Errors include forbidden, invalid thread, conflict, or malformed content.",
    "summary": "Create a new post in a thread (discussionboard_post).",
    "parameters": [],
    "requestBody": {
      "description": "New post creation data.",
      "typeName": "IDiscussionboardPost.ICreate"
    },
    "responseBody": {
      "description": "Newly created post object.",
      "typeName": "IDiscussionboardPost"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/posts",
    "method": "post"
  },
  {
    "specification": "Updates an existing post by id in 'discussionboard_post'. Allows editing of post body (content), set is_edited flag, and manage soft-delete/restore/un-delete per moderated business logic. Only authors or moderators/admins may invoke. Triggers audit/compliance log. Returns updated post details on success; returns error for unauthorized/invalid states.",
    "description": "This API updates an existing discussion post, referenced by id in the path. Permitted actions include editing content and particular metadata in accordance with business rules and permission policies (e.g., only post author or moderators/admins may edit). All edits set the is_edited flag, and each edit is captured in the audit log for compliance and rollback. Forbidden, not-found, conflict, or locked/deleted states produce error responses.\n\nStrict edit field validation enforces business rules; fields outside policy or role permissions are rejected. Returns the modified post with all current details on success.",
    "summary": "Update a single post by id (discussionboard_post).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the post to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Post update data (editable fields only).",
      "typeName": "IDiscussionboardPost.IUpdate"
    },
    "responseBody": {
      "description": "Updated post object.",
      "typeName": "IDiscussionboardPost"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/posts/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes a post by id in 'discussionboard_post'. Implements soft-delete policy for recovery/audit. Only post authors, moderators, or admins may delete posts except in special cases (e.g., system events). Deletes only if post/thread state allows and business rules are satisfied (e.g., thread not locked, post not final/immutable). Cascade impacts (likes, comments, etc.) may be handled in coordination. Writes audit logs. Returns status or error.",
    "description": "This API soft-deletes a post identified by id, as specified in the path parameter. Role and state-based permission logic enforces that deletion is limited to creators, moderators, and administrators, and that locked/archived threads or posts block deletion. Soft-deletion maintains the post for audit/compliance while hiding it from standard display (deleted_at timestamp is set). Audit log records the action and who performed it.\n\nIf post is not found or cannot be deleted due to state/permissions, returns error. Used in moderation workflows and user-initiated post removal. Results in restricted post visibility in subsequent queries; does not cascade to physical deletion or related data loss.",
    "summary": "Delete (soft-delete) a single post by id (discussionboard_post).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the post to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/posts/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements PATCH method to retrieve a paginated, filtered list of post attachments. This operation is for users or admins wishing to search, filter, or browse files attached to posts, with support for search parameters such as uploader, post, filename, MIME type, upload date, etc. Pagination, search, and sorting are supported. This endpoint is directly associated with the discussionboard_post_attachment table, which stores atomic metadata for each file attached to a post, keeping file entity handling normalized.",
    "description": "This operation enables users, moderators, or admins to search and filter attachments linked to posts. Typically used for auditing, listing user uploads, or for the front-end gallery/file browser in threads and moderation panels.\n\nRole and permission checks must be enforced depending on user context (regular users can only see non-deleted, visible files for posts they have access to; moderators and administrators have more access). Audit logs should record access to non-personal files.\n\nThis operation relies on the 3NF structure of the discussionboard_post_attachment table, which encapsulates all file metadata (filename, mimetype, owner, etc). Business logic must validate filter/search parameters to prevent abuse. Pagination and sorting parameters are mandatory for scalable access.\n\nErrors should include forbidden access, bad request for invalid filters, and pagination range errors. Related APIs may include creating (POST /discussionboard/posts/attachments), updating, or removing attachments, as well as parent discussionboard_post endpoints.",
    "summary": "Retrieve a paginated/filterable list of post attachments from discussionboard_post_attachment.",
    "parameters": [],
    "requestBody": {
      "description": "Search/filter, pagination, and sorting parameters for listing post attachments.",
      "typeName": "IDiscussionboardPostAttachment.IRequest"
    },
    "responseBody": {
      "description": "Paginated result with attachment file metadata objects.",
      "typeName": "IPageIDiscussionboardPostAttachment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/posts/attachments",
    "method": "patch"
  },
  {
    "specification": "Implements GET method to fetch a single post attachment's metadata and details, based on its unique identifier. Tied directly to the discussionboard_post_attachment table, which is used for file metadata normalization related to post uploads. Ensures atomic retrieval of all attachment details, including uploader, file characteristics, upload time, and deletion status.",
    "description": "This endpoint returns the file's metadata, including filename, mimetype, uploader, file size, serving URL, deletion status, etc. Usage examples include confirming upload details for download, checking file status in moderation or user panels, and displaying file preview info in the UI.\n\nPermission logic must ensure that only authorized users (e.g., the uploader, thread/post owner, or moderators/admins) may access the attachment metadata. Invalid or unauthorized access should raise a proper response (404 or permission denied).\n\nThis endpoint draws directly from the discussionboard_post_attachment's unique primary key and normalized structure. Adjacent APIs may be list (PATCH), creation (POST), update (PUT), or delete (DELETE) for attachments.",
    "summary": "Retrieve a single post attachment's metadata (discussionboard_post_attachment).",
    "parameters": [
      {
        "name": "id",
        "description": "Attachment's unique ID (UUID) to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Attachment’s metadata details as stored in discussionboard_post_attachment.",
      "typeName": "IDiscussionboardPostAttachment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/posts/attachments/{id}",
    "method": "get"
  },
  {
    "specification": "Implements POST method to create a new post attachment record. Users upload files (images, documents) directly associated with a discussion post. Operation creates a row in the discussionboard_post_attachment table storing file metadata and access info. Used for adding new file/image assets to posts.",
    "description": "Allows a user to upload (register) a file attachment for an existing post, storing the file's metadata (filename, mimetype, size, serving URL, uploader, timestamp, etc). Actual file upload handling is managed externally (e.g., to S3) and only the metadata is persisted here.\n\nInput validation must include file size/type limits (as configured on the board), checking post existence and user rights to upload, and potential moderation checks for restricted types. This operation enforces normalization by not duplicating file blobs in posts, storing only references.\n\nFailure cases include permission denied, validation errors (invalid type/oversized file), and post not found. Must log actions for audit/context. Related endpoints: PATCH (list attachments), GET (fetch metadata), PUT (update), DELETE (remove file record).",
    "summary": "Create a new post attachment (discussionboard_post_attachment).",
    "parameters": [],
    "requestBody": {
      "description": "Attachment metadata and upload reference info. Includes post_id, filename, URL, uploader, etc.",
      "typeName": "IDiscussionboardPostAttachment.ICreate"
    },
    "responseBody": {
      "description": "Newly created attachment metadata.",
      "typeName": "IDiscussionboardPostAttachment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/posts/attachments",
    "method": "post"
  },
  {
    "specification": "Implements PUT method to update existing attachment metadata. Only allowed for the uploader, post author, or a moderator/admin for security/compliance. Tied to the discussionboard_post_attachment table and supports changes to fields like filename, mimetype, or is_deleted status.",
    "description": "Used to update metadata for an attachment, e.g., renaming, correcting mimetype, toggling deletion status, or reissuing download URL. Validations must ensure only allowed fields are updated, file remains linked to a valid post, and user/role is permitted to edit. Action is logged for audit.\n\nDisallowed operations are forbidden (such as changing irreversible fields, or operating on soft-deleted records unless by admin). Input is strictly validated according to table schema and business rules. Related endpoints include GET (detail), PATCH (list), POST (create), DELETE (delete file record).",
    "summary": "Update metadata/details of a post attachment (discussionboard_post_attachment).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique attachment ID (UUID) to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update for the attachment record.",
      "typeName": "IDiscussionboardPostAttachment.IUpdate"
    },
    "responseBody": {
      "description": "Updated file attachment metadata as stored in discussionboard_post_attachment.",
      "typeName": "IDiscussionboardPostAttachment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/posts/attachments/{id}",
    "method": "put"
  },
  {
    "specification": "Implements DELETE method to soft-delete a file attachment associated with a post, corresponding to a row in the discussionboard_post_attachment table. Operation marks file as deleted, does not physically remove records for audit/data recovery compliance.",
    "description": "This logically deletes the file attachment so it is no longer shown to regular users but remains retrievable for audit and recovery by moderators/admins. Standard permission logic must ensure only uploader, post owner, or moderator/admin can delete the record. Edge cases, such as removing already deleted records or forbidden access, must be handled. Audit must log all delete operations.\n\nUnderpins data compliance by not physically dropping potentially sensitive or important file records. Rollback/recovery policies should reference the deleted_at timestamp. Related operations: POST (add attachment), PUT (edit), GET (single record), PATCH (list).",
    "summary": "Delete/soft-delete a post attachment (discussionboard_post_attachment).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the attachment to delete (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Result/confirmation of deletion, or metadata of the soft-deleted attachment.",
      "typeName": "IDiscussionboardPostAttachment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/posts/attachments/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements PATCH operation for searching/listing comments. This endpoint allows all users (with privacy/visibility/authorization enforcement) to search, paginate, and filter comments linked to posts, with support for searching by author, post, parent, content, creation date, or deletion status. Underlying table: discussionboard_comment. Output is always paginated and sorted. Complies with list/search pattern in modern API practice.",
    "description": "Allows retrieval/search of comments associated with posts (and optionally threaded). Use cases include thread/post discussion views, moderation panels, or personal comment history. Only visible comments are shown to regular users (filter on is_deleted, permissions), while mods/admins can see all.\n\nSearch parameters allow filtering by post, user, parent comment, keywords, etc., and support UI-driven comment browsing and search. Result always paginated. Security checks must prevent unauthorized access to non-public comments, and ensure searches are not abused for scraping or threat models.\n\nErrors include permission denied, invalid search parameter, out-of-range pagination. Useful complements: GET (fetch single comment), POST (create), PUT (edit), DELETE (remove/restore).",
    "summary": "Paginated, filtered list of comments from discussionboard_comment.",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination options for fetching comments.",
      "typeName": "IDiscussionboardComment.IRequest"
    },
    "responseBody": {
      "description": "Paginated result with discussionboard_comment items.",
      "typeName": "IPageIDiscussionboardComment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/comments",
    "method": "patch"
  },
  {
    "specification": "Implements GET method for fetching a single comment, based on unique comment id. Directly tied to the discussionboard_comment table (normalized, atomic record). Used for retrieving all attributes (author, content, creation/modification/parent, status, etc) of one comment identified by primary key. Matches standard detail-retrieval API design.",
    "description": "Used in comment detail views, moderation tools, or post/comment management UI to view the full record of an individual comment. Enforces access controls (normal users can only see non-deleted/authorized comments; mods/admins may see all, including hidden/removed).\n\nThe endpoint looks up and returns the comment using its normalized primary key, as per discussionboard_comment schema. Permission errors, not found, or access to private/deleted comments are handled with appropriate error codes.",
    "summary": "Retrieve a single post comment (discussionboard_comment) by ID.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique comment ID (UUID) to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full detail about the requested comment.",
      "typeName": "IDiscussionboardComment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/comments/{id}",
    "method": "get"
  },
  {
    "specification": "Implements POST operation for creating a new comment for a post (or as a threaded reply to another comment, one level deep). Maps directly to the discussionboard_comment table, which enforces 3NF for comment entities. This enables independent record-keeping for each comment—use for reply composition or post discussion addition.",
    "description": "Enables users to create and store a new comment entity for a given post, either as a top-level comment or as a threaded reply to another comment (1-level deep threading via parent_comment_id). All required validation (content length, parent linkage, permissions, anti-spam) enforced as per business rules. Input is atomic: post_id, created_by_user_id, content, and optional parent. Returns full record for UI or further processing.\n\nAudit logging required; abuse/spam risks mitigated with content validation and appropriate throttling. Related endpoints: PATCH (list/search), GET (detail), PUT (edit), DELETE (soft-delete/restore).",
    "summary": "Create a new comment for a post (discussionboard_comment).",
    "parameters": [],
    "requestBody": {
      "description": "Fields for creating a comment (post, content, user, parent, etc).",
      "typeName": "IDiscussionboardComment.ICreate"
    },
    "responseBody": {
      "description": "Persisted comment record.",
      "typeName": "IDiscussionboardComment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/comments",
    "method": "post"
  },
  {
    "specification": "Implements PUT operation for updating content/attributes of an existing comment (discussionboard_comment). Only the author, moderators, or admins can update. Used for editing comment text, marking as edited, or handling restored/undeleted status. Table is normalized and only metadata fields change.",
    "description": "Used to modify a comment (e.g., update content, correct parent, or change is_edited flag as per editing workflow). Input values are validated for allowed edits by user/role and logic (e.g., can't set arbitrary parent, can't remove moderation flags as regular user). Action logged for full audit/compliance as per requirements.\n\nForbidden changes return errors (e.g. unauthorized, immutable fields, modifying a deleted comment). Supports comment editing UI and standard moderation tools. Use together with GET (detail), PATCH (list), POST (create), DELETE (remove/restore).",
    "summary": "Update attributes/content for a post comment (discussionboard_comment).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique comment ID (UUID) to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields which may be edited/updated for the comment.",
      "typeName": "IDiscussionboardComment.IUpdate"
    },
    "responseBody": {
      "description": "Changed comment record as stored.",
      "typeName": "IDiscussionboardComment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/comments/{id}",
    "method": "put"
  },
  {
    "specification": "Implements DELETE operation for soft-deleting a comment in the discussionboard_comment table. Removes from UI display for most users but preserves for audit, mod/admin, and possible recovery. Compliance with logical-delete business rules. Only author, moderators, or admins may delete.",
    "description": "Marks the comment as is_deleted with a deletion timestamp, without physically removing. Only permitted users (author, mod, admin) may delete. Handles forbidden, already deleted, or not found records with standard errors and records all actions in audit log.\n\nSupports moderation and compliance requirements for reversible comment removal, content flagging, and anti-abuse handling. Complements POST (add comment), PUT (edit), GET (detail), PATCH (list/search).",
    "summary": "Soft-delete (logically remove) a comment from posts (discussionboard_comment).",
    "parameters": [
      {
        "name": "id",
        "description": "Comment's unique ID (UUID) to remove.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Result/confirmation and deleted comment info.",
      "typeName": "IDiscussionboardComment"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/comments/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements PATCH method to search and paginate likes on posts or comments (discussionboard_likes table, 3NF atomic representation). For use by front-end to display recent likes, moderation analytics, or audit panels. Filtering by content (post, comment), liking user, or timestamp, with pagination and search. No editing/creation via this endpoint.",
    "description": "Enables clients to retrieve a paginated and filtered list of 'like' records, supporting analytics, display of who liked a post/comment, or for moderation history. Typical filters: by user, post, comment, or date. Pagination and sorting enforced for efficient large-set handling.\n\nOutput population matches atomic rows from discussionboard_likes. Access controls must ensure only authorized data is viewed (e.g., limit user-to-user cross-viewing in privacy context). Useful alongside endpoints for liking/unliking content (POST/DELETE not defined here), and for analytics/reporting. Errors include out-of-range pagination or forbidden filters.",
    "summary": "List/search paginated like events on post/comment (discussionboard_likes).",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, and pagination for likes.",
      "typeName": "IDiscussionboardLikes.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of likes as atomic records from discussionboard_likes.",
      "typeName": "IPageIDiscussionboardLikes"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/likes",
    "method": "patch"
  },
  {
    "specification": "Implements GET operation for retrieving the full detail of a 'like' event (discussionboard_likes) by its primary key (UUID). Used to display all metadata about the 'like' (user, post/comment, timestamp). Direct mapping to normalized DB table.",
    "description": "Fetches all details for a single like event, as used by moderation tools, reporting panels, or engagement analytics. Role checks are crucial (users see only their own likes, mods/admins may be broader). Access to metadata, not content.\n\nUsually used together with PATCH (search/list), or analytic endpoints. Includes error handling for forbidden/missing records.",
    "summary": "Get a single like event by its ID (discussionboard_likes).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique like ID (UUID) to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full like event metadata from discussionboard_likes.",
      "typeName": "IDiscussionboardLikes"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/likes/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new like record, representing when a user performs a like action on a post or comment. This operation corresponds to the discussionboard_likes table in the Prisma schema. The like event is atomic, meaning each like can belong to either a post or comment, but not both. The operation requires user authentication and ensures only permitted users can like content. On creation, it records the user, and either the post or comment target, with the created_at timestamp. Uniqueness is enforced for (user_id, post_id) and (user_id, comment_id) pairs. Related use cases include toggling likes, retrieving like history, and preventing duplicate likes.",
    "description": "This endpoint allows a user to like a post or comment. According to the discussionboard_likes schema, the operation will require the authenticated user's identity, and a target post or comment UUID as input. On creation, it must ensure uniqueness for the (user_id, post_id) or (user_id, comment_id) pair to prevent duplicate likes and set the created_at timestamp. The operation should reject attempts to like both a post and comment simultaneously or neither. Only authenticated users can use this endpoint; attempts without proper authentication must be refused. If a like already exists, the API should return an appropriate conflict error. On success, the endpoint returns the created like entity, including like id and target details.",
    "summary": "Create a new like record (discussionboard_likes table).",
    "parameters": [],
    "requestBody": {
      "description": "Like creation payload. Must provide either post_id or comment_id (but not both).",
      "typeName": "IDiscussionboardLike.ICreate"
    },
    "responseBody": {
      "description": "The newly created like record.",
      "typeName": "IDiscussionboardLike"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/likes",
    "method": "post"
  },
  {
    "specification": "Update an existing like record identified by its unique ID. This works with the discussionboard_likes table in the Prisma schema. The operation allows users to alter details of their like record, such as changing the target post or comment (though typical use is limited). Permissions should ensure only the user who created the like can update it. It must enforce mutual exclusivity of post_id and comment_id. Audit timestamps and modification integrity are ensured.",
    "description": "This endpoint updates an existing like record, given its unique ID. According to the schema, a like can refer to either a post or a comment, but not both at once. On update, the system performs validation to avoid conflicting targets. Only the owner of the like can perform the update. The endpoint responds with the updated like record. Attempts to update with invalid target or by unauthorized users are rejected with appropriate error codes. Proper request and response typing are referenced from IDiscussionboardLike interfaces.",
    "summary": "Update a like record by ID (discussionboard_likes table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the like record to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Like update payload. Must maintain mutual exclusivity between post_id and comment_id.",
      "typeName": "IDiscussionboardLike.IUpdate"
    },
    "responseBody": {
      "description": "The updated like record.",
      "typeName": "IDiscussionboardLike"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/likes/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a like record by its unique ID, as per the discussionboard_likes table in the Prisma schema. This operation allows a user to remove their like from a post or comment. Only the user who created the like can delete it. Removal will make the user able to like the same content again. Ensures audit-ability and enforces appropriate authentication and authorization.",
    "description": "This endpoint deletes a like record given its UUID. Only the user who created the like is authorized to perform this deletion. Attempts by other users must be rejected. Upon success, the like is fully removed, allowing the user to like the same post or comment again in the future. Attempts to delete a non-existent like should yield a not found response.",
    "summary": "Delete a like record by ID (discussionboard_likes table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the like record to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Deletion confirmation result, or null if resource was not found.",
      "typeName": "IVoidResponse"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/likes/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a filtered and paginated list of bookmarks for the authenticated user from the discussionboard_bookmarks table. Allows searching and filtering by post ID, creation date, or sorting preferences. The endpoint supports advanced queries and pagination to handle large bookmark histories. Only the bookmarks belonging to the user are visible.",
    "description": "This endpoint provides a list retrieval with filters and pagination for bookmarks in the discussionboard_bookmarks table. Query parameters may supply searching by post, date range, or sorting by creation date. The operation is only available to authenticated users and only exposes bookmarks owned by the user. The response includes paginated data following IPageIDiscussionboardBookmark typing. Error handling includes overlimit queries, unauthorized access, and invalid filter combinations.",
    "summary": "List and search user bookmarks (discussionboard_bookmarks table).",
    "parameters": [],
    "requestBody": {
      "description": "Request object for searching, filtering, and paginating bookmarks.",
      "typeName": "IDiscussionboardBookmark.IRequest"
    },
    "responseBody": {
      "description": "Paginated response of user bookmarks.",
      "typeName": "IPageIDiscussionboardBookmark"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmarks",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific bookmark record via its unique ID from the discussionboard_bookmarks table. Used for inspecting a single bookmarked post for the authenticated user. Enforces proper ownership and authorization.",
    "description": "This endpoint retrieves a single bookmark record using its UUID. Only the user who owns the bookmark record is authorized to retrieve it. The response includes all bookmark details as described in IDiscussionboardBookmark. If the bookmark does not exist or is owned by another user, the request fails with not found or forbidden errors, respectively.",
    "summary": "Get bookmark record by ID (discussionboard_bookmarks table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the bookmark record to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Bookmark record details.",
      "typeName": "IDiscussionboardBookmark"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmarks/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new bookmark for a post in the discussionboard_bookmarks table. Each user can only bookmark a post once. The bookmark enables users to save posts for later retrieval. On creation, uniqueness for (user_id, post_id) is enforced. Returns full bookmark entity on success. ",
    "description": "This endpoint adds a bookmark to a post on behalf of the authenticated user. The payload requires the post_id of the post to be bookmarked. Each user can bookmark a specific post only once; attempts to duplicate will result in a conflict error. Only authenticated users are permitted. On success, the operation returns details of the created bookmark entity.",
    "summary": "Create a new bookmark for a post (discussionboard_bookmarks table).",
    "parameters": [],
    "requestBody": {
      "description": "Bookmark creation payload with post_id.",
      "typeName": "IDiscussionboardBookmark.ICreate"
    },
    "responseBody": {
      "description": "The created bookmark record.",
      "typeName": "IDiscussionboardBookmark"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmarks",
    "method": "post"
  },
  {
    "specification": "Update an existing bookmark record identified by its unique ID, in the discussionboard_bookmarks table. Allows users to modify their bookmarks, such as updating metadata (if applicable in the schema). Only the owner may perform the operation. Completes audit and integrity requirements.",
    "description": "This endpoint allows a user to update their bookmark record by ID. The main updatable field is typically metadata or context, as the post_id should remain immutable after creation. Validation should ensure only owners can update and that required fields are provided. On success, returns the updated bookmark record, or appropriate errors if forbidden or not found.",
    "summary": "Update a bookmark record by ID (discussionboard_bookmarks table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the bookmark record to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Bookmark update payload (fields per schema).",
      "typeName": "IDiscussionboardBookmark.IUpdate"
    },
    "responseBody": {
      "description": "Updated bookmark record.",
      "typeName": "IDiscussionboardBookmark"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmarks/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a bookmark record by its unique ID. Refers to the discussionboard_bookmarks table. Removes a user's bookmark from a post, allowing them to re-bookmark it later if they wish. Only the bookmark owner can delete the record.",
    "description": "This endpoint deletes a specific bookmark, given its ID. The user must be authenticated and must own the bookmark to delete it. Upon successful deletion, the resource is removed and the bookmark can be recreated in the future. If the ID does not match a bookmark owned by the user, an error is returned.",
    "summary": "Delete a bookmark by ID (discussionboard_bookmarks table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the bookmark record to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Deletion confirmation result, or null if resource was not found.",
      "typeName": "IVoidResponse"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmarks/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a paginated and searchable list of follow relationships from the discussionboard_follows table for the authenticated user. Enables users to view others they follow (users or threads), with optional filters and sorts. Restricts access to the account owner or privileged admin (future vision).",
    "description": "This endpoint lists the user's current follow relationships, possibly filtered by followed user, thread, or creation date, with support for pagination and sorting. The request body defines the search and pagination criteria. Only follow records the user owns are returned. Possible errors include overlimit or invalid request format. Typical use cases are rendering followed thread/user lists, or synchronizing user preferences.",
    "summary": "List/search user follows (discussionboard_follows table).",
    "parameters": [],
    "requestBody": {
      "description": "Follow search and pagination request object.",
      "typeName": "IDiscussionboardFollow.IRequest"
    },
    "responseBody": {
      "description": "Paginated response object containing follows data.",
      "typeName": "IPageIDiscussionboardFollow"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/follows",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific follow relationship by its unique ID from the discussionboard_follows table. Supports user inspecting a single follow record by its unique id, enforcing ownership or admin privilege. Used to resolve follow record details or as part of follow management UIs.",
    "description": "Retrieves a single follow entity given its unique UUID. Only the owner or an admin (future extensibility) can view the record. Returns all fields as per IDiscussionboardFollow, or appropriate error if not found or forbidden.",
    "summary": "Get a follow record by ID (discussionboard_follows table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the follow record to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Follow record details.",
      "typeName": "IDiscussionboardFollow"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/follows/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new follow relationship in the discussionboard_follows table, enabling a user to follow either another user or a thread. Each (follower_user_id, followed_user_id) or (follower_user_id, followed_thread_id) pair is unique, preventing duplicate follows. User can only follow one target per event. Authentication is required.",
    "description": "Creates a new follow record, provided with either a followed_user_id or a followed_thread_id (not both). Request is rejected if the pair already exists. Only authenticated users are eligible. Creation sets the created_at timestamp and returns the new follow entity with all details.",
    "summary": "Create a new follow (discussionboard_follows table).",
    "parameters": [],
    "requestBody": {
      "description": "Follow creation request, with either followed_user_id or followed_thread_id.",
      "typeName": "IDiscussionboardFollow.ICreate"
    },
    "responseBody": {
      "description": "The newly created follow entity.",
      "typeName": "IDiscussionboardFollow"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/follows",
    "method": "post"
  },
  {
    "specification": "Update a follow relationship by its unique ID in the discussionboard_follows table. Allows the user to modify the target of a follow if that behavior is desired in the application. Only the creator can update. Must maintain exclusivity of followed_user_id and followed_thread_id. Updates audit timestamps and returns result on success.",
    "description": "Updates a follow record based on its UUID. Ensures only one target (user or thread) is set. Only the record owner may update. Attempts by non-owners or for invalid targets are refused. Returns updated follow record, or error on validation/permission failure.",
    "summary": "Update a follow record by ID (discussionboard_follows table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the follow record to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Follow update payload, specifying new followed target (user or thread).",
      "typeName": "IDiscussionboardFollow.IUpdate"
    },
    "responseBody": {
      "description": "The updated follow entity.",
      "typeName": "IDiscussionboardFollow"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/follows/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a specific follow record by its ID. Handles unfollowing a thread or user. Associated with the discussionboard_follow table. Requires a valid follow ID as a path parameter.",
    "description": "This operation removes an existing follow relationship from the system, referenced by the unique follow ID. It is used when a user decides to unfollow another user or a thread, corresponding to the discussionboard_follow table and its composite role (user-user and user-thread relationships).\n\nSecurity: Only the authenticated user who owns the follow relationship or an administrator can remove a follow. Proper validation must ensure ownership or administrative rights.\n\nOn successful deletion, the follow relation will be removed, and dependent notification triggers will be disabled. Error handling includes invalid ID, lack of permissions, or already deleted records.",
    "summary": "Delete a follow relationship (discussionboard_follow table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the follow relationship to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/follows/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a paginated and filterable list of user reports for posts or comments. This operation is associated with the discussionboard_report table, designed for moderation and abuse workflow across the platform.",
    "description": "Fetches multiple report records, optionally filtered by reporter, target type (post/comment), status, or time range. Reports are displayed in moderation dashboards for review and batch workflow processing. \n\nSecurity: Only admins, moderators, and the reporting user (with limited scope) may access this endpoint. Queries may support search, filtering, and sorting options per discussionboard_report schema indexes. Pagination and advanced filters are handled in the request body.\n\nThis operation should not be called directly for a single report fetch (use GET /discussionboard/reports/{id}). Error handling includes invalid filters or unauthorized access.",
    "summary": "List or search reports (discussionboard_report table).",
    "parameters": [],
    "requestBody": {
      "description": "Filter and pagination for retrieving reports.",
      "typeName": "IDiscussionboardReport.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of reports.",
      "typeName": "IPageIDiscussionboardReport"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reports",
    "method": "patch"
  },
  {
    "specification": "Fetch individual report details by report ID. Used in moderation or for user review of reported content. Implements a single resource retrieval for the discussionboard_report table.",
    "description": "Looks up a report record using its unique identifier. Returns all metadata available for the specific report, such as status, reporting user, related post/comment, reason, and timestamps. Often called from moderation workflows or by the reporting user for status updates.\n\nSecurity: Only authorized users (the reporter or those with moderator/admin privileges) may access full report details. Handles validation of record existence and user permissions.\n\nRelated endpoints: PATCH /discussionboard/reports for listing, PUT /discussionboard/reports/{id} for updating status, DELETE /discussionboard/reports/{id} for removal.",
    "summary": "Get specific report detail (discussionboard_report table).",
    "parameters": [
      {
        "name": "id",
        "description": "Report ID to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Report detail data.",
      "typeName": "IDiscussionboardReport"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reports/{id}",
    "method": "get"
  },
  {
    "specification": "File a new report about a post or comment. Implements creation for the discussionboard_report table to initiate a moderation workflow.",
    "description": "This operation creates a new report record tied to either a post or a comment flagged by a user. The request body contains the ID of the content being reported, the reason, and additional metadata.\n\nIt is critical for moderation and user safety requirements. Secure endpoints only allow authenticated standard users, and supports rate-limiting and duplicate prevention for existing open reports by the same user.\n\nOn creation, triggers notifications and moderation review workflows. Error handling checks for target validity, missing required fields, abuse prevention, or authorization failure.",
    "summary": "Create a new report (discussionboard_report table).",
    "parameters": [],
    "requestBody": {
      "description": "Report creation details—target post/comment, reason, and context.",
      "typeName": "IDiscussionboardReport.ICreate"
    },
    "responseBody": {
      "description": "Created report record for approval/moderation.",
      "typeName": "IDiscussionboardReport"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reports",
    "method": "post"
  },
  {
    "specification": "Update an existing report record by its ID—typically to change status (e.g., from pending to reviewed) or to amend details. Associated with the discussionboard_report table.",
    "description": "Allows updating of a report record's status, reason, or related metadata in response to workflow transitions (pending → reviewed, etc). Used by moderators/admins in their dashboard or by the original reporter to provide added info. Only a restricted set of fields may be changed after creation (status update, admin/mod notes).\n\nSecurity: Update access is restricted to moderators/admins or the original reporting user with appropriate scope. Proper authorization and validation on modifiable fields required. Handles audit logging and notification triggers on status changes.",
    "summary": "Update a report record (discussionboard_report table).",
    "parameters": [
      {
        "name": "id",
        "description": "Report ID to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update on a report record.",
      "typeName": "IDiscussionboardReport.IUpdate"
    },
    "responseBody": {
      "description": "Updated report record.",
      "typeName": "IDiscussionboardReport"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reports/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a specific report by ID from the system (soft deletion). Implements removal for the discussionboard_report table.",
    "description": "Removes (soft deletes) a single report record using its unique ID. Only valid for authorized users—typically the original reporter or resource moderators/admins. Soft deletion preserves audit compliance and allows recovery within the retention window.\n\nOn deletion, associated moderation actions or notifications may be updated. Handles invalid IDs, access errors, and action logging. Related: GET/PUT for detail/update, PATCH for listing.",
    "summary": "Remove a report record (discussionboard_report table).",
    "parameters": [
      {
        "name": "id",
        "description": "Report ID for deletion.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/reports/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieve a paginated and filterable list of report histories (moderation activity logs on user reports). References the discussionboard_report_history table for workflow audits.",
    "description": "Searches and returns history records tied to report handling (actions/decisions by moderators/admins on a given report). Useful for moderation dashboards, compliance audits, and process transparency. \n\nSupports filtering by report, moderator, admin, action type, and date range. Pagination and sorting options are passed via the request body.\n\nSecurity: Only accessible to authorized moderators, admins, or when history relates to a user's own reports. Error handling covers invalid filters and unauthorized requests.",
    "summary": "List/search report action histories (discussionboard_report_history table).",
    "parameters": [],
    "requestBody": {
      "description": "Searching criteria and paging for report action histories.",
      "typeName": "IDiscussionboardReportHistory.IRequest"
    },
    "responseBody": {
      "description": "Paginated result of report histories.",
      "typeName": "IPageIDiscussionboardReportHistory"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistories",
    "method": "patch"
  },
  {
    "specification": "Fetch detailed information for one report action history record. Implements single resource retrieval for the discussionboard_report_history table.",
    "description": "Looks up detailed metadata for a single report history record by its ID, including which moderator/admin acted, time, and action type. Essential for full transparency in moderation workflows and for user or admin review.\n\nSecurity: Moderators, admins, and (where relevant) the reporting user may access individual histories subject to permissions and data minimization.\n\nHandles invalid IDs or unauthorized lookups gracefully. Related operations: PATCH for list, POST for creation, PUT/DELETE for update/removal.",
    "summary": "Get a report action history (discussionboard_report_history table).",
    "parameters": [
      {
        "name": "id",
        "description": "Report history record ID to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full report history detail data.",
      "typeName": "IDiscussionboardReportHistory"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistories/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new report history entry to record a moderation/admin action on a report. Implements single record creation for the discussionboard_report_history table.",
    "description": "Appends a new entry to the report action history, logging each workflow event. Values include the target report, acting moderator/admin, the action type, and detail notes. Only authorized actors may create history records, generally after performing a moderation/admin workflow step. Request body defines report ID, actor info, event type, and context.\n\nSecurity: Only accessible by moderators/admins following a role-verified workflow. Upon creation, triggers audit/internal notifications if required. Related: PATCH for search, GET for detail, PUT/DELETE for update/removal.",
    "summary": "Create a new report history (discussionboard_report_history table).",
    "parameters": [],
    "requestBody": {
      "description": "Report history creation data (event, actor, context).",
      "typeName": "IDiscussionboardReportHistory.ICreate"
    },
    "responseBody": {
      "description": "Created report history record.",
      "typeName": "IDiscussionboardReportHistory"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistories",
    "method": "post"
  },
  {
    "specification": "Update an existing report history record by its unique ID. Handles corrections/amendments in the discussionboard_report_history table.",
    "description": "Enables limited updates/corrections to an existing report history (e.g., to amend action details/notes). Only permissible by the original actor or with appropriate permissions. Request body specifies modifications; controlled to ensure audit trace integrity.\n\nSecurity: Moderators/admins only. All changes logged. Related: PATCH for list, POST for new entries, GET for specific details, DELETE for removal.",
    "summary": "Update a report action history (discussionboard_report_history table).",
    "parameters": [
      {
        "name": "id",
        "description": "Report history record ID to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update in report history record.",
      "typeName": "IDiscussionboardReportHistory.IUpdate"
    },
    "responseBody": {
      "description": "Updated report history record.",
      "typeName": "IDiscussionboardReportHistory"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistories/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a specific report history record by its unique ID. Handles soft deletion for the discussionboard_report_history table.",
    "description": "Removes (soft deletes) one report history record, referenced by its unique ID. Valid only for authorized actors—typically the actor who created the record or supervisors (admins). Ensures compliance with retention/audit rules; record remains recoverable within system retention.\n\nHandles operation idempotency (deleting nonexistent/previously deleted records has no effect). Logs the deletion action for compliance. Related: PATCH for batch/list, PUT for update, GET for detail, POST for creation.",
    "summary": "Remove a report action history (discussionboard_report_history table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the report history record to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistories/{id}",
    "method": "delete"
  },
  {
    "specification": "Search the discussionboard_like table for like events, supporting listing/filtering of like records for analytics and engagement tracking.",
    "description": "Returns a list of like records, optionally filtered by user, target type (post/comment), or date range. Used for dashboards, analytics reports, or for users to view what content they've liked. \n\nSupports pagination and advanced search filters. Only the requesting user, admins, or (with limitations) moderators have access to this endpoint. Advanced filters are provided in the request body.\n\nRelated: PATCH is for complex searches; normal GET not defined due to privacy and possible join/aggregation requirements.",
    "summary": "List or search like events (discussionboard_like table).",
    "parameters": [],
    "requestBody": {
      "description": "Like event search and filter input.",
      "typeName": "IDiscussionboardLike.IRequest"
    },
    "responseBody": {
      "description": "List of like records (paginated or filtered).",
      "typeName": "IPageIDiscussionboardLike"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/like",
    "method": "patch"
  },
  {
    "specification": "Get a specific 'like' event by its unique ID. This operation allows retrieval of information about a single like performed by a user, applicable to either a post or a comment. Prisma table: discussionboard_like. Ensures precise access to a user's like status and audit data.",
    "description": "This endpoint retrieves a single 'like' record from the 'discussionboard_like' table based on the given unique ID. The like entity tracks atomic like events, referencing a user and either a post or a comment, complying with strict 3NF. This operation is used in scenarios where you need to show the details of a user's like on specific content, including audit details and relationship to the target post/comment. Access may require authentication to prevent exposure of private account activity. Validation includes that the provided like ID must exist, and error handling will address not-found scenarios. Related endpoints may include like creation (POST), update (PUT), and deletion (DELETE).",
    "summary": "Get a specific like record by ID from discussionboard_like table.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the like record to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed like record for the given ID.",
      "typeName": "IDiscussionboardLike"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/like/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new like event. This operation allows a user to like either a post or a comment. Tracks an atomic like event including user, target type and time. Prisma table: discussionboard_like. Ensures no duplicate likes per target per user, as enforced by business rules and unique constraints.",
    "description": "This endpoint creates a new like record in the 'discussionboard_like' table, representing when a user likes a post or comment. According to schema design, a like must reference either a post or a comment, not both. The system enforces that each user can only like a given target once. Security and business constraints must verify the user is authenticated, and target content exists. Standard validation will reject duplicates and nonexistent content. On success, returns details of the new like, including timestamp and content reference. Related endpoints: like retrieval (GET), update (PUT), and deletion (DELETE).",
    "summary": "Create a like event for a post or comment in discussionboard_like table.",
    "parameters": [],
    "requestBody": {
      "description": "Data needed to create a new like (must specify post_id or comment_id, and user context).",
      "typeName": "IDiscussionboardLike.ICreate"
    },
    "responseBody": {
      "description": "Created like record details.",
      "typeName": "IDiscussionboardLike"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/like",
    "method": "post"
  },
  {
    "specification": "Update an existing like record by its ID. Most systems do not allow likes to be changed, but if supported, this enables modification (e.g., moving a like from a post to a comment). Prisma table: discussionboard_like. Enforces business logic to only allow ownership changes under proper circumstances. Use sparingly.",
    "description": "This endpoint updates a like record in the 'discussionboard_like' table using the target ID. Although 'likes' are typically immutable in many platforms, this operation can be used if the business logic supports updating target, timestamp, or other properties (e.g., correcting a liking event, audit fixes). The system must ensure that updates do not violate unique constraints (user cannot like the same target twice). Requires authentication of the like owner or an admin. Returns the updated like details. Error handling covers not-found, validation failures, or unauthorized edits. Related endpoints: like retrieval (GET), creation (POST), deletion (DELETE).",
    "summary": "Update a like record by ID in discussionboard_like table.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the like record to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update in the like record (normally target post_id or comment_id).",
      "typeName": "IDiscussionboardLike.IUpdate"
    },
    "responseBody": {
      "description": "The updated like record.",
      "typeName": "IDiscussionboardLike"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/like/{id}",
    "method": "put"
  },
  {
    "specification": "Delete an existing like event by its unique ID. This allows a user to remove their like from a post or comment, fulfilling the unlike action. Prisma table: discussionboard_like. Enforces correct permission check and removal from aggregate like counts.",
    "description": "This endpoint deletes a like record from the 'discussionboard_like' table, as specified by its unique ID. This enables a user to 'unlike' a post or comment. Deletion will update engagement metrics as needed across the platform. Only the creator of the like (or an admin) should be permitted to delete the record. Proper validation must ensure the target exists and the request is authorized. Returns the deleted like record details for confirmation or reconciliation. Related endpoints: like creation (POST), retrieval (GET), update (PUT).",
    "summary": "Delete a like by ID in discussionboard_like table.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the like to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Details of the deleted like record.",
      "typeName": "IDiscussionboardLike"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/like/{id}",
    "method": "delete"
  },
  {
    "specification": "Search and list bookmark records according to filters or search criteria. Implements paginated retrieval of bookmarks for a user or across the system. Prisma table: discussionboard_bookmark. Supports searching by post, user, date added, etc.",
    "description": "This PATCH endpoint retrieves a filtered, paginated list of bookmarks from the 'discussionboard_bookmark' table. Useful for fetching all bookmarks for the current user, or to enable admin search by various criteria (post, user, date range, etc). Returns a page with pagination info, total results and bookmark records. Security measures restrict access to only appropriate records. Validation covers paging and filtering inputs. Related endpoints: bookmark creation (POST), update (PUT), retrieval (GET), deletion (DELETE).",
    "summary": "List bookmarks with search and paging in discussionboard_bookmark table.",
    "parameters": [],
    "requestBody": {
      "description": "Bookmark search/filter options and paging info.",
      "typeName": "IDiscussionboardBookmark.IRequest"
    },
    "responseBody": {
      "description": "Paged bookmark list matching search/filter.",
      "typeName": "IPageIDiscussionboardBookmark"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmark",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific bookmark record by its unique ID. Returns the details about the bookmark event, target post, and timestamps. Prisma table: discussionboard_bookmark.",
    "description": "This endpoint retrieves one bookmark record from the 'discussionboard_bookmark' table based on its unique ID. Bookmarks record which posts a user has saved for later, complying with user context and normalization rules. The endpoint returns detailed fields, including user, post, creation time. Security ensures only permitted users may see others' bookmarks (normally only self or admin). Related endpoints handle bookmark creation, updating, and deletion.",
    "summary": "Get a specific bookmark by ID in discussionboard_bookmark table.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the bookmark to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Bookmark record details for the given ID.",
      "typeName": "IDiscussionboardBookmark"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmark/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new bookmark for a post for the current user. Tracks a user's saved posts for easy retrieval and management. Prisma table: discussionboard_bookmark. Enforces user cannot bookmark the same post multiple times.",
    "description": "This endpoint creates a new bookmark record in the 'discussionboard_bookmark' table, allowing the user to save a post for later reference. Enforces constraints so each user can only have one bookmark per target post. Bookmark details include post, user, creation timestamp. System ensures user is authenticated, post exists, and no duplicates. Returns the created bookmark record on success. Related endpoints include bookmark search (PATCH), update (PUT), retrieval (GET), and deletion (DELETE).",
    "summary": "Create a new bookmark for a post in discussionboard_bookmark table.",
    "parameters": [],
    "requestBody": {
      "description": "Bookmark creation data (target post and user context).",
      "typeName": "IDiscussionboardBookmark.ICreate"
    },
    "responseBody": {
      "description": "Details of the created bookmark.",
      "typeName": "IDiscussionboardBookmark"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmark",
    "method": "post"
  },
  {
    "specification": "Update a bookmark record by its unique ID. Allows modification, such as reassigning to a different post if supported by system rules. Prisma table: discussionboard_bookmark. Protects against duplicate bookmarks. Typically used for correction or admin adjustment.",
    "description": "This endpoint updates a bookmark record in the 'discussionboard_bookmark' table by its unique ID. Normally, bookmarks are only created/deleted, but this operation enables administrative changes or moving a bookmark to another post if business rules allow. Validation ensures updated post reference doesn't introduce duplication for the (user, post) pair. Only the bookmark owner or admin can invoke this operation. Returns the updated record on success. Related endpoints cover bookmark creation, retrieval, and deletion.",
    "summary": "Update a bookmark record by ID in discussionboard_bookmark table.",
    "parameters": [
      {
        "name": "id",
        "description": "Bookmark record's unique identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Bookmark fields to update (typically post_id).",
      "typeName": "IDiscussionboardBookmark.IUpdate"
    },
    "responseBody": {
      "description": "Updated bookmark record details.",
      "typeName": "IDiscussionboardBookmark"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmark/{id}",
    "method": "put"
  },
  {
    "specification": "Delete (remove) a bookmark record by its unique ID. Allows a user to remove a previously saved post from their bookmarks. Prisma table: discussionboard_bookmark. Enforces ownership or admin permissions.",
    "description": "This endpoint removes a bookmark record from the 'discussionboard_bookmark' table by its ID. Used when a user wants to unsave a post. Only the bookmark owner or system admin may perform deletions. Ensures atomic removal and updates any engagement metrics as appropriate. Returns the deleted bookmark info for confirmation. Related endpoints include creation, search, get, update. Handles not-found and unauthorized cases gracefully.",
    "summary": "Delete a bookmark by ID in discussionboard_bookmark table.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the bookmark to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Deleted bookmark record details.",
      "typeName": "IDiscussionboardBookmark"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/bookmark/{id}",
    "method": "delete"
  },
  {
    "specification": "List (search/filter) follow records according to filtering options—across the platform or for the current user. Implements the follow listing/search need for engagement features. Prisma table: discussionboard_follow.",
    "description": "This PATCH endpoint queries the 'discussionboard_follow' table for follow records matching supplied search and paging options (e.g., following/followed users, threads, date). Returns paginated results with detailed info per follow event. Normally used to allow users to see who they follow, who follows them, or for admin queries. Related endpoints manage creation, retrieval, and deletion of follows. Security ensures query is scoped to permitted data. Paging and filter validation enforced. Not-found and permissions failures handled gracefully.",
    "summary": "List/search follows with paging in discussionboard_follow table.",
    "parameters": [],
    "requestBody": {
      "description": "Follow search criteria and paging/options.",
      "typeName": "IDiscussionboardFollow.IRequest"
    },
    "responseBody": {
      "description": "Paged follow record list matching criteria.",
      "typeName": "IPageIDiscussionboardFollow"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/follow",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific follow record by its unique ID. Provides details about the follow event between a user and the target (another user or thread). Prisma table: discussionboard_follow. Enables user engagement and notification features.",
    "description": "This endpoint fetches a single follow record from the 'discussionboard_follow' table, identified by its unique ID. The entity tracks relationships where a user follows either another user or a thread. Returns full details, including actors and targets involved, and timestamps. Only the follow owner, the target, or an admin may view sensitive follow records. Error handling for missing/invalid IDs, and unauthorized access, is provided. Related endpoints: follow creation (POST), search (PATCH).",
    "summary": "Get a specific follow record by ID in discussionboard_follow table.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ID of the follow record to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Follow record details for the given ID.",
      "typeName": "IDiscussionboardFollow"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/follow/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new follow event: user follows another user or a thread. Records the relationship for notifications/engagement. Prisma table: discussionboard_follow. Enforces that a user may only follow a target once.",
    "description": "This endpoint creates a new follow record in the 'discussionboard_follow' table, recording when a user follows another user or a thread. Only one follow relationship per (follower, target) pair allowed per schema constraints. Input specifies the target type and identifier (user or thread). Authenticated user context required; validation ensures no duplicate, and that target exists. Returns created follow info on success. Related endpoints: follow search (PATCH), detail (GET). Error handling: duplicate, target not found, authorization.",
    "summary": "Create a follow event (user follows another user/thread) in discussionboard_follow table.",
    "parameters": [],
    "requestBody": {
      "description": "Details of new follow: target user or thread, user context.",
      "typeName": "IDiscussionboardFollow.ICreate"
    },
    "responseBody": {
      "description": "Created follow record details.",
      "typeName": "IDiscussionboardFollow"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/follow",
    "method": "post"
  },
  {
    "specification": "Updates (creates or modifies) a follow relationship for a user, either following another user or thread. Associated with the discussionboard_follow entity in the database. Handles logic for following, including reference updates and validation business rules enforcing one-record-per (follower,target) uniqueness. Checks permissions of requesting user, and validates if the given id (follow relationship) exists before updating. Used to enable notifications and engagement between users and threads, including follow/unfollow flows.",
    "description": "This API operation updates an existing follow relationship for the authenticated user. The client provides the follow relationship's unique identifier as the path parameter.\n\nThe handler receives the follow relationship id and updates the targeted follow instance as needed (for example, adjust active status, notification preferences, or other mutable fields supported by business logic). Only the user who created the follow, or administrators, are authorized to perform this operation. Any changes are immediately reflected for notification delivery and engagement analytics.\n\nAssociated with the discussionboard_follow table, which uses a composite unique constraint on (follower_user_id, followed_user_id/followed_thread_id), ensuring that only one follow relationship exists for each pair. This operation must validate that the follow exists and the user has permission. If not found, returns a 404 error. If not authorized, returns 403.\n\nRelated endpoints include PATCH /discussionboard/follow for searching/fetching lists of follow relationships, POST for creation, and DELETE for removal. Ensures audit logging for permission changes.",
    "summary": "Update a follow relationship for a user (discussionboard_follow).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the follow relationship to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Follow relationship update information.",
      "typeName": "IDiscussionboardFollow.IUpdate"
    },
    "responseBody": {
      "description": "The updated follow relationship.",
      "typeName": "IDiscussionboardFollow"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/follow/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes a follow relationship, so a user no longer follows a specific user or thread. Relates to the discussionboard_follow entity. Used for unfollow flows and notification opt-out. Must enforce that only the creator of the relationship or an admin can delete. After deletion, notifications and references to the followed entity are removed. Enforces audit logging and referential integrity.",
    "description": "Handles the deletion of a specific follow relationship, identified by its unique id. Ensures only the user who created the follow (follower) or an administrator can perform this operation.\n\nUpon successful deletion, the associated notification triggers and all references to the followed entity for this user are removed immediately. This prevents any future notifications or follow-based engagement from being sent to the user until they follow again.\n\nThe discussionboard_follow table records the atomic follow events with unique constraints to prevent duplicates. This operation will return 404 if not found or 403 if not permitted. All deletions are soft or hard per business policy, and are audit logged.\n\nRelated APIs: PATCH /discussionboard/follow for searching, POST for creation, PUT for updating.",
    "summary": "Remove a follow relationship (discussionboard_follow).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the follow relationship to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/follow/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a paginated, filtered list of reports (content or user reports) in the system; supports advanced searching for moderation workflow and abuse handling. Corresponds to the discussionboard_report table. Accepts complex query/filter via request body (e.g., by status, type, time, reporter).",
    "description": "This operation retrieves reports submitted by users for moderation, including those filed for posts and comments. Accepts comprehensive search and filter criteria using the request body (e.g., report status, target type, reporting user, creation time, reason substring).\n\nPagination parameters are also accepted to support scalable review of reports. Search results return metadata, including involved users, content references, status, and submission times.\n\nAssociated to the discussionboard_report table, which implements uniqueness per (reporting_user_id, post_id/comment_id) and full 3NF compliance. Only moderators, admins, or the relevant users can access certain records; permissions are controlled per request. Errors for unauthorized access, invalid filters, or malformed queries are handled according to application policies.\n\nRelated APIs: GET /discussionboard/report/{id} for details, POST for creation, PUT for updates, DELETE for removal.",
    "summary": "Search, filter, and paginate reports (discussionboard_report).",
    "parameters": [],
    "requestBody": {
      "description": "Search and filter options for retrieving reports.",
      "typeName": "IDiscussionboardReport.IRequest"
    },
    "responseBody": {
      "description": "Paginated, filtered report results.",
      "typeName": "IPageIDiscussionboardReport"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/report",
    "method": "patch"
  },
  {
    "specification": "Retrieves the full details of a specific user report, either on content or a user. Should return all fields including status, involved users, content, and entire moderation context. Associated with the discussionboard_report table. Permission checks ensure only moderators, report submitters, or admins can access details.",
    "description": "Fetches the complete details of a single report, specified by its unique identifier. Includes all metadata such as reporting user, status, target post/comment, reason, and the moderation workflow context.\n\nTied to the discussionboard_report entity, the handler enforces permissions—only the author, moderators, or administrators can view full details. If not found, returns 404; if unauthorized, returns 403. Errors and edge cases are handled according to business logic.\n\nRelated endpoints: PATCH /discussionboard/report (search/list), POST for new reports, PUT/DELETE for updates/removal.",
    "summary": "Get a single report's full details (discussionboard_report).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the report to fetch.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Complete report details.",
      "typeName": "IDiscussionboardReport"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/report/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new content or user report, capturing abuse, spam, or rule violation signals. Related to the discussionboard_report table. Must validate input (target is post or comment, not both; reporter is authenticated user; one report per reporter/target). Triggers moderation workflow and notification. Supports audit logging.",
    "description": "Creates and submits a new report by a user. Accepts report details such as target post/comment, reason, and report type. Validates that only one target is set, the user is authenticated, and the same user has not already reported this content.\n\nOnce created, the report enters the moderation workflow with initial status (e.g., 'pending'). Triggers notification and audit logging processes. Returns the complete report entity on success.\n\nThe discussionboard_report table records normalized report events per user/action. Permission enforcement is handled in business logic. Fails with 400 for validation error, or 403/409 for duplicates, as appropriate.\n\nRelated endpoints: PATCH (search), GET (details), PUT (modify), DELETE (remove).",
    "summary": "Create a new report (discussionboard_report).",
    "parameters": [],
    "requestBody": {
      "description": "Details of the new report.",
      "typeName": "IDiscussionboardReport.ICreate"
    },
    "responseBody": {
      "description": "Created report entity.",
      "typeName": "IDiscussionboardReport"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/report",
    "method": "post"
  },
  {
    "specification": "Updates specific fields of an existing report (content/user), such as status or reason, as permitted by moderation/business rules. Corresponds to discussionboard_report. Only moderators/admins or the report owner allowed.",
    "description": "Modifies an existing report, as identified by its unique id. The update may change status, reason, or other mutable fields according to permissions.\n\nImplements strict permission checks: only authorized users—typically the report author, moderators, or administrators—can update reports. Supports audit trailing and full validation of changes. Fails with 404 if not found, 403 if unauthorized.\n\nWorks on the discussionboard_report entity. Returns updated entity upon success. Related APIs: PATCH (search/list), GET (details), POST (create new), DELETE (remove).",
    "summary": "Update an existing report (discussionboard_report).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the report to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields and values to update in the report.",
      "typeName": "IDiscussionboardReport.IUpdate"
    },
    "responseBody": {
      "description": "Updated report entity.",
      "typeName": "IDiscussionboardReport"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/report/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes an existing report record, either by the reporting user or moderator/admin. Corresponds to the discussionboard_report table. Implements soft or hard deletion as per business policy. After deletion, state is immediately reflected in moderation workflow. Logs removal in audit trail.",
    "description": "Deletes a report specified by its id. Permission checks: only the report's author, a moderator, or an admin can delete. Implements either soft/hard delete per policy.\n\nOnce deleted, the report is no longer available through list or detail endpoints. Ensures audit logging for compliance. Errors: 404 if not found, 403 if unauthorized, 409 if not deletable per current workflow status.\n\nBased on the discussionboard_report table, this is a critical operation for moderation and user accountability. Related: PATCH (search/list), POST (create), GET (details), PUT (update).",
    "summary": "Delete a specific report (discussionboard_report).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the report to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/report/{id}",
    "method": "delete"
  },
  {
    "specification": "Retrieves a paginated, filtered list of report history entries (actions taken on reports by moderators/admins). Related to discussionboard_report_history. Accepts advanced filtering and search by report, actor, action type, date, etc. Result is paginated and detailed for review/audit purposes.",
    "description": "Fetches a paginated, filterable list of report history records representing actions taken by moderators or admins in response to user reports. Accepts filters (by report id, actor, action, date, etc., through request body) to support audit and compliance review. Returns detailed action records, including moderator/admin, timestamps, and context notes.\n\nBased on discussionboard_report_history, records represent an immutable log of moderation workflow. Only authorized users (moderators/admins) can access most records. 404 for missing filters/resources; 403 for unauthorized access.\n\nRelated operations: GET /discussionboard/reportHistory/{id} (detail), POST (create record), PUT (amend/correct record), DELETE (remove for errata/audit).",
    "summary": "List and filter report history entries (discussionboard_report_history).",
    "parameters": [],
    "requestBody": {
      "description": "Filter criteria and pagination for searching report histories.",
      "typeName": "IDiscussionboardReportHistory.IRequest"
    },
    "responseBody": {
      "description": "Paginated report history records.",
      "typeName": "IPageIDiscussionboardReportHistory"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistory",
    "method": "patch"
  },
  {
    "specification": "Fetch full detail of a single report history action log, including actor, action, notes, related report, and timestamps. Based on discussionboard_report_history, used for audit and appeals.",
    "description": "Retrieves a single report history entry, identified by its unique id. Returns full action log details: which moderator/admin performed the action, the specific event/type, notes/context, related report, and timestamps.\n\nPermissions: Only moderators/admins, or possibly report author under policy, can view. 404 for not found, 403 unauthorized. Supports audit review/appeals workflows. Relates to other report and moderation endpoints for end-to-end workflow traceability.\n\nRelated to: PATCH (list/search), POST (new log entry), PUT (update errata/correction), DELETE (delete in case of error/audit policy).",
    "summary": "Get single report history log details (discussionboard_report_history).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the report history entry.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Report history log entry details.",
      "typeName": "IDiscussionboardReportHistory"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistory/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new report action history log entry—a moderator/admin's workflow action for a report. Tied to discussionboard_report_history. Used for tracking moderation response, workflow, and appeals context. Requires validation of action, actor, target report.",
    "description": "Submits a new report history log entry (e.g., moderator/admin action taken in moderation workflow, such as 'resolved', 'dismissed', 'user banned', etc.). The input must reference the target report, actor (moderator/admin), action, timestamp, and notes/context as per audit policies.\n\nAll log entries are immutable once created for compliance/audit. Returns the full entry on success. Validation and permission checks enforced. Returns 400 for invalid/action input, 403 for permission error. Closely ties into moderation/audit/appeals processes.\n\nOther operations: PATCH (list/query), GET (detail), PUT (update/correction for errata), DELETE (removal for audit policy).",
    "summary": "Create a new report history log entry (discussionboard_report_history).",
    "parameters": [],
    "requestBody": {
      "description": "Contents of the report history entry to be created.",
      "typeName": "IDiscussionboardReportHistory.ICreate"
    },
    "responseBody": {
      "description": "Created report history log entry.",
      "typeName": "IDiscussionboardReportHistory"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistory",
    "method": "post"
  },
  {
    "specification": "Updates an existing report history log (for errata/correction, only if allowed by policy), based on discussionboard_report_history. Edits can be restricted to actor or admin level and may be disallowed if log is already locked. Requires id and updatable fields in body.",
    "description": "Modifies a report history entry, as specified by its unique id. Only permitted when log is not finalized/locked as per audit policy (e.g., within a correction window, or for clear errata).\n\nValidates allowed fields, records all changes for audit/compliance, enforces strict permission control (actor/admin only). Fails with 404 if not found, or 403 if operation not allowed. Returns updated log entry on success. All changes are themselves logged in audit log for traceability.\n\nRelated to PATCH (search/list), GET (detail), POST (creation), DELETE (removal for errata/audit).",
    "summary": "Update an existing report history entry (discussionboard_report_history).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the report history log to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update in the report history entry.",
      "typeName": "IDiscussionboardReportHistory.IUpdate"
    },
    "responseBody": {
      "description": "Updated report history log entry.",
      "typeName": "IDiscussionboardReportHistory"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistory/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes a report history entry (for audit correction or errata removal), subject to audit policy and permissions. Related to discussionboard_report_history. Used to clean up mistakes or correct audit trail, requires admin or actor permission.",
    "description": "Deletes a specific report history log entry by its unique id. Only allowed under strict conditions (e.g., immediately after creation for mistakes/errata; otherwise entry is immutable for audit compliance). Permission checks: actor/admin only.\n\nOnce deleted, entry is no longer returned in search or detail APIs. Operation is audit logged for compliance. Errors: 404 for missing entry, 403 for unauthorized or locked entries.\n\nRelated endpoints: PATCH (search/list), POST (create), GET (detail), PUT (update/correction).",
    "summary": "Delete a report history log entry (discussionboard_report_history).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the report history log to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/reportHistory/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements searching and listing of moderation actions performed on posts, comments, or users. References the moderation action table with full audit data. Used to list moderation activities, filter by actor, target, type, or time. Pagination, searching, and sorting capabilities must be included in the request body. Results include the full set of moderation action properties per normalized schema.",
    "description": "This endpoint enables administrators and moderators to retrieve a searchable, paginated, and sortable list of all moderation actions recorded in the discussion board system. Each moderation action documents an intervention by a moderator or admin—such as edit, hide, delete, warn, ban, or restore—providing a full audit trail of moderation activities. \n\nAccess to this endpoint is typically restricted to users with administrative or moderation permissions, due to the sensitive nature of moderation data. The results include references to the acting moderator/admin, affected users, posts/comments, and related reports. Filters should allow querying by action type, actor, time range, target type, or related entity, in alignment with moderation reporting requirements.\n\nThis operation supports advanced audit compliance and transparency by delivering precise, atomic details of each moderation event. It can be used together with GET /discussionboard/moderationActions/{id} to drill down to a specific action. Pagination and complex filtering are required due to the potentially high volume of moderation actions.",
    "summary": "List or search Moderation Actions from the discussionboard_moderation_action table.",
    "parameters": [],
    "requestBody": {
      "description": "Request filters/search/sort parameters for moderation actions with pagination.",
      "typeName": "IDiscussionboardModerationAction.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of moderation actions with complete audit detail.",
      "typeName": "IPageIDiscussionboardModerationAction"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/moderationActions",
    "method": "patch"
  },
  {
    "specification": "Retrieves details for a single moderation action by unique identifier from the moderation action table. Returns all audit properties for the specified moderation action, including actor, target, post/comment/report references, and timestamps.",
    "description": "This endpoint retrieves the full details of a specific moderation action, identified by its unique ID. The information returned includes which moderator or admin performed the action, the action type (e.g., edit, delete, ban), any associated user, post, comment, or report, the moderation reason, and the action timestamp.\n\nPermissions are typically restricted to moderation or administrative users to preserve the privacy and security of moderation workflows. The endpoint is essential for investigating individual incidents in depth, conducting audits, and assuring traceability. It complements the moderation action search/list endpoint, enabling users to drill down into specific events for further review or compliance verification.\n\nRelated operations include PATCH /discussionboard/moderationActions for searching/listing actions or reviewing a user's moderation history.",
    "summary": "Get details for a single Moderation Action (discussionboard_moderation_action).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique moderation action identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed Moderation Action record from the audit log.",
      "typeName": "IDiscussionboardModerationAction"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/moderationActions/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new moderation action record in the moderation action table. Used to log interventions such as edits, deletes, warnings, bans, or restores, specifying actor, targets, affected entities, action type, and reason.",
    "description": "This endpoint is used to create and log a new moderation action in the system, covering a range of intervention types such as edit, delete, hide, warn, ban, or restore. The request body must contain necessary details including the acting moderator or admin, target user/post/comment/report (if any), the action type, and the rationale or context for the action. \n\nThis operation enforces business rules for moderation trail preservation, ensuring each intervention is fully attributed and timestamped. Only users empowered as moderators or administrators may invoke this operation. Typically, creation triggers notification and audit log entries in connected domains.\n\nNote: The internal schema strictly splits atomic moderation actions from ban details and notes, keeping all references unique and well tracked for compliance/auditing.",
    "summary": "Create a new Moderation Action record in discussionboard_moderation_action.",
    "parameters": [],
    "requestBody": {
      "description": "Data to create a new moderation action record.",
      "typeName": "IDiscussionboardModerationAction.ICreate"
    },
    "responseBody": {
      "description": "Created Moderation Action audit record.",
      "typeName": "IDiscussionboardModerationAction"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/moderationActions",
    "method": "post"
  },
  {
    "specification": "Updates an existing moderation action record in the moderation action table by ID. Used to correct errors or attach additional references, respecting audit traceability.",
    "description": "This endpoint permits the update of an existing moderation action record, identified by unique ID. Fields eligible for update may include linking additional affected entities, correcting references, or amending moderation notes, as allowed by the business logic and audit policy. Edits are subject to strict permissions and audit requirements.\n\nModeration actions should remain immutable in substance (notably for compliance), but references and metadata may require correction for accuracy. All updates should create a new audit record or preserve the update chain per business rules. Only moderators or administrators are authorized to change moderation action records.",
    "summary": "Update an existing Moderation Action record (discussionboard_moderation_action).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique moderation action identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Moderation Action update data; only updatable fields.",
      "typeName": "IDiscussionboardModerationAction.IUpdate"
    },
    "responseBody": {
      "description": "Updated Moderation Action record.",
      "typeName": "IDiscussionboardModerationAction"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/moderationActions/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes a moderation action record by ID from the moderation action table. Typically soft-deletes to preserve the audit trail but may perform logical removal for compliance.",
    "description": "This endpoint performs deletion of a moderation action record, identified by its ID. Most implementations follow a soft-delete pattern, marking the record as deleted without physically removing it, to preserve compliance and audit history. Only users with administrator or moderator roles are permitted to delete moderation actions.\n\nBusiness policies may restrict deletion except in special scenarios (e.g., legal compliance, retention period expiry). Record deletions should trigger retention policy workflows including additional audits.",
    "summary": "Delete (typically soft-delete) a Moderation Action record (discussionboard_moderation_action).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique moderation action identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Delete operation status or deleted record summary.",
      "typeName": "IDeleteResult"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/moderationActions/{id}",
    "method": "delete"
  },
  {
    "specification": "Provides a paginated, searchable, and sortable list of ban records from the ban table. Used by moderators/admins to manage user bans, including active and historical bans with all atomic details. Request body contains filters, pagination, search, and sort criteria.",
    "description": "This endpoint enables authorized users to retrieve a paginated list of user ban records, as maintained in the discussionboard_ban table. Each record represents a unique ban event, indicating the banned user, the imposing moderator/admin, associated moderation action, start and end times (for permanent or temporary bans), and the rationale. \n\nAdvanced filtering, search, and sorting parameters should be specified in the request body, supporting operational requirements for compliance, investigation, and active user management. This API operation ensures that all ban history is fully auditable and accessible to those with the necessary privileges. Typical usage scenarios include reviewing ban waves, checking ban durations, and performing rights appeals or compliance checks.",
    "summary": "List/search user bans from the discussionboard_ban table.",
    "parameters": [],
    "requestBody": {
      "description": "Ban query/filter/search parameters (pagination, sort, filters).",
      "typeName": "IDiscussionboardBan.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of user ban records with moderation/actor/context data.",
      "typeName": "IPageIDiscussionboardBan"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/bans",
    "method": "patch"
  },
  {
    "specification": "Retrieves full details of a single user ban from the ban table, using its unique identifier. Returns all audit metadata for the ban, including affected user, moderator, period, action, and rationale.",
    "description": "This endpoint retrieves the complete information associated with a specific user ban in the system, identified by its unique ID. The response includes full detail: the banned user, imposing moderator/admin, relevant moderation action, ban time period, reason for the ban, and associated audit trail metadata.\n\nAccess is restricted to privileged users (moderator or admin) due to the sensitive and potentially personal nature of ban data. This operation is critical for appeals resolution, compliance reporting, and detailed user moderation review. Complements the list/search endpoint for detailed single-record access.",
    "summary": "Get full details for a user Ban record (discussionboard_ban).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ban record identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Single user ban record with audit detail.",
      "typeName": "IDiscussionboardBan"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/bans/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new ban record in the ban table. Imposes or logs a user ban/timeout event, including all contextual metadata and references (user, moderator, action, time, reason).",
    "description": "This endpoint allows moderators or administrators to create a new user ban in the discussionboard_ban table. The request body must provide all necessary details: the user being banned, the moderator/admin imposing the ban, associated moderation action, start and end time (for temporary bans), and the specific ban reason.\n\nUpon creation, the system must enforce business logic for ban overlap, duration, and notification to the affected user and involved moderators/admins. Every ban entry is tightly linked to a moderation action for auditability. Access rights are strictly enforced, and any ban creation must be fully justified and comprehensively recorded for compliance.",
    "summary": "Create a new user ban record (discussionboard_ban).",
    "parameters": [],
    "requestBody": {
      "description": "Data for new user ban record, all ban event fields required.",
      "typeName": "IDiscussionboardBan.ICreate"
    },
    "responseBody": {
      "description": "Created user ban record for audit/verification.",
      "typeName": "IDiscussionboardBan"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/bans",
    "method": "post"
  },
  {
    "specification": "Updates an existing ban record by ID in the ban table. Used for correcting metadata, duration, or related references, with full audit compliance.",
    "description": "This endpoint allows a privileged user (moderator/admin) to update the attributes of an existing ban. Updates can include correcting the reason, adjusting start/end times (e.g., appeal decision), linking a different moderation action, or clarifying moderator references. Idempotency and audit trace chain must be preserved under compliance rules.\n\nMost ban attributes are subject to business constraints; duration changes or user references may be limited after initial creation to avoid abuse. The operation is logged for every update, and all changes should maintain full traceability and immutability principles.",
    "summary": "Update an existing user ban record (discussionboard_ban).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ban record identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "User ban update data, only allowed fields per business rules.",
      "typeName": "IDiscussionboardBan.IUpdate"
    },
    "responseBody": {
      "description": "Updated ban record with audit context.",
      "typeName": "IDiscussionboardBan"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/bans/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes (typically soft-deletes) a user ban record by ID from the ban table. Used only under retention, compliance, or legal purge requirements. Most records are kept for audit.",
    "description": "This endpoint is used by moderators or administrators to delete a user ban record, almost always following a soft-delete pattern to maintain an audit-compliant record of past bans. Hard deletion is rare and may only be used under specific legal or retention policy requirements. \n\nBan deletions are logged and subject to secondary review. The operation is strictly limited to privileged users and always recorded in audit logs and system event tracking for future investigation.",
    "summary": "Delete/soft-delete a user ban record from discussionboard_ban.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique ban record identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Status of ban deletion or deleted record summary.",
      "typeName": "IDeleteResult"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/bans/{id}",
    "method": "delete"
  },
  {
    "specification": "Lists or searches moderator notes from the moderator note table. Returns a paginated, searchable, and sortable set of moderator notes, including author, context, relevant moderation actions or user references, and timestamps. Used for auditing moderation communication.",
    "description": "This endpoint provides moderators and administrators access to system-logged notes authored regarding a moderation action, user, or event. The results are paginated and support searching, filtering, and sorting—by author, creation time, moderation action, or target user. \n\nModerator notes are critical for maintaining a transparent and accountable moderation process. Access is strictly limited to privileged users to protect potentially sensitive internal discussions and rationale. Typical use-cases include reviewing collaborative moderation narratives, research into prior incident handling, or compliance checks for documentation standards.",
    "summary": "List/search Moderator Notes from discussionboard_moderator_note.",
    "parameters": [],
    "requestBody": {
      "description": "Request filter/search/sort for moderator notes with pagination.",
      "typeName": "IDiscussionboardModeratorNote.IRequest"
    },
    "responseBody": {
      "description": "Paginated list of moderator notes including context/detail records.",
      "typeName": "IPageIDiscussionboardModeratorNote"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/moderatorNotes",
    "method": "patch"
  },
  {
    "specification": "Retrieves a single moderator note by ID from the moderator note table. Returns all fields for that note, including author, related moderation action, target user, note details, and timestamp.",
    "description": "This endpoint retrieves the details for a system moderator note, as identified by its unique ID. Returned information includes the author (moderator/admin), related moderation action (if any), target user (if specified), the note body, and the timestamp. \n\nAccess is limited to moderators and administrators due to content sensitivity and privacy policy requirements. This endpoint is used together with PATCH /discussionboard/moderatorNotes for drill-down review, audit, or moderation team documentation.",
    "summary": "Get details for a single Moderator Note (discussionboard_moderator_note).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique moderator note identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Moderator Note detail record.",
      "typeName": "IDiscussionboardModeratorNote"
    },
    "authorizationRoles": [
      "admin",
      "moderator"
    ],
    "path": "/discussionboard/moderatorNotes/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new moderator note record in the 'discussionboard_moderator_note' table. This operation allows a moderator or admin to leave an internal system note related to moderation actions or users, for compliance and collaboration. Notes may be linked to a moderation action or directly to a user, supporting audits and rationale documentation. The note contains the author, optional links to related moderation action and target user, body text, and a creation timestamp. Only authenticated moderators or admins should be able to create notes. Required input: author_id, note_body, optional related_action_id, optional target_user_id.",
    "description": "This endpoint enables creation of moderator or admin notes within the moderation system. It records an internal, atomic note concerning a moderation action, a user, or general rationale, as part of compliance and system audit requirements. Each note is associated with the author (a moderator or admin), contains the body of the note, and optionally references a moderation action and/or a specific user. This separation ensures strict normalization—notes do not duplicate data from other tables, and each can be uniquely traced for compliance. Permissions must restrict this operation to users in moderator or admin roles. Possible errors include missing required fields or attempting access without sufficient role.",
    "summary": "Create moderator note (discussionboard_moderator_note table).",
    "parameters": [],
    "requestBody": {
      "description": "Information required for creating a moderator note, including author, note body, and optional related action/user.",
      "typeName": "IModeratorNote.ICreate"
    },
    "responseBody": {
      "description": "Created moderator note record.",
      "typeName": "IModeratorNote"
    },
    "authorizationRoles": [
      "moderator",
      "admin"
    ],
    "path": "/discussionboard/moderatorNotes",
    "method": "post"
  },
  {
    "specification": "Update an existing moderator note record in the 'discussionboard_moderator_note' table by its unique ID. This operation enables modification of the note body or the references to related moderation actions or users, maintaining audit history. Only the author or a privileged admin should be able to update a note. Required input: id (path), update details in the body.",
    "description": "This operation lets a moderator or admin update a previously created moderator note. The note is identified by its ID in the path. Fields that can be updated include the note body, or references to a related moderation action or user; the author cannot be changed. This maintains normalization by keeping all updates recorded per note instance. Only the original author or admin may modify the note, respecting role-based access constraints. Attempting to update non-existent notes or insufficient permissions should result in appropriate errors. All updates are tracked for compliance via audit logs.",
    "summary": "Update a moderator note (discussionboard_moderator_note table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the moderator note to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Data for updating the moderator note body or references.",
      "typeName": "IModeratorNote.IUpdate"
    },
    "responseBody": {
      "description": "The updated moderator note record.",
      "typeName": "IModeratorNote"
    },
    "authorizationRoles": [
      "moderator",
      "admin"
    ],
    "path": "/discussionboard/moderatorNotes/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a moderator note record from the 'discussionboard_moderator_note' table by its unique ID. This supports moderation housekeeping and removal of incorrect or obsolete notes. Only admins or the author can delete notes. Supports soft-deletion patterns for audit. Required input: id (path).",
    "description": "This endpoint allows a moderator or admin to delete an existing moderator note, identified by its unique ID. Deletions are soft by default to maintain audit logs and system compliance. The operation verifies user authorization: only the note author or privileged admin can delete. Deletion cascades or error handling depend on referential constraints and current moderation activity. Returns confirmation of deletion or error if the note is not found. Ensures the system remains compliant with audit and retention policies.",
    "summary": "Delete moderator note (discussionboard_moderator_note table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the moderator note to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of moderator note deletion.",
      "typeName": "IModeratorNote"
    },
    "authorizationRoles": [
      "moderator",
      "admin"
    ],
    "path": "/discussionboard/moderatorNotes/{id}",
    "method": "delete"
  },
  {
    "specification": "Search and filter notification records from the 'discussionboard_notification' table with query parameters and complex filters. Supports pagination, search by type, recipient, read status, or event context. This implements notification list retrieval for the recipient, keeping audit and permission rules.",
    "description": "This endpoint retrieves a paginated, filterable list of notifications for a user. Filters can include user_id, notification type, read/unread status, and associated entities (post, comment, report). Pagination and sorting fields support high-volume user inboxes. This list is used to populate user notification centers or admin dashboards. Only the notification recipient or a privileged admin may list notifications for a user. Attempts by unauthorized users are rejected. Search may use partial- or full-match on notification content, and performance may be improved with catalog/GIN indexes. Check for role and permissions before accessing. Related endpoints may include mark-as-read operations.",
    "summary": "List notifications with search/filter (discussionboard_notification table).",
    "parameters": [],
    "requestBody": {
      "description": "Filtering, searching, and pagination info for notification listing.",
      "typeName": "INotification.IRequest"
    },
    "responseBody": {
      "description": "Paginated filtered list of notifications.",
      "typeName": "IPageINotification"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/notifications",
    "method": "patch"
  },
  {
    "specification": "Retrieve a single notification record from the 'discussionboard_notification' table by its unique notification ID. This supports the notification detail view or marking notifications as read.",
    "description": "Returns the full detail for a specific notification, identified by its unique ID. The result includes all metadata: notification type, timestamp, content, read status, associated users and entities (posts, comments, reports). Access is restricted to the intended recipient or privileged admins only. Common use cases include displaying notification details or for in-app navigation from notification links. Permission checks ensure privacy of user-specific notifications. Errors include not found or unauthorized access.",
    "summary": "Get notification detail (discussionboard_notification table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the desired notification.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Details of the requested notification.",
      "typeName": "INotification"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/notifications/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new notification in the 'discussionboard_notification' table. Used to deliver system or user-triggered notifications to users, with info about the recipient, actor, event, and metadata. Required for admin or system functions.",
    "description": "Creates a new notification event that will be shown to the recipient user. Input includes notification type (e.g., reply, like, mention), content, recipient, trigger/actor, and related entities for context (post, comment, report). Performs validation of required fields, user existence, and permission to create system-generated notifications. Likely limited to internal/admin/service calls, as normal users should not fabricate arbitrary notifications. Ensures normalization and audit compliance—each notification is atomic, tracks its origin and context for future review or deletion. Error handling covers invalid or missing users, or incomplete context. Created timestamp is set to current time.",
    "summary": "Create notification (discussionboard_notification table).",
    "parameters": [],
    "requestBody": {
      "description": "Notification event creation data: recipient, content, and related entities.",
      "typeName": "INotification.ICreate"
    },
    "responseBody": {
      "description": "Created notification record.",
      "typeName": "INotification"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/notifications",
    "method": "post"
  },
  {
    "specification": "Update an existing notification record by its unique ID in the 'discussionboard_notification' table. Typically used to mark as read/unread or change minor metadata. Strict normalization: no change to recipient or event type.",
    "description": "Allows modification of an existing notification, such as toggling is_read, updating the read timestamp, or minor metadata updates for compliance. The ID parameter identifies which notification is being updated, and the body specifies the fields to change (e.g., marking as read). Only the recipient or system admin may update. Prevents updating critical fields like recipient, event type, or content after creation. Errors may result from not found or unauthorized operation. All changes audited for compliance.",
    "summary": "Update notification (discussionboard_notification table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of notification to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Data for updating notification status or metadata.",
      "typeName": "INotification.IUpdate"
    },
    "responseBody": {
      "description": "The updated notification record.",
      "typeName": "INotification"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/notifications/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a notification record from the 'discussionboard_notification' table by its unique ID. Supports user notification management and compliance. Only notification recipient or privileged admin can delete. Typically soft-deletes for audit.",
    "description": "Deletes a given notification identified by its unique ID. Standard flow is a soft delete (marks deleted but retains in audit logs). Only recipient or system admin can delete a notification. Attempting to delete a non-existent or someone else's notification results in error. Intended for notification inbox management or compliance. Returns confirmation or error status. Ensures full audit-compliance by retaining soft deleted records for retention/quota enforcement.",
    "summary": "Delete notification (discussionboard_notification table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the notification to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of notification deletion.",
      "typeName": "INotification"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/notifications/{id}",
    "method": "delete"
  },
  {
    "specification": "List notification setting entries from the 'discussionboard_notification_setting' table with pagination, filtering, and searching. Used to retrieve individual user preferences for notification delivery (types, channels, enablement).",
    "description": "Returns a paginated list of notification settings (preferences) for a user or admin. Filters may include user_id, notification type, or channel. Intended for user profile settings panels or admin management consoles. The response shows all notification type and channel preferences and their current enablement. This lets users or admins review, search, or audit notification preferences. Only the owner user or privileged admin should access this list. Possible errors: unauthorized or incomplete filtering data.",
    "summary": "List notification settings (discussionboard_notification_setting table).",
    "parameters": [],
    "requestBody": {
      "description": "Pagination, search, and filtering info for notification settings listing.",
      "typeName": "INotificationSetting.IRequest"
    },
    "responseBody": {
      "description": "Paginated notification setting preferences for users.",
      "typeName": "IPageINotificationSetting"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/notificationSettings",
    "method": "patch"
  },
  {
    "specification": "Retrieve a single notification setting record by its unique ID from the 'discussionboard_notification_setting' table. Returns user preference for a particular notification type and channel.",
    "description": "Returns details of a specific notification setting for a user, identified by its unique ID. The returned record shows which notification type, channel, and enablement status applies. Typically used for user settings detail view or admin editing. Field-level access restricted to setting owner or privileged admin. Output includes atomic, normalized data per setting instance. Permission errors are possible on unauthorized access or not found.",
    "summary": "Get notification setting detail (discussionboard_notification_setting table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of notification setting to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detail of a single notification setting entry.",
      "typeName": "INotificationSetting"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/notificationSettings/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new notification setting in the 'discussionboard_notification_setting' table. Allows users or admins to add notification delivery preferences (per type, channel, enabled). This records granular, atomic user opt-in/out choices on various notification types/channels.",
    "description": "This endpoint creates a new notification setting preference for a user. Input includes user ID, notification type, delivery channel (web, email, etc.), and enablement flag. Validates user existence and that combination does not already exist. Only the profile owner or privileged admin may create new preference rows. Output confirms creation with all fields of the new setting. Errors arise from duplicates, invalid input, or unauthorized origin. Ensures normalization by permitting only unique (user, notification_type, channel) tuples.",
    "summary": "Create notification setting (discussionboard_notification_setting table).",
    "parameters": [],
    "requestBody": {
      "description": "Data for notification setting creation: user, type, channel, enablement.",
      "typeName": "INotificationSetting.ICreate"
    },
    "responseBody": {
      "description": "Created notification setting record.",
      "typeName": "INotificationSetting"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/notificationSettings",
    "method": "post"
  },
  {
    "specification": "Update an existing notification setting record by its unique ID in the 'discussionboard_notification_setting' table. Used for changing notification preferences (e.g., toggling enable/disable) for specific type/channel combination.",
    "description": "This endpoint updates a notification setting record, identified by its unique ID in the path. It allows the owner or admin to change delivery channel, notification type, and enable/disable the preference. Checks ensure uniqueness constraint is not violated. Commonly accessed by users in settings panels or by admin for compliance. All updates are atomic and logged for audit. Errors include not found, uniqueness violation, or insufficient permissions.",
    "summary": "Update notification setting (discussionboard_notification_setting table).",
    "parameters": [
      {
        "name": "id",
        "description": "ID of the notification setting to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Data for notification setting update: new values for type/channel/enablement.",
      "typeName": "INotificationSetting.IUpdate"
    },
    "responseBody": {
      "description": "Updated notification setting record.",
      "typeName": "INotificationSetting"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/notificationSettings/{id}",
    "method": "put"
  },
  {
    "specification": "Implements deletion of a notification setting record by its unique identifier. This operation corresponds to the 'discussionboard_notification_setting' table, enabling users to remove a specific notification preference, such as turning off a type of alert for web or email. The 'id' parameter uniquely identifies the setting to delete. Used by users to control their notification channels and types, ensuring compliance with user engagement and privacy requirements.",
    "description": "This endpoint deletes a specific notification setting identified by its unique ID. The operation is essential for allowing users to manage their notification preferences, fulfilling the requirements under the notification and user privacy policy. By enabling deletion, the system ensures users retain control over which notifications they receive and through which channels. The endpoint strictly accepts only the notification setting's ID as a path parameter, validates its existence, and performs a soft or hard delete as per business logic. Error handling includes responses for non-existent or already-deleted records, and appropriate logging is performed for compliance tracking. This endpoint is closely related to notification preference retrieval and creation operations, providing a comprehensive notification management suite.",
    "summary": "Delete a notification setting by ID (discussionboard_notification_setting table).",
    "parameters": [
      {
        "name": "id",
        "description": "The identifier of the notification setting to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": null,
    "path": "/discussionboard/notificationSettings/{id}",
    "method": "delete"
  },
  {
    "specification": "Implements a search/list operation for retrieving audit logs with support for filtering, sorting, and pagination. This operation addresses the 'discussionboard_audit_log' entity and complies with requirements on audit, traceability, and systemic event analysis. The request body defines search filters, possible date ranges, actor IDs, action types, and customizable sort orders. This allows authorized users or platform administrators to query critical action records for compliance, security monitoring, or analytics.",
    "description": "This endpoint provides a flexible, filterable retrieval of audit log entries from the 'discussionboard_audit_log' table. It allows querying based on various properties such as who performed the action (actor_id), type of action, affected entity, time range, and more. Pagination and sorting parameters ensure scalable and performant access to potentially large log datasets. The audit log system ensures all critical platform actions (like deletions, account changes, moderation events) are traceable for compliance, forensics, or business analytics. Only users with sufficient privileges (such as admins or security/audit roles) can call this endpoint. Errors are handled gracefully, including parameter validation and permission checks. This endpoint should be used in conjunction with audit log detail, creation, and update operations for full lifecycle management of platform auditability.",
    "summary": "Query a paginated/searchable list of audit logs (discussionboard_audit_log table).",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, sort, and pagination criteria for audit log retrieval.",
      "typeName": "IAuditLog.IRequest"
    },
    "responseBody": {
      "description": "Paginated result set of filtered audit log records.",
      "typeName": "IPageAuditLog"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/auditLogs",
    "method": "patch"
  },
  {
    "specification": "Retrieves a single audit log record by its unique identifier from the 'discussionboard_audit_log' table. Fulfills traceability and compliance requirements, allowing authorized users (usually admins or moderators) to examine the details of a specific action, including the actor, target entity, action type, metadata, and timestamps.",
    "description": "This endpoint provides detailed information for a specific audit log entry identified by UUID. The response includes all atomic properties of the log, such as the actor (user who performed the action), action type, affected entity, and any metadata recorded at the time. This operation is mission-critical for compliance reviews, forensics, and detailed platform analytics. Permissions are enforced such that only authorized users may view audit logs, and non-existent or inaccessible IDs return errors. The endpoint forms part of the audit log management suite, complementary to the listing, creation, and update endpoints.",
    "summary": "Get detailed information for a specific audit log entry (discussionboard_audit_log table).",
    "parameters": [
      {
        "name": "id",
        "description": "Audit log entry identifier (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed audit log entry data.",
      "typeName": "IAuditLog"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/auditLogs/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new audit log record in the 'discussionboard_audit_log' entity. Used to register critical platform events, user actions, content changes, or moderation events. Fulfills requirements for traceability, compliance, and system monitoring. The request body defines all required properties for a valid log entry. Only accessible to system components or authorized personnel.",
    "description": "This endpoint allows the insertion of a new audit log entry, recording actions such as user account changes, moderation events, or system configuration modifications. The operation ensures required attributes (actor_id, action, target_type, etc.) are validated and adheres to audit policy. It may only be called by authorized platform components, administrators, or automation scripts, to prevent abuse or tampering. The endpoint closely interacts with audit log retrieval (detail/list) and update endpoints for a full audit management lifecycle.",
    "summary": "Create a new audit log entry (discussionboard_audit_log table).",
    "parameters": [],
    "requestBody": {
      "description": "Audit log entry creation details.",
      "typeName": "IAuditLog.ICreate"
    },
    "responseBody": {
      "description": "Detailed result for the created audit log entry.",
      "typeName": "IAuditLog"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/auditLogs",
    "method": "post"
  },
  {
    "specification": "Updates an existing audit log record by its unique identifier. This operation addresses updates to audit information in the 'discussionboard_audit_log' table, such as correcting metadata or updating the status. It supports compliance workflows and correction scenarios. Edit history is governed by audit policies, and only authorized administrators may perform updates.",
    "description": "This endpoint enables updating the properties of a specific audit log entry, identified by UUID. Modifiable fields may include metadata or state (but not typically historical data like actor or timestamps). Validation checks ensure only allowed edits are performed, and all changes are themselves audited for compliance. Only users with suitable roles (typically admins or security auditors) can invoke this endpoint. Error handling includes checks for existence, permissions, and validation failure. Associated with audit log listing, retrieval, and delete endpoints to manage the full resource lifecycle.",
    "summary": "Update a specific audit log entry by ID (discussionboard_audit_log table).",
    "parameters": [
      {
        "name": "id",
        "description": "Audit log entry identifier to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Patchable properties for audit log update.",
      "typeName": "IAuditLog.IUpdate"
    },
    "responseBody": {
      "description": "Updated audit log entry record.",
      "typeName": "IAuditLog"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/auditLogs/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes an audit log entry by its unique identifier, soft-deleting where required for retention. This operation is mapped to the 'discussionboard_audit_log' entity and supports security and compliance flows that require log hiding. Deletion respects audit policies for retention, recoverability, or physical purging as defined by business policy.",
    "description": "This endpoint deletes (soft-deletes) a specific audit log entry, identified by UUID. The operation is restricted to users with appropriate administrative or security roles, ensuring logs cannot be erased without traceability. A soft-deletion strategy is recommended for compliance, marking entries with a deleted timestamp rather than physical removal, unless otherwise required. Error handling includes checks for existence, permission, and log retention policies. Integrated with the audit log lifecycle endpoints (create, update, list, detail) for comprehensive operations.",
    "summary": "Delete an audit log entry by ID (discussionboard_audit_log table).",
    "parameters": [
      {
        "name": "id",
        "description": "Audit log entry identifier to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/auditLogs/{id}",
    "method": "delete"
  },
  {
    "specification": "Performs a paginated and filterable retrieval of system event log records from the 'discussionboard_system_event' table. Supports searching by event type, status, timestamp range, and details. Designed for platform/system administrators to monitor infrastructure-, background-, or automated system-level events, diagnoses, or analytics.",
    "description": "This endpoint allows authorized users to query the 'discussionboard_system_event' table with filtering options for event type, event status, details, timestamps, and pagination/sorting for analytics or operational monitoring. The operation is critical for diagnosing system health, tracking routine/background events, and supporting audits of non-user-initiated events (e.g., backups, job runs, error events). Authorization is restricted to platform/system admins. Related endpoints include create, detail, update, and delete for full system event management. Error responses address missing permissions and invalid parameters.",
    "summary": "Query a paginated/searchable list of system event logs (discussionboard_system_event table).",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, sort, and pagination criteria for system event retrieval.",
      "typeName": "ISystemEvent.IRequest"
    },
    "responseBody": {
      "description": "Paginated result set of filtered system event log records.",
      "typeName": "IPageSystemEvent"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/systemEvents",
    "method": "patch"
  },
  {
    "specification": "Retrieves a single system event record by its unique identifier from the 'discussionboard_system_event' table. Used by system administrators or auditors to review details of a specific automated, background, or infrastructure event.",
    "description": "This endpoint fetches all recorded properties of a specific system event, located by its unique identifier. Properties include the event type, status, context details, timestamps, and any relevant metadata. It is typically used for analyzing incidents, error logs, or tracking the completion of scheduled jobs. Authorization is required, restricted to admins. Integrated with event listing, creation, update, and delete endpoints for a comprehensive event lifecycle workflow. Error signatures include access restriction and record-not-found handling.",
    "summary": "Get detailed information for a system event log entry (discussionboard_system_event table).",
    "parameters": [
      {
        "name": "id",
        "description": "System event entry identifier (UUID).",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Detailed system event log entry data.",
      "typeName": "ISystemEvent"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/systemEvents/{id}",
    "method": "get"
  },
  {
    "specification": "Creates a new system event log entry in the 'discussionboard_system_event' entity. Used to register background job completions, system errors, maintenance events, and other infrastructure events necessary for platform health monitoring. Only accessible to authorized automation or administration.",
    "description": "This endpoint enables creating a new system event log by accepting event details such as event_type, status, detail JSON, and created_at timestamp. Its purpose is to provide a record of key automated or operational events (distinct from user audit logs). Commonly called by backend processes, platform admins, or system monitoring agents. All writes are authenticated and validated per requirements. Part of the suite of system event management endpoints alongside update, detail, delete, and listing APIs.",
    "summary": "Create a new system event log entry (discussionboard_system_event table).",
    "parameters": [],
    "requestBody": {
      "description": "System event entry creation details.",
      "typeName": "ISystemEvent.ICreate"
    },
    "responseBody": {
      "description": "Detailed result for the created system event log entry.",
      "typeName": "ISystemEvent"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/systemEvents",
    "method": "post"
  },
  {
    "specification": "Updates an existing system event record by its unique identifier. Corresponds to the 'discussionboard_system_event' table, supporting corrections or metadata updates post-creation. Only editable fields are permitted. Only accessible by system administrators or platform operators.",
    "description": "This endpoint provides the ability to update modifiable properties of a system event log entry. All changes are restricted, validated, and logged for audit. Typical usage includes correcting metadata, updating event status, or adding error resolution details. Non-editable fields, such as identifiers and creation timestamp, are protected. Authorization is enforced for platform and system admins. Related to event listing, detail, create, and delete for full event log lifecycle. Errors are returned for unauthorized access or field validation failures.",
    "summary": "Update a specific system event log entry by ID (discussionboard_system_event table).",
    "parameters": [
      {
        "name": "id",
        "description": "System event log identifier to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Patchable properties for system event log update.",
      "typeName": "ISystemEvent.IUpdate"
    },
    "responseBody": {
      "description": "Updated system event log record.",
      "typeName": "ISystemEvent"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/systemEvents/{id}",
    "method": "put"
  },
  {
    "specification": "Deletes (soft-deletes or purges) a system event record identified by its UUID from the 'discussionboard_system_event' entity. Used for retention management or cleanup. Follows system event lifecycle policies, including compliance and traceability. Only authorized admins may perform deletions.",
    "description": "This endpoint deletes (usually soft-deletes) a specific system event log, by its unique identifier. It is designed for proper retention policy management and system event log hygiene. Access is restricted to platform/system admins. The action is recorded for auditing and visibility. Errors handled include record not found, unauthorized attempts, and policy violations. This is part of the standard CRUD lifecycle for system event logs, in conjunction with creation, update, detail, and listing endpoints.",
    "summary": "Delete a system event log entry by ID (discussionboard_system_event table).",
    "parameters": [
      {
        "name": "id",
        "description": "System event entry identifier to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": null,
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/systemEvents/{id}",
    "method": "delete"
  },
  {
    "specification": "Searches and retrieves a paginated, filterable list of settings from the 'discussionboard_setting' entity, with support for full-text query, filtering, and organizing platform or board-scoped settings. Supports advanced querying, audit, and admin configuration management workflows. Used by platform admins and board managers to audit and locate relevant configuration options efficiently.",
    "description": "This endpoint searches and lists configuration settings from the 'discussionboard_setting' table. Supports filters including board ID, key, and enabled/disabled status; advanced search (e.g., with text search over keys/descriptions); and pagination for performance. Enables administrators to audit or review configuration status, compare per-board or global settings, and feed into UI management/control panels. Only authorized personnel can retrieve settings data for management or compliance. Related to configuration retrieve, update, and create endpoints.",
    "summary": "Query a paginated/searchable list of all discussion board settings (discussionboard_setting table).",
    "parameters": [],
    "requestBody": {
      "description": "Search, filter, sort, and pagination criteria for board/setting retrieval.",
      "typeName": "ISetting.IRequest"
    },
    "responseBody": {
      "description": "Paginated result set of filtered configuration settings.",
      "typeName": "IPageSetting"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/settings",
    "method": "patch"
  },
  {
    "specification": "Retrieve a specific discussion board setting entry by its ID. This operation fetches the configuration details that are associated with a platform-wide or board-scoped setting. The Prisma DB table referenced is discussionboard_setting. The API operation is intended for use cases where clients need to display, review, or compare the configuration of a specific setting, such as text size limits, feature toggles, moderation rules, or other key/value configs.",
    "description": "This API retrieves the full configuration for an individual setting identified by its unique ID from the discussionboard_setting table. Settings can exist globally or be associated with a particular board if the board_id column is set. This endpoint enables admins or the system to read settings for display in administrative UIs, configuration audits, or troubleshooting sessions. The 'id' field is a UUID primary key, ensuring every setting is uniquely retrievable.\n\nThis endpoint does not expose or modify mutable settings data, ensuring read-only access aligned with the principle of least privilege. Request authorization may restrict this endpoint to admin or privileged user roles. When a setting is not found, appropriate error handling and status codes must be returned. Soft-deleted settings (marked by deleted_at) may be excluded depending on system policies.",
    "summary": "Get a discussionboard_setting by ID (discussionboard_setting table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the setting entry.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Full configuration record for a discussionboard_setting as stored in the database.",
      "typeName": "IDiscussionboardSetting"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/settings/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new configuration setting entry for a discussion board, either globally or for a specific board. This operation inserts a new row into the discussionboard_setting table, which represents a key/value pair controlling system or board-level behaviors. Used when admins wish to introduce new configuration options.",
    "description": "This API operation handles the creation of a new setting within the discussionboard_setting table. The request body must conform to the IDiscussionboardSetting.ICreate schema, supplying all fields necessary to define a configuration entry (e.g., board association, key, value, description). Creation updates the audit trails for administrative review and change history.\n\nPermissions and validation checks may apply, restricting the operation to admins or system processes. Business logic ensures that (board_id, key) pairs are unique, and soft-deleted settings cannot be duplicated for the same key. The operation may enforce additional business rules such as allowed key/value formats. Upon success, the newly created configuration setting is returned; errors are handled according to system conventions.",
    "summary": "Create a discussionboard_setting (discussionboard_setting table).",
    "parameters": [],
    "requestBody": {
      "description": "Configuration entry to be created for a discussion board.",
      "typeName": "IDiscussionboardSetting.ICreate"
    },
    "responseBody": {
      "description": "Details of the newly created configuration entry.",
      "typeName": "IDiscussionboardSetting"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/settings",
    "method": "post"
  },
  {
    "specification": "Update an existing platform or board-specific setting by its unique ID. This modifies an entry in the discussionboard_setting table, allowing admins to change configuration for features, limits, or rules.",
    "description": "This API allows authorized clients to update a configuration setting in the discussionboard_setting table via its UUID. The request body must match the IDiscussionboardSetting.IUpdate schema, carrying only mutable or patchable fields. This operation is usually reserved for admins to alter board or platform configuration, such as feature toggles, quotas, or descriptions.\n\nOptimistic concurrency, audit logging, and permissions may be enforced based on system configuration. On successful update, the modified setting is returned; on failure, errors are described, such as frozen settings, constraints violation, or forbidden operations.",
    "summary": "Update a discussionboard_setting by ID (discussionboard_setting table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the setting entry to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "New content to update the configuration entry.",
      "typeName": "IDiscussionboardSetting.IUpdate"
    },
    "responseBody": {
      "description": "Updated configuration entry for the setting.",
      "typeName": "IDiscussionboardSetting"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/settings/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a discussion board setting by its unique ID. This removes (typically via soft delete) an entry in the discussionboard_setting table, disabling its effect but preserving audit history and data recoverability in accordance with business requirements.",
    "description": "This API operation performs a soft or hard delete of a configuration setting row in the discussionboard_setting table, identified by its unique id (UUID). The removal disables the configuration's influence over the board or platform, depending on its scope. Soft deletes are implemented by populating the deleted_at column, so admins can recover or audit changes later.\n\nStrict permission checks are recommended, usually only allowing admins to perform deletions. The operation may refuse to delete system-critical or default settings and must handle error cases such as nonexistent IDs.",
    "summary": "Delete a discussionboard_setting by ID (discussionboard_setting table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the setting entry to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation of delete action, often includes the deleted object or a status message.",
      "typeName": "IDiscussionboardSetting"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/settings/{id}",
    "method": "delete"
  },
  {
    "specification": "Search or list tags available on the discussionboard platform. This API implements advanced tag queries, filtering, and pagination for discovering, displaying, or managing tags used for classification and search. Operates on the discussionboard_tag table.",
    "description": "This operation allows clients to perform advanced searches and/or retrieve a (possibly filtered, paginated) list of tag entities from the discussionboard_tag table. Filtering can be based on tag name, enabled/disabled state, or other tag metadata such as description. Pagination, sorting, and fuzzy search are typically supported in the PATCH request body schema (IDiscussionboardTag.IRequest). Responses include a paged container of tag objects, as defined by IPageIDiscussionboardTag.\n\nAdmins and advanced users may use this endpoint for tag management and bulk review. Soft-deleted tags (as indicated by the deleted_at column) may be included or excluded based on system settings. Search operations may enable case-insensitive and partial matches using trigram indexes. Proper authorization should protect this endpoint, with permissions granularity enforced by role.",
    "summary": "Search/list discussionboard_tag entities (discussionboard_tag table).",
    "parameters": [],
    "requestBody": {
      "description": "Advanced query for searching, filtering, and paginating tags.",
      "typeName": "IDiscussionboardTag.IRequest"
    },
    "responseBody": {
      "description": "Paginated, filtered list of tag entities matching search criteria.",
      "typeName": "IPageIDiscussionboardTag"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/tags",
    "method": "patch"
  },
  {
    "specification": "Get the details for a specific tag on the platform using its unique ID. This retrieves metadata and usage information for the specified tag entity from the discussionboard_tag table.",
    "description": "This API fetches a specific tag's metadata and configuration details from the discussionboard_tag table using its ID. Typical use cases include displaying tag details, editing interfaces, or checking tag status for assignment. The endpoint returns all non-sensitive properties, such as tag name, color, description, and enabled state.\n\nIf the tag entry is missing or soft-deleted, an appropriate error is returned, consistent with platform error handling policy. This is a read-only operation.",
    "summary": "Get a discussionboard_tag by ID (discussionboard_tag table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the tag entity.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Metadata and configuration for a single tag entry.",
      "typeName": "IDiscussionboardTag"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/tags/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new tag entity to be used for thread/post/topic classification. This adds a unique, optionally colored tag to the tag system for user and admin usage. Affects discussionboard_tag table.",
    "description": "This API operation allows the creation of a new tag record in the discussionboard_tag table. Only unique tag names are permitted, and tag color and description are optional properties. Implementers must ensure business rules are enforced, such as case-insensitive uniqueness on tag names and allowed color formats. The API payload must conform to the IDiscussionboardTag.ICreate schema.\n\nUpon creation, all properties (including enabled/disabled state and auto-generated timestamps) are reflected in the response. The operation is typically restricted to admins and power-users via authorization.",
    "summary": "Create a discussionboard_tag (discussionboard_tag table).",
    "parameters": [],
    "requestBody": {
      "description": "Information for tag entity creation.",
      "typeName": "IDiscussionboardTag.ICreate"
    },
    "responseBody": {
      "description": "Details of created tag entity.",
      "typeName": "IDiscussionboardTag"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/tags",
    "method": "post"
  },
  {
    "specification": "Update a tag's details in the tag system by unique tag ID. This modifies an entry in the discussionboard_tag table to change its properties such as name, color, description, or enabled status.",
    "description": "This API is used for updating the properties of an existing tag in the discussionboard_tag table. The payload must follow the IDiscussionboardTag.IUpdate schema, only permitting mutable fields (e.g., name, color, enabled state). Tag name uniqueness (case-insensitive) is enforced, and updates may be refused if such constraints are violated.\n\nAuthorization is required, usually restricted to admin or tag-management roles. Error handling includes detection for missing or soft-deleted tags, immutable system tags, or invalid input. Returns the updated tag entity on success.",
    "summary": "Update a discussionboard_tag by ID (discussionboard_tag table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the tag to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update for the tag entity.",
      "typeName": "IDiscussionboardTag.IUpdate"
    },
    "responseBody": {
      "description": "The updated tag entity.",
      "typeName": "IDiscussionboardTag"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/tags/{id}",
    "method": "put"
  },
  {
    "specification": "Delete a tag from the discussion board platform by its unique ID. This implements the removal (usually by soft delete) of a tag in the discussionboard_tag table.",
    "description": "This operation allows authorized users (normally admins) to delete a tag from the discussionboard_tag table. Deletion is typically implemented as a soft delete via the deleted_at timestamp for recovery and audit. Business logic prevents deleting in-use or system-critical tags. The response includes the tag as it existed at time of deletion or a status confirmation.\n\nAuthorization checks are enforced as appropriate for administrative actions. Requests for non-existent or already deleted tags return an error as per platform policy.",
    "summary": "Delete a discussionboard_tag by ID (discussionboard_tag table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the tag entity to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Confirmation or metadata for the deleted tag.",
      "typeName": "IDiscussionboardTag"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/tags/{id}",
    "method": "delete"
  },
  {
    "specification": "Perform advanced search and listing for search index entries on the discussionboard platform. Used to support search functionality, index health checks, and batch management. Relates to the discussionboard_search_index table.",
    "description": "This patch endpoint provides complex querying and batch listing capabilities for the discussionboard_search_index table. The request body schema (IDiscussionboardSearchIndex.IRequest) supports filtering by source_type, source_id, indexed_text, and additional pagination/sorting options. Typical consumers include search administration tools, analytics dashboards, and index management utilities.\n\nThis operation is read-only, supporting audit-compliance and analytics. Handles cases where no index entries are available, large result sets, and advanced filtering. Pagination controls, error reporting, and access checks may apply based on sensitivity of indexed content.",
    "summary": "Search/list discussionboard_search_index entries (discussionboard_search_index table).",
    "parameters": [],
    "requestBody": {
      "description": "Advanced query information for search indices.",
      "typeName": "IDiscussionboardSearchIndex.IRequest"
    },
    "responseBody": {
      "description": "Paginated, filtered search index results.",
      "typeName": "IPageIDiscussionboardSearchIndex"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/searchIndices",
    "method": "patch"
  },
  {
    "specification": "Get a specific search index entry by its unique ID. This displays or manages metadata and content for a searchable post, thread, comment, or tag. Operates on discussionboard_search_index.",
    "description": "This get operation retrieves a discussionboard_search_index entry by ID from the database for display, diagnostics, or troubleshooting. Appropriate for search index management, analytics, or review workflows. The response returns all non-sensitive properties for the indexed entity, including indexed_text, source_type, and timestamps.\n\nAbsent or soft-deleted index entries are handled with error responses in compliance with platform conventions. This is a read-only operation for viewing individual search index records.",
    "summary": "Get a discussionboard_search_index by ID (discussionboard_search_index table).",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier for the search index entry.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "Metadata and content for the index entry.",
      "typeName": "IDiscussionboardSearchIndex"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/searchIndices/{id}",
    "method": "get"
  },
  {
    "specification": "Create a new entry in the discussion board search index. Inserts a new record into the discussionboard_search_index table, typically as part of a background process or administrative suite.",
    "description": "This API creates a new index entry for the discussionboard_search_index table, representing full-text/cached searchable content for posts, threads, comments, or tags. Used for powering the search engine and search tools. Payload must adhere to IDiscussionboardSearchIndex.ICreate, including type, source_id, and indexed text.\n\nInsertions are usually automated or highly restricted. Validates required fields, enforces allowed source types, and may require authentication as an admin or system agent. The newly created index entry, with timestamps and IDs, is returned upon success, errors handled per business policy.",
    "summary": "Create a discussionboard_search_index entry (discussionboard_search_index table).",
    "parameters": [],
    "requestBody": {
      "description": "Details for the new search index entry.",
      "typeName": "IDiscussionboardSearchIndex.ICreate"
    },
    "responseBody": {
      "description": "Created search index entry details.",
      "typeName": "IDiscussionboardSearchIndex"
    },
    "authorizationRoles": null,
    "path": "/discussionboard/searchIndices",
    "method": "post"
  },
  {
    "specification": "Implements update operation for the search index record in the discussionboard_search_index table. This endpoint allows an authorized admin to update a search index entry by its unique identifier. It is used for recalculating or repopulating the indexed text, updating the metadata, or correcting any field after identifying stale or incorrect search records (such as those resulting from content edits or restores). Updating search indices is critical for keeping full-text and keyword search results in sync with the actual discussionboard entities (posts, threads, comments, tags). Strict validation must ensure only permitted updates – the ID in the path matches an actual search index entry, and only certain fields may be updated. This operation is audited for analytics and traceability. This endpoint is typically used together with the creation endpoint and may require pre-validation or locking to avoid search result inconsistencies.",
    "description": "This API operation updates an existing search index record in the discussionboard_search_index table by its unique ID. It is typically used by admin users, the background indexer, or trusted system processes to correct, repopulate, or refresh search index entries when their source entity is changed (such as after content editing, tag updates, or thread reclassification). \n\nSecurity: Only administrators are permitted to perform this update to prevent accidental corruption of the search index. The update is recorded in the audit logs for compliance and error-tracing.\n\nSchema relationship: The discussionboard_search_index table is normalized to reference the source entity type (post, comment, thread, tag) and ID, along with the indexed textual content. Updating this record recalculates its indexed_text or, if required, repairs a broken reference.\n\nValidation: The operation must ensure the validity of new indexed_text and retain referential integrity to the referenced entity. Application logic must guard against race conditions, especially during concurrent search updates. \n\nRelated endpoints: The creation (POST) and deletion (DELETE) endpoints for search indices typically accompany this update. Error handling must clarify if the specified ID does not exist or if attempted fields cannot be changed (immutable fields should not be altered).\n\nExpected behavior: Success returns the updated search index entity; errors include not found, forbidden, or validation failures. On update, the search engine may need to be notified to refresh indexes.",
    "summary": "Update a specific search index record in the discussionboard_search_index table.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the search index record to update.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": {
      "description": "Fields to update for the search index entry, such as indexed_text, source_type, and source_id.",
      "typeName": "IDiscussionboardSearchIndex.IUpdate"
    },
    "responseBody": {
      "description": "The updated search index record after applying modifications.",
      "typeName": "IDiscussionboardSearchIndex"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/searchIndices/{id}",
    "method": "put"
  },
  {
    "specification": "Implements deletion operation for a search index record in the discussionboard_search_index table. This endpoint allows an authorized admin to remove a search index entry by its unique identifier. Used when the source entity is deleted, purged, or needs to be excluded from search results, ensuring that orphaned or outdated index entries do not persist and degrade search accuracy. The deletion is soft or hard depending on the internal rules and audit/compliance needs. Critical for search result integrity, performance, and audit. Deleting a search index may trigger downstream effects on search cache/materialized views. This API must prevent unintended cascade deletions or internal corruption – it will not touch the original source entity. Operation is fully auditable and must be restricted to privileged users or system tasks. Often paired with content deletion endpoints or routine maintenance jobs.",
    "description": "Deletes a search index record by its unique ID from the discussionboard_search_index table. This is used by admins or system maintenance processes to remove search entries that are no longer valid (for example, after a post, comment, or thread has been deleted, or when an index entry is discovered to be stale or erroneous).\n\nSecurity: Only those with admin-level authorization are permitted to invoke this endpoint, as it can affect user-facing search experiences and overall data integrity. The operation is logged in audit systems for traceability.\n\nRelationship to schema: The search index record being deleted contains references to the source entity (type and ID), as well as its indexed content. Deletion does not cascade to the source entity – only the index entry is removed.\n\nValidation: The API checks if the specified search index ID exists. Attempting to delete a non-existent index should clearly indicate the failure reason. Access is strictly checked; only admins may invoke this.\n\nRelated endpoints: Used together with the creation (POST) and update (PUT) endpoints for search indices. Upon deletion, search caches may need invalidation, and analytics systems updated accordingly.\n\nExpected outcome: On success, confirm removal (or soft deletion, per policy). Errors include \"not found\", \"forbidden\", or internal system errors. The result is usually a status payload or the deleted record's metadata for audit.",
    "summary": "Delete a specific search index record in the discussionboard_search_index table.",
    "parameters": [
      {
        "name": "id",
        "description": "Unique identifier of the search index record to delete.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    ],
    "requestBody": null,
    "responseBody": {
      "description": "A confirmation payload or metadata about the deleted search index record.",
      "typeName": "IDiscussionboardSearchIndex.IDeleteResult"
    },
    "authorizationRoles": [
      "admin"
    ],
    "path": "/discussionboard/searchIndices/{id}",
    "method": "delete"
  }
]