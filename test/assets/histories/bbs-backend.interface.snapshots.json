[{"event":{"type":"interfaceStart","created_at":"2025-07-24T19:11:32.584Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceEndpoints","endpoints":[{"path":"/discussionboard/channels","method":"patch"},{"path":"/discussionboard/channels/{id}","method":"get"},{"path":"/discussionboard/channels","method":"post"},{"path":"/discussionboard/channels/{id}","method":"put"},{"path":"/discussionboard/channels/{id}","method":"delete"},{"path":"/discussionboard/sections","method":"patch"},{"path":"/discussionboard/sections/{id}","method":"get"},{"path":"/discussionboard/sections","method":"post"},{"path":"/discussionboard/sections/{id}","method":"put"},{"path":"/discussionboard/sections/{id}","method":"delete"},{"path":"/discussionboard/configurations","method":"patch"},{"path":"/discussionboard/configurations/{id}","method":"get"},{"path":"/discussionboard/configurations","method":"post"},{"path":"/discussionboard/configurations/{id}","method":"put"},{"path":"/discussionboard/configurations/{id}","method":"delete"},{"path":"/discussionboard/notifications","method":"patch"},{"path":"/discussionboard/notifications/{id}","method":"get"},{"path":"/discussionboard/notifications","method":"post"},{"path":"/discussionboard/notifications/{id}","method":"put"},{"path":"/discussionboard/notifications/{id}","method":"delete"},{"path":"/discussionboard/settings","method":"patch"},{"path":"/discussionboard/settings/{id}","method":"get"},{"path":"/discussionboard/settings","method":"post"},{"path":"/discussionboard/settings/{id}","method":"put"},{"path":"/discussionboard/settings/{id}","method":"delete"},{"path":"/discussionboard/auditLogs","method":"patch"},{"path":"/discussionboard/auditLogs/{id}","method":"get"},{"path":"/discussionboard/auditLogs","method":"post"},{"path":"/discussionboard/auditLogs/{id}","method":"put"},{"path":"/discussionboard/auditLogs/{id}","method":"delete"},{"path":"/discussionboard/members","method":"patch"},{"path":"/discussionboard/members/{id}","method":"get"},{"path":"/discussionboard/members","method":"post"},{"path":"/discussionboard/members/{id}","method":"put"},{"path":"/discussionboard/members/{id}","method":"delete"},{"path":"/discussionboard/moderators","method":"patch"},{"path":"/discussionboard/moderators/{id}","method":"get"},{"path":"/discussionboard/moderators","method":"post"},{"path":"/discussionboard/moderators/{id}","method":"put"},{"path":"/discussionboard/moderators/{id}","method":"delete"},{"path":"/discussionboard/admins","method":"patch"},{"path":"/discussionboard/admins/{id}","method":"get"},{"path":"/discussionboard/admins","method":"post"},{"path":"/discussionboard/admins/{id}","method":"put"},{"path":"/discussionboard/admins/{id}","method":"delete"},{"path":"/discussionboard/memberProfiles","method":"patch"},{"path":"/discussionboard/memberProfiles/{id}","method":"get"},{"path":"/discussionboard/memberProfiles","method":"post"},{"path":"/discussionboard/memberProfiles/{id}","method":"put"},{"path":"/discussionboard/memberProfiles/{id}","method":"delete"},{"path":"/discussionboard/memberPreferences","method":"patch"},{"path":"/discussionboard/memberPreferences/{id}","method":"get"},{"path":"/discussionboard/memberPreferences","method":"post"},{"path":"/discussionboard/memberPreferences/{id}","method":"put"},{"path":"/discussionboard/memberPreferences/{id}","method":"delete"},{"path":"/discussionboard/boards","method":"patch"},{"path":"/discussionboard/boards/{id}","method":"get"},{"path":"/discussionboard/boards","method":"post"},{"path":"/discussionboard/boards/{id}","method":"put"},{"path":"/discussionboard/boards/{id}","method":"delete"},{"path":"/discussionboard/boardCategories","method":"patch"},{"path":"/discussionboard/boardCategories/{id}","method":"get"},{"path":"/discussionboard/boardCategories","method":"post"},{"path":"/discussionboard/boardCategories/{id}","method":"put"},{"path":"/discussionboard/boardCategories/{id}","method":"delete"},{"path":"/discussionboard/boardSettings","method":"patch"},{"path":"/discussionboard/boardSettings/{id}","method":"get"},{"path":"/discussionboard/boardSettings","method":"post"},{"path":"/discussionboard/boardSettings/{id}","method":"put"},{"path":"/discussionboard/boardSettings/{id}","method":"delete"},{"path":"/discussionboard/boardModerators","method":"patch"},{"path":"/discussionboard/boardModerators/{id}","method":"get"},{"path":"/discussionboard/boardModerators","method":"post"},{"path":"/discussionboard/boardModerators/{id}","method":"put"},{"path":"/discussionboard/boardModerators/{id}","method":"delete"},{"path":"/discussionboard/threads","method":"patch"},{"path":"/discussionboard/threads/{id}","method":"get"},{"path":"/discussionboard/threads","method":"post"},{"path":"/discussionboard/threads/{id}","method":"put"},{"path":"/discussionboard/threads/{id}","method":"delete"},{"path":"/discussionboard/threadSnapshots","method":"patch"},{"path":"/discussionboard/threadSnapshots/{id}","method":"get"},{"path":"/discussionboard/threadSnapshots","method":"post"},{"path":"/discussionboard/threadSnapshots/{id}","method":"put"},{"path":"/discussionboard/threadSnapshots/{id}","method":"delete"},{"path":"/discussionboard/threadTags","method":"patch"},{"path":"/discussionboard/threadTags/{id}","method":"get"},{"path":"/discussionboard/threadTags","method":"post"},{"path":"/discussionboard/threadTags/{id}","method":"put"},{"path":"/discussionboard/threadTags/{id}","method":"delete"},{"path":"/discussionboard/posts","method":"patch"},{"path":"/discussionboard/posts/{id}","method":"get"},{"path":"/discussionboard/posts","method":"post"},{"path":"/discussionboard/posts/{id}","method":"put"},{"path":"/discussionboard/posts/{id}","method":"delete"},{"path":"/discussionboard/postSnapshots","method":"patch"},{"path":"/discussionboard/postSnapshots/{id}","method":"get"},{"path":"/discussionboard/postSnapshots","method":"post"},{"path":"/discussionboard/postSnapshots/{id}","method":"put"},{"path":"/discussionboard/postSnapshots/{id}","method":"delete"},{"path":"/discussionboard/postVotes","method":"patch"},{"path":"/discussionboard/postVotes/{id}","method":"get"},{"path":"/discussionboard/postVotes","method":"post"},{"path":"/discussionboard/postVotes/{id}","method":"put"},{"path":"/discussionboard/postVotes/{id}","method":"delete"},{"path":"/discussionboard/postReports","method":"patch"},{"path":"/discussionboard/postReports/{id}","method":"get"},{"path":"/discussionboard/postReports","method":"post"},{"path":"/discussionboard/postReports/{id}","method":"put"},{"path":"/discussionboard/postReports/{id}","method":"delete"},{"path":"/discussionboard/postReferences","method":"patch"},{"path":"/discussionboard/postReferences/{id}","method":"get"},{"path":"/discussionboard/postReferences","method":"post"},{"path":"/discussionboard/postReferences/{id}","method":"put"},{"path":"/discussionboard/postReferences/{id}","method":"delete"},{"path":"/discussionboard/comments","method":"patch"},{"path":"/discussionboard/comments/{id}","method":"get"},{"path":"/discussionboard/comments","method":"post"},{"path":"/discussionboard/comments/{id}","method":"put"},{"path":"/discussionboard/comments/{id}","method":"delete"},{"path":"/discussionboard/commentSnapshots","method":"patch"},{"path":"/discussionboard/commentSnapshots/{id}","method":"get"},{"path":"/discussionboard/commentSnapshots","method":"post"},{"path":"/discussionboard/commentSnapshots/{id}","method":"put"},{"path":"/discussionboard/commentSnapshots/{id}","method":"delete"},{"path":"/discussionboard/commentVotes","method":"patch"},{"path":"/discussionboard/commentVotes/{id}","method":"get"},{"path":"/discussionboard/commentVotes","method":"post"},{"path":"/discussionboard/commentVotes/{id}","method":"put"},{"path":"/discussionboard/commentVotes/{id}","method":"delete"},{"path":"/discussionboard/commentReports","method":"patch"},{"path":"/discussionboard/commentReports/{id}","method":"get"},{"path":"/discussionboard/commentReports","method":"post"},{"path":"/discussionboard/commentReports/{id}","method":"put"},{"path":"/discussionboard/commentReports/{id}","method":"delete"},{"path":"/discussionboard/reports","method":"patch"},{"path":"/discussionboard/reports/{id}","method":"get"},{"path":"/discussionboard/reports","method":"post"},{"path":"/discussionboard/reports/{id}","method":"put"},{"path":"/discussionboard/reports/{id}","method":"delete"},{"path":"/discussionboard/reportTypes","method":"patch"},{"path":"/discussionboard/reportTypes/{id}","method":"get"},{"path":"/discussionboard/reportTypes","method":"post"},{"path":"/discussionboard/reportTypes/{id}","method":"put"},{"path":"/discussionboard/reportTypes/{id}","method":"delete"},{"path":"/discussionboard/moderationActions","method":"patch"},{"path":"/discussionboard/moderationActions/{id}","method":"get"},{"path":"/discussionboard/moderationActions","method":"post"},{"path":"/discussionboard/moderationActions/{id}","method":"put"},{"path":"/discussionboard/moderationActions/{id}","method":"delete"},{"path":"/discussionboard/bans","method":"patch"},{"path":"/discussionboard/bans/{id}","method":"get"},{"path":"/discussionboard/bans","method":"post"},{"path":"/discussionboard/bans/{id}","method":"put"},{"path":"/discussionboard/bans/{id}","method":"delete"},{"path":"/discussionboard/warnings","method":"patch"},{"path":"/discussionboard/warnings/{id}","method":"get"},{"path":"/discussionboard/warnings","method":"post"},{"path":"/discussionboard/warnings/{id}","method":"put"},{"path":"/discussionboard/warnings/{id}","method":"delete"},{"path":"/discussionboard/engagementMetrics","method":"patch"},{"path":"/discussionboard/engagementMetrics/{id}","method":"get"},{"path":"/discussionboard/engagementMetrics","method":"post"},{"path":"/discussionboard/engagementMetrics/{id}","method":"put"},{"path":"/discussionboard/engagementMetrics/{id}","method":"delete"},{"path":"/discussionboard/activityLogs","method":"patch"},{"path":"/discussionboard/activityLogs/{id}","method":"get"},{"path":"/discussionboard/activityLogs","method":"post"},{"path":"/discussionboard/activityLogs/{id}","method":"put"},{"path":"/discussionboard/activityLogs/{id}","method":"delete"},{"path":"/discussionboard/trendingTopics","method":"patch"},{"path":"/discussionboard/trendingTopics/{id}","method":"get"},{"path":"/discussionboard/trendingTopics","method":"post"},{"path":"/discussionboard/trendingTopics/{id}","method":"put"},{"path":"/discussionboard/trendingTopics/{id}","method":"delete"},{"path":"/discussionboard/notificationTemplates","method":"patch"},{"path":"/discussionboard/notificationTemplates/{id}","method":"get"},{"path":"/discussionboard/notificationTemplates","method":"post"},{"path":"/discussionboard/notificationTemplates/{id}","method":"put"},{"path":"/discussionboard/notificationTemplates/{id}","method":"delete"},{"path":"/discussionboard/notificationPreferences","method":"patch"},{"path":"/discussionboard/notificationPreferences/{id}","method":"get"},{"path":"/discussionboard/notificationPreferences","method":"post"},{"path":"/discussionboard/notificationPreferences/{id}","method":"put"},{"path":"/discussionboard/notificationPreferences/{id}","method":"delete"},{"path":"/discussionboard/privacyPolicies","method":"patch"},{"path":"/discussionboard/privacyPolicies/{id}","method":"get"},{"path":"/discussionboard/privacyPolicies","method":"post"},{"path":"/discussionboard/privacyPolicies/{id}","method":"put"},{"path":"/discussionboard/privacyPolicies/{id}","method":"delete"},{"path":"/discussionboard/dataErasureRequests","method":"patch"},{"path":"/discussionboard/dataErasureRequests/{id}","method":"get"},{"path":"/discussionboard/dataErasureRequests","method":"post"},{"path":"/discussionboard/dataErasureRequests/{id}","method":"put"},{"path":"/discussionboard/dataErasureRequests/{id}","method":"delete"}],"created_at":"2025-07-24T19:11:32.585Z","step":0},"tokenUsage":{"facade":{"aggregate":{"total":42646,"input":{"total":39880,"cached":0},"output":{"total":2766,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":42646,"input":{"total":39880,"cached":0},"output":{"total":2766,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":42646,"input":{"total":39880,"cached":0},"output":{"total":2766,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":42646,"input":{"total":39880,"cached":0},"output":{"total":2766,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new data erasure request for a discussion board member. This operation allows members to initiate a data erasure request, in compliance with privacy and data protection policies. The schema for 'discussionboard_data_erasure_requests' requires that each row contains the following fields: 'id' (UUID, auto-generated); 'discussionboard_member_id' (UUID of the member making the request); 'status' (current status, such as 'pending', 'approved', etc.); 'requested_at' (timestamp of request creation); 'reviewed_at' (nullable, when admin/mod completed review); 'completed_at' (nullable, when erasure or rejection is finalized); 'admin_remark' (nullable, admin's comment). The API call should only allow creation of new requests—the 'id' and all timestamps except 'requested_at' must not be provided by users. The response includes the created erasure request object. Only fields present in the schema are referenced.","description":"This endpoint allows a discussion board member to submit a new data erasure request, as required by platform privacy regulations. Upon POST, the system creates a new 'discussionboard_data_erasure_requests' row with the member's UUID, a status of 'pending', the current timestamp as 'requested_at', and null values for 'reviewed_at', 'completed_at', and 'admin_remark'. No user-submitted fields outside those in the schema are permitted.\n\nReview and completion timestamps, as well as admin remarks, are managed in subsequent workflow steps by platform staff. There is no external UUID or manual id input—ids are auto-generated. Any missing fields in the payload will be rejected.\n\nAccess to this API is restricted to authenticated members. The request will fail if the member already has a pending or open data erasure request, which must be checked in service logic outside this input schema.\n\nOnly schema fields are referenced and all types are respected per the table definition.","summary":"Create a new data erasure request (discussionboard_data_erasure_requests)","parameters":[],"requestBody":{"description":"Information to create a new data erasure request for a member.","typeName":"IDiscussionboardDataErasureRequest.ICreate"},"responseBody":{"description":"Details of the created data erasure request record.","typeName":"IDiscussionboardDataErasureRequest"},"authorizationRoles":["member"],"name":"create","path":"/discussionboard/dataErasureRequests","method":"post"},{"specification":"Update an existing data erasure request for a member. Based on the 'discussionboard_data_erasure_requests' schema, this endpoint permits modification of the request's 'status', 'reviewed_at', 'completed_at', and 'admin_remark' fields. The 'id' path parameter selects the target erasure request. No fields outside those defined in the table may be modified or referenced, and only those fields can be included in the request or response. Update operations are typically reserved for admins or moderators, as they are responsible for advancing the workflow (e.g., approving, denying, or completing the request).","description":"This endpoint allows platform staff (usually admins or moderators) to update details of an existing data erasure request. The updatable fields per the schema are 'status', 'reviewed_at', 'completed_at', and 'admin_remark'. Changes to these fields are used to record processing of the erasure request, including administrative review and workflow outcome.\n\nThe endpoint enforces strict schema compliance—only fields in 'discussionboard_data_erasure_requests' are included; no external or derived properties. The path parameter '{id}' must be a valid UUID referencing an existing record. No operations outside of schema updates are permitted.\n\nAuthorization is limited to users with admin or moderator roles. Attempts to update fields that do not exist in the schema (such as deletion metadata not present in schema) will result in validation error.\n\nBusiness logic includes recording timestamps ('reviewed_at', 'completed_at') at appropriate workflow milestones, updating the status, and optionally noting admin remarks. The response returns the updated data erasure request object.","summary":"Update an existing data erasure request (discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"The UUID identifying the data erasure request to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The details to update for the selected data erasure request.","typeName":"IDiscussionboardDataErasureRequest.IUpdate"},"responseBody":{"description":"The updated data erasure request record.","typeName":"IDiscussionboardDataErasureRequest"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/dataErasureRequests/{id}","method":"put"},{"specification":"Delete a data erasure request record from the system, as modeled in 'discussionboard_data_erasure_requests'. This schema does not include a soft delete field such as 'deleted_at'. Therefore, the DELETE operation is a hard delete: it will permanently remove the data erasure request record from the database, in compliance with platform policies and subject to authorization restrictions.","description":"This endpoint allows an authorized user (admin or moderator) to permanently delete a data erasure request record identified by its UUID path parameter. Because the 'discussionboard_data_erasure_requests' table does not define any soft-delete field (such as 'deleted_at' or 'is_deleted'), this operation performs a hard delete, irreversibly removing the record from the database. All deletions are final and cannot be undone.\n\nStrict compliance is maintained with the Prisma schema: no status or timestamp fields for deletion exist. Only the 'id' is required in the path, and the response body is null or an empty structure depending on system conventions. Only authorized roles may invoke this endpoint.\n\nIf the record does not exist, validation error or 404 error is returned. Deletions are irrevocable and must be carried out with full awareness and in accordance with administrative audit policies.","summary":"Hard delete a data erasure request (discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"The UUID of the data erasure request to permanently remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","path":"/discussionboard/dataErasureRequests/{id}","method":"delete"}],"completed":3,"total":195,"step":0,"created_at":"2025-07-24T19:12:52.662Z"},"tokenUsage":{"facade":{"aggregate":{"total":87254,"input":{"total":83151,"cached":39168},"output":{"total":4103,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":87254,"input":{"total":83151,"cached":39168},"output":{"total":4103,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":87254,"input":{"total":83151,"cached":39168},"output":{"total":4103,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":87254,"input":{"total":83151,"cached":39168},"output":{"total":4103,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Updates a member profile identified by its unique ID. This endpoint allows for changing properties such as display_name, bio, avatar_url, location, and website_url. All updated profile values must correspond exactly to the fields defined in the discussionboard_member_profiles table of the Prisma schema. Fields that are not present in the schema (such as created_by, updated_by, deleted_at, email, etc.) MUST NOT be referenced or updated in this operation. The update replaces the contents of the profile identified by the id path parameter. Soft deletion is not supported here; the operation only updates current values per schema.","description":"This operation enables authorized users to update an existing member profile by its unique ID. Updateable properties include display_name (user's self-chosen name), bio (optional), avatar_url (optional link to profile image), location (optional free text), and website_url (optional website link), as defined in the discussionboard_member_profiles table. All changes are applied atomically as specified in the request body. The endpoint enforces only the update of fields actually present in the schema, with no additional metadata fields. User authorization and update logging should be handled by the application layer. If the profile ID does not exist, a not found error is returned. No soft-delete or restoration features are supported with this endpoint.","summary":"Update a member profile in discussionboard_member_profiles by ID.","parameters":[{"name":"id","description":"Unique profile ID for the member profile to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The properties to update in the member profile, matching discussionboard_member_profiles fields.","typeName":"IMemberProfile.IUpdate"},"responseBody":{"description":"The updated member profile object as defined in the schema.","typeName":"IMemberProfile"},"authorizationRoles":null,"name":"update","path":"/discussionboard/memberProfiles/{id}","method":"put"},{"specification":"Deletes a member profile identified by its unique ID. This endpoint performs a hard delete of the member profile from the discussionboard_member_profiles table, as no soft delete fields (e.g., deleted_at, is_deleted) exist in the Prisma schema for this entity. The profile is permanently removed from the database and cannot be restored using this endpoint. All references to the profile in the database must remain consistent, and only fields present in the actual schema are considered.","description":"This operation deletes a member profile in the discussionboard_member_profiles table, identified by its ID. Because the schema does not implement soft delete fields, the deletion is permanent; all information for the specified profile is removed from storage immediately. The application must ensure that this operation is only available to authorized users (such as the profile owner or an admin). If the ID does not exist, a not found error is returned. This endpoint strictly follows the schema, so no extraneous logic (such as archiving) is performed.","summary":"Hard delete a member profile in discussionboard_member_profiles by ID.","parameters":[{"name":"id","description":"Unique profile ID for the member profile to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/memberProfiles/{id}","method":"delete"},{"specification":"Searches or lists all member preferences with advanced filtering or pagination support. This operation returns a paginated list of member preference records from the discussionboard_member_preferences table, based strictly on the fields present in the schema. Request body specifies optional search, filter, or pagination parameters. No references to fields not present in the schema are permitted. No soft-deleted preferences exist, so only currently present rows are returned.","description":"This endpoint allows querying the collection of member notification and display preferences in the discussionboard_member_preferences table. Supported search and filter criteria must map to properties such as receive_email_notifications, receive_push_notifications, preferred_language, or dark_mode_enabled, all strictly defined in the schema. Pagination, sorting, and filtering must not reference non-existent fields. The response returns only rows that currently exist; no soft-delete or archival states are supported. Only schema-specified properties are returned and may be filtered.","summary":"List/search member preferences from discussionboard_member_preferences with filtering.","parameters":[],"requestBody":{"description":"Search, filter, or pagination criteria for listing member preferences. All properties must map to schema fields.","typeName":"IMemberPreference.IRequest"},"responseBody":{"description":"A paginated result set of member preference records from the database.","typeName":"IPageIMemberPreference"},"authorizationRoles":null,"name":"index","path":"/discussionboard/memberPreferences","method":"patch"},{"specification":"Retrieves the details of a specific member preferences record by its unique ID. Fetches data strictly from the discussionboard_member_preferences table, returning all schema-defined fields and no additional metadata. This endpoint does not reference or support soft deletion, as no such field is present in the schema.","description":"Fetch the current notification, display, and language preferences for the member preference record specified by its unique ID. The returned object includes only the fields receive_email_notifications, receive_push_notifications, preferred_language, and dark_mode_enabled as defined in the schema, along with the member_id reference. No deleted or archived records are handled, as the schema does not support this.","summary":"Get details of a member preference in discussionboard_member_preferences by ID.","parameters":[{"name":"id","description":"Unique ID of the member preferences record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed member preferences record matching the ID.","typeName":"IMemberPreference"},"authorizationRoles":null,"name":"at","path":"/discussionboard/memberPreferences/{id}","method":"get"},{"specification":"Creates a new member preferences record in the discussionboard_member_preferences table, taking the properties from the request body and persisting them directly to fields defined in the schema. All required and optional preference fields must match the schema. No extraneous metadata, soft-deletion markers, or archive features exist. Only permitted schema fields are accepted and saved.","description":"This operation provisions a new member preferences record using all properties specified in the discussionboard_member_preferences table schema. Input values (such as receive_email_notifications, receive_push_notifications, preferred_language, dark_mode_enabled, etc.) must match exactly with those defined in the schema. Upon successful creation, the new record is returned in the response. Fields not present in the schema are rejected. Creation is only possible for currently active members.","summary":"Create new member preferences in discussionboard_member_preferences.","parameters":[],"requestBody":{"description":"Properties for the new member preference, strictly matching schema fields.","typeName":"IMemberPreference.ICreate"},"responseBody":{"description":"The newly created member preferences as stored in the database.","typeName":"IMemberPreference"},"authorizationRoles":null,"name":"create","path":"/discussionboard/memberPreferences","method":"post"},{"specification":"Update a member preferences record identified by its unique ID. The operation allows modification of the fields receive_email_notifications, receive_push_notifications, preferred_language, and dark_mode_enabled, adhering strictly to the schema. No references to metadata or soft-delete fields, as these do not exist for this entity. Updates overwrite current values with those supplied in the request body for schema-defined properties only.","description":"This endpoint updates member preferences in the discussionboard_member_preferences table, matching the specified ID. The request body supplies new values for any of the updateable preferences fields. The service will only update properties defined in the schema, and will reject requests referencing undefined fields or extraneous metadata. Soft deletion and advanced audit fields are not applicable. All changes are applied atomically in one operation.","summary":"Update member preferences in discussionboard_member_preferences by ID.","parameters":[{"name":"id","description":"Unique identifier of the preferences record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update in the record, mapping only to schema fields.","typeName":"IMemberPreference.IUpdate"},"responseBody":{"description":"The updated member preferences as returned by the database.","typeName":"IMemberPreference"},"authorizationRoles":null,"name":"update","path":"/discussionboard/memberPreferences/{id}","method":"put"},{"specification":"Deletes a member preferences record by its ID. The operation removes the preferences record from the discussionboard_member_preferences table, performing a hard delete since no soft-delete or deleted_at field exists in this schema. The operation is permanent and cannot be reversed. Only schema-defined fields and references are affected.","description":"This operation deletes (hard delete) a member preferences record by its ID from the discussionboard_member_preferences table, in compliance with the schema whose table lacks any soft delete or archival markers. All data pertaining to the preferences record is permanently erased. The endpoint should return an error if the ID does not exist or the operation is unauthorized. No recovery, restoration, or archiving is supported via this endpoint.","summary":"Hard delete a member preferences record by ID in discussionboard_member_preferences.","parameters":[{"name":"id","description":"Unique preferences record ID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/memberPreferences/{id}","method":"delete"},{"specification":"Performs advanced search and pagination over discussionboard_boards records, returning a filtered and paginated set of board objects. The operation strictly supports filtering and pagination criteria mapped to fields present in the schema. No references to soft-delete, archive, or undefined properties.","description":"This endpoint lists or searches boards in the discussionboard_boards table. Supported filter and sorting parameters are mapped directly to properties present in the schema such as discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, and updated_at. The endpoint returns a paginated result of board records based strictly on schema properties. There is no support for soft deletion or recovery since the schema lacks such markers. Additional logic regarding moderator assignments or settings must use corresponding endpoints or relationships.","summary":"List/search boards from discussionboard_boards with filtering and pagination.","parameters":[],"requestBody":{"description":"Filter, search, or pagination information mapping to permitted board fields in the schema.","typeName":"IBoard.IRequest"},"responseBody":{"description":"A paginated result set of board records.","typeName":"IPageIBoard"},"authorizationRoles":null,"name":"index","path":"/discussionboard/boards","method":"patch"},{"specification":"Retrieves the detailed information of a board specified by its unique ID from the discussionboard_boards table. It returns all board properties as defined in the schema and is restricted to schema-present fields only. No archival, soft delete, or metadata fields are referenced.","description":"Fetches a single board record using its ID, returning details such as discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, and updated_at, as well as relevant relationships, as defined in the schema. The endpoint will return a not found error if the ID is missing from the database. No deleted/archived or metadata fields are available.","summary":"Get board details from discussionboard_boards by ID.","parameters":[{"name":"id","description":"Unique board ID for the board record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed board record, including all schema-present properties.","typeName":"IBoard"},"authorizationRoles":null,"name":"at","path":"/discussionboard/boards/{id}","method":"get"},{"specification":"Creates a new board record in the discussionboard_boards table using only fields defined in the schema. Supported properties include discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, updated_at, and relationships. No soft-deletion, audit, or extraneous marker fields are permitted.","description":"This endpoint creates a new board entry using the properties defined in the discussionboard_boards schema, such as discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, and updated_at. Only schema-defined fields are accepted in the request body. The operation returns the newly created board record if successful. Application logic must ensure authorization and business rule enforcement; the endpoint itself only handles persistence and retrieval of the schema-present fields.","summary":"Create a new board in discussionboard_boards.","parameters":[],"requestBody":{"description":"Properties for the new board, all strictly mapped to the schema.","typeName":"IBoard.ICreate"},"responseBody":{"description":"The newly created board record as returned by the system.","typeName":"IBoard"},"authorizationRoles":null,"name":"create","path":"/discussionboard/boards","method":"post"},{"specification":"Updates the properties of a specific board record by its ID in the discussionboard_boards table. All updatable fields must correspond directly to those present in the schema. No references to soft-delete, audit fields, or extraneous metadata are made. The update applies atomically to all provided schema fields in the request body.","description":"This endpoint updates a board by its ID, using only properties present in the discussionboard_boards schema such as discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, and updated_at. The update operation overwrites the specified properties with values supplied in the request body. Any reference or attempt to update properties outside the schema is rejected. No soft-delete, archival, or metadata logic is supported with this endpoint.","summary":"Update an existing board by ID in discussionboard_boards.","parameters":[{"name":"id","description":"Unique board ID of the board to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated property values for the board, mapped only to schema fields.","typeName":"IBoard.IUpdate"},"responseBody":{"description":"The updated board record after changes are applied.","typeName":"IBoard"},"authorizationRoles":null,"name":"update","path":"/discussionboard/boards/{id}","method":"put"},{"specification":"Deletes a specific board from the discussionboard_boards table using its unique ID. As the schema does not include soft-deletion fields, the board record is permanently (hard) deleted using this endpoint. Only existing board records identified by ID can be removed.","description":"This operation deletes a board from discussionboard_boards by its unique ID. The deletion is permanent (hard delete) because the table does not contain any fields to support soft deletion (such as deleted_at or is_deleted). The operation affects only the specific board record and no related boards or posts. Requests referencing non-existent or unauthorized records result in an error. No additional logic is supported; archiving must be handled elsewhere if needed.","summary":"Hard delete a board record by ID in discussionboard_boards.","parameters":[{"name":"id","description":"ID of the board record to delete (permanent removal).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/boards/{id}","method":"delete"}],"completed":15,"total":195,"step":0,"created_at":"2025-07-24T19:13:00.789Z"},"tokenUsage":{"facade":{"aggregate":{"total":133907,"input":{"total":126617,"cached":39168},"output":{"total":7290,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":133907,"input":{"total":126617,"cached":39168},"output":{"total":7290,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":133907,"input":{"total":126617,"cached":39168},"output":{"total":7290,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":133907,"input":{"total":126617,"cached":39168},"output":{"total":7290,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements list retrieval for board categories in the discussion board system. This operation retrieves multiple board category entities, supporting search, filter, and pagination. It aligns with the discussionboard_board_categories table in the Prisma schema, referencing fields like id, name, code, description, position, and created_at. No fields outside those listed in the schema will be included. This operation is designed for use in board/category management interfaces and public or admin dashboards. It follows the standard API pattern for listing entities and must support search by name or code using parameters, but the actual search properties used must exist in the schema. Results should be paginated according to request parameters conditional on implementation details.","description":"This operation provides a list of board categories by querying the discussionboard_board_categories table. It retrieves all board categories, allowing filter by fields that exist in the schema: id, name, code, description, position, and created_at. Additional query parameters for filtering/sorting should only regard these fields. Common use cases include fetching board category lists for navigation, category management, or admin dashboards. Since the discussionboard_board_categories table does not have soft delete fields, all retrieved data are those present in the database. When performing search operations, ensure only actual columns from the Prisma schema are referenced. The operation must NOT reference deleted_at, created_by, updated_by or any non-existent field.","summary":"Retrieve a list of board categories from the discussionboard_board_categories table.","parameters":[],"requestBody":{"description":"Filter/search/sort information for retrieving board categories. Only schema actual fields may be referenced.","typeName":"IDiscussionboardBoardCategory.IRequest"},"responseBody":{"description":"Paginated response with board category entities from discussionboard_board_categories, using only actual schema fields.","typeName":"IPageDiscussionboardBoardCategory"},"authorizationRoles":null,"name":"index","path":"/discussionboard/boardCategories","method":"patch"},{"specification":"Retrieves a single board category by its unique identifier. The operation targets the discussionboard_board_categories table, strictly returning only existing fields: id, name, code, description, position, and created_at. It is used for viewing the detail of a specific board category within the discussion board, e.g., when displaying or editing category details in a management interface. No reference should be made to non-existent fields. The identifier used in the path is the primary key of discussionboard_board_categories.","description":"This operation returns complete details for a single board category entity from the discussionboard_board_categories table, given its unique id. All available fields in the response must correspond to actual schema fields: id, name, code, description, position, and created_at. Use this endpoint to fetch category detail for admin/category editing forms or detailed category popups in the user interface. The API operation must NOT refer to any field, such as deleted_at or updated_by, that does not exist in the schema. The id path parameter is required and must match the type used for the table's primary key (UUID string).","summary":"Get details of a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"The unique id (UUID) of the board category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full board category entity from discussionboard_board_categories, only using existing schema fields.","typeName":"IDiscussionboardBoardCategory"},"authorizationRoles":null,"name":"at","path":"/discussionboard/boardCategories/{id}","method":"get"},{"specification":"Creates a new board category entity in the discussionboard_board_categories table. All required and optional input fields must exactly match those defined in the Prisma schema, e.g., name, code, description, position, and created_at. This operation should never reference fields that do not exist, such as deleted_at, created_by, or updated_by. It is designed for use by admins or automated processes managing discussion board categories. The API will only accept valid fields as per the schema and will return the full created entity upon success.","description":"This operation inserts a new record into the discussionboard_board_categories table to create a new board category. Only the schema-defined fields are available for request: name, code, description (optional), position, and any audit fields like created_at that are defined in the schema. This operation is typically used in administrative interfaces for category creation. Do not include any nonexistent fields in the creation payload or response. Upon success, the created category entity with all schema fields is returned. Strict validation ensures only real columns are referenced or manipulated.","summary":"Create a new board category (discussionboard_board_categories).","parameters":[],"requestBody":{"description":"Required and optional data for creation of a new board category—all fields must be defined in the Prisma schema.","typeName":"IDiscussionboardBoardCategory.ICreate"},"responseBody":{"description":"The newly created board category entity, with all current schema fields populated.","typeName":"IDiscussionboardBoardCategory"},"authorizationRoles":null,"name":"create","path":"/discussionboard/boardCategories","method":"post"},{"specification":"Updates an existing board category record in the discussionboard_board_categories table. This endpoint allows modification of fields exactly as defined in the schema—name, code, description, position—but must never reference fields that do not exist, like deleted_at or created_by. Used in admin/category management flows where board category properties are adjusted post-creation. The id path parameter is the primary key, identifying which entity to update.","description":"This operation modifies the fields of an existing board category (discussionboard_board_categories) as specified by the id path parameter. Updates must only affect fields that actually exist in the schema: name, code, description, position. Strictly, this endpoint should not support or reference non-existent columns. Validation should ensure that only valid fields are included in both the update request and the response entity. Typical use case: admin edits a board category's name or ordering position. The updated entity is returned on success.","summary":"Update a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"The unique id (UUID) of the board category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for board category update—only actual schema fields may be modified.","typeName":"IDiscussionboardBoardCategory.IUpdate"},"responseBody":{"description":"The updated board category entity, with only actual schema fields.","typeName":"IDiscussionboardBoardCategory"},"authorizationRoles":null,"name":"update","path":"/discussionboard/boardCategories/{id}","method":"put"},{"specification":"Deletes the specified board category from the discussionboard_board_categories table. Since there are no soft delete fields (such as deleted_at or is_deleted) in the Prisma schema for this table, this operation performs a hard delete—that is, it will permanently remove the record from the database. The operation never references non-existent fields and is used in administrative maintenance where category removal is required.","description":"This operation deletes an existing board category record from discussionboard_board_categories by id. It executes a hard delete, permanently removing the entity, because the schema does not define any soft delete fields. This is intended for irreversible removal of board categories as per schema design and critical administrative flows. The API response should confirm deletion with minimal detail since the entity no longer exists. Absolutely no fields other than the actual id primary key will be used in the request; no references to soft delete or audit fields outside the schema.","summary":"Hard delete a board category record by id (discussionboard_board_categories).","parameters":[{"name":"id","description":"The unique id (UUID) of the board category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of permanent (hard) deletion for the specified board category id.","typeName":"IDiscussionboardBoardCategory.IDeleteResult"},"authorizationRoles":null,"name":"erase","path":"/discussionboard/boardCategories/{id}","method":"delete"},{"specification":"Retrieves a list of board settings entities from the discussionboard_board_settings table. The data returned must only contain fields present in the schema: id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, and updated_at. Supports admin views, system settings panels, and configuration management UI. Enables pagination and searching on request, referencing only actual fields in the schema. No deleted_, created_by, updated_by, or other non-existent columns are involved.","description":"This operation returns a paginated or filtered list of board settings as stored in the discussionboard_board_settings table. Only returns and allows filtering/sorting/searching on fields defined in the schema (id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at). Used to power board-level configuration panels, admin dashboards, or for configuration export. Must not reference any non-existent fields in either request or response, per critical schema compliance instructions.","summary":"Retrieve a list of board settings (discussionboard_board_settings).","parameters":[],"requestBody":{"description":"Search/sort/filter information (may reference only actual fields from the board settings schema).","typeName":"IDiscussionboardBoardSetting.IRequest"},"responseBody":{"description":"Paginated board settings collection where each board setting uses only actual schema fields.","typeName":"IPageDiscussionboardBoardSetting"},"authorizationRoles":null,"name":"index","path":"/discussionboard/boardSettings","method":"patch"},{"specification":"Retrieves a specific board settings record by id from the discussionboard_board_settings table. The endpoint must only return and refer to actual columns of the schema: id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at. Used in board-level configuration editors, system config views, or administrative audits. Path parameter id is the table primary key (UUID string). No references to non-existent columns accepted.","description":"Fetch the complete board settings entity for the given id from the discussionboard_board_settings table. The operation will reply with all actual schema fields—id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at. Used for detailed board configuration display or editing workflows. No non-schema fields can be involved. The id is required and must be a valid UUID matching an existing settings row.","summary":"Get board settings by id (discussionboard_board_settings).","parameters":[{"name":"id","description":"The unique id (UUID) of the board setting to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full board setting entity with only schema fields present.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":null,"name":"at","path":"/discussionboard/boardSettings/{id}","method":"get"},{"specification":"Creates a new board settings record in discussionboard_board_settings. All input fields must match schema exactly—discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at. The endpoint strictly prohibits reference to or manipulation of non-existent fields. Provides administrative creation for advanced board configuration in the forum. Responds with the full newly created entity on success, using only schema fields.","description":"This operation inserts a new record into the discussionboard_board_settings table, creating a new board configuration. The creation request must only include fields defined in the schema: discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at (as appropriate). Utilized in admin/system workflows for new board launches or configuration. Response returns the new record with all schema fields. No non-existent fields are accepted in request or response per hard schema compliance rules.","summary":"Create board settings record (discussionboard_board_settings).","parameters":[],"requestBody":{"description":"Input for creating a board settings record—must only reference valid schema fields.","typeName":"IDiscussionboardBoardSetting.ICreate"},"responseBody":{"description":"The created board setting entity containing only actual schema fields.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":null,"name":"create","path":"/discussionboard/boardSettings","method":"post"},{"specification":"Updates an existing discussionboard_board_settings record by id. The endpoint allows updating only fields present in the Prisma schema (discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, updated_at). References or manipulations of non-existent columns are strictly forbidden. Commonly used by administrators for adjusting board configuration post-creation. The record to be updated is identified by its primary key id in the path parameter.","description":"This API operation modifies the configuration fields of a board setting entity specified by id, in discussionboard_board_settings. Update requests and responses interact only with actual schema fields: discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, updated_at. Design excludes any reference to fields which do not exist. Used principally in admin/configuration panels for adjusting board settings as needs evolve. Returns updated settings entity on success, strictly matching table fields.","summary":"Update a board settings record by id (discussionboard_board_settings).","parameters":[{"name":"id","description":"The unique id (UUID) of the board setting to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for board settings; adhere strictly to actual schema columns.","typeName":"IDiscussionboardBoardSetting.IUpdate"},"responseBody":{"description":"The updated board setting entity, with only fields present in the schema.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":null,"name":"update","path":"/discussionboard/boardSettings/{id}","method":"put"},{"specification":"Deletes a single discussionboard_board_settings record by id. Since there are no soft delete columns in the schema for board settings, this operation will perform a hard delete—permanently removing the record from the database. The endpoint must only interact with actual Prisma schema fields and not refer to or manipulate any non-existent ones. Use by admins responsible for board configuration in the discussion board.","description":"This operation permanently deletes a board settings record from the discussionboard_board_settings table using the hard delete pattern—as there are no soft delete fields (e.g., deleted_at, is_deleted) in the schema. Takes the id as path parameter, which is the record's primary key. Used in administrator/system flows for configuration cleanup or system changes. No references to other or non-existent columns (including audit or soft delete fields) are permitted on request or in any aspect of this operation. API must confirm the permanent removal of the settings entity.","summary":"Hard delete a board settings record by id (discussionboard_board_settings).","parameters":[{"name":"id","description":"The unique id (UUID) of the board setting to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of hard deletion for this board settings record.","typeName":"IDiscussionboardBoardSetting.IDeleteResult"},"authorizationRoles":null,"name":"erase","path":"/discussionboard/boardSettings/{id}","method":"delete"},{"specification":"Retrieves a list of board-moderator associations from discussionboard_board_moderators. This is used for platform administration and board-moderator relationship management. Each returned entity contains only fields present in the schema: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Filtering/searching is restricted solely to these columns per hard schema compliance. Intended for populating moderator lists, board settings editing, and audit dashboards.","description":"Lists all board to moderator assignment records in discussionboard_board_moderators, returning strictly the current schema fields: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Used for board-moderator management UIs or audit/management functions. Only fields and filter/search/sort/query parameters corresponding to these schema columns are supported. Absolutely no reference to non-existent columns is permitted on any aspect of this operation.","summary":"Retrieve a list of board-moderator assignment records (discussionboard_board_moderators).","parameters":[],"requestBody":{"description":"Filter/search/sort information on fields existing in discussionboard_board_moderators only.","typeName":"IDiscussionboardBoardModerator.IRequest"},"responseBody":{"description":"Paginated/filtered result set of board-moderator assignment records, with only current schema fields present.","typeName":"IPageDiscussionboardBoardModerator"},"authorizationRoles":null,"name":"index","path":"/discussionboard/boardModerators","method":"patch"},{"specification":"Retrieves details for a specific board-moderator assignment given its id. The detail returned is limited to the current schema fields: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Used in administrative moderator assignment forms and moderator/board management UIs. The id used in the path is the primary key for this table. No non-existent fields are referenced or included.","description":"Returns the full details of a single board-moderator link entity by id from discussionboard_board_moderators. The returned object includes schema fields only: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Used to display assignment information, support audit/compliance, or UI for editing board-moderator assignments. The id path parameter is required (UUID type) and identifies which assignment to fetch. Referencing or using any non-existent fields is strictly forbidden by schema compliance.","summary":"Get board-moderator assignment record detail by id (discussionboard_board_moderators).","parameters":[{"name":"id","description":"The unique id (UUID) of the board-moderator assignment record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete board-moderator assignment record, with only present schema fields.","typeName":"IDiscussionboardBoardModerator"},"authorizationRoles":null,"name":"at","path":"/discussionboard/boardModerators/{id}","method":"get"}],"completed":27,"total":195,"step":0,"created_at":"2025-07-24T19:13:10.467Z"},"tokenUsage":{"facade":{"aggregate":{"total":181283,"input":{"total":170095,"cached":57344},"output":{"total":11188,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":181283,"input":{"total":170095,"cached":57344},"output":{"total":11188,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":181283,"input":{"total":170095,"cached":57344},"output":{"total":11188,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":181283,"input":{"total":170095,"cached":57344},"output":{"total":11188,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Creates a comment report, corresponding to the 'discussionboard_comment_reports' Prisma schema. This operation enables a user to report a specific comment for violations such as spam, abuse, or inappropriate content. It utilizes actual schema fields, requiring the comment's id, member id, report type id, and a non-null reason. The operation records the time of the report with precision and does not reference any fields that aren't part of the schema.","description":"This API operation allows a member to report a comment by creating a record in the 'discussionboard_comment_reports' table. The request must specify the unique identifiers for the comment being reported (discussionboard_comment_id), the reporting member (discussionboard_member_id), the type of report (discussionboard_report_type_id), and a detailed non-null reason explaining the report. The operation captures the creation time for compliance and moderation workflows and enforces business logic such as only one report per type/member/comment. No fields outside the schema are referenced. No soft delete fields exist, so reports are permanently added to the table. This is the first step in the moderation flow (see requirements: Posting & Interaction, Moderation, Audit). Related endpoints include GET/PATCH for review and moderation of existing reports.","summary":"Create a new comment report in the 'discussionboard_comment_reports' table (hard add, no soft delete).","parameters":[],"requestBody":{"description":"Required payload for creating a comment report. Includes comment id, reporting member id, report type id, and non-null reason.","typeName":"Idiscussionboard_comment_reports.ICreate"},"responseBody":{"description":"Returns the created comment report record.","typeName":"Idiscussionboard_comment_reports"},"authorizationRoles":null,"name":"create","path":"/discussionboard/commentReports","method":"post"},{"specification":"Updates an existing comment report in the 'discussionboard_comment_reports' Prisma schema, identified by its unique id. This operation only references fields present in the schema: comment id, member id, report type id, reason, and does NOT reference any non-existent fields. Used for correcting the reason or changing the report type. The report is updated (PUT overrides), and audit logs may reference updated_at in supporting tables, not here.","description":"This operation updates the primary fields of a comment report identified by 'id' in the 'discussionboard_comment_reports' table. Only the comment id, member id, report type id, and reason may be modified, as per the schema. The operation does not reference any deleted_at, created_by, or updated_by fields, nor include any additional fields not explicitly defined. PUT is a full override; existing values are replaced by new request body data. Operation is referenced in moderation and workflow escalations.","summary":"Update an existing comment report in the 'discussionboard_comment_reports' table.","parameters":[{"name":"id","description":"Unique identifier for the comment report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating a comment report, including only allowed mutable fields.","typeName":"Idiscussionboard_comment_reports.IUpdate"},"responseBody":{"description":"Updated comment report record.","typeName":"Idiscussionboard_comment_reports"},"authorizationRoles":null,"name":"update","path":"/discussionboard/commentReports/{id}","method":"put"},{"specification":"Deletes an existing comment report from the 'discussionboard_comment_reports' table, identified by id. Since the schema has no soft delete field, this action performs a hard delete (permanent removal). No fields outside the schema are referenced.","description":"This API operation deletes a comment report identified by 'id' from the 'discussionboard_comment_reports' table. The deletion is permanent (hard delete) as the schema has no soft or logical delete marker. This endpoint is used by moderation or administration roles for removing erroneous or resolved reports. The operation references only the report's 'id' as present in the schema. No non-existent fields are referenced in this operation.","summary":"Hard delete of a comment report from the 'discussionboard_comment_reports' table by id.","parameters":[{"name":"id","description":"Unique identifier for the comment report record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/commentReports/{id}","method":"delete"},{"specification":"Lists or searches normalized moderation reports from the 'discussionboard_reports' table, fulfilling requirements for tracking the moderation workflow. This PATCH endpoint leverages the 'discussionboard_reports' schema, supports filters and page controls as per business rules, and only references fields present in the schema.","description":"Retrieves a paginated, searchable list of moderator reports from the 'discussionboard_reports' table. The endpoint supports filtering by report type, reporting member, moderation target, status, and date range as defined by the schema. Only fields present in 'discussionboard_reports' are referenced. This is used by moderators and administrators to review reports according to moderation and escalation workflows. Related APIs include POST (creating a report), GET (fetch a single report by id), PUT (update report details), and DELETE (remove report).","summary":"Paginated search and list retrieval of moderation reports from the 'discussionboard_reports' table.","parameters":[],"requestBody":{"description":"Search/filter and pagination parameters for reports list operation.","typeName":"Idiscussionboard_reports.IRequest"},"responseBody":{"description":"Returns a paginated list of reports and page info.","typeName":"IPageIdiscussionboard_reports"},"authorizationRoles":null,"name":"index","path":"/discussionboard/reports","method":"patch"},{"specification":"Retrieves the details of a specific moderation report from the 'discussionboard_reports' table, by id. Only fields actually present in the schema are referenced.","description":"Fetches a single moderation report by 'id' from the 'discussionboard_reports' table. Returns all schema-defined properties, including report type, reporting member, target object, target type, report description, and reported_at. Does not reference or return any field absent from the schema. Used in the moderation review/handling flow.","summary":"Fetch details for a specific moderation report by id from 'discussionboard_reports'.","parameters":[{"name":"id","description":"Unique identifier for the moderation report to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The moderation report record.","typeName":"Idiscussionboard_reports"},"authorizationRoles":null,"name":"at","path":"/discussionboard/reports/{id}","method":"get"},{"specification":"Creates a new moderation report in the 'discussionboard_reports' table. This corresponds to reporting a business object (post, comment, or member) for moderation review, recording full normalized data as per schema and business process. Does not reference any non-existent fields.","description":"Creates a moderation report record by specifying the report type id, reporting member id, target object id, target object type, optional report description, and reported_at timestamp. All fields referenced are present in the schema. Used to report a post, comment, or member for moderation under escalation workflows. Report creation is the initial step in the moderation queue. Additional moderation actions are linked via related operations.","summary":"Create a new moderation report in the 'discussionboard_reports' table.","parameters":[],"requestBody":{"description":"Required payload for new moderation reports; includes all normalized schema fields.","typeName":"Idiscussionboard_reports.ICreate"},"responseBody":{"description":"Returns the created moderation report record.","typeName":"Idiscussionboard_reports"},"authorizationRoles":null,"name":"create","path":"/discussionboard/reports","method":"post"},{"specification":"Updates an existing moderation report in the 'discussionboard_reports' table using its unique id. Only fields defined in the schema are referenced. PUT fully replaces allowed updatable fields.","description":"Updates the primary fields of a moderation report in the 'discussionboard_reports' table, identified by 'id'. Permitted updates include only schema-defined fields such as report type, reporting member, target object info, report description, and reported_at. The endpoint does not reference or update any soft/hard delete or user tracking fields outside the schema.","summary":"Update a moderation report by id in the 'discussionboard_reports' table.","parameters":[{"name":"id","description":"Unique identifier for the moderation report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating report fields; mirrors schema definition.","typeName":"Idiscussionboard_reports.IUpdate"},"responseBody":{"description":"Returns the updated moderation report record.","typeName":"Idiscussionboard_reports"},"authorizationRoles":null,"name":"update","path":"/discussionboard/reports/{id}","method":"put"},{"specification":"Deletes a moderation report from the 'discussionboard_reports' table based on its id. As the schema provides no soft/hard delete field, this operation performs a hard delete (permanent removal) with no logical deletion. Does not reference any other fields except 'id'.","description":"Removes a moderation report entry by its id from the 'discussionboard_reports' table. This is a permanent (hard) delete operation as the schema does not include fields for soft or logical deletion. Typically used by moderators or admins for workflow cleanup or error correction. Operation strictly references schema-defined fields only.","summary":"Hard delete of a moderation report from 'discussionboard_reports' by id.","parameters":[{"name":"id","description":"Unique identifier for the report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/reports/{id}","method":"delete"},{"specification":"Retrieves a paginated, searchable list of report types from 'discussionboard_report_types' for moderation and admin workflows and frontend display. Relies only on schema fields.","description":"Returns a list of report types (spam, abuse, misinformation, etc.) as defined in the 'discussionboard_report_types' table, supporting pagination, filtering, and sorting. Only actual schema fields are referenced, such as id, code, display_name, active, created_at. Used by admins, moderators, and frontend select menus. Does not include or reference any absent fields.","summary":"Paginated list/search of available report types for moderation, admin, and display.","parameters":[],"requestBody":{"description":"Search/filtering and pagination request for report types.","typeName":"Idiscussionboard_report_types.IRequest"},"responseBody":{"description":"Paginated response of report types with page info.","typeName":"IPageIdiscussionboard_report_types"},"authorizationRoles":null,"name":"index","path":"/discussionboard/reportTypes","method":"patch"},{"specification":"Retrieves a specific report type by its id from the 'discussionboard_report_types' schema. Only references actual schema fields.","description":"Fetches a single report type by its unique id, returning all normalized data: code, display_name, description, active, and created_at. Does not reference any field not present in the schema. Used in report creation and for UI display of selectable report types.","summary":"Get a single report type from 'discussionboard_report_types' by id.","parameters":[{"name":"id","description":"Identifier for the report type to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The report type record.","typeName":"Idiscussionboard_report_types"},"authorizationRoles":null,"name":"at","path":"/discussionboard/reportTypes/{id}","method":"get"},{"specification":"Creates a new report type in 'discussionboard_report_types'. Only references actual schema fields. Used by admins for system extensibility.","description":"Creates a report type record, requiring code, display_name, optional description, active status, and created_at fields. Only schema-defined fields are referenced. Used in configuring moderation options and extending reporting workflows. Does not reference any user or tracking fields if not in schema. Creation is audited by created_at field only.","summary":"Create a new report type in 'discussionboard_report_types'.","parameters":[],"requestBody":{"description":"Payload for new report type creation; all values must match schema.","typeName":"Idiscussionboard_report_types.ICreate"},"responseBody":{"description":"The created report type record.","typeName":"Idiscussionboard_report_types"},"authorizationRoles":null,"name":"create","path":"/discussionboard/reportTypes","method":"post"},{"specification":"Updates an existing report type in 'discussionboard_report_types' via PUT. Only fields present in the schema are referenced in request/response.","description":"Updates the key fields of a report type (code, display_name, description, active). The report type to update is identified by id. Any update or change is only applied to schema-defined columns; fields not in the schema will never be referenced. PUT fully replaces allowed content.","summary":"Update an existing report type in 'discussionboard_report_types' by id.","parameters":[{"name":"id","description":"Identifier for the report type to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for report type update; values limited to those present in schema.","typeName":"Idiscussionboard_report_types.IUpdate"},"responseBody":{"description":"The updated report type record.","typeName":"Idiscussionboard_report_types"},"authorizationRoles":null,"name":"update","path":"/discussionboard/reportTypes/{id}","method":"put"}],"completed":39,"total":195,"step":0,"created_at":"2025-07-24T19:13:19.823Z"},"tokenUsage":{"facade":{"aggregate":{"total":227562,"input":{"total":213559,"cached":57344},"output":{"total":14003,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":227562,"input":{"total":213559,"cached":57344},"output":{"total":14003,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":227562,"input":{"total":213559,"cached":57344},"output":{"total":14003,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":227562,"input":{"total":213559,"cached":57344},"output":{"total":14003,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements per-feature or area settings management for the discussion board platform. This operation deletes a discussionboard_settings record identified by its primary key 'id'. Deletion is permanent (hard delete), as the schema includes no soft delete field. This endpoint ensures removal of settings associated with a particular scope, such as a board or channel, supporting precise system administration and configuration hygiene. Care should be taken, as data removal is irreversible and could impact runtime configuration for affected entities.","description":"This endpoint permanently deletes the settings record in the discussionboard_settings table matching the provided id. Since the schema for discussionboard_settings does not include a soft-delete or nullable deleted_at column, this DELETE is implemented as a hard delete.\n\nUse this endpoint for administrative tasks such as removing feature flags, local configuration settings, or when cleaning up obsolete settings. Care must be taken before executing this operation to ensure it does not disrupt required business logic or current platform functionality. Error handling should gracefully respond to missing or already-deleted records with appropriate error messages.\n\nThere are no pre-execution dependencies, but clients should confirm outstanding references or settings dependencies prior to deletion. Use of this endpoint should be restricted to admin users.","summary":"Permanently deletes a discussionboard_settings record (hard delete, no soft delete field present).","parameters":[{"name":"id","description":"Unique identifier of the settings record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/settings/{id}","method":"delete"},{"specification":"Retrieves a paginated, filterable list of discussionboard_audit_logs for compliance, security, and traceability, based on query parameters provided. Returns summary or filtered logs for system-wide audit purposes, supporting admin oversight and moderation review. Implements full text and field-level search, sorting, and time filtering per platform requirements.","description":"This endpoint allows admins, moderators, or privileged auditors to query a collection of audit logs recorded on the discussionboard_audit_logs table. The audit log records include fields such as id, actor_id (the member/admin who performed the action), target_id (entity affected), action (action type), payload (contextual JSON for event), and created_at (event timestamp).\n\nSupports complex searching, date range filtering, and pagination for efficient compliance log review. The endpoint enables monitoring of sensitive changes, role escalations, and moderation activities. Query parameters should conform to allowed fields and be validated to ensure robust, secure access. No request body is required unless extended search/filter objects are specified in future versions.\n\nThere are no dependencies, but this endpoint is typically parsed in analytic dashboards and system compliance reports.","summary":"Retrieves a paginated and filtered list of discussionboard_audit_logs for audit and compliance.","parameters":[],"requestBody":{"description":"Filter and search criteria for audit logs (pagination, action type, actor, date range, etc.).","typeName":"IDiscussionboardAuditLog.IRequest"},"responseBody":{"description":"Paginated response with audit log summaries matching the search and filter criteria.","typeName":"IPageIDiscussionboardAuditLog"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/auditLogs","method":"patch"},{"specification":"Retrieves full details of a single audit log entry for compliance or forensic review. The audit log provides attribution and event context for any critical action performed on the discussion board platform. Implements detailed system monitoring and audit trail compliance.","description":"This endpoint fetches a single discussionboard_audit_logs record corresponding to the supplied id from the path. Returns all atomic fields: id, actor_id (who performed the action), target_id (entity affected, if any), action (type of event), payload (optional event details), and created_at (event timestamp).\n\nThis endpoint is used in system audit dashboards, escalation investigations, and moderation reviews to obtain detailed context about security-sensitive or privileged actions. Access should be restricted to privileged admin or auditor roles for privacy and legal compliance. If no record exists for the provided id, a 404 error is returned.\n\nThere are no pre-execution dependencies, but user must have permissions to access system audit trails.","summary":"Gets a single discussionboard_audit_logs record by id for full compliance detail.","parameters":[{"name":"id","description":"Primary key of the audit log to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full audit log record for the specified id.","typeName":"IDiscussionboardAuditLog"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/auditLogs/{id}","method":"get"},{"specification":"Creates a new audit log record in discussionboard_audit_logs. Used by the system for logging sensitive or privileged actions performed by users (members, moderators, admins). Ensures a comprehensive, immutable audit trail as required for compliance, security, and behavioral protocols.","description":"This endpoint allows internal system processes or (in rare manual cases) admins to create a new record in the discussionboard_audit_logs table. Required fields are: actor_id (who performed the action), action (type of event), and created_at (when it occurred). Optional fields include target_id (entity affected) and payload (JSON-formatted event details).\n\nTypical use cases include logging deletions, role escalations, configuration changes, or moderation interventions. The endpoint supports both automated (system-invoked) and manual logging pathways, with strict validation to ensure audit integrity. Record immutability is enforced at the DB and logical layer.\n\nCare must be taken to prevent unprivileged or user-initiated direct logging, except for certain privileged flows. Successful creation returns the full log record; errors return relevant status codes.","summary":"Creates a new discussionboard_audit_logs record for compliance and traceability.","parameters":[],"requestBody":{"description":"Data for the new audit log record (actor, action, optional target and payload).","typeName":"IDiscussionboardAuditLog.ICreate"},"responseBody":{"description":"The created audit log record with all persisted fields.","typeName":"IDiscussionboardAuditLog"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/auditLogs","method":"post"},{"specification":"Updates a previously created audit log entry. Can only be used for appending additional context or correcting permitted fields; does not alter the original event attribution or timestamp. Enforces compliance and audit integrity; unauthorized updates are denied.","description":"Updates a single record in the discussionboard_audit_logs table by id. Only certain fields may be modifiable according to platform compliance rules—typically the payload for adding context, not core action or attribution fields.\n\nThe operation must validate which fields are supplied and ensure all changes are appropriately tracked. Unauthorized or unauditable modifications should be rejected. Used mainly by system processes with privileged credentials or for correction after compliance review. Returns the updated audit log record for the given id on success; 404 if record does not exist.\n\nPre-execution dependency: proper validation of updatable fields and user permissions is mandatory. Audit trails must reflect this update if the action is applied.","summary":"Updates a discussionboard_audit_logs record for context or correction (restricted fields only).","parameters":[{"name":"id","description":"Unique identifier of the audit log record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the audit log (permitted fields only, like payload).","typeName":"IDiscussionboardAuditLog.IUpdate"},"responseBody":{"description":"The updated audit log record.","typeName":"IDiscussionboardAuditLog"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/auditLogs/{id}","method":"put"},{"specification":"Deletes a discussionboard_audit_logs record by id. This is a permanent (hard) delete, since the schema includes no soft-delete or deleted_at fields. Used for compliance, GDPR requests, or data hygiene under administrative protocols.","description":"This endpoint deletes a specific discussionboard_audit_logs record referenced by the supplied id. Because the table lacks a deleted_at or soft-delete field, deletion is implemented as a hard (irreversible) removal from the database.\n\nIntended only for use by admins and compliance officers, often for legal erasure requests or by explicit authority. There are no automated dependencies—clients are responsible for confirming data eligibility for deletion prior to execution. A successful call permanently erases all audit record data for that id; errors are returned if the record does not exist.","summary":"Permanently deletes a discussionboard_audit_logs record (hard delete only; no soft delete supported).","parameters":[{"name":"id","description":"ID of audit log record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/auditLogs/{id}","method":"delete"},{"specification":"Retrieves a paginated list of members, with support for complex filtering (role, active, etc.), sorting, and pagination as described in the requirements document. Enables management and discovery across the discussionboard_members table for profile and administrative flows.","description":"This endpoint allows admins and moderators to retrieve a paginated and filtered/searchable list of discussionboard_members. The members table includes fields: id (user uuid), username (unique login), email (unique), hashed_password (not exposed publicly), role, is_active (account enabled/disabled), created_at, updated_at, deleted_at (soft-delete marker).\n\nSupports filters for role, activity status, creation timestamp, and comprehensive query operators for management dashboards. Only non-sensitive information is returned in member summaries/pagination lists; details like hashed_password are strictly omitted from normal output. Authorization roles ensure only platform managers access this endpoint.\n\nClients must supply search/filter/pagination parameters in the request body. Returns paginated member records as per the supplied criteria.","summary":"Retrieves a paginated and filtered list of discussionboard_members, excluding sensitive fields.","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for retrieving members.","typeName":"IDiscussionboardMember.IRequest"},"responseBody":{"description":"Paginated response of discussionboard_members summaries.","typeName":"IPageIDiscussionboardMember"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/members","method":"patch"},{"specification":"Fetches a single member's details by id from the discussionboard_members table. Supports administrative user management, member self-access (subject to permission checks), and profile flows. Sensitive credentials/fields are never exposed in outputs.","description":"Retrieves a single discussionboard_members record for the specified id. All profile and status fields are returned: id, username, email, role, is_active, created_at, updated_at, and (if present) deleted_at. The hashed_password is never exposed in any API response. Intended for admin, moderator, or member self-access, subject to permissions. If record not found, returns 404 or equivalent.\n\nThis endpoint is foundational for user navigation, profile view, account management, and administrative processes. It should be protected by layered authorization and privacy controls. No dependencies except for the existence of the id.","summary":"Gets a detailed single discussionboard_members record by id for admin/profile usage.","parameters":[{"name":"id","description":"Primary key value of the member to retrieve (uuid).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full member record except for sensitive credentials.","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/members/{id}","method":"get"},{"specification":"Creates a new member record in discussionboard_members, supporting onboarding/registration or admin-invoked account creation. Excludes sensitive non-user-supplied fields such as system-generated timestamps and soft-deletion status.","description":"Allows clients (registration flow, admin UIs) to create a new discussionboard_members record. Required fields: username (unique), email (unique), hashed_password, role, is_active. System-managed: created_at/updated_at are set by DB logic, not input. The endpoint does not allow the user to set deleted_at directly.\n\nValidation ensures no duplicate username or email. Hashing of the password must occur before storage, with user-supplied plaintext never accepted. Successful creation returns all non-sensitive fields of the new member record. Errors such as constraint violation are reported accordingly. No dependencies except referential rules.","summary":"Creates a new discussionboard_members record, omitting sensitive system-managed fields.","parameters":[],"requestBody":{"description":"All required registration/account creation fields for a member.","typeName":"IDiscussionboardMember.ICreate"},"responseBody":{"description":"The newly created member's record without sensitive fields.","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/members","method":"post"},{"specification":"Updates an existing member in discussionboard_members by id to modify certain fields. Allows updating profile and role information, but never returns or exposes hashed_password. Audit and compliance enforced by system; deleted_at (soft-delete) is not modifiable via this endpoint.","description":"Updates a member record identified by id in the discussionboard_members table. All modifiable fields except hashed_password and system-managed timestamps can be changed according to business logic. Typical usage includes changing username, email, role, is_active status. The response returns the updated member record without hashed_password.\n\nAudit trail for profile/role changes is managed by downstream system logic and compliance layers. Proper validation and unique constraint checking are enforced for username and email. This endpoint supports both admin and user-driven update flows, within scope determined by role-based permissions.","summary":"Updates a discussionboard_members record by id, omitting sensitive/password fields.","parameters":[{"name":"id","description":"Unique id of the member to update (uuid).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the selected member (except for restricted fields).","typeName":"IDiscussionboardMember.IUpdate"},"responseBody":{"description":"The updated member record (excluding hashed_password).","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/members/{id}","method":"put"},{"specification":"Performs a soft-delete on a member in discussionboard_members by updating the deleted_at field to current timestamp. Record remains in the system for audit/compliance; access and login is disabled. Complies with privacy, data protection, and audit rules specified by the schema.","description":"This endpoint soft-deletes a discussionboard_members record by id, meaning it sets the deleted_at field to the current timestamp, while the data remains present for audit and compliance. Login and access for the given user are suspended; linked records (profile, preferences, etc.) may also be handled downstream for compliance.\n\nAttempting to delete an already soft-deleted or non-existent user should return an appropriate error. This operation is typically executed by admin or via user-initiated account deletion flows governed by privacy policy. Hard deletion (data erasure) is handled by a separate documented process, in compliance with legal requirements.","summary":"Soft deletes a discussionboard_members record (sets deleted_at) for compliance and audit.","parameters":[{"name":"id","description":"Member id of the user to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/members/{id}","method":"delete"},{"specification":"Retrieves a paginated and searchable list of all moderators assigned on the platform, supporting role management, escalations, and compliance reporting. Returns moderator assignment information as found in the discussionboard_moderators table, omitting any sensitive linked member data not part of the moderator assignment model.","description":"Fetches a paginated list of discussionboard_moderators records. The model includes id, member_id (user assigned as moderator), assigned_by_admin_id (admin who assigned), assigned_at (datetime granted), expires_at (datetime if temporary assignment), and revoked_at (datetime if the assignment ended). Excludes direct member details/profile fields—retrieval is limited to records purely about the moderator role assignment.\n\nUseful in admin and role management UIs for monitoring moderator roster, investigating activity patterns, and audit trails.  Includes full filter/sort/pagination capabilities via request body. Access should be restricted to platform managers with appropriate role-based permissions.","summary":"Retrieves a paginated and filterable list of discussionboard_moderators assignments.","parameters":[],"requestBody":{"description":"Search/filter and pagination criteria for moderator assignment records.","typeName":"IDiscussionboardModerator.IRequest"},"responseBody":{"description":"Paginated list of moderator assignment records.","typeName":"IPageIDiscussionboardModerator"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/moderators","method":"patch"}],"completed":51,"total":195,"step":0,"created_at":"2025-07-24T19:13:20.921Z"},"tokenUsage":{"facade":{"aggregate":{"total":274629,"input":{"total":257028,"cached":57344},"output":{"total":17601,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":274629,"input":{"total":257028,"cached":57344},"output":{"total":17601,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":274629,"input":{"total":257028,"cached":57344},"output":{"total":17601,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":274629,"input":{"total":257028,"cached":57344},"output":{"total":17601,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"This endpoint updates an activity log record for the discussion board system. Each activity log tracks member activity across various entities such as boards, threads, posts, or comments, with fields including event_timestamp, event_type, and event_metadata. Updates may include changing the event type, entity references, timestamp, or associated metadata. All updates must strictly conform to the structure defined in the discussionboard_activity_logs table. Only the fields actually existing in the Prisma schema (e.g., discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata) may be updated. No fields beyond those present may be referenced or updated.","description":"Updates an existing activity log record in the discussionboard_activity_logs table. This operation allows the modification of any field such as event_type, event_timestamp, entity references (e.g., discussionboard_member_id, board_id, thread_id, post_id, comment_id), or event_metadata. Changes are strictly limited to the actual columns in the schema. This API is primarily used for analytics, audit trails, or correcting logged events by the system or authorized admin users. The operation does not reference or store non-existent fields such as deleted_at or updated_by. Reviewers must ensure all changes are valid, and modifications are fully auditable. Related endpoints include record creation (POST), retrieval (GET), and deletion (DELETE) for the same log entity.","summary":"Update a specific activity log (discussionboard_activity_logs) by ID.","parameters":[{"name":"id","description":"Target activity log record's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the activity log entry. Only the fields actually present in discussionboard_activity_logs are accepted. Examples include event_type changes, entity reference updates, and metadata adjustments.","typeName":"IActivityLog.IUpdate"},"responseBody":{"description":"The updated activity log entry as stored in discussionboard_activity_logs.","typeName":"IActivityLog"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/activityLogs/{id}","method":"put"},{"specification":"This endpoint deletes an activity log record in the activity logs table. The discussionboard_activity_logs model does NOT possess a soft delete field (e.g., deleted_at). Therefore, DELETE operations on this record will result in a permanent hard-delete, removing the log entry irreversibly from the database. Only fields extant in the schema (i.e., id) are referenced for the deletion. This hard deletion must be carefully audited due to compliance or analytics requirements; logs and snapshots are not preserved after this action.","description":"Permanently deletes the specified activity log record from the discussionboard_activity_logs table. As no soft-delete marker exists in the schema, this operation performs a hard delete, irreversibly removing all trace of the log event. Use with caution, typically restricted to admin users and protected by audit workflows. Associated errors may occur if the entry referenced does not exist. Non-existent or extra fields are not referenced or logged in this operation. For retrieval or updating, use the GET or PUT endpoints on the same entity.","summary":"Hard-delete an activity log entry (discussionboard_activity_logs) by ID.","parameters":[{"name":"id","description":"Target activity log record's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/activityLogs/{id}","method":"delete"},{"specification":"This endpoint retrieves a paginated or filtered list of trending topics from the discussionboard_trending_topics table. Trending topics represent currently active or popular threads as calculated by the analytics domain, with each record featuring fields such as discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score. Request may include filters or pagination fields defined in ITrendingTopic.IRequest.","description":"Retrieves a paginated list of trending topics based on search/filter/period criteria as defined in the request body. The operation references only defined fields in the discussionboard_trending_topics schema (e.g., discussionboard_thread_id, discussionboard_board_id, ranking_period_date, trending_score). Results can be sorted and filtered. Other endpoints for the trending topic domain include detail retrieval (GET by ID), creation (POST), update (PUT by ID), and deletion (DELETE by ID).","summary":"List or search trending topics (discussionboard_trending_topics) with filters and pagination.","parameters":[],"requestBody":{"description":"Search and pagination criteria for trending topics. Accepts only supported fields defined in ITrendingTopic.IRequest.","typeName":"ITrendingTopic.IRequest"},"responseBody":{"description":"A paginated list of trending topic records from discussionboard_trending_topics.","typeName":"IPageITrendingTopic"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/trendingTopics","method":"patch"},{"specification":"Retrieves the details of a single trending topic in the discussionboard_trending_topics table using its unique identifier. This operation returns all atomic fields belonging to the trending topic record, such as discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score. No calculated or non-existent fields are referenced.","description":"Fetches the complete detail for a trending topic identified by its unique ID. Only fields present in the discussionboard_trending_topics schema are provided. The endpoint does not include fields outside the schema or any derived/aggregate data. Associated endpoints include creation (POST), update (PUT), deletion (DELETE), and listing (PATCH) operations for trending topics.","summary":"Retrieve details of a trending topic (discussionboard_trending_topics) by ID.","parameters":[{"name":"id","description":"Trending topic record's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail for the specified trending topic record.","typeName":"ITrendingTopic"},"authorizationRoles":null,"name":"at","path":"/discussionboard/trendingTopics/{id}","method":"get"},{"specification":"Creates a new trending topic record in the discussionboard_trending_topics table. Only fields defined in the schema (discussionboard_thread_id, discussionboard_board_id, ranking_period_date, trending_score) are accepted. The request supplies all required information for the new trending topic entity, to be returned upon successful creation. This endpoint enables analytics jobs, system admins, or authorized automation to publish new trending topics.","description":"Adds a new trending topic entry to the system analytics, capturing the thread ID, board ID, ranking period date, and trending score as defined in the schema. Fields outside this scope (e.g., audit logs or history) are excluded. Returns the newly created trending topic record. Associated endpoints include update (PUT), retrieval (GET), listing (PATCH), and deletion (DELETE).","summary":"Create a trending topic (discussionboard_trending_topics).","parameters":[],"requestBody":{"description":"Trending topic details per the schema, including thread ID, board ID, ranking period date, and trending score.","typeName":"ITrendingTopic.ICreate"},"responseBody":{"description":"Record for the created trending topic.","typeName":"ITrendingTopic"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/trendingTopics","method":"post"},{"specification":"Updates a specified trending topic entry in the discussionboard_trending_topics table. All updates must be for actual fields defined in the schema such as discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score. No additional or virtual fields can be referenced or modified.","description":"Updates any atomic field for a trending topic record identified by ID. Only schema-defined columns can be updated; for example, changes to ranking period date, thread reference, board reference, or trending score. This is an admin-only endpoint, used by the analytics system or authorized staff. No soft delete fields exist, so standard update/replace is applied. For deletion, use DELETE; for listing, use PATCH; for retrieval, use GET.","summary":"Update a trending topic record (discussionboard_trending_topics) by ID.","parameters":[{"name":"id","description":"Trending topic record's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the trending topic record.","typeName":"ITrendingTopic.IUpdate"},"responseBody":{"description":"Updated trending topic record as stored in discussionboard_trending_topics.","typeName":"ITrendingTopic"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/trendingTopics/{id}","method":"put"},{"specification":"Deletes a trending topic record from the discussionboard_trending_topics table. As the schema does not have a soft delete or deleted_at field, this operation performs a hard delete (permanent removal) of the record. Only the id is referenced in the deletion operation. This is restricted to admin users, as deleted topics cannot be recovered. All deletions should be auditable by external logging systems for compliance.","description":"Permanently removes a trending topic entry by its unique ID from the analytics domain. Since no soft delete field is defined in the schema, this endpoint erases the record from persistent storage. No extra fields are referenced and no archiving occurs inside this entity. Use cautiously; to retrieve or update, use the GET/PUT endpoints respectively.","summary":"Hard-delete a trending topic (discussionboard_trending_topics) by ID.","parameters":[{"name":"id","description":"Unique trending topic record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/trendingTopics/{id}","method":"delete"},{"specification":"Retrieves a list of notification templates in the discussionboard_notification_templates table, supporting search and pagination. Only atomic, schema-defined fields like code, name, subject, body, is_active, created_at, and updated_at are included. This endpoint is essential for template management, notification preference setup, and system-wide messaging infrastructure. Supports advanced queries as allowed by the INotificationTemplate.IRequest interface.","description":"Returns a filtered or full list of notification templates for administrative notification management. This PATCH operation enables searching, pagination, and bulk review of templates but references only fields existing in the notification template schema. Creation, single retrieval, update, and deletion are handled by the corresponding POST, GET, PUT, and DELETE endpoints.","summary":"List/search notification templates (discussionboard_notification_templates) with pagination and filters.","parameters":[],"requestBody":{"description":"Filter/pagination object for searching notification templates as allowed in INotificationTemplate.IRequest.","typeName":"INotificationTemplate.IRequest"},"responseBody":{"description":"Paginated results of notification templates.","typeName":"IPageINotificationTemplate"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/notificationTemplates","method":"patch"},{"specification":"Retrieves the details of a single notification template from the discussionboard_notification_templates table by its unique identifier (UUID). Only schema-defined fields are returned (e.g., code, name, subject, body, is_active, etc.). This endpoint is generally used in settings, notification workflows, and for preparing notification messages.","description":"Fetches all fields for a notification template by its ID, returning atomic template fields according to the schema. No virtual, calculated, or undefined fields are referenced. Associated endpoints: creation (POST), update (PUT), deletion (DELETE), and listing (PATCH).","summary":"Retrieve a notification template (discussionboard_notification_templates) by ID.","parameters":[{"name":"id","description":"Unique notification template ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail for the specified notification template.","typeName":"INotificationTemplate"},"authorizationRoles":null,"name":"at","path":"/discussionboard/notificationTemplates/{id}","method":"get"},{"specification":"Creates a new notification template record in the discussionboard_notification_templates table. Only fields defined in the schema are accepted: code, name, subject, body, is_active, description, created_at, and updated_at. No additional or virtual fields are accepted. This endpoint allows system admins to define new notification message templates for email, in-app, or push communication.","description":"Adds a new notification template for system infrastructure, messaging, and alert workflows. Required fields are all schema-defined; extra fields outside the notification template schema are not allowed and will be rejected. Returns the new template record as confirmation. See endpoints for update (PUT), retrieval (GET), listing (PATCH), and deletion (DELETE).","summary":"Create a notification template (discussionboard_notification_templates).","parameters":[],"requestBody":{"description":"Values for the new notification template according to the schema.","typeName":"INotificationTemplate.ICreate"},"responseBody":{"description":"Created notification template record.","typeName":"INotificationTemplate"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/notificationTemplates","method":"post"},{"specification":"Updates a specified notification template in the discussionboard_notification_templates table by its ID. All updatable fields must exist in the schema; for example, code, name, subject, body, is_active, description, created_at, updated_at. Changes to fields outside that set are not allowed. Intended for system or admin use to adjust template messages.","description":"Updates notification template fields such as name, code, description, subject, body, is_active, and metadata per schema definitions. No soft delete logic exists here, so updates directly replace the record's values. Associated endpoints include record creation (POST), detail retrieval (GET), listing (PATCH), and deletion (DELETE).","summary":"Update a notification template (discussionboard_notification_templates) by ID.","parameters":[{"name":"id","description":"Notification template's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Values to update according to the notification template schema.","typeName":"INotificationTemplate.IUpdate"},"responseBody":{"description":"Updated notification template information.","typeName":"INotificationTemplate"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/notificationTemplates/{id}","method":"put"},{"specification":"Deletes a notification template record from the discussionboard_notification_templates table. The schema does not include a deleted_at or soft delete field; thus, removal is a hard delete (permanent). The operation references only the ID. Hard deletion ensures the template is unrecoverable and should be carefully controlled to minimize messaging errors or compliance incidents.","description":"Removes the specified notification template permanently from persistent storage by its ID. No soft-delete or archival occurs, so template data is lost after deletion. Only ID is referenced. Operation is restricted to admins and should be audited externally as needed. See GET, PATCH, POST, and PUT endpoints for related CRUD.","summary":"Hard-delete a notification template (discussionboard_notification_templates) by ID.","parameters":[{"name":"id","description":"Unique notification template ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/notificationTemplates/{id}","method":"delete"}],"completed":63,"total":195,"step":0,"created_at":"2025-07-24T19:13:23.253Z"},"tokenUsage":{"facade":{"aggregate":{"total":321304,"input":{"total":300504,"cached":57344},"output":{"total":20800,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":321304,"input":{"total":300504,"cached":57344},"output":{"total":20800,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":321304,"input":{"total":300504,"cached":57344},"output":{"total":20800,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":321304,"input":{"total":300504,"cached":57344},"output":{"total":20800,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new configuration item in the discussionboard_configurations table. Each configuration consists of a unique key (string), an optional value (string or null), an optional description (string or null), and audit fields for created_at and updated_at. The API allows admins to add runtime settings and feature flags. No non-schema fields are referenced. There are no soft delete fields, so deletions are hard deletes.","description":"This operation creates a single configuration entry for platform-wide system settings, feature toggles, or policy flags according to the requirements for flexible system control and auditability. The configuration key must be unique, and value is always a string (or null for unset). Description is optional and provides admin context. Audit fields record create/update times, but only the schema fields may be referenced. Security: restricted to admins. Any attempt to add non-unique keys will result in an error. Related operations are modification, deletion, and retrieval by id.","summary":"Create a system configuration record (discussionboard_configurations).","parameters":[],"requestBody":{"description":"System configuration to be created (key, value, description, created_at/updated_at).","typeName":"IDiscussionboardConfiguration.ICreate"},"responseBody":{"description":"The created configuration record.","typeName":"IDiscussionboardConfiguration"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/configurations","method":"post"},{"specification":"Update an existing configuration item in the discussionboard_configurations table by id. Only fields from the schema are allowed. Modification is restricted to the value and description fields. Keys cannot be changed after creation and the primary key is immutable. There are no soft delete fields; out-of-band deletion uses DELETE endpoint.","description":"This operation modifies the value or description of a configuration, identified by its unique id (uuid). The key field remains immutable after creation as per database normalization and operational standards. Attempting to update the key or id field will result in an error. The updated_at field is automatically changed. Only authorized administrators can use this API. The request body follows the update structure defined in the schema. Audit is maintained using the updated_at column, but only schema fields are used.","summary":"Update a system configuration (discussionboard_configurations) by id.","parameters":[{"name":"id","description":"Primary key of the configuration to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Partial updated values for configuration (value and/or description).","typeName":"IDiscussionboardConfiguration.IUpdate"},"responseBody":{"description":"The updated configuration record.","typeName":"IDiscussionboardConfiguration"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/configurations/{id}","method":"put"},{"specification":"Delete an existing configuration from discussionboard_configurations by id. This table has no soft delete or deleted_at field, so deletion is hard (permanent). Deletions cannot be reversed. Only the id field is referenced for deletion and must be a uuid. Admin access required.","description":"This operation permanently removes a configuration record identified by its id (uuid) from the discussionboard_configurations table. There are no soft delete fields like deleted_at, so this operation performs an irreversible hard delete. The configuration key is unique and once its row is deleted, it is no longer recoverable. This endpoint is limited to admins due to the sensitivity of configuration management. No other fields are referenced except the id.","summary":"Permanently delete a configuration (discussionboard_configurations) by id (hard delete).","parameters":[{"name":"id","description":"Primary key of the configuration to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/configurations/{id}","method":"delete"},{"specification":"List/search notification log records in discussionboard_notifications. Supports filtering and pagination by relevant schema fields such as type, delivered, target_id, created_at. This operation returns multiple notification log objects (with all schema fields) to support admin and user audit, tracking, and debugging of system events/releases. There are no soft delete schema fields; data is returned as-is.","description":"This endpoint retrieves a paginated and/or filtered list of notification log records as stored in discussionboard_notifications. Query supports filters by target_id, notification type (string), delivery status (delivered boolean), created_at range, and others directly corresponding to schema fields. Each record includes id, target_id (nullable), type, title, body, delivered, timestamps, and only the actual schema fields. This allows for system and user review of notification history. Pagination/sorting are supported in request body as per established patterns. No soft delete: only unfiltered results are returned.","summary":"Get a paginated and/or filtered list of notification log records (discussionboard_notifications).","parameters":[],"requestBody":{"description":"Filter/search options for notifications (target_id, type, delivered, created_at, pagination).","typeName":"IDiscussionboardNotification.IRequest"},"responseBody":{"description":"Paginated/filtered notification log records according to request filters.","typeName":"IPageIDiscussionboardNotification"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/notifications","method":"patch"},{"specification":"Retrieve a single system notification log record by its id (uuid) from the discussionboard_notifications table. All returned fields must be from the actual schema: id, target_id (nullable), type, title, body (nullable), delivered (boolean), created_at, delivered_at (nullable). No soft delete is present so record is returned if present.","description":"This operation returns the full notification details for a single notification id as stored in discussionboard_notifications. All properties correspond to actual schema fields: id (uuid), target_id (uuid or null), type (string), title, body (nullable string), delivered (boolean, true/false), created_at, delivered_at (nullable). This supports detail review and troubleshooting by authorized users (admin, moderator). If the notification does not exist, an error is returned. Security: role-based as per permissions matrix.","summary":"Get a single notification record by id (discussionboard_notifications).","parameters":[{"name":"id","description":"Primary key id of the notification record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single notification log record.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/notifications/{id}","method":"get"},{"specification":"Create a new notification log record in the discussionboard_notifications table. Required fields are from the schema: type (string), title, delivered (boolean), and created_at. Fields target_id (uuid) and body (string) are optional. No soft-delete fields are present; data is atomic per row by schema definition.","description":"Creates a notification log record representing a system/user event as described in the requirements. The log includes the type (string, e.g., user_mention, announcement), a title, a body (optional), a delivery status (boolean), and optional target_id (uuid) for personalized notifications. The schema's required fields are strictly enforced; created_at timestamp is required either from the request or system clock. Title and type cannot be modified after creation. Only admin or system-level users may create notifications for compliance and audit reasons. There is no undo; use with care.","summary":"Create a notification log entry (discussionboard_notifications).","parameters":[],"requestBody":{"description":"New notification log data (type, title, delivered, created_at, etc).","typeName":"IDiscussionboardNotification.ICreate"},"responseBody":{"description":"The created notification log record.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/notifications","method":"post"},{"specification":"Update an existing notification log record in the discussionboard_notifications table, identified by its id (uuid). Only schema fields may be updated; id is immutable. The operation can modify type, title, body, delivered status, delivered_at, target_id. No soft delete behavior; hard field update only.","description":"Modifies an existing notification in discussionboard_notifications using the update pattern from the business requirements. The changeable fields are type (string), title (string), body (nullable string), delivered (boolean), delivered_at (nullable timestamp), and target_id (uuid or null). Audit fields (created_at) remain immutable as per system design. Only admins may perform this operation. Id and created_at are never changed. Changes are tracked in audit logs (out of band).","summary":"Update a notification log record (discussionboard_notifications) by id.","parameters":[{"name":"id","description":"Primary key of the notification log to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification log details (type, title, body, delivered, delivered_at, target_id).","typeName":"IDiscussionboardNotification.IUpdate"},"responseBody":{"description":"The updated notification log record.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/notifications/{id}","method":"put"},{"specification":"Delete an existing notification log in discussionboard_notifications by its primary id (uuid). No soft delete field exists, so this operation is a permanent, hard delete. Irreversible and only allowed for admin or system-level users. Only id is referenced; data removal is permanent. Use auditing and caution.","description":"This endpoint irreversibly removes a notification log record from discussionboard_notifications by id (uuid). Deletion is hard since there are no soft delete fields or retention time policy in the schema. It is suitable for invalid or accidental log entries that must be purged. Requires admin privileges to use. Related records (e.g., referenced notifications elsewhere) are not affected.","summary":"Permanently delete a notification log record by id (discussionboard_notifications, hard delete).","parameters":[{"name":"id","description":"Primary key of the notification log to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/notifications/{id}","method":"delete"},{"specification":"Search/list settings in the discussionboard_settings table using patch method for complex search/filtering. Settings are stored per context/scope, with key/value pairs. All filtering is on schema fields: scope_id (uuid), scope_type (string), key (string), value (string or null), created_at, updated_at. Supports pagination and complex filters in body. No soft deletion exists; only as-is data is returned.","description":"This API retrieves a list of settings records from discussionboard_settings filtered by schema fields such as scope_id, scope_type, key, value, created_at range, and paginates results. Used for platform/business area feature toggles and operational rules. No soft delete fields exist, so no distinction for deleted items (as only active data is present). Admin role required to access this endpoint. Request body enables advanced search and full compliance with the schema.","summary":"List/search settings in discussionboard_settings (patch, paginated/filterable).","parameters":[],"requestBody":{"description":"Search/filter options for retrieving per-feature/area settings.","typeName":"IDiscussionboardSetting.IRequest"},"responseBody":{"description":"Paginated/filtered setting records according to search.","typeName":"IPageIDiscussionboardSetting"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/settings","method":"patch"},{"specification":"Get a single settings record from discussionboard_settings by id. Only schema fields are returned (id, scope_id, scope_type, key, value, description, created_at, updated_at). No soft delete behavior; returns only active record if present.","description":"Returns a full detail setting record by id from discussionboard_settings. All fields are as stored in schema: id (uuid), scope_id, scope_type, key, value (string or null), description (nullable), created_at, updated_at. Used by admins to review or manage per-scope business rules/configs. Returns error if id not found. No other fields referenced. Admin only.","summary":"Get a single discussionboard_settings record by id.","parameters":[{"name":"id","description":"Primary key id of the setting record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single setting record.","typeName":"IDiscussionboardSetting"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/settings/{id}","method":"get"},{"specification":"Create a new per-scope/per-feature setting in discussionboard_settings. Required fields (from schema): scope_type, key. Optional fields: value (string or null), description (string or null), scope_id (uuid or null). Admins may manage area- or feature-specific settings from business rules or operational need. No soft delete; all fields must exist in schema.","description":"Creates a discussionboard_settings record for a specific scope (e.g., channel, section, feature_flag). Required fields are scope_type and key (both string). Optional: value (string or null), description (string or null), and scope_id (uuid or null for global settings). created_at and updated_at are stamped by the system (not user input). This API gives admins ability to add new toggles/rules contextually. Role-restricted.","summary":"Create a new setting in discussionboard_settings.","parameters":[],"requestBody":{"description":"Setting data for per-feature/area toggle/configuration.","typeName":"IDiscussionboardSetting.ICreate"},"responseBody":{"description":"The created setting record.","typeName":"IDiscussionboardSetting"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/settings","method":"post"},{"specification":"Update an existing setting in discussionboard_settings by id. Updatable fields: scope_id, scope_type, key, value, description (all from schema). No soft delete; update is hard-change to row contents. Audit trail maintained via updated_at. Admin only.","description":"This operation updates fields of a settings record in discussionboard_settings based on the id (uuid). Updatable fields per schema: scope_id (uuid or null), scope_type (string), key (string), value (string or null), description (string or null). Only schema fields are modified, and audit trail is maintained via updated_at (auto). Attempting to update id will result in error. Admin role required.","summary":"Update a setting in discussionboard_settings by id.","parameters":[{"name":"id","description":"Primary key id of the setting record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the target setting (schema fields only).","typeName":"IDiscussionboardSetting.IUpdate"},"responseBody":{"description":"The updated setting record.","typeName":"IDiscussionboardSetting"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/settings/{id}","method":"put"}],"completed":75,"total":195,"step":0,"created_at":"2025-07-24T19:13:29.934Z"},"tokenUsage":{"facade":{"aggregate":{"total":367946,"input":{"total":343964,"cached":57344},"output":{"total":23982,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":367946,"input":{"total":343964,"cached":57344},"output":{"total":23982,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":367946,"input":{"total":343964,"cached":57344},"output":{"total":23982,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":367946,"input":{"total":343964,"cached":57344},"output":{"total":23982,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Deletes an existing report type from the discussionboard_report_types table. This operation performs a hard delete, as the schema does not include a soft-delete field such as deleted_at or is_deleted. Only the actual fields present in the schema are referenced, ensuring compliance with the provided data model. Deletion will permanently remove the report type, making it unavailable for future reports; clients must ensure the ID is correct as there is no soft-restore capability. Use with care, as deleted records are not recoverable and associated references (e.g., to existing reports) may be impacted depending on application logic.","description":"This API endpoint deletes a report type record from the discussionboard_report_types table.\n\nSince discussionboard_report_types does not have a soft delete field (such as deleted_at or is_deleted), this operation performs a hard delete, permanently removing the report type from the database. This approach is appropriate for cases where a report type should no longer exist, and there is no need for audit or restore. Deletion is based solely on the id (UUID) path parameter, which must match exactly with the existing primary key in the schema.\n\nNo other fields are referenced or affected, and deletion cannot be undone through this endpoint. Attempts to delete a non-existent id will result in an error. Any associations dependent on the deleted record should be managed according to business needs (e.g., existing reports using the type may become orphaned, so caution is advised).\n\nAPI consumers should ensure id is valid before invoking deletion. This operation cannot delete other fields or perform cascading deletes to related tables; only the identified report type row is removed.","summary":"Hard delete a report type from discussionboard_report_types by primary key id.","parameters":[{"name":"id","description":"Target report type's unique identifier (primary key in discussionboard_report_types).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/reportTypes/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of moderation actions from the discussionboard_moderation_actions table. The operation accepts complex search, filtering, and pagination in the request body to support analytics and review needs. The response includes only fields defined in the schema and does not expose any data not present on the moderation action entity.","description":"Fetches a paginated, filterable list of moderation actions from discussionboard_moderation_actions. The request body allows searching (by actioned_at, rationale, action_type, acting_moderator_id, etc.), filtering (by target_object_type, report_id), and pagination (page, limit) to accommodate analytics dashboards and review workflows.\n\nNo data beyond the schema is exposed; only properties like id, report_id, acting_moderator_id, actioned_at, action_type, rationale, and target references are included. The endpoint supports necessary validation and input checking for performance and security.\n\nReturns a structured page of moderation actions conforming to the schema. This endpoint supports compliance, audit trails, and moderator/admin analytics use cases. It does not aggregate, compute, or expose joined/derived data and avoids referencing fields that do not exist in the table.","summary":"List and search moderation actions from discussionboard_moderation_actions with filters and pagination.","parameters":[],"requestBody":{"description":"Search and pagination filters for moderation actions list API.","typeName":"IDiscussionboardModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation actions.","typeName":"IPageIDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/moderationActions","method":"patch"},{"specification":"Retrieves a specific moderation action from discussionboard_moderation_actions by its unique ID. Returns the moderation action entity as it exists in the database, using only fields present in the schema for complete compliance.","description":"Returns full details of a moderation action as recorded in discussionboard_moderation_actions, identified by its unique id. The returned data includes only schema-defined fields such as id, report_id, acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at. No additional or derived data is included in the response.\n\nIf the specified moderation action does not exist, returns a not found error. This endpoint is used by admins and moderators for auditing, compliance, and reviewing moderation history. All data comes directly from the underlying schema entity.","summary":"Fetch a single moderation action from discussionboard_moderation_actions by id.","parameters":[{"name":"id","description":"Unique moderation action id (primary key in discussionboard_moderation_actions).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation action record.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/moderationActions/{id}","method":"get"},{"specification":"Creates a new moderation action record in the discussionboard_moderation_actions table. The request body must match the schema fields and will only set fields that exist. The operation will persist atomic moderation actions, following compliance and audit needs.","description":"This endpoint allows creating a new moderation action in the discussionboard_moderation_actions table. The payload must include all required fields such as acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at, with an optional report_id. Only schema-defined fields are accepted; fields like created_by or deleted_at not present in the schema are ignored.\n\nCreation is logged for audit and compliance, supporting workflows such as flagging, editing, warning, or banning objects or members. Validation ensures payload matches schema constraints. Only authorized roles (admin, moderator) may invoke this API, and only atomic moderation actions are created (no side effects or cascading actions outside the schema definition).","summary":"Create a new moderation action in discussionboard_moderation_actions.","parameters":[],"requestBody":{"description":"New moderation action details per schema.","typeName":"IDiscussionboardModerationAction.ICreate"},"responseBody":{"description":"Created moderation action entity.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/discussionboard/moderationActions","method":"post"},{"specification":"Updates an existing moderation action in the discussionboard_moderation_actions table, referencing only names and fields listed in the schema. Update operations are limited to schema fields and do not reference or update any soft delete or audit fields not present.","description":"This endpoint updates a moderation action already in discussionboard_moderation_actions by id. Only fields defined on the moderation action entity can be updated, such as report_id, acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at. Fields like deleted_at or created_by are not part of the schema and thus not referenced or handled.\n\nIf the specified moderation action does not exist, a not found error is returned. Upon successful update, the new state is returned. Only admins and moderators may perform updates. This supports correcting or augmenting moderation action logs for compliance and auditing, strictly within schema boundaries.","summary":"Update a moderation action in discussionboard_moderation_actions by id.","parameters":[{"name":"id","description":"Unique moderation action id (primary key in discussionboard_moderation_actions).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated moderation action data, using only schema-defined fields.","typeName":"IDiscussionboardModerationAction.IUpdate"},"responseBody":{"description":"Updated moderation action entity.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/moderationActions/{id}","method":"put"},{"specification":"Deletes a moderation action from discussionboard_moderation_actions by unique id. This performs a hard delete, as no soft delete field exists in the moderation action schema. Entirely removes the record, so caution is advised regarding loss of audit trail.","description":"Removes a moderation action from the database using its primary key id. No soft delete mechanism exists in the schema, so this is a permanent hard delete. Deleted records are not recoverable through the API and deletion is final.\n\nOnly the primary key is required; associated audit/compliance consequences are the responsibility of the client. If the id does not match any record, a not found error is returned. Use this endpoint only for record correction or strict compliance cases; standard deletion removes all record details from the system.\n\nNo other fields are referenced, as per the schema's definition.","summary":"Hard delete moderation action from discussionboard_moderation_actions by id.","parameters":[{"name":"id","description":"Primary key id of the moderation action to delete (in discussionboard_moderation_actions).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/moderationActions/{id}","method":"delete"},{"specification":"Retrieves a paginated and filterable list of bans (suspensions) from discussionboard_bans. Accepts a search and filter request body, responding with only existing schema fields. Does not expose non-existent audit, soft delete, created_by, or other fields.","description":"Fetches a paginated, filterable list of bans as defined in discussionboard_bans. Allows searching and filtering (by acting_moderator_id, banned_member_id, report_id, ban_type, reason, banned_at, etc.) with a request body supporting pagination options. All exposed fields exist in the schema; e.g., id, banned_member_id, acting_moderator_id, report_id, reason, ban_type, banned_at, expires_at.\n\nNo fields (such as deleted_at, created_by) outside the schema are referenced or exposed. The endpoint enables moderation dashboards, analytics, and audit workflows concerning member bans for infractions or content violations. Only details atomic to the ban event are returned, with no cascading logic or derived values. Clients must use correct filter and search input to tailor results.","summary":"List and search bans from discussionboard_bans using filters and pagination.","parameters":[],"requestBody":{"description":"Filters and pagination for bans listing API.","typeName":"IDiscussionboardBan.IRequest"},"responseBody":{"description":"Paginated list of ban entries.","typeName":"IPageIDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/bans","method":"patch"},{"specification":"Retrieves a specific ban/suspension entry from the discussionboard_bans table by id. Pulls only schema-defined fields for audit and moderation workflows. Does not pull, update, or reference any fields not in the schema.","description":"Returns the full details of a ban or suspension event as recorded in discussionboard_bans, found by its unique id. Response includes only fields present in the schema, such as id, banned_member_id, acting_moderator_id, report_id, reason, ban_type, banned_at, expires_at. No non-existent, derived, or extra fields are included.\n\nIf not found, a not found error is provided. This endpoint supports audit, analytics, and review workflows for moderation and admin roles. No cascade effects or additional information about linked objects is returned; only the atomic ban entity per schema.","summary":"Fetch a single ban record from discussionboard_bans by id.","parameters":[{"name":"id","description":"Unique ban id (primary key in discussionboard_bans).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Ban record details for given id.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/bans/{id}","method":"get"},{"specification":"Creates a new ban or suspension event in the discussionboard_bans table. Payload must conform strictly to the schema, using only fields present in discussionboard_bans, and appropriate validation for business rules regarding infraction handling. No soft delete is implemented.","description":"Creates a new entry in discussionboard_bans, representing a formal restriction on a member's system privileges. Payload must include all required properties: banned_member_id, acting_moderator_id, reason, ban_type, banned_at, and may include report_id and expires_at. No non-schema, derived, or audit fields are accepted; only actual schema fields are referenced and stored.\n\nCreation is logged for audit and compliance purposes, supporting escalations after repeated or severe violations. On success, returns the complete ban entity as saved. Authorization is limited to admin and moderator roles. Downstream effects (such as restricting logins) depend on application logic, not this endpoint. Input validation is enforced for field types, format, and required-optional schema alignment.","summary":"Create a new ban in discussionboard_bans.","parameters":[],"requestBody":{"description":"Ban creation payload as per discussionboard_bans schema.","typeName":"IDiscussionboardBan.ICreate"},"responseBody":{"description":"Created ban entity record.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/discussionboard/bans","method":"post"},{"specification":"Updates an existing ban in the discussionboard_bans table. Only existing schema fields can be updated, and there is no soft delete or hidden audit trail according to the data model. The endpoint supports administrative correction of ban details.","description":"Updates an individual ban record stored in discussionboard_bans, referenced by its unique id. Payload may set or update only existing fields: banned_member_id, acting_moderator_id, report_id, reason, ban_type, banned_at, expires_at. No support for updating non-schema audit/soft delete fields.\n\nIf not found, an appropriate error is returned. After update, the endpoint responds with the full new ban record. Enables admins/moderators to correct or revise ban reason, type, or timing based on case updates. No indirect effects or cascading updates occur; only fields present in the schema are affected.","summary":"Update ban details in discussionboard_bans using id.","parameters":[{"name":"id","description":"Primary ban key id (in discussionboard_bans).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Ban update payload as per discussionboard_bans schema.","typeName":"IDiscussionboardBan.IUpdate"},"responseBody":{"description":"Updated ban entity record.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/bans/{id}","method":"put"},{"specification":"Deletes a ban record in discussionboard_bans by id. This is a hard delete—the schema does not provide for a soft-delete or recoverable status flag. Deletion is permanent, requiring administrative privileges, and care must be taken due to audit/compliance needs.","description":"Deletes a ban record from the discussionboard_bans table using its unique id (primary key). Performs a hard delete with no soft delete field or recovery logic available in the schema. Once deleted, the ban record is permanently removed and cannot be restored through this endpoint.\n\nOnly the id is required in the path. This operation is irreversible and should be used for administrative corrections or compliance reviews where bans are found to be erroneous. No related objects or dependencies are updated; this endpoint affects only the ban entity itself.","summary":"Hard delete a ban in discussionboard_bans by id.","parameters":[{"name":"id","description":"Ban id to hard delete (primary key in discussionboard_bans).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/bans/{id}","method":"delete"},{"specification":"Fetches a paginated, filterable list of warnings issued to members from discussionboard_warnings. The endpoint accepts only schema-defined fields as search and pagination filters, returning entities only with schema-compliant properties. No hidden, derived, or audit fields are present or referenced.","description":"Returns a list of warning events issued to members as defined in discussionboard_warnings, supporting search, filter, and pagination options via request body. Search includes acting_moderator_id, warned_member_id, report_id, reason, warned_at, with results paged for moderation dashboards.\n\nOnly actual fields from the schema are referenced or returned—no deleted_at, created_by, or compliance/audit fields not present in the schema are accepted or shown. Enables moderator/admin monitoring and analytics of warnings by various search criteria. Entities in result use only actual schema fields.","summary":"List and search warnings issued to members, using filters and pagination.","parameters":[],"requestBody":{"description":"Search and pagination parameters for warnings listing API.","typeName":"IDiscussionboardWarning.IRequest"},"responseBody":{"description":"Paginated list of warning events to members.","typeName":"IPageIDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/warnings","method":"patch"}],"completed":87,"total":195,"step":0,"created_at":"2025-07-24T19:13:33.601Z"},"tokenUsage":{"facade":{"aggregate":{"total":415052,"input":{"total":387438,"cached":57344},"output":{"total":27614,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":415052,"input":{"total":387438,"cached":57344},"output":{"total":27614,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":415052,"input":{"total":387438,"cached":57344},"output":{"total":27614,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":415052,"input":{"total":387438,"cached":57344},"output":{"total":27614,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements PATCH (list/search) operation for 'discussionboard_comment_snapshots' entity in the Comments domain. Provides advanced list retrieval of comment version histories (snapshots) for audit and moderation workflows. Exposes full search and pagination capability over atomic fields such as id, discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, and snapshot_created_at. No non-existent fields are referenced. This endpoint should be used when moderators or users need to review versioned comment histories for dispute resolution or rollback.\n\nThe results should be filterable by relevant fields (such as comment id, member id, post id, version, and snapshot date) and support pagination and sorting to handle large sets of history data. Only fields present in the Prisma schema can be used for search and response content. The endpoint will not expose comments' deleted_at directly since that field does not exist in this entity.\n\nSecurity: Should only be exposed to authorized users (moderator/admin) due to the sensitive nature of history data. Validation rules must ensure all filters reference actual schema fields. Related APIs: GET for individual snapshot, POST for create, PUT for update, DELETE for hard delete (no soft-delete field).","description":"Retrieves a paginated, filterable list of comment history snapshots from discussionboard_comment_snapshots. Supports key audit and moderation use cases, allowing advanced search by comment, member, post, version, or snapshot_created_at. ONLY schema-present fields can be used for filtering or display; no non-existent fields referenced. Fulfills comment version audit requirements without exposing non-existent properties.","summary":"List/search comment snapshots (version histories) in discussionboard_comment_snapshots.","parameters":[],"requestBody":{"description":"Search and pagination parameters for listing comment snapshots. Must only reference schema fields: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, snapshot_created_at.","typeName":"IDiscussionboardCommentSnapshot.IRequest"},"responseBody":{"description":"Paginated and filtered list of comment snapshots, containing only schema-defined fields.","typeName":"IPageDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/commentSnapshots","method":"patch"},{"specification":"GET detail/information operation for 'discussionboard_comment_snapshots' entity. Retrieves a single, atomic comment snapshot by unique id, as mandated by moderation and audit requirements. Only references actual schema fields: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, and snapshot_created_at. Does not assume existence of extra audit properties. This endpoint is crucial for comment version rollback, moderator review, and displaying edit history. No soft/hard delete logic needed at this level (history is immutable and only deleted via DELETE endpoint).\n\nSecurity: Exposed to roles with audit and moderation permissions. Validation must ensure id refers to schema PK.","description":"Fetches a specific comment snapshot from discussionboard_comment_snapshots by its primary key id. Exposes ONLY schema-present fields for history/audit display. Intended for use-cases such as reviewing full edit details, audit trails, or showing change history to moderators/admins. Does not reference deleted_at, created_by, or fields not in schema.","summary":"Get a specific comment snapshot (version history entry) from discussionboard_comment_snapshots by id.","parameters":[{"name":"id","description":"Target comment snapshot's id (UUID primary key).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail of the comment snapshot, including only schema-defined fields.","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/commentSnapshots/{id}","method":"get"},{"specification":"POST creation operation for 'discussionboard_comment_snapshots' entity. Allows creation of a new historical snapshot of a comment (for version control, audit, or moderation). Payload must strictly follow actual schema fields: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, and snapshot_created_at. No fields like deleted_at or created_by, since these do not exist in the schema. On success, returns created snapshot data.\n\nSecurity: Exposed only to backend/authenticated system components or moderator/admin roles as versioning is usually system-triggered. Input validation must ensure all POST data matches existing schema properties. Related endpoints: PATCH for list/search, GET for detail, PUT for strict updates, DELETE for hard delete.","description":"Creates a new comment snapshot/version record for a comment, with input strictly matching discussionboard_comment_snapshots schema. All POST data must correspond precisely to schema fields (comment id, member id, post id, body, version, snapshot_created_at). No soft-delete/extra fields allowed.","summary":"Create a comment version snapshot in discussionboard_comment_snapshots.","parameters":[],"requestBody":{"description":"Creation data for new comment snapshot. All fields must match schema: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, snapshot_created_at.","typeName":"IDiscussionboardCommentSnapshot.ICreate"},"responseBody":{"description":"Created snapshot entity as per schema.","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/discussionboard/commentSnapshots","method":"post"},{"specification":"PUT update operation for 'discussionboard_comment_snapshots'. Edits/mutates a snapshot by its id, strictly referencing actual schema fields: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, and snapshot_created_at. No non-existent/audit fields referenced (e.g., created_by, deleted_at). Intended for administrative fixes, audit corrections, or exceptional restoration scenarios. Partial updates not supported—full replacements only. Validation rules enforce strict field mapping according to Prisma schema. No soft delete possible. Exposed to advanced roles (moderator/admin).","description":"Full-replacement update of a comment snapshot (version history record) in discussionboard_comment_snapshots by id. Request body updates the entire record, strictly following schema field definitions.","summary":"Update an existing comment snapshot (history entry) by id in discussionboard_comment_snapshots.","parameters":[{"name":"id","description":"Target comment snapshot's id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New full data for the comment snapshot. Strictly matches schema fields.","typeName":"IDiscussionboardCommentSnapshot.IUpdate"},"responseBody":{"description":"Updated snapshot record (all schema fields).","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/commentSnapshots/{id}","method":"put"},{"specification":"DELETE operation for 'discussionboard_comment_snapshots' by id. As this entity (comment snapshot) contains NO soft delete field (e.g., no deleted_at), this endpoint performs a hard delete (permanent removal) of the record from the system. All validation and operation must only reference schema fields. It is only allowed for admin or moderator roles for audit/cleanup purposes. Documentation must clarify that this is an irreversible, permanent removal as per requirement analysis and schema actuality.\n\nSecurity: Restrict to admin/moderator; strict schema field validation. Related endpoints include PATCH list, GET detail, POST create, PUT update.","description":"Permanently removes the targeted comment snapshot (version history record) from discussionboard_comment_snapshots by id. There is no 'deleted_at' or similar soft delete property in schema; removal is irreversible and physical. Use for audit correction or redaction in compliance cases only.","summary":"Hard-delete a comment snapshot (history entry) by id from discussionboard_comment_snapshots.","parameters":[{"name":"id","description":"Target comment snapshot's id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted snapshot record (if returning after hard delete), or confirmation object.","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"erase","path":"/discussionboard/commentSnapshots/{id}","method":"delete"},{"specification":"PATCH (search/list) operation for 'discussionboard_comment_votes' in the Comments domain. Implements advanced, paginated retrieval for audit, moderation, and analytics purposes. Filters may only reference existing schema-present fields: id, discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at. Does NOT reference non-existent fields (e.g., deleted_at, created_by). Use for reviewing voting records, investigating vote behavior, or handling rate-limiting analysis. Supports role-based access for audit users.\n\nSecurity: Exposed to admin/moderator. Related endpoints: GET detail, POST create, PUT update, DELETE erase.","description":"Retrieves a full, filterable, paginated list of comment votes (upvotes/downvotes) in discussionboard_comment_votes. Filters/response strictly constrained to fields actually present in schema: id, comment id, member id, vote type, created_at, updated_at. Fulfills audit and moderation use-cases, with NO reference to non-existent fields.","summary":"List/search comment votes (upvote/downvote records) in discussionboard_comment_votes.","parameters":[],"requestBody":{"description":"Search and pagination object for listing comment votes. Only schema-real fields allowed: id, discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at.","typeName":"IDiscussionboardCommentVote.IRequest"},"responseBody":{"description":"Paginated/filterable list of comment votes, each with only schema-present fields.","typeName":"IPageDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/commentVotes","method":"patch"},{"specification":"GET detail operation for 'discussionboard_comment_votes'. Retrieves atomic record of a specific comment vote via its unique id. Only real schema fields referenced: id, discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at. Does not use deleted_at or extra audit fields. Purpose: enables audit, analytics, and troubleshooting for vote behaviors. Strictly aligned to Prisma schema and requirements. No soft/hard delete logic handled at this endpoint level.","description":"Fetches detailed data for a specific comment vote (upvote/downvote) from discussionboard_comment_votes by id. All returned fields are defined in schema: id, comment id, member id, vote_type, created_at, updated_at. Support audit and moderation workflows.","summary":"Get specific comment vote (upvote/downvote) record from discussionboard_comment_votes by id.","parameters":[{"name":"id","description":"Target comment vote id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment vote data as per schema definition.","typeName":"IDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/commentVotes/{id}","method":"get"},{"specification":"POST creation operation for 'discussionboard_comment_votes'. Creates new vote entry in discussionboard_comment_votes table. Payload strictly constrained to fields in schema: discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at (updated_at optional/null if first vote). Does NOT include deleted_at (doesn't exist). Vote uniqueness and update logic are managed at DB/app level.\n\nSecurity: Exposed to logged-in users. Validation must ensure only schema-present fields are posted. Related endpoints: PATCH for list, GET detail, PUT update, DELETE erase.","description":"Creates new upvote/downvote record in discussionboard_comment_votes. POST body must include only fields actually in schema: comment id, member id, vote_type, created_at, updated_at (optional/null unless updating). Optionality must mirror schema. Does not reference any non-existent fields.","summary":"Create a comment vote (upvote/downvote) record in discussionboard_comment_votes.","parameters":[],"requestBody":{"description":"Data for creating comment vote. All POST fields must reflect only those present in schema.","typeName":"IDiscussionboardCommentVote.ICreate"},"responseBody":{"description":"Newly created comment vote (schema fields only).","typeName":"IDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/discussionboard/commentVotes","method":"post"},{"specification":"PUT update operation for 'discussionboard_comment_votes' by id. Fully replaces an existing upvote/downvote record by its UUID. All fields strictly conform to schema: discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at. Request and response must not mention deleted_at or created_by. Security: Admin/moderator access. This endpoint is essential for correcting erroneous or appealed vote records in compliance cases. Related: PATCH (list), GET (detail), DELETE (erase).","description":"Replaces the full record for a comment vote (upvote/downvote) by id, using only schema-present fields. Used in admin or moderation workflows to correct or restore voting actions. No partial updates. No reference to non-existent properties.","summary":"Update a comment vote (upvote/downvote) by id in discussionboard_comment_votes.","parameters":[{"name":"id","description":"Target comment vote id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full replacement/update of comment vote record by id. Uses only schema-present fields.","typeName":"IDiscussionboardCommentVote.IUpdate"},"responseBody":{"description":"Updated comment vote record, as per schema definition.","typeName":"IDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/commentVotes/{id}","method":"put"},{"specification":"DELETE operation for 'discussionboard_comment_votes' by id. As the table has no soft-delete fields (no deleted_at, is_deleted), this is a hard delete (permanent removal). Removes the upvote/downvote record for compliance/audit correction. No non-existent fields may be referenced in description or logic. Available only to admin or moderator roles for audit, compliance, or redress cases. All field/validation logic strictly bound to schema.","description":"Permanently deletes a comment vote (upvote/downvote) by id from discussionboard_comment_votes. As there is no soft delete column, this action is unrecoverable and physically removes the record from storage. Only schema-defined fields are referenced.","summary":"Hard delete comment vote (upvote/downvote) by id from discussionboard_comment_votes.","parameters":[{"name":"id","description":"Target comment vote id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted vote record info (if returned after hard delete), or confirmation.","typeName":"IDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"erase","path":"/discussionboard/commentVotes/{id}","method":"delete"},{"specification":"PATCH (list/search) operation for 'discussionboard_comment_reports'. Paginates and filters report records for moderation/tracking workflow. Only fields in schema discussionboard_comment_reports are referenced: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_report_type_id, reason, created_at. Used for audit, analytics, escalation workflow. Does NOT reference deleted_at. The endpoint is critical for moderation dashboards and root-cause/appeal investigations.\n\nSecurity: Moderator/admin only. Related: GET detail, POST create, PUT update, DELETE erase.","description":"Retrieves filterable, paginated report records on comments from discussionboard_comment_reports, with search\filters strictly bound to fields actually present: id, comment id, member id, report type id, reason, created_at. Enables moderation, audit, compliance, and appeal flows.","summary":"List/search comment reports in discussionboard_comment_reports.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for listing comment reports. Fields allowed: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_report_type_id, reason, created_at.","typeName":"IDiscussionboardCommentReport.IRequest"},"responseBody":{"description":"Filtered, paginated list of comment reports, showing only schema fields.","typeName":"IPageDiscussionboardCommentReport"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/commentReports","method":"patch"},{"specification":"GET detail operation for 'discussionboard_comment_reports' entity. Fetches single comment report record by UUID PK. Only schema-present fields referenced in request and response: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_report_type_id, reason, created_at. No reference to extra/audit fields like deleted_at, author, etc. Used for review, escalation, appeals, and compliance workflows for moderation. Security: Administrator/moderator only. Related endpoints: PATCH list, POST create, PUT update, DELETE erase.","description":"Returns a detailed comment report entry from discussionboard_comment_reports by id, with full record shown (schema fields only). For moderation review, auditing, and appeals processes. Strict schema-compliance for all field references; no mention of deleted_at or extra audit fields.","summary":"Get a specific comment report record from discussionboard_comment_reports by id.","parameters":[{"name":"id","description":"Target comment report id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full comment report record from schema fields only.","typeName":"IDiscussionboardCommentReport"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/commentReports/{id}","method":"get"}],"completed":99,"total":195,"step":0,"created_at":"2025-07-24T19:13:34.289Z"},"tokenUsage":{"facade":{"aggregate":{"total":462248,"input":{"total":430902,"cached":83584},"output":{"total":31346,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":462248,"input":{"total":430902,"cached":83584},"output":{"total":31346,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":462248,"input":{"total":430902,"cached":83584},"output":{"total":31346,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":462248,"input":{"total":430902,"cached":83584},"output":{"total":31346,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Retrieves a single warning record from the 'discussionboard_warnings' table by its unique identifier. Each warning record captures an instance where a member was officially warned by a moderator or admin. Per the schema, the model contains these fields: id (UUID, PK), warned_member_id (member UUID, referencing the warned member), acting_moderator_id (UUID, referencing the moderator/admin who issued the warning), report_id (optional UUID, referencing the incident report that triggered the warning), reason (text for the warning), and warned_at (timestamp of warning). This endpoint is used for audit and member escalation review. Only schema fields above may be referenced. No soft delete is present; all warnings are permanent unless hard deleted.","description":"This API operation fetches a specific warning record from the 'discussionboard_warnings' table, providing all atomic information associated with that warning. The endpoint requires the 'id' path parameter representing the warning's unique identifier (UUID). Upon successful retrieval, the endpoint returns full details including: the identifier of the warned member (warned_member_id), the rationale for the warning (reason), the acting moderator or admin (acting_moderator_id), any related report_id, and the timestamp of issuance (warned_at). This operation supports audit trail workflows, member appeal workflows, and compliance review as described in platform business rules. All referenced fields exist in the schema and additional properties cannot be assumed. If the record does not exist or access is restricted, a suitable error response is returned. No soft delete is present. Only schema fields are included in results.","summary":"Get single warning record from 'discussionboard_warnings' table by its ID (PK, UUID).","parameters":[{"name":"id","description":"Unique warning identifier (primary key, UUID) to fetch the target warning record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Warning record matching the given id, with all schema fields: id, warned_member_id, acting_moderator_id, report_id, reason, warned_at.","typeName":"IDiscussionboardWarning"},"authorizationRoles":null,"name":"at","path":"/discussionboard/warnings/{id}","method":"get"},{"specification":"Creates a new warning record in the 'discussionboard_warnings' table representing an official moderation warning issued to a member. All required fields per the schema must be supplied: id (UUID, PK; system generated), warned_member_id (UUID, FK), acting_moderator_id (UUID, FK), report_id (optional UUID, FK), reason (text), and warned_at (timestamp). This implements the formal warning step in moderation workflows. All fields referenced are schema-defined. No soft delete or archival behavior exists; warnings are permanent entries.","description":"This API operation enables moderators or admins to record a new warning issued to a platform member. The request body must include all required fields defined in the discussionboard_warnings schema: warned_member_id (the UUID of the member receiving the warning), acting_moderator_id (UUID of the moderator/admin issuing the warning), report_id (UUID linking this warning to an originating incident report, optional), reason (the text rationale for the warning), and warned_at (the timestamp of issuance). The 'id' field is generated by the system/database. This operation fulfills audit and escalation process requirements. No non-schema fields are permitted, and no soft delete/archival logic applies. Only schema-defined fields may be referenced, and attempts to include undefined properties will result in validation errors.","summary":"Create new warning record in 'discussionboard_warnings' table with schema-required fields.","parameters":[],"requestBody":{"description":"Warning creation payload: warned_member_id, acting_moderator_id, report_id (optional), reason, warned_at. Must map to schema fields exactly.","typeName":"IDiscussionboardWarning.ICreate"},"responseBody":{"description":"Warning record as stored after creation. Contains all schema fields with assigned or default values, including id.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/discussionboard/warnings","method":"post"},{"specification":"Updates a specific warning record in the 'discussionboard_warnings' table by its unique id (UUID, PK). Any schema field may be updated: warned_member_id, acting_moderator_id, report_id (optional), reason, and warned_at. The endpoint directly references only schema fields. Archival and soft delete logic do not exist; all modifications are hard updates to the persisted values. The schema does not define status/history fields, so only atomic updates of defined properties are allowed.","description":"This API operation updates the details of a single warning (discussionboard_warnings) using its unique identifier (id, UUID, PK). The request body may include any fields allowed by the schema: warned_member_id (UUID), acting_moderator_id (UUID), report_id (UUID, nullable), reason (string), and warned_at (timestamp). The operation supports correction or annotation of warning details for audit or compliance reasons. No soft delete or archival logic is available, nor may non-schema properties be referenced. Attempts to update properties not defined in the schema will result in validation errors. Only schema fields are accepted for update.","summary":"Update existing warning record by id; allowed fields: warned_member_id, acting_moderator_id, report_id, reason, warned_at.","parameters":[{"name":"id","description":"Target warning's unique identifier (UUID, PK) for update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the warning: per schema definition, any subset of warned_member_id, acting_moderator_id, report_id, reason, warned_at.","typeName":"IDiscussionboardWarning.IUpdate"},"responseBody":{"description":"Warning record after update, containing all schema fields with new values.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionboard/warnings/{id}","method":"put"},{"specification":"Deletes a single warning record in the 'discussionboard_warnings' table by its unique identifier (UUID, PK). The schema does NOT define any soft delete (no deleted_at or archival field), so deletion is permanent (hard delete). All referenced fields must exist in the schema. This operation is restricted to moderator and admin roles for compliance.","description":"This API operation removes a warning record from the discussionboard_warnings table by its id (UUID, PK). As the schema provides no support for soft delete (no deleted_at or is_deleted fields), this operation performs a true hard delete, permanently erasing the record. Only schema-defined fields are referenced. This operation is audit-relevant and protected; only users with moderator or admin roles are permitted to execute it. If the specified warning does not exist, an appropriate error is returned. The operation should return a success status if deletion is successful. No additional data is returned beyond confirmation.","summary":"Delete warning record by id—permanent hard delete as no soft delete exists in schema.","parameters":[{"name":"id","description":"Unique warning identifier (UUID) to target record for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/warnings/{id}","method":"delete"},{"specification":"Retrieves a paginated, searchable list of engagement metrics records from the 'discussionboard_engagement_metrics' table. Fields include: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count. Does not support soft delete or archival. Pagination, filtering, and sorting are available. Only schema fields may be referenced.","description":"This endpoint provides a paginated, searchable, and filterable list of discussionboard_engagement_metrics records. Each record details engagement metrics for a specific member and board on a given date, containing the following schema fields: id (UUID), discussionboard_member_id (member UUID, nullable), discussionboard_board_id (board UUID, nullable), engagement_date (timestamp), posts_created_count (integer), comments_created_count (integer), votes_cast_count (integer). Supports pagination (page/limit), filtering (by member_id, board_id, date range), and sorting. There are no fields for soft delete. Additional fields will not be included, and only schema-defined columns are returned in results. Authentication may be required depending on business rules, but operation is not restricted by role in this description.","summary":"List paginated, filterable engagement metrics—with searching—based strictly on schema fields.","parameters":[],"requestBody":{"description":"List request with pagination, filter, and sort fields matching engagement_metrics schema: member_id, board_id, engagement_date range, etc.","typeName":"IDiscussionboardEngagementMetric.IRequest"},"responseBody":{"description":"Paginated response with schema-defined fields: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count.","typeName":"IPageIDiscussionboardEngagementMetric"},"authorizationRoles":null,"name":"index","path":"/discussionboard/engagementMetrics","method":"patch"},{"specification":"Retrieves a single engagement metrics record by its unique identifier from the discussionboard_engagement_metrics table. Schema fields: id (UUID), discussionboard_member_id (UUID, nullable), discussionboard_board_id (UUID, nullable), engagement_date (timestamp), posts_created_count, comments_created_count, votes_cast_count. No soft delete or archival exists; all fields referenced are from the schema. Record is found by its id (PK, UUID).","description":"Fetches a specific discussionboard_engagement_metrics record based on its unique id (UUID). Returns only schema-defined fields: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count. Only these properties will be present in the result. If the id does not correspond to a record, an error is returned. No non-schema fields or soft delete status is referenced. Result is intended for analytics and engagement dashboards.","summary":"Retrieve a single engagement metric record by id, strictly using schema fields only.","parameters":[{"name":"id","description":"Target engagement metric id (UUID, PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Engagement metric record containing only schema-defined properties.","typeName":"IDiscussionboardEngagementMetric"},"authorizationRoles":null,"name":"at","path":"/discussionboard/engagementMetrics/{id}","method":"get"},{"specification":"Creates a new engagement metric record in the discussionboard_engagement_metrics table. Required fields per schema: discussionboard_member_id (nullable UUID), discussionboard_board_id (nullable UUID), engagement_date (timestamp), posts_created_count (integer), comments_created_count (integer), votes_cast_count (integer). 'id' is system-generated (UUID). All provided fields must exist in the schema. No soft delete or archival exists. Used by analytics pipelines and dashboards.","description":"This operation allows creation of a new engagement metric record for the discussionboard_engagement_metrics table. The request body must contain these properties per schema: discussionboard_member_id (UUID, nullable), discussionboard_board_id (UUID, nullable), engagement_date (timestamp), posts_created_count (int), comments_created_count (int), and votes_cast_count (int). The system generates the id (UUID). No non-schema fields accepted. On success, returns the created record as stored in the database. No soft delete or archival logic applies. Only schema fields can be referenced in the input and result.","summary":"Create a new engagement metric—every property must match schema exactly (except id, which is system assiged).","parameters":[],"requestBody":{"description":"Request body for creating engagement metric record—must match schema fields exactly except id.","typeName":"IDiscussionboardEngagementMetric.ICreate"},"responseBody":{"description":"Created engagement metric record, including all schema fields.","typeName":"IDiscussionboardEngagementMetric"},"authorizationRoles":null,"name":"create","path":"/discussionboard/engagementMetrics","method":"post"},{"specification":"Updates an existing engagement metric record by its id (UUID, PK) in the discussionboard_engagement_metrics table. The updatable fields are: discussionboard_member_id (nullable), discussionboard_board_id (nullable), engagement_date, posts_created_count, comments_created_count, votes_cast_count. All properties are defined in the schema. No soft delete or archival exists. The id parameter in the path identifies the record to update.","description":"This API operation updates an engagement metric record (discussionboard_engagement_metrics) using its id (UUID, PK). Accepts a request body with properties corresponding to schema fields: discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count (all required/allowed schema fields). No non-schema property is permitted. No soft delete or archival applies. Result contains the updated record's schema fields. Requests referencing properties not present in schema will fail validation.","summary":"Update engagement metric by id; all fields must strictly match schema definitions.","parameters":[{"name":"id","description":"Target engagement metric id (UUID, PK) for update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Subset of updatable engagement metric fields, matching those in schema: discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count.","typeName":"IDiscussionboardEngagementMetric.IUpdate"},"responseBody":{"description":"Resulting engagement metric record after update, with schema fields.","typeName":"IDiscussionboardEngagementMetric"},"authorizationRoles":null,"name":"update","path":"/discussionboard/engagementMetrics/{id}","method":"put"},{"specification":"Deletes a single engagement metric record by its unique id (PK, UUID) in the discussionboard_engagement_metrics table. No soft delete or archival field is present, so record removal is permanent (hard delete). All referenced fields must exist in the schema. Operation is protected and audit-relevant for analytics persistence.","description":"This operation performs a hard delete (permanent removal) of an engagement metric record from the discussionboard_engagement_metrics table, identified by id (UUID, PK). As no soft delete (deleted_at or is_deleted) exists, the record is irretrievably removed. This is intended for use only in controlled, audit-enabled workflows (e.g., correction of erroneous analytic records). The operation takes only the id in the path and returns confirmation of success on completion. Only schema properties are referenced. If id is not present, a suitable error is returned.","summary":"Delete engagement metric by id—permanent removal from DB, no soft delete available.","parameters":[{"name":"id","description":"Target engagement metric's unique id (UUID, PK) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/engagementMetrics/{id}","method":"delete"},{"specification":"Retrieves a paginated, filterable list of activity logs from the discussionboard_activity_logs table. Fields in schema: id (UUID, PK), discussionboard_member_id (UUID, nullable), discussionboard_board_id (UUID, nullable), discussionboard_thread_id (UUID, nullable), discussionboard_post_id (UUID, nullable), discussionboard_comment_id (UUID, nullable), event_timestamp (timestamp), event_type (string), event_metadata (string, nullable). Does not support soft delete or archival. Supports paging, filtering by any schema field, and sorting. Only schema columns allowed in request and response.","description":"Returns a paged, searchable list of activity log records from discussionboard_activity_logs, based on filter, pagination, and sort criteria. All included properties are defined in the schema: id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata. Filtering and sorting can be performed on any field. There is no soft delete or archival support. Properties not present in the schema are forbidden in request and response. Useful for audits, rare journey tracking, and system analytics tools.","summary":"Get paged list of activity logs (with search/filter) using only schema fields.","parameters":[],"requestBody":{"description":"Paging/filter request matching schema columns (member_id, board_id, etc.), per IDiscussionboardActivityLog.IRequest.","typeName":"IDiscussionboardActivityLog.IRequest"},"responseBody":{"description":"Paged response with array of activity logs (all schema fields only) and standard pagination fields.","typeName":"IPageIDiscussionboardActivityLog"},"authorizationRoles":null,"name":"index","path":"/discussionboard/activityLogs","method":"patch"},{"specification":"Retrieves a single activity log record by its id (UUID, PK) from the discussionboard_activity_logs table. Only fields defined in the schema are referenced: id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata. No soft delete is present. Operation is for audit/compliance usage or analytic tracing.","description":"This operation fetches a single activity log record from discussionboard_activity_logs by its unique id (UUID, PK). All returned properties must be defined in the schema: id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata. The endpoint is useful for examining specific audit/compliance events and for tracing analytics workflows. Properties outside the schema are strictly forbidden. No soft/hard delete toggle exists; deletion is possible only via permanent removal (not present in this endpoint). If id is invalid or record not present, an error is issued.","summary":"Get single activity log record by id, with schema fields only.","parameters":[{"name":"id","description":"The unique id (UUID, PK) for the activity log record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Activity log entry found by id, containing schema-only properties.","typeName":"IDiscussionboardActivityLog"},"authorizationRoles":null,"name":"at","path":"/discussionboard/activityLogs/{id}","method":"get"},{"specification":"Creates a new activity log record in the discussionboard_activity_logs table. Required fields per schema: discussionboard_member_id (nullable), discussionboard_board_id (nullable), discussionboard_thread_id (nullable), discussionboard_post_id (nullable), discussionboard_comment_id (nullable), event_timestamp (timestamp), event_type (string), event_metadata (nullable string). 'id' is database generated. No soft delete/archive fields exist. Used for system, workflow, and compliance analytics logging. All field references are schema-only.","description":"Creates a new activity log entry by inserting one record to the discussionboard_activity_logs table. The request body must conform exactly to the fields in the schema (excluding id, which is system assigned): discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id (all UUID, nullable), event_timestamp (timestamp), event_type (string), event_metadata (string, nullable). On success, returns the newly created activity log record. No soft-delete exists; all records are atomic and permanent upon creation. Only schema fields will be accepted or returned.","summary":"Create a new activity log record with all schema-defined fields except id (auto-assigned).","parameters":[],"requestBody":{"description":"Fields for new activity log record, matching schema exactly; id auto-generated.","typeName":"IDiscussionboardActivityLog.ICreate"},"responseBody":{"description":"The new activity log entry as created and stored, with assigned id and schema fields.","typeName":"IDiscussionboardActivityLog"},"authorizationRoles":null,"name":"create","path":"/discussionboard/activityLogs","method":"post"}],"completed":111,"total":195,"step":0,"created_at":"2025-07-24T19:13:40.444Z"},"tokenUsage":{"facade":{"aggregate":{"total":509922,"input":{"total":474376,"cached":87424},"output":{"total":35546,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":509922,"input":{"total":474376,"cached":87424},"output":{"total":35546,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":509922,"input":{"total":474376,"cached":87424},"output":{"total":35546,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":509922,"input":{"total":474376,"cached":87424},"output":{"total":35546,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Updates an existing post report record in the discussionboard_post_reports table. This entity captures reports made by members against posts, including the post's ID, reporting member's ID, associated report type, optional description, and the report's creation timestamp. This operation allows modifying report details—such as the report type, description, or correcting a reporter/member association—based on actual fields in the schema. All updates must reference a valid report by its unique ID (UUID). Soft deletion is NOT supported as the model has no such field; all modifications must directly alter the intended fields. No additional or non-schema fields may be referenced.","description":"This API operation updates a specific post report in the discussionboard_post_reports table. It allows authorized users or moderators to correct report type, description, or reporting member, as well as reassigning the associated post if needed. Only the actual schema fields—discussionboard_post_id, reporter_member_id, report_type_id, description, and created_at—may be modified (although created_at should rarely be altered except for error recovery/audit). \n\nAll paths for updating must strictly adhere to existing field names and support business rules around moderation. The operation must reference the report to update by its 'id' and apply atomic updates—no bulk modification.\n\nNo soft deletion or status fields exist on this model, so this endpoint must never reference deletion or archival workflow. All error handling must reflect actual database constraints and unique keys.\n\nThis endpoint should be used in moderation/admin tools for correcting reports, not for status transitions. Related list, create, or delete APIs should be used for other functions.","summary":"Updates a single post report in discussionboard_post_reports by ID.","parameters":[{"name":"id","description":"The unique identifier (UUID) for the target discussionboard_post_reports record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated fields for the post report, matching the definition of discussionboard_post_reports (without the primary key).","typeName":"IPostReport.IUpdate"},"responseBody":{"description":"The updated post report entity matching the Prisma schema for discussionboard_post_reports.","typeName":"IPostReport"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionboard/postReports/{id}","method":"put"},{"specification":"Deletes a post report from the discussionboard_post_reports table by its unique ID. As the schema does NOT include any soft-deletion or archival fields (like 'deleted_at' or 'is_deleted'), this operation will perform a HARD DELETE—permanent removal of the record from the database. The operation must reference only the actual fields in the model and must not assume the presence of deletion markers or status flags.","description":"This API operation permanently deletes a specified post report from the discussionboard_post_reports table. The action is IRREVERSIBLE and is appropriate only for cases where the report was erroneous or needs to be removed for compliance reasons. \n\nThe deleted record is identified solely by the 'id' field (UUID) as per schema. Since the table does not support soft deletion or archiving, the row is removed from the database entirely—including all its original information (discussionboard_post_id, reporter_member_id, report_type_id, description, created_at). Response should reflect completion status; if the record is not found, an appropriate error is returned.\n\nOnly authorized moderators or admins may execute this operation. Downstream analytics, moderation history, or audit logs should be handled in related tables by other API calls as needed.\n\nThis operation must NOT reference or set any non-existent fields.","summary":"Permanently deletes a post report from discussionboard_post_reports by ID (hard delete).","parameters":[{"name":"id","description":"The unique identifier (UUID) for the post report to delete from discussionboard_post_reports.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/postReports/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of post references (discussionboard_post_references) based on complex search, filter, or sorting parameters submitted in the request body. This entity represents individual relationships between posts—such as citations, replies, or cross-links—using fields: id, source_post_id, target_post_id, target_thread_id, and reference_type. Results should include advanced options for filtering (by source/target post or thread, type), pagination, and ordering. Bulk retrieval/pagination must not reference or return non-existent fields.","description":"This API operation provides a paginated list of post references (discussionboard_post_references) matching advanced filters. The schema supports filtering by source_post_id (origin post), target_post_id, target_thread_id, and reference_type. The operation accepts a complex search/request object (see request body) and must return a paginated response set, only containing fields present in the model.\n\nCommon use cases include: displaying all citations for a post, reverse-resolving what threads reference a post, bulk-moderation searches, or analytics for user-generated references. The endpoint does not imply, nor should ever reference, any deletion or status fields (because none exist in schema).\n\nPagination metadata (page, size, total count) should be returned in response as per OpenAPI conventions for list endpoints. No status/deletion/soft-delete flags exist on this entity.","summary":"Retrieves filtered list of post references (discussionboard_post_references) based on search and pagination.","parameters":[],"requestBody":{"description":"Complex search/filter/pagination for post references. Only actual model fields and relevant query options allowed.","typeName":"IPostReference.IRequest"},"responseBody":{"description":"Paginated response of post reference records and metadata.","typeName":"IPageIPostReference"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/postReferences","method":"patch"},{"specification":"Retrieves a single post reference from discussionboard_post_references by its unique ID. This table documents relationships from one post to another post or a thread, with the fields: id, source_post_id, target_post_id, target_thread_id, and reference_type. The return must include only these schema fields. This endpoint is read-only and must not reference or return non-existent status or soft delete fields.","description":"Fetches a specific post reference from the discussionboard_post_references entity using its unique 'id'. All returned information corresponds to actual schema fields: id, source_post_id, target_post_id, target_thread_id, reference_type. \n\nThis endpoint enables admins, moderators, or analytics users to trace citations, replies, or cross-links between posts and threads by unique relationship id.\n\nThere are no archival, deletion, or status markers present on this table, so only schema-actual fields are retrieved. If entity not found, returns an appropriate not-found error.","summary":"Retrieves a single post reference by ID from discussionboard_post_references.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the post reference record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the target post reference, matching schema fields.","typeName":"IPostReference"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/postReferences/{id}","method":"get"},{"specification":"Creates a new post reference (discussionboard_post_references) connecting a source post with a target post or thread. Only the actual schema fields may be specified: source_post_id (required), target_post_id (optional), target_thread_id (optional), and reference_type. The operation inserts a new record linking posts or threads together as a citation or cross-link. No status or archival fields may be referenced; only insert atomic schema-specified values.","description":"This API operation creates a new record in discussionboard_post_references, establishing a link between a source post and a target post and/or thread, along with the relation's type (e.g., 'post', 'thread', 'comment' per reference_type string). The request body must supply all required schema fields and may include optional fields as permitted. \n\nThe endpoint is strictly a create operation; no business logic around soft deletion or status exists. The response returns the new post reference with all actual schema fields. Moderation, analytics, or citation workflows are primary use cases. All foreign key fields must refer to valid related records (enforced by application or DB-level foreign key constraints).","summary":"Creates a new post reference in discussionboard_post_references.","parameters":[],"requestBody":{"description":"Post reference creation data as per discussionboard_post_references model's required fields.","typeName":"IPostReference.ICreate"},"responseBody":{"description":"Created post reference entity matching discussionboard_post_references fields.","typeName":"IPostReference"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/discussionboard/postReferences","method":"post"},{"specification":"Updates a post reference record in the discussionboard_post_references table by id. All modifications are direct and atomic (no status or archival model fields exist). Only existing schema fields—source_post_id, target_post_id, target_thread_id, reference_type—may be updated. No references to deletion/soft-delete. This is a point update for a single record identified by primary key.","description":"This API updates a specific post reference in discussionboard_post_references. It allows the reference to be retargeted, type changed, or other schema-compliant field updates. \n\nAll data must strictly correspond to actual schema fields. The endpoint only operates on a single record, identified by 'id' in the path. No additional or soft delete/status fields may be referenced as none exist in the model.\n\nResponse returns the updated post reference. Appropriate permissions and foreign key relationships must be enforced in logic.","summary":"Updates a post reference in discussionboard_post_references by ID.","parameters":[{"name":"id","description":"The UUID key for the post reference record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the post reference. Only schema fields permitted.","typeName":"IPostReference.IUpdate"},"responseBody":{"description":"The updated post reference entity.","typeName":"IPostReference"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionboard/postReferences/{id}","method":"put"},{"specification":"Deletes a post reference from discussionboard_post_references by primary key (UUID). No fields in the schema support soft deletion or archival status. This operation irreversibly removes the record from the table, permanently severing the cross-post/thread relationship. The API must not reference non-existent soft delete fields or status markers.","description":"This API operation irreversibly deletes a post reference entry from discussionboard_post_references. After hard delete, the post and/or thread linkage represented by this record is no longer present. \n\nComplete deletion is enforced; no fields exist for soft deletion, so the row is entirely removed. Access limited to moderators/admins. If the record for the provided 'id' does not exist, an appropriate not found or error response is returned.","summary":"Permanently deletes a post reference in discussionboard_post_references by ID (hard delete).","parameters":[{"name":"id","description":"The UUID primary key for the post reference to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/postReferences/{id}","method":"delete"},{"specification":"Returns a paginated, filtered list of comments from discussionboard_comments, using only fields actually present in the schema: id, discussionboard_post_id, discussionboard_member_id, parent_id, body, created_at, updated_at, deleted_at. The operation supports advanced search or sorting in the request body, with pagination metadata in response. Filtering may include fields such as parent_id (for nested comments), discussionboard_post_id (for post-level thread), and date/time fields. The deleted_at property, if present (non-null), marks a soft deleted comment and should be reflected in results as such; the API must NOT implement hard delete logic for list retrieval.","description":"This endpoint retrieves a list of comments from the discussionboard_comments entity, matching complex query parameters submitted with the request body. Filters may include post association, author, parent comment, nesting, or date/time window. Pagination, search, and sorting must reflect only actual schema fields.\n\nThe schema's deleted_at field enables soft-delete tracking: results must include comments regardless of soft-delete status and display deleted_at as returned by DB.\n\nTypical use cases: loading post discussions, displaying comment threads, moderation of recent comments, or fact-checking audit trails. All returned properties correspond 1:1 with schema fields; never reference or synthesize additional fields.","summary":"Retrieves list of comments from discussionboard_comments with advanced filtering and pagination.","parameters":[],"requestBody":{"description":"Request object for filtering, sorting, and paginating comments. Only actual schema fields allowed.","typeName":"IComment.IRequest"},"responseBody":{"description":"Paginated response containing comment records and metadata. Always includes deleted_at when set.","typeName":"IPageIComment"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/comments","method":"patch"},{"specification":"Fetches a single comment from discussionboard_comments by primary key ID. The entity represents a structured user comment, with schema fields: id, discussionboard_post_id, discussionboard_member_id, parent_id, body, created_at, updated_at, deleted_at. Soft-deleted comments (where deleted_at is not null) are still returned for audit/compliance, and the API must always include deleted_at field exactly as stored—never reference status or non-schema fields.","description":"Returns a single comment entity from discussionboard_comments identified by 'id' in the path parameter. The response strictly includes: id, discussionboard_post_id, discussionboard_member_id, parent_id, body, created_at, updated_at, deleted_at. \n\nSoft-deleted comments must be disclosed with deleted_at set when present; the API does not hide, mask, or synthesize comment status fields beyond actual schema. If the comment does not exist, an appropriate not-found error is returned. The endpoint is used for moderation, post discussion display, or audit log lookup.","summary":"Retrieves a specific comment from discussionboard_comments by ID, including deleted_at/soft delete status.","parameters":[{"name":"id","description":"The primary key UUID for the target comment in discussionboard_comments.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment entity with all schema fields; deleted_at present if comment is soft-deleted.","typeName":"IComment"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/comments/{id}","method":"get"},{"specification":"Creates a new comment record in discussionboard_comments, using only the fields defined in schema: discussionboard_post_id, discussionboard_member_id, parent_id (optional), body. The operation inserts a new atomic comment into the database, with created_at automatically set to current time by the server. The API must NOT reference non-existent status fields.","description":"This API endpoint creates a new comment in discussionboard_comments. Application logic must supply required fields—discussionboard_post_id (the parent post or root for the comment), discussionboard_member_id (author), optional parent_id (for replies or nested comments), and the comment body (text only). Optional fields may be set per schema (parent_id), while created_at and updated_at are managed by the API/database. No status or workflow fields may be referenced beyond deleted_at (managed in future soft delete operations only).\n\nCommon uses include post discussions, replying to other comments, and asynchronous moderation workflows where comments are inserted independently of post/display state.","summary":"Creates a new user comment in discussionboard_comments.","parameters":[],"requestBody":{"description":"Body for the new comment, only using schema-approved fields.","typeName":"IComment.ICreate"},"responseBody":{"description":"Newly created comment entity as per discussionboard_comments schema. Fields like created_at/updated_at auto-populated.","typeName":"IComment"},"authorizationRoles":["member","moderator","admin"],"name":"create","path":"/discussionboard/comments","method":"post"},{"specification":"Updates an existing comment in discussionboard_comments, by primary key ID. All modifications must map directly to fields that exist: discussionboard_post_id, discussionboard_member_id, parent_id, body. Only these fields can be changed. The API must not reference non-existent status logic outside those fields (e.g., no update for deleted_at—handled by delete operation).","description":"This endpoint updates an existing comment, targeting the record in discussionboard_comments by its 'id'. Modifiable fields include discussionboard_post_id (if moving comment to another post), discussionboard_member_id (to update ownership, rare in exceptional audit cases), parent_id (to alter nesting/reply structure), and body (modifying the text itself). \n\nThe primary key 'id' in the path is required; only the fields detailed above may appear in the update request body. No status fields or non-existent properties may be referenced; soft-deletion (deleted_at) transitions are managed only by delete logic.","summary":"Updates an existing comment in discussionboard_comments by ID.","parameters":[{"name":"id","description":"The UUID key for the comment record to update in discussionboard_comments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the comment. Only schema fields permitted.","typeName":"IComment.IUpdate"},"responseBody":{"description":"The updated comment entity.","typeName":"IComment"},"authorizationRoles":["member","moderator","admin"],"name":"update","path":"/discussionboard/comments/{id}","method":"put"},{"specification":"Performs a soft delete on a comment in the discussionboard_comments table by ID. This operation sets the deleted_at field to the current timestamp, marking the comment as deleted without removing it from the database. No other status or deletion fields are referenced or used; the data remains available for audit/tracing. Only the deleted_at field is changed; all others remain as before. If the comment is already soft-deleted (deleted_at is set), subsequent calls have no effect except updating the deleted_at timestamp.","description":"This endpoint soft-deletes a comment in discussionboard_comments by updating its deleted_at field to the current server time. The comment remains in the database but is marked as deleted in accordance with audit/compliance and moderation workflows. No other record removal or status field is used.\n\nThe path parameter 'id' specifies which comment to soft-delete. Attempts to delete an already-deleted comment simply update deleted_at. \n\nThis endpoint does NOT perform a hard-delete or physically remove the comment. It must not reference any non-existent deletion/status fields; only the built-in schema field deleted_at is used for marking status.","summary":"Soft deletes a comment from discussionboard_comments by setting deleted_at (no hard delete).","parameters":[{"name":"id","description":"The UUID primary key for the comment to soft delete (set deleted_at).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/comments/{id}","method":"delete"}],"completed":123,"total":195,"step":0,"created_at":"2025-07-24T19:13:43.317Z"},"tokenUsage":{"facade":{"aggregate":{"total":557484,"input":{"total":517837,"cached":101376},"output":{"total":39647,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":557484,"input":{"total":517837,"cached":101376},"output":{"total":39647,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":557484,"input":{"total":517837,"cached":101376},"output":{"total":39647,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":557484,"input":{"total":517837,"cached":101376},"output":{"total":39647,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"List all channels for the discussion board system. This operation allows searching and filtering of channels based on their actual fields in the schema: id, code, name, description, position, active, created_at, and updated_at. Supports advanced queries for management, navigation, and analytics. Only references fields present in the Prisma schema discussionboard_channels table. Intended for admins and management UI that needs to view the complete set of channels with potential filters on code, name, active status, or other actual columns. No reference is made to non-existent fields. Pagination, search, and sort may be required by the client as part of this PATCH query. No soft or hard delete logic applies here as this is a list/retrieval endpoint.","description":"Retrieves a list of discussion board channels for management or navigation purposes. The API accepts search, pagination, or filtering parameters to find channels by fields such as code, name, and active status. Uses only actual fields in the discussionboard_channels table (id, code, name, description, position, active, created_at, updated_at). No non-existent fields are referenced. Admins or system UI may query using this endpoint to list all channels, preview their metadata, and navigate to their details or further modify them. Supports use cases such as admin dashboards, setup screens, and analytics panels.","summary":"Lists channels (discussionboard_channels) for search and management.","parameters":[],"requestBody":{"description":"Search and pagination parameters to filter and sort the result set of channels. Only references actual schema fields of discussionboard_channels: id, code, name, description, position, active, created_at, updated_at.","typeName":"IDiscussionboardChannel.IRequest"},"responseBody":{"description":"A list of channels as returned by search/filter in paginated format. Returns all actual fields: id, code, name, description, position, active, created_at, updated_at.","typeName":"IPageDiscussionboardChannel"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/channels","method":"patch"},{"specification":"Retrieve a single discussion board channel with all its details, using the unique id. The response will contain actual fields id, code, name, description, position, active, created_at, and updated_at as defined in the Prisma schema discussionboard_channels. Path parameter 'id' is the unique identifier for the channel row. No non-existent fields are referenced. Intended for admin or UI clients to fetch a single channel configuration for display or edit purposes. Reflects database structure exactly, with no additional logic for deletion (soft or hard).","description":"Fetches a single channel by unique id, returning all data in schema: id, code, name, description, position, active, created_at, updated_at. Uses only fields from discussionboard_channels. Used for detail views, editing screens, or internal platform navigation. Path parameter 'id' is required and must be a UUID. No soft/hard delete logic applies at this endpoint -- simply returns current record data if found. Returns 404 if no such id exists.","summary":"Get detailed channel info (discussionboard_channels) by id.","parameters":[{"name":"id","description":"Unique identifier for the target channel (discussionboard_channels.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed channel record, containing all fields: id, code, name, description, position, active, created_at, updated_at.","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/channels/{id}","method":"get"},{"specification":"Create a new channel for the discussion board. Accepts all required and optional fields for channel creation as defined in the Prisma schema: code (required), name (required), description (optional), position (required), active (required), and automatically populates created_at and updated_at. Does not reference any fields other than those in the schema. No deletion logic applies. Returns the created channel with its values.","description":"Allows an admin or platform manager to add a new channel to the discussion board, specifying the required fields code, name, position, active, and optional description. The API strictly follows the discussionboard_channels schema. Used for initial setup, expansion, or management features where a new category/channel is added for organizing boards. Returned value includes all fields present in the schema, such as id, code, name, description, position, active, created_at, and updated_at, generated accordingly. No extra or non-existent fields are allowed. Fails with validation error if required fields are missing or constraint (e.g., code uniqueness) is violated.","summary":"Create a new channel in discussionboard_channels.","parameters":[],"requestBody":{"description":"Fields for creating a new channel. Follows discussionboard_channels schema fields: code, name, description, position, active.","typeName":"IDiscussionboardChannel.ICreate"},"responseBody":{"description":"The new channel's complete row (all fields per schema, including generated columns).","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/channels","method":"post"},{"specification":"Update an existing channel with the given id. References only the actual fields in the discussionboard_channels schema: code, name, description, position, and active. created_at and updated_at are automatically maintained. Does not reference any deletion fields or logic. The path parameter 'id' is the identifier; the request body contains updatable fields. Response is the updated channel's properties. Does not reference any non-existent fields.","description":"Modifies a discussion board channel identified by its id, updating fields such as code, name, description, position, and active. Uses only fields defined by the schema. For admin use in management UIs or internal platform editing. created_at and updated_at are handled by the backend. Fails with validation error if constraints like code uniqueness are violated, or if the id does not exist. Returns the updated record with its actual schema fields. No reference to soft/hard delete or any non-existent attribute.","summary":"Update channel details (discussionboard_channels) by id.","parameters":[{"name":"id","description":"Identifier for the channel row to update—in the discussionboard_channels schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to be updated for the channel. Only code, name, description, position, active—exactly as defined in the schema.","typeName":"IDiscussionboardChannel.IUpdate"},"responseBody":{"description":"Updated channel data (every field per schema, including generated fields).","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/channels/{id}","method":"put"},{"specification":"Delete an existing channel based on its id. The Prisma schema for discussionboard_channels does NOT have a deleted_at or is_deleted field; thus, this operation performs a hard delete/permanent removal of the row from the table. Accepts the id as path parameter and, if successful, returns a success response. This action cannot be undone. Only actual fields from schema are referenced; does NOT reference soft delete or non-existent audit fields. Mainly intended for admin operations. If the channel has child sections or boards, referential integrity must be managed at the application/database level.","description":"Deletes a channel from the system permanently, as there is no soft delete field in the discussionboard_channels schema. This operation removes the target channel record in entirety. Path parameter id must be provided. Used mainly for admin or configuration UIs, and requires caution as this is a destructive and irreversible operation. If foreign key constraints exist (sections, audit logs), deletion may fail unless those are first handled. Only fields referenced are actual schema fields; no soft delete or non-existent columns mentioned.","summary":"Hard delete a channel (discussionboard_channels) by id.","parameters":[{"name":"id","description":"Id (UUID) of channel to be deleted, per discussionboard_channels schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the delete operation (e.g., success=true/false or deleted entity id).","typeName":"IDiscussionboardChannel.IDeleteResult"},"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/channels/{id}","method":"delete"},{"specification":"List all sections for the discussion board system. This operation searches and filters by section fields in the actual schema: id, discussionboard_channel_id, code, name, description, position, active, created_at, and updated_at. Does not use any non-existent attribute. Used by admin/configuration UIs, setup screens, or navigation tools for full section management. Pagination and filtering enabled only on real fields. No delete logic applies at this endpoint.","description":"Retrieves a list of all sections. May filter or search based on id, channel, code, name, position, active, created_at, or updated_at. All filtering and search strictly reference actual discussionboard_sections schema fields. Used for managing, browsing, or configuring board structure. Does NOT reference or filter by non-existent deletion or soft-delete fields.","summary":"Search/list all sections (discussionboard_sections) for management.","parameters":[],"requestBody":{"description":"Search and pagination parameters for sections. Only real fields allowed: id, discussionboard_channel_id, code, name, description, position, active, created_at, updated_at.","typeName":"IDiscussionboardSection.IRequest"},"responseBody":{"description":"A paginated result set of discussion board sections (all schema fields included in each row).","typeName":"IPageDiscussionboardSection"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/sections","method":"patch"},{"specification":"Retrieve a section for the discussion board by its unique id. This returns all schema-defined fields: id, discussionboard_channel_id, code, name, description, position, active, created_at, and updated_at. The 'id' path parameter is required. Intended for admin panel/detail views. No reference to deletion or non-existent attributes.","description":"Fetches a single section row using its unique id. Returns a detailed object with all fields as defined in the discussionboard_sections schema. Used for editing or detail screens, admin actions, or configuration UIs. 'id' is required and must correspond to the schema field. No reference to delete/soft-delete or fields not present in the schema. Returns 404 if not found.","summary":"Get section detail (discussionboard_sections) by id.","parameters":[{"name":"id","description":"Section row id per discussionboard_sections schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the section, all schema-defined fields.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/sections/{id}","method":"get"},{"specification":"Create a new section for the discussion board system. Accepts all required/optional fields from the discussionboard_sections schema: discussionboard_channel_id, code, name, description, position, active. Timestamps (created_at, updated_at) are generated by the backend. Returns the newly-created section, including all fields specified in the schema. No references to non-existent fields. Does not handle any delete/soft-delete logic.","description":"Enables admins to add a new section, providing all necessary fields as per schema—discussionboard_channel_id, code, name, description (optional), position, and active. Used for structural changes, system setup, or configuring the forum. Response includes all fields: id, discussionboard_channel_id, code, name, description, position, active, created_at, updated_at. Only uses attributes from the Prisma schema. Fails if required constraints (e.g., code uniqueness within channel) are not met.","summary":"Creates a new section (discussionboard_sections).","parameters":[],"requestBody":{"description":"Fields needed to create a section—channel id, code, name, description, position, active.","typeName":"IDiscussionboardSection.ICreate"},"responseBody":{"description":"Newly created section record, all schema fields included.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/sections","method":"post"},{"specification":"Update a section in the discussion board. Only actual fields in discussionboard_sections can be updated: discussionboard_channel_id, code, name, description, position, active. Does not reference non-existent/soft delete fields. Path parameter 'id' is required, as is the request body with updatable attributes. Returns updated section as per the schema, including all mandatory attributes; no extraneous fields returned. Used by admin/config management features.","description":"Modifies a section defined in the discussionboard_sections schema, identified by unique 'id'. Allows updates to fields discussionboard_channel_id, code, name, description, position, active. Only these fields are referenced/affected. On success, returns all attributes in schema (id, discussionboard_channel_id, code, name, description, position, active, created_at, updated_at). Errors if id is missing, not found, or constraints (code/channel uniqueness) are violated. No ref to soft/hard delete or any other non-schema field.","summary":"Update a section (discussionboard_sections) by id.","parameters":[{"name":"id","description":"Section id per the discussionboard_sections schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable section fields: channel id, code, name, description, position, active. Follows schema only.","typeName":"IDiscussionboardSection.IUpdate"},"responseBody":{"description":"The updated section, all fields per schema.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/sections/{id}","method":"put"},{"specification":"Delete a section from the discussion board. The schema for discussionboard_sections does NOT include deleted_at, is_deleted, or other soft delete fields, so this is a hard/permanent removal. The 'id' path parameter selects the section to delete. Once removed, the row is gone. Only actual schema fields used; no reference to soft delete or non-existent columns. Intended for admin operations, structural changes, or advanced config flows.","description":"Deletes a discussionboard_sections row permanently. There is no soft delete column in this schema, so the record is physically removed. Path parameter 'id' (UUID) is required to specify the target. References only fields in the schema, does not refer to any deleted, removed, or other soft/hard delete columns. Used for admin or system manager UI. Returns confirmation of successful deletion, or error/404 if not found or on constraint violation.","summary":"Hard delete a section (discussionboard_sections) by id.","parameters":[{"name":"id","description":"Target section's id, per the schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result (success, deleted id, or failure reason) of section delete.","typeName":"IDiscussionboardSection.IDeleteResult"},"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/sections/{id}","method":"delete"},{"specification":"Search or list all discussion board configurations. This endpoint returns all records in discussionboard_configurations, based on filtering/search/pagination on actual fields: id, key, value, description, created_at, and updated_at. Pagination and sorting available; only real schema fields are referenced. No deletion logic is used at this endpoint.","description":"Allows admins to retrieve/search platform-wide configuration rows. Fields used for filtering/search: id, key, value, description, created_at, updated_at. Returns a paginated list, each with full configuration data as in the schema. Used for admin setup, runtime config, or analytic review. Does not refer to non-existent or soft delete fields.","summary":"List/search all system configurations (discussionboard_configurations).","parameters":[],"requestBody":{"description":"Search/filter/pagination params for configuration records. Only real schema fields: id, key, value, description, created_at, updated_at.","typeName":"IDiscussionboardConfiguration.IRequest"},"responseBody":{"description":"Paginated records of all system settings (full data per schema for each).","typeName":"IPageDiscussionboardConfiguration"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/configurations","method":"patch"},{"specification":"Retrieve a single configuration setting for the discussion board system by primary id. Returns all fields as defined in the schema: id, key, value, description, created_at, updated_at. Path param 'id' is required and references only actual schema column. Used for displaying and managing a particular setting in admin/config flows. No ref to soft/hard delete or other non-existent columns.","description":"Allows admin or config UI to fetch a specific configuration row, as defined by id. The response contains all columns: id, key, value, description, created_at, updated_at. Path parameter is required. Only valid for actual records. Does not use or reference any field not present in the schema. Returns 404 if record not found.","summary":"Get config row (discussionboard_configurations) by id.","parameters":[{"name":"id","description":"The primary key id in the discussionboard_configurations table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Record for configuration row (all schema fields included).","typeName":"IDiscussionboardConfiguration"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/configurations/{id}","method":"get"}],"completed":135,"total":195,"step":0,"created_at":"2025-07-24T19:13:43.853Z"},"tokenUsage":{"facade":{"aggregate":{"total":604661,"input":{"total":561301,"cached":101376},"output":{"total":43360,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":604661,"input":{"total":561301,"cached":101376},"output":{"total":43360,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":604661,"input":{"total":561301,"cached":101376},"output":{"total":43360,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":604661,"input":{"total":561301,"cached":101376},"output":{"total":43360,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements PATCH /discussionboard/notificationPreferences endpoint. This operation retrieves a paginated, searchable, and sortable list of notification preferences records for all members. Each record is derived from the \"discussionboard_notification_preferences\" table, which contains fields including id, discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, and updated_at. The endpoint supports filtering or searching by member_id, code, and possibly notification channel preferences (email_enabled, inapp_enabled, browser_enabled). Results respect real data shape from Prisma schema and support analytics and preference management dashboards. Responses will never reference fields not defined in the schema.","description":"This endpoint fetches a paginated, optionally searchable and sortable list of notification preference records across the platform. It is built on the \"discussionboard_notification_preferences\" table, which underlies user notification configurations by template code and channel. Each record includes id (primary key), discussionboard_member_id (reference to member), code (notification template code), email_enabled (whether the user receives email notifications for this template), inapp_enabled (in-app notification preference), browser_enabled (browser push preference), created_at (creation timestamp), and updated_at (last modification timestamp).\n\nPagination, search (by code/member/channel), and sorting parameters may be passed in the request body. There are no soft delete or archival fields, so all records returned are active. Results strictly correspond to actual schema fields.\n\nErrors include invalid search parameters or database errors. No information outside of Prisma schema fields is ever included.","summary":"Retrieve a list of notification preference records (discussionboard_notification_preferences table) with pagination and filtering.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for notification preferences listing.","typeName":"IDiscussionboardNotificationPreferences.IRequest"},"responseBody":{"description":"A paginated list of notification preference records matching the query.","typeName":"IPageIDiscussionboardNotificationPreferences"},"authorizationRoles":null,"name":"index","path":"/discussionboard/notificationPreferences","method":"patch"},{"specification":"Implements GET /discussionboard/notificationPreferences/{id} endpoint. Retrieves a single notification preference by its unique id, directly mapping to a row in the \"discussionboard_notification_preferences\" Prisma table. Returned fields strictly include id, discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, and updated_at. Never includes any fields that do not exist on the schema.","description":"Fetches a specific notification preference configuration using the unique id field (UUID primary key) from the \"discussionboard_notification_preferences\" table. This endpoint returns a single notification preference record with the following fields: id (primary key), discussionboard_member_id (which member this preference belongs to), code (notification template code), email_enabled (email enabled flag), inapp_enabled (in-app notification flag), browser_enabled (browser push notification flag), created_at (when this setting was created), and updated_at (last time this preference was updated).\n\nNo soft delete or archival flag exists on this schema – query returns only the actual row by pk. Any additional fields or metadata outside of these Prisma fields are not returned.\n\n404 error is returned if no matching record exists.","summary":"Retrieve details for a specific notification preference (discussionboard_notification_preferences) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification preference to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification preference details for the specified id.","typeName":"IDiscussionboardNotificationPreferences"},"authorizationRoles":null,"name":"at","path":"/discussionboard/notificationPreferences/{id}","method":"get"},{"specification":"Implements POST /discussionboard/notificationPreferences endpoint. Creates a new notification preference record for a user. Maps to the \"discussionboard_notification_preferences\" table in Prisma schema. Required fields: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled. Will also set created_at and updated_at timestamps. Returns the created record. Only actual fields from Prisma schema are processed or returned.","description":"Creates a new notification preference record for a member, as modeled in the \"discussionboard_notification_preferences\" Prisma table. Required fields for creation are: discussionboard_member_id (which member the preferences belong to), code (template code for which the preference applies), email_enabled (boolean), inapp_enabled (boolean), browser_enabled (boolean). The system automatically assigns id (UUID PK), created_at, and updated_at timestamps.\n\nNo soft or hard deletion applies; new records are always inserted (no archiving logic). Response and request never reference fields not present on the schema.\n\nValidation errors are returned for missing required fields or unique constraint violations (e.g., duplicate member_id, code pair).","summary":"Create a new notification preference record (discussionboard_notification_preferences).","parameters":[],"requestBody":{"description":"Information required to create a notification preference record.","typeName":"IDiscussionboardNotificationPreferences.ICreate"},"responseBody":{"description":"Details of the newly created notification preference.","typeName":"IDiscussionboardNotificationPreferences"},"authorizationRoles":null,"name":"create","path":"/discussionboard/notificationPreferences","method":"post"},{"specification":"Implements PUT /discussionboard/notificationPreferences/{id} endpoint. Updates an existing notification preference record by its unique id. All updates affect only fields defined in the \"discussionboard_notification_preferences\" schema: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, updated_at. Returns the updated record. No soft delete or archival fields are managed.","description":"Updates the details of an existing notification preference configuration in the \"discussionboard_notification_preferences\" table. The update operation strictly allows editing only the schema-defined fields: discussionboard_member_id, code, email_enabled, inapp_enabled, and browser_enabled. The updated_at field will be automatically set to the current time. Soft delete/archival is not supported in this entity—no such fields exist in the schema, so all updates are permanent changes to the row.\n\nAttempting to update non-existent fields or specifying omitted fields will result in validation errors. The response includes only the actual schema fields.\n\nA 404 error is returned if the id does not exist.","summary":"Update a notification preference (discussionboard_notification_preferences) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification preference to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the notification preference.","typeName":"IDiscussionboardNotificationPreferences.IUpdate"},"responseBody":{"description":"The updated notification preference record.","typeName":"IDiscussionboardNotificationPreferences"},"authorizationRoles":null,"name":"update","path":"/discussionboard/notificationPreferences/{id}","method":"put"},{"specification":"Implements DELETE /discussionboard/notificationPreferences/{id} endpoint. Removes a notification preference record by id. As the Prisma schema has NO soft delete or archival fields, this operation performs a hard deletion (permanent DB row removal). Only the id PK may be used to target the row. No other fields are affected or returned after deletion.","description":"Permanently deletes a notification preference from the \"discussionboard_notification_preferences\" table by its unique id (UUID primary key). There is no soft delete flag or archival logic present in the schema, so this operation erases the row entirely from the DB. Deletion actions cannot be undone and do not affect other related entities (no cascading behavior).\n\nA 404 error is returned if the record does not exist. The operation never references any fields not present in the schema.","summary":"Hard delete notification preference (discussionboard_notification_preferences) by id – permanent removal (no soft delete logic).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification preference to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/notificationPreferences/{id}","method":"delete"},{"specification":"Implements PATCH /discussionboard/privacyPolicies endpoint. Retrieves a list of privacy policy records, supporting pagination, filtering, and search by fields that exist on \"discussionboard_privacy_policies\" in Prisma. Returned fields are id, version, effective_date, title, content, created_at, and updated_at. No soft delete or archiving applies to this entity.","description":"Retrieves a paginated and/or filtered list of privacy policies from the \"discussionboard_privacy_policies\" table. This table contains all historical and current privacy policy versions. Results include the following fields per record: id (UUID primary key), version (version string), effective_date (when this policy became active), title (policy heading), content (full text), created_at (timestamp of creation), and updated_at (timestamp of most recent update).\n\nSearch and pagination parameters may be provided in the request body. This entity does not track soft deletion or archiving: only actual records present in the table are returned.\n\nErrors are returned for invalid filters or pagination values. Never returns or queries fields not present in the Prisma model.","summary":"Retrieve a paginated, filterable list of privacy policy records (discussionboard_privacy_policies).","parameters":[],"requestBody":{"description":"Query, search, filter, sort, and pagination options for privacy policy records.","typeName":"IDiscussionboardPrivacyPolicies.IRequest"},"responseBody":{"description":"Paginated list of privacy policy records matching the query.","typeName":"IPageIDiscussionboardPrivacyPolicies"},"authorizationRoles":null,"name":"index","path":"/discussionboard/privacyPolicies","method":"patch"},{"specification":"Implements GET /discussionboard/privacyPolicies/{id} endpoint. Retrieves a single privacy policy record by unique id, strictly returning fields modeled in Prisma: id, version, effective_date, title, content, created_at, updated_at. No reference to fields not on the schema. No soft or hard deletion logic is present.","description":"Fetches the full details of a specific privacy policy using its id (UUID) from the \"discussionboard_privacy_policies\" table. The returned object includes: id, version, effective_date, title, content, created_at, and updated_at—all fields as defined in the Prisma schema.\n\nAs there are no deleted_at, archived, or related soft delete markers, this endpoint always returns only if the exact row exists. No additional data or composite values are returned.\n\nReturns 404 if record with that id is not found.","summary":"Retrieve details for a privacy policy (discussionboard_privacy_policies) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the privacy policy to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Privacy policy details for the specified id.","typeName":"IDiscussionboardPrivacyPolicies"},"authorizationRoles":null,"name":"at","path":"/discussionboard/privacyPolicies/{id}","method":"get"},{"specification":"Implements POST /discussionboard/privacyPolicies endpoint. Creates a new privacy policy record, mapping to the \"discussionboard_privacy_policies\" table fields: version, effective_date, title, content. created_at and updated_at are set automatically. The response returns the newly created record with all fields as per schema. No fields missing from schema are referenced or returned. No deletion/archival is supported.","description":"Creates a new privacy policy record in the \"discussionboard_privacy_policies\" table for proper audit and regulatory tracking. Input (request body) must provide: version (policy version string), effective_date (policy activation date in ISO-8601), title (policy heading), and content (policy legal text). created_at and updated_at fields are auto-set.\n\nNo deletion or archival logic is present in the schema; once created, policy records persist permanently for audit. Returns all record fields as defined in schema.\n\nValidation errors are returned for required field or uniqueness issues (e.g., version conflict).","summary":"Create a new privacy policy record (discussionboard_privacy_policies).","parameters":[],"requestBody":{"description":"Fields required to create a new privacy policy record.","typeName":"IDiscussionboardPrivacyPolicies.ICreate"},"responseBody":{"description":"Details of the newly created privacy policy record.","typeName":"IDiscussionboardPrivacyPolicies"},"authorizationRoles":null,"name":"create","path":"/discussionboard/privacyPolicies","method":"post"},{"specification":"Implements PUT /discussionboard/privacyPolicies/{id} endpoint. Updates an existing privacy policy record by its PK. Only fields from Prisma schema can be updated: version, effective_date, title, content. Timestamps are updated accordingly. No archival/soft delete logic is present, so operation updates only live rows.","description":"Updates a specific privacy policy record in the \"discussionboard_privacy_policies\" table by id (UUID). Editable fields are strictly: version, effective_date, title, content. created_at and updated_at may be managed automatically. Soft delete, archive, or status fields are not present—this endpoint overwrites existing policy attributes and does not remove or hide policies.\n\nValidation errors are returned for missing required fields or conflicts (e.g., version uniqueness). If the id does not match a row, a 404 is returned. Only schema fields are processed or returned.","summary":"Update a privacy policy record (discussionboard_privacy_policies) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the privacy policy to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for the privacy policy record.","typeName":"IDiscussionboardPrivacyPolicies.IUpdate"},"responseBody":{"description":"The updated privacy policy record.","typeName":"IDiscussionboardPrivacyPolicies"},"authorizationRoles":null,"name":"update","path":"/discussionboard/privacyPolicies/{id}","method":"put"},{"specification":"Implements DELETE /discussionboard/privacyPolicies/{id} endpoint. Since the Prisma schema for privacy policies does NOT include a soft delete (e.g., deleted_at), this operation performs a hard delete: it permanently removes the policy record from the table.","description":"Permanently deletes a privacy policy record from the \"discussionboard_privacy_policies\" table by its id (UUID primary key). Because there is no deleted_at or similar field in the schema, this is a hard delete and cannot be undone. Only the primary key is affected; no cascading or side-effects on related data.\n\nAttempting to delete a non-existent id returns 404. Request/response do not reference any non-schema fields.","summary":"Hard delete privacy policy (discussionboard_privacy_policies) by id – permanent removal (no soft delete logic).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the privacy policy to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/privacyPolicies/{id}","method":"delete"},{"specification":"Implements PATCH /discussionboard/dataErasureRequests endpoint. Retrieves a paginated, filterable list of data erasure requests. Each record is derived from \"discussionboard_data_erasure_requests\" Prisma table including id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, and admin_remark. This supports privacy compliance and audit flows without referencing any non-schema fields or soft delete logic.","description":"Fetches a paginated, optionally filtered list of data erasure requests from the \"discussionboard_data_erasure_requests\" table. Each record returned specifies id (UUID PK), discussionboard_member_id (which member the request references), status (current state: e.g., 'pending', 'approved', etc.), requested_at (submission timestamp), reviewed_at (moderation/admin review time), completed_at (when the request was finalized), and admin_remark (reason for approval/denial).\n\nPagination, filtering, and sorting are supported via the request body parameters. No deletion, archiving, or non-schema fields are processed or returned.\n\nValidation errors for incorrect filter parameters, otherwise errors follow standard audit log logic.","summary":"Retrieve paginated, filterable list of data erasure requests (discussionboard_data_erasure_requests).","parameters":[],"requestBody":{"description":"Query options for listing data erasure requests.","typeName":"IDiscussionboardDataErasureRequests.IRequest"},"responseBody":{"description":"Paginated response of data erasure request records matching query.","typeName":"IPageIDiscussionboardDataErasureRequests"},"authorizationRoles":null,"name":"index","path":"/discussionboard/dataErasureRequests","method":"patch"},{"specification":"Implements GET /discussionboard/dataErasureRequests/{id} endpoint. Retrieves a single data erasure request record by PK (UUID). Returns all fields from Prisma: id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, admin_remark. No archiving, soft/hard delete, or non-schema fields are referenced.","description":"Returns a specific data erasure request from the \"discussionboard_data_erasure_requests\" table, looked up by id (UUID PK). The object returned has all fields as defined in the Prisma schema: id (PK), discussionboard_member_id (referencing the subject member), status (string – current workflow state), requested_at (time of submission), reviewed_at (when action was taken), completed_at (when finalized), and admin_remark (optional staff/admin note).\n\nThe record is returned only if id exists; otherwise, 404 is given. No fields outside of actual schema present.","summary":"Retrieve details of a specific data erasure request (discussionboard_data_erasure_requests) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the data erasure request to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for the specified data erasure request.","typeName":"IDiscussionboardDataErasureRequests"},"authorizationRoles":null,"name":"at","path":"/discussionboard/dataErasureRequests/{id}","method":"get"}],"completed":147,"total":195,"step":0,"created_at":"2025-07-24T19:13:56.504Z"},"tokenUsage":{"facade":{"aggregate":{"total":651961,"input":{"total":604774,"cached":101376},"output":{"total":47187,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":651961,"input":{"total":604774,"cached":101376},"output":{"total":47187,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":651961,"input":{"total":604774,"cached":101376},"output":{"total":47187,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":651961,"input":{"total":604774,"cached":101376},"output":{"total":47187,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements the deletion of a thread snapshot entity. The corresponding Prisma model is 'discussionboard_thread_snapshots'. This operation removes a specific thread snapshot from the database by its primary key 'id'. As the schema does not include any soft deletion-related fields (like 'deleted_at' or 'is_deleted'), this endpoint will perform a hard delete, permanently removing the record. Related audit and rollback functionality is managed in other workflow processes outside this endpoint.","description":"This endpoint allows the permanent deletion of a thread snapshot identified by its 'id' field (type: String, UUID). It directly deletes the entry from the 'discussionboard_thread_snapshots' table, which contains versioned copies of thread titles and bodies for audit and history tracking. As there are no soft delete fields defined in the Prisma schema, this operation results in an irreversible removal of the thread snapshot record. Use with care to ensure compliance with strict audit and compliance requirements, as this action cannot be undone. Any application-level references or rollback systems should be updated separately if relevant. If the specified snapshot does not exist, an appropriate error response should be returned. Only authorized roles should invoke this endpoint according to platform policy.","summary":"Hard deletes a thread snapshot in 'discussionboard_thread_snapshots' by id (no soft-delete).","parameters":[{"name":"id","description":"Target thread snapshot's ID (UUID) to be permanently deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/threadSnapshots/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of thread tag assignments from the 'discussionboard_thread_tags' table. Supports advanced searching and filtering by fields like 'thread_id', 'assigned_at', and 'removed_at'. Implements list retrieval workflow for tag assignments with optional filtering, sorting, and pagination parameters as needed by frontend list views or analytics dashboards.","description":"Lists thread tag assignment records from 'discussionboard_thread_tags'. Each record indicates a tag that was assigned to a thread, with 'thread_id', 'assigned_at', and optional 'removed_at' fields. The endpoint supports filtering (e.g., by thread or active-only), sorting (e.g., newest first), and pagination. No soft or hard delete semantics are present; records are mark historical by 'removed_at' not being null. Results should return full tag assignment history as needed for moderation or analytics purposes. Only the fields present in the schema (id, thread_id, assigned_at, removed_at) are exposed. If filtering or pagination options are included in the request body, ensure schema compliance and parameter validation.","summary":"Retrieves a paginated list of thread tag assignments from 'discussionboard_thread_tags'.","parameters":[],"requestBody":{"description":"Filter, sort, and pagination criteria for thread tag listing.","typeName":"IDiscussionboardThreadTag.IRequest"},"responseBody":{"description":"Paginated and filtered list of thread tag assignment entities.","typeName":"IPageDiscussionboardThreadTag"},"authorizationRoles":null,"name":"index","path":"/discussionboard/threadTags","method":"patch"},{"specification":"Retrieves the details of a specific thread tag assignment by its unique identifier (primary key 'id') from 'discussionboard_thread_tags'. This operation returns all atomic fields for the tag assignment, which include 'id', 'thread_id', 'assigned_at', and optionally 'removed_at'. Used for detailed views in moderation, analytics, or rollback scenarios.","description":"Fetches a single thread tag assignment entity from 'discussionboard_thread_tags' by its 'id' (type: String, UUID). The response includes all snapshot fields such as the unique assignment id, which thread it applies to ('thread_id'), the date/time of tag assignment ('assigned_at'), and null or a value for 'removed_at' to indicate if untagged. No soft delete logic exists for this entity; if the record is found it is returned as-is. If the specified 'id' does not exist, an error should be returned. This is a read-only operation governed by general member and moderator access rules.","summary":"Fetches a thread tag assignment from 'discussionboard_thread_tags' by id.","parameters":[{"name":"id","description":"Target thread tag assignment ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the thread tag assignment entity.","typeName":"IDiscussionboardThreadTag"},"authorizationRoles":null,"name":"at","path":"/discussionboard/threadTags/{id}","method":"get"},{"specification":"Creates a new thread tag assignment in 'discussionboard_thread_tags'. This allows tagging a thread with a new tag, recording 'thread_id', 'assigned_at', and initializing 'removed_at' as null for active assignments. As mandated by 3NF, only fields in the schema are accepted and assigned.","description":"Creates a new thread tag assignment entity in 'discussionboard_thread_tags', setting the 'thread_id', 'assigned_at' (timestamp), and with 'removed_at' as null by default. This operation enables the addition of new tags to threads for discoverability and filtering. Any tag assignment must strictly use valid 'thread_id' values, and the payload must not include any fields not present in the schema. Related moderation/audit will track assignment events elsewhere. Returns the complete created entity upon success.","summary":"Creates a new thread tag assignment in 'discussionboard_thread_tags'.","parameters":[],"requestBody":{"description":"Data for creation of a thread tag assignment.","typeName":"IDiscussionboardThreadTag.ICreate"},"responseBody":{"description":"Created thread tag assignment entity.","typeName":"IDiscussionboardThreadTag"},"authorizationRoles":["member","moderator","admin"],"name":"create","path":"/discussionboard/threadTags","method":"post"},{"specification":"Updates an existing thread tag assignment record in 'discussionboard_thread_tags' by id. Fields allowed for patching are strictly those defined in the schema, e.g., updating 'removed_at' field (to support untagging or retraction).","description":"Updates the fields of a thread tag assignment (from 'discussionboard_thread_tags') identified by the primary key 'id'. This operation can only modify fields actually present in the schema, such as marking a tag as removed via the 'removed_at' timestamp. All changes must be compliant with the entity's constraints, and the response includes the updated entity. Attempting to update non-existent fields or records should result in an error.","summary":"Updates a thread tag assignment in 'discussionboard_thread_tags' by id.","parameters":[{"name":"id","description":"ID of the thread tag assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the thread tag assignment entity.","typeName":"IDiscussionboardThreadTag.IUpdate"},"responseBody":{"description":"Updated thread tag assignment entity.","typeName":"IDiscussionboardThreadTag"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionboard/threadTags/{id}","method":"put"},{"specification":"Deletes a thread tag assignment record in 'discussionboard_thread_tags' by id. This action fully removes the record from the database as the schema does not feature any soft delete or archival field.","description":"Permanently deletes a thread tag assignment from the table 'discussionboard_thread_tags' by its primary key 'id'. Since there is no 'deleted_at' or similar soft delete marker in the schema, this endpoint performs a hard delete, ensuring the record is irreversibly removed. All application or analytics systems referencing the deleted tag assignment should be updated accordingly. Authorization checks must ensure that this operation is only available to moderators or admins.","summary":"Hard deletes a thread tag assignment in 'discussionboard_thread_tags' by id (no soft-delete).","parameters":[{"name":"id","description":"Target thread tag assignment ID (UUID) for permanent deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/threadTags/{id}","method":"delete"},{"specification":"Paginated list/query operation for discussion posts from the 'discussionboard_posts' table. Supports advanced filtering, ordering, and pagination on actual schema fields, including 'thread_id', 'member_id', 'board_id', 'title', 'is_deleted', and date fields. Never references or supports non-existent fields in filtering results.","description":"Retrieves a paginated, filtered list of post entities from 'discussionboard_posts'. Requests may include filtering by 'discussionboard_thread_id' (to show posts in a thread), 'discussionboard_member_id' (to show posts by member), 'is_deleted' (to include/exclude deleted posts), as well as support for sorting and offset/limit-based pagination. Response contains only fields available in the schema: 'id', 'discussionboard_thread_id', 'discussionboard_member_id', 'discussionboard_board_id', 'title', 'body', 'is_deleted', 'created_at', 'updated_at'. Pagination and search options are handled via the request body. Posts marked 'is_deleted' true are logically deleted (soft-delete) and remain in the database for audit/compliance, not physically removed. No reference is made to non-existent fields. Error on invalid parameters or unauthorized access.","summary":"Retrieves a paginated, filtered list of post entities from 'discussionboard_posts'.","parameters":[],"requestBody":{"description":"Filtering/sorting/pagination criteria for post list query.","typeName":"IDiscussionboardPost.IRequest"},"responseBody":{"description":"Paginated list of discussion post entities.","typeName":"IPageDiscussionboardPost"},"authorizationRoles":null,"name":"index","path":"/discussionboard/posts","method":"patch"},{"specification":"Retrieves a single post entity from 'discussionboard_posts' by its primary key 'id'. Returns only schema-defined columns for the discussion post.","description":"Fetches a single post from 'discussionboard_posts' identified by its ID (type: String, UUID). Response includes all post fields: 'id', 'discussionboard_thread_id', 'discussionboard_member_id', 'discussionboard_board_id', 'title', 'body', 'is_deleted', 'created_at', 'updated_at'. No non-existent fields will be referenced. If the post does not exist, returns an appropriate error. This endpoint may be used by members, moderators, and admins alike for viewing post details, audit, or moderation. Respect soft-deleted posts: if a post's 'is_deleted' is true, it should still be accessible depending on user role or context, per business rules.","summary":"Returns a specific post from 'discussionboard_posts' by id.","parameters":[{"name":"id","description":"ID of the post to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the discussion post entity.","typeName":"IDiscussionboardPost"},"authorizationRoles":null,"name":"at","path":"/discussionboard/posts/{id}","method":"get"},{"specification":"Creates a new post entity in 'discussionboard_posts'. This operation sets all schema-defined fields for a post, including 'discussionboard_thread_id', 'discussionboard_member_id', 'discussionboard_board_id', 'title', 'body', 'is_deleted', and required timestamps. As per schema, 'is_deleted' is a boolean, defaulting to false upon creation unless soft-deleted at time of posting (unusual).","description":"Creates a new post in 'discussionboard_posts' using strictly the fields in the schema. Requires foreign keys to valid thread, board, and member, sets title and body, initializes 'is_deleted' to false by default, and provides timestamps. This endpoint enables members and moderators to post new content to threads/boards. Payload must comply with all schema constraints: only atomic, non-derived post fields can be set. Additional moderation, notification, or audit will be handled by other platform features as needed.","summary":"Creates a new discussion post in 'discussionboard_posts'.","parameters":[],"requestBody":{"description":"Creation payload for the post entity.","typeName":"IDiscussionboardPost.ICreate"},"responseBody":{"description":"Created post entity.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"name":"create","path":"/discussionboard/posts","method":"post"},{"specification":"Updates an existing post in 'discussionboard_posts' identified by 'id'. The request can update only actual schema fields: 'title', 'body', 'is_deleted', and 'updated_at'.","description":"Updates an existing post in 'discussionboard_posts' by its ID. Permitted fields for updating match the schema: 'title', 'body', 'is_deleted' (for soft delete), and 'updated_at'. Trying to update or reference non-existent fields results in schema validation errors. After updating, the endpoint returns the modified post entity containing all schema-defined fields. Use role-appropriate authorization and validate field types strictly according to schema. Returns an error if the post does not exist.","summary":"Updates a post from 'discussionboard_posts' by id.","parameters":[{"name":"id","description":"ID of the post to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the post entity.","typeName":"IDiscussionboardPost.IUpdate"},"responseBody":{"description":"Updated post entity.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"name":"update","path":"/discussionboard/posts/{id}","method":"put"},{"specification":"Implements soft delete for posts in 'discussionboard_posts' by setting the 'is_deleted' field to true for the specified post. Since the model includes an 'is_deleted' boolean but not a 'deleted_at' timestamp, it performs logical removal, not a physical hard delete. The post remains in the table for audit, moderation, and compliance.","description":"Marks a post in 'discussionboard_posts' as deleted (soft delete) by setting the 'is_deleted' field to true. Operates on the target post identified by its primary key 'id'. No record is ever hard deleted due to the presence of the 'is_deleted' flag. The action is reversible (can be undone by setting is_deleted=false via a PUT update operation if required by business rules). This ensures compliance with the retention and audit requirements, keeping all post data for possible review. Returns appropriate errors for unauthorized access or if the post does not exist.","summary":"Soft deletes a post (marks as deleted using 'is_deleted') in 'discussionboard_posts' by id.","parameters":[{"name":"id","description":"ID of the post to soft delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","path":"/discussionboard/posts/{id}","method":"delete"},{"specification":"Returns a paginated and filtered list of post snapshot versions from the table 'discussionboard_post_snapshots'. This enables audit and version rollback by exposing each historical mutation snapshot of post titles and bodies along with metadata, filtered/sorted by schema fields only.","description":"Retrieves a filtered and paginated set of entries from 'discussionboard_post_snapshots', where each record represents a previous version of a post (for rollback, moderation review, or audit). Supports requesting by 'discussionboard_post_id' (to show all versions of a specific post), filtering by editor, and filtering/sorting by snapshot time ('taken_at'). The result exposes only primary schema fields: id, discussionboard_post_id, editor_member_id, title, body, taken_at. Pagination and filtering are controlled by request body parameters as per schema; any other requested fields must be rejected as invalid.","summary":"Lists and searches post version snapshots in 'discussionboard_post_snapshots'.","parameters":[],"requestBody":{"description":"Filtering/sorting/pagination criteria for post snapshot version listing.","typeName":"IDiscussionboardPostSnapshot.IRequest"},"responseBody":{"description":"Paginated list of post snapshot versions.","typeName":"IPageDiscussionboardPostSnapshot"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/discussionboard/postSnapshots","method":"patch"}],"completed":159,"total":195,"step":0,"created_at":"2025-07-24T19:13:59.602Z"},"tokenUsage":{"facade":{"aggregate":{"total":698841,"input":{"total":648233,"cached":101376},"output":{"total":50608,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":698841,"input":{"total":648233,"cached":101376},"output":{"total":50608,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":698841,"input":{"total":648233,"cached":101376},"output":{"total":50608,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":698841,"input":{"total":648233,"cached":101376},"output":{"total":50608,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements retrieval of a single post snapshot by its unique identifier (UUID). This operation allows clients to fetch a snapshot of a post, including the post's title, body, the editor (if recorded), and the time the snapshot was taken. The endpoint is directly mapped to the 'discussionboard_post_snapshots' table, and fields returned are exactly those stored in the schema: id, discussionboard_post_id, editor_member_id, title, body, and taken_at. No extra fields or derived data are included. Only present, schema-defined fields are referenced.","description":"This operation fetches a single post snapshot by its unique identifier, directly from the 'discussionboard_post_snapshots' table. The endpoint returns all relevant fields: the snapshot's id, the associated post id, the optional editor member id (can be null), the title and body as they existed at the time the snapshot was created, and the taken_at timestamp. No other metadata, audit trails, or historical data outside the schema are included. The operation guarantees compliance with the exact column definitions in the schema and does not presume any audit, user, or deletion fields except those defined. If the provided id does not exist, a standard not-found error is returned. The endpoint is read-only.","summary":"Fetch a single discussionboard_post_snapshots entity by id.","parameters":[{"name":"id","description":"Unique identifier of the post snapshot to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns the full details of the specified post snapshot, matching the discussionboard_post_snapshots schema.","typeName":"Idiscussionboard_post_snapshots"},"authorizationRoles":null,"name":"at","path":"/discussionboard/postSnapshots/{id}","method":"get"},{"specification":"Implements the creation of a new post snapshot for audit/version control purposes. This endpoint writes a new row to the 'discussionboard_post_snapshots' table. Required fields per the schema are: id (UUID, usually generated by the backend), discussionboard_post_id (FK), optional editor_member_id (null if not set), title, body, taken_at timestamp. No extra or inferred fields are accepted or stored. Respects 3NF: All fields in the body must map directly to schema columns.","description":"This endpoint allows users (typically editors or the system itself) to create a new post snapshot. The request body must contain fields directly corresponding to the 'discussionboard_post_snapshots' model: discussionboard_post_id (UUID), title (string), body (string), taken_at (timestamp). Optionally, editor_member_id may be set (UUID or null). The id may be supplied by the client or generated server-side according to overall application conventions. The operation validates that no extra, derived, or denormalized fields are allowed; the payload must strictly match the schema. On success, the newly created post snapshot entry is returned. If required fields are missing or malformed, appropriate validation errors are returned.","summary":"Create a new post snapshot (discussionboard_post_snapshots).","parameters":[],"requestBody":{"description":"Post snapshot info adhering to discussionboard_post_snapshots schema.","typeName":"Idiscussionboard_post_snapshots.ICreate"},"responseBody":{"description":"Created snapshot row, per schema.","typeName":"Idiscussionboard_post_snapshots"},"authorizationRoles":null,"name":"create","path":"/discussionboard/postSnapshots","method":"post"},{"specification":"Updates an existing post snapshot identified by id. Only the fields present in the 'discussionboard_post_snapshots' schema are accepted or modified: discussionboard_post_id, editor_member_id, title, body, taken_at timestamp. The id (primary key, UUID) is specified in the path and must match an existing row.","description":"This PUT operation allows updating a post snapshot in the 'discussionboard_post_snapshots' table. The user must specify the snapshot id in the path. The request body includes any or all updatable fields: discussionboard_post_id, editor_member_id (optional or null), title, body, and taken_at. The operation refuses any payload fields outside the schema. The id field itself is used for locating the record and typically not updated. Attempts to update non-existent records result in a not-found error. If validation or referential constraints are violated (e.g., foreign keys do not exist), appropriate errors are returned. No audit trail or extra metadata is written; full compliance with schema only. Operation is fully idempotent.","summary":"Update a specific post snapshot (discussionboard_post_snapshots) by id.","parameters":[{"name":"id","description":"The unique id of the post snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the post snapshot, as defined by the schema.","typeName":"Idiscussionboard_post_snapshots.IUpdate"},"responseBody":{"description":"The updated post snapshot, per schema.","typeName":"Idiscussionboard_post_snapshots"},"authorizationRoles":null,"name":"update","path":"/discussionboard/postSnapshots/{id}","method":"put"},{"specification":"Deletes a specific post snapshot by its unique id. This is a hard-delete operation because the 'discussionboard_post_snapshots' schema does not include any soft delete fields (such as deleted_at, is_deleted, or similar). The operation results in permanent removal of the row from the table. No soft delete or tombstone markers are present in the schema, so the deletion is non-reversible unless restored from backup.","description":"Performs a permanent deletion of the post snapshot identified by the given id in the 'discussionboard_post_snapshots' table. As there are no soft delete or logical deletion columns (like deleted_at or is_deleted) in the schema, this operation removes the row entirely from storage. Attempting to delete a non-existent snapshot id results in a not-found error response. Care should be taken as this operation is destructive and cannot be undone without external restoration.","summary":"Hard-delete a post snapshot (discussionboard_post_snapshots) by id (no soft delete fields exist).","parameters":[{"name":"id","description":"The unique id (UUID) of the post snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/postSnapshots/{id}","method":"delete"},{"specification":"Retrieves a paginated, searchable collection of post vote records from the 'discussionboard_post_votes' table. This PATCH endpoint enables advanced querying (filtering by fields, pagination, sorting) using a structured request body. Only columns present in the schema can be filtered or sorted: id, discussionboard_post_id, discussionboard_member_id, vote_type, and created_at. No derived fields or aggregates are available. The operation supports listing, searching, and analyzing post votes within the constraints of the schema.","description":"This operation fetches a list of post vote entries from the 'discussionboard_post_votes' table, supporting pagination, searching, and filtering based strictly on schema fields: id, discussionboard_post_id, discussionboard_member_id, vote_type, and created_at. Clients may specify search parameters and sorting options in the request body (see the Idiscussionboard_post_votes.IRequest schema for permitted fields). No extra data or denormalized fields are included. Results are returned in a standardized, paged container as defined by convention (IPageIdiscussionboard_post_votes). Errors are returned if any request fields do not exist in the schema.","summary":"List/search post votes (discussionboard_post_votes) with paging and filter.","parameters":[],"requestBody":{"description":"Query filter, search, paging, and sort options for post votes.","typeName":"Idiscussionboard_post_votes.IRequest"},"responseBody":{"description":"Paged results of post votes per schema.","typeName":"IPageIdiscussionboard_post_votes"},"authorizationRoles":null,"name":"index","path":"/discussionboard/postVotes","method":"patch"},{"specification":"Retrieves a single post vote record from the 'discussionboard_post_votes' table by its unique id (UUID). Returns all fields stored in the schema: id, discussionboard_post_id, discussionboard_member_id, vote_type, created_at. No extra metadata, status, or derived fields are returned. If the provided id does not exist, an error is returned. The operation is strictly read-only and cannot be used for editing/voting actions.","description":"Fetches the details of a single post vote by its id from the 'discussionboard_post_votes' schema. All values for id, discussionboard_post_id, discussionboard_member_id, vote_type, and created_at are returned exactly as stored. No additional data is provided outside the schema. If the id does not match any row in the table, a not-found error is returned. No audit or history data is shown, only the raw schema-defined fields.","summary":"Fetch a single post vote (discussionboard_post_votes) by id.","parameters":[{"name":"id","description":"Unique id (UUID) for the post vote to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post vote as per schema.","typeName":"Idiscussionboard_post_votes"},"authorizationRoles":null,"name":"at","path":"/discussionboard/postVotes/{id}","method":"get"},{"specification":"Creates a new post vote entry in the 'discussionboard_post_votes' table. The request body must include all required fields per schema: discussionboard_post_id (FK, UUID), discussionboard_member_id (FK, UUID), vote_type (integer: 1 for upvote, -1 for downvote, 0 for neutral), and created_at. The operation accepts only fields exactly as defined in the schema and rejects any additional or derived data.","description":"This endpoint records a user's voting action on a post by creating a new row in discussionboard_post_votes. Required request fields are: discussionboard_post_id, discussionboard_member_id, vote_type (must be one of 1, -1, 0), and created_at (timestamp). Id may be client-supplied or generated by the backend as per system convention. The schema enforces only one vote per user per post ('unique([discussionboard_post_id, discussionboard_member_id])'). Extra or denormalized fields will result in validation errors. On success, the new post vote record is returned with all schema fields.","summary":"Cast a new post vote (discussionboard_post_votes).","parameters":[],"requestBody":{"description":"Must match post vote schema for discussionboard_post_votes.","typeName":"Idiscussionboard_post_votes.ICreate"},"responseBody":{"description":"Created vote as per schema.","typeName":"Idiscussionboard_post_votes"},"authorizationRoles":null,"name":"create","path":"/discussionboard/postVotes","method":"post"},{"specification":"Updates fields for an existing post vote entry by id in 'discussionboard_post_votes'. The only mutable fields are those allowed by the schema: discussionboard_post_id, discussionboard_member_id, vote_type (int), created_at. The id in the path is used for row selection and is not changed. No non-schema or denormalized fields may be modified. The operation updates only those fields submitted in the request body and leaves the rest unchanged.","description":"Allows permitted fields in post vote rows in 'discussionboard_post_votes' to be updated. The request body takes schema fields: discussionboard_post_id, discussionboard_member_id, vote_type, created_at. The id path parameter selects the vote to update. Any attempt to mutate non-schema fields or use extra fields is explicitly rejected. Relational and type constraints, including uniqueness ([discussionboard_post_id, discussionboard_member_id]), are enforced by schema and backend. Attempts to update non-existent ids result in not-found errors. Operation is idempotent.","summary":"Update a post vote (discussionboard_post_votes) by id.","parameters":[{"name":"id","description":"Unique id of the post vote to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for the post vote; fields per schema only.","typeName":"Idiscussionboard_post_votes.IUpdate"},"responseBody":{"description":"Updated post vote per schema.","typeName":"Idiscussionboard_post_votes"},"authorizationRoles":null,"name":"update","path":"/discussionboard/postVotes/{id}","method":"put"},{"specification":"Deletes a post vote by its id from the 'discussionboard_post_votes' table. This is a hard delete operation as there are no soft delete markers (e.g., deleted_at, is_deleted) in the schema. The record is physically removed from the database. Idempotent: removing an already deleted/non-existent id returns not-found.","description":"This operation permanently deletes a post vote entry identified by the given id from the 'discussionboard_post_votes' table. As the schema does not contain any soft delete fields, no logical deletion or recovery is available: the row is actually removed. Deletion is not reversible unless restored from backup. Attempting to delete a non-existent record yields a not-found error. All fields referenced are from the schema only; no derived values are used.","summary":"Hard-delete a post vote from discussionboard_post_votes by id (no soft delete exists).","parameters":[{"name":"id","description":"Unique id of the post vote to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/postVotes/{id}","method":"delete"},{"specification":"Performs paged, filtered search over post report records in the 'discussionboard_post_reports' table. All filters and fields support only those columns present in the schema: id, discussionboard_post_id, reporter_member_id, report_type_id, description, created_at. No aggregates, extra, or derived fields are returned. This operation is used for moderation analytics or listing report queues. Returns records in a paged result container, supporting search, sort, and pagination parameters per the IRequest schema.","description":"Retrieves a collection of post reports from the 'discussionboard_post_reports' table. This PATCH operation allows advanced querying: filter by id, post, reporter, report_type, description, or created_at, and supports sorting and pagination. Request body fields must map exactly to schema attributes (see Idiscussionboard_post_reports.IRequest). Extra fields are forbidden. Results are returned in a paged wrapper as per platform standards. Errors occur if unrecognized fields are submitted. Operation is strictly read-only.","summary":"List/search post reports with paging from discussionboard_post_reports (schema fields only).","parameters":[],"requestBody":{"description":"Filtering/sorting/paging info as per schema.","typeName":"Idiscussionboard_post_reports.IRequest"},"responseBody":{"description":"Paged result of post reports, schema fields only.","typeName":"IPageIdiscussionboard_post_reports"},"authorizationRoles":null,"name":"index","path":"/discussionboard/postReports","method":"patch"},{"specification":"Fetches the details of a single post report by its id from the 'discussionboard_post_reports' table. Returns all schema-defined fields: id, discussionboard_post_id, reporter_member_id, report_type_id, description, created_at. No audit or moderation status outside schema is included. Returns not-found if the id is missing.","description":"Given a post report id, retrieves the corresponding post report row from the 'discussionboard_post_reports' table. All fields—id, discussionboard_post_id, reporter_member_id, report_type_id, description, created_at—are returned per schema. No other metadata or derived info is returned. Errors if no report matches the id. The endpoint is read-only and returns data as stored in the record at time of fetch. Only fields present in the schema are referenced in logic and documentation.","summary":"Fetch a single post report by id from discussionboard_post_reports.","parameters":[{"name":"id","description":"Unique id of the post report (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post report record as defined in schema.","typeName":"Idiscussionboard_post_reports"},"authorizationRoles":null,"name":"at","path":"/discussionboard/postReports/{id}","method":"get"},{"specification":"Creates a new post report in the 'discussionboard_post_reports' table. Request must contain all required schema fields: discussionboard_post_id (FK), reporter_member_id (FK), report_type_id (FK), description (nullable string), created_at. The id may be supplied client-side or generated server-side. No other fields or audit/status/extra metadata is accepted. Operation validates payload strictly against the schema. Output is the row as stored in the database; no computed or external context fields allowed.","description":"This POST operation enables the creation of a new post report—used for reporting abusive or inappropriate content. Required request body fields are discussionboard_post_id, reporter_member_id, report_type_id, description (may be null), and created_at timestamp. The operation does not accept any other properties or metadata. On success, returns the created schema-based post report row. Attempts to supply extra or non-schema fields will result in validation errors. Referential integrity is maintained by backend constraints. Documentation and logic refer exclusively to schema-defined fields, not business rules, moderation workflow, or derived status.","summary":"Create a new post report in discussionboard_post_reports (fields per schema).","parameters":[],"requestBody":{"description":"Request body must match post report schema fields strictly.","typeName":"Idiscussionboard_post_reports.ICreate"},"responseBody":{"description":"Created post report row, schema fields only.","typeName":"Idiscussionboard_post_reports"},"authorizationRoles":null,"name":"create","path":"/discussionboard/postReports","method":"post"}],"completed":171,"total":195,"step":0,"created_at":"2025-07-24T19:14:03.740Z"},"tokenUsage":{"facade":{"aggregate":{"total":746032,"input":{"total":691697,"cached":103168},"output":{"total":54335,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":746032,"input":{"total":691697,"cached":103168},"output":{"total":54335,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":746032,"input":{"total":691697,"cached":103168},"output":{"total":54335,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":746032,"input":{"total":691697,"cached":103168},"output":{"total":54335,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Creates a new board-moderator assignment, representing the many-to-many relationship between boards and moderators in the political/economic discussion board platform. This endpoint is directly linked to the 'discussionboard_board_moderators' table and is used to assign an existing moderator to a specific board. Only properties present in the schema are included: discussionboard_board_id (board being assigned), discussionboard_moderator_id (the moderator assigned), is_primary (if this moderator is primary), joined_at (when assignment starts). No soft delete or revoke fields; modification and deletion is handled by separate endpoints. This operation is primarily for admin or privileged users.","description":"This endpoint enables platform administrators to create a new record in the 'discussionboard_board_moderators' table, thus assigning a moderator to a specific board. The operation strictly requires both the board id and moderator id, both of which must exist in their respective tables as per foreign key constraints. Additionally, the assignment can specify whether this moderator is considered the primary moderator for the board and the exact join timestamp. There are no soft-delete or revocation fields on this table, so this action is permanent unless separately updated or deleted.\n\nSecurity for this operation must be strictly enforced — only users who are admins may assign moderators to boards. All relationships must be validated against existing boards and moderators to enforce referential integrity. Attempting to assign a moderator who is already assigned to a board should result in an error due to the schema's unique constraint on (discussionboard_board_id, discussionboard_moderator_id).\n\nThe creation operation does not cascade to create members or moderators; these references must exist prior to assignment. Error handling should cover invalid references, violations of unique constraints, and insufficient privileges. Related endpoints include updating (PUT) or deleting (DELETE) board-moderator assignments.\n\nAll properties referenced are present in the schema (discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at), with joined_at representing when the assignment was made. This operation does not affect moderator or board details directly.","summary":"Create a new board-moderator assignment in discussionboard_board_moderators, linking an existing moderator to a board.","parameters":[],"requestBody":{"description":"Information required to assign a moderator to a board, including board id, moderator id, is_primary flag, and joined_at timestamp.","typeName":"IDiscussionboardBoardModerators.ICreate"},"responseBody":{"description":"The newly created board-moderator assignment details.","typeName":"IDiscussionboardBoardModerators"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/boardModerators","method":"post"},{"specification":"Updates an existing board-moderator assignment in the 'discussionboard_board_moderators' table. This operation allows modifying assignment properties such as is_primary or joined_at, but always references a specific assignment by its id (UUID). No soft-delete, revoke, or audit fields exist—only the explicit properties of this table. Used for re-assigning primary moderator status or correcting assignment metadata as per platform admin workflows.","description":"The update endpoint for board-moderator assignments allows an admin to modify the assignment's properties, such as toggling the is_primary flag to designate a primary moderator or altering the joined_at timestamp for audit correction purposes. The update is done via the assignment's unique id (provided in the endpoint path parameter as 'id', type string, format uuid), and the request body contains the assignable properties.\n\nAll updated fields must exist in the schema: is_primary (Boolean), joined_at (DateTime). Since no revoked_at field exists in this table, removal or logical revocation is handled by the DELETE endpoint, not by update. If the assignment does not exist, the endpoint returns a suitable error. Only users with admin rights should be allowed to update moderator assignments.\n\nRelated endpoints for this entity include POST (create new assignments) and DELETE (remove moderator from board). No extraneous or soft delete fields are referenced in the operation; all field references match the schema.","summary":"Update a board-moderator assignment's properties (e.g., is_primary, joined_at) by id.","parameters":[{"name":"id","description":"Target board-moderator assignment's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable properties for a board-moderator assignment: is_primary and joined_at.","typeName":"IDiscussionboardBoardModerators.IUpdate"},"responseBody":{"description":"The updated board-moderator assignment details.","typeName":"IDiscussionboardBoardModerators"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/boardModerators/{id}","method":"put"},{"specification":"Permanently deletes an existing board-moderator assignment from the 'discussionboard_board_moderators' table. No soft-delete or revoke fields are present in this entity—DELETE is a hard delete and removes the assignment entirely from the database. This is used to remove moderator privileges for a specific board. Only admins can perform this operation.","description":"The delete operation on board-moderator assignments will permanently remove the target assignment row from the 'discussionboard_board_moderators' table, identified by its id (UUID). No is_deleted, deleted_at, or revoke fields exist, so this operation is a true hard delete. Attempting to delete a non-existent assignment returns a suitable error. The operation must verify that the provided id exists and that the requesting user has admin privileges.\n\nDeleting the assignment does not affect the moderator or board entities directly; only the link between them is removed. For audit purposes, related events may be recorded in platform logs, but no audit fields are present in the object schema. Related endpoints include creation (POST) and update (PUT) of assignments. All properties and behaviors referenced exist in the schema.","summary":"Hard delete of a board-moderator assignment by id (no soft delete fields exist).","parameters":[{"name":"id","description":"Target board-moderator assignment's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion (may return deleted id or status).","typeName":"IDeleteConfirmation"},"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/boardModerators/{id}","method":"delete"},{"specification":"Retrieves a list of forum threads matching complex search or filtering criteria in the 'discussionboard_threads' table. Uses PATCH due to potentially complex query bodies. Returns a paginated, searchable list of threads with fields strictly matching the Prisma schema (e.g., id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at). Supports filters such as by board, author, creation date, and search by title. Never references non-existent fields.","description":"This endpoint enables clients to retrieve a filtered, paginated list of discussion threads from the 'discussionboard_threads' table, using complex search criteria provided in the request body. Only the actual table columns are included as filter/sort options (id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at). Filtering/sorting/pagination is done purely on these fields; no additional meta or computed fields are assumed.\n\nThread retrieval supports searching by board (board_id), thread author (author_member_id), fulltext/title search, creation/update/deleted_at date ranges, and can return both active and soft-deleted (deleted_at not null) records. No is_deleted or external status fields exist. If a thread is found with deleted_at set, it is considered soft-deleted and may be hidden from normal users. The schema does not contain audit, tags, or status fields outside of the actual columns.","summary":"List/search forum threads with filter/sort/pagination (Prisma fields only) from discussionboard_threads.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination criteria for querying threads; fields must match Prisma schema.","typeName":"IDiscussionboardThreads.IRequest"},"responseBody":{"description":"A paginated list of forum threads matching the request criteria.","typeName":"IPageIDiscussionboardThreads"},"authorizationRoles":null,"name":"index","path":"/discussionboard/threads","method":"patch"},{"specification":"Retrieves a specific discussion thread by its id from the 'discussionboard_threads' table. Only Prisma-defined fields are returned: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Soft delete is represented by deleted_at only.","description":"This endpoint allows clients to fetch a single discussion thread from the 'discussionboard_threads' table by specifying its unique id (UUID) in the path. The returned object includes only fields present in the schema: id, board_id, author_member_id, title, body, created_at, updated_at, and deleted_at. If the thread's deleted_at field is not null, it is considered soft deleted and may not be shown to regular users, but the record still exists in the database.\n\nIf a thread with the given id does not exist, a not-found error is returned. The operation never references fields not defined in the schema. This endpoint is fundamental for viewing the details of a specific thread, supporting full audit and UI display use cases. Related endpoints are PATCH for listing threads, POST for creation, and PUT/DELETE for update/removal.","summary":"Get a specific thread by id from discussionboard_threads, including soft-delete status (deleted_at).","parameters":[{"name":"id","description":"Target thread's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full record of the requested thread from discussionboard_threads.","typeName":"IDiscussionboardThreads"},"authorizationRoles":null,"name":"at","path":"/discussionboard/threads/{id}","method":"get"},{"specification":"Creates a new discussion thread in the 'discussionboard_threads' table. All required fields must be provided according to the schema: board_id (which board), author_member_id (who is posting), title (thread subject), optional body, and system-managed timestamps. The resulting object includes soft delete support via deleted_at, but creation does not set it. Not all fields are user-supplied; some are system-generated (created_at, updated_at).","description":"The thread creation endpoint receives a request body with the required thread parameters: board_id, author_member_id, title, and optional body. The server sets created_at and updated_at timestamps automatically. The deleted_at field is used for soft delete (not set at creation). Only fields defined in the Prisma schema are included or returned. If the provided board or author ids do not exist, the operation fails due to foreign key constraint.\n\nThis operation enables regular members to start new discussion topics inside a specified board. All business logic, including permissions, referential integrity, and rate-limiting (if any), is enforced by the service layer using the provided fields. Audit and workflow policies may capture additional info, but are not represented here. This endpoint is related to PATCH (list/search), GET (retrieve), PUT (update), and DELETE (soft-delete) on threads.","summary":"Create a new thread in discussionboard_threads with title, author, board, and optional body.","parameters":[],"requestBody":{"description":"Fields for creating a new thread: board_id, author_member_id, title, (optional) body.","typeName":"IDiscussionboardThreads.ICreate"},"responseBody":{"description":"The newly created discussion thread as stored in discussionboard_threads.","typeName":"IDiscussionboardThreads"},"authorizationRoles":null,"name":"create","path":"/discussionboard/threads","method":"post"},{"specification":"Updates the properties of a single thread in the 'discussionboard_threads' table, identified by its id. Only Prisma-defined fields can be updated: title, body, and (in some cases) deleted_at (for implementing soft delete/restore by admins/moderation). No external audit fields or flags are included. This endpoint is suitable for both users (editing their thread) and moderators/admins (lock/edit/restore).","description":"This endpoint accepts a PUT request to update the details of an existing thread, identified by the thread id in the path. The body includes fields present in the schema: title (subject), body (main content), and possibly deleted_at for soft delete/restore. Updates to timestamps are managed by the service automatically (updated_at is not received but set on update). Only schema fields can be modified; referential integrity is checked for relationships (e.g., board_id or author_member_id, if included). If the id does not exist, an error is returned. Permission checking must ensure only the author or an authorized moderator/admin can edit/delete/restore the thread; audit policy is enforced outside this schema.\n\nThis operation is critical for thread editing workflows and soft-delete/restore flows. Related endpoints: GET (retrieve thread), PATCH (search/list), POST (create), DELETE (soft delete).","summary":"Update an existing thread by id (title/body/soft-delete) in discussionboard_threads.","parameters":[{"name":"id","description":"Target thread's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable thread fields: title, body, optionally deleted_at for soft-delete/restore. Only actual Prisma fields allowed.","typeName":"IDiscussionboardThreads.IUpdate"},"responseBody":{"description":"The updated discussion thread details from discussionboard_threads.","typeName":"IDiscussionboardThreads"},"authorizationRoles":null,"name":"update","path":"/discussionboard/threads/{id}","method":"put"},{"specification":"Soft-deletes a thread by setting the 'deleted_at' field to the current timestamp in the 'discussionboard_threads' table. Hard delete is not performed as the schema provides soft-delete with a nullable DateTime column. Once soft-deleted, the thread remains in the database but is flagged as deleted. Only possible if deleted_at exists and is nullable.","description":"The DELETE endpoint for threads sets the 'deleted_at' field to the current timestamp on the target thread row (by id), performing a soft delete as directed by the schema (deleted_at is nullable and acts as the soft-delete flag). No hard deletion occurs; the thread remains retrievable by id but should not be shown in most client queries. Attempting to delete a non-existent thread returns an error. Only the thread's author, moderator, or admin should be allowed to perform a soft delete, with permissions enforced outside this schema. Soft-deleted threads can potentially be restored by updating deleted_at back to null using the PUT endpoint.","summary":"Soft-delete a thread by id by setting the deleted_at field; no hard delete is performed.","parameters":[{"name":"id","description":"Target thread's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation that the thread's deleted_at has been set (soft-delete).","typeName":"ISoftDeleteConfirmation"},"authorizationRoles":null,"name":"erase","path":"/discussionboard/threads/{id}","method":"delete"},{"specification":"Retrieve a paginated, filtered list of thread snapshot records from 'discussionboard_thread_snapshots'. Only properties present in the table may be used for searching/sorting: id, thread_id, actor_id, title, body, reason, created_at. Supports advanced lookup for moderation and version control UI. Does not reference or return nonexistent fields or summary info.","description":"This endpoint lets clients retrieve a (possibly filtered/sorted) list of thread snapshot records, supporting audit, content versioning, and moderation flows by providing granular edit history for threads. All search/sort/filter fields must be taken directly from the 'discussionboard_thread_snapshots' schema—e.g., id (uuid), thread_id (uuid, required for matching a thread's snapshots), actor_id (uuid), title (string), created_at (datetime). No non-schema fields are accepted.\n\nSupports pagination for large audit trails. Used for building moderation and admin UIs, showing edit/version timelines, and audit history. The endpoint strictly uses the PATCH method to accept complex searches beyond simple GET url params. Related endpoints: POST (create snapshot), GET (retrieve snapshot by id), PUT (update snapshot if allowed). No extraneous fields or behavior, and never references fields not present in the Prisma schema.","summary":"Paginated, filtered list of thread snapshots from discussionboard_thread_snapshots (for audit/versioning).","parameters":[],"requestBody":{"description":"Criteria for searching/filtering/paginating thread snapshots, limited to schema fields only.","typeName":"IDiscussionboardThreadSnapshots.IRequest"},"responseBody":{"description":"A paginated list of thread snapshot records matching criteria.","typeName":"IPageIDiscussionboardThreadSnapshots"},"authorizationRoles":null,"name":"index","path":"/discussionboard/threadSnapshots","method":"patch"},{"specification":"Retrieve a specific thread snapshot by its id from the 'discussionboard_thread_snapshots' table. Schema defines all retrievable properties: id, thread_id, actor_id, title, body, reason, created_at. No audit trail or extended relationships beyond the actual table columns. Read-only access, no editing or deletion through this endpoint.","description":"Fetches a single snapshot record for a thread by id (UUID), returning all fields defined in the 'discussionboard_thread_snapshots' schema: id, thread_id, actor_id, title, body, reason, created_at. Used for detailed inspection of thread edit history (for moderators/admins or advanced user audit UI). If the snapshot is not found, the endpoint returns a not found error. This endpoint cannot modify or delete snapshots—records are immutable by design.\n\nRelated endpoints: PATCH for list/search, POST for creation, PUT for updates (if allowed by policy, e.g., reason correction). Schema fields only, with no reference to tags, audit log, or unrelated entities.","summary":"Get a thread snapshot by id from discussionboard_thread_snapshots using only schema fields.","parameters":[{"name":"id","description":"Target thread snapshot's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The snapshot record for the thread, as stored in discussionboard_thread_snapshots.","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRoles":null,"name":"at","path":"/discussionboard/threadSnapshots/{id}","method":"get"},{"specification":"Creates a new thread snapshot in 'discussionboard_thread_snapshots' capturing the state of a thread at a point in time for rollback/audit. Fields provided must match schema: thread_id (which thread), actor_id (who made the change, may be null/system), title (snapshot title), optional body, optional reason, created_at (timestamp). system or moderator may trigger. Request body must not include extraneous data—schema fields only.","description":"This endpoint creates a new snapshot record in 'discussionboard_thread_snapshots', capturing the thread's title (required), optional body and reason, associated thread_id, and actor_id (who performed/authorized the change, nullable for system actions). The created_at timestamp should be set by the service at snapshot creation—never set by client. On success, returns the persisted snapshot object (with all schema fields). Validation of thread_id and actor_id (if present) against their respective tables is mandatory. Related endpoints: PATCH (list/search snapshots), GET (by id), PUT (update details—if allowed, e.g., to correct moderation reason). Only properties present in the schema may be included in request/response.","summary":"Create a thread snapshot with title/body/reason and references, as per schema (for version/audit).","parameters":[],"requestBody":{"description":"Information for new thread snapshot: thread_id, actor_id (optional), title, optional body and reason.","typeName":"IDiscussionboardThreadSnapshots.ICreate"},"responseBody":{"description":"Details of the created thread snapshot, as stored (all schema fields).","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRoles":null,"name":"create","path":"/discussionboard/threadSnapshots","method":"post"},{"specification":"Updates fields of an existing thread snapshot (if permitted by policy) by id in the 'discussionboard_thread_snapshots' table. Only updatable schema fields are allowed—title, body, reason, actor_id; created_at is not client updatable. This operation is rare but may be used for moderation reason corrections or typo fixes in audit trail records. No non-schema fields allowed.","description":"This PUT endpoint allows updating certain mutable properties of a thread snapshot, such as title, optional body, reason, or potentially actor_id (for correcting audit info), by referencing the snapshot's id (UUID) in the path. Only properties present in the schema are included: title, body, reason, actor_id. created_at is set by the service and is not modifiable. This endpoint should only be accessible to admins or trusted moderation tools, as snapshots are normally immutable.\n\nIf the snapshot id does not exist, the operation fails with an appropriate error. Patch/list/retrieve (GET, PATCH, POST) endpoints handle normal usage. Audit and logging occur externally, as this table lacks audit fields. Error handling covers uniqueness and foreign key constraints.","summary":"Update (if allowed) the title, body, reason, or actor_id of a thread snapshot record by id.","parameters":[{"name":"id","description":"Target thread snapshot's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable thread snapshot fields: title, optional body/reason, actor_id.","typeName":"IDiscussionboardThreadSnapshots.IUpdate"},"responseBody":{"description":"The updated thread snapshot object (all schema fields).","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRoles":null,"name":"update","path":"/discussionboard/threadSnapshots/{id}","method":"put"}],"completed":183,"total":195,"step":0,"created_at":"2025-07-24T19:14:19.660Z"},"tokenUsage":{"facade":{"aggregate":{"total":794093,"input":{"total":735167,"cached":103168},"output":{"total":58926,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":794093,"input":{"total":735167,"cached":103168},"output":{"total":58926,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":794093,"input":{"total":735167,"cached":103168},"output":{"total":58926,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":794093,"input":{"total":735167,"cached":103168},"output":{"total":58926,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Fetch detailed moderator assignment information by its unique ID, as defined by the discussionboard_moderators entity. This operation retrieves all available fields for a moderator assignment, including id, member_id, assigned_by_admin_id, assigned_at, expires_at, revoked_at. The GET method allows clients to view moderator assignment status, audit their privileges, and analyze assignment metadata for compliance. No soft delete or logical deletion field exists in discussionboard_moderators, so any deleted (removed) records will not be retrievable. This endpoint is typically used by administrators managing moderator permissions, for audit logs, or for presenting moderator status in UI dashboards.","description":"Retrieves complete details about a moderator assignment from the discussionboard_moderators table by its unique id. The endpoint exposes all atomic, normalized moderator assignment attributes, including id (primary key), member_id (linked to discussionboard_members.id identifying the assigned user), assigned_by_admin_id (referencing the administrator who assigned the role), assigned_at (assignment timestamp for audit trails), expires_at (if temporarily assigned), and revoked_at (if role is revoked).\n\nThe moderator assignment's status can be inferred from expires_at and revoked_at values. If revoked_at is set, the assignment is no longer valid. If expires_at is in the past, the assignment is expired. The endpoint exposes only persisted fields and does not derive status; application logic must interpret those fields accordingly for business logic.\n\nSecurity: This operation should be restricted to system users with sufficient privilege (admin or auditor roles), as moderator assignment records are considered sensitive administrative settings. Attempts to access non-existent ids must return a 404 error. Related assignment data may be cross-referenced in audit logs, but those must be queried separately.\n\nThis endpoint does not expose or access any member, admin, or audit information not present in the discussionboard_moderators schema. All returned fields are strictly as defined in the table, with zero soft delete logic present; absence of a record signals removal.","summary":"Get moderator assignment details by id in discussionboard_moderators table.","parameters":[{"name":"id","description":"Unique moderator assignment id (UUID) to fetch","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment details from discussionboard_moderators.","typeName":"IModeratorAssignment"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/moderators/{id}","method":"get"},{"specification":"Create a new moderator assignment to grant moderator privileges to a member. This operation registers a row in the discussionboard_moderators table with all required assignment information, including member_id, assigned_by_admin_id, assigned_at and, optionally, expires_at. No logical or soft-delete fields exist; a created row persists unless subsequently deleted. Use POST for new moderator role grants only. Enforce uniqueness on member_id. The admin assigning the moderator must be validated via assigned_by_admin_id and should comply with escalation procedures. This endpoint ensures auditability for privilege assignment events.","description":"Registers a new moderator assignment by creating a row in the discussionboard_moderators table. Required fields include member_id (linking to the member gaining moderator role), assigned_by_admin_id (referencing the acting admin assigning the role), and assigned_at (timestamp of assignment). expires_at may be set to schedule moderator privilege expiry (temporary role) or left null for a permanent assignment. The schema mandates member_id to be unique, ensuring members cannot have multiple moderator assignments simultaneously.\n\nUpon success, the endpoint returns all persisted assignment details. There are no calculated fields or soft delete logic; deletion of moderator status would require calling the DELETE endpoint. Assignment logic enforces single-assignment for a member and must validate that assigned_by_admin_id references an active administrator. Security protections are mandatory—only system admins can invoke this endpoint, and audit trails should be recorded out of band.\n\nAttempts to create assignments for already-assigned members should fail with a suitable error. No additional personalization, audit attributes, or metadata are provided except those in discussionboard_moderators. Business logic, e.g., auto-expiry or notifications, is not handled by this endpoint.","summary":"Grant moderator privileges to a member (create assignment in discussionboard_moderators).","parameters":[],"requestBody":{"description":"Moderator assignment creation info (member/admin ids, time, optional expiry) for discussionboard_moderators.","typeName":"IModeratorAssignment.ICreate"},"responseBody":{"description":"Newly created moderator assignment record from discussionboard_moderators.","typeName":"IModeratorAssignment"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/moderators","method":"post"},{"specification":"Update a moderator assignment in the discussionboard_moderators table by its unique id. Updateable fields include assigned_by_admin_id, assigned_at, expires_at, revoked_at. This operation allows changing assignment metadata such as reassigning the acting admin, setting a new expiry, or marking the moderator assignment as revoked. No soft delete or logical deletion semantics exist. Updating member_id is not permitted, as it is unique for assignment. PUT allows full replacement of assignment metadata (except id/member_id). Audit all changes for compliance.","description":"Modifies a moderator assignment by id in discussionboard_moderators. Request body should include assigned_by_admin_id (possibly changed if reassignment/override), assigned_at (audit-trace timestamp change), expires_at (for expiry extension/shortening), and revoked_at (for explicit revocation of moderator privileges). No logical deletion field exists; setting revoked_at is the only schema-supported way to end an assignment early. member_id must not be changed given the uniqueness constraint. Audit logs should be generated for all changes, including admin identity and rationale via separate API if required.\n\nBusiness logic for role expiry and revocation must reference the updated field values. If revoked_at is set, consider moderator privileges terminated even if expires_at is in the future. Changes are reflected immediately, and the row is replaced atomically. No derived or cross-table fields are exposed. All data is strictly as persisted in the table.\n\nAccess is restricted to system administrators. Field validation enforces correct UUIDs and timestamp formats. Requests to update non-existent ids return 404. Update succeeds only when the assignment id exists.","summary":"Update moderator assignment metadata in discussionboard_moderators by id.","parameters":[{"name":"id","description":"Moderator assignment id (UUID) to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated assignment metadata (excluding member id) for discussionboard_moderators.","typeName":"IModeratorAssignment.IUpdate"},"responseBody":{"description":"Updated moderator assignment data from discussionboard_moderators.","typeName":"IModeratorAssignment"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/moderators/{id}","method":"put"},{"specification":"Delete a moderator assignment by id (discussionboard_moderators). Since there is no soft delete or deleted_at field, this will perform a permanent hard delete of the row in accordance with audit/permanent removal business logic. The record will be irrecoverable after this operation. Use with caution—this action fully removes moderator assignment and must be strictly audited. Only system admins may invoke. Attempts to delete a non-existent id return 404. This endpoint is for full removal and does not cascade to member records or other entities.","description":"Deletes a moderator assignment identified by its id from the discussionboard_moderators table. As there is no soft delete field (such as deleted_at or is_deleted), this operation performs a hard delete, permanently removing the assignment record from the database. Consequently, all information pertaining to the assignment is lost, and it becomes impossible to recover or audit the assignment from the main moderator table after deletion. This endpoint only affects the moderator assignment and does not delete, deactivate, or alter the member's status elsewhere.\n\nAdministrative permissions are required. Strict access controls must prevent unauthorized invocation. All deletions should generate out-of-band audit trail records capturing the id, admin actor, timestamp, and rationale, but these are not handled by this API operation itself. If the target id does not exist, a 404 error is returned. No cascade, side effects, or member-level changes occur.\n\nThis endpoint must not attempt to access or report on any fields not present in the schema. All logic is strictly related to the existence and deletion of the moderator assignment row by primary key id.","summary":"Permanently remove moderator assignment (hard delete) by id from discussionboard_moderators.","parameters":[{"name":"id","description":"Moderator assignment id (UUID) for deletion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/moderators/{id}","method":"delete"},{"specification":"List administrator assignments in discussionboard_admins with support for query, filtering, and audit. This operation retrieves a paginated set of administrator assignments, exposing all member/admin assignment metadata for access control review and dashboarding. Query supports result pagination and possibly filtering by assignment fields (assigned_by_admin_id, assigned_at, revoked_at) as available. Use PATCH to allow complex request bodies for search/filter parameters. Access restricted to high-privilege roles for compliance.","description":"Query and list administrator assignments in the discussionboard_admins table. This endpoint supports paginated and filtered retrieval (by fields such as assigned_by_admin_id, assigned_at, revoked_at) as permitted by the schema. Each administrator assignment includes all atomic entity fields: id, member_id (who has admin privileges), assigned_by_admin_id (who assigned the privilege), assigned_at (when), and revoked_at (if privilege removed).\n\nTable is fully normalized; no soft delete or logical deletion fields exist. Filtering by active status is determined via revoked_at being null. Supports comprehensive admin privilege auditing and dashboard display, linking results to audit and access management workflows. Pagination, search, and advanced querying (e.g., by assignment time range or status) should be supported via request body parameters (see request schema).\n\nSecurity: Restricted to admin and privileged roles for compliance. Out-of-band audit logging and rationale are not handled in this operation directly, but should be part of broader access control best practices.","summary":"Retrieve a paginated (searchable/filterable) list of admin assignments from discussionboard_admins.","parameters":[],"requestBody":{"description":"Query/search and pagination/filter configuration for discussionboard_admins listing.","typeName":"IAdminAssignment.IRequest"},"responseBody":{"description":"Paginated list of admin assignments from discussionboard_admins.","typeName":"IPageIAdminAssignment"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/admins","method":"patch"},{"specification":"Fetch complete administrator assignment details by id from discussionboard_admins. GET operation provides all entity fields required for permissions management, audit, and compliance. The administrator assignment is identified by a unique id (UUID); returned fields include id, member_id, assigned_by_admin_id, assigned_at, revoked_at. No logical deletion or soft delete is present; record must exist to be fetched. Limited to admin-level access for security and compliance. Primary use is privilege management, security review, and interface presentation.","description":"Returns the full details of an administrator assignment from discussionboard_admins using its unique id (UUID). The returned object includes: id (assignment PK), member_id (the user assigned as admin), assigned_by_admin_id (the admin who performed the assignment), assigned_at (when admin status was granted), and revoked_at (if admin status has been revoked).\n\nNo logical or soft deletion semantics are present in the schema, so absence of the record indicates either no such assignment exists or it has already been removed. Application logic may interpret revoked_at for current/expired status. No other meta/audit/derived data is returned—only persisted schema fields are available.\n\nEndpoint access must be limited to system administrators or audit roles, as administrator assignments are highly sensitive. All logic and data are strictly constrained to visible fields in the table, with thorough parameter security screening. Requests for non-existent ids receive a 404 error.","summary":"Get admin assignment details by id from discussionboard_admins table.","parameters":[{"name":"id","description":"Unique admin assignment id (UUID) to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Admin assignment details from discussionboard_admins.","typeName":"IAdminAssignment"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/admins/{id}","method":"get"},{"specification":"Create a new administrator assignment (permissions escalation) for a member in the discussionboard_admins table, granting admin privileges. POST with member_id, assigned_by_admin_id, assigned_at, and (optional) revoked_at for future or retroactive admin role revocation. Enforces one admin assignment per member. This endpoint implements the role escalation business process, with audit and compliance best practices required. All field references are strictly as defined; no soft delete. Only admins can invoke.","description":"Creates a new administrator assignment row in the discussionboard_admins table, granting a member administrator privileges. Required request properties: member_id (target member), assigned_by_admin_id (admin creating the assignment), assigned_at (timestamp of assignment grant). Optionally, revoked_at may be provided if the privilege is revoked during creation. Only one admin assignment may exist per member due to uniqueness. Attempts to assign duplicate admin roles must fail.\n\nThe endpoint returns the full new administrator assignment record upon success. Audit logs and compliance records should be generated out of band, not by this API. All security and privilege escalation rules must be enforced in upstream logic. No additional fields or logic are present in the schema, so only these properties are assigned and returned.\n\nAccess to this operation is restricted to current administrators for security and governance transparency. No soft delete, recovery, or secondary effect logic is provided by this endpoint.","summary":"Grant admin privileges to a member (create assignment in discussionboard_admins).","parameters":[],"requestBody":{"description":"Admin assignment creation info for discussionboard_admins (member/admin ids, time, optional revoked_at).","typeName":"IAdminAssignment.ICreate"},"responseBody":{"description":"New admin assignment record from discussionboard_admins.","typeName":"IAdminAssignment"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/admins","method":"post"},{"specification":"Update an admin assignment by id in the discussionboard_admins table. PUT allows setting assigned_by_admin_id, assigned_at, revoked_at. Operation replaces assignment metadata (excluding id and member_id). No soft delete or logical deletion semantic is present. Uniqueness of member_id still enforced. Use for privilege revocation, reassignment, or correction. Audit trails and security checks are critical.","description":"Updates administrator assignment metadata by unique id in discussionboard_admins. Fields updatable via the request body: assigned_by_admin_id (to change the acting admin), assigned_at (for correction or audit update), revoked_at (to retroactively revoke privileges or restore admin status; null means active, non-null means removed).\n\nThe id and member_id for the assignment cannot be updated; all other fields are writable. There are no computed fields or soft delete—only actual field values are modified and persisted. Operation must maintain the uniqueness/integrity of member_id.\n\nAccess is strictly for current admins. Requests for absent ids return 404. All modification events should also be logged in audit trails outside of this endpoint. The updated assignment object is returned on success; business logic for interpreting status relies on revived_at and assigned_at only.","summary":"Update administrator assignment metadata in discussionboard_admins by id.","parameters":[{"name":"id","description":"Admin assignment id (UUID) to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated assignment metadata (excluding id/member_id) for discussionboard_admins.","typeName":"IAdminAssignment.IUpdate"},"responseBody":{"description":"Updated admin assignment data from discussionboard_admins.","typeName":"IAdminAssignment"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/admins/{id}","method":"put"},{"specification":"Delete an administrator assignment by id (discussionboard_admins). No soft delete, so this endpoint performs an irreversible hard delete, permanently removing the admin privilege assignment record. Only current admins may invoke. Use with caution, and ensure out-of-band audit trails are kept. Operation does not affect member account status—removes only the admin assignment. Use for privilege downgrades, exits, or error correction. Returns 404 if no such id exists.","description":"Permanently deletes an administrator assignment from discussionboard_admins by id. There are no soft delete or logical deletion markers in the schema; this operation hard deletes the admin assignment row, erasing all record of privilege assignment from the table. This action does not impact the status, membership, or existence of the related member account; it affects only admin role assignment tracking.\n\nSecurity: Only currently authorized administrators can perform this operation. Audit logging of deletion actions must occur separately from this API call, capturing at minimum the actor, timestamp, assignment id, and rationale. There are no cascade, side effects, or additional status change effects—this is a direct, permanent removal only.\n\nIf the id is not present, the operation returns a 404 error. No other response is returned on success. No attempt is made to derive or display any fields not present in the persistent schema; all behavior is strictly removal of the assignment row by id.","summary":"Permanently remove admin assignment (hard delete) by id from discussionboard_admins.","parameters":[{"name":"id","description":"Admin assignment id (UUID) to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/admins/{id}","method":"delete"},{"specification":"Query and list member profiles with pagination and search/filter parameters, exposing public profile information only. The discussionboard_member_profiles table includes id (PK), member_id (link to the user), display_name, bio, avatar_url, location, website_url. No personally sensitive or hidden data (such as credentials or deletion status) is exposed, reflecting the table design. The PATCH method enables complex queries and filtered results for public profile listings, roster/badge UI, and member directory search.","description":"Returns a paginated and filterable list of member profiles from the discussionboard_member_profiles table, exposing only public profile data: id, member_id, display_name, bio, avatar_url, location, website_url. Use this endpoint to implement the member directory, public roster, badge listing, or UI popover with user profile details.\n\nNo sensitive fields, authentication data, or logical deletion status is present; only the persisted schema fields in the member profiles table are available. Supports pagination, searching by display_name, and filtering by location or web presence. Security: Only public, limited-scope profile data is returned, with all search parameters supplied via the request body schema.\n\nQueries return paginated result objects. No audit metadata, sensitive credentials, or status flags outside the schema fields is exposed. The endpoint references only the public-facing member profiles, and does not include member account status, email, or login credentials, which are managed in other components.","summary":"Paginated/filterable listing of public member profiles from discussionboard_member_profiles.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for member profile roster query.","typeName":"IMemberProfile.IRequest"},"responseBody":{"description":"Page of public member profiles from discussionboard_member_profiles.","typeName":"IPageIMemberProfile"},"authorizationRoles":null,"name":"index","path":"/discussionboard/memberProfiles","method":"patch"},{"specification":"Get all public fields of a single member profile in discussionboard_member_profiles by its unique id. This endpoint allows fetching profile data for display in member cards, profile pages, or badges. Only id, member_id, display_name, bio, avatar_url, location, and website_url are available; all fields returned are atomic and present in the schema. GET exposes no authentication or hidden metadata. No soft delete or logical deletion status exists to restrict visibility. Returns 404 if the profile does not exist. This operation is public and supported for all users.","description":"Retrieves a specific member profile from discussionboard_member_profiles, identified by profile id (UUID). Returns id, member_id, display_name, bio, avatar_url, location, and website_url. No authentication or password data is exposed, nor any member status or deletion information. Only the fields as defined in the member profile schema are accessible, as all are public profile attributes.\n\nThe record must exist for retrieval; there is no logical deletion, so a missing id triggers a 404. The endpoint is suitable for profile cards, badges, thread popover, or member list display anywhere public user profile info is needed. Data exposure is limited in scope and does not include sensitive authentication, system, or role information. Full account data (credentials, joins, roles) must be accessed with other endpoints.","summary":"Retrieve a single public member profile by id from discussionboard_member_profiles.","parameters":[{"name":"id","description":"Target public member profile id (UUID) to fetch","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Public member profile data from discussionboard_member_profiles.","typeName":"IMemberProfile"},"authorizationRoles":null,"name":"at","path":"/discussionboard/memberProfiles/{id}","method":"get"},{"specification":"Create a member profile by adding a new row to discussionboard_member_profiles. Profiles include public display/search fields only—display_name, bio, avatar_url, location, website_url—and are associated by member_id (much be unique per member). The primary key id is generated/permitted by the API. Creation is only permitted once per member (enforced by uniqueness on member_id). No authentication or deletion data is included in profile records. Returns the full persisted profile on success. Accessible by members for self-profile creation, or by admins for onboarding.","description":"Creates a new public member profile row in discussionboard_member_profiles. Required request fields: member_id (target member for association), display_name (public badge/name), optional bio, optional avatar_url (profile image URI), optional location, and optional website_url. The id primary key may be generated or provided based on API design. All data is public-facing information with no authentication or sensitive status exposure.\n\nUniqueness is enforced on member_id—only one profile may exist per member. Requests for a member with an existing profile must return an error. Upon creation, the API returns all profile fields as persisted in the schema.\n\nThis endpoint is accessible to members for self-profile creation, or to admins for manual registration/onboarding. No account credential, logical deletion, or sensitive status is present in the schema or returned by this endpoint. The profile's scope is exclusively public user information for UX display, directory, or notification personalization.\n","summary":"Create a public member profile (add row to discussionboard_member_profiles).","parameters":[],"requestBody":{"description":"Profile creation data (member id, display fields) for discussionboard_member_profiles.","typeName":"IMemberProfile.ICreate"},"responseBody":{"description":"New public member profile from discussionboard_member_profiles.","typeName":"IMemberProfile"},"authorizationRoles":null,"name":"create","path":"/discussionboard/memberProfiles","method":"post"}],"completed":195,"total":195,"step":0,"created_at":"2025-07-24T19:14:29.901Z"},"tokenUsage":{"facade":{"aggregate":{"total":903898,"input":{"total":835123,"cached":103168},"output":{"total":68775,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":903898,"input":{"total":835123,"cached":103168},"output":{"total":68775,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":903898,"input":{"total":835123,"cached":103168},"output":{"total":68775,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":903898,"input":{"total":835123,"cached":103168},"output":{"total":68775,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"ITrendingTopic.IRequest":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"The UUID of the thread considered for trending, used to filter by thread."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"The UUID of the board which is considered for trending, used for querying by board context."},"ranking_period_date":{"type":"string","format":"date-time","description":"The period date (typically day) for trending analytics. ISO8601 timestamp (example: 2025-07-24T00:00:00Z)."},"min_score":{"type":"number","description":"Lower bound for trending score in search/filter."},"max_score":{"type":"number","description":"Upper bound for trending score in search/filter."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination. The first page is 1."},"limit":{"type":"integer","minimum":1,"maximum":1000,"description":"Number of records per page (maximum 1000)."}},"description":"Search/pagination/filter schema for trending topics based on thread id, board id, ranking window, or trending score. Used to retrieve trending analytics or for moderation insights.","required":["page","limit"]},"IPageITrendingTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITrendingTopic"},"description":"Result array containing the list of matching trending topic records."}},"required":["pagination","data"],"description":"Paginated result for trending topics. Contains pagination metadata and an array of trending topic records."},"ITrendingTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for the trending topic record."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread UUID this trending record corresponds to."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board UUID of the trending thread (for analytics grouping)."},"ranking_period_date":{"type":"string","format":"date-time","description":"Date of the ranking period (ISO8601)."},"trending_score":{"type":"number","description":"Calculated score representing trending popularity of the thread for this period."}},"required":["id","discussionboard_thread_id","discussionboard_board_id","ranking_period_date","trending_score"],"description":"A trending topic entity, capturing trending analytics for a thread in a specific board and date period."},"ITrendingTopic.ICreate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread UUID for which this trending entry is created."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board UUID where the trending thread is posted."},"ranking_period_date":{"type":"string","format":"date-time","description":"Date of the ranking period, when this trending record will be associated (ISO8601)."},"trending_score":{"type":"number","description":"Trending score value to be assigned for this thread within analytics."}},"required":["discussionboard_thread_id","discussionboard_board_id","ranking_period_date","trending_score"],"description":"Request body to create a trending topic entity."},"ITrendingTopic.IUpdate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread UUID being updated (if changed)."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board UUID for the thread (if changed)."},"ranking_period_date":{"type":"string","format":"date-time","description":"Date period for trending update (ISO8601)."},"trending_score":{"type":"number","description":"The new trending score for the record."}},"description":"Update body for trending topic entity; accepts all updatable fields.","required":[]},"INotificationTemplate.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of the notification template (for direct lookup)."},"code":{"type":"string","description":"Short code for the notification template (e.g., 'reply_notification')."},"name":{"type":"string","description":"Human-readable title for notification template."},"is_active":{"type":"boolean","description":"Whether the template is active (enabled for new notifications)."},"created_at_start":{"type":"string","format":"date-time","description":"Filter for templates created after this time."},"created_at_end":{"type":"string","format":"date-time","description":"Filter for templates created before this time."},"page":{"type":"integer","minimum":1,"description":"Page for pagination results."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of results per page (maximum 100)."}},"required":["page","limit"],"description":"Advanced search/pagination/filter schema for notification templates."},"IPageINotificationTemplate":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationTemplate"},"description":"Array of notification template records."}},"required":["pagination","data"],"description":"Paginated result for notification template listing."},"INotificationTemplate":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the notification template."},"code":{"type":"string","description":"Short code to reference this notification template."},"name":{"type":"string","description":"Display name for the notification template."},"description":{"oneOf":[{"type":"string","description":"Extended description for admin/support. Nullable."},{"type":"null","description":"Extended description for admin/support. Nullable."}],"description":"Extended description for admin/support. Nullable."},"subject":{"type":"string","description":"Notification subject/heading (for UI/email/etc)."},"body":{"type":"string","description":"Message body (may have placeholders)."},"is_active":{"type":"boolean","description":"Whether this template is currently enabled."},"created_at":{"type":"string","format":"date-time","description":"When the notification template was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update time for notification template."}},"required":["id","code","name","subject","body","is_active","created_at","updated_at"],"description":"Notification template entity with all fields."},"INotificationTemplate.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Short code for the template (unique)."},"name":{"type":"string","description":"Visible display name for template."},"description":{"oneOf":[{"type":"string","description":"Description for admins/support, nullable."},{"type":"null","description":"Description for admins/support, nullable."}],"description":"Description for admins/support, nullable."},"subject":{"type":"string","description":"Subject/heading of notification."},"body":{"type":"string","description":"Body/message for notification, allows placeholders."},"is_active":{"type":"boolean","description":"Is template enabled/active upon creation."}},"required":["code","name","subject","body","is_active"],"description":"Request body to create a notification template."},"INotificationTemplate.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Short code for the template (unique, if updated)."},"name":{"type":"string","description":"Display name (if changed)."},"description":{"oneOf":[{"type":"string","description":"Description for admins/support (nullable, updated)."},{"type":"null","description":"Description for admins/support (nullable, updated)."}],"description":"Description for admins/support (nullable, updated)."},"subject":{"type":"string","description":"Subject (if updating)."},"body":{"type":"string","description":"Body/message for template update."},"is_active":{"type":"boolean","description":"Update to enabled state."}},"description":"Update body for notification template entity; any updatable fields allowed.","required":[]},"IDiscussionboardNotificationPreferences.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member whose preferences to search/filter."},"code":{"type":"string","description":"Notification template code (for per-template search)."},"email_enabled":{"type":"boolean","description":"Filter for email-enabled preferences."},"inapp_enabled":{"type":"boolean","description":"Filter for in-app enabled preferences."},"browser_enabled":{"type":"boolean","description":"Filter for browser push enabled preferences."},"page":{"type":"integer","minimum":1,"description":"Page for pagination results."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Results per page (maximum 100)."}},"required":["page","limit"],"description":"Filtering/search object for notification preference results."},"IPageIDiscussionboardNotificationPreferences":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotificationPreferences"},"description":"List of notification preference entries matching filter."}},"required":["pagination","data"],"description":"Paginated listing for notification preference search results."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Number of records per page."},"records":{"type":"integer","description":"Total records in the database."},"pages":{"type":"integer","description":"Total number of pages."}},"required":["current","limit","records","pages"],"description":"Page information for paginated responses."}}},"completed":12,"total":206,"step":0,"created_at":"2025-07-24T19:14:58.945Z"},"tokenUsage":{"facade":{"aggregate":{"total":1004134,"input":{"total":933403,"cached":103168},"output":{"total":70731,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1004134,"input":{"total":933403,"cached":103168},"output":{"total":70731,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1004134,"input":{"total":933403,"cached":103168},"output":{"total":70731,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1004134,"input":{"total":933403,"cached":103168},"output":{"total":70731,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardBoardSetting.IUpdate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"The unique identifier of the board for which this setting applies.\n\nThis is a required reference for board settings modifications, and must point to a row in `discussionboard_boards` in the schema.\n\nReferenced in most board-level configuration operations, including locking boards, updating moderation policies, or enabling/disabling upload/post rate limits."},"is_locked":{"type":"boolean","description":"Indicates whether the board is currently locked (read-only) for posts/comments. Implements board lock for moderation, maintenance, or escalation flows. `true` means locked; `false` means open for writing."},"require_approval_for_posting":{"type":"boolean","description":"Flag for requiring moderator/admin approval for new posts created in this board. Implements advanced moderation and content review business logic. Set to `true` to enforce content pre-approval, or `false` for real-time, unmoderated posting."},"max_posts_per_hour":{"type":"integer","description":"Maximum number of posts a user can make per hour in this board (for rate limiting/anti-spam).\n\nRequired for platform spam prevention and user activity control. Value must be a positive integer. Enforced only per board."},"allow_anonymous_viewing":{"type":"boolean","description":"Flag for enabling anonymous (not-logged-in) users to view posts in this board. If `false`, only signed-in members may access board content. Implements privacy and visibility rules as described in the business requirements."},"allow_file_uploads":{"type":"boolean","description":"Indicates whether file attachments are permitted in posts/comments within this board. Enables/disables the upload feature. Platform administrators may restrict uploads by content area or sensitivity."}},"required":["discussionboard_board_id"],"description":"Update payload for a board settings record, mapping only to fields present in the discussionboard_board_settings Prisma schema. Used in board configuration workflows to update properties such as locking status, approval policy, post limit, anonymous viewing, and upload features. Every property refers to a normalized database field. All modifications must reference existing table columns—no additional metadata permitted."},"IDiscussionboardBoardSetting.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the target settings record was successfully deleted. `true` if the operation removed the specified settings; `false` if not found or failed."},"deleted_id":{"type":"string","format":"uuid","description":"The UUID primary key of the settings record deleted, matching the `id` of the removed row. This value is present when success is `true`. Null or omitted if operation was unsuccessful."}},"required":["success"],"description":"Result of a hard-delete operation for a board settings record from discussionboard_board_settings. The object describes whether the record was deleted and includes the unique identifier if successful."},"IDiscussionboardBoardModerator.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","description":"Board ID (UUID). Use to filter board-moderator assignments by associated board."},"discussionboard_moderator_id":{"type":"string","description":"Moderator ID (UUID). Use to filter assignments by specific moderator."},"is_primary":{"type":"boolean","description":"Filter assignments to return only primary (lead) assignments, or those that are not."},"joined_at_from":{"type":"string","format":"date-time","description":"Return assignments where the join timestamp is at or after this ISO8601 time."},"joined_at_to":{"type":"string","format":"date-time","description":"Return assignments where the join timestamp is at or before this ISO8601 time."},"page":{"type":"integer","description":"Which page number to return in paginated results."},"limit":{"type":"integer","description":"Number of records per page in paged results."}},"description":"Search/filter parameters for retrieving board-moderator assignment records from discussionboard_board_moderators, with strict mapping to schema-present fields only. Used to support advanced management and dashboard workflows for board moderation.","required":[]},"IPageDiscussionboardBoardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardModerator"},"description":"The list of board-moderator assignment objects for the page, each mapping directly to the entity schema."}},"required":["pagination","data"],"description":"Paginated result object for board-moderator assignment record collections. Used for all list and search operations returning multiple assignments."},"IDiscussionboardBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for the board-moderator assignment table. Immutable, unique for each record."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key to the target board entity (UUID). Refers to discussionboard_boards.id."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"Foreign key UUID referencing the assigned moderator (from discussionboard_moderators)."},"is_primary":{"type":"boolean","description":"Marks this assignment as the primary moderator, supporting escalation workflows. true if primary; false otherwise."},"joined_at":{"type":"string","format":"date-time","description":"Date/time this assignment was created. Used in compliance, activity analytics, and audit workflows."}},"required":["id","discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Represents one moderator's assignment to a specific board. Contains unique keys, foreign key references, primary/secondary flag, and timestamp for audit, display, and management features. Property names follow schema directly."},"IDiscussionboardBoardModerators.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID for the board to which the moderator is being assigned."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"UUID for the moderator being assigned to a board."},"is_primary":{"type":"boolean","description":"Flag indicating primary moderator for the board."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp the assignment becomes effective. Used in audit and history features."}},"required":["discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Payload for assigning a moderator to a board by inserting a new board-moderator assignment record in discussionboard_board_moderators. All properties must be present and strictly match schema columns. Fulfills requirements for role assignment and history/audit."},"IDiscussionboardBoardModerators":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the assignment record as generated by the DB."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board reference for which the assignment applies."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"Moderator reference for this assignment."},"is_primary":{"type":"boolean","description":"Marks this assignment as the primary moderator for a board."},"joined_at":{"type":"string","format":"date-time","description":"Assignment effective timestamp."}},"required":["id","discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Full DB entity returned after board-moderator assignment creation or detail query. Contains all schema-defined columns. Used for response and data inspection in management flows."},"IDiscussionboardBoardModerators.IUpdate":{"type":"object","properties":{"is_primary":{"type":"boolean","description":"Set primary/non-primary status for this assignment."},"joined_at":{"type":"string","format":"date-time","description":"Update the join timestamp for this assignment for audit and history tracking."}},"description":"Update request payload for board-moderator assignment records. Used only for patching the primary/secondary flag and/or join date. Does not update board or moderator references.","required":[]},"IDeleteConfirmation":{"type":"object","properties":{"status":{"type":"string","description":"String summary of the deletion status, such as 'deleted'."},"deleted_id":{"type":"string","description":"UUID key of the deleted object, if deletion was successful (nullable if failed)."}},"description":"Common response format for confirmatory deletion endpoints. Indicates the object was deleted, and supplies the identifier of the deleted record if applicable.","required":[]},"IDiscussionboardThreads.IRequest":{"type":"object","properties":{"board_id":{"type":"string","description":"Foreign key (UUID) of the parent board for thread queries."},"author_member_id":{"type":"string","description":"UUID for filtering threads by the thread author (member identity)."},"title":{"type":"string","description":"Search string to filter threads by title (supports substring/full-text queries)."},"body":{"type":"string","description":"Search string to filter threads by thread body/description (full-text, advanced UI)."},"created_at_from":{"type":"string","format":"date-time","description":"Return threads created at or after this timestamp."},"created_at_to":{"type":"string","format":"date-time","description":"Return threads created at or before this timestamp."},"updated_at_from":{"type":"string","format":"date-time","description":"Return threads updated at or after this timestamp."},"updated_at_to":{"type":"string","format":"date-time","description":"Return threads updated at or before this timestamp."},"deleted_at_set":{"type":"boolean","description":"When true, include/exclude soft-deleted threads (deleted_at not null/non-null)."},"page":{"type":"integer","description":"Pagination page number."},"limit":{"type":"integer","description":"Records per page for pagination."}},"description":"Search/filter/pagination parameters for retrieving discussion threads. All filters must correspond to existing fields in the discussionboard_threads schema. Used for advanced query, analytics, and admin dashboard.","required":[]},"IPageIDiscussionboardThreads":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreads"},"description":"Array of thread entities matching query page/filters."}},"required":["pagination","data"],"description":"Paginated response for thread listing endpoints, wrapping discussionboard_threads entities and pagination info."},"IDiscussionboardThreads":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the thread (UUID)."},"board_id":{"type":"string","format":"uuid","description":"Foreign key reference for the parent board (UUID)."},"author_member_id":{"type":"string","format":"uuid","description":"Foreign key referencing member who authored the thread (UUID)."},"title":{"type":"string","description":"Title or subject line of the thread."},"body":{"type":"string","description":"Description or leading post content for the thread. May be null for simple threads."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of thread creation (ISO8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last edit/modification."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Time at which thread was soft deleted. Null if active."},{"type":"null"}],"description":"Time at which thread was soft deleted. Null if active."}},"required":["id","board_id","author_member_id","title","created_at","updated_at"],"description":"Represents a single discussion thread entity in the threads domain. Contains all DB columns per schema. Used for API read, edit, and listing endpoints."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number in the paged result. Starts from 1."},"limit":{"type":"integer","description":"Max number of records per page."},"records":{"type":"integer","description":"Total number of records that satisfy the query."},"pages":{"type":"integer","description":"Total number of pages for this query, based on `limit`."}},"required":["current","limit","records","pages"],"description":"Standard page navigation info for paginated query responses. Used for all collection list APIs in the platform."}}},"completed":24,"total":206,"step":0,"created_at":"2025-07-24T19:15:08.954Z"},"tokenUsage":{"facade":{"aggregate":{"total":1105013,"input":{"total":1031702,"cached":103168},"output":{"total":73311,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1105013,"input":{"total":1031702,"cached":103168},"output":{"total":73311,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1105013,"input":{"total":1031702,"cached":103168},"output":{"total":73311,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1105013,"input":{"total":1031702,"cached":103168},"output":{"total":73311,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIdiscussionboard_post_votes":{"type":"object","description":"Paginated result for post vote entities. This object represents a single page of post votes, commonly used in post interaction analytics or user engagement dashboards for political/economic discussion boards.\n\nThe schema aligns with the underlying business rules for normalized, non-aggregated atomic votes (upvote/downvote actions). Pagination metadata facilitates navigation and batch processing in UI or API integrations, and the items array contains vote records always linked to posts and members by their UUID.\n\nAll property descriptions are strictly derived from the discussionboard_post_votes table in the Prisma schema.","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_post_votes"},"description":"List of atomic vote records for this page of results, strictly referencing the post_vote schema."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information, indicating current page, total pages, result count, etc."}},"required":["data","pagination"]},"Idiscussionboard_post_votes":{"type":"object","description":"Atomic upvote/downvote/neutral record for a single member on a post.\n\nImplements audit, analytics, and voting business rules for the political/economic discussion board. Each row in this entity records a voting action for one user on a specific post, with strict one-vote-per-(user,post) constraint. Didactic for interaction metrics and reputation systems.\n\nThis type's properties mirror the columns in Prisma's discussionboard_post_votes table.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier of the vote row. Matches discussionboard_post_votes.id."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"References the post being voted on. Foreign key to posts. Follows discussionboard_post_votes.discussionboard_post_id."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"References the voting member. Uniqueness constraint: one vote per (user,post) pair. Matches discussionboard_post_votes.discussionboard_member_id."},"vote_type":{"type":"integer","description":"Vote type: 1 for upvote, -1 for downvote, 0 for neutral/removed. Only these normalized integer values are allowed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the vote was cast. Used for analytics/compliance. Matches discussionboard_post_votes.created_at."}},"required":["id","discussionboard_post_id","discussionboard_member_id","vote_type","created_at"]},"Idiscussionboard_post_votes.ICreate":{"type":"object","description":"Type for creation of a post vote entity. Represents structure for vote-casting APIs. All required fields correspond to creation columns in the Prisma schema.\n\nNo aggregates, soft delete, or audit fields permitted in input. Only atomic fields matching the table's definition.\n\nFor upvote: vote_type=1, for downvote: vote_type=-1, for neutral: vote_type=0.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post for voting (FK to posts table)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member casting the vote (FK to members table)."},"vote_type":{"type":"integer","description":"Vote type: 1=upvote, -1=downvote, 0=neutral."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for the cast vote. Normally set to now, but may be backfilled for analytics import."}},"required":["discussionboard_post_id","discussionboard_member_id","vote_type","created_at"]},"Idiscussionboard_post_votes.IUpdate":{"type":"object","description":"Type for updating a post vote entity. Used when revising vote_type (e.g., changing from upvote to downvote), or correcting vote timestamps for analytics/tracing.\n\nAll properties directly mirror the columns in discussionboard_post_votes table, except id (which is immutable).\n\nDoes not accept non-schema properties or aggregates. Only allows update of atomic vote row data.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post for voting (FK to posts table)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Voting member id (FK to member)."},"vote_type":{"type":"integer","description":"Vote type: 1=upvote, -1=downvote, 0=neutral."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for the cast vote."}},"required":["discussionboard_post_id","discussionboard_member_id","vote_type","created_at"]},"Idiscussionboard_post_reports.IRequest":{"type":"object","description":"Search/filter/request body for post report listing. Allows analytics, escalation queues, and moderation dashboards to query reports with advanced filtering and sorting.\n\nAll properties align with those in the discussionboard_post_reports table as normalized search criteria for reporting system. Does not include non-existent fields or soft-delete logic.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"(Optional) Filter by target post's id. Only report rows for this post will match."},"reporter_member_id":{"type":"string","format":"uuid","description":"(Optional) Filter by reporting member's id (who filed the report)."},"report_type_id":{"type":"string","format":"uuid","description":"(Optional) Filter by specific report type (e.g., spam, abuse, off-topic)."},"description":{"type":"string","description":"(Optional) Fulltext search or matching for the freeform user-supplied description."},"created_at_gte":{"type":"string","format":"date-time","description":"(Optional) Filter for report creation after this timestamp."},"created_at_lte":{"type":"string","format":"date-time","description":"(Optional) Filter for reports created before or at this timestamp."},"sort":{"oneOf":[{"const":"created_at","description":"(Optional) Sorting field. Must be one of the actual schema properties."},{"const":"report_type_id","description":"(Optional) Sorting field. Must be one of the actual schema properties."},{"const":"reporter_member_id","description":"(Optional) Sorting field. Must be one of the actual schema properties."}],"description":"(Optional) Sorting field. Must be one of the actual schema properties."},"order":{"oneOf":[{"const":"asc","description":"(Optional) Sort direction: ascending or descending."},{"const":"desc","description":"(Optional) Sort direction: ascending or descending."}],"description":"(Optional) Sort direction: ascending or descending."},"page":{"type":"integer","description":"Requested page number for pagination."},"limit":{"type":"integer","description":"Maximum number of records to return for this page."}},"required":[]},"IPageIdiscussionboard_post_reports":{"type":"object","description":"Paginated result for post reports, for moderation/analytics dashboards. Contains array of report entities (see: discussionboard_post_reports schema) and pagination info. Strictly schema-aligned.","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_post_reports"},"description":"Array of atomic report records (each reporting a post)."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata as per platform paging standard."}},"required":["data","pagination"]},"Idiscussionboard_post_reports":{"type":"object","description":"Atomic report record for moderation/analytics in the discussion board. One report per (member, post, report type).\n\nImplements audit, reporting, and escalation workflows; referenced by moderation logs and workflows that result in warnings, bans, or deletions.\n\nFully schema-aligned to discussionboard_post_reports table.","properties":{"id":{"type":"string","format":"uuid","description":"Unique, atomic report id."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Id of the post being reported (FK)."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member id who made the report."},"report_type_id":{"type":"string","format":"uuid","description":"Type of report (e.g., spam, abuse, off-topic)."},"description":{"oneOf":[{"type":"string","description":"Freeform description given by reporting member; can be empty/null."},{"type":"null"}],"description":"Freeform description given by reporting member; can be empty/null."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was submitted; assigns audit/compliance chain."}},"required":["id","discussionboard_post_id","reporter_member_id","report_type_id","created_at"]},"Idiscussionboard_post_reports.ICreate":{"type":"object","description":"Type for creating a post report entity. Used in reporting workflows, member-flagging of posts. Only atomic schema fields are allowed; reporting business rules enforced at API/service layer.\n\nNo soft/hard delete, audit fields, or aggregates included. Strictly primal schema-row creation body. Only member, post, report_type, description (optional), and timestamp.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Id of the post being reported."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member submitting the report."},"report_type_id":{"type":"string","format":"uuid","description":"Type/category of report."},"description":{"oneOf":[{"type":"string","description":"Explanation given by member. Nullable for minimal-context cases."},{"type":"null"}],"description":"Explanation given by member. Nullable for minimal-context cases."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the report was submitted (audit trail)."}},"required":["discussionboard_post_id","reporter_member_id","report_type_id","created_at"]},"IPostReport.IUpdate":{"type":"object","description":"Type for updating a post report. Used for correcting reporting mistakes or changing the report details after submission (in audit/appeal cases). Only allows update of atomic schema fields for a report row.\n\nAligns strictly to the fields in discussionboard_post_reports table except for id (which is immutable). Description can be changed or set to null.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"The id of the post reported."},"reporter_member_id":{"type":"string","format":"uuid","description":"The member's id who submitted the report."},"report_type_id":{"type":"string","format":"uuid","description":"Type/category of the report (as per system codes)."},"description":{"oneOf":[{"type":"string","description":"Updated explanation for the report (can be blank/null)."},{"type":"null"}],"description":"Updated explanation for the report (can be blank/null)."},"created_at":{"type":"string","format":"date-time","description":"Updated or original timestamp of the report (for correcting audit chain if data entered late)."}},"required":["discussionboard_post_id","reporter_member_id","report_type_id","created_at"]},"IPostReport":{"type":"object","description":"Post report entity, for moderation, audit, and analytics in the platform.\n\nRepresents a single atomic record corresponding to a complaint/report against a post, including reason/type and reporter info. \n\nSchema strictly mirrors the atomic columns of discussionboard_post_reports.","properties":{"id":{"type":"string","format":"uuid","description":"Unique report record id."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"The post being reported."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member who reported."},"report_type_id":{"type":"string","format":"uuid","description":"Type/category of violence or infraction."},"description":{"oneOf":[{"type":"string","description":"Reporter explanation of infraction or details (nullable)."},{"type":"null"}],"description":"Reporter explanation of infraction or details (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the report was made."}},"required":["id","discussionboard_post_id","reporter_member_id","report_type_id","created_at"]},"IPostReference.IRequest":{"type":"object","description":"Type for search/pagination when querying post reference records—i.e., relations showing citations, cross-links, or replies linking posts and/or threads.\n\nProperties strictly reflect columns present in discussionboard_post_references table.\n\nDoes not handle non-existent aggregates, audit status, or delete fields.","properties":{"source_post_id":{"type":"string","format":"uuid","description":"Source (linking) post id. Filter by post creating the reference."},"target_post_id":{"type":"string","format":"uuid","description":"Target post id (the referenced/cited post in the relationship)."},"target_thread_id":{"type":"string","format":"uuid","description":"Target thread id (if the reference points to a thread rather than another post)."},"reference_type":{"type":"string","description":"Type of reference: accepted schema string for type (e.g., post, thread, comment)."},"page":{"type":"integer","description":"Desired page number for result pagination."},"limit":{"type":"integer","description":"Maximum size of the returned page."}},"required":[]},"IPageIPostReference":{"type":"object","description":"Paginated result for post reference entities—records denoting citations or cross-links between posts or threads.\n\nEach page object contains the array of post reference records and standard AutoBE paging metadata.\n\nData structure and all fields strictly follow Prisma schema for M:N post linking.","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostReference"},"description":"List of post reference entities (atomic links between posts/threads)."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for result set navigation."}},"required":["data","pagination"]},"IPostReference":{"type":"object","description":"A single reference/citation relation from one post to another post or thread, for academic, reply, or cross-linking features.\n\nProperties derived directly from discussionboard_post_references, fully atomic, never calculated/denormalized.\n\nUsed in analytical dashboards and citation interaction analytics.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for post reference row."},"source_post_id":{"type":"string","format":"uuid","description":"Post that creates this reference."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target post for the reference (may be null if referencing a thread)."},{"type":"null"}],"description":"Target post for the reference (may be null if referencing a thread)."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target thread for the reference (may be null if referencing another post)."},{"type":"null"}],"description":"Target thread for the reference (may be null if referencing another post)."},"reference_type":{"type":"string","description":"String-literal reference type (e.g., post, thread, comment)."}},"required":["id","source_post_id","reference_type"]},"IPage.IPagination":{"type":"object","description":"Standard pagination metadata following the AutoBE convention: describes the structure for paginated result sets, including current page, total pages, and other statistics.\n\nTypically used in IPage<T> results for all records.","properties":{"current":{"type":"integer","description":"Current page number. 1-based index."},"limit":{"type":"integer","description":"Limit of records per page (page size)."},"records":{"type":"integer","description":"Total number of records matching query."},"pages":{"type":"integer","description":"Total number of result pages (always >= 1)."}},"required":["current","limit","records","pages"]}}},"completed":36,"total":206,"step":0,"created_at":"2025-07-24T19:15:11.947Z"},"tokenUsage":{"facade":{"aggregate":{"total":1206467,"input":{"total":1129993,"cached":103168},"output":{"total":76474,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1206467,"input":{"total":1129993,"cached":103168},"output":{"total":76474,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1206467,"input":{"total":1129993,"cached":103168},"output":{"total":76474,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1206467,"input":{"total":1129993,"cached":103168},"output":{"total":76474,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardWarning.IUpdate":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"The UUID of the member receiving the warning. This field is used to identify which user was issued the moderation warning. Referenced from @namespace Moderation - discussionboard_warnings.warnd_member_id."},"acting_moderator_id":{"type":"string","format":"uuid","description":"The UUID of the moderator or admin who issued the warning. Must match an existing moderator/admin in the actors table. Used for audit, compliance, and escalation tracking. See schema: discussionboard_warnings.acting_moderator_id."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the report record (if any) that triggered this warning. Nullable field: if set, must match another moderation report; otherwise null if warning was issued without reported infraction. Fulfills normalization/audit. See discussionboard_warnings.report_id."},{"type":"null","format":"uuid","description":"ID of the report record (if any) that triggered this warning. Nullable field: if set, must match another moderation report; otherwise null if warning was issued without reported infraction. Fulfills normalization/audit. See discussionboard_warnings.report_id."}],"description":"ID of the report record (if any) that triggered this warning. Nullable field: if set, must match another moderation report; otherwise null if warning was issued without reported infraction. Fulfills normalization/audit. See discussionboard_warnings.report_id."},"reason":{"type":"string","description":"Text/description explaining why the warning was issued. Required as business logic for transparency, escalation, and appeal. See discussionboard_warnings.reason."},"warned_at":{"type":"string","format":"date-time","description":"Timestamp for when the warning was issued. Implements compliance/audit requirements, supporting review and member notification. ISO 8601 format. See discussionboard_warnings.warned_at."}},"required":["warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Update structure for a warning in the discussionboard_warnings table, used to modify warning details such as which member was warned, who issued it, the reason, and timing. All properties must align with the respective columns in Prisma, supporting full audit and moderation history."},"IDiscussionboardEngagementMetric.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: Filter to only metrics by this member UUID. Null means no member filter. Supports DAU/WAU and personalized activity queries. See discussionboard_engagement_metrics.discussionboard_member_id."},{"type":"null","format":"uuid","description":"Optional: Filter to only metrics by this member UUID. Null means no member filter. Supports DAU/WAU and personalized activity queries. See discussionboard_engagement_metrics.discussionboard_member_id."}],"description":"Optional: Filter to only metrics by this member UUID. Null means no member filter. Supports DAU/WAU and personalized activity queries. See discussionboard_engagement_metrics.discussionboard_member_id."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: Filter to only metrics per board UUID. Null means no board filter. Used for board-level engagement breakdown. See discussionboard_engagement_metrics.discussionboard_board_id."},{"type":"null","format":"uuid","description":"Optional: Filter to only metrics per board UUID. Null means no board filter. Used for board-level engagement breakdown. See discussionboard_engagement_metrics.discussionboard_board_id."}],"description":"Optional: Filter to only metrics per board UUID. Null means no board filter. Used for board-level engagement breakdown. See discussionboard_engagement_metrics.discussionboard_board_id."},"date_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: Lower bound (inclusive) of the engagement date (ISO8601). Recommended to be used for time-window queries or analytics dashboards. Not persisted in DB, only query filter."},{"type":"null","format":"date-time","description":"Optional: Lower bound (inclusive) of the engagement date (ISO8601). Recommended to be used for time-window queries or analytics dashboards. Not persisted in DB, only query filter."}],"description":"Optional: Lower bound (inclusive) of the engagement date (ISO8601). Recommended to be used for time-window queries or analytics dashboards. Not persisted in DB, only query filter."},"date_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: Upper bound (inclusive) of the engagement date (ISO8601). For time range filtering. Not persisted in DB, only query filter."},{"type":"null","format":"date-time","description":"Optional: Upper bound (inclusive) of the engagement date (ISO8601). For time range filtering. Not persisted in DB, only query filter."}],"description":"Optional: Upper bound (inclusive) of the engagement date (ISO8601). For time range filtering. Not persisted in DB, only query filter."},"page":{"oneOf":[{"type":"integer","description":"Optional: Page number for pagination. Null or missing defaults to page 1."},{"type":"null","description":"Optional: Page number for pagination. Null or missing defaults to page 1."}],"description":"Optional: Page number for pagination. Null or missing defaults to page 1."},"limit":{"oneOf":[{"type":"integer","description":"Optional: Records per page for pagination. Null or missing uses default, e.g. 100."},{"type":"null","description":"Optional: Records per page for pagination. Null or missing uses default, e.g. 100."}],"description":"Optional: Records per page for pagination. Null or missing uses default, e.g. 100."}},"required":[],"description":"Request body for querying/listing engagement metrics (discussionboard_engagement_metrics). Supports optional filtering by member, board, date range, and pagination."},"IPageIDiscussionboardEngagementMetric":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardEngagementMetric"},"description":"List of engagement metric records for this page. Each record documents a single atomized member+board+date engagement row."}},"required":["pagination","data"],"description":"A paged result set of engagement metrics. Fulfills analytics dashboard, admin, or API requirements for scalable activity analysis."},"IDiscussionboardEngagementMetric":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The primary key UUID for this engagement metric record. Unique, system-generated for DB row tracking."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"The member UUID for which the metrics apply. Nullable for board-level or anonymous engagement. See discussionboard_engagement_metrics.discussionboard_member_id."},{"type":"null","format":"uuid","description":"The member UUID for which the metrics apply. Nullable for board-level or anonymous engagement. See discussionboard_engagement_metrics.discussionboard_member_id."}],"description":"The member UUID for which the metrics apply. Nullable for board-level or anonymous engagement. See discussionboard_engagement_metrics.discussionboard_member_id."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board UUID where the engagement occurred. Nullable for site-level or ad hoc analytics. See discussionboard_engagement_metrics.discussionboard_board_id."},{"type":"null","format":"uuid","description":"Board UUID where the engagement occurred. Nullable for site-level or ad hoc analytics. See discussionboard_engagement_metrics.discussionboard_board_id."}],"description":"Board UUID where the engagement occurred. Nullable for site-level or ad hoc analytics. See discussionboard_engagement_metrics.discussionboard_board_id."},"engagement_date":{"type":"string","format":"date-time","description":"The time window/date for the metric, always in ISO 8601 calendar date format (YYYY-MM-DD or full timestamp)."},"posts_created_count":{"type":"integer","description":"Number of posts created by this member (or overall) during this day/period on this board. Must be non-negative. Fulfills platform analytics requirements."},"comments_created_count":{"type":"integer","description":"Count of comments by the member/board on this date/period. Used for trend charts and moderator dashboards."},"votes_cast_count":{"type":"integer","description":"Total voting events (upvotes/downvotes) performed by the user/board/date. Used for engagement heatmaps and moderation anomaly detection."}},"required":["id","engagement_date","posts_created_count","comments_created_count","votes_cast_count"],"description":"Single row recording activity for one member+board+date. Used for computed dashboards, engagement charting, moderation anomaly detection, and enforcement of business analytics rules."},"IDiscussionboardEngagementMetric.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Member UUID if available. Null for board/anonymous metrics."},{"type":"null","format":"uuid","description":"Member UUID if available. Null for board/anonymous metrics."}],"description":"Member UUID if available. Null for board/anonymous metrics."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board UUID if available. Null for site-wide/anonymous metrics."},{"type":"null","format":"uuid","description":"Board UUID if available. Null for site-wide/anonymous metrics."}],"description":"Board UUID if available. Null for site-wide/anonymous metrics."},"engagement_date":{"type":"string","format":"date-time","description":"Date for which engagement is being logged (ISO 8601 format)."},"posts_created_count":{"type":"integer","description":"Posts authored count."},"comments_created_count":{"type":"integer","description":"Comments authored count."},"votes_cast_count":{"type":"integer","description":"Votes cast count."}},"required":["engagement_date","posts_created_count","comments_created_count","votes_cast_count"],"description":"Creation object for new engagement metric. Used by analytics engines to insert periodically aggregated activity metrics as per business requirement for DAU/WAU, voting, and comment/post tracking."},"IDiscussionboardEngagementMetric.IUpdate":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the target member's UUID. Null for global/anonymous rollup."},{"type":"null","format":"uuid","description":"Update the target member's UUID. Null for global/anonymous rollup."}],"description":"Update the target member's UUID. Null for global/anonymous rollup."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board UUID for which record applies. Null for global stats."},{"type":"null","format":"uuid","description":"Board UUID for which record applies. Null for global stats."}],"description":"Board UUID for which record applies. Null for global stats."},"engagement_date":{"type":"string","format":"date-time","description":"Stamped date/time (ISO8601) for engagement period. If changed, alters time bucket assignment."},"posts_created_count":{"type":"integer","description":"Updated count of authored posts."},"comments_created_count":{"type":"integer","description":"Updated count of comments."},"votes_cast_count":{"type":"integer","description":"Updated votes cast count."}},"required":["engagement_date","posts_created_count","comments_created_count","votes_cast_count"],"description":"Update object for engagement metric. Used for corrections, late-arriving data, or analytics redress workflows."},"IDiscussionboardActivityLog.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by acting member's UUID (may be null for system events/anonymous browsing)."},{"type":"null","format":"uuid","description":"Optional filter by acting member's UUID (may be null for system events/anonymous browsing)."}],"description":"Optional filter by acting member's UUID (may be null for system events/anonymous browsing)."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by board UUID (null for platform-wide events)."},{"type":"null","format":"uuid","description":"Filter by board UUID (null for platform-wide events)."}],"description":"Filter by board UUID (null for platform-wide events)."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by thread UUID activity (optional for cross-thread or rare journey analytics)."},{"type":"null","format":"uuid","description":"Filter by thread UUID activity (optional for cross-thread or rare journey analytics)."}],"description":"Filter by thread UUID activity (optional for cross-thread or rare journey analytics)."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by post UUID (null for thread/board/global activity)."},{"type":"null","format":"uuid","description":"Filter by post UUID (null for thread/board/global activity)."}],"description":"Filter by post UUID (null for thread/board/global activity)."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by comment UUID (matches unique analytics or mediation flows)."},{"type":"null","format":"uuid","description":"Filter by comment UUID (matches unique analytics or mediation flows)."}],"description":"Filter by comment UUID (matches unique analytics or mediation flows)."},"event_timestamp_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter by lower-bound event timestamp (ISO8601)."},{"type":"null","format":"date-time","description":"Filter by lower-bound event timestamp (ISO8601)."}],"description":"Filter by lower-bound event timestamp (ISO8601)."},"event_timestamp_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter by upper-bound event timestamp (ISO8601)."},{"type":"null","format":"date-time","description":"Filter by upper-bound event timestamp (ISO8601)."}],"description":"Filter by upper-bound event timestamp (ISO8601)."},"event_type":{"oneOf":[{"type":"string","description":"Specific event filter (e.g. 'login', 'logout', 'post_create', 'role_change')."},{"type":"null","description":"Specific event filter (e.g. 'login', 'logout', 'post_create', 'role_change')."}],"description":"Specific event filter (e.g. 'login', 'logout', 'post_create', 'role_change')."},"page":{"oneOf":[{"type":"integer","description":"Optional: Result page number for pagination."},{"type":"null","description":"Optional: Result page number for pagination."}],"description":"Optional: Result page number for pagination."},"limit":{"oneOf":[{"type":"integer","description":"Optional: Results per page for pagination."},{"type":"null","description":"Optional: Results per page for pagination."}],"description":"Optional: Results per page for pagination."}},"required":[],"description":"Request schema for paged/search activity log retrieval from discussionboard_activity_logs. Filters include member, board, thread, post, comment, event type, timestamp bounds, and pagination controls."},"IPageIDiscussionboardActivityLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Expected pagination metadata object."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardActivityLog"},"description":"Array of activity log records for this result page."}},"required":["pagination","data"],"description":"A page result wrapper for activity logs, includes metadata and data array."},"IDiscussionboardActivityLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this activity log record. Auto-generated, globally unique UUID."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID identifying member responsible for event. Nullable for system or non-member events."},{"type":"null","format":"uuid","description":"UUID identifying member responsible for event. Nullable for system or non-member events."}],"description":"UUID identifying member responsible for event. Nullable for system or non-member events."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"The forum/board UUID where the event occurred (if applicable)."},{"type":"null","format":"uuid","description":"The forum/board UUID where the event occurred (if applicable)."}],"description":"The forum/board UUID where the event occurred (if applicable)."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of thread involved in this event."},{"type":"null","format":"uuid","description":"UUID of thread involved in this event."}],"description":"UUID of thread involved in this event."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of post directly implicated in event (if any)."},{"type":"null","format":"uuid","description":"UUID of post directly implicated in event (if any)."}],"description":"UUID of post directly implicated in event (if any)."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of comment implicated (nullable for non-comment events)."},{"type":"null","format":"uuid","description":"UUID of comment implicated (nullable for non-comment events)."}],"description":"UUID of comment implicated (nullable for non-comment events)."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format, marking the occurrence of the event."},"event_type":{"type":"string","description":"Type of activity event (e.g., 'login', 'post_create', 'comment_edit', etc). Used in audit, analytics, security."},"event_metadata":{"oneOf":[{"type":"string","description":"JSON-encoded or string-formatted business context (device, ip, value-diffs, etc). Nullable for events lacking metadata."},{"type":"null","description":"JSON-encoded or string-formatted business context (device, ip, value-diffs, etc). Nullable for events lacking metadata."}],"description":"JSON-encoded or string-formatted business context (device, ip, value-diffs, etc). Nullable for events lacking metadata."}},"required":["id","event_timestamp","event_type"],"description":"Atomic log record for a member or system event. Used for analytics, audit, rare-journey tracking, and compliance. All properties reflect true schema. Fulfills full audit/event log per requirements."},"IDiscussionboardActivityLog.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the acting member (nullable for anonymous or system events). Only set if event is attributable to a user, null for global/system workflow."},{"type":"null","format":"uuid","description":"UUID of the acting member (nullable for anonymous or system events). Only set if event is attributable to a user, null for global/system workflow."}],"description":"UUID of the acting member (nullable for anonymous or system events). Only set if event is attributable to a user, null for global/system workflow."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board UUID where the activity occurred (nullable if not board-specific)."},{"type":"null","format":"uuid","description":"Board UUID where the activity occurred (nullable if not board-specific)."}],"description":"Board UUID where the activity occurred (nullable if not board-specific)."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread UUID for the event (nullable if not relevant)."},{"type":"null","format":"uuid","description":"Thread UUID for the event (nullable if not relevant)."}],"description":"Thread UUID for the event (nullable if not relevant)."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post UUID for post-related events (nullable otherwise)."},{"type":"null","format":"uuid","description":"Post UUID for post-related events (nullable otherwise)."}],"description":"Post UUID for post-related events (nullable otherwise)."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment UUID if the event specifically relates to a comment (nullable otherwise)."},{"type":"null","format":"uuid","description":"Comment UUID if the event specifically relates to a comment (nullable otherwise)."}],"description":"Comment UUID if the event specifically relates to a comment (nullable otherwise)."},"event_timestamp":{"type":"string","format":"date-time","description":"The precise time of the event (ISO8601)."},"event_type":{"type":"string","description":"Type of event as per business analyze (login/logout/change/channel navigation, etc)."},"event_metadata":{"oneOf":[{"type":"string","description":"Arbitrary JSON/meta data for detailed audit records. Optional/nullable."},{"type":"null","description":"Arbitrary JSON/meta data for detailed audit records. Optional/nullable."}],"description":"Arbitrary JSON/meta data for detailed audit records. Optional/nullable."}},"required":["event_timestamp","event_type"],"description":"Creation schema for a new activity log record. Used to archive analytics, trace, moderation, or compliance/business events at runtime. Non-included fields are system-generated or not relevant at creation."},"IActivityLog.IUpdate":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update member id; nullable if event is anonymous/system."},{"type":"null","format":"uuid","description":"Update member id; nullable if event is anonymous/system."}],"description":"Update member id; nullable if event is anonymous/system."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update board context for this activity, or null to unset."},{"type":"null","format":"uuid","description":"Update board context for this activity, or null to unset."}],"description":"Update board context for this activity, or null to unset."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread context update."},{"type":"null","format":"uuid","description":"Thread context update."}],"description":"Thread context update."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post context update (changed/retargeted event)."},{"type":"null","format":"uuid","description":"Post context update (changed/retargeted event)."}],"description":"Post context update (changed/retargeted event)."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment context update (nullable/optional)."},{"type":"null","format":"uuid","description":"Comment context update (nullable/optional)."}],"description":"Comment context update (nullable/optional)."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp for this activity event (ISO8601 string)."},"event_type":{"type":"string","description":"Activity type/category. Should match enumerated app event types."},"event_metadata":{"oneOf":[{"type":"string","description":"Arbitrary metadata (JSON-encoded string or plain string), nullable."},{"type":"null","description":"Arbitrary metadata (JSON-encoded string or plain string), nullable."}],"description":"Arbitrary metadata (JSON-encoded string or plain string), nullable."}},"required":["event_timestamp","event_type"],"description":"Update object for an activity log. Used for correcting event details, updating context, or setting metadata after initial record creation."},"IActivityLog":{"$ref":"#/components/schemas/IDiscussionboardActivityLog","description":"Alias for full activity log object, matching IDiscussionboardActivityLog. Included for compatibility with OpenAPI operation type names or system-wide standardization."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number in the paged response."},"limit":{"type":"integer","description":"Number of records per page.","default":100},"records":{"type":"integer","description":"Total number of records matching filter(s) across all pages."},"pages":{"type":"integer","description":"Total number of pages in this search result."}},"required":["current","limit","records","pages"],"description":"Standard implementation for paginated result navigation and metadata."}}},"completed":48,"total":206,"step":0,"created_at":"2025-07-24T19:15:12.213Z"},"tokenUsage":{"facade":{"aggregate":{"total":1307969,"input":{"total":1228294,"cached":103168},"output":{"total":79675,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1307969,"input":{"total":1228294,"cached":103168},"output":{"total":79675,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1307969,"input":{"total":1228294,"cached":103168},"output":{"total":79675,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1307969,"input":{"total":1228294,"cached":103168},"output":{"total":79675,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardChannel.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Channel primary key. Filters search to specific id if supplied.\n\nCorresponds to 'id' in discussionboard_channels table. Used for identifying a single channel uniquely."},"code":{"type":"string","description":"Unique channel code. Filters or searches for channels by code string. Example: 'pol', 'econ'. Matches logic for unique channel lookup, automation, or navigation."},"name":{"type":"string","description":"Channel display name filter. Finds channels with name matching this value. Example: 'Politics'. Fulltext, partial, or exact match, per backend query logic."},"active":{"type":"boolean","description":"Active status flag. Limits search to channels that are active (true) or inactive/archived (false) channels only. Supports management/audit use-cases."},"position":{"type":"integer","description":"Order/position filter. Filters channels by UI/navigation ordering value. Integer sequence as stored in schema."},"created_at":{"type":"string","format":"date-time","description":"Channel creation timestamp. Used for filtering by records created after/before a specified date."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp. Enables filtering by recently edited channels."},"page":{"type":"integer","description":"Pagination: page number (1-based)."},"limit":{"type":"integer","description":"Pagination: max results per page."}},"description":"Request schema for searching/filtering channel entities (discussionboard_channels).\nIncludes all relevant search filters corresponding to channel schema fields.\nPagination parameters provided for batch/list endpoints.","required":[]},"IPageDiscussionboardChannel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardChannel"}}},"required":["pagination","data"],"description":"A paginated result of discussionboard_channels records.\nContains pagination info and array of channel data rows.\nFollows standard IPage<T> OpenAPI contract for batch results."},"IDiscussionboardChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique id of the channel record.\n\nCorresponds to id in discussionboard_channels table.\nAppears as reference in relationships and lookup operations."},"code":{"type":"string","description":"Unique short code for reference in code/config.\n\nExample: 'pol', 'econ'. Ensures normalization/uniqueness for API driven lookups."},"name":{"type":"string","description":"Name for display/navigation in UI. Example: 'Politics'.\nHuman-facing and used to determine category label."},"description":{"oneOf":[{"type":"string","description":"Expanded channel description for users. Can explain rules, scope, or guidance.\nNullable; not all channels need a description."},{"type":"null"}],"description":"Expanded channel description for users. Can explain rules, scope, or guidance.\nNullable; not all channels need a description."},"position":{"type":"integer","description":"Sort order of the channel in UI. Manual integer field allowing custom arrangement. Not a computed value."},"active":{"type":"boolean","description":"Indicates if the channel is visible/active in navigation and query results. Used for archiving without deletion."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for the row."},"updated_at":{"type":"string","format":"date-time","description":"Last modified time for channel metadata."}},"required":["id","code","name","position","active","created_at","updated_at"],"description":"Channel entity type—maps directly to discussionboard_channels model in the DB.\nIncludes all atomic fields and full documentation as per schema file."},"IDiscussionboardChannel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code for this channel. Ex: 'pol', 'econ'. Required."},"name":{"type":"string","description":"Display name for the channel (shown in UI)."},"description":{"oneOf":[{"type":"string","description":"Long-form optional description for the channel. Nullable."},{"type":"null"}],"description":"Long-form optional description for the channel. Nullable."},"position":{"type":"integer","description":"Order for the channel in navigation. Required integer, manually set."},"active":{"type":"boolean","description":"Active/visible status for the channel. If false, channel is archived."}},"required":["code","name","position","active"],"description":"Type for creating a new channel entity (discussionboard_channels). Contains all required fields (except id, created_at, updated_at which are auto-generated)."},"IDiscussionboardChannel.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code for this channel. Ex: 'pol', 'econ'. Settable during edit (with uniqueness constraint)."},"name":{"type":"string","description":"Display name for the channel (shown in UI)."},"description":{"oneOf":[{"type":"string","description":"Optional detailed description for users. Nullable."},{"type":"null"}],"description":"Optional detailed description for users. Nullable."},"position":{"type":"integer","description":"Order for display/navigation."},"active":{"type":"boolean","description":"Flag for visible/archived state."}},"required":["code","name","position","active"],"description":"Body for updating a channel entity (discussionboard_channels).\nAll non-primary fields, except id/created_at/updated_at, are settable by admin logic. Required fields mirror ICreate. 'code' updatable if business rule allows."},"IDiscussionboardChannel.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Whether the delete operation was successful."},"id":{"type":"string","format":"uuid","description":"UUID of the deleted channel row."}},"required":["success","id"],"description":"Result returned by hard-delete of channel row.\nAlways contains status (success boolean) and the id of the deleted record."},"IDiscussionboardSection.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique id for searching specific section."},"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Foreign key id of parent channel for this section. Used for filtering sections under a specific channel."},"code":{"type":"string","description":"Filter for section code (unique within channel)."},"name":{"type":"string","description":"Section display name query/filter."},"active":{"type":"boolean","description":"Boolean filter for section active/archive status."},"position":{"type":"integer","description":"Filter by UI/intended navigation order."},"created_at":{"type":"string","format":"date-time","description":"Filter: date created."},"updated_at":{"type":"string","format":"date-time","description":"Filter: date last updated."},"page":{"type":"integer","description":"Pagination page number."},"limit":{"type":"integer","description":"Results per page (pagination limit)."}},"description":"Request type for querying/listing discussionboard_sections records.\nAllows searching, pagination, full filter by schema fields.\nMaps directly to input requirements for advanced admin/config APIs.","required":[]},"IPageDiscussionboardSection":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSection"}}},"required":["pagination","data"],"description":"Paginated list result for discussionboard_sections entities."},"IDiscussionboardSection":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. The unique id of the section."},"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Foreign key linking this section to its parent channel."},"code":{"type":"string","description":"Unique code for the section (unique per channel). Used for navigation/routing."},"name":{"type":"string","description":"Human-readable display name for the section."},"description":{"oneOf":[{"type":"string","description":"Long-form/expanded section description, nullable for brevity."},{"type":"null"}],"description":"Long-form/expanded section description, nullable for brevity."},"position":{"type":"integer","description":"Manual ordering integer for UI or hierarchy."},"active":{"type":"boolean","description":"Is this section enabled/visible? Admin archive if false."},"created_at":{"type":"string","format":"date-time","description":"When section was created."},"updated_at":{"type":"string","format":"date-time","description":"Last updated time for the section."}},"required":["id","discussionboard_channel_id","code","name","position","active","created_at","updated_at"],"description":"The main entity type for a forum section row, mapping to discussionboard_sections. All fields as in schema plus full documentation."},"IDiscussionboardSection.ICreate":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Channel UUID this section belongs to. FK constraint."},"code":{"type":"string","description":"Unique code within channel for this section. Required."},"name":{"type":"string","description":"Section's visible name. Required."},"description":{"oneOf":[{"type":"string","description":"Optional explanatory description shown in UI. Nullable."},{"type":"null"}],"description":"Optional explanatory description shown in UI. Nullable."},"position":{"type":"integer","description":"Manual order integer for navigation."},"active":{"type":"boolean","description":"Boolean: section is enabled/visible."}},"required":["discussionboard_channel_id","code","name","position","active"],"description":"Fields for creating a discussionboard_sections entity.\nAll required except id/timestamps which are generated by backend."},"IDiscussionboardSection.IUpdate":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Channel UUID FK for changing or maintaining section's parent."},"code":{"type":"string","description":"Unique code for section (must remain unique in channel context, business rule dependent)."},"name":{"type":"string","description":"Human-facing section name."},"description":{"oneOf":[{"type":"string","description":"Optional explanation/detail (nullable)."},{"type":"null"}],"description":"Optional explanation/detail (nullable)."},"position":{"type":"integer","description":"Manual navigation order."},"active":{"type":"boolean","description":"Boolean: section enabled/visible state."}},"required":["discussionboard_channel_id","code","name","position","active"],"description":"Body schema for updating a discussionboard_sections record. Mirrors all natively updateable fields in the schema except id/timestamps."},"IDiscussionboardSection.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"True if delete succeeded."},"id":{"type":"string","format":"uuid","description":"UUID of the deleted section."}},"required":["success","id"],"description":"Result for hard delete of a discussionboard_sections entity."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"현재 페이지 번호(1부터 시작) 입니다."},"limit":{"type":"integer","description":"페이지당 레코드 개수 제한입니다. 기본값은 100입니다."},"records":{"type":"integer","description":"총 레코드 수입니다."},"pages":{"type":"integer","description":"전체 페이지 수입니다. records/limit를 올림하여 계산합니다."}},"required":["current","limit","records","pages"],"description":"페이지네이션 정보 (IPage.IPagination). 데이터 레코드와 페이지 개수, 현재 위치 등 메타 정보를 포함합니다."}}},"completed":60,"total":206,"step":0,"created_at":"2025-07-24T19:15:13.656Z"},"tokenUsage":{"facade":{"aggregate":{"total":1408621,"input":{"total":1326587,"cached":103168},"output":{"total":82034,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1408621,"input":{"total":1326587,"cached":103168},"output":{"total":82034,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1408621,"input":{"total":1326587,"cached":103168},"output":{"total":82034,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1408621,"input":{"total":1326587,"cached":103168},"output":{"total":82034,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardMember.IUpdate":{"type":"object","properties":{"username":{"type":"string","description":"The member's unique username used for login and display within the discussion board system.\n\nThis property maps to the `username` field in the `discussionboard_members` Prisma schema. Changing this value will update the username used throughout the forum. Must be unique and is subject to application and database constraints. Example: 'civicUser42'.\n\nUpdating requires appropriate validation to ensure uniqueness and conformance with business rules."},"email":{"type":"string","format":"email","description":"The member's unique email address, used for authentication, notifications, and system communication.\n\nMatches the `email` field in the `discussionboard_members` schema. All email addresses must be verified and unique for both authentication and notification compliance. Example: 'user@email.com'.\n\nChanging the email may have implications for account recovery and notification delivery."},"role":{"type":"string","description":"The role assigned to the member, which defines permissions and capabilities within the system (e.g., 'member', 'moderator', 'admin').\n\nDirectly corresponds to the `role` field in the schema. Determines the scope of actions a user can perform, such as posting, moderating, or managing the system.\n\nAny role change should be auditable and comply with escalation protocols."},"is_active":{"type":"boolean","description":"Indicates whether the user account is currently active (true) or disabled (false).\n\nImplements the `is_active` field in the Prisma schema, controlling access to the platform. Used for bans, suspensions, and compliance with business rules for user access.\n\nSet to false to disable account access without deleting the member's data."}},"required":[],"description":"Update properties for a discussion board member.\n\nCorresponds to updatable fields in the `discussionboard_members` Prisma schema. Does not include sensitive or system-managed fields (e.g., hashed_password, created_at, updated_at, deleted_at). Used for administrative updates, profile edits, and role management workflows."},"IDiscussionboardModerator.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator assignment. Used for direct lookups or filtering."},"member_id":{"type":"string","format":"uuid","description":"The unique id of the member to whom moderator rights are or were assigned.\n\nMaps to `member_id` in `discussionboard_moderators` schema. Used for filtering all assignments for a particular user."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"The unique id of the admin who assigned the moderator role.\n\nUseful for audit query and tracing assignment authority."},"assigned_at":{"type":"string","format":"date-time","description":"The timestamp when moderator rights were granted.\n\nCan be used for time-based filtering or searching historic/expiring assignments."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when moderator assignment expires, if temporary.\n\nAssign null to find permanent roles. Useful for queries that need to distinguish between permanent and temporary assignments."},{"type":"null","format":"date-time","description":"Timestamp when moderator assignment expires, if temporary.\n\nAssign null to find permanent roles. Useful for queries that need to distinguish between permanent and temporary assignments."}],"description":"Timestamp when moderator assignment expires, if temporary.\n\nAssign null to find permanent roles. Useful for queries that need to distinguish between permanent and temporary assignments."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when moderator rights were revoked, or null if still active.\n\nFor filtering active vs inactive assignments, or searching revocation history."},{"type":"null","format":"date-time","description":"Timestamp when moderator rights were revoked, or null if still active.\n\nFor filtering active vs inactive assignments, or searching revocation history."}],"description":"Timestamp when moderator rights were revoked, or null if still active.\n\nFor filtering active vs inactive assignments, or searching revocation history."}},"required":[],"description":"Request, filter, and pagination parameters for listing or searching moderator assignments.\n\nOnly properties present in the `discussionboard_moderators` schema may be referenced. Used in PATCH, admin search, analytics, and UI filtering contexts."},"IPageIDiscussionboardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IModeratorAssignment"},"description":"Array of moderator assignment records for the current page of search results."}},"required":["pagination","data"],"description":"Paginated container for moderator assignments.\n\nFollows the standard IPage<T> pattern, with `pagination` metadata and `data` as an array of `IModeratorAssignment` records."},"IModeratorAssignment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for the moderator assignment record.\n\nMatches the `id` field in `discussionboard_moderators`."},"member_id":{"type":"string","format":"uuid","description":"FK. The user assigned moderator privileges by this assignment. Must reference an existing member in the discussion board.\n\nCorrelates to `member_id` in the assignment table."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"FK. Admin who created the moderator assignment (actor).\n\nDefined by the `assigned_by_admin_id` in the schema, supports traceable escalations and compliance."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator role was granted.\n\nFulfills the `assigned_at` field in `discussionboard_moderators` for audit."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional expiration time for temporary moderator assignments. Null if permanent.\n\nImplements `expires_at`."},{"type":"null","format":"date-time","description":"Optional expiration time for temporary moderator assignments. Null if permanent.\n\nImplements `expires_at`."}],"description":"Optional expiration time for temporary moderator assignments. Null if permanent.\n\nImplements `expires_at`."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of revocation (if applicable; null means active).\n\nImplements `revoked_at`. Typically set if the assignment was revoked, expired, or ended administratively."},{"type":"null","format":"date-time","description":"Timestamp of revocation (if applicable; null means active).\n\nImplements `revoked_at`. Typically set if the assignment was revoked, expired, or ended administratively."}],"description":"Timestamp of revocation (if applicable; null means active).\n\nImplements `revoked_at`. Typically set if the assignment was revoked, expired, or ended administratively."}},"required":["id","member_id","assigned_by_admin_id","assigned_at"],"description":"Represents a row/record in the moderator assignment table (`discussionboard_moderators`).\n\nTracks moderator status on the discussion board. Stores key audit and status information, supporting escalations, review, and compliance analytics."},"IModeratorAssignment.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"The id of the member being granted the moderator role (must exist in `discussionboard_members`)."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"The id of the admin assigning moderator privileges."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp marking the grant of moderation authority."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) Timestamp when moderator role will expire. Null for permanent assignment."},{"type":"null","format":"date-time","description":"(Optional) Timestamp when moderator role will expire. Null for permanent assignment."}],"description":"(Optional) Timestamp when moderator role will expire. Null for permanent assignment."}},"required":["member_id","assigned_by_admin_id","assigned_at"],"description":"Payload for creating a new moderator assignment.\n\nReferences only schema fields in `discussionboard_moderators`. Used for POST (create) operations."},"IModeratorAssignment.IUpdate":{"type":"object","properties":{"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Update the admin responsible for this assignment, for audit or escalation."},"assigned_at":{"type":"string","format":"date-time","description":"Updated timestamp of assignment action."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"New expiration time, or null for permanent role."},{"type":"null","format":"date-time","description":"New expiration time, or null for permanent role."}],"description":"New expiration time, or null for permanent role."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Revocation timestamp. Set to end moderator privileges early (null for active)."},{"type":"null","format":"date-time","description":"Revocation timestamp. Set to end moderator privileges early (null for active)."}],"description":"Revocation timestamp. Set to end moderator privileges early (null for active)."}},"required":[],"description":"Payload for updating moderator assignment. Corresponds to mutable fields in schema.\n\nDoes not include immutable or primary key fields."},"IAdminAssignment.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for admin assignment."},"member_id":{"type":"string","format":"uuid","description":"User id who is or was assigned admin role."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Admin id who performed assignment."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when assignment was made."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If assignment is ended, when it happened; null if active."},{"type":"null","format":"date-time","description":"If assignment is ended, when it happened; null if active."}],"description":"If assignment is ended, when it happened; null if active."}},"required":[],"description":"Request/filter/search parameters for admin assignment listing and query.\n\nQuery by fields present in the `discussionboard_admins` entity schema."},"IPageIAdminAssignment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IAdminAssignment"},"description":"Current page's set of admin assignment records."}},"required":["pagination","data"],"description":"Paginated result (IPage pattern) of admin assignment search. Contains result records and pagination metadata."},"IAdminAssignment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the admin assignment record."},"member_id":{"type":"string","format":"uuid","description":"Id of the member who was granted admin privileges."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Id of administrator granting admin role."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when admin privileges were granted."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp if admin privileges were revoked; null if still active."},{"type":"null","format":"date-time","description":"Timestamp if admin privileges were revoked; null if still active."}],"description":"Timestamp if admin privileges were revoked; null if still active."}},"required":["id","member_id","assigned_by_admin_id","assigned_at"],"description":"Row/entity describing an administrator role assignment on the discussion board.\n\nTracks privilege escalation and historical role assignments. Supports security, compliance, and privilege review."},"IAdminAssignment.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Id of member to receive admin role."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Admin id who performs this role escalation."},"assigned_at":{"type":"string","format":"date-time","description":"Grant timestamp for admin privileges."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optionally pre-set revocation or retroactive expiry (null for live escalation)."},{"type":"null","format":"date-time","description":"Optionally pre-set revocation or retroactive expiry (null for live escalation)."}],"description":"Optionally pre-set revocation or retroactive expiry (null for live escalation)."}},"required":["member_id","assigned_by_admin_id","assigned_at"],"description":"Request body for assigning administrator privileges to a member.\n\nCorresponds closely to the schema for `discussionboard_admins`. Used for privilege escalation via admin dashboard or API."},"IAdminAssignment.IUpdate":{"type":"object","properties":{"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Admin responsible for assignment update (change of granter/admin)."},"assigned_at":{"type":"string","format":"date-time","description":"Updated assignment timestamp."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Time at which admin privileges are revoked or retroactively ended (null for still active)."},{"type":"null","format":"date-time","description":"Time at which admin privileges are revoked or retroactively ended (null for still active)."}],"description":"Time at which admin privileges are revoked or retroactively ended (null for still active)."}},"required":[],"description":"Payload for mutating/updating admin assignment fields. All fields must exist in schema and be mutable. Does not include identifiers or immutable columns."},"IMemberProfile.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the member profile row."},"member_id":{"type":"string","format":"uuid","description":"Links the profile row to a specific discussion board member (FK to `discussionboard_members`)."},"display_name":{"type":"string","description":"User-chosen public display name. Used for profile display, popover, and badge identification.\n\nMatches the `display_name` field in `discussionboard_member_profiles`."},"bio":{"oneOf":[{"type":"string","description":"Free-form biography or summary. Optional/nullable. Used for badges, UX personalization, and directory overview."},{"type":"null","description":"Free-form biography or summary. Optional/nullable. Used for badges, UX personalization, and directory overview."}],"description":"Free-form biography or summary. Optional/nullable. Used for badges, UX personalization, and directory overview."},"avatar_url":{"oneOf":[{"type":"string","description":"URI for the user's profile/avatar image. May be omitted/null if user does not have a profile picture."},{"type":"null","description":"URI for the user's profile/avatar image. May be omitted/null if user does not have a profile picture."}],"description":"URI for the user's profile/avatar image. May be omitted/null if user does not have a profile picture."},"location":{"oneOf":[{"type":"string","description":"User-supplied location for display on profile (e.g., city/country). Optional."},{"type":"null","description":"User-supplied location for display on profile (e.g., city/country). Optional."}],"description":"User-supplied location for display on profile (e.g., city/country). Optional."},"website_url":{"oneOf":[{"type":"string","description":"URL to user's website or personal homepage. Optional and may be null."},{"type":"null","description":"URL to user's website or personal homepage. Optional and may be null."}],"description":"URL to user's website or personal homepage. Optional and may be null."}},"required":[],"description":"Profile search/filter and pagination parameters for member directory and profile lookup.\n\nEach property references only actual fields in `discussionboard_member_profiles`. Used by PATCH search endpoints, user directory, and UI filters."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Number of records per page. Default is 100."},"records":{"type":"integer","format":"uint32","description":"Total number of records in the database for the search/filter criteria."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages. Computed as ceiling of records/limit."}},"required":["current","limit","records","pages"],"description":"Page information for paginated responses.\n\nStandard metadata about the current page, total records, and navigation for paged result sets."}}},"completed":72,"total":206,"step":0,"created_at":"2025-07-24T19:15:14.101Z"},"tokenUsage":{"facade":{"aggregate":{"total":1509677,"input":{"total":1424865,"cached":103168},"output":{"total":84812,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1509677,"input":{"total":1424865,"cached":103168},"output":{"total":84812,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1509677,"input":{"total":1424865,"cached":103168},"output":{"total":84812,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1509677,"input":{"total":1424865,"cached":103168},"output":{"total":84812,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPostReference":{"type":"object","description":"The IPostReference type defines a reference relation between posts and optionally threads within the political/economic discussion board platform.\n\nThis aligns with the discussionboard_post_references table of the Prisma schema. Each reference serves as a normalized, atomic relationship, supporting workflows for citations, cross-links, and navigation among user posts and threads. It follows strict 3NF: each row is a single reference/link only, no pre-calculated/aggregate. Used in citation UIs, tracebacks, audit trails, and automated moderation tasks.\n\nConsult the schema: id, source_post_id (required), target_post_id (nullable), target_thread_id (nullable), reference_type (required: e.g., 'post','thread','comment'). All UUIDs.\n\nCreated or updated by members, moderators, or admin as system and business process evolves.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifying each reference link (discussionboard_post_references.id).\n\nA UUID for entity singularity and referential integrity. Used for audits, moderation, or direct access by UI components."},"source_post_id":{"type":"string","format":"uuid","description":"The referencing (source) post's UUID (discussionboard_post_references.source_post_id).\n\nIndicates the post where the reference originates. Required, never null. Enforces referential integrity, enables tracebacks/citations."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Referenced (target) post UUID (discussionboard_post_references.target_post_id).\n\nNullable: if the reference is to a thread only, this may be null. If present, must refer to existing post. Supports polymorphic linking."},{"type":"null","format":"uuid","description":"Referenced (target) post UUID (discussionboard_post_references.target_post_id).\n\nNullable: if the reference is to a thread only, this may be null. If present, must refer to existing post. Supports polymorphic linking."}],"description":"Referenced (target) post UUID (discussionboard_post_references.target_post_id).\n\nNullable: if the reference is to a thread only, this may be null. If present, must refer to existing post. Supports polymorphic linking."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Referenced (target) thread UUID (discussionboard_post_references.target_thread_id).\n\nNullable: if the reference is strictly to a post, this is null. Enables polymorphic post/thread relationships for advanced citation or content navigation."},{"type":"null","format":"uuid","description":"Referenced (target) thread UUID (discussionboard_post_references.target_thread_id).\n\nNullable: if the reference is strictly to a post, this is null. Enables polymorphic post/thread relationships for advanced citation or content navigation."}],"description":"Referenced (target) thread UUID (discussionboard_post_references.target_thread_id).\n\nNullable: if the reference is strictly to a post, this is null. Enables polymorphic post/thread relationships for advanced citation or content navigation."},"reference_type":{"type":"string","description":"String marker designating the type of reference ('post','thread','comment').\n\nEssential for polymorphic handling of reference relationships. Must be one of the designated values, enforced application-side. Used for moderation, UI differentiation or analytics tracking."}},"required":["id","source_post_id","reference_type"]},"IPostReference.ICreate":{"type":"object","description":"Request schema for creating a post reference row.\n\nFollows the discussionboard_post_references model: source_post_id (required), reference_type (required), with optional target_post_id and target_thread_id for polymorphic reference. Used by members, moderators, or automation to register contextual links/citations among content items. All UUIDs must be verified for referential existence prior to creation.","properties":{"source_post_id":{"type":"string","format":"uuid","description":"UUID of the origin/source post. Must exist in posts table. Required for all reference creation."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: UUID of the target post. Null if the reference is exclusively to a thread."},{"type":"null","format":"uuid","description":"Optional: UUID of the target post. Null if the reference is exclusively to a thread."}],"description":"Optional: UUID of the target post. Null if the reference is exclusively to a thread."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: UUID of the target thread. Null if not applicable."},{"type":"null","format":"uuid","description":"Optional: UUID of the target thread. Null if not applicable."}],"description":"Optional: UUID of the target thread. Null if not applicable."},"reference_type":{"type":"string","description":"Reference type label: 'post', 'thread', or 'comment', as per content domain.\n\nCrucial for enabling flexible UI/logic at creation time. Examples: 'post','thread','comment'."}},"required":["source_post_id","reference_type"]},"IPostReference.IUpdate":{"type":"object","description":"Schema for updating an existing post reference entity by id.\n\nAllows altering the target relationship or reference type, supporting content reclassification, moderation, or curation workflows. All fields are optional for PATCH-style partial updates, but at least one must be supplied for any update to occur.\n\nField values must match the Prisma schema: target_post_id, target_thread_id, reference_type. Id is implied by the request path; not changeable via the body.","properties":{"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally update the target post for the reference. Null means remove the post linkage."},{"type":"null","format":"uuid","description":"Optionally update the target post for the reference. Null means remove the post linkage."}],"description":"Optionally update the target post for the reference. Null means remove the post linkage."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally assign or change the target thread. Null if removing thread relationship."},{"type":"null","format":"uuid","description":"Optionally assign or change the target thread. Null if removing thread relationship."}],"description":"Optionally assign or change the target thread. Null if removing thread relationship."},"reference_type":{"type":"string","description":"Alter the reference type as needed for moderation/content evolution. Should remain one of: 'post','thread','comment'."}},"required":[]},"IComment.IRequest":{"type":"object","description":"Parameters for searching, filtering, and paginating comments (discussionboard_comments entity).\n\nComplies with the 'IComment.IRequest' convention used in listing API endpoints. All parameter names must align with the actual column names and types in the Prisma schema discussionboard_comments. Includes support for parent_id (threaded/nested reply), post id, member id, text search on content/body, creation or update window, and deleted_at (for soft-delete workflow compliance).\n\nThis type is used by admin, moderator, or UI querying functions.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post under which comments are to be listed/searched. Required for post-level thread queries."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Comment author's UUID. Enables filtering all comments by (or from) a specific member."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"If supplied, lists only direct replies to target comment (for threaded/nested structure). Null for top-level."},{"type":"null","format":"uuid","description":"If supplied, lists only direct replies to target comment (for threaded/nested structure). Null for top-level."}],"description":"If supplied, lists only direct replies to target comment (for threaded/nested structure). Null for top-level."},"body_search":{"type":"string","description":"Performs textual partial search (case- or fulltext-based) on comment content/body. Used for moderation and audit tools."},"created_at_from":{"type":"string","format":"date-time","description":"Filters for comments created after or at this timestamp (inclusive). Supports date-range analytics or moderation."},"created_at_to":{"type":"string","format":"date-time","description":"Filters for comments created before or at this timestamp (inclusive)."},"updated_at_from":{"type":"string","format":"date-time","description":"Filters for comments last updated on/after this value. Used to query edits after moderation events."},"updated_at_to":{"type":"string","format":"date-time","description":"Filters for comments last updated on/before this value. Used to limit history search windows."},"deleted":{"type":"boolean","description":"Show only comments that are soft-deleted (deleted_at present). For moderation/audit focus. If false, show only non-deleted (active) comments."},"page":{"type":"integer","minimum":1,"description":"Results page to display (pagination). Page index starts from 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum records per returned result page (pagination)."},"sort_by":{"type":"string","description":"Comma-delimited column(s) for primary ordering of result records. Follows schema: e.g., 'created_at,body' or 'updated_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort ordering: ascending ('asc') or descending ('desc') for each ordered column."},{"const":"desc","description":"Sort ordering: ascending ('asc') or descending ('desc') for each ordered column."}],"description":"Sort ordering: ascending ('asc') or descending ('desc') for each ordered column."}},"required":[]},"IPageIComment":{"type":"object","description":"Paginated container for IComment entity rows in discussionboard_comments.\n\nImplements the IPage container (<T extends object>) with T = IComment, as documented in the discussionboard_comments context. Includes pagination metadata, parameters, and a record set. Used by all paginated comment listing endpoints (list, search, moderation, audit, analytics).","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IComment"},"description":"List of comment entities on this page (see IComment for schema detail)."}},"required":["pagination","data"]},"IComment":{"type":"object","description":"Schema for an atomic comment entity in the discussionboard_comments table.\n\nRepresents a user/member's comment, reply, or moderator/in-system note attached to a post, supporting full moderation, discussion threading, and audit workflows. 100% aligns with Prisma schema: id, discussionboard_post_id, discussionboard_member_id, parent_id (nullable), body, created_at, updated_at (nullable), deleted_at (nullable).\n\nEach instance is one comment attached to a single post, optionally replying to another comment (parent_id). For every historical comment/editable, see ICommentSnapshot for history. Used by member UIs, admin tools, audit logs, and analytics dashboards.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the comment entity (discussionboard_comments.id). A unique, unchanging identifier."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post to which the comment is attached (discussionboard_comments.discussionboard_post_id).\n\nEnsures referential integrity, facilitates post-level threading, and supports reply hierarchies."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the comment's authoring member (discussionboard_comments.discussionboard_member_id).\n\nEnables attributions, moderation, and reply functions. Ensures direct relationship with user records."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional UUID of the comment being replied to (discussionboard_comments.parent_id).\n\nNullable: null for top-level comments. Supports arbitrary nesting (tree structure) for threaded discussions."},{"type":"null","format":"uuid","description":"Optional UUID of the comment being replied to (discussionboard_comments.parent_id).\n\nNullable: null for top-level comments. Supports arbitrary nesting (tree structure) for threaded discussions."}],"description":"Optional UUID of the comment being replied to (discussionboard_comments.parent_id).\n\nNullable: null for top-level comments. Supports arbitrary nesting (tree structure) for threaded discussions."},"body":{"type":"string","description":"Main content of the comment (discussionboard_comments.body).\n\nStrictly text; no formatting/meta outside this field. Subject to content moderation, spam filters, and audit review."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created (discussionboard_comments.created_at).\n\nEnables chronological review, audit, analytics, and sort."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of most recent edit (discussionboard_comments.updated_at).\n\nNullable: null if untouched since creation. Enables 'edited' UI markers, audit tracking, and version control."},{"type":"null","format":"date-time","description":"Timestamp of most recent edit (discussionboard_comments.updated_at).\n\nNullable: null if untouched since creation. Enables 'edited' UI markers, audit tracking, and version control."}],"description":"Timestamp of most recent edit (discussionboard_comments.updated_at).\n\nNullable: null if untouched since creation. Enables 'edited' UI markers, audit tracking, and version control."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp for the comment (discussionboard_comments.deleted_at).\n\nNull if comment is visible/active. Non-null for moderation-deleted comments, enables audit and appeals."},{"type":"null","format":"date-time","description":"Soft deletion timestamp for the comment (discussionboard_comments.deleted_at).\n\nNull if comment is visible/active. Non-null for moderation-deleted comments, enables audit and appeals."}],"description":"Soft deletion timestamp for the comment (discussionboard_comments.deleted_at).\n\nNull if comment is visible/active. Non-null for moderation-deleted comments, enables audit and appeals."}},"required":["id","discussionboard_post_id","discussionboard_member_id","body","created_at"]},"IComment.ICreate":{"type":"object","description":"Request payload for creating a new comment entity in discussionboard_comments.\n\nFollows the schema: discussionboard_post_id (required), discussionboard_member_id (required), body (required).\n\nOptional: parent_id (for replies; null for top-level). Used by member or moderator UI for adding threaded comments or reply chains. All foreign key references must be validated before creation. Creation auto-assigns created_at, updated_at, and deleted_at (null).","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post for the new comment (required; FK enforced).\n\nMust match existing discussionboard_posts.id."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member authoring the comment (required; FK enforced).\n\nEnsures author attribution and moderation rights."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment being replied to, if any (nullable).\n\nNull for top-level comments. Allows for arbitrary comment nesting."},{"type":"null","format":"uuid","description":"UUID of the comment being replied to, if any (nullable).\n\nNull for top-level comments. Allows for arbitrary comment nesting."}],"description":"UUID of the comment being replied to, if any (nullable).\n\nNull for top-level comments. Allows for arbitrary comment nesting."},"body":{"type":"string","description":"Text content/body for the comment (required)."}},"required":["discussionboard_post_id","discussionboard_member_id","body"]},"IComment.IUpdate":{"type":"object","description":"Payload for updating an existing comment entity in discussionboard_comments.\n\nFields are patch-style optional; any subset may be provided. Body allows comment content edits. parent_id can be set to move replies or adjust threading. discussionboard_post_id/discussionboard_member_id should rarely be changed except in audit/fixups. Only actual schema fields are allowed. updated_at must be handled by server logic.\n\ndeleted_at is modified only by soft-delete endpoint; not settable here.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Optionally update the post association (rare; only for audit/exceptional transitions).\n\nUUID FK to posts."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optionally update the author/member relationship for the comment (rare, for audit/fixes)."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally assign/change reply parent for a comment (nesting structure fix)."},{"type":"null","format":"uuid","description":"Optionally assign/change reply parent for a comment (nesting structure fix)."}],"description":"Optionally assign/change reply parent for a comment (nesting structure fix)."},"body":{"type":"string","description":"Update the content/body of the comment."}},"required":[]},"IDiscussionboardCommentSnapshot.IRequest":{"type":"object","description":"Filtering/search request for list or history endpoints on comment snapshots (discussionboard_comment_snapshots domain).\n\nAllows filtering by comment_id, member_id, post_id, version, snapshot_created_at (date range), body search. Used by audit, rollback, version history, and advanced moderation panels. All keys must match discussionboard_comment_snapshots columns.\n\nPagination and sort provided as standard keys.","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Comment UUID for which snapshots are being searched/returned."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Which member's edits are being listed. Used in moderation, investigation, or analytics."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Parent post reference for the snapshot, joins audit flows across posts."},"version":{"type":"integer","description":"Comment edit version number (monotonic; version 1 = initial comment, 2 = first edit, etc.)."},"body_search":{"type":"string","description":"Supports fulltext or partial search against historical comment body for forgery detection, audit, or fraud review."},"snapshot_created_from":{"type":"string","format":"date-time","description":"Filters for snapshots created after this ISO8601 timestamp (inclusive)."},"snapshot_created_to":{"type":"string","format":"date-time","description":"Filters for snapshots created before this timestamp (inclusive)."},"page":{"type":"integer","minimum":1,"description":"Which page of results to show (pagination control)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Results per page (limits with analytic/audit default max)."},"sort_by":{"type":"string","description":"Sort by this column (snapshot_created_at, version, etc.)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sorting order: 'asc' or 'desc'."},{"const":"desc","description":"Sorting order: 'asc' or 'desc'."}],"description":"Sorting order: 'asc' or 'desc'."}},"required":[]},"IPageDiscussionboardCommentSnapshot":{"type":"object","description":"Paginated result wrapper for comment snapshot history records (discussionboard_comment_snapshots domain).\n\nImplements the IPage pattern (pagination plus data[] array of entity rows) for moderation history, audit, rollback, and analytics scenarios. Every row matches IDiscussionboardCommentSnapshot.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentSnapshot"},"description":"Snapshot history records for this paginated window (see IDiscussionboardCommentSnapshot for details)."}},"required":["pagination","data"]},"IDiscussionboardCommentSnapshot":{"type":"object","description":"Atomic entity representing a snapshot (edit/history event) of a comment in discussionboard_comment_snapshots.\n\nEach instance stores a version of a comment's text/body at a specific edit or audit event — immutable retrospective for audit, rollback, moderation, and appeals. Matches schema: id (PK), discussionboard_comment_id (FK), discussionboard_member_id (author at edit), discussionboard_post_id (context), body (historical comment string), version (monotonic edit number), snapshot_created_at (timestamp of history event). Used by audit, version control, and appeals/review processes.","properties":{"id":{"type":"string","format":"uuid","description":"Snapshot entity PK (discussionboard_comment_snapshots.id). Referenced for audit, rollback, or display."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"FK to the comment entity this is a history for (discussionboard_comment_snapshots.discussionboard_comment_id)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Who authored this comment version at the time (FK to member)."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Post context for the comment snapshot (FK to post).\n\nUsed when cross-checking history/audit trails."},"body":{"type":"string","description":"Immutable historical text/body stored at this version of the comment."},"version":{"type":"integer","description":"Which edit/version this is for the comment; monotonic for rollback, UI audit, and fraud detection."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Timestamp when this version/snapshot event was recorded (audit, rollback, moderation)."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_post_id","body","version","snapshot_created_at"]},"IDiscussionboardCommentSnapshot.ICreate":{"type":"object","description":"Payload type for creating a new comment snapshot (version history record) in discussionboard_comment_snapshots.\n\nRequired properties: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body (text at the time), version, snapshot_created_at (timestamp of snapshot creation). Used by audit, rollback, moderation, and appeals. All properties validated for FK existence before creation.","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Which comment/entity is this a version for; required for FK/reference integrity."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Which member performed edit or authored at this history/snapshot event."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Which post (context) is the snapshot linked to; aligns audit trails and rollback logic."},"body":{"type":"string","description":"Fixed/captured body/text at this version."},"version":{"type":"integer","description":"What edit version this is (e.g., 1 = original, 2 = first edit, etc.)."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Timestamp of the snapshot; the actual event or edit time."}},"required":["discussionboard_comment_id","discussionboard_member_id","discussionboard_post_id","body","version","snapshot_created_at"]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Limitation of records per a page.\n\n@default 100"},"records":{"type":"integer","description":"Total records in the database."},"pages":{"type":"integer","description":"Total pages.\n\nEqual to records / limit with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information for paginated results.\n\nIncludes current page index, limit per page, total records, and page count. Used for supporting pagination across API result sets."}}},"completed":84,"total":206,"step":0,"created_at":"2025-07-24T19:15:14.513Z"},"tokenUsage":{"facade":{"aggregate":{"total":1612079,"input":{"total":1523137,"cached":103168},"output":{"total":88942,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1612079,"input":{"total":1523137,"cached":103168},"output":{"total":88942,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1612079,"input":{"total":1523137,"cached":103168},"output":{"total":88942,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1612079,"input":{"total":1523137,"cached":103168},"output":{"total":88942,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"Idiscussionboard_reports.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"유일한 신고(Report) 식별자입니다.\n\ndiscussionboard_reports 테이블의 주키 역할을 하며, 개별 신고의 식별 및 참조에 사용됩니다.\n\n이 필드는 사용자 입력이나 클라이언트 요청에 의해 지정되거나, 검색/필터 목적의 조건으로 활용됩니다."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 사유를 구분하는 report_types 테이블의 기본키입니다.\n\n스팸, 욕설 등 신고의 분류를 구분하며, 필터/검색 조건으로 활용됩니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고를 생성한 회원의 discussionboard_members.id(기본키) 값입니다.\n\n누가 신고했는지를 확인하는 데 사용됩니다."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상 객체(게시글/댓글/회원 등)의 고유 식별자입니다.\n\n해당 대상에 대한 신고만 검색할 때 사용됩니다."},"target_object_type":{"type":"string","description":"신고 대상 객체의 타입입니다. 예: 'post', 'comment', 'member' 등\n\n유형별로 조회 혹은 상태 확인 시 필터 조건으로 사용됩니다."},"report_description":{"oneOf":[{"type":"string","description":"신고에 첨부된 설명·근거·사유 등 추가 텍스트입니다.\n\n신고 리스트 검색/필터에서 이 필드를 조건으로 검색할 수도 있습니다."},{"type":"null","description":"신고에 첨부된 설명·근거·사유 등 추가 텍스트입니다.\n\n신고 리스트 검색/필터에서 이 필드를 조건으로 검색할 수도 있습니다."}],"description":"신고에 첨부된 설명·근거·사유 등 추가 텍스트입니다.\n\n신고 리스트 검색/필터에서 이 필드를 조건으로 검색할 수도 있습니다."},"reported_at":{"type":"string","format":"date-time","description":"신고가 생성된 시각입니다. ISO-8601, UTC.\n\n이 필드는 기간 검색, 정렬, 또는 생성 일시 기준 통계에 활용됩니다."}},"description":"신고(Report) 리스트/검색 요청 조건 데이터 오브젝트입니다.\n\ndiscussionboard_reports 테이블의 주요 컬럼에 대한 검색/필터/정렬 조건을 제공합니다. 모든 필드는 실제 스키마 컬럼만을 기준으로 합니다.\n\n관리, 모니터링, 통계, 신고처리 대시보드 등 다양한 관리자용 UI, API에 넘깁니다.","required":[]},"IPageIdiscussionboard_reports":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_reports"},"description":"신고 데이터를 포함한 리스트 배열입니다."}},"required":["pagination","data"],"description":"신고(Report) 엔터티의 페이지네이션·페이징 처리를 위한 컨테이너.\n\n관리/운영/검색·통계 UI 등에서 paginated UI 지원 시 사용됩니다.\n\npagination 필드는 전체 조회 정보, data는 각 신고 데이터(엔티티 완전한 구조) 배열을 반환합니다."},"Idiscussionboard_reports":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"유일 신고 row 식별자\n\ndiscussionboard_reports 테이블의 PK입니다."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형(invocation reason) FK(논리 코드)\n\n실제 신고 항목 정의는 별도 discussionboard_report_types 테이블 참조"},"reporting_member_id":{"type":"string","format":"uuid","description":"신고를 수행한 회원(Actors)의 FK. 신고자를 추적, 통계 빅데이터, 혹은 중복 제한에 사용."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상의 row 식별자 (포스트, 댓글, 회원 등). polymorphic 참조."},"target_object_type":{"type":"string","description":"신고 대상의 엔티티 유형(예: post, comment, member 등). API에서 polymorphic 참조로 활용합니다."},"report_description":{"oneOf":[{"type":"string","description":"신고 사유에 대한 추가 설명·첨부/증빙 근거. nullable.\n\n담당자 상세 보기, 통계, 신고 사유 분석 등에 활용"},{"type":"null","description":"신고 사유에 대한 추가 설명·첨부/증빙 근거. nullable.\n\n담당자 상세 보기, 통계, 신고 사유 분석 등에 활용"}],"description":"신고 사유에 대한 추가 설명·첨부/증빙 근거. nullable.\n\n담당자 상세 보기, 통계, 신고 사유 분석 등에 활용"},"reported_at":{"type":"string","format":"date-time","description":"신고 생성 시각. UTC ISO 8601 string.\n\n관리/감사/통계 및 SLA 측정 등에 사용합니다."}},"required":["id","discussionboard_report_type_id","reporting_member_id","target_object_id","target_object_type","reported_at"],"description":"신고(Report) 단일 엔티티 오브젝트입니다.\n\ndiscussionboard_reports 테이블의 모든 실제 필드를 포함하며, 식별 정보(PK/FK), 신고 사유, 신고자, 대상, 상세 설명, 생성 일시 등을 표현합니다.\n\n감사, 모니터링, 상세조회, 신고처리 등에서 활용합니다."},"Idiscussionboard_reports.ICreate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형 식별자(FK). 필수.\n\ndiscussionboard_report_types에서 미리 정의된 유형 UUID로, UI에선 신고 사유 선택 콤보박스로 제공될 수 있습니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"실제로 신고를 수행한 회원 discussionboard_members.id (UUID). 회원이 직접 신고하는 경우 자동 세팅."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상(row)의 UUID. (게시글, 댓글, 회원 등 PK)"},"target_object_type":{"type":"string","description":"신고 대상 유형. 예: post, comment, member 등. Enum으로 제한될 수 있음. 정확성과 일관성을 위해 표준화된 문자열 사용 권장."},"report_description":{"oneOf":[{"type":"string","description":"신고 상세 설명(선택값). 신고 내용에 대한 추가 서술. Null이 허용됩니다."},{"type":"null","description":"신고 상세 설명(선택값). 신고 내용에 대한 추가 서술. Null이 허용됩니다."}],"description":"신고 상세 설명(선택값). 신고 내용에 대한 추가 서술. Null이 허용됩니다."}},"required":["discussionboard_report_type_id","reporting_member_id","target_object_id","target_object_type"],"description":"신고(Report) 생성 API 요청 본문 형식.\n\n신고 생성 시 필요한 필수 필드만 명시, description은 옵션(Nullable)입니다. created_at은 시스템에 의해 자동 추가."},"Idiscussionboard_reports.IUpdate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형 식별자(FK). 변경할 경우 새 사유로 업데이트합니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고자(회원) FK. 실수/중복/운영상 변경 필요 시 사용."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상 엔티티(row) UUID. 대상이 잘못 설정된 경우 변경할 수 있음."},"target_object_type":{"type":"string","description":"신고 대상 유형. 예: post, comment, member."},"report_description":{"oneOf":[{"type":"string","description":"신고 상세 설명(Nullable). 관리자 또는 조정 시에 내용 추가/수정 가능."},{"type":"null","description":"신고 상세 설명(Nullable). 관리자 또는 조정 시에 내용 추가/수정 가능."}],"description":"신고 상세 설명(Nullable). 관리자 또는 조정 시에 내용 추가/수정 가능."}},"description":"신고(Report) 업데이트 시 사용하는 데이터 구조입니다.\n\n필수는 아니며, 수정 필요한 항목만 전달 가능합니다.","required":[]},"Idiscussionboard_report_types.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"신고 유형의 식별자(PK), UUID.\n\n개별 조회/필터/검색에 사용 가능합니다."},"code":{"type":"string","description":"신고 분류 코드(예: 'spam', 'abuse', 'misinformation').\n\n프론트엔드와 서버 간 동기화·검색·분석 등에서 enum 역할을 합니다."},"display_name":{"type":"string","description":"신고 유형의 UI 표시용 한글명/문자열.\n\n검색, 목록, UI 필터링에 사용됩니다."},"active":{"type":"boolean","description":"신고 유형의 사용/미사용 여부. 검색/필터 시 활성 상태 조건으로 많이 사용됩니다."},"created_at":{"type":"string","format":"date-time","description":"생성 일시(UTC ISO 8601). 기간 기준 목록 조회, 정렬 등에 활용됩니다."}},"description":"신고 유형(report_types) 목록/검색/필터용 조회 요청 본문입니다.\n\ndiscussionboard_report_types의 주요 컬럼 기준, 각종 필터에 사용됩니다.","required":[]},"IPageIdiscussionboard_report_types":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_report_types"},"description":"각 신고 유형 엔터티 배열입니다."}},"required":["pagination","data"],"description":"신고 유형(report_types) 엔터티의 페이지네이션 컨테이너\n\npagination: 페이지 정보, data: report_types 엔터티 배열"},"Idiscussionboard_report_types":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"PK, 유일 신고 유형 식별자. UUID."},"code":{"type":"string","description":"신고 유형의 코드값(내부 논리 enum, 예: 'abuse', 'spam').\n\n시스템 및 프론트엔드, 정책 자동화 등에 활용됩니다."},"display_name":{"type":"string","description":"신고 유형의 한글 라벨(또는 영어식)."},"description":{"oneOf":[{"type":"string","description":"운영자/관리용 추가 설명입니다.\n\n신고 유형이 다소 복합적일 경우 내부 교육/문서화 용도로 활용"},{"type":"null","description":"운영자/관리용 추가 설명입니다.\n\n신고 유형이 다소 복합적일 경우 내부 교육/문서화 용도로 활용"}],"description":"운영자/관리용 추가 설명입니다.\n\n신고 유형이 다소 복합적일 경우 내부 교육/문서화 용도로 활용"},"active":{"type":"boolean","description":"해당 유형이 사용 가능한지 활성 여부.\n\nInactive 시 신고 사유 선택에서 보이지 않습니다."},"created_at":{"type":"string","format":"date-time","description":"유형 Row 생성 시각. UTC ISO 8601. 정책 감사, 통계 등에서 사용됨."}},"required":["id","code","display_name","active","created_at"],"description":"신고 유형(report_types) 단일 엔티티 데이터 구조\n\ndiscussionboard_report_types의 실제 컬럼 全부 포함.\n\n정책 관리, 신고 사유 라벨, 관리자/프론트엔드 표시/선택 등에 사용"},"Idiscussionboard_report_types.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형 enum code. 예) spam, abuse... 신규 정의시 admin이 직접 규격화해야 하며, 중복 될 수 없음."},"display_name":{"type":"string","description":"신고 유형명(UI 라벨 겸용). 한글/영문 모두 가능."},"description":{"oneOf":[{"type":"string","description":"운영자/관리자용 설명 필드. 정책/교육 주석 등 자유 텍스트 가능"},{"type":"null","description":"운영자/관리자용 설명 필드. 정책/교육 주석 등 자유 텍스트 가능"}],"description":"운영자/관리자용 설명 필드. 정책/교육 주석 등 자유 텍스트 가능"},"active":{"type":"boolean","description":"유형 활성화 여부. 신규 생성 시 true를 권장."}},"required":["code","display_name","active"],"description":"신고 유형(report_types) 생성 요청 스키마입니다.\n\n필수 필드(code, display_name, active), description은 optional입니다."},"Idiscussionboard_report_types.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형 code 값. 기존 값을 새 값으로 변경시 사용."},"display_name":{"type":"string","description":"신고 유형명, UI 라벨 등."},"description":{"oneOf":[{"type":"string","description":"신고 유형 설명(Nullable). 새 정책 혹은 주석 수정 시 활용."},{"type":"null","description":"신고 유형 설명(Nullable). 새 정책 혹은 주석 수정 시 활용."}],"description":"신고 유형 설명(Nullable). 새 정책 혹은 주석 수정 시 활용."},"active":{"type":"boolean","description":"활성화/비활성화 상태로 변경."}},"description":"신고 유형(report_types) 수정에 사용되는 payload 구조.\n\n수정 항목만 입력하면 되고, code/display_name 활성화 여부 등을 자유롭게 변경할 수 있다.","required":[]},"IDiscussionboardModerationAction.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"중재/모더레이션 액션 고유 식별자(PK)."},"report_id":{"type":"string","format":"uuid","description":"관련 신고(Report)의 고유 식별자. notification, 감시, 통계 등에서 사용"},"acting_moderator_id":{"type":"string","format":"uuid","description":"실제 조치를 수행한 권한자(모더레이터/관리자 등) 식별자."},"target_object_id":{"type":"string","format":"uuid","description":"액션의 적용 대상 오브젝트(PK값)."},"target_object_type":{"type":"string","description":"적용 대상 엔터티 타입. 예:'post', 'member', 'comment', 'board'..."},"action_type":{"type":"string","description":"액션의 구체적 타입(예: warn, edit, delete, ban, lock, pin 등)."},"rationale":{"type":"string","description":"조치의 근거·설명. 내부 감사/정책 투명성 용."},"actioned_at":{"type":"string","format":"date-time","description":"행동/액션이 발생한 일시(UTC ISO 8601)."}},"description":"모더레이션 액션(중재/조치) 엔티티 리스트/검색 요청용.","required":[]},"IPageIDiscussionboardModerationAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerationAction"},"description":"모더레이션 액션 항목의 배열"}},"required":["pagination","data"],"description":"중재/모더레이션 액션(page네이션) 리스트 컨테이너. pagination: 페이지 정보, data: moderationAction 배열"},"IDiscussionboardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자(PK) uuid"},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"연관 신고 id. nullable."},{"type":"null","format":"uuid","description":"연관 신고 id. nullable."}],"description":"연관 신고 id. nullable."},"acting_moderator_id":{"type":"string","format":"uuid","description":"실제 모더레이터 주체의 id"},"target_object_id":{"type":"string","format":"uuid","description":"조치 적용 대상 row id"},"target_object_type":{"type":"string","description":"조치 대상 entity 타입"},"action_type":{"type":"string","description":"경고/삭제/차단 등 구체적 moderation action 타입"},"rationale":{"type":"string","description":"조치 사유/내부설명/정책 문구 등"},"actioned_at":{"type":"string","format":"date-time","description":"실행 시각(UTC ISO 8601)"}},"required":["id","acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"중재/모더레이션 액션 단일 오브젝트."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"현재 페이지 번호입니다.","example":1},"limit":{"type":"integer","description":"페이지 당 레코드 수입니다. 기본값은 100입니다."},"records":{"type":"integer","description":"데이터베이스 전체 레코드 수입니다."},"pages":{"type":"integer","description":"총 페이지 수입니다. (records / limit, 올림 처리됨)"}},"required":["current","limit","records","pages"],"description":"페이지네이션(페이징) 정보 컨테이너.\n\n현재 페이지, 페이지 당 아이템, 전체 아이템/페이지 수 정보 포함"}}},"completed":96,"total":206,"step":0,"created_at":"2025-07-24T19:15:19.461Z"},"tokenUsage":{"facade":{"aggregate":{"total":1713902,"input":{"total":1621439,"cached":103168},"output":{"total":92463,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1713902,"input":{"total":1621439,"cached":103168},"output":{"total":92463,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1713902,"input":{"total":1621439,"cached":103168},"output":{"total":92463,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1713902,"input":{"total":1621439,"cached":103168},"output":{"total":92463,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardThreadTag.IUpdate":{"type":"object","properties":{"removed_at":{"type":"string","format":"date-time","description":"The timestamp when the tag assignment was removed. Used to indicate when a thread tag was deactivated, supporting tag history as required by audit, rollback, and moderation features in the discussion board. Nullable per schema."}},"required":[],"description":"Update properties for a thread tag assignment entity (discussionboard_thread_tags), referencing exactly the schema fields (see Prisma/ERD). This type is used for updating tag-assignments with new 'removed_at' values to support tag deactivation or rollback for moderation/audit workflows."},"IDiscussionboardPost.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post. Used for direct lookup or filtering during searches."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"UUID of thread this post belongs to. Used for filtering posts under a thread."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of member who authored the post."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of board this post is associated with."},"title":{"type":"string","description":"Title (subject) of the post. Used for search or filtering, UI display, and timelines."},"body":{"type":"string","description":"Full textual body content of the post (main content)."},"is_deleted":{"type":"boolean","description":"Soft delete marker. True if logically deleted; otherwise false."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601 format) for post creation/date-range filter."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update (ISO 8601) for date-range searching or filtering."}},"required":[],"description":"Search, filter, and pagination parameters for listing post entities in discussionboard_posts. All properties present in this type correspond to actual schema columns in the posts table. Used by API for advanced querying of post records."},"IPageDiscussionboardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPost"},"description":"Array of post records for the current page, as returned by the query."}},"required":["pagination","data"],"description":"Paginated result wrapper for discussion board posts, as per standard IPage<T> convention. Contains posts array and pagination data."},"IDiscussionboardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post record as in Prisma/ERD."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Foreign key reference to the thread containing this post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key reference to the discussion member who authored this post."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key reference to the board."},"title":{"type":"string","description":"Main title or subject line of the post, as entered by user."},"body":{"type":"string","description":"The full text content of the post."},"is_deleted":{"type":"boolean","description":"Soft delete flag; true if logically deleted, otherwise false."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for post creation (ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last post update (ISO 8601)."}},"required":["id","discussionboard_thread_id","discussionboard_member_id","discussionboard_board_id","title","body","is_deleted","created_at","updated_at"],"description":"Atomic, fully-populated post entity from discussionboard_posts. Contains all current schema properties—including soft-delete logic via is_deleted flag."},"IDiscussionboardPost.ICreate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"UUID for the thread that this post will belong to. Required."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member authoring the post. Required."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of the board this post is posted under. Required."},"title":{"type":"string","description":"Title for the new post. Required."},"body":{"type":"string","description":"Full text content for the new post. Required."}},"required":["discussionboard_thread_id","discussionboard_member_id","discussionboard_board_id","title","body"],"description":"Fields for creating a new discussion board post entity in discussionboard_posts. All required and optional columns are mapped directly to schema."},"IDiscussionboardPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Title to update for the post, if modifying. Optional in update."},"body":{"type":"string","description":"New content for the post. Optional in update."},"is_deleted":{"type":"boolean","description":"Update soft delete marker (true/false), to mark/unmark as deleted."}},"required":[],"description":"Update body for editing an existing post. All fields are optional and map exactly to updateable properties in the Prisma post model."},"IDiscussionboardPostSnapshot.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Snapshot UUID for precise lookup."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the parent post for the snapshot."},"editor_member_id":{"type":"string","format":"uuid","description":"Editor UUID; the member who edited/created the snapshot."},"title":{"type":"string","description":"Title as it was in the given snapshot version."},"body":{"type":"string","description":"Body/content as it was in the given snapshot version."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp for when the snapshot was taken."}},"required":[],"description":"Request/search/filter schema for listing or querying post snapshots in discussionboard_post_snapshots; only fields present in the model are permitted."},"IPageDiscussionboardPostSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_post_snapshots"},"description":"Array of post snapshot records for the current page/query."}},"required":["pagination","data"],"description":"Paginated list result for post snapshot records, following standard IPage<T> interface. Supports page-level access to post version history."},"Idiscussionboard_post_snapshots":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for this snapshot version."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Reference to parent post whose version is being snapshot."},"editor_member_id":{"type":"string","format":"uuid","description":"Editor UUID (nullable for system edits/unknown); who performed the edit."},"title":{"type":"string","description":"Title as at the snapshot time."},"body":{"type":"string","description":"Body as at the snapshot time."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp when snapshot was captured."}},"required":["id","discussionboard_post_id","title","body","taken_at"],"description":"Immutable post version/snapshot record from discussionboard_post_snapshots. Contains full record of title/body at the time, for rollback/audit purposes. Some fields may be nullable if not strictly required in the schema."},"Idiscussionboard_post_snapshots.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post for which this snapshot is being created."},"editor_member_id":{"type":"string","format":"uuid","description":"UUID of the member performing the edit; nullable for system-attributed snapshots."},"title":{"type":"string","description":"Title for this version of the post."},"body":{"type":"string","description":"Body/content at this snapshot version."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp of when the snapshot is taken."}},"required":["discussionboard_post_id","title","body","taken_at"],"description":"Body for creating a new post snapshot—used to record post versioning for audit/multi-version control. Fields must match model structure."},"Idiscussionboard_post_snapshots.IUpdate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post whose snapshot this is; for correcting reference."},"editor_member_id":{"type":"string","format":"uuid","description":"UUID of member who edited / snapshot belongs to."},"title":{"type":"string","description":"Updated title for the snapshot, for corrections."},"body":{"type":"string","description":"Updated body/content for the snapshot."},"taken_at":{"type":"string","format":"date-time","description":"Updated time (rare; for audit correction only)."}},"required":[],"description":"Update schema for post snapshots, only allows correction of fields that actually exist in the model. All properties are optional for PATCH/PUT update."},"Idiscussionboard_post_votes.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the vote entry."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post being voted on."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who cast the vote."},"vote_type":{"type":"integer","description":"Indicates direction of vote: 1 for upvote, -1 for downvote, 0 for neutral/removal."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of vote action for filter/sorting/search."}},"required":[],"description":"Filtering, search, and paging interface for listing vote records in discussionboard_post_votes table. All properties used match model attributes directly."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number. Used for tracking current page in paginated responses."},"limit":{"type":"integer","format":"uint32","description":"Number of records per page."},"records":{"type":"integer","format":"uint32","description":"Total number of records in database."},"pages":{"type":"integer","format":"uint32","description":"Total number of available pages."}},"required":["current","limit","records","pages"],"description":"Standard page-level metadata object for paginated API responses."}}},"completed":108,"total":206,"step":0,"created_at":"2025-07-24T19:15:21.644Z"},"tokenUsage":{"facade":{"aggregate":{"total":1814488,"input":{"total":1719738,"cached":103168},"output":{"total":94750,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1814488,"input":{"total":1719738,"cached":103168},"output":{"total":94750,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1814488,"input":{"total":1719738,"cached":103168},"output":{"total":94750,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1814488,"input":{"total":1719738,"cached":103168},"output":{"total":94750,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardNotificationPreferences":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification preference row. Represents the primary key and ensures this record can be individually referenced."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Identifier of the member whose notification preferences this record stores. References the member in the discussion board system."},"code":{"type":"string","description":"Notification Template Code: Specifies the template/event (e.g., 'reply', 'mention', 'announcement') to which these preferences apply. This enables per-notification granularity."},"email_enabled":{"type":"boolean","description":"Determines whether this member wants to receive email for this notification type. Fulfills privacy and opt-in/out regulatory requirements."},"inapp_enabled":{"type":"boolean","description":"Indicates whether in-app notifications are enabled for this template/type. Allows per-template/channel preference."},"browser_enabled":{"type":"boolean","description":"Indicates if browser push notifications are enabled. Controls delivery to browser UIs supporting push."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp representing when this preferences record was created. Supports compliance and history review."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of most recent preference update. Used for audit and privacy review."}},"required":["id","discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled","created_at","updated_at"],"description":"A discussion board member's notification channel preferences for a specific notification template/event type. Fully normalized and reviewed. All audit, opt-in/out, and privacy compliance fields are present."},"IDiscussionboardNotificationPreferences.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"The member (user) to whom these preferences apply. Only valid members may be referenced."},"code":{"type":"string","description":"The notification template code for which the channel preferences are being set."},"email_enabled":{"type":"boolean","description":"Whether to allow email notifications for this template type."},"inapp_enabled":{"type":"boolean","description":"Allow in-app notifications for this code/type."},"browser_enabled":{"type":"boolean","description":"Enable browser push for this template code."}},"required":["discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled"],"description":"Request structure for creating a new notification preference for a member. Contains the member ID, notification template code, and per-channel enablement booleans. Used in user onboarding and notification setup."},"IDiscussionboardNotificationPreferences.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Notification template code for which the preference is set. May be updated if member wants to apply this row to a different template/event."},"email_enabled":{"type":"boolean","description":"Updated value for email channel. If true, members will receive email for this code/type."},"inapp_enabled":{"type":"boolean","description":"Updates in-app notification enablement for this code/type."},"browser_enabled":{"type":"boolean","description":"Updates browser push preference."}},"required":["code","email_enabled","inapp_enabled","browser_enabled"],"description":"Request structure for updating existing notification preferences. Required fields are the notification template code and enable/disable booleans for each channel."},"IDiscussionboardPrivacyPolicies.IRequest":{"type":"object","properties":{"version":{"type":"string","description":"Optional search for policy by version string (e.g., 'v2024.06')."},"effective_date":{"type":"string","format":"date-time","description":"Policy effective date to filter/search."},"title":{"type":"string","description":"Filter privacy policies by title."},"content":{"type":"string","description":"Free-text search in the privacy policy content."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated search. Indexed from 1."},"limit":{"type":"integer","minimum":1,"description":"Result limit (max # of records per page)."}},"description":"Filter/search/pagination request for privacy policy listing endpoint. Each property matches a privacy policy schema field or standard pagination behavior.","required":[]},"IPageIDiscussionboardPrivacyPolicies":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPrivacyPolicies"},"description":"Array of policy entities for the current page."}},"required":["pagination","data"],"description":"Paginated result for privacy policy records. Contains a page object (pagination info) and a list of privacy policy items."},"IDiscussionboardPrivacyPolicies":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this privacy policy version record. Serves as the primary key for lookup and reference."},"version":{"type":"string","description":"Text version identifier (e.g., 'v2024.06'). Used for legal/membership tracking and compliance."},"effective_date":{"type":"string","format":"date-time","description":"The date (ISO-8601) on which this policy version becomes effective."},"title":{"type":"string","description":"Short title for the policy for user display, history lists, and audit."},"content":{"type":"string","description":"Full legal text of the policy. Must be complete and persistent for historical audit."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp the record was last updated."}},"required":["id","version","effective_date","title","content","created_at","updated_at"],"description":"A platform privacy policy version record. Contains full history/audit for all user-accepted or current/rescinded policies. Never overwritten—every change results in a new record."},"IDiscussionboardPrivacyPolicies.ICreate":{"type":"object","properties":{"version":{"type":"string","description":"Policy version string for tracking/audit (e.g., 'v2024.06')."},"effective_date":{"type":"string","format":"date-time","description":"When the policy should become effective (ISO 8601 date)."},"title":{"type":"string","description":"Short title for the new privacy policy."},"content":{"type":"string","description":"Full legal text content of the new privacy policy."}},"required":["version","effective_date","title","content"],"description":"Request structure for creating a new privacy policy version. Used by admin/legal staff to add/rollout a new policy. All required fields, mapped to the privacy policy entity."},"IDiscussionboardPrivacyPolicies.IUpdate":{"type":"object","properties":{"version":{"type":"string","description":"Edited policy version string (rare, only to correct admin entry errors)."},"effective_date":{"type":"string","format":"date-time","description":"Updated date at which the policy becomes effective."},"title":{"type":"string","description":"Title correction/update."},"content":{"type":"string","description":"Revised or corrected full policy content."}},"required":["version","effective_date","title","content"],"description":"Request structure for updating a privacy policy record by primary key. Only accepts schema fields; overwrites fields as a new legal record."},"IDiscussionboardDataErasureRequests.IRequest":{"type":"object","properties":{"status":{"type":"string","description":"Filter/search by request status (e.g., 'pending','approved','denied','completed')."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter/search by member initiating the erasure request."},"requested_at":{"type":"string","format":"date-time","description":"Search filter for requests created at a certain time."},"reviewed_at":{"type":"string","format":"date-time","description":"Filter by admin review timestamp."},"completed_at":{"type":"string","format":"date-time","description":"Filter by erasure completion timestamp."},"admin_remark":{"type":"string","description":"Search filter for admin remarks."},"page":{"type":"integer","minimum":1,"description":"Pagination page number."},"limit":{"type":"integer","minimum":1,"description":"Max # of requests in this page."}},"description":"Paginated filter/search request for privacy erasure request records; supports filtering by status, member, and key workflow timestamps.","required":[]},"IPageIDiscussionboardDataErasureRequests":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardDataErasureRequests"},"description":"List of privacy data erasure requests on this page."}},"required":["pagination","data"],"description":"Paginated result for members' data erasure requests, containing standard page info and a list of erasure request items."},"IDiscussionboardDataErasureRequests":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/unique id for the erasure request."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Refers to the member initiating the erasure request."},"status":{"type":"string","description":"Current status of the request (e.g., 'pending', 'approved', 'denied', 'completed'). Status management is handled by admins or workflow automation."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp at which the request was created. Key for regulatory compliance."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp the request was reviewed by an admin or moderator. Null if not yet reviewed."},{"type":"null"}],"description":"Timestamp the request was reviewed by an admin or moderator. Null if not yet reviewed."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp the request is marked complete or rejected. Null if not yet finalized."},{"type":"null"}],"description":"Timestamp the request is marked complete or rejected. Null if not yet finalized."},"admin_remark":{"oneOf":[{"type":"string","description":"Optional admin/moderator note; describes why denied/approved or describes processing details."},{"type":"null"}],"description":"Optional admin/moderator note; describes why denied/approved or describes processing details."}},"required":["id","discussionboard_member_id","status","requested_at"],"description":"A user's request for account/data erasure from the discussion board platform. Used for audit, GDPR/CCPA and privacy compliance, and management reporting. Soft/hard delete status and timestamps are included."},"IDiscussionboardDataErasureRequest.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member requesting data erasure. Must be authenticated and unique for open erasure requests."}},"required":["discussionboard_member_id"],"description":"Request body for submitting a new data erasure request for the member. Used by members to invoke regulatory/consent flows."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of records per page."},"records":{"type":"integer","format":"uint32","description":"Total records returned/available for this query."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages available according to this query."}},"required":["current","limit","records","pages"],"description":"Pagination information for paginated responses according to the standard IPage structure."}}},"completed":120,"total":206,"step":0,"created_at":"2025-07-24T19:15:24.007Z"},"tokenUsage":{"facade":{"aggregate":{"total":1915189,"input":{"total":1818049,"cached":103168},"output":{"total":97140,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1915189,"input":{"total":1818049,"cached":103168},"output":{"total":97140,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1915189,"input":{"total":1818049,"cached":103168},"output":{"total":97140,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1915189,"input":{"total":1818049,"cached":103168},"output":{"total":97140,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 설정 식별자입니다.\n\n모든 per-feature/area 설정 레코드의 기본 키로, 각 행을 고유하게 식별합니다. 이는 검색, 수정, 삭제 시 주 식별자로 활용됩니다."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"설정이 적용되는 엔터티 혹은 영역의 식별자입니다. null인 경우 전체 시스템(글로벌 설정) 적용을 의미합니다.\n\n채널, 섹션, 특정 기능 단위로 설정이 있으나, 해당 필드가 null일 경우 전체 시스템에 적용됩니다. 관계형 데이터베이스에서 외래키 제약을 두지 않고, 서비스 로직에서 참조됩니다."},{"type":"null","format":"uuid","description":"설정이 적용되는 엔터티 혹은 영역의 식별자입니다. null인 경우 전체 시스템(글로벌 설정) 적용을 의미합니다.\n\n채널, 섹션, 특정 기능 단위로 설정이 있으나, 해당 필드가 null일 경우 전체 시스템에 적용됩니다. 관계형 데이터베이스에서 외래키 제약을 두지 않고, 서비스 로직에서 참조됩니다."}],"description":"설정이 적용되는 엔터티 혹은 영역의 식별자입니다. null인 경우 전체 시스템(글로벌 설정) 적용을 의미합니다.\n\n채널, 섹션, 특정 기능 단위로 설정이 있으나, 해당 필드가 null일 경우 전체 시스템에 적용됩니다. 관계형 데이터베이스에서 외래키 제약을 두지 않고, 서비스 로직에서 참조됩니다."},"scope_type":{"type":"string","description":"이 설정이 적용되는 영역의 타입입니다. 예시: 'channel', 'section', 'feature_flag'.\n\n비즈니스 영역에서 context(문맥) 또는 범위를 구분할 때 사용하며, 관리 UI/라우팅에서도 쓰입니다."},"key":{"type":"string","description":"설정의 키(키워드)입니다.\n\n예: 'moderation_policy'. 개별 토글 또는 옵션의 이름이자 식별자로서, 글로벌/로컬에서 연관된 설정 구분에 사용됩니다."},"value":{"oneOf":[{"type":"string","description":"설정 값입니다. 플래그/문자/한계값 등 다양하게 사용하며, 미설정 혹은 선택적 옵션일 경우 null로 둘 수 있습니다.\n\n비즈니스 로직에 따라 동적으로 값을 해석하게 되며, 서비스상에서는 문자열로만 저장·관리합니다."},{"type":"null","description":"설정 값입니다. 플래그/문자/한계값 등 다양하게 사용하며, 미설정 혹은 선택적 옵션일 경우 null로 둘 수 있습니다.\n\n비즈니스 로직에 따라 동적으로 값을 해석하게 되며, 서비스상에서는 문자열로만 저장·관리합니다."}],"description":"설정 값입니다. 플래그/문자/한계값 등 다양하게 사용하며, 미설정 혹은 선택적 옵션일 경우 null로 둘 수 있습니다.\n\n비즈니스 로직에 따라 동적으로 값을 해석하게 되며, 서비스상에서는 문자열로만 저장·관리합니다."},"description":{"oneOf":[{"type":"string","description":"관리자 및 내부용 설명 메모입니다.\n\n관리자 UI나 감사 로그에서 참고 목적으로 쓰이는 부가 설명입니다. nullable이며, 주석이나 사용예 기입에 활용됩니다."},{"type":"null","description":"관리자 및 내부용 설명 메모입니다.\n\n관리자 UI나 감사 로그에서 참고 목적으로 쓰이는 부가 설명입니다. nullable이며, 주석이나 사용예 기입에 활용됩니다."}],"description":"관리자 및 내부용 설명 메모입니다.\n\n관리자 UI나 감사 로그에서 참고 목적으로 쓰이는 부가 설명입니다. nullable이며, 주석이나 사용예 기입에 활용됩니다."},"created_at":{"type":"string","format":"date-time","description":"설정 행이 생성된 시각(감사·변경 추적용).\n\nRFC 3339 형식의 타임스탬프로 기록됩니다. 시스템 자동 부여됩니다."},"updated_at":{"type":"string","format":"date-time","description":"설정 행이 마지막으로 수정된 시각(감사·변경 추적용).\n\nRFC 3339 형식의 타임스탬프로 기록됩니다. 시스템 자동 부여됩니다."}},"required":["id","scope_type","key","created_at","updated_at"],"description":"discussionboard_settings 테이블에 대한 단일 행 형식입니다.\n\n개별 영역/기능/컨텍스트별로 운영/비즈니스 정책을 담는 설정 레코드로, 완전 원자적 컬럼만 보유합니다. 비즈니스 플래그, 한계값, 정책 코드, 토글 등 운영상 실시간 변경 가능한 옵션을 저장합니다. 데이터 정확성·탄력성을 위해 3NF로 설계되어 중복 없이 단일 값만 유지합니다.\n\n각 속성은 Prisma 스키마의 컬럼 설명(코멘트)와 완전히 일치하며, API 설계에서 필요로 하는 상세 메타정보(타입, nullable, example 등) 역시 반영되어 있습니다. 시스템에서는 채널, 섹션, 기능별 설정 모듈화에 직접 활용합니다."},"IDiscussionboardSetting.ICreate":{"type":"object","properties":{"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"설정 적용 대상의 식별자(채널, 섹션, 기능 등), 글로벌일 경우 null."},{"type":"null","format":"uuid","description":"설정 적용 대상의 식별자(채널, 섹션, 기능 등), 글로벌일 경우 null."}],"description":"설정 적용 대상의 식별자(채널, 섹션, 기능 등), 글로벌일 경우 null."},"scope_type":{"type":"string","description":"설정의 컨텍스트 혹은 범위 영역. 예: 'channel', 'section', 'feature_flag' 등."},"key":{"type":"string","description":"설정의 고유 키값(필수)."},"value":{"oneOf":[{"type":"string","description":"설정값. 비어 있을 경우 null로 전달 가능."},{"type":"null","description":"설정값. 비어 있을 경우 null로 전달 가능."}],"description":"설정값. 비어 있을 경우 null로 전달 가능."},"description":{"oneOf":[{"type":"string","description":"설명 혹은 부가 메모. 선택적, null 가능."},{"type":"null","description":"설명 혹은 부가 메모. 선택적, null 가능."}],"description":"설명 혹은 부가 메모. 선택적, null 가능."}},"required":["scope_type","key"],"description":"discussionboard_settings 테이블에 새로운 설정을 추가할 때 사용하는 요청 DTO입니다.\n\n비즈니스 또는 시스템상의 영역별 정책 추가 시 필요한 필드만 포함하며, created_at/updated_at은 서버에서 자동 생성됩니다.\n\nnull 허용 컬럼에 대해서는 명시적으로 null 지정이 가능해야 합니다."},"IDiscussionboardSetting.IUpdate":{"type":"object","properties":{"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"설정 적용 대상 식별자. null은 글로벌 설정을 의미."},{"type":"null","format":"uuid","description":"설정 적용 대상 식별자. null은 글로벌 설정을 의미."}],"description":"설정 적용 대상 식별자. null은 글로벌 설정을 의미."},"scope_type":{"type":"string","description":"설정 영역의 타입. 변경 목적에 따라 필요 시만 전송."},"key":{"type":"string","description":"설정의 키. 실제로 수정 불가능한 경우가 일반적이나(식별자 역할), API 디자인상 허용 시 명시."},"value":{"oneOf":[{"type":"string","description":"설정값 갱신. 명시적 null도 허용."},{"type":"null","description":"설정값 갱신. 명시적 null도 허용."}],"description":"설정값 갱신. 명시적 null도 허용."},"description":{"oneOf":[{"type":"string","description":"설명 갱신 혹은 메모 추가. null 허용."},{"type":"null","description":"설명 갱신 혹은 메모 추가. null 허용."}],"description":"설명 갱신 혹은 메모 추가. null 허용."}},"description":"discussionboard_settings 테이블의 기존 설정 레코드를 갱신할 때 사용하는 모델입니다.\n\n필드별로 nullable 설정과 타입 변환이 동일하게 반영되며, 수정할 속성만 일부분 보내는 방식(PUT/전체교체 vs PATCH/일부갱신)에 유연하게 대응할 수 있습니다.","required":[]},"IDiscussionboardAuditLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"페이지 번호(1 베이스)"},"limit":{"type":"integer","minimum":1,"description":"페이지 당 결과 수 (기본값 100)"},"action":{"type":"string","description":"이벤트 액션 유형(선택적)."},"actor_id":{"type":"string","format":"uuid","description":"행동 주체 식별자(선택적, UUID)"},"target_id":{"type":"string","format":"uuid","description":"행동 대상 엔터티 식별자(선택적, UUID)"},"created_at_from":{"type":"string","format":"date-time","description":"이벤트 발생시각 하한(선택 가능)"},"created_at_to":{"type":"string","format":"date-time","description":"이벤트 발생시각 상한(선택 가능)"}},"description":"discussionboard_audit_logs에 대한 검색/필터링 및 페이징용 요청 DTO\n\n액션유형, 행위자, 대상, 기간별 조회에 활용하며, page/limit 기본설정 및 선택적 범위검색 기능 제공합니다.","required":[]},"IPageIDiscussionboardAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAuditLog"}}},"required":["pagination","data"],"description":"discussionboard_audit_logs의 페이지네이션 응답용 컨테이너 타입입니다. IPage 구조를 준수하여 결과 목록과 페이지 정보를 포함합니다."},"IDiscussionboardAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"감사로그 개별 식별자(UUID PK)\n\n실제 이벤트 단위로 발생한 행위 단일 로그를 고유하게 식별합니다."},"actor_id":{"type":"string","format":"uuid","description":"행동 주체(실행자, 주로 member 혹은 admin)의 식별자(UUID)."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"행위 대상의 식별자. null은 시스템 전체/글로벌 이벤트를 의미합니다."},{"type":"null","format":"uuid","description":"행위 대상의 식별자. null은 시스템 전체/글로벌 이벤트를 의미합니다."}],"description":"행위 대상의 식별자. null은 시스템 전체/글로벌 이벤트를 의미합니다."},"action":{"type":"string","description":"감사이벤트 유형/분류(예: post_deleted, role_assigned, settings_changed 등)."},"payload":{"oneOf":[{"type":"string","description":"이벤트 관련 JSON 직렬화 상세. 단순 이벤트의 경우 null."},{"type":"null","description":"이벤트 관련 JSON 직렬화 상세. 단순 이벤트의 경우 null."}],"description":"이벤트 관련 JSON 직렬화 상세. 단순 이벤트의 경우 null."},"created_at":{"type":"string","format":"date-time","description":"이벤트 일시(타임스탬프), 항상 존재해야 합니다."}},"required":["id","actor_id","action","created_at"],"description":"discussionboard_audit_logs의 단일 로그 이벤트 엔터티입니다.\n\n권한변경, 중요삭제, 설정변경 등 감사가 필요한 주요 행위 기록 및 감사/포렌식의 근간이 되는 테이블에서 직접 매핑된 타입입니다."},"IDiscussionboardAuditLog.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"행위자(주로 admin, member)의 식별자"},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"행위 대상 식별자. 없는 경우 null"},{"type":"null","format":"uuid","description":"행위 대상 식별자. 없는 경우 null"}],"description":"행위 대상 식별자. 없는 경우 null"},"action":{"type":"string","description":"감사 이벤트 분류/명칭(Action 종류)"},"payload":{"oneOf":[{"type":"string","description":"이벤트 상세, JSON 직렬"},{"type":"null","description":"이벤트 상세, JSON 직렬"}],"description":"이벤트 상세, JSON 직렬"}},"required":["actor_id","action"],"description":"감사로그 신규 기록을 생성하는 요청 DTO\n\n행위자, 이벤트명, 관련 데이터(JSON 문자열/옵션)만 명시적으로 정의, created_at등은 서버에서 자동 생성합니다."},"IDiscussionboardAuditLog.IUpdate":{"type":"object","properties":{"payload":{"oneOf":[{"type":"string","description":"추가/수정될 이벤트 상세(JSON 문자열), 감사관리 목적 시 사용."},{"type":"null","description":"추가/수정될 이벤트 상세(JSON 문자열), 감사관리 목적 시 사용."}],"description":"추가/수정될 이벤트 상세(JSON 문자열), 감사관리 목적 시 사용."}},"description":"감사로그 레코드의 추가 컨텍스트/설명 (payload) 갱신용 모델\n\n이벤트명, 타임스탬프 등은 수정 불가, 추가설명만 저장 가능.","required":[]},"IDiscussionboardMember.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"페이지 번호(1부터 시작)"},"limit":{"type":"integer","minimum":1,"description":"페이지 별 결과 수(기본값 100)"},"role":{"type":"string","description":"멤버의 시스템 역할 (member, moderator, admin 등 필터)"},"is_active":{"type":"boolean","description":"활성/비활성 여부로 필터"},"created_at_from":{"type":"string","format":"date-time","description":"가입일 검색 하한"},"created_at_to":{"type":"string","format":"date-time","description":"가입일 검색 상한"}},"description":"discussionboard_members 회원 정보 페이징/검색용 요청 DTO\n\n역할, 활성여부, 가입기간 필터 등 회원관리 상황을 위한 페이징/검색 조건객체입니다.","required":[]},"IPageIDiscussionboardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMember"}}},"required":["pagination","data"],"description":"discussionboard_members 결과의 페이징 컨테이너 DTO\n\n목록형 API 응답에서 회원 개별 정보(요약 혹은 상세형)와 페이지 정보 전체를 포괄합니다."},"IDiscussionboardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"회원 개별 식별자(UUID). DB PK로 팬아웃."},"username":{"type":"string","description":"고유 유저명(로그인용+표시용 식별자)"},"email":{"type":"string","format":"email","description":"고유 이메일(로그인, 인증 및 알림용)"},"role":{"type":"string","description":"시스템 권한/역할: member, moderator, admin."},"is_active":{"type":"boolean","description":"계정 활성화 여부(true: 정상, false: 정지/일시정지)"},"created_at":{"type":"string","format":"date-time","description":"가입일/생성일시(Audit 용)"},"updated_at":{"type":"string","format":"date-time","description":"레코드 최종 갱신 시각"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Soft delete) 탈퇴처리 시각 또는 null(활성 계정)"},{"type":"null","format":"date-time","description":"(Soft delete) 탈퇴처리 시각 또는 null(활성 계정)"}],"description":"(Soft delete) 탈퇴처리 시각 또는 null(활성 계정)"}},"required":["id","username","email","role","is_active","created_at","updated_at"],"description":"discussionboard_members 테이블의 회원 데이터 단일 행 상세\n\n로그인/인증/회원검색용 기본 정보 + Soft Delete column포함, 권한 및 상태에 따라 플랫폼 주요 기능 액세스를 제어합니다."},"IDiscussionboardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"회원의 유저명(고유, 필수, 중복불가 제한)"},"email":{"type":"string","format":"email","description":"회원 이메일 주소(로그인, 알림, 인증 등)"},"hashed_password":{"type":"string","description":"비밀번호 해시(실제 비밀번호 X, 암호화 저장)"},"role":{"type":"string","description":"가입시 부여할 시스템 권한: member, moderator, admin"},"is_active":{"type":"boolean","description":"가입시 활성화 상태 직접 지정 필요"}},"required":["username","email","hashed_password","role","is_active"],"description":"회원 신규 가입/계정 생성 시 사용하는 DTO\n\n유저명, 이메일, 해시비밀번호, 역할, 활성상태만 명시적으로 입력하며, DB에서 id/타임스탬프 등은 자동 생성됩니다."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"현재 페이지 번호(1부터 시작)."},"limit":{"type":"integer","format":"uint32","description":"페이지 별 레코드 개수(default=100)."},"records":{"type":"integer","format":"uint32","description":"전체 검색 결과(레코드) 수."},"pages":{"type":"integer","format":"uint32","description":"전체 페이지 수(ceil(records/limit))"}},"required":["current","limit","records","pages"],"description":"페이지네이션 정보를 담는 표준 타입.\n\n목록 데이터와 반드시 같이 사양됩니다."}}},"completed":132,"total":206,"step":0,"created_at":"2025-07-24T19:15:28.288Z"},"tokenUsage":{"facade":{"aggregate":{"total":2016803,"input":{"total":1916345,"cached":103168},"output":{"total":100458,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2016803,"input":{"total":1916345,"cached":103168},"output":{"total":100458,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2016803,"input":{"total":1916345,"cached":103168},"output":{"total":100458,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2016803,"input":{"total":1916345,"cached":103168},"output":{"total":100458,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardThreads.ICreate":{"type":"object","properties":{"board_id":{"type":"string","format":"uuid","description":"The unique identifier for the board in which this thread is being created. Must reference an existing discussionboard_boards row. Required for thread placement and board-based filtering.\n\nReferenced from the discussionboard_threads Prisma schema as 'board_id'."},"author_member_id":{"type":"string","format":"uuid","description":"The unique user/member UUID who is the creator/author of this thread. Required for authorship, audit, and permissions. Must reference a row in discussionboard_members.\n\nReferenced directly from discussionboard_threads.author_member_id."},"title":{"type":"string","description":"The main subject/title of the thread. Used for listing, searching, navigation, and user readability. Example: 'Global Trade Policy in 2025'. Cannot be empty. The 'title' field is atomic and not nullable in the schema.\n\nDirect from discussionboard_threads.title."},"body":{"oneOf":[{"type":"string","description":"Optional opening content or description for the thread. Supports longer conversation context or introductory summaries. May be omitted if not needed; nullable in the schema.\n\nFrom discussionboard_threads.body."},{"type":"null","description":"Optional opening content or description for the thread. Supports longer conversation context or introductory summaries. May be omitted if not needed; nullable in the schema.\n\nFrom discussionboard_threads.body."}],"description":"Optional opening content or description for the thread. Supports longer conversation context or introductory summaries. May be omitted if not needed; nullable in the schema.\n\nFrom discussionboard_threads.body."}},"required":["board_id","author_member_id","title"],"description":"Request body for creating a new discussion thread instance. All fields map directly to the columns present in the discussionboard_threads Prisma model. Used in POST /discussionboard/threads. Provides the root for new discussions under a board, authored by a member. The business context aligns with user-generated forum discussions and initial topic submission."},"IDiscussionboardThreads.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"The updated subject/title line for the thread. Used to rename threads and improve discoverability. As in the discussionboard_threads schema, title is not nullable and is required for update if specified."},"body":{"oneOf":[{"type":"string","description":"Changed or restored text for the thread body. Supports empty/null for threads where only title is used. Represents thread context (see schema body field)."},{"type":"null","description":"Changed or restored text for the thread body. Supports empty/null for threads where only title is used. Represents thread context (see schema body field)."}],"description":"Changed or restored text for the thread body. Supports empty/null for threads where only title is used. Represents thread context (see schema body field)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp to set soft-delete flag. Setting this to the current datetime marks the thread as deleted (soft-deleted); setting to null restores it. Used in moderation/restore flows. Directly relates to discussionboard_threads.deleted_at."},{"type":"null","format":"date-time","description":"Timestamp to set soft-delete flag. Setting this to the current datetime marks the thread as deleted (soft-deleted); setting to null restores it. Used in moderation/restore flows. Directly relates to discussionboard_threads.deleted_at."}],"description":"Timestamp to set soft-delete flag. Setting this to the current datetime marks the thread as deleted (soft-deleted); setting to null restores it. Used in moderation/restore flows. Directly relates to discussionboard_threads.deleted_at."}},"required":[],"description":"Update body for an existing discussion thread. Can update title, body, and/or set the soft-deletion marker deleted_at. All fields correspond to discussionboard_threads Prisma schema columns. Used in PUT /discussionboard/threads/{id}. Business context includes thread editing, moderation, or restoration actions."},"ISoftDeleteConfirmation":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique ID of the thread affected by this soft delete operation. Returned from the original thread id parameter. Required for tracking and business context."},"soft_deleted":{"type":"boolean","description":"Indicates whether the thread is now marked as soft-deleted (true if the operation succeeded and deleted_at was set), or false if not. Used for UI display and audit."}},"required":["id","soft_deleted"],"description":"Confirmation object indicating the result of a soft delete action on a discussion thread. Used as the standard return for /threads/{id} DELETE. All fields correspond directly to API workflow and schema references."},"IDiscussionboardThreadSnapshots.IRequest":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"The thread id for which snapshots are queried. Used to filter or group snapshots for a specific thread, as referenced by discussionboard_thread_snapshots.thread_id."},"actor_id":{"type":"string","format":"uuid","description":"Optional filter for the user/member who edited/created the snapshot. References discussionboard_thread_snapshots.actor_id."},"title":{"type":"string","description":"Optional search filter by snapshot title content, supporting substring/fulltext search as enabled in API. Used for auditing edits by title."},"created_at_from":{"type":"string","format":"date-time","description":"Inclusive lower bound for datetime filtering on snapshot creation (ISO-8601), matching discussionboard_thread_snapshots.created_at."},"created_at_to":{"type":"string","format":"date-time","description":"Inclusive upper bound for datetime filtering on snapshot creation (ISO-8601)."},"page":{"type":"integer","minimum":1,"description":"Requested page number for pagination. Starts at 1. Default may be set by API."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Page size (number of snapshots to return). Capped per API limits. Default 20-50."}},"required":["thread_id"],"description":"Request/search body for paginated listing or advanced searching of discussion thread snapshots. Filters by thread, actor, title, created_at date window, and supports pagination. All fields align to those defined in discussionboard_thread_snapshots and standard pagination conventions. Used in PATCH /discussionboard/threadSnapshots."},"IPageIDiscussionboardThreadSnapshots":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreadSnapshots"},"description":"The actual array of snapshot records returned in this page. Each is a complete thread snapshot object by schema."}},"required":["pagination","data"],"description":"Response container for paginated thread snapshot search results. Follows the IPage<T> pattern, substituting the T with IDiscussionboardThreadSnapshots. Used as output from /threadSnapshots list/search endpoints. The 'pagination' field describes the current paging state."},"IDiscussionboardThreadSnapshots":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID of this thread snapshot row. Primary key in discussionboard_thread_snapshots. Used for referencing and linking audit trails."},"thread_id":{"type":"string","format":"uuid","description":"Foreign key to the thread this snapshot belongs to. Always required. References discussionboard_threads.id."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Nullable. UUID of member/mod/admin who created this snapshot (if available). If system-generated, may be null. Direct from discussionboard_thread_snapshots.actor_id."},{"type":"null","format":"uuid","description":"Nullable. UUID of member/mod/admin who created this snapshot (if available). If system-generated, may be null. Direct from discussionboard_thread_snapshots.actor_id."}],"description":"Nullable. UUID of member/mod/admin who created this snapshot (if available). If system-generated, may be null. Direct from discussionboard_thread_snapshots.actor_id."},"title":{"type":"string","description":"The title as stored at the time of this version. Snapshot preserves title even as live thread changes. Non-nullable. From schema's title field."},"body":{"oneOf":[{"type":"string","description":"Body/content as of this thread version. Nullable, matching the original thread's schema."},{"type":"null","description":"Body/content as of this thread version. Nullable, matching the original thread's schema."}],"description":"Body/content as of this thread version. Nullable, matching the original thread's schema."},"reason":{"oneOf":[{"type":"string","description":"Moderator/user/system comment on why this version/change was made. Nullable, for audit."},{"type":"null","description":"Moderator/user/system comment on why this version/change was made. Nullable, for audit."}],"description":"Moderator/user/system comment on why this version/change was made. Nullable, for audit."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this version snapshot was created. Used for audit, display, and rollback. Always required. As from schema."}},"required":["id","thread_id","title","created_at"],"description":"Schema for a version snapshot of a discussion thread. Captures thread fields (title, body) and reasons for edits/moderation at a point in time. Every field aligns exactly with columns defined in discussionboard_thread_snapshots. Used to restore, audit, or view thread version history."},"IDiscussionboardThreadSnapshots.ICreate":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"Target thread uuid for this snapshot. References discussionboard_threads.id."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Actor performing the change (nullable for system/self-edits)."},{"type":"null","format":"uuid","description":"Actor performing the change (nullable for system/self-edits)."}],"description":"Actor performing the change (nullable for system/self-edits)."},"title":{"type":"string","description":"Title of the thread at this version, per snapshot."},"body":{"oneOf":[{"type":"string","description":"Body text at this thread version."},{"type":"null","description":"Body text at this thread version."}],"description":"Body text at this thread version."},"reason":{"oneOf":[{"type":"string","description":"Optional comment/reason for the snapshot. For audit trails or moderation tracking."},{"type":"null","description":"Optional comment/reason for the snapshot. For audit trails or moderation tracking."}],"description":"Optional comment/reason for the snapshot. For audit trails or moderation tracking."}},"required":["thread_id","title"],"description":"Request body for creating a new thread version snapshot. All fields (except required thread_id, title) match discussionboard_thread_snapshots columns. Used in POST /discussionboard/threadSnapshots."},"IDiscussionboardThreadSnapshots.IUpdate":{"type":"object","properties":{"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally correct/change the actor field (for audit only)."},{"type":"null","format":"uuid","description":"Optionally correct/change the actor field (for audit only)."}],"description":"Optionally correct/change the actor field (for audit only)."},"title":{"type":"string","description":"Update/correct title at this version. Non-nullable."},"body":{"oneOf":[{"type":"string","description":"Optional updated body at this snapshot version."},{"type":"null","description":"Optional updated body at this snapshot version."}],"description":"Optional updated body at this snapshot version."},"reason":{"oneOf":[{"type":"string","description":"Fix/update edit reason for this version."},{"type":"null","description":"Fix/update edit reason for this version."}],"description":"Fix/update edit reason for this version."}},"required":[],"description":"Update payload for a thread snapshot, supporting audit corrections of actor, title, body, or reason. All fields correspond to schema columns in discussionboard_thread_snapshots. Used in PUT /threadSnapshots/{id}."},"IDiscussionboardThreadTag.IRequest":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"UUID of thread for which to list tags/assignments. Main filter; always required. Maps to discussionboard_thread_tags.thread_id."},"assigned_at_from":{"type":"string","format":"date-time","description":"Inclusive lower date bound for filtering assignment time (ISO-8601, UTC)."},"assigned_at_to":{"type":"string","format":"date-time","description":"Inclusive upper date bound for assignment time."},"removed_at_null_only":{"type":"boolean","description":"If true, restricts result to currently-active (not yet removed) tag assignments only. Controls analytics vs audit query mode."},"page":{"type":"integer","minimum":1,"description":"Results page number (pagination, default 1)."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Max results per page. API may cap value (default 20-100)."}},"required":["thread_id"],"description":"Search and filter request for retrieving thread tag assignment records (discussionboard_thread_tags). Filters by thread, assignment time window, removal state, and supports pagination. Used with PATCH /threadTags."},"IPageDiscussionboardThreadTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreadTag"},"description":"Current page records; each is a tag assignment row for a thread."}},"required":["pagination","data"],"description":"Paged response containing thread tag assignment records (discussionboard_thread_tags) and pagination data. Follows IPage<T> pattern."},"IDiscussionboardThreadTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique assignment id (PK)."},"thread_id":{"type":"string","format":"uuid","description":"FK to discussionboard_threads.id (thread receiving the tag)."},"assigned_at":{"type":"string","format":"date-time","description":"Datetime when the tag was assigned to the thread. Required, non-nullable."},"removed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when tag was removed/unassigned. Null if tag is currently active/assigned. Audit and analytics use this for version windowing."},{"type":"null","format":"date-time","description":"Datetime when tag was removed/unassigned. Null if tag is currently active/assigned. Audit and analytics use this for version windowing."}],"description":"Datetime when tag was removed/unassigned. Null if tag is currently active/assigned. Audit and analytics use this for version windowing."}},"required":["id","thread_id","assigned_at"],"description":"Schema describing a thread tag assignment event for a thread (discussionboard_thread_tags). Used to filter by tags, audit timeline, or manage search."},"IDiscussionboardThreadTag.ICreate":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"Foreign key identifying which thread receives the tag assignment. References discussionboard_threads.id."},"assigned_at":{"type":"string","format":"date-time","description":"Datetime (UTC/ISO-8601). When the tag assignment took place. Often set to now by the API, but can be backdated for audit population workflows."}},"required":["thread_id","assigned_at"],"description":"Payload for creating a thread tag assignment. Defines target thread and assignment time. The deleted_at/removal must be managed by PATCH/PUT on update if tag is unassigned. Used for POST /threadTags."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":1,"description":"Page number currently returned."},"limit":{"type":"integer","minimum":1,"description":"Limit (max items per page). Default may be set in API."},"records":{"type":"integer","minimum":0,"description":"Total record count across all pages."},"pages":{"type":"integer","minimum":1,"description":"Total number of available pages (ceil(records/limit))."}},"required":["current","limit","records","pages"],"description":"Pagination metadata for all IPage<T> container responses, following standard platform API contracts."}}},"completed":144,"total":206,"step":0,"created_at":"2025-07-24T19:15:29.232Z"},"tokenUsage":{"facade":{"aggregate":{"total":2117820,"input":{"total":2014642,"cached":103168},"output":{"total":103178,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2117820,"input":{"total":2014642,"cached":103168},"output":{"total":103178,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2117820,"input":{"total":2014642,"cached":103168},"output":{"total":103178,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2117820,"input":{"total":2014642,"cached":103168},"output":{"total":103178,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardCommentSnapshot.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Comment content at the time of this version.\n\nSourced from the 'body' column of discussionboard_comment_snapshots. Immutable snapshot of the comment at the time of edit. Used for moderation, rollbacks, and audit reviews."},"version":{"type":"integer","description":"The monotonic version number for this comment snapshot.\n\nFrom the 'version' column in discussionboard_comment_snapshots. Each update increments this value to track edit history and enable accurate rollback."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Point-in-time timestamp when this snapshot was created.\n\nFrom the 'snapshot_created_at' column in discussionboard_comment_snapshots. Audit/compliance support. Should be the time at which the snapshot was persisted, not necessarily the update request time."}},"required":["body","version","snapshot_created_at"],"description":"Update payload for a comment snapshot in discussionboard_comment_snapshots.\n\nAllows updating the comment text and its historical version metadata, strictly mapping to the schema's fields (body, version, snapshot_created_at). Used for correcting or amending audit history under admin or moderator workflows."},"IDiscussionboardCommentVote.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter: Which comment the vote was cast on.\n\nColumn 'discussionboard_comment_id'. Enables retrieval by target comment in upvote/downvote analytics."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter: Who cast the vote.\n\nColumn 'discussionboard_member_id'. For per-member voting analytics, user history, moderation investigation."},"vote_type":{"type":"string","description":"Vote value filter. Example values: 'up', 'down'. For analytics/audit search only.\n\nValues from the 'vote_type' field, usually 'up' or 'down'. String-typed for flexibility. Not an enum at schema level."},"created_at":{"type":"string","format":"date-time","description":"Range/search filter: vote creation time.\n\nFrom the 'created_at' column. Used for timeline analytics or anti-abuse heuristics."},"updated_at":{"type":"string","format":"date-time","description":"Optional: last time this vote was modified (e.g., toggled).\n\nFrom the 'updated_at' column for audit."},"page":{"type":"integer","description":"Pagination: requested page number.\n\nStandard OpenAPI pagination field. Not in DB schema but always mapped as query param."},"limit":{"type":"integer","description":"Pagination: number of results per page.\n\nStandard OpenAPI pagination field. Not in DB schema but always mapped as query param."}},"description":"Request object for searching or querying comment votes in discussionboard_comment_votes.\n\nAll properties map to schema fields except pagination, which is system/standard. Used for analytics, moderation review, or vote behavior statistics.","required":[]},"IPageDiscussionboardCommentVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentVote"},"description":"Paged list of comment vote entities.\n\nEach item is a normalized record from the discussionboard_comment_votes table, fully documenting who voted, what, and when."}},"required":["pagination","data"],"description":"Paginated result set for comment votes from discussionboard_comment_votes.\n\nStandardized page wrapper for returning search/listing results for audit/analytics."},"IDiscussionboardCommentVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key ID for this comment vote entry.\n\n'discussionboard_comment_votes.id'. Unique per record."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment's unique ID being voted on.\n\nFrom 'discussionboard_comment_id'. Atomic at per-vote granularity; foreign key to comments."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Voting member's ID.\n\nFrom 'discussionboard_member_id'. Refers to discussionboard_members entry."},"vote_type":{"type":"string","description":"Vote direction for comment. Example: 'up' or 'down'.\n\nFrom 'vote_type'. Not an enum at schema level; frontend/application can enforce allowed values."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was cast.\n\nColumn: 'created_at'. For error recovery/audit/history."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for changes to this vote record (e.g., toggling vote).\n\nColumn: 'updated_at'. Nullable: if never updated, remains null."},{"type":"null"}],"description":"Timestamp for changes to this vote record (e.g., toggling vote).\n\nColumn: 'updated_at'. Nullable: if never updated, remains null."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","vote_type","created_at"],"description":"Atomic record representing an upvote or downvote for a comment, as stored in discussionboard_comment_votes.\n\nUsed for analytics, anti-abuse, and moderation workflow."},"IDiscussionboardCommentVote.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"ID of the target comment to be voted on.\n\nSame as field in vote record."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's unique ID casting the vote.\n\nEnforces one vote per comment/member."},"vote_type":{"type":"string","description":"Vote value: 'up', 'down', or another string if extended later.\n\nMapped directly to the database's 'vote_type' column."}},"required":["discussionboard_comment_id","discussionboard_member_id","vote_type"],"description":"Creation request for a single comment vote in discussionboard_comment_votes.\n\nAll properties are atomic and must pass uniqueness (per comment/member)."},"IDiscussionboardCommentVote.IUpdate":{"type":"object","properties":{"vote_type":{"type":"string","description":"Updated vote direction value.\n\nSame semantics/constraints as in ICreate."}},"required":["vote_type"],"description":"Update payload for changing a vote in discussionboard_comment_votes.\n\nOnly the vote_type may be updated; all other fields must remain unchanged for audit/correctness."},"IDiscussionboardCommentReport.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter: Which comment is being reported.\n\nEnables per-comment moderation or audit dashboard (FK from id)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter: Who submitted the report (reporting member id).\n\nFor tracking/report escalation; matches 'discussionboard_member_id' in the table."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Filter: Report type being searched (e.g., spam, abuse).\n\nFK to report types registry; required for triage/filtering."},"reason":{"type":"string","description":"Filter: User-supplied explanation or reason for the report.\n\nSearchable field for text-matching or prioritization."},"created_at":{"type":"string","format":"date-time","description":"Filter by when the report was submitted.\n\nAudit/logging analysis: enables date-range search, escalation triage, or SLA metrics."},"page":{"type":"integer","description":"Pagination: requested page number."},"limit":{"type":"integer","description":"Pagination: number of results per page."}},"description":"Request object for searching/filtering comment report records in discussionboard_comment_reports.","required":[]},"IPageDiscussionboardCommentReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentReport"},"description":"Result set for comment reports.\n\nEach entry is an atomic report event for moderation triage/audit."}},"required":["pagination","data"],"description":"Paginated list/response for discussionboard_comment_reports. Used for moderation dashboards and compliance workflows."},"IDiscussionboardCommentReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the comment report row.\n\nField 'id' in discussionboard_comment_reports. Unique event per report."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment's unique ID (reported entity).\n\nForeign key to comments. Enables per-thread triage and audit/review."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of member filing the report.\n\nFK to discussionboard_members."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Type/category of the report, referencing the master report types table.\n\nFK to report types, enables filtering/summarization."},"reason":{"type":"string","description":"User explanation text for why the comment is being reported.\n\nMandatory (not nullable): Required for explainability, transparency, and downstream moderation documentation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this report was submitted.\n\nFrom schema: enables SLA tracking, appeal workflows, and audit."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason","created_at"],"description":"Atomic reporting event for a moderation case against a comment. Used for audit, triage, and compliance reviews as per discussionboard_comment_reports."},"Idiscussionboard_comment_reports.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment id to be reported.\n\nFrom schema: 'discussionboard_comment_id' FK."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member id filing the report.\n\nReferences 'discussionboard_member_id' FK."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Type/category of the report.\n\nFK to type registry. Required by moderation protocol."},"reason":{"type":"string","description":"Freeform, non-null explanation for this report.\n\nEnd-user must supply specific reason or context; transparency requirement."}},"required":["discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason"],"description":"Request to create a new comment report; references one comment/member/report-type, and requires explicit non-null reason. Used for moderation business logic."},"Idiscussionboard_comment_reports":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the comment report row.\n\nSchema: 'id' in discussionboard_comment_reports. Unique atomic event per report."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment's unique ID (reported entity).\n\nSchema: discussionboard_comment_id."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of member filing the report.\n\nSchema: discussionboard_member_id. "},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Type/category of reported incident. FK to master types table.\n\nSchema: discussionboard_report_type_id."},"reason":{"type":"string","description":"User explanation text for reporting - mandatory.\n\nSchema: reason."},"created_at":{"type":"string","format":"date-time","description":"Report creation timestamp. Schema: created_at."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason","created_at"],"description":"Atomic comment report record from discussionboard_comment_reports. Used in moderation, appeal, and triage dashboards."},"Idiscussionboard_comment_reports.IUpdate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"(Optional) Target comment id, only if changing the reference. FK to comments."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) Reporting member id, only if amending source or correcting FK reference."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"(Optional) Report type - setting this modifies the classification of the reported issue."},"reason":{"type":"string","description":"(Optional) Updated user explanation or rationale for this report."}},"description":"Payload for update to an existing comment report. All fields optional and may be omitted when not changing. Only schema-defined fields allowed.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Max records per page."},"records":{"type":"integer","description":"Total records count."},"pages":{"type":"integer","description":"Total number of pages."}},"required":["current","limit","records","pages"],"description":"Pagination metadata used for paged result containers throughout the OpenAPI spec.\n\nTracks page number, page size, total count, and page count."}}},"completed":156,"total":206,"step":0,"created_at":"2025-07-24T19:15:31.867Z"},"tokenUsage":{"facade":{"aggregate":{"total":2218902,"input":{"total":2112941,"cached":103168},"output":{"total":105961,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2218902,"input":{"total":2112941,"cached":103168},"output":{"total":105961,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2218902,"input":{"total":2112941,"cached":103168},"output":{"total":105961,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2218902,"input":{"total":2112941,"cached":103168},"output":{"total":105961,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for each moderation action in the system audit trail. Atomic per moderation event.\n\nReferences the 'id' column of the discussionboard_moderation_actions table in the Prisma schema."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the originating report if this moderation action was triggered by a user report. Nullable for proactive/patrol actions.\n\nReferences 'report_id' column, linked to discussionboard_reports.id."},{"type":"null","format":"uuid","description":"Reference to the originating report if this moderation action was triggered by a user report. Nullable for proactive/patrol actions.\n\nReferences 'report_id' column, linked to discussionboard_reports.id."}],"description":"Reference to the originating report if this moderation action was triggered by a user report. Nullable for proactive/patrol actions.\n\nReferences 'report_id' column, linked to discussionboard_reports.id."},"acting_moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator or admin who performed this action. Required for audit and accountability. FK to moderator/admin record.\n\nReferences 'acting_moderator_id' in discussionboard_moderation_actions."},"target_object_id":{"type":"string","format":"uuid","description":"ID of the object being moderated (post, comment, member, etc). Atomic identifier.\n\nReferences 'target_object_id' column of the schema."},"target_object_type":{"type":"string","description":"Type of object being moderated (e.g., 'post', 'comment', 'member', 'board'). String marker for context and routing. Not an enum, but predictable values are expected. Atomic per moderation event.\n\nReferences 'target_object_type' in schema."},"action_type":{"type":"string","description":"Type of moderation action taken (e.g., 'warn', 'edit', 'delete', 'ban', 'lock', 'pin'). Used for analytics filtering. Atomic action classification.\n\nReferences 'action_type' in schema."},"rationale":{"type":"string","description":"Explanation and notes justifying the action. Documents behavior for audit transparency.\n\nMatches 'rationale' column."},"actioned_at":{"type":"string","format":"date-time","description":"Timestamp of when the action was performed (ISO 8601 format, UTC recommended). Required for compliance.\n\nMatches 'actioned_at' column of the schema."}},"required":["id","acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"System moderation action record.\n\nRepresents an atomic moderation event (edit, delete, warn, ban, etc.) as captured in the audit log. Every action is linked to the actor, target, action rationale, and relevant context, supporting compliance and full auditability. Structure exactly matches the Prisma table discussionboard_moderation_actions.\n\nModeration actions are critical for ensuring transparency, supporting member appeals, and integrating with analytic workflows."},"IDiscussionboardModerationAction.ICreate":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to a user report if the action is triggered from an existing report. Nullable for proactive admin/moderator action.\n\nReferences 'report_id' FK (nullable)."},{"type":"null","format":"uuid","description":"Reference to a user report if the action is triggered from an existing report. Nullable for proactive admin/moderator action.\n\nReferences 'report_id' FK (nullable)."}],"description":"Reference to a user report if the action is triggered from an existing report. Nullable for proactive admin/moderator action.\n\nReferences 'report_id' FK (nullable)."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin ID performing the action. Required for audit trace and accountability."},"target_object_id":{"type":"string","format":"uuid","description":"ID of object (post, comment, member, etc) being moderated. References the target of the action."},"target_object_type":{"type":"string","description":"Type/classification of moderated object, e.g., 'post', 'comment', 'member'. Not an enum, free string as in moderation workflow."},"action_type":{"type":"string","description":"Type of moderation action (e.g., 'warn', 'edit', 'delete', 'ban', 'lock', etc). Business context must define expected values. Free string, not scoped as enum."},"rationale":{"type":"string","description":"Human-readable explanation/reason for taking this moderation action. Critical for audit trail and member appeals."},"actioned_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC recommended) when moderation action occurred."}},"required":["acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"Payload for creating a moderation action record.\n\nSupports audit requirements, complaint handling, moderation traceability, and platform governance. Maps to the discussionboard_moderation_actions Prisma model for creation endpoints. All properties reflect atomic moderation actions by a specific actor, relating to a specific object with audit timestamps."},"IDiscussionboardModerationAction.IUpdate":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update reference to originating report. Set or unset (null) as compliant with moderation update rules.\n\nPrisma: discussionboard_moderation_actions.report_id"},{"type":"null","format":"uuid","description":"Update reference to originating report. Set or unset (null) as compliant with moderation update rules.\n\nPrisma: discussionboard_moderation_actions.report_id"}],"description":"Update reference to originating report. Set or unset (null) as compliant with moderation update rules.\n\nPrisma: discussionboard_moderation_actions.report_id"},"acting_moderator_id":{"type":"string","format":"uuid","description":"ID of moderator/admin performing the refinement/correction to this action assignment."},"target_object_id":{"type":"string","format":"uuid","description":"Allows re-linking moderation action to a different object, e.g., in audit corrections. Must be atomic/unique.\n\nPrisma: .target_object_id"},"target_object_type":{"type":"string","description":"Type/classification of moderated object. For rare audit corrections/rectifications. Prisma: .target_object_type"},"action_type":{"type":"string","description":"Type/label of moderation action. Allows correction for audit. Prisma: .action_type"},"rationale":{"type":"string","description":"Explanation for the moderation action, or correction/clarification added later for audit context. Prisma: .rationale"},"actioned_at":{"type":"string","format":"date-time","description":"Update timestamp (ISO 8601). Used for correcting/modifying audit records if required. Prisma: .actioned_at"}},"required":["acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"Update structure for moderation action audit record.\n\nAllows for corrections or appended rationale in moderation/audit logs. All updated fields must map directly to discussionboard_moderation_actions schema. Used for rare compliance or forensic review corrections."},"IDiscussionboardBan.IRequest":{"type":"object","properties":{"banned_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for ban records by target member id (nullable, optional)"},{"type":"null","format":"uuid","description":"Filter for ban records by target member id (nullable, optional)"}],"description":"Filter for ban records by target member id (nullable, optional)"},"acting_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for bans issued by this moderator/admin (nullable, optional)"},{"type":"null","format":"uuid","description":"Filter for bans issued by this moderator/admin (nullable, optional)"}],"description":"Filter for bans issued by this moderator/admin (nullable, optional)"},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by originating report id (nullable, optional)"},{"type":"null","format":"uuid","description":"Filter by originating report id (nullable, optional)"}],"description":"Filter by originating report id (nullable, optional)"},"reason":{"oneOf":[{"type":"string","description":"Match ban rationale/reason substring, if provided"},{"type":"null","description":"Match ban rationale/reason substring, if provided"}],"description":"Match ban rationale/reason substring, if provided"},"ban_type":{"oneOf":[{"type":"string","description":"Search by type ('temporary', 'permanent', or system-defined types, nullable/optional)"},{"type":"null","description":"Search by type ('temporary', 'permanent', or system-defined types, nullable/optional)"}],"description":"Search by type ('temporary', 'permanent', or system-defined types, nullable/optional)"},"banned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Start date/time boundary for bans issued (nullable, for ranged search)"},{"type":"null","format":"date-time","description":"Start date/time boundary for bans issued (nullable, for ranged search)"}],"description":"Start date/time boundary for bans issued (nullable, for ranged search)"},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"End/expiry boundary for active or expired bans (nullable, for ranged search)"},{"type":"null","format":"date-time","description":"End/expiry boundary for active or expired bans (nullable, for ranged search)"}],"description":"End/expiry boundary for active or expired bans (nullable, for ranged search)"},"page":{"oneOf":[{"type":"number","description":"Page number for pagination (optional)"},{"type":"null","description":"Page number for pagination (optional)"}],"description":"Page number for pagination (optional)"},"limit":{"oneOf":[{"type":"number","description":"Page size for pagination (optional)"},{"type":"null","description":"Page size for pagination (optional)"}],"description":"Page size for pagination (optional)"}},"required":[],"description":"Search, filter, and pagination structure for bans retrieval.\n\nUsed for listing bans by member, moderator, type, or time period. Maps to fields from discussionboard_bans. All fields are optional; any subset may be present to filter results. Pagination standard."},"IPageIDiscussionboardBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for this result set (current page, limit, total records/pages). Atomic standard."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBan"},"description":"Array/list of ban records matching the search/filter/pagination parameters."}},"required":["pagination","data"],"description":"Container for a paginated set of ban results.\n\nFulfills IPage pattern for consistent pagination across endpoints. The 'data' array contains ban records; 'pagination' supplies page, limit, count, and page total."},"IDiscussionboardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for ban/suspension record (unique in table).\n\nPrisma: discussionboard_bans.id"},"banned_member_id":{"type":"string","format":"uuid","description":"Target member's ID for whom the ban applies. Required, not nullable.\n\nReferences discussionboard_bans.banned_member_id. Foreign key."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin performer of the ban. FK to moderator/admin. Required.\n\ndiscussionboard_bans.acting_moderator_id"},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Originating report ID if present (nullable). Used for linking the ban to a moderation report context. Null for proactive/admin forbans."},{"type":"null","format":"uuid","description":"Originating report ID if present (nullable). Used for linking the ban to a moderation report context. Null for proactive/admin forbans."}],"description":"Originating report ID if present (nullable). Used for linking the ban to a moderation report context. Null for proactive/admin forbans."},"reason":{"type":"string","description":"Reason specified for ban (auditable, user-facing summary).\n\nRequired. discussionboard_bans.reason"},"ban_type":{"type":"string","description":"Type of ban, e.g. 'temporary', 'permanent'. Not enum enforced but expected to be validated at the app layer.\n\ndiscussionboard_bans.ban_type"},"banned_at":{"type":"string","format":"date-time","description":"When ban was issued/enforced (ISO 8601 UTC, required).\n\ndiscussionboard_bans.banned_at"},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when ban expires (nullable). Null means permanent/indefinite ban.\n\nPrisma: discussionboard_bans.expires_at"},{"type":"null","format":"date-time","description":"Datetime when ban expires (nullable). Null means permanent/indefinite ban.\n\nPrisma: discussionboard_bans.expires_at"}],"description":"Datetime when ban expires (nullable). Null means permanent/indefinite ban.\n\nPrisma: discussionboard_bans.expires_at"}},"required":["id","banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Ban/suspension record structure.\n\nEncapsulates a single moderation ban, including actor (member), issuer (moderator/admin), optional report link, reason, type, timing, and audit info. Used across admin, moderation, and compliance workflows. Direct schema match to discussionboard_bans."},"IDiscussionboardBan.ICreate":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"Target member's ID to be banned. Required. Linked to discussionboard_members.id."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin taking action. Required. FK enforced."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report id if triggered by a specific report. Null for admin/proactive."},{"type":"null","format":"uuid","description":"Report id if triggered by a specific report. Null for admin/proactive."}],"description":"Report id if triggered by a specific report. Null for admin/proactive."},"reason":{"type":"string","description":"Explanation for ban, auditable/required."},"ban_type":{"type":"string","description":"Typology of ban (e.g. 'temporary', 'permanent'). Must be validated by business logic/app."},"banned_at":{"type":"string","format":"date-time","description":"Datetime when ban is issued (ISO 8601, UTC suggested)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime for ban expiry (nullable, null means indefinite/permanent)."},{"type":"null","format":"date-time","description":"Datetime for ban expiry (nullable, null means indefinite/permanent)."}],"description":"Datetime for ban expiry (nullable, null means indefinite/permanent)."}},"required":["banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Creation payload for discussionboard_bans moderation event.\n\nUsed to record formal member bans/suspensions, supporting compliance, reporting, and appeals workflows. All substantive audit fields required; references link to related member and mod/admin entities. Direct schema mapping to discussionboard_bans for POST endpoints."},"IDiscussionboardBan.IUpdate":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"Target member's id. Generally static, but allowed for audit correction flows."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin id for updating/moderator handoff."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reason or context update for audit correction."},{"type":"null","format":"uuid","description":"Reason or context update for audit correction."}],"description":"Reason or context update for audit correction."},"reason":{"type":"string","description":"Ban reason - allows for audit or rationale correction/update."},"ban_type":{"type":"string","description":"Type/category correction (e.g., temp -> perm, or other business logic update)."},"banned_at":{"type":"string","format":"date-time","description":"Issuance timestamp modification if required for audit."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiry modification for lifecycle state."},{"type":"null","format":"date-time","description":"Expiry modification for lifecycle state."}],"description":"Expiry modification for lifecycle state."}},"required":["banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Update structure for modification/correction of ban/suspension records.\n\nAllows audit and compliance flows to fix/modify ban parameters after initial creation. Direct mapping to update flows for discussionboard_bans."},"IDiscussionboardWarning.IRequest":{"type":"object","properties":{"warned_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by warned (recipient) member id (nullable/optional)"},{"type":"null","format":"uuid","description":"Filter by warned (recipient) member id (nullable/optional)"}],"description":"Filter by warned (recipient) member id (nullable/optional)"},"acting_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by moderator/admin issuer."},{"type":"null","format":"uuid","description":"Filter by moderator/admin issuer."}],"description":"Filter by moderator/admin issuer."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by report origin (nullable, optional)"},{"type":"null","format":"uuid","description":"Filter by report origin (nullable, optional)"}],"description":"Filter by report origin (nullable, optional)"},"reason":{"oneOf":[{"type":"string","description":"Substring or phrase contained in reason (nullable)"},{"type":"null","description":"Substring or phrase contained in reason (nullable)"}],"description":"Substring or phrase contained in reason (nullable)"},"warned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime for warning issuance (from or to, for range search)"},{"type":"null","format":"date-time","description":"Datetime for warning issuance (from or to, for range search)"}],"description":"Datetime for warning issuance (from or to, for range search)"},"page":{"oneOf":[{"type":"number","description":"Pagination page number (optional)"},{"type":"null","description":"Pagination page number (optional)"}],"description":"Pagination page number (optional)"},"limit":{"oneOf":[{"type":"number","description":"Number of items per page (optional)"},{"type":"null","description":"Number of items per page (optional)"}],"description":"Number of items per page (optional)"}},"required":[],"description":"Search/filter/pagination struct for warnings issued by moderation. All fields optional for advanced queries. Direct mapping to discussionboard_warnings schema columns."},"IPageIDiscussionboardWarning":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardWarning"}}},"required":["pagination","data"],"description":"Standard container for paged warning result sets."},"IDiscussionboardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for warning record. Unique in table. discussionboard_warnings.id"},"warned_member_id":{"type":"string","format":"uuid","description":"ID of the member receiving the warning. Required. FK to discussionboard_members.id"},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin who issued warning. Required. FK to mod/admin."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Source report if warning stems from a moderation incident (nullable, for out-of-band warnings use null)"},{"type":"null","format":"uuid","description":"Source report if warning stems from a moderation incident (nullable, for out-of-band warnings use null)"}],"description":"Source report if warning stems from a moderation incident (nullable, for out-of-band warnings use null)"},"reason":{"type":"string","description":"Rationale for warning - required and atomic explanation for audit. discussionboard_warnings.reason"},"warned_at":{"type":"string","format":"date-time","description":"Datetime warning was issued (ISO 8601, UTC recommended). Required."}},"required":["id","warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Warning record for disciplinary escalation. Maps directly to discussionboard_warnings model for moderation workflows, compliance, analytics, and audit trails. Every warning is atomic, attributed, and timestamped. For use in dashboards, audit logs, and member appeal processes."},"IDiscussionboardWarning.ICreate":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"ID of member to be warned (FK). Required."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin issuing warning (FK). Required."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Originating report id (optional for warnings not tied to an incident)"},{"type":"null","format":"uuid","description":"Originating report id (optional for warnings not tied to an incident)"}],"description":"Originating report id (optional for warnings not tied to an incident)"},"reason":{"type":"string","description":"Warning rationale (business rule requires completeness for audit, required)."},"warned_at":{"type":"string","format":"date-time","description":"Datetime of warning issuance (required, ISO 8601 UTC preferred)."}},"required":["warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Creation structure for warnings in discussions platform. Used to escalate infractions, warns members, supports compliance/audit workflows. All fields map directly to discussionboard_warnings creation columns."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"number","description":"Current page number."},"limit":{"type":"number","description":"Maximum records per page. Defaults to 100 in most systems."},"records":{"type":"number","description":"Total records matching the query in the database."},"pages":{"type":"number","description":"Total page count (ceil(records/limit))."}},"required":["current","limit","records","pages"],"description":"Page information. Collection of pagination details for result sets."}}},"completed":168,"total":206,"step":0,"created_at":"2025-07-24T19:15:40.169Z"},"tokenUsage":{"facade":{"aggregate":{"total":2320889,"input":{"total":2211238,"cached":103168},"output":{"total":109651,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2320889,"input":{"total":2211238,"cached":103168},"output":{"total":109651,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2320889,"input":{"total":2211238,"cached":103168},"output":{"total":109651,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2320889,"input":{"total":2211238,"cached":103168},"output":{"total":109651,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIMemberProfile":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information for the set of member profiles.\n\nRepresents the current page, limit, total record count, and total pages of the paginated response set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IMemberProfile"},"description":"List of member profiles returned by the current page of the query.\n\nEach object fully describes a public member profile entity, based on the IMemberProfile schema."}},"required":["pagination","data"],"description":"A standard paginated response containing a list of member profiles and corresponding pagination metadata.\n\nThis follows the business pattern of 'IPage<T>' and is used in all endpoints performing paged queries for member profiles in the discussion board system."},"IMemberProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this profile.\n\nReferences the discussionboard_member_profiles.id column. Used for lookup, updates, and API responses."},"member_id":{"type":"string","format":"uuid","description":"Foreign key linking this profile to the member account.\n\nReferences discussionboard_members.id."},"display_name":{"type":"string","description":"User-chosen display name as shown in the UI profile card or member list.\n\nSourced from discussionboard_member_profiles.display_name."},"bio":{"oneOf":[{"type":"string","description":"Optional short member bio/summary text field from the profile.\n\nSourced from discussionboard_member_profiles.bio; returns null if not set."},{"type":"null","description":"Optional short member bio/summary text field from the profile.\n\nSourced from discussionboard_member_profiles.bio; returns null if not set."}],"description":"Optional short member bio/summary text field from the profile.\n\nSourced from discussionboard_member_profiles.bio; returns null if not set."},"avatar_url":{"oneOf":[{"type":"string","description":"Profile avatar image URL. Null if none set.\n\nSourced from discussionboard_member_profiles.avatar_url."},{"type":"null","description":"Profile avatar image URL. Null if none set.\n\nSourced from discussionboard_member_profiles.avatar_url."}],"description":"Profile avatar image URL. Null if none set.\n\nSourced from discussionboard_member_profiles.avatar_url."},"location":{"oneOf":[{"type":"string","description":"User's location as set in the member profile.\n\nSourced from discussionboard_member_profiles.location. Null if not set."},{"type":"null","description":"User's location as set in the member profile.\n\nSourced from discussionboard_member_profiles.location. Null if not set."}],"description":"User's location as set in the member profile.\n\nSourced from discussionboard_member_profiles.location. Null if not set."},"website_url":{"oneOf":[{"type":"string","description":"User's public website link for networking purposes.\n\nSourced from discussionboard_member_profiles.website_url. Null if not set."},{"type":"null","description":"User's public website link for networking purposes.\n\nSourced from discussionboard_member_profiles.website_url. Null if not set."}],"description":"User's public website link for networking purposes.\n\nSourced from discussionboard_member_profiles.website_url. Null if not set."}},"required":["id","member_id","display_name"],"description":"Member profile entity for the discussion board system.\n\nMaps to the discussionboard_member_profiles table and contains the atomic, public-facing attributes of a user's profile as explained in the Prisma schema and business requirements. Does NOT contain sensitive login or deletion information, as those belong to discussionboard_members."},"IMemberProfile.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Associates the new profile with a specific member account (discussionboard_members.id).\n\nRequired for creation."},"display_name":{"type":"string","description":"The display name the member wishes to show publicly.\n\nRequired for new profiles."},"bio":{"oneOf":[{"type":"string","description":"Optional biography or summary for the member's public profile.\n\nPass null when no description is provided."},{"type":"null","description":"Optional biography or summary for the member's public profile.\n\nPass null when no description is provided."}],"description":"Optional biography or summary for the member's public profile.\n\nPass null when no description is provided."},"avatar_url":{"oneOf":[{"type":"string","description":"Optional URI for the user's profile image avatar.\n\nAccepts a valid URL or null."},{"type":"null","description":"Optional URI for the user's profile image avatar.\n\nAccepts a valid URL or null."}],"description":"Optional URI for the user's profile image avatar.\n\nAccepts a valid URL or null."},"location":{"oneOf":[{"type":"string","description":"Free text location for the UI display. Optional at creation."},{"type":"null","description":"Free text location for the UI display. Optional at creation."}],"description":"Free text location for the UI display. Optional at creation."},"website_url":{"oneOf":[{"type":"string","description":"User's website (public), optional for creation."},{"type":"null","description":"User's website (public), optional for creation."}],"description":"User's website (public), optional for creation."}},"required":["member_id","display_name"],"description":"Schema for creating a new member profile record. Maps to required/optional fields for discussionboard_member_profiles creation, as per the requirements and Prisma schema. Used in onboarding or self-profile setup flows."},"IMemberProfile.IUpdate":{"type":"object","properties":{"display_name":{"type":"string","description":"Members can change their display name through update. This is the string value shown publicly in the UI."},"bio":{"oneOf":[{"type":"string","description":"Optionally update or null out the bio field for the member."},{"type":"null","description":"Optionally update or null out the bio field for the member."}],"description":"Optionally update or null out the bio field for the member."},"avatar_url":{"oneOf":[{"type":"string","description":"Optionally update or remove (null) the avatar URL stored for this profile."},{"type":"null","description":"Optionally update or remove (null) the avatar URL stored for this profile."}],"description":"Optionally update or remove (null) the avatar URL stored for this profile."},"location":{"oneOf":[{"type":"string","description":"Updates the free-text location field for the profile, or null to unset."},{"type":"null","description":"Updates the free-text location field for the profile, or null to unset."}],"description":"Updates the free-text location field for the profile, or null to unset."},"website_url":{"oneOf":[{"type":"string","description":"Update or remove (null) the website URL for the profile."},{"type":"null","description":"Update or remove (null) the website URL for the profile."}],"description":"Update or remove (null) the website URL for the profile."}},"required":["display_name"],"description":"Payload for updating an existing member profile entity. Allows members or admins to alter or remove public profile fields. The member's display_name must always be set when updating the profile. No authentication or logical deletion fields are exposed."},"IMemberPreference.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Filter preference records to only those for the given member id (discussionboard_members.id).\n\nOptional filtering property for admin or member UI queries."},"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"Filter by whether email notifications are set as true, false, or null (unset) in the preference record."},{"type":"null","description":"Filter by whether email notifications are set as true, false, or null (unset) in the preference record."}],"description":"Filter by whether email notifications are set as true, false, or null (unset) in the preference record."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"Filter by push notification preference. Accepts true, false, or null if unset."},{"type":"null","description":"Filter by push notification preference. Accepts true, false, or null if unset."}],"description":"Filter by push notification preference. Accepts true, false, or null if unset."},"preferred_language":{"oneOf":[{"type":"string","description":"Filter by preferred language code for the user. Null value means filter is not applied."},{"type":"null","description":"Filter by preferred language code for the user. Null value means filter is not applied."}],"description":"Filter by preferred language code for the user. Null value means filter is not applied."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"Filter by dark-mode UI preference (true/false), or leave null to not filter by this property."},{"type":"null","description":"Filter by dark-mode UI preference (true/false), or leave null to not filter by this property."}],"description":"Filter by dark-mode UI preference (true/false), or leave null to not filter by this property."}},"required":[],"description":"Request DTO for searching/filtering member preferences. All properties used for searching must exist in the member preference schema. Filters may be omitted or set as null for no filtering. Used in paginated, filtered member preference UI and API queries."},"IPageIMemberPreference":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page metadata for this search/result set.\n\nContains current page, record limit, count, and total pages for paginated results."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IMemberPreference"},"description":"List of member preference entities in this paginated result set.\n\nEach item is an IMemberPreference object corresponding to a single record."}},"required":["pagination","data"],"description":"Standard paginated response object for IMemberPreference entities.\n\nReturns pagination info and a list of member preference records according to the current query/filter criteria."},"IMemberPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the member preference record. Used for retrieval and update by id.\n\nMaps to discussionboard_member_preferences.id."},"member_id":{"type":"string","format":"uuid","description":"FK linking this record to the discussionboard_members table.\n\nSourced from discussionboard_member_preferences.member_id."},"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"Preference flag indicating if member receives email notifications. Null means unset/default."},{"type":"null","description":"Preference flag indicating if member receives email notifications. Null means unset/default."}],"description":"Preference flag indicating if member receives email notifications. Null means unset/default."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"Preference flag: member's opt-in/opt-out for push notifications. Null if not set."},{"type":"null","description":"Preference flag: member's opt-in/opt-out for push notifications. Null if not set."}],"description":"Preference flag: member's opt-in/opt-out for push notifications. Null if not set."},"preferred_language":{"oneOf":[{"type":"string","description":"Member's preferred language code (e.g., 'en', 'ko'). Null if default/unspecified."},{"type":"null","description":"Member's preferred language code (e.g., 'en', 'ko'). Null if default/unspecified."}],"description":"Member's preferred language code (e.g., 'en', 'ko'). Null if default/unspecified."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"User's dark UI mode flag. Null means preference not set."},{"type":"null","description":"User's dark UI mode flag. Null means preference not set."}],"description":"User's dark UI mode flag. Null means preference not set."}},"required":["id","member_id"],"description":"Member notification and interface preference settings model.\n\nDirectly represents a single row from discussionboard_member_preferences. Maps only public, atomic preference fields; no authentication or secret fields are present."},"IMemberPreference.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Identifies the member for whom the preferences are being set.\n\nRequired for creation."},"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"Initial preference for email notifications (true/false).\n\nNull/unset is allowed at creation."},{"type":"null","description":"Initial preference for email notifications (true/false).\n\nNull/unset is allowed at creation."}],"description":"Initial preference for email notifications (true/false).\n\nNull/unset is allowed at creation."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"Initial push notification preference, can be null/unset at creation."},{"type":"null","description":"Initial push notification preference, can be null/unset at creation."}],"description":"Initial push notification preference, can be null/unset at creation."},"preferred_language":{"oneOf":[{"type":"string","description":"Preferred language code (optional; e.g., 'en', 'ko').\n\nNull or not provided means default."},{"type":"null","description":"Preferred language code (optional; e.g., 'en', 'ko').\n\nNull or not provided means default."}],"description":"Preferred language code (optional; e.g., 'en', 'ko').\n\nNull or not provided means default."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"Initial dark mode UI setting (true/false/null)."},{"type":"null","description":"Initial dark mode UI setting (true/false/null)."}],"description":"Initial dark mode UI setting (true/false/null)."}},"required":["member_id"],"description":"Schema for creating a member's notification and UI preferences record.\n\nUsed in onboarding flows or admin configuration to set default notification/UI preferences for a member."},"IMemberPreference.IUpdate":{"type":"object","properties":{"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"Change email notification preference (set to true, false, or null to unset).\n\nNull unsets the value."},{"type":"null","description":"Change email notification preference (set to true, false, or null to unset).\n\nNull unsets the value."}],"description":"Change email notification preference (set to true, false, or null to unset).\n\nNull unsets the value."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"Change push notification preference (true/false/null for unset).\n\nNull removes the custom preference."},{"type":"null","description":"Change push notification preference (true/false/null for unset).\n\nNull removes the custom preference."}],"description":"Change push notification preference (true/false/null for unset).\n\nNull removes the custom preference."},"preferred_language":{"oneOf":[{"type":"string","description":"Update preferred language code, or null to use default."},{"type":"null","description":"Update preferred language code, or null to use default."}],"description":"Update preferred language code, or null to use default."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"Update dark mode preference (true/false/null for unset)."},{"type":"null","description":"Update dark mode preference (true/false/null for unset)."}],"description":"Update dark mode preference (true/false/null for unset)."}},"required":[],"description":"Schema for updating member preference properties. Supports null unsets and property exclusion for no change.\n\nPatch all updatable fields as needed. No authentication or deleted fields included."},"IBoard.IRequest":{"type":"object","properties":{"board_category_id":{"type":"string","format":"uuid","description":"Optional filter to restrict results to given board category (discussionboard_board_category_id).\n\nMatches to boards in a specific business domain or subject."},"section_id":{"type":"string","format":"uuid","description":"Optional filter to restrict results to boards under a specific section (discussionboard_section_id)."},"name":{"type":"string","description":"Search filter to match all boards containing this value in their name (case-insensitive).\n\nUses string search on schema's name field."},"code":{"type":"string","description":"Search or filter results by the board's code (exact match).\n\nUsed for navigation or programmatic selection."},"is_active":{"type":"boolean","description":"Filter by active status to include/exclude archived or hidden boards."},"is_visible":{"type":"boolean","description":"Restrict to boards visible to members/users."}},"required":[],"description":"Schema for board list request, containing optional filters for category, section, name, code, active/visible status. Used in UI or API endpoints for paginated board search and navigation in the discussion board system."},"IPageIBoard":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the current board list response.\n\nReports current page, limit, record count, and page count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IBoard"},"description":"Main array of board objects returned for the current search, filter, and pagination criteria."}},"required":["pagination","data"],"description":"Paginated result structure for discussion board entities in the system. Contains a 'data' property listing board records and pagination metadata for navigation and UI display flows."},"IBoard":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique Board identifier (Primary Key, UUID).\n\nMaps to discussionboard_boards.id. Used for lookups, update, detail display, etc."},"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Foreign key to the category this board belongs to.\n\nImplements category-based organization. Sourced from discussionboard_boards.discussionboard_board_category_id."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Foreign key to the section above this board.\n\nUsed in navigation, display, and access control."},"name":{"type":"string","description":"Atomic board name for display in forum navigation.\n\nSourced from discussionboard_boards.name. Used in search, listing, and labels."},"code":{"type":"string","description":"Code used for programmatic routing, linking, and integration.\n\nMust be unique per discussionboard_boards.code."},"description":{"oneOf":[{"type":"string","description":"Human-readable short description for UI display (may be null).\n\nAids in UX, search, and board discovery. Sourced from discussionboard_boards.description."},{"type":"null","description":"Human-readable short description for UI display (may be null).\n\nAids in UX, search, and board discovery. Sourced from discussionboard_boards.description."}],"description":"Human-readable short description for UI display (may be null).\n\nAids in UX, search, and board discovery. Sourced from discussionboard_boards.description."},"is_active":{"type":"boolean","description":"Is the board currently open for new threads and posts? If false, board is considered archived and read-only.\n\nMaps to discussionboard_boards.is_active."},"is_visible":{"type":"boolean","description":"Is the board visible to non-admin users?\n\nControls navigation and privacy."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of board creation (ISO 8601 datetime). Used in sort and audit."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent board update (ISO 8601 datetime). For audit/UI freshness."}},"required":["id","discussionboard_board_category_id","discussionboard_section_id","name","code","is_active","is_visible","created_at","updated_at"],"description":"Board entity representing a single forum board in the discussion board system. Fulfills discussion space and organization business requirements. Fully normalized (3NF) as per Prisma schema, this entity maps 1:1 with the discussionboard_boards table, exposing only atomic board data and referential fields for use in navigation, thread listing, and management flows."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number in the paginated response. 1-indexed."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of records per page. Default is 100 if not specified."},"records":{"type":"integer","format":"uint32","description":"Total records in the full result set, regardless of pagination settings."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages in the entire result set, calculated from records/limit and rounded up."}},"required":["current","limit","records","pages"],"description":"Pagination metadata standard for all paginated result sets. Follows IPage.IPagination interface for consistent paging in all result types.\n\nIncludes current page, limit per page, total number of records, and page count for overall navigation in APIs and UI."}}},"completed":180,"total":206,"step":0,"created_at":"2025-07-24T19:15:40.505Z"},"tokenUsage":{"facade":{"aggregate":{"total":2422244,"input":{"total":2309502,"cached":103168},"output":{"total":112742,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2422244,"input":{"total":2309502,"cached":103168},"output":{"total":112742,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2422244,"input":{"total":2309502,"cached":103168},"output":{"total":112742,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2422244,"input":{"total":2309502,"cached":103168},"output":{"total":112742,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardConfiguration.IRequest":{"type":"object","description":"디스커션보드 시스템 설정 레코드의 검색, 필터 및 페이지네이션 파라미터.\n\n이 오브젝트는 discussionboard_configurations 테이블에 존재하는 전체 필드(id, key, value, description, created_at, updated_at)를 기준으로 검색/정렬/필터/페이지네이션을 지원합니다. 관리자는 설정 키, 값, 생성일, 수정일을 필터링하여 시스템 전역의 런타임 설정 및 기능 토글을 효율적으로 검색할 수 있습니다. 비즈니스 목적상, 안정적인 시스템 운영과 재현성 있는 시스템 설정 관리에 사용됩니다.","properties":{"id":{"type":"string","format":"uuid","description":"설정 개별 레코드의 UUID. discussionboard_configurations.id. 주로 단건 조회 혹은 상세 관리시 필터링에 사용됩니다."},"key":{"type":"string","description":"설정 키. 예시:'max_post_per_hour'. 검색 시 특정 시스템 제어나 기능 토글 관련 설정만 한정 조회할 때 사용합니다."},"value":{"oneOf":[{"type":"string","description":"설정 값. 모든 값은 문자열로 저장되며, 예시로 'true', '5', 'abc'. 부분 일치(Like 검색)나 Null 조건 검색에 적용 가능.\n\n어플리케이션 논리/서비스에서 변환되어 사용됩니다."},{"type":"null","description":"설정 값. 모든 값은 문자열로 저장되며, 예시로 'true', '5', 'abc'. 부분 일치(Like 검색)나 Null 조건 검색에 적용 가능.\n\n어플리케이션 논리/서비스에서 변환되어 사용됩니다."}],"description":"설정 값. 모든 값은 문자열로 저장되며, 예시로 'true', '5', 'abc'. 부분 일치(Like 검색)나 Null 조건 검색에 적용 가능.\n\n어플리케이션 논리/서비스에서 변환되어 사용됩니다."},"description":{"oneOf":[{"type":"string","description":"관리자용/시스템 UI에 표시될 설명/주석. 설정 목적 검색이나 관리 설명 검색 등에서 활용됩니다."},{"type":"null","description":"관리자용/시스템 UI에 표시될 설명/주석. 설정 목적 검색이나 관리 설명 검색 등에서 활용됩니다."}],"description":"관리자용/시스템 UI에 표시될 설명/주석. 설정 목적 검색이나 관리 설명 검색 등에서 활용됩니다."},"created_at":{"type":"string","format":"date-time","description":"생성일시(ISO-8601). 기간 조건 검색, 변경 이력 조회 등에서 사용됩니다."},"updated_at":{"type":"string","format":"date-time","description":"최종 수정일시(ISO-8601). 최근 변경 감지 등 최신 상태 점검 시 검색조건에 활용합니다."},"page":{"type":"integer","description":"페이지네이션 요청시 페이지 번호(1부터 시작, 기본:1)."},"limit":{"type":"integer","description":"페이지 당 최대 레코드 수. (기본: 100)"},"orderBy":{"type":"string","description":"정렬 기준 필드명. 예) 'created_at', 'key', 'updated_at' 등. default는 created_at desc"},"orderDirection":{"oneOf":[{"const":"asc","description":"정렬 방향. 오름차순(asc) 또는 내림차순(desc)"},{"const":"desc","description":"정렬 방향. 오름차순(asc) 또는 내림차순(desc)"}],"description":"정렬 방향. 오름차순(asc) 또는 내림차순(desc)"},"q":{"type":"string","description":"키워드 통합(전방/부분) 검색용 텍스트. key, description 등에서 일치 문자열을 검색."}},"required":[]},"IPageDiscussionboardConfiguration":{"type":"object","description":"설정 리스트의 페이지네이션 컨테이너.\n\n플랫폼 런타임 시스템 설정의 목록을 여러 페이지로 나누어서 반환할 때 사용합니다. 각 설정 레코드는 discussionboard_configurations 테이블의 전체 필드를 포함합니다. pagination 속성에는 현재 페이지 정보, limit, 전체 레코드 수와 페이지 수가 담기며, data 필드는 각 페이지 단위 설정의 배열입니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardConfiguration"}}},"required":["pagination","data"]},"IDiscussionboardConfiguration":{"type":"object","description":"discussionboard_configurations 테이블의 개별 설정 엔티티.\n\n각 필드는 시스템 전체 또는 특정 기능의 런타임/기능토글/상수값을 나타내며, 플랫폼 설정, 플래그, 임계치 등에서 활용됩니다. 자세한 구조는 다음과 같습니다.","properties":{"id":{"type":"string","format":"uuid","description":"설정 레코드의 고유 식별자(UUID)."},"key":{"type":"string","description":"설정의 키명. 필수, 전역 유일. 시스템의 각 기능 또는 속성을 식별하는 명칭. 예:'max_post_per_hour', 'enable_sms_notice'"},"value":{"oneOf":[{"type":"string","description":"실제 설정 값. 모든 데이터는 string(문자열)로 저장되며, null은 미설정/공란 사용 등 특수 목적 가능.\n\n실제 적용시 앱 내에서 변환(파싱)되어 사용됨."},{"type":"null","description":"실제 설정 값. 모든 데이터는 string(문자열)로 저장되며, null은 미설정/공란 사용 등 특수 목적 가능.\n\n실제 적용시 앱 내에서 변환(파싱)되어 사용됨."}],"description":"실제 설정 값. 모든 데이터는 string(문자열)로 저장되며, null은 미설정/공란 사용 등 특수 목적 가능.\n\n실제 적용시 앱 내에서 변환(파싱)되어 사용됨."},"description":{"oneOf":[{"type":"string","description":"설정에 대한 설명/메모. 관리자에게만 표시되며, 설정 목적이나 사용법에 대한 메타데이터를 제공합니다."},{"type":"null","description":"설정에 대한 설명/메모. 관리자에게만 표시되며, 설정 목적이나 사용법에 대한 메타데이터를 제공합니다."}],"description":"설정에 대한 설명/메모. 관리자에게만 표시되며, 설정 목적이나 사용법에 대한 메타데이터를 제공합니다."},"created_at":{"type":"string","format":"date-time","description":"레코드 생성 시각(ISO-8601 표준). 플랫폼 초기 설정/이력 추적/감사에 사용."},"updated_at":{"type":"string","format":"date-time","description":"마지막 수정 시각(ISO-8601 표준). 최근 변경 감지, 추적, 히스토리 관리 등에 활용."}},"required":["id","key","created_at","updated_at"]},"IDiscussionboardConfiguration.ICreate":{"type":"object","description":"설정(디스커션보드 configuration) 신규 생성 요청 스키마.\n\n필수/필요 데이터만 포함: key(유일), value(문자열/nullable), description(설명). 생성 일시/수정 일시는 자동 생성됨.","properties":{"key":{"type":"string","description":"생성할 설정의 고유 키(유일). 시스템 기능 식별자 역할을 하며, 비워둘 수 없음."},"value":{"oneOf":[{"type":"string","description":"설정 값. string만 허용. null은 미설정 상태로 저장될 수 있음."},{"type":"null","description":"설정 값. string만 허용. null은 미설정 상태로 저장될 수 있음."}],"description":"설정 값. string만 허용. null은 미설정 상태로 저장될 수 있음."},"description":{"oneOf":[{"type":"string","description":"관리자 관리자 UI/설명란 용도로 사용할 수 있는 옵션 설명(메모)."},{"type":"null","description":"관리자 관리자 UI/설명란 용도로 사용할 수 있는 옵션 설명(메모)."}],"description":"관리자 관리자 UI/설명란 용도로 사용할 수 있는 옵션 설명(메모)."}},"required":["key"]},"IDiscussionboardConfiguration.IUpdate":{"type":"object","description":"디스커션보드 시스템 설정의 일부 필드 갱신용 Patch/Put 요청 오브젝트.\n\n값(value) 또는 description(설명) 속성만 수정 가능. key 및 id는 변경 불가(불변 속성). 값 적용시 비어 있을 경우 null로 저장.","properties":{"value":{"oneOf":[{"type":"string","description":"수정할 설정 값. 문자열 또는 null."},{"type":"null","description":"수정할 설정 값. 문자열 또는 null."}],"description":"수정할 설정 값. 문자열 또는 null."},"description":{"oneOf":[{"type":"string","description":"상세 설명(메모란) 변경값(옵션)."},{"type":"null","description":"상세 설명(메모란) 변경값(옵션)."}],"description":"상세 설명(메모란) 변경값(옵션)."}},"required":[]},"IDiscussionboardNotification.IRequest":{"type":"object","description":"시스템 알림 로그(notification) 검색, 필터, 페이지네이션용 요청 오브젝트.\n\ndiscussionboard_notifications 테이블에 정의된 필드(target_id, type, title, delivered, created_at 등)에 기반하여 전체/부분 검색, 페이징, 정렬, 기간 필터 등이 가능합니다.","properties":{"id":{"type":"string","format":"uuid","description":"알림 로그별 고유 UUID. 단일 조회/특정 타겟 검색 등에서 활용."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"알림을 수신한 엔티티(유저, 채널 등)의 UUID. 개인화된 알림/특정 타겟 알람 필터 시 사용."},{"type":"null","format":"uuid","description":"알림을 수신한 엔티티(유저, 채널 등)의 UUID. 개인화된 알림/특정 타겟 알람 필터 시 사용."}],"description":"알림을 수신한 엔티티(유저, 채널 등)의 UUID. 개인화된 알림/특정 타겟 알람 필터 시 사용."},"type":{"type":"string","description":"알림 이벤트 종류명. 예:'system_announcement', 'user_mention', 'ban', 'reply_created' 등과 같이 플랫폼 내 발생 이벤트에 따라 값이 지정됨."},"title":{"type":"string","description":"이벤트/알림의 요약 제목. UI/리스트 검색이나 알림 센터 내 제목 검색 등에 활용."},"body":{"oneOf":[{"type":"string","description":"알림 본문(내용). null 가능. 부분 키워드 검색, 상세 조회 등에서 사용."},{"type":"null","description":"알림 본문(내용). null 가능. 부분 키워드 검색, 상세 조회 등에서 사용."}],"description":"알림 본문(내용). null 가능. 부분 키워드 검색, 상세 조회 등에서 사용."},"delivered":{"type":"boolean","description":"전달 상태 플래그. true(배달 완료), false(미전달/대기 상태)로 분류. 전달여부 필터링 시 활용."},"created_at":{"type":"string","format":"date-time","description":"알림 레코드가 생성된 시간(ISO-8601). 기간 검색, 최신 정렬, 슬랙/푸시 연동 시 활용."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"실제 전달 완료 시각(ISO-8601, null 허용). 배달 실적 필터링 등에 사용."},{"type":"null","format":"date-time","description":"실제 전달 완료 시각(ISO-8601, null 허용). 배달 실적 필터링 등에 사용."}],"description":"실제 전달 완료 시각(ISO-8601, null 허용). 배달 실적 필터링 등에 사용."},"page":{"type":"integer","description":"페이지 번호(1 부터, 기본:1)."},"limit":{"type":"integer","description":"페이지 당 출력될 알림 로그 수. (기본: 100)"},"orderBy":{"type":"string","description":"정렬 필드명. 예:'created_at', 'title', 'type' 등."},"orderDirection":{"oneOf":[{"const":"asc","description":"정렬 방향. asc(오름차순) / desc(내림차순)"},{"const":"desc","description":"정렬 방향. asc(오름차순) / desc(내림차순)"}],"description":"정렬 방향. asc(오름차순) / desc(내림차순)"},"q":{"type":"string","description":"알림 본문/title 등 텍스트 필드 대상으로 부분일치/전체 키워드 검색용"}},"required":[]},"IPageIDiscussionboardNotification":{"type":"object","description":"알림 로그 엔티티의 페이지네이션 컨테이너 타입.\n\ndiscussionboard_notifications 내 알림 로그 레코드들을 배열로, 전체 페이지/레코드 정보를 pagination 속성에 분리하여 제공합니다. 시스템/관리 UI, 개인 알림 리스트 응답, 크로스 플랫폼 알림 로그 analytics 등에서 활용됩니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotification"}}},"required":["pagination","data"]},"IDiscussionboardNotification":{"type":"object","description":"discussionboard_notifications 테이블의 알림 로그 개별 행 모델.\n\n특정 사용자의 알림 내역, 시스템 통지, 배달 상태감시 등에서 개별적으로 조회/분석/발행 내역 추적을 위해 활용됩니다.\n\n레코드의 속성별 설명은 다음과 같습니다.","properties":{"id":{"type":"string","format":"uuid","description":"알림 로그 개별 행 고유 UUID"},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"알림을 전달받은 대상을 식별하는 UUID (개인화/특정 엔티티/채널/유저 등)."},{"type":"null","format":"uuid","description":"알림을 전달받은 대상을 식별하는 UUID (개인화/특정 엔티티/채널/유저 등)."}],"description":"알림을 전달받은 대상을 식별하는 UUID (개인화/특정 엔티티/채널/유저 등)."},"type":{"type":"string","description":"알림 이벤트 종류. 예시:'system_announcement', 'user_mention', 'post_reply' 등. UI, 분류, 통계, 알림 처리 등에서 사용."},"title":{"type":"string","description":"알림 제목 요약. 메인 알림 센터/목록/푸시 표시시 대표 문구."},"body":{"oneOf":[{"type":"string","description":"알림의 전체 상세 내용 문자열. null 허용."},{"type":"null","description":"알림의 전체 상세 내용 문자열. null 허용."}],"description":"알림의 전체 상세 내용 문자열. null 허용."},"delivered":{"type":"boolean","description":"알림 실제 배달여부. True(배달 완료), False(미전달/실패/지연/임시저장 등). 통계/관리/재시도 처리시에 활용."},"created_at":{"type":"string","format":"date-time","description":"알림이 생성된 UTC 기준 시각. 플랫폼 관리/개인 알림 히스토리/audit에서 사용."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"실제 배달 완료된 전체 타임스탬프(없으면 null). 전달 상태 통계에 사용."},{"type":"null","format":"date-time","description":"실제 배달 완료된 전체 타임스탬프(없으면 null). 전달 상태 통계에 사용."}],"description":"실제 배달 완료된 전체 타임스탬프(없으면 null). 전달 상태 통계에 사용."}},"required":["id","type","title","delivered","created_at"]},"IDiscussionboardNotification.ICreate":{"type":"object","description":"새로운 알림(notification) 로그 행(레코드) 생성 요청 스키마.\n\n필수 생성 속성은 type(이벤트 유형), title(제목), delivered(배달 상태), created_at(생성시각)입니다. target_id 및 body, delivered_at은 옵션으로 선택 적용 가능. 주의: created_at 및 delivered 값은 반드시 백엔드/서비스에서 할당, 관리됩니다.","properties":{"type":{"type":"string","description":"생성될 알림의 이벤트 종류(정의된 string, 예:'system_announcement', 'reply_posted')."},"title":{"type":"string","description":"알림 제목. UI 리스트 및 개인 inbox 등에서 메인 문구로 노출."},"body":{"oneOf":[{"type":"string","description":"상세 알림 본문. null 허용. 일반 텍스트 기반, 길이 제한은 서비스 정책에 따름."},{"type":"null","description":"상세 알림 본문. null 허용. 일반 텍스트 기반, 길이 제한은 서비스 정책에 따름."}],"description":"상세 알림 본문. null 허용. 일반 텍스트 기반, 길이 제한은 서비스 정책에 따름."},"delivered":{"type":"boolean","description":"이 알림이 배달 완료 상태로 바로 생성되는 경우 true, 큐 대기/미전달상태로 생성 시 false. (백엔드 논리에 따라 자동 셋팅 권장)"},"created_at":{"type":"string","format":"date-time","description":"생성시각(서버단에서 ISO-8601 기준으로 할당)."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"알림 타겟의 UUID. 알림 개인화/특정 엔티티 대상으로 발행하는 경우에만 사용."},{"type":"null","format":"uuid","description":"알림 타겟의 UUID. 알림 개인화/특정 엔티티 대상으로 발행하는 경우에만 사용."}],"description":"알림 타겟의 UUID. 알림 개인화/특정 엔티티 대상으로 발행하는 경우에만 사용."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"(옵션) 실제 배달 완료 시각. 배달 즉시 발생 케이스 외에는 null 또는 생략."},{"type":"null","format":"date-time","description":"(옵션) 실제 배달 완료 시각. 배달 즉시 발생 케이스 외에는 null 또는 생략."}],"description":"(옵션) 실제 배달 완료 시각. 배달 즉시 발생 케이스 외에는 null 또는 생략."}},"required":["type","title","delivered","created_at"]},"IDiscussionboardNotification.IUpdate":{"type":"object","description":"알림 로그 행의 값 갱신/수정 요청용 오브젝트(Partial Update/PUT).\n\n수정 가능 속성: type(이벤트 종류), title(제목), body, delivered, delivered_at, target_id(옵션), 기타 null 허용 가능 필드 포함. created_at은 수정 불가/불변 속성.","properties":{"type":{"type":"string","description":"알림 종류명(수정할 경우 사용)."},"title":{"type":"string","description":"알림 제목."},"body":{"oneOf":[{"type":"string","description":"상세 본문 텍스트 문자열. null 허용."},{"type":"null","description":"상세 본문 텍스트 문자열. null 허용."}],"description":"상세 본문 텍스트 문자열. null 허용."},"delivered":{"type":"boolean","description":"상태 플래그 값. True(배달 완료), False(큐 대기/에러/누락/임시저장)."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"실제 배달 완료 타임스탬프. null 가능."},{"type":"null","format":"date-time","description":"실제 배달 완료 타임스탬프. null 가능."}],"description":"실제 배달 완료 타임스탬프. null 가능."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 타겟(UUID)."},{"type":"null","format":"uuid","description":"대상 타겟(UUID)."}],"description":"대상 타겟(UUID)."}},"required":[]},"IPageIDiscussionboardSetting":{"type":"object","description":"discussionboard_settings 기준 기능 별 설정/토글/플래그들의 페이지네이트된 결과 담는 컨테이너.\n\npagination: 페이지네이션 메타정보, data: 각 area/기능별 환경설정 레코드 배열을 반환합니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSetting"}}},"required":["pagination","data"]},"IDiscussionboardSetting.IRequest":{"type":"object","description":"디스커션보드 기능/area별 설정 레코드(discussionboard_settings) 조회, 필터, 페이징 요청 오브젝트.\n\nscope_id, scope_type, key, value, description, 생성/수정일 필터 지원. 'discussionboard_settings'의 실제 컬럼 기준으로만 검색/정렬/조회 가능. 보통 관리자 UI의 기능 토글, 채널/섹션별 설정 등의 조회에 활용됨.","properties":{"id":{"type":"string","format":"uuid","description":"설정 레코드 id(UUID)."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"설정 적용 범위 엔티티의 UUID. 예: 특정 채널/섹션/게시판 등과 연결된 경우 활용."},{"type":"null","format":"uuid","description":"설정 적용 범위 엔티티의 UUID. 예: 특정 채널/섹션/게시판 등과 연결된 경우 활용."}],"description":"설정 적용 범위 엔티티의 UUID. 예: 특정 채널/섹션/게시판 등과 연결된 경우 활용."},"scope_type":{"type":"string","description":"설정 적용 범위 타입. 예:'channel', 'section', 'feature_flag' 등. 관리자가 분류 필터로 활용."},"key":{"type":"string","description":"설정 키. 부분검색 또는 특정 토글 조회 목적."},"value":{"oneOf":[{"type":"string","description":"설정 값. null 가능. 특수 기능 미설정 또는 토글 Off시 활용."},{"type":"null","description":"설정 값. null 가능. 특수 기능 미설정 또는 토글 Off시 활용."}],"description":"설정 값. null 가능. 특수 기능 미설정 또는 토글 Off시 활용."},"description":{"oneOf":[{"type":"string","description":"설명/비고(옵션). UI 표시나 관리자 검색용 메모란."},{"type":"null","description":"설명/비고(옵션). UI 표시나 관리자 검색용 메모란."}],"description":"설명/비고(옵션). UI 표시나 관리자 검색용 메모란."},"created_at":{"type":"string","format":"date-time","description":"생성 시각(ISO-8601). 이력 관리/변경 추적."},"updated_at":{"type":"string","format":"date-time","description":"수정/최종 업데이트 시간. 정렬/최신 상태 조회 목적."},"page":{"type":"integer","description":"페이지네이션 페이지 번호(기본:1)."},"limit":{"type":"integer","description":"리스트 당 개수 제한."},"orderBy":{"type":"string","description":"정렬 필드명."},"orderDirection":{"oneOf":[{"const":"asc","description":"정렬 방향 asc/desc"},{"const":"desc","description":"정렬 방향 asc/desc"}],"description":"정렬 방향 asc/desc"},"q":{"type":"string","description":"키/설명/값 등 통합 텍스트 검색용"}},"required":[]},"IPage.IPagination":{"type":"object","description":"페이지네이션 정보 객체. 요청과 결과 페이지·전체 수·레코드 수 메타 정보. 다양한 엔티티에서 공통으로 사용됨.\n\ncurrent: 현재 요청된 페이지 번호\nlimit: 페이지 당 레코드 제한값\nrecords: 데이터베이스 내 전체 엔티티 수\npages: 전체 페이지 수 (records/limit를 올림값으로 계산)","properties":{"current":{"type":"integer","description":"현재 페이지 번호(1부터 시작, 0은 무효)."},"limit":{"type":"integer","description":"페이지 당 출력 레코드 최대 수. 보통 20~100 범위 권장. (기본: 100)"},"records":{"type":"integer","description":"데이터베이스 내 검색된 전체 레코드 수."},"pages":{"type":"integer","description":"전체 페이지 수. (ceil(records/limit))"}},"required":["current","limit","records","pages"]}}},"completed":192,"total":206,"step":0,"created_at":"2025-07-24T19:16:09.297Z"},"tokenUsage":{"facade":{"aggregate":{"total":2524541,"input":{"total":2407793,"cached":103168},"output":{"total":116748,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2524541,"input":{"total":2407793,"cached":103168},"output":{"total":116748,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2524541,"input":{"total":2407793,"cached":103168},"output":{"total":116748,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2524541,"input":{"total":2407793,"cached":103168},"output":{"total":116748,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IBoard.ICreate":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Unique identifier for the board category to which this board belongs. This value should correspond to the actual UUID of a category row in the discussionboard_board_categories table. This field is required to maintain proper board organization and ensure referential integrity within the system. Example: 'a29c6e1f-0a03-4ad3-9d07-cc019cac1019'."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Unique identifier for the section (from discussionboard_sections) that contains this board. This field enables precise navigation and categorization. It must be a valid existing UUID value. Example: 'b3328e2e-4b4f-4be2-8e82-f57dd6d25e02'."},"name":{"type":"string","description":"Human-readable board name used for display in navigation, UIs, and search. Names should follow platform guidelines for topic clarity and length. Example: 'Global Economics'."},"code":{"type":"string","description":"Unique code identifier for this board, suitable for URLs, routing, and programmatic lookup. Code uniqueness is enforced per table constraints and must never be duplicated. Example: 'macro_policy'."},"description":{"oneOf":[{"type":"string","description":"Optional short description for this board. Provides additional context in tooltips, list previews, and accessibility features. May be null. Example: 'International analysis and discussion of macroeconomic policy.'"},{"type":"null","description":"Optional short description for this board. Provides additional context in tooltips, list previews, and accessibility features. May be null. Example: 'International analysis and discussion of macroeconomic policy.'"}],"description":"Optional short description for this board. Provides additional context in tooltips, list previews, and accessibility features. May be null. Example: 'International analysis and discussion of macroeconomic policy.'"},"is_active":{"type":"boolean","description":"Flag indicating whether this board is currently accepting new threads and posts. 'true' means active; 'false' means the board is archived or closed."},"is_visible":{"type":"boolean","description":"Boolean flag controlling whether the board is listed to users for navigation and thread creation. 'true' reveals the board to users; 'false' hides it, often used for private, internal, or staff-use boards."}},"required":["discussionboard_board_category_id","discussionboard_section_id","name","code","is_active","is_visible"],"description":"Defines the structure required to create a new board in the discussion forum system (discussionboard_boards).\n\nFields correspond exactly to the board entity schema, supporting proper categorization, navigation, and display."},"IBoard.IUpdate":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"UUID of the new board category, if changing categories. Must reference an existing discussionboard_board_categories record."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"UUID for the new section containing this board, if section is being changed. Must reference an existing discussionboard_sections record."},"name":{"type":"string","description":"Updated display name for the board. Should follow platform board naming guidelines."},"code":{"type":"string","description":"Changed programmatic code for this board. Must remain unique across all board records. Used in URLs and internal lookups."},"description":{"oneOf":[{"type":"string","description":"Changed or updated description to better reflect the board's focus or usage. This value is nullable."},{"type":"null","description":"Changed or updated description to better reflect the board's focus or usage. This value is nullable."}],"description":"Changed or updated description to better reflect the board's focus or usage. This value is nullable."},"is_active":{"type":"boolean","description":"Set to 'true' to activate the board (allow posting/thread creation), or 'false' to archive/lock down the board."},"is_visible":{"type":"boolean","description":"Set to 'true' to make the board visible in navigation, or 'false' to hide it from most users. Hiding does not remove the board but makes it inaccessible except to admin/staff workflows."}},"description":"Describes the updatable fields for an existing board record in the discussion forum. All fields correspond to existing columns in the discussionboard_boards schema. Typical uses include board renaming, changes of visibility, re-categorization, and adjusting activation status.","required":[]},"IDiscussionboardBoardCategory.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Filter by the board category's UUID primary key."},"name":{"type":"string","description":"Filter by category name, supports partial search in UIs or select menus."},"code":{"type":"string","description":"Filter by the unique programmatic code for the category (e.g., 'economics'). Useful for configuration, migration, and analytics."},"description":{"type":"string","description":"Search filter for free-text in category description. Optional; used for admin dashboards or descriptive search in advanced UIs."},"position":{"type":"integer","description":"Integer for sorting or selecting by UI/administrative position/order. Used by frontends for display sequence."},"created_at":{"type":"string","format":"date-time","description":"Filter/search by creation timestamp. ISO 8601 format. May be used for analytics, auditing, or recency filters."}},"description":"Request schema for searching, paginating, or filtering board category entities. Only fields available in the discussionboard_board_categories table are permitted. Used by PATCH list operations or admin panels for complex filtering.","required":[]},"IPageDiscussionboardBoardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardCategory"},"description":"Array of board category entities returned by search or pagination."}},"required":["pagination","data"],"description":"Paginated result container for arrays of board category entities as returned by list/search PATCH operations. Standard wrapper per OpenAPI and IPage conventions."},"IDiscussionboardBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the board category. Serves as the primary key and allows each category entity to be referenced, edited, or removed."},"name":{"type":"string","description":"Unique category name, human-readable for UI and admin management. Example: 'Global Economics'. Required and indexed."},"code":{"type":"string","description":"Short programmatic code for the category, used in configuration, URLs, and scripts. Example: 'econ'. Must be unique."},"description":{"oneOf":[{"type":"string","description":"Long description, optional. Used by dashboards, tooltips, category previews, and accessibility features. Nullable."},{"type":"null","description":"Long description, optional. Used by dashboards, tooltips, category previews, and accessibility features. Nullable."}],"description":"Long description, optional. Used by dashboards, tooltips, category previews, and accessibility features. Nullable."},"position":{"type":"integer","description":"Manual ordering integer for display and sorting in the UI. Lower numbers generally appear higher in lists. Set by admins."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of board category creation (ISO 8601). Used for audit, display, and ordering."}},"required":["id","name","code","position","created_at"],"description":"Describes the properties of a board category entity in the discussion board system (discussionboard_board_categories). Used for management, navigation, analytics, and UI display. All properties enforced by schema."},"IDiscussionboardBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Display name for the new board category. Must be unique and descriptive for admin and user navigation panels. Example: 'Policy Debates'."},"code":{"type":"string","description":"Programmatic code for the new board category. Used internally for routing, queries, URLs, etc. Must be unique. Example: 'policy'."},"description":{"oneOf":[{"type":"string","description":"Optional longer explanation of this category. Displayed in UI, tooltips, and figure captions. Nullable."},{"type":"null","description":"Optional longer explanation of this category. Displayed in UI, tooltips, and figure captions. Nullable."}],"description":"Optional longer explanation of this category. Displayed in UI, tooltips, and figure captions. Nullable."},"position":{"type":"integer","description":"Display order for this category, affecting navigation sort. Lower means higher/leftmost/top-most in menu. Required for admin ordering."}},"required":["name","code","position"],"description":"Request body schema for creating new board category entity. All fields correspond to schema columns; must be validated for uniqueness where appropriate."},"IDiscussionboardBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Updated display name for the board category. Must be unique. Used for editing category lists, admin panels, or quick correction."},"code":{"type":"string","description":"Updated internal code for this category. Must remain unique. Used for backend identification and URL mapping."},"description":{"oneOf":[{"type":"string","description":"Optional, updated description giving users/admins more clarity about the category. Nullable."},{"type":"null","description":"Optional, updated description giving users/admins more clarity about the category. Nullable."}],"description":"Optional, updated description giving users/admins more clarity about the category. Nullable."},"position":{"type":"integer","description":"Sort order adjustment for display in navigation. Lower values move category up/higher in lists."}},"description":"Request schema for updating/patching an existing board category. Edit operations can selectively modify any or all fields present in the schema.","required":[]},"IDiscussionboardBoardCategory.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"True if deletion of the board category succeeded; false otherwise."},"deleted_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the deleted board category entity, or null if operation failed."},{"type":"null","format":"uuid","description":"UUID of the deleted board category entity, or null if operation failed."}],"description":"UUID of the deleted board category entity, or null if operation failed."},"reason":{"oneOf":[{"type":"string","description":"Textual reason for failure, if success is false. E.g., 'Not found', 'Constraint violation', etc. Null on success."},{"type":"null","description":"Textual reason for failure, if success is false. E.g., 'Not found', 'Constraint violation', etc. Null on success."}],"description":"Textual reason for failure, if success is false. E.g., 'Not found', 'Constraint violation', etc. Null on success."}},"description":"Result object for delete operation on board category entities. Used to confirm or explain deletion status to the client in hard delete workflows.","required":[]},"IDiscussionboardBoardSetting.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Filter for the board settings entity's UUID, as primary key."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter by the board's UUID which this settings entry is attached to. Supports board-specific configuration panels and audits."},"is_locked":{"type":"boolean","description":"Query/filter setting for lock status (true=locked, false=open). Controls moderation/maintenance workflows."},"require_approval_for_posting":{"type":"boolean","description":"Filter settings where posting requires moderator/admin approval. Used for admin configuration views."},"max_posts_per_hour":{"type":"integer","description":"Numeric filter for max allowed posts per user per hour. Used in analytics and anti-spam configuration dashboards."},"allow_anonymous_viewing":{"type":"boolean","description":"Filter for boards allowing read access to unauthenticated users. Used for public vs. members-only delineation."},"allow_file_uploads":{"type":"boolean","description":"Filter/search for boards where file attachments are enabled. Used for settings panels, moderation views, or file upload compliance."},"created_at":{"type":"string","format":"date-time","description":"Filter/sort by settings row creation timestamp. ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Filter/sort by last modification time of the settings record. Used in admin, analytics, or rollback investigations."}},"description":"Structured search/filter request body for retrieving board settings entities from discussionboard_board_settings. Used for advanced analytics, dashboards, and admin config panels. Only schema properties allowed.","required":[]},"IPageDiscussionboardBoardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardSetting"},"description":"Returned board settings records for the listed page/filter."}},"required":["pagination","data"],"description":"Paginated response wrapper for listing board settings in management/config UIs."},"IDiscussionboardBoardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/UUID for this settings entry. Allows detailed examination or direct deletion."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key referencing the board (discussionboard_boards) which these settings apply to. Each board has exactly one per-board settings entity."},"is_locked":{"type":"boolean","description":"Boolean flag controlling board lock status. Locked boards prevent thread/post creation and show maintenance notices. Admin-only changeable."},"require_approval_for_posting":{"type":"boolean","description":"Whether new threads or posts require moderator/admin approval before becoming visible. True for boards with strict moderation."},"max_posts_per_hour":{"type":"integer","description":"Rate limiting configuration, setting the maximum number of posts a user can submit to this board each hour. Used for anti-spam and compliance."},"allow_anonymous_viewing":{"type":"boolean","description":"If true, allows non-members to read/publicly view board content. If false, restricts access to registered/logged-in members."},"allow_file_uploads":{"type":"boolean","description":"Determines whether file uploads/attachments are permitted on this board. Used for privacy, risk management, and feature toggling."},"created_at":{"type":"string","format":"date-time","description":"Board settings entity creation timestamp. Used in change-tracking and audit UIs."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last settings change, for compliance tracking and rollback."}},"required":["id","discussionboard_board_id","is_locked","require_approval_for_posting","max_posts_per_hour","allow_anonymous_viewing","allow_file_uploads","created_at","updated_at"],"description":"Data type for one board settings entity in discussionboard_board_settings. Used in admin configuration and feature toggling panels. Fulfills requirements for per-board customization of platform features."},"IDiscussionboardBoardSetting.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"References the board which these settings will attach to. Must be an existing board UUID."},"is_locked":{"type":"boolean","description":"Set to true if the board is to be locked at creation (no new posts/threads). False by default."},"require_approval_for_posting":{"type":"boolean","description":"Enforces moderator/admin approval for new threads/posts if true. Used for strict boards."},"max_posts_per_hour":{"type":"integer","description":"Maximum number of posts a user is allowed in this board per hour. Used for anti-spam controls."},"allow_anonymous_viewing":{"type":"boolean","description":"Whether new settings allow non-member viewing (public) or restrict to registered members."},"allow_file_uploads":{"type":"boolean","description":"Flag for whether attachments/uploads are enabled on this board."}},"required":["discussionboard_board_id","is_locked","require_approval_for_posting","max_posts_per_hour","allow_anonymous_viewing","allow_file_uploads"],"description":"Submission schema for creating a new board settings entity. Only schema fields may be supplied. Permissions, audit, and change tracking handled downstream."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number (1-based)."},"limit":{"type":"integer","description":"Maximum number of records per page."},"records":{"type":"integer","description":"Total number of records matching the filter."},"pages":{"type":"integer","description":"Total number of pages for these records, calculated as ceil(records/limit)."}},"required":["current","limit","records","pages"],"description":"Standard pagination information for listing records."}}},"completed":204,"total":206,"step":0,"created_at":"2025-07-24T19:17:03.541Z"},"tokenUsage":{"facade":{"aggregate":{"total":2626023,"input":{"total":2506088,"cached":103168},"output":{"total":119935,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2626023,"input":{"total":2506088,"cached":103168},"output":{"total":119935,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2626023,"input":{"total":2506088,"cached":103168},"output":{"total":119935,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2626023,"input":{"total":2506088,"cached":103168},"output":{"total":119935,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardDataErasureRequest":{"type":"object","description":"Data erasure request entity representing a user's formal request for account/data deletion in the political/economic discussion board platform (refer to discussionboard_data_erasure_requests table).\n\nThis type includes complete, fully normalized tracking for audit, compliance, and privacy workflows. It captures the lifecycle of a request (submission, review, completion), references the requesting member, and stores timestamps for each process stage. The design ensures alignment with regulatory requirements (e.g., GDPR) and allows platform administrators to manage member requests transparently, log processing history, and document rationale for decisions. All properties strictly conform to the underlying Prisma schema.\n\nServes use cases such as: member-initiated deletion, platform privacy report generation, admin review queues, and audit trail lookup. All properties trace a single erasure workflow, supporting both user- and admin-managed transitions. No additional, non-schema fields or workflows exist in this definition.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the data erasure request. Uniquely identifies each erasure submission, allowing reliable lookup for audit, compliance, and workflow management.\n\nMust be a valid UUID format. Assigned on request creation. Used internally for all cross-entity references to this request."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key to the member account initiating the erasure request. Points to discussionboard_members.id, ensuring referential integrity.\n\nThis property guarantees that each erasure submission is directly attributable to a specific user/member account, fulfilling audit and compliance requirements for traceability. Must always match a valid member id."},"status":{"type":"string","description":"Current status of the data erasure request. Reflects its workflow progress: 'pending', 'approved', 'denied', 'completed', or other platform-defined values.\n\nControls access, editability, and triggers for subsequent business processes. Only the instantaneous status is stored—no derived or computed states. String values must align with business logic for request state transitions."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when the member submitted the data erasure request. Must be a valid ISO 8601 date-time string.\n\nUsed for ordering, SLA measurement, and compliance auditing. Cannot be updated after initial creation; establishes the audit trail for regulatory reporting and timeline analysis."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when an admin, moderator, or authorized reviewer first opened, viewed, or acted upon the request in the management interface.\n\nNullable—remains null when the request has not yet been reviewed, set by the system when review action occurs. Enables compliance with prompt/efficient handling standards and audit requirements."},{"type":"null"}],"description":"Timestamp when an admin, moderator, or authorized reviewer first opened, viewed, or acted upon the request in the management interface.\n\nNullable—remains null when the request has not yet been reviewed, set by the system when review action occurs. Enables compliance with prompt/efficient handling standards and audit requirements."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the erasure process was completed or finalized, either by deletion, rejection, or other terminal state.\n\nNullable—unpopulated if the request has not yet reached completion. Set when admin workflow is finished; used for legal documentation and audit trails."},{"type":"null"}],"description":"Timestamp when the erasure process was completed or finalized, either by deletion, rejection, or other terminal state.\n\nNullable—unpopulated if the request has not yet reached completion. Set when admin workflow is finished; used for legal documentation and audit trails."},"admin_remark":{"oneOf":[{"type":"string","description":"Admin- or moderator-supplied comment describing rationale, notes, or compliance explanation for the disposition of the request.\n\nMay be null (optional); included for audit trails, policy transparency, and communication during review/approval/denial workflow. Especially important in compliance or appeal/complaint cases. No computed or derived metadata."},{"type":"null"}],"description":"Admin- or moderator-supplied comment describing rationale, notes, or compliance explanation for the disposition of the request.\n\nMay be null (optional); included for audit trails, policy transparency, and communication during review/approval/denial workflow. Especially important in compliance or appeal/complaint cases. No computed or derived metadata."}},"required":["id","discussionboard_member_id","status","requested_at"]},"IDiscussionboardDataErasureRequest.IUpdate":{"type":"object","description":"Payload for updating a data erasure request record in the platform audit and privacy compliance workflow. Corresponds to the mutable fields in the discussionboard_data_erasure_requests Prisma schema.\n\nSupports administrative or moderation workflows that change the state or metadata of a request (status updates, review completion timestamps, admin remarks, etc).\n\nStrictly limited to fields that are updateable post-creation, as defined by 3NF normalization practices. This variant is required for administrative review interfaces, SLA compliance, and compliance documentation. All updates must be auditable and reference compliant values. No creation-only, immutable, or non-schema fields are permitted in this type.","properties":{"status":{"type":"string","description":"Latest status for this erasure request. Reflects allowed business state transitions (e.g., 'pending' → 'approved'/'denied'/'completed'). Always a valid state string known to the backend/business logic. Updating status is a privilege reserved for admin/mod roles during review."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of when the data erasure request was reviewed by an administrator/moderator. Value must be a valid ISO 8601 date-time or null if not yet reviewed. Used for audit/logging/SLAs; updatable post initial submission."},{"type":"null"}],"description":"Timestamp of when the data erasure request was reviewed by an administrator/moderator. Value must be a valid ISO 8601 date-time or null if not yet reviewed. Used for audit/logging/SLAs; updatable post initial submission."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the erasure process was marked complete (either executed or administratively closed). Must be ISO 8601 date-time or null if not yet completed. Used for compliance deadlines, platform reporting, and audit trail."},{"type":"null"}],"description":"Timestamp when the erasure process was marked complete (either executed or administratively closed). Must be ISO 8601 date-time or null if not yet completed. Used for compliance deadlines, platform reporting, and audit trail."},"admin_remark":{"oneOf":[{"type":"string","description":"Optional comment from admin/mod explaining review decision, compliance rationale, or communication to the member. Freeform string; null if omitted."},{"type":"null"}],"description":"Optional comment from admin/mod explaining review decision, compliance rationale, or communication to the member. Freeform string; null if omitted."}},"required":[]}}},"completed":206,"total":206,"step":0,"created_at":"2025-07-24T19:25:00.401Z"},"tokenUsage":{"facade":{"aggregate":{"total":2756992,"input":{"total":2604289,"cached":103168},"output":{"total":152703,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2756992,"input":{"total":2604289,"cached":103168},"output":{"total":152703,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2756992,"input":{"total":2604289,"cached":103168},"output":{"total":152703,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2756992,"input":{"total":2604289,"cached":103168},"output":{"total":152703,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComplete","document":{"operations":[{"specification":"List all channels for the discussion board system. This operation allows searching and filtering of channels based on their actual fields in the schema: id, code, name, description, position, active, created_at, and updated_at. Supports advanced queries for management, navigation, and analytics. Only references fields present in the Prisma schema discussionboard_channels table. Intended for admins and management UI that needs to view the complete set of channels with potential filters on code, name, active status, or other actual columns. No reference is made to non-existent fields. Pagination, search, and sort may be required by the client as part of this PATCH query. No soft or hard delete logic applies here as this is a list/retrieval endpoint.","description":"Retrieves a list of discussion board channels for management or navigation purposes. The API accepts search, pagination, or filtering parameters to find channels by fields such as code, name, and active status. Uses only actual fields in the discussionboard_channels table (id, code, name, description, position, active, created_at, updated_at). No non-existent fields are referenced. Admins or system UI may query using this endpoint to list all channels, preview their metadata, and navigate to their details or further modify them. Supports use cases such as admin dashboards, setup screens, and analytics panels.","summary":"Lists channels (discussionboard_channels) for search and management.","parameters":[],"requestBody":{"description":"Search and pagination parameters to filter and sort the result set of channels. Only references actual schema fields of discussionboard_channels: id, code, name, description, position, active, created_at, updated_at.","typeName":"IDiscussionboardChannel.IRequest"},"responseBody":{"description":"A list of channels as returned by search/filter in paginated format. Returns all actual fields: id, code, name, description, position, active, created_at, updated_at.","typeName":"IPageDiscussionboardChannel"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/channels","method":"patch"},{"specification":"Retrieve a single discussion board channel with all its details, using the unique id. The response will contain actual fields id, code, name, description, position, active, created_at, and updated_at as defined in the Prisma schema discussionboard_channels. Path parameter 'id' is the unique identifier for the channel row. No non-existent fields are referenced. Intended for admin or UI clients to fetch a single channel configuration for display or edit purposes. Reflects database structure exactly, with no additional logic for deletion (soft or hard).","description":"Fetches a single channel by unique id, returning all data in schema: id, code, name, description, position, active, created_at, updated_at. Uses only fields from discussionboard_channels. Used for detail views, editing screens, or internal platform navigation. Path parameter 'id' is required and must be a UUID. No soft/hard delete logic applies at this endpoint -- simply returns current record data if found. Returns 404 if no such id exists.","summary":"Get detailed channel info (discussionboard_channels) by id.","parameters":[{"name":"id","description":"Unique identifier for the target channel (discussionboard_channels.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed channel record, containing all fields: id, code, name, description, position, active, created_at, updated_at.","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/channels/{id}","method":"get"},{"specification":"Create a new channel for the discussion board. Accepts all required and optional fields for channel creation as defined in the Prisma schema: code (required), name (required), description (optional), position (required), active (required), and automatically populates created_at and updated_at. Does not reference any fields other than those in the schema. No deletion logic applies. Returns the created channel with its values.","description":"Allows an admin or platform manager to add a new channel to the discussion board, specifying the required fields code, name, position, active, and optional description. The API strictly follows the discussionboard_channels schema. Used for initial setup, expansion, or management features where a new category/channel is added for organizing boards. Returned value includes all fields present in the schema, such as id, code, name, description, position, active, created_at, and updated_at, generated accordingly. No extra or non-existent fields are allowed. Fails with validation error if required fields are missing or constraint (e.g., code uniqueness) is violated.","summary":"Create a new channel in discussionboard_channels.","parameters":[],"requestBody":{"description":"Fields for creating a new channel. Follows discussionboard_channels schema fields: code, name, description, position, active.","typeName":"IDiscussionboardChannel.ICreate"},"responseBody":{"description":"The new channel's complete row (all fields per schema, including generated columns).","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/channels","method":"post"},{"specification":"Update an existing channel with the given id. References only the actual fields in the discussionboard_channels schema: code, name, description, position, and active. created_at and updated_at are automatically maintained. Does not reference any deletion fields or logic. The path parameter 'id' is the identifier; the request body contains updatable fields. Response is the updated channel's properties. Does not reference any non-existent fields.","description":"Modifies a discussion board channel identified by its id, updating fields such as code, name, description, position, and active. Uses only fields defined by the schema. For admin use in management UIs or internal platform editing. created_at and updated_at are handled by the backend. Fails with validation error if constraints like code uniqueness are violated, or if the id does not exist. Returns the updated record with its actual schema fields. No reference to soft/hard delete or any non-existent attribute.","summary":"Update channel details (discussionboard_channels) by id.","parameters":[{"name":"id","description":"Identifier for the channel row to update—in the discussionboard_channels schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to be updated for the channel. Only code, name, description, position, active—exactly as defined in the schema.","typeName":"IDiscussionboardChannel.IUpdate"},"responseBody":{"description":"Updated channel data (every field per schema, including generated fields).","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/channels/{id}","method":"put"},{"specification":"Delete an existing channel based on its id. The Prisma schema for discussionboard_channels does NOT have a deleted_at or is_deleted field; thus, this operation performs a hard delete/permanent removal of the row from the table. Accepts the id as path parameter and, if successful, returns a success response. This action cannot be undone. Only actual fields from schema are referenced; does NOT reference soft delete or non-existent audit fields. Mainly intended for admin operations. If the channel has child sections or boards, referential integrity must be managed at the application/database level.","description":"Deletes a channel from the system permanently, as there is no soft delete field in the discussionboard_channels schema. This operation removes the target channel record in entirety. Path parameter id must be provided. Used mainly for admin or configuration UIs, and requires caution as this is a destructive and irreversible operation. If foreign key constraints exist (sections, audit logs), deletion may fail unless those are first handled. Only fields referenced are actual schema fields; no soft delete or non-existent columns mentioned.","summary":"Hard delete a channel (discussionboard_channels) by id.","parameters":[{"name":"id","description":"Id (UUID) of channel to be deleted, per discussionboard_channels schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the delete operation (e.g., success=true/false or deleted entity id).","typeName":"IDiscussionboardChannel.IDeleteResult"},"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/channels/{id}","method":"delete"},{"specification":"List all sections for the discussion board system. This operation searches and filters by section fields in the actual schema: id, discussionboard_channel_id, code, name, description, position, active, created_at, and updated_at. Does not use any non-existent attribute. Used by admin/configuration UIs, setup screens, or navigation tools for full section management. Pagination and filtering enabled only on real fields. No delete logic applies at this endpoint.","description":"Retrieves a list of all sections. May filter or search based on id, channel, code, name, position, active, created_at, or updated_at. All filtering and search strictly reference actual discussionboard_sections schema fields. Used for managing, browsing, or configuring board structure. Does NOT reference or filter by non-existent deletion or soft-delete fields.","summary":"Search/list all sections (discussionboard_sections) for management.","parameters":[],"requestBody":{"description":"Search and pagination parameters for sections. Only real fields allowed: id, discussionboard_channel_id, code, name, description, position, active, created_at, updated_at.","typeName":"IDiscussionboardSection.IRequest"},"responseBody":{"description":"A paginated result set of discussion board sections (all schema fields included in each row).","typeName":"IPageDiscussionboardSection"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/sections","method":"patch"},{"specification":"Retrieve a section for the discussion board by its unique id. This returns all schema-defined fields: id, discussionboard_channel_id, code, name, description, position, active, created_at, and updated_at. The 'id' path parameter is required. Intended for admin panel/detail views. No reference to deletion or non-existent attributes.","description":"Fetches a single section row using its unique id. Returns a detailed object with all fields as defined in the discussionboard_sections schema. Used for editing or detail screens, admin actions, or configuration UIs. 'id' is required and must correspond to the schema field. No reference to delete/soft-delete or fields not present in the schema. Returns 404 if not found.","summary":"Get section detail (discussionboard_sections) by id.","parameters":[{"name":"id","description":"Section row id per discussionboard_sections schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the section, all schema-defined fields.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/sections/{id}","method":"get"},{"specification":"Create a new section for the discussion board system. Accepts all required/optional fields from the discussionboard_sections schema: discussionboard_channel_id, code, name, description, position, active. Timestamps (created_at, updated_at) are generated by the backend. Returns the newly-created section, including all fields specified in the schema. No references to non-existent fields. Does not handle any delete/soft-delete logic.","description":"Enables admins to add a new section, providing all necessary fields as per schema—discussionboard_channel_id, code, name, description (optional), position, and active. Used for structural changes, system setup, or configuring the forum. Response includes all fields: id, discussionboard_channel_id, code, name, description, position, active, created_at, updated_at. Only uses attributes from the Prisma schema. Fails if required constraints (e.g., code uniqueness within channel) are not met.","summary":"Creates a new section (discussionboard_sections).","parameters":[],"requestBody":{"description":"Fields needed to create a section—channel id, code, name, description, position, active.","typeName":"IDiscussionboardSection.ICreate"},"responseBody":{"description":"Newly created section record, all schema fields included.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/sections","method":"post"},{"specification":"Update a section in the discussion board. Only actual fields in discussionboard_sections can be updated: discussionboard_channel_id, code, name, description, position, active. Does not reference non-existent/soft delete fields. Path parameter 'id' is required, as is the request body with updatable attributes. Returns updated section as per the schema, including all mandatory attributes; no extraneous fields returned. Used by admin/config management features.","description":"Modifies a section defined in the discussionboard_sections schema, identified by unique 'id'. Allows updates to fields discussionboard_channel_id, code, name, description, position, active. Only these fields are referenced/affected. On success, returns all attributes in schema (id, discussionboard_channel_id, code, name, description, position, active, created_at, updated_at). Errors if id is missing, not found, or constraints (code/channel uniqueness) are violated. No ref to soft/hard delete or any other non-schema field.","summary":"Update a section (discussionboard_sections) by id.","parameters":[{"name":"id","description":"Section id per the discussionboard_sections schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable section fields: channel id, code, name, description, position, active. Follows schema only.","typeName":"IDiscussionboardSection.IUpdate"},"responseBody":{"description":"The updated section, all fields per schema.","typeName":"IDiscussionboardSection"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/sections/{id}","method":"put"},{"specification":"Delete a section from the discussion board. The schema for discussionboard_sections does NOT include deleted_at, is_deleted, or other soft delete fields, so this is a hard/permanent removal. The 'id' path parameter selects the section to delete. Once removed, the row is gone. Only actual schema fields used; no reference to soft delete or non-existent columns. Intended for admin operations, structural changes, or advanced config flows.","description":"Deletes a discussionboard_sections row permanently. There is no soft delete column in this schema, so the record is physically removed. Path parameter 'id' (UUID) is required to specify the target. References only fields in the schema, does not refer to any deleted, removed, or other soft/hard delete columns. Used for admin or system manager UI. Returns confirmation of successful deletion, or error/404 if not found or on constraint violation.","summary":"Hard delete a section (discussionboard_sections) by id.","parameters":[{"name":"id","description":"Target section's id, per the schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result (success, deleted id, or failure reason) of section delete.","typeName":"IDiscussionboardSection.IDeleteResult"},"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/sections/{id}","method":"delete"},{"specification":"Search or list all discussion board configurations. This endpoint returns all records in discussionboard_configurations, based on filtering/search/pagination on actual fields: id, key, value, description, created_at, and updated_at. Pagination and sorting available; only real schema fields are referenced. No deletion logic is used at this endpoint.","description":"Allows admins to retrieve/search platform-wide configuration rows. Fields used for filtering/search: id, key, value, description, created_at, updated_at. Returns a paginated list, each with full configuration data as in the schema. Used for admin setup, runtime config, or analytic review. Does not refer to non-existent or soft delete fields.","summary":"List/search all system configurations (discussionboard_configurations).","parameters":[],"requestBody":{"description":"Search/filter/pagination params for configuration records. Only real schema fields: id, key, value, description, created_at, updated_at.","typeName":"IDiscussionboardConfiguration.IRequest"},"responseBody":{"description":"Paginated records of all system settings (full data per schema for each).","typeName":"IPageDiscussionboardConfiguration"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/configurations","method":"patch"},{"specification":"Retrieve a single configuration setting for the discussion board system by primary id. Returns all fields as defined in the schema: id, key, value, description, created_at, updated_at. Path param 'id' is required and references only actual schema column. Used for displaying and managing a particular setting in admin/config flows. No ref to soft/hard delete or other non-existent columns.","description":"Allows admin or config UI to fetch a specific configuration row, as defined by id. The response contains all columns: id, key, value, description, created_at, updated_at. Path parameter is required. Only valid for actual records. Does not use or reference any field not present in the schema. Returns 404 if record not found.","summary":"Get config row (discussionboard_configurations) by id.","parameters":[{"name":"id","description":"The primary key id in the discussionboard_configurations table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Record for configuration row (all schema fields included).","typeName":"IDiscussionboardConfiguration"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/configurations/{id}","method":"get"},{"specification":"Create a new configuration item in the discussionboard_configurations table. Each configuration consists of a unique key (string), an optional value (string or null), an optional description (string or null), and audit fields for created_at and updated_at. The API allows admins to add runtime settings and feature flags. No non-schema fields are referenced. There are no soft delete fields, so deletions are hard deletes.","description":"This operation creates a single configuration entry for platform-wide system settings, feature toggles, or policy flags according to the requirements for flexible system control and auditability. The configuration key must be unique, and value is always a string (or null for unset). Description is optional and provides admin context. Audit fields record create/update times, but only the schema fields may be referenced. Security: restricted to admins. Any attempt to add non-unique keys will result in an error. Related operations are modification, deletion, and retrieval by id.","summary":"Create a system configuration record (discussionboard_configurations).","parameters":[],"requestBody":{"description":"System configuration to be created (key, value, description, created_at/updated_at).","typeName":"IDiscussionboardConfiguration.ICreate"},"responseBody":{"description":"The created configuration record.","typeName":"IDiscussionboardConfiguration"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/configurations","method":"post"},{"specification":"Update an existing configuration item in the discussionboard_configurations table by id. Only fields from the schema are allowed. Modification is restricted to the value and description fields. Keys cannot be changed after creation and the primary key is immutable. There are no soft delete fields; out-of-band deletion uses DELETE endpoint.","description":"This operation modifies the value or description of a configuration, identified by its unique id (uuid). The key field remains immutable after creation as per database normalization and operational standards. Attempting to update the key or id field will result in an error. The updated_at field is automatically changed. Only authorized administrators can use this API. The request body follows the update structure defined in the schema. Audit is maintained using the updated_at column, but only schema fields are used.","summary":"Update a system configuration (discussionboard_configurations) by id.","parameters":[{"name":"id","description":"Primary key of the configuration to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Partial updated values for configuration (value and/or description).","typeName":"IDiscussionboardConfiguration.IUpdate"},"responseBody":{"description":"The updated configuration record.","typeName":"IDiscussionboardConfiguration"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/configurations/{id}","method":"put"},{"specification":"Delete an existing configuration from discussionboard_configurations by id. This table has no soft delete or deleted_at field, so deletion is hard (permanent). Deletions cannot be reversed. Only the id field is referenced for deletion and must be a uuid. Admin access required.","description":"This operation permanently removes a configuration record identified by its id (uuid) from the discussionboard_configurations table. There are no soft delete fields like deleted_at, so this operation performs an irreversible hard delete. The configuration key is unique and once its row is deleted, it is no longer recoverable. This endpoint is limited to admins due to the sensitivity of configuration management. No other fields are referenced except the id.","summary":"Permanently delete a configuration (discussionboard_configurations) by id (hard delete).","parameters":[{"name":"id","description":"Primary key of the configuration to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/configurations/{id}","method":"delete"},{"specification":"List/search notification log records in discussionboard_notifications. Supports filtering and pagination by relevant schema fields such as type, delivered, target_id, created_at. This operation returns multiple notification log objects (with all schema fields) to support admin and user audit, tracking, and debugging of system events/releases. There are no soft delete schema fields; data is returned as-is.","description":"This endpoint retrieves a paginated and/or filtered list of notification log records as stored in discussionboard_notifications. Query supports filters by target_id, notification type (string), delivery status (delivered boolean), created_at range, and others directly corresponding to schema fields. Each record includes id, target_id (nullable), type, title, body, delivered, timestamps, and only the actual schema fields. This allows for system and user review of notification history. Pagination/sorting are supported in request body as per established patterns. No soft delete: only unfiltered results are returned.","summary":"Get a paginated and/or filtered list of notification log records (discussionboard_notifications).","parameters":[],"requestBody":{"description":"Filter/search options for notifications (target_id, type, delivered, created_at, pagination).","typeName":"IDiscussionboardNotification.IRequest"},"responseBody":{"description":"Paginated/filtered notification log records according to request filters.","typeName":"IPageIDiscussionboardNotification"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/notifications","method":"patch"},{"specification":"Retrieve a single system notification log record by its id (uuid) from the discussionboard_notifications table. All returned fields must be from the actual schema: id, target_id (nullable), type, title, body (nullable), delivered (boolean), created_at, delivered_at (nullable). No soft delete is present so record is returned if present.","description":"This operation returns the full notification details for a single notification id as stored in discussionboard_notifications. All properties correspond to actual schema fields: id (uuid), target_id (uuid or null), type (string), title, body (nullable string), delivered (boolean, true/false), created_at, delivered_at (nullable). This supports detail review and troubleshooting by authorized users (admin, moderator). If the notification does not exist, an error is returned. Security: role-based as per permissions matrix.","summary":"Get a single notification record by id (discussionboard_notifications).","parameters":[{"name":"id","description":"Primary key id of the notification record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single notification log record.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/notifications/{id}","method":"get"},{"specification":"Create a new notification log record in the discussionboard_notifications table. Required fields are from the schema: type (string), title, delivered (boolean), and created_at. Fields target_id (uuid) and body (string) are optional. No soft-delete fields are present; data is atomic per row by schema definition.","description":"Creates a notification log record representing a system/user event as described in the requirements. The log includes the type (string, e.g., user_mention, announcement), a title, a body (optional), a delivery status (boolean), and optional target_id (uuid) for personalized notifications. The schema's required fields are strictly enforced; created_at timestamp is required either from the request or system clock. Title and type cannot be modified after creation. Only admin or system-level users may create notifications for compliance and audit reasons. There is no undo; use with care.","summary":"Create a notification log entry (discussionboard_notifications).","parameters":[],"requestBody":{"description":"New notification log data (type, title, delivered, created_at, etc).","typeName":"IDiscussionboardNotification.ICreate"},"responseBody":{"description":"The created notification log record.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/notifications","method":"post"},{"specification":"Update an existing notification log record in the discussionboard_notifications table, identified by its id (uuid). Only schema fields may be updated; id is immutable. The operation can modify type, title, body, delivered status, delivered_at, target_id. No soft delete behavior; hard field update only.","description":"Modifies an existing notification in discussionboard_notifications using the update pattern from the business requirements. The changeable fields are type (string), title (string), body (nullable string), delivered (boolean), delivered_at (nullable timestamp), and target_id (uuid or null). Audit fields (created_at) remain immutable as per system design. Only admins may perform this operation. Id and created_at are never changed. Changes are tracked in audit logs (out of band).","summary":"Update a notification log record (discussionboard_notifications) by id.","parameters":[{"name":"id","description":"Primary key of the notification log to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification log details (type, title, body, delivered, delivered_at, target_id).","typeName":"IDiscussionboardNotification.IUpdate"},"responseBody":{"description":"The updated notification log record.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/notifications/{id}","method":"put"},{"specification":"Delete an existing notification log in discussionboard_notifications by its primary id (uuid). No soft delete field exists, so this operation is a permanent, hard delete. Irreversible and only allowed for admin or system-level users. Only id is referenced; data removal is permanent. Use auditing and caution.","description":"This endpoint irreversibly removes a notification log record from discussionboard_notifications by id (uuid). Deletion is hard since there are no soft delete fields or retention time policy in the schema. It is suitable for invalid or accidental log entries that must be purged. Requires admin privileges to use. Related records (e.g., referenced notifications elsewhere) are not affected.","summary":"Permanently delete a notification log record by id (discussionboard_notifications, hard delete).","parameters":[{"name":"id","description":"Primary key of the notification log to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/notifications/{id}","method":"delete"},{"specification":"Search/list settings in the discussionboard_settings table using patch method for complex search/filtering. Settings are stored per context/scope, with key/value pairs. All filtering is on schema fields: scope_id (uuid), scope_type (string), key (string), value (string or null), created_at, updated_at. Supports pagination and complex filters in body. No soft deletion exists; only as-is data is returned.","description":"This API retrieves a list of settings records from discussionboard_settings filtered by schema fields such as scope_id, scope_type, key, value, created_at range, and paginates results. Used for platform/business area feature toggles and operational rules. No soft delete fields exist, so no distinction for deleted items (as only active data is present). Admin role required to access this endpoint. Request body enables advanced search and full compliance with the schema.","summary":"List/search settings in discussionboard_settings (patch, paginated/filterable).","parameters":[],"requestBody":{"description":"Search/filter options for retrieving per-feature/area settings.","typeName":"IDiscussionboardSetting.IRequest"},"responseBody":{"description":"Paginated/filtered setting records according to search.","typeName":"IPageIDiscussionboardSetting"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/settings","method":"patch"},{"specification":"Get a single settings record from discussionboard_settings by id. Only schema fields are returned (id, scope_id, scope_type, key, value, description, created_at, updated_at). No soft delete behavior; returns only active record if present.","description":"Returns a full detail setting record by id from discussionboard_settings. All fields are as stored in schema: id (uuid), scope_id, scope_type, key, value (string or null), description (nullable), created_at, updated_at. Used by admins to review or manage per-scope business rules/configs. Returns error if id not found. No other fields referenced. Admin only.","summary":"Get a single discussionboard_settings record by id.","parameters":[{"name":"id","description":"Primary key id of the setting record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single setting record.","typeName":"IDiscussionboardSetting"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/settings/{id}","method":"get"},{"specification":"Create a new per-scope/per-feature setting in discussionboard_settings. Required fields (from schema): scope_type, key. Optional fields: value (string or null), description (string or null), scope_id (uuid or null). Admins may manage area- or feature-specific settings from business rules or operational need. No soft delete; all fields must exist in schema.","description":"Creates a discussionboard_settings record for a specific scope (e.g., channel, section, feature_flag). Required fields are scope_type and key (both string). Optional: value (string or null), description (string or null), and scope_id (uuid or null for global settings). created_at and updated_at are stamped by the system (not user input). This API gives admins ability to add new toggles/rules contextually. Role-restricted.","summary":"Create a new setting in discussionboard_settings.","parameters":[],"requestBody":{"description":"Setting data for per-feature/area toggle/configuration.","typeName":"IDiscussionboardSetting.ICreate"},"responseBody":{"description":"The created setting record.","typeName":"IDiscussionboardSetting"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/settings","method":"post"},{"specification":"Update an existing setting in discussionboard_settings by id. Updatable fields: scope_id, scope_type, key, value, description (all from schema). No soft delete; update is hard-change to row contents. Audit trail maintained via updated_at. Admin only.","description":"This operation updates fields of a settings record in discussionboard_settings based on the id (uuid). Updatable fields per schema: scope_id (uuid or null), scope_type (string), key (string), value (string or null), description (string or null). Only schema fields are modified, and audit trail is maintained via updated_at (auto). Attempting to update id will result in error. Admin role required.","summary":"Update a setting in discussionboard_settings by id.","parameters":[{"name":"id","description":"Primary key id of the setting record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the target setting (schema fields only).","typeName":"IDiscussionboardSetting.IUpdate"},"responseBody":{"description":"The updated setting record.","typeName":"IDiscussionboardSetting"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/settings/{id}","method":"put"},{"specification":"Implements per-feature or area settings management for the discussion board platform. This operation deletes a discussionboard_settings record identified by its primary key 'id'. Deletion is permanent (hard delete), as the schema includes no soft delete field. This endpoint ensures removal of settings associated with a particular scope, such as a board or channel, supporting precise system administration and configuration hygiene. Care should be taken, as data removal is irreversible and could impact runtime configuration for affected entities.","description":"This endpoint permanently deletes the settings record in the discussionboard_settings table matching the provided id. Since the schema for discussionboard_settings does not include a soft-delete or nullable deleted_at column, this DELETE is implemented as a hard delete.\n\nUse this endpoint for administrative tasks such as removing feature flags, local configuration settings, or when cleaning up obsolete settings. Care must be taken before executing this operation to ensure it does not disrupt required business logic or current platform functionality. Error handling should gracefully respond to missing or already-deleted records with appropriate error messages.\n\nThere are no pre-execution dependencies, but clients should confirm outstanding references or settings dependencies prior to deletion. Use of this endpoint should be restricted to admin users.","summary":"Permanently deletes a discussionboard_settings record (hard delete, no soft delete field present).","parameters":[{"name":"id","description":"Unique identifier of the settings record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/settings/{id}","method":"delete"},{"specification":"Retrieves a paginated, filterable list of discussionboard_audit_logs for compliance, security, and traceability, based on query parameters provided. Returns summary or filtered logs for system-wide audit purposes, supporting admin oversight and moderation review. Implements full text and field-level search, sorting, and time filtering per platform requirements.","description":"This endpoint allows admins, moderators, or privileged auditors to query a collection of audit logs recorded on the discussionboard_audit_logs table. The audit log records include fields such as id, actor_id (the member/admin who performed the action), target_id (entity affected), action (action type), payload (contextual JSON for event), and created_at (event timestamp).\n\nSupports complex searching, date range filtering, and pagination for efficient compliance log review. The endpoint enables monitoring of sensitive changes, role escalations, and moderation activities. Query parameters should conform to allowed fields and be validated to ensure robust, secure access. No request body is required unless extended search/filter objects are specified in future versions.\n\nThere are no dependencies, but this endpoint is typically parsed in analytic dashboards and system compliance reports.","summary":"Retrieves a paginated and filtered list of discussionboard_audit_logs for audit and compliance.","parameters":[],"requestBody":{"description":"Filter and search criteria for audit logs (pagination, action type, actor, date range, etc.).","typeName":"IDiscussionboardAuditLog.IRequest"},"responseBody":{"description":"Paginated response with audit log summaries matching the search and filter criteria.","typeName":"IPageIDiscussionboardAuditLog"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/auditLogs","method":"patch"},{"specification":"Retrieves full details of a single audit log entry for compliance or forensic review. The audit log provides attribution and event context for any critical action performed on the discussion board platform. Implements detailed system monitoring and audit trail compliance.","description":"This endpoint fetches a single discussionboard_audit_logs record corresponding to the supplied id from the path. Returns all atomic fields: id, actor_id (who performed the action), target_id (entity affected, if any), action (type of event), payload (optional event details), and created_at (event timestamp).\n\nThis endpoint is used in system audit dashboards, escalation investigations, and moderation reviews to obtain detailed context about security-sensitive or privileged actions. Access should be restricted to privileged admin or auditor roles for privacy and legal compliance. If no record exists for the provided id, a 404 error is returned.\n\nThere are no pre-execution dependencies, but user must have permissions to access system audit trails.","summary":"Gets a single discussionboard_audit_logs record by id for full compliance detail.","parameters":[{"name":"id","description":"Primary key of the audit log to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full audit log record for the specified id.","typeName":"IDiscussionboardAuditLog"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/auditLogs/{id}","method":"get"},{"specification":"Creates a new audit log record in discussionboard_audit_logs. Used by the system for logging sensitive or privileged actions performed by users (members, moderators, admins). Ensures a comprehensive, immutable audit trail as required for compliance, security, and behavioral protocols.","description":"This endpoint allows internal system processes or (in rare manual cases) admins to create a new record in the discussionboard_audit_logs table. Required fields are: actor_id (who performed the action), action (type of event), and created_at (when it occurred). Optional fields include target_id (entity affected) and payload (JSON-formatted event details).\n\nTypical use cases include logging deletions, role escalations, configuration changes, or moderation interventions. The endpoint supports both automated (system-invoked) and manual logging pathways, with strict validation to ensure audit integrity. Record immutability is enforced at the DB and logical layer.\n\nCare must be taken to prevent unprivileged or user-initiated direct logging, except for certain privileged flows. Successful creation returns the full log record; errors return relevant status codes.","summary":"Creates a new discussionboard_audit_logs record for compliance and traceability.","parameters":[],"requestBody":{"description":"Data for the new audit log record (actor, action, optional target and payload).","typeName":"IDiscussionboardAuditLog.ICreate"},"responseBody":{"description":"The created audit log record with all persisted fields.","typeName":"IDiscussionboardAuditLog"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/auditLogs","method":"post"},{"specification":"Updates a previously created audit log entry. Can only be used for appending additional context or correcting permitted fields; does not alter the original event attribution or timestamp. Enforces compliance and audit integrity; unauthorized updates are denied.","description":"Updates a single record in the discussionboard_audit_logs table by id. Only certain fields may be modifiable according to platform compliance rules—typically the payload for adding context, not core action or attribution fields.\n\nThe operation must validate which fields are supplied and ensure all changes are appropriately tracked. Unauthorized or unauditable modifications should be rejected. Used mainly by system processes with privileged credentials or for correction after compliance review. Returns the updated audit log record for the given id on success; 404 if record does not exist.\n\nPre-execution dependency: proper validation of updatable fields and user permissions is mandatory. Audit trails must reflect this update if the action is applied.","summary":"Updates a discussionboard_audit_logs record for context or correction (restricted fields only).","parameters":[{"name":"id","description":"Unique identifier of the audit log record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the audit log (permitted fields only, like payload).","typeName":"IDiscussionboardAuditLog.IUpdate"},"responseBody":{"description":"The updated audit log record.","typeName":"IDiscussionboardAuditLog"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/auditLogs/{id}","method":"put"},{"specification":"Deletes a discussionboard_audit_logs record by id. This is a permanent (hard) delete, since the schema includes no soft-delete or deleted_at fields. Used for compliance, GDPR requests, or data hygiene under administrative protocols.","description":"This endpoint deletes a specific discussionboard_audit_logs record referenced by the supplied id. Because the table lacks a deleted_at or soft-delete field, deletion is implemented as a hard (irreversible) removal from the database.\n\nIntended only for use by admins and compliance officers, often for legal erasure requests or by explicit authority. There are no automated dependencies—clients are responsible for confirming data eligibility for deletion prior to execution. A successful call permanently erases all audit record data for that id; errors are returned if the record does not exist.","summary":"Permanently deletes a discussionboard_audit_logs record (hard delete only; no soft delete supported).","parameters":[{"name":"id","description":"ID of audit log record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/auditLogs/{id}","method":"delete"},{"specification":"Retrieves a paginated list of members, with support for complex filtering (role, active, etc.), sorting, and pagination as described in the requirements document. Enables management and discovery across the discussionboard_members table for profile and administrative flows.","description":"This endpoint allows admins and moderators to retrieve a paginated and filtered/searchable list of discussionboard_members. The members table includes fields: id (user uuid), username (unique login), email (unique), hashed_password (not exposed publicly), role, is_active (account enabled/disabled), created_at, updated_at, deleted_at (soft-delete marker).\n\nSupports filters for role, activity status, creation timestamp, and comprehensive query operators for management dashboards. Only non-sensitive information is returned in member summaries/pagination lists; details like hashed_password are strictly omitted from normal output. Authorization roles ensure only platform managers access this endpoint.\n\nClients must supply search/filter/pagination parameters in the request body. Returns paginated member records as per the supplied criteria.","summary":"Retrieves a paginated and filtered list of discussionboard_members, excluding sensitive fields.","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for retrieving members.","typeName":"IDiscussionboardMember.IRequest"},"responseBody":{"description":"Paginated response of discussionboard_members summaries.","typeName":"IPageIDiscussionboardMember"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/members","method":"patch"},{"specification":"Fetches a single member's details by id from the discussionboard_members table. Supports administrative user management, member self-access (subject to permission checks), and profile flows. Sensitive credentials/fields are never exposed in outputs.","description":"Retrieves a single discussionboard_members record for the specified id. All profile and status fields are returned: id, username, email, role, is_active, created_at, updated_at, and (if present) deleted_at. The hashed_password is never exposed in any API response. Intended for admin, moderator, or member self-access, subject to permissions. If record not found, returns 404 or equivalent.\n\nThis endpoint is foundational for user navigation, profile view, account management, and administrative processes. It should be protected by layered authorization and privacy controls. No dependencies except for the existence of the id.","summary":"Gets a detailed single discussionboard_members record by id for admin/profile usage.","parameters":[{"name":"id","description":"Primary key value of the member to retrieve (uuid).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full member record except for sensitive credentials.","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/members/{id}","method":"get"},{"specification":"Creates a new member record in discussionboard_members, supporting onboarding/registration or admin-invoked account creation. Excludes sensitive non-user-supplied fields such as system-generated timestamps and soft-deletion status.","description":"Allows clients (registration flow, admin UIs) to create a new discussionboard_members record. Required fields: username (unique), email (unique), hashed_password, role, is_active. System-managed: created_at/updated_at are set by DB logic, not input. The endpoint does not allow the user to set deleted_at directly.\n\nValidation ensures no duplicate username or email. Hashing of the password must occur before storage, with user-supplied plaintext never accepted. Successful creation returns all non-sensitive fields of the new member record. Errors such as constraint violation are reported accordingly. No dependencies except referential rules.","summary":"Creates a new discussionboard_members record, omitting sensitive system-managed fields.","parameters":[],"requestBody":{"description":"All required registration/account creation fields for a member.","typeName":"IDiscussionboardMember.ICreate"},"responseBody":{"description":"The newly created member's record without sensitive fields.","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/members","method":"post"},{"specification":"Updates an existing member in discussionboard_members by id to modify certain fields. Allows updating profile and role information, but never returns or exposes hashed_password. Audit and compliance enforced by system; deleted_at (soft-delete) is not modifiable via this endpoint.","description":"Updates a member record identified by id in the discussionboard_members table. All modifiable fields except hashed_password and system-managed timestamps can be changed according to business logic. Typical usage includes changing username, email, role, is_active status. The response returns the updated member record without hashed_password.\n\nAudit trail for profile/role changes is managed by downstream system logic and compliance layers. Proper validation and unique constraint checking are enforced for username and email. This endpoint supports both admin and user-driven update flows, within scope determined by role-based permissions.","summary":"Updates a discussionboard_members record by id, omitting sensitive/password fields.","parameters":[{"name":"id","description":"Unique id of the member to update (uuid).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the selected member (except for restricted fields).","typeName":"IDiscussionboardMember.IUpdate"},"responseBody":{"description":"The updated member record (excluding hashed_password).","typeName":"IDiscussionboardMember"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/members/{id}","method":"put"},{"specification":"Performs a soft-delete on a member in discussionboard_members by updating the deleted_at field to current timestamp. Record remains in the system for audit/compliance; access and login is disabled. Complies with privacy, data protection, and audit rules specified by the schema.","description":"This endpoint soft-deletes a discussionboard_members record by id, meaning it sets the deleted_at field to the current timestamp, while the data remains present for audit and compliance. Login and access for the given user are suspended; linked records (profile, preferences, etc.) may also be handled downstream for compliance.\n\nAttempting to delete an already soft-deleted or non-existent user should return an appropriate error. This operation is typically executed by admin or via user-initiated account deletion flows governed by privacy policy. Hard deletion (data erasure) is handled by a separate documented process, in compliance with legal requirements.","summary":"Soft deletes a discussionboard_members record (sets deleted_at) for compliance and audit.","parameters":[{"name":"id","description":"Member id of the user to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/members/{id}","method":"delete"},{"specification":"Retrieves a paginated and searchable list of all moderators assigned on the platform, supporting role management, escalations, and compliance reporting. Returns moderator assignment information as found in the discussionboard_moderators table, omitting any sensitive linked member data not part of the moderator assignment model.","description":"Fetches a paginated list of discussionboard_moderators records. The model includes id, member_id (user assigned as moderator), assigned_by_admin_id (admin who assigned), assigned_at (datetime granted), expires_at (datetime if temporary assignment), and revoked_at (datetime if the assignment ended). Excludes direct member details/profile fields—retrieval is limited to records purely about the moderator role assignment.\n\nUseful in admin and role management UIs for monitoring moderator roster, investigating activity patterns, and audit trails.  Includes full filter/sort/pagination capabilities via request body. Access should be restricted to platform managers with appropriate role-based permissions.","summary":"Retrieves a paginated and filterable list of discussionboard_moderators assignments.","parameters":[],"requestBody":{"description":"Search/filter and pagination criteria for moderator assignment records.","typeName":"IDiscussionboardModerator.IRequest"},"responseBody":{"description":"Paginated list of moderator assignment records.","typeName":"IPageIDiscussionboardModerator"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/moderators","method":"patch"},{"specification":"Fetch detailed moderator assignment information by its unique ID, as defined by the discussionboard_moderators entity. This operation retrieves all available fields for a moderator assignment, including id, member_id, assigned_by_admin_id, assigned_at, expires_at, revoked_at. The GET method allows clients to view moderator assignment status, audit their privileges, and analyze assignment metadata for compliance. No soft delete or logical deletion field exists in discussionboard_moderators, so any deleted (removed) records will not be retrievable. This endpoint is typically used by administrators managing moderator permissions, for audit logs, or for presenting moderator status in UI dashboards.","description":"Retrieves complete details about a moderator assignment from the discussionboard_moderators table by its unique id. The endpoint exposes all atomic, normalized moderator assignment attributes, including id (primary key), member_id (linked to discussionboard_members.id identifying the assigned user), assigned_by_admin_id (referencing the administrator who assigned the role), assigned_at (assignment timestamp for audit trails), expires_at (if temporarily assigned), and revoked_at (if role is revoked).\n\nThe moderator assignment's status can be inferred from expires_at and revoked_at values. If revoked_at is set, the assignment is no longer valid. If expires_at is in the past, the assignment is expired. The endpoint exposes only persisted fields and does not derive status; application logic must interpret those fields accordingly for business logic.\n\nSecurity: This operation should be restricted to system users with sufficient privilege (admin or auditor roles), as moderator assignment records are considered sensitive administrative settings. Attempts to access non-existent ids must return a 404 error. Related assignment data may be cross-referenced in audit logs, but those must be queried separately.\n\nThis endpoint does not expose or access any member, admin, or audit information not present in the discussionboard_moderators schema. All returned fields are strictly as defined in the table, with zero soft delete logic present; absence of a record signals removal.","summary":"Get moderator assignment details by id in discussionboard_moderators table.","parameters":[{"name":"id","description":"Unique moderator assignment id (UUID) to fetch","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment details from discussionboard_moderators.","typeName":"IModeratorAssignment"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/moderators/{id}","method":"get"},{"specification":"Create a new moderator assignment to grant moderator privileges to a member. This operation registers a row in the discussionboard_moderators table with all required assignment information, including member_id, assigned_by_admin_id, assigned_at and, optionally, expires_at. No logical or soft-delete fields exist; a created row persists unless subsequently deleted. Use POST for new moderator role grants only. Enforce uniqueness on member_id. The admin assigning the moderator must be validated via assigned_by_admin_id and should comply with escalation procedures. This endpoint ensures auditability for privilege assignment events.","description":"Registers a new moderator assignment by creating a row in the discussionboard_moderators table. Required fields include member_id (linking to the member gaining moderator role), assigned_by_admin_id (referencing the acting admin assigning the role), and assigned_at (timestamp of assignment). expires_at may be set to schedule moderator privilege expiry (temporary role) or left null for a permanent assignment. The schema mandates member_id to be unique, ensuring members cannot have multiple moderator assignments simultaneously.\n\nUpon success, the endpoint returns all persisted assignment details. There are no calculated fields or soft delete logic; deletion of moderator status would require calling the DELETE endpoint. Assignment logic enforces single-assignment for a member and must validate that assigned_by_admin_id references an active administrator. Security protections are mandatory—only system admins can invoke this endpoint, and audit trails should be recorded out of band.\n\nAttempts to create assignments for already-assigned members should fail with a suitable error. No additional personalization, audit attributes, or metadata are provided except those in discussionboard_moderators. Business logic, e.g., auto-expiry or notifications, is not handled by this endpoint.","summary":"Grant moderator privileges to a member (create assignment in discussionboard_moderators).","parameters":[],"requestBody":{"description":"Moderator assignment creation info (member/admin ids, time, optional expiry) for discussionboard_moderators.","typeName":"IModeratorAssignment.ICreate"},"responseBody":{"description":"Newly created moderator assignment record from discussionboard_moderators.","typeName":"IModeratorAssignment"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/moderators","method":"post"},{"specification":"Update a moderator assignment in the discussionboard_moderators table by its unique id. Updateable fields include assigned_by_admin_id, assigned_at, expires_at, revoked_at. This operation allows changing assignment metadata such as reassigning the acting admin, setting a new expiry, or marking the moderator assignment as revoked. No soft delete or logical deletion semantics exist. Updating member_id is not permitted, as it is unique for assignment. PUT allows full replacement of assignment metadata (except id/member_id). Audit all changes for compliance.","description":"Modifies a moderator assignment by id in discussionboard_moderators. Request body should include assigned_by_admin_id (possibly changed if reassignment/override), assigned_at (audit-trace timestamp change), expires_at (for expiry extension/shortening), and revoked_at (for explicit revocation of moderator privileges). No logical deletion field exists; setting revoked_at is the only schema-supported way to end an assignment early. member_id must not be changed given the uniqueness constraint. Audit logs should be generated for all changes, including admin identity and rationale via separate API if required.\n\nBusiness logic for role expiry and revocation must reference the updated field values. If revoked_at is set, consider moderator privileges terminated even if expires_at is in the future. Changes are reflected immediately, and the row is replaced atomically. No derived or cross-table fields are exposed. All data is strictly as persisted in the table.\n\nAccess is restricted to system administrators. Field validation enforces correct UUIDs and timestamp formats. Requests to update non-existent ids return 404. Update succeeds only when the assignment id exists.","summary":"Update moderator assignment metadata in discussionboard_moderators by id.","parameters":[{"name":"id","description":"Moderator assignment id (UUID) to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated assignment metadata (excluding member id) for discussionboard_moderators.","typeName":"IModeratorAssignment.IUpdate"},"responseBody":{"description":"Updated moderator assignment data from discussionboard_moderators.","typeName":"IModeratorAssignment"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/moderators/{id}","method":"put"},{"specification":"Delete a moderator assignment by id (discussionboard_moderators). Since there is no soft delete or deleted_at field, this will perform a permanent hard delete of the row in accordance with audit/permanent removal business logic. The record will be irrecoverable after this operation. Use with caution—this action fully removes moderator assignment and must be strictly audited. Only system admins may invoke. Attempts to delete a non-existent id return 404. This endpoint is for full removal and does not cascade to member records or other entities.","description":"Deletes a moderator assignment identified by its id from the discussionboard_moderators table. As there is no soft delete field (such as deleted_at or is_deleted), this operation performs a hard delete, permanently removing the assignment record from the database. Consequently, all information pertaining to the assignment is lost, and it becomes impossible to recover or audit the assignment from the main moderator table after deletion. This endpoint only affects the moderator assignment and does not delete, deactivate, or alter the member's status elsewhere.\n\nAdministrative permissions are required. Strict access controls must prevent unauthorized invocation. All deletions should generate out-of-band audit trail records capturing the id, admin actor, timestamp, and rationale, but these are not handled by this API operation itself. If the target id does not exist, a 404 error is returned. No cascade, side effects, or member-level changes occur.\n\nThis endpoint must not attempt to access or report on any fields not present in the schema. All logic is strictly related to the existence and deletion of the moderator assignment row by primary key id.","summary":"Permanently remove moderator assignment (hard delete) by id from discussionboard_moderators.","parameters":[{"name":"id","description":"Moderator assignment id (UUID) for deletion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/moderators/{id}","method":"delete"},{"specification":"List administrator assignments in discussionboard_admins with support for query, filtering, and audit. This operation retrieves a paginated set of administrator assignments, exposing all member/admin assignment metadata for access control review and dashboarding. Query supports result pagination and possibly filtering by assignment fields (assigned_by_admin_id, assigned_at, revoked_at) as available. Use PATCH to allow complex request bodies for search/filter parameters. Access restricted to high-privilege roles for compliance.","description":"Query and list administrator assignments in the discussionboard_admins table. This endpoint supports paginated and filtered retrieval (by fields such as assigned_by_admin_id, assigned_at, revoked_at) as permitted by the schema. Each administrator assignment includes all atomic entity fields: id, member_id (who has admin privileges), assigned_by_admin_id (who assigned the privilege), assigned_at (when), and revoked_at (if privilege removed).\n\nTable is fully normalized; no soft delete or logical deletion fields exist. Filtering by active status is determined via revoked_at being null. Supports comprehensive admin privilege auditing and dashboard display, linking results to audit and access management workflows. Pagination, search, and advanced querying (e.g., by assignment time range or status) should be supported via request body parameters (see request schema).\n\nSecurity: Restricted to admin and privileged roles for compliance. Out-of-band audit logging and rationale are not handled in this operation directly, but should be part of broader access control best practices.","summary":"Retrieve a paginated (searchable/filterable) list of admin assignments from discussionboard_admins.","parameters":[],"requestBody":{"description":"Query/search and pagination/filter configuration for discussionboard_admins listing.","typeName":"IAdminAssignment.IRequest"},"responseBody":{"description":"Paginated list of admin assignments from discussionboard_admins.","typeName":"IPageIAdminAssignment"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/admins","method":"patch"},{"specification":"Fetch complete administrator assignment details by id from discussionboard_admins. GET operation provides all entity fields required for permissions management, audit, and compliance. The administrator assignment is identified by a unique id (UUID); returned fields include id, member_id, assigned_by_admin_id, assigned_at, revoked_at. No logical deletion or soft delete is present; record must exist to be fetched. Limited to admin-level access for security and compliance. Primary use is privilege management, security review, and interface presentation.","description":"Returns the full details of an administrator assignment from discussionboard_admins using its unique id (UUID). The returned object includes: id (assignment PK), member_id (the user assigned as admin), assigned_by_admin_id (the admin who performed the assignment), assigned_at (when admin status was granted), and revoked_at (if admin status has been revoked).\n\nNo logical or soft deletion semantics are present in the schema, so absence of the record indicates either no such assignment exists or it has already been removed. Application logic may interpret revoked_at for current/expired status. No other meta/audit/derived data is returned—only persisted schema fields are available.\n\nEndpoint access must be limited to system administrators or audit roles, as administrator assignments are highly sensitive. All logic and data are strictly constrained to visible fields in the table, with thorough parameter security screening. Requests for non-existent ids receive a 404 error.","summary":"Get admin assignment details by id from discussionboard_admins table.","parameters":[{"name":"id","description":"Unique admin assignment id (UUID) to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Admin assignment details from discussionboard_admins.","typeName":"IAdminAssignment"},"authorizationRoles":["admin"],"name":"at","path":"/discussionboard/admins/{id}","method":"get"},{"specification":"Create a new administrator assignment (permissions escalation) for a member in the discussionboard_admins table, granting admin privileges. POST with member_id, assigned_by_admin_id, assigned_at, and (optional) revoked_at for future or retroactive admin role revocation. Enforces one admin assignment per member. This endpoint implements the role escalation business process, with audit and compliance best practices required. All field references are strictly as defined; no soft delete. Only admins can invoke.","description":"Creates a new administrator assignment row in the discussionboard_admins table, granting a member administrator privileges. Required request properties: member_id (target member), assigned_by_admin_id (admin creating the assignment), assigned_at (timestamp of assignment grant). Optionally, revoked_at may be provided if the privilege is revoked during creation. Only one admin assignment may exist per member due to uniqueness. Attempts to assign duplicate admin roles must fail.\n\nThe endpoint returns the full new administrator assignment record upon success. Audit logs and compliance records should be generated out of band, not by this API. All security and privilege escalation rules must be enforced in upstream logic. No additional fields or logic are present in the schema, so only these properties are assigned and returned.\n\nAccess to this operation is restricted to current administrators for security and governance transparency. No soft delete, recovery, or secondary effect logic is provided by this endpoint.","summary":"Grant admin privileges to a member (create assignment in discussionboard_admins).","parameters":[],"requestBody":{"description":"Admin assignment creation info for discussionboard_admins (member/admin ids, time, optional revoked_at).","typeName":"IAdminAssignment.ICreate"},"responseBody":{"description":"New admin assignment record from discussionboard_admins.","typeName":"IAdminAssignment"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/admins","method":"post"},{"specification":"Update an admin assignment by id in the discussionboard_admins table. PUT allows setting assigned_by_admin_id, assigned_at, revoked_at. Operation replaces assignment metadata (excluding id and member_id). No soft delete or logical deletion semantic is present. Uniqueness of member_id still enforced. Use for privilege revocation, reassignment, or correction. Audit trails and security checks are critical.","description":"Updates administrator assignment metadata by unique id in discussionboard_admins. Fields updatable via the request body: assigned_by_admin_id (to change the acting admin), assigned_at (for correction or audit update), revoked_at (to retroactively revoke privileges or restore admin status; null means active, non-null means removed).\n\nThe id and member_id for the assignment cannot be updated; all other fields are writable. There are no computed fields or soft delete—only actual field values are modified and persisted. Operation must maintain the uniqueness/integrity of member_id.\n\nAccess is strictly for current admins. Requests for absent ids return 404. All modification events should also be logged in audit trails outside of this endpoint. The updated assignment object is returned on success; business logic for interpreting status relies on revived_at and assigned_at only.","summary":"Update administrator assignment metadata in discussionboard_admins by id.","parameters":[{"name":"id","description":"Admin assignment id (UUID) to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated assignment metadata (excluding id/member_id) for discussionboard_admins.","typeName":"IAdminAssignment.IUpdate"},"responseBody":{"description":"Updated admin assignment data from discussionboard_admins.","typeName":"IAdminAssignment"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/admins/{id}","method":"put"},{"specification":"Delete an administrator assignment by id (discussionboard_admins). No soft delete, so this endpoint performs an irreversible hard delete, permanently removing the admin privilege assignment record. Only current admins may invoke. Use with caution, and ensure out-of-band audit trails are kept. Operation does not affect member account status—removes only the admin assignment. Use for privilege downgrades, exits, or error correction. Returns 404 if no such id exists.","description":"Permanently deletes an administrator assignment from discussionboard_admins by id. There are no soft delete or logical deletion markers in the schema; this operation hard deletes the admin assignment row, erasing all record of privilege assignment from the table. This action does not impact the status, membership, or existence of the related member account; it affects only admin role assignment tracking.\n\nSecurity: Only currently authorized administrators can perform this operation. Audit logging of deletion actions must occur separately from this API call, capturing at minimum the actor, timestamp, assignment id, and rationale. There are no cascade, side effects, or additional status change effects—this is a direct, permanent removal only.\n\nIf the id is not present, the operation returns a 404 error. No other response is returned on success. No attempt is made to derive or display any fields not present in the persistent schema; all behavior is strictly removal of the assignment row by id.","summary":"Permanently remove admin assignment (hard delete) by id from discussionboard_admins.","parameters":[{"name":"id","description":"Admin assignment id (UUID) to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/admins/{id}","method":"delete"},{"specification":"Query and list member profiles with pagination and search/filter parameters, exposing public profile information only. The discussionboard_member_profiles table includes id (PK), member_id (link to the user), display_name, bio, avatar_url, location, website_url. No personally sensitive or hidden data (such as credentials or deletion status) is exposed, reflecting the table design. The PATCH method enables complex queries and filtered results for public profile listings, roster/badge UI, and member directory search.","description":"Returns a paginated and filterable list of member profiles from the discussionboard_member_profiles table, exposing only public profile data: id, member_id, display_name, bio, avatar_url, location, website_url. Use this endpoint to implement the member directory, public roster, badge listing, or UI popover with user profile details.\n\nNo sensitive fields, authentication data, or logical deletion status is present; only the persisted schema fields in the member profiles table are available. Supports pagination, searching by display_name, and filtering by location or web presence. Security: Only public, limited-scope profile data is returned, with all search parameters supplied via the request body schema.\n\nQueries return paginated result objects. No audit metadata, sensitive credentials, or status flags outside the schema fields is exposed. The endpoint references only the public-facing member profiles, and does not include member account status, email, or login credentials, which are managed in other components.","summary":"Paginated/filterable listing of public member profiles from discussionboard_member_profiles.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for member profile roster query.","typeName":"IMemberProfile.IRequest"},"responseBody":{"description":"Page of public member profiles from discussionboard_member_profiles.","typeName":"IPageIMemberProfile"},"authorizationRoles":null,"name":"index","path":"/discussionboard/memberProfiles","method":"patch"},{"specification":"Get all public fields of a single member profile in discussionboard_member_profiles by its unique id. This endpoint allows fetching profile data for display in member cards, profile pages, or badges. Only id, member_id, display_name, bio, avatar_url, location, and website_url are available; all fields returned are atomic and present in the schema. GET exposes no authentication or hidden metadata. No soft delete or logical deletion status exists to restrict visibility. Returns 404 if the profile does not exist. This operation is public and supported for all users.","description":"Retrieves a specific member profile from discussionboard_member_profiles, identified by profile id (UUID). Returns id, member_id, display_name, bio, avatar_url, location, and website_url. No authentication or password data is exposed, nor any member status or deletion information. Only the fields as defined in the member profile schema are accessible, as all are public profile attributes.\n\nThe record must exist for retrieval; there is no logical deletion, so a missing id triggers a 404. The endpoint is suitable for profile cards, badges, thread popover, or member list display anywhere public user profile info is needed. Data exposure is limited in scope and does not include sensitive authentication, system, or role information. Full account data (credentials, joins, roles) must be accessed with other endpoints.","summary":"Retrieve a single public member profile by id from discussionboard_member_profiles.","parameters":[{"name":"id","description":"Target public member profile id (UUID) to fetch","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Public member profile data from discussionboard_member_profiles.","typeName":"IMemberProfile"},"authorizationRoles":null,"name":"at","path":"/discussionboard/memberProfiles/{id}","method":"get"},{"specification":"Create a member profile by adding a new row to discussionboard_member_profiles. Profiles include public display/search fields only—display_name, bio, avatar_url, location, website_url—and are associated by member_id (much be unique per member). The primary key id is generated/permitted by the API. Creation is only permitted once per member (enforced by uniqueness on member_id). No authentication or deletion data is included in profile records. Returns the full persisted profile on success. Accessible by members for self-profile creation, or by admins for onboarding.","description":"Creates a new public member profile row in discussionboard_member_profiles. Required request fields: member_id (target member for association), display_name (public badge/name), optional bio, optional avatar_url (profile image URI), optional location, and optional website_url. The id primary key may be generated or provided based on API design. All data is public-facing information with no authentication or sensitive status exposure.\n\nUniqueness is enforced on member_id—only one profile may exist per member. Requests for a member with an existing profile must return an error. Upon creation, the API returns all profile fields as persisted in the schema.\n\nThis endpoint is accessible to members for self-profile creation, or to admins for manual registration/onboarding. No account credential, logical deletion, or sensitive status is present in the schema or returned by this endpoint. The profile's scope is exclusively public user information for UX display, directory, or notification personalization.\n","summary":"Create a public member profile (add row to discussionboard_member_profiles).","parameters":[],"requestBody":{"description":"Profile creation data (member id, display fields) for discussionboard_member_profiles.","typeName":"IMemberProfile.ICreate"},"responseBody":{"description":"New public member profile from discussionboard_member_profiles.","typeName":"IMemberProfile"},"authorizationRoles":null,"name":"create","path":"/discussionboard/memberProfiles","method":"post"},{"specification":"Updates a member profile identified by its unique ID. This endpoint allows for changing properties such as display_name, bio, avatar_url, location, and website_url. All updated profile values must correspond exactly to the fields defined in the discussionboard_member_profiles table of the Prisma schema. Fields that are not present in the schema (such as created_by, updated_by, deleted_at, email, etc.) MUST NOT be referenced or updated in this operation. The update replaces the contents of the profile identified by the id path parameter. Soft deletion is not supported here; the operation only updates current values per schema.","description":"This operation enables authorized users to update an existing member profile by its unique ID. Updateable properties include display_name (user's self-chosen name), bio (optional), avatar_url (optional link to profile image), location (optional free text), and website_url (optional website link), as defined in the discussionboard_member_profiles table. All changes are applied atomically as specified in the request body. The endpoint enforces only the update of fields actually present in the schema, with no additional metadata fields. User authorization and update logging should be handled by the application layer. If the profile ID does not exist, a not found error is returned. No soft-delete or restoration features are supported with this endpoint.","summary":"Update a member profile in discussionboard_member_profiles by ID.","parameters":[{"name":"id","description":"Unique profile ID for the member profile to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The properties to update in the member profile, matching discussionboard_member_profiles fields.","typeName":"IMemberProfile.IUpdate"},"responseBody":{"description":"The updated member profile object as defined in the schema.","typeName":"IMemberProfile"},"authorizationRoles":null,"name":"update","path":"/discussionboard/memberProfiles/{id}","method":"put"},{"specification":"Deletes a member profile identified by its unique ID. This endpoint performs a hard delete of the member profile from the discussionboard_member_profiles table, as no soft delete fields (e.g., deleted_at, is_deleted) exist in the Prisma schema for this entity. The profile is permanently removed from the database and cannot be restored using this endpoint. All references to the profile in the database must remain consistent, and only fields present in the actual schema are considered.","description":"This operation deletes a member profile in the discussionboard_member_profiles table, identified by its ID. Because the schema does not implement soft delete fields, the deletion is permanent; all information for the specified profile is removed from storage immediately. The application must ensure that this operation is only available to authorized users (such as the profile owner or an admin). If the ID does not exist, a not found error is returned. This endpoint strictly follows the schema, so no extraneous logic (such as archiving) is performed.","summary":"Hard delete a member profile in discussionboard_member_profiles by ID.","parameters":[{"name":"id","description":"Unique profile ID for the member profile to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/memberProfiles/{id}","method":"delete"},{"specification":"Searches or lists all member preferences with advanced filtering or pagination support. This operation returns a paginated list of member preference records from the discussionboard_member_preferences table, based strictly on the fields present in the schema. Request body specifies optional search, filter, or pagination parameters. No references to fields not present in the schema are permitted. No soft-deleted preferences exist, so only currently present rows are returned.","description":"This endpoint allows querying the collection of member notification and display preferences in the discussionboard_member_preferences table. Supported search and filter criteria must map to properties such as receive_email_notifications, receive_push_notifications, preferred_language, or dark_mode_enabled, all strictly defined in the schema. Pagination, sorting, and filtering must not reference non-existent fields. The response returns only rows that currently exist; no soft-delete or archival states are supported. Only schema-specified properties are returned and may be filtered.","summary":"List/search member preferences from discussionboard_member_preferences with filtering.","parameters":[],"requestBody":{"description":"Search, filter, or pagination criteria for listing member preferences. All properties must map to schema fields.","typeName":"IMemberPreference.IRequest"},"responseBody":{"description":"A paginated result set of member preference records from the database.","typeName":"IPageIMemberPreference"},"authorizationRoles":null,"name":"index","path":"/discussionboard/memberPreferences","method":"patch"},{"specification":"Retrieves the details of a specific member preferences record by its unique ID. Fetches data strictly from the discussionboard_member_preferences table, returning all schema-defined fields and no additional metadata. This endpoint does not reference or support soft deletion, as no such field is present in the schema.","description":"Fetch the current notification, display, and language preferences for the member preference record specified by its unique ID. The returned object includes only the fields receive_email_notifications, receive_push_notifications, preferred_language, and dark_mode_enabled as defined in the schema, along with the member_id reference. No deleted or archived records are handled, as the schema does not support this.","summary":"Get details of a member preference in discussionboard_member_preferences by ID.","parameters":[{"name":"id","description":"Unique ID of the member preferences record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed member preferences record matching the ID.","typeName":"IMemberPreference"},"authorizationRoles":null,"name":"at","path":"/discussionboard/memberPreferences/{id}","method":"get"},{"specification":"Creates a new member preferences record in the discussionboard_member_preferences table, taking the properties from the request body and persisting them directly to fields defined in the schema. All required and optional preference fields must match the schema. No extraneous metadata, soft-deletion markers, or archive features exist. Only permitted schema fields are accepted and saved.","description":"This operation provisions a new member preferences record using all properties specified in the discussionboard_member_preferences table schema. Input values (such as receive_email_notifications, receive_push_notifications, preferred_language, dark_mode_enabled, etc.) must match exactly with those defined in the schema. Upon successful creation, the new record is returned in the response. Fields not present in the schema are rejected. Creation is only possible for currently active members.","summary":"Create new member preferences in discussionboard_member_preferences.","parameters":[],"requestBody":{"description":"Properties for the new member preference, strictly matching schema fields.","typeName":"IMemberPreference.ICreate"},"responseBody":{"description":"The newly created member preferences as stored in the database.","typeName":"IMemberPreference"},"authorizationRoles":null,"name":"create","path":"/discussionboard/memberPreferences","method":"post"},{"specification":"Update a member preferences record identified by its unique ID. The operation allows modification of the fields receive_email_notifications, receive_push_notifications, preferred_language, and dark_mode_enabled, adhering strictly to the schema. No references to metadata or soft-delete fields, as these do not exist for this entity. Updates overwrite current values with those supplied in the request body for schema-defined properties only.","description":"This endpoint updates member preferences in the discussionboard_member_preferences table, matching the specified ID. The request body supplies new values for any of the updateable preferences fields. The service will only update properties defined in the schema, and will reject requests referencing undefined fields or extraneous metadata. Soft deletion and advanced audit fields are not applicable. All changes are applied atomically in one operation.","summary":"Update member preferences in discussionboard_member_preferences by ID.","parameters":[{"name":"id","description":"Unique identifier of the preferences record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update in the record, mapping only to schema fields.","typeName":"IMemberPreference.IUpdate"},"responseBody":{"description":"The updated member preferences as returned by the database.","typeName":"IMemberPreference"},"authorizationRoles":null,"name":"update","path":"/discussionboard/memberPreferences/{id}","method":"put"},{"specification":"Deletes a member preferences record by its ID. The operation removes the preferences record from the discussionboard_member_preferences table, performing a hard delete since no soft-delete or deleted_at field exists in this schema. The operation is permanent and cannot be reversed. Only schema-defined fields and references are affected.","description":"This operation deletes (hard delete) a member preferences record by its ID from the discussionboard_member_preferences table, in compliance with the schema whose table lacks any soft delete or archival markers. All data pertaining to the preferences record is permanently erased. The endpoint should return an error if the ID does not exist or the operation is unauthorized. No recovery, restoration, or archiving is supported via this endpoint.","summary":"Hard delete a member preferences record by ID in discussionboard_member_preferences.","parameters":[{"name":"id","description":"Unique preferences record ID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/memberPreferences/{id}","method":"delete"},{"specification":"Performs advanced search and pagination over discussionboard_boards records, returning a filtered and paginated set of board objects. The operation strictly supports filtering and pagination criteria mapped to fields present in the schema. No references to soft-delete, archive, or undefined properties.","description":"This endpoint lists or searches boards in the discussionboard_boards table. Supported filter and sorting parameters are mapped directly to properties present in the schema such as discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, and updated_at. The endpoint returns a paginated result of board records based strictly on schema properties. There is no support for soft deletion or recovery since the schema lacks such markers. Additional logic regarding moderator assignments or settings must use corresponding endpoints or relationships.","summary":"List/search boards from discussionboard_boards with filtering and pagination.","parameters":[],"requestBody":{"description":"Filter, search, or pagination information mapping to permitted board fields in the schema.","typeName":"IBoard.IRequest"},"responseBody":{"description":"A paginated result set of board records.","typeName":"IPageIBoard"},"authorizationRoles":null,"name":"index","path":"/discussionboard/boards","method":"patch"},{"specification":"Retrieves the detailed information of a board specified by its unique ID from the discussionboard_boards table. It returns all board properties as defined in the schema and is restricted to schema-present fields only. No archival, soft delete, or metadata fields are referenced.","description":"Fetches a single board record using its ID, returning details such as discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, and updated_at, as well as relevant relationships, as defined in the schema. The endpoint will return a not found error if the ID is missing from the database. No deleted/archived or metadata fields are available.","summary":"Get board details from discussionboard_boards by ID.","parameters":[{"name":"id","description":"Unique board ID for the board record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed board record, including all schema-present properties.","typeName":"IBoard"},"authorizationRoles":null,"name":"at","path":"/discussionboard/boards/{id}","method":"get"},{"specification":"Creates a new board record in the discussionboard_boards table using only fields defined in the schema. Supported properties include discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, updated_at, and relationships. No soft-deletion, audit, or extraneous marker fields are permitted.","description":"This endpoint creates a new board entry using the properties defined in the discussionboard_boards schema, such as discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, and updated_at. Only schema-defined fields are accepted in the request body. The operation returns the newly created board record if successful. Application logic must ensure authorization and business rule enforcement; the endpoint itself only handles persistence and retrieval of the schema-present fields.","summary":"Create a new board in discussionboard_boards.","parameters":[],"requestBody":{"description":"Properties for the new board, all strictly mapped to the schema.","typeName":"IBoard.ICreate"},"responseBody":{"description":"The newly created board record as returned by the system.","typeName":"IBoard"},"authorizationRoles":null,"name":"create","path":"/discussionboard/boards","method":"post"},{"specification":"Updates the properties of a specific board record by its ID in the discussionboard_boards table. All updatable fields must correspond directly to those present in the schema. No references to soft-delete, audit fields, or extraneous metadata are made. The update applies atomically to all provided schema fields in the request body.","description":"This endpoint updates a board by its ID, using only properties present in the discussionboard_boards schema such as discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, and updated_at. The update operation overwrites the specified properties with values supplied in the request body. Any reference or attempt to update properties outside the schema is rejected. No soft-delete, archival, or metadata logic is supported with this endpoint.","summary":"Update an existing board by ID in discussionboard_boards.","parameters":[{"name":"id","description":"Unique board ID of the board to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated property values for the board, mapped only to schema fields.","typeName":"IBoard.IUpdate"},"responseBody":{"description":"The updated board record after changes are applied.","typeName":"IBoard"},"authorizationRoles":null,"name":"update","path":"/discussionboard/boards/{id}","method":"put"},{"specification":"Deletes a specific board from the discussionboard_boards table using its unique ID. As the schema does not include soft-deletion fields, the board record is permanently (hard) deleted using this endpoint. Only existing board records identified by ID can be removed.","description":"This operation deletes a board from discussionboard_boards by its unique ID. The deletion is permanent (hard delete) because the table does not contain any fields to support soft deletion (such as deleted_at or is_deleted). The operation affects only the specific board record and no related boards or posts. Requests referencing non-existent or unauthorized records result in an error. No additional logic is supported; archiving must be handled elsewhere if needed.","summary":"Hard delete a board record by ID in discussionboard_boards.","parameters":[{"name":"id","description":"ID of the board record to delete (permanent removal).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/boards/{id}","method":"delete"},{"specification":"Implements list retrieval for board categories in the discussion board system. This operation retrieves multiple board category entities, supporting search, filter, and pagination. It aligns with the discussionboard_board_categories table in the Prisma schema, referencing fields like id, name, code, description, position, and created_at. No fields outside those listed in the schema will be included. This operation is designed for use in board/category management interfaces and public or admin dashboards. It follows the standard API pattern for listing entities and must support search by name or code using parameters, but the actual search properties used must exist in the schema. Results should be paginated according to request parameters conditional on implementation details.","description":"This operation provides a list of board categories by querying the discussionboard_board_categories table. It retrieves all board categories, allowing filter by fields that exist in the schema: id, name, code, description, position, and created_at. Additional query parameters for filtering/sorting should only regard these fields. Common use cases include fetching board category lists for navigation, category management, or admin dashboards. Since the discussionboard_board_categories table does not have soft delete fields, all retrieved data are those present in the database. When performing search operations, ensure only actual columns from the Prisma schema are referenced. The operation must NOT reference deleted_at, created_by, updated_by or any non-existent field.","summary":"Retrieve a list of board categories from the discussionboard_board_categories table.","parameters":[],"requestBody":{"description":"Filter/search/sort information for retrieving board categories. Only schema actual fields may be referenced.","typeName":"IDiscussionboardBoardCategory.IRequest"},"responseBody":{"description":"Paginated response with board category entities from discussionboard_board_categories, using only actual schema fields.","typeName":"IPageDiscussionboardBoardCategory"},"authorizationRoles":null,"name":"index","path":"/discussionboard/boardCategories","method":"patch"},{"specification":"Retrieves a single board category by its unique identifier. The operation targets the discussionboard_board_categories table, strictly returning only existing fields: id, name, code, description, position, and created_at. It is used for viewing the detail of a specific board category within the discussion board, e.g., when displaying or editing category details in a management interface. No reference should be made to non-existent fields. The identifier used in the path is the primary key of discussionboard_board_categories.","description":"This operation returns complete details for a single board category entity from the discussionboard_board_categories table, given its unique id. All available fields in the response must correspond to actual schema fields: id, name, code, description, position, and created_at. Use this endpoint to fetch category detail for admin/category editing forms or detailed category popups in the user interface. The API operation must NOT refer to any field, such as deleted_at or updated_by, that does not exist in the schema. The id path parameter is required and must match the type used for the table's primary key (UUID string).","summary":"Get details of a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"The unique id (UUID) of the board category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full board category entity from discussionboard_board_categories, only using existing schema fields.","typeName":"IDiscussionboardBoardCategory"},"authorizationRoles":null,"name":"at","path":"/discussionboard/boardCategories/{id}","method":"get"},{"specification":"Creates a new board category entity in the discussionboard_board_categories table. All required and optional input fields must exactly match those defined in the Prisma schema, e.g., name, code, description, position, and created_at. This operation should never reference fields that do not exist, such as deleted_at, created_by, or updated_by. It is designed for use by admins or automated processes managing discussion board categories. The API will only accept valid fields as per the schema and will return the full created entity upon success.","description":"This operation inserts a new record into the discussionboard_board_categories table to create a new board category. Only the schema-defined fields are available for request: name, code, description (optional), position, and any audit fields like created_at that are defined in the schema. This operation is typically used in administrative interfaces for category creation. Do not include any nonexistent fields in the creation payload or response. Upon success, the created category entity with all schema fields is returned. Strict validation ensures only real columns are referenced or manipulated.","summary":"Create a new board category (discussionboard_board_categories).","parameters":[],"requestBody":{"description":"Required and optional data for creation of a new board category—all fields must be defined in the Prisma schema.","typeName":"IDiscussionboardBoardCategory.ICreate"},"responseBody":{"description":"The newly created board category entity, with all current schema fields populated.","typeName":"IDiscussionboardBoardCategory"},"authorizationRoles":null,"name":"create","path":"/discussionboard/boardCategories","method":"post"},{"specification":"Updates an existing board category record in the discussionboard_board_categories table. This endpoint allows modification of fields exactly as defined in the schema—name, code, description, position—but must never reference fields that do not exist, like deleted_at or created_by. Used in admin/category management flows where board category properties are adjusted post-creation. The id path parameter is the primary key, identifying which entity to update.","description":"This operation modifies the fields of an existing board category (discussionboard_board_categories) as specified by the id path parameter. Updates must only affect fields that actually exist in the schema: name, code, description, position. Strictly, this endpoint should not support or reference non-existent columns. Validation should ensure that only valid fields are included in both the update request and the response entity. Typical use case: admin edits a board category's name or ordering position. The updated entity is returned on success.","summary":"Update a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"The unique id (UUID) of the board category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for board category update—only actual schema fields may be modified.","typeName":"IDiscussionboardBoardCategory.IUpdate"},"responseBody":{"description":"The updated board category entity, with only actual schema fields.","typeName":"IDiscussionboardBoardCategory"},"authorizationRoles":null,"name":"update","path":"/discussionboard/boardCategories/{id}","method":"put"},{"specification":"Deletes the specified board category from the discussionboard_board_categories table. Since there are no soft delete fields (such as deleted_at or is_deleted) in the Prisma schema for this table, this operation performs a hard delete—that is, it will permanently remove the record from the database. The operation never references non-existent fields and is used in administrative maintenance where category removal is required.","description":"This operation deletes an existing board category record from discussionboard_board_categories by id. It executes a hard delete, permanently removing the entity, because the schema does not define any soft delete fields. This is intended for irreversible removal of board categories as per schema design and critical administrative flows. The API response should confirm deletion with minimal detail since the entity no longer exists. Absolutely no fields other than the actual id primary key will be used in the request; no references to soft delete or audit fields outside the schema.","summary":"Hard delete a board category record by id (discussionboard_board_categories).","parameters":[{"name":"id","description":"The unique id (UUID) of the board category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of permanent (hard) deletion for the specified board category id.","typeName":"IDiscussionboardBoardCategory.IDeleteResult"},"authorizationRoles":null,"name":"erase","path":"/discussionboard/boardCategories/{id}","method":"delete"},{"specification":"Retrieves a list of board settings entities from the discussionboard_board_settings table. The data returned must only contain fields present in the schema: id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, and updated_at. Supports admin views, system settings panels, and configuration management UI. Enables pagination and searching on request, referencing only actual fields in the schema. No deleted_, created_by, updated_by, or other non-existent columns are involved.","description":"This operation returns a paginated or filtered list of board settings as stored in the discussionboard_board_settings table. Only returns and allows filtering/sorting/searching on fields defined in the schema (id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at). Used to power board-level configuration panels, admin dashboards, or for configuration export. Must not reference any non-existent fields in either request or response, per critical schema compliance instructions.","summary":"Retrieve a list of board settings (discussionboard_board_settings).","parameters":[],"requestBody":{"description":"Search/sort/filter information (may reference only actual fields from the board settings schema).","typeName":"IDiscussionboardBoardSetting.IRequest"},"responseBody":{"description":"Paginated board settings collection where each board setting uses only actual schema fields.","typeName":"IPageDiscussionboardBoardSetting"},"authorizationRoles":null,"name":"index","path":"/discussionboard/boardSettings","method":"patch"},{"specification":"Retrieves a specific board settings record by id from the discussionboard_board_settings table. The endpoint must only return and refer to actual columns of the schema: id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at. Used in board-level configuration editors, system config views, or administrative audits. Path parameter id is the table primary key (UUID string). No references to non-existent columns accepted.","description":"Fetch the complete board settings entity for the given id from the discussionboard_board_settings table. The operation will reply with all actual schema fields—id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at. Used for detailed board configuration display or editing workflows. No non-schema fields can be involved. The id is required and must be a valid UUID matching an existing settings row.","summary":"Get board settings by id (discussionboard_board_settings).","parameters":[{"name":"id","description":"The unique id (UUID) of the board setting to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full board setting entity with only schema fields present.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":null,"name":"at","path":"/discussionboard/boardSettings/{id}","method":"get"},{"specification":"Creates a new board settings record in discussionboard_board_settings. All input fields must match schema exactly—discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at. The endpoint strictly prohibits reference to or manipulation of non-existent fields. Provides administrative creation for advanced board configuration in the forum. Responds with the full newly created entity on success, using only schema fields.","description":"This operation inserts a new record into the discussionboard_board_settings table, creating a new board configuration. The creation request must only include fields defined in the schema: discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at (as appropriate). Utilized in admin/system workflows for new board launches or configuration. Response returns the new record with all schema fields. No non-existent fields are accepted in request or response per hard schema compliance rules.","summary":"Create board settings record (discussionboard_board_settings).","parameters":[],"requestBody":{"description":"Input for creating a board settings record—must only reference valid schema fields.","typeName":"IDiscussionboardBoardSetting.ICreate"},"responseBody":{"description":"The created board setting entity containing only actual schema fields.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":null,"name":"create","path":"/discussionboard/boardSettings","method":"post"},{"specification":"Updates an existing discussionboard_board_settings record by id. The endpoint allows updating only fields present in the Prisma schema (discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, updated_at). References or manipulations of non-existent columns are strictly forbidden. Commonly used by administrators for adjusting board configuration post-creation. The record to be updated is identified by its primary key id in the path parameter.","description":"This API operation modifies the configuration fields of a board setting entity specified by id, in discussionboard_board_settings. Update requests and responses interact only with actual schema fields: discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, updated_at. Design excludes any reference to fields which do not exist. Used principally in admin/configuration panels for adjusting board settings as needs evolve. Returns updated settings entity on success, strictly matching table fields.","summary":"Update a board settings record by id (discussionboard_board_settings).","parameters":[{"name":"id","description":"The unique id (UUID) of the board setting to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for board settings; adhere strictly to actual schema columns.","typeName":"IDiscussionboardBoardSetting.IUpdate"},"responseBody":{"description":"The updated board setting entity, with only fields present in the schema.","typeName":"IDiscussionboardBoardSetting"},"authorizationRoles":null,"name":"update","path":"/discussionboard/boardSettings/{id}","method":"put"},{"specification":"Deletes a single discussionboard_board_settings record by id. Since there are no soft delete columns in the schema for board settings, this operation will perform a hard delete—permanently removing the record from the database. The endpoint must only interact with actual Prisma schema fields and not refer to or manipulate any non-existent ones. Use by admins responsible for board configuration in the discussion board.","description":"This operation permanently deletes a board settings record from the discussionboard_board_settings table using the hard delete pattern—as there are no soft delete fields (e.g., deleted_at, is_deleted) in the schema. Takes the id as path parameter, which is the record's primary key. Used in administrator/system flows for configuration cleanup or system changes. No references to other or non-existent columns (including audit or soft delete fields) are permitted on request or in any aspect of this operation. API must confirm the permanent removal of the settings entity.","summary":"Hard delete a board settings record by id (discussionboard_board_settings).","parameters":[{"name":"id","description":"The unique id (UUID) of the board setting to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of hard deletion for this board settings record.","typeName":"IDiscussionboardBoardSetting.IDeleteResult"},"authorizationRoles":null,"name":"erase","path":"/discussionboard/boardSettings/{id}","method":"delete"},{"specification":"Retrieves a list of board-moderator associations from discussionboard_board_moderators. This is used for platform administration and board-moderator relationship management. Each returned entity contains only fields present in the schema: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Filtering/searching is restricted solely to these columns per hard schema compliance. Intended for populating moderator lists, board settings editing, and audit dashboards.","description":"Lists all board to moderator assignment records in discussionboard_board_moderators, returning strictly the current schema fields: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Used for board-moderator management UIs or audit/management functions. Only fields and filter/search/sort/query parameters corresponding to these schema columns are supported. Absolutely no reference to non-existent columns is permitted on any aspect of this operation.","summary":"Retrieve a list of board-moderator assignment records (discussionboard_board_moderators).","parameters":[],"requestBody":{"description":"Filter/search/sort information on fields existing in discussionboard_board_moderators only.","typeName":"IDiscussionboardBoardModerator.IRequest"},"responseBody":{"description":"Paginated/filtered result set of board-moderator assignment records, with only current schema fields present.","typeName":"IPageDiscussionboardBoardModerator"},"authorizationRoles":null,"name":"index","path":"/discussionboard/boardModerators","method":"patch"},{"specification":"Retrieves details for a specific board-moderator assignment given its id. The detail returned is limited to the current schema fields: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Used in administrative moderator assignment forms and moderator/board management UIs. The id used in the path is the primary key for this table. No non-existent fields are referenced or included.","description":"Returns the full details of a single board-moderator link entity by id from discussionboard_board_moderators. The returned object includes schema fields only: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Used to display assignment information, support audit/compliance, or UI for editing board-moderator assignments. The id path parameter is required (UUID type) and identifies which assignment to fetch. Referencing or using any non-existent fields is strictly forbidden by schema compliance.","summary":"Get board-moderator assignment record detail by id (discussionboard_board_moderators).","parameters":[{"name":"id","description":"The unique id (UUID) of the board-moderator assignment record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete board-moderator assignment record, with only present schema fields.","typeName":"IDiscussionboardBoardModerator"},"authorizationRoles":null,"name":"at","path":"/discussionboard/boardModerators/{id}","method":"get"},{"specification":"Creates a new board-moderator assignment, representing the many-to-many relationship between boards and moderators in the political/economic discussion board platform. This endpoint is directly linked to the 'discussionboard_board_moderators' table and is used to assign an existing moderator to a specific board. Only properties present in the schema are included: discussionboard_board_id (board being assigned), discussionboard_moderator_id (the moderator assigned), is_primary (if this moderator is primary), joined_at (when assignment starts). No soft delete or revoke fields; modification and deletion is handled by separate endpoints. This operation is primarily for admin or privileged users.","description":"This endpoint enables platform administrators to create a new record in the 'discussionboard_board_moderators' table, thus assigning a moderator to a specific board. The operation strictly requires both the board id and moderator id, both of which must exist in their respective tables as per foreign key constraints. Additionally, the assignment can specify whether this moderator is considered the primary moderator for the board and the exact join timestamp. There are no soft-delete or revocation fields on this table, so this action is permanent unless separately updated or deleted.\n\nSecurity for this operation must be strictly enforced — only users who are admins may assign moderators to boards. All relationships must be validated against existing boards and moderators to enforce referential integrity. Attempting to assign a moderator who is already assigned to a board should result in an error due to the schema's unique constraint on (discussionboard_board_id, discussionboard_moderator_id).\n\nThe creation operation does not cascade to create members or moderators; these references must exist prior to assignment. Error handling should cover invalid references, violations of unique constraints, and insufficient privileges. Related endpoints include updating (PUT) or deleting (DELETE) board-moderator assignments.\n\nAll properties referenced are present in the schema (discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at), with joined_at representing when the assignment was made. This operation does not affect moderator or board details directly.","summary":"Create a new board-moderator assignment in discussionboard_board_moderators, linking an existing moderator to a board.","parameters":[],"requestBody":{"description":"Information required to assign a moderator to a board, including board id, moderator id, is_primary flag, and joined_at timestamp.","typeName":"IDiscussionboardBoardModerators.ICreate"},"responseBody":{"description":"The newly created board-moderator assignment details.","typeName":"IDiscussionboardBoardModerators"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/boardModerators","method":"post"},{"specification":"Updates an existing board-moderator assignment in the 'discussionboard_board_moderators' table. This operation allows modifying assignment properties such as is_primary or joined_at, but always references a specific assignment by its id (UUID). No soft-delete, revoke, or audit fields exist—only the explicit properties of this table. Used for re-assigning primary moderator status or correcting assignment metadata as per platform admin workflows.","description":"The update endpoint for board-moderator assignments allows an admin to modify the assignment's properties, such as toggling the is_primary flag to designate a primary moderator or altering the joined_at timestamp for audit correction purposes. The update is done via the assignment's unique id (provided in the endpoint path parameter as 'id', type string, format uuid), and the request body contains the assignable properties.\n\nAll updated fields must exist in the schema: is_primary (Boolean), joined_at (DateTime). Since no revoked_at field exists in this table, removal or logical revocation is handled by the DELETE endpoint, not by update. If the assignment does not exist, the endpoint returns a suitable error. Only users with admin rights should be allowed to update moderator assignments.\n\nRelated endpoints for this entity include POST (create new assignments) and DELETE (remove moderator from board). No extraneous or soft delete fields are referenced in the operation; all field references match the schema.","summary":"Update a board-moderator assignment's properties (e.g., is_primary, joined_at) by id.","parameters":[{"name":"id","description":"Target board-moderator assignment's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable properties for a board-moderator assignment: is_primary and joined_at.","typeName":"IDiscussionboardBoardModerators.IUpdate"},"responseBody":{"description":"The updated board-moderator assignment details.","typeName":"IDiscussionboardBoardModerators"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/boardModerators/{id}","method":"put"},{"specification":"Permanently deletes an existing board-moderator assignment from the 'discussionboard_board_moderators' table. No soft-delete or revoke fields are present in this entity—DELETE is a hard delete and removes the assignment entirely from the database. This is used to remove moderator privileges for a specific board. Only admins can perform this operation.","description":"The delete operation on board-moderator assignments will permanently remove the target assignment row from the 'discussionboard_board_moderators' table, identified by its id (UUID). No is_deleted, deleted_at, or revoke fields exist, so this operation is a true hard delete. Attempting to delete a non-existent assignment returns a suitable error. The operation must verify that the provided id exists and that the requesting user has admin privileges.\n\nDeleting the assignment does not affect the moderator or board entities directly; only the link between them is removed. For audit purposes, related events may be recorded in platform logs, but no audit fields are present in the object schema. Related endpoints include creation (POST) and update (PUT) of assignments. All properties and behaviors referenced exist in the schema.","summary":"Hard delete of a board-moderator assignment by id (no soft delete fields exist).","parameters":[{"name":"id","description":"Target board-moderator assignment's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion (may return deleted id or status).","typeName":"IDeleteConfirmation"},"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/boardModerators/{id}","method":"delete"},{"specification":"Retrieves a list of forum threads matching complex search or filtering criteria in the 'discussionboard_threads' table. Uses PATCH due to potentially complex query bodies. Returns a paginated, searchable list of threads with fields strictly matching the Prisma schema (e.g., id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at). Supports filters such as by board, author, creation date, and search by title. Never references non-existent fields.","description":"This endpoint enables clients to retrieve a filtered, paginated list of discussion threads from the 'discussionboard_threads' table, using complex search criteria provided in the request body. Only the actual table columns are included as filter/sort options (id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at). Filtering/sorting/pagination is done purely on these fields; no additional meta or computed fields are assumed.\n\nThread retrieval supports searching by board (board_id), thread author (author_member_id), fulltext/title search, creation/update/deleted_at date ranges, and can return both active and soft-deleted (deleted_at not null) records. No is_deleted or external status fields exist. If a thread is found with deleted_at set, it is considered soft-deleted and may be hidden from normal users. The schema does not contain audit, tags, or status fields outside of the actual columns.","summary":"List/search forum threads with filter/sort/pagination (Prisma fields only) from discussionboard_threads.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination criteria for querying threads; fields must match Prisma schema.","typeName":"IDiscussionboardThreads.IRequest"},"responseBody":{"description":"A paginated list of forum threads matching the request criteria.","typeName":"IPageIDiscussionboardThreads"},"authorizationRoles":null,"name":"index","path":"/discussionboard/threads","method":"patch"},{"specification":"Retrieves a specific discussion thread by its id from the 'discussionboard_threads' table. Only Prisma-defined fields are returned: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Soft delete is represented by deleted_at only.","description":"This endpoint allows clients to fetch a single discussion thread from the 'discussionboard_threads' table by specifying its unique id (UUID) in the path. The returned object includes only fields present in the schema: id, board_id, author_member_id, title, body, created_at, updated_at, and deleted_at. If the thread's deleted_at field is not null, it is considered soft deleted and may not be shown to regular users, but the record still exists in the database.\n\nIf a thread with the given id does not exist, a not-found error is returned. The operation never references fields not defined in the schema. This endpoint is fundamental for viewing the details of a specific thread, supporting full audit and UI display use cases. Related endpoints are PATCH for listing threads, POST for creation, and PUT/DELETE for update/removal.","summary":"Get a specific thread by id from discussionboard_threads, including soft-delete status (deleted_at).","parameters":[{"name":"id","description":"Target thread's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full record of the requested thread from discussionboard_threads.","typeName":"IDiscussionboardThreads"},"authorizationRoles":null,"name":"at","path":"/discussionboard/threads/{id}","method":"get"},{"specification":"Creates a new discussion thread in the 'discussionboard_threads' table. All required fields must be provided according to the schema: board_id (which board), author_member_id (who is posting), title (thread subject), optional body, and system-managed timestamps. The resulting object includes soft delete support via deleted_at, but creation does not set it. Not all fields are user-supplied; some are system-generated (created_at, updated_at).","description":"The thread creation endpoint receives a request body with the required thread parameters: board_id, author_member_id, title, and optional body. The server sets created_at and updated_at timestamps automatically. The deleted_at field is used for soft delete (not set at creation). Only fields defined in the Prisma schema are included or returned. If the provided board or author ids do not exist, the operation fails due to foreign key constraint.\n\nThis operation enables regular members to start new discussion topics inside a specified board. All business logic, including permissions, referential integrity, and rate-limiting (if any), is enforced by the service layer using the provided fields. Audit and workflow policies may capture additional info, but are not represented here. This endpoint is related to PATCH (list/search), GET (retrieve), PUT (update), and DELETE (soft-delete) on threads.","summary":"Create a new thread in discussionboard_threads with title, author, board, and optional body.","parameters":[],"requestBody":{"description":"Fields for creating a new thread: board_id, author_member_id, title, (optional) body.","typeName":"IDiscussionboardThreads.ICreate"},"responseBody":{"description":"The newly created discussion thread as stored in discussionboard_threads.","typeName":"IDiscussionboardThreads"},"authorizationRoles":null,"name":"create","path":"/discussionboard/threads","method":"post"},{"specification":"Updates the properties of a single thread in the 'discussionboard_threads' table, identified by its id. Only Prisma-defined fields can be updated: title, body, and (in some cases) deleted_at (for implementing soft delete/restore by admins/moderation). No external audit fields or flags are included. This endpoint is suitable for both users (editing their thread) and moderators/admins (lock/edit/restore).","description":"This endpoint accepts a PUT request to update the details of an existing thread, identified by the thread id in the path. The body includes fields present in the schema: title (subject), body (main content), and possibly deleted_at for soft delete/restore. Updates to timestamps are managed by the service automatically (updated_at is not received but set on update). Only schema fields can be modified; referential integrity is checked for relationships (e.g., board_id or author_member_id, if included). If the id does not exist, an error is returned. Permission checking must ensure only the author or an authorized moderator/admin can edit/delete/restore the thread; audit policy is enforced outside this schema.\n\nThis operation is critical for thread editing workflows and soft-delete/restore flows. Related endpoints: GET (retrieve thread), PATCH (search/list), POST (create), DELETE (soft delete).","summary":"Update an existing thread by id (title/body/soft-delete) in discussionboard_threads.","parameters":[{"name":"id","description":"Target thread's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable thread fields: title, body, optionally deleted_at for soft-delete/restore. Only actual Prisma fields allowed.","typeName":"IDiscussionboardThreads.IUpdate"},"responseBody":{"description":"The updated discussion thread details from discussionboard_threads.","typeName":"IDiscussionboardThreads"},"authorizationRoles":null,"name":"update","path":"/discussionboard/threads/{id}","method":"put"},{"specification":"Soft-deletes a thread by setting the 'deleted_at' field to the current timestamp in the 'discussionboard_threads' table. Hard delete is not performed as the schema provides soft-delete with a nullable DateTime column. Once soft-deleted, the thread remains in the database but is flagged as deleted. Only possible if deleted_at exists and is nullable.","description":"The DELETE endpoint for threads sets the 'deleted_at' field to the current timestamp on the target thread row (by id), performing a soft delete as directed by the schema (deleted_at is nullable and acts as the soft-delete flag). No hard deletion occurs; the thread remains retrievable by id but should not be shown in most client queries. Attempting to delete a non-existent thread returns an error. Only the thread's author, moderator, or admin should be allowed to perform a soft delete, with permissions enforced outside this schema. Soft-deleted threads can potentially be restored by updating deleted_at back to null using the PUT endpoint.","summary":"Soft-delete a thread by id by setting the deleted_at field; no hard delete is performed.","parameters":[{"name":"id","description":"Target thread's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation that the thread's deleted_at has been set (soft-delete).","typeName":"ISoftDeleteConfirmation"},"authorizationRoles":null,"name":"erase","path":"/discussionboard/threads/{id}","method":"delete"},{"specification":"Retrieve a paginated, filtered list of thread snapshot records from 'discussionboard_thread_snapshots'. Only properties present in the table may be used for searching/sorting: id, thread_id, actor_id, title, body, reason, created_at. Supports advanced lookup for moderation and version control UI. Does not reference or return nonexistent fields or summary info.","description":"This endpoint lets clients retrieve a (possibly filtered/sorted) list of thread snapshot records, supporting audit, content versioning, and moderation flows by providing granular edit history for threads. All search/sort/filter fields must be taken directly from the 'discussionboard_thread_snapshots' schema—e.g., id (uuid), thread_id (uuid, required for matching a thread's snapshots), actor_id (uuid), title (string), created_at (datetime). No non-schema fields are accepted.\n\nSupports pagination for large audit trails. Used for building moderation and admin UIs, showing edit/version timelines, and audit history. The endpoint strictly uses the PATCH method to accept complex searches beyond simple GET url params. Related endpoints: POST (create snapshot), GET (retrieve snapshot by id), PUT (update snapshot if allowed). No extraneous fields or behavior, and never references fields not present in the Prisma schema.","summary":"Paginated, filtered list of thread snapshots from discussionboard_thread_snapshots (for audit/versioning).","parameters":[],"requestBody":{"description":"Criteria for searching/filtering/paginating thread snapshots, limited to schema fields only.","typeName":"IDiscussionboardThreadSnapshots.IRequest"},"responseBody":{"description":"A paginated list of thread snapshot records matching criteria.","typeName":"IPageIDiscussionboardThreadSnapshots"},"authorizationRoles":null,"name":"index","path":"/discussionboard/threadSnapshots","method":"patch"},{"specification":"Retrieve a specific thread snapshot by its id from the 'discussionboard_thread_snapshots' table. Schema defines all retrievable properties: id, thread_id, actor_id, title, body, reason, created_at. No audit trail or extended relationships beyond the actual table columns. Read-only access, no editing or deletion through this endpoint.","description":"Fetches a single snapshot record for a thread by id (UUID), returning all fields defined in the 'discussionboard_thread_snapshots' schema: id, thread_id, actor_id, title, body, reason, created_at. Used for detailed inspection of thread edit history (for moderators/admins or advanced user audit UI). If the snapshot is not found, the endpoint returns a not found error. This endpoint cannot modify or delete snapshots—records are immutable by design.\n\nRelated endpoints: PATCH for list/search, POST for creation, PUT for updates (if allowed by policy, e.g., reason correction). Schema fields only, with no reference to tags, audit log, or unrelated entities.","summary":"Get a thread snapshot by id from discussionboard_thread_snapshots using only schema fields.","parameters":[{"name":"id","description":"Target thread snapshot's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The snapshot record for the thread, as stored in discussionboard_thread_snapshots.","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRoles":null,"name":"at","path":"/discussionboard/threadSnapshots/{id}","method":"get"},{"specification":"Creates a new thread snapshot in 'discussionboard_thread_snapshots' capturing the state of a thread at a point in time for rollback/audit. Fields provided must match schema: thread_id (which thread), actor_id (who made the change, may be null/system), title (snapshot title), optional body, optional reason, created_at (timestamp). system or moderator may trigger. Request body must not include extraneous data—schema fields only.","description":"This endpoint creates a new snapshot record in 'discussionboard_thread_snapshots', capturing the thread's title (required), optional body and reason, associated thread_id, and actor_id (who performed/authorized the change, nullable for system actions). The created_at timestamp should be set by the service at snapshot creation—never set by client. On success, returns the persisted snapshot object (with all schema fields). Validation of thread_id and actor_id (if present) against their respective tables is mandatory. Related endpoints: PATCH (list/search snapshots), GET (by id), PUT (update details—if allowed, e.g., to correct moderation reason). Only properties present in the schema may be included in request/response.","summary":"Create a thread snapshot with title/body/reason and references, as per schema (for version/audit).","parameters":[],"requestBody":{"description":"Information for new thread snapshot: thread_id, actor_id (optional), title, optional body and reason.","typeName":"IDiscussionboardThreadSnapshots.ICreate"},"responseBody":{"description":"Details of the created thread snapshot, as stored (all schema fields).","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRoles":null,"name":"create","path":"/discussionboard/threadSnapshots","method":"post"},{"specification":"Updates fields of an existing thread snapshot (if permitted by policy) by id in the 'discussionboard_thread_snapshots' table. Only updatable schema fields are allowed—title, body, reason, actor_id; created_at is not client updatable. This operation is rare but may be used for moderation reason corrections or typo fixes in audit trail records. No non-schema fields allowed.","description":"This PUT endpoint allows updating certain mutable properties of a thread snapshot, such as title, optional body, reason, or potentially actor_id (for correcting audit info), by referencing the snapshot's id (UUID) in the path. Only properties present in the schema are included: title, body, reason, actor_id. created_at is set by the service and is not modifiable. This endpoint should only be accessible to admins or trusted moderation tools, as snapshots are normally immutable.\n\nIf the snapshot id does not exist, the operation fails with an appropriate error. Patch/list/retrieve (GET, PATCH, POST) endpoints handle normal usage. Audit and logging occur externally, as this table lacks audit fields. Error handling covers uniqueness and foreign key constraints.","summary":"Update (if allowed) the title, body, reason, or actor_id of a thread snapshot record by id.","parameters":[{"name":"id","description":"Target thread snapshot's id (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable thread snapshot fields: title, optional body/reason, actor_id.","typeName":"IDiscussionboardThreadSnapshots.IUpdate"},"responseBody":{"description":"The updated thread snapshot object (all schema fields).","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRoles":null,"name":"update","path":"/discussionboard/threadSnapshots/{id}","method":"put"},{"specification":"Implements the deletion of a thread snapshot entity. The corresponding Prisma model is 'discussionboard_thread_snapshots'. This operation removes a specific thread snapshot from the database by its primary key 'id'. As the schema does not include any soft deletion-related fields (like 'deleted_at' or 'is_deleted'), this endpoint will perform a hard delete, permanently removing the record. Related audit and rollback functionality is managed in other workflow processes outside this endpoint.","description":"This endpoint allows the permanent deletion of a thread snapshot identified by its 'id' field (type: String, UUID). It directly deletes the entry from the 'discussionboard_thread_snapshots' table, which contains versioned copies of thread titles and bodies for audit and history tracking. As there are no soft delete fields defined in the Prisma schema, this operation results in an irreversible removal of the thread snapshot record. Use with care to ensure compliance with strict audit and compliance requirements, as this action cannot be undone. Any application-level references or rollback systems should be updated separately if relevant. If the specified snapshot does not exist, an appropriate error response should be returned. Only authorized roles should invoke this endpoint according to platform policy.","summary":"Hard deletes a thread snapshot in 'discussionboard_thread_snapshots' by id (no soft-delete).","parameters":[{"name":"id","description":"Target thread snapshot's ID (UUID) to be permanently deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/threadSnapshots/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of thread tag assignments from the 'discussionboard_thread_tags' table. Supports advanced searching and filtering by fields like 'thread_id', 'assigned_at', and 'removed_at'. Implements list retrieval workflow for tag assignments with optional filtering, sorting, and pagination parameters as needed by frontend list views or analytics dashboards.","description":"Lists thread tag assignment records from 'discussionboard_thread_tags'. Each record indicates a tag that was assigned to a thread, with 'thread_id', 'assigned_at', and optional 'removed_at' fields. The endpoint supports filtering (e.g., by thread or active-only), sorting (e.g., newest first), and pagination. No soft or hard delete semantics are present; records are mark historical by 'removed_at' not being null. Results should return full tag assignment history as needed for moderation or analytics purposes. Only the fields present in the schema (id, thread_id, assigned_at, removed_at) are exposed. If filtering or pagination options are included in the request body, ensure schema compliance and parameter validation.","summary":"Retrieves a paginated list of thread tag assignments from 'discussionboard_thread_tags'.","parameters":[],"requestBody":{"description":"Filter, sort, and pagination criteria for thread tag listing.","typeName":"IDiscussionboardThreadTag.IRequest"},"responseBody":{"description":"Paginated and filtered list of thread tag assignment entities.","typeName":"IPageDiscussionboardThreadTag"},"authorizationRoles":null,"name":"index","path":"/discussionboard/threadTags","method":"patch"},{"specification":"Retrieves the details of a specific thread tag assignment by its unique identifier (primary key 'id') from 'discussionboard_thread_tags'. This operation returns all atomic fields for the tag assignment, which include 'id', 'thread_id', 'assigned_at', and optionally 'removed_at'. Used for detailed views in moderation, analytics, or rollback scenarios.","description":"Fetches a single thread tag assignment entity from 'discussionboard_thread_tags' by its 'id' (type: String, UUID). The response includes all snapshot fields such as the unique assignment id, which thread it applies to ('thread_id'), the date/time of tag assignment ('assigned_at'), and null or a value for 'removed_at' to indicate if untagged. No soft delete logic exists for this entity; if the record is found it is returned as-is. If the specified 'id' does not exist, an error should be returned. This is a read-only operation governed by general member and moderator access rules.","summary":"Fetches a thread tag assignment from 'discussionboard_thread_tags' by id.","parameters":[{"name":"id","description":"Target thread tag assignment ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the thread tag assignment entity.","typeName":"IDiscussionboardThreadTag"},"authorizationRoles":null,"name":"at","path":"/discussionboard/threadTags/{id}","method":"get"},{"specification":"Creates a new thread tag assignment in 'discussionboard_thread_tags'. This allows tagging a thread with a new tag, recording 'thread_id', 'assigned_at', and initializing 'removed_at' as null for active assignments. As mandated by 3NF, only fields in the schema are accepted and assigned.","description":"Creates a new thread tag assignment entity in 'discussionboard_thread_tags', setting the 'thread_id', 'assigned_at' (timestamp), and with 'removed_at' as null by default. This operation enables the addition of new tags to threads for discoverability and filtering. Any tag assignment must strictly use valid 'thread_id' values, and the payload must not include any fields not present in the schema. Related moderation/audit will track assignment events elsewhere. Returns the complete created entity upon success.","summary":"Creates a new thread tag assignment in 'discussionboard_thread_tags'.","parameters":[],"requestBody":{"description":"Data for creation of a thread tag assignment.","typeName":"IDiscussionboardThreadTag.ICreate"},"responseBody":{"description":"Created thread tag assignment entity.","typeName":"IDiscussionboardThreadTag"},"authorizationRoles":["member","moderator","admin"],"name":"create","path":"/discussionboard/threadTags","method":"post"},{"specification":"Updates an existing thread tag assignment record in 'discussionboard_thread_tags' by id. Fields allowed for patching are strictly those defined in the schema, e.g., updating 'removed_at' field (to support untagging or retraction).","description":"Updates the fields of a thread tag assignment (from 'discussionboard_thread_tags') identified by the primary key 'id'. This operation can only modify fields actually present in the schema, such as marking a tag as removed via the 'removed_at' timestamp. All changes must be compliant with the entity's constraints, and the response includes the updated entity. Attempting to update non-existent fields or records should result in an error.","summary":"Updates a thread tag assignment in 'discussionboard_thread_tags' by id.","parameters":[{"name":"id","description":"ID of the thread tag assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the thread tag assignment entity.","typeName":"IDiscussionboardThreadTag.IUpdate"},"responseBody":{"description":"Updated thread tag assignment entity.","typeName":"IDiscussionboardThreadTag"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionboard/threadTags/{id}","method":"put"},{"specification":"Deletes a thread tag assignment record in 'discussionboard_thread_tags' by id. This action fully removes the record from the database as the schema does not feature any soft delete or archival field.","description":"Permanently deletes a thread tag assignment from the table 'discussionboard_thread_tags' by its primary key 'id'. Since there is no 'deleted_at' or similar soft delete marker in the schema, this endpoint performs a hard delete, ensuring the record is irreversibly removed. All application or analytics systems referencing the deleted tag assignment should be updated accordingly. Authorization checks must ensure that this operation is only available to moderators or admins.","summary":"Hard deletes a thread tag assignment in 'discussionboard_thread_tags' by id (no soft-delete).","parameters":[{"name":"id","description":"Target thread tag assignment ID (UUID) for permanent deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/threadTags/{id}","method":"delete"},{"specification":"Paginated list/query operation for discussion posts from the 'discussionboard_posts' table. Supports advanced filtering, ordering, and pagination on actual schema fields, including 'thread_id', 'member_id', 'board_id', 'title', 'is_deleted', and date fields. Never references or supports non-existent fields in filtering results.","description":"Retrieves a paginated, filtered list of post entities from 'discussionboard_posts'. Requests may include filtering by 'discussionboard_thread_id' (to show posts in a thread), 'discussionboard_member_id' (to show posts by member), 'is_deleted' (to include/exclude deleted posts), as well as support for sorting and offset/limit-based pagination. Response contains only fields available in the schema: 'id', 'discussionboard_thread_id', 'discussionboard_member_id', 'discussionboard_board_id', 'title', 'body', 'is_deleted', 'created_at', 'updated_at'. Pagination and search options are handled via the request body. Posts marked 'is_deleted' true are logically deleted (soft-delete) and remain in the database for audit/compliance, not physically removed. No reference is made to non-existent fields. Error on invalid parameters or unauthorized access.","summary":"Retrieves a paginated, filtered list of post entities from 'discussionboard_posts'.","parameters":[],"requestBody":{"description":"Filtering/sorting/pagination criteria for post list query.","typeName":"IDiscussionboardPost.IRequest"},"responseBody":{"description":"Paginated list of discussion post entities.","typeName":"IPageDiscussionboardPost"},"authorizationRoles":null,"name":"index","path":"/discussionboard/posts","method":"patch"},{"specification":"Retrieves a single post entity from 'discussionboard_posts' by its primary key 'id'. Returns only schema-defined columns for the discussion post.","description":"Fetches a single post from 'discussionboard_posts' identified by its ID (type: String, UUID). Response includes all post fields: 'id', 'discussionboard_thread_id', 'discussionboard_member_id', 'discussionboard_board_id', 'title', 'body', 'is_deleted', 'created_at', 'updated_at'. No non-existent fields will be referenced. If the post does not exist, returns an appropriate error. This endpoint may be used by members, moderators, and admins alike for viewing post details, audit, or moderation. Respect soft-deleted posts: if a post's 'is_deleted' is true, it should still be accessible depending on user role or context, per business rules.","summary":"Returns a specific post from 'discussionboard_posts' by id.","parameters":[{"name":"id","description":"ID of the post to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the discussion post entity.","typeName":"IDiscussionboardPost"},"authorizationRoles":null,"name":"at","path":"/discussionboard/posts/{id}","method":"get"},{"specification":"Creates a new post entity in 'discussionboard_posts'. This operation sets all schema-defined fields for a post, including 'discussionboard_thread_id', 'discussionboard_member_id', 'discussionboard_board_id', 'title', 'body', 'is_deleted', and required timestamps. As per schema, 'is_deleted' is a boolean, defaulting to false upon creation unless soft-deleted at time of posting (unusual).","description":"Creates a new post in 'discussionboard_posts' using strictly the fields in the schema. Requires foreign keys to valid thread, board, and member, sets title and body, initializes 'is_deleted' to false by default, and provides timestamps. This endpoint enables members and moderators to post new content to threads/boards. Payload must comply with all schema constraints: only atomic, non-derived post fields can be set. Additional moderation, notification, or audit will be handled by other platform features as needed.","summary":"Creates a new discussion post in 'discussionboard_posts'.","parameters":[],"requestBody":{"description":"Creation payload for the post entity.","typeName":"IDiscussionboardPost.ICreate"},"responseBody":{"description":"Created post entity.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"name":"create","path":"/discussionboard/posts","method":"post"},{"specification":"Updates an existing post in 'discussionboard_posts' identified by 'id'. The request can update only actual schema fields: 'title', 'body', 'is_deleted', and 'updated_at'.","description":"Updates an existing post in 'discussionboard_posts' by its ID. Permitted fields for updating match the schema: 'title', 'body', 'is_deleted' (for soft delete), and 'updated_at'. Trying to update or reference non-existent fields results in schema validation errors. After updating, the endpoint returns the modified post entity containing all schema-defined fields. Use role-appropriate authorization and validate field types strictly according to schema. Returns an error if the post does not exist.","summary":"Updates a post from 'discussionboard_posts' by id.","parameters":[{"name":"id","description":"ID of the post to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the post entity.","typeName":"IDiscussionboardPost.IUpdate"},"responseBody":{"description":"Updated post entity.","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"name":"update","path":"/discussionboard/posts/{id}","method":"put"},{"specification":"Implements soft delete for posts in 'discussionboard_posts' by setting the 'is_deleted' field to true for the specified post. Since the model includes an 'is_deleted' boolean but not a 'deleted_at' timestamp, it performs logical removal, not a physical hard delete. The post remains in the table for audit, moderation, and compliance.","description":"Marks a post in 'discussionboard_posts' as deleted (soft delete) by setting the 'is_deleted' field to true. Operates on the target post identified by its primary key 'id'. No record is ever hard deleted due to the presence of the 'is_deleted' flag. The action is reversible (can be undone by setting is_deleted=false via a PUT update operation if required by business rules). This ensures compliance with the retention and audit requirements, keeping all post data for possible review. Returns appropriate errors for unauthorized access or if the post does not exist.","summary":"Soft deletes a post (marks as deleted using 'is_deleted') in 'discussionboard_posts' by id.","parameters":[{"name":"id","description":"ID of the post to soft delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"name":"erase","path":"/discussionboard/posts/{id}","method":"delete"},{"specification":"Returns a paginated and filtered list of post snapshot versions from the table 'discussionboard_post_snapshots'. This enables audit and version rollback by exposing each historical mutation snapshot of post titles and bodies along with metadata, filtered/sorted by schema fields only.","description":"Retrieves a filtered and paginated set of entries from 'discussionboard_post_snapshots', where each record represents a previous version of a post (for rollback, moderation review, or audit). Supports requesting by 'discussionboard_post_id' (to show all versions of a specific post), filtering by editor, and filtering/sorting by snapshot time ('taken_at'). The result exposes only primary schema fields: id, discussionboard_post_id, editor_member_id, title, body, taken_at. Pagination and filtering are controlled by request body parameters as per schema; any other requested fields must be rejected as invalid.","summary":"Lists and searches post version snapshots in 'discussionboard_post_snapshots'.","parameters":[],"requestBody":{"description":"Filtering/sorting/pagination criteria for post snapshot version listing.","typeName":"IDiscussionboardPostSnapshot.IRequest"},"responseBody":{"description":"Paginated list of post snapshot versions.","typeName":"IPageDiscussionboardPostSnapshot"},"authorizationRoles":["moderator","admin"],"name":"index","path":"/discussionboard/postSnapshots","method":"patch"},{"specification":"Implements retrieval of a single post snapshot by its unique identifier (UUID). This operation allows clients to fetch a snapshot of a post, including the post's title, body, the editor (if recorded), and the time the snapshot was taken. The endpoint is directly mapped to the 'discussionboard_post_snapshots' table, and fields returned are exactly those stored in the schema: id, discussionboard_post_id, editor_member_id, title, body, and taken_at. No extra fields or derived data are included. Only present, schema-defined fields are referenced.","description":"This operation fetches a single post snapshot by its unique identifier, directly from the 'discussionboard_post_snapshots' table. The endpoint returns all relevant fields: the snapshot's id, the associated post id, the optional editor member id (can be null), the title and body as they existed at the time the snapshot was created, and the taken_at timestamp. No other metadata, audit trails, or historical data outside the schema are included. The operation guarantees compliance with the exact column definitions in the schema and does not presume any audit, user, or deletion fields except those defined. If the provided id does not exist, a standard not-found error is returned. The endpoint is read-only.","summary":"Fetch a single discussionboard_post_snapshots entity by id.","parameters":[{"name":"id","description":"Unique identifier of the post snapshot to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns the full details of the specified post snapshot, matching the discussionboard_post_snapshots schema.","typeName":"Idiscussionboard_post_snapshots"},"authorizationRoles":null,"name":"at","path":"/discussionboard/postSnapshots/{id}","method":"get"},{"specification":"Implements the creation of a new post snapshot for audit/version control purposes. This endpoint writes a new row to the 'discussionboard_post_snapshots' table. Required fields per the schema are: id (UUID, usually generated by the backend), discussionboard_post_id (FK), optional editor_member_id (null if not set), title, body, taken_at timestamp. No extra or inferred fields are accepted or stored. Respects 3NF: All fields in the body must map directly to schema columns.","description":"This endpoint allows users (typically editors or the system itself) to create a new post snapshot. The request body must contain fields directly corresponding to the 'discussionboard_post_snapshots' model: discussionboard_post_id (UUID), title (string), body (string), taken_at (timestamp). Optionally, editor_member_id may be set (UUID or null). The id may be supplied by the client or generated server-side according to overall application conventions. The operation validates that no extra, derived, or denormalized fields are allowed; the payload must strictly match the schema. On success, the newly created post snapshot entry is returned. If required fields are missing or malformed, appropriate validation errors are returned.","summary":"Create a new post snapshot (discussionboard_post_snapshots).","parameters":[],"requestBody":{"description":"Post snapshot info adhering to discussionboard_post_snapshots schema.","typeName":"Idiscussionboard_post_snapshots.ICreate"},"responseBody":{"description":"Created snapshot row, per schema.","typeName":"Idiscussionboard_post_snapshots"},"authorizationRoles":null,"name":"create","path":"/discussionboard/postSnapshots","method":"post"},{"specification":"Updates an existing post snapshot identified by id. Only the fields present in the 'discussionboard_post_snapshots' schema are accepted or modified: discussionboard_post_id, editor_member_id, title, body, taken_at timestamp. The id (primary key, UUID) is specified in the path and must match an existing row.","description":"This PUT operation allows updating a post snapshot in the 'discussionboard_post_snapshots' table. The user must specify the snapshot id in the path. The request body includes any or all updatable fields: discussionboard_post_id, editor_member_id (optional or null), title, body, and taken_at. The operation refuses any payload fields outside the schema. The id field itself is used for locating the record and typically not updated. Attempts to update non-existent records result in a not-found error. If validation or referential constraints are violated (e.g., foreign keys do not exist), appropriate errors are returned. No audit trail or extra metadata is written; full compliance with schema only. Operation is fully idempotent.","summary":"Update a specific post snapshot (discussionboard_post_snapshots) by id.","parameters":[{"name":"id","description":"The unique id of the post snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the post snapshot, as defined by the schema.","typeName":"Idiscussionboard_post_snapshots.IUpdate"},"responseBody":{"description":"The updated post snapshot, per schema.","typeName":"Idiscussionboard_post_snapshots"},"authorizationRoles":null,"name":"update","path":"/discussionboard/postSnapshots/{id}","method":"put"},{"specification":"Deletes a specific post snapshot by its unique id. This is a hard-delete operation because the 'discussionboard_post_snapshots' schema does not include any soft delete fields (such as deleted_at, is_deleted, or similar). The operation results in permanent removal of the row from the table. No soft delete or tombstone markers are present in the schema, so the deletion is non-reversible unless restored from backup.","description":"Performs a permanent deletion of the post snapshot identified by the given id in the 'discussionboard_post_snapshots' table. As there are no soft delete or logical deletion columns (like deleted_at or is_deleted) in the schema, this operation removes the row entirely from storage. Attempting to delete a non-existent snapshot id results in a not-found error response. Care should be taken as this operation is destructive and cannot be undone without external restoration.","summary":"Hard-delete a post snapshot (discussionboard_post_snapshots) by id (no soft delete fields exist).","parameters":[{"name":"id","description":"The unique id (UUID) of the post snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/postSnapshots/{id}","method":"delete"},{"specification":"Retrieves a paginated, searchable collection of post vote records from the 'discussionboard_post_votes' table. This PATCH endpoint enables advanced querying (filtering by fields, pagination, sorting) using a structured request body. Only columns present in the schema can be filtered or sorted: id, discussionboard_post_id, discussionboard_member_id, vote_type, and created_at. No derived fields or aggregates are available. The operation supports listing, searching, and analyzing post votes within the constraints of the schema.","description":"This operation fetches a list of post vote entries from the 'discussionboard_post_votes' table, supporting pagination, searching, and filtering based strictly on schema fields: id, discussionboard_post_id, discussionboard_member_id, vote_type, and created_at. Clients may specify search parameters and sorting options in the request body (see the Idiscussionboard_post_votes.IRequest schema for permitted fields). No extra data or denormalized fields are included. Results are returned in a standardized, paged container as defined by convention (IPageIdiscussionboard_post_votes). Errors are returned if any request fields do not exist in the schema.","summary":"List/search post votes (discussionboard_post_votes) with paging and filter.","parameters":[],"requestBody":{"description":"Query filter, search, paging, and sort options for post votes.","typeName":"Idiscussionboard_post_votes.IRequest"},"responseBody":{"description":"Paged results of post votes per schema.","typeName":"IPageIdiscussionboard_post_votes"},"authorizationRoles":null,"name":"index","path":"/discussionboard/postVotes","method":"patch"},{"specification":"Retrieves a single post vote record from the 'discussionboard_post_votes' table by its unique id (UUID). Returns all fields stored in the schema: id, discussionboard_post_id, discussionboard_member_id, vote_type, created_at. No extra metadata, status, or derived fields are returned. If the provided id does not exist, an error is returned. The operation is strictly read-only and cannot be used for editing/voting actions.","description":"Fetches the details of a single post vote by its id from the 'discussionboard_post_votes' schema. All values for id, discussionboard_post_id, discussionboard_member_id, vote_type, and created_at are returned exactly as stored. No additional data is provided outside the schema. If the id does not match any row in the table, a not-found error is returned. No audit or history data is shown, only the raw schema-defined fields.","summary":"Fetch a single post vote (discussionboard_post_votes) by id.","parameters":[{"name":"id","description":"Unique id (UUID) for the post vote to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post vote as per schema.","typeName":"Idiscussionboard_post_votes"},"authorizationRoles":null,"name":"at","path":"/discussionboard/postVotes/{id}","method":"get"},{"specification":"Creates a new post vote entry in the 'discussionboard_post_votes' table. The request body must include all required fields per schema: discussionboard_post_id (FK, UUID), discussionboard_member_id (FK, UUID), vote_type (integer: 1 for upvote, -1 for downvote, 0 for neutral), and created_at. The operation accepts only fields exactly as defined in the schema and rejects any additional or derived data.","description":"This endpoint records a user's voting action on a post by creating a new row in discussionboard_post_votes. Required request fields are: discussionboard_post_id, discussionboard_member_id, vote_type (must be one of 1, -1, 0), and created_at (timestamp). Id may be client-supplied or generated by the backend as per system convention. The schema enforces only one vote per user per post ('unique([discussionboard_post_id, discussionboard_member_id])'). Extra or denormalized fields will result in validation errors. On success, the new post vote record is returned with all schema fields.","summary":"Cast a new post vote (discussionboard_post_votes).","parameters":[],"requestBody":{"description":"Must match post vote schema for discussionboard_post_votes.","typeName":"Idiscussionboard_post_votes.ICreate"},"responseBody":{"description":"Created vote as per schema.","typeName":"Idiscussionboard_post_votes"},"authorizationRoles":null,"name":"create","path":"/discussionboard/postVotes","method":"post"},{"specification":"Updates fields for an existing post vote entry by id in 'discussionboard_post_votes'. The only mutable fields are those allowed by the schema: discussionboard_post_id, discussionboard_member_id, vote_type (int), created_at. The id in the path is used for row selection and is not changed. No non-schema or denormalized fields may be modified. The operation updates only those fields submitted in the request body and leaves the rest unchanged.","description":"Allows permitted fields in post vote rows in 'discussionboard_post_votes' to be updated. The request body takes schema fields: discussionboard_post_id, discussionboard_member_id, vote_type, created_at. The id path parameter selects the vote to update. Any attempt to mutate non-schema fields or use extra fields is explicitly rejected. Relational and type constraints, including uniqueness ([discussionboard_post_id, discussionboard_member_id]), are enforced by schema and backend. Attempts to update non-existent ids result in not-found errors. Operation is idempotent.","summary":"Update a post vote (discussionboard_post_votes) by id.","parameters":[{"name":"id","description":"Unique id of the post vote to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for the post vote; fields per schema only.","typeName":"Idiscussionboard_post_votes.IUpdate"},"responseBody":{"description":"Updated post vote per schema.","typeName":"Idiscussionboard_post_votes"},"authorizationRoles":null,"name":"update","path":"/discussionboard/postVotes/{id}","method":"put"},{"specification":"Deletes a post vote by its id from the 'discussionboard_post_votes' table. This is a hard delete operation as there are no soft delete markers (e.g., deleted_at, is_deleted) in the schema. The record is physically removed from the database. Idempotent: removing an already deleted/non-existent id returns not-found.","description":"This operation permanently deletes a post vote entry identified by the given id from the 'discussionboard_post_votes' table. As the schema does not contain any soft delete fields, no logical deletion or recovery is available: the row is actually removed. Deletion is not reversible unless restored from backup. Attempting to delete a non-existent record yields a not-found error. All fields referenced are from the schema only; no derived values are used.","summary":"Hard-delete a post vote from discussionboard_post_votes by id (no soft delete exists).","parameters":[{"name":"id","description":"Unique id of the post vote to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/postVotes/{id}","method":"delete"},{"specification":"Performs paged, filtered search over post report records in the 'discussionboard_post_reports' table. All filters and fields support only those columns present in the schema: id, discussionboard_post_id, reporter_member_id, report_type_id, description, created_at. No aggregates, extra, or derived fields are returned. This operation is used for moderation analytics or listing report queues. Returns records in a paged result container, supporting search, sort, and pagination parameters per the IRequest schema.","description":"Retrieves a collection of post reports from the 'discussionboard_post_reports' table. This PATCH operation allows advanced querying: filter by id, post, reporter, report_type, description, or created_at, and supports sorting and pagination. Request body fields must map exactly to schema attributes (see Idiscussionboard_post_reports.IRequest). Extra fields are forbidden. Results are returned in a paged wrapper as per platform standards. Errors occur if unrecognized fields are submitted. Operation is strictly read-only.","summary":"List/search post reports with paging from discussionboard_post_reports (schema fields only).","parameters":[],"requestBody":{"description":"Filtering/sorting/paging info as per schema.","typeName":"Idiscussionboard_post_reports.IRequest"},"responseBody":{"description":"Paged result of post reports, schema fields only.","typeName":"IPageIdiscussionboard_post_reports"},"authorizationRoles":null,"name":"index","path":"/discussionboard/postReports","method":"patch"},{"specification":"Fetches the details of a single post report by its id from the 'discussionboard_post_reports' table. Returns all schema-defined fields: id, discussionboard_post_id, reporter_member_id, report_type_id, description, created_at. No audit or moderation status outside schema is included. Returns not-found if the id is missing.","description":"Given a post report id, retrieves the corresponding post report row from the 'discussionboard_post_reports' table. All fields—id, discussionboard_post_id, reporter_member_id, report_type_id, description, created_at—are returned per schema. No other metadata or derived info is returned. Errors if no report matches the id. The endpoint is read-only and returns data as stored in the record at time of fetch. Only fields present in the schema are referenced in logic and documentation.","summary":"Fetch a single post report by id from discussionboard_post_reports.","parameters":[{"name":"id","description":"Unique id of the post report (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post report record as defined in schema.","typeName":"Idiscussionboard_post_reports"},"authorizationRoles":null,"name":"at","path":"/discussionboard/postReports/{id}","method":"get"},{"specification":"Creates a new post report in the 'discussionboard_post_reports' table. Request must contain all required schema fields: discussionboard_post_id (FK), reporter_member_id (FK), report_type_id (FK), description (nullable string), created_at. The id may be supplied client-side or generated server-side. No other fields or audit/status/extra metadata is accepted. Operation validates payload strictly against the schema. Output is the row as stored in the database; no computed or external context fields allowed.","description":"This POST operation enables the creation of a new post report—used for reporting abusive or inappropriate content. Required request body fields are discussionboard_post_id, reporter_member_id, report_type_id, description (may be null), and created_at timestamp. The operation does not accept any other properties or metadata. On success, returns the created schema-based post report row. Attempts to supply extra or non-schema fields will result in validation errors. Referential integrity is maintained by backend constraints. Documentation and logic refer exclusively to schema-defined fields, not business rules, moderation workflow, or derived status.","summary":"Create a new post report in discussionboard_post_reports (fields per schema).","parameters":[],"requestBody":{"description":"Request body must match post report schema fields strictly.","typeName":"Idiscussionboard_post_reports.ICreate"},"responseBody":{"description":"Created post report row, schema fields only.","typeName":"Idiscussionboard_post_reports"},"authorizationRoles":null,"name":"create","path":"/discussionboard/postReports","method":"post"},{"specification":"Updates an existing post report record in the discussionboard_post_reports table. This entity captures reports made by members against posts, including the post's ID, reporting member's ID, associated report type, optional description, and the report's creation timestamp. This operation allows modifying report details—such as the report type, description, or correcting a reporter/member association—based on actual fields in the schema. All updates must reference a valid report by its unique ID (UUID). Soft deletion is NOT supported as the model has no such field; all modifications must directly alter the intended fields. No additional or non-schema fields may be referenced.","description":"This API operation updates a specific post report in the discussionboard_post_reports table. It allows authorized users or moderators to correct report type, description, or reporting member, as well as reassigning the associated post if needed. Only the actual schema fields—discussionboard_post_id, reporter_member_id, report_type_id, description, and created_at—may be modified (although created_at should rarely be altered except for error recovery/audit). \n\nAll paths for updating must strictly adhere to existing field names and support business rules around moderation. The operation must reference the report to update by its 'id' and apply atomic updates—no bulk modification.\n\nNo soft deletion or status fields exist on this model, so this endpoint must never reference deletion or archival workflow. All error handling must reflect actual database constraints and unique keys.\n\nThis endpoint should be used in moderation/admin tools for correcting reports, not for status transitions. Related list, create, or delete APIs should be used for other functions.","summary":"Updates a single post report in discussionboard_post_reports by ID.","parameters":[{"name":"id","description":"The unique identifier (UUID) for the target discussionboard_post_reports record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated fields for the post report, matching the definition of discussionboard_post_reports (without the primary key).","typeName":"IPostReport.IUpdate"},"responseBody":{"description":"The updated post report entity matching the Prisma schema for discussionboard_post_reports.","typeName":"IPostReport"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionboard/postReports/{id}","method":"put"},{"specification":"Deletes a post report from the discussionboard_post_reports table by its unique ID. As the schema does NOT include any soft-deletion or archival fields (like 'deleted_at' or 'is_deleted'), this operation will perform a HARD DELETE—permanent removal of the record from the database. The operation must reference only the actual fields in the model and must not assume the presence of deletion markers or status flags.","description":"This API operation permanently deletes a specified post report from the discussionboard_post_reports table. The action is IRREVERSIBLE and is appropriate only for cases where the report was erroneous or needs to be removed for compliance reasons. \n\nThe deleted record is identified solely by the 'id' field (UUID) as per schema. Since the table does not support soft deletion or archiving, the row is removed from the database entirely—including all its original information (discussionboard_post_id, reporter_member_id, report_type_id, description, created_at). Response should reflect completion status; if the record is not found, an appropriate error is returned.\n\nOnly authorized moderators or admins may execute this operation. Downstream analytics, moderation history, or audit logs should be handled in related tables by other API calls as needed.\n\nThis operation must NOT reference or set any non-existent fields.","summary":"Permanently deletes a post report from discussionboard_post_reports by ID (hard delete).","parameters":[{"name":"id","description":"The unique identifier (UUID) for the post report to delete from discussionboard_post_reports.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/postReports/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of post references (discussionboard_post_references) based on complex search, filter, or sorting parameters submitted in the request body. This entity represents individual relationships between posts—such as citations, replies, or cross-links—using fields: id, source_post_id, target_post_id, target_thread_id, and reference_type. Results should include advanced options for filtering (by source/target post or thread, type), pagination, and ordering. Bulk retrieval/pagination must not reference or return non-existent fields.","description":"This API operation provides a paginated list of post references (discussionboard_post_references) matching advanced filters. The schema supports filtering by source_post_id (origin post), target_post_id, target_thread_id, and reference_type. The operation accepts a complex search/request object (see request body) and must return a paginated response set, only containing fields present in the model.\n\nCommon use cases include: displaying all citations for a post, reverse-resolving what threads reference a post, bulk-moderation searches, or analytics for user-generated references. The endpoint does not imply, nor should ever reference, any deletion or status fields (because none exist in schema).\n\nPagination metadata (page, size, total count) should be returned in response as per OpenAPI conventions for list endpoints. No status/deletion/soft-delete flags exist on this entity.","summary":"Retrieves filtered list of post references (discussionboard_post_references) based on search and pagination.","parameters":[],"requestBody":{"description":"Complex search/filter/pagination for post references. Only actual model fields and relevant query options allowed.","typeName":"IPostReference.IRequest"},"responseBody":{"description":"Paginated response of post reference records and metadata.","typeName":"IPageIPostReference"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/postReferences","method":"patch"},{"specification":"Retrieves a single post reference from discussionboard_post_references by its unique ID. This table documents relationships from one post to another post or a thread, with the fields: id, source_post_id, target_post_id, target_thread_id, and reference_type. The return must include only these schema fields. This endpoint is read-only and must not reference or return non-existent status or soft delete fields.","description":"Fetches a specific post reference from the discussionboard_post_references entity using its unique 'id'. All returned information corresponds to actual schema fields: id, source_post_id, target_post_id, target_thread_id, reference_type. \n\nThis endpoint enables admins, moderators, or analytics users to trace citations, replies, or cross-links between posts and threads by unique relationship id.\n\nThere are no archival, deletion, or status markers present on this table, so only schema-actual fields are retrieved. If entity not found, returns an appropriate not-found error.","summary":"Retrieves a single post reference by ID from discussionboard_post_references.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the post reference record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the target post reference, matching schema fields.","typeName":"IPostReference"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/postReferences/{id}","method":"get"},{"specification":"Creates a new post reference (discussionboard_post_references) connecting a source post with a target post or thread. Only the actual schema fields may be specified: source_post_id (required), target_post_id (optional), target_thread_id (optional), and reference_type. The operation inserts a new record linking posts or threads together as a citation or cross-link. No status or archival fields may be referenced; only insert atomic schema-specified values.","description":"This API operation creates a new record in discussionboard_post_references, establishing a link between a source post and a target post and/or thread, along with the relation's type (e.g., 'post', 'thread', 'comment' per reference_type string). The request body must supply all required schema fields and may include optional fields as permitted. \n\nThe endpoint is strictly a create operation; no business logic around soft deletion or status exists. The response returns the new post reference with all actual schema fields. Moderation, analytics, or citation workflows are primary use cases. All foreign key fields must refer to valid related records (enforced by application or DB-level foreign key constraints).","summary":"Creates a new post reference in discussionboard_post_references.","parameters":[],"requestBody":{"description":"Post reference creation data as per discussionboard_post_references model's required fields.","typeName":"IPostReference.ICreate"},"responseBody":{"description":"Created post reference entity matching discussionboard_post_references fields.","typeName":"IPostReference"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/discussionboard/postReferences","method":"post"},{"specification":"Updates a post reference record in the discussionboard_post_references table by id. All modifications are direct and atomic (no status or archival model fields exist). Only existing schema fields—source_post_id, target_post_id, target_thread_id, reference_type—may be updated. No references to deletion/soft-delete. This is a point update for a single record identified by primary key.","description":"This API updates a specific post reference in discussionboard_post_references. It allows the reference to be retargeted, type changed, or other schema-compliant field updates. \n\nAll data must strictly correspond to actual schema fields. The endpoint only operates on a single record, identified by 'id' in the path. No additional or soft delete/status fields may be referenced as none exist in the model.\n\nResponse returns the updated post reference. Appropriate permissions and foreign key relationships must be enforced in logic.","summary":"Updates a post reference in discussionboard_post_references by ID.","parameters":[{"name":"id","description":"The UUID key for the post reference record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the post reference. Only schema fields permitted.","typeName":"IPostReference.IUpdate"},"responseBody":{"description":"The updated post reference entity.","typeName":"IPostReference"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionboard/postReferences/{id}","method":"put"},{"specification":"Deletes a post reference from discussionboard_post_references by primary key (UUID). No fields in the schema support soft deletion or archival status. This operation irreversibly removes the record from the table, permanently severing the cross-post/thread relationship. The API must not reference non-existent soft delete fields or status markers.","description":"This API operation irreversibly deletes a post reference entry from discussionboard_post_references. After hard delete, the post and/or thread linkage represented by this record is no longer present. \n\nComplete deletion is enforced; no fields exist for soft deletion, so the row is entirely removed. Access limited to moderators/admins. If the record for the provided 'id' does not exist, an appropriate not found or error response is returned.","summary":"Permanently deletes a post reference in discussionboard_post_references by ID (hard delete).","parameters":[{"name":"id","description":"The UUID primary key for the post reference to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/postReferences/{id}","method":"delete"},{"specification":"Returns a paginated, filtered list of comments from discussionboard_comments, using only fields actually present in the schema: id, discussionboard_post_id, discussionboard_member_id, parent_id, body, created_at, updated_at, deleted_at. The operation supports advanced search or sorting in the request body, with pagination metadata in response. Filtering may include fields such as parent_id (for nested comments), discussionboard_post_id (for post-level thread), and date/time fields. The deleted_at property, if present (non-null), marks a soft deleted comment and should be reflected in results as such; the API must NOT implement hard delete logic for list retrieval.","description":"This endpoint retrieves a list of comments from the discussionboard_comments entity, matching complex query parameters submitted with the request body. Filters may include post association, author, parent comment, nesting, or date/time window. Pagination, search, and sorting must reflect only actual schema fields.\n\nThe schema's deleted_at field enables soft-delete tracking: results must include comments regardless of soft-delete status and display deleted_at as returned by DB.\n\nTypical use cases: loading post discussions, displaying comment threads, moderation of recent comments, or fact-checking audit trails. All returned properties correspond 1:1 with schema fields; never reference or synthesize additional fields.","summary":"Retrieves list of comments from discussionboard_comments with advanced filtering and pagination.","parameters":[],"requestBody":{"description":"Request object for filtering, sorting, and paginating comments. Only actual schema fields allowed.","typeName":"IComment.IRequest"},"responseBody":{"description":"Paginated response containing comment records and metadata. Always includes deleted_at when set.","typeName":"IPageIComment"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/comments","method":"patch"},{"specification":"Fetches a single comment from discussionboard_comments by primary key ID. The entity represents a structured user comment, with schema fields: id, discussionboard_post_id, discussionboard_member_id, parent_id, body, created_at, updated_at, deleted_at. Soft-deleted comments (where deleted_at is not null) are still returned for audit/compliance, and the API must always include deleted_at field exactly as stored—never reference status or non-schema fields.","description":"Returns a single comment entity from discussionboard_comments identified by 'id' in the path parameter. The response strictly includes: id, discussionboard_post_id, discussionboard_member_id, parent_id, body, created_at, updated_at, deleted_at. \n\nSoft-deleted comments must be disclosed with deleted_at set when present; the API does not hide, mask, or synthesize comment status fields beyond actual schema. If the comment does not exist, an appropriate not-found error is returned. The endpoint is used for moderation, post discussion display, or audit log lookup.","summary":"Retrieves a specific comment from discussionboard_comments by ID, including deleted_at/soft delete status.","parameters":[{"name":"id","description":"The primary key UUID for the target comment in discussionboard_comments.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment entity with all schema fields; deleted_at present if comment is soft-deleted.","typeName":"IComment"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/comments/{id}","method":"get"},{"specification":"Creates a new comment record in discussionboard_comments, using only the fields defined in schema: discussionboard_post_id, discussionboard_member_id, parent_id (optional), body. The operation inserts a new atomic comment into the database, with created_at automatically set to current time by the server. The API must NOT reference non-existent status fields.","description":"This API endpoint creates a new comment in discussionboard_comments. Application logic must supply required fields—discussionboard_post_id (the parent post or root for the comment), discussionboard_member_id (author), optional parent_id (for replies or nested comments), and the comment body (text only). Optional fields may be set per schema (parent_id), while created_at and updated_at are managed by the API/database. No status or workflow fields may be referenced beyond deleted_at (managed in future soft delete operations only).\n\nCommon uses include post discussions, replying to other comments, and asynchronous moderation workflows where comments are inserted independently of post/display state.","summary":"Creates a new user comment in discussionboard_comments.","parameters":[],"requestBody":{"description":"Body for the new comment, only using schema-approved fields.","typeName":"IComment.ICreate"},"responseBody":{"description":"Newly created comment entity as per discussionboard_comments schema. Fields like created_at/updated_at auto-populated.","typeName":"IComment"},"authorizationRoles":["member","moderator","admin"],"name":"create","path":"/discussionboard/comments","method":"post"},{"specification":"Updates an existing comment in discussionboard_comments, by primary key ID. All modifications must map directly to fields that exist: discussionboard_post_id, discussionboard_member_id, parent_id, body. Only these fields can be changed. The API must not reference non-existent status logic outside those fields (e.g., no update for deleted_at—handled by delete operation).","description":"This endpoint updates an existing comment, targeting the record in discussionboard_comments by its 'id'. Modifiable fields include discussionboard_post_id (if moving comment to another post), discussionboard_member_id (to update ownership, rare in exceptional audit cases), parent_id (to alter nesting/reply structure), and body (modifying the text itself). \n\nThe primary key 'id' in the path is required; only the fields detailed above may appear in the update request body. No status fields or non-existent properties may be referenced; soft-deletion (deleted_at) transitions are managed only by delete logic.","summary":"Updates an existing comment in discussionboard_comments by ID.","parameters":[{"name":"id","description":"The UUID key for the comment record to update in discussionboard_comments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the comment. Only schema fields permitted.","typeName":"IComment.IUpdate"},"responseBody":{"description":"The updated comment entity.","typeName":"IComment"},"authorizationRoles":["member","moderator","admin"],"name":"update","path":"/discussionboard/comments/{id}","method":"put"},{"specification":"Performs a soft delete on a comment in the discussionboard_comments table by ID. This operation sets the deleted_at field to the current timestamp, marking the comment as deleted without removing it from the database. No other status or deletion fields are referenced or used; the data remains available for audit/tracing. Only the deleted_at field is changed; all others remain as before. If the comment is already soft-deleted (deleted_at is set), subsequent calls have no effect except updating the deleted_at timestamp.","description":"This endpoint soft-deletes a comment in discussionboard_comments by updating its deleted_at field to the current server time. The comment remains in the database but is marked as deleted in accordance with audit/compliance and moderation workflows. No other record removal or status field is used.\n\nThe path parameter 'id' specifies which comment to soft-delete. Attempts to delete an already-deleted comment simply update deleted_at. \n\nThis endpoint does NOT perform a hard-delete or physically remove the comment. It must not reference any non-existent deletion/status fields; only the built-in schema field deleted_at is used for marking status.","summary":"Soft deletes a comment from discussionboard_comments by setting deleted_at (no hard delete).","parameters":[{"name":"id","description":"The UUID primary key for the comment to soft delete (set deleted_at).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/comments/{id}","method":"delete"},{"specification":"Implements PATCH (list/search) operation for 'discussionboard_comment_snapshots' entity in the Comments domain. Provides advanced list retrieval of comment version histories (snapshots) for audit and moderation workflows. Exposes full search and pagination capability over atomic fields such as id, discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, and snapshot_created_at. No non-existent fields are referenced. This endpoint should be used when moderators or users need to review versioned comment histories for dispute resolution or rollback.\n\nThe results should be filterable by relevant fields (such as comment id, member id, post id, version, and snapshot date) and support pagination and sorting to handle large sets of history data. Only fields present in the Prisma schema can be used for search and response content. The endpoint will not expose comments' deleted_at directly since that field does not exist in this entity.\n\nSecurity: Should only be exposed to authorized users (moderator/admin) due to the sensitive nature of history data. Validation rules must ensure all filters reference actual schema fields. Related APIs: GET for individual snapshot, POST for create, PUT for update, DELETE for hard delete (no soft-delete field).","description":"Retrieves a paginated, filterable list of comment history snapshots from discussionboard_comment_snapshots. Supports key audit and moderation use cases, allowing advanced search by comment, member, post, version, or snapshot_created_at. ONLY schema-present fields can be used for filtering or display; no non-existent fields referenced. Fulfills comment version audit requirements without exposing non-existent properties.","summary":"List/search comment snapshots (version histories) in discussionboard_comment_snapshots.","parameters":[],"requestBody":{"description":"Search and pagination parameters for listing comment snapshots. Must only reference schema fields: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, snapshot_created_at.","typeName":"IDiscussionboardCommentSnapshot.IRequest"},"responseBody":{"description":"Paginated and filtered list of comment snapshots, containing only schema-defined fields.","typeName":"IPageDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/commentSnapshots","method":"patch"},{"specification":"GET detail/information operation for 'discussionboard_comment_snapshots' entity. Retrieves a single, atomic comment snapshot by unique id, as mandated by moderation and audit requirements. Only references actual schema fields: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, and snapshot_created_at. Does not assume existence of extra audit properties. This endpoint is crucial for comment version rollback, moderator review, and displaying edit history. No soft/hard delete logic needed at this level (history is immutable and only deleted via DELETE endpoint).\n\nSecurity: Exposed to roles with audit and moderation permissions. Validation must ensure id refers to schema PK.","description":"Fetches a specific comment snapshot from discussionboard_comment_snapshots by its primary key id. Exposes ONLY schema-present fields for history/audit display. Intended for use-cases such as reviewing full edit details, audit trails, or showing change history to moderators/admins. Does not reference deleted_at, created_by, or fields not in schema.","summary":"Get a specific comment snapshot (version history entry) from discussionboard_comment_snapshots by id.","parameters":[{"name":"id","description":"Target comment snapshot's id (UUID primary key).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail of the comment snapshot, including only schema-defined fields.","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/commentSnapshots/{id}","method":"get"},{"specification":"POST creation operation for 'discussionboard_comment_snapshots' entity. Allows creation of a new historical snapshot of a comment (for version control, audit, or moderation). Payload must strictly follow actual schema fields: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, and snapshot_created_at. No fields like deleted_at or created_by, since these do not exist in the schema. On success, returns created snapshot data.\n\nSecurity: Exposed only to backend/authenticated system components or moderator/admin roles as versioning is usually system-triggered. Input validation must ensure all POST data matches existing schema properties. Related endpoints: PATCH for list/search, GET for detail, PUT for strict updates, DELETE for hard delete.","description":"Creates a new comment snapshot/version record for a comment, with input strictly matching discussionboard_comment_snapshots schema. All POST data must correspond precisely to schema fields (comment id, member id, post id, body, version, snapshot_created_at). No soft-delete/extra fields allowed.","summary":"Create a comment version snapshot in discussionboard_comment_snapshots.","parameters":[],"requestBody":{"description":"Creation data for new comment snapshot. All fields must match schema: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, snapshot_created_at.","typeName":"IDiscussionboardCommentSnapshot.ICreate"},"responseBody":{"description":"Created snapshot entity as per schema.","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/discussionboard/commentSnapshots","method":"post"},{"specification":"PUT update operation for 'discussionboard_comment_snapshots'. Edits/mutates a snapshot by its id, strictly referencing actual schema fields: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, and snapshot_created_at. No non-existent/audit fields referenced (e.g., created_by, deleted_at). Intended for administrative fixes, audit corrections, or exceptional restoration scenarios. Partial updates not supported—full replacements only. Validation rules enforce strict field mapping according to Prisma schema. No soft delete possible. Exposed to advanced roles (moderator/admin).","description":"Full-replacement update of a comment snapshot (version history record) in discussionboard_comment_snapshots by id. Request body updates the entire record, strictly following schema field definitions.","summary":"Update an existing comment snapshot (history entry) by id in discussionboard_comment_snapshots.","parameters":[{"name":"id","description":"Target comment snapshot's id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New full data for the comment snapshot. Strictly matches schema fields.","typeName":"IDiscussionboardCommentSnapshot.IUpdate"},"responseBody":{"description":"Updated snapshot record (all schema fields).","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/commentSnapshots/{id}","method":"put"},{"specification":"DELETE operation for 'discussionboard_comment_snapshots' by id. As this entity (comment snapshot) contains NO soft delete field (e.g., no deleted_at), this endpoint performs a hard delete (permanent removal) of the record from the system. All validation and operation must only reference schema fields. It is only allowed for admin or moderator roles for audit/cleanup purposes. Documentation must clarify that this is an irreversible, permanent removal as per requirement analysis and schema actuality.\n\nSecurity: Restrict to admin/moderator; strict schema field validation. Related endpoints include PATCH list, GET detail, POST create, PUT update.","description":"Permanently removes the targeted comment snapshot (version history record) from discussionboard_comment_snapshots by id. There is no 'deleted_at' or similar soft delete property in schema; removal is irreversible and physical. Use for audit correction or redaction in compliance cases only.","summary":"Hard-delete a comment snapshot (history entry) by id from discussionboard_comment_snapshots.","parameters":[{"name":"id","description":"Target comment snapshot's id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted snapshot record (if returning after hard delete), or confirmation object.","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRoles":["admin","moderator"],"name":"erase","path":"/discussionboard/commentSnapshots/{id}","method":"delete"},{"specification":"PATCH (search/list) operation for 'discussionboard_comment_votes' in the Comments domain. Implements advanced, paginated retrieval for audit, moderation, and analytics purposes. Filters may only reference existing schema-present fields: id, discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at. Does NOT reference non-existent fields (e.g., deleted_at, created_by). Use for reviewing voting records, investigating vote behavior, or handling rate-limiting analysis. Supports role-based access for audit users.\n\nSecurity: Exposed to admin/moderator. Related endpoints: GET detail, POST create, PUT update, DELETE erase.","description":"Retrieves a full, filterable, paginated list of comment votes (upvotes/downvotes) in discussionboard_comment_votes. Filters/response strictly constrained to fields actually present in schema: id, comment id, member id, vote type, created_at, updated_at. Fulfills audit and moderation use-cases, with NO reference to non-existent fields.","summary":"List/search comment votes (upvote/downvote records) in discussionboard_comment_votes.","parameters":[],"requestBody":{"description":"Search and pagination object for listing comment votes. Only schema-real fields allowed: id, discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at.","typeName":"IDiscussionboardCommentVote.IRequest"},"responseBody":{"description":"Paginated/filterable list of comment votes, each with only schema-present fields.","typeName":"IPageDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/commentVotes","method":"patch"},{"specification":"GET detail operation for 'discussionboard_comment_votes'. Retrieves atomic record of a specific comment vote via its unique id. Only real schema fields referenced: id, discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at. Does not use deleted_at or extra audit fields. Purpose: enables audit, analytics, and troubleshooting for vote behaviors. Strictly aligned to Prisma schema and requirements. No soft/hard delete logic handled at this endpoint level.","description":"Fetches detailed data for a specific comment vote (upvote/downvote) from discussionboard_comment_votes by id. All returned fields are defined in schema: id, comment id, member id, vote_type, created_at, updated_at. Support audit and moderation workflows.","summary":"Get specific comment vote (upvote/downvote) record from discussionboard_comment_votes by id.","parameters":[{"name":"id","description":"Target comment vote id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment vote data as per schema definition.","typeName":"IDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/commentVotes/{id}","method":"get"},{"specification":"POST creation operation for 'discussionboard_comment_votes'. Creates new vote entry in discussionboard_comment_votes table. Payload strictly constrained to fields in schema: discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at (updated_at optional/null if first vote). Does NOT include deleted_at (doesn't exist). Vote uniqueness and update logic are managed at DB/app level.\n\nSecurity: Exposed to logged-in users. Validation must ensure only schema-present fields are posted. Related endpoints: PATCH for list, GET detail, PUT update, DELETE erase.","description":"Creates new upvote/downvote record in discussionboard_comment_votes. POST body must include only fields actually in schema: comment id, member id, vote_type, created_at, updated_at (optional/null unless updating). Optionality must mirror schema. Does not reference any non-existent fields.","summary":"Create a comment vote (upvote/downvote) record in discussionboard_comment_votes.","parameters":[],"requestBody":{"description":"Data for creating comment vote. All POST fields must reflect only those present in schema.","typeName":"IDiscussionboardCommentVote.ICreate"},"responseBody":{"description":"Newly created comment vote (schema fields only).","typeName":"IDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/discussionboard/commentVotes","method":"post"},{"specification":"PUT update operation for 'discussionboard_comment_votes' by id. Fully replaces an existing upvote/downvote record by its UUID. All fields strictly conform to schema: discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at. Request and response must not mention deleted_at or created_by. Security: Admin/moderator access. This endpoint is essential for correcting erroneous or appealed vote records in compliance cases. Related: PATCH (list), GET (detail), DELETE (erase).","description":"Replaces the full record for a comment vote (upvote/downvote) by id, using only schema-present fields. Used in admin or moderation workflows to correct or restore voting actions. No partial updates. No reference to non-existent properties.","summary":"Update a comment vote (upvote/downvote) by id in discussionboard_comment_votes.","parameters":[{"name":"id","description":"Target comment vote id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full replacement/update of comment vote record by id. Uses only schema-present fields.","typeName":"IDiscussionboardCommentVote.IUpdate"},"responseBody":{"description":"Updated comment vote record, as per schema definition.","typeName":"IDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/commentVotes/{id}","method":"put"},{"specification":"DELETE operation for 'discussionboard_comment_votes' by id. As the table has no soft-delete fields (no deleted_at, is_deleted), this is a hard delete (permanent removal). Removes the upvote/downvote record for compliance/audit correction. No non-existent fields may be referenced in description or logic. Available only to admin or moderator roles for audit, compliance, or redress cases. All field/validation logic strictly bound to schema.","description":"Permanently deletes a comment vote (upvote/downvote) by id from discussionboard_comment_votes. As there is no soft delete column, this action is unrecoverable and physically removes the record from storage. Only schema-defined fields are referenced.","summary":"Hard delete comment vote (upvote/downvote) by id from discussionboard_comment_votes.","parameters":[{"name":"id","description":"Target comment vote id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted vote record info (if returned after hard delete), or confirmation.","typeName":"IDiscussionboardCommentVote"},"authorizationRoles":["admin","moderator"],"name":"erase","path":"/discussionboard/commentVotes/{id}","method":"delete"},{"specification":"PATCH (list/search) operation for 'discussionboard_comment_reports'. Paginates and filters report records for moderation/tracking workflow. Only fields in schema discussionboard_comment_reports are referenced: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_report_type_id, reason, created_at. Used for audit, analytics, escalation workflow. Does NOT reference deleted_at. The endpoint is critical for moderation dashboards and root-cause/appeal investigations.\n\nSecurity: Moderator/admin only. Related: GET detail, POST create, PUT update, DELETE erase.","description":"Retrieves filterable, paginated report records on comments from discussionboard_comment_reports, with search\filters strictly bound to fields actually present: id, comment id, member id, report type id, reason, created_at. Enables moderation, audit, compliance, and appeal flows.","summary":"List/search comment reports in discussionboard_comment_reports.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for listing comment reports. Fields allowed: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_report_type_id, reason, created_at.","typeName":"IDiscussionboardCommentReport.IRequest"},"responseBody":{"description":"Filtered, paginated list of comment reports, showing only schema fields.","typeName":"IPageDiscussionboardCommentReport"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/commentReports","method":"patch"},{"specification":"GET detail operation for 'discussionboard_comment_reports' entity. Fetches single comment report record by UUID PK. Only schema-present fields referenced in request and response: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_report_type_id, reason, created_at. No reference to extra/audit fields like deleted_at, author, etc. Used for review, escalation, appeals, and compliance workflows for moderation. Security: Administrator/moderator only. Related endpoints: PATCH list, POST create, PUT update, DELETE erase.","description":"Returns a detailed comment report entry from discussionboard_comment_reports by id, with full record shown (schema fields only). For moderation review, auditing, and appeals processes. Strict schema-compliance for all field references; no mention of deleted_at or extra audit fields.","summary":"Get a specific comment report record from discussionboard_comment_reports by id.","parameters":[{"name":"id","description":"Target comment report id (UUID PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full comment report record from schema fields only.","typeName":"IDiscussionboardCommentReport"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/commentReports/{id}","method":"get"},{"specification":"Creates a comment report, corresponding to the 'discussionboard_comment_reports' Prisma schema. This operation enables a user to report a specific comment for violations such as spam, abuse, or inappropriate content. It utilizes actual schema fields, requiring the comment's id, member id, report type id, and a non-null reason. The operation records the time of the report with precision and does not reference any fields that aren't part of the schema.","description":"This API operation allows a member to report a comment by creating a record in the 'discussionboard_comment_reports' table. The request must specify the unique identifiers for the comment being reported (discussionboard_comment_id), the reporting member (discussionboard_member_id), the type of report (discussionboard_report_type_id), and a detailed non-null reason explaining the report. The operation captures the creation time for compliance and moderation workflows and enforces business logic such as only one report per type/member/comment. No fields outside the schema are referenced. No soft delete fields exist, so reports are permanently added to the table. This is the first step in the moderation flow (see requirements: Posting & Interaction, Moderation, Audit). Related endpoints include GET/PATCH for review and moderation of existing reports.","summary":"Create a new comment report in the 'discussionboard_comment_reports' table (hard add, no soft delete).","parameters":[],"requestBody":{"description":"Required payload for creating a comment report. Includes comment id, reporting member id, report type id, and non-null reason.","typeName":"Idiscussionboard_comment_reports.ICreate"},"responseBody":{"description":"Returns the created comment report record.","typeName":"Idiscussionboard_comment_reports"},"authorizationRoles":null,"name":"create","path":"/discussionboard/commentReports","method":"post"},{"specification":"Updates an existing comment report in the 'discussionboard_comment_reports' Prisma schema, identified by its unique id. This operation only references fields present in the schema: comment id, member id, report type id, reason, and does NOT reference any non-existent fields. Used for correcting the reason or changing the report type. The report is updated (PUT overrides), and audit logs may reference updated_at in supporting tables, not here.","description":"This operation updates the primary fields of a comment report identified by 'id' in the 'discussionboard_comment_reports' table. Only the comment id, member id, report type id, and reason may be modified, as per the schema. The operation does not reference any deleted_at, created_by, or updated_by fields, nor include any additional fields not explicitly defined. PUT is a full override; existing values are replaced by new request body data. Operation is referenced in moderation and workflow escalations.","summary":"Update an existing comment report in the 'discussionboard_comment_reports' table.","parameters":[{"name":"id","description":"Unique identifier for the comment report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating a comment report, including only allowed mutable fields.","typeName":"Idiscussionboard_comment_reports.IUpdate"},"responseBody":{"description":"Updated comment report record.","typeName":"Idiscussionboard_comment_reports"},"authorizationRoles":null,"name":"update","path":"/discussionboard/commentReports/{id}","method":"put"},{"specification":"Deletes an existing comment report from the 'discussionboard_comment_reports' table, identified by id. Since the schema has no soft delete field, this action performs a hard delete (permanent removal). No fields outside the schema are referenced.","description":"This API operation deletes a comment report identified by 'id' from the 'discussionboard_comment_reports' table. The deletion is permanent (hard delete) as the schema has no soft or logical delete marker. This endpoint is used by moderation or administration roles for removing erroneous or resolved reports. The operation references only the report's 'id' as present in the schema. No non-existent fields are referenced in this operation.","summary":"Hard delete of a comment report from the 'discussionboard_comment_reports' table by id.","parameters":[{"name":"id","description":"Unique identifier for the comment report record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/commentReports/{id}","method":"delete"},{"specification":"Lists or searches normalized moderation reports from the 'discussionboard_reports' table, fulfilling requirements for tracking the moderation workflow. This PATCH endpoint leverages the 'discussionboard_reports' schema, supports filters and page controls as per business rules, and only references fields present in the schema.","description":"Retrieves a paginated, searchable list of moderator reports from the 'discussionboard_reports' table. The endpoint supports filtering by report type, reporting member, moderation target, status, and date range as defined by the schema. Only fields present in 'discussionboard_reports' are referenced. This is used by moderators and administrators to review reports according to moderation and escalation workflows. Related APIs include POST (creating a report), GET (fetch a single report by id), PUT (update report details), and DELETE (remove report).","summary":"Paginated search and list retrieval of moderation reports from the 'discussionboard_reports' table.","parameters":[],"requestBody":{"description":"Search/filter and pagination parameters for reports list operation.","typeName":"Idiscussionboard_reports.IRequest"},"responseBody":{"description":"Returns a paginated list of reports and page info.","typeName":"IPageIdiscussionboard_reports"},"authorizationRoles":null,"name":"index","path":"/discussionboard/reports","method":"patch"},{"specification":"Retrieves the details of a specific moderation report from the 'discussionboard_reports' table, by id. Only fields actually present in the schema are referenced.","description":"Fetches a single moderation report by 'id' from the 'discussionboard_reports' table. Returns all schema-defined properties, including report type, reporting member, target object, target type, report description, and reported_at. Does not reference or return any field absent from the schema. Used in the moderation review/handling flow.","summary":"Fetch details for a specific moderation report by id from 'discussionboard_reports'.","parameters":[{"name":"id","description":"Unique identifier for the moderation report to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The moderation report record.","typeName":"Idiscussionboard_reports"},"authorizationRoles":null,"name":"at","path":"/discussionboard/reports/{id}","method":"get"},{"specification":"Creates a new moderation report in the 'discussionboard_reports' table. This corresponds to reporting a business object (post, comment, or member) for moderation review, recording full normalized data as per schema and business process. Does not reference any non-existent fields.","description":"Creates a moderation report record by specifying the report type id, reporting member id, target object id, target object type, optional report description, and reported_at timestamp. All fields referenced are present in the schema. Used to report a post, comment, or member for moderation under escalation workflows. Report creation is the initial step in the moderation queue. Additional moderation actions are linked via related operations.","summary":"Create a new moderation report in the 'discussionboard_reports' table.","parameters":[],"requestBody":{"description":"Required payload for new moderation reports; includes all normalized schema fields.","typeName":"Idiscussionboard_reports.ICreate"},"responseBody":{"description":"Returns the created moderation report record.","typeName":"Idiscussionboard_reports"},"authorizationRoles":null,"name":"create","path":"/discussionboard/reports","method":"post"},{"specification":"Updates an existing moderation report in the 'discussionboard_reports' table using its unique id. Only fields defined in the schema are referenced. PUT fully replaces allowed updatable fields.","description":"Updates the primary fields of a moderation report in the 'discussionboard_reports' table, identified by 'id'. Permitted updates include only schema-defined fields such as report type, reporting member, target object info, report description, and reported_at. The endpoint does not reference or update any soft/hard delete or user tracking fields outside the schema.","summary":"Update a moderation report by id in the 'discussionboard_reports' table.","parameters":[{"name":"id","description":"Unique identifier for the moderation report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating report fields; mirrors schema definition.","typeName":"Idiscussionboard_reports.IUpdate"},"responseBody":{"description":"Returns the updated moderation report record.","typeName":"Idiscussionboard_reports"},"authorizationRoles":null,"name":"update","path":"/discussionboard/reports/{id}","method":"put"},{"specification":"Deletes a moderation report from the 'discussionboard_reports' table based on its id. As the schema provides no soft/hard delete field, this operation performs a hard delete (permanent removal) with no logical deletion. Does not reference any other fields except 'id'.","description":"Removes a moderation report entry by its id from the 'discussionboard_reports' table. This is a permanent (hard) delete operation as the schema does not include fields for soft or logical deletion. Typically used by moderators or admins for workflow cleanup or error correction. Operation strictly references schema-defined fields only.","summary":"Hard delete of a moderation report from 'discussionboard_reports' by id.","parameters":[{"name":"id","description":"Unique identifier for the report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/reports/{id}","method":"delete"},{"specification":"Retrieves a paginated, searchable list of report types from 'discussionboard_report_types' for moderation and admin workflows and frontend display. Relies only on schema fields.","description":"Returns a list of report types (spam, abuse, misinformation, etc.) as defined in the 'discussionboard_report_types' table, supporting pagination, filtering, and sorting. Only actual schema fields are referenced, such as id, code, display_name, active, created_at. Used by admins, moderators, and frontend select menus. Does not include or reference any absent fields.","summary":"Paginated list/search of available report types for moderation, admin, and display.","parameters":[],"requestBody":{"description":"Search/filtering and pagination request for report types.","typeName":"Idiscussionboard_report_types.IRequest"},"responseBody":{"description":"Paginated response of report types with page info.","typeName":"IPageIdiscussionboard_report_types"},"authorizationRoles":null,"name":"index","path":"/discussionboard/reportTypes","method":"patch"},{"specification":"Retrieves a specific report type by its id from the 'discussionboard_report_types' schema. Only references actual schema fields.","description":"Fetches a single report type by its unique id, returning all normalized data: code, display_name, description, active, and created_at. Does not reference any field not present in the schema. Used in report creation and for UI display of selectable report types.","summary":"Get a single report type from 'discussionboard_report_types' by id.","parameters":[{"name":"id","description":"Identifier for the report type to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The report type record.","typeName":"Idiscussionboard_report_types"},"authorizationRoles":null,"name":"at","path":"/discussionboard/reportTypes/{id}","method":"get"},{"specification":"Creates a new report type in 'discussionboard_report_types'. Only references actual schema fields. Used by admins for system extensibility.","description":"Creates a report type record, requiring code, display_name, optional description, active status, and created_at fields. Only schema-defined fields are referenced. Used in configuring moderation options and extending reporting workflows. Does not reference any user or tracking fields if not in schema. Creation is audited by created_at field only.","summary":"Create a new report type in 'discussionboard_report_types'.","parameters":[],"requestBody":{"description":"Payload for new report type creation; all values must match schema.","typeName":"Idiscussionboard_report_types.ICreate"},"responseBody":{"description":"The created report type record.","typeName":"Idiscussionboard_report_types"},"authorizationRoles":null,"name":"create","path":"/discussionboard/reportTypes","method":"post"},{"specification":"Updates an existing report type in 'discussionboard_report_types' via PUT. Only fields present in the schema are referenced in request/response.","description":"Updates the key fields of a report type (code, display_name, description, active). The report type to update is identified by id. Any update or change is only applied to schema-defined columns; fields not in the schema will never be referenced. PUT fully replaces allowed content.","summary":"Update an existing report type in 'discussionboard_report_types' by id.","parameters":[{"name":"id","description":"Identifier for the report type to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for report type update; values limited to those present in schema.","typeName":"Idiscussionboard_report_types.IUpdate"},"responseBody":{"description":"The updated report type record.","typeName":"Idiscussionboard_report_types"},"authorizationRoles":null,"name":"update","path":"/discussionboard/reportTypes/{id}","method":"put"},{"specification":"Deletes an existing report type from the discussionboard_report_types table. This operation performs a hard delete, as the schema does not include a soft-delete field such as deleted_at or is_deleted. Only the actual fields present in the schema are referenced, ensuring compliance with the provided data model. Deletion will permanently remove the report type, making it unavailable for future reports; clients must ensure the ID is correct as there is no soft-restore capability. Use with care, as deleted records are not recoverable and associated references (e.g., to existing reports) may be impacted depending on application logic.","description":"This API endpoint deletes a report type record from the discussionboard_report_types table.\n\nSince discussionboard_report_types does not have a soft delete field (such as deleted_at or is_deleted), this operation performs a hard delete, permanently removing the report type from the database. This approach is appropriate for cases where a report type should no longer exist, and there is no need for audit or restore. Deletion is based solely on the id (UUID) path parameter, which must match exactly with the existing primary key in the schema.\n\nNo other fields are referenced or affected, and deletion cannot be undone through this endpoint. Attempts to delete a non-existent id will result in an error. Any associations dependent on the deleted record should be managed according to business needs (e.g., existing reports using the type may become orphaned, so caution is advised).\n\nAPI consumers should ensure id is valid before invoking deletion. This operation cannot delete other fields or perform cascading deletes to related tables; only the identified report type row is removed.","summary":"Hard delete a report type from discussionboard_report_types by primary key id.","parameters":[{"name":"id","description":"Target report type's unique identifier (primary key in discussionboard_report_types).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/reportTypes/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of moderation actions from the discussionboard_moderation_actions table. The operation accepts complex search, filtering, and pagination in the request body to support analytics and review needs. The response includes only fields defined in the schema and does not expose any data not present on the moderation action entity.","description":"Fetches a paginated, filterable list of moderation actions from discussionboard_moderation_actions. The request body allows searching (by actioned_at, rationale, action_type, acting_moderator_id, etc.), filtering (by target_object_type, report_id), and pagination (page, limit) to accommodate analytics dashboards and review workflows.\n\nNo data beyond the schema is exposed; only properties like id, report_id, acting_moderator_id, actioned_at, action_type, rationale, and target references are included. The endpoint supports necessary validation and input checking for performance and security.\n\nReturns a structured page of moderation actions conforming to the schema. This endpoint supports compliance, audit trails, and moderator/admin analytics use cases. It does not aggregate, compute, or expose joined/derived data and avoids referencing fields that do not exist in the table.","summary":"List and search moderation actions from discussionboard_moderation_actions with filters and pagination.","parameters":[],"requestBody":{"description":"Search and pagination filters for moderation actions list API.","typeName":"IDiscussionboardModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation actions.","typeName":"IPageIDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/moderationActions","method":"patch"},{"specification":"Retrieves a specific moderation action from discussionboard_moderation_actions by its unique ID. Returns the moderation action entity as it exists in the database, using only fields present in the schema for complete compliance.","description":"Returns full details of a moderation action as recorded in discussionboard_moderation_actions, identified by its unique id. The returned data includes only schema-defined fields such as id, report_id, acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at. No additional or derived data is included in the response.\n\nIf the specified moderation action does not exist, returns a not found error. This endpoint is used by admins and moderators for auditing, compliance, and reviewing moderation history. All data comes directly from the underlying schema entity.","summary":"Fetch a single moderation action from discussionboard_moderation_actions by id.","parameters":[{"name":"id","description":"Unique moderation action id (primary key in discussionboard_moderation_actions).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderation action record.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/moderationActions/{id}","method":"get"},{"specification":"Creates a new moderation action record in the discussionboard_moderation_actions table. The request body must match the schema fields and will only set fields that exist. The operation will persist atomic moderation actions, following compliance and audit needs.","description":"This endpoint allows creating a new moderation action in the discussionboard_moderation_actions table. The payload must include all required fields such as acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at, with an optional report_id. Only schema-defined fields are accepted; fields like created_by or deleted_at not present in the schema are ignored.\n\nCreation is logged for audit and compliance, supporting workflows such as flagging, editing, warning, or banning objects or members. Validation ensures payload matches schema constraints. Only authorized roles (admin, moderator) may invoke this API, and only atomic moderation actions are created (no side effects or cascading actions outside the schema definition).","summary":"Create a new moderation action in discussionboard_moderation_actions.","parameters":[],"requestBody":{"description":"New moderation action details per schema.","typeName":"IDiscussionboardModerationAction.ICreate"},"responseBody":{"description":"Created moderation action entity.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/discussionboard/moderationActions","method":"post"},{"specification":"Updates an existing moderation action in the discussionboard_moderation_actions table, referencing only names and fields listed in the schema. Update operations are limited to schema fields and do not reference or update any soft delete or audit fields not present.","description":"This endpoint updates a moderation action already in discussionboard_moderation_actions by id. Only fields defined on the moderation action entity can be updated, such as report_id, acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at. Fields like deleted_at or created_by are not part of the schema and thus not referenced or handled.\n\nIf the specified moderation action does not exist, a not found error is returned. Upon successful update, the new state is returned. Only admins and moderators may perform updates. This supports correcting or augmenting moderation action logs for compliance and auditing, strictly within schema boundaries.","summary":"Update a moderation action in discussionboard_moderation_actions by id.","parameters":[{"name":"id","description":"Unique moderation action id (primary key in discussionboard_moderation_actions).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated moderation action data, using only schema-defined fields.","typeName":"IDiscussionboardModerationAction.IUpdate"},"responseBody":{"description":"Updated moderation action entity.","typeName":"IDiscussionboardModerationAction"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/moderationActions/{id}","method":"put"},{"specification":"Deletes a moderation action from discussionboard_moderation_actions by unique id. This performs a hard delete, as no soft delete field exists in the moderation action schema. Entirely removes the record, so caution is advised regarding loss of audit trail.","description":"Removes a moderation action from the database using its primary key id. No soft delete mechanism exists in the schema, so this is a permanent hard delete. Deleted records are not recoverable through the API and deletion is final.\n\nOnly the primary key is required; associated audit/compliance consequences are the responsibility of the client. If the id does not match any record, a not found error is returned. Use this endpoint only for record correction or strict compliance cases; standard deletion removes all record details from the system.\n\nNo other fields are referenced, as per the schema's definition.","summary":"Hard delete moderation action from discussionboard_moderation_actions by id.","parameters":[{"name":"id","description":"Primary key id of the moderation action to delete (in discussionboard_moderation_actions).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/moderationActions/{id}","method":"delete"},{"specification":"Retrieves a paginated and filterable list of bans (suspensions) from discussionboard_bans. Accepts a search and filter request body, responding with only existing schema fields. Does not expose non-existent audit, soft delete, created_by, or other fields.","description":"Fetches a paginated, filterable list of bans as defined in discussionboard_bans. Allows searching and filtering (by acting_moderator_id, banned_member_id, report_id, ban_type, reason, banned_at, etc.) with a request body supporting pagination options. All exposed fields exist in the schema; e.g., id, banned_member_id, acting_moderator_id, report_id, reason, ban_type, banned_at, expires_at.\n\nNo fields (such as deleted_at, created_by) outside the schema are referenced or exposed. The endpoint enables moderation dashboards, analytics, and audit workflows concerning member bans for infractions or content violations. Only details atomic to the ban event are returned, with no cascading logic or derived values. Clients must use correct filter and search input to tailor results.","summary":"List and search bans from discussionboard_bans using filters and pagination.","parameters":[],"requestBody":{"description":"Filters and pagination for bans listing API.","typeName":"IDiscussionboardBan.IRequest"},"responseBody":{"description":"Paginated list of ban entries.","typeName":"IPageIDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/bans","method":"patch"},{"specification":"Retrieves a specific ban/suspension entry from the discussionboard_bans table by id. Pulls only schema-defined fields for audit and moderation workflows. Does not pull, update, or reference any fields not in the schema.","description":"Returns the full details of a ban or suspension event as recorded in discussionboard_bans, found by its unique id. Response includes only fields present in the schema, such as id, banned_member_id, acting_moderator_id, report_id, reason, ban_type, banned_at, expires_at. No non-existent, derived, or extra fields are included.\n\nIf not found, a not found error is provided. This endpoint supports audit, analytics, and review workflows for moderation and admin roles. No cascade effects or additional information about linked objects is returned; only the atomic ban entity per schema.","summary":"Fetch a single ban record from discussionboard_bans by id.","parameters":[{"name":"id","description":"Unique ban id (primary key in discussionboard_bans).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Ban record details for given id.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"name":"at","path":"/discussionboard/bans/{id}","method":"get"},{"specification":"Creates a new ban or suspension event in the discussionboard_bans table. Payload must conform strictly to the schema, using only fields present in discussionboard_bans, and appropriate validation for business rules regarding infraction handling. No soft delete is implemented.","description":"Creates a new entry in discussionboard_bans, representing a formal restriction on a member's system privileges. Payload must include all required properties: banned_member_id, acting_moderator_id, reason, ban_type, banned_at, and may include report_id and expires_at. No non-schema, derived, or audit fields are accepted; only actual schema fields are referenced and stored.\n\nCreation is logged for audit and compliance purposes, supporting escalations after repeated or severe violations. On success, returns the complete ban entity as saved. Authorization is limited to admin and moderator roles. Downstream effects (such as restricting logins) depend on application logic, not this endpoint. Input validation is enforced for field types, format, and required-optional schema alignment.","summary":"Create a new ban in discussionboard_bans.","parameters":[],"requestBody":{"description":"Ban creation payload as per discussionboard_bans schema.","typeName":"IDiscussionboardBan.ICreate"},"responseBody":{"description":"Created ban entity record.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"name":"create","path":"/discussionboard/bans","method":"post"},{"specification":"Updates an existing ban in the discussionboard_bans table. Only existing schema fields can be updated, and there is no soft delete or hidden audit trail according to the data model. The endpoint supports administrative correction of ban details.","description":"Updates an individual ban record stored in discussionboard_bans, referenced by its unique id. Payload may set or update only existing fields: banned_member_id, acting_moderator_id, report_id, reason, ban_type, banned_at, expires_at. No support for updating non-schema audit/soft delete fields.\n\nIf not found, an appropriate error is returned. After update, the endpoint responds with the full new ban record. Enables admins/moderators to correct or revise ban reason, type, or timing based on case updates. No indirect effects or cascading updates occur; only fields present in the schema are affected.","summary":"Update ban details in discussionboard_bans using id.","parameters":[{"name":"id","description":"Primary ban key id (in discussionboard_bans).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Ban update payload as per discussionboard_bans schema.","typeName":"IDiscussionboardBan.IUpdate"},"responseBody":{"description":"Updated ban entity record.","typeName":"IDiscussionboardBan"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/bans/{id}","method":"put"},{"specification":"Deletes a ban record in discussionboard_bans by id. This is a hard delete—the schema does not provide for a soft-delete or recoverable status flag. Deletion is permanent, requiring administrative privileges, and care must be taken due to audit/compliance needs.","description":"Deletes a ban record from the discussionboard_bans table using its unique id (primary key). Performs a hard delete with no soft delete field or recovery logic available in the schema. Once deleted, the ban record is permanently removed and cannot be restored through this endpoint.\n\nOnly the id is required in the path. This operation is irreversible and should be used for administrative corrections or compliance reviews where bans are found to be erroneous. No related objects or dependencies are updated; this endpoint affects only the ban entity itself.","summary":"Hard delete a ban in discussionboard_bans by id.","parameters":[{"name":"id","description":"Ban id to hard delete (primary key in discussionboard_bans).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/bans/{id}","method":"delete"},{"specification":"Fetches a paginated, filterable list of warnings issued to members from discussionboard_warnings. The endpoint accepts only schema-defined fields as search and pagination filters, returning entities only with schema-compliant properties. No hidden, derived, or audit fields are present or referenced.","description":"Returns a list of warning events issued to members as defined in discussionboard_warnings, supporting search, filter, and pagination options via request body. Search includes acting_moderator_id, warned_member_id, report_id, reason, warned_at, with results paged for moderation dashboards.\n\nOnly actual fields from the schema are referenced or returned—no deleted_at, created_by, or compliance/audit fields not present in the schema are accepted or shown. Enables moderator/admin monitoring and analytics of warnings by various search criteria. Entities in result use only actual schema fields.","summary":"List and search warnings issued to members, using filters and pagination.","parameters":[],"requestBody":{"description":"Search and pagination parameters for warnings listing API.","typeName":"IDiscussionboardWarning.IRequest"},"responseBody":{"description":"Paginated list of warning events to members.","typeName":"IPageIDiscussionboardWarning"},"authorizationRoles":["admin","moderator"],"name":"index","path":"/discussionboard/warnings","method":"patch"},{"specification":"Retrieves a single warning record from the 'discussionboard_warnings' table by its unique identifier. Each warning record captures an instance where a member was officially warned by a moderator or admin. Per the schema, the model contains these fields: id (UUID, PK), warned_member_id (member UUID, referencing the warned member), acting_moderator_id (UUID, referencing the moderator/admin who issued the warning), report_id (optional UUID, referencing the incident report that triggered the warning), reason (text for the warning), and warned_at (timestamp of warning). This endpoint is used for audit and member escalation review. Only schema fields above may be referenced. No soft delete is present; all warnings are permanent unless hard deleted.","description":"This API operation fetches a specific warning record from the 'discussionboard_warnings' table, providing all atomic information associated with that warning. The endpoint requires the 'id' path parameter representing the warning's unique identifier (UUID). Upon successful retrieval, the endpoint returns full details including: the identifier of the warned member (warned_member_id), the rationale for the warning (reason), the acting moderator or admin (acting_moderator_id), any related report_id, and the timestamp of issuance (warned_at). This operation supports audit trail workflows, member appeal workflows, and compliance review as described in platform business rules. All referenced fields exist in the schema and additional properties cannot be assumed. If the record does not exist or access is restricted, a suitable error response is returned. No soft delete is present. Only schema fields are included in results.","summary":"Get single warning record from 'discussionboard_warnings' table by its ID (PK, UUID).","parameters":[{"name":"id","description":"Unique warning identifier (primary key, UUID) to fetch the target warning record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Warning record matching the given id, with all schema fields: id, warned_member_id, acting_moderator_id, report_id, reason, warned_at.","typeName":"IDiscussionboardWarning"},"authorizationRoles":null,"name":"at","path":"/discussionboard/warnings/{id}","method":"get"},{"specification":"Creates a new warning record in the 'discussionboard_warnings' table representing an official moderation warning issued to a member. All required fields per the schema must be supplied: id (UUID, PK; system generated), warned_member_id (UUID, FK), acting_moderator_id (UUID, FK), report_id (optional UUID, FK), reason (text), and warned_at (timestamp). This implements the formal warning step in moderation workflows. All fields referenced are schema-defined. No soft delete or archival behavior exists; warnings are permanent entries.","description":"This API operation enables moderators or admins to record a new warning issued to a platform member. The request body must include all required fields defined in the discussionboard_warnings schema: warned_member_id (the UUID of the member receiving the warning), acting_moderator_id (UUID of the moderator/admin issuing the warning), report_id (UUID linking this warning to an originating incident report, optional), reason (the text rationale for the warning), and warned_at (the timestamp of issuance). The 'id' field is generated by the system/database. This operation fulfills audit and escalation process requirements. No non-schema fields are permitted, and no soft delete/archival logic applies. Only schema-defined fields may be referenced, and attempts to include undefined properties will result in validation errors.","summary":"Create new warning record in 'discussionboard_warnings' table with schema-required fields.","parameters":[],"requestBody":{"description":"Warning creation payload: warned_member_id, acting_moderator_id, report_id (optional), reason, warned_at. Must map to schema fields exactly.","typeName":"IDiscussionboardWarning.ICreate"},"responseBody":{"description":"Warning record as stored after creation. Contains all schema fields with assigned or default values, including id.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/discussionboard/warnings","method":"post"},{"specification":"Updates a specific warning record in the 'discussionboard_warnings' table by its unique id (UUID, PK). Any schema field may be updated: warned_member_id, acting_moderator_id, report_id (optional), reason, and warned_at. The endpoint directly references only schema fields. Archival and soft delete logic do not exist; all modifications are hard updates to the persisted values. The schema does not define status/history fields, so only atomic updates of defined properties are allowed.","description":"This API operation updates the details of a single warning (discussionboard_warnings) using its unique identifier (id, UUID, PK). The request body may include any fields allowed by the schema: warned_member_id (UUID), acting_moderator_id (UUID), report_id (UUID, nullable), reason (string), and warned_at (timestamp). The operation supports correction or annotation of warning details for audit or compliance reasons. No soft delete or archival logic is available, nor may non-schema properties be referenced. Attempts to update properties not defined in the schema will result in validation errors. Only schema fields are accepted for update.","summary":"Update existing warning record by id; allowed fields: warned_member_id, acting_moderator_id, report_id, reason, warned_at.","parameters":[{"name":"id","description":"Target warning's unique identifier (UUID, PK) for update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the warning: per schema definition, any subset of warned_member_id, acting_moderator_id, report_id, reason, warned_at.","typeName":"IDiscussionboardWarning.IUpdate"},"responseBody":{"description":"Warning record after update, containing all schema fields with new values.","typeName":"IDiscussionboardWarning"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionboard/warnings/{id}","method":"put"},{"specification":"Deletes a single warning record in the 'discussionboard_warnings' table by its unique identifier (UUID, PK). The schema does NOT define any soft delete (no deleted_at or archival field), so deletion is permanent (hard delete). All referenced fields must exist in the schema. This operation is restricted to moderator and admin roles for compliance.","description":"This API operation removes a warning record from the discussionboard_warnings table by its id (UUID, PK). As the schema provides no support for soft delete (no deleted_at or is_deleted fields), this operation performs a true hard delete, permanently erasing the record. Only schema-defined fields are referenced. This operation is audit-relevant and protected; only users with moderator or admin roles are permitted to execute it. If the specified warning does not exist, an appropriate error is returned. The operation should return a success status if deletion is successful. No additional data is returned beyond confirmation.","summary":"Delete warning record by id—permanent hard delete as no soft delete exists in schema.","parameters":[{"name":"id","description":"Unique warning identifier (UUID) to target record for deletion.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionboard/warnings/{id}","method":"delete"},{"specification":"Retrieves a paginated, searchable list of engagement metrics records from the 'discussionboard_engagement_metrics' table. Fields include: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count. Does not support soft delete or archival. Pagination, filtering, and sorting are available. Only schema fields may be referenced.","description":"This endpoint provides a paginated, searchable, and filterable list of discussionboard_engagement_metrics records. Each record details engagement metrics for a specific member and board on a given date, containing the following schema fields: id (UUID), discussionboard_member_id (member UUID, nullable), discussionboard_board_id (board UUID, nullable), engagement_date (timestamp), posts_created_count (integer), comments_created_count (integer), votes_cast_count (integer). Supports pagination (page/limit), filtering (by member_id, board_id, date range), and sorting. There are no fields for soft delete. Additional fields will not be included, and only schema-defined columns are returned in results. Authentication may be required depending on business rules, but operation is not restricted by role in this description.","summary":"List paginated, filterable engagement metrics—with searching—based strictly on schema fields.","parameters":[],"requestBody":{"description":"List request with pagination, filter, and sort fields matching engagement_metrics schema: member_id, board_id, engagement_date range, etc.","typeName":"IDiscussionboardEngagementMetric.IRequest"},"responseBody":{"description":"Paginated response with schema-defined fields: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count.","typeName":"IPageIDiscussionboardEngagementMetric"},"authorizationRoles":null,"name":"index","path":"/discussionboard/engagementMetrics","method":"patch"},{"specification":"Retrieves a single engagement metrics record by its unique identifier from the discussionboard_engagement_metrics table. Schema fields: id (UUID), discussionboard_member_id (UUID, nullable), discussionboard_board_id (UUID, nullable), engagement_date (timestamp), posts_created_count, comments_created_count, votes_cast_count. No soft delete or archival exists; all fields referenced are from the schema. Record is found by its id (PK, UUID).","description":"Fetches a specific discussionboard_engagement_metrics record based on its unique id (UUID). Returns only schema-defined fields: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count. Only these properties will be present in the result. If the id does not correspond to a record, an error is returned. No non-schema fields or soft delete status is referenced. Result is intended for analytics and engagement dashboards.","summary":"Retrieve a single engagement metric record by id, strictly using schema fields only.","parameters":[{"name":"id","description":"Target engagement metric id (UUID, PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Engagement metric record containing only schema-defined properties.","typeName":"IDiscussionboardEngagementMetric"},"authorizationRoles":null,"name":"at","path":"/discussionboard/engagementMetrics/{id}","method":"get"},{"specification":"Creates a new engagement metric record in the discussionboard_engagement_metrics table. Required fields per schema: discussionboard_member_id (nullable UUID), discussionboard_board_id (nullable UUID), engagement_date (timestamp), posts_created_count (integer), comments_created_count (integer), votes_cast_count (integer). 'id' is system-generated (UUID). All provided fields must exist in the schema. No soft delete or archival exists. Used by analytics pipelines and dashboards.","description":"This operation allows creation of a new engagement metric record for the discussionboard_engagement_metrics table. The request body must contain these properties per schema: discussionboard_member_id (UUID, nullable), discussionboard_board_id (UUID, nullable), engagement_date (timestamp), posts_created_count (int), comments_created_count (int), and votes_cast_count (int). The system generates the id (UUID). No non-schema fields accepted. On success, returns the created record as stored in the database. No soft delete or archival logic applies. Only schema fields can be referenced in the input and result.","summary":"Create a new engagement metric—every property must match schema exactly (except id, which is system assiged).","parameters":[],"requestBody":{"description":"Request body for creating engagement metric record—must match schema fields exactly except id.","typeName":"IDiscussionboardEngagementMetric.ICreate"},"responseBody":{"description":"Created engagement metric record, including all schema fields.","typeName":"IDiscussionboardEngagementMetric"},"authorizationRoles":null,"name":"create","path":"/discussionboard/engagementMetrics","method":"post"},{"specification":"Updates an existing engagement metric record by its id (UUID, PK) in the discussionboard_engagement_metrics table. The updatable fields are: discussionboard_member_id (nullable), discussionboard_board_id (nullable), engagement_date, posts_created_count, comments_created_count, votes_cast_count. All properties are defined in the schema. No soft delete or archival exists. The id parameter in the path identifies the record to update.","description":"This API operation updates an engagement metric record (discussionboard_engagement_metrics) using its id (UUID, PK). Accepts a request body with properties corresponding to schema fields: discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count (all required/allowed schema fields). No non-schema property is permitted. No soft delete or archival applies. Result contains the updated record's schema fields. Requests referencing properties not present in schema will fail validation.","summary":"Update engagement metric by id; all fields must strictly match schema definitions.","parameters":[{"name":"id","description":"Target engagement metric id (UUID, PK) for update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Subset of updatable engagement metric fields, matching those in schema: discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count.","typeName":"IDiscussionboardEngagementMetric.IUpdate"},"responseBody":{"description":"Resulting engagement metric record after update, with schema fields.","typeName":"IDiscussionboardEngagementMetric"},"authorizationRoles":null,"name":"update","path":"/discussionboard/engagementMetrics/{id}","method":"put"},{"specification":"Deletes a single engagement metric record by its unique id (PK, UUID) in the discussionboard_engagement_metrics table. No soft delete or archival field is present, so record removal is permanent (hard delete). All referenced fields must exist in the schema. Operation is protected and audit-relevant for analytics persistence.","description":"This operation performs a hard delete (permanent removal) of an engagement metric record from the discussionboard_engagement_metrics table, identified by id (UUID, PK). As no soft delete (deleted_at or is_deleted) exists, the record is irretrievably removed. This is intended for use only in controlled, audit-enabled workflows (e.g., correction of erroneous analytic records). The operation takes only the id in the path and returns confirmation of success on completion. Only schema properties are referenced. If id is not present, a suitable error is returned.","summary":"Delete engagement metric by id—permanent removal from DB, no soft delete available.","parameters":[{"name":"id","description":"Target engagement metric's unique id (UUID, PK) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/engagementMetrics/{id}","method":"delete"},{"specification":"Retrieves a paginated, filterable list of activity logs from the discussionboard_activity_logs table. Fields in schema: id (UUID, PK), discussionboard_member_id (UUID, nullable), discussionboard_board_id (UUID, nullable), discussionboard_thread_id (UUID, nullable), discussionboard_post_id (UUID, nullable), discussionboard_comment_id (UUID, nullable), event_timestamp (timestamp), event_type (string), event_metadata (string, nullable). Does not support soft delete or archival. Supports paging, filtering by any schema field, and sorting. Only schema columns allowed in request and response.","description":"Returns a paged, searchable list of activity log records from discussionboard_activity_logs, based on filter, pagination, and sort criteria. All included properties are defined in the schema: id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata. Filtering and sorting can be performed on any field. There is no soft delete or archival support. Properties not present in the schema are forbidden in request and response. Useful for audits, rare journey tracking, and system analytics tools.","summary":"Get paged list of activity logs (with search/filter) using only schema fields.","parameters":[],"requestBody":{"description":"Paging/filter request matching schema columns (member_id, board_id, etc.), per IDiscussionboardActivityLog.IRequest.","typeName":"IDiscussionboardActivityLog.IRequest"},"responseBody":{"description":"Paged response with array of activity logs (all schema fields only) and standard pagination fields.","typeName":"IPageIDiscussionboardActivityLog"},"authorizationRoles":null,"name":"index","path":"/discussionboard/activityLogs","method":"patch"},{"specification":"Retrieves a single activity log record by its id (UUID, PK) from the discussionboard_activity_logs table. Only fields defined in the schema are referenced: id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata. No soft delete is present. Operation is for audit/compliance usage or analytic tracing.","description":"This operation fetches a single activity log record from discussionboard_activity_logs by its unique id (UUID, PK). All returned properties must be defined in the schema: id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata. The endpoint is useful for examining specific audit/compliance events and for tracing analytics workflows. Properties outside the schema are strictly forbidden. No soft/hard delete toggle exists; deletion is possible only via permanent removal (not present in this endpoint). If id is invalid or record not present, an error is issued.","summary":"Get single activity log record by id, with schema fields only.","parameters":[{"name":"id","description":"The unique id (UUID, PK) for the activity log record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Activity log entry found by id, containing schema-only properties.","typeName":"IDiscussionboardActivityLog"},"authorizationRoles":null,"name":"at","path":"/discussionboard/activityLogs/{id}","method":"get"},{"specification":"Creates a new activity log record in the discussionboard_activity_logs table. Required fields per schema: discussionboard_member_id (nullable), discussionboard_board_id (nullable), discussionboard_thread_id (nullable), discussionboard_post_id (nullable), discussionboard_comment_id (nullable), event_timestamp (timestamp), event_type (string), event_metadata (nullable string). 'id' is database generated. No soft delete/archive fields exist. Used for system, workflow, and compliance analytics logging. All field references are schema-only.","description":"Creates a new activity log entry by inserting one record to the discussionboard_activity_logs table. The request body must conform exactly to the fields in the schema (excluding id, which is system assigned): discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id (all UUID, nullable), event_timestamp (timestamp), event_type (string), event_metadata (string, nullable). On success, returns the newly created activity log record. No soft-delete exists; all records are atomic and permanent upon creation. Only schema fields will be accepted or returned.","summary":"Create a new activity log record with all schema-defined fields except id (auto-assigned).","parameters":[],"requestBody":{"description":"Fields for new activity log record, matching schema exactly; id auto-generated.","typeName":"IDiscussionboardActivityLog.ICreate"},"responseBody":{"description":"The new activity log entry as created and stored, with assigned id and schema fields.","typeName":"IDiscussionboardActivityLog"},"authorizationRoles":null,"name":"create","path":"/discussionboard/activityLogs","method":"post"},{"specification":"This endpoint updates an activity log record for the discussion board system. Each activity log tracks member activity across various entities such as boards, threads, posts, or comments, with fields including event_timestamp, event_type, and event_metadata. Updates may include changing the event type, entity references, timestamp, or associated metadata. All updates must strictly conform to the structure defined in the discussionboard_activity_logs table. Only the fields actually existing in the Prisma schema (e.g., discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata) may be updated. No fields beyond those present may be referenced or updated.","description":"Updates an existing activity log record in the discussionboard_activity_logs table. This operation allows the modification of any field such as event_type, event_timestamp, entity references (e.g., discussionboard_member_id, board_id, thread_id, post_id, comment_id), or event_metadata. Changes are strictly limited to the actual columns in the schema. This API is primarily used for analytics, audit trails, or correcting logged events by the system or authorized admin users. The operation does not reference or store non-existent fields such as deleted_at or updated_by. Reviewers must ensure all changes are valid, and modifications are fully auditable. Related endpoints include record creation (POST), retrieval (GET), and deletion (DELETE) for the same log entity.","summary":"Update a specific activity log (discussionboard_activity_logs) by ID.","parameters":[{"name":"id","description":"Target activity log record's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the activity log entry. Only the fields actually present in discussionboard_activity_logs are accepted. Examples include event_type changes, entity reference updates, and metadata adjustments.","typeName":"IActivityLog.IUpdate"},"responseBody":{"description":"The updated activity log entry as stored in discussionboard_activity_logs.","typeName":"IActivityLog"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/activityLogs/{id}","method":"put"},{"specification":"This endpoint deletes an activity log record in the activity logs table. The discussionboard_activity_logs model does NOT possess a soft delete field (e.g., deleted_at). Therefore, DELETE operations on this record will result in a permanent hard-delete, removing the log entry irreversibly from the database. Only fields extant in the schema (i.e., id) are referenced for the deletion. This hard deletion must be carefully audited due to compliance or analytics requirements; logs and snapshots are not preserved after this action.","description":"Permanently deletes the specified activity log record from the discussionboard_activity_logs table. As no soft-delete marker exists in the schema, this operation performs a hard delete, irreversibly removing all trace of the log event. Use with caution, typically restricted to admin users and protected by audit workflows. Associated errors may occur if the entry referenced does not exist. Non-existent or extra fields are not referenced or logged in this operation. For retrieval or updating, use the GET or PUT endpoints on the same entity.","summary":"Hard-delete an activity log entry (discussionboard_activity_logs) by ID.","parameters":[{"name":"id","description":"Target activity log record's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/activityLogs/{id}","method":"delete"},{"specification":"This endpoint retrieves a paginated or filtered list of trending topics from the discussionboard_trending_topics table. Trending topics represent currently active or popular threads as calculated by the analytics domain, with each record featuring fields such as discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score. Request may include filters or pagination fields defined in ITrendingTopic.IRequest.","description":"Retrieves a paginated list of trending topics based on search/filter/period criteria as defined in the request body. The operation references only defined fields in the discussionboard_trending_topics schema (e.g., discussionboard_thread_id, discussionboard_board_id, ranking_period_date, trending_score). Results can be sorted and filtered. Other endpoints for the trending topic domain include detail retrieval (GET by ID), creation (POST), update (PUT by ID), and deletion (DELETE by ID).","summary":"List or search trending topics (discussionboard_trending_topics) with filters and pagination.","parameters":[],"requestBody":{"description":"Search and pagination criteria for trending topics. Accepts only supported fields defined in ITrendingTopic.IRequest.","typeName":"ITrendingTopic.IRequest"},"responseBody":{"description":"A paginated list of trending topic records from discussionboard_trending_topics.","typeName":"IPageITrendingTopic"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/trendingTopics","method":"patch"},{"specification":"Retrieves the details of a single trending topic in the discussionboard_trending_topics table using its unique identifier. This operation returns all atomic fields belonging to the trending topic record, such as discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score. No calculated or non-existent fields are referenced.","description":"Fetches the complete detail for a trending topic identified by its unique ID. Only fields present in the discussionboard_trending_topics schema are provided. The endpoint does not include fields outside the schema or any derived/aggregate data. Associated endpoints include creation (POST), update (PUT), deletion (DELETE), and listing (PATCH) operations for trending topics.","summary":"Retrieve details of a trending topic (discussionboard_trending_topics) by ID.","parameters":[{"name":"id","description":"Trending topic record's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail for the specified trending topic record.","typeName":"ITrendingTopic"},"authorizationRoles":null,"name":"at","path":"/discussionboard/trendingTopics/{id}","method":"get"},{"specification":"Creates a new trending topic record in the discussionboard_trending_topics table. Only fields defined in the schema (discussionboard_thread_id, discussionboard_board_id, ranking_period_date, trending_score) are accepted. The request supplies all required information for the new trending topic entity, to be returned upon successful creation. This endpoint enables analytics jobs, system admins, or authorized automation to publish new trending topics.","description":"Adds a new trending topic entry to the system analytics, capturing the thread ID, board ID, ranking period date, and trending score as defined in the schema. Fields outside this scope (e.g., audit logs or history) are excluded. Returns the newly created trending topic record. Associated endpoints include update (PUT), retrieval (GET), listing (PATCH), and deletion (DELETE).","summary":"Create a trending topic (discussionboard_trending_topics).","parameters":[],"requestBody":{"description":"Trending topic details per the schema, including thread ID, board ID, ranking period date, and trending score.","typeName":"ITrendingTopic.ICreate"},"responseBody":{"description":"Record for the created trending topic.","typeName":"ITrendingTopic"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/trendingTopics","method":"post"},{"specification":"Updates a specified trending topic entry in the discussionboard_trending_topics table. All updates must be for actual fields defined in the schema such as discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score. No additional or virtual fields can be referenced or modified.","description":"Updates any atomic field for a trending topic record identified by ID. Only schema-defined columns can be updated; for example, changes to ranking period date, thread reference, board reference, or trending score. This is an admin-only endpoint, used by the analytics system or authorized staff. No soft delete fields exist, so standard update/replace is applied. For deletion, use DELETE; for listing, use PATCH; for retrieval, use GET.","summary":"Update a trending topic record (discussionboard_trending_topics) by ID.","parameters":[{"name":"id","description":"Trending topic record's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update within the trending topic record.","typeName":"ITrendingTopic.IUpdate"},"responseBody":{"description":"Updated trending topic record as stored in discussionboard_trending_topics.","typeName":"ITrendingTopic"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/trendingTopics/{id}","method":"put"},{"specification":"Deletes a trending topic record from the discussionboard_trending_topics table. As the schema does not have a soft delete or deleted_at field, this operation performs a hard delete (permanent removal) of the record. Only the id is referenced in the deletion operation. This is restricted to admin users, as deleted topics cannot be recovered. All deletions should be auditable by external logging systems for compliance.","description":"Permanently removes a trending topic entry by its unique ID from the analytics domain. Since no soft delete field is defined in the schema, this endpoint erases the record from persistent storage. No extra fields are referenced and no archiving occurs inside this entity. Use cautiously; to retrieve or update, use the GET/PUT endpoints respectively.","summary":"Hard-delete a trending topic (discussionboard_trending_topics) by ID.","parameters":[{"name":"id","description":"Unique trending topic record ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/trendingTopics/{id}","method":"delete"},{"specification":"Retrieves a list of notification templates in the discussionboard_notification_templates table, supporting search and pagination. Only atomic, schema-defined fields like code, name, subject, body, is_active, created_at, and updated_at are included. This endpoint is essential for template management, notification preference setup, and system-wide messaging infrastructure. Supports advanced queries as allowed by the INotificationTemplate.IRequest interface.","description":"Returns a filtered or full list of notification templates for administrative notification management. This PATCH operation enables searching, pagination, and bulk review of templates but references only fields existing in the notification template schema. Creation, single retrieval, update, and deletion are handled by the corresponding POST, GET, PUT, and DELETE endpoints.","summary":"List/search notification templates (discussionboard_notification_templates) with pagination and filters.","parameters":[],"requestBody":{"description":"Filter/pagination object for searching notification templates as allowed in INotificationTemplate.IRequest.","typeName":"INotificationTemplate.IRequest"},"responseBody":{"description":"Paginated results of notification templates.","typeName":"IPageINotificationTemplate"},"authorizationRoles":["admin"],"name":"index","path":"/discussionboard/notificationTemplates","method":"patch"},{"specification":"Retrieves the details of a single notification template from the discussionboard_notification_templates table by its unique identifier (UUID). Only schema-defined fields are returned (e.g., code, name, subject, body, is_active, etc.). This endpoint is generally used in settings, notification workflows, and for preparing notification messages.","description":"Fetches all fields for a notification template by its ID, returning atomic template fields according to the schema. No virtual, calculated, or undefined fields are referenced. Associated endpoints: creation (POST), update (PUT), deletion (DELETE), and listing (PATCH).","summary":"Retrieve a notification template (discussionboard_notification_templates) by ID.","parameters":[{"name":"id","description":"Unique notification template ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail for the specified notification template.","typeName":"INotificationTemplate"},"authorizationRoles":null,"name":"at","path":"/discussionboard/notificationTemplates/{id}","method":"get"},{"specification":"Creates a new notification template record in the discussionboard_notification_templates table. Only fields defined in the schema are accepted: code, name, subject, body, is_active, description, created_at, and updated_at. No additional or virtual fields are accepted. This endpoint allows system admins to define new notification message templates for email, in-app, or push communication.","description":"Adds a new notification template for system infrastructure, messaging, and alert workflows. Required fields are all schema-defined; extra fields outside the notification template schema are not allowed and will be rejected. Returns the new template record as confirmation. See endpoints for update (PUT), retrieval (GET), listing (PATCH), and deletion (DELETE).","summary":"Create a notification template (discussionboard_notification_templates).","parameters":[],"requestBody":{"description":"Values for the new notification template according to the schema.","typeName":"INotificationTemplate.ICreate"},"responseBody":{"description":"Created notification template record.","typeName":"INotificationTemplate"},"authorizationRoles":["admin"],"name":"create","path":"/discussionboard/notificationTemplates","method":"post"},{"specification":"Updates a specified notification template in the discussionboard_notification_templates table by its ID. All updatable fields must exist in the schema; for example, code, name, subject, body, is_active, description, created_at, updated_at. Changes to fields outside that set are not allowed. Intended for system or admin use to adjust template messages.","description":"Updates notification template fields such as name, code, description, subject, body, is_active, and metadata per schema definitions. No soft delete logic exists here, so updates directly replace the record's values. Associated endpoints include record creation (POST), detail retrieval (GET), listing (PATCH), and deletion (DELETE).","summary":"Update a notification template (discussionboard_notification_templates) by ID.","parameters":[{"name":"id","description":"Notification template's unique ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Values to update according to the notification template schema.","typeName":"INotificationTemplate.IUpdate"},"responseBody":{"description":"Updated notification template information.","typeName":"INotificationTemplate"},"authorizationRoles":["admin"],"name":"update","path":"/discussionboard/notificationTemplates/{id}","method":"put"},{"specification":"Deletes a notification template record from the discussionboard_notification_templates table. The schema does not include a deleted_at or soft delete field; thus, removal is a hard delete (permanent). The operation references only the ID. Hard deletion ensures the template is unrecoverable and should be carefully controlled to minimize messaging errors or compliance incidents.","description":"Removes the specified notification template permanently from persistent storage by its ID. No soft-delete or archival occurs, so template data is lost after deletion. Only ID is referenced. Operation is restricted to admins and should be audited externally as needed. See GET, PATCH, POST, and PUT endpoints for related CRUD.","summary":"Hard-delete a notification template (discussionboard_notification_templates) by ID.","parameters":[{"name":"id","description":"Unique notification template ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/discussionboard/notificationTemplates/{id}","method":"delete"},{"specification":"Implements PATCH /discussionboard/notificationPreferences endpoint. This operation retrieves a paginated, searchable, and sortable list of notification preferences records for all members. Each record is derived from the \"discussionboard_notification_preferences\" table, which contains fields including id, discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, and updated_at. The endpoint supports filtering or searching by member_id, code, and possibly notification channel preferences (email_enabled, inapp_enabled, browser_enabled). Results respect real data shape from Prisma schema and support analytics and preference management dashboards. Responses will never reference fields not defined in the schema.","description":"This endpoint fetches a paginated, optionally searchable and sortable list of notification preference records across the platform. It is built on the \"discussionboard_notification_preferences\" table, which underlies user notification configurations by template code and channel. Each record includes id (primary key), discussionboard_member_id (reference to member), code (notification template code), email_enabled (whether the user receives email notifications for this template), inapp_enabled (in-app notification preference), browser_enabled (browser push preference), created_at (creation timestamp), and updated_at (last modification timestamp).\n\nPagination, search (by code/member/channel), and sorting parameters may be passed in the request body. There are no soft delete or archival fields, so all records returned are active. Results strictly correspond to actual schema fields.\n\nErrors include invalid search parameters or database errors. No information outside of Prisma schema fields is ever included.","summary":"Retrieve a list of notification preference records (discussionboard_notification_preferences table) with pagination and filtering.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for notification preferences listing.","typeName":"IDiscussionboardNotificationPreferences.IRequest"},"responseBody":{"description":"A paginated list of notification preference records matching the query.","typeName":"IPageIDiscussionboardNotificationPreferences"},"authorizationRoles":null,"name":"index","path":"/discussionboard/notificationPreferences","method":"patch"},{"specification":"Implements GET /discussionboard/notificationPreferences/{id} endpoint. Retrieves a single notification preference by its unique id, directly mapping to a row in the \"discussionboard_notification_preferences\" Prisma table. Returned fields strictly include id, discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, and updated_at. Never includes any fields that do not exist on the schema.","description":"Fetches a specific notification preference configuration using the unique id field (UUID primary key) from the \"discussionboard_notification_preferences\" table. This endpoint returns a single notification preference record with the following fields: id (primary key), discussionboard_member_id (which member this preference belongs to), code (notification template code), email_enabled (email enabled flag), inapp_enabled (in-app notification flag), browser_enabled (browser push notification flag), created_at (when this setting was created), and updated_at (last time this preference was updated).\n\nNo soft delete or archival flag exists on this schema – query returns only the actual row by pk. Any additional fields or metadata outside of these Prisma fields are not returned.\n\n404 error is returned if no matching record exists.","summary":"Retrieve details for a specific notification preference (discussionboard_notification_preferences) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification preference to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification preference details for the specified id.","typeName":"IDiscussionboardNotificationPreferences"},"authorizationRoles":null,"name":"at","path":"/discussionboard/notificationPreferences/{id}","method":"get"},{"specification":"Implements POST /discussionboard/notificationPreferences endpoint. Creates a new notification preference record for a user. Maps to the \"discussionboard_notification_preferences\" table in Prisma schema. Required fields: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled. Will also set created_at and updated_at timestamps. Returns the created record. Only actual fields from Prisma schema are processed or returned.","description":"Creates a new notification preference record for a member, as modeled in the \"discussionboard_notification_preferences\" Prisma table. Required fields for creation are: discussionboard_member_id (which member the preferences belong to), code (template code for which the preference applies), email_enabled (boolean), inapp_enabled (boolean), browser_enabled (boolean). The system automatically assigns id (UUID PK), created_at, and updated_at timestamps.\n\nNo soft or hard deletion applies; new records are always inserted (no archiving logic). Response and request never reference fields not present on the schema.\n\nValidation errors are returned for missing required fields or unique constraint violations (e.g., duplicate member_id, code pair).","summary":"Create a new notification preference record (discussionboard_notification_preferences).","parameters":[],"requestBody":{"description":"Information required to create a notification preference record.","typeName":"IDiscussionboardNotificationPreferences.ICreate"},"responseBody":{"description":"Details of the newly created notification preference.","typeName":"IDiscussionboardNotificationPreferences"},"authorizationRoles":null,"name":"create","path":"/discussionboard/notificationPreferences","method":"post"},{"specification":"Implements PUT /discussionboard/notificationPreferences/{id} endpoint. Updates an existing notification preference record by its unique id. All updates affect only fields defined in the \"discussionboard_notification_preferences\" schema: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, updated_at. Returns the updated record. No soft delete or archival fields are managed.","description":"Updates the details of an existing notification preference configuration in the \"discussionboard_notification_preferences\" table. The update operation strictly allows editing only the schema-defined fields: discussionboard_member_id, code, email_enabled, inapp_enabled, and browser_enabled. The updated_at field will be automatically set to the current time. Soft delete/archival is not supported in this entity—no such fields exist in the schema, so all updates are permanent changes to the row.\n\nAttempting to update non-existent fields or specifying omitted fields will result in validation errors. The response includes only the actual schema fields.\n\nA 404 error is returned if the id does not exist.","summary":"Update a notification preference (discussionboard_notification_preferences) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification preference to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the notification preference.","typeName":"IDiscussionboardNotificationPreferences.IUpdate"},"responseBody":{"description":"The updated notification preference record.","typeName":"IDiscussionboardNotificationPreferences"},"authorizationRoles":null,"name":"update","path":"/discussionboard/notificationPreferences/{id}","method":"put"},{"specification":"Implements DELETE /discussionboard/notificationPreferences/{id} endpoint. Removes a notification preference record by id. As the Prisma schema has NO soft delete or archival fields, this operation performs a hard deletion (permanent DB row removal). Only the id PK may be used to target the row. No other fields are affected or returned after deletion.","description":"Permanently deletes a notification preference from the \"discussionboard_notification_preferences\" table by its unique id (UUID primary key). There is no soft delete flag or archival logic present in the schema, so this operation erases the row entirely from the DB. Deletion actions cannot be undone and do not affect other related entities (no cascading behavior).\n\nA 404 error is returned if the record does not exist. The operation never references any fields not present in the schema.","summary":"Hard delete notification preference (discussionboard_notification_preferences) by id – permanent removal (no soft delete logic).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification preference to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/notificationPreferences/{id}","method":"delete"},{"specification":"Implements PATCH /discussionboard/privacyPolicies endpoint. Retrieves a list of privacy policy records, supporting pagination, filtering, and search by fields that exist on \"discussionboard_privacy_policies\" in Prisma. Returned fields are id, version, effective_date, title, content, created_at, and updated_at. No soft delete or archiving applies to this entity.","description":"Retrieves a paginated and/or filtered list of privacy policies from the \"discussionboard_privacy_policies\" table. This table contains all historical and current privacy policy versions. Results include the following fields per record: id (UUID primary key), version (version string), effective_date (when this policy became active), title (policy heading), content (full text), created_at (timestamp of creation), and updated_at (timestamp of most recent update).\n\nSearch and pagination parameters may be provided in the request body. This entity does not track soft deletion or archiving: only actual records present in the table are returned.\n\nErrors are returned for invalid filters or pagination values. Never returns or queries fields not present in the Prisma model.","summary":"Retrieve a paginated, filterable list of privacy policy records (discussionboard_privacy_policies).","parameters":[],"requestBody":{"description":"Query, search, filter, sort, and pagination options for privacy policy records.","typeName":"IDiscussionboardPrivacyPolicies.IRequest"},"responseBody":{"description":"Paginated list of privacy policy records matching the query.","typeName":"IPageIDiscussionboardPrivacyPolicies"},"authorizationRoles":null,"name":"index","path":"/discussionboard/privacyPolicies","method":"patch"},{"specification":"Implements GET /discussionboard/privacyPolicies/{id} endpoint. Retrieves a single privacy policy record by unique id, strictly returning fields modeled in Prisma: id, version, effective_date, title, content, created_at, updated_at. No reference to fields not on the schema. No soft or hard deletion logic is present.","description":"Fetches the full details of a specific privacy policy using its id (UUID) from the \"discussionboard_privacy_policies\" table. The returned object includes: id, version, effective_date, title, content, created_at, and updated_at—all fields as defined in the Prisma schema.\n\nAs there are no deleted_at, archived, or related soft delete markers, this endpoint always returns only if the exact row exists. No additional data or composite values are returned.\n\nReturns 404 if record with that id is not found.","summary":"Retrieve details for a privacy policy (discussionboard_privacy_policies) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the privacy policy to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Privacy policy details for the specified id.","typeName":"IDiscussionboardPrivacyPolicies"},"authorizationRoles":null,"name":"at","path":"/discussionboard/privacyPolicies/{id}","method":"get"},{"specification":"Implements POST /discussionboard/privacyPolicies endpoint. Creates a new privacy policy record, mapping to the \"discussionboard_privacy_policies\" table fields: version, effective_date, title, content. created_at and updated_at are set automatically. The response returns the newly created record with all fields as per schema. No fields missing from schema are referenced or returned. No deletion/archival is supported.","description":"Creates a new privacy policy record in the \"discussionboard_privacy_policies\" table for proper audit and regulatory tracking. Input (request body) must provide: version (policy version string), effective_date (policy activation date in ISO-8601), title (policy heading), and content (policy legal text). created_at and updated_at fields are auto-set.\n\nNo deletion or archival logic is present in the schema; once created, policy records persist permanently for audit. Returns all record fields as defined in schema.\n\nValidation errors are returned for required field or uniqueness issues (e.g., version conflict).","summary":"Create a new privacy policy record (discussionboard_privacy_policies).","parameters":[],"requestBody":{"description":"Fields required to create a new privacy policy record.","typeName":"IDiscussionboardPrivacyPolicies.ICreate"},"responseBody":{"description":"Details of the newly created privacy policy record.","typeName":"IDiscussionboardPrivacyPolicies"},"authorizationRoles":null,"name":"create","path":"/discussionboard/privacyPolicies","method":"post"},{"specification":"Implements PUT /discussionboard/privacyPolicies/{id} endpoint. Updates an existing privacy policy record by its PK. Only fields from Prisma schema can be updated: version, effective_date, title, content. Timestamps are updated accordingly. No archival/soft delete logic is present, so operation updates only live rows.","description":"Updates a specific privacy policy record in the \"discussionboard_privacy_policies\" table by id (UUID). Editable fields are strictly: version, effective_date, title, content. created_at and updated_at may be managed automatically. Soft delete, archive, or status fields are not present—this endpoint overwrites existing policy attributes and does not remove or hide policies.\n\nValidation errors are returned for missing required fields or conflicts (e.g., version uniqueness). If the id does not match a row, a 404 is returned. Only schema fields are processed or returned.","summary":"Update a privacy policy record (discussionboard_privacy_policies) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the privacy policy to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for the privacy policy record.","typeName":"IDiscussionboardPrivacyPolicies.IUpdate"},"responseBody":{"description":"The updated privacy policy record.","typeName":"IDiscussionboardPrivacyPolicies"},"authorizationRoles":null,"name":"update","path":"/discussionboard/privacyPolicies/{id}","method":"put"},{"specification":"Implements DELETE /discussionboard/privacyPolicies/{id} endpoint. Since the Prisma schema for privacy policies does NOT include a soft delete (e.g., deleted_at), this operation performs a hard delete: it permanently removes the policy record from the table.","description":"Permanently deletes a privacy policy record from the \"discussionboard_privacy_policies\" table by its id (UUID primary key). Because there is no deleted_at or similar field in the schema, this is a hard delete and cannot be undone. Only the primary key is affected; no cascading or side-effects on related data.\n\nAttempting to delete a non-existent id returns 404. Request/response do not reference any non-schema fields.","summary":"Hard delete privacy policy (discussionboard_privacy_policies) by id – permanent removal (no soft delete logic).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the privacy policy to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"name":"erase","path":"/discussionboard/privacyPolicies/{id}","method":"delete"},{"specification":"Implements PATCH /discussionboard/dataErasureRequests endpoint. Retrieves a paginated, filterable list of data erasure requests. Each record is derived from \"discussionboard_data_erasure_requests\" Prisma table including id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, and admin_remark. This supports privacy compliance and audit flows without referencing any non-schema fields or soft delete logic.","description":"Fetches a paginated, optionally filtered list of data erasure requests from the \"discussionboard_data_erasure_requests\" table. Each record returned specifies id (UUID PK), discussionboard_member_id (which member the request references), status (current state: e.g., 'pending', 'approved', etc.), requested_at (submission timestamp), reviewed_at (moderation/admin review time), completed_at (when the request was finalized), and admin_remark (reason for approval/denial).\n\nPagination, filtering, and sorting are supported via the request body parameters. No deletion, archiving, or non-schema fields are processed or returned.\n\nValidation errors for incorrect filter parameters, otherwise errors follow standard audit log logic.","summary":"Retrieve paginated, filterable list of data erasure requests (discussionboard_data_erasure_requests).","parameters":[],"requestBody":{"description":"Query options for listing data erasure requests.","typeName":"IDiscussionboardDataErasureRequests.IRequest"},"responseBody":{"description":"Paginated response of data erasure request records matching query.","typeName":"IPageIDiscussionboardDataErasureRequests"},"authorizationRoles":null,"name":"index","path":"/discussionboard/dataErasureRequests","method":"patch"},{"specification":"Implements GET /discussionboard/dataErasureRequests/{id} endpoint. Retrieves a single data erasure request record by PK (UUID). Returns all fields from Prisma: id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, admin_remark. No archiving, soft/hard delete, or non-schema fields are referenced.","description":"Returns a specific data erasure request from the \"discussionboard_data_erasure_requests\" table, looked up by id (UUID PK). The object returned has all fields as defined in the Prisma schema: id (PK), discussionboard_member_id (referencing the subject member), status (string – current workflow state), requested_at (time of submission), reviewed_at (when action was taken), completed_at (when finalized), and admin_remark (optional staff/admin note).\n\nThe record is returned only if id exists; otherwise, 404 is given. No fields outside of actual schema present.","summary":"Retrieve details of a specific data erasure request (discussionboard_data_erasure_requests) by id.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the data erasure request to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for the specified data erasure request.","typeName":"IDiscussionboardDataErasureRequests"},"authorizationRoles":null,"name":"at","path":"/discussionboard/dataErasureRequests/{id}","method":"get"},{"specification":"Create a new data erasure request for a discussion board member. This operation allows members to initiate a data erasure request, in compliance with privacy and data protection policies. The schema for 'discussionboard_data_erasure_requests' requires that each row contains the following fields: 'id' (UUID, auto-generated); 'discussionboard_member_id' (UUID of the member making the request); 'status' (current status, such as 'pending', 'approved', etc.); 'requested_at' (timestamp of request creation); 'reviewed_at' (nullable, when admin/mod completed review); 'completed_at' (nullable, when erasure or rejection is finalized); 'admin_remark' (nullable, admin's comment). The API call should only allow creation of new requests—the 'id' and all timestamps except 'requested_at' must not be provided by users. The response includes the created erasure request object. Only fields present in the schema are referenced.","description":"This endpoint allows a discussion board member to submit a new data erasure request, as required by platform privacy regulations. Upon POST, the system creates a new 'discussionboard_data_erasure_requests' row with the member's UUID, a status of 'pending', the current timestamp as 'requested_at', and null values for 'reviewed_at', 'completed_at', and 'admin_remark'. No user-submitted fields outside those in the schema are permitted.\n\nReview and completion timestamps, as well as admin remarks, are managed in subsequent workflow steps by platform staff. There is no external UUID or manual id input—ids are auto-generated. Any missing fields in the payload will be rejected.\n\nAccess to this API is restricted to authenticated members. The request will fail if the member already has a pending or open data erasure request, which must be checked in service logic outside this input schema.\n\nOnly schema fields are referenced and all types are respected per the table definition.","summary":"Create a new data erasure request (discussionboard_data_erasure_requests)","parameters":[],"requestBody":{"description":"Information to create a new data erasure request for a member.","typeName":"IDiscussionboardDataErasureRequest.ICreate"},"responseBody":{"description":"Details of the created data erasure request record.","typeName":"IDiscussionboardDataErasureRequest"},"authorizationRoles":["member"],"name":"create","path":"/discussionboard/dataErasureRequests","method":"post"},{"specification":"Update an existing data erasure request for a member. Based on the 'discussionboard_data_erasure_requests' schema, this endpoint permits modification of the request's 'status', 'reviewed_at', 'completed_at', and 'admin_remark' fields. The 'id' path parameter selects the target erasure request. No fields outside those defined in the table may be modified or referenced, and only those fields can be included in the request or response. Update operations are typically reserved for admins or moderators, as they are responsible for advancing the workflow (e.g., approving, denying, or completing the request).","description":"This endpoint allows platform staff (usually admins or moderators) to update details of an existing data erasure request. The updatable fields per the schema are 'status', 'reviewed_at', 'completed_at', and 'admin_remark'. Changes to these fields are used to record processing of the erasure request, including administrative review and workflow outcome.\n\nThe endpoint enforces strict schema compliance—only fields in 'discussionboard_data_erasure_requests' are included; no external or derived properties. The path parameter '{id}' must be a valid UUID referencing an existing record. No operations outside of schema updates are permitted.\n\nAuthorization is limited to users with admin or moderator roles. Attempts to update fields that do not exist in the schema (such as deletion metadata not present in schema) will result in validation error.\n\nBusiness logic includes recording timestamps ('reviewed_at', 'completed_at') at appropriate workflow milestones, updating the status, and optionally noting admin remarks. The response returns the updated data erasure request object.","summary":"Update an existing data erasure request (discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"The UUID identifying the data erasure request to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The details to update for the selected data erasure request.","typeName":"IDiscussionboardDataErasureRequest.IUpdate"},"responseBody":{"description":"The updated data erasure request record.","typeName":"IDiscussionboardDataErasureRequest"},"authorizationRoles":["admin","moderator"],"name":"update","path":"/discussionboard/dataErasureRequests/{id}","method":"put"},{"specification":"Delete a data erasure request record from the system, as modeled in 'discussionboard_data_erasure_requests'. This schema does not include a soft delete field such as 'deleted_at'. Therefore, the DELETE operation is a hard delete: it will permanently remove the data erasure request record from the database, in compliance with platform policies and subject to authorization restrictions.","description":"This endpoint allows an authorized user (admin or moderator) to permanently delete a data erasure request record identified by its UUID path parameter. Because the 'discussionboard_data_erasure_requests' table does not define any soft-delete field (such as 'deleted_at' or 'is_deleted'), this operation performs a hard delete, irreversibly removing the record from the database. All deletions are final and cannot be undone.\n\nStrict compliance is maintained with the Prisma schema: no status or timestamp fields for deletion exist. Only the 'id' is required in the path, and the response body is null or an empty structure depending on system conventions. Only authorized roles may invoke this endpoint.\n\nIf the record does not exist, validation error or 404 error is returned. Deletions are irrevocable and must be carried out with full awareness and in accordance with administrative audit policies.","summary":"Hard delete a data erasure request (discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"The UUID of the data erasure request to permanently remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","path":"/discussionboard/dataErasureRequests/{id}","method":"delete"}],"components":{"schemas":{"IDiscussionboardChannel.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Channel primary key. Filters search to specific id if supplied.\n\nCorresponds to 'id' in discussionboard_channels table. Used for identifying a single channel uniquely."},"code":{"type":"string","description":"Unique channel code. Filters or searches for channels by code string. Example: 'pol', 'econ'. Matches logic for unique channel lookup, automation, or navigation."},"name":{"type":"string","description":"Channel display name filter. Finds channels with name matching this value. Example: 'Politics'. Fulltext, partial, or exact match, per backend query logic."},"active":{"type":"boolean","description":"Active status flag. Limits search to channels that are active (true) or inactive/archived (false) channels only. Supports management/audit use-cases."},"position":{"type":"integer","description":"Order/position filter. Filters channels by UI/navigation ordering value. Integer sequence as stored in schema."},"created_at":{"type":"string","format":"date-time","description":"Channel creation timestamp. Used for filtering by records created after/before a specified date."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp. Enables filtering by recently edited channels."},"page":{"type":"integer","description":"Pagination: page number (1-based)."},"limit":{"type":"integer","description":"Pagination: max results per page."}},"description":"Request schema for searching/filtering channel entities (discussionboard_channels).\nIncludes all relevant search filters corresponding to channel schema fields.\nPagination parameters provided for batch/list endpoints.","required":[]},"IPageDiscussionboardChannel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardChannel"}}},"required":["pagination","data"],"description":"A paginated result of discussionboard_channels records.\nContains pagination info and array of channel data rows.\nFollows standard IPage<T> OpenAPI contract for batch results."},"IDiscussionboardChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique id of the channel record.\n\nCorresponds to id in discussionboard_channels table.\nAppears as reference in relationships and lookup operations."},"code":{"type":"string","description":"Unique short code for reference in code/config.\n\nExample: 'pol', 'econ'. Ensures normalization/uniqueness for API driven lookups."},"name":{"type":"string","description":"Name for display/navigation in UI. Example: 'Politics'.\nHuman-facing and used to determine category label."},"description":{"oneOf":[{"type":"string","description":"Expanded channel description for users. Can explain rules, scope, or guidance.\nNullable; not all channels need a description."},{"type":"null"}],"description":"Expanded channel description for users. Can explain rules, scope, or guidance.\nNullable; not all channels need a description."},"position":{"type":"integer","description":"Sort order of the channel in UI. Manual integer field allowing custom arrangement. Not a computed value."},"active":{"type":"boolean","description":"Indicates if the channel is visible/active in navigation and query results. Used for archiving without deletion."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for the row."},"updated_at":{"type":"string","format":"date-time","description":"Last modified time for channel metadata."}},"required":["id","code","name","position","active","created_at","updated_at"],"description":"Channel entity type—maps directly to discussionboard_channels model in the DB.\nIncludes all atomic fields and full documentation as per schema file."},"IDiscussionboardChannel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code for this channel. Ex: 'pol', 'econ'. Required."},"name":{"type":"string","description":"Display name for the channel (shown in UI)."},"description":{"oneOf":[{"type":"string","description":"Long-form optional description for the channel. Nullable."},{"type":"null"}],"description":"Long-form optional description for the channel. Nullable."},"position":{"type":"integer","description":"Order for the channel in navigation. Required integer, manually set."},"active":{"type":"boolean","description":"Active/visible status for the channel. If false, channel is archived."}},"required":["code","name","position","active"],"description":"Type for creating a new channel entity (discussionboard_channels). Contains all required fields (except id, created_at, updated_at which are auto-generated)."},"IDiscussionboardChannel.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code for this channel. Ex: 'pol', 'econ'. Settable during edit (with uniqueness constraint)."},"name":{"type":"string","description":"Display name for the channel (shown in UI)."},"description":{"oneOf":[{"type":"string","description":"Optional detailed description for users. Nullable."},{"type":"null"}],"description":"Optional detailed description for users. Nullable."},"position":{"type":"integer","description":"Order for display/navigation."},"active":{"type":"boolean","description":"Flag for visible/archived state."}},"required":["code","name","position","active"],"description":"Body for updating a channel entity (discussionboard_channels).\nAll non-primary fields, except id/created_at/updated_at, are settable by admin logic. Required fields mirror ICreate. 'code' updatable if business rule allows."},"IDiscussionboardChannel.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Whether the delete operation was successful."},"id":{"type":"string","format":"uuid","description":"UUID of the deleted channel row."}},"required":["success","id"],"description":"Result returned by hard-delete of channel row.\nAlways contains status (success boolean) and the id of the deleted record."},"IDiscussionboardSection.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique id for searching specific section."},"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Foreign key id of parent channel for this section. Used for filtering sections under a specific channel."},"code":{"type":"string","description":"Filter for section code (unique within channel)."},"name":{"type":"string","description":"Section display name query/filter."},"active":{"type":"boolean","description":"Boolean filter for section active/archive status."},"position":{"type":"integer","description":"Filter by UI/intended navigation order."},"created_at":{"type":"string","format":"date-time","description":"Filter: date created."},"updated_at":{"type":"string","format":"date-time","description":"Filter: date last updated."},"page":{"type":"integer","description":"Pagination page number."},"limit":{"type":"integer","description":"Results per page (pagination limit)."}},"description":"Request type for querying/listing discussionboard_sections records.\nAllows searching, pagination, full filter by schema fields.\nMaps directly to input requirements for advanced admin/config APIs.","required":[]},"IPageDiscussionboardSection":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSection"}}},"required":["pagination","data"],"description":"Paginated list result for discussionboard_sections entities."},"IDiscussionboardSection":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. The unique id of the section."},"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Foreign key linking this section to its parent channel."},"code":{"type":"string","description":"Unique code for the section (unique per channel). Used for navigation/routing."},"name":{"type":"string","description":"Human-readable display name for the section."},"description":{"oneOf":[{"type":"string","description":"Long-form/expanded section description, nullable for brevity."},{"type":"null"}],"description":"Long-form/expanded section description, nullable for brevity."},"position":{"type":"integer","description":"Manual ordering integer for UI or hierarchy."},"active":{"type":"boolean","description":"Is this section enabled/visible? Admin archive if false."},"created_at":{"type":"string","format":"date-time","description":"When section was created."},"updated_at":{"type":"string","format":"date-time","description":"Last updated time for the section."}},"required":["id","discussionboard_channel_id","code","name","position","active","created_at","updated_at"],"description":"The main entity type for a forum section row, mapping to discussionboard_sections. All fields as in schema plus full documentation."},"IDiscussionboardSection.ICreate":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Channel UUID this section belongs to. FK constraint."},"code":{"type":"string","description":"Unique code within channel for this section. Required."},"name":{"type":"string","description":"Section's visible name. Required."},"description":{"oneOf":[{"type":"string","description":"Optional explanatory description shown in UI. Nullable."},{"type":"null"}],"description":"Optional explanatory description shown in UI. Nullable."},"position":{"type":"integer","description":"Manual order integer for navigation."},"active":{"type":"boolean","description":"Boolean: section is enabled/visible."}},"required":["discussionboard_channel_id","code","name","position","active"],"description":"Fields for creating a discussionboard_sections entity.\nAll required except id/timestamps which are generated by backend."},"IDiscussionboardSection.IUpdate":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Channel UUID FK for changing or maintaining section's parent."},"code":{"type":"string","description":"Unique code for section (must remain unique in channel context, business rule dependent)."},"name":{"type":"string","description":"Human-facing section name."},"description":{"oneOf":[{"type":"string","description":"Optional explanation/detail (nullable)."},{"type":"null"}],"description":"Optional explanation/detail (nullable)."},"position":{"type":"integer","description":"Manual navigation order."},"active":{"type":"boolean","description":"Boolean: section enabled/visible state."}},"required":["discussionboard_channel_id","code","name","position","active"],"description":"Body schema for updating a discussionboard_sections record. Mirrors all natively updateable fields in the schema except id/timestamps."},"IDiscussionboardSection.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"True if delete succeeded."},"id":{"type":"string","format":"uuid","description":"UUID of the deleted section."}},"required":["success","id"],"description":"Result for hard delete of a discussionboard_sections entity."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of records per page."},"records":{"type":"integer","format":"uint32","description":"Total records returned/available for this query."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages available according to this query."}},"required":["current","limit","records","pages"],"description":"Pagination information for paginated responses according to the standard IPage structure."},"IDiscussionboardConfiguration.IRequest":{"type":"object","description":"디스커션보드 시스템 설정 레코드의 검색, 필터 및 페이지네이션 파라미터.\n\n이 오브젝트는 discussionboard_configurations 테이블에 존재하는 전체 필드(id, key, value, description, created_at, updated_at)를 기준으로 검색/정렬/필터/페이지네이션을 지원합니다. 관리자는 설정 키, 값, 생성일, 수정일을 필터링하여 시스템 전역의 런타임 설정 및 기능 토글을 효율적으로 검색할 수 있습니다. 비즈니스 목적상, 안정적인 시스템 운영과 재현성 있는 시스템 설정 관리에 사용됩니다.","properties":{"id":{"type":"string","format":"uuid","description":"설정 개별 레코드의 UUID. discussionboard_configurations.id. 주로 단건 조회 혹은 상세 관리시 필터링에 사용됩니다."},"key":{"type":"string","description":"설정 키. 예시:'max_post_per_hour'. 검색 시 특정 시스템 제어나 기능 토글 관련 설정만 한정 조회할 때 사용합니다."},"value":{"oneOf":[{"type":"string","description":"설정 값. 모든 값은 문자열로 저장되며, 예시로 'true', '5', 'abc'. 부분 일치(Like 검색)나 Null 조건 검색에 적용 가능.\n\n어플리케이션 논리/서비스에서 변환되어 사용됩니다."},{"type":"null","description":"설정 값. 모든 값은 문자열로 저장되며, 예시로 'true', '5', 'abc'. 부분 일치(Like 검색)나 Null 조건 검색에 적용 가능.\n\n어플리케이션 논리/서비스에서 변환되어 사용됩니다."}],"description":"설정 값. 모든 값은 문자열로 저장되며, 예시로 'true', '5', 'abc'. 부분 일치(Like 검색)나 Null 조건 검색에 적용 가능.\n\n어플리케이션 논리/서비스에서 변환되어 사용됩니다."},"description":{"oneOf":[{"type":"string","description":"관리자용/시스템 UI에 표시될 설명/주석. 설정 목적 검색이나 관리 설명 검색 등에서 활용됩니다."},{"type":"null","description":"관리자용/시스템 UI에 표시될 설명/주석. 설정 목적 검색이나 관리 설명 검색 등에서 활용됩니다."}],"description":"관리자용/시스템 UI에 표시될 설명/주석. 설정 목적 검색이나 관리 설명 검색 등에서 활용됩니다."},"created_at":{"type":"string","format":"date-time","description":"생성일시(ISO-8601). 기간 조건 검색, 변경 이력 조회 등에서 사용됩니다."},"updated_at":{"type":"string","format":"date-time","description":"최종 수정일시(ISO-8601). 최근 변경 감지 등 최신 상태 점검 시 검색조건에 활용합니다."},"page":{"type":"integer","description":"페이지네이션 요청시 페이지 번호(1부터 시작, 기본:1)."},"limit":{"type":"integer","description":"페이지 당 최대 레코드 수. (기본: 100)"},"orderBy":{"type":"string","description":"정렬 기준 필드명. 예) 'created_at', 'key', 'updated_at' 등. default는 created_at desc"},"orderDirection":{"oneOf":[{"const":"asc","description":"정렬 방향. 오름차순(asc) 또는 내림차순(desc)"},{"const":"desc","description":"정렬 방향. 오름차순(asc) 또는 내림차순(desc)"}],"description":"정렬 방향. 오름차순(asc) 또는 내림차순(desc)"},"q":{"type":"string","description":"키워드 통합(전방/부분) 검색용 텍스트. key, description 등에서 일치 문자열을 검색."}},"required":[]},"IPageDiscussionboardConfiguration":{"type":"object","description":"설정 리스트의 페이지네이션 컨테이너.\n\n플랫폼 런타임 시스템 설정의 목록을 여러 페이지로 나누어서 반환할 때 사용합니다. 각 설정 레코드는 discussionboard_configurations 테이블의 전체 필드를 포함합니다. pagination 속성에는 현재 페이지 정보, limit, 전체 레코드 수와 페이지 수가 담기며, data 필드는 각 페이지 단위 설정의 배열입니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardConfiguration"}}},"required":["pagination","data"]},"IDiscussionboardConfiguration":{"type":"object","description":"discussionboard_configurations 테이블의 개별 설정 엔티티.\n\n각 필드는 시스템 전체 또는 특정 기능의 런타임/기능토글/상수값을 나타내며, 플랫폼 설정, 플래그, 임계치 등에서 활용됩니다. 자세한 구조는 다음과 같습니다.","properties":{"id":{"type":"string","format":"uuid","description":"설정 레코드의 고유 식별자(UUID)."},"key":{"type":"string","description":"설정의 키명. 필수, 전역 유일. 시스템의 각 기능 또는 속성을 식별하는 명칭. 예:'max_post_per_hour', 'enable_sms_notice'"},"value":{"oneOf":[{"type":"string","description":"실제 설정 값. 모든 데이터는 string(문자열)로 저장되며, null은 미설정/공란 사용 등 특수 목적 가능.\n\n실제 적용시 앱 내에서 변환(파싱)되어 사용됨."},{"type":"null","description":"실제 설정 값. 모든 데이터는 string(문자열)로 저장되며, null은 미설정/공란 사용 등 특수 목적 가능.\n\n실제 적용시 앱 내에서 변환(파싱)되어 사용됨."}],"description":"실제 설정 값. 모든 데이터는 string(문자열)로 저장되며, null은 미설정/공란 사용 등 특수 목적 가능.\n\n실제 적용시 앱 내에서 변환(파싱)되어 사용됨."},"description":{"oneOf":[{"type":"string","description":"설정에 대한 설명/메모. 관리자에게만 표시되며, 설정 목적이나 사용법에 대한 메타데이터를 제공합니다."},{"type":"null","description":"설정에 대한 설명/메모. 관리자에게만 표시되며, 설정 목적이나 사용법에 대한 메타데이터를 제공합니다."}],"description":"설정에 대한 설명/메모. 관리자에게만 표시되며, 설정 목적이나 사용법에 대한 메타데이터를 제공합니다."},"created_at":{"type":"string","format":"date-time","description":"레코드 생성 시각(ISO-8601 표준). 플랫폼 초기 설정/이력 추적/감사에 사용."},"updated_at":{"type":"string","format":"date-time","description":"마지막 수정 시각(ISO-8601 표준). 최근 변경 감지, 추적, 히스토리 관리 등에 활용."}},"required":["id","key","created_at","updated_at"]},"IDiscussionboardConfiguration.ICreate":{"type":"object","description":"설정(디스커션보드 configuration) 신규 생성 요청 스키마.\n\n필수/필요 데이터만 포함: key(유일), value(문자열/nullable), description(설명). 생성 일시/수정 일시는 자동 생성됨.","properties":{"key":{"type":"string","description":"생성할 설정의 고유 키(유일). 시스템 기능 식별자 역할을 하며, 비워둘 수 없음."},"value":{"oneOf":[{"type":"string","description":"설정 값. string만 허용. null은 미설정 상태로 저장될 수 있음."},{"type":"null","description":"설정 값. string만 허용. null은 미설정 상태로 저장될 수 있음."}],"description":"설정 값. string만 허용. null은 미설정 상태로 저장될 수 있음."},"description":{"oneOf":[{"type":"string","description":"관리자 관리자 UI/설명란 용도로 사용할 수 있는 옵션 설명(메모)."},{"type":"null","description":"관리자 관리자 UI/설명란 용도로 사용할 수 있는 옵션 설명(메모)."}],"description":"관리자 관리자 UI/설명란 용도로 사용할 수 있는 옵션 설명(메모)."}},"required":["key"]},"IDiscussionboardConfiguration.IUpdate":{"type":"object","description":"디스커션보드 시스템 설정의 일부 필드 갱신용 Patch/Put 요청 오브젝트.\n\n값(value) 또는 description(설명) 속성만 수정 가능. key 및 id는 변경 불가(불변 속성). 값 적용시 비어 있을 경우 null로 저장.","properties":{"value":{"oneOf":[{"type":"string","description":"수정할 설정 값. 문자열 또는 null."},{"type":"null","description":"수정할 설정 값. 문자열 또는 null."}],"description":"수정할 설정 값. 문자열 또는 null."},"description":{"oneOf":[{"type":"string","description":"상세 설명(메모란) 변경값(옵션)."},{"type":"null","description":"상세 설명(메모란) 변경값(옵션)."}],"description":"상세 설명(메모란) 변경값(옵션)."}},"required":[]},"IDiscussionboardNotification.IRequest":{"type":"object","description":"시스템 알림 로그(notification) 검색, 필터, 페이지네이션용 요청 오브젝트.\n\ndiscussionboard_notifications 테이블에 정의된 필드(target_id, type, title, delivered, created_at 등)에 기반하여 전체/부분 검색, 페이징, 정렬, 기간 필터 등이 가능합니다.","properties":{"id":{"type":"string","format":"uuid","description":"알림 로그별 고유 UUID. 단일 조회/특정 타겟 검색 등에서 활용."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"알림을 수신한 엔티티(유저, 채널 등)의 UUID. 개인화된 알림/특정 타겟 알람 필터 시 사용."},{"type":"null","format":"uuid","description":"알림을 수신한 엔티티(유저, 채널 등)의 UUID. 개인화된 알림/특정 타겟 알람 필터 시 사용."}],"description":"알림을 수신한 엔티티(유저, 채널 등)의 UUID. 개인화된 알림/특정 타겟 알람 필터 시 사용."},"type":{"type":"string","description":"알림 이벤트 종류명. 예:'system_announcement', 'user_mention', 'ban', 'reply_created' 등과 같이 플랫폼 내 발생 이벤트에 따라 값이 지정됨."},"title":{"type":"string","description":"이벤트/알림의 요약 제목. UI/리스트 검색이나 알림 센터 내 제목 검색 등에 활용."},"body":{"oneOf":[{"type":"string","description":"알림 본문(내용). null 가능. 부분 키워드 검색, 상세 조회 등에서 사용."},{"type":"null","description":"알림 본문(내용). null 가능. 부분 키워드 검색, 상세 조회 등에서 사용."}],"description":"알림 본문(내용). null 가능. 부분 키워드 검색, 상세 조회 등에서 사용."},"delivered":{"type":"boolean","description":"전달 상태 플래그. true(배달 완료), false(미전달/대기 상태)로 분류. 전달여부 필터링 시 활용."},"created_at":{"type":"string","format":"date-time","description":"알림 레코드가 생성된 시간(ISO-8601). 기간 검색, 최신 정렬, 슬랙/푸시 연동 시 활용."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"실제 전달 완료 시각(ISO-8601, null 허용). 배달 실적 필터링 등에 사용."},{"type":"null","format":"date-time","description":"실제 전달 완료 시각(ISO-8601, null 허용). 배달 실적 필터링 등에 사용."}],"description":"실제 전달 완료 시각(ISO-8601, null 허용). 배달 실적 필터링 등에 사용."},"page":{"type":"integer","description":"페이지 번호(1 부터, 기본:1)."},"limit":{"type":"integer","description":"페이지 당 출력될 알림 로그 수. (기본: 100)"},"orderBy":{"type":"string","description":"정렬 필드명. 예:'created_at', 'title', 'type' 등."},"orderDirection":{"oneOf":[{"const":"asc","description":"정렬 방향. asc(오름차순) / desc(내림차순)"},{"const":"desc","description":"정렬 방향. asc(오름차순) / desc(내림차순)"}],"description":"정렬 방향. asc(오름차순) / desc(내림차순)"},"q":{"type":"string","description":"알림 본문/title 등 텍스트 필드 대상으로 부분일치/전체 키워드 검색용"}},"required":[]},"IPageIDiscussionboardNotification":{"type":"object","description":"알림 로그 엔티티의 페이지네이션 컨테이너 타입.\n\ndiscussionboard_notifications 내 알림 로그 레코드들을 배열로, 전체 페이지/레코드 정보를 pagination 속성에 분리하여 제공합니다. 시스템/관리 UI, 개인 알림 리스트 응답, 크로스 플랫폼 알림 로그 analytics 등에서 활용됩니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotification"}}},"required":["pagination","data"]},"IDiscussionboardNotification":{"type":"object","description":"discussionboard_notifications 테이블의 알림 로그 개별 행 모델.\n\n특정 사용자의 알림 내역, 시스템 통지, 배달 상태감시 등에서 개별적으로 조회/분석/발행 내역 추적을 위해 활용됩니다.\n\n레코드의 속성별 설명은 다음과 같습니다.","properties":{"id":{"type":"string","format":"uuid","description":"알림 로그 개별 행 고유 UUID"},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"알림을 전달받은 대상을 식별하는 UUID (개인화/특정 엔티티/채널/유저 등)."},{"type":"null","format":"uuid","description":"알림을 전달받은 대상을 식별하는 UUID (개인화/특정 엔티티/채널/유저 등)."}],"description":"알림을 전달받은 대상을 식별하는 UUID (개인화/특정 엔티티/채널/유저 등)."},"type":{"type":"string","description":"알림 이벤트 종류. 예시:'system_announcement', 'user_mention', 'post_reply' 등. UI, 분류, 통계, 알림 처리 등에서 사용."},"title":{"type":"string","description":"알림 제목 요약. 메인 알림 센터/목록/푸시 표시시 대표 문구."},"body":{"oneOf":[{"type":"string","description":"알림의 전체 상세 내용 문자열. null 허용."},{"type":"null","description":"알림의 전체 상세 내용 문자열. null 허용."}],"description":"알림의 전체 상세 내용 문자열. null 허용."},"delivered":{"type":"boolean","description":"알림 실제 배달여부. True(배달 완료), False(미전달/실패/지연/임시저장 등). 통계/관리/재시도 처리시에 활용."},"created_at":{"type":"string","format":"date-time","description":"알림이 생성된 UTC 기준 시각. 플랫폼 관리/개인 알림 히스토리/audit에서 사용."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"실제 배달 완료된 전체 타임스탬프(없으면 null). 전달 상태 통계에 사용."},{"type":"null","format":"date-time","description":"실제 배달 완료된 전체 타임스탬프(없으면 null). 전달 상태 통계에 사용."}],"description":"실제 배달 완료된 전체 타임스탬프(없으면 null). 전달 상태 통계에 사용."}},"required":["id","type","title","delivered","created_at"]},"IDiscussionboardNotification.ICreate":{"type":"object","description":"새로운 알림(notification) 로그 행(레코드) 생성 요청 스키마.\n\n필수 생성 속성은 type(이벤트 유형), title(제목), delivered(배달 상태), created_at(생성시각)입니다. target_id 및 body, delivered_at은 옵션으로 선택 적용 가능. 주의: created_at 및 delivered 값은 반드시 백엔드/서비스에서 할당, 관리됩니다.","properties":{"type":{"type":"string","description":"생성될 알림의 이벤트 종류(정의된 string, 예:'system_announcement', 'reply_posted')."},"title":{"type":"string","description":"알림 제목. UI 리스트 및 개인 inbox 등에서 메인 문구로 노출."},"body":{"oneOf":[{"type":"string","description":"상세 알림 본문. null 허용. 일반 텍스트 기반, 길이 제한은 서비스 정책에 따름."},{"type":"null","description":"상세 알림 본문. null 허용. 일반 텍스트 기반, 길이 제한은 서비스 정책에 따름."}],"description":"상세 알림 본문. null 허용. 일반 텍스트 기반, 길이 제한은 서비스 정책에 따름."},"delivered":{"type":"boolean","description":"이 알림이 배달 완료 상태로 바로 생성되는 경우 true, 큐 대기/미전달상태로 생성 시 false. (백엔드 논리에 따라 자동 셋팅 권장)"},"created_at":{"type":"string","format":"date-time","description":"생성시각(서버단에서 ISO-8601 기준으로 할당)."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"알림 타겟의 UUID. 알림 개인화/특정 엔티티 대상으로 발행하는 경우에만 사용."},{"type":"null","format":"uuid","description":"알림 타겟의 UUID. 알림 개인화/특정 엔티티 대상으로 발행하는 경우에만 사용."}],"description":"알림 타겟의 UUID. 알림 개인화/특정 엔티티 대상으로 발행하는 경우에만 사용."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"(옵션) 실제 배달 완료 시각. 배달 즉시 발생 케이스 외에는 null 또는 생략."},{"type":"null","format":"date-time","description":"(옵션) 실제 배달 완료 시각. 배달 즉시 발생 케이스 외에는 null 또는 생략."}],"description":"(옵션) 실제 배달 완료 시각. 배달 즉시 발생 케이스 외에는 null 또는 생략."}},"required":["type","title","delivered","created_at"]},"IDiscussionboardNotification.IUpdate":{"type":"object","description":"알림 로그 행의 값 갱신/수정 요청용 오브젝트(Partial Update/PUT).\n\n수정 가능 속성: type(이벤트 종류), title(제목), body, delivered, delivered_at, target_id(옵션), 기타 null 허용 가능 필드 포함. created_at은 수정 불가/불변 속성.","properties":{"type":{"type":"string","description":"알림 종류명(수정할 경우 사용)."},"title":{"type":"string","description":"알림 제목."},"body":{"oneOf":[{"type":"string","description":"상세 본문 텍스트 문자열. null 허용."},{"type":"null","description":"상세 본문 텍스트 문자열. null 허용."}],"description":"상세 본문 텍스트 문자열. null 허용."},"delivered":{"type":"boolean","description":"상태 플래그 값. True(배달 완료), False(큐 대기/에러/누락/임시저장)."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"실제 배달 완료 타임스탬프. null 가능."},{"type":"null","format":"date-time","description":"실제 배달 완료 타임스탬프. null 가능."}],"description":"실제 배달 완료 타임스탬프. null 가능."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"대상 타겟(UUID)."},{"type":"null","format":"uuid","description":"대상 타겟(UUID)."}],"description":"대상 타겟(UUID)."}},"required":[]},"IPageIDiscussionboardSetting":{"type":"object","description":"discussionboard_settings 기준 기능 별 설정/토글/플래그들의 페이지네이트된 결과 담는 컨테이너.\n\npagination: 페이지네이션 메타정보, data: 각 area/기능별 환경설정 레코드 배열을 반환합니다.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSetting"}}},"required":["pagination","data"]},"IDiscussionboardSetting.IRequest":{"type":"object","description":"디스커션보드 기능/area별 설정 레코드(discussionboard_settings) 조회, 필터, 페이징 요청 오브젝트.\n\nscope_id, scope_type, key, value, description, 생성/수정일 필터 지원. 'discussionboard_settings'의 실제 컬럼 기준으로만 검색/정렬/조회 가능. 보통 관리자 UI의 기능 토글, 채널/섹션별 설정 등의 조회에 활용됨.","properties":{"id":{"type":"string","format":"uuid","description":"설정 레코드 id(UUID)."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"설정 적용 범위 엔티티의 UUID. 예: 특정 채널/섹션/게시판 등과 연결된 경우 활용."},{"type":"null","format":"uuid","description":"설정 적용 범위 엔티티의 UUID. 예: 특정 채널/섹션/게시판 등과 연결된 경우 활용."}],"description":"설정 적용 범위 엔티티의 UUID. 예: 특정 채널/섹션/게시판 등과 연결된 경우 활용."},"scope_type":{"type":"string","description":"설정 적용 범위 타입. 예:'channel', 'section', 'feature_flag' 등. 관리자가 분류 필터로 활용."},"key":{"type":"string","description":"설정 키. 부분검색 또는 특정 토글 조회 목적."},"value":{"oneOf":[{"type":"string","description":"설정 값. null 가능. 특수 기능 미설정 또는 토글 Off시 활용."},{"type":"null","description":"설정 값. null 가능. 특수 기능 미설정 또는 토글 Off시 활용."}],"description":"설정 값. null 가능. 특수 기능 미설정 또는 토글 Off시 활용."},"description":{"oneOf":[{"type":"string","description":"설명/비고(옵션). UI 표시나 관리자 검색용 메모란."},{"type":"null","description":"설명/비고(옵션). UI 표시나 관리자 검색용 메모란."}],"description":"설명/비고(옵션). UI 표시나 관리자 검색용 메모란."},"created_at":{"type":"string","format":"date-time","description":"생성 시각(ISO-8601). 이력 관리/변경 추적."},"updated_at":{"type":"string","format":"date-time","description":"수정/최종 업데이트 시간. 정렬/최신 상태 조회 목적."},"page":{"type":"integer","description":"페이지네이션 페이지 번호(기본:1)."},"limit":{"type":"integer","description":"리스트 당 개수 제한."},"orderBy":{"type":"string","description":"정렬 필드명."},"orderDirection":{"oneOf":[{"const":"asc","description":"정렬 방향 asc/desc"},{"const":"desc","description":"정렬 방향 asc/desc"}],"description":"정렬 방향 asc/desc"},"q":{"type":"string","description":"키/설명/값 등 통합 텍스트 검색용"}},"required":[]},"IDiscussionboardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 설정 식별자입니다.\n\n모든 per-feature/area 설정 레코드의 기본 키로, 각 행을 고유하게 식별합니다. 이는 검색, 수정, 삭제 시 주 식별자로 활용됩니다."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"설정이 적용되는 엔터티 혹은 영역의 식별자입니다. null인 경우 전체 시스템(글로벌 설정) 적용을 의미합니다.\n\n채널, 섹션, 특정 기능 단위로 설정이 있으나, 해당 필드가 null일 경우 전체 시스템에 적용됩니다. 관계형 데이터베이스에서 외래키 제약을 두지 않고, 서비스 로직에서 참조됩니다."},{"type":"null","format":"uuid","description":"설정이 적용되는 엔터티 혹은 영역의 식별자입니다. null인 경우 전체 시스템(글로벌 설정) 적용을 의미합니다.\n\n채널, 섹션, 특정 기능 단위로 설정이 있으나, 해당 필드가 null일 경우 전체 시스템에 적용됩니다. 관계형 데이터베이스에서 외래키 제약을 두지 않고, 서비스 로직에서 참조됩니다."}],"description":"설정이 적용되는 엔터티 혹은 영역의 식별자입니다. null인 경우 전체 시스템(글로벌 설정) 적용을 의미합니다.\n\n채널, 섹션, 특정 기능 단위로 설정이 있으나, 해당 필드가 null일 경우 전체 시스템에 적용됩니다. 관계형 데이터베이스에서 외래키 제약을 두지 않고, 서비스 로직에서 참조됩니다."},"scope_type":{"type":"string","description":"이 설정이 적용되는 영역의 타입입니다. 예시: 'channel', 'section', 'feature_flag'.\n\n비즈니스 영역에서 context(문맥) 또는 범위를 구분할 때 사용하며, 관리 UI/라우팅에서도 쓰입니다."},"key":{"type":"string","description":"설정의 키(키워드)입니다.\n\n예: 'moderation_policy'. 개별 토글 또는 옵션의 이름이자 식별자로서, 글로벌/로컬에서 연관된 설정 구분에 사용됩니다."},"value":{"oneOf":[{"type":"string","description":"설정 값입니다. 플래그/문자/한계값 등 다양하게 사용하며, 미설정 혹은 선택적 옵션일 경우 null로 둘 수 있습니다.\n\n비즈니스 로직에 따라 동적으로 값을 해석하게 되며, 서비스상에서는 문자열로만 저장·관리합니다."},{"type":"null","description":"설정 값입니다. 플래그/문자/한계값 등 다양하게 사용하며, 미설정 혹은 선택적 옵션일 경우 null로 둘 수 있습니다.\n\n비즈니스 로직에 따라 동적으로 값을 해석하게 되며, 서비스상에서는 문자열로만 저장·관리합니다."}],"description":"설정 값입니다. 플래그/문자/한계값 등 다양하게 사용하며, 미설정 혹은 선택적 옵션일 경우 null로 둘 수 있습니다.\n\n비즈니스 로직에 따라 동적으로 값을 해석하게 되며, 서비스상에서는 문자열로만 저장·관리합니다."},"description":{"oneOf":[{"type":"string","description":"관리자 및 내부용 설명 메모입니다.\n\n관리자 UI나 감사 로그에서 참고 목적으로 쓰이는 부가 설명입니다. nullable이며, 주석이나 사용예 기입에 활용됩니다."},{"type":"null","description":"관리자 및 내부용 설명 메모입니다.\n\n관리자 UI나 감사 로그에서 참고 목적으로 쓰이는 부가 설명입니다. nullable이며, 주석이나 사용예 기입에 활용됩니다."}],"description":"관리자 및 내부용 설명 메모입니다.\n\n관리자 UI나 감사 로그에서 참고 목적으로 쓰이는 부가 설명입니다. nullable이며, 주석이나 사용예 기입에 활용됩니다."},"created_at":{"type":"string","format":"date-time","description":"설정 행이 생성된 시각(감사·변경 추적용).\n\nRFC 3339 형식의 타임스탬프로 기록됩니다. 시스템 자동 부여됩니다."},"updated_at":{"type":"string","format":"date-time","description":"설정 행이 마지막으로 수정된 시각(감사·변경 추적용).\n\nRFC 3339 형식의 타임스탬프로 기록됩니다. 시스템 자동 부여됩니다."}},"required":["id","scope_type","key","created_at","updated_at"],"description":"discussionboard_settings 테이블에 대한 단일 행 형식입니다.\n\n개별 영역/기능/컨텍스트별로 운영/비즈니스 정책을 담는 설정 레코드로, 완전 원자적 컬럼만 보유합니다. 비즈니스 플래그, 한계값, 정책 코드, 토글 등 운영상 실시간 변경 가능한 옵션을 저장합니다. 데이터 정확성·탄력성을 위해 3NF로 설계되어 중복 없이 단일 값만 유지합니다.\n\n각 속성은 Prisma 스키마의 컬럼 설명(코멘트)와 완전히 일치하며, API 설계에서 필요로 하는 상세 메타정보(타입, nullable, example 등) 역시 반영되어 있습니다. 시스템에서는 채널, 섹션, 기능별 설정 모듈화에 직접 활용합니다."},"IDiscussionboardSetting.ICreate":{"type":"object","properties":{"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"설정 적용 대상의 식별자(채널, 섹션, 기능 등), 글로벌일 경우 null."},{"type":"null","format":"uuid","description":"설정 적용 대상의 식별자(채널, 섹션, 기능 등), 글로벌일 경우 null."}],"description":"설정 적용 대상의 식별자(채널, 섹션, 기능 등), 글로벌일 경우 null."},"scope_type":{"type":"string","description":"설정의 컨텍스트 혹은 범위 영역. 예: 'channel', 'section', 'feature_flag' 등."},"key":{"type":"string","description":"설정의 고유 키값(필수)."},"value":{"oneOf":[{"type":"string","description":"설정값. 비어 있을 경우 null로 전달 가능."},{"type":"null","description":"설정값. 비어 있을 경우 null로 전달 가능."}],"description":"설정값. 비어 있을 경우 null로 전달 가능."},"description":{"oneOf":[{"type":"string","description":"설명 혹은 부가 메모. 선택적, null 가능."},{"type":"null","description":"설명 혹은 부가 메모. 선택적, null 가능."}],"description":"설명 혹은 부가 메모. 선택적, null 가능."}},"required":["scope_type","key"],"description":"discussionboard_settings 테이블에 새로운 설정을 추가할 때 사용하는 요청 DTO입니다.\n\n비즈니스 또는 시스템상의 영역별 정책 추가 시 필요한 필드만 포함하며, created_at/updated_at은 서버에서 자동 생성됩니다.\n\nnull 허용 컬럼에 대해서는 명시적으로 null 지정이 가능해야 합니다."},"IDiscussionboardSetting.IUpdate":{"type":"object","properties":{"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"설정 적용 대상 식별자. null은 글로벌 설정을 의미."},{"type":"null","format":"uuid","description":"설정 적용 대상 식별자. null은 글로벌 설정을 의미."}],"description":"설정 적용 대상 식별자. null은 글로벌 설정을 의미."},"scope_type":{"type":"string","description":"설정 영역의 타입. 변경 목적에 따라 필요 시만 전송."},"key":{"type":"string","description":"설정의 키. 실제로 수정 불가능한 경우가 일반적이나(식별자 역할), API 디자인상 허용 시 명시."},"value":{"oneOf":[{"type":"string","description":"설정값 갱신. 명시적 null도 허용."},{"type":"null","description":"설정값 갱신. 명시적 null도 허용."}],"description":"설정값 갱신. 명시적 null도 허용."},"description":{"oneOf":[{"type":"string","description":"설명 갱신 혹은 메모 추가. null 허용."},{"type":"null","description":"설명 갱신 혹은 메모 추가. null 허용."}],"description":"설명 갱신 혹은 메모 추가. null 허용."}},"description":"discussionboard_settings 테이블의 기존 설정 레코드를 갱신할 때 사용하는 모델입니다.\n\n필드별로 nullable 설정과 타입 변환이 동일하게 반영되며, 수정할 속성만 일부분 보내는 방식(PUT/전체교체 vs PATCH/일부갱신)에 유연하게 대응할 수 있습니다.","required":[]},"IDiscussionboardAuditLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"페이지 번호(1 베이스)"},"limit":{"type":"integer","minimum":1,"description":"페이지 당 결과 수 (기본값 100)"},"action":{"type":"string","description":"이벤트 액션 유형(선택적)."},"actor_id":{"type":"string","format":"uuid","description":"행동 주체 식별자(선택적, UUID)"},"target_id":{"type":"string","format":"uuid","description":"행동 대상 엔터티 식별자(선택적, UUID)"},"created_at_from":{"type":"string","format":"date-time","description":"이벤트 발생시각 하한(선택 가능)"},"created_at_to":{"type":"string","format":"date-time","description":"이벤트 발생시각 상한(선택 가능)"}},"description":"discussionboard_audit_logs에 대한 검색/필터링 및 페이징용 요청 DTO\n\n액션유형, 행위자, 대상, 기간별 조회에 활용하며, page/limit 기본설정 및 선택적 범위검색 기능 제공합니다.","required":[]},"IPageIDiscussionboardAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAuditLog"}}},"required":["pagination","data"],"description":"discussionboard_audit_logs의 페이지네이션 응답용 컨테이너 타입입니다. IPage 구조를 준수하여 결과 목록과 페이지 정보를 포함합니다."},"IDiscussionboardAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"감사로그 개별 식별자(UUID PK)\n\n실제 이벤트 단위로 발생한 행위 단일 로그를 고유하게 식별합니다."},"actor_id":{"type":"string","format":"uuid","description":"행동 주체(실행자, 주로 member 혹은 admin)의 식별자(UUID)."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"행위 대상의 식별자. null은 시스템 전체/글로벌 이벤트를 의미합니다."},{"type":"null","format":"uuid","description":"행위 대상의 식별자. null은 시스템 전체/글로벌 이벤트를 의미합니다."}],"description":"행위 대상의 식별자. null은 시스템 전체/글로벌 이벤트를 의미합니다."},"action":{"type":"string","description":"감사이벤트 유형/분류(예: post_deleted, role_assigned, settings_changed 등)."},"payload":{"oneOf":[{"type":"string","description":"이벤트 관련 JSON 직렬화 상세. 단순 이벤트의 경우 null."},{"type":"null","description":"이벤트 관련 JSON 직렬화 상세. 단순 이벤트의 경우 null."}],"description":"이벤트 관련 JSON 직렬화 상세. 단순 이벤트의 경우 null."},"created_at":{"type":"string","format":"date-time","description":"이벤트 일시(타임스탬프), 항상 존재해야 합니다."}},"required":["id","actor_id","action","created_at"],"description":"discussionboard_audit_logs의 단일 로그 이벤트 엔터티입니다.\n\n권한변경, 중요삭제, 설정변경 등 감사가 필요한 주요 행위 기록 및 감사/포렌식의 근간이 되는 테이블에서 직접 매핑된 타입입니다."},"IDiscussionboardAuditLog.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"행위자(주로 admin, member)의 식별자"},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"행위 대상 식별자. 없는 경우 null"},{"type":"null","format":"uuid","description":"행위 대상 식별자. 없는 경우 null"}],"description":"행위 대상 식별자. 없는 경우 null"},"action":{"type":"string","description":"감사 이벤트 분류/명칭(Action 종류)"},"payload":{"oneOf":[{"type":"string","description":"이벤트 상세, JSON 직렬"},{"type":"null","description":"이벤트 상세, JSON 직렬"}],"description":"이벤트 상세, JSON 직렬"}},"required":["actor_id","action"],"description":"감사로그 신규 기록을 생성하는 요청 DTO\n\n행위자, 이벤트명, 관련 데이터(JSON 문자열/옵션)만 명시적으로 정의, created_at등은 서버에서 자동 생성합니다."},"IDiscussionboardAuditLog.IUpdate":{"type":"object","properties":{"payload":{"oneOf":[{"type":"string","description":"추가/수정될 이벤트 상세(JSON 문자열), 감사관리 목적 시 사용."},{"type":"null","description":"추가/수정될 이벤트 상세(JSON 문자열), 감사관리 목적 시 사용."}],"description":"추가/수정될 이벤트 상세(JSON 문자열), 감사관리 목적 시 사용."}},"description":"감사로그 레코드의 추가 컨텍스트/설명 (payload) 갱신용 모델\n\n이벤트명, 타임스탬프 등은 수정 불가, 추가설명만 저장 가능.","required":[]},"IDiscussionboardMember.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"페이지 번호(1부터 시작)"},"limit":{"type":"integer","minimum":1,"description":"페이지 별 결과 수(기본값 100)"},"role":{"type":"string","description":"멤버의 시스템 역할 (member, moderator, admin 등 필터)"},"is_active":{"type":"boolean","description":"활성/비활성 여부로 필터"},"created_at_from":{"type":"string","format":"date-time","description":"가입일 검색 하한"},"created_at_to":{"type":"string","format":"date-time","description":"가입일 검색 상한"}},"description":"discussionboard_members 회원 정보 페이징/검색용 요청 DTO\n\n역할, 활성여부, 가입기간 필터 등 회원관리 상황을 위한 페이징/검색 조건객체입니다.","required":[]},"IPageIDiscussionboardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMember"}}},"required":["pagination","data"],"description":"discussionboard_members 결과의 페이징 컨테이너 DTO\n\n목록형 API 응답에서 회원 개별 정보(요약 혹은 상세형)와 페이지 정보 전체를 포괄합니다."},"IDiscussionboardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"회원 개별 식별자(UUID). DB PK로 팬아웃."},"username":{"type":"string","description":"고유 유저명(로그인용+표시용 식별자)"},"email":{"type":"string","format":"email","description":"고유 이메일(로그인, 인증 및 알림용)"},"role":{"type":"string","description":"시스템 권한/역할: member, moderator, admin."},"is_active":{"type":"boolean","description":"계정 활성화 여부(true: 정상, false: 정지/일시정지)"},"created_at":{"type":"string","format":"date-time","description":"가입일/생성일시(Audit 용)"},"updated_at":{"type":"string","format":"date-time","description":"레코드 최종 갱신 시각"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Soft delete) 탈퇴처리 시각 또는 null(활성 계정)"},{"type":"null","format":"date-time","description":"(Soft delete) 탈퇴처리 시각 또는 null(활성 계정)"}],"description":"(Soft delete) 탈퇴처리 시각 또는 null(활성 계정)"}},"required":["id","username","email","role","is_active","created_at","updated_at"],"description":"discussionboard_members 테이블의 회원 데이터 단일 행 상세\n\n로그인/인증/회원검색용 기본 정보 + Soft Delete column포함, 권한 및 상태에 따라 플랫폼 주요 기능 액세스를 제어합니다."},"IDiscussionboardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"회원의 유저명(고유, 필수, 중복불가 제한)"},"email":{"type":"string","format":"email","description":"회원 이메일 주소(로그인, 알림, 인증 등)"},"hashed_password":{"type":"string","description":"비밀번호 해시(실제 비밀번호 X, 암호화 저장)"},"role":{"type":"string","description":"가입시 부여할 시스템 권한: member, moderator, admin"},"is_active":{"type":"boolean","description":"가입시 활성화 상태 직접 지정 필요"}},"required":["username","email","hashed_password","role","is_active"],"description":"회원 신규 가입/계정 생성 시 사용하는 DTO\n\n유저명, 이메일, 해시비밀번호, 역할, 활성상태만 명시적으로 입력하며, DB에서 id/타임스탬프 등은 자동 생성됩니다."},"IDiscussionboardMember.IUpdate":{"type":"object","properties":{"username":{"type":"string","description":"The member's unique username used for login and display within the discussion board system.\n\nThis property maps to the `username` field in the `discussionboard_members` Prisma schema. Changing this value will update the username used throughout the forum. Must be unique and is subject to application and database constraints. Example: 'civicUser42'.\n\nUpdating requires appropriate validation to ensure uniqueness and conformance with business rules."},"email":{"type":"string","format":"email","description":"The member's unique email address, used for authentication, notifications, and system communication.\n\nMatches the `email` field in the `discussionboard_members` schema. All email addresses must be verified and unique for both authentication and notification compliance. Example: 'user@email.com'.\n\nChanging the email may have implications for account recovery and notification delivery."},"role":{"type":"string","description":"The role assigned to the member, which defines permissions and capabilities within the system (e.g., 'member', 'moderator', 'admin').\n\nDirectly corresponds to the `role` field in the schema. Determines the scope of actions a user can perform, such as posting, moderating, or managing the system.\n\nAny role change should be auditable and comply with escalation protocols."},"is_active":{"type":"boolean","description":"Indicates whether the user account is currently active (true) or disabled (false).\n\nImplements the `is_active` field in the Prisma schema, controlling access to the platform. Used for bans, suspensions, and compliance with business rules for user access.\n\nSet to false to disable account access without deleting the member's data."}},"required":[],"description":"Update properties for a discussion board member.\n\nCorresponds to updatable fields in the `discussionboard_members` Prisma schema. Does not include sensitive or system-managed fields (e.g., hashed_password, created_at, updated_at, deleted_at). Used for administrative updates, profile edits, and role management workflows."},"IDiscussionboardModerator.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator assignment. Used for direct lookups or filtering."},"member_id":{"type":"string","format":"uuid","description":"The unique id of the member to whom moderator rights are or were assigned.\n\nMaps to `member_id` in `discussionboard_moderators` schema. Used for filtering all assignments for a particular user."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"The unique id of the admin who assigned the moderator role.\n\nUseful for audit query and tracing assignment authority."},"assigned_at":{"type":"string","format":"date-time","description":"The timestamp when moderator rights were granted.\n\nCan be used for time-based filtering or searching historic/expiring assignments."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when moderator assignment expires, if temporary.\n\nAssign null to find permanent roles. Useful for queries that need to distinguish between permanent and temporary assignments."},{"type":"null","format":"date-time","description":"Timestamp when moderator assignment expires, if temporary.\n\nAssign null to find permanent roles. Useful for queries that need to distinguish between permanent and temporary assignments."}],"description":"Timestamp when moderator assignment expires, if temporary.\n\nAssign null to find permanent roles. Useful for queries that need to distinguish between permanent and temporary assignments."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when moderator rights were revoked, or null if still active.\n\nFor filtering active vs inactive assignments, or searching revocation history."},{"type":"null","format":"date-time","description":"Timestamp when moderator rights were revoked, or null if still active.\n\nFor filtering active vs inactive assignments, or searching revocation history."}],"description":"Timestamp when moderator rights were revoked, or null if still active.\n\nFor filtering active vs inactive assignments, or searching revocation history."}},"required":[],"description":"Request, filter, and pagination parameters for listing or searching moderator assignments.\n\nOnly properties present in the `discussionboard_moderators` schema may be referenced. Used in PATCH, admin search, analytics, and UI filtering contexts."},"IPageIDiscussionboardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IModeratorAssignment"},"description":"Array of moderator assignment records for the current page of search results."}},"required":["pagination","data"],"description":"Paginated container for moderator assignments.\n\nFollows the standard IPage<T> pattern, with `pagination` metadata and `data` as an array of `IModeratorAssignment` records."},"IModeratorAssignment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for the moderator assignment record.\n\nMatches the `id` field in `discussionboard_moderators`."},"member_id":{"type":"string","format":"uuid","description":"FK. The user assigned moderator privileges by this assignment. Must reference an existing member in the discussion board.\n\nCorrelates to `member_id` in the assignment table."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"FK. Admin who created the moderator assignment (actor).\n\nDefined by the `assigned_by_admin_id` in the schema, supports traceable escalations and compliance."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the moderator role was granted.\n\nFulfills the `assigned_at` field in `discussionboard_moderators` for audit."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional expiration time for temporary moderator assignments. Null if permanent.\n\nImplements `expires_at`."},{"type":"null","format":"date-time","description":"Optional expiration time for temporary moderator assignments. Null if permanent.\n\nImplements `expires_at`."}],"description":"Optional expiration time for temporary moderator assignments. Null if permanent.\n\nImplements `expires_at`."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of revocation (if applicable; null means active).\n\nImplements `revoked_at`. Typically set if the assignment was revoked, expired, or ended administratively."},{"type":"null","format":"date-time","description":"Timestamp of revocation (if applicable; null means active).\n\nImplements `revoked_at`. Typically set if the assignment was revoked, expired, or ended administratively."}],"description":"Timestamp of revocation (if applicable; null means active).\n\nImplements `revoked_at`. Typically set if the assignment was revoked, expired, or ended administratively."}},"required":["id","member_id","assigned_by_admin_id","assigned_at"],"description":"Represents a row/record in the moderator assignment table (`discussionboard_moderators`).\n\nTracks moderator status on the discussion board. Stores key audit and status information, supporting escalations, review, and compliance analytics."},"IModeratorAssignment.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"The id of the member being granted the moderator role (must exist in `discussionboard_members`)."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"The id of the admin assigning moderator privileges."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp marking the grant of moderation authority."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) Timestamp when moderator role will expire. Null for permanent assignment."},{"type":"null","format":"date-time","description":"(Optional) Timestamp when moderator role will expire. Null for permanent assignment."}],"description":"(Optional) Timestamp when moderator role will expire. Null for permanent assignment."}},"required":["member_id","assigned_by_admin_id","assigned_at"],"description":"Payload for creating a new moderator assignment.\n\nReferences only schema fields in `discussionboard_moderators`. Used for POST (create) operations."},"IModeratorAssignment.IUpdate":{"type":"object","properties":{"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Update the admin responsible for this assignment, for audit or escalation."},"assigned_at":{"type":"string","format":"date-time","description":"Updated timestamp of assignment action."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"New expiration time, or null for permanent role."},{"type":"null","format":"date-time","description":"New expiration time, or null for permanent role."}],"description":"New expiration time, or null for permanent role."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Revocation timestamp. Set to end moderator privileges early (null for active)."},{"type":"null","format":"date-time","description":"Revocation timestamp. Set to end moderator privileges early (null for active)."}],"description":"Revocation timestamp. Set to end moderator privileges early (null for active)."}},"required":[],"description":"Payload for updating moderator assignment. Corresponds to mutable fields in schema.\n\nDoes not include immutable or primary key fields."},"IAdminAssignment.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for admin assignment."},"member_id":{"type":"string","format":"uuid","description":"User id who is or was assigned admin role."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Admin id who performed assignment."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when assignment was made."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If assignment is ended, when it happened; null if active."},{"type":"null","format":"date-time","description":"If assignment is ended, when it happened; null if active."}],"description":"If assignment is ended, when it happened; null if active."}},"required":[],"description":"Request/filter/search parameters for admin assignment listing and query.\n\nQuery by fields present in the `discussionboard_admins` entity schema."},"IPageIAdminAssignment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IAdminAssignment"},"description":"Current page's set of admin assignment records."}},"required":["pagination","data"],"description":"Paginated result (IPage pattern) of admin assignment search. Contains result records and pagination metadata."},"IAdminAssignment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the admin assignment record."},"member_id":{"type":"string","format":"uuid","description":"Id of the member who was granted admin privileges."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Id of administrator granting admin role."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when admin privileges were granted."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp if admin privileges were revoked; null if still active."},{"type":"null","format":"date-time","description":"Timestamp if admin privileges were revoked; null if still active."}],"description":"Timestamp if admin privileges were revoked; null if still active."}},"required":["id","member_id","assigned_by_admin_id","assigned_at"],"description":"Row/entity describing an administrator role assignment on the discussion board.\n\nTracks privilege escalation and historical role assignments. Supports security, compliance, and privilege review."},"IAdminAssignment.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Id of member to receive admin role."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Admin id who performs this role escalation."},"assigned_at":{"type":"string","format":"date-time","description":"Grant timestamp for admin privileges."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optionally pre-set revocation or retroactive expiry (null for live escalation)."},{"type":"null","format":"date-time","description":"Optionally pre-set revocation or retroactive expiry (null for live escalation)."}],"description":"Optionally pre-set revocation or retroactive expiry (null for live escalation)."}},"required":["member_id","assigned_by_admin_id","assigned_at"],"description":"Request body for assigning administrator privileges to a member.\n\nCorresponds closely to the schema for `discussionboard_admins`. Used for privilege escalation via admin dashboard or API."},"IAdminAssignment.IUpdate":{"type":"object","properties":{"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Admin responsible for assignment update (change of granter/admin)."},"assigned_at":{"type":"string","format":"date-time","description":"Updated assignment timestamp."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Time at which admin privileges are revoked or retroactively ended (null for still active)."},{"type":"null","format":"date-time","description":"Time at which admin privileges are revoked or retroactively ended (null for still active)."}],"description":"Time at which admin privileges are revoked or retroactively ended (null for still active)."}},"required":[],"description":"Payload for mutating/updating admin assignment fields. All fields must exist in schema and be mutable. Does not include identifiers or immutable columns."},"IMemberProfile.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the member profile row."},"member_id":{"type":"string","format":"uuid","description":"Links the profile row to a specific discussion board member (FK to `discussionboard_members`)."},"display_name":{"type":"string","description":"User-chosen public display name. Used for profile display, popover, and badge identification.\n\nMatches the `display_name` field in `discussionboard_member_profiles`."},"bio":{"oneOf":[{"type":"string","description":"Free-form biography or summary. Optional/nullable. Used for badges, UX personalization, and directory overview."},{"type":"null","description":"Free-form biography or summary. Optional/nullable. Used for badges, UX personalization, and directory overview."}],"description":"Free-form biography or summary. Optional/nullable. Used for badges, UX personalization, and directory overview."},"avatar_url":{"oneOf":[{"type":"string","description":"URI for the user's profile/avatar image. May be omitted/null if user does not have a profile picture."},{"type":"null","description":"URI for the user's profile/avatar image. May be omitted/null if user does not have a profile picture."}],"description":"URI for the user's profile/avatar image. May be omitted/null if user does not have a profile picture."},"location":{"oneOf":[{"type":"string","description":"User-supplied location for display on profile (e.g., city/country). Optional."},{"type":"null","description":"User-supplied location for display on profile (e.g., city/country). Optional."}],"description":"User-supplied location for display on profile (e.g., city/country). Optional."},"website_url":{"oneOf":[{"type":"string","description":"URL to user's website or personal homepage. Optional and may be null."},{"type":"null","description":"URL to user's website or personal homepage. Optional and may be null."}],"description":"URL to user's website or personal homepage. Optional and may be null."}},"required":[],"description":"Profile search/filter and pagination parameters for member directory and profile lookup.\n\nEach property references only actual fields in `discussionboard_member_profiles`. Used by PATCH search endpoints, user directory, and UI filters."},"IPageIMemberProfile":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information for the set of member profiles.\n\nRepresents the current page, limit, total record count, and total pages of the paginated response set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IMemberProfile"},"description":"List of member profiles returned by the current page of the query.\n\nEach object fully describes a public member profile entity, based on the IMemberProfile schema."}},"required":["pagination","data"],"description":"A standard paginated response containing a list of member profiles and corresponding pagination metadata.\n\nThis follows the business pattern of 'IPage<T>' and is used in all endpoints performing paged queries for member profiles in the discussion board system."},"IMemberProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this profile.\n\nReferences the discussionboard_member_profiles.id column. Used for lookup, updates, and API responses."},"member_id":{"type":"string","format":"uuid","description":"Foreign key linking this profile to the member account.\n\nReferences discussionboard_members.id."},"display_name":{"type":"string","description":"User-chosen display name as shown in the UI profile card or member list.\n\nSourced from discussionboard_member_profiles.display_name."},"bio":{"oneOf":[{"type":"string","description":"Optional short member bio/summary text field from the profile.\n\nSourced from discussionboard_member_profiles.bio; returns null if not set."},{"type":"null","description":"Optional short member bio/summary text field from the profile.\n\nSourced from discussionboard_member_profiles.bio; returns null if not set."}],"description":"Optional short member bio/summary text field from the profile.\n\nSourced from discussionboard_member_profiles.bio; returns null if not set."},"avatar_url":{"oneOf":[{"type":"string","description":"Profile avatar image URL. Null if none set.\n\nSourced from discussionboard_member_profiles.avatar_url."},{"type":"null","description":"Profile avatar image URL. Null if none set.\n\nSourced from discussionboard_member_profiles.avatar_url."}],"description":"Profile avatar image URL. Null if none set.\n\nSourced from discussionboard_member_profiles.avatar_url."},"location":{"oneOf":[{"type":"string","description":"User's location as set in the member profile.\n\nSourced from discussionboard_member_profiles.location. Null if not set."},{"type":"null","description":"User's location as set in the member profile.\n\nSourced from discussionboard_member_profiles.location. Null if not set."}],"description":"User's location as set in the member profile.\n\nSourced from discussionboard_member_profiles.location. Null if not set."},"website_url":{"oneOf":[{"type":"string","description":"User's public website link for networking purposes.\n\nSourced from discussionboard_member_profiles.website_url. Null if not set."},{"type":"null","description":"User's public website link for networking purposes.\n\nSourced from discussionboard_member_profiles.website_url. Null if not set."}],"description":"User's public website link for networking purposes.\n\nSourced from discussionboard_member_profiles.website_url. Null if not set."}},"required":["id","member_id","display_name"],"description":"Member profile entity for the discussion board system.\n\nMaps to the discussionboard_member_profiles table and contains the atomic, public-facing attributes of a user's profile as explained in the Prisma schema and business requirements. Does NOT contain sensitive login or deletion information, as those belong to discussionboard_members."},"IMemberProfile.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Associates the new profile with a specific member account (discussionboard_members.id).\n\nRequired for creation."},"display_name":{"type":"string","description":"The display name the member wishes to show publicly.\n\nRequired for new profiles."},"bio":{"oneOf":[{"type":"string","description":"Optional biography or summary for the member's public profile.\n\nPass null when no description is provided."},{"type":"null","description":"Optional biography or summary for the member's public profile.\n\nPass null when no description is provided."}],"description":"Optional biography or summary for the member's public profile.\n\nPass null when no description is provided."},"avatar_url":{"oneOf":[{"type":"string","description":"Optional URI for the user's profile image avatar.\n\nAccepts a valid URL or null."},{"type":"null","description":"Optional URI for the user's profile image avatar.\n\nAccepts a valid URL or null."}],"description":"Optional URI for the user's profile image avatar.\n\nAccepts a valid URL or null."},"location":{"oneOf":[{"type":"string","description":"Free text location for the UI display. Optional at creation."},{"type":"null","description":"Free text location for the UI display. Optional at creation."}],"description":"Free text location for the UI display. Optional at creation."},"website_url":{"oneOf":[{"type":"string","description":"User's website (public), optional for creation."},{"type":"null","description":"User's website (public), optional for creation."}],"description":"User's website (public), optional for creation."}},"required":["member_id","display_name"],"description":"Schema for creating a new member profile record. Maps to required/optional fields for discussionboard_member_profiles creation, as per the requirements and Prisma schema. Used in onboarding or self-profile setup flows."},"IMemberProfile.IUpdate":{"type":"object","properties":{"display_name":{"type":"string","description":"Members can change their display name through update. This is the string value shown publicly in the UI."},"bio":{"oneOf":[{"type":"string","description":"Optionally update or null out the bio field for the member."},{"type":"null","description":"Optionally update or null out the bio field for the member."}],"description":"Optionally update or null out the bio field for the member."},"avatar_url":{"oneOf":[{"type":"string","description":"Optionally update or remove (null) the avatar URL stored for this profile."},{"type":"null","description":"Optionally update or remove (null) the avatar URL stored for this profile."}],"description":"Optionally update or remove (null) the avatar URL stored for this profile."},"location":{"oneOf":[{"type":"string","description":"Updates the free-text location field for the profile, or null to unset."},{"type":"null","description":"Updates the free-text location field for the profile, or null to unset."}],"description":"Updates the free-text location field for the profile, or null to unset."},"website_url":{"oneOf":[{"type":"string","description":"Update or remove (null) the website URL for the profile."},{"type":"null","description":"Update or remove (null) the website URL for the profile."}],"description":"Update or remove (null) the website URL for the profile."}},"required":["display_name"],"description":"Payload for updating an existing member profile entity. Allows members or admins to alter or remove public profile fields. The member's display_name must always be set when updating the profile. No authentication or logical deletion fields are exposed."},"IMemberPreference.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Filter preference records to only those for the given member id (discussionboard_members.id).\n\nOptional filtering property for admin or member UI queries."},"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"Filter by whether email notifications are set as true, false, or null (unset) in the preference record."},{"type":"null","description":"Filter by whether email notifications are set as true, false, or null (unset) in the preference record."}],"description":"Filter by whether email notifications are set as true, false, or null (unset) in the preference record."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"Filter by push notification preference. Accepts true, false, or null if unset."},{"type":"null","description":"Filter by push notification preference. Accepts true, false, or null if unset."}],"description":"Filter by push notification preference. Accepts true, false, or null if unset."},"preferred_language":{"oneOf":[{"type":"string","description":"Filter by preferred language code for the user. Null value means filter is not applied."},{"type":"null","description":"Filter by preferred language code for the user. Null value means filter is not applied."}],"description":"Filter by preferred language code for the user. Null value means filter is not applied."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"Filter by dark-mode UI preference (true/false), or leave null to not filter by this property."},{"type":"null","description":"Filter by dark-mode UI preference (true/false), or leave null to not filter by this property."}],"description":"Filter by dark-mode UI preference (true/false), or leave null to not filter by this property."}},"required":[],"description":"Request DTO for searching/filtering member preferences. All properties used for searching must exist in the member preference schema. Filters may be omitted or set as null for no filtering. Used in paginated, filtered member preference UI and API queries."},"IPageIMemberPreference":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page metadata for this search/result set.\n\nContains current page, record limit, count, and total pages for paginated results."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IMemberPreference"},"description":"List of member preference entities in this paginated result set.\n\nEach item is an IMemberPreference object corresponding to a single record."}},"required":["pagination","data"],"description":"Standard paginated response object for IMemberPreference entities.\n\nReturns pagination info and a list of member preference records according to the current query/filter criteria."},"IMemberPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the member preference record. Used for retrieval and update by id.\n\nMaps to discussionboard_member_preferences.id."},"member_id":{"type":"string","format":"uuid","description":"FK linking this record to the discussionboard_members table.\n\nSourced from discussionboard_member_preferences.member_id."},"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"Preference flag indicating if member receives email notifications. Null means unset/default."},{"type":"null","description":"Preference flag indicating if member receives email notifications. Null means unset/default."}],"description":"Preference flag indicating if member receives email notifications. Null means unset/default."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"Preference flag: member's opt-in/opt-out for push notifications. Null if not set."},{"type":"null","description":"Preference flag: member's opt-in/opt-out for push notifications. Null if not set."}],"description":"Preference flag: member's opt-in/opt-out for push notifications. Null if not set."},"preferred_language":{"oneOf":[{"type":"string","description":"Member's preferred language code (e.g., 'en', 'ko'). Null if default/unspecified."},{"type":"null","description":"Member's preferred language code (e.g., 'en', 'ko'). Null if default/unspecified."}],"description":"Member's preferred language code (e.g., 'en', 'ko'). Null if default/unspecified."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"User's dark UI mode flag. Null means preference not set."},{"type":"null","description":"User's dark UI mode flag. Null means preference not set."}],"description":"User's dark UI mode flag. Null means preference not set."}},"required":["id","member_id"],"description":"Member notification and interface preference settings model.\n\nDirectly represents a single row from discussionboard_member_preferences. Maps only public, atomic preference fields; no authentication or secret fields are present."},"IMemberPreference.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Identifies the member for whom the preferences are being set.\n\nRequired for creation."},"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"Initial preference for email notifications (true/false).\n\nNull/unset is allowed at creation."},{"type":"null","description":"Initial preference for email notifications (true/false).\n\nNull/unset is allowed at creation."}],"description":"Initial preference for email notifications (true/false).\n\nNull/unset is allowed at creation."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"Initial push notification preference, can be null/unset at creation."},{"type":"null","description":"Initial push notification preference, can be null/unset at creation."}],"description":"Initial push notification preference, can be null/unset at creation."},"preferred_language":{"oneOf":[{"type":"string","description":"Preferred language code (optional; e.g., 'en', 'ko').\n\nNull or not provided means default."},{"type":"null","description":"Preferred language code (optional; e.g., 'en', 'ko').\n\nNull or not provided means default."}],"description":"Preferred language code (optional; e.g., 'en', 'ko').\n\nNull or not provided means default."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"Initial dark mode UI setting (true/false/null)."},{"type":"null","description":"Initial dark mode UI setting (true/false/null)."}],"description":"Initial dark mode UI setting (true/false/null)."}},"required":["member_id"],"description":"Schema for creating a member's notification and UI preferences record.\n\nUsed in onboarding flows or admin configuration to set default notification/UI preferences for a member."},"IMemberPreference.IUpdate":{"type":"object","properties":{"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"Change email notification preference (set to true, false, or null to unset).\n\nNull unsets the value."},{"type":"null","description":"Change email notification preference (set to true, false, or null to unset).\n\nNull unsets the value."}],"description":"Change email notification preference (set to true, false, or null to unset).\n\nNull unsets the value."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"Change push notification preference (true/false/null for unset).\n\nNull removes the custom preference."},{"type":"null","description":"Change push notification preference (true/false/null for unset).\n\nNull removes the custom preference."}],"description":"Change push notification preference (true/false/null for unset).\n\nNull removes the custom preference."},"preferred_language":{"oneOf":[{"type":"string","description":"Update preferred language code, or null to use default."},{"type":"null","description":"Update preferred language code, or null to use default."}],"description":"Update preferred language code, or null to use default."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"Update dark mode preference (true/false/null for unset)."},{"type":"null","description":"Update dark mode preference (true/false/null for unset)."}],"description":"Update dark mode preference (true/false/null for unset)."}},"required":[],"description":"Schema for updating member preference properties. Supports null unsets and property exclusion for no change.\n\nPatch all updatable fields as needed. No authentication or deleted fields included."},"IBoard.IRequest":{"type":"object","properties":{"board_category_id":{"type":"string","format":"uuid","description":"Optional filter to restrict results to given board category (discussionboard_board_category_id).\n\nMatches to boards in a specific business domain or subject."},"section_id":{"type":"string","format":"uuid","description":"Optional filter to restrict results to boards under a specific section (discussionboard_section_id)."},"name":{"type":"string","description":"Search filter to match all boards containing this value in their name (case-insensitive).\n\nUses string search on schema's name field."},"code":{"type":"string","description":"Search or filter results by the board's code (exact match).\n\nUsed for navigation or programmatic selection."},"is_active":{"type":"boolean","description":"Filter by active status to include/exclude archived or hidden boards."},"is_visible":{"type":"boolean","description":"Restrict to boards visible to members/users."}},"required":[],"description":"Schema for board list request, containing optional filters for category, section, name, code, active/visible status. Used in UI or API endpoints for paginated board search and navigation in the discussion board system."},"IPageIBoard":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the current board list response.\n\nReports current page, limit, record count, and page count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IBoard"},"description":"Main array of board objects returned for the current search, filter, and pagination criteria."}},"required":["pagination","data"],"description":"Paginated result structure for discussion board entities in the system. Contains a 'data' property listing board records and pagination metadata for navigation and UI display flows."},"IBoard":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique Board identifier (Primary Key, UUID).\n\nMaps to discussionboard_boards.id. Used for lookups, update, detail display, etc."},"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Foreign key to the category this board belongs to.\n\nImplements category-based organization. Sourced from discussionboard_boards.discussionboard_board_category_id."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Foreign key to the section above this board.\n\nUsed in navigation, display, and access control."},"name":{"type":"string","description":"Atomic board name for display in forum navigation.\n\nSourced from discussionboard_boards.name. Used in search, listing, and labels."},"code":{"type":"string","description":"Code used for programmatic routing, linking, and integration.\n\nMust be unique per discussionboard_boards.code."},"description":{"oneOf":[{"type":"string","description":"Human-readable short description for UI display (may be null).\n\nAids in UX, search, and board discovery. Sourced from discussionboard_boards.description."},{"type":"null","description":"Human-readable short description for UI display (may be null).\n\nAids in UX, search, and board discovery. Sourced from discussionboard_boards.description."}],"description":"Human-readable short description for UI display (may be null).\n\nAids in UX, search, and board discovery. Sourced from discussionboard_boards.description."},"is_active":{"type":"boolean","description":"Is the board currently open for new threads and posts? If false, board is considered archived and read-only.\n\nMaps to discussionboard_boards.is_active."},"is_visible":{"type":"boolean","description":"Is the board visible to non-admin users?\n\nControls navigation and privacy."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of board creation (ISO 8601 datetime). Used in sort and audit."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent board update (ISO 8601 datetime). For audit/UI freshness."}},"required":["id","discussionboard_board_category_id","discussionboard_section_id","name","code","is_active","is_visible","created_at","updated_at"],"description":"Board entity representing a single forum board in the discussion board system. Fulfills discussion space and organization business requirements. Fully normalized (3NF) as per Prisma schema, this entity maps 1:1 with the discussionboard_boards table, exposing only atomic board data and referential fields for use in navigation, thread listing, and management flows."},"IBoard.ICreate":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Unique identifier for the board category to which this board belongs. This value should correspond to the actual UUID of a category row in the discussionboard_board_categories table. This field is required to maintain proper board organization and ensure referential integrity within the system. Example: 'a29c6e1f-0a03-4ad3-9d07-cc019cac1019'."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Unique identifier for the section (from discussionboard_sections) that contains this board. This field enables precise navigation and categorization. It must be a valid existing UUID value. Example: 'b3328e2e-4b4f-4be2-8e82-f57dd6d25e02'."},"name":{"type":"string","description":"Human-readable board name used for display in navigation, UIs, and search. Names should follow platform guidelines for topic clarity and length. Example: 'Global Economics'."},"code":{"type":"string","description":"Unique code identifier for this board, suitable for URLs, routing, and programmatic lookup. Code uniqueness is enforced per table constraints and must never be duplicated. Example: 'macro_policy'."},"description":{"oneOf":[{"type":"string","description":"Optional short description for this board. Provides additional context in tooltips, list previews, and accessibility features. May be null. Example: 'International analysis and discussion of macroeconomic policy.'"},{"type":"null","description":"Optional short description for this board. Provides additional context in tooltips, list previews, and accessibility features. May be null. Example: 'International analysis and discussion of macroeconomic policy.'"}],"description":"Optional short description for this board. Provides additional context in tooltips, list previews, and accessibility features. May be null. Example: 'International analysis and discussion of macroeconomic policy.'"},"is_active":{"type":"boolean","description":"Flag indicating whether this board is currently accepting new threads and posts. 'true' means active; 'false' means the board is archived or closed."},"is_visible":{"type":"boolean","description":"Boolean flag controlling whether the board is listed to users for navigation and thread creation. 'true' reveals the board to users; 'false' hides it, often used for private, internal, or staff-use boards."}},"required":["discussionboard_board_category_id","discussionboard_section_id","name","code","is_active","is_visible"],"description":"Defines the structure required to create a new board in the discussion forum system (discussionboard_boards).\n\nFields correspond exactly to the board entity schema, supporting proper categorization, navigation, and display."},"IBoard.IUpdate":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"UUID of the new board category, if changing categories. Must reference an existing discussionboard_board_categories record."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"UUID for the new section containing this board, if section is being changed. Must reference an existing discussionboard_sections record."},"name":{"type":"string","description":"Updated display name for the board. Should follow platform board naming guidelines."},"code":{"type":"string","description":"Changed programmatic code for this board. Must remain unique across all board records. Used in URLs and internal lookups."},"description":{"oneOf":[{"type":"string","description":"Changed or updated description to better reflect the board's focus or usage. This value is nullable."},{"type":"null","description":"Changed or updated description to better reflect the board's focus or usage. This value is nullable."}],"description":"Changed or updated description to better reflect the board's focus or usage. This value is nullable."},"is_active":{"type":"boolean","description":"Set to 'true' to activate the board (allow posting/thread creation), or 'false' to archive/lock down the board."},"is_visible":{"type":"boolean","description":"Set to 'true' to make the board visible in navigation, or 'false' to hide it from most users. Hiding does not remove the board but makes it inaccessible except to admin/staff workflows."}},"description":"Describes the updatable fields for an existing board record in the discussion forum. All fields correspond to existing columns in the discussionboard_boards schema. Typical uses include board renaming, changes of visibility, re-categorization, and adjusting activation status.","required":[]},"IDiscussionboardBoardCategory.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Filter by the board category's UUID primary key."},"name":{"type":"string","description":"Filter by category name, supports partial search in UIs or select menus."},"code":{"type":"string","description":"Filter by the unique programmatic code for the category (e.g., 'economics'). Useful for configuration, migration, and analytics."},"description":{"type":"string","description":"Search filter for free-text in category description. Optional; used for admin dashboards or descriptive search in advanced UIs."},"position":{"type":"integer","description":"Integer for sorting or selecting by UI/administrative position/order. Used by frontends for display sequence."},"created_at":{"type":"string","format":"date-time","description":"Filter/search by creation timestamp. ISO 8601 format. May be used for analytics, auditing, or recency filters."}},"description":"Request schema for searching, paginating, or filtering board category entities. Only fields available in the discussionboard_board_categories table are permitted. Used by PATCH list operations or admin panels for complex filtering.","required":[]},"IPageDiscussionboardBoardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardCategory"},"description":"Array of board category entities returned by search or pagination."}},"required":["pagination","data"],"description":"Paginated result container for arrays of board category entities as returned by list/search PATCH operations. Standard wrapper per OpenAPI and IPage conventions."},"IDiscussionboardBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the board category. Serves as the primary key and allows each category entity to be referenced, edited, or removed."},"name":{"type":"string","description":"Unique category name, human-readable for UI and admin management. Example: 'Global Economics'. Required and indexed."},"code":{"type":"string","description":"Short programmatic code for the category, used in configuration, URLs, and scripts. Example: 'econ'. Must be unique."},"description":{"oneOf":[{"type":"string","description":"Long description, optional. Used by dashboards, tooltips, category previews, and accessibility features. Nullable."},{"type":"null","description":"Long description, optional. Used by dashboards, tooltips, category previews, and accessibility features. Nullable."}],"description":"Long description, optional. Used by dashboards, tooltips, category previews, and accessibility features. Nullable."},"position":{"type":"integer","description":"Manual ordering integer for display and sorting in the UI. Lower numbers generally appear higher in lists. Set by admins."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of board category creation (ISO 8601). Used for audit, display, and ordering."}},"required":["id","name","code","position","created_at"],"description":"Describes the properties of a board category entity in the discussion board system (discussionboard_board_categories). Used for management, navigation, analytics, and UI display. All properties enforced by schema."},"IDiscussionboardBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Display name for the new board category. Must be unique and descriptive for admin and user navigation panels. Example: 'Policy Debates'."},"code":{"type":"string","description":"Programmatic code for the new board category. Used internally for routing, queries, URLs, etc. Must be unique. Example: 'policy'."},"description":{"oneOf":[{"type":"string","description":"Optional longer explanation of this category. Displayed in UI, tooltips, and figure captions. Nullable."},{"type":"null","description":"Optional longer explanation of this category. Displayed in UI, tooltips, and figure captions. Nullable."}],"description":"Optional longer explanation of this category. Displayed in UI, tooltips, and figure captions. Nullable."},"position":{"type":"integer","description":"Display order for this category, affecting navigation sort. Lower means higher/leftmost/top-most in menu. Required for admin ordering."}},"required":["name","code","position"],"description":"Request body schema for creating new board category entity. All fields correspond to schema columns; must be validated for uniqueness where appropriate."},"IDiscussionboardBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Updated display name for the board category. Must be unique. Used for editing category lists, admin panels, or quick correction."},"code":{"type":"string","description":"Updated internal code for this category. Must remain unique. Used for backend identification and URL mapping."},"description":{"oneOf":[{"type":"string","description":"Optional, updated description giving users/admins more clarity about the category. Nullable."},{"type":"null","description":"Optional, updated description giving users/admins more clarity about the category. Nullable."}],"description":"Optional, updated description giving users/admins more clarity about the category. Nullable."},"position":{"type":"integer","description":"Sort order adjustment for display in navigation. Lower values move category up/higher in lists."}},"description":"Request schema for updating/patching an existing board category. Edit operations can selectively modify any or all fields present in the schema.","required":[]},"IDiscussionboardBoardCategory.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"True if deletion of the board category succeeded; false otherwise."},"deleted_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the deleted board category entity, or null if operation failed."},{"type":"null","format":"uuid","description":"UUID of the deleted board category entity, or null if operation failed."}],"description":"UUID of the deleted board category entity, or null if operation failed."},"reason":{"oneOf":[{"type":"string","description":"Textual reason for failure, if success is false. E.g., 'Not found', 'Constraint violation', etc. Null on success."},{"type":"null","description":"Textual reason for failure, if success is false. E.g., 'Not found', 'Constraint violation', etc. Null on success."}],"description":"Textual reason for failure, if success is false. E.g., 'Not found', 'Constraint violation', etc. Null on success."}},"description":"Result object for delete operation on board category entities. Used to confirm or explain deletion status to the client in hard delete workflows.","required":[]},"IDiscussionboardBoardSetting.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Filter for the board settings entity's UUID, as primary key."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter by the board's UUID which this settings entry is attached to. Supports board-specific configuration panels and audits."},"is_locked":{"type":"boolean","description":"Query/filter setting for lock status (true=locked, false=open). Controls moderation/maintenance workflows."},"require_approval_for_posting":{"type":"boolean","description":"Filter settings where posting requires moderator/admin approval. Used for admin configuration views."},"max_posts_per_hour":{"type":"integer","description":"Numeric filter for max allowed posts per user per hour. Used in analytics and anti-spam configuration dashboards."},"allow_anonymous_viewing":{"type":"boolean","description":"Filter for boards allowing read access to unauthenticated users. Used for public vs. members-only delineation."},"allow_file_uploads":{"type":"boolean","description":"Filter/search for boards where file attachments are enabled. Used for settings panels, moderation views, or file upload compliance."},"created_at":{"type":"string","format":"date-time","description":"Filter/sort by settings row creation timestamp. ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Filter/sort by last modification time of the settings record. Used in admin, analytics, or rollback investigations."}},"description":"Structured search/filter request body for retrieving board settings entities from discussionboard_board_settings. Used for advanced analytics, dashboards, and admin config panels. Only schema properties allowed.","required":[]},"IPageDiscussionboardBoardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardSetting"},"description":"Returned board settings records for the listed page/filter."}},"required":["pagination","data"],"description":"Paginated response wrapper for listing board settings in management/config UIs."},"IDiscussionboardBoardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/UUID for this settings entry. Allows detailed examination or direct deletion."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key referencing the board (discussionboard_boards) which these settings apply to. Each board has exactly one per-board settings entity."},"is_locked":{"type":"boolean","description":"Boolean flag controlling board lock status. Locked boards prevent thread/post creation and show maintenance notices. Admin-only changeable."},"require_approval_for_posting":{"type":"boolean","description":"Whether new threads or posts require moderator/admin approval before becoming visible. True for boards with strict moderation."},"max_posts_per_hour":{"type":"integer","description":"Rate limiting configuration, setting the maximum number of posts a user can submit to this board each hour. Used for anti-spam and compliance."},"allow_anonymous_viewing":{"type":"boolean","description":"If true, allows non-members to read/publicly view board content. If false, restricts access to registered/logged-in members."},"allow_file_uploads":{"type":"boolean","description":"Determines whether file uploads/attachments are permitted on this board. Used for privacy, risk management, and feature toggling."},"created_at":{"type":"string","format":"date-time","description":"Board settings entity creation timestamp. Used in change-tracking and audit UIs."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last settings change, for compliance tracking and rollback."}},"required":["id","discussionboard_board_id","is_locked","require_approval_for_posting","max_posts_per_hour","allow_anonymous_viewing","allow_file_uploads","created_at","updated_at"],"description":"Data type for one board settings entity in discussionboard_board_settings. Used in admin configuration and feature toggling panels. Fulfills requirements for per-board customization of platform features."},"IDiscussionboardBoardSetting.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"References the board which these settings will attach to. Must be an existing board UUID."},"is_locked":{"type":"boolean","description":"Set to true if the board is to be locked at creation (no new posts/threads). False by default."},"require_approval_for_posting":{"type":"boolean","description":"Enforces moderator/admin approval for new threads/posts if true. Used for strict boards."},"max_posts_per_hour":{"type":"integer","description":"Maximum number of posts a user is allowed in this board per hour. Used for anti-spam controls."},"allow_anonymous_viewing":{"type":"boolean","description":"Whether new settings allow non-member viewing (public) or restrict to registered members."},"allow_file_uploads":{"type":"boolean","description":"Flag for whether attachments/uploads are enabled on this board."}},"required":["discussionboard_board_id","is_locked","require_approval_for_posting","max_posts_per_hour","allow_anonymous_viewing","allow_file_uploads"],"description":"Submission schema for creating a new board settings entity. Only schema fields may be supplied. Permissions, audit, and change tracking handled downstream."},"IDiscussionboardBoardSetting.IUpdate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"The unique identifier of the board for which this setting applies.\n\nThis is a required reference for board settings modifications, and must point to a row in `discussionboard_boards` in the schema.\n\nReferenced in most board-level configuration operations, including locking boards, updating moderation policies, or enabling/disabling upload/post rate limits."},"is_locked":{"type":"boolean","description":"Indicates whether the board is currently locked (read-only) for posts/comments. Implements board lock for moderation, maintenance, or escalation flows. `true` means locked; `false` means open for writing."},"require_approval_for_posting":{"type":"boolean","description":"Flag for requiring moderator/admin approval for new posts created in this board. Implements advanced moderation and content review business logic. Set to `true` to enforce content pre-approval, or `false` for real-time, unmoderated posting."},"max_posts_per_hour":{"type":"integer","description":"Maximum number of posts a user can make per hour in this board (for rate limiting/anti-spam).\n\nRequired for platform spam prevention and user activity control. Value must be a positive integer. Enforced only per board."},"allow_anonymous_viewing":{"type":"boolean","description":"Flag for enabling anonymous (not-logged-in) users to view posts in this board. If `false`, only signed-in members may access board content. Implements privacy and visibility rules as described in the business requirements."},"allow_file_uploads":{"type":"boolean","description":"Indicates whether file attachments are permitted in posts/comments within this board. Enables/disables the upload feature. Platform administrators may restrict uploads by content area or sensitivity."}},"required":["discussionboard_board_id"],"description":"Update payload for a board settings record, mapping only to fields present in the discussionboard_board_settings Prisma schema. Used in board configuration workflows to update properties such as locking status, approval policy, post limit, anonymous viewing, and upload features. Every property refers to a normalized database field. All modifications must reference existing table columns—no additional metadata permitted."},"IDiscussionboardBoardSetting.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the target settings record was successfully deleted. `true` if the operation removed the specified settings; `false` if not found or failed."},"deleted_id":{"type":"string","format":"uuid","description":"The UUID primary key of the settings record deleted, matching the `id` of the removed row. This value is present when success is `true`. Null or omitted if operation was unsuccessful."}},"required":["success"],"description":"Result of a hard-delete operation for a board settings record from discussionboard_board_settings. The object describes whether the record was deleted and includes the unique identifier if successful."},"IDiscussionboardBoardModerator.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","description":"Board ID (UUID). Use to filter board-moderator assignments by associated board."},"discussionboard_moderator_id":{"type":"string","description":"Moderator ID (UUID). Use to filter assignments by specific moderator."},"is_primary":{"type":"boolean","description":"Filter assignments to return only primary (lead) assignments, or those that are not."},"joined_at_from":{"type":"string","format":"date-time","description":"Return assignments where the join timestamp is at or after this ISO8601 time."},"joined_at_to":{"type":"string","format":"date-time","description":"Return assignments where the join timestamp is at or before this ISO8601 time."},"page":{"type":"integer","description":"Which page number to return in paginated results."},"limit":{"type":"integer","description":"Number of records per page in paged results."}},"description":"Search/filter parameters for retrieving board-moderator assignment records from discussionboard_board_moderators, with strict mapping to schema-present fields only. Used to support advanced management and dashboard workflows for board moderation.","required":[]},"IPageDiscussionboardBoardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardModerator"},"description":"The list of board-moderator assignment objects for the page, each mapping directly to the entity schema."}},"required":["pagination","data"],"description":"Paginated result object for board-moderator assignment record collections. Used for all list and search operations returning multiple assignments."},"IDiscussionboardBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for the board-moderator assignment table. Immutable, unique for each record."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key to the target board entity (UUID). Refers to discussionboard_boards.id."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"Foreign key UUID referencing the assigned moderator (from discussionboard_moderators)."},"is_primary":{"type":"boolean","description":"Marks this assignment as the primary moderator, supporting escalation workflows. true if primary; false otherwise."},"joined_at":{"type":"string","format":"date-time","description":"Date/time this assignment was created. Used in compliance, activity analytics, and audit workflows."}},"required":["id","discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Represents one moderator's assignment to a specific board. Contains unique keys, foreign key references, primary/secondary flag, and timestamp for audit, display, and management features. Property names follow schema directly."},"IDiscussionboardBoardModerators.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID for the board to which the moderator is being assigned."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"UUID for the moderator being assigned to a board."},"is_primary":{"type":"boolean","description":"Flag indicating primary moderator for the board."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp the assignment becomes effective. Used in audit and history features."}},"required":["discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Payload for assigning a moderator to a board by inserting a new board-moderator assignment record in discussionboard_board_moderators. All properties must be present and strictly match schema columns. Fulfills requirements for role assignment and history/audit."},"IDiscussionboardBoardModerators":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the assignment record as generated by the DB."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board reference for which the assignment applies."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"Moderator reference for this assignment."},"is_primary":{"type":"boolean","description":"Marks this assignment as the primary moderator for a board."},"joined_at":{"type":"string","format":"date-time","description":"Assignment effective timestamp."}},"required":["id","discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Full DB entity returned after board-moderator assignment creation or detail query. Contains all schema-defined columns. Used for response and data inspection in management flows."},"IDiscussionboardBoardModerators.IUpdate":{"type":"object","properties":{"is_primary":{"type":"boolean","description":"Set primary/non-primary status for this assignment."},"joined_at":{"type":"string","format":"date-time","description":"Update the join timestamp for this assignment for audit and history tracking."}},"description":"Update request payload for board-moderator assignment records. Used only for patching the primary/secondary flag and/or join date. Does not update board or moderator references.","required":[]},"IDeleteConfirmation":{"type":"object","properties":{"status":{"type":"string","description":"String summary of the deletion status, such as 'deleted'."},"deleted_id":{"type":"string","description":"UUID key of the deleted object, if deletion was successful (nullable if failed)."}},"description":"Common response format for confirmatory deletion endpoints. Indicates the object was deleted, and supplies the identifier of the deleted record if applicable.","required":[]},"IDiscussionboardThreads.IRequest":{"type":"object","properties":{"board_id":{"type":"string","description":"Foreign key (UUID) of the parent board for thread queries."},"author_member_id":{"type":"string","description":"UUID for filtering threads by the thread author (member identity)."},"title":{"type":"string","description":"Search string to filter threads by title (supports substring/full-text queries)."},"body":{"type":"string","description":"Search string to filter threads by thread body/description (full-text, advanced UI)."},"created_at_from":{"type":"string","format":"date-time","description":"Return threads created at or after this timestamp."},"created_at_to":{"type":"string","format":"date-time","description":"Return threads created at or before this timestamp."},"updated_at_from":{"type":"string","format":"date-time","description":"Return threads updated at or after this timestamp."},"updated_at_to":{"type":"string","format":"date-time","description":"Return threads updated at or before this timestamp."},"deleted_at_set":{"type":"boolean","description":"When true, include/exclude soft-deleted threads (deleted_at not null/non-null)."},"page":{"type":"integer","description":"Pagination page number."},"limit":{"type":"integer","description":"Records per page for pagination."}},"description":"Search/filter/pagination parameters for retrieving discussion threads. All filters must correspond to existing fields in the discussionboard_threads schema. Used for advanced query, analytics, and admin dashboard.","required":[]},"IPageIDiscussionboardThreads":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreads"},"description":"Array of thread entities matching query page/filters."}},"required":["pagination","data"],"description":"Paginated response for thread listing endpoints, wrapping discussionboard_threads entities and pagination info."},"IDiscussionboardThreads":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the thread (UUID)."},"board_id":{"type":"string","format":"uuid","description":"Foreign key reference for the parent board (UUID)."},"author_member_id":{"type":"string","format":"uuid","description":"Foreign key referencing member who authored the thread (UUID)."},"title":{"type":"string","description":"Title or subject line of the thread."},"body":{"type":"string","description":"Description or leading post content for the thread. May be null for simple threads."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of thread creation (ISO8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last edit/modification."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Time at which thread was soft deleted. Null if active."},{"type":"null"}],"description":"Time at which thread was soft deleted. Null if active."}},"required":["id","board_id","author_member_id","title","created_at","updated_at"],"description":"Represents a single discussion thread entity in the threads domain. Contains all DB columns per schema. Used for API read, edit, and listing endpoints."},"IDiscussionboardThreads.ICreate":{"type":"object","properties":{"board_id":{"type":"string","format":"uuid","description":"The unique identifier for the board in which this thread is being created. Must reference an existing discussionboard_boards row. Required for thread placement and board-based filtering.\n\nReferenced from the discussionboard_threads Prisma schema as 'board_id'."},"author_member_id":{"type":"string","format":"uuid","description":"The unique user/member UUID who is the creator/author of this thread. Required for authorship, audit, and permissions. Must reference a row in discussionboard_members.\n\nReferenced directly from discussionboard_threads.author_member_id."},"title":{"type":"string","description":"The main subject/title of the thread. Used for listing, searching, navigation, and user readability. Example: 'Global Trade Policy in 2025'. Cannot be empty. The 'title' field is atomic and not nullable in the schema.\n\nDirect from discussionboard_threads.title."},"body":{"oneOf":[{"type":"string","description":"Optional opening content or description for the thread. Supports longer conversation context or introductory summaries. May be omitted if not needed; nullable in the schema.\n\nFrom discussionboard_threads.body."},{"type":"null","description":"Optional opening content or description for the thread. Supports longer conversation context or introductory summaries. May be omitted if not needed; nullable in the schema.\n\nFrom discussionboard_threads.body."}],"description":"Optional opening content or description for the thread. Supports longer conversation context or introductory summaries. May be omitted if not needed; nullable in the schema.\n\nFrom discussionboard_threads.body."}},"required":["board_id","author_member_id","title"],"description":"Request body for creating a new discussion thread instance. All fields map directly to the columns present in the discussionboard_threads Prisma model. Used in POST /discussionboard/threads. Provides the root for new discussions under a board, authored by a member. The business context aligns with user-generated forum discussions and initial topic submission."},"IDiscussionboardThreads.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"The updated subject/title line for the thread. Used to rename threads and improve discoverability. As in the discussionboard_threads schema, title is not nullable and is required for update if specified."},"body":{"oneOf":[{"type":"string","description":"Changed or restored text for the thread body. Supports empty/null for threads where only title is used. Represents thread context (see schema body field)."},{"type":"null","description":"Changed or restored text for the thread body. Supports empty/null for threads where only title is used. Represents thread context (see schema body field)."}],"description":"Changed or restored text for the thread body. Supports empty/null for threads where only title is used. Represents thread context (see schema body field)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp to set soft-delete flag. Setting this to the current datetime marks the thread as deleted (soft-deleted); setting to null restores it. Used in moderation/restore flows. Directly relates to discussionboard_threads.deleted_at."},{"type":"null","format":"date-time","description":"Timestamp to set soft-delete flag. Setting this to the current datetime marks the thread as deleted (soft-deleted); setting to null restores it. Used in moderation/restore flows. Directly relates to discussionboard_threads.deleted_at."}],"description":"Timestamp to set soft-delete flag. Setting this to the current datetime marks the thread as deleted (soft-deleted); setting to null restores it. Used in moderation/restore flows. Directly relates to discussionboard_threads.deleted_at."}},"required":[],"description":"Update body for an existing discussion thread. Can update title, body, and/or set the soft-deletion marker deleted_at. All fields correspond to discussionboard_threads Prisma schema columns. Used in PUT /discussionboard/threads/{id}. Business context includes thread editing, moderation, or restoration actions."},"ISoftDeleteConfirmation":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique ID of the thread affected by this soft delete operation. Returned from the original thread id parameter. Required for tracking and business context."},"soft_deleted":{"type":"boolean","description":"Indicates whether the thread is now marked as soft-deleted (true if the operation succeeded and deleted_at was set), or false if not. Used for UI display and audit."}},"required":["id","soft_deleted"],"description":"Confirmation object indicating the result of a soft delete action on a discussion thread. Used as the standard return for /threads/{id} DELETE. All fields correspond directly to API workflow and schema references."},"IDiscussionboardThreadSnapshots.IRequest":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"The thread id for which snapshots are queried. Used to filter or group snapshots for a specific thread, as referenced by discussionboard_thread_snapshots.thread_id."},"actor_id":{"type":"string","format":"uuid","description":"Optional filter for the user/member who edited/created the snapshot. References discussionboard_thread_snapshots.actor_id."},"title":{"type":"string","description":"Optional search filter by snapshot title content, supporting substring/fulltext search as enabled in API. Used for auditing edits by title."},"created_at_from":{"type":"string","format":"date-time","description":"Inclusive lower bound for datetime filtering on snapshot creation (ISO-8601), matching discussionboard_thread_snapshots.created_at."},"created_at_to":{"type":"string","format":"date-time","description":"Inclusive upper bound for datetime filtering on snapshot creation (ISO-8601)."},"page":{"type":"integer","minimum":1,"description":"Requested page number for pagination. Starts at 1. Default may be set by API."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Page size (number of snapshots to return). Capped per API limits. Default 20-50."}},"required":["thread_id"],"description":"Request/search body for paginated listing or advanced searching of discussion thread snapshots. Filters by thread, actor, title, created_at date window, and supports pagination. All fields align to those defined in discussionboard_thread_snapshots and standard pagination conventions. Used in PATCH /discussionboard/threadSnapshots."},"IPageIDiscussionboardThreadSnapshots":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreadSnapshots"},"description":"The actual array of snapshot records returned in this page. Each is a complete thread snapshot object by schema."}},"required":["pagination","data"],"description":"Response container for paginated thread snapshot search results. Follows the IPage<T> pattern, substituting the T with IDiscussionboardThreadSnapshots. Used as output from /threadSnapshots list/search endpoints. The 'pagination' field describes the current paging state."},"IDiscussionboardThreadSnapshots":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID of this thread snapshot row. Primary key in discussionboard_thread_snapshots. Used for referencing and linking audit trails."},"thread_id":{"type":"string","format":"uuid","description":"Foreign key to the thread this snapshot belongs to. Always required. References discussionboard_threads.id."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Nullable. UUID of member/mod/admin who created this snapshot (if available). If system-generated, may be null. Direct from discussionboard_thread_snapshots.actor_id."},{"type":"null","format":"uuid","description":"Nullable. UUID of member/mod/admin who created this snapshot (if available). If system-generated, may be null. Direct from discussionboard_thread_snapshots.actor_id."}],"description":"Nullable. UUID of member/mod/admin who created this snapshot (if available). If system-generated, may be null. Direct from discussionboard_thread_snapshots.actor_id."},"title":{"type":"string","description":"The title as stored at the time of this version. Snapshot preserves title even as live thread changes. Non-nullable. From schema's title field."},"body":{"oneOf":[{"type":"string","description":"Body/content as of this thread version. Nullable, matching the original thread's schema."},{"type":"null","description":"Body/content as of this thread version. Nullable, matching the original thread's schema."}],"description":"Body/content as of this thread version. Nullable, matching the original thread's schema."},"reason":{"oneOf":[{"type":"string","description":"Moderator/user/system comment on why this version/change was made. Nullable, for audit."},{"type":"null","description":"Moderator/user/system comment on why this version/change was made. Nullable, for audit."}],"description":"Moderator/user/system comment on why this version/change was made. Nullable, for audit."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this version snapshot was created. Used for audit, display, and rollback. Always required. As from schema."}},"required":["id","thread_id","title","created_at"],"description":"Schema for a version snapshot of a discussion thread. Captures thread fields (title, body) and reasons for edits/moderation at a point in time. Every field aligns exactly with columns defined in discussionboard_thread_snapshots. Used to restore, audit, or view thread version history."},"IDiscussionboardThreadSnapshots.ICreate":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"Target thread uuid for this snapshot. References discussionboard_threads.id."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Actor performing the change (nullable for system/self-edits)."},{"type":"null","format":"uuid","description":"Actor performing the change (nullable for system/self-edits)."}],"description":"Actor performing the change (nullable for system/self-edits)."},"title":{"type":"string","description":"Title of the thread at this version, per snapshot."},"body":{"oneOf":[{"type":"string","description":"Body text at this thread version."},{"type":"null","description":"Body text at this thread version."}],"description":"Body text at this thread version."},"reason":{"oneOf":[{"type":"string","description":"Optional comment/reason for the snapshot. For audit trails or moderation tracking."},{"type":"null","description":"Optional comment/reason for the snapshot. For audit trails or moderation tracking."}],"description":"Optional comment/reason for the snapshot. For audit trails or moderation tracking."}},"required":["thread_id","title"],"description":"Request body for creating a new thread version snapshot. All fields (except required thread_id, title) match discussionboard_thread_snapshots columns. Used in POST /discussionboard/threadSnapshots."},"IDiscussionboardThreadSnapshots.IUpdate":{"type":"object","properties":{"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally correct/change the actor field (for audit only)."},{"type":"null","format":"uuid","description":"Optionally correct/change the actor field (for audit only)."}],"description":"Optionally correct/change the actor field (for audit only)."},"title":{"type":"string","description":"Update/correct title at this version. Non-nullable."},"body":{"oneOf":[{"type":"string","description":"Optional updated body at this snapshot version."},{"type":"null","description":"Optional updated body at this snapshot version."}],"description":"Optional updated body at this snapshot version."},"reason":{"oneOf":[{"type":"string","description":"Fix/update edit reason for this version."},{"type":"null","description":"Fix/update edit reason for this version."}],"description":"Fix/update edit reason for this version."}},"required":[],"description":"Update payload for a thread snapshot, supporting audit corrections of actor, title, body, or reason. All fields correspond to schema columns in discussionboard_thread_snapshots. Used in PUT /threadSnapshots/{id}."},"IDiscussionboardThreadTag.IRequest":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"UUID of thread for which to list tags/assignments. Main filter; always required. Maps to discussionboard_thread_tags.thread_id."},"assigned_at_from":{"type":"string","format":"date-time","description":"Inclusive lower date bound for filtering assignment time (ISO-8601, UTC)."},"assigned_at_to":{"type":"string","format":"date-time","description":"Inclusive upper date bound for assignment time."},"removed_at_null_only":{"type":"boolean","description":"If true, restricts result to currently-active (not yet removed) tag assignments only. Controls analytics vs audit query mode."},"page":{"type":"integer","minimum":1,"description":"Results page number (pagination, default 1)."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Max results per page. API may cap value (default 20-100)."}},"required":["thread_id"],"description":"Search and filter request for retrieving thread tag assignment records (discussionboard_thread_tags). Filters by thread, assignment time window, removal state, and supports pagination. Used with PATCH /threadTags."},"IPageDiscussionboardThreadTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreadTag"},"description":"Current page records; each is a tag assignment row for a thread."}},"required":["pagination","data"],"description":"Paged response containing thread tag assignment records (discussionboard_thread_tags) and pagination data. Follows IPage<T> pattern."},"IDiscussionboardThreadTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique assignment id (PK)."},"thread_id":{"type":"string","format":"uuid","description":"FK to discussionboard_threads.id (thread receiving the tag)."},"assigned_at":{"type":"string","format":"date-time","description":"Datetime when the tag was assigned to the thread. Required, non-nullable."},"removed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when tag was removed/unassigned. Null if tag is currently active/assigned. Audit and analytics use this for version windowing."},{"type":"null","format":"date-time","description":"Datetime when tag was removed/unassigned. Null if tag is currently active/assigned. Audit and analytics use this for version windowing."}],"description":"Datetime when tag was removed/unassigned. Null if tag is currently active/assigned. Audit and analytics use this for version windowing."}},"required":["id","thread_id","assigned_at"],"description":"Schema describing a thread tag assignment event for a thread (discussionboard_thread_tags). Used to filter by tags, audit timeline, or manage search."},"IDiscussionboardThreadTag.ICreate":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"Foreign key identifying which thread receives the tag assignment. References discussionboard_threads.id."},"assigned_at":{"type":"string","format":"date-time","description":"Datetime (UTC/ISO-8601). When the tag assignment took place. Often set to now by the API, but can be backdated for audit population workflows."}},"required":["thread_id","assigned_at"],"description":"Payload for creating a thread tag assignment. Defines target thread and assignment time. The deleted_at/removal must be managed by PATCH/PUT on update if tag is unassigned. Used for POST /threadTags."},"IDiscussionboardThreadTag.IUpdate":{"type":"object","properties":{"removed_at":{"type":"string","format":"date-time","description":"The timestamp when the tag assignment was removed. Used to indicate when a thread tag was deactivated, supporting tag history as required by audit, rollback, and moderation features in the discussion board. Nullable per schema."}},"required":[],"description":"Update properties for a thread tag assignment entity (discussionboard_thread_tags), referencing exactly the schema fields (see Prisma/ERD). This type is used for updating tag-assignments with new 'removed_at' values to support tag deactivation or rollback for moderation/audit workflows."},"IDiscussionboardPost.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post. Used for direct lookup or filtering during searches."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"UUID of thread this post belongs to. Used for filtering posts under a thread."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of member who authored the post."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of board this post is associated with."},"title":{"type":"string","description":"Title (subject) of the post. Used for search or filtering, UI display, and timelines."},"body":{"type":"string","description":"Full textual body content of the post (main content)."},"is_deleted":{"type":"boolean","description":"Soft delete marker. True if logically deleted; otherwise false."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601 format) for post creation/date-range filter."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update (ISO 8601) for date-range searching or filtering."}},"required":[],"description":"Search, filter, and pagination parameters for listing post entities in discussionboard_posts. All properties present in this type correspond to actual schema columns in the posts table. Used by API for advanced querying of post records."},"IPageDiscussionboardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPost"},"description":"Array of post records for the current page, as returned by the query."}},"required":["pagination","data"],"description":"Paginated result wrapper for discussion board posts, as per standard IPage<T> convention. Contains posts array and pagination data."},"IDiscussionboardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post record as in Prisma/ERD."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Foreign key reference to the thread containing this post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key reference to the discussion member who authored this post."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key reference to the board."},"title":{"type":"string","description":"Main title or subject line of the post, as entered by user."},"body":{"type":"string","description":"The full text content of the post."},"is_deleted":{"type":"boolean","description":"Soft delete flag; true if logically deleted, otherwise false."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for post creation (ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last post update (ISO 8601)."}},"required":["id","discussionboard_thread_id","discussionboard_member_id","discussionboard_board_id","title","body","is_deleted","created_at","updated_at"],"description":"Atomic, fully-populated post entity from discussionboard_posts. Contains all current schema properties—including soft-delete logic via is_deleted flag."},"IDiscussionboardPost.ICreate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"UUID for the thread that this post will belong to. Required."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member authoring the post. Required."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of the board this post is posted under. Required."},"title":{"type":"string","description":"Title for the new post. Required."},"body":{"type":"string","description":"Full text content for the new post. Required."}},"required":["discussionboard_thread_id","discussionboard_member_id","discussionboard_board_id","title","body"],"description":"Fields for creating a new discussion board post entity in discussionboard_posts. All required and optional columns are mapped directly to schema."},"IDiscussionboardPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Title to update for the post, if modifying. Optional in update."},"body":{"type":"string","description":"New content for the post. Optional in update."},"is_deleted":{"type":"boolean","description":"Update soft delete marker (true/false), to mark/unmark as deleted."}},"required":[],"description":"Update body for editing an existing post. All fields are optional and map exactly to updateable properties in the Prisma post model."},"IDiscussionboardPostSnapshot.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Snapshot UUID for precise lookup."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the parent post for the snapshot."},"editor_member_id":{"type":"string","format":"uuid","description":"Editor UUID; the member who edited/created the snapshot."},"title":{"type":"string","description":"Title as it was in the given snapshot version."},"body":{"type":"string","description":"Body/content as it was in the given snapshot version."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp for when the snapshot was taken."}},"required":[],"description":"Request/search/filter schema for listing or querying post snapshots in discussionboard_post_snapshots; only fields present in the model are permitted."},"IPageDiscussionboardPostSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_post_snapshots"},"description":"Array of post snapshot records for the current page/query."}},"required":["pagination","data"],"description":"Paginated list result for post snapshot records, following standard IPage<T> interface. Supports page-level access to post version history."},"Idiscussionboard_post_snapshots":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for this snapshot version."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Reference to parent post whose version is being snapshot."},"editor_member_id":{"type":"string","format":"uuid","description":"Editor UUID (nullable for system edits/unknown); who performed the edit."},"title":{"type":"string","description":"Title as at the snapshot time."},"body":{"type":"string","description":"Body as at the snapshot time."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp when snapshot was captured."}},"required":["id","discussionboard_post_id","title","body","taken_at"],"description":"Immutable post version/snapshot record from discussionboard_post_snapshots. Contains full record of title/body at the time, for rollback/audit purposes. Some fields may be nullable if not strictly required in the schema."},"Idiscussionboard_post_snapshots.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post for which this snapshot is being created."},"editor_member_id":{"type":"string","format":"uuid","description":"UUID of the member performing the edit; nullable for system-attributed snapshots."},"title":{"type":"string","description":"Title for this version of the post."},"body":{"type":"string","description":"Body/content at this snapshot version."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp of when the snapshot is taken."}},"required":["discussionboard_post_id","title","body","taken_at"],"description":"Body for creating a new post snapshot—used to record post versioning for audit/multi-version control. Fields must match model structure."},"Idiscussionboard_post_snapshots.IUpdate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post whose snapshot this is; for correcting reference."},"editor_member_id":{"type":"string","format":"uuid","description":"UUID of member who edited / snapshot belongs to."},"title":{"type":"string","description":"Updated title for the snapshot, for corrections."},"body":{"type":"string","description":"Updated body/content for the snapshot."},"taken_at":{"type":"string","format":"date-time","description":"Updated time (rare; for audit correction only)."}},"required":[],"description":"Update schema for post snapshots, only allows correction of fields that actually exist in the model. All properties are optional for PATCH/PUT update."},"Idiscussionboard_post_votes.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the vote entry."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post being voted on."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who cast the vote."},"vote_type":{"type":"integer","description":"Indicates direction of vote: 1 for upvote, -1 for downvote, 0 for neutral/removal."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of vote action for filter/sorting/search."}},"required":[],"description":"Filtering, search, and paging interface for listing vote records in discussionboard_post_votes table. All properties used match model attributes directly."},"IPageIdiscussionboard_post_votes":{"type":"object","description":"Paginated result for post vote entities. This object represents a single page of post votes, commonly used in post interaction analytics or user engagement dashboards for political/economic discussion boards.\n\nThe schema aligns with the underlying business rules for normalized, non-aggregated atomic votes (upvote/downvote actions). Pagination metadata facilitates navigation and batch processing in UI or API integrations, and the items array contains vote records always linked to posts and members by their UUID.\n\nAll property descriptions are strictly derived from the discussionboard_post_votes table in the Prisma schema.","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_post_votes"},"description":"List of atomic vote records for this page of results, strictly referencing the post_vote schema."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information, indicating current page, total pages, result count, etc."}},"required":["data","pagination"]},"Idiscussionboard_post_votes":{"type":"object","description":"Atomic upvote/downvote/neutral record for a single member on a post.\n\nImplements audit, analytics, and voting business rules for the political/economic discussion board. Each row in this entity records a voting action for one user on a specific post, with strict one-vote-per-(user,post) constraint. Didactic for interaction metrics and reputation systems.\n\nThis type's properties mirror the columns in Prisma's discussionboard_post_votes table.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier of the vote row. Matches discussionboard_post_votes.id."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"References the post being voted on. Foreign key to posts. Follows discussionboard_post_votes.discussionboard_post_id."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"References the voting member. Uniqueness constraint: one vote per (user,post) pair. Matches discussionboard_post_votes.discussionboard_member_id."},"vote_type":{"type":"integer","description":"Vote type: 1 for upvote, -1 for downvote, 0 for neutral/removed. Only these normalized integer values are allowed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the vote was cast. Used for analytics/compliance. Matches discussionboard_post_votes.created_at."}},"required":["id","discussionboard_post_id","discussionboard_member_id","vote_type","created_at"]},"Idiscussionboard_post_votes.ICreate":{"type":"object","description":"Type for creation of a post vote entity. Represents structure for vote-casting APIs. All required fields correspond to creation columns in the Prisma schema.\n\nNo aggregates, soft delete, or audit fields permitted in input. Only atomic fields matching the table's definition.\n\nFor upvote: vote_type=1, for downvote: vote_type=-1, for neutral: vote_type=0.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post for voting (FK to posts table)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member casting the vote (FK to members table)."},"vote_type":{"type":"integer","description":"Vote type: 1=upvote, -1=downvote, 0=neutral."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for the cast vote. Normally set to now, but may be backfilled for analytics import."}},"required":["discussionboard_post_id","discussionboard_member_id","vote_type","created_at"]},"Idiscussionboard_post_votes.IUpdate":{"type":"object","description":"Type for updating a post vote entity. Used when revising vote_type (e.g., changing from upvote to downvote), or correcting vote timestamps for analytics/tracing.\n\nAll properties directly mirror the columns in discussionboard_post_votes table, except id (which is immutable).\n\nDoes not accept non-schema properties or aggregates. Only allows update of atomic vote row data.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post for voting (FK to posts table)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Voting member id (FK to member)."},"vote_type":{"type":"integer","description":"Vote type: 1=upvote, -1=downvote, 0=neutral."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for the cast vote."}},"required":["discussionboard_post_id","discussionboard_member_id","vote_type","created_at"]},"Idiscussionboard_post_reports.IRequest":{"type":"object","description":"Search/filter/request body for post report listing. Allows analytics, escalation queues, and moderation dashboards to query reports with advanced filtering and sorting.\n\nAll properties align with those in the discussionboard_post_reports table as normalized search criteria for reporting system. Does not include non-existent fields or soft-delete logic.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"(Optional) Filter by target post's id. Only report rows for this post will match."},"reporter_member_id":{"type":"string","format":"uuid","description":"(Optional) Filter by reporting member's id (who filed the report)."},"report_type_id":{"type":"string","format":"uuid","description":"(Optional) Filter by specific report type (e.g., spam, abuse, off-topic)."},"description":{"type":"string","description":"(Optional) Fulltext search or matching for the freeform user-supplied description."},"created_at_gte":{"type":"string","format":"date-time","description":"(Optional) Filter for report creation after this timestamp."},"created_at_lte":{"type":"string","format":"date-time","description":"(Optional) Filter for reports created before or at this timestamp."},"sort":{"oneOf":[{"const":"created_at","description":"(Optional) Sorting field. Must be one of the actual schema properties."},{"const":"report_type_id","description":"(Optional) Sorting field. Must be one of the actual schema properties."},{"const":"reporter_member_id","description":"(Optional) Sorting field. Must be one of the actual schema properties."}],"description":"(Optional) Sorting field. Must be one of the actual schema properties."},"order":{"oneOf":[{"const":"asc","description":"(Optional) Sort direction: ascending or descending."},{"const":"desc","description":"(Optional) Sort direction: ascending or descending."}],"description":"(Optional) Sort direction: ascending or descending."},"page":{"type":"integer","description":"Requested page number for pagination."},"limit":{"type":"integer","description":"Maximum number of records to return for this page."}},"required":[]},"IPageIdiscussionboard_post_reports":{"type":"object","description":"Paginated result for post reports, for moderation/analytics dashboards. Contains array of report entities (see: discussionboard_post_reports schema) and pagination info. Strictly schema-aligned.","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_post_reports"},"description":"Array of atomic report records (each reporting a post)."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata as per platform paging standard."}},"required":["data","pagination"]},"Idiscussionboard_post_reports":{"type":"object","description":"Atomic report record for moderation/analytics in the discussion board. One report per (member, post, report type).\n\nImplements audit, reporting, and escalation workflows; referenced by moderation logs and workflows that result in warnings, bans, or deletions.\n\nFully schema-aligned to discussionboard_post_reports table.","properties":{"id":{"type":"string","format":"uuid","description":"Unique, atomic report id."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Id of the post being reported (FK)."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member id who made the report."},"report_type_id":{"type":"string","format":"uuid","description":"Type of report (e.g., spam, abuse, off-topic)."},"description":{"oneOf":[{"type":"string","description":"Freeform description given by reporting member; can be empty/null."},{"type":"null"}],"description":"Freeform description given by reporting member; can be empty/null."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was submitted; assigns audit/compliance chain."}},"required":["id","discussionboard_post_id","reporter_member_id","report_type_id","created_at"]},"Idiscussionboard_post_reports.ICreate":{"type":"object","description":"Type for creating a post report entity. Used in reporting workflows, member-flagging of posts. Only atomic schema fields are allowed; reporting business rules enforced at API/service layer.\n\nNo soft/hard delete, audit fields, or aggregates included. Strictly primal schema-row creation body. Only member, post, report_type, description (optional), and timestamp.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Id of the post being reported."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member submitting the report."},"report_type_id":{"type":"string","format":"uuid","description":"Type/category of report."},"description":{"oneOf":[{"type":"string","description":"Explanation given by member. Nullable for minimal-context cases."},{"type":"null"}],"description":"Explanation given by member. Nullable for minimal-context cases."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the report was submitted (audit trail)."}},"required":["discussionboard_post_id","reporter_member_id","report_type_id","created_at"]},"IPostReport.IUpdate":{"type":"object","description":"Type for updating a post report. Used for correcting reporting mistakes or changing the report details after submission (in audit/appeal cases). Only allows update of atomic schema fields for a report row.\n\nAligns strictly to the fields in discussionboard_post_reports table except for id (which is immutable). Description can be changed or set to null.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"The id of the post reported."},"reporter_member_id":{"type":"string","format":"uuid","description":"The member's id who submitted the report."},"report_type_id":{"type":"string","format":"uuid","description":"Type/category of the report (as per system codes)."},"description":{"oneOf":[{"type":"string","description":"Updated explanation for the report (can be blank/null)."},{"type":"null"}],"description":"Updated explanation for the report (can be blank/null)."},"created_at":{"type":"string","format":"date-time","description":"Updated or original timestamp of the report (for correcting audit chain if data entered late)."}},"required":["discussionboard_post_id","reporter_member_id","report_type_id","created_at"]},"IPostReport":{"type":"object","description":"Post report entity, for moderation, audit, and analytics in the platform.\n\nRepresents a single atomic record corresponding to a complaint/report against a post, including reason/type and reporter info. \n\nSchema strictly mirrors the atomic columns of discussionboard_post_reports.","properties":{"id":{"type":"string","format":"uuid","description":"Unique report record id."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"The post being reported."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member who reported."},"report_type_id":{"type":"string","format":"uuid","description":"Type/category of violence or infraction."},"description":{"oneOf":[{"type":"string","description":"Reporter explanation of infraction or details (nullable)."},{"type":"null"}],"description":"Reporter explanation of infraction or details (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the report was made."}},"required":["id","discussionboard_post_id","reporter_member_id","report_type_id","created_at"]},"IPostReference.IRequest":{"type":"object","description":"Type for search/pagination when querying post reference records—i.e., relations showing citations, cross-links, or replies linking posts and/or threads.\n\nProperties strictly reflect columns present in discussionboard_post_references table.\n\nDoes not handle non-existent aggregates, audit status, or delete fields.","properties":{"source_post_id":{"type":"string","format":"uuid","description":"Source (linking) post id. Filter by post creating the reference."},"target_post_id":{"type":"string","format":"uuid","description":"Target post id (the referenced/cited post in the relationship)."},"target_thread_id":{"type":"string","format":"uuid","description":"Target thread id (if the reference points to a thread rather than another post)."},"reference_type":{"type":"string","description":"Type of reference: accepted schema string for type (e.g., post, thread, comment)."},"page":{"type":"integer","description":"Desired page number for result pagination."},"limit":{"type":"integer","description":"Maximum size of the returned page."}},"required":[]},"IPageIPostReference":{"type":"object","description":"Paginated result for post reference entities—records denoting citations or cross-links between posts or threads.\n\nEach page object contains the array of post reference records and standard AutoBE paging metadata.\n\nData structure and all fields strictly follow Prisma schema for M:N post linking.","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostReference"},"description":"List of post reference entities (atomic links between posts/threads)."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for result set navigation."}},"required":["data","pagination"]},"IPostReference":{"type":"object","description":"The IPostReference type defines a reference relation between posts and optionally threads within the political/economic discussion board platform.\n\nThis aligns with the discussionboard_post_references table of the Prisma schema. Each reference serves as a normalized, atomic relationship, supporting workflows for citations, cross-links, and navigation among user posts and threads. It follows strict 3NF: each row is a single reference/link only, no pre-calculated/aggregate. Used in citation UIs, tracebacks, audit trails, and automated moderation tasks.\n\nConsult the schema: id, source_post_id (required), target_post_id (nullable), target_thread_id (nullable), reference_type (required: e.g., 'post','thread','comment'). All UUIDs.\n\nCreated or updated by members, moderators, or admin as system and business process evolves.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifying each reference link (discussionboard_post_references.id).\n\nA UUID for entity singularity and referential integrity. Used for audits, moderation, or direct access by UI components."},"source_post_id":{"type":"string","format":"uuid","description":"The referencing (source) post's UUID (discussionboard_post_references.source_post_id).\n\nIndicates the post where the reference originates. Required, never null. Enforces referential integrity, enables tracebacks/citations."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Referenced (target) post UUID (discussionboard_post_references.target_post_id).\n\nNullable: if the reference is to a thread only, this may be null. If present, must refer to existing post. Supports polymorphic linking."},{"type":"null","format":"uuid","description":"Referenced (target) post UUID (discussionboard_post_references.target_post_id).\n\nNullable: if the reference is to a thread only, this may be null. If present, must refer to existing post. Supports polymorphic linking."}],"description":"Referenced (target) post UUID (discussionboard_post_references.target_post_id).\n\nNullable: if the reference is to a thread only, this may be null. If present, must refer to existing post. Supports polymorphic linking."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Referenced (target) thread UUID (discussionboard_post_references.target_thread_id).\n\nNullable: if the reference is strictly to a post, this is null. Enables polymorphic post/thread relationships for advanced citation or content navigation."},{"type":"null","format":"uuid","description":"Referenced (target) thread UUID (discussionboard_post_references.target_thread_id).\n\nNullable: if the reference is strictly to a post, this is null. Enables polymorphic post/thread relationships for advanced citation or content navigation."}],"description":"Referenced (target) thread UUID (discussionboard_post_references.target_thread_id).\n\nNullable: if the reference is strictly to a post, this is null. Enables polymorphic post/thread relationships for advanced citation or content navigation."},"reference_type":{"type":"string","description":"String marker designating the type of reference ('post','thread','comment').\n\nEssential for polymorphic handling of reference relationships. Must be one of the designated values, enforced application-side. Used for moderation, UI differentiation or analytics tracking."}},"required":["id","source_post_id","reference_type"]},"IPostReference.ICreate":{"type":"object","description":"Request schema for creating a post reference row.\n\nFollows the discussionboard_post_references model: source_post_id (required), reference_type (required), with optional target_post_id and target_thread_id for polymorphic reference. Used by members, moderators, or automation to register contextual links/citations among content items. All UUIDs must be verified for referential existence prior to creation.","properties":{"source_post_id":{"type":"string","format":"uuid","description":"UUID of the origin/source post. Must exist in posts table. Required for all reference creation."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: UUID of the target post. Null if the reference is exclusively to a thread."},{"type":"null","format":"uuid","description":"Optional: UUID of the target post. Null if the reference is exclusively to a thread."}],"description":"Optional: UUID of the target post. Null if the reference is exclusively to a thread."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: UUID of the target thread. Null if not applicable."},{"type":"null","format":"uuid","description":"Optional: UUID of the target thread. Null if not applicable."}],"description":"Optional: UUID of the target thread. Null if not applicable."},"reference_type":{"type":"string","description":"Reference type label: 'post', 'thread', or 'comment', as per content domain.\n\nCrucial for enabling flexible UI/logic at creation time. Examples: 'post','thread','comment'."}},"required":["source_post_id","reference_type"]},"IPostReference.IUpdate":{"type":"object","description":"Schema for updating an existing post reference entity by id.\n\nAllows altering the target relationship or reference type, supporting content reclassification, moderation, or curation workflows. All fields are optional for PATCH-style partial updates, but at least one must be supplied for any update to occur.\n\nField values must match the Prisma schema: target_post_id, target_thread_id, reference_type. Id is implied by the request path; not changeable via the body.","properties":{"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally update the target post for the reference. Null means remove the post linkage."},{"type":"null","format":"uuid","description":"Optionally update the target post for the reference. Null means remove the post linkage."}],"description":"Optionally update the target post for the reference. Null means remove the post linkage."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally assign or change the target thread. Null if removing thread relationship."},{"type":"null","format":"uuid","description":"Optionally assign or change the target thread. Null if removing thread relationship."}],"description":"Optionally assign or change the target thread. Null if removing thread relationship."},"reference_type":{"type":"string","description":"Alter the reference type as needed for moderation/content evolution. Should remain one of: 'post','thread','comment'."}},"required":[]},"IComment.IRequest":{"type":"object","description":"Parameters for searching, filtering, and paginating comments (discussionboard_comments entity).\n\nComplies with the 'IComment.IRequest' convention used in listing API endpoints. All parameter names must align with the actual column names and types in the Prisma schema discussionboard_comments. Includes support for parent_id (threaded/nested reply), post id, member id, text search on content/body, creation or update window, and deleted_at (for soft-delete workflow compliance).\n\nThis type is used by admin, moderator, or UI querying functions.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post under which comments are to be listed/searched. Required for post-level thread queries."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Comment author's UUID. Enables filtering all comments by (or from) a specific member."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"If supplied, lists only direct replies to target comment (for threaded/nested structure). Null for top-level."},{"type":"null","format":"uuid","description":"If supplied, lists only direct replies to target comment (for threaded/nested structure). Null for top-level."}],"description":"If supplied, lists only direct replies to target comment (for threaded/nested structure). Null for top-level."},"body_search":{"type":"string","description":"Performs textual partial search (case- or fulltext-based) on comment content/body. Used for moderation and audit tools."},"created_at_from":{"type":"string","format":"date-time","description":"Filters for comments created after or at this timestamp (inclusive). Supports date-range analytics or moderation."},"created_at_to":{"type":"string","format":"date-time","description":"Filters for comments created before or at this timestamp (inclusive)."},"updated_at_from":{"type":"string","format":"date-time","description":"Filters for comments last updated on/after this value. Used to query edits after moderation events."},"updated_at_to":{"type":"string","format":"date-time","description":"Filters for comments last updated on/before this value. Used to limit history search windows."},"deleted":{"type":"boolean","description":"Show only comments that are soft-deleted (deleted_at present). For moderation/audit focus. If false, show only non-deleted (active) comments."},"page":{"type":"integer","minimum":1,"description":"Results page to display (pagination). Page index starts from 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum records per returned result page (pagination)."},"sort_by":{"type":"string","description":"Comma-delimited column(s) for primary ordering of result records. Follows schema: e.g., 'created_at,body' or 'updated_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort ordering: ascending ('asc') or descending ('desc') for each ordered column."},{"const":"desc","description":"Sort ordering: ascending ('asc') or descending ('desc') for each ordered column."}],"description":"Sort ordering: ascending ('asc') or descending ('desc') for each ordered column."}},"required":[]},"IPageIComment":{"type":"object","description":"Paginated container for IComment entity rows in discussionboard_comments.\n\nImplements the IPage container (<T extends object>) with T = IComment, as documented in the discussionboard_comments context. Includes pagination metadata, parameters, and a record set. Used by all paginated comment listing endpoints (list, search, moderation, audit, analytics).","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IComment"},"description":"List of comment entities on this page (see IComment for schema detail)."}},"required":["pagination","data"]},"IComment":{"type":"object","description":"Schema for an atomic comment entity in the discussionboard_comments table.\n\nRepresents a user/member's comment, reply, or moderator/in-system note attached to a post, supporting full moderation, discussion threading, and audit workflows. 100% aligns with Prisma schema: id, discussionboard_post_id, discussionboard_member_id, parent_id (nullable), body, created_at, updated_at (nullable), deleted_at (nullable).\n\nEach instance is one comment attached to a single post, optionally replying to another comment (parent_id). For every historical comment/editable, see ICommentSnapshot for history. Used by member UIs, admin tools, audit logs, and analytics dashboards.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the comment entity (discussionboard_comments.id). A unique, unchanging identifier."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post to which the comment is attached (discussionboard_comments.discussionboard_post_id).\n\nEnsures referential integrity, facilitates post-level threading, and supports reply hierarchies."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the comment's authoring member (discussionboard_comments.discussionboard_member_id).\n\nEnables attributions, moderation, and reply functions. Ensures direct relationship with user records."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional UUID of the comment being replied to (discussionboard_comments.parent_id).\n\nNullable: null for top-level comments. Supports arbitrary nesting (tree structure) for threaded discussions."},{"type":"null","format":"uuid","description":"Optional UUID of the comment being replied to (discussionboard_comments.parent_id).\n\nNullable: null for top-level comments. Supports arbitrary nesting (tree structure) for threaded discussions."}],"description":"Optional UUID of the comment being replied to (discussionboard_comments.parent_id).\n\nNullable: null for top-level comments. Supports arbitrary nesting (tree structure) for threaded discussions."},"body":{"type":"string","description":"Main content of the comment (discussionboard_comments.body).\n\nStrictly text; no formatting/meta outside this field. Subject to content moderation, spam filters, and audit review."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created (discussionboard_comments.created_at).\n\nEnables chronological review, audit, analytics, and sort."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of most recent edit (discussionboard_comments.updated_at).\n\nNullable: null if untouched since creation. Enables 'edited' UI markers, audit tracking, and version control."},{"type":"null","format":"date-time","description":"Timestamp of most recent edit (discussionboard_comments.updated_at).\n\nNullable: null if untouched since creation. Enables 'edited' UI markers, audit tracking, and version control."}],"description":"Timestamp of most recent edit (discussionboard_comments.updated_at).\n\nNullable: null if untouched since creation. Enables 'edited' UI markers, audit tracking, and version control."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp for the comment (discussionboard_comments.deleted_at).\n\nNull if comment is visible/active. Non-null for moderation-deleted comments, enables audit and appeals."},{"type":"null","format":"date-time","description":"Soft deletion timestamp for the comment (discussionboard_comments.deleted_at).\n\nNull if comment is visible/active. Non-null for moderation-deleted comments, enables audit and appeals."}],"description":"Soft deletion timestamp for the comment (discussionboard_comments.deleted_at).\n\nNull if comment is visible/active. Non-null for moderation-deleted comments, enables audit and appeals."}},"required":["id","discussionboard_post_id","discussionboard_member_id","body","created_at"]},"IComment.ICreate":{"type":"object","description":"Request payload for creating a new comment entity in discussionboard_comments.\n\nFollows the schema: discussionboard_post_id (required), discussionboard_member_id (required), body (required).\n\nOptional: parent_id (for replies; null for top-level). Used by member or moderator UI for adding threaded comments or reply chains. All foreign key references must be validated before creation. Creation auto-assigns created_at, updated_at, and deleted_at (null).","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post for the new comment (required; FK enforced).\n\nMust match existing discussionboard_posts.id."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member authoring the comment (required; FK enforced).\n\nEnsures author attribution and moderation rights."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment being replied to, if any (nullable).\n\nNull for top-level comments. Allows for arbitrary comment nesting."},{"type":"null","format":"uuid","description":"UUID of the comment being replied to, if any (nullable).\n\nNull for top-level comments. Allows for arbitrary comment nesting."}],"description":"UUID of the comment being replied to, if any (nullable).\n\nNull for top-level comments. Allows for arbitrary comment nesting."},"body":{"type":"string","description":"Text content/body for the comment (required)."}},"required":["discussionboard_post_id","discussionboard_member_id","body"]},"IComment.IUpdate":{"type":"object","description":"Payload for updating an existing comment entity in discussionboard_comments.\n\nFields are patch-style optional; any subset may be provided. Body allows comment content edits. parent_id can be set to move replies or adjust threading. discussionboard_post_id/discussionboard_member_id should rarely be changed except in audit/fixups. Only actual schema fields are allowed. updated_at must be handled by server logic.\n\ndeleted_at is modified only by soft-delete endpoint; not settable here.","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Optionally update the post association (rare; only for audit/exceptional transitions).\n\nUUID FK to posts."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optionally update the author/member relationship for the comment (rare, for audit/fixes)."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally assign/change reply parent for a comment (nesting structure fix)."},{"type":"null","format":"uuid","description":"Optionally assign/change reply parent for a comment (nesting structure fix)."}],"description":"Optionally assign/change reply parent for a comment (nesting structure fix)."},"body":{"type":"string","description":"Update the content/body of the comment."}},"required":[]},"IDiscussionboardCommentSnapshot.IRequest":{"type":"object","description":"Filtering/search request for list or history endpoints on comment snapshots (discussionboard_comment_snapshots domain).\n\nAllows filtering by comment_id, member_id, post_id, version, snapshot_created_at (date range), body search. Used by audit, rollback, version history, and advanced moderation panels. All keys must match discussionboard_comment_snapshots columns.\n\nPagination and sort provided as standard keys.","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Comment UUID for which snapshots are being searched/returned."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Which member's edits are being listed. Used in moderation, investigation, or analytics."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Parent post reference for the snapshot, joins audit flows across posts."},"version":{"type":"integer","description":"Comment edit version number (monotonic; version 1 = initial comment, 2 = first edit, etc.)."},"body_search":{"type":"string","description":"Supports fulltext or partial search against historical comment body for forgery detection, audit, or fraud review."},"snapshot_created_from":{"type":"string","format":"date-time","description":"Filters for snapshots created after this ISO8601 timestamp (inclusive)."},"snapshot_created_to":{"type":"string","format":"date-time","description":"Filters for snapshots created before this timestamp (inclusive)."},"page":{"type":"integer","minimum":1,"description":"Which page of results to show (pagination control)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Results per page (limits with analytic/audit default max)."},"sort_by":{"type":"string","description":"Sort by this column (snapshot_created_at, version, etc.)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sorting order: 'asc' or 'desc'."},{"const":"desc","description":"Sorting order: 'asc' or 'desc'."}],"description":"Sorting order: 'asc' or 'desc'."}},"required":[]},"IPageDiscussionboardCommentSnapshot":{"type":"object","description":"Paginated result wrapper for comment snapshot history records (discussionboard_comment_snapshots domain).\n\nImplements the IPage pattern (pagination plus data[] array of entity rows) for moderation history, audit, rollback, and analytics scenarios. Every row matches IDiscussionboardCommentSnapshot.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentSnapshot"},"description":"Snapshot history records for this paginated window (see IDiscussionboardCommentSnapshot for details)."}},"required":["pagination","data"]},"IDiscussionboardCommentSnapshot":{"type":"object","description":"Atomic entity representing a snapshot (edit/history event) of a comment in discussionboard_comment_snapshots.\n\nEach instance stores a version of a comment's text/body at a specific edit or audit event — immutable retrospective for audit, rollback, moderation, and appeals. Matches schema: id (PK), discussionboard_comment_id (FK), discussionboard_member_id (author at edit), discussionboard_post_id (context), body (historical comment string), version (monotonic edit number), snapshot_created_at (timestamp of history event). Used by audit, version control, and appeals/review processes.","properties":{"id":{"type":"string","format":"uuid","description":"Snapshot entity PK (discussionboard_comment_snapshots.id). Referenced for audit, rollback, or display."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"FK to the comment entity this is a history for (discussionboard_comment_snapshots.discussionboard_comment_id)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Who authored this comment version at the time (FK to member)."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Post context for the comment snapshot (FK to post).\n\nUsed when cross-checking history/audit trails."},"body":{"type":"string","description":"Immutable historical text/body stored at this version of the comment."},"version":{"type":"integer","description":"Which edit/version this is for the comment; monotonic for rollback, UI audit, and fraud detection."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Timestamp when this version/snapshot event was recorded (audit, rollback, moderation)."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_post_id","body","version","snapshot_created_at"]},"IDiscussionboardCommentSnapshot.ICreate":{"type":"object","description":"Payload type for creating a new comment snapshot (version history record) in discussionboard_comment_snapshots.\n\nRequired properties: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body (text at the time), version, snapshot_created_at (timestamp of snapshot creation). Used by audit, rollback, moderation, and appeals. All properties validated for FK existence before creation.","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Which comment/entity is this a version for; required for FK/reference integrity."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Which member performed edit or authored at this history/snapshot event."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Which post (context) is the snapshot linked to; aligns audit trails and rollback logic."},"body":{"type":"string","description":"Fixed/captured body/text at this version."},"version":{"type":"integer","description":"What edit version this is (e.g., 1 = original, 2 = first edit, etc.)."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Timestamp of the snapshot; the actual event or edit time."}},"required":["discussionboard_comment_id","discussionboard_member_id","discussionboard_post_id","body","version","snapshot_created_at"]},"IDiscussionboardCommentSnapshot.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Comment content at the time of this version.\n\nSourced from the 'body' column of discussionboard_comment_snapshots. Immutable snapshot of the comment at the time of edit. Used for moderation, rollbacks, and audit reviews."},"version":{"type":"integer","description":"The monotonic version number for this comment snapshot.\n\nFrom the 'version' column in discussionboard_comment_snapshots. Each update increments this value to track edit history and enable accurate rollback."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Point-in-time timestamp when this snapshot was created.\n\nFrom the 'snapshot_created_at' column in discussionboard_comment_snapshots. Audit/compliance support. Should be the time at which the snapshot was persisted, not necessarily the update request time."}},"required":["body","version","snapshot_created_at"],"description":"Update payload for a comment snapshot in discussionboard_comment_snapshots.\n\nAllows updating the comment text and its historical version metadata, strictly mapping to the schema's fields (body, version, snapshot_created_at). Used for correcting or amending audit history under admin or moderator workflows."},"IDiscussionboardCommentVote.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter: Which comment the vote was cast on.\n\nColumn 'discussionboard_comment_id'. Enables retrieval by target comment in upvote/downvote analytics."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter: Who cast the vote.\n\nColumn 'discussionboard_member_id'. For per-member voting analytics, user history, moderation investigation."},"vote_type":{"type":"string","description":"Vote value filter. Example values: 'up', 'down'. For analytics/audit search only.\n\nValues from the 'vote_type' field, usually 'up' or 'down'. String-typed for flexibility. Not an enum at schema level."},"created_at":{"type":"string","format":"date-time","description":"Range/search filter: vote creation time.\n\nFrom the 'created_at' column. Used for timeline analytics or anti-abuse heuristics."},"updated_at":{"type":"string","format":"date-time","description":"Optional: last time this vote was modified (e.g., toggled).\n\nFrom the 'updated_at' column for audit."},"page":{"type":"integer","description":"Pagination: requested page number.\n\nStandard OpenAPI pagination field. Not in DB schema but always mapped as query param."},"limit":{"type":"integer","description":"Pagination: number of results per page.\n\nStandard OpenAPI pagination field. Not in DB schema but always mapped as query param."}},"description":"Request object for searching or querying comment votes in discussionboard_comment_votes.\n\nAll properties map to schema fields except pagination, which is system/standard. Used for analytics, moderation review, or vote behavior statistics.","required":[]},"IPageDiscussionboardCommentVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentVote"},"description":"Paged list of comment vote entities.\n\nEach item is a normalized record from the discussionboard_comment_votes table, fully documenting who voted, what, and when."}},"required":["pagination","data"],"description":"Paginated result set for comment votes from discussionboard_comment_votes.\n\nStandardized page wrapper for returning search/listing results for audit/analytics."},"IDiscussionboardCommentVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key ID for this comment vote entry.\n\n'discussionboard_comment_votes.id'. Unique per record."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment's unique ID being voted on.\n\nFrom 'discussionboard_comment_id'. Atomic at per-vote granularity; foreign key to comments."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Voting member's ID.\n\nFrom 'discussionboard_member_id'. Refers to discussionboard_members entry."},"vote_type":{"type":"string","description":"Vote direction for comment. Example: 'up' or 'down'.\n\nFrom 'vote_type'. Not an enum at schema level; frontend/application can enforce allowed values."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was cast.\n\nColumn: 'created_at'. For error recovery/audit/history."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for changes to this vote record (e.g., toggling vote).\n\nColumn: 'updated_at'. Nullable: if never updated, remains null."},{"type":"null"}],"description":"Timestamp for changes to this vote record (e.g., toggling vote).\n\nColumn: 'updated_at'. Nullable: if never updated, remains null."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","vote_type","created_at"],"description":"Atomic record representing an upvote or downvote for a comment, as stored in discussionboard_comment_votes.\n\nUsed for analytics, anti-abuse, and moderation workflow."},"IDiscussionboardCommentVote.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"ID of the target comment to be voted on.\n\nSame as field in vote record."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's unique ID casting the vote.\n\nEnforces one vote per comment/member."},"vote_type":{"type":"string","description":"Vote value: 'up', 'down', or another string if extended later.\n\nMapped directly to the database's 'vote_type' column."}},"required":["discussionboard_comment_id","discussionboard_member_id","vote_type"],"description":"Creation request for a single comment vote in discussionboard_comment_votes.\n\nAll properties are atomic and must pass uniqueness (per comment/member)."},"IDiscussionboardCommentVote.IUpdate":{"type":"object","properties":{"vote_type":{"type":"string","description":"Updated vote direction value.\n\nSame semantics/constraints as in ICreate."}},"required":["vote_type"],"description":"Update payload for changing a vote in discussionboard_comment_votes.\n\nOnly the vote_type may be updated; all other fields must remain unchanged for audit/correctness."},"IDiscussionboardCommentReport.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter: Which comment is being reported.\n\nEnables per-comment moderation or audit dashboard (FK from id)."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter: Who submitted the report (reporting member id).\n\nFor tracking/report escalation; matches 'discussionboard_member_id' in the table."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Filter: Report type being searched (e.g., spam, abuse).\n\nFK to report types registry; required for triage/filtering."},"reason":{"type":"string","description":"Filter: User-supplied explanation or reason for the report.\n\nSearchable field for text-matching or prioritization."},"created_at":{"type":"string","format":"date-time","description":"Filter by when the report was submitted.\n\nAudit/logging analysis: enables date-range search, escalation triage, or SLA metrics."},"page":{"type":"integer","description":"Pagination: requested page number."},"limit":{"type":"integer","description":"Pagination: number of results per page."}},"description":"Request object for searching/filtering comment report records in discussionboard_comment_reports.","required":[]},"IPageDiscussionboardCommentReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentReport"},"description":"Result set for comment reports.\n\nEach entry is an atomic report event for moderation triage/audit."}},"required":["pagination","data"],"description":"Paginated list/response for discussionboard_comment_reports. Used for moderation dashboards and compliance workflows."},"IDiscussionboardCommentReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the comment report row.\n\nField 'id' in discussionboard_comment_reports. Unique event per report."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment's unique ID (reported entity).\n\nForeign key to comments. Enables per-thread triage and audit/review."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of member filing the report.\n\nFK to discussionboard_members."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Type/category of the report, referencing the master report types table.\n\nFK to report types, enables filtering/summarization."},"reason":{"type":"string","description":"User explanation text for why the comment is being reported.\n\nMandatory (not nullable): Required for explainability, transparency, and downstream moderation documentation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this report was submitted.\n\nFrom schema: enables SLA tracking, appeal workflows, and audit."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason","created_at"],"description":"Atomic reporting event for a moderation case against a comment. Used for audit, triage, and compliance reviews as per discussionboard_comment_reports."},"Idiscussionboard_comment_reports.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment id to be reported.\n\nFrom schema: 'discussionboard_comment_id' FK."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member id filing the report.\n\nReferences 'discussionboard_member_id' FK."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Type/category of the report.\n\nFK to type registry. Required by moderation protocol."},"reason":{"type":"string","description":"Freeform, non-null explanation for this report.\n\nEnd-user must supply specific reason or context; transparency requirement."}},"required":["discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason"],"description":"Request to create a new comment report; references one comment/member/report-type, and requires explicit non-null reason. Used for moderation business logic."},"Idiscussionboard_comment_reports":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the comment report row.\n\nSchema: 'id' in discussionboard_comment_reports. Unique atomic event per report."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment's unique ID (reported entity).\n\nSchema: discussionboard_comment_id."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of member filing the report.\n\nSchema: discussionboard_member_id. "},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Type/category of reported incident. FK to master types table.\n\nSchema: discussionboard_report_type_id."},"reason":{"type":"string","description":"User explanation text for reporting - mandatory.\n\nSchema: reason."},"created_at":{"type":"string","format":"date-time","description":"Report creation timestamp. Schema: created_at."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason","created_at"],"description":"Atomic comment report record from discussionboard_comment_reports. Used in moderation, appeal, and triage dashboards."},"Idiscussionboard_comment_reports.IUpdate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"(Optional) Target comment id, only if changing the reference. FK to comments."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) Reporting member id, only if amending source or correcting FK reference."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"(Optional) Report type - setting this modifies the classification of the reported issue."},"reason":{"type":"string","description":"(Optional) Updated user explanation or rationale for this report."}},"description":"Payload for update to an existing comment report. All fields optional and may be omitted when not changing. Only schema-defined fields allowed.","required":[]},"Idiscussionboard_reports.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"유일한 신고(Report) 식별자입니다.\n\ndiscussionboard_reports 테이블의 주키 역할을 하며, 개별 신고의 식별 및 참조에 사용됩니다.\n\n이 필드는 사용자 입력이나 클라이언트 요청에 의해 지정되거나, 검색/필터 목적의 조건으로 활용됩니다."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 사유를 구분하는 report_types 테이블의 기본키입니다.\n\n스팸, 욕설 등 신고의 분류를 구분하며, 필터/검색 조건으로 활용됩니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고를 생성한 회원의 discussionboard_members.id(기본키) 값입니다.\n\n누가 신고했는지를 확인하는 데 사용됩니다."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상 객체(게시글/댓글/회원 등)의 고유 식별자입니다.\n\n해당 대상에 대한 신고만 검색할 때 사용됩니다."},"target_object_type":{"type":"string","description":"신고 대상 객체의 타입입니다. 예: 'post', 'comment', 'member' 등\n\n유형별로 조회 혹은 상태 확인 시 필터 조건으로 사용됩니다."},"report_description":{"oneOf":[{"type":"string","description":"신고에 첨부된 설명·근거·사유 등 추가 텍스트입니다.\n\n신고 리스트 검색/필터에서 이 필드를 조건으로 검색할 수도 있습니다."},{"type":"null","description":"신고에 첨부된 설명·근거·사유 등 추가 텍스트입니다.\n\n신고 리스트 검색/필터에서 이 필드를 조건으로 검색할 수도 있습니다."}],"description":"신고에 첨부된 설명·근거·사유 등 추가 텍스트입니다.\n\n신고 리스트 검색/필터에서 이 필드를 조건으로 검색할 수도 있습니다."},"reported_at":{"type":"string","format":"date-time","description":"신고가 생성된 시각입니다. ISO-8601, UTC.\n\n이 필드는 기간 검색, 정렬, 또는 생성 일시 기준 통계에 활용됩니다."}},"description":"신고(Report) 리스트/검색 요청 조건 데이터 오브젝트입니다.\n\ndiscussionboard_reports 테이블의 주요 컬럼에 대한 검색/필터/정렬 조건을 제공합니다. 모든 필드는 실제 스키마 컬럼만을 기준으로 합니다.\n\n관리, 모니터링, 통계, 신고처리 대시보드 등 다양한 관리자용 UI, API에 넘깁니다.","required":[]},"IPageIdiscussionboard_reports":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_reports"},"description":"신고 데이터를 포함한 리스트 배열입니다."}},"required":["pagination","data"],"description":"신고(Report) 엔터티의 페이지네이션·페이징 처리를 위한 컨테이너.\n\n관리/운영/검색·통계 UI 등에서 paginated UI 지원 시 사용됩니다.\n\npagination 필드는 전체 조회 정보, data는 각 신고 데이터(엔티티 완전한 구조) 배열을 반환합니다."},"Idiscussionboard_reports":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"유일 신고 row 식별자\n\ndiscussionboard_reports 테이블의 PK입니다."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형(invocation reason) FK(논리 코드)\n\n실제 신고 항목 정의는 별도 discussionboard_report_types 테이블 참조"},"reporting_member_id":{"type":"string","format":"uuid","description":"신고를 수행한 회원(Actors)의 FK. 신고자를 추적, 통계 빅데이터, 혹은 중복 제한에 사용."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상의 row 식별자 (포스트, 댓글, 회원 등). polymorphic 참조."},"target_object_type":{"type":"string","description":"신고 대상의 엔티티 유형(예: post, comment, member 등). API에서 polymorphic 참조로 활용합니다."},"report_description":{"oneOf":[{"type":"string","description":"신고 사유에 대한 추가 설명·첨부/증빙 근거. nullable.\n\n담당자 상세 보기, 통계, 신고 사유 분석 등에 활용"},{"type":"null","description":"신고 사유에 대한 추가 설명·첨부/증빙 근거. nullable.\n\n담당자 상세 보기, 통계, 신고 사유 분석 등에 활용"}],"description":"신고 사유에 대한 추가 설명·첨부/증빙 근거. nullable.\n\n담당자 상세 보기, 통계, 신고 사유 분석 등에 활용"},"reported_at":{"type":"string","format":"date-time","description":"신고 생성 시각. UTC ISO 8601 string.\n\n관리/감사/통계 및 SLA 측정 등에 사용합니다."}},"required":["id","discussionboard_report_type_id","reporting_member_id","target_object_id","target_object_type","reported_at"],"description":"신고(Report) 단일 엔티티 오브젝트입니다.\n\ndiscussionboard_reports 테이블의 모든 실제 필드를 포함하며, 식별 정보(PK/FK), 신고 사유, 신고자, 대상, 상세 설명, 생성 일시 등을 표현합니다.\n\n감사, 모니터링, 상세조회, 신고처리 등에서 활용합니다."},"Idiscussionboard_reports.ICreate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형 식별자(FK). 필수.\n\ndiscussionboard_report_types에서 미리 정의된 유형 UUID로, UI에선 신고 사유 선택 콤보박스로 제공될 수 있습니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"실제로 신고를 수행한 회원 discussionboard_members.id (UUID). 회원이 직접 신고하는 경우 자동 세팅."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상(row)의 UUID. (게시글, 댓글, 회원 등 PK)"},"target_object_type":{"type":"string","description":"신고 대상 유형. 예: post, comment, member 등. Enum으로 제한될 수 있음. 정확성과 일관성을 위해 표준화된 문자열 사용 권장."},"report_description":{"oneOf":[{"type":"string","description":"신고 상세 설명(선택값). 신고 내용에 대한 추가 서술. Null이 허용됩니다."},{"type":"null","description":"신고 상세 설명(선택값). 신고 내용에 대한 추가 서술. Null이 허용됩니다."}],"description":"신고 상세 설명(선택값). 신고 내용에 대한 추가 서술. Null이 허용됩니다."}},"required":["discussionboard_report_type_id","reporting_member_id","target_object_id","target_object_type"],"description":"신고(Report) 생성 API 요청 본문 형식.\n\n신고 생성 시 필요한 필수 필드만 명시, description은 옵션(Nullable)입니다. created_at은 시스템에 의해 자동 추가."},"Idiscussionboard_reports.IUpdate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형 식별자(FK). 변경할 경우 새 사유로 업데이트합니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고자(회원) FK. 실수/중복/운영상 변경 필요 시 사용."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상 엔티티(row) UUID. 대상이 잘못 설정된 경우 변경할 수 있음."},"target_object_type":{"type":"string","description":"신고 대상 유형. 예: post, comment, member."},"report_description":{"oneOf":[{"type":"string","description":"신고 상세 설명(Nullable). 관리자 또는 조정 시에 내용 추가/수정 가능."},{"type":"null","description":"신고 상세 설명(Nullable). 관리자 또는 조정 시에 내용 추가/수정 가능."}],"description":"신고 상세 설명(Nullable). 관리자 또는 조정 시에 내용 추가/수정 가능."}},"description":"신고(Report) 업데이트 시 사용하는 데이터 구조입니다.\n\n필수는 아니며, 수정 필요한 항목만 전달 가능합니다.","required":[]},"Idiscussionboard_report_types.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"신고 유형의 식별자(PK), UUID.\n\n개별 조회/필터/검색에 사용 가능합니다."},"code":{"type":"string","description":"신고 분류 코드(예: 'spam', 'abuse', 'misinformation').\n\n프론트엔드와 서버 간 동기화·검색·분석 등에서 enum 역할을 합니다."},"display_name":{"type":"string","description":"신고 유형의 UI 표시용 한글명/문자열.\n\n검색, 목록, UI 필터링에 사용됩니다."},"active":{"type":"boolean","description":"신고 유형의 사용/미사용 여부. 검색/필터 시 활성 상태 조건으로 많이 사용됩니다."},"created_at":{"type":"string","format":"date-time","description":"생성 일시(UTC ISO 8601). 기간 기준 목록 조회, 정렬 등에 활용됩니다."}},"description":"신고 유형(report_types) 목록/검색/필터용 조회 요청 본문입니다.\n\ndiscussionboard_report_types의 주요 컬럼 기준, 각종 필터에 사용됩니다.","required":[]},"IPageIdiscussionboard_report_types":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_report_types"},"description":"각 신고 유형 엔터티 배열입니다."}},"required":["pagination","data"],"description":"신고 유형(report_types) 엔터티의 페이지네이션 컨테이너\n\npagination: 페이지 정보, data: report_types 엔터티 배열"},"Idiscussionboard_report_types":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"PK, 유일 신고 유형 식별자. UUID."},"code":{"type":"string","description":"신고 유형의 코드값(내부 논리 enum, 예: 'abuse', 'spam').\n\n시스템 및 프론트엔드, 정책 자동화 등에 활용됩니다."},"display_name":{"type":"string","description":"신고 유형의 한글 라벨(또는 영어식)."},"description":{"oneOf":[{"type":"string","description":"운영자/관리용 추가 설명입니다.\n\n신고 유형이 다소 복합적일 경우 내부 교육/문서화 용도로 활용"},{"type":"null","description":"운영자/관리용 추가 설명입니다.\n\n신고 유형이 다소 복합적일 경우 내부 교육/문서화 용도로 활용"}],"description":"운영자/관리용 추가 설명입니다.\n\n신고 유형이 다소 복합적일 경우 내부 교육/문서화 용도로 활용"},"active":{"type":"boolean","description":"해당 유형이 사용 가능한지 활성 여부.\n\nInactive 시 신고 사유 선택에서 보이지 않습니다."},"created_at":{"type":"string","format":"date-time","description":"유형 Row 생성 시각. UTC ISO 8601. 정책 감사, 통계 등에서 사용됨."}},"required":["id","code","display_name","active","created_at"],"description":"신고 유형(report_types) 단일 엔티티 데이터 구조\n\ndiscussionboard_report_types의 실제 컬럼 全부 포함.\n\n정책 관리, 신고 사유 라벨, 관리자/프론트엔드 표시/선택 등에 사용"},"Idiscussionboard_report_types.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형 enum code. 예) spam, abuse... 신규 정의시 admin이 직접 규격화해야 하며, 중복 될 수 없음."},"display_name":{"type":"string","description":"신고 유형명(UI 라벨 겸용). 한글/영문 모두 가능."},"description":{"oneOf":[{"type":"string","description":"운영자/관리자용 설명 필드. 정책/교육 주석 등 자유 텍스트 가능"},{"type":"null","description":"운영자/관리자용 설명 필드. 정책/교육 주석 등 자유 텍스트 가능"}],"description":"운영자/관리자용 설명 필드. 정책/교육 주석 등 자유 텍스트 가능"},"active":{"type":"boolean","description":"유형 활성화 여부. 신규 생성 시 true를 권장."}},"required":["code","display_name","active"],"description":"신고 유형(report_types) 생성 요청 스키마입니다.\n\n필수 필드(code, display_name, active), description은 optional입니다."},"Idiscussionboard_report_types.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형 code 값. 기존 값을 새 값으로 변경시 사용."},"display_name":{"type":"string","description":"신고 유형명, UI 라벨 등."},"description":{"oneOf":[{"type":"string","description":"신고 유형 설명(Nullable). 새 정책 혹은 주석 수정 시 활용."},{"type":"null","description":"신고 유형 설명(Nullable). 새 정책 혹은 주석 수정 시 활용."}],"description":"신고 유형 설명(Nullable). 새 정책 혹은 주석 수정 시 활용."},"active":{"type":"boolean","description":"활성화/비활성화 상태로 변경."}},"description":"신고 유형(report_types) 수정에 사용되는 payload 구조.\n\n수정 항목만 입력하면 되고, code/display_name 활성화 여부 등을 자유롭게 변경할 수 있다.","required":[]},"IDiscussionboardModerationAction.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"중재/모더레이션 액션 고유 식별자(PK)."},"report_id":{"type":"string","format":"uuid","description":"관련 신고(Report)의 고유 식별자. notification, 감시, 통계 등에서 사용"},"acting_moderator_id":{"type":"string","format":"uuid","description":"실제 조치를 수행한 권한자(모더레이터/관리자 등) 식별자."},"target_object_id":{"type":"string","format":"uuid","description":"액션의 적용 대상 오브젝트(PK값)."},"target_object_type":{"type":"string","description":"적용 대상 엔터티 타입. 예:'post', 'member', 'comment', 'board'..."},"action_type":{"type":"string","description":"액션의 구체적 타입(예: warn, edit, delete, ban, lock, pin 등)."},"rationale":{"type":"string","description":"조치의 근거·설명. 내부 감사/정책 투명성 용."},"actioned_at":{"type":"string","format":"date-time","description":"행동/액션이 발생한 일시(UTC ISO 8601)."}},"description":"모더레이션 액션(중재/조치) 엔티티 리스트/검색 요청용.","required":[]},"IPageIDiscussionboardModerationAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerationAction"},"description":"모더레이션 액션 항목의 배열"}},"required":["pagination","data"],"description":"중재/모더레이션 액션(page네이션) 리스트 컨테이너. pagination: 페이지 정보, data: moderationAction 배열"},"IDiscussionboardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for each moderation action in the system audit trail. Atomic per moderation event.\n\nReferences the 'id' column of the discussionboard_moderation_actions table in the Prisma schema."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the originating report if this moderation action was triggered by a user report. Nullable for proactive/patrol actions.\n\nReferences 'report_id' column, linked to discussionboard_reports.id."},{"type":"null","format":"uuid","description":"Reference to the originating report if this moderation action was triggered by a user report. Nullable for proactive/patrol actions.\n\nReferences 'report_id' column, linked to discussionboard_reports.id."}],"description":"Reference to the originating report if this moderation action was triggered by a user report. Nullable for proactive/patrol actions.\n\nReferences 'report_id' column, linked to discussionboard_reports.id."},"acting_moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator or admin who performed this action. Required for audit and accountability. FK to moderator/admin record.\n\nReferences 'acting_moderator_id' in discussionboard_moderation_actions."},"target_object_id":{"type":"string","format":"uuid","description":"ID of the object being moderated (post, comment, member, etc). Atomic identifier.\n\nReferences 'target_object_id' column of the schema."},"target_object_type":{"type":"string","description":"Type of object being moderated (e.g., 'post', 'comment', 'member', 'board'). String marker for context and routing. Not an enum, but predictable values are expected. Atomic per moderation event.\n\nReferences 'target_object_type' in schema."},"action_type":{"type":"string","description":"Type of moderation action taken (e.g., 'warn', 'edit', 'delete', 'ban', 'lock', 'pin'). Used for analytics filtering. Atomic action classification.\n\nReferences 'action_type' in schema."},"rationale":{"type":"string","description":"Explanation and notes justifying the action. Documents behavior for audit transparency.\n\nMatches 'rationale' column."},"actioned_at":{"type":"string","format":"date-time","description":"Timestamp of when the action was performed (ISO 8601 format, UTC recommended). Required for compliance.\n\nMatches 'actioned_at' column of the schema."}},"required":["id","acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"System moderation action record.\n\nRepresents an atomic moderation event (edit, delete, warn, ban, etc.) as captured in the audit log. Every action is linked to the actor, target, action rationale, and relevant context, supporting compliance and full auditability. Structure exactly matches the Prisma table discussionboard_moderation_actions.\n\nModeration actions are critical for ensuring transparency, supporting member appeals, and integrating with analytic workflows."},"IDiscussionboardModerationAction.ICreate":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to a user report if the action is triggered from an existing report. Nullable for proactive admin/moderator action.\n\nReferences 'report_id' FK (nullable)."},{"type":"null","format":"uuid","description":"Reference to a user report if the action is triggered from an existing report. Nullable for proactive admin/moderator action.\n\nReferences 'report_id' FK (nullable)."}],"description":"Reference to a user report if the action is triggered from an existing report. Nullable for proactive admin/moderator action.\n\nReferences 'report_id' FK (nullable)."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin ID performing the action. Required for audit trace and accountability."},"target_object_id":{"type":"string","format":"uuid","description":"ID of object (post, comment, member, etc) being moderated. References the target of the action."},"target_object_type":{"type":"string","description":"Type/classification of moderated object, e.g., 'post', 'comment', 'member'. Not an enum, free string as in moderation workflow."},"action_type":{"type":"string","description":"Type of moderation action (e.g., 'warn', 'edit', 'delete', 'ban', 'lock', etc). Business context must define expected values. Free string, not scoped as enum."},"rationale":{"type":"string","description":"Human-readable explanation/reason for taking this moderation action. Critical for audit trail and member appeals."},"actioned_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC recommended) when moderation action occurred."}},"required":["acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"Payload for creating a moderation action record.\n\nSupports audit requirements, complaint handling, moderation traceability, and platform governance. Maps to the discussionboard_moderation_actions Prisma model for creation endpoints. All properties reflect atomic moderation actions by a specific actor, relating to a specific object with audit timestamps."},"IDiscussionboardModerationAction.IUpdate":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update reference to originating report. Set or unset (null) as compliant with moderation update rules.\n\nPrisma: discussionboard_moderation_actions.report_id"},{"type":"null","format":"uuid","description":"Update reference to originating report. Set or unset (null) as compliant with moderation update rules.\n\nPrisma: discussionboard_moderation_actions.report_id"}],"description":"Update reference to originating report. Set or unset (null) as compliant with moderation update rules.\n\nPrisma: discussionboard_moderation_actions.report_id"},"acting_moderator_id":{"type":"string","format":"uuid","description":"ID of moderator/admin performing the refinement/correction to this action assignment."},"target_object_id":{"type":"string","format":"uuid","description":"Allows re-linking moderation action to a different object, e.g., in audit corrections. Must be atomic/unique.\n\nPrisma: .target_object_id"},"target_object_type":{"type":"string","description":"Type/classification of moderated object. For rare audit corrections/rectifications. Prisma: .target_object_type"},"action_type":{"type":"string","description":"Type/label of moderation action. Allows correction for audit. Prisma: .action_type"},"rationale":{"type":"string","description":"Explanation for the moderation action, or correction/clarification added later for audit context. Prisma: .rationale"},"actioned_at":{"type":"string","format":"date-time","description":"Update timestamp (ISO 8601). Used for correcting/modifying audit records if required. Prisma: .actioned_at"}},"required":["acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"Update structure for moderation action audit record.\n\nAllows for corrections or appended rationale in moderation/audit logs. All updated fields must map directly to discussionboard_moderation_actions schema. Used for rare compliance or forensic review corrections."},"IDiscussionboardBan.IRequest":{"type":"object","properties":{"banned_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for ban records by target member id (nullable, optional)"},{"type":"null","format":"uuid","description":"Filter for ban records by target member id (nullable, optional)"}],"description":"Filter for ban records by target member id (nullable, optional)"},"acting_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for bans issued by this moderator/admin (nullable, optional)"},{"type":"null","format":"uuid","description":"Filter for bans issued by this moderator/admin (nullable, optional)"}],"description":"Filter for bans issued by this moderator/admin (nullable, optional)"},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by originating report id (nullable, optional)"},{"type":"null","format":"uuid","description":"Filter by originating report id (nullable, optional)"}],"description":"Filter by originating report id (nullable, optional)"},"reason":{"oneOf":[{"type":"string","description":"Match ban rationale/reason substring, if provided"},{"type":"null","description":"Match ban rationale/reason substring, if provided"}],"description":"Match ban rationale/reason substring, if provided"},"ban_type":{"oneOf":[{"type":"string","description":"Search by type ('temporary', 'permanent', or system-defined types, nullable/optional)"},{"type":"null","description":"Search by type ('temporary', 'permanent', or system-defined types, nullable/optional)"}],"description":"Search by type ('temporary', 'permanent', or system-defined types, nullable/optional)"},"banned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Start date/time boundary for bans issued (nullable, for ranged search)"},{"type":"null","format":"date-time","description":"Start date/time boundary for bans issued (nullable, for ranged search)"}],"description":"Start date/time boundary for bans issued (nullable, for ranged search)"},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"End/expiry boundary for active or expired bans (nullable, for ranged search)"},{"type":"null","format":"date-time","description":"End/expiry boundary for active or expired bans (nullable, for ranged search)"}],"description":"End/expiry boundary for active or expired bans (nullable, for ranged search)"},"page":{"oneOf":[{"type":"number","description":"Page number for pagination (optional)"},{"type":"null","description":"Page number for pagination (optional)"}],"description":"Page number for pagination (optional)"},"limit":{"oneOf":[{"type":"number","description":"Page size for pagination (optional)"},{"type":"null","description":"Page size for pagination (optional)"}],"description":"Page size for pagination (optional)"}},"required":[],"description":"Search, filter, and pagination structure for bans retrieval.\n\nUsed for listing bans by member, moderator, type, or time period. Maps to fields from discussionboard_bans. All fields are optional; any subset may be present to filter results. Pagination standard."},"IPageIDiscussionboardBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for this result set (current page, limit, total records/pages). Atomic standard."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBan"},"description":"Array/list of ban records matching the search/filter/pagination parameters."}},"required":["pagination","data"],"description":"Container for a paginated set of ban results.\n\nFulfills IPage pattern for consistent pagination across endpoints. The 'data' array contains ban records; 'pagination' supplies page, limit, count, and page total."},"IDiscussionboardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for ban/suspension record (unique in table).\n\nPrisma: discussionboard_bans.id"},"banned_member_id":{"type":"string","format":"uuid","description":"Target member's ID for whom the ban applies. Required, not nullable.\n\nReferences discussionboard_bans.banned_member_id. Foreign key."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin performer of the ban. FK to moderator/admin. Required.\n\ndiscussionboard_bans.acting_moderator_id"},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Originating report ID if present (nullable). Used for linking the ban to a moderation report context. Null for proactive/admin forbans."},{"type":"null","format":"uuid","description":"Originating report ID if present (nullable). Used for linking the ban to a moderation report context. Null for proactive/admin forbans."}],"description":"Originating report ID if present (nullable). Used for linking the ban to a moderation report context. Null for proactive/admin forbans."},"reason":{"type":"string","description":"Reason specified for ban (auditable, user-facing summary).\n\nRequired. discussionboard_bans.reason"},"ban_type":{"type":"string","description":"Type of ban, e.g. 'temporary', 'permanent'. Not enum enforced but expected to be validated at the app layer.\n\ndiscussionboard_bans.ban_type"},"banned_at":{"type":"string","format":"date-time","description":"When ban was issued/enforced (ISO 8601 UTC, required).\n\ndiscussionboard_bans.banned_at"},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when ban expires (nullable). Null means permanent/indefinite ban.\n\nPrisma: discussionboard_bans.expires_at"},{"type":"null","format":"date-time","description":"Datetime when ban expires (nullable). Null means permanent/indefinite ban.\n\nPrisma: discussionboard_bans.expires_at"}],"description":"Datetime when ban expires (nullable). Null means permanent/indefinite ban.\n\nPrisma: discussionboard_bans.expires_at"}},"required":["id","banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Ban/suspension record structure.\n\nEncapsulates a single moderation ban, including actor (member), issuer (moderator/admin), optional report link, reason, type, timing, and audit info. Used across admin, moderation, and compliance workflows. Direct schema match to discussionboard_bans."},"IDiscussionboardBan.ICreate":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"Target member's ID to be banned. Required. Linked to discussionboard_members.id."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin taking action. Required. FK enforced."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report id if triggered by a specific report. Null for admin/proactive."},{"type":"null","format":"uuid","description":"Report id if triggered by a specific report. Null for admin/proactive."}],"description":"Report id if triggered by a specific report. Null for admin/proactive."},"reason":{"type":"string","description":"Explanation for ban, auditable/required."},"ban_type":{"type":"string","description":"Typology of ban (e.g. 'temporary', 'permanent'). Must be validated by business logic/app."},"banned_at":{"type":"string","format":"date-time","description":"Datetime when ban is issued (ISO 8601, UTC suggested)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime for ban expiry (nullable, null means indefinite/permanent)."},{"type":"null","format":"date-time","description":"Datetime for ban expiry (nullable, null means indefinite/permanent)."}],"description":"Datetime for ban expiry (nullable, null means indefinite/permanent)."}},"required":["banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Creation payload for discussionboard_bans moderation event.\n\nUsed to record formal member bans/suspensions, supporting compliance, reporting, and appeals workflows. All substantive audit fields required; references link to related member and mod/admin entities. Direct schema mapping to discussionboard_bans for POST endpoints."},"IDiscussionboardBan.IUpdate":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"Target member's id. Generally static, but allowed for audit correction flows."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin id for updating/moderator handoff."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reason or context update for audit correction."},{"type":"null","format":"uuid","description":"Reason or context update for audit correction."}],"description":"Reason or context update for audit correction."},"reason":{"type":"string","description":"Ban reason - allows for audit or rationale correction/update."},"ban_type":{"type":"string","description":"Type/category correction (e.g., temp -> perm, or other business logic update)."},"banned_at":{"type":"string","format":"date-time","description":"Issuance timestamp modification if required for audit."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiry modification for lifecycle state."},{"type":"null","format":"date-time","description":"Expiry modification for lifecycle state."}],"description":"Expiry modification for lifecycle state."}},"required":["banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Update structure for modification/correction of ban/suspension records.\n\nAllows audit and compliance flows to fix/modify ban parameters after initial creation. Direct mapping to update flows for discussionboard_bans."},"IDiscussionboardWarning.IRequest":{"type":"object","properties":{"warned_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by warned (recipient) member id (nullable/optional)"},{"type":"null","format":"uuid","description":"Filter by warned (recipient) member id (nullable/optional)"}],"description":"Filter by warned (recipient) member id (nullable/optional)"},"acting_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by moderator/admin issuer."},{"type":"null","format":"uuid","description":"Filter by moderator/admin issuer."}],"description":"Filter by moderator/admin issuer."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by report origin (nullable, optional)"},{"type":"null","format":"uuid","description":"Filter by report origin (nullable, optional)"}],"description":"Filter by report origin (nullable, optional)"},"reason":{"oneOf":[{"type":"string","description":"Substring or phrase contained in reason (nullable)"},{"type":"null","description":"Substring or phrase contained in reason (nullable)"}],"description":"Substring or phrase contained in reason (nullable)"},"warned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime for warning issuance (from or to, for range search)"},{"type":"null","format":"date-time","description":"Datetime for warning issuance (from or to, for range search)"}],"description":"Datetime for warning issuance (from or to, for range search)"},"page":{"oneOf":[{"type":"number","description":"Pagination page number (optional)"},{"type":"null","description":"Pagination page number (optional)"}],"description":"Pagination page number (optional)"},"limit":{"oneOf":[{"type":"number","description":"Number of items per page (optional)"},{"type":"null","description":"Number of items per page (optional)"}],"description":"Number of items per page (optional)"}},"required":[],"description":"Search/filter/pagination struct for warnings issued by moderation. All fields optional for advanced queries. Direct mapping to discussionboard_warnings schema columns."},"IPageIDiscussionboardWarning":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardWarning"}}},"required":["pagination","data"],"description":"Standard container for paged warning result sets."},"IDiscussionboardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for warning record. Unique in table. discussionboard_warnings.id"},"warned_member_id":{"type":"string","format":"uuid","description":"ID of the member receiving the warning. Required. FK to discussionboard_members.id"},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin who issued warning. Required. FK to mod/admin."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Source report if warning stems from a moderation incident (nullable, for out-of-band warnings use null)"},{"type":"null","format":"uuid","description":"Source report if warning stems from a moderation incident (nullable, for out-of-band warnings use null)"}],"description":"Source report if warning stems from a moderation incident (nullable, for out-of-band warnings use null)"},"reason":{"type":"string","description":"Rationale for warning - required and atomic explanation for audit. discussionboard_warnings.reason"},"warned_at":{"type":"string","format":"date-time","description":"Datetime warning was issued (ISO 8601, UTC recommended). Required."}},"required":["id","warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Warning record for disciplinary escalation. Maps directly to discussionboard_warnings model for moderation workflows, compliance, analytics, and audit trails. Every warning is atomic, attributed, and timestamped. For use in dashboards, audit logs, and member appeal processes."},"IDiscussionboardWarning.ICreate":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"ID of member to be warned (FK). Required."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Moderator/admin issuing warning (FK). Required."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Originating report id (optional for warnings not tied to an incident)"},{"type":"null","format":"uuid","description":"Originating report id (optional for warnings not tied to an incident)"}],"description":"Originating report id (optional for warnings not tied to an incident)"},"reason":{"type":"string","description":"Warning rationale (business rule requires completeness for audit, required)."},"warned_at":{"type":"string","format":"date-time","description":"Datetime of warning issuance (required, ISO 8601 UTC preferred)."}},"required":["warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Creation structure for warnings in discussions platform. Used to escalate infractions, warns members, supports compliance/audit workflows. All fields map directly to discussionboard_warnings creation columns."},"IDiscussionboardWarning.IUpdate":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"The UUID of the member receiving the warning. This field is used to identify which user was issued the moderation warning. Referenced from @namespace Moderation - discussionboard_warnings.warnd_member_id."},"acting_moderator_id":{"type":"string","format":"uuid","description":"The UUID of the moderator or admin who issued the warning. Must match an existing moderator/admin in the actors table. Used for audit, compliance, and escalation tracking. See schema: discussionboard_warnings.acting_moderator_id."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the report record (if any) that triggered this warning. Nullable field: if set, must match another moderation report; otherwise null if warning was issued without reported infraction. Fulfills normalization/audit. See discussionboard_warnings.report_id."},{"type":"null","format":"uuid","description":"ID of the report record (if any) that triggered this warning. Nullable field: if set, must match another moderation report; otherwise null if warning was issued without reported infraction. Fulfills normalization/audit. See discussionboard_warnings.report_id."}],"description":"ID of the report record (if any) that triggered this warning. Nullable field: if set, must match another moderation report; otherwise null if warning was issued without reported infraction. Fulfills normalization/audit. See discussionboard_warnings.report_id."},"reason":{"type":"string","description":"Text/description explaining why the warning was issued. Required as business logic for transparency, escalation, and appeal. See discussionboard_warnings.reason."},"warned_at":{"type":"string","format":"date-time","description":"Timestamp for when the warning was issued. Implements compliance/audit requirements, supporting review and member notification. ISO 8601 format. See discussionboard_warnings.warned_at."}},"required":["warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Update structure for a warning in the discussionboard_warnings table, used to modify warning details such as which member was warned, who issued it, the reason, and timing. All properties must align with the respective columns in Prisma, supporting full audit and moderation history."},"IDiscussionboardEngagementMetric.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: Filter to only metrics by this member UUID. Null means no member filter. Supports DAU/WAU and personalized activity queries. See discussionboard_engagement_metrics.discussionboard_member_id."},{"type":"null","format":"uuid","description":"Optional: Filter to only metrics by this member UUID. Null means no member filter. Supports DAU/WAU and personalized activity queries. See discussionboard_engagement_metrics.discussionboard_member_id."}],"description":"Optional: Filter to only metrics by this member UUID. Null means no member filter. Supports DAU/WAU and personalized activity queries. See discussionboard_engagement_metrics.discussionboard_member_id."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: Filter to only metrics per board UUID. Null means no board filter. Used for board-level engagement breakdown. See discussionboard_engagement_metrics.discussionboard_board_id."},{"type":"null","format":"uuid","description":"Optional: Filter to only metrics per board UUID. Null means no board filter. Used for board-level engagement breakdown. See discussionboard_engagement_metrics.discussionboard_board_id."}],"description":"Optional: Filter to only metrics per board UUID. Null means no board filter. Used for board-level engagement breakdown. See discussionboard_engagement_metrics.discussionboard_board_id."},"date_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: Lower bound (inclusive) of the engagement date (ISO8601). Recommended to be used for time-window queries or analytics dashboards. Not persisted in DB, only query filter."},{"type":"null","format":"date-time","description":"Optional: Lower bound (inclusive) of the engagement date (ISO8601). Recommended to be used for time-window queries or analytics dashboards. Not persisted in DB, only query filter."}],"description":"Optional: Lower bound (inclusive) of the engagement date (ISO8601). Recommended to be used for time-window queries or analytics dashboards. Not persisted in DB, only query filter."},"date_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: Upper bound (inclusive) of the engagement date (ISO8601). For time range filtering. Not persisted in DB, only query filter."},{"type":"null","format":"date-time","description":"Optional: Upper bound (inclusive) of the engagement date (ISO8601). For time range filtering. Not persisted in DB, only query filter."}],"description":"Optional: Upper bound (inclusive) of the engagement date (ISO8601). For time range filtering. Not persisted in DB, only query filter."},"page":{"oneOf":[{"type":"integer","description":"Optional: Page number for pagination. Null or missing defaults to page 1."},{"type":"null","description":"Optional: Page number for pagination. Null or missing defaults to page 1."}],"description":"Optional: Page number for pagination. Null or missing defaults to page 1."},"limit":{"oneOf":[{"type":"integer","description":"Optional: Records per page for pagination. Null or missing uses default, e.g. 100."},{"type":"null","description":"Optional: Records per page for pagination. Null or missing uses default, e.g. 100."}],"description":"Optional: Records per page for pagination. Null or missing uses default, e.g. 100."}},"required":[],"description":"Request body for querying/listing engagement metrics (discussionboard_engagement_metrics). Supports optional filtering by member, board, date range, and pagination."},"IPageIDiscussionboardEngagementMetric":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardEngagementMetric"},"description":"List of engagement metric records for this page. Each record documents a single atomized member+board+date engagement row."}},"required":["pagination","data"],"description":"A paged result set of engagement metrics. Fulfills analytics dashboard, admin, or API requirements for scalable activity analysis."},"IDiscussionboardEngagementMetric":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The primary key UUID for this engagement metric record. Unique, system-generated for DB row tracking."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"The member UUID for which the metrics apply. Nullable for board-level or anonymous engagement. See discussionboard_engagement_metrics.discussionboard_member_id."},{"type":"null","format":"uuid","description":"The member UUID for which the metrics apply. Nullable for board-level or anonymous engagement. See discussionboard_engagement_metrics.discussionboard_member_id."}],"description":"The member UUID for which the metrics apply. Nullable for board-level or anonymous engagement. See discussionboard_engagement_metrics.discussionboard_member_id."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board UUID where the engagement occurred. Nullable for site-level or ad hoc analytics. See discussionboard_engagement_metrics.discussionboard_board_id."},{"type":"null","format":"uuid","description":"Board UUID where the engagement occurred. Nullable for site-level or ad hoc analytics. See discussionboard_engagement_metrics.discussionboard_board_id."}],"description":"Board UUID where the engagement occurred. Nullable for site-level or ad hoc analytics. See discussionboard_engagement_metrics.discussionboard_board_id."},"engagement_date":{"type":"string","format":"date-time","description":"The time window/date for the metric, always in ISO 8601 calendar date format (YYYY-MM-DD or full timestamp)."},"posts_created_count":{"type":"integer","description":"Number of posts created by this member (or overall) during this day/period on this board. Must be non-negative. Fulfills platform analytics requirements."},"comments_created_count":{"type":"integer","description":"Count of comments by the member/board on this date/period. Used for trend charts and moderator dashboards."},"votes_cast_count":{"type":"integer","description":"Total voting events (upvotes/downvotes) performed by the user/board/date. Used for engagement heatmaps and moderation anomaly detection."}},"required":["id","engagement_date","posts_created_count","comments_created_count","votes_cast_count"],"description":"Single row recording activity for one member+board+date. Used for computed dashboards, engagement charting, moderation anomaly detection, and enforcement of business analytics rules."},"IDiscussionboardEngagementMetric.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Member UUID if available. Null for board/anonymous metrics."},{"type":"null","format":"uuid","description":"Member UUID if available. Null for board/anonymous metrics."}],"description":"Member UUID if available. Null for board/anonymous metrics."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board UUID if available. Null for site-wide/anonymous metrics."},{"type":"null","format":"uuid","description":"Board UUID if available. Null for site-wide/anonymous metrics."}],"description":"Board UUID if available. Null for site-wide/anonymous metrics."},"engagement_date":{"type":"string","format":"date-time","description":"Date for which engagement is being logged (ISO 8601 format)."},"posts_created_count":{"type":"integer","description":"Posts authored count."},"comments_created_count":{"type":"integer","description":"Comments authored count."},"votes_cast_count":{"type":"integer","description":"Votes cast count."}},"required":["engagement_date","posts_created_count","comments_created_count","votes_cast_count"],"description":"Creation object for new engagement metric. Used by analytics engines to insert periodically aggregated activity metrics as per business requirement for DAU/WAU, voting, and comment/post tracking."},"IDiscussionboardEngagementMetric.IUpdate":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the target member's UUID. Null for global/anonymous rollup."},{"type":"null","format":"uuid","description":"Update the target member's UUID. Null for global/anonymous rollup."}],"description":"Update the target member's UUID. Null for global/anonymous rollup."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board UUID for which record applies. Null for global stats."},{"type":"null","format":"uuid","description":"Board UUID for which record applies. Null for global stats."}],"description":"Board UUID for which record applies. Null for global stats."},"engagement_date":{"type":"string","format":"date-time","description":"Stamped date/time (ISO8601) for engagement period. If changed, alters time bucket assignment."},"posts_created_count":{"type":"integer","description":"Updated count of authored posts."},"comments_created_count":{"type":"integer","description":"Updated count of comments."},"votes_cast_count":{"type":"integer","description":"Updated votes cast count."}},"required":["engagement_date","posts_created_count","comments_created_count","votes_cast_count"],"description":"Update object for engagement metric. Used for corrections, late-arriving data, or analytics redress workflows."},"IDiscussionboardActivityLog.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by acting member's UUID (may be null for system events/anonymous browsing)."},{"type":"null","format":"uuid","description":"Optional filter by acting member's UUID (may be null for system events/anonymous browsing)."}],"description":"Optional filter by acting member's UUID (may be null for system events/anonymous browsing)."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by board UUID (null for platform-wide events)."},{"type":"null","format":"uuid","description":"Filter by board UUID (null for platform-wide events)."}],"description":"Filter by board UUID (null for platform-wide events)."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by thread UUID activity (optional for cross-thread or rare journey analytics)."},{"type":"null","format":"uuid","description":"Filter by thread UUID activity (optional for cross-thread or rare journey analytics)."}],"description":"Filter by thread UUID activity (optional for cross-thread or rare journey analytics)."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by post UUID (null for thread/board/global activity)."},{"type":"null","format":"uuid","description":"Filter by post UUID (null for thread/board/global activity)."}],"description":"Filter by post UUID (null for thread/board/global activity)."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by comment UUID (matches unique analytics or mediation flows)."},{"type":"null","format":"uuid","description":"Filter by comment UUID (matches unique analytics or mediation flows)."}],"description":"Filter by comment UUID (matches unique analytics or mediation flows)."},"event_timestamp_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter by lower-bound event timestamp (ISO8601)."},{"type":"null","format":"date-time","description":"Filter by lower-bound event timestamp (ISO8601)."}],"description":"Filter by lower-bound event timestamp (ISO8601)."},"event_timestamp_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter by upper-bound event timestamp (ISO8601)."},{"type":"null","format":"date-time","description":"Filter by upper-bound event timestamp (ISO8601)."}],"description":"Filter by upper-bound event timestamp (ISO8601)."},"event_type":{"oneOf":[{"type":"string","description":"Specific event filter (e.g. 'login', 'logout', 'post_create', 'role_change')."},{"type":"null","description":"Specific event filter (e.g. 'login', 'logout', 'post_create', 'role_change')."}],"description":"Specific event filter (e.g. 'login', 'logout', 'post_create', 'role_change')."},"page":{"oneOf":[{"type":"integer","description":"Optional: Result page number for pagination."},{"type":"null","description":"Optional: Result page number for pagination."}],"description":"Optional: Result page number for pagination."},"limit":{"oneOf":[{"type":"integer","description":"Optional: Results per page for pagination."},{"type":"null","description":"Optional: Results per page for pagination."}],"description":"Optional: Results per page for pagination."}},"required":[],"description":"Request schema for paged/search activity log retrieval from discussionboard_activity_logs. Filters include member, board, thread, post, comment, event type, timestamp bounds, and pagination controls."},"IPageIDiscussionboardActivityLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Expected pagination metadata object."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardActivityLog"},"description":"Array of activity log records for this result page."}},"required":["pagination","data"],"description":"A page result wrapper for activity logs, includes metadata and data array."},"IDiscussionboardActivityLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this activity log record. Auto-generated, globally unique UUID."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID identifying member responsible for event. Nullable for system or non-member events."},{"type":"null","format":"uuid","description":"UUID identifying member responsible for event. Nullable for system or non-member events."}],"description":"UUID identifying member responsible for event. Nullable for system or non-member events."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"The forum/board UUID where the event occurred (if applicable)."},{"type":"null","format":"uuid","description":"The forum/board UUID where the event occurred (if applicable)."}],"description":"The forum/board UUID where the event occurred (if applicable)."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of thread involved in this event."},{"type":"null","format":"uuid","description":"UUID of thread involved in this event."}],"description":"UUID of thread involved in this event."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of post directly implicated in event (if any)."},{"type":"null","format":"uuid","description":"UUID of post directly implicated in event (if any)."}],"description":"UUID of post directly implicated in event (if any)."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of comment implicated (nullable for non-comment events)."},{"type":"null","format":"uuid","description":"UUID of comment implicated (nullable for non-comment events)."}],"description":"UUID of comment implicated (nullable for non-comment events)."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format, marking the occurrence of the event."},"event_type":{"type":"string","description":"Type of activity event (e.g., 'login', 'post_create', 'comment_edit', etc). Used in audit, analytics, security."},"event_metadata":{"oneOf":[{"type":"string","description":"JSON-encoded or string-formatted business context (device, ip, value-diffs, etc). Nullable for events lacking metadata."},{"type":"null","description":"JSON-encoded or string-formatted business context (device, ip, value-diffs, etc). Nullable for events lacking metadata."}],"description":"JSON-encoded or string-formatted business context (device, ip, value-diffs, etc). Nullable for events lacking metadata."}},"required":["id","event_timestamp","event_type"],"description":"Atomic log record for a member or system event. Used for analytics, audit, rare-journey tracking, and compliance. All properties reflect true schema. Fulfills full audit/event log per requirements."},"IDiscussionboardActivityLog.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the acting member (nullable for anonymous or system events). Only set if event is attributable to a user, null for global/system workflow."},{"type":"null","format":"uuid","description":"UUID of the acting member (nullable for anonymous or system events). Only set if event is attributable to a user, null for global/system workflow."}],"description":"UUID of the acting member (nullable for anonymous or system events). Only set if event is attributable to a user, null for global/system workflow."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board UUID where the activity occurred (nullable if not board-specific)."},{"type":"null","format":"uuid","description":"Board UUID where the activity occurred (nullable if not board-specific)."}],"description":"Board UUID where the activity occurred (nullable if not board-specific)."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread UUID for the event (nullable if not relevant)."},{"type":"null","format":"uuid","description":"Thread UUID for the event (nullable if not relevant)."}],"description":"Thread UUID for the event (nullable if not relevant)."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post UUID for post-related events (nullable otherwise)."},{"type":"null","format":"uuid","description":"Post UUID for post-related events (nullable otherwise)."}],"description":"Post UUID for post-related events (nullable otherwise)."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment UUID if the event specifically relates to a comment (nullable otherwise)."},{"type":"null","format":"uuid","description":"Comment UUID if the event specifically relates to a comment (nullable otherwise)."}],"description":"Comment UUID if the event specifically relates to a comment (nullable otherwise)."},"event_timestamp":{"type":"string","format":"date-time","description":"The precise time of the event (ISO8601)."},"event_type":{"type":"string","description":"Type of event as per business analyze (login/logout/change/channel navigation, etc)."},"event_metadata":{"oneOf":[{"type":"string","description":"Arbitrary JSON/meta data for detailed audit records. Optional/nullable."},{"type":"null","description":"Arbitrary JSON/meta data for detailed audit records. Optional/nullable."}],"description":"Arbitrary JSON/meta data for detailed audit records. Optional/nullable."}},"required":["event_timestamp","event_type"],"description":"Creation schema for a new activity log record. Used to archive analytics, trace, moderation, or compliance/business events at runtime. Non-included fields are system-generated or not relevant at creation."},"IActivityLog.IUpdate":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update member id; nullable if event is anonymous/system."},{"type":"null","format":"uuid","description":"Update member id; nullable if event is anonymous/system."}],"description":"Update member id; nullable if event is anonymous/system."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update board context for this activity, or null to unset."},{"type":"null","format":"uuid","description":"Update board context for this activity, or null to unset."}],"description":"Update board context for this activity, or null to unset."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread context update."},{"type":"null","format":"uuid","description":"Thread context update."}],"description":"Thread context update."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post context update (changed/retargeted event)."},{"type":"null","format":"uuid","description":"Post context update (changed/retargeted event)."}],"description":"Post context update (changed/retargeted event)."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment context update (nullable/optional)."},{"type":"null","format":"uuid","description":"Comment context update (nullable/optional)."}],"description":"Comment context update (nullable/optional)."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp for this activity event (ISO8601 string)."},"event_type":{"type":"string","description":"Activity type/category. Should match enumerated app event types."},"event_metadata":{"oneOf":[{"type":"string","description":"Arbitrary metadata (JSON-encoded string or plain string), nullable."},{"type":"null","description":"Arbitrary metadata (JSON-encoded string or plain string), nullable."}],"description":"Arbitrary metadata (JSON-encoded string or plain string), nullable."}},"required":["event_timestamp","event_type"],"description":"Update object for an activity log. Used for correcting event details, updating context, or setting metadata after initial record creation."},"IActivityLog":{"$ref":"#/components/schemas/IDiscussionboardActivityLog","description":"Alias for full activity log object, matching IDiscussionboardActivityLog. Included for compatibility with OpenAPI operation type names or system-wide standardization."},"ITrendingTopic.IRequest":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"The UUID of the thread considered for trending, used to filter by thread."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"The UUID of the board which is considered for trending, used for querying by board context."},"ranking_period_date":{"type":"string","format":"date-time","description":"The period date (typically day) for trending analytics. ISO8601 timestamp (example: 2025-07-24T00:00:00Z)."},"min_score":{"type":"number","description":"Lower bound for trending score in search/filter."},"max_score":{"type":"number","description":"Upper bound for trending score in search/filter."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination. The first page is 1."},"limit":{"type":"integer","minimum":1,"maximum":1000,"description":"Number of records per page (maximum 1000)."}},"description":"Search/pagination/filter schema for trending topics based on thread id, board id, ranking window, or trending score. Used to retrieve trending analytics or for moderation insights.","required":["page","limit"]},"IPageITrendingTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITrendingTopic"},"description":"Result array containing the list of matching trending topic records."}},"required":["pagination","data"],"description":"Paginated result for trending topics. Contains pagination metadata and an array of trending topic records."},"ITrendingTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for the trending topic record."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread UUID this trending record corresponds to."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board UUID of the trending thread (for analytics grouping)."},"ranking_period_date":{"type":"string","format":"date-time","description":"Date of the ranking period (ISO8601)."},"trending_score":{"type":"number","description":"Calculated score representing trending popularity of the thread for this period."}},"required":["id","discussionboard_thread_id","discussionboard_board_id","ranking_period_date","trending_score"],"description":"A trending topic entity, capturing trending analytics for a thread in a specific board and date period."},"ITrendingTopic.ICreate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread UUID for which this trending entry is created."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board UUID where the trending thread is posted."},"ranking_period_date":{"type":"string","format":"date-time","description":"Date of the ranking period, when this trending record will be associated (ISO8601)."},"trending_score":{"type":"number","description":"Trending score value to be assigned for this thread within analytics."}},"required":["discussionboard_thread_id","discussionboard_board_id","ranking_period_date","trending_score"],"description":"Request body to create a trending topic entity."},"ITrendingTopic.IUpdate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread UUID being updated (if changed)."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board UUID for the thread (if changed)."},"ranking_period_date":{"type":"string","format":"date-time","description":"Date period for trending update (ISO8601)."},"trending_score":{"type":"number","description":"The new trending score for the record."}},"description":"Update body for trending topic entity; accepts all updatable fields.","required":[]},"INotificationTemplate.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of the notification template (for direct lookup)."},"code":{"type":"string","description":"Short code for the notification template (e.g., 'reply_notification')."},"name":{"type":"string","description":"Human-readable title for notification template."},"is_active":{"type":"boolean","description":"Whether the template is active (enabled for new notifications)."},"created_at_start":{"type":"string","format":"date-time","description":"Filter for templates created after this time."},"created_at_end":{"type":"string","format":"date-time","description":"Filter for templates created before this time."},"page":{"type":"integer","minimum":1,"description":"Page for pagination results."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of results per page (maximum 100)."}},"required":["page","limit"],"description":"Advanced search/pagination/filter schema for notification templates."},"IPageINotificationTemplate":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationTemplate"},"description":"Array of notification template records."}},"required":["pagination","data"],"description":"Paginated result for notification template listing."},"INotificationTemplate":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the notification template."},"code":{"type":"string","description":"Short code to reference this notification template."},"name":{"type":"string","description":"Display name for the notification template."},"description":{"oneOf":[{"type":"string","description":"Extended description for admin/support. Nullable."},{"type":"null","description":"Extended description for admin/support. Nullable."}],"description":"Extended description for admin/support. Nullable."},"subject":{"type":"string","description":"Notification subject/heading (for UI/email/etc)."},"body":{"type":"string","description":"Message body (may have placeholders)."},"is_active":{"type":"boolean","description":"Whether this template is currently enabled."},"created_at":{"type":"string","format":"date-time","description":"When the notification template was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update time for notification template."}},"required":["id","code","name","subject","body","is_active","created_at","updated_at"],"description":"Notification template entity with all fields."},"INotificationTemplate.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Short code for the template (unique)."},"name":{"type":"string","description":"Visible display name for template."},"description":{"oneOf":[{"type":"string","description":"Description for admins/support, nullable."},{"type":"null","description":"Description for admins/support, nullable."}],"description":"Description for admins/support, nullable."},"subject":{"type":"string","description":"Subject/heading of notification."},"body":{"type":"string","description":"Body/message for notification, allows placeholders."},"is_active":{"type":"boolean","description":"Is template enabled/active upon creation."}},"required":["code","name","subject","body","is_active"],"description":"Request body to create a notification template."},"INotificationTemplate.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Short code for the template (unique, if updated)."},"name":{"type":"string","description":"Display name (if changed)."},"description":{"oneOf":[{"type":"string","description":"Description for admins/support (nullable, updated)."},{"type":"null","description":"Description for admins/support (nullable, updated)."}],"description":"Description for admins/support (nullable, updated)."},"subject":{"type":"string","description":"Subject (if updating)."},"body":{"type":"string","description":"Body/message for template update."},"is_active":{"type":"boolean","description":"Update to enabled state."}},"description":"Update body for notification template entity; any updatable fields allowed.","required":[]},"IDiscussionboardNotificationPreferences.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member whose preferences to search/filter."},"code":{"type":"string","description":"Notification template code (for per-template search)."},"email_enabled":{"type":"boolean","description":"Filter for email-enabled preferences."},"inapp_enabled":{"type":"boolean","description":"Filter for in-app enabled preferences."},"browser_enabled":{"type":"boolean","description":"Filter for browser push enabled preferences."},"page":{"type":"integer","minimum":1,"description":"Page for pagination results."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Results per page (maximum 100)."}},"required":["page","limit"],"description":"Filtering/search object for notification preference results."},"IPageIDiscussionboardNotificationPreferences":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotificationPreferences"},"description":"List of notification preference entries matching filter."}},"required":["pagination","data"],"description":"Paginated listing for notification preference search results."},"IDiscussionboardNotificationPreferences":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification preference row. Represents the primary key and ensures this record can be individually referenced."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Identifier of the member whose notification preferences this record stores. References the member in the discussion board system."},"code":{"type":"string","description":"Notification Template Code: Specifies the template/event (e.g., 'reply', 'mention', 'announcement') to which these preferences apply. This enables per-notification granularity."},"email_enabled":{"type":"boolean","description":"Determines whether this member wants to receive email for this notification type. Fulfills privacy and opt-in/out regulatory requirements."},"inapp_enabled":{"type":"boolean","description":"Indicates whether in-app notifications are enabled for this template/type. Allows per-template/channel preference."},"browser_enabled":{"type":"boolean","description":"Indicates if browser push notifications are enabled. Controls delivery to browser UIs supporting push."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp representing when this preferences record was created. Supports compliance and history review."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of most recent preference update. Used for audit and privacy review."}},"required":["id","discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled","created_at","updated_at"],"description":"A discussion board member's notification channel preferences for a specific notification template/event type. Fully normalized and reviewed. All audit, opt-in/out, and privacy compliance fields are present."},"IDiscussionboardNotificationPreferences.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"The member (user) to whom these preferences apply. Only valid members may be referenced."},"code":{"type":"string","description":"The notification template code for which the channel preferences are being set."},"email_enabled":{"type":"boolean","description":"Whether to allow email notifications for this template type."},"inapp_enabled":{"type":"boolean","description":"Allow in-app notifications for this code/type."},"browser_enabled":{"type":"boolean","description":"Enable browser push for this template code."}},"required":["discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled"],"description":"Request structure for creating a new notification preference for a member. Contains the member ID, notification template code, and per-channel enablement booleans. Used in user onboarding and notification setup."},"IDiscussionboardNotificationPreferences.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Notification template code for which the preference is set. May be updated if member wants to apply this row to a different template/event."},"email_enabled":{"type":"boolean","description":"Updated value for email channel. If true, members will receive email for this code/type."},"inapp_enabled":{"type":"boolean","description":"Updates in-app notification enablement for this code/type."},"browser_enabled":{"type":"boolean","description":"Updates browser push preference."}},"required":["code","email_enabled","inapp_enabled","browser_enabled"],"description":"Request structure for updating existing notification preferences. Required fields are the notification template code and enable/disable booleans for each channel."},"IDiscussionboardPrivacyPolicies.IRequest":{"type":"object","properties":{"version":{"type":"string","description":"Optional search for policy by version string (e.g., 'v2024.06')."},"effective_date":{"type":"string","format":"date-time","description":"Policy effective date to filter/search."},"title":{"type":"string","description":"Filter privacy policies by title."},"content":{"type":"string","description":"Free-text search in the privacy policy content."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated search. Indexed from 1."},"limit":{"type":"integer","minimum":1,"description":"Result limit (max # of records per page)."}},"description":"Filter/search/pagination request for privacy policy listing endpoint. Each property matches a privacy policy schema field or standard pagination behavior.","required":[]},"IPageIDiscussionboardPrivacyPolicies":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPrivacyPolicies"},"description":"Array of policy entities for the current page."}},"required":["pagination","data"],"description":"Paginated result for privacy policy records. Contains a page object (pagination info) and a list of privacy policy items."},"IDiscussionboardPrivacyPolicies":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this privacy policy version record. Serves as the primary key for lookup and reference."},"version":{"type":"string","description":"Text version identifier (e.g., 'v2024.06'). Used for legal/membership tracking and compliance."},"effective_date":{"type":"string","format":"date-time","description":"The date (ISO-8601) on which this policy version becomes effective."},"title":{"type":"string","description":"Short title for the policy for user display, history lists, and audit."},"content":{"type":"string","description":"Full legal text of the policy. Must be complete and persistent for historical audit."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp the record was last updated."}},"required":["id","version","effective_date","title","content","created_at","updated_at"],"description":"A platform privacy policy version record. Contains full history/audit for all user-accepted or current/rescinded policies. Never overwritten—every change results in a new record."},"IDiscussionboardPrivacyPolicies.ICreate":{"type":"object","properties":{"version":{"type":"string","description":"Policy version string for tracking/audit (e.g., 'v2024.06')."},"effective_date":{"type":"string","format":"date-time","description":"When the policy should become effective (ISO 8601 date)."},"title":{"type":"string","description":"Short title for the new privacy policy."},"content":{"type":"string","description":"Full legal text content of the new privacy policy."}},"required":["version","effective_date","title","content"],"description":"Request structure for creating a new privacy policy version. Used by admin/legal staff to add/rollout a new policy. All required fields, mapped to the privacy policy entity."},"IDiscussionboardPrivacyPolicies.IUpdate":{"type":"object","properties":{"version":{"type":"string","description":"Edited policy version string (rare, only to correct admin entry errors)."},"effective_date":{"type":"string","format":"date-time","description":"Updated date at which the policy becomes effective."},"title":{"type":"string","description":"Title correction/update."},"content":{"type":"string","description":"Revised or corrected full policy content."}},"required":["version","effective_date","title","content"],"description":"Request structure for updating a privacy policy record by primary key. Only accepts schema fields; overwrites fields as a new legal record."},"IDiscussionboardDataErasureRequests.IRequest":{"type":"object","properties":{"status":{"type":"string","description":"Filter/search by request status (e.g., 'pending','approved','denied','completed')."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter/search by member initiating the erasure request."},"requested_at":{"type":"string","format":"date-time","description":"Search filter for requests created at a certain time."},"reviewed_at":{"type":"string","format":"date-time","description":"Filter by admin review timestamp."},"completed_at":{"type":"string","format":"date-time","description":"Filter by erasure completion timestamp."},"admin_remark":{"type":"string","description":"Search filter for admin remarks."},"page":{"type":"integer","minimum":1,"description":"Pagination page number."},"limit":{"type":"integer","minimum":1,"description":"Max # of requests in this page."}},"description":"Paginated filter/search request for privacy erasure request records; supports filtering by status, member, and key workflow timestamps.","required":[]},"IPageIDiscussionboardDataErasureRequests":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardDataErasureRequests"},"description":"List of privacy data erasure requests on this page."}},"required":["pagination","data"],"description":"Paginated result for members' data erasure requests, containing standard page info and a list of erasure request items."},"IDiscussionboardDataErasureRequests":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/unique id for the erasure request."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Refers to the member initiating the erasure request."},"status":{"type":"string","description":"Current status of the request (e.g., 'pending', 'approved', 'denied', 'completed'). Status management is handled by admins or workflow automation."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp at which the request was created. Key for regulatory compliance."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp the request was reviewed by an admin or moderator. Null if not yet reviewed."},{"type":"null"}],"description":"Timestamp the request was reviewed by an admin or moderator. Null if not yet reviewed."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp the request is marked complete or rejected. Null if not yet finalized."},{"type":"null"}],"description":"Timestamp the request is marked complete or rejected. Null if not yet finalized."},"admin_remark":{"oneOf":[{"type":"string","description":"Optional admin/moderator note; describes why denied/approved or describes processing details."},{"type":"null"}],"description":"Optional admin/moderator note; describes why denied/approved or describes processing details."}},"required":["id","discussionboard_member_id","status","requested_at"],"description":"A user's request for account/data erasure from the discussion board platform. Used for audit, GDPR/CCPA and privacy compliance, and management reporting. Soft/hard delete status and timestamps are included."},"IDiscussionboardDataErasureRequest.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member requesting data erasure. Must be authenticated and unique for open erasure requests."}},"required":["discussionboard_member_id"],"description":"Request body for submitting a new data erasure request for the member. Used by members to invoke regulatory/consent flows."},"IDiscussionboardDataErasureRequest":{"type":"object","description":"Data erasure request entity representing a user's formal request for account/data deletion in the political/economic discussion board platform (refer to discussionboard_data_erasure_requests table).\n\nThis type includes complete, fully normalized tracking for audit, compliance, and privacy workflows. It captures the lifecycle of a request (submission, review, completion), references the requesting member, and stores timestamps for each process stage. The design ensures alignment with regulatory requirements (e.g., GDPR) and allows platform administrators to manage member requests transparently, log processing history, and document rationale for decisions. All properties strictly conform to the underlying Prisma schema.\n\nServes use cases such as: member-initiated deletion, platform privacy report generation, admin review queues, and audit trail lookup. All properties trace a single erasure workflow, supporting both user- and admin-managed transitions. No additional, non-schema fields or workflows exist in this definition.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the data erasure request. Uniquely identifies each erasure submission, allowing reliable lookup for audit, compliance, and workflow management.\n\nMust be a valid UUID format. Assigned on request creation. Used internally for all cross-entity references to this request."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key to the member account initiating the erasure request. Points to discussionboard_members.id, ensuring referential integrity.\n\nThis property guarantees that each erasure submission is directly attributable to a specific user/member account, fulfilling audit and compliance requirements for traceability. Must always match a valid member id."},"status":{"type":"string","description":"Current status of the data erasure request. Reflects its workflow progress: 'pending', 'approved', 'denied', 'completed', or other platform-defined values.\n\nControls access, editability, and triggers for subsequent business processes. Only the instantaneous status is stored—no derived or computed states. String values must align with business logic for request state transitions."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when the member submitted the data erasure request. Must be a valid ISO 8601 date-time string.\n\nUsed for ordering, SLA measurement, and compliance auditing. Cannot be updated after initial creation; establishes the audit trail for regulatory reporting and timeline analysis."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when an admin, moderator, or authorized reviewer first opened, viewed, or acted upon the request in the management interface.\n\nNullable—remains null when the request has not yet been reviewed, set by the system when review action occurs. Enables compliance with prompt/efficient handling standards and audit requirements."},{"type":"null"}],"description":"Timestamp when an admin, moderator, or authorized reviewer first opened, viewed, or acted upon the request in the management interface.\n\nNullable—remains null when the request has not yet been reviewed, set by the system when review action occurs. Enables compliance with prompt/efficient handling standards and audit requirements."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the erasure process was completed or finalized, either by deletion, rejection, or other terminal state.\n\nNullable—unpopulated if the request has not yet reached completion. Set when admin workflow is finished; used for legal documentation and audit trails."},{"type":"null"}],"description":"Timestamp when the erasure process was completed or finalized, either by deletion, rejection, or other terminal state.\n\nNullable—unpopulated if the request has not yet reached completion. Set when admin workflow is finished; used for legal documentation and audit trails."},"admin_remark":{"oneOf":[{"type":"string","description":"Admin- or moderator-supplied comment describing rationale, notes, or compliance explanation for the disposition of the request.\n\nMay be null (optional); included for audit trails, policy transparency, and communication during review/approval/denial workflow. Especially important in compliance or appeal/complaint cases. No computed or derived metadata."},{"type":"null"}],"description":"Admin- or moderator-supplied comment describing rationale, notes, or compliance explanation for the disposition of the request.\n\nMay be null (optional); included for audit trails, policy transparency, and communication during review/approval/denial workflow. Especially important in compliance or appeal/complaint cases. No computed or derived metadata."}},"required":["id","discussionboard_member_id","status","requested_at"]},"IDiscussionboardDataErasureRequest.IUpdate":{"type":"object","description":"Payload for updating a data erasure request record in the platform audit and privacy compliance workflow. Corresponds to the mutable fields in the discussionboard_data_erasure_requests Prisma schema.\n\nSupports administrative or moderation workflows that change the state or metadata of a request (status updates, review completion timestamps, admin remarks, etc).\n\nStrictly limited to fields that are updateable post-creation, as defined by 3NF normalization practices. This variant is required for administrative review interfaces, SLA compliance, and compliance documentation. All updates must be auditable and reference compliant values. No creation-only, immutable, or non-schema fields are permitted in this type.","properties":{"status":{"type":"string","description":"Latest status for this erasure request. Reflects allowed business state transitions (e.g., 'pending' → 'approved'/'denied'/'completed'). Always a valid state string known to the backend/business logic. Updating status is a privilege reserved for admin/mod roles during review."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of when the data erasure request was reviewed by an administrator/moderator. Value must be a valid ISO 8601 date-time or null if not yet reviewed. Used for audit/logging/SLAs; updatable post initial submission."},{"type":"null"}],"description":"Timestamp of when the data erasure request was reviewed by an administrator/moderator. Value must be a valid ISO 8601 date-time or null if not yet reviewed. Used for audit/logging/SLAs; updatable post initial submission."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the erasure process was marked complete (either executed or administratively closed). Must be ISO 8601 date-time or null if not yet completed. Used for compliance deadlines, platform reporting, and audit trail."},{"type":"null"}],"description":"Timestamp when the erasure process was marked complete (either executed or administratively closed). Must be ISO 8601 date-time or null if not yet completed. Used for compliance deadlines, platform reporting, and audit trail."},"admin_remark":{"oneOf":[{"type":"string","description":"Optional comment from admin/mod explaining review decision, compliance rationale, or communication to the member. Freeform string; null if omitted."},{"type":"null"}],"description":"Optional comment from admin/mod explaining review decision, compliance rationale, or communication to the member. Freeform string; null if omitted."}},"required":[]}},"authorization":[{"name":"member","description":"Can register, log in, view discussion boards, post new topics, comment, and interact with posts (like/upvote/downvote)."},{"name":"moderator","description":"Can do everything a member can, plus has the ability to edit/delete posts, manage reported content, and temporarily ban members for violations."},{"name":"admin","description":"Full platform control: includes all moderator functions, user management, board configuration, role assignment, and system settings."}]}},"created_at":"2025-07-24T19:11:32.584Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":2756992,"input":{"total":2604289,"cached":103168},"output":{"total":152703,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2756992,"input":{"total":2604289,"cached":103168},"output":{"total":152703,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2756992,"input":{"total":2604289,"cached":103168},"output":{"total":152703,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2756992,"input":{"total":2604289,"cached":103168},"output":{"total":152703,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}}]