[{"event":{"type":"interfaceStart","created_at":"2025-07-22T08:15:42.637Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceEndpoints","endpoints":[{"path":"/discussionboard/systematic/channels","method":"patch"},{"path":"/discussionboard/systematic/channels/{id}","method":"get"},{"path":"/discussionboard/systematic/channels","method":"post"},{"path":"/discussionboard/systematic/channels/{id}","method":"put"},{"path":"/discussionboard/systematic/channels/{id}","method":"delete"},{"path":"/discussionboard/systematic/categories","method":"patch"},{"path":"/discussionboard/systematic/categories/{id}","method":"get"},{"path":"/discussionboard/systematic/categories","method":"post"},{"path":"/discussionboard/systematic/categories/{id}","method":"put"},{"path":"/discussionboard/systematic/categories/{id}","method":"delete"},{"path":"/discussionboard/systematic/settings","method":"patch"},{"path":"/discussionboard/systematic/settings/{id}","method":"get"},{"path":"/discussionboard/systematic/settings","method":"post"},{"path":"/discussionboard/systematic/settings/{id}","method":"put"},{"path":"/discussionboard/systematic/settings/{id}","method":"delete"},{"path":"/discussionboard/systematic/auditLogs","method":"patch"},{"path":"/discussionboard/systematic/auditLogs/{id}","method":"get"},{"path":"/discussionboard/systematic/auditLogs","method":"post"},{"path":"/discussionboard/systematic/auditLogs/{id}","method":"put"},{"path":"/discussionboard/systematic/auditLogs/{id}","method":"delete"},{"path":"/discussionboard/actors/members","method":"patch"},{"path":"/discussionboard/actors/members/{id}","method":"get"},{"path":"/discussionboard/actors/members","method":"post"},{"path":"/discussionboard/actors/members/{id}","method":"put"},{"path":"/discussionboard/actors/members/{id}","method":"delete"},{"path":"/discussionboard/actors/moderators","method":"patch"},{"path":"/discussionboard/actors/moderators/{id}","method":"get"},{"path":"/discussionboard/actors/moderators","method":"post"},{"path":"/discussionboard/actors/moderators/{id}","method":"put"},{"path":"/discussionboard/actors/moderators/{id}","method":"delete"},{"path":"/discussionboard/actors/admins","method":"patch"},{"path":"/discussionboard/actors/admins/{id}","method":"get"},{"path":"/discussionboard/actors/admins","method":"post"},{"path":"/discussionboard/actors/admins/{id}","method":"put"},{"path":"/discussionboard/actors/admins/{id}","method":"delete"},{"path":"/discussionboard/actors/memberProfiles","method":"patch"},{"path":"/discussionboard/actors/memberProfiles/{id}","method":"get"},{"path":"/discussionboard/actors/memberProfiles","method":"post"},{"path":"/discussionboard/actors/memberProfiles/{id}","method":"put"},{"path":"/discussionboard/actors/memberProfiles/{id}","method":"delete"},{"path":"/discussionboard/actors/memberAuthentications","method":"patch"},{"path":"/discussionboard/actors/memberAuthentications/{id}","method":"get"},{"path":"/discussionboard/actors/memberAuthentications","method":"post"},{"path":"/discussionboard/actors/memberAuthentications/{id}","method":"put"},{"path":"/discussionboard/actors/memberAuthentications/{id}","method":"delete"},{"path":"/discussionboard/actors/memberSuspensions","method":"patch"},{"path":"/discussionboard/actors/memberSuspensions/{id}","method":"get"},{"path":"/discussionboard/actors/memberSuspensions","method":"post"},{"path":"/discussionboard/actors/memberSuspensions/{id}","method":"put"},{"path":"/discussionboard/actors/memberSuspensions/{id}","method":"delete"},{"path":"/discussionboard/actors/moderatorActions","method":"patch"},{"path":"/discussionboard/actors/moderatorActions/{id}","method":"get"},{"path":"/discussionboard/actors/moderatorActions","method":"post"},{"path":"/discussionboard/actors/moderatorActions/{id}","method":"put"},{"path":"/discussionboard/actors/moderatorActions/{id}","method":"delete"},{"path":"/discussionboard/boards/boards","method":"patch"},{"path":"/discussionboard/boards/boards/{id}","method":"get"},{"path":"/discussionboard/boards/boards","method":"post"},{"path":"/discussionboard/boards/boards/{id}","method":"put"},{"path":"/discussionboard/boards/boards/{id}","method":"delete"},{"path":"/discussionboard/boards/boardTopics","method":"patch"},{"path":"/discussionboard/boards/boardTopics/{id}","method":"get"},{"path":"/discussionboard/boards/boardTopics","method":"post"},{"path":"/discussionboard/boards/boardTopics/{id}","method":"put"},{"path":"/discussionboard/boards/boardTopics/{id}","method":"delete"},{"path":"/discussionboard/boards/topicTags","method":"patch"},{"path":"/discussionboard/boards/topicTags/{id}","method":"get"},{"path":"/discussionboard/boards/topicTags","method":"post"},{"path":"/discussionboard/boards/topicTags/{id}","method":"put"},{"path":"/discussionboard/boards/topicTags/{id}","method":"delete"},{"path":"/discussionboard/boards/boardAnnouncements","method":"patch"},{"path":"/discussionboard/boards/boardAnnouncements/{id}","method":"get"},{"path":"/discussionboard/boards/boardAnnouncements","method":"post"},{"path":"/discussionboard/boards/boardAnnouncements/{id}","method":"put"},{"path":"/discussionboard/boards/boardAnnouncements/{id}","method":"delete"},{"path":"/discussionboard/threads/threads","method":"patch"},{"path":"/discussionboard/threads/threads/{id}","method":"get"},{"path":"/discussionboard/threads/threads","method":"post"},{"path":"/discussionboard/threads/threads/{id}","method":"put"},{"path":"/discussionboard/threads/threads/{id}","method":"delete"},{"path":"/discussionboard/threads/posts","method":"patch"},{"path":"/discussionboard/threads/posts/{id}","method":"get"},{"path":"/discussionboard/threads/posts","method":"post"},{"path":"/discussionboard/threads/posts/{id}","method":"put"},{"path":"/discussionboard/threads/posts/{id}","method":"delete"},{"path":"/discussionboard/threads/comments","method":"patch"},{"path":"/discussionboard/threads/comments/{id}","method":"get"},{"path":"/discussionboard/threads/comments","method":"post"},{"path":"/discussionboard/threads/comments/{id}","method":"put"},{"path":"/discussionboard/threads/comments/{id}","method":"delete"},{"path":"/discussionboard/threads/commentReplies","method":"patch"},{"path":"/discussionboard/threads/commentReplies/{id}","method":"get"},{"path":"/discussionboard/threads/commentReplies","method":"post"},{"path":"/discussionboard/threads/commentReplies/{id}","method":"put"},{"path":"/discussionboard/threads/commentReplies/{id}","method":"delete"},{"path":"/discussionboard/threads/postAttachments","method":"patch"},{"path":"/discussionboard/threads/postAttachments/{id}","method":"get"},{"path":"/discussionboard/threads/postAttachments","method":"post"},{"path":"/discussionboard/threads/postAttachments/{id}","method":"put"},{"path":"/discussionboard/threads/postAttachments/{id}","method":"delete"},{"path":"/discussionboard/interactions/postLikes","method":"patch"},{"path":"/discussionboard/interactions/postLikes/{id}","method":"get"},{"path":"/discussionboard/interactions/postLikes","method":"post"},{"path":"/discussionboard/interactions/postLikes/{id}","method":"put"},{"path":"/discussionboard/interactions/postLikes/{id}","method":"delete"},{"path":"/discussionboard/interactions/postDislikes","method":"patch"},{"path":"/discussionboard/interactions/postDislikes/{id}","method":"get"},{"path":"/discussionboard/interactions/postDislikes","method":"post"},{"path":"/discussionboard/interactions/postDislikes/{id}","method":"put"},{"path":"/discussionboard/interactions/postDislikes/{id}","method":"delete"},{"path":"/discussionboard/interactions/commentLikes","method":"patch"},{"path":"/discussionboard/interactions/commentLikes/{id}","method":"get"},{"path":"/discussionboard/interactions/commentLikes","method":"post"},{"path":"/discussionboard/interactions/commentLikes/{id}","method":"put"},{"path":"/discussionboard/interactions/commentLikes/{id}","method":"delete"},{"path":"/discussionboard/interactions/commentDislikes","method":"patch"},{"path":"/discussionboard/interactions/commentDislikes/{id}","method":"get"},{"path":"/discussionboard/interactions/commentDislikes","method":"post"},{"path":"/discussionboard/interactions/commentDislikes/{id}","method":"put"},{"path":"/discussionboard/interactions/commentDislikes/{id}","method":"delete"},{"path":"/discussionboard/interactions/postReports","method":"patch"},{"path":"/discussionboard/interactions/postReports/{id}","method":"get"},{"path":"/discussionboard/interactions/postReports","method":"post"},{"path":"/discussionboard/interactions/postReports/{id}","method":"put"},{"path":"/discussionboard/interactions/postReports/{id}","method":"delete"},{"path":"/discussionboard/interactions/commentReports","method":"patch"},{"path":"/discussionboard/interactions/commentReports/{id}","method":"get"},{"path":"/discussionboard/interactions/commentReports","method":"post"},{"path":"/discussionboard/interactions/commentReports/{id}","method":"put"},{"path":"/discussionboard/interactions/commentReports/{id}","method":"delete"},{"path":"/discussionboard/interactions/tagProposals","method":"patch"},{"path":"/discussionboard/interactions/tagProposals/{id}","method":"get"},{"path":"/discussionboard/interactions/tagProposals","method":"post"},{"path":"/discussionboard/interactions/tagProposals/{id}","method":"put"},{"path":"/discussionboard/interactions/tagProposals/{id}","method":"delete"},{"path":"/discussionboard/moderation/reports","method":"patch"},{"path":"/discussionboard/moderation/reports/{id}","method":"get"},{"path":"/discussionboard/moderation/reports","method":"post"},{"path":"/discussionboard/moderation/reports/{id}","method":"put"},{"path":"/discussionboard/moderation/reports/{id}","method":"delete"},{"path":"/discussionboard/moderation/moderationLogs","method":"patch"},{"path":"/discussionboard/moderation/moderationLogs/{id}","method":"get"},{"path":"/discussionboard/moderation/moderationLogs","method":"post"},{"path":"/discussionboard/moderation/moderationLogs/{id}","method":"put"},{"path":"/discussionboard/moderation/moderationLogs/{id}","method":"delete"},{"path":"/discussionboard/moderation/suspensionRecords","method":"patch"},{"path":"/discussionboard/moderation/suspensionRecords/{id}","method":"get"},{"path":"/discussionboard/moderation/suspensionRecords","method":"post"},{"path":"/discussionboard/moderation/suspensionRecords/{id}","method":"put"},{"path":"/discussionboard/moderation/suspensionRecords/{id}","method":"delete"},{"path":"/discussionboard/moderation/warningRecords","method":"patch"},{"path":"/discussionboard/moderation/warningRecords/{id}","method":"get"},{"path":"/discussionboard/moderation/warningRecords","method":"post"},{"path":"/discussionboard/moderation/warningRecords/{id}","method":"put"},{"path":"/discussionboard/moderation/warningRecords/{id}","method":"delete"},{"path":"/discussionboard/moderation/contentFlags","method":"patch"},{"path":"/discussionboard/moderation/contentFlags/{id}","method":"get"},{"path":"/discussionboard/moderation/contentFlags","method":"post"},{"path":"/discussionboard/moderation/contentFlags/{id}","method":"put"},{"path":"/discussionboard/moderation/contentFlags/{id}","method":"delete"},{"path":"/discussionboard/notifications/notifications","method":"patch"},{"path":"/discussionboard/notifications/notifications/{id}","method":"get"},{"path":"/discussionboard/notifications/notifications","method":"post"},{"path":"/discussionboard/notifications/notifications/{id}","method":"put"},{"path":"/discussionboard/notifications/notifications/{id}","method":"delete"},{"path":"/discussionboard/notifications/memberNotificationSettings","method":"patch"},{"path":"/discussionboard/notifications/memberNotificationSettings/{id}","method":"get"},{"path":"/discussionboard/notifications/memberNotificationSettings","method":"post"},{"path":"/discussionboard/notifications/memberNotificationSettings/{id}","method":"put"},{"path":"/discussionboard/notifications/memberNotificationSettings/{id}","method":"delete"}],"created_at":"2025-07-22T08:15:42.637Z","step":0},"tokenUsage":{"facade":{"aggregate":{"total":37820,"input":{"total":35029,"cached":0},"output":{"total":2791,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":37820,"input":{"total":35029,"cached":0},"output":{"total":2791,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":37820,"input":{"total":35029,"cached":0},"output":{"total":2791,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":37820,"input":{"total":35029,"cached":0},"output":{"total":2791,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Updates an existing notification setting record for a specific member. This operation targets the discussionboard_member_notification_settings table and enables modifications to the member's notification delivery preferences, including in-app and email channels, for the discussion board platform. The endpoint is used when a member changes their notification preferences through UI settings. Admins may also use this endpoint for compliance or support operations.","description":"This API updates the member's notification settings as stored in the discussionboard_member_notification_settings table. It allows members to modify their preferences for in-app notifications, email alerts, reply notifications, mention notifications, moderation updates, and board-wide announcements. The request body must supply the updated preference fields as defined in the schema. The operation enforces user authentication (member or admin) and validates that the record exists for the specified member ID. System logs actions for audit and compliance, and incorrect record access (e.g., editing someone else's settings without proper privilege) results in a 403 or 404 error. This endpoint adheres to business rules and fully complies with GDPR by respecting opt-in/opt-out requirements. Related endpoints include POST (creation), GET (retrieve single setting), and DELETE (removal/reset of preferences).","summary":"Update notification settings for a specific member (discussionboard_member_notification_settings table).","parameters":[{"name":"id","description":"Target notification settings record's ID (memberNotificationSettingsId). Used to identify which member's notification preferences are being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated notification settings information for the member.","typeName":"discussionboardMemberNotificationSettings.IUpdate"},"responseBody":{"description":"The updated member notification settings record.","typeName":"discussionboardMemberNotificationSettings"},"authorizationRoles":["member","admin"],"path":"/discussionboard/notifications/memberNotificationSettings/{id}","method":"put"},{"specification":"Deletes an existing notification settings record for a specific member. This operation removes the record from the discussionboard_member_notification_settings table, effectively resetting the member's notification delivery preferences to system defaults or removing all custom preferences. This is typically done when a user deactivates their account or chooses to reset notification settings via the UI. Only members or admins may perform this operation, as determined by access controls.","description":"This API operation deletes the notification settings record for a given member, as stored in the discussionboard_member_notification_settings table. It validates that the record exists and belongs to the currently authenticated user (unless performed by an administrator). Upon successful deletion, the system reverts the member's notification preferences to default behaviors or removes customizations entirely. All deletion events are logged in the system audit trail for compliance. Attempts to delete non-owned or non-existent records trigger a 403 or 404 error, per business logic. This endpoint upholds security, ensures data retention requirements are met, and supports self-service account management. Related endpoints include POST (creation), PUT (update), and GET (retrieve single setting).","summary":"Delete notification settings for a specific member (discussionboard_member_notification_settings table).","parameters":[{"name":"id","description":"Target notification settings record's ID (memberNotificationSettingsId). Identifies which member's notification preferences are to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the deletion operation (success or error details).","typeName":"discussionboardMemberNotificationSettings.IDeleteResult"},"authorizationRoles":["member","admin"],"path":"/discussionboard/notifications/memberNotificationSettings/{id}","method":"delete"}],"completed":2,"total":170,"step":0,"created_at":"2025-07-22T08:16:18.415Z"},"tokenUsage":{"facade":{"aggregate":{"total":76287,"input":{"total":72725,"cached":0},"output":{"total":3562,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":76287,"input":{"total":72725,"cached":0},"output":{"total":3562,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":76287,"input":{"total":72725,"cached":0},"output":{"total":3562,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":76287,"input":{"total":72725,"cached":0},"output":{"total":3562,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"DiscussionBoardPostReports resource, supporting querying a paginated/searchable list of post report records. This endpoint returns all post report entities for review, search, or moderation analysis as required by moderation workflows. Uses PATCH for complex filter/request body handling, matching normalized DB structure `discussionboard_post_reports`.","description":"This endpoint allows retrieval of multiple DiscussionBoard post report records by flexible criteria. Results are paginated and can be filtered by report reason, reporting member, post, date range, etc., assisting moderation workflow and abuse review. Permissions: typically available to moderators and admins but not regular members, unless retrieving their own reports. Handles various validation and business rules: members can report up to 10 items per day, and the API enforces this. The endpoint references the `discussionboard_post_reports` table in Prisma, returning the `IDiscussionboardPostReport` summary or full list structure (e.g., `IPageDiscussionboardPostReport`).","summary":"List and search DiscussionBoard post reports with filters and pagination (discussionboard_post_reports).","parameters":[],"requestBody":{"description":"Filtering/search and pagination parameters for querying post reports.","typeName":"IDiscussionboardPostReport.IRequest"},"responseBody":{"description":"Paginated list of post reports matching the search criteria.","typeName":"IPageDiscussionboardPostReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/postReports","method":"patch"},{"specification":"DiscussionBoardPostReports resource, supporting detailed retrieval of a specific post report by its unique identifier. Operates on normalized table `discussionboard_post_reports`.","description":"This endpoint retrieves a single DiscussionBoard post report record given its unique ID. It is intended for in-depth review by moderators or admins as part of the moderation and audit workflow. Returns all report details for the specified report, enforcing access control so only authorized roles (moderator, admin) or users who created the report can retrieve it. Validation: Ensures access is granted based on user role and that the ID is correctly formed (UUID). Maps to Prisma table `discussionboard_post_reports`.","summary":"Get DiscussionBoard post report detail by ID (discussionboard_post_reports).","parameters":[{"name":"id","description":"ID of the target post report record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All data fields for the specified post report.","typeName":"IDiscussionboardPostReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/postReports/{id}","method":"get"},{"specification":"DiscussionBoardPostReports resource, creation endpoint. Submits a new post report, as required by abuse reporting and moderation notification business logic. Operates on table `discussionboard_post_reports`.","description":"This endpoint is used by platform members to report a post for abuse, spam, or rules violation. Accepts structured data describing the reason, reported post, and reporting user (autofilled by authentication). On success, creates a new row in the `discussionboard_post_reports` table and triggers moderation workflow, potentially including triggers for notification. Enforces per-member daily report quota (e.g., 10 per day) to prevent spam/abuse of report system. Accessible to authenticated members only.","summary":"Submit new DiscussionBoard post report (discussionboard_post_reports).","parameters":[],"requestBody":{"description":"Information required to file a new post report (post, reason, etc.).","typeName":"IDiscussionboardPostReport.ICreate"},"responseBody":{"description":"The created post report record.","typeName":"IDiscussionboardPostReport"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/interactions/postReports","method":"post"},{"specification":"DiscussionBoardPostReports resource, update endpoint. Allows authorized modification of a post report record—for example, appending resolution note or correcting information. Works on table `discussionboard_post_reports`.","description":"This endpoint allows a moderator or admin to update specific properties of an existing DiscussionBoard post report, such as marking as resolved or updating the review status, fulfilling moderation and business rule flows. Regular members are not allowed to update other users' reports. Checks that ID exists and validates the update object per schema. Implements update (PUT) on a single resource by ID, mapping to the normalized `discussionboard_post_reports` entity.","summary":"Update DiscussionBoard post report by ID (discussionboard_post_reports).","parameters":[{"name":"id","description":"ID of the post report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update object for the post report, allowing modification of resolution status and details.","typeName":"IDiscussionboardPostReport.IUpdate"},"responseBody":{"description":"The updated post report record.","typeName":"IDiscussionboardPostReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/postReports/{id}","method":"put"},{"specification":"DiscussionBoardPostReports resource, delete endpoint. Allows moderator/admin to remove a report record, primarily for abuse, error, or moderation closure reasons. Operates on `discussionboard_post_reports`.","description":"This endpoint deletes an existing post report from the system, typically as part of moderation review workflows or in the case of erroneous submissions. Access limited to authorized roles (moderators/admins); not available to regular users. Validates the report ID and checks that deletion matches business logic (e.g., resolved, not under appeal, etc.).","summary":"Delete DiscussionBoard post report by ID (discussionboard_post_reports).","parameters":[{"name":"id","description":"ID of the post report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Indicates success/failure of post report deletion.","typeName":"IDiscussionboardPostReport.IDeleteResult"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/postReports/{id}","method":"delete"},{"specification":"DiscussionBoardCommentReports resource, supporting paginated/queryable list retrieval. Maps to normalized table `discussionboard_comment_reports`. PATCH enables advanced search or filter in request body, supporting moderation workflows. Returns summaries or detail as per business logic.","description":"This endpoint provides filtered, paginated access to the DiscussionBoard comment report records for moderation review and audit. Results may be filtered by comment, reason, reporting user, or time period, enforcing business rule for rate-limiting and review flow. Only authorized roles (moderator, admin) may access. Enforces Prisma normalization for audit assurance.","summary":"List and search DiscussionBoard comment reports (discussionboard_comment_reports).","parameters":[],"requestBody":{"description":"Request payload specifying filter and pagination for comment report lookup.","typeName":"IDiscussionboardCommentReport.IRequest"},"responseBody":{"description":"Paged list of comment reports matching the filter/query.","typeName":"IPageDiscussionboardCommentReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/commentReports","method":"patch"},{"specification":"DiscussionBoardCommentReports resource, detail endpoint. Enables retrieval of a specific comment report by unique ID, supporting review, moderation, or audit. Maps to normalized table `discussionboard_comment_reports`.","description":"Retrieves the full data record for a DiscussionBoard comment report using its unique identifier, supporting moderation, resolution, and logging processes. Return includes reason, reported comment, reporting member, and relevant timestamps. Access controlled to roles with privilege, or the reporting user themselves. Enforces UUID validity for IDs. Maps to the `discussionboard_comment_reports` table.","summary":"Get DiscussionBoard comment report by ID (discussionboard_comment_reports).","parameters":[{"name":"id","description":"Unique identifier for the requested comment report entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full record of the requested comment report.","typeName":"IDiscussionboardCommentReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/commentReports/{id}","method":"get"},{"specification":"DiscussionBoardCommentReports resource, creation endpoint. Lets a member report a comment for violation/spam. Maps to Prisma table `discussionboard_comment_reports`.","description":"Allows a member to submit a report about a comment that is spam, inappropriate, or violates rules. All required information (reported comment, reason) must be provided; reporting user is taken from authentication. Upon submission, the record is stored for moderation review, triggering notification flows as appropriate. Daily rate limit is enforced per user. Only members may report; moderation team reviews inbound reports via other endpoints.","summary":"Create a new DiscussionBoard comment report (discussionboard_comment_reports).","parameters":[],"requestBody":{"description":"Data for the new comment report (target, reason).","typeName":"IDiscussionboardCommentReport.ICreate"},"responseBody":{"description":"The created comment report record.","typeName":"IDiscussionboardCommentReport"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/interactions/commentReports","method":"post"},{"specification":"DiscussionBoardCommentReports resource, update endpoint. Updates a comment report record (typically for moderation review/resolution). Maps to normalized table `discussionboard_comment_reports`.","description":"Enables a moderator or admin to edit a comment report, updating its review status, resolution notes, or correcting data. Not accessible to general members. Validates both the ID and payload against DB and logic. Supports workflow where moderation team documents findings and closes reports.","summary":"Update DiscussionBoard comment report by ID (discussionboard_comment_reports).","parameters":[{"name":"id","description":"ID of the comment report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the comment report.","typeName":"IDiscussionboardCommentReport.IUpdate"},"responseBody":{"description":"The updated comment report entity.","typeName":"IDiscussionboardCommentReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/commentReports/{id}","method":"put"},{"specification":"DiscussionBoardCommentReports resource, delete endpoint. Removes a comment report, e.g., for error or moderation workflow. Maps to table `discussionboard_comment_reports`.","description":"Deletes an existing comment report record, usually by a moderator or admin upon review or error correction. Ensures required permissions, validates the specified report ID, and performs business logic checks as needed. Soft/hard deletion per business requirement. Not available to members. Relates to `discussionboard_comment_reports` Prisma model.","summary":"Delete DiscussionBoard comment report by ID (discussionboard_comment_reports).","parameters":[{"name":"id","description":"ID of the comment report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the comment report deletion process.","typeName":"IDiscussionboardCommentReport.IDeleteResult"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/commentReports/{id}","method":"delete"},{"specification":"DiscussionBoardTagProposals resource, paginated list/search endpoint. Fetches proposed tags from members awaiting moderator/admin review per business rules. Normalized table: `discussionboard_tag_proposals`.","description":"Returns a filtered, paginated list of topic tag proposals submitted by members for moderator/admin review. Enables the curation workflow, anti-abuse business rules, and supports user-driven structure of topical tagging. Only elevated roles (moderator, admin) may review proposals and decide on acceptance or rejection. Prisma model: `discussionboard_tag_proposals`.","summary":"List/search DiscussionBoard tag proposals (discussionboard_tag_proposals).","parameters":[],"requestBody":{"description":"Filter and search parameters for tag proposal listing/query.","typeName":"IDiscussionboardTagProposal.IRequest"},"responseBody":{"description":"Paged result of tag proposals submitted by members.","typeName":"IPageDiscussionboardTagProposal"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/tagProposals","method":"patch"},{"specification":"DiscussionBoardTagProposals resource, detail retrieval endpoint. Returns a specific tag proposal for moderator/admin review or member info. Normalized table: `discussionboard_tag_proposals`.","description":"Retrieves a specific tag proposal by its unique identifier. Used for reviewer interface or (if permission) the proposing member's view. Returns all details of the tag proposal for review, moderation, or anti-abuse action. Data source: `discussionboard_tag_proposals` table.","summary":"Get tag proposal detail by ID (discussionboard_tag_proposals).","parameters":[{"name":"id","description":"Unique ID of the tag proposal to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All details for the requested tag proposal entry.","typeName":"IDiscussionboardTagProposal"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/tagProposals/{id}","method":"get"}],"completed":14,"total":170,"step":0,"created_at":"2025-07-22T08:16:38.531Z"},"tokenUsage":{"facade":{"aggregate":{"total":116948,"input":{"total":110661,"cached":0},"output":{"total":6287,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":116948,"input":{"total":110661,"cached":0},"output":{"total":6287,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":116948,"input":{"total":110661,"cached":0},"output":{"total":6287,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":116948,"input":{"total":110661,"cached":0},"output":{"total":6287,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new board announcement within the discussion board. This operation serves administrators and moderators by allowing them to post important updates, rules, or notifications for forum participants. The announcement is linked to a specific board, requires specification of title, body, and publisher, and supports pinning. Only users with appropriate admin or moderator privileges can utilize this endpoint. After creation, the announcement is immediately available and may be set as sticky if required.","description":"This API creates a new board announcement in the discussionboard_board_announcements table. Board announcements are system or community messages attached to a specific board (discussionboard_boards.id) and are visible to all users associated with that board. Only admin and moderator users have privileges to post an announcement, which includes a title, message body, pin status (for sticky display), and a reference to the publisher (admin). The business logic ensures that only one announcement can be pinned per board at a time. Uniqueness and access control are enforced through the system's RBAC. Validation requires a board ID, admin ID, title, and message. Incorrect privilege, missing, or malformed fields result in an error. This endpoint is typically used along with GET/PATCH endpoints for announcements listing and the PUT endpoint for updating announcements. Any operation is logged in the audit trail.","summary":"Create a board announcement (discussionboard_board_announcements table).","parameters":[],"requestBody":{"description":"Information for creating a new board announcement.","typeName":"IDiscussionboardBoardAnnouncements.ICreate"},"responseBody":{"description":"The created board announcement entry.","typeName":"IDiscussionboardBoardAnnouncements"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/boards/boardAnnouncements","method":"post"},{"specification":"Update an existing board announcement. Permits adjustment of title, body, pin status, or publisher for the specified announcement. Only accessible by moderators or admins and reflected in the audit log. Target announcement identified by its unique ID.","description":"This API updates an existing board announcement in the discussionboard_board_announcements table. Board announcements are linked to boards and issued by admins. This update endpoint allows changes to any announcement field, such as title, message content, or pin status. The record is identified by its unique announcement ID. Access is controlled; only admin or moderator users can update announcements. Validation ensures the presence of an existing announcement, correct privilege, and all required fields in the update object. Any changes are recorded in the audit log, and concurrent updates to pin status are carefully managed to allow only one pinned announcement per board. Errors include unauthorized access, non-existent announcement, or validation failures. Typically used in moderation/admin workflows for maintaining up-to-date board information.","summary":"Update a board announcement (discussionboard_board_announcements table).","parameters":[{"name":"id","description":"The ID of the announcement to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Announcement fields to update.","typeName":"IDiscussionboardBoardAnnouncements.IUpdate"},"responseBody":{"description":"The updated announcement entry.","typeName":"IDiscussionboardBoardAnnouncements"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/boards/boardAnnouncements/{id}","method":"put"},{"specification":"Delete an existing board announcement from a specified board. This is a soft delete (sets deleted_at) and is accessible by admins or moderators only. Used to remove outdated or inappropriate announcements, maintaining compliance with audit requirements.","description":"This API performs a soft delete for a board announcement in the discussionboard_board_announcements table by setting deleted_at. Target announcement is specified by its unique ID. Only admin or moderator users may delete announcements, in accordance with system business rules. This operation is logged in the audit system. Deletion ensures announcements remain in the backend for audit/legal retention, but are no longer displayed in board UIs. Returns the deleted entry for confirmation. Error handling includes permission denial, non-existent entry, and already-deleted state. Used in conjunction with endpoints for announcement creation and update.","summary":"Delete (soft-delete) a board announcement (discussionboard_board_announcements table).","parameters":[{"name":"id","description":"The ID of the announcement to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The soft-deleted announcement entry.","typeName":"IDiscussionboardBoardAnnouncements"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/boards/boardAnnouncements/{id}","method":"delete"},{"specification":"Search or list threads within the discussion board. Supports advanced filtering (e.g., by status, board, keyword), pagination, and sorting. Returns a collection of thread resources, intended for users to browse available discussions across or within boards.","description":"This API lists discussion threads from the discussionboard_threads table, supporting search and filtering by attributes like board, status, creator, title, and creation date. The endpoint enables pagination, sort order, and optional search queries for titles or keywords. Results are provided as a paged object containing a data array and metadata (e.g., total, cursor/offset, etc.). Used for thread overviews, listing threads in a board, or search results. Accessible to all registered members, but results may be filtered according to role, visibility, thread status, or user suspension. Commonly followed by GET endpoints for detailed thread retrieval. Validation and error handling cover malformed queries, permission limits (e.g. suspended users), and empty result sets.","summary":"List/search threads (discussionboard_threads table) with pagination and filters.","parameters":[],"requestBody":{"description":"List/search criteria for threads, including filters and pagination.","typeName":"IDiscussionboardThreads.IRequest"},"responseBody":{"description":"Paged list of thread summaries and pagination metadata.","typeName":"IPageIDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads","method":"patch"},{"specification":"Retrieve the details for a specific discussion thread, identified by its ID. Used for viewing the full details and contents (e.g., title, description, creator, status) of a thread.","description":"This API gets a specific discussion thread from the discussionboard_threads table by its unique ID. Returns the full thread object, including all metadata (title, description, status, creator, timestamps). Only threads that are visible and not deleted/hidden for the user are accessible, with business logic accommodating thread status and permissions (e.g., viewing locked or moderated threads may be limited). Errors include not found, permission denied, or suspended user state. Used for user profile displays, thread details view, and moderation audit.","summary":"Get details of a single discussion thread (discussionboard_threads table).","parameters":[{"name":"id","description":"ID of the discussion thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full discussion thread resource.","typeName":"IDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads/{id}","method":"get"},{"specification":"Create a new discussion thread under a specified board. Used for starting a new topic-based conversation. Accessible to registered members and higher roles, with possible validation for account state (e.g., non-suspended).","description":"This API creates a new discussion thread record in the discussionboard_threads table. Requires board ID, member (author) ID, thread title, optional description, and initial status (e.g., 'open'). The operation enforces business logic such as suspension checks, moderation lockdowns, and allows only non-suspended regular members or above to create threads. Audit logging is triggered for thread creation. The created thread is returned for client-side display or navigation. Validation ensures board exists, member is authorized, and all required fields are present. Used in conjunction with thread listing and individual GET endpoints for navigation/confirmation.","summary":"Create discussion thread (discussionboard_threads table).","parameters":[],"requestBody":{"description":"Payload for new thread creation.","typeName":"IDiscussionboardThreads.ICreate"},"responseBody":{"description":"Created thread object.","typeName":"IDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads","method":"post"},{"specification":"Update an existing discussion thread (e.g., changing its title, description, or status). Thread identified by its unique ID. Editing permitted to original thread creator, moderators, or administrators. Audit log is updated accordingly.","description":"This API updates a thread in the discussionboard_threads table. Permits changes to title, description, or thread status; restrictions may apply (e.g., only moderators can lock threads, only authors may edit titles/descriptions unless suspended or moderated). The endpoint enforces correct role and thread existence; audit logs are maintained. Thread is identified by its unique ID, and the body supplies update fields. Used in thread management UI components or moderation panels. Error handling includes permission denials, non-existent thread, or business rule violations.","summary":"Update a discussion thread (discussionboard_threads table).","parameters":[{"name":"id","description":"ID of the thread to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the thread.","typeName":"IDiscussionboardThreads.IUpdate"},"responseBody":{"description":"Updated thread resource.","typeName":"IDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads/{id}","method":"put"},{"specification":"Delete (or soft-delete) a specific thread by its ID. Marks it as deleted for audit and retention, and removes it from public/active listings. Operations are permission-controlled for thread owner, moderators, or administrators.","description":"Soft-deletes a discussion thread in the discussionboard_threads table by setting its deleted_at field. Requires thread ID, and only the creator, moderator, or admin roles may perform this operation, depending on thread status and business rules. Results in thread being hidden from listings but retained for audits. The deleted thread record is returned. Error handling includes permission checks, thread existence, and deletion state. Triggers an audit log entry.","summary":"Delete (soft-delete) a thread (discussionboard_threads table).","parameters":[{"name":"id","description":"ID of the thread to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Thread record after deletion flag is set.","typeName":"IDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads/{id}","method":"delete"},{"specification":"List or search posts within threads, supporting search, filters (by thread ID, author, etc.), pagination, and sorting. Returns a collection of post summaries for feed display or context navigation. Used to surface replies or main content in specific discussions.","description":"This API lists posts (discussionboard_posts table), with support for advanced search, filtering (thread ID, member/author, creation time), pagination, and sort options. Provides a paginated array with summary data for each post, as well as metadata for client pagination. Accessible to all registered members and higher roles, though results may be filtered by permissions (e.g., hidden posts, suspension, thread locks). Errors include invalid filters, out-of-range pages, permission blocks, or empty results. Generally followed by GET endpoints for post details. Used in building discussion feeds or exporting post data for moderation.","summary":"List/search posts (discussionboard_posts table) with pagination/filters.","parameters":[],"requestBody":{"description":"Search criteria and filters for listing posts.","typeName":"IDiscussionboardPosts.IRequest"},"responseBody":{"description":"Paged list of post summaries and pagination data.","typeName":"IPageIDiscussionboardPosts"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts","method":"patch"},{"specification":"Retrieve the full detail of a specific post by its ID. This operation returns the post's body, author, creation/update timestamps, and related thread reference.","description":"Gets a single post record from the discussionboard_posts table by its unique ID. Full details include body, author, post creation/update time, and thread or parent linkage. Accessible to all authenticated users, but may be limited depending on thread/post status and user suspension/role. Returns null or error if not found, deleted, or blocked by permissions. Used in post detail or moderation views. Errors for non-existent or inaccessible records. Often followed by comment/thread retrieval.","summary":"Get detail of a single post (discussionboard_posts table).","parameters":[{"name":"id","description":"ID of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full post resource.","typeName":"IDiscussionboardPosts"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts/{id}","method":"get"},{"specification":"Create a new post within a discussion thread. Used to contribute content in response to the thread topic. Any registered (non-suspended) member can post.","description":"This API creates a new post record in the discussionboard_posts table. Required fields include thread ID, member ID, and body content (markdown supported). The endpoint checks for member suspension and thread lock status. Business logic ensures access rights, audit trails, and validation for all required properties (no empty posts, valid thread, etc.). After creation, returns the full post data for confirmation or direct display. Used alongside post-listing (PATCH) or post-detail (GET), and in response flows in UIs.","summary":"Create a new post (discussionboard_posts table).","parameters":[],"requestBody":{"description":"Payload for creating a post within a thread.","typeName":"IDiscussionboardPosts.ICreate"},"responseBody":{"description":"The created post resource.","typeName":"IDiscussionboardPosts"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts","method":"post"},{"specification":"Update an existing post in a thread, identified by post ID. Allows updating body/content, with field validation and edit controls. Only original author or users with moderation/admin rights may update a post.","description":"This API updates an existing post within the discussionboard_posts table. Permits change to body/content and performs validation for markdown, forbidden content, or edit windows. Authorization/permissions restrict access to original author, moderators, or admins. The post is identified by unique ID, and updated fields are supplied. Includes audit logging. Errors include not found, permission denied, window expiration, or validation failure. Used with post detail and feed/list endpoints.","summary":"Update a post (discussionboard_posts table).","parameters":[{"name":"id","description":"ID of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the target post (e.g., body).","typeName":"IDiscussionboardPosts.IUpdate"},"responseBody":{"description":"The updated post resource.","typeName":"IDiscussionboardPosts"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts/{id}","method":"put"}],"completed":26,"total":170,"step":0,"created_at":"2025-07-22T08:16:41.780Z"},"tokenUsage":{"facade":{"aggregate":{"total":158071,"input":{"total":148594,"cached":0},"output":{"total":9477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":158071,"input":{"total":148594,"cached":0},"output":{"total":9477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":158071,"input":{"total":148594,"cached":0},"output":{"total":9477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":158071,"input":{"total":148594,"cached":0},"output":{"total":9477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Update an existing post dislike record by its ID. This operation allows a member to modify their previous dislike entry on a post, for example, if the reason or timestamp needs updating. It applies to the DiscussionBoard domain, specifically targeting the interaction entity 'discussionboard_post_dislikes' as outlined in the Interactions schema. The endpoint follows the RESTful convention of PUT for full updates to a resource by its identifier.","description":"This API operation enables a member to update a specific post dislike by its unique ID. According to the Prisma schema (discussionboard_post_dislikes), each dislike is an atomic record containing the post ID, member ID, and timestamp. Members may update their dislike—for instance, if the system allows users to change associated justification comments (though not explicitly described in the schema, the route supports RESTful resource modification). The operation enforces permission so users can only update their own dislikes; moderators and admins may have elevated permissions for management or correction. If the dislike does not exist or the user is unauthorized, appropriate errors are returned. All changes are auditable, and the modification time is logged for compliance with discussion board business rules. This operation relies on path parameter ID, which must be a UUID corresponding to an existing post dislike. Related endpoints include POST for creation, DELETE for removal, and GET (if exposed) for retrieval of single dislikes. Errors include not found, unauthorized, and validation failures.","summary":"Update a specific post dislike by its ID (discussionboard_post_dislikes).","parameters":[{"name":"id","description":"Unique identifier of the post dislike to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full update payload for the post dislike entry.","typeName":"IDiscussionboardPostDislike.IUpdate"},"responseBody":{"description":"The updated post dislike record.","typeName":"IDiscussionboardPostDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes/{id}","method":"put"},{"specification":"Remove a post dislike record by its ID. This endpoint enables a member to withdraw their dislike on a post, which is tracked in the 'discussionboard_post_dislikes' table. This resource deletion is in accordance with the RESTful DELETE method and the forum's business rules for managing user feedback. The operation strictly identifies a post dislike by its unique UUID.","description":"This API operation deletes a post dislike by its ID from the 'discussionboard_post_dislikes' table. Each dislike represents a member's explicit downvote/negative feedback on a post (see the Interactions schema for details). Only the dislike's creator, or users with moderator/admin privileges, are authorized to perform this action. The system physically deletes the record (as there is no soft deletion for dislikes); the member may then re-dislike by creating a new record in the future. Actions are audited for transparency. If the ID does not exist, a not found response is returned. If a user is not authorized, an error is raised. This operation is related to the POST (create) and PUT (update) endpoints for post dislikes. Errors include unauthorized, not found, and validation failure responses.","summary":"Delete a post dislike by ID (discussionboard_post_dislikes).","parameters":[{"name":"id","description":"ID of the post dislike entry to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes/{id}","method":"delete"},{"specification":"Search for and retrieve multiple comment like records according to search and pagination parameters. This PATCH operation on 'discussionboard_comment_likes' implements advanced listing functionality, as described in forum engagement features. Typical usage is for admin/moderator analytics or for members to view their like history, according to system permissions. This adheres to the REST convention of PATCH for complex queries with request body payloads.","description":"Retrieve a list of comment like records using filter criteria, pagination, and sorting. This supports analytics, member engagement review, or moderation. The backing table is 'discussionboard_comment_likes' (see the Interactions domain schema), containing the linking between members and comment likes. Filtering may include by member, comment, or time window. Pagination parameters (limit/offset/page) and optional sorting fields are provided for efficient navigation. Access control may limit results: members see their data, moderation/admins may have broader query rights. Related endpoints are GET for details of a single record, POST for creating a like, PUT for modification, and DELETE for removal. Error handling covers invalid query parameters, unauthorized access, and database errors.","summary":"List and search comment likes (discussionboard_comment_likes).","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for listing comment likes.","typeName":"IDiscussionboardCommentLike.IRequest"},"responseBody":{"description":"Paginated list of comment like records matching the query.","typeName":"IPageIDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes","method":"patch"},{"specification":"Retrieve a single comment like by its unique ID. This operation accesses a specific entry in the 'discussionboard_comment_likes' entity, providing details about a member's like on a particular comment. The endpoint matches a RESTful GET on an individual resource.","description":"This API operation returns information on a single comment like. Data will include the member who liked, the comment liked, and the timestamp (see discussionboard_comment_likes schema in Interactions domain). Only the liking member, or admins/moderators, can access details. Audit/logging may be performed for sensitive operations. If the comment like does not exist, a not found response is returned. Related operations: POST to create a like, PATCH to list likes, PUT to modify, DELETE to remove. Error cases include not found, unauthorized access, and insufficient permissions.","summary":"Get a comment like by its ID (discussionboard_comment_likes).","parameters":[{"name":"id","description":"Comment like identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail of the specified comment like record.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes/{id}","method":"get"},{"specification":"Create a new comment like record, representing a member liking a comment. This endpoint creates an entry in the discussionboard_comment_likes table, implementing engagement functionality per business rules and the Interactions schema.","description":"This POST operation enables a member to like a comment, resulting in a new discussionboard_comment_likes record. Required parameters are typically the comment ID being liked and the member ID (authenticated automatically for the user). Only one like per member/comment is permitted (enforced as a unique constraint). The system logs the timestamp and enforces permission checks to prevent multiple likes by the same member. On success, returns the full data for the created comment like record. Moderators/admins may have additional privileges for synthetic/legacy entries. Errors: duplicate like, invalid data, unauthorized, and database errors. Related endpoints are PATCH (search), GET (by ID), PUT (update), and DELETE (remove).","summary":"Create a comment like (discussionboard_comment_likes).","parameters":[],"requestBody":{"description":"Data for new comment like creation.","typeName":"IDiscussionboardCommentLike.ICreate"},"responseBody":{"description":"The newly created comment like entry.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes","method":"post"},{"specification":"Update an existing comment like record by its ID. This operation is for correcting or re-attributing a comment like, working on the 'discussionboard_comment_likes' table per RESTful update semantics.","description":"This API operation modifies a specific comment like by its ID. Permitted only for the liking member or moderators/admins. Business logic may allow changing the liked comment or the timestamp if necessary. Changes are auditable. Record is identified uniquely by ID (UUID). If not found, a not found response is provided. Related endpoints: POST (create), PATCH (search), GET (details), DELETE (remove). Errors include validation, unauthorized, and system failures.","summary":"Update a comment like by ID (discussionboard_comment_likes).","parameters":[{"name":"id","description":"ID of the comment like to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for full update of the comment like resource.","typeName":"IDiscussionboardCommentLike.IUpdate"},"responseBody":{"description":"The updated comment like entry.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes/{id}","method":"put"},{"specification":"Remove a comment like record by its ID. Enables a member to unlike a comment by deleting their like from the 'discussionboard_comment_likes' table. A RESTful DELETE operation for the resource.","description":"This DELETE operation removes a comment like reference by ID. Members may unlike their previous liked comment (one like per member/comment enforced). Only the like creator or users with elevated privileges (admin/moderator) may perform a delete. Upon deletion, no like is counted for that member on the comment. All deletion events are auditable. Errors include record not found, unauthorized access, and validation failures. Related endpoints: POST (create), PATCH (list), GET (details), PUT (update).","summary":"Delete a comment like by ID (discussionboard_comment_likes).","parameters":[{"name":"id","description":"ID of the comment like entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes/{id}","method":"delete"},{"specification":"List and query all comment dislikes in the forum, supporting search, pagination, and filtering. This PATCH on 'discussionboard_comment_dislikes' enables admin/moderator analysis, member review, and auditing of engagement patterns, as per business requirements.","description":"Retrieve a paginated list of comment dislike records with filter, sort, and search options. Backed by the discussionboard_comment_dislikes table (Interactions domain), each record links a member, comment, and timestamp. Query may be filtered by member, comment, or date. Paginated and sortable for large result sets. Permissions restrict data based on user roles: regular members see only their dislikes, moderation/admins have wider access. All queries are auditable. Related endpoints: GET (single), POST (create), PUT (update), DELETE (remove). Errors include validation of request, unauthorized access, and system failures.","summary":"List/search comment dislikes (discussionboard_comment_dislikes).","parameters":[],"requestBody":{"description":"Search and pagination info for querying comment dislikes.","typeName":"IDiscussionboardCommentDislike.IRequest"},"responseBody":{"description":"Paginated list of comment dislike entries.","typeName":"IPageIDiscussionboardCommentDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes","method":"patch"},{"specification":"Retrieve one comment dislike by its ID. The endpoint performs a detail lookup in the 'discussionboard_comment_dislikes' entity, returning the member, comment, and timestamp of the dislike.","description":"Given a comment dislike identifier (UUID), this API returns the matching record from the discussionboard_comment_dislikes table. Only the member (creator) or privileged users may access details. Fields follow those in the Interactions schema. Not found or unauthorized errors are returned as appropriate. Related endpoints handle listing (PATCH), creation (POST), update (PUT), and deletion (DELETE) of dislikes.","summary":"Get a specific comment dislike by ID (discussionboard_comment_dislikes).","parameters":[{"name":"id","description":"Comment dislike UUID to look up.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the identified comment dislike entry.","typeName":"IDiscussionboardCommentDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes/{id}","method":"get"},{"specification":"Create a new dislike on a comment, recording the member's negative engagement. This inserts a new row into the discussionboard_comment_dislikes table (Interactions domain), enforcing 1 record per member/comment pair.","description":"This POST endpoint allows a member to dislike a specific comment, resulting in a new discussionboard_comment_dislikes record. Required input is usually the comment being disliked and the acting member (authenticated context). System guarantees one dislike per comment per member. Successful response provides the newly created dislike record. Failures include duplicate dislike attempt, invalid data, or permission errors. Tied to GET (detail), PATCH (list), PUT (update), and DELETE (remove) endpoints for full lifecycle. All events are audited.","summary":"Create a comment dislike (discussionboard_comment_dislikes).","parameters":[],"requestBody":{"description":"Payload for creating a comment dislike.","typeName":"IDiscussionboardCommentDislike.ICreate"},"responseBody":{"description":"The created comment dislike entry.","typeName":"IDiscussionboardCommentDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes","method":"post"},{"specification":"Update an existing comment dislike record by ID. Used for corrections or attribution changes, working on discussionboard_comment_dislikes entity, enforcing member or moderator permission.","description":"This PUT operation updates a specific comment dislike record. The acting member must be owner, or a privileged user (mod/admin). Allows for correcting the referenced comment or update timestamp as permitted by business rules. Related endpoints: POST (create), PATCH (search), GET (detail), DELETE (remove). Handles errors for invalid input, not found, unauthorized, and database issues. Fields and responses match discussionboard_comment_dislikes schema. Auditing applies for all changes.","summary":"Update a comment dislike by ID (discussionboard_comment_dislikes).","parameters":[{"name":"id","description":"ID of the comment dislike to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for full update of the comment dislike entity.","typeName":"IDiscussionboardCommentDislike.IUpdate"},"responseBody":{"description":"The updated comment dislike record.","typeName":"IDiscussionboardCommentDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes/{id}","method":"put"},{"specification":"Remove a comment dislike by ID, revoking the member's previous negative feedback on a comment. Deletes the associated row from the discussionboard_comment_dislikes table, as per business logic and Interactions schema.","description":"A member or moderator/admin can delete a comment dislike by specifying its ID. Removes the matching entry from the database; after which, the member may re-dislike if desired. Permissions restrict who may delete. Auditable for transparency. On success, returns no content (204). Related operations: POST (create), PATCH (list), GET (detail), PUT (update). Error responses handle not found, unauthorized, and system errors.","summary":"Delete a comment dislike by ID (discussionboard_comment_dislikes).","parameters":[{"name":"id","description":"ID of the comment dislike to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes/{id}","method":"delete"}],"completed":38,"total":170,"step":0,"created_at":"2025-07-22T08:16:48.779Z"},"tokenUsage":{"facade":{"aggregate":{"total":199261,"input":{"total":186537,"cached":0},"output":{"total":12724,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":199261,"input":{"total":186537,"cached":0},"output":{"total":12724,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":199261,"input":{"total":186537,"cached":0},"output":{"total":12724,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":199261,"input":{"total":186537,"cached":0},"output":{"total":12724,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"List all board topics with support for searching and pagination. This endpoint covers querying board topics, including filtering by title, code, creator, or other properties. It supports the retrieval of an array of board topics based on criteria. Implements listing workflows for moderators and members from business requirements and is based on the 'discussionboard_board_topics' table.","description":"This operation retrieves a list of board topics with various filtering, search, and pagination options. The endpoint references the discussionboard_board_topics table, whose schema includes details like board reference, code, title, creator, timestamps, and optional description. Permissions can be customized by role (member, moderator, admin), but all roles can view topics, with extended filtering abilities restricted to staff roles. Security considerations include allowing only authenticated users and rate limitation to prevent scraping. Validation logic must ensure query params enforce allowed values; errors are returned for unsupported search types. For consistent pagination, this endpoint should be used in combination with detail retrieval endpoints.","summary":"Fetch a paginated and filtered list of board topics from discussionboard_board_topics table.","parameters":[],"requestBody":{"description":"Filters, search criteria, and pagination options for board topics listing.","typeName":"DiscussionBoardBoardTopic.IRequest"},"responseBody":{"description":"Paginated list of board topics matching the criteria.","typeName":"IPageDiscussionBoardBoardTopic"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics","method":"patch"},{"specification":"Retrieve detailed information for a specific board topic by ID. Covers detailed view workflows from the requirements and is based on the 'discussionboard_board_topics' table.","description":"This endpoint returns all details of a specific board topic referenced by its unique identifier. The discussionboard_board_topics table includes fields such as id, board id, creator, code, title, description, created_at, and updated_at. Permissions allow all users to view topics, while edit/delete is role-specific. Security: verifies user authentication and valid ID format (UUID). Returns an error if the topic does not exist, is deleted, or the user lacks permission. Related endpoints should include listing topics and topic creation/deletion endpoints for a full CRUD experience.","summary":"Retrieve full detail for a specific board topic from discussionboard_board_topics table.","parameters":[{"name":"id","description":"Board topic unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the selected board topic.","typeName":"DiscussionBoardBoardTopic"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics/{id}","method":"get"},{"specification":"Create a new board topic in a given board. Supports user (member) and moderator workflows for content creation. Directly implements business requirement 2.3 (Content Operations) and references the 'discussionboard_board_topics' table.","description":"This operation creates a new board topic, referencing the discussionboard_board_topics table. The request body must include required properties such as board ID, creator user, code, title, description, and optionally other metadata. Validation includes: title/code uniqueness in board, valid creator/member, board existence, and status initialization. Error responses will cover validation failures (duplicate code/title, nonexistent board/member, bad format). Success response returns the created board topic's details. Creation is authenticated, restricted to members or higher roles. Creation logs should be cross-referenced in related audit tables.","summary":"Create a new board topic in the discussionboard_board_topics table.","parameters":[],"requestBody":{"description":"Board topic details to create a new topic.","typeName":"DiscussionBoardBoardTopic.ICreate"},"responseBody":{"description":"The newly created board topic.","typeName":"DiscussionBoardBoardTopic"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics","method":"post"},{"specification":"Edit/update an existing board topic by ID. Covers moderation workflows for content correction and is associated with the 'discussionboard_board_topics' table.","description":"This endpoint allows a member, moderator, or admin to update the details of a board topic. Fields that may be updated include title, code, description, and metadata. It references the discussionboard_board_topics table. Authorization is checked, allowing the original creator or staff roles to update. Changes are validated for uniqueness and conformance to business logic (e.g., cannot make title empty, code must remain unique in the board). Updates are logged for audit trail. Errors cover missing topic, lack of permissions, or failed validations. This endpoint should be used in tandem with details and list APIs.","summary":"Update board topic details in the discussionboard_board_topics table.","parameters":[{"name":"id","description":"Board topic unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated details for the board topic.","typeName":"DiscussionBoardBoardTopic.IUpdate"},"responseBody":{"description":"The updated board topic entity.","typeName":"DiscussionBoardBoardTopic"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics/{id}","method":"put"},{"specification":"Delete a specific board topic by its unique ID. Reference for content removal workflows; targets 'discussionboard_board_topics' table.","description":"Deletes a particular board topic identified by its unique id. The endpoint references discussionboard_board_topics and performs a soft or hard delete, based on business logic and audit requirements. Only the topic creator, moderators, or admins may delete; permissions are checked. Validation confirms topic existence and user rights. Action is logged in moderator/admin action logs for transparency. Deletion may be non-physical, instead marking the record as deleted for audit/legal reasons. Returns status of the operation. Used alongside creation, update, and detail endpoints for full CRUD lifecycle.","summary":"Delete a board topic from discussionboard_board_topics table.","parameters":[{"name":"id","description":"Board topic unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result status of delete operation (success or reason for failure).","typeName":"IOperationStatus"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics/{id}","method":"delete"},{"specification":"List all topic tags with filtering and pagination for curation/moderation. Based on discussionboard_topic_tags table. Used by admins/moderators for tag maintenance, by members for tag discovery.","description":"Retrieves a paginated list of topic tags stored in discussionboard_topic_tags table. Supports filtering by tag name, is_active status, or creation/update dates. Pagination and sorting options allow handling a large set. Permissions allow public listing, but tag management is restricted. Used for tag auto-complete, curation, and moderation. Error handling covers invalid filters, bad pagination, or search overload. Returns paginated result. Used next to single tag and topic endpoints.","summary":"Get a paginated and filtered list of topic tags from discussionboard_topic_tags.","parameters":[],"requestBody":{"description":"Filters and pagination info for searching topic tags.","typeName":"DiscussionBoardTopicTag.IRequest"},"responseBody":{"description":"Paginated topic tags matching the criteria.","typeName":"IPageDiscussionBoardTopicTag"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags","method":"patch"},{"specification":"Retrieve a single topic tag's detail by ID. Used in tag curation, assignment, and moderation flows. Based on discussionboard_topic_tags.","description":"Returns all properties of a topic tag identified by its unique ID, referencing discussionboard_topic_tags. Used to display tag information including name, is_active flag, timestamps. Permissions permit read by all roles. Returns not found/error if tag does not exist. Used together with tag list, create, update, and delete endpoints for management flows. Tag moderation (enable/disable) leverages this endpoint.","summary":"Retrieve full detail for a topic tag from discussionboard_topic_tags table.","parameters":[{"name":"id","description":"Topic tag unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full information of the selected topic tag.","typeName":"DiscussionBoardTopicTag"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags/{id}","method":"get"},{"specification":"Create a new topic tag. Directly addresses the need for tag curation by admins/moderators and tag proposal handling by members. Insert into discussionboard_topic_tags table.","description":"Creates a new topic tag, referencing discussionboard_topic_tags. The request body provides the tag name and is_active flag. All constraints for uniqueness and tag format apply as per business rules. Permissions restrict creation to moderators/admins or with a proposal flow for members. Error responses for duplicate names, bad formats, or unauthorized requests. Returns created tag entity upon success. Actions logged for audit. Related flows include proposal and curation endpoints.","summary":"Create a new topic tag in the discussionboard_topic_tags table.","parameters":[],"requestBody":{"description":"Properties for the new topic tag (name, is_active state, etc.).","typeName":"DiscussionBoardTopicTag.ICreate"},"responseBody":{"description":"The newly created topic tag entity.","typeName":"DiscussionBoardTopicTag"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags","method":"post"},{"specification":"Update a topic tag by its unique ID. Supports tag moderation and curation (enable, rename, etc.), referencing discussionboard_topic_tags.","description":"Updates a topic tag referenced by its unique ID. Accepts properties like name and is_active. Validation checks for unique names, correct status change workflows, and permission to edit. Only moderators or admins may update tags. Actions logged for audit. Errors for permissions, validation, or missing record. Related endpoints include create, detail, and list tags.","summary":"Edit topic tag details in the discussionboard_topic_tags table.","parameters":[{"name":"id","description":"Topic tag unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated topic tag properties.","typeName":"DiscussionBoardTopicTag.IUpdate"},"responseBody":{"description":"The updated topic tag entity.","typeName":"DiscussionBoardTopicTag"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags/{id}","method":"put"},{"specification":"Delete a topic tag by its unique ID. Used for tag curation and moderation workflows. Operates on discussionboard_topic_tags table.","description":"Deletes a topic tag referenced by its UUID. Typically a soft delete (sets inactive flag), not hard table deletion, per compliance rules. Requires moderator or admin privileges. Actions logged for compliance. Returns operation status response indicating outcome (success, error). Used alongside tag creation, update, and detail endpoints for full lifecycle management.","summary":"Delete a topic tag from discussionboard_topic_tags table.","parameters":[{"name":"id","description":"Topic tag unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Status response for delete action.","typeName":"IOperationStatus"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags/{id}","method":"delete"},{"specification":"List all board announcements with optional filters and pagination. Used for communication and info distribution workflows. Based on discussionboard_board_announcements table.","description":"Retrieves a paginated list of board announcements. Query supports filtering by board, date range, pin status, and announcement title or content. Permissions allow all authenticated users to read, with management restricted to staff. The endpoint references discussionboard_board_announcements and returns each result with all public fields. For full comms lifecycle management, this is paired with announcement detail, creation, and edit/delete endpoints. Validation includes pagination, filter types, and permission. Error handling for invalid queries and over-requesting. Useful for member dashboard, moderator panel, and board landing pages.","summary":"Fetch a paginated/filtered list of board announcements from discussionboard_board_announcements table.","parameters":[],"requestBody":{"description":"Search and filter options for announcements list.","typeName":"DiscussionBoardBoardAnnouncement.IRequest"},"responseBody":{"description":"Paginated announcement records matching request.","typeName":"IPageDiscussionBoardBoardAnnouncement"},"authorizationRoles":null,"path":"/discussionboard/boards/boardAnnouncements","method":"patch"},{"specification":"Retrieve a single board announcement by its unique ID. Used for announcement viewing on board pages. Based on discussionboard_board_announcements table.","description":"Returns full information for a board announcement, including the title, body, pin status, associated board, who published it, timestamps, and soft-delete status. Permissions allow access to all authenticated users. Errors for not-found or no-permission cases. Used together with announcement list, create, update, and delete endpoints as part of the announcement management process.","summary":"Get detailed information of a board announcement from discussionboard_board_announcements table.","parameters":[{"name":"id","description":"Board announcement unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the selected board announcement.","typeName":"DiscussionBoardBoardAnnouncement"},"authorizationRoles":null,"path":"/discussionboard/boards/boardAnnouncements/{id}","method":"get"}],"completed":50,"total":170,"step":0,"created_at":"2025-07-22T08:16:52.155Z"},"tokenUsage":{"facade":{"aggregate":{"total":239963,"input":{"total":224478,"cached":0},"output":{"total":15485,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":239963,"input":{"total":224478,"cached":0},"output":{"total":15485,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":239963,"input":{"total":224478,"cached":0},"output":{"total":15485,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":239963,"input":{"total":224478,"cached":0},"output":{"total":15485,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Get a specific post attachment by its unique identifier. This endpoint allows retrieval of detailed metadata and properties for a single post attachment (discussionboard_post_attachments) within a thread. Used by UI to display download link, filename, and associated information, with access control for the file resource. Fulfills audit and legal requirements by tracking access. Prisma table: discussionboard_post_attachments.","description":"Retrieves metadata and properties of a particular post attachment from the discussionboard_post_attachments table. This endpoint is essential for serving file downloads, showing information such as filename, uploader, and type. Permission checks ensure that only authorized users (the uploader, thread participants, or moderators/admins) can access sensitive or non-public files. Returns full information for one attachment. In case of missing or unauthorized access, relevant error messages are returned. This API references the Prisma schema comment for discussionboard_post_attachments and adheres to related access control and retention business rules.","summary":"Retrieve a single post attachment (discussionboard_post_attachments) by ID.","parameters":[{"name":"id","description":"Unique identifier of the post attachment.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post attachment information.","typeName":"IDiscussionboardPostAttachment"},"authorizationRoles":null,"path":"/discussionboard/threads/postAttachments/{id}","method":"get"},{"specification":"Create a new post attachment associated with a post in a discussion thread. The endpoint enables file attachment by users to enhance post expressiveness (e.g., image uploads, PDF, spreadsheets). Fully validated against allowed file types and size restrictions enforced by system configuration. Prisma table: discussionboard_post_attachments.","description":"Allows an authenticated user (typically the post author) to attach a new file to an existing post. Receives attachment metadata and the file URI, storing details in the discussionboard_post_attachments table. Permissions and quotas are verified for the member, and any restriction violations (such as file size/type or post ownership) are handled according to business rules. This API references Prisma schema comments for post attachments, ensuring normalization and audit compliance. Returns the created attachment's details. In the case of errors, validation or permission failure is indicated. Related APIs: GET for retrieval, PUT for update, DELETE for removal of attachments.","summary":"Create a new post attachment (discussionboard_post_attachments).","parameters":[],"requestBody":{"description":"Information about the attachment to be created.","typeName":"IDiscussionboardPostAttachment.ICreate"},"responseBody":{"description":"Newly created post attachment details.","typeName":"IDiscussionboardPostAttachment"},"authorizationRoles":null,"path":"/discussionboard/threads/postAttachments","method":"post"},{"specification":"Update the metadata or properties for a post attachment. This may include changing the display filename, updating the file URI, or changing file status. Prisma table: discussionboard_post_attachments.","description":"Updates an existing post attachment's metadata in the discussionboard_post_attachments table. Supported changes typically involve renaming, replacing the file, or updating associated metadata such as file type or display name. Proper permission checks ensure only the uploader or authorized moderators/admins can perform this operation. Business rules apply, including not allowing update on deleted or non-existent attachments. Logs changes for compliance. Related API operations include GET for retrieval and DELETE for removal.","summary":"Update an existing post attachment (discussionboard_post_attachments) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post attachment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated post attachment information.","typeName":"IDiscussionboardPostAttachment.IUpdate"},"responseBody":{"description":"Updated post attachment details.","typeName":"IDiscussionboardPostAttachment"},"authorizationRoles":null,"path":"/discussionboard/threads/postAttachments/{id}","method":"put"},{"specification":"Delete (remove) a post attachment from a post. Implements business rules for file deletion with retention for audit log compliance. This operation soft-deletes the attachment, retaining audit and legal information as required. Prisma table: discussionboard_post_attachments.","description":"Soft-deletes a specified post attachment in the discussionboard_post_attachments table—usually by the author, or by a moderator/admin for violating files. This operation flags the attachment as deleted, rather than removing it from storage immediately, to fulfill compliance requirements and enable future audits or restoration. Access control strictly enforced: only authorized users can delete. In case the attachment does not exist or deletion is not allowed, returns an appropriate error. Follows schema and business logic as stated in comments.","summary":"Delete a post attachment (discussionboard_post_attachments) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of deletion operation.","typeName":"IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/threads/postAttachments/{id}","method":"delete"},{"specification":"List/search post likes for posts (discussionboard_post_likes). Used to show which members liked a particular post or to provide analytics about likes in threads or boards. Prisma table: discussionboard_post_likes.","description":"Retrieves multiple post like entries from the discussionboard_post_likes table. Supports searching (by member, post, or time) and pagination for performance/scalability. Returned data may include member/user info, post references, and timestamps. Permission checks ensure compliance with visibility and audit requirements. This operation is essential for engagement analytics, trending features, and personal dashboards. Related APIs: POST to create a like, GET for single like by ID.","summary":"List/search post likes (discussionboard_post_likes).","parameters":[],"requestBody":{"description":"Search and filter parameters for likes.","typeName":"IDiscussionboardPostLike.IRequest"},"responseBody":{"description":"Paginated list of post likes.","typeName":"IPageIDiscussionboardPostLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes","method":"patch"},{"specification":"Retrieve a specific post like by its unique identifier. Used to show details (who liked, when, and for which post) for audit/history or for displaying individual like actions. Prisma table: discussionboard_post_likes.","description":"Fetches details of a particular post like from the discussionboard_post_likes table, providing information about the member, the liked post, and timestamp metadata. Access control may restrict details to authorized parties (e.g., the user who performed the action, moderators, or admins). Related APIs: PATCH for listing, POST to create, PUT to update, DELETE to remove.","summary":"Retrieve a single post like (discussionboard_post_likes) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post like entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the post like entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes/{id}","method":"get"},{"specification":"Create a new like for a post by a member (discussionboard_post_likes). Used for user engagement and feedback on posts. Prisma table: discussionboard_post_likes.","description":"Allows an authenticated member to like a post. Validates that duplicate likes are not created (enforced by unique constraint). Stores the like entry in the discussionboard_post_likes table and updates any engagement statistics. Related APIs: PATCH for listing/searching likes, GET to retrieve details, PUT to update, DELETE to remove/unlike.","summary":"Create a new post like (discussionboard_post_likes).","parameters":[],"requestBody":{"description":"Information to create a post like entry.","typeName":"IDiscussionboardPostLike.ICreate"},"responseBody":{"description":"Details of the created post like entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes","method":"post"},{"specification":"Update the properties of an existing post like. Most commonly, this allows administrators to audit or correct engagement actions, or to update metadata if needed. Prisma table: discussionboard_post_likes.","description":"Updates metadata or properties of an existing post like in the discussionboard_post_likes table. Normally, likes are simple, but this supports audit correction or updating extra engagement fields, if schema allows. Permission checks enforce that only the actor, moderators, or admins can update engagement actions. Logs all changes for audit compliance. Related APIs: GET for viewing, DELETE for unliking, POST for new like.","summary":"Update an existing post like (discussionboard_post_likes) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post like entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated properties for the post like entry.","typeName":"IDiscussionboardPostLike.IUpdate"},"responseBody":{"description":"Details of the updated post like entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes/{id}","method":"put"},{"specification":"Delete (remove/unlike) a post like. Allows a member to unlike a post, or allows moderators or admins to remove abusive/inappropriate likes. Prisma table: discussionboard_post_likes.","description":"Deletes a specific post like entry in the discussionboard_post_likes table, removing the like from the target post's engagement metrics. Enforces permissions so that only the like owner, post owner, or authorized staff can remove a like. Does not remove the post itself; only the engagement action. Related APIs: GET for retrieval, POST for creation, PUT for update.","summary":"Delete a post like (discussionboard_post_likes) by ID (unlike operation).","parameters":[{"name":"id","description":"Unique identifier for the post like entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the deletion operation.","typeName":"IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes/{id}","method":"delete"},{"specification":"List/search post dislikes for posts (discussionboard_post_dislikes). Used to audit negative engagement, support moderation, and conduct analytics. Prisma table: discussionboard_post_dislikes.","description":"Retrieves multiple post dislike entries from the discussionboard_post_dislikes table, supporting advanced search, filtering, and pagination for UI or backend consumption. Useful for tracking problematic content, auto-flagging, or for user dashboards. Access control is enforced for this operation, with sensitive data hidden when necessary. Related APIs: POST to create a dislike, GET to retrieve specific instance, PUT to update, DELETE to remove.","summary":"List/search post dislikes (discussionboard_post_dislikes).","parameters":[],"requestBody":{"description":"Search/filter parameters for post dislikes.","typeName":"IDiscussionboardPostDislike.IRequest"},"responseBody":{"description":"Paginated list of post dislikes.","typeName":"IPageIDiscussionboardPostDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes","method":"patch"},{"specification":"Retrieve a single post dislike by its unique identifier. Used to show who disliked a post and when. Used for moderation, audit, and user history display. Prisma table: discussionboard_post_dislikes.","description":"Fetches details for a specific post dislike from the discussionboard_post_dislikes table, including actor/member, target post, and timestamp. Permissions are enforced according to business logic—dislike owner, moderators/admins may view extra details. Related APIs: PATCH to list/search, POST to create, PUT to update, DELETE to remove.","summary":"Retrieve a single post dislike (discussionboard_post_dislikes) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post dislike entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the post dislike entry.","typeName":"IDiscussionboardPostDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes/{id}","method":"get"},{"specification":"Create a new dislike for a post by a member. Enables expression of negative feedback for moderation signals and analytics. Prisma table: discussionboard_post_dislikes.","description":"Allows an authenticated member to dislike a post, recording the engagement event in the discussionboard_post_dislikes table. Duplicate dislikes by the same user for the same post are not permitted (enforced by unique constraint). Workflow includes updating engagement counters or flagging for moderation if thresholds are exceeded. Proper access control is validated for actor and target post. Related APIs: PATCH for listing/searching, GET for detail, PUT for update, DELETE for unliking/removal.","summary":"Create a new post dislike (discussionboard_post_dislikes).","parameters":[],"requestBody":{"description":"Information to create a post dislike entry.","typeName":"IDiscussionboardPostDislike.ICreate"},"responseBody":{"description":"Details of the created post dislike entry.","typeName":"IDiscussionboardPostDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes","method":"post"}],"completed":62,"total":170,"step":0,"created_at":"2025-07-22T08:16:59.000Z"},"tokenUsage":{"facade":{"aggregate":{"total":280692,"input":{"total":262415,"cached":0},"output":{"total":18277,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":280692,"input":{"total":262415,"cached":0},"output":{"total":18277,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":280692,"input":{"total":262415,"cached":0},"output":{"total":18277,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":280692,"input":{"total":262415,"cached":0},"output":{"total":18277,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Delete a member by ID. This operation is associated with the discussionboard_members table and is intended for account removal by admin action. It ensures the target member's identity is valid and enforces audit, compliance, and security controls. On deletion, the member's account data is flagged or removed and related references are managed as per business rules. Only admins should be allowed to perform this operation, as per role matrix. Operation should log the activity in audit logs for future traceability. Related entities include member profiles, authentications, and all interactions associated with the member. Error handling includes member not found, insufficient privileges, or active dependencies in the system.","description":"Deletes a member from the discussion board. References the discussionboard_members table, ensuring the provided member ID exists and the caller has sufficient admin privileges per system security guidelines. Deletion is logical or physical as allowed by business rules, and triggers cascade operations in related tables like profiles, authentications, posts, comments, and notifications. All actions are logged for audit. Edge cases (member with active suspensions, moderator/admin role, or recent activity) are handled according to business policy and must return appropriate errors. Related API operations may include PATCH /discussionboard/actors/members for searching and GET /discussionboard/actors/members/{id} for detail prior to delete.","summary":"Delete a specific member (discussionboard_members).","parameters":[{"name":"id","description":"ID of the member to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/actors/members/{id}","method":"delete"},{"specification":"List moderators in the system with advanced filtering and search. Associated with discussionboard_moderators table. Returns paginated list of all moderator entries, optionally filtered by status, date of promotion, or related member data. This operation supports administrative and audit workflows by showing current and historical moderators, including demoted ones if requested. Implements access control, pagination, and metadata conventions from system-wide requirements.","description":"Retrieves a paginated list of moderator entries from the discussionboard_moderators table. Supports searching by member ID, promotion/demotion date, and status (active/demoted). Access requires escalation for moderator/admin roles. This API is foundational for admin overviews, reporting, and role audits. Responses should include associated member details where relevant. Errors include insufficient privileges, malformed filters, or internal query failures. Related APIs: GET /discussionboard/actors/moderators/{id}, POST /discussionboard/actors/moderators (to add), and DELETE /discussionboard/actors/moderators/{id} for role revocation.","summary":"List moderators (discussionboard_moderators) with search and filters.","parameters":[],"requestBody":{"description":"Filters and search parameters for moderators list.","typeName":"DiscussionBoardModerators.IRequest"},"responseBody":{"description":"Paginated moderator list result with metadata and member details.","typeName":"DiscussionBoardModerators.IPage"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/moderators","method":"patch"},{"specification":"Get specific moderator details by ID. Associated with discussionboard_moderators table. Returns details for a single moderator record, including related member information and history, such as promotion/demotion dates. Used in access control reviews, audit logs, or escalation operations. Only moderator or admin should access this API. Returns role, member link, and key timestamps. Handles not found and permission checks.","description":"Fetches a specific moderator's details from the discussionboard_moderators table by unique ID. Includes metadata such as member link, promotion and demotion timestamp, and any relevant actions/logs. Used for audit or admin role management. Edge cases like missing/invalid ID or insufficient permissions are handled. Related APIs include PATCH for list, PUT/DELETE by ID, and POST for moderator assignment.","summary":"Get moderator details (discussionboard_moderators) by ID.","parameters":[{"name":"id","description":"ID of the moderator entry to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator detail including member and role history.","typeName":"DiscussionBoardModerators"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/actors/moderators/{id}","method":"get"},{"specification":"Create new moderator assignment. Linked to the discussionboard_moderators table. Accepts required data for promoting a member to moderator: member ID, optional reason, and effective date. Triggers business rules for privilege elevation and audit. This operation is restricted to admins, as per access matrix. Role assignment is logged. Related entities are members and existing moderator roles for prevention of duplicate promotions.","description":"Assigns a member as a moderator by creating a new record in discussionboard_moderators. Ensures member is eligible (not already moderator/demoted within relevant period), and validates admin credentials. The assignment action triggers audit logging and notifies the member if notification is enabled. Handles errors for duplicate/moderator existence or invalid member ID. Related APIs include PATCH for search/list, PUT/DELETE for update/revoke.","summary":"Promote a member to moderator (create discussionboard_moderators).","parameters":[],"requestBody":{"description":"Data required to promote a member to moderator.","typeName":"DiscussionBoardModerators.ICreate"},"responseBody":{"description":"Moderator record created, including linkage to member.","typeName":"DiscussionBoardModerators"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/moderators","method":"post"},{"specification":"Update moderator assignment details by ID. For editing moderator role properties in the discussionboard_moderators table (e.g., demotion date, extended privileges). Used in escalation, demotion, or metadata management. Enforces access control and audit logging. Handles update conflicts, invalid IDs, and regulatory business rules. Only admins may update moderator assignments.","description":"Updates fields of a moderator record by ID, such as demotion time or privilege adjustments. Ensures business constraints (e.g., cannot demote current admin). Changes are logged for compliance. Handles errors for non-existent IDs, permission errors, or policy violations. Related to PATCH (list/search), GET (detail), and DELETE (role revocation) APIs.","summary":"Update moderator assignment (discussionboard_moderators) by ID.","parameters":[{"name":"id","description":"Moderator role record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in moderator role (demotion, extension, etc).","typeName":"DiscussionBoardModerators.IUpdate"},"responseBody":{"description":"Updated moderator record after modifications.","typeName":"DiscussionBoardModerators"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/moderators/{id}","method":"put"},{"specification":"Delete a moderator assignment by ID. Associated with discussionboard_moderators. Performs privilege revocation and enforces business logic (e.g., disallow deleting last moderator). Action is logged to audit and cascades to revoke linked privileges. Ramifications are handled in related tables/processes. Only admins are authorized, per access control matrix.","description":"Deletes a moderator role assignment, revoking all associated privileges for the member. Ensures that business constraints are upheld (cannot delete last admin or when critical moderation in progress). Logs deletion and updates related role history records for audit. Errors for not found or conflicts. Related to POST/PUT (assignment or update), PATCH (list), and GET (detail).","summary":"Delete moderator assignment (discussionboard_moderators) by ID.","parameters":[{"name":"id","description":"Moderator role record to revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/actors/moderators/{id}","method":"delete"},{"specification":"List admins in the system with search and filter. Operations on discussionboard_admins. Access restricted to top-level admins only. Returns paginated and searchable admin info including member associations, elevation date, status, and role logs. Implements search filters/pagination for administrative overviews. Foundation for user management and privileged operation audit.","description":"Retrieves paginated list of administrator assignments from discussionboard_admins table, with associated member details and timestamps. Query supports filtering/search for large administrative teams. Only admins can call this endpoint. Response is paginated and includes privacy management (e.g., do not leak unnecessary member info). Errors for incomplete queries or insufficient permissions. Related APIs: GET by ID, POST for new admin, PUT/DELETE for assignment update/revoke.","summary":"List admins (discussionboard_admins) with search and filters.","parameters":[],"requestBody":{"description":"Filtering and search/query parameters for listing admins.","typeName":"DiscussionBoardAdmins.IRequest"},"responseBody":{"description":"Paginated list of admin assignment records with member info.","typeName":"DiscussionBoardAdmins.IPage"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins","method":"patch"},{"specification":"Fetch a specific admin assignment record by ID. For viewing details (member link, elevation date) in discussionboard_admins. Restricted to admins-only for privacy and security. Returns full assignment info and references to member entity. Only accessible by admins; errors include not found or insufficient rights.","description":"Gets administrator assignment record from discussionboard_admins by its unique ID, returning related member identity info, timestamps, and possibly permission/config roles. Used for auditing and managing admin roles. Related to PATCH (list/search), POST (assign), PUT/DELETE (update/revoke) endpoints. Handles permission errors and not found cases.","summary":"Get admin assignment (discussionboard_admins) by ID.","parameters":[{"name":"id","description":"ID of admin assignment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Admin assignment detail with member info, elevation date.","typeName":"DiscussionBoardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins/{id}","method":"get"},{"specification":"Create a new admin assignment and promote a member. Direct operation on discussionboard_admins table. Accepts member ID, elevation reason, and timestamp. Accessible only by other admins. Triggers notification and audit. Fails if member already admin or ineligible.","description":"Assigns a member as an admin by generating a discussionboard_admins record. Only current admins may call. Logs the operation, checks for duplicate elevation, and notifies the upgraded member. Handles business errors (already admin/ineligible). Related to PATCH for listing and DELETE/PUT for assignment modification or removal.","summary":"Promote a member to admin (create discussionboard_admins).","parameters":[],"requestBody":{"description":"Data required to promote a member to admin.","typeName":"DiscussionBoardAdmins.ICreate"},"responseBody":{"description":"Admin record created, including member linkage and metadata.","typeName":"DiscussionBoardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins","method":"post"},{"specification":"Update admin assignment by ID. Permits modification of elevated privileges, demotion, or metadata. Direct operation on discussionboard_admins. Access limited to top-level admins and logged as privileged operation. May trigger cascaded privilege changes if member is also a moderator and revokes admin. Properly validates not demoting sole admin. Handles update conflicts and permission checks.","description":"Updates admin assignment by ID in discussionboard_admins, e.g., demotion or metadata updates. Enforces access control and logs the update. Returns new assignment data for review. Errors include missing/invalid ID, privilege checks, and insufficient rights. Related PATCH (list), GET (detail), POST (promote), DELETE (demote).","summary":"Update admin assignment (discussionboard_admins) by ID.","parameters":[{"name":"id","description":"ID of admin assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Admin assignment update details (demotion or privilege metadata).","typeName":"DiscussionBoardAdmins.IUpdate"},"responseBody":{"description":"Resulting admin assignment after modifications.","typeName":"DiscussionBoardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins/{id}","method":"put"},{"specification":"Delete an admin assignment record, revoking admin privileges. Linked to discussionboard_admins. Operation allowed for admins only with strict business and compliance constraints. Cannot revoke sole admin role. Should initiate audit log entry and update in linked privilege records. Supports admin role lifecycle management.","description":"Deletes (revokes) an admin assignment by ID in discussionboard_admins, removing all admin privileges from the member. Business logic enforces checks for minimum admin coverage. Action is logged and notifiable. Edge cases handled for last-admin and active dependencies. Related PATCH/POST/PUT endpoints for admin assignments.","summary":"Delete admin assignment (discussionboard_admins) by ID.","parameters":[{"name":"id","description":"ID of admin assignment record to revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins/{id}","method":"delete"},{"specification":"List/search member profile records for audit and admin settings management. Linked to discussionboard_member_profiles. Returns paginated searchable set of profiles, supporting filters by display name, join date, or profile metadata. Results support member management, reporting, or privacy-compliance review. Data must be filtered by role privileges; access restricted to admins/moderators only. Implements pagination/metadata and privacy constraints from requirements analysis.","description":"Retrieves paginated and filtered list of member profiles from discussionboard_member_profiles table. Filtering by search params (display name, join date, etc). Only available to moderators/admins. Provides a foundation for member list review, admin workflow, or audit. Handles privacy by masking sensitive fields and supports pagination/meta. Related endpoints: GET /discussionboard/actors/memberProfiles/{id} for single profile, PATCH /discussionboard/actors/members for member listing.","summary":"List member profiles (discussionboard_member_profiles) with search and filters.","parameters":[],"requestBody":{"description":"Search and filter parameters for member profiles.","typeName":"DiscussionBoardMemberProfiles.IRequest"},"responseBody":{"description":"Paginated result of member profiles with metadata and privacy filtering.","typeName":"DiscussionBoardMemberProfiles.IPage"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/actors/memberProfiles","method":"patch"}],"completed":74,"total":170,"step":0,"created_at":"2025-07-22T08:17:00.035Z"},"tokenUsage":{"facade":{"aggregate":{"total":321676,"input":{"total":300354,"cached":0},"output":{"total":21322,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":321676,"input":{"total":300354,"cached":0},"output":{"total":21322,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":321676,"input":{"total":300354,"cached":0},"output":{"total":21322,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":321676,"input":{"total":300354,"cached":0},"output":{"total":21322,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Updates an existing member suspension record in the discussionboard_member_suspensions table. Allows moderators or admins to modify an ongoing suspension, such as changing the end date, updating the reason, or marking as revoked. Fulfills business rules for user management and audit trail requirements as described in requirements analysis.","description":"This endpoint enables authorized users (moderators/admins) to update an existing member suspension. Use cases include shortening or extending suspension duration, editing the reason for suspension, or marking a suspension as revoked (lifted early).\n\nThe endpoint requires the unique suspension record ID (UUID) as a path parameter. The updated suspension data must be provided in the request body, using the DiscussionboardMemberSuspension.IUpdate type, which includes fields such as ends_at (end datetime), reason, and revoked_at. The system will validate user permissions and log all changes to the audit log for future review or appeals.\n\nAll modification actions must be auditable and reversible only by admins, as per system policy. Invalid or missing IDs will result in a 404 error. Permission denied will return 403. The response returns the updated suspension object for confirmation. Related endpoints include get (detail) and delete (removal/undo suspension).","summary":"Update an existing member suspension (discussionboard_member_suspensions).","parameters":[{"name":"id","description":"Target member suspension record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data to update the member suspension record.","typeName":"DiscussionboardMemberSuspension.IUpdate"},"responseBody":{"description":"Updated member suspension object after modification.","typeName":"DiscussionboardMemberSuspension"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/memberSuspensions/{id}","method":"put"},{"specification":"Deletes a member suspension record from discussionboard_member_suspensions, effectively revoking an active suspension. Used by moderators/admins for restoring memberships after review/appeal, per business rules.","description":"This endpoint allows authorized users (moderators or admins) to revoke or remove a suspension record. Typically used after successful appeal, error correction, or at the end of a suspension period. Instead of hard deleting, it may soft-delete or update revoked fields for audit compliance.\n\nRequires the unique suspension record ID as a path parameter. Permission checks ensure only authorized actions (403 for denial, 404 for missing records). Audit log entries are created on every removal. This complements workflows that require restoring posting/commenting rights to a member. No response body is returned on success, just HTTP 204 or 200. Related endpoints: put (update) and get (detail).","summary":"Delete or revoke an existing member suspension (discussionboard_member_suspensions).","parameters":[{"name":"id","description":"Target member suspension record ID (UUID) to delete/revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/memberSuspensions/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of moderator action logs from discussionboard_moderator_actions. Supports search by moderator, action_type, target_type, target_id, and time range. Fulfills requirements for audit, transparency, and review workflows.","description":"This endpoint provides a paginated listing of moderator actions, facilitating transparency and audit workflows required for compliance. Filters include moderator ID, action type, target type, and time range, as embodied in the DiscussionboardModeratorAction.IRequest request body schema.\n\nAuthorized roles may specify search, sort, and pagination parameters. The response returns a page object containing action summaries and metadata such as total item count. Only actions viewable by the authenticated role are shown. This supports admin analytics, incident review, and member appeal support. Errors returned for invalid filters or insufficient permissions. Related endpoints include detail get and post (create).","summary":"List moderator actions (discussionboard_moderator_actions) with search/pagination.","parameters":[],"requestBody":{"description":"Search/pagination/request criteria for moderator actions.","typeName":"DiscussionboardModeratorAction.IRequest"},"responseBody":{"description":"Paginated result set of moderator actions.","typeName":"IPageDiscussionboardModeratorAction"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions","method":"patch"},{"specification":"Retrieves a specific moderator action record by ID from discussionboard_moderator_actions. Supports detailed audit trail review for incident analysis, appeals, and compliance.","description":"This endpoint returns the full details of a moderator action given its unique ID. Used in audit workflows, appeals processes, and transparency/reporting by authorized roles (moderator/admin).\n\nRequires the exact action ID (UUID) as a path parameter. If found and permitted, returns all associated details, including moderator info, action context, and timestamps. 404 is returned for missing action, 403 for insufficient permissions. Related endpoints: patch (list), put/post (create/update), delete (remove).","summary":"Get moderator action log detail (discussionboard_moderator_actions) by ID.","parameters":[{"name":"id","description":"Target moderator action record ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator action log object.","typeName":"DiscussionboardModeratorAction"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions/{id}","method":"get"},{"specification":"Creates a new moderator action log entry in discussionboard_moderator_actions, documenting moderator interventions for audit, reporting, and appeals. Only moderators and admins may perform this operation.","description":"This endpoint is used by the system or authorized users to log a moderator's intervention, such as editing/deleting a post, warning a user, or handling a report/resolution. The request body must conform to the DiscussionboardModeratorAction.ICreate schema, specifying the moderator, action_type, target_type, target_id, details, and timestamp.\n\nA new record is created and returned in the response for confirmation and audit. All created logs become part of the immutable system audit record. Attempts by unauthorized users or invalid input will result in errors (403, 400). Further actions (update/delete) available via respective endpoints. All administrator and moderator activity is required to be logged through this endpoint to meet audit transparency policies.","summary":"Create a new moderator action log entry (discussionboard_moderator_actions).","parameters":[],"requestBody":{"description":"Data for new moderator action log entry.","typeName":"DiscussionboardModeratorAction.ICreate"},"responseBody":{"description":"Created moderator action log object.","typeName":"DiscussionboardModeratorAction"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions","method":"post"},{"specification":"Updates an existing moderator action record in discussionboard_moderator_actions, such as to amend details or correct errors for transparent audit logs. Enforces strict audit and permission checks as per requirements.","description":"This endpoint enables authorized users (moderators/admins) to amend or correct a previously logged moderator action, e.g., updating the justification (details), fixing a target ID, or correcting timestamps. The request requires the unique action record ID (UUID) as a path parameter and the updated data in the request body, following DiscussionboardModeratorAction.IUpdate schema.\n\nAll changes are tracked in the database to ensure audit trail compliance; permissions are enforced so only responsible roles may update. Invalid ID yields 404; lack of permissions 403. The response body returns the full, updated log. Use with caution, as excessive edits may trigger audit alerts. Related: get (detail), delete (remove), patch (list).","summary":"Update an existing moderator action log entry (discussionboard_moderator_actions).","parameters":[{"name":"id","description":"Target moderator action record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data to update the moderator action log entry.","typeName":"DiscussionboardModeratorAction.IUpdate"},"responseBody":{"description":"Updated moderator action log object.","typeName":"DiscussionboardModeratorAction"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions/{id}","method":"put"},{"specification":"Deletes (or anonymizes) a moderator action record in discussionboard_moderator_actions, typically for policy compliance or error correction, maintaining proper audit flows.","description":"This endpoint allows for removal or anonymization of a moderator action record, in line with strict audit and compliance rules. Usually only permitted in cases of admin error, legal requirement, or content that was logged inappropriately. The action is restricted to moderator and admin roles, with every delete action itself logged in the system audit for transparency.\n\nDeletion is by ID (UUID) in the path. Upon success, a 204/200 is returned with no body. If the record does not exist or permissions are insufficient, appropriate errors (404/403) are provided. Anonymization or soft deletion may be preferred over hard delete in some deployments. Related: update (put), get (detail), patch (list).","summary":"Delete (anonymize) moderator action log entry (discussionboard_moderator_actions) by ID.","parameters":[{"name":"id","description":"Target moderator action record ID (UUID) to delete/anonymize.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of board entities from discussionboard_boards. Supports comprehensive search, category filtering, and custom ordering for admin/board management interfaces.","description":"Provides paginated, filterable, and sortable listings of board definitions for use in forum management, browsing, or analytics interfaces. Accepts a DiscussionboardBoard.IRequest search body which may include filters for category, code, name, status, and pagination/sorting arguments.\n\nThe endpoint supports both user (for browsing) and admin (for management) contexts. All output is governed by role permissions; inactive boards are hidden unless admin. The response is an IPageDiscussionboardBoard containing summary board info and pagination metadata. Errors include invalid filters, permission denial, or server issues. Related: get (detail), post (create), put (update), delete (remove).","summary":"List boards (discussionboard_boards) with filters and pagination.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination criteria for boards.","typeName":"DiscussionboardBoard.IRequest"},"responseBody":{"description":"Paginated result set of boards.","typeName":"IPageDiscussionboardBoard"},"authorizationRoles":null,"path":"/discussionboard/boards/boards","method":"patch"},{"specification":"Gets a single board record from discussionboard_boards by ID. Used by any role to retrieve full board details, used in user browsing, admin management, and analytics/reporting.","description":"Fetches detailed metadata for a single board by its unique ID (UUID). Used by all authorized roles to retrieve the board's full data for display, editing, or management. Errors include 404 for not found, 403 for insufficient role. Outputs all atomic fields, including code, name, description, is_active, and category info. Related endpoints: patch (list), post (create), put (update), delete (soft-remove).","summary":"Get detailed board info (discussionboard_boards) by ID.","parameters":[{"name":"id","description":"Target board record ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full board entity data for requested ID.","typeName":"DiscussionboardBoard"},"authorizationRoles":null,"path":"/discussionboard/boards/boards/{id}","method":"get"},{"specification":"Creates a new board in discussionboard_boards, supporting board expansion and administrative updates. Required fields are enforced per schema and business logic.","description":"Endpoint for authorized users (such as admins or board managers) to define a new board for discussion topics. Request body must match DiscussionboardBoard.ICreate schema, with required fields such as name, code, and parent category ID. The system checks for name/code uniqueness and valid category links.\n\nSuccessful creation returns the created board object with all atomic fields. Errors are returned for missing/invalid data, or if code/name is already in use. Related endpoints: patch (list), get (detail), put (update), delete (soft-remove).","summary":"Create a new board entity (discussionboard_boards).","parameters":[],"requestBody":{"description":"New board creation data (name, code, category, etc).","typeName":"DiscussionboardBoard.ICreate"},"responseBody":{"description":"Created board entity data.","typeName":"DiscussionboardBoard"},"authorizationRoles":["admin"],"path":"/discussionboard/boards/boards","method":"post"},{"specification":"Updates an existing board record in discussionboard_boards. Allows changing metadata such as name, category, or activation state. Enforces strict validation for code/name uniqueness and admin permission.","description":"Endpoint for board updates (e.g., renaming, changing category, toggling is_active). Only accessible to admins, this uses the path parameter ID to select the board and a DiscussionboardBoard.IUpdate request body for new values. Validation ensures code, name, and parent category are correctly set, and audit logs any changes. Successful response returns the updated board object. Related endpoints: patch (list), get (detail), post (create), delete (remove).","summary":"Update an existing board (discussionboard_boards) record.","parameters":[{"name":"id","description":"Target board record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data for the board record update.","typeName":"DiscussionboardBoard.IUpdate"},"responseBody":{"description":"Updated board entity data.","typeName":"DiscussionboardBoard"},"authorizationRoles":["admin"],"path":"/discussionboard/boards/boards/{id}","method":"put"},{"specification":"Deletes an existing board record in discussionboard_boards, typically by soft-deletion (hidden/archived). For admin use only, follows audit policy and enforces permissions strictly.","description":"Removes (likely by soft-delete/flag) a board entity identified by its unique ID. Only admins may perform this operation, to preserve audit/historical records. The operation is also used to retire, hide, or archive boards no longer active. Success produces HTTP 204/200 with no response body, and all actions are logged for audit purposes. Failure modes: 404 not found, 403 permission denied. Related endpoints: patch (list), get (detail), post (create), put (update).","summary":"Delete (soft-remove) a board entity (discussionboard_boards) by ID.","parameters":[{"name":"id","description":"Target board record ID (UUID) to delete/soft-remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/boards/boards/{id}","method":"delete"}],"completed":86,"total":170,"step":0,"created_at":"2025-07-22T08:17:01.609Z"},"tokenUsage":{"facade":{"aggregate":{"total":362841,"input":{"total":338302,"cached":0},"output":{"total":24539,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":362841,"input":{"total":338302,"cached":0},"output":{"total":24539,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":362841,"input":{"total":338302,"cached":0},"output":{"total":24539,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":362841,"input":{"total":338302,"cached":0},"output":{"total":24539,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Fetch a single member profile by its unique ID. The profile includes user-chosen display name, bio, avatar URI, website, and optional location. This endpoint is crucial for profile viewing scenarios and enables users, moderators, or admins to see profile data for a specific member. Related to discussionboard_member_profiles table, which contains 1:1 relationship with members. Follows 'GET' RESTful convention for retrieval by unique resource identifier.","description":"Retrieves a detailed member profile using its unique identifier (UUID). This profile provides vital information for displaying user details, including display name, biography, avatar (as a URI to an image file), website, and (optionally) user location for personalization and context within discussion threads. Only one member profile exists per member due to the unique constraint enforced on the discussionboard_member_id field. This endpoint supports secure read operations as described in the DB schema and may be permission-restricted based on the authenticated user's role. Soft deletions in the member entity propagate here if membership is revoked. Error handling includes returning 404 if the ID does not correspond to any existing profile. This endpoint is important for both user self-service and moderation, as well as compliance with privacy regulations that allow users to review their stored personal data.","summary":"Get a DiscussionBoard member profile by ID (discussionboard_member_profiles table).","parameters":[{"name":"id","description":"Unique member profile ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed member profile data including display name, bio, avatar URI, website, location, and unique profile ID.","typeName":"IDiscussionBoardMemberProfile"},"authorizationRoles":null,"path":"/discussionboard/actors/memberProfiles/{id}","method":"get"},{"specification":"Create a new member profile with the specified properties. This endpoint supports setting display name, bio, avatar URI, website, and location per privacy and personalization requirements. Linked to discussionboard_member_profiles table and enforces 1:1 mapping with members. Only admins or authorized users may create on behalf of others. Follows RESTful 'POST' convention for resource creation.","description":"Allows creation of a member profile record. The request body specifies display name, bio, avatar URI (link to uploaded image), website, and (optionally) user location. Profiles are uniquely linked to existing members through a foreign key. The API validates that a profile for the member does not already exist (enforces uniqueness). 403/409 errors occur if unauthorized or if a profile already exists for the member. On success, returns the created profile including all attributes. Used when users first configure their display info or when admins enable onboarding for a new user. Profile preferences (avatar, website, bio) may be left null for privacy.","summary":"Create a new DiscussionBoard member profile (discussionboard_member_profiles table).","parameters":[],"requestBody":{"description":"Properties to set for the new member profile (display name, bio, avatar URI, website, location).","typeName":"IDiscussionBoardMemberProfile.ICreate"},"responseBody":{"description":"Full information of the newly created member profile.","typeName":"IDiscussionBoardMemberProfile"},"authorizationRoles":null,"path":"/discussionboard/actors/memberProfiles","method":"post"},{"specification":"Update an existing member profile identified by profile ID. Allows modification of display name, bio, avatar URI, website, and location. Updates are restricted to profile owner or authorized administrators. Implements audit logging as required by business rules. Follows RESTful 'PUT' convention for full resource updates.","description":"Updates a member's profile details (display name, bio, avatar URI, website, location). Only the profile owner or platform admin can update a profile. All properties must be provided even if only some are changed (full replace, not patch). Ensures validation of input, with 403 forbidden if the authenticated user has no rights, and 404 if the target profile does not exist. Change history may be logged for auditing or rollback purposes as per DB schema. Updates are atomic and preserve referential integrity with the member entity.","summary":"Update a DiscussionBoard member profile by ID (discussionboard_member_profiles table).","parameters":[{"name":"id","description":"ID of the member profile to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full profile data to replace existing member profile (display name, bio, avatar URI, website, location).","typeName":"IDiscussionBoardMemberProfile.IUpdate"},"responseBody":{"description":"Updated member profile with all new details.","typeName":"IDiscussionBoardMemberProfile"},"authorizationRoles":null,"path":"/discussionboard/actors/memberProfiles/{id}","method":"put"},{"specification":"Delete a member profile using its unique ID, as part of privacy compliance or administrative actions. Hard/soft delete may be governed by business rule in implementation. Tied to 1:1 relation in discussionboard_member_profiles, ensuring removal does not break referential integrity. Enforces permissions (self or admin). Follows RESTful 'DELETE' convention.","description":"Removes a member profile based on unique profile ID. Deletion may be soft (flagged) or hard based on business rules and audit/trail requirements. Only the profile owner or admin can perform this operation. 403 Forbidden if insufficient privileges, 404 if the profile does not exist. This endpoint enables users to exercise right-to-be-forgotten or remove obsolete profile information. Deletions also affect personalization and visibility in the DiscussionBoard system.","summary":"Delete a DiscussionBoard member profile by ID (discussionboard_member_profiles table).","parameters":[{"name":"id","description":"Profile ID to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation or metadata indicating successful deletion (may include deleted resource ID or status).","typeName":"IDiscussionBoardMemberProfile.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/actors/memberProfiles/{id}","method":"delete"},{"specification":"Search/filter all member authentication records with pagination, filtering, and sorting. Supports administrative review and troubleshooting for user access. Implements business requirements for API search endpoints. Uses PATCH to receive complex query object. Results paginated. Underlies discussionboard_member_authentications table.","description":"Enables advanced querying over member authentication records. Provides parameters to filter by provider, username/email, last login, etc. Returns paginated list with total count summary and result details. Used by administrators for troubleshooting login problems, SSO/OAuth integration audits, and user support tasks. Security permissions restrict who may access. Accepts request body specifying search, filter, page, and sort parameters. Response conforms to standard page format including data and pagination. 400/403 for invalid or unauthorized requests.","summary":"Search and paginate DiscussionBoard member authentication records (discussionboard_member_authentications table, PATCH).","parameters":[],"requestBody":{"description":"Search and pagination parameters for listing member authentication records.","typeName":"IDiscussionBoardMemberAuthentication.IRequest"},"responseBody":{"description":"Paginated list of member authentication records with metadata.","typeName":"IPageDiscussionBoardMemberAuthentication"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications","method":"patch"},{"specification":"Fetch a single member authentication record by unique ID. Tied to discussionboard_member_authentications table with provider, provider_identifier, password hash (if local), and last login timestamp. Supports audit and account management flows. Follows RESTful GET by resource ID.","description":"Returns a specific member authentication (local/email login, external SSO, etc.) by unique authentication record ID (UUID). Permits admins and authorized personnel to review, troubleshoot or audit login credentials for a user. Does not return plaintext passwords. Returns data fields: auth provider, provider identifier, password hash (if available), and last login timestamp. 404 if record not found, 403 if access is unauthorized. Used for debugging authentication failures and supporting user requests about login credentials.","summary":"Get a DiscussionBoard member authentication record by ID (discussionboard_member_authentications table).","parameters":[{"name":"id","description":"ID of the authentication record to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed authentication record including provider, identifier, (hashed) credential, last login.","typeName":"IDiscussionBoardMemberAuthentication"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications/{id}","method":"get"},{"specification":"Create a new member authentication (login credential), tied to a specific member. Used for initial registration or adding new login methods (e.g. SSO, password). Ensures uniqueness per provider/identifier tuple. Security-critical. Tied to discussionboard_member_authentications table. RESTful POST for new resource creation.","description":"Registers a new login method for a member. Request body specifies required fields: member ID, provider (local, OAuth, etc), unique provider identifier (e.g., email or external user ID), password hash (optional), and (optionally) last login timestamp. Implements provider/identifier uniqueness. Used in signup, adding additional login options, or SSO onboarding. Admins may add credentials for user backup login. Validates no duplicate provider/identifier pairing exists. 403/409 on duplicate or privilege violation. Success returns the created authentication entity.","summary":"Create a new DiscussionBoard member authentication record (discussionboard_member_authentications table).","parameters":[],"requestBody":{"description":"Properties and credential data to create a new member authentication method.","typeName":"IDiscussionBoardMemberAuthentication.ICreate"},"responseBody":{"description":"Created authentication record (provider, provider identifier, hash, etc).","typeName":"IDiscussionBoardMemberAuthentication"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications","method":"post"},{"specification":"Update a member's authentication method by record ID. Supports full replacement (PUT) of existing record; used to change login method properties (e.g. provider identifier, password hash). Security critical; only credential owner, admin, or support can update. Adheres to audit and password management policies. Resource is discussionboard_member_authentications.","description":"Replaces an entire member authentication record (all properties) for the specified record ID. Typical use cases: credential reset, user-initiated provider migration, admin SSO troubleshooting. Update requires full replacement of resource fields: provider, identifier, hash, and last login info. Ensures referential integrity to owning member. All business rules enforced. 403/404 for forbidden or not found. Change is atomic; outcome returned includes new value of record for auditing and troubleshooting.","summary":"Update a DiscussionBoard member authentication record by ID (discussionboard_member_authentications table, PUT).","parameters":[{"name":"id","description":"Authentication record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full data to replace existing member authentication record.","typeName":"IDiscussionBoardMemberAuthentication.IUpdate"},"responseBody":{"description":"Updated authentication record details.","typeName":"IDiscussionBoardMemberAuthentication"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications/{id}","method":"put"},{"specification":"Delete a member authentication record by unique authentication record ID. Supports user deletion of own login method or admin-removal for access revocation. Links to discussionboard_member_authentications table. Hard/soft deletion as governed by business rules. Follows RESTful delete convention.","description":"Removes a member authentication credential based on record ID. Used for revoking access, member-initiated password or SSO removal, or admin support actions. 403 if caller is not authorized (owner or admin), 404 if not found. Supports privacy policies enabling users to fully control their login data. Data returned may include deletion result or metadata for compliance.","summary":"Delete a DiscussionBoard member authentication record by ID (discussionboard_member_authentications table).","parameters":[{"name":"id","description":"Authentication record ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result or confirmation of credential deletion (may include status, deleted record ID, or audit).","typeName":"IDiscussionBoardMemberAuthentication.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications/{id}","method":"delete"},{"specification":"Search/filter all member suspension records, with support for complex parameters (member ID, issuer, status, time range) and pagination. Used by moderators/admins for review and appeal workflows. Implemented via PATCH to accept complex query object. Results paginated. Associated with discussionboard_member_suspensions table.","description":"Enables filters/searches over suspension records. Parameters may include member ID, issued by moderator/admin, active/inactive state, and time intervals. Returns paginated results for dashboard consumption or audit reports. Used for moderation effectiveness tracking. Enforces security—restricted to privileged users. Input is complex object for flexible search. 400/403 if insufficient permissions or validation failure. Output conforms to page with metadata.","summary":"Search and list DiscussionBoard member suspension records (discussionboard_member_suspensions table, PATCH).","parameters":[],"requestBody":{"description":"Search, sort, and paging criteria for member suspension list.","typeName":"IDiscussionBoardMemberSuspension.IRequest"},"responseBody":{"description":"Paginated list of member suspension records with metadata.","typeName":"IPageDiscussionBoardMemberSuspension"},"authorizationRoles":null,"path":"/discussionboard/actors/memberSuspensions","method":"patch"},{"specification":"Fetch a single member suspension record by unique ID. Provides audit trails for suspension histories and status enforcement. Bound to discussionboard_member_suspensions table. GET by resource ID.","description":"Retrieves a suspension record including all fields: affected member, issuer (moderator/admin), reason, timing, and (if present) revocation status and reason. Used for audit, appeal, and moderation dashboards. If target does not exist, returns 404.","summary":"Get a DiscussionBoard member suspension record by ID (discussionboard_member_suspensions table).","parameters":[{"name":"id","description":"Member suspension record ID to fetch (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returned member suspension record detailing member, issuer, timing, and reason.","typeName":"IDiscussionBoardMemberSuspension"},"authorizationRoles":null,"path":"/discussionboard/actors/memberSuspensions/{id}","method":"get"},{"specification":"Create a new suspension record for a member. Used by moderation workflows to suspend users for rule violations, abuse, or policy breaches. Links to discussionboard_member_suspensions. Only moderators or admins may create. POST for resource creation.","description":"Creates a new member suspension record. Body includes affected member ID, issuer moderator/admin ID, reason, start/end times, and optional revocation metadata. Used when suspending a member for misconduct, temporarily or permanently. Enforces privilege: only admins/moderators can invoke. Duplicate active suspensions prevented by API validation. Success response includes newly created suspension record.","summary":"Create a new DiscussionBoard member suspension record (discussionboard_member_suspensions table, POST).","parameters":[],"requestBody":{"description":"All required metadata for new member suspension (affected user, issuer, reason, timing, etc).","typeName":"IDiscussionBoardMemberSuspension.ICreate"},"responseBody":{"description":"Created member suspension record with full details.","typeName":"IDiscussionBoardMemberSuspension"},"authorizationRoles":null,"path":"/discussionboard/actors/memberSuspensions","method":"post"}],"completed":98,"total":170,"step":0,"created_at":"2025-07-22T08:17:03.167Z"},"tokenUsage":{"facade":{"aggregate":{"total":404086,"input":{"total":376244,"cached":0},"output":{"total":27842,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":404086,"input":{"total":376244,"cached":0},"output":{"total":27842,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":404086,"input":{"total":376244,"cached":0},"output":{"total":27842,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":404086,"input":{"total":376244,"cached":0},"output":{"total":27842,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new tag proposal entity for the discussion board system. This endpoint allows authenticated members to propose a new topic tag to be reviewed by moderators/admins. The operation is mapped to the discussionboard_tag_proposals table, which stores the atomic proposal event, the proposing member's identity, the proposed tag string, and the creation timestamp. The request body contains the proposal details (proposed_tag), and on success, the response includes full information of the new proposal. Moderation and curation logic is handled elsewhere; this operation is for creation only. Related APIs include those for updating (PUT), deleting (DELETE), and retrieving proposals. Only registered, active members can create tag proposals.","description":"This API operation creates a new topic tag proposal. It references the discussionboard_tag_proposals table, which allows members to propose additional tags for threads or topics. Members submit a proposed_tag string via the request body, and the system stores the member ID (from authentication), the tag string to be reviewed, and the timestamp.\n\nValidation rules ensure: the tag string is unique for that user (no duplicate proposals); tags must meet content guidelines (handled in API logic); and only active members (not suspended/banned) can submit proposals. If a moderator/admin accepts the proposal, it moves to the official tag table.\n\nStandard security and rate-limiting rules apply, and the endpoint is audit-logged for abuse monitoring. Related endpoints include PUT for updating proposals, DELETE for removal, and PATCH/GET for moderation review flows.","summary":"Create a new tag proposal (discussionboard_tag_proposals).","parameters":[],"requestBody":{"description":"Tag proposal creation input (proposed_tag string).","typeName":"IDiscussionboardTagProposal.ICreate"},"responseBody":{"description":"Full tag proposal entity after creation.","typeName":"IDiscussionboardTagProposal"},"authorizationRoles":["member"],"path":"/discussionboard/interactions/tagProposals","method":"post"},{"specification":"Update an existing tag proposal entity. This endpoint allows a proposing member to modify the details of their tag proposal, or for a moderator/admin to edit before review. It operates on the discussionboard_tag_proposals table and updates the atomic proposal fields if valid. Requires the proposal's id in the path, and a request body with the fields to update. Related operations: POST for create, DELETE for remove, GET for read. Only the original member or privileged users may edit.","description":"This API endpoint updates a tag proposal in discussionboard_tag_proposals, allowing the proposing member, or in some cases moderators/admins, to alter the proposed_tag string or other modifiable fields before review. Validation ensures the proposal exists, belongs to the requesting user (unless moderator/admin), and meets content guidelines (no profanity, uniqueness per member, length restriction). The operation is fully audit-logged and errors returned if access or update rules are not satisfied. Related endpoints are POST (create), DELETE (delete by id).","summary":"Update an existing tag proposal (discussionboard_tag_proposals).","parameters":[{"name":"id","description":"Target tag proposal's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated tag proposal information.","typeName":"IDiscussionboardTagProposal.IUpdate"},"responseBody":{"description":"Tag proposal entity after update.","typeName":"IDiscussionboardTagProposal"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/interactions/tagProposals/{id}","method":"put"},{"specification":"Delete a tag proposal entity by its ID. Enables a proposing member to retract their proposal or allows moderators/admins to remove inappropriate/irrelevant tag proposals. The endpoint operates on the discussionboard_tag_proposals table and requires the ID in the path. After successful validation (ownership or elevated privileges), the proposal is deleted. Only active, existing proposals can be deleted. This is a hard delete operation, fully audit-logged.","description":"This endpoint deletes a tag proposal from discussionboard_tag_proposals, based on the provided proposal ID. Only the original proposing member or a moderator/admin can delete a proposal. The operation is subject to validation rules: the proposal must exist and belong to the current user, unless privileges are elevated. All deletions are audit-logged (deleted_by, timestamp). Errors are returned on missing, already-reviewed, or unauthorized actions. Related operations are POST (create), PUT (update), PATCH/GET for moderation processes.","summary":"Delete a tag proposal (discussionboard_tag_proposals).","parameters":[{"name":"id","description":"Target tag proposal's ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/interactions/tagProposals/{id}","method":"delete"},{"specification":"List and search reports for moderation review. This endpoint supports retrieving lists of discussionboard_reports entities for dashboard or moderation workflow. Implements searching, pagination, and filtering for status, created/resolved timestamps, and targets. Designed for use by moderators/admins, based on report type (post/comment), resolution status, and assignment. Can be sorted and searched using many parameters. Uses request body; response includes paginated collection.","description":"Retrieves a paginated and filtered list of moderation reports, referencing the discussionboard_reports table. Supports searching by report status (pending, reviewed, etc.), timestamps, reported member, resolved moderator, and target (post/comment). Used in moderator/admin dashboards to manage reporting workload and track abuse/triage flows. Validation ensures only privileged users access this data, and standard audit logging applies. Error responses for out-of-bounds queries, invalid filters, or permission violations are returned.","summary":"List moderation reports with searching (discussionboard_reports).","parameters":[],"requestBody":{"description":"Report listing query parameters (pagination, search, filters).","typeName":"IDiscussionboardReport.IRequest"},"responseBody":{"description":"Paginated list of moderation reports.","typeName":"IPageDiscussionboardReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/reports","method":"patch"},{"specification":"Retrieve a specific moderation report by ID. This endpoint gets all information on a single report (for post or comment) for use in moderation workflow, dashboard inspection, or appeal review. References the discussionboard_reports table. ID is passed in the path.","description":"Fetches details for a single moderation report from discussionboard_reports using the specified report ID (uuid). Used for moderator/admin review, follow-up audits or member appeal flows. Ensures only privileged roles can access complete report data. Errors provided for missing or unauthorized access. Related endpoints cover listing (PATCH), updating (PUT), or deletion (DELETE) of reports.","summary":"Get details of a moderation report (discussionboard_reports).","parameters":[{"name":"id","description":"Target report's ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All details of the requested moderation report (post or comment complaint).","typeName":"IDiscussionboardReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/reports/{id}","method":"get"},{"specification":"Create a new moderation report. This endpoint allows a member to report inappropriate, abusive, or rule-violating content (post or comment). Mapped to discussionboard_reports table. Requires request body with report details (target type/post or comment ID, reason). Response contains the new report. Only active, non-suspended members may create reports. Duplicate/abusive reporting is rate-limited and validated in API/business logic.","description":"This operation creates a new report in the moderation system (discussionboard_reports), allowing a user to flag a post or comment for review. The request body specifies the report target and reason. Only authenticated, eligible members may submit reports, and API logic prevents abuse by enforcing per-user rate limits and validation of reason fields. On success, the API returns the created report entity, which is then available in moderation dashboard listing. Failure returns validation or permission errors. Related endpoints include PATCH for list/search and GET for detail.","summary":"Create a new report for moderation (discussionboard_reports).","parameters":[],"requestBody":{"description":"Report creation input (target, reason, etc.).","typeName":"IDiscussionboardReport.ICreate"},"responseBody":{"description":"Report entity created for moderation.","typeName":"IDiscussionboardReport"},"authorizationRoles":["member"],"path":"/discussionboard/moderation/reports","method":"post"},{"specification":"Update an existing moderation report. Allows privileged users to update details of a previously submitted report, generally for workflow management (status, resolution handling, moderator assignment). Requires report ID in path and body with fields to update. Only moderators/admins have access. Triggers audit logging on any change.","description":"Updates an existing report in the moderation system (discussionboard_reports), using the provided report ID and update data. Typical usage is to change report status (e.g., mark as reviewed), assign a moderator resolver, and record resolution actions. Only moderators/admins can update reports. The system validates permissions, report existence, and acceptable transition logic. Full details of the updated report are returned. Related endpoints are PATCH for listing and GET for details.","summary":"Update a moderation report (discussionboard_reports).","parameters":[{"name":"id","description":"Target report's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Report update data (status, resolution fields).","typeName":"IDiscussionboardReport.IUpdate"},"responseBody":{"description":"Updated moderation report entity.","typeName":"IDiscussionboardReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/reports/{id}","method":"put"},{"specification":"Delete a report from the moderation system. This endpoint allows authorized users (moderators/admins) to remove an individual report. The operation removes the report by ID, after validation (report must exist and user must be privileged). Audit logs record the action, and the system ensures that deletions adhere to business/legal retention rules. Can be limited via business logic to certain statuses (e.g., only deletable if dismissed or obsolete).","description":"Deletes a moderation report entity from discussionboard_reports using the specified ID. Only permitted for privileged users. The system validates report existence and deletion eligibility (e.g., must not be currently assigned/active, must meet business/legal rules for retention). Errors are thrown for unauthorized or improper actions. Action is logged for audit/compliance. Related endpoints are PATCH for list/search, GET for details.","summary":"Delete a moderation report (discussionboard_reports).","parameters":[{"name":"id","description":"Target report's ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/reports/{id}","method":"delete"},{"specification":"List or search all moderation action logs. This endpoint provides paginated searching and filtering for moderation event logs (discussionboard_moderation_logs). Used by admins and moderators to audit, analyze, or investigate actions by moderators (edit, delete, warning, suspension). Supports searching by action, actor, target, and time period. Uses request body for flexible search params; response is paginated.","description":"Provides a searchable, paginated listing of all moderation actions recorded in discussionboard_moderation_logs. Filters on moderator, action_type, timestamps, and affected entities are supported. Only privileged roles (moderator/admin) can access. The endpoint supports investigation, transparency and compliance/audit use cases. Errors for permission denial, invalid search parameters, or paging limits are standard. Related endpoints: POST for logging new actions, GET for specific details.","summary":"List moderation action logs with searching (discussionboard_moderation_logs).","parameters":[],"requestBody":{"description":"Moderation log listing params (search, filters, paging).","typeName":"IDiscussionboardModerationLog.IRequest"},"responseBody":{"description":"Paginated moderation log items.","typeName":"IPageDiscussionboardModerationLog"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/moderationLogs","method":"patch"},{"specification":"Retrieve full details of a moderation log event by its ID. This endpoint fetches the complete data for a single moderation log used in compliance, appeal, or analysis. Path parameter is the moderation log ID. Only privileged users (moderators/admins) can use.","description":"Gets the complete details for a specific moderation action log entry from discussionboard_moderation_logs by ID. Used by admins and moderators to investigate events, support audits, or supply evidence in appeals. The endpoint requires the ID and returns full details, including action_type, involved member/post/comment, description, and timestamps. Errors are returned on missing/unauthorized access. Related endpoints: PATCH for search/list and POST for creation (typically via workflow automation, not direct API use).","summary":"Get details of a moderation action log (discussionboard_moderation_logs).","parameters":[{"name":"id","description":"Target moderation log's ID (UUID) to retrieve details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderation action log details.","typeName":"IDiscussionboardModerationLog"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/moderationLogs/{id}","method":"get"},{"specification":"Create a new moderation action log entry. This endpoint is used by the system or privileged users to record moderator/admin actions such as delete, edit, warning, or suspension events. It inserts a new row into discussionboard_moderation_logs, containing moderator/member IDs, target entity, action_type, and details. Usually triggered automatically as part of moderation, but may have direct API in admin tools.","description":"This endpoint creates a moderation action log entry in discussionboard_moderation_logs. The request body contains the details of the action event—moderator ID, action type, details, and target entity (post/comment/member). Typically, this is triggered automatically during other workflow actions, but manual log entry may be supported for special cases. Only moderators and admins can use this endpoint. The operation returns the full moderation log event for audit and compliance purposes; errors are returned on permission or input violations.","summary":"Create a new moderation action log (discussionboard_moderation_logs).","parameters":[],"requestBody":{"description":"Moderation action log creation data.","typeName":"IDiscussionboardModerationLog.ICreate"},"responseBody":{"description":"Moderation log entity created.","typeName":"IDiscussionboardModerationLog"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/moderationLogs","method":"post"},{"specification":"Update an existing moderation log entry. Permits correction or extension of moderation event details; usually only accessible to admins for compliance or workflow correction. Requires the moderation log ID in the path, with request body including updatable fields (e.g., action details, target, or related metadata). The discussionboard_moderation_logs table is updated on success. The action is always audit-logged and permission-checked. Only admins and system tools should have access.","description":"Updates an existing entry in discussionboard_moderation_logs with new or corrected information. Used mainly for compliance corrections, administrative workflow fixes, or redaction/context updates post-event. Path parameter is log ID; request body includes updatable action log fields. Only available to admins (and system integrations), with strict audit and error handling. Full updated entity is returned. Related: PATCH for list/search, GET for detail.","summary":"Update a moderation log entry (discussionboard_moderation_logs).","parameters":[{"name":"id","description":"Target moderation log entry's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderation log update data (action details, targets, etc).","typeName":"IDiscussionboardModerationLog.IUpdate"},"responseBody":{"description":"Updated moderation log entity.","typeName":"IDiscussionboardModerationLog"},"authorizationRoles":["admin"],"path":"/discussionboard/moderation/moderationLogs/{id}","method":"put"}],"completed":110,"total":170,"step":0,"created_at":"2025-07-22T08:17:07.008Z"},"tokenUsage":{"facade":{"aggregate":{"total":445476,"input":{"total":414198,"cached":0},"output":{"total":31278,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":445476,"input":{"total":414198,"cached":0},"output":{"total":31278,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":445476,"input":{"total":414198,"cached":0},"output":{"total":31278,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":445476,"input":{"total":414198,"cached":0},"output":{"total":31278,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Retrieve a list of all channels within the DiscussionBoard platform, with searching, filtering, and pagination capabilities. This is designed for administrative and navigation purposes, supporting management of channel visibility, status, and metadata. Relates to the discussionboard_channels Prisma table, returning multiple channel records and supporting advanced filters according to business requirements for platform segmentation and configuration.","description":"This operation allows authenticated users (typically admins or moderators) to retrieve a list of channels available within the system. The endpoint supports querying by enabled status, text search on channel names or descriptions, pagination (page/limit), and sorting. It is built on the discussionboard_channels Prisma model, which holds top-level forum channels such as 'Politics', 'Economics', etc.\n\nAccess to this endpoint may be restricted based on user role, and actions are audited. The returned data is comprehensive, including all relevant channel properties for display or management, and reflects the current active/inactive (enabled) state. If the channel is soft-deleted (deleted_at is set), it may be hidden or marked as such depending on the request parameters.\n\nThis endpoint is commonly used for admin dashboards, configuration screens, and navigation menus. Related endpoints include creation, retrieval by id, update, and soft-delete of channels.","summary":"Get a list of channels (discussionboard_channels table) with search and pagination.","parameters":[],"requestBody":{"description":"Channel search and pagination options for list retrieval.","typeName":"IDiscussionboardChannel.IRequest"},"responseBody":{"description":"A paginated list of channels matching the filter criteria.","typeName":"IPageIDiscussionboardChannel"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/systematic/channels","method":"patch"},{"specification":"Retrieve the details of a specific channel by its ID. This operation uses the discussionboard_channels Prisma table to fetch a single, fully detailed record of a channel entity. It is essential for channel management and UI flows that require detailed metadata about a particular forum channel.","description":"Fetch a single channel's details including name, code, description, status flags, timestamps, and relationships (e.g., related categories). The endpoint requires a valid UUID for the channel ID. Authorization may be enforced to restrict access to certain roles (e.g., admin, moderator, possibly member if channel listing is public).\n\nThis endpoint provides complete details for use in editing screens, audit logs, or advanced configuration workflows. It checks for soft-deletion and will return appropriate error codes if the channel does not exist or access is unauthorized. Closely related endpoints are those for updating, creating, and deleting channels.","summary":"Get channel details (discussionboard_channels table) by ID.","parameters":[{"name":"id","description":"Target channel's ID (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the target channel.","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/systematic/channels/{id}","method":"get"},{"specification":"Create a new channel in the DiscussionBoard system. Uses the discussionboard_channels Prisma table to add a new forum-level grouping, including required metadata such as code, name, description, and enabled state. Triggers audit logging and can enforce unique constraints on channel codes/names.","description":"This endpoint allows authorized admins to create a new channel, specifying all required fields (code, name, enabled, etc). Input must conform to required data shape defined in IDiscussionboardChannel.ICreate. Business rules such as unique code/name, audit requirements, and possibly moderation review are enforced. Soft-deleted previously existing codes are not automatically restored; new records are created unless a specific restoration endpoint is defined.\n\nUpon successful creation, the endpoint returns the full new channel entity. Errors are returned for constraint violations, authorization failures, and malformed requests. Related endpoints: retrieve by id, update, patch list, and soft-delete operations.","summary":"Create a new channel (discussionboard_channels table).","parameters":[],"requestBody":{"description":"The information needed to create a new channel.","typeName":"IDiscussionboardChannel.ICreate"},"responseBody":{"description":"Details of the created channel.","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/channels","method":"post"},{"specification":"Update the details of a specific channel. Patch full or partial channel details in the discussionboard_channels table via its ID. Supports business rules for change auditing and validation, including code modification, description, and enable/disable flagging.","description":"Allows admins to update properties of an existing channel, such as name, code, description, enabled state, or timestamps. Requires valid UUID for the channel ID and accepts input via IDiscussionboardChannel.IUpdate. Enforces business logic for immutable fields or constraints (e.g., unique code), and triggers an audit log record of the attempted update. Returns the updated channel entity upon success, or error for validation/authorization failure.\n\nThis operation supports modification of UI-visible strings, business flags (enabled), or descriptions used for onboarding/help. Related operations include channel retrieval, listing, creation, and soft-deletion.","summary":"Update channel details (discussionboard_channels table) by ID.","parameters":[{"name":"id","description":"Channel ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the channel.","typeName":"IDiscussionboardChannel.IUpdate"},"responseBody":{"description":"The channel record after applying updates.","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/channels/{id}","method":"put"},{"specification":"Delete (soft-delete) a specific channel from the discussionboard_channels table by marking deleted_at, following business rule for non-destructive removal. The operation is critical for system integrity, compliance, and audit log enforcement. Only admins can execute this operation and it is comprehensively logged.","description":"Performs a soft-delete of the targeted channel by setting its deleted_at timestamp. This fulfills compliance and business policy for data retention—channels are never hard-deleted. All dependent categories, boards, and content are hidden but not destroyed. Returns confirmation of success, or error if operation is not permitted or the channel does not exist. Only accessible by admins. Related endpoints: channel retrieval, update, creation, and patch-list.","summary":"Delete (soft-delete) channel (discussionboard_channels table) by ID.","parameters":[{"name":"id","description":"Channel ID (UUID) to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the soft-delete operation.","typeName":"IDiscussionboardChannel.IRemoveResult"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/channels/{id}","method":"delete"},{"specification":"Retrieve a list of all categories within the system, with support for filtering, searching, and pagination. Categories represent logical groupings within channels and fulfill navigation, organization, and management requirements. Based on the discussionboard_categories Prisma table.","description":"Lists all categories, returning their details as defined in the discussionboard_categories model. Supports filtering by channel, enabled/disabled state, parent category, or name. Results are paginated and can be sorted/search by various fields. Soft-deleted categories are marked or hidden per business logic. This endpoint is commonly used in admin panels and configuration screens. Authorization typically required (admin/moderator). Related endpoints: category create, retrieve by id, update, and delete.","summary":"Get a list of categories (discussionboard_categories table) with search and pagination.","parameters":[],"requestBody":{"description":"Filtering and pagination query for category list retrieval.","typeName":"IDiscussionboardCategory.IRequest"},"responseBody":{"description":"Paginated array of matching categories.","typeName":"IPageIDiscussionboardCategory"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/systematic/categories","method":"patch"},{"specification":"Fetch detailed information for a single category by its ID. Uses the discussionboard_categories table to retrieve category metadata and relationships for management and UI flows. Used for edit screens, linking, and advanced navigation.","description":"Retrieves full category metadata by UUID, including name, code, description, parent/child structure, and status flags. Authenticated access typically required, with permission checks as appropriate. Reports errors if category is deleted or does not exist. Closely related to update, patch-list, create, and delete endpoints.","summary":"Get category details (discussionboard_categories table) by ID.","parameters":[{"name":"id","description":"Target category's ID (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details for the specified category.","typeName":"IDiscussionboardCategory"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/systematic/categories/{id}","method":"get"},{"specification":"Create a new category, assigning to an existing channel and (optionally) parent category. Operates on the discussionboard_categories table, enforcing business rules regarding codes, names, and relationships. This operation is only permitted for admins and is logged for compliance.","description":"Admins use this endpoint to add a category, providing required fields such as channel assignment, name, code, enabled status, and (optionally) a parent for hierarchy. Constraints (unique code/channel, valid channel/id references) are enforced. The operation returns the full category entity if successful, or suitable error messages for constraints or permissions. Related endpoints: patch-list, get-by-id, update, delete.","summary":"Create new category (discussionboard_categories table).","parameters":[],"requestBody":{"description":"Category creation parameters.","typeName":"IDiscussionboardCategory.ICreate"},"responseBody":{"description":"The created category record.","typeName":"IDiscussionboardCategory"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/categories","method":"post"},{"specification":"Update a category by its UUID, modifying one or more fields. Uses the discussionboard_categories table to update metadata (e.g., name, code, enabled status, parent/child relations). Triggers comprehensive business logic validations and change audit logs. Only accessible for admins or permitted staff.","description":"Permits updates to an existing category's fields, including name, code, description, parent, enabled state, or timestamps. Requires valid UUID. Strictly enforces business rules for uniqueness, hierarchy, and enabled status. Changes are audit logged. Returns the updated record, or error for validation/authorization issues.","summary":"Update category (discussionboard_categories table) by ID.","parameters":[{"name":"id","description":"Category's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for category update.","typeName":"IDiscussionboardCategory.IUpdate"},"responseBody":{"description":"The updated category record.","typeName":"IDiscussionboardCategory"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/categories/{id}","method":"put"},{"specification":"Delete (soft-delete) a category by UUID, following business rules for retention and hiding rather than actual row removal. Operates on discussionboard_categories and is only allowed for admins. Deletion results are returned for confirmation and error handling is robust for illegal or failed deletes.","description":"Soft-deletes the specified category by setting a deleted_at timestamp, but does not permanently destroy data. Checks constraints (e.g., related boards/topics), logs action, and returns confirmation or errors for missing/unauthorized resources. Related to update, patch-list, and get-by-id endpoints.","summary":"Delete (soft-delete) category (discussionboard_categories table) by ID.","parameters":[{"name":"id","description":"The UUID of the category to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Soft-delete result/status for category.","typeName":"IDiscussionboardCategory.IRemoveResult"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/categories/{id}","method":"delete"},{"specification":"List all global settings for the DiscussionBoard platform, supporting search, filtering, and pagination. Operates on the discussionboard_settings table and is accessible to admins for review and management of configuration keys/values.","description":"Returns a paginated list of current system settings (key/value/description/timestamps), allowing admins to manage foundational configuration parameters for the application. Used in settings management screens, audit reviews, and troubleshooting. Only admins are permitted to use this endpoint. Related endpoints include get-by-id, update, and audit log endpoints.","summary":"Get a list of global settings (discussionboard_settings table) with search and pagination.","parameters":[],"requestBody":{"description":"Settings list search and filter parameters.","typeName":"IDiscussionboardSetting.IRequest"},"responseBody":{"description":"Paginated system settings records.","typeName":"IPageIDiscussionboardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings","method":"patch"},{"specification":"Retrieve detailed information for a specific system setting by UUID. Fetches data from discussionboard_settings for use in edit/view screens. Only accessible to admins. Used for audit, configuration, and troubleshooting.","description":"Returns the key, value, description, and timestamps for a system setting referenced by its unique ID (UUID). Fails with error if setting does not exist or user lacks required permissions. CRUD operations via related endpoints (list, update, patch-list).","summary":"Get details for a specific setting (discussionboard_settings table) by ID.","parameters":[{"name":"id","description":"The UUID of the system setting to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested system setting entity.","typeName":"IDiscussionboardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings/{id}","method":"get"}],"completed":122,"total":170,"step":0,"created_at":"2025-07-22T08:17:07.841Z"},"tokenUsage":{"facade":{"aggregate":{"total":486332,"input":{"total":452125,"cached":0},"output":{"total":34207,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":486332,"input":{"total":452125,"cached":0},"output":{"total":34207,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":486332,"input":{"total":452125,"cached":0},"output":{"total":34207,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":486332,"input":{"total":452125,"cached":0},"output":{"total":34207,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new system setting in the discussion board platform. This operation allows administrators to define or add a new key-value configuration that governs platform-wide settings. It is tied to the discussionboard_settings Prisma table. Settings include global flags—such as maintenance mode, notification preferences, allowed file types—and are strictly managed for audit compliance. Only admins are allowed to execute this operation. Key constraints: 'key' must be unique. The audit log must record the creation event, including actor/admin details. This operation does not allow users to configure personal notification settings (those are managed elsewhere).","description":"This API endpoint allows platform administrators to create (insert) new rows into the discussionboard_settings table, which serves as the central repository for discussion board configuration options. Each setting controls some aspect of system-wide behavior—such as spam filtering thresholds, maintenance mode toggles, maximum attachment sizes, or SMTP server settings. \n\nThe endpoint enforces uniqueness of the setting key. If the key already exists, a descriptive error is returned. The request body must provide all required information: key, value, and optionally a description. All actions performed through this endpoint are logged in the audit record to fulfill transparency and security requirements.\n\nPermissions are restricted to the admin role, as improper settings can compromise system security or stability. Write access triggers a full audit entry, recording the admin who created the setting, the timestamp, and the contents of the new record for future traceability. Related operations: updating an existing setting (PUT), deleting a setting (DELETE), and listing all settings (PATCH or GET, depending on implementation).","summary":"Create a new system setting (discussionboard_settings)","parameters":[],"requestBody":{"description":"New system setting properties","typeName":"IDiscussionboardSettings.ICreate"},"responseBody":{"description":"Created system setting object","typeName":"IDiscussionboardSettings"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings","method":"post"},{"specification":"Update an existing system setting record. This operation targets the discussionboard_settings table, allowing administrators to modify the value or metadata for a given configuration. Setting keys cannot be updated—only their description and values may change. All actions are strictly audited, and only admins may execute this operation.","description":"This API endpoint allows platform administrators to update the value or description of an existing configuration record in the discussionboard_settings table. The setting 'key' itself is immutable (may not be changed via this API). Admin users must specify the unique ID of the setting to update via the path parameter. \n\nThe request body provides the new value and/or description. Business logic enforces that only admins can perform this update, and changes are logged with the previous and new values for compliance/audit purposes. The endpoint returns the updated configuration object upon success. Error handling covers non-existent IDs or immutable key updates attempts. Related APIs include creation and deletion of settings, as well as listing or retrieving settings by ID.","summary":"Update a system setting (discussionboard_settings)","parameters":[{"name":"id","description":"System setting record's unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for system setting","typeName":"IDiscussionboardSettings.IUpdate"},"responseBody":{"description":"Updated configuration setting object","typeName":"IDiscussionboardSettings"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings/{id}","method":"put"},{"specification":"Delete a system setting entry identified by its unique ID. This operation removes the configuration record from the discussionboard_settings table. Only admin users may execute this endpoint. Attempts to delete non-existent records are handled with informative error responses. Proper auditing is enforced for compliance.","description":"Provides admin-level functionality to delete a configuration row from the discussionboard_settings model. This operation is irreversible: once deleted, the key-value pair and its setting are lost. All deletions are logged for traceability and compliance with business rules/meticulous audit trails.\n\nAuthorization is restricted to users with admin role, as settings affect overall platform behavior. Attempts to delete unavailable IDs result in clear error feedback. Related operations: settings creation, update, and retrieval endpoints.","summary":"Delete a system setting (discussionboard_settings)","parameters":[{"name":"id","description":"System setting record identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted system setting (confirmation)","typeName":"IDiscussionboardSettings"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings/{id}","method":"delete"},{"specification":"List or search system audit log records. This retrieves audit log entries from the discussionboard_audit_logs table, supporting pagination, filtering, and sorting. Used for platform governance, compliance, and activity review. Only accessible to admins for full audit review. Contains references to all admin/moderator activities.","description":"This API endpoint lists audit records from the discussionboard_audit_logs table, providing an interface for platform administrators to monitor historical actions performed by system actors (admins, moderators) across sensitive endpoints. Audit logs contain details on who performed which action, timestamps, target entities/table names, and optional details fields (e.g., before/after state, rationale for action).\n\nSupports advanced querying: admins can provide search criteria in the request body—such as date range, actor ID, action type, target table, and full-text search of details. Output is paginated and sorted according to input parameters, supporting audit compliance with regulatory and business rules. Only admins may access this endpoint, as records may contain sensitive operational data.\n\nRelated endpoints: audit record retrieval by ID (GET), audit log creation (POST), audit record modification (PUT), and deletion (DELETE) for maintenance (if allowed by business rules).","summary":"List/search audit log records (discussionboard_audit_logs)","parameters":[],"requestBody":{"description":"Search and pagination filters for audit logs","typeName":"IDiscussionboardAuditLogs.IRequest"},"responseBody":{"description":"Paginated audit records list","typeName":"IPageDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs","method":"patch"},{"specification":"Retrieve details for a specific audit log entry by its unique ID. This operation provides full visibility into the action event referenced by the audit log record in the discussionboard_audit_logs table. The endpoint is used primarily by administrators or for compliance review audits.","description":"This API endpoint returns the complete details for a given audit log entry identified by its UUID (ID) from the discussionboard_audit_logs table. It provides a forensic snapshot: action type, actor ID, target table and entity, timestamps, and additional details or justification. Used in internal investigations, incident response, or audit reviews. Authorization is restricted to admin users only. Returns a single log record or an informative error if not found.","summary":"Get single audit log record (discussionboard_audit_logs)","parameters":[{"name":"id","description":"Audit log record unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full audit log record","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs/{id}","method":"get"},{"specification":"Create a new audit log record. Allows privileged creation of audit log entries in the discussionboard_audit_logs table. Used for manual/system logging of sensitive/exceptional actions.","description":"Enables direct creation of an audit log entry, used for custom or exceptional platforms actions not auto-logged by built-in features. Only admin users may create logs via this endpoint; normal API operations should auto-record logs.\n\nRequest body must contain all required audit info: action description, actor, target entity, timestamp, and details. Returns the newly created log object for confirmation/audit trail. Related endpoints: update (PUT), delete (DELETE), and get by ID (GET).","summary":"Create audit log record (discussionboard_audit_logs)","parameters":[],"requestBody":{"description":"Required audit log record fields","typeName":"IDiscussionboardAuditLogs.ICreate"},"responseBody":{"description":"Created audit log object","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs","method":"post"},{"specification":"Update an audit log record by ID. Allows privileged correction of saved audit data in the discussionboard_audit_logs table. Only permitted for admin users for compliance, correction, or investigation.","description":"Permits updating an existing discussionboard_audit_logs record, restricted to highly privileged admin users for compliance reasons (e.g., correction of error, post-investigation reclassification). Requires audit log ID as path parameter and the modified log data in the request body. All modifications must themselves be logged in a secondary audit trail if required by policy.\n\nRelated endpoints: create, delete, get by ID, and search listing for audit logs.","summary":"Update audit log record (discussionboard_audit_logs)","parameters":[{"name":"id","description":"Audit log record ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Audit log update data","typeName":"IDiscussionboardAuditLogs.IUpdate"},"responseBody":{"description":"Updated audit log record","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs/{id}","method":"put"},{"specification":"Delete an audit log record. Remove a single audit log entry from the discussionboard_audit_logs table by unique ID. Only performed by privileged admin users; all deletions must themselves be recorded (meta-audit).","description":"This API endpoint deletes an audit log record identified by its UUID from the discussionboard_audit_logs table. Intended for exceptional cases: e.g., compliance with data retention limits, legal erasure, or correction of erroneous audit data. Only admins may delete audit logs, and each deletion is itself written into an immutable meta-log. On success, returns the deleted log record or confirmation. Related API operations: creation, listing, update, get by ID.","summary":"Delete audit log record (discussionboard_audit_logs)","parameters":[{"name":"id","description":"Audit log record unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted log record (confirmation)","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs/{id}","method":"delete"},{"specification":"List/search all members in the discussion board. Provides paginated, searchable, and filterable list of member records from the discussionboard_members table. Used for admin/member management and visibility. Accessible for all admin users and (limited) member self-browsing in some configurations.","description":"This API endpoint retrieves a paginated list of member records from the discussionboard_members table. Supports advanced filtering by registration date, status, and other member attributes via the request body. Designed for admin use (full access) and can be made available for public/member search (with restricted fields) per auth configuration.\n\nEnforces privacy and terms-of-service compliance: some fields may be redacted or only visible to authorized users and administrators. Supports searching, sorting, and pagination arguments in the request body. Related API endpoints include: member detail retrieval by ID (GET), creation (POST), update (PUT), and (if permitted) deletion (DELETE).","summary":"List/search all members (discussionboard_members)","parameters":[],"requestBody":{"description":"Search and pagination filters for member list","typeName":"IDiscussionboardMembers.IRequest"},"responseBody":{"description":"Paginated member list","typeName":"IPageDiscussionboardMembers"},"authorizationRoles":null,"path":"/discussionboard/actors/members","method":"patch"},{"specification":"Get a single member detail. Returns the full profile (or permitted subset) for the given member ID from the discussionboard_members table. Auth rules determine field visibility: users see their own details, admins see full record, other members may see only public fields.","description":"Given a member's unique identifier (UUID), this API endpoint returns detailed information about that member from the discussionboard_members table. Responds with the full member object for admins or the corresponding member (self-view); partial/limited view is returned for other users depending on privacy rules and site configuration. Common use cases: view own profile, admin audit, member directory access. Errors include non-existent IDs or forbidden access. Related endpoints: search/list (PATCH), create (POST), update (PUT).","summary":"Get a single member detail (discussionboard_members)","parameters":[{"name":"id","description":"Member's unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full (or partial) member info","typeName":"IDiscussionboardMembers"},"authorizationRoles":null,"path":"/discussionboard/actors/members/{id}","method":"get"},{"specification":"Create a new board member (user registration). This inserts a new member into the discussionboard_members table. Restricts creation to valid values for joined_at, status, and other necessary fields. Registration is accessible to unregistered/public users.","description":"This endpoint creates a new member record in the discussionboard_members table. It is typically called during user registration or platform onboarding flows. Required attributes: join date (joined_at), status (usually 'active' or 'pending'), and optional profile setup in related tables. Permissions: this endpoint is public, allowing unregistered users to create accounts. All values are validated for correctness—invalid or duplicate entries are rejected. Created member object is returned upon success. Related: member self-update (PUT), list (PATCH), and detail (GET) APIs.","summary":"Create a new board member (discussionboard_members)","parameters":[],"requestBody":{"description":"Member registration details","typeName":"IDiscussionboardMembers.ICreate"},"responseBody":{"description":"Newly created member object","typeName":"IDiscussionboardMembers"},"authorizationRoles":null,"path":"/discussionboard/actors/members","method":"post"},{"specification":"Update member details for a specific member in the discussion board. This modifies details of a member in the discussionboard_members table identified by a unique ID. Only allowed for the corresponding member (self) or an admin (strong auth enforced).","description":"Given a member's unique identifier, this API endpoint allows updating details (e.g., status field or profile info) in the discussionboard_members table. The endpoint distinguishes between self-service (member updates own info) and admin/moderator updates. Fields are strictly validated, and some fields may only be mutable by admin (e.g., status). All operations are logged as appropriate per privacy and audit rules. Returns the full updated member object. Related: detail (GET), registration (POST), list (PATCH), and (if allowed) delete APIs.","summary":"Update member details (discussionboard_members)","parameters":[{"name":"id","description":"Target member's unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for the specified member","typeName":"IDiscussionboardMembers.IUpdate"},"responseBody":{"description":"Updated member object","typeName":"IDiscussionboardMembers"},"authorizationRoles":null,"path":"/discussionboard/actors/members/{id}","method":"put"}],"completed":134,"total":170,"step":0,"created_at":"2025-07-22T08:17:09.516Z"},"tokenUsage":{"facade":{"aggregate":{"total":527506,"input":{"total":490061,"cached":0},"output":{"total":37445,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":527506,"input":{"total":490061,"cached":0},"output":{"total":37445,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":527506,"input":{"total":490061,"cached":0},"output":{"total":37445,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":527506,"input":{"total":490061,"cached":0},"output":{"total":37445,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Retrieve a specific content flag in the discussion board moderation module. This operation is tightly coupled to the `discussionboard_content_flags` table, which is responsible for storing all flags set on posts or comments by users, moderators, or automated systems. The schema includes references to flagged posts and comments, the actor who set the flag (member or moderator), the type of flag, and timestamps. The endpoint supports both manual and automated flags. Only moderators and admins should have permission to access this operation due to its sensitive nature and audit/compliance requirements.","description":"This API operation allows a moderator or admin to retrieve the details of a specific content flag entry from the `discussionboard_content_flags` table. The content flags indicate whether a post or comment has been flagged for issues like spam, abuse, or profanity either by a user, a moderator, or by automated filters. \n\nThe operation ensures all access is logged for compliance with the system's audit requirements. Permissions are enforced such that only moderators or admins can request details about content flags. Sensitive data access, such as the identity of the flag setter (member or moderator), is protected in compliance with privacy rules. \n\nValidation includes checking that the flag ID exists and that the requester has appropriate permissions. If the requested flag does not exist or the user lacks the required authorization, appropriate error responses are returned. Related operations include creating, updating, or deleting content flags and querying all flags with pagination.","summary":"Get a specific content flag in the `discussionboard_content_flags` table.","parameters":[{"name":"id","description":"Unique content flag ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns complete details for the content flag, including post/comment referenced, actor, type, and timestamps.","typeName":"IDiscussionboardContentFlag"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/contentFlags/{id}","method":"get"},{"specification":"Create a new content flag record for moderation purposes in the discussion board system. Associated with the `discussionboard_content_flags` table, this endpoint enables users, moderators, or automated systems to flag posts or comments for issues like spam, abuse, or guideline violations. Stores flag type, target, flagger details, and reason codes as atomic entries for audit/compliance. Only authorized actors (members, moderators, system) can use this endpoint; access control is enforced.","description":"This API operation allows creation of a new content flag on a post or comment within the discussion board system, writing to the `discussionboard_content_flags` table. Content flags act as triggers for moderation, either through manual actions by users or moderators, or through automated detection systems for potential violations. All content flags are atomic records containing references to the flagged content (post or comment), the entity setting the flag (member, moderator, or automated system), as well as the type of flag such as 'spam', 'profanity', or 'abuse'.\n\nFor access control, regular members may only flag via limited interface; the API enforces role and rate limits as per business rules. Moderators and admins can set any flag type. All content flag creations are logged to the audit log, and every change must trigger notification workflows for transparency. Validation requires that either a post or comment ID (but not both) is present and that all inputs conform to allowed types and business rules. Error handling responds with validation details or forbidden access for unauthorized actors. Related endpoints handle retrieval, update, and deletion of content flags.","summary":"Create a new content flag in the `discussionboard_content_flags` table.","parameters":[],"requestBody":{"description":"Detailed information for creating the content flag, with references to post or comment, actor, reason, and metadata.","typeName":"IDiscussionboardContentFlag.ICreate"},"responseBody":{"description":"The newly created content flag record.","typeName":"IDiscussionboardContentFlag"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/moderation/contentFlags","method":"post"},{"specification":"Update an existing content flag record in the discussion board moderation system (`discussionboard_content_flags` table). Used for correcting or resolving flags, or updating reviewer info. Only accessible by moderators and admins with clear audit trail.","description":"This API operation makes it possible to update an existing content flag managed by the `discussionboard_content_flags` table. Operations could include resolving a flag, changing its type (if incorrectly classified), or updating which moderator handled the flag. The endpoint supports full audit logging to ensure traceability for all moderation actions, in accordance with compliance requirements.\n\nBusiness logic restricts updates to authorized moderators and admins. Updates require a valid flag ID and a body with allowed changes, aligned with business rules. Any invalid updates or unauthorized attempts result in detailed error responses. Related endpoints enable creation, retrieval, or deletion of content flags. Access is always logged for safeguarding system integrity.","summary":"Update a content flag in the `discussionboard_content_flags` table.","parameters":[{"name":"id","description":"Unique content flag ID (UUID) to identify which flag record is being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified content flag. Includes moderator or flag type updates, etc.","typeName":"IDiscussionboardContentFlag.IUpdate"},"responseBody":{"description":"The updated content flag record, after successful modification.","typeName":"IDiscussionboardContentFlag"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/contentFlags/{id}","method":"put"},{"specification":"Delete a specific content flag record (soft delete) from the `discussionboard_content_flags` table for moderation housekeeping and audit compliance. Only moderators or admins can access this operation. Implements audit logging.","description":"This API operation lets a moderator or admin mark a content flag as deleted from the `discussionboard_content_flags` table. Deletes are usually soft (record is marked rather than erased) to maintain a full history for audit and legal requirements. Only users with moderator or admin privileges may perform deletion.\n\nBefore deletion, validation ensures the content flag exists and that the user is properly authorized. All delete events are logged in the system audit log, preserving details about the action. If the flag does not exist, or permissions are lacking, appropriate structured errors are returned. Related endpoints include content flag creation, update, and retrieval. Deletions trigger notification events if applicable.","summary":"Delete a specific content flag from the `discussionboard_content_flags` table.","parameters":[{"name":"id","description":"Unique content flag ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion, including status and timestamp.","typeName":"IDiscussionboardContentFlag.IDeleteResponse"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/contentFlags/{id}","method":"delete"},{"specification":"Retrieve a paginated, optionally filtered, list of notifications for the authenticated user from the `discussionboard_notifications` table. Includes filtering by notification type, delivery status, and date range. Implements business and audit rules for notification center usability. Member authentication required.","description":"This API endpoint lets authenticated members fetch a list of their discussion board notifications, using the `discussionboard_notifications` table with support for search, filtering (e.g., by type, read/unread, date), and pagination. Notifications include replies, mentions, moderation actions, and announcements. \n\nBusiness rules enforce member-only access and restrict results to the calling user's notifications. Pagination and filtering parameters enable efficient notification center UI. Audit and delivery state (read, unread) are available in response data. Error handling includes validation for parameter ranges and unauthorized access. Related endpoints enable notification updates (mark as read), detail viewing, and creation by system events.","summary":"List authenticated user's notifications from `discussionboard_notifications` (paginated/filtered).","parameters":[],"requestBody":{"description":"Criteria for listing notifications, e.g., filters, sort order, pagination.","typeName":"IDiscussionboardNotification.IRequest"},"responseBody":{"description":"Paginated list of notifications matching the criteria. Includes notification details and delivery/read state.","typeName":"IPageDiscussionboardNotification"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications","method":"patch"},{"specification":"Fetch a single notification record by ID for the authenticated user, using the `discussionboard_notifications` table. Member authentication and ownership validation enforced. Supports notification center detail view.","description":"This API operation retrieves the details of a specific notification for the authenticated member. The target is a single row in the `discussionboard_notifications` table. Ownership and authentication are enforced: only the receiving member (or authorized admin) may view a notification's full detail. \n\nBusiness logic ensures that only the notification recipient or a system administrator may access this resource. The endpoint is used in notification center flows for members. If the notification does not exist or the user is not authorized to access it, an appropriate error is returned. Related endpoints in this domain handle notification listing, marking as read, creating system notifications, and user notification settings.","summary":"Get a single notification from `discussionboard_notifications` by ID.","parameters":[{"name":"id","description":"ID of the notification record to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification details for the specified ID, including title, body, type, and delivery info.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications/{id}","method":"get"},{"specification":"Create a new notification event for a member by writing a row to the `discussionboard_notifications` table. Used systemically after forum actions (reply, mention, moderation event, announcement). Member authentication required for self-created notifications; admin access required for system or moderator actions.","description":"With this API operation, a new notification record is created in the `discussionboard_notifications` table, targeting an individual member for a forum event (reply to post, mention, moderation, board announcement, etc). The endpoint supports all application-originated and system-originated notifications. The member may also use it to create notifications related to their own actions (such as subscribing/unsubscribing to threads).\n\nAccess is authenticated: regular members can only create notifications for themselves, while moderators and admins may generate system/announcement notifications. Input validation ensures all required fields (member, type, title, body, etc.) are present and business rules for notification delivery are respected. Operations are logged for audit and analytics use. Related endpoints manage notification listing, detail retrieval, and notification settings.","summary":"Create a new notification in `discussionboard_notifications`.","parameters":[],"requestBody":{"description":"Details for the notification event: recipient member, type, content, and link.","typeName":"IDiscussionboardNotification.ICreate"},"responseBody":{"description":"The new notification record created.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications","method":"post"},{"specification":"Update an existing notification record in the `discussionboard_notifications` table, e.g., to mark as read. Only allowed by the record's owner or admins. Audit logged.","description":"This API endpoint updates information about an existing notification in the member's `discussionboard_notifications` list. Typical usage includes marking a notification as read, e.g., updating the `read_at` property. Only the notification owner (the recipient member) or an admin may modify the notification record. All activity is audit logged.\n\nStrict validation ensures only allowed fields can be changed (e.g., no tampering with recipient). Attempts to access or update another member's notification, or update with invalid data, results in errors. Related endpoints support notification listing, creation, and per-member notification settings.","summary":"Update an existing notification in `discussionboard_notifications`.","parameters":[{"name":"id","description":"ID of the notification to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified notification (e.g., mark as read).","typeName":"IDiscussionboardNotification.IUpdate"},"responseBody":{"description":"The updated notification record.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications/{id}","method":"put"},{"specification":"Delete a notification record from `discussionboard_notifications` (soft-delete, for member clean-up or privacy compliance). Only notification recipient or privileged actor may access.","description":"This API operation deletes (soft-deletes) an individual notification for the authenticated member (recipient), e.g., to clean up their notification center or comply with privacy requests. Deletion is only allowed for the notification's owner, a moderator (where business-justified), or admin. The operation preserves audit history and triggers any appropriate notification read status or reporting logic.\n\nValidation is enforced so that only notification recipients, moderators (where allowed for moderation notices), and admins can delete notifications. Attempts to delete others' notifications are blocked. All deletions are audit logged. Related endpoints control notification center display, listing, and notification settings.","summary":"Delete a notification from `discussionboard_notifications`.","parameters":[{"name":"id","description":"ID of the notification to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion and the affected record.","typeName":"IDiscussionboardNotification.IDeleteResponse"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications/{id}","method":"delete"},{"specification":"Retrieve a member's notification settings from `discussionboard_member_notification_settings`. Includes notification type, channel (in-app/email), and preference toggles. Only the member themselves or admins can access.","description":"This API operation fetches the current notification settings for the authenticated member, as stored in the `discussionboard_member_notification_settings` table. Members can view their preferred notification types/channels (in-app, email) and per-category toggles (replies, mentions, moderation, announcements). Access control is enforced so only the member or an admin can view the settings for privacy and compliance. Results are audit logged, and the operation underpins notification preference UIs and compliance flows.\n\nInvalid requests or unauthorized access results in appropriate errors. Related endpoints allow updating notification settings and fetching notification lists or details.","summary":"Get a member's notification settings from `discussionboard_member_notification_settings`.","parameters":[{"name":"id","description":"ID of the notification settings record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Current notification delivery and type preferences for the member.","typeName":"IDiscussionboardMemberNotificationSettings"},"authorizationRoles":["member","admin"],"path":"/discussionboard/notifications/memberNotificationSettings/{id}","method":"get"},{"specification":"Create a new notification settings record for a member in `discussionboard_member_notification_settings`. Used when a user first sets up notification preferences. Only self or admin can create.","description":"This API endpoint is used to create the initial notification settings record for a member in the `discussionboard_member_notification_settings` table. Members typically use it upon onboarding or when first setting their notification preferences. Admins may also set preferences for managed accounts. \n\nThe request must provide the member ID, initial toggle values for different notification types, and delivery channel choices. All business and validation rules are applied: only allowed notification types/settings can be enabled, and only self or admin actors may create records. Redundant creation (multiple records) is prevented via business constraints. Related endpoints exist for settings retrieval and updates.","summary":"Create a member's notification settings in `discussionboard_member_notification_settings`.","parameters":[],"requestBody":{"description":"Initial notification preference data to be stored for the member.","typeName":"IDiscussionboardMemberNotificationSettings.ICreate"},"responseBody":{"description":"The created notification settings record.","typeName":"IDiscussionboardMemberNotificationSettings"},"authorizationRoles":["member","admin"],"path":"/discussionboard/notifications/memberNotificationSettings","method":"post"},{"specification":"Fetch a paged or filtered list of notification settings (e.g., for admin tooling or analytics) from `discussionboard_member_notification_settings`. Admins use for system monitoring/reporting. Supports filtering by member or status.","description":"This API operation returns a paginated and/or filtered set of notification settings records from the `discussionboard_member_notification_settings` table. This is typically used for admin tooling, analytics, or system management; regular members may not access this endpoint. \n\nQuery parameters might include filters for member ID, enabled status of different notification types, date ranges, and paging constraints. Audit logging is enforced. Errors returned for unauthorized access or invalid filter/paging requests. Related endpoints support per-member preference detail, creation, and update.","summary":"List notification settings from `discussionboard_member_notification_settings` (admin/analytics).","parameters":[],"requestBody":{"description":"Search/filter and pagination info for listing notification settings (admin use).","typeName":"IDiscussionboardMemberNotificationSettings.IRequest"},"responseBody":{"description":"A paginated list of notification settings matching filters.","typeName":"IPageDiscussionboardMemberNotificationSettings"},"authorizationRoles":["admin"],"path":"/discussionboard/notifications/memberNotificationSettings","method":"patch"}],"completed":146,"total":170,"step":0,"created_at":"2025-07-22T08:17:18.768Z"},"tokenUsage":{"facade":{"aggregate":{"total":569121,"input":{"total":528002,"cached":0},"output":{"total":41119,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":569121,"input":{"total":528002,"cached":0},"output":{"total":41119,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":569121,"input":{"total":528002,"cached":0},"output":{"total":41119,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":569121,"input":{"total":528002,"cached":0},"output":{"total":41119,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements the deletion of a specific post within a thread for the Discussion Board platform. This operation targets the discussionboard_posts table by ID. It ensures that only authenticated users (typically original authors, moderators, or admins based on RBAC policies) can perform delete requests on posts. Logical deletion is enforced—posts are 'soft deleted' for retention and audit per business/legal rules. The endpoint checks for existence, validates permissions, sets the deleted_at timestamp, and triggers audit logging and notification routines. This is critical for complaint handling, audit transparency, and compliance with discussion platform business rules. The operation also enforces that suspended users or those with insufficient rights cannot delete posts, with error codes for permission denial or not found. Related APIs: Thread, comment, like/dislike, report, and moderation endpoints.","description":"This API endpoint performs the logical deletion of a single post within a discussion thread. Upon receiving a valid authenticated DELETE request for a specific post ID, the system checks:\n\n1. User permissions/role: Only the original post owner, moderator, or admin may initiate the delete.\n2. Post state: Ensures post is not already deleted or part of an ongoing moderation action (e.g., being reviewed).\n3. Consistency with business rules: Sets deleted_at with the current timestamp, records the action in the audit log, and triggers notifications if required.\n\nIf the user is authorized and the post exists, the API updates the post's deleted_at, returning a success response. If permissions are lacking or the post does not exist, returns relevant error. Soft deletion ensures the post is hidden from views but kept for legal/audit compliance. This endpoint is closely related to endpoints for post retrieval, creation, editing, reporting, as well as moderation audit endpoints.","summary":"Delete a post in the discussionboard_posts table (soft-delete by ID).","parameters":[{"name":"id","description":"Post's unique identifier (UUID) to delete. Must match discussionboard_posts.id field.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deletion status and the details of the logically deleted post (e.g., with deleted_at timestamp set).","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts/{id}","method":"delete"},{"specification":"Implements a search, filter, and paging API for listing comments across all threads and posts within the DiscussionBoard domain. This operation targets the discussionboard_comments table and addresses moderator/member/business needs for powerful queries—filter by thread, post, author, date, and status, including full-text and hierarchy support. It supports advanced listing with pagination and sorting, necessary for mod dashboards, user content histories, and client comment lists. The API interlinks with reply/comment trees, moderation workflows, and supports the forum's audit and business rule requirements, returning both comment metadata and structure.","description":"This API retrieves a list of comments—potentially across all posts/threads—filtered, searched, and paged for frontend display or administration. The request body includes:\n\n- Filtering (e.g., by thread, post, member, status, parent_id)\n- Full-text search on comment body and nested replies\n- Pagination controls (cursor, offset, limit)\n- Sorting by created_at, likes, or other metadata\n\nReturns a paginated list with comment objects, hierarchical mappings, and relevant summary info (e.g., total count for client UI). Permission checks restrict deleted/suspended-user comments for non-admin users. Related to comment GET/PUT/DELETE and moderation audit APIs. This endpoint ensures high-performance querying and compliance with business logic around visibility, moderation, and retention.","summary":"List/search comments across all posts for the discussionboard_comments table.","parameters":[],"requestBody":{"description":"Request object containing filter, search, sort, and pagination information for comments.","typeName":"IDiscussionboardComment.IRequest"},"responseBody":{"description":"Paginated comment list and meta summary (hierarchy, total count, etc).","typeName":"IPageIDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments","method":"patch"},{"specification":"Retrieves a single comment entity from the discussionboard_comments table by unique ID for the DiscussionBoard forum. Delivers full comment object: metadata, relations (thread, post, parent, author), body text, and status. Enforces access controls (deleted, reported, or suspended-user content is gated by permissions). Necessary for showing comment detail view in UI, for reports, or moderation audits. Supports RBAC and API-layer business logic from requirements.","description":"This endpoint enables users, moderators, or admins to retrieve the full details of an individual comment by its unique ID. The system verifies that the comment is visible (not deleted or hidden due to moderation), the requesting user has permission (e.g., suppressed or hidden comments may only be shown to moderators/admins), and organizes the output to include relations to post/thread, comment text/body, and hierarchy info. This supports detailed thread trees, moderation audit trails, and in-depth reporting of platform discussions. Errors are returned if the comment is not found, hidden, or access is restricted due to business or moderation status.","summary":"Get a single comment by ID from the discussionboard_comments table.","parameters":[{"name":"id","description":"Unique comment ID (UUID) to retrieve details for. Must match discussionboard_comments.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete comment object, including text, metadata, and relations.","typeName":"IDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments/{id}","method":"get"},{"specification":"Creates a new comment within a thread post for the DiscussionBoard. Implements insert/creation to discussionboard_comments table. Validates user authentication, post existence and state (not deleted/locked), and possible business rule (edit window, reply hierarchy). On valid POST, comment is created with parent/child relationships as needed. Triggers notifications, engagement updates, and moderation routines. Strict audit trail. Returns the created comment object including IDs and meta.","description":"This endpoint allows a logged-in member to create a new comment on a specific post (and optionally as a reply to another comment). Request body must include: post ID, comment text, and optionally parent_id for threading. Validates that post exists, user is eligible (not suspended), and that reply/comment business rules are followed (max nesting, edit policy, moderation flags). On success, persists the comment with authorization details, emits notifications to relevant parties, and returns the new comment data. Errors given on invalid post, permission, or failed business rule checks. Closely linked to comment GET, PATCH (list/search), and moderation report APIs.","summary":"Create a new comment (discussionboard_comments) on a discussion post or as a reply.","parameters":[],"requestBody":{"description":"Payload to create a new comment—including post ID, comment text/body, and optional parent_id for threaded replies.","typeName":"IDiscussionboardComment.ICreate"},"responseBody":{"description":"The newly created comment object (with IDs, timestamps, and relational info).","typeName":"IDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments","method":"post"},{"specification":"Updates the content or properties of a single comment in the discussionboard_comments table. Implements 'edit own comment' business logic for members (with time windows) and full edit for moderators/admins. Validates permissions, prevents updates to comments that are locked, deleted, or under moderation action, and ensures audit. Returns updated comment object or relevant error (forbidden, not found, or locked). Full audit logging for compliance.","description":"This API enables a user (comment author within edit window) or moderator/admin (unrestricted) to update an existing comment's properties. PATCH/PUT is used for full replacement of comment text/body or metadata. Enforces business rules: only editable if not deleted, locked, or under active moderation. Requires role check and audit logging. Input includes new comment text/body and optionally parent_id (if supporting hierarchy re-parenting). Returns updated comment or error if business rule is violated. Related to comment GET, POST, DELETE, and moderation endpoints.","summary":"Update a single comment in the discussionboard_comments table by ID.","parameters":[{"name":"id","description":"Unique comment ID (UUID) to update. Must match discussionboard_comments.id field.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the comment (body text, possibly metadata or parent).","typeName":"IDiscussionboardComment.IUpdate"},"responseBody":{"description":"Updated comment object after changes, with audit/compliance info.","typeName":"IDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments/{id}","method":"put"},{"specification":"Implements logical deletion for a comment in the discussionboard_comments table by unique ID. Enforces RBAC: comment can be deleted by author within allowed window or any moderator/admin. Sets deleted_at, hides from normal view, logs deletion for audit/compliance, and updates related indexes. Essential for maintaining community health, enforcing business/moderation rules, and fulfilling audit/legal retention policies. Error/permission management included.","description":"This DELETE operation soft-deletes a comment by its unique ID: sets deleted_at, hides the comment from non-privileged users, but retains it for retention and audit. Validates that the user is eligible—a member can delete their own comment (possibly in allowed time), moderators/admins at all times. Prevents deletion if comment is locked or under current report/moderation. Triggers audit and notification routines. Errors returned for invalid ID, insufficient privilege, or business rule failure. Closely related to comment creation, update, and moderator reporting endpoints.","summary":"Delete a comment by ID (discussionboard_comments, soft-delete).","parameters":[{"name":"id","description":"Unique ID of the comment to logically delete (discussionboard_comments.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result with updated comment record (deleted_at) and status summary.","typeName":"IDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments/{id}","method":"delete"},{"specification":"Implements advanced retrieval (search, pagination, sorting) of comment replies (discussionboard_comment_replies) for the forum's threaded discussion UI and moderation workflows. Returns parent/reply structure, hierarchical mapping, and meta for displaying nested replies, for moderator dashboards and UI clients. Supports filtering by comment, reply, member, date, etc., per business logics and requirements. Tied to core comment/thread APIs and moderation flows, ensuring proper permissions and hiding soft-deleted/inactive replies from normal view.","description":"This API enables moderators, admins, or members to list, search, and paginate comment reply relationships. Clients can filter by parent comment, reply, author, created_at, and status. Useful for rendering threaded, nested discussion UIs, and for moderation or reporting actions. Permissions restrict access to hidden/deleted comments and replies for general users. Returns hierarchically structured reply mappings plus relevant meta for navigating deep discussion threads. Closely linked to core comment and reply manipulation endpoints, as well as moderation/dashboards.","summary":"List/search comment replies (threaded replies) for discussionboard_comment_replies.","parameters":[],"requestBody":{"description":"Filter, search, and paginate options for comment reply search (parent_id, reply_id, member_id, sort, etc.).","typeName":"IDiscussionboardCommentReply.IRequest"},"responseBody":{"description":"Paginated, meta-enriched list of comment replies. Includes parent-reply mappings for nested threads.","typeName":"IPageIDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies","method":"patch"},{"specification":"Retrieves a single comment reply relation from the discussionboard_comment_replies table by ID. Returns detail record for linking parent to reply, with hierarchy, meta, and audit info. Used by nested comment loaders, moderator tools, and dashboards. Enforces visibility business rules, RBAC, and soft-delete policies. Reports error if ID not found or not permitted. Central for reply-structure mapping in forum UIs and audits.","description":"This endpoint returns information on a single comment reply relationship given its unique ID. Outputs parent/reply IDs, creation time, author, and meta for front-end or moderation tracing. Enforces business rule: access is blocked if parent/reply is deleted except for admin/moderator. Used to reconstruct or audit reply trees, resolve disputes, and support advanced UI features for thread navigation. Related to core comment, reply, and thread APIs.","summary":"Get one comment reply relation (discussionboard_comment_replies) by ID.","parameters":[{"name":"id","description":"Unique comment reply ID to retrieve (discussionboard_comment_replies.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment reply object with full info, meta, and audit fields.","typeName":"IDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies/{id}","method":"get"},{"specification":"Creates a new comment reply relationship (discussionboard_comment_replies) for the threaded reply tree in DiscussionBoard. Accepts parent comment and reply IDs in body. Validates that both parent and reply exist and are visible/modifiable per business and moderation rules. On success, commits relation, updates corresponding comment trees, emits necessary notifications, and registers the operation for audit/log. Tied to thread hierarchies, moderation, and nested UI building.","description":"This POST operation registers a new direct reply relationship between two comments—parent and child—for a nested comment structure. Validates user eligibility (member, moderator, admin), checks both comments exist and are not restricted (deleted, not accessible, etc.), enforces business rule (max nesting depth if configured), and commits the reply mapping. Returns newly created relationship object with IDs, timestamps, and hierarchy fields. Related to core comment, thread, and reporting/moderation UIs and APIs.","summary":"Create a comment reply mapping (discussionboard_comment_replies) for threaded discussions.","parameters":[],"requestBody":{"description":"Object containing parent and reply comment IDs (must both exist), with any extra required meta.","typeName":"IDiscussionboardCommentReply.ICreate"},"responseBody":{"description":"Created comment reply mapping object (parent, reply, timestamp, etc).","typeName":"IDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies","method":"post"},{"specification":"Updates properties of a given comment reply mapping in discussionboard_comment_replies by unique ID. Implements business rule for correcting or adjusting reply hierarchies, moderator/admin review, or edit within allowed window by members. Validates permissions and ensures audit trail. Typical usage: moderation; reparenting or correcting thread structure. Returns updated mapping object and triggers hierarchical updates where needed.","description":"Enables updating an existing comment reply mapping: either correcting parent-child relations, adding hierarchical meta, or (for moderators/admins) resolving moderation situations. The PUT request uses reply mapping ID in the path and expects an update object as body (typically parent and/or reply IDs, plus meta). Checks permissions and audit trail requirements. Returns updated mapping object; error on forbidden, not found, or restricted update. Closely relates to comment, reply, and moderation structure APIs.","summary":"Update a single comment reply mapping (discussionboard_comment_replies) by ID.","parameters":[{"name":"id","description":"Unique ID of the comment reply mapping to update. Must correspond to discussionboard_comment_replies.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update object for comment reply mapping (parent_id, reply_id, meta, etc).","typeName":"IDiscussionboardCommentReply.IUpdate"},"responseBody":{"description":"Updated reply mapping object with audit/history info.","typeName":"IDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies/{id}","method":"put"},{"specification":"Deletes a comment reply mapping in discussionboard_comment_replies table using its unique ID. Typically used by moderators, admins, or the original author (within special business logic rules) to remove incorrect or problematic reply mappings. Validates permissions, prevents deletion of mappings in locked or moderated threads, and triggers reply tree recalculations and audit logging. Ensures compliance with audit and hierarchy integrity.","description":"DELETEs a comment reply mapping by ID, removing the row for parent-reply binding. This may affect thread/nesting UIs and triggers recalculation of nested structures. Only available to members (under certain rules), moderators, and admins. Returns the deleted mapping, with confirmation and meta. Error on permissions, mapping not found, or business rule violation. Closely linked to comment, thread, and moderation flow endpoints.","summary":"Delete a comment reply mapping (discussionboard_comment_replies) by its ID.","parameters":[{"name":"id","description":"ID of the reply mapping to delete (discussionboard_comment_replies.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details/confirmation of deleted mapping (parent, reply, meta, etc).","typeName":"IDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies/{id}","method":"delete"},{"specification":"List, search, and paginate attached files for posts in the DiscussionBoard forum. Operates on discussionboard_post_attachments table to provide user/member, moderator, or admin access to post file metadata—e.g., file URIs, names, types, uploaded_by, and timestamps. Supports filtering by post, file type, date, uploader, etc. Implements business logic: only those with appropriate permission view attachments. Returns paged results for efficient UI and moderation interfaces. Related to post, thread, and moderation endpoints.","description":"Enables query/pagination of post attachments for a given set of posts or search filters. Returns attachment records with all file metadata (URI, file_name, file_type, uploaded_at, uploaded_by). Filters support querying by post(s), file type, date range, and uploader. Permissions restrict file access: only authors, thread participants, moderators, and admins can see files. Returns paginated/filtered list with relevant meta. Used primarily for display, moderation/audit, and for file/content UI in threads. Closely related to post CRUD and moderation APIs.","summary":"Paginated search/list of post attachment records (discussionboard_post_attachments).","parameters":[],"requestBody":{"description":"Search and paging options for post attachments (filter by post, uploader, file type, date, etc.)","typeName":"IDiscussionboardPostAttachment.IRequest"},"responseBody":{"description":"Paged result of post file attachments with meta info and next-page cursor.","typeName":"IPageIDiscussionboardPostAttachment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/postAttachments","method":"patch"}],"completed":158,"total":170,"step":0,"created_at":"2025-07-22T08:17:31.628Z"},"tokenUsage":{"facade":{"aggregate":{"total":611132,"input":{"total":565930,"cached":7936},"output":{"total":45202,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":611132,"input":{"total":565930,"cached":7936},"output":{"total":45202,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":611132,"input":{"total":565930,"cached":7936},"output":{"total":45202,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":611132,"input":{"total":565930,"cached":7936},"output":{"total":45202,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Delete a moderation log entry by its unique identifier from the discussionboard_moderation_logs Prisma table. Used when an admin or authorized moderator removes a specific audit log entry, typically as part of a compliance activity or data retention policy. The operation must be restricted and audited, ensuring only privileged roles can perform deletions. Soft-delete is possible (as per business rules), but actual row removal mandates admin privileges due to legal retention requirements. Log entries may contain references to deleted content, so this operation must check dependencies before allowing deletion. Deletion must be archived in a separate audit log for traceability.","description":"This API deletes a moderation log entry based on its unique log ID, referencing the discussionboard_moderation_logs table. Only admin users are permitted to perform this operation due to the sensitive nature of audit logs and potential legal retention requirements. The endpoint must verify that no critical dependencies exist before allowing deletion, as moderation logs may reference moderation actions associated with deleted or suspended users and content. The operation should optionally support soft-delete logic, setting a deletion marker rather than removing the record, in accordance with compliance and auditability business rules. Attempting to delete a non-existent or already-deleted log must result in an appropriate error response, and all deletion actions should themselves be recorded in a secondary audit trace for regulatory compliance.","summary":"Delete a single moderation log entry from discussionboard_moderation_logs by its ID.","parameters":[{"name":"id","description":"The unique identifier of the moderation log to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderation/moderationLogs/{id}","method":"delete"},{"specification":"Retrieve a paginated, filterable list of suspension records from the discussionboard_suspension_records Prisma table. Supports searching, filtering by member, moderator, status (active, revoked, expired), and date range. Intended for use by moderators and admins reviewing suspension history or enforcing policy. The operation returns audit-ready detail, observing privacy and compliance requirements. Pagination, sorting, and search parameters are recommended. Business logic must restrict access to authorized roles. Related member, issuer, and revocation information may be joined or referenced for dashboard visualization.","description":"This API endpoint allows retrieval of a paginated and searchable list of suspension records from the discussionboard_suspension_records table. Moderators and admins use this to review member suspensions, check enforcement activity, and analyze historical data for audit or policy purposes. Supported query parameters typically include member ID, moderator ID, status (active, revoked, expired), and time range. Response includes full audit trail information, with relationships to member and moderation details optionally expanded. Results should be paginated and sorted according to request parameters. Access is restricted to roles with at least moderation privileges. Error handling ensures that improper queries or insufficient access are reported with appropriate HTTP status codes.","summary":"Retrieve a paginated, filtered list of suspension records (discussionboard_suspension_records).","parameters":[],"requestBody":{"description":"Filter and pagination information for retrieving suspension records.","typeName":"IDiscussionboardSuspensionRecord.IRequest"},"responseBody":{"description":"Paginated list of suspension records with audit details.","typeName":"IPageIDiscussionboardSuspensionRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/suspensionRecords","method":"patch"},{"specification":"Retrieve a single suspension record by its unique ID from the discussionboard_suspension_records Prisma table. Used to display or audit the details of a specific suspension event for a member, including information about suspension period, issuing moderator, and revocation status. This operation is typically restricted to moderators and admins. Behavior follows access control policies to prevent unauthorized disclosure of disciplinary records. The record includes suspension metadata, timing, reason, and links to affected member and issuer. Not found or unauthorized access returns appropriate errors.","description":"This endpoint returns the full detail for a specific member suspension event, referenced by its unique identifier and stored in the discussionboard_suspension_records table. Use cases include reviewing the enforcement history for a member, checking compliance, and supporting audits or appeals. The returned object contains all audit fields including start/end timestamps, reason, whether the record has been revoked, and metadata about who issued the action. Permissions restrict access to moderation and admin roles. Errors include not found, unauthorized, or retrieval failure due to data corruption.","summary":"Get details of a specific suspension record (discussionboard_suspension_records) by ID.","parameters":[{"name":"id","description":"The unique suspension record ID to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single suspension record with audit fields and related actor/member information.","typeName":"IDiscussionboardSuspensionRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/suspensionRecords/{id}","method":"get"},{"specification":"Create a new suspension record in the discussionboard_suspension_records Prisma table. Used by moderators or admins to suspend a member for a policy or code of conduct violation. The request includes details such as suspended_member_id, issued_by_moderator_id, start_at, end_at, reason, etc. Business logic enforces issuer permissions, validates required fields, and checks for conflicting/overlapping suspensions. The operation must log the action and update member status accordingly. Auditability and compliance are required—record all relevant metadata for later review. The newly created record is returned in the response. Only users with proper authority (moderator, admin) may perform this operation.","description":"This API operation creates a new suspension record for a member, reflecting a suspension action due to rule violations or policy breaches. On valid request, a new row is added to the discussionboard_suspension_records table, with attributes linking to the suspended member, issuing moderator/admin, timeframes, and detailed reason. The system updates associated member status and ensures audit trail creation. Business rules enforce authority checks, reject duplicates or overlaps, and require justification for the suspension. On success, the created suspension record is returned; on validation or policy failure, an error is reported. Access is restricted to moderator and admin roles.","summary":"Create a new member suspension record (discussionboard_suspension_records).","parameters":[],"requestBody":{"description":"Suspension record creation details: member, issuer, timeframe, reason, etc.","typeName":"IDiscussionboardSuspensionRecord.ICreate"},"responseBody":{"description":"Created suspension record, fully populated for audit and reference.","typeName":"IDiscussionboardSuspensionRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/suspensionRecords","method":"post"},{"specification":"Update an existing suspension record in the discussionboard_suspension_records Prisma table. Used when modifying the duration, revocation status, or other attributes of a suspension—possibly in response to an appeal, extension, or clerical error. The ID must correspond to an existing record. Business rules require authority checks, justification logging, and validation of possible changes. All updates are auditable for compliance. Only privileged roles (moderator, admin) can perform this update, and attempts to modify immutable audit fields are rejected. The updated record is returned for confirmation and further audit use.","description":"This endpoint modifies an existing member suspension record, identified by its ID. Common scenarios include extending the suspension period, marking the record as revoked, or correcting administrative errors. The incoming request details the fields to update, with validation and business rule enforcement. Only permitted users (moderators, admins) may use this operation, and all updates must be audit-logged for transparency and compliance. The full, updated suspension record is returned to facilitate further review or workflow. Errors include not found, unauthorized, or invalid update attempts (e.g., changing immutable audit details).","summary":"Update a member suspension record (discussionboard_suspension_records) by ID.","parameters":[{"name":"id","description":"ID of the suspension record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the targeted suspension record.","typeName":"IDiscussionboardSuspensionRecord.IUpdate"},"responseBody":{"description":"Updated suspension record, with all current audit and policy fields.","typeName":"IDiscussionboardSuspensionRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/suspensionRecords/{id}","method":"put"},{"specification":"Delete a suspension record by its unique ID from the discussionboard_suspension_records Prisma table. Designed for rare admin-only actions—such as compliance with legal data erasure requests. The operation enforces strict authority and audit log creation. Deletes must be handled carefully due to implications for member status and policy enforcement history. All deletions are also recorded in a separate audit system. Attempting to delete an active or non-existent record returns an error. Only admins may perform this operation. Soft-delete is preferable for most business cases.","description":"This API removes a suspension record (usually as a soft-delete or in response to a compliance request). Only admins may execute this action, and all deletions are separately audit-logged for compliance and transparency. Deleting a suspension record affects member status and possibly historical audit analysis, so extra checks and restrictions apply. Attempting to delete an active (in-effect) or non-existent record must produce error feedback. Standard use case is legal or compliance-driven data removal—routine expiration is handled via updates. Any deletion is followed by an audit entry recording details of the action and rationale.","summary":"Delete a member suspension record (discussionboard_suspension_records) by ID.","parameters":[{"name":"id","description":"The unique ID of the suspension record to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderation/suspensionRecords/{id}","method":"delete"},{"specification":"Retrieve a filtered, paginated list of warning records from the discussionboard_warning_records Prisma table. Used for moderator dashboards and appeals workflows. Filtering includes warned member, issuing moderator, time range, and warning type. The operation must enforce strict access controls and return audit-compliant detail, with joined actor/member information if useful. Pagination and sorting are included in the request body. Only moderators and admins may access this information.","description":"This API outputs a paginated list of warning records, supporting moderator/admin review, audit, and workflow management. Each warning record includes the warned member, issuer, timestamp, reason, and relevant metadata. The endpoint accepts filtering options such as targeted member, moderator, and date range to narrow results for large datasets. Use cases include checking escalation paths, supporting appeals, and process compliance. Sensitive content is protected by access controls: only trusted user roles can access this data. Response formatting supports dashboard/table visualization, and errors are handled for missing, invalid, or unauthorized requests.","summary":"Get a paginated list of warning records (discussionboard_warning_records) with filters.","parameters":[],"requestBody":{"description":"Dashboard query, search, and pagination for warning records retrieval.","typeName":"IDiscussionboardWarningRecord.IRequest"},"responseBody":{"description":"Paginated warning record list, with audit and member/issuer info.","typeName":"IPageIDiscussionboardWarningRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/warningRecords","method":"patch"},{"specification":"Retrieve a single warning record by its unique ID from the discussionboard_warning_records Prisma table. Used to review or audit individual warnings issued to members, particularly in support of escalation/disciplinary workflows. Business rules enforce access restrictions—only moderators and admins may view warning details. Returned information includes warned member, issuing authority, reason, and timing. Attempting to retrieve a non-existent record or without proper access yields an error response. Each retrieval is logged or counted to support transparency and appeal analytics.","description":"This endpoint provides the full audit detail of a warning event against a member, referenced by its unique identifier and stored in the discussionboard_warning_records table. Common use cases are disciplinary workflow support and appeal investigations by trusted users (moderators/admins). The result object contains member, moderator issuer, message, time, and related policy data. Access is strictly limited. Errors are returned for not found, unauthorized request, or data retrieval issues. Optionally, careful access logging is recommended for privacy policy compliance.","summary":"Get a single warning record (discussionboard_warning_records) by ID.","parameters":[{"name":"id","description":"Identifier of the warning record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Warning record details for audit and workflow.","typeName":"IDiscussionboardWarningRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/warningRecords/{id}","method":"get"},{"specification":"Create a new warning record in the discussionboard_warning_records table. Moderators or admins can use this to record warnings issued to members for infractions or near-violations. Request data includes warned_member_id, issued_by_moderator_id, and warning reason/message. All writes are subject to authorization, must pass validation, and require justification. Created records are returned with their new ID and audit stamp. All actions are audit-logged; business rules enforce that member has not already been warned for the same incident. Only moderators and admins may invoke this operation.","description":"This API writes a new warning record for a member when a moderator or admin issues a warning for a behavioral or rule infraction. Information is written atomically to the discussionboard_warning_records table, referencing both member and issuer for compliance and audit trail requirements. Input validation includes unique checks where needed (e.g., not duplicate warning for same infraction), authority verification, and reason justification. Created warning objects are returned with audit metadata. Unsuccessful writes due to authority or validation issues result in errors. Subsequent disciplinary actions may reference these warnings as escalation steps. Access is limited to authorized roles, with all actions audit-tracked.","summary":"Create a new warning record (discussionboard_warning_records).","parameters":[],"requestBody":{"description":"Creation details for warning record: member, issuer, reason.","typeName":"IDiscussionboardWarningRecord.ICreate"},"responseBody":{"description":"Created warning record, including audit and reference fields.","typeName":"IDiscussionboardWarningRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/warningRecords","method":"post"},{"specification":"Update an existing warning record by its ID in the discussionboard_warning_records table. Used for correcting reason text, updating escalation actions, or marking resolution status. Mutability must be carefully constrained—no historical edits to key audit fields. Authority/validation enforced. Only moderators and admins may update warning records. Attempt to modify non-existent or immutable data returns error. All updates are fully audit-logged; the updated warning record is returned for reference.","description":"This operation modifies an existing warning record in discussionboard_warning_records identified by ID. Valid use cases include correcting text, appending context, or marking a warning as resolved in the case of policy change or member appeal. Only trusted (moderator/admin) users may update. Attempting to change immutable/audit fields, or modify records outside of authority scope, results in error. Updated warning object is returned for workflow and audit consumption. Updates may trigger notifications or downstream process modifications. Full audit of the attempted update is maintained for transparency and regulatory compliance.","summary":"Update a warning record (discussionboard_warning_records) by ID.","parameters":[{"name":"id","description":"The unique warning record ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info for the warning record, such as reason, escalation detail, or resolution flag.","typeName":"IDiscussionboardWarningRecord.IUpdate"},"responseBody":{"description":"Updated warning record object with audit data.","typeName":"IDiscussionboardWarningRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/warningRecords/{id}","method":"put"},{"specification":"Delete a warning record by its unique ID in the discussionboard_warning_records Prisma table. Rare operation for admin (and possibly moderator) only, to remove warning records for compliance or error correction. The operation is tightly restricted to prevent unauthorized erasure of audit trail. Deletions are themselves recorded in audit logs. Attempts to delete non-existent or critical audit records (those in escalation chains) return error. Data retention policies apply. Only admins should be allowed to physically remove warning records; moderators may only request soft-deletion depending on policy.","description":"This API removes a warning record from the discussionboard_warning_records table, as a soft- or hard-delete depending on policy. Used for compliance, error reversal, or in rare workflows that require audit correction. Operation is permitted only to admins (or possibly senior moderators, as per business logic), and all removals are separately audit-logged. If the record is part of an escalation sequence or otherwise protected, deletion is blocked. Non-existent record deletions return error. Results in updated audit trail and possibly notification to compliance systems.","summary":"Delete a warning record (discussionboard_warning_records) by ID.","parameters":[{"name":"id","description":"Unique identifier for the warning record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderation/warningRecords/{id}","method":"delete"},{"specification":"Search and retrieve a paginated, filterable list of content flags from the discussionboard_content_flags Prisma table. Used for moderator review of flagged content, abuse reporting, and system alert dashboards. Endpoint allows searching/filtering by flag_type, flagged_by, moderator, post, comment, auto_flagged, and date range. Pagination and sorting supported for dashboard use. Returned objects include references to all relevant entities and audit timestamps. Access limited to moderators and admins per business/requirements documentation. Results must avoid exposing sensitive user details outside compliant roles. Errors for malformed queries or unauthorized requests are handled appropriately.","description":"This API fetches a paginated, filterable list of content flags (abuse/spam/etc.) for moderation team dashboards. The underlying data comes from discussionboard_content_flags and supports flexible filters: flag type, who set the flag, post or comment references, automations, and time windows. Returned data is suitable for queue management, prioritization, and audit of moderation workloads. Enforces proper access controls—only moderator or admin users can access flagged content detail. Response includes references to posts/comments and all audit fields relevant for workflow. Malformed or unauthorized requests generate well-formatted error messages for client-side feedback and system logs.","summary":"Get a paginated, filtered list of content flags (discussionboard_content_flags) for moderation.","parameters":[],"requestBody":{"description":"Filter/search and pagination info for content flags list retrieval.","typeName":"IDiscussionboardContentFlag.IRequest"},"responseBody":{"description":"Paginated content flag queue for moderation/audit workloads.","typeName":"IPageIDiscussionboardContentFlag"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/contentFlags","method":"patch"}],"completed":170,"total":170,"step":0,"created_at":"2025-07-22T08:17:52.925Z"},"tokenUsage":{"facade":{"aggregate":{"total":653111,"input":{"total":603893,"cached":7936},"output":{"total":49218,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":653111,"input":{"total":603893,"cached":7936},"output":{"total":49218,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":653111,"input":{"total":603893,"cached":7936},"output":{"total":49218,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":653111,"input":{"total":603893,"cached":7936},"output":{"total":49218,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageDiscussionboardMembers":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMembers"}}},"required":["pagination","data"],"description":"Paginated list of board member records.\n\nThis type provides a page of members along with pagination metadata, such as current page and total count, used for directory, admin overview, and advanced filtering. Aligns with standard IPage<T> container types."},"IDiscussionboardMembers":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique member identifier. References the main user entity in the Discussion Board system (see discussionboard_members in Prisma schema).\n\nUsed as foreign key in profiles, authentications, posts, and moderation actions."},"joined_at":{"type":"string","format":"date-time","description":"Member join date/time in ISO 8601 format. Indicates when the registration was successfully completed.\n\nAligns with audit and history requirements of the system."},"status":{"type":"string","description":"Current account status, e.g., 'active', 'pending', or 'suspended'. Business rules govern which APIs/features are available per status.\n\nReflects member enablement and privilege flows."}},"required":["id","joined_at","status"],"description":"Discussion Board member (user) entity type.\n\nCaptures the minimal identity fields for a system user and provides primary linkage for posts, authentications, and profile. Reflects core account state as defined in the discussionboard_members table."},"IDiscussionboardMembers.ICreate":{"type":"object","properties":{"joined_at":{"type":"string","format":"date-time","description":"The registration join date/time (ISO 8601). Must be provided by the API at registration time.\n\nRequired to fulfill audit/logging functions."},"status":{"type":"string","description":"Initial member status, typically 'active' or 'pending'.\n\nAccess rights and onboarding flow may depend on this value."}},"required":["joined_at","status"],"description":"Request body schema for member registration.\n\nSpecifies the minimal properties needed when a new user is created in the system (see business rules for registration and onboarding)."},"IDiscussionboardMembers.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Member status field update. Allows for status transitions (e.g., 'suspended', 'active').\n\nTypical use cases include admin- or system-triggered state changes. This is optional to allow partial updates."}},"required":[],"description":"Member update payload.\n\nCurrently, only the status field is supported for direct update via this schema. Expansion possible in future versions."},"DiscussionBoardModerators.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Optional: Filter moderator role assignments by specific member ID.\n\nWhen provided, narrows search/query for moderators linked to a given member."},"promoted_from":{"type":"string","format":"date-time","description":"Optional: Filter only moderator assignments promoted after this timestamp (ISO8601).\n\nUsed for administrative search tools and audit analytics."},"promoted_to":{"type":"string","format":"date-time","description":"Optional: Only retrieve moderator assignments promoted before this timestamp (ISO8601).\n\nHelps support range searches in dashboards and history views."},"is_active":{"type":"boolean","description":"Optional: Filter for currently active moderator assignments (demoted_at is null)."}},"required":[],"description":"Moderator list/search request schema.\n\nAllows advanced filtering, paging, and search for moderator assignments via admin UI or API."},"DiscussionBoardModerators.IPage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardModerators"}}},"required":["pagination","data"],"description":"Paginated result of moderator role assignments, including relevant metadata for navigation, sorting, and display.\n\nUsed for admin role management UIs and dashboards."},"DiscussionBoardModerators":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique moderator assignment record ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's unique identifier (foreign key to members table)."},"promoted_at":{"type":"string","format":"date-time","description":"Datetime role assignment was granted."},"demoted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If present, date/time moderator was demoted (null if currently active)."},{"type":"null"}],"description":"If present, date/time moderator was demoted (null if currently active)."}},"required":["id","discussionboard_member_id","promoted_at"],"description":"Moderator role entity, includes reference to member, promotion/demotion state, and audit trail.\n\nMatches the structure of discussionboard_moderators table in the Actors domain."},"DiscussionBoardModerators.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's ID to promote to moderator. Must refer to an existing, eligible member account. Business rules prevent duplicate or concurrent roles per member."},"promoted_at":{"type":"string","format":"date-time","description":"Datetime when moderator role is assigned."}},"required":["discussionboard_member_id","promoted_at"],"description":"Request to create a moderator assignment by promoting a member.\n\nAdmin-initiated role elevation to moderator status."},"DiscussionBoardModerators.IUpdate":{"type":"object","properties":{"demoted_at":{"type":"string","format":"date-time","description":"If provided, marks this moderator role assignment as ended at the specified time. Supports soft demotion flows and privilege audits. Optional."}},"required":[],"description":"Moderator role assignment update.\n\nUsed for demotion or privilege state changes tracked via this role entity."},"DiscussionBoardAdmins.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Optional: Filter for admin role assignments belonging to a specific member. Used in broader role audits and assignment histories. Allows precise admin role lookup or targeted revocation workflows."},"elevated_from":{"type":"string","format":"date-time","description":"Optional: Restrict search to admins elevated after this date/time (ISO8601). Workflow for role review, escalation, and analytics."},"elevated_to":{"type":"string","format":"date-time","description":"Optional: Restrict detection to admins elevated before this date/time (ISO8601). Enables time-span-based analytics or review screens."}},"required":[],"description":"Admin assignment search/list request object.\n\nDesigned for advanced access, audit, or reporting flows in role management features."},"DiscussionBoardAdmins.IPage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardAdmins"}}},"required":["pagination","data"],"description":"Paginated array of admin assignment records with metadata for navigation and analytics.\n\nStandard admin list page wrapper."},"DiscussionBoardAdmins":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique record identifier for admin role assignment. Uniquely identifies an admin role for a member."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member account UUID linked to admin role. Foreign key to core actors table."},"elevated_at":{"type":"string","format":"date-time","description":"Datetime when admin privileges were granted. Used for audit, role traceability, and privilege management."}},"required":["id","discussionboard_member_id","elevated_at"],"description":"Admin role assignment entity schema. Refers to a member, elevation timestamp, and unique assignment ID.\n\nEnables management and audit of high-level role states."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number of the result set, starting from 1."},"limit":{"type":"integer","format":"uint32","description":"Number of records per page (client/server negotiation, typically max 100)."},"records":{"type":"integer","format":"uint32","description":"Total number of records in the dataset."},"pages":{"type":"integer","format":"uint32","description":"Total number of result pages, based on records and limit."}},"required":["current","limit","records","pages"],"description":"Standard page result metadata, describing current/total pages, record counts, and per-page sizing (see IPage<T> contract).\n\nUsed throughout all paginated results."}}},"completed":12,"total":186,"step":0,"created_at":"2025-07-22T08:18:22.906Z"},"tokenUsage":{"facade":{"aggregate":{"total":733898,"input":{"total":682844,"cached":7936},"output":{"total":51054,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":733898,"input":{"total":682844,"cached":7936},"output":{"total":51054,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":733898,"input":{"total":682844,"cached":7936},"output":{"total":51054,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":733898,"input":{"total":682844,"cached":7936},"output":{"total":51054,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"DiscussionboardModeratorAction.IUpdate":{"type":"object","properties":{},"description":"Update schema for a moderator action log entry related to the DiscussionBoard moderation domain. This is used for amending action_type, target_type, target_id, or details fields of an existing moderator action record. All properties are optional for partial updates.\n\nAccording to the Prisma schema, it may include moderator ID, action type, target type, target ID, details (notes/justification), and the updated timestamp. Use this type for PATCH/PUT update operations for moderator actions.","required":[]},"DiscussionboardBoard.IRequest":{"type":"object","properties":{},"description":"Request schema for searching, filtering, and paginating board records in the DiscussionBoard forum. Input is sent for advanced query APIs listing available boards. Properties may include page, limit, search, sort, and filter fields as defined by backend API logic.\n\nNo explicit properties are defined here; refer to API documentation for supported search and pagination arguments. Used for PATCH/POST list endpoints for board overviews.","required":[]},"IPageDiscussionboardBoard":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the board page query."},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionboardBoard"},"description":"Array of DiscussionboardBoard records in this page."}},"required":["pagination","data"],"description":"Paginated result container for DiscussionBoard board records, used in list/search APIs. Contains an array of DiscussionboardBoard objects and pagination metadata. Follows IPage<T> container convention described in requirements."},"DiscussionboardBoard":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key ID for the board."},"discussionboard_category_id":{"type":"string","format":"uuid","description":"Reference to the category this board belongs to (foreign key to discussionboard_categories.id)."},"code":{"type":"string","description":"Internal code for the board (unique per platform). Example: 'POLITICS'."},"name":{"type":"string","description":"Name string for board, used for display and search."},"description":{"oneOf":[{"type":"string","description":"Multiline text description about board purpose, rules, or context. Optional."},{"type":"null"}],"description":"Multiline text description about board purpose, rules, or context. Optional."},"is_active":{"type":"boolean","description":"Indicates if the board is visible and open for discussion. Board admins can toggle this."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of board creation, always present."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last modification to the board."}},"required":["id","discussionboard_category_id","code","name","is_active","created_at","updated_at"],"description":"Full board entity type for the DiscussionBoard domain, as described in the business requirements and Prisma ERD. Includes all atomic fields per strict 3NF normalization.\n\nCaptures board's unique identifier, category reference (discussionboard_category_id), code, display name, textual description, activation state, and audit timestamps for creation and update. Used for display, management, and analytics workflows as well as in board listing and detail endpoints."},"DiscussionboardBoard.ICreate":{"type":"object","properties":{"discussionboard_category_id":{"type":"string","format":"uuid","description":"Foreign key UUID of the category this board belongs to."},"code":{"type":"string","description":"Unique code for internal identification (must be globally unique)."},"name":{"type":"string","description":"Human-readable board name for UI and search."},"description":{"oneOf":[{"type":"string","description":"Optional board description for help or context popups."},{"type":"null"}],"description":"Optional board description for help or context popups."},"is_active":{"type":"boolean","description":"Indicates if board is active/visible on creation (default: true)."}},"required":["discussionboard_category_id","code","name","is_active"],"description":"Schema for creating a new DiscussionBoard board. Contains category ID, unique code, display name, optional description, and active flag. Used in board creation endpoints. All fields except description are required; is_active must be specified for business logic/audit consistency."},"DiscussionboardBoard.IUpdate":{"type":"object","properties":{"discussionboard_category_id":{"type":"string","format":"uuid","description":"ID of the new or same parent category for this board."},"code":{"type":"string","description":"New or existing board code."},"name":{"type":"string","description":"Board name; visible to UI end-users."},"description":{"oneOf":[{"type":"string","description":"Updated (or cleared) board description."},{"type":"null"}],"description":"Updated (or cleared) board description."},"is_active":{"type":"boolean","description":"Set to true/false to update board visibility/activation."}},"description":"Update schema for a board entity in DiscussionBoard. All fields optional; provided fields will be updated. Use for PATCH/PUT board update endpoints. Fields mirror those in ICreate except fields can be omitted if unchanged.","required":[]},"DiscussionBoardBoardTopic.IRequest":{"type":"object","properties":{},"description":"Request schema for searching, filtering, and paginating board topics in the DiscussionBoard forum. Input for PATCH/POST APIs listing topics by criteria. Parameters may include pagination, board, code, title, or creator, depending on API implementation.","required":[]},"IPageDiscussionBoardBoardTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Metadata for paginated result (current page, total number of records, pages, etc)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardBoardTopic"},"description":"Topic records on this page."}},"required":["pagination","data"],"description":"Page container for DiscussionBoard board topics, as returned by the topic list/search APIs. Conforms to standard IPage<T> contract with pagination metadata and record array."},"DiscussionBoardBoardTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique board topic ID (primary key)."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Reference to the parent board (discussionboard_boards.id)."},"code":{"type":"string","description":"Unique topic code per board."},"title":{"type":"string","description":"Title of the board topic—used in UI, listings, and search."},"description":{"oneOf":[{"type":"string","description":"Topic summary or context—supports Markdown, optional."},{"type":"null"}],"description":"Topic summary or context—supports Markdown, optional."},"created_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member who created this topic."},"created_at":{"type":"string","format":"date-time","description":"Datetime this topic was created."},"updated_at":{"type":"string","format":"date-time","description":"Datetime topic was last updated."}},"required":["id","discussionboard_board_id","code","title","created_by_member_id","created_at","updated_at"],"description":"Full entity schema for DiscussionBoard board topic. Includes ID, parent board reference (discussionboard_board_id), topic code, title, description, creator member, and timestamps. Used for listing, detail, and management endpoints for board topics."},"DiscussionBoardBoardTopic.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of parent board for this topic."},"code":{"type":"string","description":"Unique code for the topic within the board."},"title":{"type":"string","description":"Title for new topic (required)."},"description":{"oneOf":[{"type":"string","description":"Optional summary/description/body for topic (Markdown supported if UI enables)."},{"type":"null"}],"description":"Optional summary/description/body for topic (Markdown supported if UI enables)."},"created_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member creating this topic."}},"required":["discussionboard_board_id","code","title","created_by_member_id"],"description":"Creation schema for board topic entities. Specifies parent board, unique topic code/title, optional description, and creator member. Used by board topic create endpoints."},"DiscussionBoardBoardTopic.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"New unique code (if updating; may be omitted to keep current)."},"title":{"type":"string","description":"Updated topic title."},"description":{"oneOf":[{"type":"string","description":"Revised or new description for topic (optional)."},{"type":"null"}],"description":"Revised or new description for topic (optional)."}},"description":"Update schema for board topic—the IUpdate contract for modifying topic properties. All fields are optional; send only fields to update. Used in PATCH/PUT update endpoints for DiscussionBoardBoardTopic","required":[]},"IOperationStatus":{"type":"object","properties":{"success":{"type":"boolean","description":"True if the operation completed without error."},"message":{"oneOf":[{"type":"string","description":"Details or diagnostic message about the operation. Included if operation failed or to provide additional info."},{"type":"null"}],"description":"Details or diagnostic message about the operation. Included if operation failed or to provide additional info."}},"required":["success"],"description":"Standardized success/failure indicator for DiscussionBoard operations, per OpenAPI best practices. success true/false indicates if operation succeeded; message provides error or informational detail. Used for delete/operation endpoints."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"int32","description":"Current page number, 1-based."},"limit":{"type":"integer","format":"int32","description":"Number of records per page."},"records":{"type":"integer","format":"int32","description":"Total record count in result set."},"pages":{"type":"integer","format":"int32","description":"Total number of pages, equals records/limit rounded up."}},"required":["current","limit","records","pages"],"description":"Pagination metadata for all IPage<T> result containers in the DiscussionBoard API. Fully aligns with requirements: provides current page, limit/page size, total record count, and number of pages (with ceiling division). Used by all IPage* container types for pagination support."}}},"completed":24,"total":186,"step":0,"created_at":"2025-07-22T08:18:24.186Z"},"tokenUsage":{"facade":{"aggregate":{"total":814959,"input":{"total":761791,"cached":7936},"output":{"total":53168,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":814959,"input":{"total":761791,"cached":7936},"output":{"total":53168,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":814959,"input":{"total":761791,"cached":7936},"output":{"total":53168,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":814959,"input":{"total":761791,"cached":7936},"output":{"total":53168,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardPostReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for this post report. It corresponds to the 'id' field in the Prisma table `discussionboard_post_reports`. This value is required for consistent referencing and system operations.\n\nUUID values ensure global uniqueness and support system-wide identification, including audit and moderation workflows."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"The identifier of the post being reported. References a record in the posts entity, not a foreign key constraint, but used to trace moderation and reporting chains.\n\nSupports audit, abuse tracking, and is used in moderation dashboards."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Identifier of the member who reported the post. This is a foreign key to the reporting user, essential for quota enforcement (e.g., max 10 reports/day) and audit compliance.\n\nUsed for tracking user engagement, abuse control, and reporting rate limits."},"reason":{"type":"string","description":"The reason provided by the member for reporting this post. Supports normalized atomic reasons. Examples include 'Spam', 'Hate speech', etc.\n\nFreeform string per business rule. Used for moderation filtering and insight analytics."},"created_at":{"type":"string","format":"date-time","description":"The timestamp the report was created. Full ISO8601 string. Used for rate-limiting and workflow ordering.\n\nRequired by business compliance and for effective moderation review."}},"required":["id","discussionboard_post_id","discussionboard_member_id","reason","created_at"],"description":"A record of a post report submitted by a member, stored in the Prisma table `discussionboard_post_reports`. Represents an abuse/reporting event linked to a particular post for moderation review.\n\nIncludes all key fields required for audit, business rule, and review workflows in the discussion board system."},"IDiscussionboardPostReport.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID identifier of the post the member is reporting. Cross-references `discussionboard_posts.id`."},"reason":{"type":"string","description":"Human-readable reason for reporting this post. Examples: 'Spam', 'Offensive language'. Fulfills normalized business logic."}},"required":["discussionboard_post_id","reason"],"description":"Input payload used to create a new post report in the discussion board system. Sent by authenticated users when submitting a report via the API.\n\nMatches the writable fields as per the Prisma schema and business rules. `discussionboard_member_id` (the reporter) is inferred from authentication context."},"IDiscussionboardPostReport.IUpdate":{"type":"object","properties":{"reason":{"type":"string","description":"(Optional) Updates the reason provided for this report. May be used for correction or moderator commentary, as permitted by business rules."}},"required":["reason"],"description":"Payload used for updating an existing post report record. Primarily used by moderators or admins for workflow correction.\n\nIncludes only mutable fields. In most cases, only `reason` can be revised."},"IDiscussionboardPostReport.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the delete operation was successful."},"deleted_id":{"type":"string","format":"uuid","description":"UUID of the deleted report, confirming which entity was removed. For audit and client UI confirmation."}},"required":["success","deleted_id"],"description":"Result/confirmation object returned by a delete operation on a post report in the system. Used for client confirmation and audit trail."},"IDiscussionboardCommentReport.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter for reports related to a specific comment. UUID as per the `discussionboard_comments.id` field."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter to show reports made by a specific member (the reporter). Corresponds to `discussionboard_members.id`."},"reason":{"type":"string","description":"Text search or filter for the report reason. Matches normalized 'reason' field for analytics or workflow triage."},"page":{"type":"integer","format":"int32","description":"Pagination: page number. Used to browse paginated results. Follows the system's standard page-based navigation."},"limit":{"type":"integer","format":"int32","description":"Pagination: maximum records per page. Used for API scalability and frontend client batching."}},"required":[],"description":"Query and filter parameters for listing/searching comment reports in the moderation view. Used to retrieve paginated results by moderators/admins.\n\nAll parameters are optional, supporting flexible query composition for moderation dashboards."},"IPageDiscussionboardCommentReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentReport"},"description":"Array of comment report summary/details."}},"required":["pagination","data"],"description":"Paginated list result structure for comment reports. Matches the standard IPage<T> interface for the discussion board system.\n\nSupplies both page metadata and array of comment report objects, supporting robust UI/data traversal for moderators/admins."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"int32","description":"Current page number in pagination. @format uint32"},"limit":{"type":"integer","format":"int32","description":"Number of items per page. @default 100; @format uint32"},"records":{"type":"integer","format":"int32","description":"Total count of matching records. Used to calculate total pages. @format uint32"},"pages":{"type":"integer","format":"int32","description":"Total number of pages in the result set. @format uint32"}},"required":["current","limit","records","pages"],"description":"Page information for any paginated response. Standardized structure for all paginated API results in the system."},"IDiscussionboardCommentReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for this comment report. Refers to the `id` in the Prisma `discussionboard_comment_reports` table."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"The comment that was reported. Corresponds to `discussionboard_comments.id`."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member (reporter) who filed the report. Corresponds to `discussionboard_members.id`."},"reason":{"type":"string","description":"Reason string describing why the report was made. Freeform by business rule."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the report was submitted, ISO8601."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","reason","created_at"],"description":"Entity representing a report submitted against a comment by a member. Matches an entry in the `discussionboard_comment_reports` Prisma table, including all key audit, relationship, and business logic fields required for moderation workflow."},"IDiscussionboardCommentReport.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment (UUID) being reported. Cross-references `discussionboard_comments.id`."},"reason":{"type":"string","description":"Freeform reason from the reporting member, e.g., 'Spam', 'Profanity', etc. Used for moderation workflow."}},"required":["discussionboard_comment_id","reason"],"description":"Input object for creating a new report against a comment. Fields align with writable data by end-users in the API, and mapped to the discussion board's moderation reporting workflow."},"IDiscussionboardCommentReport.IUpdate":{"type":"object","properties":{"reason":{"type":"string","description":"Revised/updated reason for report, allowed under moderation audit/correction or special business rules."}},"required":["reason"],"description":"Payload for updating (correcting) the reason or details for an existing comment report. Only used by moderation/admin workflows as allowed by business policy."},"IDiscussionboardCommentReport.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates if the deletion was successful."},"deleted_id":{"type":"string","format":"uuid","description":"UUID of the deleted comment report."}},"required":["success","deleted_id"],"description":"Result/confirmation object returned after deleting a comment report. Used for client workflow and audit confirmation."},"IDiscussionboardTagProposal.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) Filter proposals by member ID. Useful for showing a member's submissions for moderation review."},"proposed_tag":{"type":"string","description":"(Optional) Partial or exact-match filter on the tag string proposed by members. Used for search and moderation curation."},"page":{"type":"integer","format":"int32","description":"Pagination page number for listing moderation requests."},"limit":{"type":"integer","format":"int32","description":"Max number of proposals to return per page. Used for pagination, scalability, and rate-limiting."}},"required":[],"description":"Filter and query parameters for listing/searching tag proposals submitted by members. Used in the moderation and curation dashboard APIs. All properties are optional for flexible queries."},"IPageDiscussionboardTagProposal":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardTagProposal"},"description":"The array of tag proposal summary/detail objects for the page."}},"required":["pagination","data"],"description":"Paginated array result structure for listing tag proposals. Follows system-standard IPage<T> response contracts to handle metadata and records."},"IDiscussionboardTagProposal":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID of the tag proposal, as assigned in the Prisma table."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's UUID who submitted this tag proposal."},"proposed_tag":{"type":"string","description":"Normalized string proposed as a new topic tag. Subject to curation/moderation rules."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the proposal was submitted."}},"required":["id","discussionboard_member_id","proposed_tag","created_at"],"description":"Entity representing a member-submitted proposal for a new topic tag in the forum. Tracks all business and audit fields per moderation requirements."}}},"completed":36,"total":186,"step":0,"created_at":"2025-07-22T08:18:31.274Z"},"tokenUsage":{"facade":{"aggregate":{"total":896214,"input":{"total":840769,"cached":7936},"output":{"total":55445,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":896214,"input":{"total":840769,"cached":7936},"output":{"total":55445,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":896214,"input":{"total":840769,"cached":7936},"output":{"total":55445,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":896214,"input":{"total":840769,"cached":7936},"output":{"total":55445,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardPostAttachment.IUpdate":{"type":"object","properties":{"file_name":{"type":"string","description":"The display name of the attachment file. A user-friendly name presented in the UI; atomic text value used for identification and download purposes.\n\nMaps to the 'file_name' column in Prisma's 'discussionboard_post_attachments' table. If updated, changes how the file appears attached to the post—not used for the file storage name."},"file_type":{"type":"string","description":"MIME type representing the file, e.g., 'image/png', 'application/pdf'.\n\nThis field dictates preview/handling logic on the frontend. Maps to 'file_type' in the Prisma schema; updating may impact interface and download. Set to the new type when the file is replaced."},"file_uri":{"type":"string","description":"The URI or location of the actual file. Used to retrieve/download the file.\n\nMirrors the 'file_uri' field in the database. An update here may point to a new file version or replacement file. Must be a valid URI/URL (can be a remote or internal resource, such as AWS S3, CDN, etc.)."}},"required":["file_name","file_type","file_uri"],"description":"Update payload for post attachment record in the Discussion Board system. Each field corresponds to metadata for a file attached to a forum post. When updating, all three fields must be supplied to fully replace the attachment metadata. Descriptions based on the 'discussionboard_post_attachments' Prisma model and platform requirements.\n\nThis object is used in PUT/UPDATE operations and provides strong normalization between request data and audit tracking for compliance."},"IDeleteResult":{"type":"object","properties":{"status":{"type":"string","description":"Status message of the delete operation. Indicates whether the deletion was successful or provides error context.\n\nTypical values could be 'success', 'not found', 'already deleted', or detailed error messages, depending on business logic."},"deleted_at":{"oneOf":[{"type":"string","description":"ISO 8601 timestamp when the resource was deleted.\n\nNull if the object was previously deleted or the resource did not exist. Used for audit, compliance, and confirming time of logical/soft delete. Mirrors 'deleted_at' fields in Prisma soft-delete patterns."},{"type":"null","description":"ISO 8601 timestamp when the resource was deleted.\n\nNull if the object was previously deleted or the resource did not exist. Used for audit, compliance, and confirming time of logical/soft delete. Mirrors 'deleted_at' fields in Prisma soft-delete patterns."}],"description":"ISO 8601 timestamp when the resource was deleted.\n\nNull if the object was previously deleted or the resource did not exist. Used for audit, compliance, and confirming time of logical/soft delete. Mirrors 'deleted_at' fields in Prisma soft-delete patterns."}},"required":["status"],"description":"Result object returned after a DELETE (or soft-delete) API operation. Provides status of the delete action along with a timestamp if the action succeeded and was recorded. Standardized for Discussion Board resource deletion results."},"IDiscussionboardPostLike.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Filter by target post's UUID. Only like records associated with this post will be returned.\n\nDirectly aligns with 'discussionboard_post_id' in 'discussionboard_post_likes'. Allows clients to query for all likes on a single post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter by the member's UUID who gave likes. Can be used for dashboards showing what a particular member has liked.\n\nDirectly aligns with 'discussionboard_member_id' in 'discussionboard_post_likes'."},"from_created_at":{"type":"string","format":"date-time","description":"Start of the time range for filtering like records, using ISO 8601 datetime. Only likes created at or after this are returned."},"to_created_at":{"type":"string","format":"date-time","description":"End of the time range for like records, using ISO 8601 datetime. Only likes created at or before this timestamp will be included."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Defaults to 1 if not provided. Used for navigating large result sets."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of results to return per page. Defaults to system standard if not set. Used for pagination control."}},"description":"Request object for listing or searching DiscussionBoard post like records. All fields are optional and provide filtering/pagination for querying the 'discussionboard_post_likes' table. Maps to engagement analytics and personal dashboard needs.","required":[]},"IPageIDiscussionboardPostLike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostLike"},"description":"List of post like record objects matching the list query."}},"required":["pagination","data"],"description":"A paginated list of 'discussionboard_post_likes' records. Combines pagination meta (page/limit/total/etc.) and the core data set for client consumption. Used across all API endpoints returning bulk like data."},"IDiscussionboardPostLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post like record. Directly matches 'id' in the Prisma schema table. Used for referencing and auditing."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Post UUID that this like is attached to. Connects the like event with the forum post.\n\nReferences 'discussionboard_post_id' in 'discussionboard_post_likes'."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member UUID for the user who liked the post. Shows who performed the like action."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the like was given. Used in analytics and UI feeds."}},"required":["id","discussionboard_post_id","discussionboard_member_id","created_at"],"description":"Represents a single member's like on a discussion post in the 'discussionboard_post_likes' table. Every like is atomic, immutable, and tied to both a member and a post per business rules. This model is central for engagement, trending calculations, and moderator review."},"IDiscussionboardPostLike.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post's UUID. When creating a like, this is the post to be liked. Must refer to a valid post already in the system."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member UUID who is liking the post. Normally derived from authentication context."}},"required":["discussionboard_post_id","discussionboard_member_id"],"description":"Payload for creating a new post like record in the Discussion Board. Requires both the post and acting member IDs. Fulfills business logic: only one like per post/member pair; API must check for duplicates."},"IDiscussionboardPostLike.IUpdate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post's UUID for updating a like record. Normally cannot be changed for existing records, but included for update compliance if schema allows post reattribution."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member UUID for updating like attribution (typically not allowed in production, but present for audit/admin fix use cases)."}},"description":"Update data for a post like record in the Discussion Board. These fields may be only exposed to admins/moderators for audit correction. In production, like relationships are normally immutable post-creation.\n\nMirrors 'discussionboard_post_likes' schema fields.","required":[]},"IDiscussionboardPostDislike.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Filter for dislikes on a given post. UUID aligns with 'discussionboard_post_id' in the table."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter for dislikes from a specific member. UUID aligns with 'discussionboard_member_id' in 'discussionboard_post_dislikes'."},"from_created_at":{"type":"string","format":"date-time","description":"Low-end of creation time filter, using ISO 8601 datetime. Inclusive."},"to_created_at":{"type":"string","format":"date-time","description":"High-end of creation time filter."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Limit of records per page."}},"description":"Query/filter object for searching dislikes on posts within the Discussion Board. All fields are optional and provide flexible querying for moderation tools, analytics, or user dashboards.","required":[]},"IPageIDiscussionboardPostDislike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostDislike"},"description":"Array of post dislike records for the current result page."}},"required":["pagination","data"],"description":"Paginated result set for post dislikes. Combines pagination metadata and result array of dislike entries. Used by moderator dashboards, analytics, and user profile/history screens."},"IDiscussionboardPostDislike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post dislike record. Corresponds to 'id' in 'discussionboard_post_dislikes'."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post's ID. Indicates which post the dislike is for."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's UUID who disliked the post."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when the dislike event occurred."}},"required":["id","discussionboard_post_id","discussionboard_member_id","created_at"],"description":"Represents a single member's dislike on a discussion post. Stored atomically in 'discussionboard_post_dislikes'. Each record is an immutable event reflecting negative feedback, used for moderation and analytic workflows."},"IDiscussionboardPostDislike.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post being disliked. Must exist in the system."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member disliking the post. Set from the authentication/user context."}},"required":["discussionboard_post_id","discussionboard_member_id"],"description":"Payload for creating a post dislike record in the Discussion Board. Requires post and member UUID. Validates no duplicate entries are created for post/member pair per business rule."},"IDiscussionboardPostDislike.IUpdate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post for updating a dislike record. In practice, should only be used in admin/audit scenarios for post reattribution."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Updated member UUID for the dislike event, if necessary for audit correction."}},"description":"Update object for post dislike record on the Discussion Board. These operations are generally highly restricted and intended only for audit/admin repair workflows; normal like/dislike relationships should not be changed in end-user flows.\n\nProperties match the table schema; all fields optional for partial updates.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":1,"description":"Current page number in the paginated result set. The first page is always 1."},"limit":{"type":"integer","minimum":1,"description":"Maximum record count per page. Controls list size returned for each page, aids in UI design and server resource management."},"records":{"type":"integer","minimum":0,"description":"Total number of records matching the pagination query, regardless of paging window. Used to compute totalPages."},"pages":{"type":"integer","minimum":1,"description":"Total number of available pages in this result set, computed as ceil(records / limit)."}},"required":["current","limit","records","pages"],"description":"Standard pagination metadata for all IPage results in the Discussion Board API. Enables clients to build proper navigation, display total result size, and compute page indexes."}}},"completed":48,"total":186,"step":0,"created_at":"2025-07-22T08:18:37.528Z"},"tokenUsage":{"facade":{"aggregate":{"total":977755,"input":{"total":919748,"cached":7936},"output":{"total":58007,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":977755,"input":{"total":919748,"cached":7936},"output":{"total":58007,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":977755,"input":{"total":919748,"cached":7936},"output":{"total":58007,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":977755,"input":{"total":919748,"cached":7936},"output":{"total":58007,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"DiscussionBoardTopicTag.IRequest":{"type":"object","properties":{"filter":{"type":"string","description":"A filter string for searching topic tags by name or partial name. Implements search and discovery UX as described in the business logic.\n\nFulfills the requirement that users, moderators, or admins can search for tags efficiently. Corresponds to the normalized tag lookup function. Null or empty string retrieves all tags."},"is_active":{"oneOf":[{"type":"boolean","description":"Boolean filter for limiting results to only active or inactive tags. If null, returns all tags regardless of active status.\n\nSupports the admin/moderator curation workflow for enabled/disabled tags. Business rule compliance for tag listing interfaces."},{"type":"null","description":"Boolean filter for limiting results to only active or inactive tags. If null, returns all tags regardless of active status.\n\nSupports the admin/moderator curation workflow for enabled/disabled tags. Business rule compliance for tag listing interfaces."}],"description":"Boolean filter for limiting results to only active or inactive tags. If null, returns all tags regardless of active status.\n\nSupports the admin/moderator curation workflow for enabled/disabled tags. Business rule compliance for tag listing interfaces."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"The page number for paginated results (1-based). Implements standard pagination for list APIs.\n\nEnables large tag set navigation in UIs and moderation tools. Fulfills performance and usability requirements."},{"type":"null","minimum":1,"description":"The page number for paginated results (1-based). Implements standard pagination for list APIs.\n\nEnables large tag set navigation in UIs and moderation tools. Fulfills performance and usability requirements."}],"description":"The page number for paginated results (1-based). Implements standard pagination for list APIs.\n\nEnables large tag set navigation in UIs and moderation tools. Fulfills performance and usability requirements."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"The number of results per page. Null means use the system default (see discussionboard_settings for reference).\n\nBusiness rule: Allows admins/moderators to control result batch size for improved curation UX."},{"type":"null","minimum":1,"description":"The number of results per page. Null means use the system default (see discussionboard_settings for reference).\n\nBusiness rule: Allows admins/moderators to control result batch size for improved curation UX."}],"description":"The number of results per page. Null means use the system default (see discussionboard_settings for reference).\n\nBusiness rule: Allows admins/moderators to control result batch size for improved curation UX."}},"required":[],"description":"Request body for listing, searching, and paginating topic tags in the discussion board domain.\n\nImplements filtering and query requirements for admins, moderators, and user search scenarios as described in the requirements analysis. Follows normalization and business logic constraints for scalable tag browsing."},"IPageDiscussionBoardTopicTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardTopicTag"},"description":"Array of topic tag objects for the requested page. Each represents a discussion domain tag and follows normalized structure."}},"required":["pagination","data"],"description":"Paginated result list of topic tags.\n\nImplements the container for list/search endpoints on discussionboard_topic_tags. Includes pagination metadata and the array of topic tag entity objects as defined by business and normalization rules."},"DiscussionBoardTopicTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the topic tag record.\n\nImplements the primary key for topic tag management as referenced in the Prisma schema and ERD. Critical for updates, deletion, and assignment workflows."},"name":{"type":"string","description":"Canonical name of the topic tag. This is unique and used for display, search, and tag assignment workflows.\n\nFulfills the requirement that tags must be unique and human-readable. Enforced for consistency and normalization."},"is_active":{"type":"boolean","description":"Indicates whether this topic tag is enabled for use/assignment.\n\nFulfills the business rule for moderated/cured tags. Used to control tag visibility in UI and assignment logic."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the topic tag was created (ISO 8601 format).\n\nImplements audit, search, filter, and moderation flows. Required by business rules for history and compliance."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp for the tag (ISO 8601). Supports audit trail, updates, and UI freshness requirements as per business policy."}},"required":["id","name","is_active","created_at","updated_at"],"description":"Represents a single topic tag entity.\n\nImplements normalization for curated tagging, search, curation/moderation, and assignment to threads/topics as specified in business and domain requirements. Underlies workflows for tag management and content discovery across the discussion board system."},"DiscussionBoardTopicTag.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Name of the new tag to be created. Must be unique, comply with UI guidelines, and be suitable for assignment to threads/topics.\n\nImplements tag creation flows for admins/moderators per business logic."},"is_active":{"type":"boolean","description":"Whether the new tag is enabled/available for assignment upon creation, as required by moderation and system rules."}},"required":["name","is_active"],"description":"Request payload for creating a new topic tag entity in the board system.\n\nFulfills moderator/admin workflows for curation and assignment per requirements analysis and business logic."},"DiscussionBoardTopicTag.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Updated name for the topic tag, if renaming is permitted by business rule. Must remain unique and UI-suitable."},"is_active":{"type":"boolean","description":"Updated enabled status for this tag, controlling whether it is assignable or visible in UI."}},"required":["name","is_active"],"description":"Request payload for updating a topic tag record.\n\nImplements moderator/admin workflows for tag curation, correction, and moderation action per business rules and requirements."},"DiscussionBoardBoardAnnouncement.IRequest":{"type":"object","properties":{"filter":{"type":"string","description":"Text to search for in the announcement title or body. Implements requirement for rapid discovery of relevant announcements in UIs.\n\nNull or empty means no filter (all announcements)."},"board_id":{"type":"string","format":"uuid","description":"Optional board ID to filter announcements by their associated board/forum. Implements business logic for scoping and navigation in moderation/admin UX. Null returns all boards (global search)."},"is_pinned":{"oneOf":[{"type":"boolean","description":"Filters only pinned or unpinned announcements. Null yields all.\n\nCorresponds to business logic for board message curation and UI prioritization."},{"type":"null","description":"Filters only pinned or unpinned announcements. Null yields all.\n\nCorresponds to business logic for board message curation and UI prioritization."}],"description":"Filters only pinned or unpinned announcements. Null yields all.\n\nCorresponds to business logic for board message curation and UI prioritization."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Page number for pagination. 1-based, follows site-wide paging UI standards."},{"type":"null","minimum":1,"description":"Page number for pagination. 1-based, follows site-wide paging UI standards."}],"description":"Page number for pagination. 1-based, follows site-wide paging UI standards."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Limit for number of announcements per page. Null defaults to system or settings-driven value; supports moderator UX/performance rules."},{"type":"null","minimum":1,"description":"Limit for number of announcements per page. Null defaults to system or settings-driven value; supports moderator UX/performance rules."}],"description":"Limit for number of announcements per page. Null defaults to system or settings-driven value; supports moderator UX/performance rules."}},"required":[],"description":"Request object for listing/searching board announcements in the discussion board system.\n\nImplements filtering and paginated access per board, pin status, and search query as required by admins/moderators and end-user UIs."},"IPageDiscussionBoardBoardAnnouncement":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardBoardAnnouncement"},"description":"Paginated array of board announcements matching filter/criteria."}},"required":["pagination","data"],"description":"Paginated result list of board announcement objects.\n\nImplements the response envelope for announcement list APIs, including pagination meta and normalized data arrays."},"DiscussionBoardBoardAnnouncement":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the announcement record."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board ID this announcement is attached to. Implements business rules for board/announcement linking and scoped visibility."},"published_by_admin_id":{"type":"string","format":"uuid","description":"ID of the admin who published this announcement. Used for audit, transparency, and business logic for privilege enforcement."},"title":{"type":"string","description":"Title of the announcement. Used in UI summary, search, highlights, and auditing."},"body":{"type":"string","description":"Full markdown message body of the announcement. Implements content delivery, legal compliance (rules changes), and onboarding."},"is_pinned":{"type":"boolean","description":"Whether this announcement is 'sticky' (UI-prioritized) for the board. Only one can be pinned per board at once, per business logic."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the announcement (ISO 8601 for audit/logic)."},"updated_at":{"type":"string","format":"date-time","description":"Last modification date of this record (audit trail, moderation logic)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp; null if this is still live. Implements audit/legal retention and compliance workflows."},{"type":"null","format":"date-time","description":"Soft-deletion timestamp; null if this is still live. Implements audit/legal retention and compliance workflows."}],"description":"Soft-deletion timestamp; null if this is still live. Implements audit/legal retention and compliance workflows."}},"required":["id","discussionboard_board_id","published_by_admin_id","title","body","is_pinned","created_at","updated_at"],"description":"Normalized board announcement object for announcements API domain.\n\nImplements audit, notification, curation, and UI presentation requirements for board-based communications per requirements analysis and Prisma schema."},"IDiscussionboardBoardAnnouncements.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Target board ID to link new announcement to. Important for UI scoping, notifications, and compliance logic."},"published_by_admin_id":{"type":"string","format":"uuid","description":"Admin or moderator ID publishing this announcement. Required for privilege checks, audit trail, and accountability."},"title":{"type":"string","description":"Human-readable title for announcement. Source for summaries, highlights, and legal review."},"body":{"type":"string","description":"Full markdown body of announcement. Underlies community guideline updates, onboarding, alerts."},"is_pinned":{"type":"boolean","description":"Indicates if this announcement should be sticky in the UI for this board as required by UX/business logic."}},"required":["discussionboard_board_id","published_by_admin_id","title","body","is_pinned"],"description":"Payload for creating a board announcement. Used in admin/moderator publishing workflows, onboarding, and policy updates per business/domain requirements."},"IDiscussionboardBoardAnnouncements":{"type":"object","properties":{"id":{"type":"string","format":"uuid"},"discussionboard_board_id":{"type":"string","format":"uuid"},"published_by_admin_id":{"type":"string","format":"uuid"},"title":{"type":"string"},"body":{"type":"string"},"is_pinned":{"type":"boolean"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null","format":"date-time"}]}},"required":["id","discussionboard_board_id","published_by_admin_id","title","body","is_pinned","created_at","updated_at"],"description":"Full board announcement entry for admin/moderator dashboards and notification flows.\n\nImplements announcement auditing, update, and curation flows for policy dissemination and community management."},"IDiscussionboardBoardAnnouncements.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"New or updated title for the board announcement."},"body":{"type":"string","description":"New or updated body (markdown-compatible) for the announcement."},"is_pinned":{"type":"boolean","description":"Update for sticky/pinned status in the board's UI. Only one per board can be pinned at once."}},"required":["title","body","is_pinned"],"description":"Payload for updating an existing board announcement record, as used in admin/moderator policy workflows.\n\nEnables rapid revision of board messages in compliance with business logic and audit trail requirements."},"IDiscussionboardThreads.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter for returning only threads in the given board. Implements board-level navigation and moderation flows."},"status":{"type":"string","description":"Requested thread status (e.g. 'open', 'closed', 'locked', etc.). If null or omitted, returns all threads.\n\nUsed in moderation, browsing, and dashboard filtering."},"filter":{"type":"string","description":"Search string for thread title, description, or keywords. Implements advanced UI search, moderation, and business-driven content discovery."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination—page number. 1-based. Fulfills UI, dashboard, and performance business rules for scalable thread browsing."},{"type":"null","minimum":1,"description":"Pagination—page number. 1-based. Fulfills UI, dashboard, and performance business rules for scalable thread browsing."}],"description":"Pagination—page number. 1-based. Fulfills UI, dashboard, and performance business rules for scalable thread browsing."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Number of thread records to return per page. Implements business and system default constraints as required in requirements."},{"type":"null","minimum":1,"description":"Number of thread records to return per page. Implements business and system default constraints as required in requirements."}],"description":"Number of thread records to return per page. Implements business and system default constraints as required in requirements."}},"required":[],"description":"Payload for listing and searching discussion threads. Fulfills business/domain requirements for scalable, filterable thread retrieval—used in admin, mod, and member UI in the discussion board system."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":1,"description":"Current page number."},"limit":{"type":"integer","minimum":1,"description":"Number of records per page. Default 100."},"records":{"type":"integer","minimum":0,"description":"Total records in the database for this query."},"pages":{"type":"integer","minimum":1,"description":"Total number of available pages for this query set."}},"required":["current","limit","records","pages"],"description":"Page metadata for paginated results per IPage<T> standard interface, as required by scalable business logic, UI, and analytics dashboards."}}},"completed":60,"total":186,"step":0,"created_at":"2025-07-22T08:18:39.879Z"},"tokenUsage":{"facade":{"aggregate":{"total":1059466,"input":{"total":998707,"cached":7936},"output":{"total":60759,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1059466,"input":{"total":998707,"cached":7936},"output":{"total":60759,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1059466,"input":{"total":998707,"cached":7936},"output":{"total":60759,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1059466,"input":{"total":998707,"cached":7936},"output":{"total":60759,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardMemberAuthentication.IUpdate":{"type":"object","properties":{"provider":{"type":"string","description":"The authentication provider name (e.g., 'local', 'google', 'kakao').\n\nThis value maps the authentication method for the identity record and must match values accepted by the authentication pipeline. Directly references the 'provider' column in the discussionboard_member_authentications table."},"provider_identifier":{"type":"string","description":"A unique identifier per provider – may be a username, email (for local), or external user ID (for OAuth, SSO).\n\nDirectly references 'provider_identifier' column and is required for provider-identity disambiguation."},"password_hash":{"oneOf":[{"type":"string","description":"The hash of the user's credential (never cleartext password). Required for 'local' provider, must be null for OAuth logins.\n\nReferences 'password_hash' column. If updating to a new password, this must contain the result of the system password hashing function. May be omitted/null if not updating credential."},{"type":"null","description":"The hash of the user's credential (never cleartext password). Required for 'local' provider, must be null for OAuth logins.\n\nReferences 'password_hash' column. If updating to a new password, this must contain the result of the system password hashing function. May be omitted/null if not updating credential."}],"description":"The hash of the user's credential (never cleartext password). Required for 'local' provider, must be null for OAuth logins.\n\nReferences 'password_hash' column. If updating to a new password, this must contain the result of the system password hashing function. May be omitted/null if not updating credential."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time","description":"The timestamp of the last successful authentication event for this record (ISO 8601).\n\nDirectly references 'last_login_at' column for state update/audit. If updating to log a new auth event, set this to the latest successful login, else null or previous value."},{"type":"null","format":"date-time","description":"The timestamp of the last successful authentication event for this record (ISO 8601).\n\nDirectly references 'last_login_at' column for state update/audit. If updating to log a new auth event, set this to the latest successful login, else null or previous value."}],"description":"The timestamp of the last successful authentication event for this record (ISO 8601).\n\nDirectly references 'last_login_at' column for state update/audit. If updating to log a new auth event, set this to the latest successful login, else null or previous value."}},"required":["provider","provider_identifier"],"description":"Update structure for a member authentication method as stored in discussionboard_member_authentications table. Fields are mapped 1:1 to authentication table columns. Used during password change, provider migration, or login credential updates. Must conform to platform's normalization requirements. For detailed business rules, see DB schema and registration/authentication workflow section."},"IDiscussionBoardMemberAuthentication.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates if the deletion of the member authentication record was successful.\n\nBased on business rules, this may be true if the record was found and deleted, false otherwise."},"deleted_id":{"oneOf":[{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the deleted authentication record.\n\nReferences the 'id' of discussionboard_member_authentications. Set to null if no record was deleted."},{"type":"null","format":"uuid","description":"The unique identifier (UUID) of the deleted authentication record.\n\nReferences the 'id' of discussionboard_member_authentications. Set to null if no record was deleted."}],"description":"The unique identifier (UUID) of the deleted authentication record.\n\nReferences the 'id' of discussionboard_member_authentications. Set to null if no record was deleted."},"message":{"oneOf":[{"type":"string","description":"A descriptive message about the outcome of the delete operation.\n\nUse for audit, compliance or client feedback."},{"type":"null","description":"A descriptive message about the outcome of the delete operation.\n\nUse for audit, compliance or client feedback."}],"description":"A descriptive message about the outcome of the delete operation.\n\nUse for audit, compliance or client feedback."}},"required":["success"],"description":"Response object for deletion of a member authentication record. Includes success flag, deleted record ID, and audit message as per business and audit rules."},"IDiscussionBoardMemberSuspension.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by member's unique ID (UUID).\n\nReferences the 'discussionboard_member_id' column in discussionboard_member_suspensions. Only records matching this member will be included."},{"type":"null","format":"uuid","description":"Filter by member's unique ID (UUID).\n\nReferences the 'discussionboard_member_id' column in discussionboard_member_suspensions. Only records matching this member will be included."}],"description":"Filter by member's unique ID (UUID).\n\nReferences the 'discussionboard_member_id' column in discussionboard_member_suspensions. Only records matching this member will be included."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by the moderator's ID who issued the suspension (UUID).\n\nCorresponds to 'issued_by_moderator_id'. Used for admin dashboards/moderator management."},{"type":"null","format":"uuid","description":"Filter by the moderator's ID who issued the suspension (UUID).\n\nCorresponds to 'issued_by_moderator_id'. Used for admin dashboards/moderator management."}],"description":"Filter by the moderator's ID who issued the suspension (UUID).\n\nCorresponds to 'issued_by_moderator_id'. Used for admin dashboards/moderator management."},"issued_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by the admin's ID who issued the suspension (UUID).\n\nUsed for elevated privilege audits and operational tracking."},{"type":"null","format":"uuid","description":"Filter by the admin's ID who issued the suspension (UUID).\n\nUsed for elevated privilege audits and operational tracking."}],"description":"Filter by the admin's ID who issued the suspension (UUID).\n\nUsed for elevated privilege audits and operational tracking."},"status":{"oneOf":[{"const":"active","description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},{"const":"revoked","description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},{"const":"expired","description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},{"const":"any","description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},{"type":"null","enum":["active","revoked","expired","any"],"description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."}],"description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},"starts_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started after this ISO 8601 datetime."},{"type":"null","format":"date-time","description":"Lower bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started after this ISO 8601 datetime."}],"description":"Lower bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started after this ISO 8601 datetime."},"starts_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started before this ISO 8601 datetime."},{"type":"null","format":"date-time","description":"Upper bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started before this ISO 8601 datetime."}],"description":"Upper bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started before this ISO 8601 datetime."},"ends_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date after this ISO 8601 datetime."},{"type":"null","format":"date-time","description":"Lower bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date after this ISO 8601 datetime."}],"description":"Lower bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date after this ISO 8601 datetime."},"ends_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date before this ISO 8601 datetime."},{"type":"null","format":"date-time","description":"Upper bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date before this ISO 8601 datetime."}],"description":"Upper bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date before this ISO 8601 datetime."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (1-based).\n\nIf omitted or null, defaults to page 1."},{"type":"null","description":"Page number for pagination (1-based).\n\nIf omitted or null, defaults to page 1."}],"description":"Page number for pagination (1-based).\n\nIf omitted or null, defaults to page 1."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of records per page.\n\nIf omitted or null, the default system limit applies (e.g., 100)."},{"type":"null","description":"Maximum number of records per page.\n\nIf omitted or null, the default system limit applies (e.g., 100)."}],"description":"Maximum number of records per page.\n\nIf omitted or null, the default system limit applies (e.g., 100)."}},"description":"Request filter for listing/searching member suspensions.\n\nAll fields map to standard filter/search patterns for the discussionboard_member_suspensions table.","required":[]},"IPageDiscussionBoardMemberSuspension":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMemberSuspension"},"description":"Array of member suspension record results."}},"required":["pagination","data"],"description":"Paginated container for member suspension records in search/list response.\n\nFulfills normalization and audit needs. 'pagination' contains page info; 'data' holds the suspension entries."},"IDiscussionBoardMemberSuspension":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the suspension record.\n\nPrimary key for discussionboard_member_suspensions table. Required for updating, referencing, or auditing the entry."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Target member's unique ID who was suspended.\n\nReferences 'discussionboard_members.id', fulfilling 3NF and traceability."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator ID who issued the suspension, nullable if not issued by moderator.\n\nFK to 'discussionboard_moderators.id'. Business logic distinguishes moderation/admin actions."},{"type":"null","format":"uuid","description":"Moderator ID who issued the suspension, nullable if not issued by moderator.\n\nFK to 'discussionboard_moderators.id'. Business logic distinguishes moderation/admin actions."}],"description":"Moderator ID who issued the suspension, nullable if not issued by moderator.\n\nFK to 'discussionboard_moderators.id'. Business logic distinguishes moderation/admin actions."},"issued_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin ID who issued the suspension, nullable if not admin-issued.\n\nFK to 'discussionboard_admins.id'."},{"type":"null","format":"uuid","description":"Admin ID who issued the suspension, nullable if not admin-issued.\n\nFK to 'discussionboard_admins.id'."}],"description":"Admin ID who issued the suspension, nullable if not admin-issued.\n\nFK to 'discussionboard_admins.id'."},"reason":{"type":"string","description":"Explanation for the suspension event.\n\nRequired for audit, review, and compliance workflows. Populates the 'reason' column."},"starts_at":{"type":"string","format":"date-time","description":"Start datetime when suspension becomes effective.\n\nPopulates 'starts_at' column for feature gating."},"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"End datetime for the suspension. Null if the suspension is permanent or ongoing.\n\nReferences 'ends_at'."},{"type":"null","format":"date-time","description":"End datetime for the suspension. Null if the suspension is permanent or ongoing.\n\nReferences 'ends_at'."}],"description":"End datetime for the suspension. Null if the suspension is permanent or ongoing.\n\nReferences 'ends_at'."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when the suspension was revoked/cancelled before natural end, if applicable.\n\nPopulates 'revoked_at'. Null if never revoked."},{"type":"null","format":"date-time","description":"Datetime when the suspension was revoked/cancelled before natural end, if applicable.\n\nPopulates 'revoked_at'. Null if never revoked."}],"description":"Datetime when the suspension was revoked/cancelled before natural end, if applicable.\n\nPopulates 'revoked_at'. Null if never revoked."}},"required":["id","discussionboard_member_id","reason","starts_at"],"description":"Member suspension record as stored in discussionboard_member_suspensions.\n\nIncludes all fields for display, management, and audit. 1:1 mapped to DB columns per Prisma schema."},"IDiscussionBoardMemberSuspension.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Unique ID of the member to be suspended. Required.\n\nReferences discussionboard_members.id."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderator issuing the suspension, if any.\n\nNull when issued by admin only (non-moderator action). FK to discussionboard_moderators.id."},{"type":"null","format":"uuid","description":"ID of the moderator issuing the suspension, if any.\n\nNull when issued by admin only (non-moderator action). FK to discussionboard_moderators.id."}],"description":"ID of the moderator issuing the suspension, if any.\n\nNull when issued by admin only (non-moderator action). FK to discussionboard_moderators.id."},"issued_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the admin issuing the suspension, if any.\n\nNull if not an admin-issued action. FK to discussionboard_admins.id."},{"type":"null","format":"uuid","description":"ID of the admin issuing the suspension, if any.\n\nNull if not an admin-issued action. FK to discussionboard_admins.id."}],"description":"ID of the admin issuing the suspension, if any.\n\nNull if not an admin-issued action. FK to discussionboard_admins.id."},"reason":{"type":"string","description":"Explanation/reason for the suspension event. Required.\n\nPopulates the 'reason' column for audit/review."},"starts_at":{"type":"string","format":"date-time","description":"Datetime when suspension takes effect (ISO 8601).\n\nUsed for audit and system enforcement."},"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional end datetime (null for permanent suspensions).\n\nPopulates 'ends_at'."},{"type":"null","format":"date-time","description":"Optional end datetime (null for permanent suspensions).\n\nPopulates 'ends_at'."}],"description":"Optional end datetime (null for permanent suspensions).\n\nPopulates 'ends_at'."}},"required":["discussionboard_member_id","reason","starts_at"],"description":"Input structure for creating a member suspension record.\n\nThe request must specify target, reason, time bounds, and the issuing actor as defined by business rules."},"DiscussionboardMemberSuspension.IUpdate":{"type":"object","properties":{"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"Updated end datetime, or null to set indefinite/permanent suspension.\n\nPopulates 'ends_at' column if changing suspension timeframe."},{"type":"null","format":"date-time","description":"Updated end datetime, or null to set indefinite/permanent suspension.\n\nPopulates 'ends_at' column if changing suspension timeframe."}],"description":"Updated end datetime, or null to set indefinite/permanent suspension.\n\nPopulates 'ends_at' column if changing suspension timeframe."},"reason":{"oneOf":[{"type":"string","description":"Updated explanation for the suspension. Required for audit if changed.\n\nNull if unchanged."},{"type":"null","description":"Updated explanation for the suspension. Required for audit if changed.\n\nNull if unchanged."}],"description":"Updated explanation for the suspension. Required for audit if changed.\n\nNull if unchanged."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when the suspension was revoked (or to mark as revoked now).\n\nIf null, no revocation performed."},{"type":"null","format":"date-time","description":"Datetime when the suspension was revoked (or to mark as revoked now).\n\nIf null, no revocation performed."}],"description":"Datetime when the suspension was revoked (or to mark as revoked now).\n\nIf null, no revocation performed."}},"description":"Update object for a member suspension record in discussionboard_member_suspensions.\n\nPermits updating end date, reason, and revocation marker subject to admin/moderator privileges.","required":[]},"DiscussionboardMemberSuspension":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the member suspension record.\n\nPrimary key in discussionboard_member_suspensions table."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key to the suspended member's UUID.\n\nLinks to discussionboard_members.id."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator's ID (nullable).\n\nWhen present, indicates moderator-issued suspension; null for admin-only actions."},{"type":"null","format":"uuid","description":"Moderator's ID (nullable).\n\nWhen present, indicates moderator-issued suspension; null for admin-only actions."}],"description":"Moderator's ID (nullable).\n\nWhen present, indicates moderator-issued suspension; null for admin-only actions."},"issued_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin's ID (nullable).\n\nPresent for admin-issued suspensions."},{"type":"null","format":"uuid","description":"Admin's ID (nullable).\n\nPresent for admin-issued suspensions."}],"description":"Admin's ID (nullable).\n\nPresent for admin-issued suspensions."},"reason":{"type":"string","description":"Reason text for why the suspension was issued.\n\nMirrors 'reason' column in table; required for compliance/audit."},"starts_at":{"type":"string","format":"date-time","description":"Datetime when suspension started (ISO 8601).\n\nRequired for system gating and audit."},"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when suspension is set to end (ISO 8601), null for permanent suspension.\n\nDirectly populates 'ends_at'."},{"type":"null","format":"date-time","description":"Datetime when suspension is set to end (ISO 8601), null for permanent suspension.\n\nDirectly populates 'ends_at'."}],"description":"Datetime when suspension is set to end (ISO 8601), null for permanent suspension.\n\nDirectly populates 'ends_at'."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of revocation if suspension was ended early (null otherwise).\n\nFrom column 'revoked_at', for early lifting of suspension."},{"type":"null","format":"date-time","description":"Timestamp of revocation if suspension was ended early (null otherwise).\n\nFrom column 'revoked_at', for early lifting of suspension."}],"description":"Timestamp of revocation if suspension was ended early (null otherwise).\n\nFrom column 'revoked_at', for early lifting of suspension."}},"required":["id","discussionboard_member_id","reason","starts_at"],"description":"Full member suspension entity for discussionboard_member_suspensions. Fields are mapped exactly to the table by column name, supporting management, audit, and enforcement operations."},"DiscussionboardModeratorAction.IRequest":{"type":"object","properties":{"discussionboard_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for actions by specific moderator (UUID).\n\nReferences 'discussionboard_moderators.id'."},{"type":"null","format":"uuid","description":"Filter for actions by specific moderator (UUID).\n\nReferences 'discussionboard_moderators.id'."}],"description":"Filter for actions by specific moderator (UUID).\n\nReferences 'discussionboard_moderators.id'."},"action_type":{"oneOf":[{"type":"string","description":"The type of moderator action to filter for (e.g. 'edit_post', 'delete_comment', 'issue_warning', 'suspend_member').\n\nReferences 'action_type' column and supports dashboard analytics."},{"type":"null","description":"The type of moderator action to filter for (e.g. 'edit_post', 'delete_comment', 'issue_warning', 'suspend_member').\n\nReferences 'action_type' column and supports dashboard analytics."}],"description":"The type of moderator action to filter for (e.g. 'edit_post', 'delete_comment', 'issue_warning', 'suspend_member').\n\nReferences 'action_type' column and supports dashboard analytics."},"target_type":{"oneOf":[{"type":"string","description":"Type of entity affected (e.g. 'post', 'comment', 'member', 'tag'). Optional filter for dashboard and reporting."},{"type":"null","description":"Type of entity affected (e.g. 'post', 'comment', 'member', 'tag'). Optional filter for dashboard and reporting."}],"description":"Type of entity affected (e.g. 'post', 'comment', 'member', 'tag'). Optional filter for dashboard and reporting."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for actions targeting a specific entity by UUID.\n\nMay be a post/comment/member/tag depending on target_type."},{"type":"null","format":"uuid","description":"Filter for actions targeting a specific entity by UUID.\n\nMay be a post/comment/member/tag depending on target_type."}],"description":"Filter for actions targeting a specific entity by UUID.\n\nMay be a post/comment/member/tag depending on target_type."},"action_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for action timestamp filtering (inclusive). ISO 8601 string."},{"type":"null","format":"date-time","description":"Lower bound for action timestamp filtering (inclusive). ISO 8601 string."}],"description":"Lower bound for action timestamp filtering (inclusive). ISO 8601 string."},"action_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for action timestamp filtering (inclusive). ISO 8601 string."},{"type":"null","format":"date-time","description":"Upper bound for action timestamp filtering (inclusive). ISO 8601 string."}],"description":"Upper bound for action timestamp filtering (inclusive). ISO 8601 string."},"page":{"oneOf":[{"type":"integer","description":"Result page (1-based). Defaults to 1 if omitted/null."},{"type":"null","description":"Result page (1-based). Defaults to 1 if omitted/null."}],"description":"Result page (1-based). Defaults to 1 if omitted/null."},"limit":{"oneOf":[{"type":"integer","description":"Max records per page (system default if omitted/null)."},{"type":"null","description":"Max records per page (system default if omitted/null)."}],"description":"Max records per page (system default if omitted/null)."}},"description":"Request object for searching/filtering moderator actions in discussionboard_moderator_actions. Supports all admin panel, dashboard, or reporting use cases.","required":[]},"IPageDiscussionboardModeratorAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionboardModeratorAction"},"description":"Array of moderator action log results."}},"required":["pagination","data"],"description":"Paginated page result for moderator actions log list queries."},"DiscussionboardModeratorAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator action record.\n\nPrimary key for discussionboard_moderator_actions table."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"FK to acting moderator's UUID on discussionboard_moderators.\n\nEnables audit trail for specific moderator."},"action_type":{"type":"string","description":"Type of action performed (e.g., 'edit_post', 'suspend_member').\n\nCategorizes moderation actions; source for audit and dashboard analytics."},"target_type":{"type":"string","description":"Type of entity affected (e.g. 'post', 'comment', 'member', 'tag').\n\nRequired for polymorphic audit reports and workflow analytics."},"target_id":{"type":"string","format":"uuid","description":"UUID of the affected entity (post, comment, member, etc).\n\nRequired for linking action logs to concrete objects."},"details":{"type":"string","description":"Free-form string describing the intervention (context, justification, etc).\n\nPopulates 'details' in DB; required for transparency and compliance review."},"action_at":{"type":"string","format":"date-time","description":"Action timestamp (ISO8601).\n\nUsed for ordering, time-window dashboards, and compliance audit."}},"required":["id","discussionboard_moderator_id","action_type","target_type","target_id","details","action_at"],"description":"Moderator action record entity as stored in discussionboard_moderator_actions table. Used for transparency, audit trails, and moderator analytics."},"DiscussionboardModeratorAction.ICreate":{"type":"object","properties":{"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator issuing the action. Required.\n\nMust reference discussionboard_moderators.id."},"action_type":{"type":"string","description":"The type of action/intervention (e.g. 'edit_post', 'delete_comment').\n\nShould reflect defined workflow event taxonomy for moderation actions. Required."},"target_type":{"type":"string","description":"Entity type affected ('post', 'comment', etc). Required.\n\nCategorizes which business object this action affected."},"target_id":{"type":"string","format":"uuid","description":"UUID of the affected target (post/comment/member/tag).\n\nRequired; must reference valid business object in DB."},"details":{"type":"string","description":"Freeform string describing the action context, motivation, or audit details.\n\nRequired for audit trail and moderation transparency."},"action_at":{"type":"string","format":"date-time","description":"Datetime of the moderator action (ISO8601 string).\n\nRequired for accurate time-based auditing and dashboard analytics."}},"required":["discussionboard_moderator_id","action_type","target_type","target_id","details","action_at"],"description":"Input object for creating a moderator action log entry in discussionboard_moderator_actions. All properties are required by business rules for audit transparency and 3NF normalization."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number (uint32).\n\nIndicates the index of the result page currently shown. Used for pagination navigation logic."},"limit":{"type":"integer","description":"Max records per page (uint32).\n\nControls the number of items returned in a single response."},"records":{"type":"integer","description":"Total records in the database (uint32).\n\nProvides the client with overall result set size for page calculation."},"pages":{"type":"integer","description":"Total available pages (uint32).\n\nEquals ceil(records/limit). Allows for last-page checks."}},"required":["current","limit","records","pages"],"description":"Pagination metadata used for all paged results in the DiscussionBoard API."}}},"completed":72,"total":186,"step":0,"created_at":"2025-07-22T08:18:42.062Z"},"tokenUsage":{"facade":{"aggregate":{"total":1142166,"input":{"total":1077677,"cached":7936},"output":{"total":64489,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1142166,"input":{"total":1077677,"cached":7936},"output":{"total":64489,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1142166,"input":{"total":1077677,"cached":7936},"output":{"total":64489,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1142166,"input":{"total":1077677,"cached":7936},"output":{"total":64489,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key and unique identifier for the comment. Corresponds to the discussionboard_comments.id field in the database. Used to reference the comment in all thread and moderation flows.\n\nThis must be a valid UUID. It is required and used for all GET/UPDATE/DELETE operations."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"The parent post's unique identifier the comment belongs to. Corresponds to discussionboard_posts.id. Required for relation mapping and data retrieval in APIs, feeds, and moderation.\n\nValid UUID, must reference an existing post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Unique ID of the user who authored the comment. Corresponds to discussionboard_members.id. Used in author attributions, auditing, moderation workflows, and permissions enforcement.\n\nMust always be a valid user referencing a member."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this comment is a reply to another comment, this stores the parent comment's ID (discussionboard_comments.id). Supports threading/hierarchy. Null for top-level comments.\n\nIf present, must reference a valid comment inside the same thread."},{"type":"null","format":"uuid","description":"If this comment is a reply to another comment, this stores the parent comment's ID (discussionboard_comments.id). Supports threading/hierarchy. Null for top-level comments.\n\nIf present, must reference a valid comment inside the same thread."}],"description":"If this comment is a reply to another comment, this stores the parent comment's ID (discussionboard_comments.id). Supports threading/hierarchy. Null for top-level comments.\n\nIf present, must reference a valid comment inside the same thread."},"body":{"type":"string","description":"Actual text/content of the comment. Markdown formatting supported according to business rules. Content is subject to moderation, length, and formatting checks per requirements.\n\nMust not be empty."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created (ISO 8601, e.g., '2025-07-22T11:00:00+09:00'). Included for display, audit, and sorting purposes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to the comment. Used for edit history, audit, and UI freshness logic. Always present."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, indicates this comment was soft-deleted at this datetime. Used for moderation, compliance, and to support legal/audit retention. If null, the comment is live."},{"type":"null","format":"date-time","description":"If set, indicates this comment was soft-deleted at this datetime. Used for moderation, compliance, and to support legal/audit retention. If null, the comment is live."}],"description":"If set, indicates this comment was soft-deleted at this datetime. Used for moderation, compliance, and to support legal/audit retention. If null, the comment is live."}},"required":["id","discussionboard_post_id","discussionboard_member_id","body","created_at","updated_at"],"description":"Full comment entity as stored in the forum DB. Implements business requirements for nested/threaded discussion, moderation, audit, and compliance as described in the requirements analysis and Prisma schema. Includes all atomic and relational attributes required for user interface, audit trails, and legal compliance. Each comment can reference a parent for reply trees, supports markdown, and is subject to moderation.\n\nRead-only or computed fields (like counts/reactions) are not included; see related endpoints for those.\n\nCovers all CRUD and moderation flows, enforces API consistency and traceability."},"IDiscussionboardComment.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"The ID of the parent post this comment is attached to. Must reference an existing post. This is a required relation for threading and reply trees."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member who is making the comment. Must reference a valid, non-suspended user in the system."},"body":{"type":"string","description":"Comment text content. Markdown supported if permitted by forum configuration. Must not be empty; subject to length and formatting constraints."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this is a reply to another comment, specify the parent comment's UUID (nullable for top-level comments). Must refer to a valid comment inside the same post/thread."},{"type":"null","format":"uuid","description":"If this is a reply to another comment, specify the parent comment's UUID (nullable for top-level comments). Must refer to a valid comment inside the same post/thread."}],"description":"If this is a reply to another comment, specify the parent comment's UUID (nullable for top-level comments). Must refer to a valid comment inside the same post/thread."}},"required":["discussionboard_post_id","discussionboard_member_id","body"],"description":"Shape for API calls to create a new comment within a thread's post. Matches core business requirements for user discussion flows, hierarchical threading, and content auditability.\n\nAll fields must match business rules as specified in entity design, and relations are checked in backend logic."},"IDiscussionboardComment.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"The new or updated comment text/body. Required. Must pass moderation and validation. May be rejected if under edit lock, moderation hold, or compliance block."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Update the threading/parent relationship for this comment. If provided, must refer to a valid comment in the same thread. Nullable to remove reply relationship."},{"type":"null","format":"uuid","description":"(Optional) Update the threading/parent relationship for this comment. If provided, must refer to a valid comment in the same thread. Nullable to remove reply relationship."}],"description":"(Optional) Update the threading/parent relationship for this comment. If provided, must refer to a valid comment in the same thread. Nullable to remove reply relationship."}},"required":["body"],"description":"Update structure for editing comment content or parent relationship. Used by PATCH/PUT comment APIs.\n\nOnly owners or privileged users may update; enforcement is handled at API layer/permissions."},"IDiscussionboardCommentReply.IRequest":{"type":"object","properties":{"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If set, filters for all replies to the given parent comment (discussionboard_comments.id). Nullable for unconstrained search."},{"type":"null","format":"uuid","description":"If set, filters for all replies to the given parent comment (discussionboard_comments.id). Nullable for unconstrained search."}],"description":"If set, filters for all replies to the given parent comment (discussionboard_comments.id). Nullable for unconstrained search."},"reply_id":{"oneOf":[{"type":"string","format":"uuid","description":"If set, filters for a specific reply comment (discussionboard_comments.id) in reply relationships. Nullable when searching for all replies under a parent."},{"type":"null","format":"uuid","description":"If set, filters for a specific reply comment (discussionboard_comments.id) in reply relationships. Nullable when searching for all replies under a parent."}],"description":"If set, filters for a specific reply comment (discussionboard_comments.id) in reply relationships. Nullable when searching for all replies under a parent."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"If set, restricts results to replies involving a specific member (as parent or reply author). Nullable."},{"type":"null","format":"uuid","description":"If set, restricts results to replies involving a specific member (as parent or reply author). Nullable."}],"description":"If set, restricts results to replies involving a specific member (as parent or reply author). Nullable."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional lower bound for reply relationship creation datetime (ISO 8601). Useful for audit or user history filtering."},{"type":"null","format":"date-time","description":"Optional lower bound for reply relationship creation datetime (ISO 8601). Useful for audit or user history filtering."}],"description":"Optional lower bound for reply relationship creation datetime (ISO 8601). Useful for audit or user history filtering."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional upper bound for reply creation datetime (ISO 8601). Useful for ranged or dashboard queries."},{"type":"null","format":"date-time","description":"Optional upper bound for reply creation datetime (ISO 8601). Useful for ranged or dashboard queries."}],"description":"Optional upper bound for reply creation datetime (ISO 8601). Useful for ranged or dashboard queries."},"page":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"description":"Page number for pagination (1-based). Optional; default is 1 when omitted."},{"type":"null","format":"int32","minimum":1,"description":"Page number for pagination (1-based). Optional; default is 1 when omitted."}],"description":"Page number for pagination (1-based). Optional; default is 1 when omitted."},"limit":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"maximum":100,"description":"Maximum records to return per page. Optional; system default applies if omitted."},{"type":"null","format":"int32","minimum":1,"maximum":100,"description":"Maximum records to return per page. Optional; system default applies if omitted."}],"description":"Maximum records to return per page. Optional; system default applies if omitted."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."},{"const":"comment_id","description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."},{"const":"reply_id","description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."},{"type":"null","enum":["created_at","comment_id","reply_id"],"description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."}],"description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."},"sort_order":{"oneOf":[{"const":"asc","description":"Sorting order: 'asc' (ascending) or 'desc' (descending). Optional; ascending is default."},{"const":"desc","description":"Sorting order: 'asc' (ascending) or 'desc' (descending). Optional; ascending is default."},{"type":"null","enum":["asc","desc"],"description":"Sorting order: 'asc' (ascending) or 'desc' (descending). Optional; ascending is default."}],"description":"Sorting order: 'asc' (ascending) or 'desc' (descending). Optional; ascending is default."}},"required":[],"description":"Request format for searching/comment reply relationships. Allows querying for threaded reply trees, UI navigation, auditing, and moderation analysis. Matches pagination and filter pattern from IPage/standard API."},"IPageIDiscussionboardCommentReply":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentReply"},"description":"Array of comment reply relationships for the current page."}},"required":["pagination","data"],"description":"Paginated results for comment reply relationship search. Used in moderation, dashboard, or discussion views aggregating reply structure. Follows standard IPage<T> pattern."},"IDiscussionboardCommentReply":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment reply mapping (discussionboard_comment_replies.id). Required for all CRUD and audit interfaces.\n\nMust be a valid UUID."},"comment_id":{"type":"string","format":"uuid","description":"ID of the parent comment (discussionboard_comments.id). Mandatory for mapping/thread hierarchy.\n\nMust reference an existing comment in the same thread/post."},"reply_id":{"type":"string","format":"uuid","description":"ID of the reply comment (discussionboard_comments.id). Identifies the child comment in the reply relation. Must reference another comment (valid UUID).\n\nEnforces 1:1 mapping for reply relation integrity."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601). When the reply relationship was created. Used for ordering, dashboard replay, audit, and query filtering."}},"required":["id","comment_id","reply_id","created_at"],"description":"Mapping record for parent-reply comment relationships in threaded discussion. Satisfies reply tree retrieval, UI rendering, audit trail, and moderation navigation workflows. Maintains full normalization (no embedded comment content here)."},"IDiscussionboardCommentReply.ICreate":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"ID of the parent comment (discussionboard_comments.id) being replied to. Must reference a valid, live comment."},"reply_id":{"type":"string","format":"uuid","description":"ID of the reply (child) comment (discussionboard_comments.id). Must reference a different, existing comment in the same thread/post."}},"required":["comment_id","reply_id"],"description":"Payload for creating a parent-reply comment mapping. Used whenever a user replies to another comment for threading/nesting construction. Backend enforces only valid comment pairings in accordance with forum/hierarchy rules."},"IDiscussionboardCommentReply.IUpdate":{"type":"object","properties":{"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) New parent comment ID to update the mapping. Nullable to remove association. Constraints: must reference a valid comment or be set to null without breaking thread integrity."},{"type":"null","format":"uuid","description":"(Optional) New parent comment ID to update the mapping. Nullable to remove association. Constraints: must reference a valid comment or be set to null without breaking thread integrity."}],"description":"(Optional) New parent comment ID to update the mapping. Nullable to remove association. Constraints: must reference a valid comment or be set to null without breaking thread integrity."},"reply_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Update which comment is associated as reply in the mapping. Nullable only when severing the relationship outright or for internal auditing."},{"type":"null","format":"uuid","description":"(Optional) Update which comment is associated as reply in the mapping. Nullable only when severing the relationship outright or for internal auditing."}],"description":"(Optional) Update which comment is associated as reply in the mapping. Nullable only when severing the relationship outright or for internal auditing."}},"required":[],"description":"Update structure for reply mapping. Used for moderator/admin or member correction of threading relationships, supporting auditing, moderation, and edge case repair."},"IDiscussionboardPostAttachment.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter for post ID (discussionboard_posts.id) to list only attachments belonging to a specific post."},{"type":"null","format":"uuid","description":"Optional filter for post ID (discussionboard_posts.id) to list only attachments belonging to a specific post."}],"description":"Optional filter for post ID (discussionboard_posts.id) to list only attachments belonging to a specific post."},"uploaded_by":{"oneOf":[{"type":"string","format":"uuid","description":"Restricts attachments to those uploaded by a specific user (discussionboard_members.id). Nullable for unconstrained."},{"type":"null","format":"uuid","description":"Restricts attachments to those uploaded by a specific user (discussionboard_members.id). Nullable for unconstrained."}],"description":"Restricts attachments to those uploaded by a specific user (discussionboard_members.id). Nullable for unconstrained."},"file_type":{"oneOf":[{"type":"string","description":"Filter for MIME type of file (e.g., 'image/png'). Allows listing only certain types of attachments."},{"type":"null","description":"Filter for MIME type of file (e.g., 'image/png'). Allows listing only certain types of attachments."}],"description":"Filter for MIME type of file (e.g., 'image/png'). Allows listing only certain types of attachments."},"uploaded_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower-bound (inclusive) filter for uploaded files by upload datetime, ISO8601."},{"type":"null","format":"date-time","description":"Lower-bound (inclusive) filter for uploaded files by upload datetime, ISO8601."}],"description":"Lower-bound (inclusive) filter for uploaded files by upload datetime, ISO8601."},"uploaded_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper-bound (inclusive) filter for upload datetime, ISO8601."},{"type":"null","format":"date-time","description":"Upper-bound (inclusive) filter for upload datetime, ISO8601."}],"description":"Upper-bound (inclusive) filter for upload datetime, ISO8601."},"page":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"description":"Page number for pagination (≥1), default 1 if omitted."},{"type":"null","format":"int32","minimum":1,"description":"Page number for pagination (≥1), default 1 if omitted."}],"description":"Page number for pagination (≥1), default 1 if omitted."},"limit":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"maximum":100,"description":"Maximum results per page, default specified by forum settings, up to 100."},{"type":"null","format":"int32","minimum":1,"maximum":100,"description":"Maximum results per page, default specified by forum settings, up to 100."}],"description":"Maximum results per page, default specified by forum settings, up to 100."},"sort_by":{"oneOf":[{"const":"uploaded_at","description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."},{"const":"file_name","description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."},{"const":"file_type","description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."},{"type":"null","enum":["uploaded_at","file_name","file_type"],"description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."}],"description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order, 'asc' or 'desc'. Optional; default determined by backend."},{"const":"desc","description":"Sort order, 'asc' or 'desc'. Optional; default determined by backend."},{"type":"null","enum":["asc","desc"],"description":"Sort order, 'asc' or 'desc'. Optional; default determined by backend."}],"description":"Sort order, 'asc' or 'desc'. Optional; default determined by backend."}},"required":[],"description":"Query structure for searching and paginating post attachments. Used in user uploads UI, moderator panels, and attachment overviews."},"IPageIDiscussionboardPostAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostAttachment"},"description":"Array of post attachment records for current page."}},"required":["pagination","data"],"description":"Output structure for paginated attachment queries. Follows standard IPage<T> format for indexed lists."},"IDiscussionboardPostAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for post attachment (discussionboard_post_attachments.id). Required for reference and audit."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"The post's unique identifier to which the attachment belongs. Required for all attachment management actions."},"file_uri":{"type":"string","description":"URI or storage pointer to the uploaded file (e.g., S3, CDN, file service). Must be a safe URL or storage reference per security rules. Used for serving and downloading files."},"file_name":{"type":"string","description":"Filename displayed to users for this attachment. Must be a valid, safe string (no path traversal, XSS, etc.). Enforced by backend validation and upload."},"file_type":{"type":"string","description":"MIME type of the file (e.g., 'image/jpeg', 'application/pdf'). Used for validation and preview logic."},"uploaded_at":{"type":"string","format":"date-time","description":"Datetime file was uploaded (ISO 8601 format). Important for audit, sorting, and business rules."},"uploaded_by":{"type":"string","format":"uuid","description":"ID of the user who uploaded the attachment. Tracks responsible member, enforces upload/edit/delete permissions."}},"required":["id","discussionboard_post_id","file_uri","file_name","file_type","uploaded_at","uploaded_by"],"description":"Complete record for a file attached to a post. Satisfies business, security, and audit requirements for file metadata. Used in attachment display, download, and moderation APIs."},"IDiscussionboardPostAttachment.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post's unique identifier; associates file to this post. Must exist and be write-accessible to the uploader."},"file_uri":{"type":"string","description":"Storage location or CDN URI for the actual uploaded file. Must conform to backend security and file validation rules."},"file_name":{"type":"string","description":"Display filename for the attachment, used in UI/file pickers and for downloads."},"file_type":{"type":"string","description":"MIME type string, e.g., 'image/png', 'application/pdf'. Enforced by backend during upload for virus/malware/content policy."},"uploaded_by":{"type":"string","format":"uuid","description":"ID of the member uploading the file. Used to validate ownership, auditing, and permission enforcement."}},"required":["discussionboard_post_id","file_uri","file_name","file_type","uploaded_by"],"description":"Structure for new file attachment uploads in post content. Used in submission, moderation, and initial display workflows."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Result count limit per page. Default usually 100."},"records":{"type":"integer","format":"uint32","description":"Total number of records available for the query."},"pages":{"type":"integer","format":"uint32","description":"Total number of available result pages."}},"required":["current","limit","records","pages"],"description":"Metadata describing pagination state for paged result sets. Used in all IPage<T> wrappers."}}},"completed":84,"total":186,"step":0,"created_at":"2025-07-22T08:18:48.071Z"},"tokenUsage":{"facade":{"aggregate":{"total":1224446,"input":{"total":1156650,"cached":7936},"output":{"total":67796,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1224446,"input":{"total":1156650,"cached":7936},"output":{"total":67796,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1224446,"input":{"total":1156650,"cached":7936},"output":{"total":67796,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1224446,"input":{"total":1156650,"cached":7936},"output":{"total":67796,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardChannel.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"A text search filter, applied to channel name and description for flexible discovery. This property allows a user or admin to find channels by partial keyword, supporting navigation and administrative review. Business rule: must be optional."},"enabled":{"oneOf":[{"type":"boolean","description":"A filter for the enabled status of the channel. Setting 'true' restricts results to currently active channels; 'false' shows disabled channels. Null or omission disables filtering by enabled state."},{"type":"null","description":"A filter for the enabled status of the channel. Setting 'true' restricts results to currently active channels; 'false' shows disabled channels. Null or omission disables filtering by enabled state."}],"description":"A filter for the enabled status of the channel. Setting 'true' restricts results to currently active channels; 'false' shows disabled channels. Null or omission disables filtering by enabled state."},"page":{"oneOf":[{"type":"integer","format":"int32","description":"The page number for paginated channel results. Starts at 1 if present; null disables paging. Combined with 'limit' for paginated navigation."},{"type":"null","format":"int32","description":"The page number for paginated channel results. Starts at 1 if present; null disables paging. Combined with 'limit' for paginated navigation."}],"description":"The page number for paginated channel results. Starts at 1 if present; null disables paging. Combined with 'limit' for paginated navigation."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Maximum number of records per page. Typical business default is 100. Null disables limit-based pagination."},{"type":"null","format":"int32","description":"Maximum number of records per page. Typical business default is 100. Null disables limit-based pagination."}],"description":"Maximum number of records per page. Typical business default is 100. Null disables limit-based pagination."},"sort":{"type":"string","description":"Sorting criteria, comma-separated. Format: 'property,[asc|desc]'. For example: 'created_at,desc'. Optional, for advanced channel ordering in admin UIs."}},"description":"Channel list/search request: This object supports the retrieval of discussion board channel entities with flexible filtering, paging, and sorting. Relates directly to the platform's need for scalable channel management as described in the requirements document and Prisma schema. Each property provides entry points for searching, discovery, and system administration. All parameters are optional to maximize UI flexibility and support diverse listing scenarios.","required":[]},"IPageIDiscussionboardChannel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardChannel"},"description":"Array of discussion board channels for this page. Each element represents a channel entity, aligned with the Prisma schema and supporting business/accountability needs."}},"required":["pagination","data"],"description":"Paginated list container for discussion board channels. Contains both the array of channel entities and the pagination metadata used for navigation, reporting, and UI. Inherits general IPage format for consistency across APIs. Ensures discoverability and scalable user experiences."},"IDiscussionboardChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID (UUID) for the channel entity. Primary key in Prisma; supports audit, navigation, and business constraint enforcement."},"code":{"type":"string","description":"Unique channel code (e.g., 'POLI', 'ECON'). Atomic, mandatory, and indexed for fast lookup. Used for routing, analytics, and system configuration. Tied to business logic for channel identification."},"name":{"type":"string","description":"Channel display name. Human-readable string; presented to users for all UIs and navigation. Distinct from code to enable localization and branding flexibility."},"description":{"oneOf":[{"type":"string","description":"Extended UI and onboarding description text. Optional. Used in popups, new user flows, or information panels for business context."},{"type":"null","description":"Extended UI and onboarding description text. Optional. Used in popups, new user flows, or information panels for business context."}],"description":"Extended UI and onboarding description text. Optional. Used in popups, new user flows, or information panels for business context."},"enabled":{"type":"boolean","description":"Indicates if the channel is currently active/visible. True for active, false for hidden (soft-disabled by admins). Support for business rule: channels may be hidden without losing data."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of channel creation (ISO 8601). For platform auditability, workflow automation, and business reporting. Never null."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) for latest metadata update. Used for audit, cache invalidation, and UI freshness. Required by 3NF business rules."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp. Null means not deleted; a date indicates the channel is archived/hidden, but not destroyed. Used for compliance and audits."},{"type":"null","format":"date-time","description":"Soft-delete timestamp. Null means not deleted; a date indicates the channel is archived/hidden, but not destroyed. Used for compliance and audits."}],"description":"Soft-delete timestamp. Null means not deleted; a date indicates the channel is archived/hidden, but not destroyed. Used for compliance and audits."}},"required":["id","code","name","enabled","created_at","updated_at"],"description":"Discussion board channel entity - aligns with Prisma table 'discussionboard_channels'. Represents top-level forum structure and business unit for navigation, permission scoping, and audit. Each property is atomic as per 3NF, and tightly maps to business requirements/constraints. Channels group categories/boards and are critical for platform segmentation, regulatory compliance, and UI clarity."},"IDiscussionboardChannel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique channel code (e.g., 'POLI', 'ECON'). Enforced as unique at database level. Required for new entity creation and must meet format/business rules for atomicity."},"name":{"type":"string","description":"Display name for the new channel. Human-readable/name as shown in UI."},"description":{"oneOf":[{"type":"string","description":"Optional extended description or onboarding/help message for the channel. May be omitted or null for simplicity."},{"type":"null","description":"Optional extended description or onboarding/help message for the channel. May be omitted or null for simplicity."}],"description":"Optional extended description or onboarding/help message for the channel. May be omitted or null for simplicity."},"enabled":{"type":"boolean","description":"Initial active state. If true, the channel is immediately enabled. If false, channel is created hidden (admin or staging workflows)."}},"required":["code","name","enabled"],"description":"Channel creation request body. Fields are required per business logic, reflecting mandatory fields in the DB schema and API contract. Optional description allows for onboarding/UI flexibility. Used by admin interfaces for platform structure expansion."},"IDiscussionboardChannel.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string","description":"New display name, if being changed. Optional; omit or null to keep previous value."},{"type":"null","description":"New display name, if being changed. Optional; omit or null to keep previous value."}],"description":"New display name, if being changed. Optional; omit or null to keep previous value."},"description":{"oneOf":[{"type":"string","description":"Updated long-form description for onboarding, context, or UI help. Nullable; omit or null to clear/keep."},{"type":"null","description":"Updated long-form description for onboarding, context, or UI help. Nullable; omit or null to clear/keep."}],"description":"Updated long-form description for onboarding, context, or UI help. Nullable; omit or null to clear/keep."},"enabled":{"oneOf":[{"type":"boolean","description":"If changing channel enabled status (active/hidden). Nullable; null means no change."},{"type":"null","description":"If changing channel enabled status (active/hidden). Nullable; null means no change."}],"description":"If changing channel enabled status (active/hidden). Nullable; null means no change."}},"description":"Channel update request. Fields are all optional: only set those to be modified. Used for flexible patch/put API operations, supporting business requirements for editable but non-destructive admin updates. Aligns with Prisma update patterns and requirements document (platform admin scenarios).","required":[]},"IDiscussionboardChannel.IRemoveResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the channel that was soft-deleted. Provided for audit/UI tracking."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp when soft-delete was set (ISO 8601). Used for compliance, admin confirmation, and auditing."}},"required":["id","deleted_at"],"description":"Result payload for channel delete (soft-delete) operation. Details which channel was archived and when, for admin UI and audit purposes. Guarantees traceability in business logic for retention/legal workflow."},"IDiscussionboardCategory.IRequest":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"UUID of parent channel. Optional; if set, filters categories to those under this channel. Supports admin workflows and targeted navigation, mapped directly to business rule for hierarchical grouping."},"search":{"type":"string","description":"Case-insensitive search filter for category name, code, or description. Optional string to enable flexible admin/member UI queries and streamlined discovery."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of parent category for subcategory listing/management. Supports hierarchical administration and UI, per requirements for category nesting."},{"type":"null","format":"uuid","description":"UUID of parent category for subcategory listing/management. Supports hierarchical administration and UI, per requirements for category nesting."}],"description":"UUID of parent category for subcategory listing/management. Supports hierarchical administration and UI, per requirements for category nesting."},"enabled":{"oneOf":[{"type":"boolean","description":"If true, limits to enabled categories; false shows disabled. Null disables status filtering, as per flexible admin UI and business policy requirements."},{"type":"null","description":"If true, limits to enabled categories; false shows disabled. Null disables status filtering, as per flexible admin UI and business policy requirements."}],"description":"If true, limits to enabled categories; false shows disabled. Null disables status filtering, as per flexible admin UI and business policy requirements."},"page":{"oneOf":[{"type":"integer","format":"int32","description":"Pagination: page number. Null disables."},{"type":"null","format":"int32","description":"Pagination: page number. Null disables."}],"description":"Pagination: page number. Null disables."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Results per page; null means default (often 100 or system set)."},{"type":"null","format":"int32","description":"Results per page; null means default (often 100 or system set)."}],"description":"Results per page; null means default (often 100 or system set)."},"sort":{"type":"string","description":"Sorting/cursor option. E.g., 'created_at,desc' for admin dashboards. Fully optional."}},"description":"Category search and listing request. This format enables hierarchical filtering for categories (for admin and user navigation), tying into multi-channel, multi-category structure defined in business requirements analysis and ERD.","required":[]},"IPageIDiscussionboardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCategory"},"description":"Category entity array: All returned objects are atomic, per normalized business requirements. Fulfills flexible UI/admin reporting/analytics workflows."}},"required":["pagination","data"],"description":"Paginated category result set. Used by admin consoles, user interfaces, and analytics in the DiscussionBoard context. Inherits standard IPage structure for listing; central to scalable frontend/data-grid experiences."},"IDiscussionboardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique category UUID, primary key for reference/audit. Enables navigation, permission enforcement, and normalized business workflows."},"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Parent channel UUID, enforcing hierarchical structure (channel > category). Supports multi-board navigation and permission logic."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional parent category UUID. Null if top-level category; present when nested for subcategories."},{"type":"null","format":"uuid","description":"Optional parent category UUID. Null if top-level category; present when nested for subcategories."}],"description":"Optional parent category UUID. Null if top-level category; present when nested for subcategories."},"code":{"type":"string","description":"Unique category code (within channel). Used for routing, UI search, admin workflows, maintaining normalization."},"name":{"type":"string","description":"Display name for user/admin UI. Required, atomic, and unique per business logic."},"description":{"oneOf":[{"type":"string","description":"Optional, extended description. Used for onboarding, UI hints, and analytics. Nullable for flexibility."},{"type":"null","description":"Optional, extended description. Used for onboarding, UI hints, and analytics. Nullable for flexibility."}],"description":"Optional, extended description. Used for onboarding, UI hints, and analytics. Nullable for flexibility."},"enabled":{"type":"boolean","description":"True if active; false if hidden/disabled. Supports admin workflows and audit needs."},"created_at":{"type":"string","format":"date-time","description":"Category creation timestamp (ISO 8601). Required for audit/log/business policy."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp (ISO 8601) for tracking/listing/sync."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp (null if not deleted). For compliance, audit, and business retention rules."},{"type":"null","format":"date-time","description":"Soft-delete timestamp (null if not deleted). For compliance, audit, and business retention rules."}],"description":"Soft-delete timestamp (null if not deleted). For compliance, audit, and business retention rules."}},"required":["id","discussionboard_channel_id","code","name","enabled","created_at","updated_at"],"description":"Discussion board category entity. Directly reflects the multi-level, hierarchical forum structure specified in both DB schema and requirements document. Categories support flexible organization of boards/topics and represent both business/UX/UI navigation and permission grouping units. Each property has specific normalization, traceability, and retention implications."},"IDiscussionboardCategory.ICreate":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"UUID of parent channel—required to group category under channel for normalized structure/permissions."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional parent category UUID, enabling nested/subcategory creation as per business rule for hierarchical UI."},{"type":"null","format":"uuid","description":"Optional parent category UUID, enabling nested/subcategory creation as per business rule for hierarchical UI."}],"description":"Optional parent category UUID, enabling nested/subcategory creation as per business rule for hierarchical UI."},"code":{"type":"string","description":"Category code (unique per channel). Used for admin lookup/routing/search."},"name":{"type":"string","description":"Display name (atomic, required). Mirrors UI/analytics needs."},"description":{"oneOf":[{"type":"string","description":"Optional descriptive/onboarding metadata; supports flexible UI or info-context."},{"type":"null","description":"Optional descriptive/onboarding metadata; supports flexible UI or info-context."}],"description":"Optional descriptive/onboarding metadata; supports flexible UI or info-context."},"enabled":{"type":"boolean","description":"Initial enabled state. True: immediately visible. False: staging/hidden/admin use only."}},"required":["discussionboard_channel_id","code","name","enabled"],"description":"Category creation request: Used for admin/platform expansion of forum/category structure. Properties enforced by both DB schema and business rules. Optional parent_id/description supports nested/category-onboarding flexibility."},"IDiscussionboardCategory.IUpdate":{"type":"object","properties":{"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update parent category UUID (move/nest/un-nest subcategories), aligning with flexible navigation/business rules. Omit or set null to remove parent."},{"type":"null","format":"uuid","description":"Update parent category UUID (move/nest/un-nest subcategories), aligning with flexible navigation/business rules. Omit or set null to remove parent."}],"description":"Update parent category UUID (move/nest/un-nest subcategories), aligning with flexible navigation/business rules. Omit or set null to remove parent."},"name":{"oneOf":[{"type":"string","description":"Update category name. Optional: null means keep previous value."},{"type":"null","description":"Update category name. Optional: null means keep previous value."}],"description":"Update category name. Optional: null means keep previous value."},"description":{"oneOf":[{"type":"string","description":"Update extended description. Null or omit to keep/clear."},{"type":"null","description":"Update extended description. Null or omit to keep/clear."}],"description":"Update extended description. Null or omit to keep/clear."},"enabled":{"oneOf":[{"type":"boolean","description":"Set enabled/disabled state. Null to skip/no change."},{"type":"null","description":"Set enabled/disabled state. Null to skip/no change."}],"description":"Set enabled/disabled state. Null to skip/no change."}},"description":"Category update request: Admin-level operation supporting edit/patch processes for category metadata, structure, and visibility. All fields optional/null-accepting for maximum API flexibility (non-breaking admin workflows).","required":[]},"IDiscussionboardCategory.IRemoveResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the soft-deleted category. Used for confirming/admin-tracking archival actions."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp for when category was soft-deleted. Used for compliance/audit workflows."}},"required":["id","deleted_at"],"description":"Category delete (soft-delete) result object: Encapsulates status and metadata for admin/audit purposes. Ensures traceability and compliance per requirements document."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number. Used for paginating large result sets. Critical for multi-page UI experiences."},"limit":{"type":"integer","format":"uint32","description":"Maximum records per page (default 100). Enables tailored navigation and performance optimization."},"records":{"type":"integer","format":"uint32","description":"Total number of records across all pages. Used for UI showing overall result size and progress."},"pages":{"type":"integer","format":"uint32","description":"Total available pages: equal to records / limit (rounded up). Essential for UI pagination, especially for analytics and large datasets."}},"required":["current","limit","records","pages"],"description":"Standard page information container, supporting both user and admin navigation workflows in all paged DiscussionBoard API endpoints. Matches business logic for result set display and normalized reporting."}}},"completed":96,"total":186,"step":0,"created_at":"2025-07-22T08:18:51.997Z"},"tokenUsage":{"facade":{"aggregate":{"total":1306418,"input":{"total":1235620,"cached":7936},"output":{"total":70798,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1306418,"input":{"total":1235620,"cached":7936},"output":{"total":70798,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1306418,"input":{"total":1235620,"cached":7936},"output":{"total":70798,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1306418,"input":{"total":1235620,"cached":7936},"output":{"total":70798,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardModerationLog.IUpdate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"The ID of the moderator who performed or is responsible for the moderation action. Used to track accountability and link actions to specific staff. This field should be a valid UUID string referencing the moderator's unique record."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member who is the subject of the moderation action, if applicable. Nullable if the action is not directed at a specific user (e.g., targeting a post or comment instead). Always a valid UUID or null."},{"type":"null","format":"uuid","description":"ID of the member who is the subject of the moderation action, if applicable. Nullable if the action is not directed at a specific user (e.g., targeting a post or comment instead). Always a valid UUID or null."}],"description":"ID of the member who is the subject of the moderation action, if applicable. Nullable if the action is not directed at a specific user (e.g., targeting a post or comment instead). Always a valid UUID or null."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the affected post, applicable for actions such as 'delete_post', 'edit_post', etc. Nullable if not relevant for this moderation action. Must be a valid UUID string or null."},{"type":"null","format":"uuid","description":"ID of the affected post, applicable for actions such as 'delete_post', 'edit_post', etc. Nullable if not relevant for this moderation action. Must be a valid UUID string or null."}],"description":"ID of the affected post, applicable for actions such as 'delete_post', 'edit_post', etc. Nullable if not relevant for this moderation action. Must be a valid UUID string or null."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the affected comment, applicable for actions on comments. Nullable for non-comment actions. Must be a valid UUID or null."},{"type":"null","format":"uuid","description":"ID of the affected comment, applicable for actions on comments. Nullable for non-comment actions. Must be a valid UUID or null."}],"description":"ID of the affected comment, applicable for actions on comments. Nullable for non-comment actions. Must be a valid UUID or null."},"action_type":{"type":"string","description":"Normalized code indicating the type of moderation action (e.g., 'deleted_post', 'suspended_user', etc.). Provides a consistent action taxonomy per business, audit, and reporting needs."},"action_details":{"oneOf":[{"type":"string","description":"Additional details, context, or moderator notes for the action. Freeform text to elaborate justification or action outcome. Nullable."},{"type":"null","description":"Additional details, context, or moderator notes for the action. Freeform text to elaborate justification or action outcome. Nullable."}],"description":"Additional details, context, or moderator notes for the action. Freeform text to elaborate justification or action outcome. Nullable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the moderation action occurred, in ISO 8601 format. Used for audit trails, escalation time analysis, and incident reviews."}},"required":["moderator_id","action_type","created_at"],"description":"Update payload for the DiscussionBoard moderation log entity, representing changes to a specific moderator action. This schema supports audit trail corrections, additional data enrichment, or resolving historic moderation entries. Referenced Prisma DB table: discussionboard_moderation_logs.\n\nEach moderation action log documents a single intervention or decision by a moderator, with linkage to the affected member/post/comment (if any), action type, details, and time. Updates may be restricted to certain fields for preserving audit chain integrity. Used by admin and compliance tools."},"IDiscussionboardSuspensionRecord.IRequest":{"type":"object","properties":{"suspended_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member whose suspension records are being searched for. Nullable to include all members. Used for targeted dashboard queries or appeals workflows."},{"type":"null","format":"uuid","description":"ID of the member whose suspension records are being searched for. Nullable to include all members. Used for targeted dashboard queries or appeals workflows."}],"description":"ID of the member whose suspension records are being searched for. Nullable to include all members. Used for targeted dashboard queries or appeals workflows."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderator who issued the suspension, for filtering. Null indicates no filter. Facilitates moderator activity analysis or audit."},{"type":"null","format":"uuid","description":"ID of the moderator who issued the suspension, for filtering. Null indicates no filter. Facilitates moderator activity analysis or audit."}],"description":"ID of the moderator who issued the suspension, for filtering. Null indicates no filter. Facilitates moderator activity analysis or audit."},"start_after":{"oneOf":[{"type":"string","format":"date-time","description":"Filtering criterion: Include only started after this ISO 8601 timestamp. Nullable if not filtering by start time."},{"type":"null","format":"date-time","description":"Filtering criterion: Include only started after this ISO 8601 timestamp. Nullable if not filtering by start time."}],"description":"Filtering criterion: Include only started after this ISO 8601 timestamp. Nullable if not filtering by start time."},"end_before":{"oneOf":[{"type":"string","format":"date-time","description":"Filtering criterion: Include only ended before this ISO 8601 timestamp. Nullable if not filtering by end time."},{"type":"null","format":"date-time","description":"Filtering criterion: Include only ended before this ISO 8601 timestamp. Nullable if not filtering by end time."}],"description":"Filtering criterion: Include only ended before this ISO 8601 timestamp. Nullable if not filtering by end time."},"revoked":{"oneOf":[{"type":"boolean","description":"If true, only revoked suspensions are included; if false, only non-revoked suspensions. If null, include all regardless of revoked status."},{"type":"null","description":"If true, only revoked suspensions are included; if false, only non-revoked suspensions. If null, include all regardless of revoked status."}],"description":"If true, only revoked suspensions are included; if false, only non-revoked suspensions. If null, include all regardless of revoked status."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"The page number for paginated results. Optional/null means default (typically page 1 in standard paging semantics)."},{"type":"null","minimum":1,"description":"The page number for paginated results. Optional/null means default (typically page 1 in standard paging semantics)."}],"description":"The page number for paginated results. Optional/null means default (typically page 1 in standard paging semantics)."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Maximum records per page. Helps with pagination UI and dashboard performance. Nullable for default."},{"type":"null","minimum":1,"description":"Maximum records per page. Helps with pagination UI and dashboard performance. Nullable for default."}],"description":"Maximum records per page. Helps with pagination UI and dashboard performance. Nullable for default."}},"required":[],"description":"Request body structure for querying or filtering suspension records as implemented for the DiscussionBoard platform (discussionboard_suspension_records). Allows filtering by suspended member, issuing moderator, date ranges, revocation status, and includes pagination. Used in moderator/admin dashboards and compliance reporting."},"IPageIDiscussionboardSuspensionRecord":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination meta information describing the current set, total count, pages, etc."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSuspensionRecord"},"description":"The array of suspension records returned by the paginated query, filtered as per request criteria."}},"required":["pagination","data"],"description":"Container object for a page of DiscussionBoard suspension records, as used by the platform’s listing APIs. Supports collection listing with paging meta per IPage<T> pattern. See DiscussionBoard business rules regarding minimum retention and paging limits."},"IDiscussionboardSuspensionRecord":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of this suspension record (Prisma PK). Used for audit, dereferencing, and updates."},"suspended_member_id":{"type":"string","format":"uuid","description":"ID of the member who is/was suspended. References the member’s main record ID. Required for lookup, dashboard display, and audits."},"issued_by_moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator who issued the suspension. Business rule: Must reference a valid moderator, even if suspension is later escalated to admin. Enforced by FK in DB."},"start_at":{"type":"string","format":"date-time","description":"The date/time the suspension began. Must be in ISO 8601 format. Used for enforcement windows and time-based policy reporting."},"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the suspension ends, or null for permanent suspensions. Used by enforcement logic and appeal workflows."},{"type":"null","format":"date-time","description":"When the suspension ends, or null for permanent suspensions. Used by enforcement logic and appeal workflows."}],"description":"When the suspension ends, or null for permanent suspensions. Used by enforcement logic and appeal workflows."},"reason":{"type":"string","description":"Human-readable or rule-based reason describing why the suspension was issued. Required for audit, compliance, and support. Example: 'Multiple policy violations'."},"revoked":{"type":"boolean","description":"True if this suspension was lifted before expiration. Records appeal or moderator/admin action. Used for escalation decision analytics."},"created_at":{"type":"string","format":"date-time","description":"When the suspension record was created in the system. Used for audit/compliance, appeals, and expiration policies."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"When, if ever, this suspension was revoked. Null if suspension was never lifted early. Required for policy compliance and appeals analytics."},{"type":"null","format":"date-time","description":"When, if ever, this suspension was revoked. Null if suspension was never lifted early. Required for policy compliance and appeals analytics."}],"description":"When, if ever, this suspension was revoked. Null if suspension was never lifted early. Required for policy compliance and appeals analytics."}},"required":["id","suspended_member_id","issued_by_moderator_id","start_at","reason","revoked","created_at"],"description":"Represents a member’s suspension event within the DiscussionBoard platform. Each record captures details such as issuer, reasoning, starting/ending window, revocation, and audit metadata. Based on discussionboard_suspension_records DB table. All records must be retained per compliance and audit policy."},"IDiscussionboardSuspensionRecord.ICreate":{"type":"object","properties":{"suspended_member_id":{"type":"string","format":"uuid","description":"ID of the member to be suspended. References the unique member record; must be present in discussionboard_members."},"issued_by_moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator/admin issuing the suspension. Only moderators or admins can issue suspensions, per RBAC."},"start_at":{"type":"string","format":"date-time","description":"Datetime at which the suspension becomes effective. Format must be ISO 8601. Used for enforcement and audit."},"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when suspension ends (null for indefinite/permanent suspensions). Used for appeal and automatic expiry workflows."},{"type":"null","format":"date-time","description":"Datetime when suspension ends (null for indefinite/permanent suspensions). Used for appeal and automatic expiry workflows."}],"description":"Datetime when suspension ends (null for indefinite/permanent suspensions). Used for appeal and automatic expiry workflows."},"reason":{"type":"string","description":"Reason for the suspension, provided by the issuer. Must adhere to business process/legal logging requirements (e.g., not empty, not abusive, etc)."}},"required":["suspended_member_id","issued_by_moderator_id","start_at","reason"],"description":"Request body for creating a new member suspension in the DiscussionBoard platform. See business rule/enforcement workflows around permitted durations and allowable issuers. Fulfills audit legality and compliance."},"IDiscussionboardSuspensionRecord.IUpdate":{"type":"object","properties":{"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update to the scheduled end time for the suspension. Null means make it indefinite/permanent. Used for appeal, extension, or adjustment logic."},{"type":"null","format":"date-time","description":"Update to the scheduled end time for the suspension. Null means make it indefinite/permanent. Used for appeal, extension, or adjustment logic."}],"description":"Update to the scheduled end time for the suspension. Null means make it indefinite/permanent. Used for appeal, extension, or adjustment logic."},"reason":{"oneOf":[{"type":"string","description":"Optionally update the explanation or reason for the suspension. Nullable—may leave unchanged when not supplied."},{"type":"null","description":"Optionally update the explanation or reason for the suspension. Nullable—may leave unchanged when not supplied."}],"description":"Optionally update the explanation or reason for the suspension. Nullable—may leave unchanged when not supplied."},"revoked":{"oneOf":[{"type":"boolean","description":"Update the revoked status to reflect an appeal or administrative reversal. Null means no change."},{"type":"null","description":"Update the revoked status to reflect an appeal or administrative reversal. Null means no change."}],"description":"Update the revoked status to reflect an appeal or administrative reversal. Null means no change."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set or update the date/time of revocation for the suspension. Nullable—null when not setting this flag."},{"type":"null","format":"date-time","description":"Set or update the date/time of revocation for the suspension. Nullable—null when not setting this flag."}],"description":"Set or update the date/time of revocation for the suspension. Nullable—null when not setting this flag."}},"required":[],"description":"Payload for updating properties of an existing DiscussionBoard suspension record. May be used to adjust time windows, modify reason, or change revoked/revoked_at state. Changes must be audit-trailed per business/compliance policy."},"IDiscussionboardWarningRecord.IRequest":{"type":"object","properties":{"warned_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters warning records by warned member. UUID or null for all members."},{"type":"null","format":"uuid","description":"Filters warning records by warned member. UUID or null for all members."}],"description":"Filters warning records by warned member. UUID or null for all members."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters warnings by issuing moderator ID. UUID or null for all moderators."},{"type":"null","format":"uuid","description":"Filters warnings by issuing moderator ID. UUID or null for all moderators."}],"description":"Filters warnings by issuing moderator ID. UUID or null for all moderators."},"created_after":{"oneOf":[{"type":"string","format":"date-time","description":"Return only warnings created after this timestamp. Nullable."},{"type":"null","format":"date-time","description":"Return only warnings created after this timestamp. Nullable."}],"description":"Return only warnings created after this timestamp. Nullable."},"created_before":{"oneOf":[{"type":"string","format":"date-time","description":"Return only warnings created before this timestamp. Nullable."},{"type":"null","format":"date-time","description":"Return only warnings created before this timestamp. Nullable."}],"description":"Return only warnings created before this timestamp. Nullable."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Page number of the request in paginated results."},{"type":"null","minimum":1,"description":"Page number of the request in paginated results."}],"description":"Page number of the request in paginated results."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Number of records per page (page size)."},{"type":"null","minimum":1,"description":"Number of records per page (page size)."}],"description":"Number of records per page (page size)."}},"required":[],"description":"Request object for filtering, searching, and paginating warning records in the DiscussionBoard system (discussionboard_warning_records). Used in moderator/admin dashboards and reporting."},"IPageIDiscussionboardWarningRecord":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Information about current chunk of result-set: current page, limit, total records, page count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardWarningRecord"},"description":"Warning records associated with this page, result of filter/search."}},"required":["pagination","data"],"description":"Paginated container for DiscussionBoard warning records utilizing IPage pattern. See business rules for minimum retention, page sizes, and audit history."},"IDiscussionboardWarningRecord":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of this warning record. Required for audit referencing and updates."},"warned_member_id":{"type":"string","format":"uuid","description":"ID of member who received the warning. Always a valid UUID linked to discussionboard_members."},"issued_by_moderator_id":{"type":"string","format":"uuid","description":"ID of moderator who issued the warning. UUID, required for audit, compliance, and chain-of-command."},"reason":{"type":"string","description":"Explanation or context for the warning, compliant with moderation rules. Not null or empty."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the warning was issued. Used for audit and history escalation logic."}},"required":["id","warned_member_id","issued_by_moderator_id","reason","created_at"],"description":"Warning record for a member within the DiscussionBoard community, as per discussionboard_warning_records DB table. Defines all key audit fields: issuer, member, time, and rationale for escalations and reporting."},"IDiscussionboardWarningRecord.ICreate":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"ID of member to warn (target user). Must exist in main member table. Required."},"issued_by_moderator_id":{"type":"string","format":"uuid","description":"ID of moderator issuing the warning. Must exist, required by business policy."},"reason":{"type":"string","description":"Explanation or context for warning action. Must comply with audit, chain-of-command, and appeal procedures."}},"required":["warned_member_id","issued_by_moderator_id","reason"],"description":"Payload/schema for creating a new warning record in the DiscussionBoard system. Used during member moderation, escalation, and compliance workflows."},"IDiscussionboardWarningRecord.IUpdate":{"type":"object","properties":{"reason":{"oneOf":[{"type":"string","description":"Optionally update the warning reason, context, or message. Null for no change."},{"type":"null","description":"Optionally update the warning reason, context, or message. Null for no change."}],"description":"Optionally update the warning reason, context, or message. Null for no change."}},"required":[],"description":"Payload for updating a warning record within the DiscussionBoard system. Only editable field is the reason/context. Change history must be audit-logged."},"IDiscussionboardContentFlag.IRequest":{"type":"object","properties":{"flagged_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for content flags set by a particular member. Null for all."},{"type":"null","format":"uuid","description":"Filter for content flags set by a particular member. Null for all."}],"description":"Filter for content flags set by a particular member. Null for all."},"set_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for content flags set by specific moderator. Null for any."},{"type":"null","format":"uuid","description":"Filter for content flags set by specific moderator. Null for any."}],"description":"Filter for content flags set by specific moderator. Null for any."},"flag_type":{"oneOf":[{"type":"string","description":"Type(s) of content flag (e.g., 'spam','profanity','abuse'). Null for all types."},{"type":"null","description":"Type(s) of content flag (e.g., 'spam','profanity','abuse'). Null for all types."}],"description":"Type(s) of content flag (e.g., 'spam','profanity','abuse'). Null for all types."},"auto_flagged":{"oneOf":[{"type":"boolean","description":"Filter: restrict to auto-flagged items (by system). Null for all."},{"type":"null","description":"Filter: restrict to auto-flagged items (by system). Null for all."}],"description":"Filter: restrict to auto-flagged items (by system). Null for all."},"flagged_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter: Only flags on particular post. Null for any/none."},{"type":"null","format":"uuid","description":"Filter: Only flags on particular post. Null for any/none."}],"description":"Filter: Only flags on particular post. Null for any/none."},"flagged_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter: Only flags on particular comment. Null for any/none."},{"type":"null","format":"uuid","description":"Filter: Only flags on particular comment. Null for any/none."}],"description":"Filter: Only flags on particular comment. Null for any/none."},"flagged_after":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 lower bound for flagged_at date (include only flags after this datetime)."},{"type":"null","format":"date-time","description":"ISO 8601 lower bound for flagged_at date (include only flags after this datetime)."}],"description":"ISO 8601 lower bound for flagged_at date (include only flags after this datetime)."},"flagged_before":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 upper bound for flagged_at date (include only flags before this datetime)."},{"type":"null","format":"date-time","description":"ISO 8601 upper bound for flagged_at date (include only flags before this datetime)."}],"description":"ISO 8601 upper bound for flagged_at date (include only flags before this datetime)."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Current page (for pagination)."},{"type":"null","minimum":1,"description":"Current page (for pagination)."}],"description":"Current page (for pagination)."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Records per page (pagination chunk size)."},{"type":"null","minimum":1,"description":"Records per page (pagination chunk size)."}],"description":"Records per page (pagination chunk size)."}},"required":[],"description":"Request payload for filtering and listing content flags in the DiscussionBoard moderation system. Allows moderators/admins to search by actor, target, flag type, automation, and time."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Number of records per page."},"records":{"type":"integer","description":"Total number of records in the result set."},"pages":{"type":"integer","description":"Total number of result pages (ceil(records/limit))."}},"required":["current","limit","records","pages"],"description":"Pagination meta-type for DiscussionBoard entity list endpoints. Includes page cursor, size, record total, and page count. See IPage generic pattern."}}},"completed":108,"total":186,"step":0,"created_at":"2025-07-22T08:18:56.992Z"},"tokenUsage":{"facade":{"aggregate":{"total":1388698,"input":{"total":1314604,"cached":7936},"output":{"total":74094,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1388698,"input":{"total":1314604,"cached":7936},"output":{"total":74094,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1388698,"input":{"total":1314604,"cached":7936},"output":{"total":74094,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1388698,"input":{"total":1314604,"cached":7936},"output":{"total":74094,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardTagProposal":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for each tag proposal.\n\nThis is the atomic ID for referencing the tag proposal record in all moderation, admin workflow, and business logic layers. It is stored as a UUID and ensures 3NF normalization by not duplicating or calculating information elsewhere. Used in querying, audit logs, and reviewing proposals."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's unique identifier (UUID) who is proposing the tag to the forum.\n\nLinks directly to the member (user) object. Fulfills business and audit requirements for tracing who proposed each tag and supporting accountability. Never nullable."},"proposed_tag":{"type":"string","description":"String value of the tag being proposed. Must be unique for each member proposal.\n\nCarries the atomic tag label string that the proposing user entered. Used in tag creation flows, moderation, and anti-abuse logic. Supports uniqueness constraints, profanity filtering, and business validation at the API/business layer."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for when the tag proposal was submitted.\n\nSupports audit/lifecycle flows for the tag curation system, rate-limiting logic for proposals, and analytics. Always present."}},"required":["id","discussionboard_member_id","proposed_tag","created_at"],"description":"Discussion Board Tag Proposal entity representing an atomic proposal for a new topic tag to be added to the curated set.\n\nRefer to the requirements regarding curated tags and proposal/approval moderation flow. This model is normalized and tracks proposals per member for audit, curation, and abuse prevention. Every tag proposal is linked to its proposing member, supports rate-limiting and anti-abuse business logic, and enables end-to-end lifecycle tracking for tag onboarding."},"IDiscussionboardTagProposal.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member proposing the tag, fulfilling the business requirement to associate all proposals with an authenticated user.\n\nKey for validation, curation review, and auditing."},"proposed_tag":{"type":"string","description":"String representing the tag being proposed for addition.\n\nEnsures 3NF compliance. Uniqueness required (per member) and subject to moderation, profanity filtering, and system-wide tag policy. Examples: 'Elections', 'Macroeconomics', 'CampaignFinance'."}},"required":["discussionboard_member_id","proposed_tag"],"description":"Request body schema for creating a new tag proposal.\n\nProvided by a member submitting a new tag for moderator/admin review. Only authenticated, non-suspended members may create proposals. Used in rate-limiting and tag curation flows."},"IDiscussionboardTagProposal.IUpdate":{"type":"object","properties":{"proposed_tag":{"type":"string","description":"Updated tag string for the proposal. Must comply with tag guidelines, maintain uniqueness per member, and be subject to all business and moderation filtering rules."}},"required":["proposed_tag"],"description":"Request body schema for updating an existing tag proposal.\n\nPermits a member or privileged moderator/admin to change the string of a proposed tag before review. Must comply with tag naming, uniqueness, and community rules."},"IDiscussionboardReport.IRequest":{"type":"object","properties":{"reported_by_member_id":{"type":"string","format":"uuid","description":"UUID of the reporting member (who filed the report), for filtering/search.\n\nAids in moderation review, audit, and rate-limiting reporting flows."},"resolved_by_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who resolved this report (if resolved). Useful for filtering by handler or admin in moderation dashboards."},"status":{"type":"string","description":"Moderation workflow status for filtering (e.g. 'pending', 'reviewed', 'actioned', 'dismissed').\n\nEnforces search, queueing, and reporting flows per requirements."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of target post, for searching reports by content. Supports reporting, audit, and moderation use-cases."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of the target comment for filtering comment-specific reports."},"created_from":{"type":"string","format":"date-time","description":"Lower-bound datetime for filtering reports created after this moment in time."},"created_to":{"type":"string","format":"date-time","description":"Upper-bound datetime for filtering reports created before this time."},"page":{"type":"integer","format":"int32","description":"Pagination: requested page number (1-based default)."},"limit":{"type":"integer","format":"int32","description":"Pagination: number of reports per page (API and UI enforce reasonable per-request caps for system health)."}},"required":[],"description":"Request body schema for listing or searching moderation reports.\n\nEnables paginated, filterable queries for all moderation reports. Supports queueing, batch review, and audit/reporting use-cases. Reference to business requirements for rate-limiting, workflow status, and moderation dashboard UX."},"IPageDiscussionboardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardReport"},"description":"Array of report entities for the current result page."}},"required":["pagination","data"],"description":"Paginated search/list result for moderation reports (discussionboard_reports).\n\nContains queueable result items for moderation dashboards, analytics, and batch admin workflows. Used for implementation of audit trails and review logs."},"IDiscussionboardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for each report entity.\n\nAtomic UUID for referencing the report in all moderation, audit, and dashboard logic. Supports audit, appeals, and rate-limiting enforcement."},"reported_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member who filed the report. Links to user account history, supports abuse/rate-limiting controls, and allows for statistical dashboards tracking reporting activity."},"resolved_by_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who resolved this report. Nullable if unresolved or resolution is automated. Business logic references audit, review, and transparency rules."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of the reported post if this report targets a post. Null if not a post report."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of the reported comment if this report targets a comment entity. Null if not applicable."},"reason":{"type":"string","description":"Human-readable string reason for report (e.g., 'Spam', 'Hate Speech', or custom message).\n\nRefer to content guidelines and moderation policy for required handling, audit, and evidentiary trace."},"status":{"type":"string","description":"Current workflow status (e.g., 'pending', 'reviewed', 'actioned', 'dismissed').\n\nEnables queueing, automated handling, state transitions, and process tracking for the moderation team."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for report creation. Supports audit trails, reporting, and appeals workflows."},"resolved_at":{"type":"string","format":"date-time","description":"When the report was resolved (null if unresolved/ongoing). For workflow tracking, audit, resolution, and transparency features."}},"required":["id","reported_by_member_id","reason","status","created_at"],"description":"Moderation Report entity representing a flagged post or comment as reported by a board member, tracked through resolution workflow.\n\nTracks detailed moderation, audit, and appeal status for reported posts or comments. Atomic record used in moderation dashboards, appeals, compliance records. All handling of report is governed by transparency, workflow, and logging business rules."},"IDiscussionboardReport.ICreate":{"type":"object","properties":{"reported_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member filing the report, ensuring auditability and enforcing business validation/rate limit per user."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of the post being reported (nullable—must have either post or comment)."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of the comment being reported (nullable—must have either post or comment)."},"reason":{"type":"string","description":"The reason for reporting (free-form or policy-guided string).\n\nMay be constrained by content policy, with predefined categories and/or custom entries."}},"required":["reported_by_member_id","reason"],"description":"Request body schema for creating a new moderation report.\n\nMember-supplied input for flagging content (post or comment) for review. Must satisfy business/logical enforcement for per-user rate-limiting, content validation, and correctness in targeting either post or comment but not both."},"IDiscussionboardReport.IUpdate":{"type":"object","properties":{"resolved_by_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who is resolving this report. Tracked for audit, transparency, and operational metrics."},"status":{"type":"string","description":"Workflow status after resolution (e.g. 'reviewed', 'actioned', 'dismissed'). Enforced by moderation, audit, and analytics."},"resolved_at":{"type":"string","format":"date-time","description":"Timestamp marking when the report was resolved. Required for proper audit/compliance."}},"required":["resolved_by_moderator_id","status","resolved_at"],"description":"Request body schema for updating (resolving) a moderation report.\n\nSupplies required information for closing, dismissing, or actioning the flagged content, meeting all compliance, audit, and transparency rules."},"IDiscussionboardModerationLog.IRequest":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator whose actions are being queried/filtering.\n\nAids in accountability dashboards and audit logs."},"action_type":{"type":"string","description":"Moderation action type filter (e.g. 'delete_post', 'issue_warning', etc). Enables search by type via dashboard, analytics, or audit review mechanisms."},"target_type":{"type":"string","description":"Target entity type string (e.g. 'post', 'comment', 'member', 'tag'). Allows focused action review according to content or user affected."},"target_id":{"type":"string","format":"uuid","description":"UUID of the target entity in question (post/comment/member etc). For use in targeted event search flows."},"from":{"type":"string","format":"date-time","description":"Lower-bound for action_at range filtering."},"to":{"type":"string","format":"date-time","description":"Upper-bound for action_at range filtering."},"page":{"type":"integer","format":"int32","description":"Pagination: requested result page index (1-based)."},"limit":{"type":"integer","format":"int32","description":"Pagination: number of logs per page (API and UI enforce per-request upper limits)."}},"required":[],"description":"Request body schema for querying/paginating moderation logs.\n\nAllows filtering by moderator, action type, target, and period for investigation, reporting, or analytics."},"IPageDiscussionboardModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerationLog"},"description":"Array of moderation log entries for current page."}},"required":["pagination","data"],"description":"Paginated moderation log result schema.\n\nCarries array of log entities and full pagination info as required for audit review, dashboard query, and process analytics."},"IDiscussionboardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the moderation log entry.\n\nAtomic reference for audit, investigation, and appeals workflows."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who performed this action. Used for accountability, operational metrics, and appeals tracking."},"target_member_id":{"type":"string","format":"uuid","description":"UUID of the affected member if a user-targeted action (nullable where content-only actions are involved). Enables compliance, escalation ladders, contextual appeals."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of affected post if action is related to a post (null otherwise). Nested targets handled in audit/business logic."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of affected comment if moderation activity is on a comment. Null for non-comment actions."},"action_type":{"type":"string","description":"String code for log action (e.g. 'delete_post', 'suspend_member'). Categorical and used for operational analytics and audit clarity."},"action_details":{"type":"string","description":"Extra information describing the moderation action. Null if not provided. Supports compliance, appeals reference."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the moderation event took place. For investigation/audit timelines."}},"required":["id","moderator_id","action_type","created_at"],"description":"Moderation log entity representing moderator/admin actions for audit, analytics, and compliance recording.\n\nEach event is standalone and atomic for legal, appeals, and governance requirements. References moderator, target entities (user, post, comment), log action and time, with optional additional detail."},"IDiscussionboardModerationLog.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator creating the log event. Needed for accountability, auditing, and workflow linkage."},"action_type":{"type":"string","description":" String code for the type of moderation event performed (e.g., 'delete_post', 'warn_user').\n\nOpen string category enabling operational analytics, reporting, and flexibility in business rule extensions."},"target_member_id":{"type":"string","format":"uuid","description":"UUID of affected member, for user-directed actions. Null if event is not user-related."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of affected post for content moderation events. Null if unrelated."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of affected comment entity. Null if unrelated to comment moderation."},"action_details":{"type":"string","description":"Optional descriptive narrative explaining what was done, justification, or evidence/log trace. Used for appeals and compliance."}},"required":["moderator_id","action_type"],"description":"Request body schema for creating a moderator action log entry.\n\nEnforced for all moderator/admin interventions (delete, suspend, warn, tag action, etc) to provide a traceable action trail per organizational, legal, and community governance requirements."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"int32","description":"Current page number in the result set.\n\n1-based index, with value reflecting the returned dataset position. Applies to all paginated endpoints in DiscussionBoard APIs."},"limit":{"type":"integer","format":"int32","description":"The maximum number of results per page."},"records":{"type":"integer","format":"int32","description":"The total number of records in the full dataset that match the filter/search criteria before paging. Used to calculate total pagination and client-side UI."},"pages":{"type":"integer","format":"int32","description":"The total number of result pages, derived from records / limit (rounded up if needed)."}},"required":["current","limit","records","pages"],"description":"Standard pagination information structure embedded as part of all paged list responses (see API doc comments for IPage<T>).\n\nRefer to core documentation on paginated navigation, audit, and reporting flows."}}},"completed":120,"total":186,"step":0,"created_at":"2025-07-22T08:18:57.528Z"},"tokenUsage":{"facade":{"aggregate":{"total":1471082,"input":{"total":1393575,"cached":7936},"output":{"total":77507,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1471082,"input":{"total":1393575,"cached":7936},"output":{"total":77507,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1471082,"input":{"total":1393575,"cached":7936},"output":{"total":77507,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1471082,"input":{"total":1393575,"cached":7936},"output":{"total":77507,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardMemberNotificationSettings.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member (UUID) for whom to create notification settings. References the member entity in the database.\n\nThis is required for 1:1 linkage and permission enforcement. Ensures settings are applied to the correct user as mandated by privacy and audit requirements."},"in_app_enabled":{"type":"boolean","description":"Whether the member wants to receive in-app notifications for activities in the discussion board.\n\nControls system-side push of new/reply/mention/moderation/announcement events to the web/mobile client UI."},"email_enabled":{"type":"boolean","description":"If true, email notifications are delivered for events the member has enabled (e.g., replies, moderation updates, announcements).\n\nServes for opt-in/opt-out per GDPR and user privacy, fulfills business requirement for alert configuration."},"reply_notification_enabled":{"type":"boolean","description":"Whether the member should receive notifications (in-app/email) when someone replies to their posts, comments, or threads.\n\nImplements key engagement flow required for personalized alerting."},"mention_notification_enabled":{"type":"boolean","description":"Controls receiving alerts when the member is @mentioned in posts/comments.\n\nRequired for engagement and complaint flows as described in user journeys and requirements analysis."},"moderation_notification_enabled":{"type":"boolean","description":"Whether the user should receive notifications relating to moderation (warnings, suspensions, moderation actions on their content).\n\nOpt-in/opt-out is required for transparency per business and compliance rules."},"announcement_notification_enabled":{"type":"boolean","description":"Indicates if board announcements (global or per-board info, rule changes, etc.) should be pushed to this user.\n\nField supports member control of communication volume and legal notice requirements."}},"required":["discussionboard_member_id","in_app_enabled","email_enabled","reply_notification_enabled","mention_notification_enabled","moderation_notification_enabled","announcement_notification_enabled"],"description":"Schema for creating a new notification settings record for a DiscussionBoard member.\n\nImplements business requirement for user preference and compliance with privacy regulations. Each property corresponds to toggles in the notification settings UI, giving members granular control over which notifications they wish to receive by channel or event type. All fields are atomic and map directly to the Prisma schema for notification settings records."},"IDiscussionboardMemberNotificationSettings.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optionally filters by member ID (UUID). Only retrieve settings for this member if set.\n\nUsed in admin dashboards or for analytics."},"in_app_enabled":{"type":"boolean","description":"Filter for members who have in-app notifications enabled (true) or disabled (false).\n\nSupports segmentation and delivery targeting."},"email_enabled":{"type":"boolean","description":"Filter settings where email delivery is enabled/disabled. Used for campaign targeting or opt-out reporting."},"announcement_notification_enabled":{"type":"boolean","description":"If set, filters members by whether they have enabled announcement notifications. Used for regulatory delivery compliance."},"page":{"type":"integer","format":"uint32","description":"Page number for pagination (starts from 1).\n\nImplements standard pagination for list or admin search UI."},"limit":{"type":"integer","format":"uint32","description":"Limit on number of results per page (default may be 100 or system-defined cap).\n\nHelps with result batching and API performance."}},"description":"Request schema for searching, filtering, or listing DiscussionBoard member notification settings.\n\nImplements query logic as required for user list UIs, admin analysis, and API pagination. Derived directly from Prisma and OpenAPI operation requirements. All properties are optional search/aggregation criteria, with full compliance to original business rules and structure.","required":[]},"IPageDiscussionboardMemberNotificationSettings":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/discussionboardMemberNotificationSettings"},"description":"The main list of notification settings records for this response page."}},"required":["pagination","data"],"description":"Container schema for paginated result sets of DiscussionBoard member notification settings list/search operations.\n\nFollows the IPage<T> convention for OpenAPI pagination. Used for authentication and admin UI endpoints requiring result batching, total count metadata, and standard navigation structure as detailed in business and non-functional requirements."},"discussionboardMemberNotificationSettings.IUpdate":{"type":"object","properties":{"in_app_enabled":{"type":"boolean","description":"Whether the member should receive notifications via in-app delivery. Fulfills UI toggle and opt-in/out flows."},"email_enabled":{"type":"boolean","description":"If true, email notification delivery is enabled for this member. Supports user self-service for privacy and delivery compliance."},"reply_notification_enabled":{"type":"boolean","description":"Enable/disable notifications when user receives replies to their posts/comments."},"mention_notification_enabled":{"type":"boolean","description":"Enable/disable notifications for @mentions."},"moderation_notification_enabled":{"type":"boolean","description":"If true, user will be alerted on moderation events affecting them."},"announcement_notification_enabled":{"type":"boolean","description":"Whether board announcements are notified to this user."}},"description":"Schema for updating the notification delivery preferences for a member in the DiscussionBoard platform.\n\nUsed for in-app, email, and per-event-type notification toggles. All fields are optional—updates only supplied properties while preserving other values.","required":[]},"discussionboardMemberNotificationSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification settings record. Primary key in the Prisma schema.\n\nThis is required for settings record mutation, lookup, or audit trail referencing."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID identifying the member whom this settings record belongs to. Fulfills 1:1 mapping, linking the settings to an individual user as enforced in the Actors domain data model.\n\nCritical for user-driven preference and privacy enforcement."},"in_app_enabled":{"type":"boolean","description":"Indicates whether the member receives in-app notifications for the forum.\n\nAtomic field, maps to personal delivery toggle as per business requirement."},"email_enabled":{"type":"boolean","description":"Shows whether email notifications are enabled for this user in the discussion board.\n\nSupports GDPR and user privacy radio toggles in self-service UI."},"reply_notification_enabled":{"type":"boolean","description":"If true, the member receives notifications on replies to their threads/posts/comments."},"mention_notification_enabled":{"type":"boolean","description":"Whether notifications are pushed for @mentions."},"moderation_notification_enabled":{"type":"boolean","description":"Indicates if moderation action notifications (suspensions, warnings, content edits) are enabled."},"announcement_notification_enabled":{"type":"boolean","description":"If true, site-wide or board-specific announcements are pushed to this member as notifications."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this notification setting record was created. Set automatically at insert.\n\nRequired for compliance and retention audits."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when settings were last updated. Used for audit trails and change history.\n\nSupports rollback/history display in admin tools."}},"required":["id","discussionboard_member_id","in_app_enabled","email_enabled","reply_notification_enabled","mention_notification_enabled","moderation_notification_enabled","announcement_notification_enabled","created_at","updated_at"],"description":"Main representation of a DiscussionBoard member's notification delivery settings.\n\nEach record is 1:1 tied to a user, with atomic fields for each event/channel toggle. Aligns with business rules for compliance, notification delivery engine, and user-centric opt-in/out control as detailed in the requirements analysis and Prisma schema comments. All fields are mandatory for DB integrity, reporting, and auditability."},"discussionboardMemberNotificationSettings.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the notification settings record that was deleted. Always present for confirmation and audit trail linkage."},"result":{"oneOf":[{"const":"success","description":"Status of the delete operation. Must be one of: 'success' (operation successful), 'not_found' (no record deleted), or 'error' (operation failed unexpectedly).\n\nImplements API feedback for client and admin flows, as required by business rules."},{"const":"not_found","description":"Status of the delete operation. Must be one of: 'success' (operation successful), 'not_found' (no record deleted), or 'error' (operation failed unexpectedly).\n\nImplements API feedback for client and admin flows, as required by business rules."},{"const":"error","description":"Status of the delete operation. Must be one of: 'success' (operation successful), 'not_found' (no record deleted), or 'error' (operation failed unexpectedly).\n\nImplements API feedback for client and admin flows, as required by business rules."}],"description":"Status of the delete operation. Must be one of: 'success' (operation successful), 'not_found' (no record deleted), or 'error' (operation failed unexpectedly).\n\nImplements API feedback for client and admin flows, as required by business rules."},"deletedAt":{"type":"string","format":"date-time","description":"Timestamp for when the notification settings record was deleted or marked deleted. Null if operation failed."}},"required":["id","result"],"description":"API response schema for deletion of a member's notification settings.\n\nEnsures standardization of feedback from delete endpoints, providing audit, compliance, and traceability of settings removal actions as required by privacy and data governance policies."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number (starting from 1).\n\nRequired for navigation and pagination logic."},"limit":{"type":"integer","format":"uint32","description":"Maximum entries per page (default 100 unless otherwise specified).\n\nUsed for controlling data window size and batching."},"records":{"type":"integer","format":"uint32","description":"Total number of records in the filtered set or table.\n\nSupports client-side page logic and meta info in UI."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages for this result (ceil(records/limit))."}},"required":["current","limit","records","pages"],"description":"Standard pagination metadata for API responses, as required for IPage<T> response containers throughout the system."}}},"completed":126,"total":186,"step":0,"created_at":"2025-07-22T08:18:57.848Z"},"tokenUsage":{"facade":{"aggregate":{"total":1552057,"input":{"total":1472489,"cached":7936},"output":{"total":79568,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1552057,"input":{"total":1472489,"cached":7936},"output":{"total":79568,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1552057,"input":{"total":1472489,"cached":7936},"output":{"total":79568,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1552057,"input":{"total":1472489,"cached":7936},"output":{"total":79568,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"DiscussionBoardAdmins.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member to be promoted to admin. References a unique user in the Actors domain. Value must match an existing, active member's UUID. Required for establishing the admin relationship."},"elevated_at":{"type":"string","format":"date-time","description":"Timestamp for when admin privileges were granted to the member. This is a required, server-generated or client-provided ISO 8601 datetime indicating role elevation, supporting audit compliance as per business rules."}},"required":["discussionboard_member_id","elevated_at"],"description":"Object used to create a new admin assignment in the system. Based on discussionboard_admins Prisma table and relevant to role elevation operations. Aligns with business requirement for explicit privilege tracking and audit compliance."},"DiscussionBoardAdmins.IUpdate":{"type":"object","properties":{"elevated_at":{"type":"string","format":"date-time","description":"The new timestamp for admin privilege assignment, if being changed. Must be ISO 8601 datetime. Used for correcting elevated role records or forced role recertification by system administrator."}},"required":["elevated_at"],"description":"Object for updating the admin elevation record for a member in the admin system. Syncs with business audit and privilege recertification requirements for role management."},"DiscussionBoardMemberProfiles.IRequest":{"type":"object","properties":{"display_name":{"type":"string","description":"Display name string for filtering member profiles. Enables admin/moderator user search for a visible or preferred nickname. Optional, case-insensitive partial matches allowed."},"joined_after":{"type":"string","format":"date-time","description":"Find members who joined after this ISO 8601 datetime. Supports onboarding reports and retention queries."},"joined_before":{"type":"string","format":"date-time","description":"Find members who joined before this ISO 8601 datetime. Allows for time range user profile audits or stale account filtering."},"page":{"type":"integer","minimum":1,"description":"Pagination: the page number (1-based)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: maximum number of items to return per page."}},"required":[],"description":"Request object for searching, filtering, and paginating member profiles (user profile domain). Used in admin/moderator profile list views for audit or search."},"DiscussionBoardMemberProfiles.IPage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMemberProfile"},"description":"The array of member profile entities for the current page. Each is a profile object with all associated metadata."}},"required":["pagination","data"],"description":"Pagination container for member profile list queries. Extends standard IPage pattern with array of profile objects and page metadata."},"IDiscussionBoardMemberProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the member profile. This is the primary key of the discussionboard_member_profiles table. Required for linking to the member and for all profile operations."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who owns this profile. Foreign key into the members domain. Supports 1:1 relationships and profile authorization logic."},"display_name":{"oneOf":[{"type":"string","description":"Optional, user-specified display name. Can be null if not set or privacy opted out. Used for personalization, mentions, and visibility/search."},{"type":"null"}],"description":"Optional, user-specified display name. Can be null if not set or privacy opted out. Used for personalization, mentions, and visibility/search."},"bio":{"oneOf":[{"type":"string","description":"Optional biography string (user-authored). Can be null if empty or privacy-protected. Allows rich text/markdown for expression, displayed in profile UI."},{"type":"null"}],"description":"Optional biography string (user-authored). Can be null if empty or privacy-protected. Allows rich text/markdown for expression, displayed in profile UI."},"avatar_uri":{"oneOf":[{"type":"string","maxLength":80000,"description":"Optional URI to avatar image, photo, or profile picture. May be null if unused, for privacy, or if not set. Used for visual personalization in UI; must point to valid and secure resource."},{"type":"null"}],"description":"Optional URI to avatar image, photo, or profile picture. May be null if unused, for privacy, or if not set. Used for visual personalization in UI; must point to valid and secure resource."},"website":{"oneOf":[{"type":"string","maxLength":80000,"description":"User's personal or professional website URL. Optional, may be null for privacy. Supports https URIs, long enough for tracking/redirect URLs, and is displayed on profile if present."},{"type":"null"}],"description":"User's personal or professional website URL. Optional, may be null for privacy. Supports https URIs, long enough for tracking/redirect URLs, and is displayed on profile if present."},"location":{"oneOf":[{"type":"string","description":"Optional user-supplied location info. Null if not set, otherwise shows a city, region, or custom string (no strict format). Used for community statistics and profile enrichment."},{"type":"null"}],"description":"Optional user-supplied location info. Null if not set, otherwise shows a city, region, or custom string (no strict format). Used for community statistics and profile enrichment."}},"required":["id","discussionboard_member_id"],"description":"Represents a member profile in the system. Fully normalized object mapping to discussionboard_member_profiles, with all expressiveness and privacy fields documented. Required for displaying or modifying user profile information."},"IDiscussionBoardMemberProfile.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who is creating this profile. Ensures 1:1 relationship between member and profile. Required and must map to an active member."},"display_name":{"oneOf":[{"type":"string","description":"Optional display name for the user profile. Can be null for privacy. Shows up in profile and search UI if present."},{"type":"null"}],"description":"Optional display name for the user profile. Can be null for privacy. Shows up in profile and search UI if present."},"bio":{"oneOf":[{"type":"string","description":"Optional bio/description. May include markdown. Null for suppressed or omitted."},{"type":"null"}],"description":"Optional bio/description. May include markdown. Null for suppressed or omitted."},"avatar_uri":{"oneOf":[{"type":"string","maxLength":80000,"description":"Optional avatar image URI. Users may omit for privacy or style reasons. Must be a valid URI or null."},{"type":"null"}],"description":"Optional avatar image URI. Users may omit for privacy or style reasons. Must be a valid URI or null."},"website":{"oneOf":[{"type":"string","maxLength":80000,"description":"Optional website URI. Null if not set. Uses long string to support full web URLs."},{"type":"null"}],"description":"Optional website URI. Null if not set. Uses long string to support full web URLs."},"location":{"oneOf":[{"type":"string","description":"Optional location string. Set to null for privacy or unspecified."},{"type":"null"}],"description":"Optional location string. Set to null for privacy or unspecified."}},"required":["discussionboard_member_id"],"description":"Properties required to create a new user profile. Used in profile creation flows, mapped to the profiles DB. Allows for partial/empty values for privacy."},"IDiscussionBoardMemberProfile.IUpdate":{"type":"object","properties":{"display_name":{"oneOf":[{"type":"string","description":"Updated or new display name. Null means remove or redact."},{"type":"null"}],"description":"Updated or new display name. Null means remove or redact."},"bio":{"oneOf":[{"type":"string","description":"Updated biography string. Null to clear value; markdown supported."},{"type":"null"}],"description":"Updated biography string. Null to clear value; markdown supported."},"avatar_uri":{"oneOf":[{"type":"string","maxLength":80000,"description":"New or updated avatar URI; null to clear avatar."},{"type":"null"}],"description":"New or updated avatar URI; null to clear avatar."},"website":{"oneOf":[{"type":"string","maxLength":80000,"description":"New or updated website link; null to clear or suppress."},{"type":"null"}],"description":"New or updated website link; null to clear or suppress."},"location":{"oneOf":[{"type":"string","description":"New or updated location string; null to clear or hide location."},{"type":"null"}],"description":"New or updated location string; null to clear or hide location."}},"required":[],"description":"Update object for modifying member profile data. Fields are optional and may be set to null to clear; only provided values are changed. Used by member or admin/moderator interfaces."},"IDiscussionBoardMemberProfile.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of the deleted profile. Used to reference or confirm the removed record."},"status":{"type":"string","description":"Result of the deletion operation. Expected to be values such as 'deleted', 'not_found', 'error', following system operation conventions."}},"required":["id","status"],"description":"Result object returned after attempting to delete a member profile. Contains ID and status for client confirmation."},"IDiscussionBoardMemberAuthentication.IRequest":{"type":"object","properties":{"provider":{"type":"string","description":"Authentication provider, e.g., 'local', 'google', 'kakao'. Used for filtering credential entries. Optional, case-insensitive."},"last_login_after":{"type":"string","format":"date-time","description":"Optional ISO 8601 datetime restricting results to credentials used after a certain date/time."},"last_login_before":{"type":"string","format":"date-time","description":"Optional ISO 8601 datetime filtering records to those last used before a specific moment."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: maximum results per page."}},"required":[],"description":"Request object for searching or paginating member authentication records. Used mainly for admin troubleshooting or security audit screens."},"IPageDiscussionBoardMemberAuthentication":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMemberAuthentication"},"description":"Array of authentication records matching query/page. Each represents a unique member login credential."}},"required":["pagination","data"],"description":"Pagination container for authentication record list queries. Follows IPage contract; used in credential admin UIs."},"IDiscussionBoardMemberAuthentication":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Authentication record unique identifier. Primary key in the discussionboard_member_authentications table."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's UUID. Associates this credential with a specific member and allows linking to the user domain."},"provider":{"type":"string","description":"The authentication method/provider (e.g., 'local', 'google', 'kakao'). Enables login flows or debugging."},"provider_identifier":{"type":"string","description":"Provider-unique identifier (username/email for local, external ID for OAuth). Used for authentication and account linking."},"password_hash":{"oneOf":[{"type":"string","description":"Hashed credential (for local sign-ins). For OAuth/external, this will be null (never store password as cleartext). Security-critical. May be null if external login."},{"type":"null"}],"description":"Hashed credential (for local sign-ins). For OAuth/external, this will be null (never store password as cleartext). Security-critical. May be null if external login."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time","description":"Last successful login datetime (ISO 8601). Used for audit, SSO troubleshooting, and inactivity checks. Null if never used."},{"type":"null"}],"description":"Last successful login datetime (ISO 8601). Used for audit, SSO troubleshooting, and inactivity checks. Null if never used."}},"required":["id","discussionboard_member_id","provider","provider_identifier"],"description":"Represents a member's authentication method. Used for login credential listings, auditing, and credential management. Fully normalized per security/business requirement."},"IDiscussionBoardMemberAuthentication.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member for whom this credential will be created. Must correspond to an active user and allows linking multiple login types to a member account."},"provider":{"type":"string","description":"Name of authentication provider (e.g., 'local', 'google'). Enforces login method uniqueness within the system."},"provider_identifier":{"type":"string","description":"Provider-unique value; for local, the email/username; for SSO/OAuth, the provider-issued user ID or email."},"password_hash":{"oneOf":[{"type":"string","description":"Securely stored hash for password (when applicable). Null if not storing password/using external login."},{"type":"null"}],"description":"Securely stored hash for password (when applicable). Null if not storing password/using external login."}},"required":["discussionboard_member_id","provider","provider_identifier"],"description":"Properties required to create a new member authentication credential. Used in account onboarding and credential add/remove flows."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number (1-based)."},"limit":{"type":"integer","description":"Number of records per page."},"records":{"type":"integer","description":"Total number of records available."},"pages":{"type":"integer","description":"Total number of available pages."}},"required":["current","limit","records","pages"],"description":"Standard pagination metadata, as used in IPage containers across all entities."}}},"completed":138,"total":186,"step":0,"created_at":"2025-07-22T08:18:59.306Z"},"tokenUsage":{"facade":{"aggregate":{"total":1633517,"input":{"total":1551457,"cached":7936},"output":{"total":82060,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1633517,"input":{"total":1551457,"cached":7936},"output":{"total":82060,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1633517,"input":{"total":1551457,"cached":7936},"output":{"total":82060,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1633517,"input":{"total":1551457,"cached":7936},"output":{"total":82060,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardSetting.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"검색어로, 설정 키, 값 또는 설명에 대해 텍스트 기반 검색을 수행하는 데 사용됩니다.\n\n프리즈마 discussionboard_settings 테이블의 속성(예: key, value, description)에 대해 부분 일치로 필터링할 수 있습니다."},"page":{"type":"integer","format":"int32","description":"페이지 번호(1부터 시작).\n\n페이지 기반 페이징 구현 시 요청된 페이지 번호를 지정합니다."},"limit":{"type":"integer","format":"int32","description":"한 페이지당 반환할 최대 레코드 수입니다.\n\n대용량 데이터셋에 대한 페이징 성능과 사용자 선택적 목록 길이 제어를 지원합니다. 기본값은 100입니다."},"createdAfter":{"type":"string","format":"date-time","description":"특정 시점 이후에 생성된 설정만 반환하는 필터입니다.\n\n감사 목적으로 사용되며 ISO 8601 날짜-시간 문자열이어야 합니다."},"createdBefore":{"type":"string","format":"date-time","description":"특정 시점 이전에 생성된 설정만 반환하는 필터입니다.\n\n감사 또는 이력 검토 목적이며, ISO 8601 날짜-시간 형식입니다."}},"required":[],"description":"시스템 설정 레코드의 목록 검색/페이징/필터링을 위한 요청 본문 타입입니다.\n\n이 타입은 discussionboard_settings 프리즈마 테이블의 레코드를 필터링, 검색, 페이징하거나 정렬할 때 사용됩니다. 각 속성은 요구 사항 정의서(04_DiscussionBoard_Requirements_and_Business_Rules.md) 및 시스템 구성 관리 비즈니스 로직을 반영합니다. 모든 필드는 선택적이며 적합한 복합 쿼리를 구성할 수 있습니다."},"IPageIDiscussionboardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보(현재 페이지, 제한값, 전체 레코드 수, 전체 페이지 수)를 담습니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSetting"},"description":"요청한 검색 조건 및 페이징/정렬에 일치하는 시스템 설정 레코드들의 배열입니다."}},"required":["pagination","data"],"description":"시스템 설정(discussionboard_settings)의 페이징 목록을 반환할 때 사용하는 표준 페이지 형식 타입입니다.\n\n각 설정 레코드의 속성(키, 값, 설명, 생성/수정 타임스탬프 등)과 페이지네이션 메타 정보를 포함합니다."},"IDiscussionboardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"설정의 고유식별자(PK).\n\ndiscussionboard_settings.id. UUID v4 문자열로, 시스템 내 전체적으로 고유 식별을 보장합니다."},"key":{"type":"string","description":"설정의 논리적 키입니다.\n\n시스템 요구사항(글로벌 설정 관리)에 따라 고유 문자열로 사용되며 예: 'maintenance_mode', 'email:smtp_host'.\n프리즈마 discussionboard_settings.key와 직접 매칭되며, 중복 불가(UNIQUE 제약)."},"value":{"type":"string","description":"설정 값입니다. 모든 실제 환경설정 데이터는 문자열로 저장되며, 불린형 값은 'true'/'false', 숫자는 문자열로 저장합니다.\n\ndiscussionboard_settings.value와 1:1 대응합니다."},"description":{"oneOf":[{"type":"string","description":"설정의 설명, 관리자 UI 등에서 참고 가능한 메타데이터 역할.\n\ndiscussionboard_settings.description. null 허용."},{"type":"null","description":"설정의 설명, 관리자 UI 등에서 참고 가능한 메타데이터 역할.\n\ndiscussionboard_settings.description. null 허용."}],"description":"설정의 설명, 관리자 UI 등에서 참고 가능한 메타데이터 역할.\n\ndiscussionboard_settings.description. null 허용."},"created_at":{"type":"string","format":"date-time","description":"설정 행이 최초 저장된 시점(감사/로그 목적).\n\ndiscussionboard_settings.created_at(Prisma, @Timestamptz). ISO 8601 날짜-시간."},"updated_at":{"type":"string","format":"date-time","description":"설정이 마지막으로 수정된 시점(감사 추적).\n\ndiscussionboard_settings.updated_at. ISO 8601 date-time."}},"required":["id","key","value","created_at","updated_at"],"description":"시스템 전체 설정 엔티티로 discussionboard_settings 프리즈마 테이블에 매핑됩니다.\n\n각 속성은 비즈니스 규칙(글로벌 설정 관리, 2년 이상 데이터 보존 및 관리자 감사 추적 등)에 따라 정의되어 있습니다. 키와 값은 모두 원자적으로 관리되고, 레코드 라이프사이클 내내 감사 추적이 필수입니다."},"IDiscussionboardSettings.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"생성할 시스템 설정의 고유 키.\n\ndiscussionboard_settings.key와 매핑되며, 중복 불가(UNIQUE 제약), 예: 'maintenance_mode', 'file_upload_limit' 등"},"value":{"type":"string","description":"설정의 실제 값.\n\n문자열 형태로 입력받아야 하며, 불린/숫자 등도 문자열로 저장됩니다."},"description":{"oneOf":[{"type":"string","description":"설정에 관한 부가 설명/주석.\n\n관리자 UI에서 참조 및 관리 목적이며, nullable입니다."},{"type":"null","description":"설정에 관한 부가 설명/주석.\n\n관리자 UI에서 참조 및 관리 목적이며, nullable입니다."}],"description":"설정에 관한 부가 설명/주석.\n\n관리자 UI에서 참조 및 관리 목적이며, nullable입니다."}},"required":["key","value"],"description":"새 시스템 설정(글로벌 환경설정 등)을 생성할 때 요청 본문에 사용하는 타입입니다.\n\ndiscussionboard_settings 프리즈마 테이블의 구조와 비즈니스 규칙(고유 키, 값, 선택적 설명)에 대응합니다."},"IDiscussionboardSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"생성된 시스템 설정 행의 고유 식별자(PK).\n\ndiscussionboard_settings.id와 직접 매핑, UUID입니다."},"key":{"type":"string","description":"설정의 논리 키. 중복 불가.\n\ndiscussionboard_settings.key, 비즈니스에서 관리되는 고유 키입니다."},"value":{"type":"string","description":"설정 실제 값, 문자열 저장.\n\ndiscussionboard_settings.value"},"description":{"oneOf":[{"type":"string","description":"설정 설명, 관리 목적 메타데이터.\n\ndiscussionboard_settings.description"},{"type":"null","description":"설정 설명, 관리 목적 메타데이터.\n\ndiscussionboard_settings.description"}],"description":"설정 설명, 관리 목적 메타데이터.\n\ndiscussionboard_settings.description"},"created_at":{"type":"string","format":"date-time","description":"설정 최초 저장 시각.\n\ndiscussionboard_settings.created_at, ISO 8601 포맷."},"updated_at":{"type":"string","format":"date-time","description":"설정 마지막 수정 시각, 감사 추적.\n\ndiscussionboard_settings.updated_at"}},"required":["id","key","value","created_at","updated_at"],"description":"시스템 설정 생성/조회 요청에 대한 반환 엔터티. discussionboard_settings 프리즈마 DB의 각 행을 완전히 설명합니다.\n\n모든 레코드는 고유 식별자, 설정 키, 값, 설명(선택), 생성/수정 타임스탬프를 포함합니다. 비즈니스 규칙 및 데이터 보존/감사 정책과 일치합니다."},"IDiscussionboardSettings.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"설정 값의 최신 값.\n\ndiscussionboard_settings.value 항목 갱신(전체 교체) 시 사용. 문자열로 저장됨."},"description":{"oneOf":[{"type":"string","description":"설정에 대한 관리자 설명/주석.\n\n설정 설명을 바꿀 때 입력. nullable."},{"type":"null","description":"설정에 대한 관리자 설명/주석.\n\n설정 설명을 바꿀 때 입력. nullable."}],"description":"설정에 대한 관리자 설명/주석.\n\n설정 설명을 바꿀 때 입력. nullable."}},"required":["value"],"description":"기존 시스템 설정 항목의 값을 변경할 때 PUT 요청 본문에 사용하는 타입입니다.\n\ndiscussionboard_settings 프리즈마 테이블의 update 오퍼레이션과 매칭하며 값(value)은 필수, 설명(description)은 선택 필드입니다."},"IDiscussionboardAuditLogs.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"전체 감사 로그의 action, actor_id, target_table, target_id, details 필드에 대해 텍스트(부분) 검색 필터로 사용합니다."},"actor_id":{"type":"string","format":"uuid","description":"특정 액터(행동 주체) ID로 감사 로그 필터링.\n\ndiscussionboard_audit_logs.actor_id와 매핑."},"action":{"type":"string","description":"로그된 액션 타입/이벤트명별(예: 'SETTING_UPDATE', 'ACCOUNT_SUSPEND')로만 필터링."},"target_table":{"type":"string","description":"감사로그의 대상 테이블 명으로만 필터링. 예: 'discussionboard_boards', 'discussionboard_threads' 등."},"createdAfter":{"type":"string","format":"date-time","description":"시작(이후) 날짜로 타임스탬프 필터. ISO 8601 포맷."},"createdBefore":{"type":"string","format":"date-time","description":"종료(이전) 날짜로 타임스탬프 필터. ISO 8601 포맷."},"page":{"type":"integer","format":"int32","description":"요청 페이지 번호."},"limit":{"type":"integer","format":"int32","description":"한 페이지당 반환할 레코드 수. 기본값 100."}},"required":[],"description":"감사 로그 목록(관리/감사 목적)의 검색, 필터, 페이징 요청용 타입입니다.\n\ndiscussionboard_audit_logs 프리즈마 테이블의 Action, Actor, Time, Target 필드와 긴밀히 연동되며, 관리/감사 도구 UI와 바로 연결되는 구조입니다."},"IPageDiscussionboardAuditLogs":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지 정보: 현재 페이지, 제한값, 전체 개수, 전체 페이지 수 포함."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAuditLogs"},"description":"조건에 부합하는 감사 로그 엔트리들의 배열."}},"required":["pagination","data"],"description":"감사 로그(discussionboard_audit_logs)의 페이지 단위 검색 결과 반환 타입입니다.\n\n전체 시스템 감사 목록 화면, 관리 UI 등에서 사용됩니다."},"IDiscussionboardAuditLogs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"감사 로그 고유 식별자(PK).\n\ndiscussionboard_audit_logs.id, 시스템 내 유일."},"action":{"type":"string","description":"감사 이벤트/행위의 구분 코드(예: 'SETTING_UPDATE', 'ACCOUNT_SUSPEND').\n\ndiscussionboard_audit_logs.action의 비즈니스 코드입니다."},"actor_id":{"type":"string","format":"uuid","description":"행위 주체의 고유 UUID(예: 관리자, 모더레이터, 일반 멤버 등).\n\ndiscussionboard_audit_logs.actor_id. FK 아님(액터 삭제 대응)."},"target_table":{"oneOf":[{"type":"string","description":"변경/감사 대상 테이블명. null 가능(예: 시스템 로그인 이벤트 등 대상 없음).\n\ndiscussionboard_audit_logs.target_table."},{"type":"null","description":"변경/감사 대상 테이블명. null 가능(예: 시스템 로그인 이벤트 등 대상 없음).\n\ndiscussionboard_audit_logs.target_table."}],"description":"변경/감사 대상 테이블명. null 가능(예: 시스템 로그인 이벤트 등 대상 없음).\n\ndiscussionboard_audit_logs.target_table."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"감사 이벤트의 대상 행/레코드의 UUID. null 허용.\n\ndiscussionboard_audit_logs.target_id."},{"type":"null","format":"uuid","description":"감사 이벤트의 대상 행/레코드의 UUID. null 허용.\n\ndiscussionboard_audit_logs.target_id."}],"description":"감사 이벤트의 대상 행/레코드의 UUID. null 허용.\n\ndiscussionboard_audit_logs.target_id."},"details":{"oneOf":[{"type":"string","description":"추가 세부 속성/메타 정보(JSON 문자열 또는 상세 텍스트). null 가능.\n\ndiscussionboard_audit_logs.details."},{"type":"null","description":"추가 세부 속성/메타 정보(JSON 문자열 또는 상세 텍스트). null 가능.\n\ndiscussionboard_audit_logs.details."}],"description":"추가 세부 속성/메타 정보(JSON 문자열 또는 상세 텍스트). null 가능.\n\ndiscussionboard_audit_logs.details."},"created_at":{"type":"string","format":"date-time","description":"감사 로그 생성 시각(한국/서울 기준).\n\ndiscussionboard_audit_logs.created_at, ISO8601 포맷."}},"required":["id","action","actor_id","created_at"],"description":"시스템 감사 로그 엔티티(행위 이력, 보안, 컴플라이언스, 시스템 변경 등).\n\ndiscussionboard_audit_logs DB 구조를 반영하며, 모든 이벤트별 action 및 actor_id를 중심으로, 생성 타임스탬프 및 추가 대상 테이블/ID/세부 정보를 포함합니다. 비즈니스 규칙/컴플라이언스 2년 이상 보관 등에 사용됩니다."},"IDiscussionboardAuditLogs.ICreate":{"type":"object","properties":{"action":{"type":"string","description":"기록할 감사 이벤트 액션 코드.\n\n예: 'SETTING_CREATE', 'ACCOUNT_BAN' 등. discussionboard_audit_logs.action."},"actor_id":{"type":"string","format":"uuid","description":"이 이벤트를 발생시킨 시스템 사용자(예: 관리자, 모더레이터 등)의 UUID.\n\ndiscussionboard_audit_logs.actor_id."},"target_table":{"oneOf":[{"type":"string","description":"감사 대상 테이블명, 없는 경우 null."},{"type":"null","description":"감사 대상 테이블명, 없는 경우 null."}],"description":"감사 대상 테이블명, 없는 경우 null."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"감사 대상 행의 UUID 또는 null."},{"type":"null","format":"uuid","description":"감사 대상 행의 UUID 또는 null."}],"description":"감사 대상 행의 UUID 또는 null."},"details":{"oneOf":[{"type":"string","description":"상세 설명/변경 전후 데이터 등. null 가능."},{"type":"null","description":"상세 설명/변경 전후 데이터 등. null 가능."}],"description":"상세 설명/변경 전후 데이터 등. null 가능."}},"required":["action","actor_id"],"description":"새 감사 로그 레코드를 삽입(Create)할 때 사용하는 요청 본문 타입입니다.\n\n모든 필드는 DB discussionboard_audit_logs 구조 및 시스템 감사 로직에 맞춰 정의되었습니다. 상세 대상 정보(테이블, ID, 상세 설명)는 선택적 입력입니다."},"IDiscussionboardAuditLogs.IUpdate":{"type":"object","properties":{"action":{"type":"string","description":"감사 로그의 변경 후 action 값."},"target_table":{"oneOf":[{"type":"string","description":"업데이트할 대상 테이블명."},{"type":"null","description":"업데이트할 대상 테이블명."}],"description":"업데이트할 대상 테이블명."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"업데이트할 대상 행의 UUID."},{"type":"null","format":"uuid","description":"업데이트할 대상 행의 UUID."}],"description":"업데이트할 대상 행의 UUID."},"details":{"oneOf":[{"type":"string","description":"업데이트할 상세 설명/메타 데이터."},{"type":"null","description":"업데이트할 상세 설명/메타 데이터."}],"description":"업데이트할 상세 설명/메타 데이터."}},"required":["action"],"description":"기존 감사 로그 엔티티(ID 기준)를 수정할 때 PUT 요청에 사용하는 타입입니다.\n\ndiscussionboard_audit_logs DB 레코드 중 action 필드는 필수, 나머지는 선택적 변경입니다."},"IDiscussionboardMembers.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"회원 ID, 상태, 가입일, 또는 기타 필드에 대한 부분 일치 텍스트 검색어입니다.\n\ndiscussionboard_members.* 필드(주로 id, status, joined_at)에 대해 동작합니다."},"status":{"type":"string","description":"회원 상태 값 필터(예: 'active', 'pending', 'suspended')\n\n기준값은 discussionboard_members.status에 부합해야 합니다."},"joinedAfter":{"type":"string","format":"date-time","description":"특정 날짜 이후에 가입한 멤버만 반환(ISO 8601).\n\n감사, 활동 분석에 활용."},"joinedBefore":{"type":"string","format":"date-time","description":"특정 날짜 이전에 가입한 멤버만 반환(ISO 8601).\n\n이력 관리나 통계 목적으로 사용."},"page":{"type":"integer","format":"int32","description":"페이지네이션 요청: 몇번째 페이지를 반환할지 지정, 1-base."},"limit":{"type":"integer","format":"int32","description":"페이지당 반환할 최다 멤버 수(기본 100)."}},"required":[],"description":"회원 리스트(멤버 검색/페이징/필터 UI 등) 요청 시 사용하는 쿼리 객체 타입입니다.\n\ndiscussionboard_members DB 테이블의 검색/조회/감사 비즈니스 로직 파라미터와 매핑됩니다.\n각 필드는 optional입니다."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"int32","description":"현재 페이지 번호(1-base).\n\n예: 1, 2, 3..."},"limit":{"type":"integer","format":"int32","description":"한 페이지당 최대 레코드 수(기본 100).\n\n클라이언트에서 요청하거나 시스템에서 자동 할당됩니다."},"records":{"type":"integer","format":"int32","description":"페이징 쿼리의 전체 대상 레코드 수."},"pages":{"type":"integer","format":"int32","description":"총 페이지 수. 전체 레코드/limit 후 올림 처리."}},"required":["current","limit","records","pages"],"description":"페이지 단위 결과에 대한 전체 페이징 메타 데이터 컨테이너입니다.\n\n페이지 번호, limit, 전체 레코드 수, 전체 페이지 수를 포함하여, 쿼리 또는 UI 폼에서 동적으로 변경/활용할 수 있도록 설계되었습니다."}}},"completed":150,"total":186,"step":0,"created_at":"2025-07-22T08:19:04.423Z"},"tokenUsage":{"facade":{"aggregate":{"total":1716189,"input":{"total":1630424,"cached":7936},"output":{"total":85765,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1716189,"input":{"total":1630424,"cached":7936},"output":{"total":85765,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1716189,"input":{"total":1630424,"cached":7936},"output":{"total":85765,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1716189,"input":{"total":1630424,"cached":7936},"output":{"total":85765,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionboardThreads":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreads"}}},"required":["pagination","data"],"description":"A paginated list of thread records for the DiscussionBoard system.\n\nThis schema is used as a standard response for list APIs returning discussion threads, providing both an array of thread records and pagination metadata. The 'pagination' object describes page number, limits, total records, and total pages, while 'data' holds the thread entities. Reflects use cases for APIs that need to fetch multiple threads in a scalable fashion, supporting UI thread lists and administrative moderation workflows."},"IDiscussionboardThreads":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for each thread. See discussionboard_threads.id"},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key to Board (discussionboard_boards.id). Indicates which board this thread belongs to."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key to Member (discussionboard_members.id). The member who created this thread."},"title":{"type":"string","description":"Thread title. See discussionboard_threads.title. Must be unique per board and descriptive for subject/content discovery. Supports advanced search UI."},"description":{"oneOf":[{"type":"string","description":"Optional thread description/body. See discussionboard_threads.description. Supports markdown for in-depth context at thread initiation. Nullable if no description."},{"type":"null","description":"Optional thread description/body. See discussionboard_threads.description. Supports markdown for in-depth context at thread initiation. Nullable if no description."}],"description":"Optional thread description/body. See discussionboard_threads.description. Supports markdown for in-depth context at thread initiation. Nullable if no description."},"status":{"type":"string","description":"Thread status (e.g. 'open', 'closed', 'locked'). See discussionboard_threads.status. Determines whether users can participate or view."},"created_at":{"type":"string","format":"date-time","description":"Thread creation timestamp (ISO 8601). Fulfills ordering/audit/log requirements. See discussionboard_threads.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp. Tracks edit history; reflects most recent change. See discussionboard_threads.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp. If set, thread is considered deleted but retained for audit/data retention. See discussionboard_threads.deleted_at."},{"type":"null","format":"date-time","description":"Soft-delete timestamp. If set, thread is considered deleted but retained for audit/data retention. See discussionboard_threads.deleted_at."}],"description":"Soft-delete timestamp. If set, thread is considered deleted but retained for audit/data retention. See discussionboard_threads.deleted_at."}},"required":["id","discussionboard_board_id","discussionboard_member_id","title","status","created_at","updated_at"],"description":"Discussion thread entity for the DiscussionBoard platform, as defined in discussionboard_threads schema.\n\nRepresents a top-level topic within a board. Contains all atomic fields for UI, audit, and API management. The entity separates UI-visible data (title/description/status) from relational identifiers (board/member), with required timestamps for audit compliance."},"IDiscussionboardThreads.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Target board ID to which this thread will belong. Required."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Creator member ID. Required."},"title":{"type":"string","description":"Thread title (must be unique within the board). Required."},"description":{"oneOf":[{"type":"string","description":"Optional thread description/body supporting markdown."},{"type":"null","description":"Optional thread description/body supporting markdown."}],"description":"Optional thread description/body supporting markdown."},"status":{"type":"string","description":"Initial thread status (e.g. 'open')."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of thread creation (ISO 8601 format)."}},"required":["discussionboard_board_id","discussionboard_member_id","title","status","created_at"],"description":"Schema for creating a new thread entity on the DiscussionBoard.\n\nFollows the requirements of discussionboard_threads for registration of a topic—including links to board and member, title, (optional) description, initial status, and creation timestamp. Used as request body for thread creation endpoint."},"IDiscussionboardThreads.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"New or updated thread title. If changed, must comply with board-uniqueness constraint."},"description":{"oneOf":[{"type":"string","description":"New thread description/body (markdown supported). Nullable."},{"type":"null","description":"New thread description/body (markdown supported). Nullable."}],"description":"New thread description/body (markdown supported). Nullable."},"status":{"type":"string","description":"New thread status ('open', 'closed', etc)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update (ISO 8601). Should correspond to edit action."}},"required":["updated_at"],"description":"Schema for updating an existing thread entity on the DiscussionBoard.\n\nPermits updating the thread title, description/body, and status. 'updated_at' is required for audit and edit tracking. All properties are optional except updated_at, so only fields to be changed need be included."},"IDiscussionboardPosts.IRequest":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"(Optional) Filter: posts belonging to specific thread ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) Filter: posts created by member."},"created_at_from":{"type":"string","format":"date-time","description":"(Optional) Filter: posts created after this date/time (ISO 8601)."},"created_at_to":{"type":"string","format":"date-time","description":"(Optional) Filter: posts created before this date/time (ISO 8601)."},"page":{"type":"integer","description":"Page number for pagination (starts from 1). Optional."},"limit":{"type":"integer","description":"Maximum number of posts per page. Optional."},"sort":{"type":"string","description":"Sort order: e.g. 'created_at desc', 'created_at asc', 'updated_at desc'. Optional."}},"required":[],"description":"Request schema for searching/listing DiscussionBoard posts with filtering, pagination, and sorting.\n\nUsed as request body for post-listing endpoint, enables advanced queries for feeds, dashboards, and administration."},"IPageIDiscussionboardPosts":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPosts"}}},"required":["pagination","data"],"description":"A paged response with list of DiscussionBoard posts for feeds or moderation views.\n\nProvides required 'pagination' structure and data array as per IPage contracts, holding DiscussionBoard post entities for API responses."},"IDiscussionboardPosts":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (ID) for the post. See discussionboard_posts.id."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Foreign key to thread. Which thread this post belongs to. See discussionboard_posts.discussionboard_thread_id."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key to member. Author of the post."},"body":{"type":"string","description":"Main post content/body (markdown supported). Business field required for thread participation."},"created_at":{"type":"string","format":"date-time","description":"Post creation datetime (ISO 8601). For audit trails and ordering."},"updated_at":{"type":"string","format":"date-time","description":"Last post modification datetime."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp (nullable). If set, post is logically deleted in UI/API results."},{"type":"null","format":"date-time","description":"Soft-delete timestamp (nullable). If set, post is logically deleted in UI/API results."}],"description":"Soft-delete timestamp (nullable). If set, post is logically deleted in UI/API results."}},"required":["id","discussionboard_thread_id","discussionboard_member_id","body","created_at","updated_at"],"description":"DiscussionBoard post entity. Defines all fields for core thread/post structures, links to thread/member, and auditing timestamps.\n\nUsed for direct display in APIs, UI, and audit/compliance reports. Conforms to discussionboard_posts table. 'body' is required and always markdown-capable."},"IDiscussionboardPosts.ICreate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread ID to which this post is to be attached. Required."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member ID for the post author (required)."},"body":{"type":"string","description":"Post body/content (markdown supported). Required."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of post creation."}},"required":["discussionboard_thread_id","discussionboard_member_id","body","created_at"],"description":"Request body schema to create a new post in a discussion thread.\n\nRepresents all required input fields per DB and business logic: links to thread/member, content, and audit field for timestamp. Used in frontend post creation UI and backend APIs."},"IDiscussionboardPosts.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Updated post body/content (markdown supported)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of post update (ISO 8601, required for audit)."}},"required":["updated_at"],"description":"Request body schema to update an existing discussion post.\n\nAllows updating only the body/content and timestamp. Use for member edits and moderation. No other mutable fields."},"IDiscussionboardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post. See discussionboard_posts.id"},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread ID this post belongs to."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member who authored the post."},"body":{"type":"string","description":"Post body/content."},"created_at":{"type":"string","format":"date-time","description":"When the post was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update time for post."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, the post is deleted/hidden in the UI. Null otherwise."},{"type":"null","format":"date-time","description":"If set, the post is deleted/hidden in the UI. Null otherwise."}],"description":"If set, the post is deleted/hidden in the UI. Null otherwise."}},"required":["id","discussionboard_thread_id","discussionboard_member_id","body","created_at","updated_at"],"description":"DiscussionBoard post resource entity object. Used as response payload for post queries, including fetch by id and delete (soft-delete) return types.\n\nFields match discussionboard_posts DB entity: UUIDs for relations, markdown body, and standard audit timestamps (creation/update/deletion)."},"IDiscussionboardComment.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"(Optional) Filter by parent post ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) Filter by member/author id."},"parent_id":{"type":"string","format":"uuid","description":"(Optional) Filter for comments that are replies to a specific comment (threaded discussion)."},"created_at_from":{"type":"string","format":"date-time","description":"(Optional) Only comments created after this datetime."},"created_at_to":{"type":"string","format":"date-time","description":"(Optional) Only comments created before this datetime."},"page":{"type":"integer","description":"Results page number for pagination (optional)."},"limit":{"type":"integer","description":"Maximum number of comments per page (optional)."},"sort":{"type":"string","description":"Sort criteria, e.g. 'created_at desc', 'created_at asc', 'updated_at desc' (optional)."}},"required":[],"description":"Request body schema for searching/listing comments (discussionboard_comments) with filters, search, and pagination.\n\nEnables advanced queries for threaded forum display, admin review, and hierarchical UI."},"IPageIDiscussionboardComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardComment"}}},"required":["pagination","data"],"description":"Paged response of DiscussionBoard comments, with thread/post context for each and pagination metadata for UI and backoffice moderation workflows.\n\nReturns an array of comment entities for forum/audit/reporting views."},"IDiscussionboardComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique comment identifier. See discussionboard_comments.id."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Foreign key to post entity. The post this comment belongs to."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member who authored the comment (discussionboard_members.id)."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Parent comment ID for hierarchical/threaded replies. Null for top-level comments."},{"type":"null","format":"uuid","description":"Parent comment ID for hierarchical/threaded replies. Null for top-level comments."}],"description":"Parent comment ID for hierarchical/threaded replies. Null for top-level comments."},"body":{"type":"string","description":"Comment body/content in markdown. Requirement for UI display."},"created_at":{"type":"string","format":"date-time","description":"Date/time comment was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update/edit timestamp of the comment."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete marker. If set, comment is considered deleted but present for audit/data retention."},{"type":"null","format":"date-time","description":"Soft-delete marker. If set, comment is considered deleted but present for audit/data retention."}],"description":"Soft-delete marker. If set, comment is considered deleted but present for audit/data retention."}},"required":["id","discussionboard_post_id","discussionboard_member_id","body","created_at","updated_at"],"description":"DiscussionBoard comment entity object, mapping to discussionboard_comments DB schema.\n\nProvides all fields necessary for rendering forum threads, enforcing audit, and supporting threaded/nested replies. Parent_id enables reply relationships, soft-delete tracks moderation/audit removal.\n"},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number (uint32)."},"limit":{"type":"integer","description":"Maximum number of records per page. Default is 100 for most APIs."},"records":{"type":"integer","description":"Total records matching query/filter."},"pages":{"type":"integer","description":"Total pages (records/limit w/ ceiling)."}},"required":["current","limit","records","pages"],"description":"Page information metadata block for paginated API responses, as used throughout DiscussionBoard APIs.\n\nProvides full details on page number, page size, total records, and total pages for consumers."}}},"completed":162,"total":186,"step":0,"created_at":"2025-07-22T08:19:16.889Z"},"tokenUsage":{"facade":{"aggregate":{"total":1798180,"input":{"total":1709388,"cached":7936},"output":{"total":88792,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1798180,"input":{"total":1709388,"cached":7936},"output":{"total":88792,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1798180,"input":{"total":1709388,"cached":7936},"output":{"total":88792,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1798180,"input":{"total":1709388,"cached":7936},"output":{"total":88792,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionboardContentFlag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata object as defined by the OpenAPI standard. This provides detailed information about current page, total records, page limits and how the response was paginated. Referenced from standard IPage template."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardContentFlag"},"description":"Array of DiscussionboardContentFlag records for the current page. Each entry represents a single content flag as normalized in the moderation audit schema."}},"required":["pagination","data"],"description":"A page object for discussion board content flag moderation records. This type defines the paged list structure for flagged content in the system, supporting robust auditing of moderation actions. Corresponds to the IPage<T> structure with DiscussionboardContentFlag responses as the records. For full context, see flagging business rules in the Prisma schema and requirements analysis.\n\nThe purpose of content flag pagination is to allow efficient browsing, actionable dashboards for moderation staff, and compliance reviews for automated and manual flag triggers."},"IDiscussionboardContentFlag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the content flag record. This is a unique identifier for each individual flag instance. Referenced in other records for traceability and auditability."},"flagged_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If a post was flagged, this property holds the unique identifier of the post. Nullable if the target is a comment. Ensures normalization by not mixing flag contexts."},{"type":"null","format":"uuid","description":"If a post was flagged, this property holds the unique identifier of the post. Nullable if the target is a comment. Ensures normalization by not mixing flag contexts."}],"description":"If a post was flagged, this property holds the unique identifier of the post. Nullable if the target is a comment. Ensures normalization by not mixing flag contexts."},"flagged_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If a comment was flagged, this property contains the UUID for the comment. Nullable if the flag is for a post. Maintains atomic distinction between posts and comments as required by moderation schema."},{"type":"null","format":"uuid","description":"If a comment was flagged, this property contains the UUID for the comment. Nullable if the flag is for a post. Maintains atomic distinction between posts and comments as required by moderation schema."}],"description":"If a comment was flagged, this property contains the UUID for the comment. Nullable if the flag is for a post. Maintains atomic distinction between posts and comments as required by moderation schema."},"flagged_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"The member’s unique identifier who flagged the content. Null if flag was created by automated system or directly by moderator."},{"type":"null","format":"uuid","description":"The member’s unique identifier who flagged the content. Null if flag was created by automated system or directly by moderator."}],"description":"The member’s unique identifier who flagged the content. Null if flag was created by automated system or directly by moderator."},"set_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"The moderator’s unique ID if the flag was set by manual moderation. Null if not manual or by system/member."},{"type":"null","format":"uuid","description":"The moderator’s unique ID if the flag was set by manual moderation. Null if not manual or by system/member."}],"description":"The moderator’s unique ID if the flag was set by manual moderation. Null if not manual or by system/member."},"flag_type":{"type":"string","description":"Atomic type code describing why the content was flagged. Typical values: 'spam', 'profanity', 'abuse', 'automation', etc. Enum may be described externally by platform policy or admin configuration."},"flagged_at":{"type":"string","format":"date-time","description":"ISO-8601 timestamp recording exactly when the content flag was set. Fulfills audit/compliance requirement for moderation traceability."},"auto_flagged":{"type":"boolean","description":"Indicates whether this flag was set by automated system (true) or manually by a user or moderator (false). Fulfills reporting and compliance business logic."}},"required":["id","flag_type","flagged_at","auto_flagged"],"description":"Represents a single moderation-flag record for discussion board content. Closely models the discussionboard_content_flags table as described in the moderation domain and Prisma schema.\n\nFlags may relate to posts or comments, and may be set by users, moderators, or automated rules for spam/abuse/profanity/etc. Used to power queue-based moderation interfaces and historical/audit views. The design supports strict normalization for compliance and deep analytics."},"IDiscussionboardContentFlag.ICreate":{"type":"object","properties":{"flagged_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If flagging a post, supply the unique identifier (UUID) for the post. Must not be filled if this flag is for a comment. Validated at API boundary according to content type."},{"type":"null","format":"uuid","description":"If flagging a post, supply the unique identifier (UUID) for the post. Must not be filled if this flag is for a comment. Validated at API boundary according to content type."}],"description":"If flagging a post, supply the unique identifier (UUID) for the post. Must not be filled if this flag is for a comment. Validated at API boundary according to content type."},"flagged_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If flagging a comment, supply its UUID. Null for post-only flags."},{"type":"null","format":"uuid","description":"If flagging a comment, supply its UUID. Null for post-only flags."}],"description":"If flagging a comment, supply its UUID. Null for post-only flags."},"flagged_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member submitting the flag. If the flag is raised by an automated system or a moderator directly, leave null."},{"type":"null","format":"uuid","description":"ID of the member submitting the flag. If the flag is raised by an automated system or a moderator directly, leave null."}],"description":"ID of the member submitting the flag. If the flag is raised by an automated system or a moderator directly, leave null."},"set_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderator who sets the flag directly. Null for member/automatic/system flags."},{"type":"null","format":"uuid","description":"ID of the moderator who sets the flag directly. Null for member/automatic/system flags."}],"description":"ID of the moderator who sets the flag directly. Null for member/automatic/system flags."},"flag_type":{"type":"string","description":"Required business-logic string specifying why content is flagged (spam, abuse, forbidden, etc.). Must follow platform moderation/business policy enumeration."},"auto_flagged":{"type":"boolean","description":"If true, this flag is being set by an automated rule or system process. If false, set by a human (member or moderator) as allowed by business logic."}},"required":["flag_type","auto_flagged"],"description":"Request body for creating a new discussion board content flag. This input type matches the moderation business process as described in the requirements and Prisma schema (discussionboard_content_flags create).\n\nEnforces clear separation between post/comment context, actor responsible for flagging, and reason/type. Supports both automated and manual flags. Validation distinguishes between automated, member, and moderator sources as well as content type."},"IDiscussionboardContentFlag.IUpdate":{"type":"object","properties":{"flagged_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If needed, update the post reference for this flag (should only be used to correct or re-attribute context in rare moderation workflows)."},{"type":"null","format":"uuid","description":"If needed, update the post reference for this flag (should only be used to correct or re-attribute context in rare moderation workflows)."}],"description":"If needed, update the post reference for this flag (should only be used to correct or re-attribute context in rare moderation workflows)."},"flagged_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If required, reassign the target to a different comment. Extremely rare and meant for admin-level corrections."},{"type":"null","format":"uuid","description":"If required, reassign the target to a different comment. Extremely rare and meant for admin-level corrections."}],"description":"If required, reassign the target to a different comment. Extremely rare and meant for admin-level corrections."},"flagged_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the member reference—should only be used if originally recorded incorrectly. See business policy for editing flags."},{"type":"null","format":"uuid","description":"Update the member reference—should only be used if originally recorded incorrectly. See business policy for editing flags."}],"description":"Update the member reference—should only be used if originally recorded incorrectly. See business policy for editing flags."},"set_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the assigned moderator if original flag was corrected. Only for moderation/admin use."},{"type":"null","format":"uuid","description":"Update the assigned moderator if original flag was corrected. Only for moderation/admin use."}],"description":"Update the assigned moderator if original flag was corrected. Only for moderation/admin use."},"flag_type":{"type":"string","description":"Update/moderate the content flag reason (e.g., if misclassified or investigation reveals different flag type). Value must still conform to policy enumeration."},"auto_flagged":{"type":"boolean","description":"Update whether the flag is marked as automatically set or not. Used in rare audit corrections or appeals."}},"description":"Update schema for a discussion board content flag record. Used by moderation/admin backend systems for correcting misflagged content or adjusting audit trails in rare workflows. All updates must be audit logged.\n\nModifications typically only allowed to privileged accounts and with business policy restrictions.","required":[]},"IDiscussionboardContentFlag.IDeleteResponse":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of the deleted flag record."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp (ISO-8601) marking when the flag was (soft-)deleted from the content moderation queue."},"success":{"type":"boolean","description":"Indicates whether the deletion of the flag was successful."}},"required":["id","deleted_at","success"],"description":"Response/result object for flag deletion endpoints. Returns details about the flag and the status of deletion for reliable audit and compliance monitoring according to moderation rules.\n\nThis type documents the evidence trail for recordkeeping, supporting both user feedback and regulatory reporting."},"IDiscussionboardNotification.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for paginated notification results. Optional—defaults to first page if not supplied."},{"type":"null","description":"Page number for paginated notification results. Optional—defaults to first page if not supplied."}],"description":"Page number for paginated notification results. Optional—defaults to first page if not supplied."},"limit":{"oneOf":[{"type":"integer","description":"Optional. Number of notifications per page (system default may apply when absent)."},{"type":"null","description":"Optional. Number of notifications per page (system default may apply when absent)."}],"description":"Optional. Number of notifications per page (system default may apply when absent)."},"type":{"oneOf":[{"type":"string","description":"Optional filter: type of notification (e.g., 'reply', 'mention', 'moderation', 'announcement'). Allows filtering by event category; see business rules for system notification types."},{"type":"null","description":"Optional filter: type of notification (e.g., 'reply', 'mention', 'moderation', 'announcement'). Allows filtering by event category; see business rules for system notification types."}],"description":"Optional filter: type of notification (e.g., 'reply', 'mention', 'moderation', 'announcement'). Allows filtering by event category; see business rules for system notification types."},"read":{"oneOf":[{"type":"boolean","description":"Optional filter (true/false/null)—filters notifications by read/unread status if supplied. Null means all statuses are included."},{"type":"null","description":"Optional filter (true/false/null)—filters notifications by read/unread status if supplied. Null means all statuses are included."}],"description":"Optional filter (true/false/null)—filters notifications by read/unread status if supplied. Null means all statuses are included."},"delivered_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional. Lower time-bound for delivered_at—used for filtering results by delivery date (ISO-8601 format)."},{"type":"null","format":"date-time","description":"Optional. Lower time-bound for delivered_at—used for filtering results by delivery date (ISO-8601 format)."}],"description":"Optional. Lower time-bound for delivered_at—used for filtering results by delivery date (ISO-8601 format)."},"delivered_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional. Upper time-bound for delivered_at—used for date range filtering."},{"type":"null","format":"date-time","description":"Optional. Upper time-bound for delivered_at—used for date range filtering."}],"description":"Optional. Upper time-bound for delivered_at—used for date range filtering."}},"description":"Request body schema for searching and listing notifications for the authenticated member. Supports filters for notification type, read/unread state, and delivery date ranges.\n\nImplements list/search paging according to requirements analysis for notification center implementation. All filtering is governed by API and platform business policy. Returns a paginated, filtered view of notification records as a result.","required":[]},"IPageDiscussionboardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata object describing the returned window of notifications. Standard system-wide definition, see IPage.IPagination."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotification"},"description":"Array of notification records present in the returned page."}},"required":["pagination","data"],"description":"A page of notification records for the discussion board system. This schema is the standard container structure for multiplexed notification center results, following the pattern set in IPage<T>. Each data element is a single notification object as defined in IDiscussionboardNotification.\n\nThe design supports platform-wide consistency in paginated listings and enables UI/UX for notification dashboards and member audit/engagement features."},"IDiscussionboardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/identifier for the notification record. Ensures every notification event is audit ready and addressable by member and system tools."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member recipient’s unique ID. Enforces 1:1 mapping to user (see notification schema for privacy/audit context)."},"type":{"type":"string","description":"Categorical code of notification event (e.g., 'reply', 'mention', 'announcement', 'moderation'). See platform requirements for type enumeration and business logic for handling."},"title":{"type":"string","description":"Notification title/subject, for UI display or inbox/summary preview. Normally a brief description of the trigger event."},"body":{"type":"string","description":"Full textual message of the notification. May contain references to other system elements or member actions."},"url":{"oneOf":[{"type":"string","description":"Optional. URL or deep-link to related board/forum/thread entity, for use in web/mobile navigation and context restoration."},{"type":"null","description":"Optional. URL or deep-link to related board/forum/thread entity, for use in web/mobile navigation and context restoration."}],"description":"Optional. URL or deep-link to related board/forum/thread entity, for use in web/mobile navigation and context restoration."},"delivered_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was delivered to the member, required for all notification records (ISO-8601 format, UTC preferred)."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional timestamp for when notification was read by the member. Null until marked as read."},{"type":"null","format":"date-time","description":"Optional timestamp for when notification was read by the member. Null until marked as read."}],"description":"Optional timestamp for when notification was read by the member. Null until marked as read."},"created_at":{"type":"string","format":"date-time","description":"Audit timestamp recording when notification was first generated in the system. Ensures traceability, analytics, legal compliance, and debugging capabilities."}},"required":["id","discussionboard_member_id","type","title","body","delivered_at","created_at"],"description":"Notification event record for the forum system, matching discussionboard_notifications table in the Notifications schema. Each object corresponds to a real notification delivery and includes audit fields required by data governance/business rules.\n\nComprehensive detail is included, for reliable notification center, engagement analytics, and compliance. The schema enforces a 1:1 mapping for recipient member and tracks title, body, link, delivery/read state, and audit timestamps."},"IDiscussionboardNotification.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Required. Recipient member's unique ID for whom the notification is being created."},"type":{"type":"string","description":"Categorical event code for notification type (see platform event enumeration and requirements analysis)."},"title":{"type":"string","description":"Notification title/subject shown in the member UI notification list."},"body":{"type":"string","description":"Full text or markdown-enabled message body to be delivered."},"url":{"oneOf":[{"type":"string","description":"Optional. URL or deep-link for notification context (e.g., post, moderation action, thread, announcement)."},{"type":"null","description":"Optional. URL or deep-link for notification context (e.g., post, moderation action, thread, announcement)."}],"description":"Optional. URL or deep-link for notification context (e.g., post, moderation action, thread, announcement)."},"delivered_at":{"type":"string","format":"date-time","description":"Timestamp at which notification should be considered delivered (ISO-8601). May be set in the future for scheduled/batched delivery."}},"required":["discussionboard_member_id","type","title","body","delivered_at"],"description":"Request object for creating a new member notification event per requirements in notification flows and the Prisma schema.\n\nThis schema supports both immediate and scheduled delivery. All fields map directly to audit and analytics requirements for system notifications."},"IDiscussionboardNotification.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string","description":"Update notification's title/subject. Nullable to preserve previous title if not updating."},{"type":"null","description":"Update notification's title/subject. Nullable to preserve previous title if not updating."}],"description":"Update notification's title/subject. Nullable to preserve previous title if not updating."},"body":{"oneOf":[{"type":"string","description":"Update the message or body text. Nullable for partial updates."},{"type":"null","description":"Update the message or body text. Nullable for partial updates."}],"description":"Update the message or body text. Nullable for partial updates."},"url":{"oneOf":[{"type":"string","description":"Update the URL/context link (can be set to null to remove)."},{"type":"null","description":"Update the URL/context link (can be set to null to remove)."}],"description":"Update the URL/context link (can be set to null to remove)."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update delivery timestamp, if using scheduled/batched notifications."},{"type":"null","format":"date-time","description":"Update delivery timestamp, if using scheduled/batched notifications."}],"description":"Update delivery timestamp, if using scheduled/batched notifications."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set/update when notification was read by the member. Null unsets read state for audit correction."},{"type":"null","format":"date-time","description":"Set/update when notification was read by the member. Null unsets read state for audit correction."}],"description":"Set/update when notification was read by the member. Null unsets read state for audit correction."}},"description":"Update object for member notification event. Used for partial or full modifications, including marking as read/unread or updating metadata. Only mutable fields permitted by business/policy can be changed. The API will preserve and validate required fields such as type/timestamps for audit trail.","required":[]},"IDiscussionboardNotification.IDeleteResponse":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of notification record deleted."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp (ISO-8601) for when the notification was logically removed from the member notification list or notification center."},"success":{"type":"boolean","description":"Whether the deletion operation succeeded (true/false)."}},"required":["id","deleted_at","success"],"description":"Result/confirmation object for notification deletion endpoints. Contains audit/reconciliation details as required for regulatory reporting and member feedback in notification settings/panel flows."},"IDiscussionboardMemberNotificationSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/identifier for this settings record. Enforces 1:1 mapping to member via discussionboard_member_id. Required for all retrieval and mutation operations."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Unique member ID to whom these notification settings belong. Foreign key to platform member registry."},"in_app_enabled":{"type":"boolean","description":"Boolean toggle: true if member is to receive in-app notifications. Controls UI alert pipelining and popups for the member."},"email_enabled":{"type":"boolean","description":"Boolean toggle: if true, email notifications are sent for matching events."},"reply_notification_enabled":{"type":"boolean","description":"If true, the system will generate notifications for direct replies to the member's threads, posts, or comments."},"mention_notification_enabled":{"type":"boolean","description":"If true, enables @mention-based notifications in posts/comments."},"moderation_notification_enabled":{"type":"boolean","description":"If true, the member will receive notifications regarding moderation events affecting themselves (e.g., warnings, suspensions, content removals)."},"announcement_notification_enabled":{"type":"boolean","description":"If true, system/board announcements will be delivered to this member as notifications."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking when these settings were first created. Used for analytics/audit/compliance."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp for these notification settings (ISO-8601 UTC)."}},"required":["id","discussionboard_member_id","in_app_enabled","email_enabled","reply_notification_enabled","mention_notification_enabled","moderation_notification_enabled","announcement_notification_enabled","created_at","updated_at"],"description":"Member’s notification settings object for the DiscussionBoard system, corresponds to the discussionboard_member_notification_settings table in the notification domain schema. Contains full preference flags for each supported event/alert channel as defined by feature requirements and user personalization flows.\n\nAll boolean flags are atomic, tracked at the member level, and auditable for compliance, privacy control, and notification workflow optimization."}}},"completed":174,"total":186,"step":0,"created_at":"2025-07-22T08:19:33.510Z"},"tokenUsage":{"facade":{"aggregate":{"total":1881547,"input":{"total":1788361,"cached":7936},"output":{"total":93186,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1881547,"input":{"total":1788361,"cached":7936},"output":{"total":93186,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1881547,"input":{"total":1788361,"cached":7936},"output":{"total":93186,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1881547,"input":{"total":1788361,"cached":7936},"output":{"total":93186,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardCommentLike.IRequest":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"The unique identifier of the comment for which likes are being queried.\n\nReferenced from the discussionboard_comments table. Used in filtering which comment's like records to retrieve.\n\nBased on the business rule, only likes for valid (non-deleted) comments will be returned."},"member_id":{"type":"string","format":"uuid","description":"The unique identifier of the member whose likes are being queried.\n\nReferences the discussionboard_members table. Used to filter comment likes by the member who performed the action.\n\nIf omitted, lists likes from all members subject to permissions."},"created_after":{"type":"string","format":"date-time","description":"Optional filter to retrieve likes created after a specified ISO 8601 timestamp.\n\nUseful for time-based queries in moderation and analytics workflows.\n\nIf not supplied, no lower time bound is applied."},"created_before":{"type":"string","format":"date-time","description":"Optional filter to retrieve likes created before a specific ISO 8601 timestamp.\n\nSupports time-windowed searches for reporting or analytics.\n\nIf not specified, no upper bound filter is applied."},"page":{"type":"integer","minimum":1,"description":"Pagination: the number of the page to retrieve (1-based). Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Pagination: maximum number of comment like records per page. Default is 20, maximum is 100."},"sort_key":{"oneOf":[{"const":"created_at","description":"Sort key for ordering comment likes. Supported values: 'created_at', 'comment_id', 'member_id'. Default is 'created_at'."},{"const":"comment_id","description":"Sort key for ordering comment likes. Supported values: 'created_at', 'comment_id', 'member_id'. Default is 'created_at'."},{"const":"member_id","description":"Sort key for ordering comment likes. Supported values: 'created_at', 'comment_id', 'member_id'. Default is 'created_at'."}],"description":"Sort key for ordering comment likes. Supported values: 'created_at', 'comment_id', 'member_id'. Default is 'created_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for the selected key. 'asc' for ascending, 'desc' for descending. Default is 'desc'."},{"const":"desc","description":"Sort order for the selected key. 'asc' for ascending, 'desc' for descending. Default is 'desc'."}],"description":"Sort order for the selected key. 'asc' for ascending, 'desc' for descending. Default is 'desc'."}},"required":[],"description":"Request object for searching, filtering, and paginating comment like records in the DiscussionBoard.\n\nMaps to fields in the discussionboard_comment_likes table. Used by moderators, admins, and members to list engagement records with applied filters and sorting.\n\nEach property corresponds to an atomic query parameter, strictly normalized as per database and business rule definitions."},"IPageIDiscussionboardCommentLike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentLike"},"description":"A list of comment like objects returned in this page."}},"required":["pagination","data"],"description":"Paginated list/summary container for discussionboard_comment_likes records.\n\nContains both the results array and pagination metadata, with references to the schema that enforces normalized/atomic data in each list entry."},"IDiscussionboardCommentLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment like record.\n\nReferences the primary key in the discussionboard_comment_likes table.\n\nEnables precise, atomic tracking for audit trail, analytics, and reporting workflows."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"The unique identifier of the comment that received the like.\n\nForeign key to discussionboard_comments.id. Directly supports engagement analytics, abuse-reporting correlations, and UI summaries of who liked each comment."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who performed the like.\n\nReferences discussionboard_members.id. Critical for audit, rate-limiting, and eligibility checks in business rules."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this like was recorded by the system.\n\nStored as an ISO 8601 string. Used for time-bounded queries, user history, and engagement trend analyses."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","created_at"],"description":"Represents one like action performed by a member on a comment in the DiscussionBoard.\n\nAtomic record in the discussionboard_comment_likes table. All properties map to database fields and are required for audit, analytics, and engagement logic."},"IDiscussionboardCommentLike.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"The unique identifier of the comment to like.\n\nMust reference a valid, non-deleted comment in discussionboard_comments.\n\nThis field is required for the like creation business logic."}},"required":["discussionboard_comment_id"],"description":"Schema for creating (adding) a like to a comment in the DiscussionBoard system.\n\nUsed in POST endpoints.\n\nRequires specifying the comment to like. The liking member is inferred from the authentication context.\n\nEnsures clean normalization and enforcement against duplicate likes by the same member for the same comment."},"IDiscussionboardCommentLike.IUpdate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"(If supported) Change the comment being liked. Usually restricted; changing the reference after creation is rare but permitted in audit/admin correction scenarios.\n\nReferences discussionboard_comments.id.\n\nShould not allow setting to a comment already liked by the same member."}},"required":[],"description":"Schema for updating a comment like record, usually in moderation or audit correction scenarios.\n\nIn standard operations, likes are immutable. However, admins or business logic may allow limited updates (e.g., correcting the referenced comment).\n\nAll updates must be audit-logged with before/after state."},"IDiscussionboardCommentDislike.IRequest":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"Filter by the unique identifier of the comment whose dislikes are being queried.\n\nReferences discussionboard_comments.id.\n\nUsed in dislike engagement analytics and moderation."},"member_id":{"type":"string","format":"uuid","description":"Filter by the member who performed the dislike.\n\nReferences discussionboard_members.id.\n\nSupports per-user dislike tracking for feature and audit use cases."},"created_after":{"type":"string","format":"date-time","description":"Retrieve dislikes created after this ISO 8601 timestamp.\n\nUseful for time-series analytics, reporting, and burst analysis in content moderation."},"created_before":{"type":"string","format":"date-time","description":"Retrieve dislikes created before this ISO 8601 timestamp.\n\nUsed for data-windowing and snapshot reporting."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number to retrieve (1-based). Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Pagination: maximum records per page. Default is 20, max is 100."},"sort_key":{"oneOf":[{"const":"created_at","description":"Sort key: one of 'created_at', 'comment_id', 'member_id'. Default: 'created_at'."},{"const":"comment_id","description":"Sort key: one of 'created_at', 'comment_id', 'member_id'. Default: 'created_at'."},{"const":"member_id","description":"Sort key: one of 'created_at', 'comment_id', 'member_id'. Default: 'created_at'."}],"description":"Sort key: one of 'created_at', 'comment_id', 'member_id'. Default: 'created_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order: 'asc' (ascending) or 'desc' (descending). Default: 'desc'."},{"const":"desc","description":"Sort order: 'asc' (ascending) or 'desc' (descending). Default: 'desc'."}],"description":"Sort order: 'asc' (ascending) or 'desc' (descending). Default: 'desc'."}},"required":[],"description":"Request object for searching/filtering/paginating comment dislike records, following the atomic structure of discussionboard_comment_dislikes.\n\nEach field is atomic and filterable; designed for analytics, moderation, and user history queries.\n\nFollows normalized, audit-friendly DB column mapping."},"IPageIDiscussionboardCommentDislike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentDislike"},"description":"Array of comment dislike records present in this paginated result."}},"required":["pagination","data"],"description":"Paginated page container for comment dislikes (engagement/analytic/feedback purposes).\n\nIncludes result data and page cursor metadata. Atomic and compliant with standard IPage pattern."},"IDiscussionboardCommentDislike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for the comment dislike event/record. Atomic and references primary key in discussionboard_comment_dislikes."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Comment ID indicating which comment was disliked.\n\nForeign key from discussionboard_comments.id.\n\nRequired for both audit and UI engagement analytics."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"The member ID who performed the dislike.\n\nReferences discussionboard_members.id. Supports audit, anti-abuse, and feedback systems."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the dislike event was recorded by the system.\n\nSupports analytics, moderation, and time-limited engagement queries."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","created_at"],"description":"Atomic record representing a single dislike event for a comment in the DiscussionBoard.\n\nRows follow strict normalization; all fields are required for audit and analytics.\n\nReflects engagement/feedback for threaded comments."},"IDiscussionboardCommentDislike.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"UUID of the comment to be disliked.\n\nMust belong to a valid, non-deleted comment.\n\nBusiness logic prevents duplicate dislikes by the same member for the same comment.\n\nThis is required for creating the dislike record."}},"required":["discussionboard_comment_id"],"description":"Schema for creating a dislike event for a comment, attached to the active member from the authentication context.\n\nEnforces normalization: each entry is an atomic dislike event for a specific member and comment.\n\nHandles duplicate and permission checks as per business logic."},"IDiscussionboardCommentDislike.IUpdate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"(If business rules allow) Update the referenced comment for this dislike record. Normally, dislikes are immutable but admin/audit flows might permit correction or re-attribution.\n\nReferences discussionboard_comments.id."}},"required":[],"description":"Schema for updating a comment dislike record—usually for audit/admin error correction.\n\nRegular member operations don't permit modification, but admins may update for compliance.\n\nEvery change must be audit-logged."},"IDiscussionboardPostReport.IRequest":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Restrict search to reports for a specific post. References discussionboard_posts.id.\n\nCritical for moderation workflow filtering and targeted abuse review."},"reporting_member_id":{"type":"string","format":"uuid","description":"Limit results to reports filed by this member. References discussionboard_members.id.\n\nUsed for member history review, rate-limiting enforcement, and abuse prevention."},"created_after":{"type":"string","format":"date-time","description":"Retrieve post reports created after this date/time (ISO 8601).\n\nEnables time-windowed analysis for analytics and reporting dashboards."},"created_before":{"type":"string","format":"date-time","description":"Retrieve post reports created before this date/time (ISO 8601).\n\nHelps provide time-bounded results for reporting and audit trails."},"reason_search":{"type":"string","description":"Full-text search within the report reason field.\n\nUsed for advanced filter scenarios where specific types of reports (spam, abuse) are targeted for review."},"page":{"type":"integer","minimum":1,"default":1,"description":"Pagination: which page of results to return (1-based, default 1)."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Pagination: maximum records per page (default 20, maximum 100)."},"sort_key":{"oneOf":[{"const":"created_at","description":"Sort key field. Allowed values: 'created_at', 'post_id', 'reporting_member_id'. Default is 'created_at'."},{"const":"post_id","description":"Sort key field. Allowed values: 'created_at', 'post_id', 'reporting_member_id'. Default is 'created_at'."},{"const":"reporting_member_id","description":"Sort key field. Allowed values: 'created_at', 'post_id', 'reporting_member_id'. Default is 'created_at'."}],"description":"Sort key field. Allowed values: 'created_at', 'post_id', 'reporting_member_id'. Default is 'created_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order: 'asc' or 'desc'. Default is 'desc'."},{"const":"desc","description":"Sort order: 'asc' or 'desc'. Default is 'desc'."}],"description":"Sort order: 'asc' or 'desc'. Default is 'desc'."}},"required":[],"description":"Search and filter object for querying reported posts for moderation workflows.\n\nAll fields are mapped to a strict, normalized database schema in discussionboard_post_reports.\n\nUsed by moderation UIs to efficiently filter, search, and review reported post events per business rules."},"IPageDiscussionboardPostReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostReport"},"description":"The list of DiscussionBoard post report records for this page."}},"required":["pagination","data"],"description":"Page container type for a paginated result of post abuse/spam report records in the DiscussionBoard.\n\nFollows the IPage<T> pattern for page metadata and result data arrays."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number. Starts at 1.","minimum":1},"limit":{"type":"integer","description":"Maximum records per page. Default is 100 for most endpoints.","minimum":1},"records":{"type":"integer","description":"Total count of records matching the query (not just this page).","minimum":0},"pages":{"type":"integer","description":"Total number of pages for the result set (ceiling division of records by limit).","minimum":0}},"required":["current","limit","records","pages"],"description":"Pagination metadata for paging through large resultsets in API output.\n\nReferenced by IPage<T> in the page containers for API results."},"IDiscussionboardPostReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post report event. Primary key of discussionboard_post_reports."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"ID of the reported post. References discussionboard_posts.id. Enables pinpointing abuse or spam in the engagement feedback system."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member ID of the reporting actor. References discussionboard_members.id. Required for rate-limiting and abuse tracking for reporting feature."},"reason":{"type":"string","description":"Atomic string indicating the reason for reporting (e.g., 'spam', 'abuse', 'off-topic'). Used in moderation dashboards and abuse analytics."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the report was logged. Used for time-based moderation review and user quota management."}},"required":["id","discussionboard_post_id","discussionboard_member_id","reason","created_at"],"description":"Represents a report of a post by a member for abuse, spam, or rule violation on the DiscussionBoard. Atomic, audit-record oriented format mirroring the normalized schema of discussionboard_post_reports.\n\nUsed by moderators and admins for abuse tracking, enforcement, and legal audit workflows."}}},"completed":186,"total":186,"step":0,"created_at":"2025-07-22T08:22:16.097Z"},"tokenUsage":{"facade":{"aggregate":{"total":1982559,"input":{"total":1867342,"cached":7936},"output":{"total":115217,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1982559,"input":{"total":1867342,"cached":7936},"output":{"total":115217,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1982559,"input":{"total":1867342,"cached":7936},"output":{"total":115217,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1982559,"input":{"total":1867342,"cached":7936},"output":{"total":115217,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComplete","document":{"operations":[{"specification":"Retrieve a list of all channels within the DiscussionBoard platform, with searching, filtering, and pagination capabilities. This is designed for administrative and navigation purposes, supporting management of channel visibility, status, and metadata. Relates to the discussionboard_channels Prisma table, returning multiple channel records and supporting advanced filters according to business requirements for platform segmentation and configuration.","description":"This operation allows authenticated users (typically admins or moderators) to retrieve a list of channels available within the system. The endpoint supports querying by enabled status, text search on channel names or descriptions, pagination (page/limit), and sorting. It is built on the discussionboard_channels Prisma model, which holds top-level forum channels such as 'Politics', 'Economics', etc.\n\nAccess to this endpoint may be restricted based on user role, and actions are audited. The returned data is comprehensive, including all relevant channel properties for display or management, and reflects the current active/inactive (enabled) state. If the channel is soft-deleted (deleted_at is set), it may be hidden or marked as such depending on the request parameters.\n\nThis endpoint is commonly used for admin dashboards, configuration screens, and navigation menus. Related endpoints include creation, retrieval by id, update, and soft-delete of channels.","summary":"Get a list of channels (discussionboard_channels table) with search and pagination.","parameters":[],"requestBody":{"description":"Channel search and pagination options for list retrieval.","typeName":"IDiscussionboardChannel.IRequest"},"responseBody":{"description":"A paginated list of channels matching the filter criteria.","typeName":"IPageIDiscussionboardChannel"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/systematic/channels","method":"patch"},{"specification":"Retrieve the details of a specific channel by its ID. This operation uses the discussionboard_channels Prisma table to fetch a single, fully detailed record of a channel entity. It is essential for channel management and UI flows that require detailed metadata about a particular forum channel.","description":"Fetch a single channel's details including name, code, description, status flags, timestamps, and relationships (e.g., related categories). The endpoint requires a valid UUID for the channel ID. Authorization may be enforced to restrict access to certain roles (e.g., admin, moderator, possibly member if channel listing is public).\n\nThis endpoint provides complete details for use in editing screens, audit logs, or advanced configuration workflows. It checks for soft-deletion and will return appropriate error codes if the channel does not exist or access is unauthorized. Closely related endpoints are those for updating, creating, and deleting channels.","summary":"Get channel details (discussionboard_channels table) by ID.","parameters":[{"name":"id","description":"Target channel's ID (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the target channel.","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/systematic/channels/{id}","method":"get"},{"specification":"Create a new channel in the DiscussionBoard system. Uses the discussionboard_channels Prisma table to add a new forum-level grouping, including required metadata such as code, name, description, and enabled state. Triggers audit logging and can enforce unique constraints on channel codes/names.","description":"This endpoint allows authorized admins to create a new channel, specifying all required fields (code, name, enabled, etc). Input must conform to required data shape defined in IDiscussionboardChannel.ICreate. Business rules such as unique code/name, audit requirements, and possibly moderation review are enforced. Soft-deleted previously existing codes are not automatically restored; new records are created unless a specific restoration endpoint is defined.\n\nUpon successful creation, the endpoint returns the full new channel entity. Errors are returned for constraint violations, authorization failures, and malformed requests. Related endpoints: retrieve by id, update, patch list, and soft-delete operations.","summary":"Create a new channel (discussionboard_channels table).","parameters":[],"requestBody":{"description":"The information needed to create a new channel.","typeName":"IDiscussionboardChannel.ICreate"},"responseBody":{"description":"Details of the created channel.","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/channels","method":"post"},{"specification":"Update the details of a specific channel. Patch full or partial channel details in the discussionboard_channels table via its ID. Supports business rules for change auditing and validation, including code modification, description, and enable/disable flagging.","description":"Allows admins to update properties of an existing channel, such as name, code, description, enabled state, or timestamps. Requires valid UUID for the channel ID and accepts input via IDiscussionboardChannel.IUpdate. Enforces business logic for immutable fields or constraints (e.g., unique code), and triggers an audit log record of the attempted update. Returns the updated channel entity upon success, or error for validation/authorization failure.\n\nThis operation supports modification of UI-visible strings, business flags (enabled), or descriptions used for onboarding/help. Related operations include channel retrieval, listing, creation, and soft-deletion.","summary":"Update channel details (discussionboard_channels table) by ID.","parameters":[{"name":"id","description":"Channel ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the channel.","typeName":"IDiscussionboardChannel.IUpdate"},"responseBody":{"description":"The channel record after applying updates.","typeName":"IDiscussionboardChannel"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/channels/{id}","method":"put"},{"specification":"Delete (soft-delete) a specific channel from the discussionboard_channels table by marking deleted_at, following business rule for non-destructive removal. The operation is critical for system integrity, compliance, and audit log enforcement. Only admins can execute this operation and it is comprehensively logged.","description":"Performs a soft-delete of the targeted channel by setting its deleted_at timestamp. This fulfills compliance and business policy for data retention—channels are never hard-deleted. All dependent categories, boards, and content are hidden but not destroyed. Returns confirmation of success, or error if operation is not permitted or the channel does not exist. Only accessible by admins. Related endpoints: channel retrieval, update, creation, and patch-list.","summary":"Delete (soft-delete) channel (discussionboard_channels table) by ID.","parameters":[{"name":"id","description":"Channel ID (UUID) to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the soft-delete operation.","typeName":"IDiscussionboardChannel.IRemoveResult"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/channels/{id}","method":"delete"},{"specification":"Retrieve a list of all categories within the system, with support for filtering, searching, and pagination. Categories represent logical groupings within channels and fulfill navigation, organization, and management requirements. Based on the discussionboard_categories Prisma table.","description":"Lists all categories, returning their details as defined in the discussionboard_categories model. Supports filtering by channel, enabled/disabled state, parent category, or name. Results are paginated and can be sorted/search by various fields. Soft-deleted categories are marked or hidden per business logic. This endpoint is commonly used in admin panels and configuration screens. Authorization typically required (admin/moderator). Related endpoints: category create, retrieve by id, update, and delete.","summary":"Get a list of categories (discussionboard_categories table) with search and pagination.","parameters":[],"requestBody":{"description":"Filtering and pagination query for category list retrieval.","typeName":"IDiscussionboardCategory.IRequest"},"responseBody":{"description":"Paginated array of matching categories.","typeName":"IPageIDiscussionboardCategory"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/systematic/categories","method":"patch"},{"specification":"Fetch detailed information for a single category by its ID. Uses the discussionboard_categories table to retrieve category metadata and relationships for management and UI flows. Used for edit screens, linking, and advanced navigation.","description":"Retrieves full category metadata by UUID, including name, code, description, parent/child structure, and status flags. Authenticated access typically required, with permission checks as appropriate. Reports errors if category is deleted or does not exist. Closely related to update, patch-list, create, and delete endpoints.","summary":"Get category details (discussionboard_categories table) by ID.","parameters":[{"name":"id","description":"Target category's ID (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details for the specified category.","typeName":"IDiscussionboardCategory"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/systematic/categories/{id}","method":"get"},{"specification":"Create a new category, assigning to an existing channel and (optionally) parent category. Operates on the discussionboard_categories table, enforcing business rules regarding codes, names, and relationships. This operation is only permitted for admins and is logged for compliance.","description":"Admins use this endpoint to add a category, providing required fields such as channel assignment, name, code, enabled status, and (optionally) a parent for hierarchy. Constraints (unique code/channel, valid channel/id references) are enforced. The operation returns the full category entity if successful, or suitable error messages for constraints or permissions. Related endpoints: patch-list, get-by-id, update, delete.","summary":"Create new category (discussionboard_categories table).","parameters":[],"requestBody":{"description":"Category creation parameters.","typeName":"IDiscussionboardCategory.ICreate"},"responseBody":{"description":"The created category record.","typeName":"IDiscussionboardCategory"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/categories","method":"post"},{"specification":"Update a category by its UUID, modifying one or more fields. Uses the discussionboard_categories table to update metadata (e.g., name, code, enabled status, parent/child relations). Triggers comprehensive business logic validations and change audit logs. Only accessible for admins or permitted staff.","description":"Permits updates to an existing category's fields, including name, code, description, parent, enabled state, or timestamps. Requires valid UUID. Strictly enforces business rules for uniqueness, hierarchy, and enabled status. Changes are audit logged. Returns the updated record, or error for validation/authorization issues.","summary":"Update category (discussionboard_categories table) by ID.","parameters":[{"name":"id","description":"Category's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for category update.","typeName":"IDiscussionboardCategory.IUpdate"},"responseBody":{"description":"The updated category record.","typeName":"IDiscussionboardCategory"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/categories/{id}","method":"put"},{"specification":"Delete (soft-delete) a category by UUID, following business rules for retention and hiding rather than actual row removal. Operates on discussionboard_categories and is only allowed for admins. Deletion results are returned for confirmation and error handling is robust for illegal or failed deletes.","description":"Soft-deletes the specified category by setting a deleted_at timestamp, but does not permanently destroy data. Checks constraints (e.g., related boards/topics), logs action, and returns confirmation or errors for missing/unauthorized resources. Related to update, patch-list, and get-by-id endpoints.","summary":"Delete (soft-delete) category (discussionboard_categories table) by ID.","parameters":[{"name":"id","description":"The UUID of the category to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Soft-delete result/status for category.","typeName":"IDiscussionboardCategory.IRemoveResult"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/categories/{id}","method":"delete"},{"specification":"List all global settings for the DiscussionBoard platform, supporting search, filtering, and pagination. Operates on the discussionboard_settings table and is accessible to admins for review and management of configuration keys/values.","description":"Returns a paginated list of current system settings (key/value/description/timestamps), allowing admins to manage foundational configuration parameters for the application. Used in settings management screens, audit reviews, and troubleshooting. Only admins are permitted to use this endpoint. Related endpoints include get-by-id, update, and audit log endpoints.","summary":"Get a list of global settings (discussionboard_settings table) with search and pagination.","parameters":[],"requestBody":{"description":"Settings list search and filter parameters.","typeName":"IDiscussionboardSetting.IRequest"},"responseBody":{"description":"Paginated system settings records.","typeName":"IPageIDiscussionboardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings","method":"patch"},{"specification":"Retrieve detailed information for a specific system setting by UUID. Fetches data from discussionboard_settings for use in edit/view screens. Only accessible to admins. Used for audit, configuration, and troubleshooting.","description":"Returns the key, value, description, and timestamps for a system setting referenced by its unique ID (UUID). Fails with error if setting does not exist or user lacks required permissions. CRUD operations via related endpoints (list, update, patch-list).","summary":"Get details for a specific setting (discussionboard_settings table) by ID.","parameters":[{"name":"id","description":"The UUID of the system setting to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested system setting entity.","typeName":"IDiscussionboardSetting"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings/{id}","method":"get"},{"specification":"Create a new system setting in the discussion board platform. This operation allows administrators to define or add a new key-value configuration that governs platform-wide settings. It is tied to the discussionboard_settings Prisma table. Settings include global flags—such as maintenance mode, notification preferences, allowed file types—and are strictly managed for audit compliance. Only admins are allowed to execute this operation. Key constraints: 'key' must be unique. The audit log must record the creation event, including actor/admin details. This operation does not allow users to configure personal notification settings (those are managed elsewhere).","description":"This API endpoint allows platform administrators to create (insert) new rows into the discussionboard_settings table, which serves as the central repository for discussion board configuration options. Each setting controls some aspect of system-wide behavior—such as spam filtering thresholds, maintenance mode toggles, maximum attachment sizes, or SMTP server settings. \n\nThe endpoint enforces uniqueness of the setting key. If the key already exists, a descriptive error is returned. The request body must provide all required information: key, value, and optionally a description. All actions performed through this endpoint are logged in the audit record to fulfill transparency and security requirements.\n\nPermissions are restricted to the admin role, as improper settings can compromise system security or stability. Write access triggers a full audit entry, recording the admin who created the setting, the timestamp, and the contents of the new record for future traceability. Related operations: updating an existing setting (PUT), deleting a setting (DELETE), and listing all settings (PATCH or GET, depending on implementation).","summary":"Create a new system setting (discussionboard_settings)","parameters":[],"requestBody":{"description":"New system setting properties","typeName":"IDiscussionboardSettings.ICreate"},"responseBody":{"description":"Created system setting object","typeName":"IDiscussionboardSettings"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings","method":"post"},{"specification":"Update an existing system setting record. This operation targets the discussionboard_settings table, allowing administrators to modify the value or metadata for a given configuration. Setting keys cannot be updated—only their description and values may change. All actions are strictly audited, and only admins may execute this operation.","description":"This API endpoint allows platform administrators to update the value or description of an existing configuration record in the discussionboard_settings table. The setting 'key' itself is immutable (may not be changed via this API). Admin users must specify the unique ID of the setting to update via the path parameter. \n\nThe request body provides the new value and/or description. Business logic enforces that only admins can perform this update, and changes are logged with the previous and new values for compliance/audit purposes. The endpoint returns the updated configuration object upon success. Error handling covers non-existent IDs or immutable key updates attempts. Related APIs include creation and deletion of settings, as well as listing or retrieving settings by ID.","summary":"Update a system setting (discussionboard_settings)","parameters":[{"name":"id","description":"System setting record's unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for system setting","typeName":"IDiscussionboardSettings.IUpdate"},"responseBody":{"description":"Updated configuration setting object","typeName":"IDiscussionboardSettings"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings/{id}","method":"put"},{"specification":"Delete a system setting entry identified by its unique ID. This operation removes the configuration record from the discussionboard_settings table. Only admin users may execute this endpoint. Attempts to delete non-existent records are handled with informative error responses. Proper auditing is enforced for compliance.","description":"Provides admin-level functionality to delete a configuration row from the discussionboard_settings model. This operation is irreversible: once deleted, the key-value pair and its setting are lost. All deletions are logged for traceability and compliance with business rules/meticulous audit trails.\n\nAuthorization is restricted to users with admin role, as settings affect overall platform behavior. Attempts to delete unavailable IDs result in clear error feedback. Related operations: settings creation, update, and retrieval endpoints.","summary":"Delete a system setting (discussionboard_settings)","parameters":[{"name":"id","description":"System setting record identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted system setting (confirmation)","typeName":"IDiscussionboardSettings"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/settings/{id}","method":"delete"},{"specification":"List or search system audit log records. This retrieves audit log entries from the discussionboard_audit_logs table, supporting pagination, filtering, and sorting. Used for platform governance, compliance, and activity review. Only accessible to admins for full audit review. Contains references to all admin/moderator activities.","description":"This API endpoint lists audit records from the discussionboard_audit_logs table, providing an interface for platform administrators to monitor historical actions performed by system actors (admins, moderators) across sensitive endpoints. Audit logs contain details on who performed which action, timestamps, target entities/table names, and optional details fields (e.g., before/after state, rationale for action).\n\nSupports advanced querying: admins can provide search criteria in the request body—such as date range, actor ID, action type, target table, and full-text search of details. Output is paginated and sorted according to input parameters, supporting audit compliance with regulatory and business rules. Only admins may access this endpoint, as records may contain sensitive operational data.\n\nRelated endpoints: audit record retrieval by ID (GET), audit log creation (POST), audit record modification (PUT), and deletion (DELETE) for maintenance (if allowed by business rules).","summary":"List/search audit log records (discussionboard_audit_logs)","parameters":[],"requestBody":{"description":"Search and pagination filters for audit logs","typeName":"IDiscussionboardAuditLogs.IRequest"},"responseBody":{"description":"Paginated audit records list","typeName":"IPageDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs","method":"patch"},{"specification":"Retrieve details for a specific audit log entry by its unique ID. This operation provides full visibility into the action event referenced by the audit log record in the discussionboard_audit_logs table. The endpoint is used primarily by administrators or for compliance review audits.","description":"This API endpoint returns the complete details for a given audit log entry identified by its UUID (ID) from the discussionboard_audit_logs table. It provides a forensic snapshot: action type, actor ID, target table and entity, timestamps, and additional details or justification. Used in internal investigations, incident response, or audit reviews. Authorization is restricted to admin users only. Returns a single log record or an informative error if not found.","summary":"Get single audit log record (discussionboard_audit_logs)","parameters":[{"name":"id","description":"Audit log record unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full audit log record","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs/{id}","method":"get"},{"specification":"Create a new audit log record. Allows privileged creation of audit log entries in the discussionboard_audit_logs table. Used for manual/system logging of sensitive/exceptional actions.","description":"Enables direct creation of an audit log entry, used for custom or exceptional platforms actions not auto-logged by built-in features. Only admin users may create logs via this endpoint; normal API operations should auto-record logs.\n\nRequest body must contain all required audit info: action description, actor, target entity, timestamp, and details. Returns the newly created log object for confirmation/audit trail. Related endpoints: update (PUT), delete (DELETE), and get by ID (GET).","summary":"Create audit log record (discussionboard_audit_logs)","parameters":[],"requestBody":{"description":"Required audit log record fields","typeName":"IDiscussionboardAuditLogs.ICreate"},"responseBody":{"description":"Created audit log object","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs","method":"post"},{"specification":"Update an audit log record by ID. Allows privileged correction of saved audit data in the discussionboard_audit_logs table. Only permitted for admin users for compliance, correction, or investigation.","description":"Permits updating an existing discussionboard_audit_logs record, restricted to highly privileged admin users for compliance reasons (e.g., correction of error, post-investigation reclassification). Requires audit log ID as path parameter and the modified log data in the request body. All modifications must themselves be logged in a secondary audit trail if required by policy.\n\nRelated endpoints: create, delete, get by ID, and search listing for audit logs.","summary":"Update audit log record (discussionboard_audit_logs)","parameters":[{"name":"id","description":"Audit log record ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Audit log update data","typeName":"IDiscussionboardAuditLogs.IUpdate"},"responseBody":{"description":"Updated audit log record","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs/{id}","method":"put"},{"specification":"Delete an audit log record. Remove a single audit log entry from the discussionboard_audit_logs table by unique ID. Only performed by privileged admin users; all deletions must themselves be recorded (meta-audit).","description":"This API endpoint deletes an audit log record identified by its UUID from the discussionboard_audit_logs table. Intended for exceptional cases: e.g., compliance with data retention limits, legal erasure, or correction of erroneous audit data. Only admins may delete audit logs, and each deletion is itself written into an immutable meta-log. On success, returns the deleted log record or confirmation. Related API operations: creation, listing, update, get by ID.","summary":"Delete audit log record (discussionboard_audit_logs)","parameters":[{"name":"id","description":"Audit log record unique identifier","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deleted log record (confirmation)","typeName":"IDiscussionboardAuditLogs"},"authorizationRoles":["admin"],"path":"/discussionboard/systematic/auditLogs/{id}","method":"delete"},{"specification":"List/search all members in the discussion board. Provides paginated, searchable, and filterable list of member records from the discussionboard_members table. Used for admin/member management and visibility. Accessible for all admin users and (limited) member self-browsing in some configurations.","description":"This API endpoint retrieves a paginated list of member records from the discussionboard_members table. Supports advanced filtering by registration date, status, and other member attributes via the request body. Designed for admin use (full access) and can be made available for public/member search (with restricted fields) per auth configuration.\n\nEnforces privacy and terms-of-service compliance: some fields may be redacted or only visible to authorized users and administrators. Supports searching, sorting, and pagination arguments in the request body. Related API endpoints include: member detail retrieval by ID (GET), creation (POST), update (PUT), and (if permitted) deletion (DELETE).","summary":"List/search all members (discussionboard_members)","parameters":[],"requestBody":{"description":"Search and pagination filters for member list","typeName":"IDiscussionboardMembers.IRequest"},"responseBody":{"description":"Paginated member list","typeName":"IPageDiscussionboardMembers"},"authorizationRoles":null,"path":"/discussionboard/actors/members","method":"patch"},{"specification":"Get a single member detail. Returns the full profile (or permitted subset) for the given member ID from the discussionboard_members table. Auth rules determine field visibility: users see their own details, admins see full record, other members may see only public fields.","description":"Given a member's unique identifier (UUID), this API endpoint returns detailed information about that member from the discussionboard_members table. Responds with the full member object for admins or the corresponding member (self-view); partial/limited view is returned for other users depending on privacy rules and site configuration. Common use cases: view own profile, admin audit, member directory access. Errors include non-existent IDs or forbidden access. Related endpoints: search/list (PATCH), create (POST), update (PUT).","summary":"Get a single member detail (discussionboard_members)","parameters":[{"name":"id","description":"Member's unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full (or partial) member info","typeName":"IDiscussionboardMembers"},"authorizationRoles":null,"path":"/discussionboard/actors/members/{id}","method":"get"},{"specification":"Create a new board member (user registration). This inserts a new member into the discussionboard_members table. Restricts creation to valid values for joined_at, status, and other necessary fields. Registration is accessible to unregistered/public users.","description":"This endpoint creates a new member record in the discussionboard_members table. It is typically called during user registration or platform onboarding flows. Required attributes: join date (joined_at), status (usually 'active' or 'pending'), and optional profile setup in related tables. Permissions: this endpoint is public, allowing unregistered users to create accounts. All values are validated for correctness—invalid or duplicate entries are rejected. Created member object is returned upon success. Related: member self-update (PUT), list (PATCH), and detail (GET) APIs.","summary":"Create a new board member (discussionboard_members)","parameters":[],"requestBody":{"description":"Member registration details","typeName":"IDiscussionboardMembers.ICreate"},"responseBody":{"description":"Newly created member object","typeName":"IDiscussionboardMembers"},"authorizationRoles":null,"path":"/discussionboard/actors/members","method":"post"},{"specification":"Update member details for a specific member in the discussion board. This modifies details of a member in the discussionboard_members table identified by a unique ID. Only allowed for the corresponding member (self) or an admin (strong auth enforced).","description":"Given a member's unique identifier, this API endpoint allows updating details (e.g., status field or profile info) in the discussionboard_members table. The endpoint distinguishes between self-service (member updates own info) and admin/moderator updates. Fields are strictly validated, and some fields may only be mutable by admin (e.g., status). All operations are logged as appropriate per privacy and audit rules. Returns the full updated member object. Related: detail (GET), registration (POST), list (PATCH), and (if allowed) delete APIs.","summary":"Update member details (discussionboard_members)","parameters":[{"name":"id","description":"Target member's unique ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for the specified member","typeName":"IDiscussionboardMembers.IUpdate"},"responseBody":{"description":"Updated member object","typeName":"IDiscussionboardMembers"},"authorizationRoles":null,"path":"/discussionboard/actors/members/{id}","method":"put"},{"specification":"Delete a member by ID. This operation is associated with the discussionboard_members table and is intended for account removal by admin action. It ensures the target member's identity is valid and enforces audit, compliance, and security controls. On deletion, the member's account data is flagged or removed and related references are managed as per business rules. Only admins should be allowed to perform this operation, as per role matrix. Operation should log the activity in audit logs for future traceability. Related entities include member profiles, authentications, and all interactions associated with the member. Error handling includes member not found, insufficient privileges, or active dependencies in the system.","description":"Deletes a member from the discussion board. References the discussionboard_members table, ensuring the provided member ID exists and the caller has sufficient admin privileges per system security guidelines. Deletion is logical or physical as allowed by business rules, and triggers cascade operations in related tables like profiles, authentications, posts, comments, and notifications. All actions are logged for audit. Edge cases (member with active suspensions, moderator/admin role, or recent activity) are handled according to business policy and must return appropriate errors. Related API operations may include PATCH /discussionboard/actors/members for searching and GET /discussionboard/actors/members/{id} for detail prior to delete.","summary":"Delete a specific member (discussionboard_members).","parameters":[{"name":"id","description":"ID of the member to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/actors/members/{id}","method":"delete"},{"specification":"List moderators in the system with advanced filtering and search. Associated with discussionboard_moderators table. Returns paginated list of all moderator entries, optionally filtered by status, date of promotion, or related member data. This operation supports administrative and audit workflows by showing current and historical moderators, including demoted ones if requested. Implements access control, pagination, and metadata conventions from system-wide requirements.","description":"Retrieves a paginated list of moderator entries from the discussionboard_moderators table. Supports searching by member ID, promotion/demotion date, and status (active/demoted). Access requires escalation for moderator/admin roles. This API is foundational for admin overviews, reporting, and role audits. Responses should include associated member details where relevant. Errors include insufficient privileges, malformed filters, or internal query failures. Related APIs: GET /discussionboard/actors/moderators/{id}, POST /discussionboard/actors/moderators (to add), and DELETE /discussionboard/actors/moderators/{id} for role revocation.","summary":"List moderators (discussionboard_moderators) with search and filters.","parameters":[],"requestBody":{"description":"Filters and search parameters for moderators list.","typeName":"DiscussionBoardModerators.IRequest"},"responseBody":{"description":"Paginated moderator list result with metadata and member details.","typeName":"DiscussionBoardModerators.IPage"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/moderators","method":"patch"},{"specification":"Get specific moderator details by ID. Associated with discussionboard_moderators table. Returns details for a single moderator record, including related member information and history, such as promotion/demotion dates. Used in access control reviews, audit logs, or escalation operations. Only moderator or admin should access this API. Returns role, member link, and key timestamps. Handles not found and permission checks.","description":"Fetches a specific moderator's details from the discussionboard_moderators table by unique ID. Includes metadata such as member link, promotion and demotion timestamp, and any relevant actions/logs. Used for audit or admin role management. Edge cases like missing/invalid ID or insufficient permissions are handled. Related APIs include PATCH for list, PUT/DELETE by ID, and POST for moderator assignment.","summary":"Get moderator details (discussionboard_moderators) by ID.","parameters":[{"name":"id","description":"ID of the moderator entry to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator detail including member and role history.","typeName":"DiscussionBoardModerators"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/actors/moderators/{id}","method":"get"},{"specification":"Create new moderator assignment. Linked to the discussionboard_moderators table. Accepts required data for promoting a member to moderator: member ID, optional reason, and effective date. Triggers business rules for privilege elevation and audit. This operation is restricted to admins, as per access matrix. Role assignment is logged. Related entities are members and existing moderator roles for prevention of duplicate promotions.","description":"Assigns a member as a moderator by creating a new record in discussionboard_moderators. Ensures member is eligible (not already moderator/demoted within relevant period), and validates admin credentials. The assignment action triggers audit logging and notifies the member if notification is enabled. Handles errors for duplicate/moderator existence or invalid member ID. Related APIs include PATCH for search/list, PUT/DELETE for update/revoke.","summary":"Promote a member to moderator (create discussionboard_moderators).","parameters":[],"requestBody":{"description":"Data required to promote a member to moderator.","typeName":"DiscussionBoardModerators.ICreate"},"responseBody":{"description":"Moderator record created, including linkage to member.","typeName":"DiscussionBoardModerators"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/moderators","method":"post"},{"specification":"Update moderator assignment details by ID. For editing moderator role properties in the discussionboard_moderators table (e.g., demotion date, extended privileges). Used in escalation, demotion, or metadata management. Enforces access control and audit logging. Handles update conflicts, invalid IDs, and regulatory business rules. Only admins may update moderator assignments.","description":"Updates fields of a moderator record by ID, such as demotion time or privilege adjustments. Ensures business constraints (e.g., cannot demote current admin). Changes are logged for compliance. Handles errors for non-existent IDs, permission errors, or policy violations. Related to PATCH (list/search), GET (detail), and DELETE (role revocation) APIs.","summary":"Update moderator assignment (discussionboard_moderators) by ID.","parameters":[{"name":"id","description":"Moderator role record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in moderator role (demotion, extension, etc).","typeName":"DiscussionBoardModerators.IUpdate"},"responseBody":{"description":"Updated moderator record after modifications.","typeName":"DiscussionBoardModerators"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/moderators/{id}","method":"put"},{"specification":"Delete a moderator assignment by ID. Associated with discussionboard_moderators. Performs privilege revocation and enforces business logic (e.g., disallow deleting last moderator). Action is logged to audit and cascades to revoke linked privileges. Ramifications are handled in related tables/processes. Only admins are authorized, per access control matrix.","description":"Deletes a moderator role assignment, revoking all associated privileges for the member. Ensures that business constraints are upheld (cannot delete last admin or when critical moderation in progress). Logs deletion and updates related role history records for audit. Errors for not found or conflicts. Related to POST/PUT (assignment or update), PATCH (list), and GET (detail).","summary":"Delete moderator assignment (discussionboard_moderators) by ID.","parameters":[{"name":"id","description":"Moderator role record to revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/actors/moderators/{id}","method":"delete"},{"specification":"List admins in the system with search and filter. Operations on discussionboard_admins. Access restricted to top-level admins only. Returns paginated and searchable admin info including member associations, elevation date, status, and role logs. Implements search filters/pagination for administrative overviews. Foundation for user management and privileged operation audit.","description":"Retrieves paginated list of administrator assignments from discussionboard_admins table, with associated member details and timestamps. Query supports filtering/search for large administrative teams. Only admins can call this endpoint. Response is paginated and includes privacy management (e.g., do not leak unnecessary member info). Errors for incomplete queries or insufficient permissions. Related APIs: GET by ID, POST for new admin, PUT/DELETE for assignment update/revoke.","summary":"List admins (discussionboard_admins) with search and filters.","parameters":[],"requestBody":{"description":"Filtering and search/query parameters for listing admins.","typeName":"DiscussionBoardAdmins.IRequest"},"responseBody":{"description":"Paginated list of admin assignment records with member info.","typeName":"DiscussionBoardAdmins.IPage"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins","method":"patch"},{"specification":"Fetch a specific admin assignment record by ID. For viewing details (member link, elevation date) in discussionboard_admins. Restricted to admins-only for privacy and security. Returns full assignment info and references to member entity. Only accessible by admins; errors include not found or insufficient rights.","description":"Gets administrator assignment record from discussionboard_admins by its unique ID, returning related member identity info, timestamps, and possibly permission/config roles. Used for auditing and managing admin roles. Related to PATCH (list/search), POST (assign), PUT/DELETE (update/revoke) endpoints. Handles permission errors and not found cases.","summary":"Get admin assignment (discussionboard_admins) by ID.","parameters":[{"name":"id","description":"ID of admin assignment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Admin assignment detail with member info, elevation date.","typeName":"DiscussionBoardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins/{id}","method":"get"},{"specification":"Create a new admin assignment and promote a member. Direct operation on discussionboard_admins table. Accepts member ID, elevation reason, and timestamp. Accessible only by other admins. Triggers notification and audit. Fails if member already admin or ineligible.","description":"Assigns a member as an admin by generating a discussionboard_admins record. Only current admins may call. Logs the operation, checks for duplicate elevation, and notifies the upgraded member. Handles business errors (already admin/ineligible). Related to PATCH for listing and DELETE/PUT for assignment modification or removal.","summary":"Promote a member to admin (create discussionboard_admins).","parameters":[],"requestBody":{"description":"Data required to promote a member to admin.","typeName":"DiscussionBoardAdmins.ICreate"},"responseBody":{"description":"Admin record created, including member linkage and metadata.","typeName":"DiscussionBoardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins","method":"post"},{"specification":"Update admin assignment by ID. Permits modification of elevated privileges, demotion, or metadata. Direct operation on discussionboard_admins. Access limited to top-level admins and logged as privileged operation. May trigger cascaded privilege changes if member is also a moderator and revokes admin. Properly validates not demoting sole admin. Handles update conflicts and permission checks.","description":"Updates admin assignment by ID in discussionboard_admins, e.g., demotion or metadata updates. Enforces access control and logs the update. Returns new assignment data for review. Errors include missing/invalid ID, privilege checks, and insufficient rights. Related PATCH (list), GET (detail), POST (promote), DELETE (demote).","summary":"Update admin assignment (discussionboard_admins) by ID.","parameters":[{"name":"id","description":"ID of admin assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Admin assignment update details (demotion or privilege metadata).","typeName":"DiscussionBoardAdmins.IUpdate"},"responseBody":{"description":"Resulting admin assignment after modifications.","typeName":"DiscussionBoardAdmins"},"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins/{id}","method":"put"},{"specification":"Delete an admin assignment record, revoking admin privileges. Linked to discussionboard_admins. Operation allowed for admins only with strict business and compliance constraints. Cannot revoke sole admin role. Should initiate audit log entry and update in linked privilege records. Supports admin role lifecycle management.","description":"Deletes (revokes) an admin assignment by ID in discussionboard_admins, removing all admin privileges from the member. Business logic enforces checks for minimum admin coverage. Action is logged and notifiable. Edge cases handled for last-admin and active dependencies. Related PATCH/POST/PUT endpoints for admin assignments.","summary":"Delete admin assignment (discussionboard_admins) by ID.","parameters":[{"name":"id","description":"ID of admin assignment record to revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/actors/admins/{id}","method":"delete"},{"specification":"List/search member profile records for audit and admin settings management. Linked to discussionboard_member_profiles. Returns paginated searchable set of profiles, supporting filters by display name, join date, or profile metadata. Results support member management, reporting, or privacy-compliance review. Data must be filtered by role privileges; access restricted to admins/moderators only. Implements pagination/metadata and privacy constraints from requirements analysis.","description":"Retrieves paginated and filtered list of member profiles from discussionboard_member_profiles table. Filtering by search params (display name, join date, etc). Only available to moderators/admins. Provides a foundation for member list review, admin workflow, or audit. Handles privacy by masking sensitive fields and supports pagination/meta. Related endpoints: GET /discussionboard/actors/memberProfiles/{id} for single profile, PATCH /discussionboard/actors/members for member listing.","summary":"List member profiles (discussionboard_member_profiles) with search and filters.","parameters":[],"requestBody":{"description":"Search and filter parameters for member profiles.","typeName":"DiscussionBoardMemberProfiles.IRequest"},"responseBody":{"description":"Paginated result of member profiles with metadata and privacy filtering.","typeName":"DiscussionBoardMemberProfiles.IPage"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/actors/memberProfiles","method":"patch"},{"specification":"Fetch a single member profile by its unique ID. The profile includes user-chosen display name, bio, avatar URI, website, and optional location. This endpoint is crucial for profile viewing scenarios and enables users, moderators, or admins to see profile data for a specific member. Related to discussionboard_member_profiles table, which contains 1:1 relationship with members. Follows 'GET' RESTful convention for retrieval by unique resource identifier.","description":"Retrieves a detailed member profile using its unique identifier (UUID). This profile provides vital information for displaying user details, including display name, biography, avatar (as a URI to an image file), website, and (optionally) user location for personalization and context within discussion threads. Only one member profile exists per member due to the unique constraint enforced on the discussionboard_member_id field. This endpoint supports secure read operations as described in the DB schema and may be permission-restricted based on the authenticated user's role. Soft deletions in the member entity propagate here if membership is revoked. Error handling includes returning 404 if the ID does not correspond to any existing profile. This endpoint is important for both user self-service and moderation, as well as compliance with privacy regulations that allow users to review their stored personal data.","summary":"Get a DiscussionBoard member profile by ID (discussionboard_member_profiles table).","parameters":[{"name":"id","description":"Unique member profile ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed member profile data including display name, bio, avatar URI, website, location, and unique profile ID.","typeName":"IDiscussionBoardMemberProfile"},"authorizationRoles":null,"path":"/discussionboard/actors/memberProfiles/{id}","method":"get"},{"specification":"Create a new member profile with the specified properties. This endpoint supports setting display name, bio, avatar URI, website, and location per privacy and personalization requirements. Linked to discussionboard_member_profiles table and enforces 1:1 mapping with members. Only admins or authorized users may create on behalf of others. Follows RESTful 'POST' convention for resource creation.","description":"Allows creation of a member profile record. The request body specifies display name, bio, avatar URI (link to uploaded image), website, and (optionally) user location. Profiles are uniquely linked to existing members through a foreign key. The API validates that a profile for the member does not already exist (enforces uniqueness). 403/409 errors occur if unauthorized or if a profile already exists for the member. On success, returns the created profile including all attributes. Used when users first configure their display info or when admins enable onboarding for a new user. Profile preferences (avatar, website, bio) may be left null for privacy.","summary":"Create a new DiscussionBoard member profile (discussionboard_member_profiles table).","parameters":[],"requestBody":{"description":"Properties to set for the new member profile (display name, bio, avatar URI, website, location).","typeName":"IDiscussionBoardMemberProfile.ICreate"},"responseBody":{"description":"Full information of the newly created member profile.","typeName":"IDiscussionBoardMemberProfile"},"authorizationRoles":null,"path":"/discussionboard/actors/memberProfiles","method":"post"},{"specification":"Update an existing member profile identified by profile ID. Allows modification of display name, bio, avatar URI, website, and location. Updates are restricted to profile owner or authorized administrators. Implements audit logging as required by business rules. Follows RESTful 'PUT' convention for full resource updates.","description":"Updates a member's profile details (display name, bio, avatar URI, website, location). Only the profile owner or platform admin can update a profile. All properties must be provided even if only some are changed (full replace, not patch). Ensures validation of input, with 403 forbidden if the authenticated user has no rights, and 404 if the target profile does not exist. Change history may be logged for auditing or rollback purposes as per DB schema. Updates are atomic and preserve referential integrity with the member entity.","summary":"Update a DiscussionBoard member profile by ID (discussionboard_member_profiles table).","parameters":[{"name":"id","description":"ID of the member profile to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full profile data to replace existing member profile (display name, bio, avatar URI, website, location).","typeName":"IDiscussionBoardMemberProfile.IUpdate"},"responseBody":{"description":"Updated member profile with all new details.","typeName":"IDiscussionBoardMemberProfile"},"authorizationRoles":null,"path":"/discussionboard/actors/memberProfiles/{id}","method":"put"},{"specification":"Delete a member profile using its unique ID, as part of privacy compliance or administrative actions. Hard/soft delete may be governed by business rule in implementation. Tied to 1:1 relation in discussionboard_member_profiles, ensuring removal does not break referential integrity. Enforces permissions (self or admin). Follows RESTful 'DELETE' convention.","description":"Removes a member profile based on unique profile ID. Deletion may be soft (flagged) or hard based on business rules and audit/trail requirements. Only the profile owner or admin can perform this operation. 403 Forbidden if insufficient privileges, 404 if the profile does not exist. This endpoint enables users to exercise right-to-be-forgotten or remove obsolete profile information. Deletions also affect personalization and visibility in the DiscussionBoard system.","summary":"Delete a DiscussionBoard member profile by ID (discussionboard_member_profiles table).","parameters":[{"name":"id","description":"Profile ID to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation or metadata indicating successful deletion (may include deleted resource ID or status).","typeName":"IDiscussionBoardMemberProfile.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/actors/memberProfiles/{id}","method":"delete"},{"specification":"Search/filter all member authentication records with pagination, filtering, and sorting. Supports administrative review and troubleshooting for user access. Implements business requirements for API search endpoints. Uses PATCH to receive complex query object. Results paginated. Underlies discussionboard_member_authentications table.","description":"Enables advanced querying over member authentication records. Provides parameters to filter by provider, username/email, last login, etc. Returns paginated list with total count summary and result details. Used by administrators for troubleshooting login problems, SSO/OAuth integration audits, and user support tasks. Security permissions restrict who may access. Accepts request body specifying search, filter, page, and sort parameters. Response conforms to standard page format including data and pagination. 400/403 for invalid or unauthorized requests.","summary":"Search and paginate DiscussionBoard member authentication records (discussionboard_member_authentications table, PATCH).","parameters":[],"requestBody":{"description":"Search and pagination parameters for listing member authentication records.","typeName":"IDiscussionBoardMemberAuthentication.IRequest"},"responseBody":{"description":"Paginated list of member authentication records with metadata.","typeName":"IPageDiscussionBoardMemberAuthentication"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications","method":"patch"},{"specification":"Fetch a single member authentication record by unique ID. Tied to discussionboard_member_authentications table with provider, provider_identifier, password hash (if local), and last login timestamp. Supports audit and account management flows. Follows RESTful GET by resource ID.","description":"Returns a specific member authentication (local/email login, external SSO, etc.) by unique authentication record ID (UUID). Permits admins and authorized personnel to review, troubleshoot or audit login credentials for a user. Does not return plaintext passwords. Returns data fields: auth provider, provider identifier, password hash (if available), and last login timestamp. 404 if record not found, 403 if access is unauthorized. Used for debugging authentication failures and supporting user requests about login credentials.","summary":"Get a DiscussionBoard member authentication record by ID (discussionboard_member_authentications table).","parameters":[{"name":"id","description":"ID of the authentication record to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed authentication record including provider, identifier, (hashed) credential, last login.","typeName":"IDiscussionBoardMemberAuthentication"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications/{id}","method":"get"},{"specification":"Create a new member authentication (login credential), tied to a specific member. Used for initial registration or adding new login methods (e.g. SSO, password). Ensures uniqueness per provider/identifier tuple. Security-critical. Tied to discussionboard_member_authentications table. RESTful POST for new resource creation.","description":"Registers a new login method for a member. Request body specifies required fields: member ID, provider (local, OAuth, etc), unique provider identifier (e.g., email or external user ID), password hash (optional), and (optionally) last login timestamp. Implements provider/identifier uniqueness. Used in signup, adding additional login options, or SSO onboarding. Admins may add credentials for user backup login. Validates no duplicate provider/identifier pairing exists. 403/409 on duplicate or privilege violation. Success returns the created authentication entity.","summary":"Create a new DiscussionBoard member authentication record (discussionboard_member_authentications table).","parameters":[],"requestBody":{"description":"Properties and credential data to create a new member authentication method.","typeName":"IDiscussionBoardMemberAuthentication.ICreate"},"responseBody":{"description":"Created authentication record (provider, provider identifier, hash, etc).","typeName":"IDiscussionBoardMemberAuthentication"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications","method":"post"},{"specification":"Update a member's authentication method by record ID. Supports full replacement (PUT) of existing record; used to change login method properties (e.g. provider identifier, password hash). Security critical; only credential owner, admin, or support can update. Adheres to audit and password management policies. Resource is discussionboard_member_authentications.","description":"Replaces an entire member authentication record (all properties) for the specified record ID. Typical use cases: credential reset, user-initiated provider migration, admin SSO troubleshooting. Update requires full replacement of resource fields: provider, identifier, hash, and last login info. Ensures referential integrity to owning member. All business rules enforced. 403/404 for forbidden or not found. Change is atomic; outcome returned includes new value of record for auditing and troubleshooting.","summary":"Update a DiscussionBoard member authentication record by ID (discussionboard_member_authentications table, PUT).","parameters":[{"name":"id","description":"Authentication record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full data to replace existing member authentication record.","typeName":"IDiscussionBoardMemberAuthentication.IUpdate"},"responseBody":{"description":"Updated authentication record details.","typeName":"IDiscussionBoardMemberAuthentication"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications/{id}","method":"put"},{"specification":"Delete a member authentication record by unique authentication record ID. Supports user deletion of own login method or admin-removal for access revocation. Links to discussionboard_member_authentications table. Hard/soft deletion as governed by business rules. Follows RESTful delete convention.","description":"Removes a member authentication credential based on record ID. Used for revoking access, member-initiated password or SSO removal, or admin support actions. 403 if caller is not authorized (owner or admin), 404 if not found. Supports privacy policies enabling users to fully control their login data. Data returned may include deletion result or metadata for compliance.","summary":"Delete a DiscussionBoard member authentication record by ID (discussionboard_member_authentications table).","parameters":[{"name":"id","description":"Authentication record ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result or confirmation of credential deletion (may include status, deleted record ID, or audit).","typeName":"IDiscussionBoardMemberAuthentication.IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/actors/memberAuthentications/{id}","method":"delete"},{"specification":"Search/filter all member suspension records, with support for complex parameters (member ID, issuer, status, time range) and pagination. Used by moderators/admins for review and appeal workflows. Implemented via PATCH to accept complex query object. Results paginated. Associated with discussionboard_member_suspensions table.","description":"Enables filters/searches over suspension records. Parameters may include member ID, issued by moderator/admin, active/inactive state, and time intervals. Returns paginated results for dashboard consumption or audit reports. Used for moderation effectiveness tracking. Enforces security—restricted to privileged users. Input is complex object for flexible search. 400/403 if insufficient permissions or validation failure. Output conforms to page with metadata.","summary":"Search and list DiscussionBoard member suspension records (discussionboard_member_suspensions table, PATCH).","parameters":[],"requestBody":{"description":"Search, sort, and paging criteria for member suspension list.","typeName":"IDiscussionBoardMemberSuspension.IRequest"},"responseBody":{"description":"Paginated list of member suspension records with metadata.","typeName":"IPageDiscussionBoardMemberSuspension"},"authorizationRoles":null,"path":"/discussionboard/actors/memberSuspensions","method":"patch"},{"specification":"Fetch a single member suspension record by unique ID. Provides audit trails for suspension histories and status enforcement. Bound to discussionboard_member_suspensions table. GET by resource ID.","description":"Retrieves a suspension record including all fields: affected member, issuer (moderator/admin), reason, timing, and (if present) revocation status and reason. Used for audit, appeal, and moderation dashboards. If target does not exist, returns 404.","summary":"Get a DiscussionBoard member suspension record by ID (discussionboard_member_suspensions table).","parameters":[{"name":"id","description":"Member suspension record ID to fetch (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returned member suspension record detailing member, issuer, timing, and reason.","typeName":"IDiscussionBoardMemberSuspension"},"authorizationRoles":null,"path":"/discussionboard/actors/memberSuspensions/{id}","method":"get"},{"specification":"Create a new suspension record for a member. Used by moderation workflows to suspend users for rule violations, abuse, or policy breaches. Links to discussionboard_member_suspensions. Only moderators or admins may create. POST for resource creation.","description":"Creates a new member suspension record. Body includes affected member ID, issuer moderator/admin ID, reason, start/end times, and optional revocation metadata. Used when suspending a member for misconduct, temporarily or permanently. Enforces privilege: only admins/moderators can invoke. Duplicate active suspensions prevented by API validation. Success response includes newly created suspension record.","summary":"Create a new DiscussionBoard member suspension record (discussionboard_member_suspensions table, POST).","parameters":[],"requestBody":{"description":"All required metadata for new member suspension (affected user, issuer, reason, timing, etc).","typeName":"IDiscussionBoardMemberSuspension.ICreate"},"responseBody":{"description":"Created member suspension record with full details.","typeName":"IDiscussionBoardMemberSuspension"},"authorizationRoles":null,"path":"/discussionboard/actors/memberSuspensions","method":"post"},{"specification":"Updates an existing member suspension record in the discussionboard_member_suspensions table. Allows moderators or admins to modify an ongoing suspension, such as changing the end date, updating the reason, or marking as revoked. Fulfills business rules for user management and audit trail requirements as described in requirements analysis.","description":"This endpoint enables authorized users (moderators/admins) to update an existing member suspension. Use cases include shortening or extending suspension duration, editing the reason for suspension, or marking a suspension as revoked (lifted early).\n\nThe endpoint requires the unique suspension record ID (UUID) as a path parameter. The updated suspension data must be provided in the request body, using the DiscussionboardMemberSuspension.IUpdate type, which includes fields such as ends_at (end datetime), reason, and revoked_at. The system will validate user permissions and log all changes to the audit log for future review or appeals.\n\nAll modification actions must be auditable and reversible only by admins, as per system policy. Invalid or missing IDs will result in a 404 error. Permission denied will return 403. The response returns the updated suspension object for confirmation. Related endpoints include get (detail) and delete (removal/undo suspension).","summary":"Update an existing member suspension (discussionboard_member_suspensions).","parameters":[{"name":"id","description":"Target member suspension record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data to update the member suspension record.","typeName":"DiscussionboardMemberSuspension.IUpdate"},"responseBody":{"description":"Updated member suspension object after modification.","typeName":"DiscussionboardMemberSuspension"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/memberSuspensions/{id}","method":"put"},{"specification":"Deletes a member suspension record from discussionboard_member_suspensions, effectively revoking an active suspension. Used by moderators/admins for restoring memberships after review/appeal, per business rules.","description":"This endpoint allows authorized users (moderators or admins) to revoke or remove a suspension record. Typically used after successful appeal, error correction, or at the end of a suspension period. Instead of hard deleting, it may soft-delete or update revoked fields for audit compliance.\n\nRequires the unique suspension record ID as a path parameter. Permission checks ensure only authorized actions (403 for denial, 404 for missing records). Audit log entries are created on every removal. This complements workflows that require restoring posting/commenting rights to a member. No response body is returned on success, just HTTP 204 or 200. Related endpoints: put (update) and get (detail).","summary":"Delete or revoke an existing member suspension (discussionboard_member_suspensions).","parameters":[{"name":"id","description":"Target member suspension record ID (UUID) to delete/revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/memberSuspensions/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of moderator action logs from discussionboard_moderator_actions. Supports search by moderator, action_type, target_type, target_id, and time range. Fulfills requirements for audit, transparency, and review workflows.","description":"This endpoint provides a paginated listing of moderator actions, facilitating transparency and audit workflows required for compliance. Filters include moderator ID, action type, target type, and time range, as embodied in the DiscussionboardModeratorAction.IRequest request body schema.\n\nAuthorized roles may specify search, sort, and pagination parameters. The response returns a page object containing action summaries and metadata such as total item count. Only actions viewable by the authenticated role are shown. This supports admin analytics, incident review, and member appeal support. Errors returned for invalid filters or insufficient permissions. Related endpoints include detail get and post (create).","summary":"List moderator actions (discussionboard_moderator_actions) with search/pagination.","parameters":[],"requestBody":{"description":"Search/pagination/request criteria for moderator actions.","typeName":"DiscussionboardModeratorAction.IRequest"},"responseBody":{"description":"Paginated result set of moderator actions.","typeName":"IPageDiscussionboardModeratorAction"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions","method":"patch"},{"specification":"Retrieves a specific moderator action record by ID from discussionboard_moderator_actions. Supports detailed audit trail review for incident analysis, appeals, and compliance.","description":"This endpoint returns the full details of a moderator action given its unique ID. Used in audit workflows, appeals processes, and transparency/reporting by authorized roles (moderator/admin).\n\nRequires the exact action ID (UUID) as a path parameter. If found and permitted, returns all associated details, including moderator info, action context, and timestamps. 404 is returned for missing action, 403 for insufficient permissions. Related endpoints: patch (list), put/post (create/update), delete (remove).","summary":"Get moderator action log detail (discussionboard_moderator_actions) by ID.","parameters":[{"name":"id","description":"Target moderator action record ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator action log object.","typeName":"DiscussionboardModeratorAction"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions/{id}","method":"get"},{"specification":"Creates a new moderator action log entry in discussionboard_moderator_actions, documenting moderator interventions for audit, reporting, and appeals. Only moderators and admins may perform this operation.","description":"This endpoint is used by the system or authorized users to log a moderator's intervention, such as editing/deleting a post, warning a user, or handling a report/resolution. The request body must conform to the DiscussionboardModeratorAction.ICreate schema, specifying the moderator, action_type, target_type, target_id, details, and timestamp.\n\nA new record is created and returned in the response for confirmation and audit. All created logs become part of the immutable system audit record. Attempts by unauthorized users or invalid input will result in errors (403, 400). Further actions (update/delete) available via respective endpoints. All administrator and moderator activity is required to be logged through this endpoint to meet audit transparency policies.","summary":"Create a new moderator action log entry (discussionboard_moderator_actions).","parameters":[],"requestBody":{"description":"Data for new moderator action log entry.","typeName":"DiscussionboardModeratorAction.ICreate"},"responseBody":{"description":"Created moderator action log object.","typeName":"DiscussionboardModeratorAction"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions","method":"post"},{"specification":"Updates an existing moderator action record in discussionboard_moderator_actions, such as to amend details or correct errors for transparent audit logs. Enforces strict audit and permission checks as per requirements.","description":"This endpoint enables authorized users (moderators/admins) to amend or correct a previously logged moderator action, e.g., updating the justification (details), fixing a target ID, or correcting timestamps. The request requires the unique action record ID (UUID) as a path parameter and the updated data in the request body, following DiscussionboardModeratorAction.IUpdate schema.\n\nAll changes are tracked in the database to ensure audit trail compliance; permissions are enforced so only responsible roles may update. Invalid ID yields 404; lack of permissions 403. The response body returns the full, updated log. Use with caution, as excessive edits may trigger audit alerts. Related: get (detail), delete (remove), patch (list).","summary":"Update an existing moderator action log entry (discussionboard_moderator_actions).","parameters":[{"name":"id","description":"Target moderator action record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data to update the moderator action log entry.","typeName":"DiscussionboardModeratorAction.IUpdate"},"responseBody":{"description":"Updated moderator action log object.","typeName":"DiscussionboardModeratorAction"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions/{id}","method":"put"},{"specification":"Deletes (or anonymizes) a moderator action record in discussionboard_moderator_actions, typically for policy compliance or error correction, maintaining proper audit flows.","description":"This endpoint allows for removal or anonymization of a moderator action record, in line with strict audit and compliance rules. Usually only permitted in cases of admin error, legal requirement, or content that was logged inappropriately. The action is restricted to moderator and admin roles, with every delete action itself logged in the system audit for transparency.\n\nDeletion is by ID (UUID) in the path. Upon success, a 204/200 is returned with no body. If the record does not exist or permissions are insufficient, appropriate errors (404/403) are provided. Anonymization or soft deletion may be preferred over hard delete in some deployments. Related: update (put), get (detail), patch (list).","summary":"Delete (anonymize) moderator action log entry (discussionboard_moderator_actions) by ID.","parameters":[{"name":"id","description":"Target moderator action record ID (UUID) to delete/anonymize.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"path":"/discussionboard/actors/moderatorActions/{id}","method":"delete"},{"specification":"Retrieves a filtered, paginated list of board entities from discussionboard_boards. Supports comprehensive search, category filtering, and custom ordering for admin/board management interfaces.","description":"Provides paginated, filterable, and sortable listings of board definitions for use in forum management, browsing, or analytics interfaces. Accepts a DiscussionboardBoard.IRequest search body which may include filters for category, code, name, status, and pagination/sorting arguments.\n\nThe endpoint supports both user (for browsing) and admin (for management) contexts. All output is governed by role permissions; inactive boards are hidden unless admin. The response is an IPageDiscussionboardBoard containing summary board info and pagination metadata. Errors include invalid filters, permission denial, or server issues. Related: get (detail), post (create), put (update), delete (remove).","summary":"List boards (discussionboard_boards) with filters and pagination.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination criteria for boards.","typeName":"DiscussionboardBoard.IRequest"},"responseBody":{"description":"Paginated result set of boards.","typeName":"IPageDiscussionboardBoard"},"authorizationRoles":null,"path":"/discussionboard/boards/boards","method":"patch"},{"specification":"Gets a single board record from discussionboard_boards by ID. Used by any role to retrieve full board details, used in user browsing, admin management, and analytics/reporting.","description":"Fetches detailed metadata for a single board by its unique ID (UUID). Used by all authorized roles to retrieve the board's full data for display, editing, or management. Errors include 404 for not found, 403 for insufficient role. Outputs all atomic fields, including code, name, description, is_active, and category info. Related endpoints: patch (list), post (create), put (update), delete (soft-remove).","summary":"Get detailed board info (discussionboard_boards) by ID.","parameters":[{"name":"id","description":"Target board record ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full board entity data for requested ID.","typeName":"DiscussionboardBoard"},"authorizationRoles":null,"path":"/discussionboard/boards/boards/{id}","method":"get"},{"specification":"Creates a new board in discussionboard_boards, supporting board expansion and administrative updates. Required fields are enforced per schema and business logic.","description":"Endpoint for authorized users (such as admins or board managers) to define a new board for discussion topics. Request body must match DiscussionboardBoard.ICreate schema, with required fields such as name, code, and parent category ID. The system checks for name/code uniqueness and valid category links.\n\nSuccessful creation returns the created board object with all atomic fields. Errors are returned for missing/invalid data, or if code/name is already in use. Related endpoints: patch (list), get (detail), put (update), delete (soft-remove).","summary":"Create a new board entity (discussionboard_boards).","parameters":[],"requestBody":{"description":"New board creation data (name, code, category, etc).","typeName":"DiscussionboardBoard.ICreate"},"responseBody":{"description":"Created board entity data.","typeName":"DiscussionboardBoard"},"authorizationRoles":["admin"],"path":"/discussionboard/boards/boards","method":"post"},{"specification":"Updates an existing board record in discussionboard_boards. Allows changing metadata such as name, category, or activation state. Enforces strict validation for code/name uniqueness and admin permission.","description":"Endpoint for board updates (e.g., renaming, changing category, toggling is_active). Only accessible to admins, this uses the path parameter ID to select the board and a DiscussionboardBoard.IUpdate request body for new values. Validation ensures code, name, and parent category are correctly set, and audit logs any changes. Successful response returns the updated board object. Related endpoints: patch (list), get (detail), post (create), delete (remove).","summary":"Update an existing board (discussionboard_boards) record.","parameters":[{"name":"id","description":"Target board record ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New data for the board record update.","typeName":"DiscussionboardBoard.IUpdate"},"responseBody":{"description":"Updated board entity data.","typeName":"DiscussionboardBoard"},"authorizationRoles":["admin"],"path":"/discussionboard/boards/boards/{id}","method":"put"},{"specification":"Deletes an existing board record in discussionboard_boards, typically by soft-deletion (hidden/archived). For admin use only, follows audit policy and enforces permissions strictly.","description":"Removes (likely by soft-delete/flag) a board entity identified by its unique ID. Only admins may perform this operation, to preserve audit/historical records. The operation is also used to retire, hide, or archive boards no longer active. Success produces HTTP 204/200 with no response body, and all actions are logged for audit purposes. Failure modes: 404 not found, 403 permission denied. Related endpoints: patch (list), get (detail), post (create), put (update).","summary":"Delete (soft-remove) a board entity (discussionboard_boards) by ID.","parameters":[{"name":"id","description":"Target board record ID (UUID) to delete/soft-remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/boards/boards/{id}","method":"delete"},{"specification":"List all board topics with support for searching and pagination. This endpoint covers querying board topics, including filtering by title, code, creator, or other properties. It supports the retrieval of an array of board topics based on criteria. Implements listing workflows for moderators and members from business requirements and is based on the 'discussionboard_board_topics' table.","description":"This operation retrieves a list of board topics with various filtering, search, and pagination options. The endpoint references the discussionboard_board_topics table, whose schema includes details like board reference, code, title, creator, timestamps, and optional description. Permissions can be customized by role (member, moderator, admin), but all roles can view topics, with extended filtering abilities restricted to staff roles. Security considerations include allowing only authenticated users and rate limitation to prevent scraping. Validation logic must ensure query params enforce allowed values; errors are returned for unsupported search types. For consistent pagination, this endpoint should be used in combination with detail retrieval endpoints.","summary":"Fetch a paginated and filtered list of board topics from discussionboard_board_topics table.","parameters":[],"requestBody":{"description":"Filters, search criteria, and pagination options for board topics listing.","typeName":"DiscussionBoardBoardTopic.IRequest"},"responseBody":{"description":"Paginated list of board topics matching the criteria.","typeName":"IPageDiscussionBoardBoardTopic"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics","method":"patch"},{"specification":"Retrieve detailed information for a specific board topic by ID. Covers detailed view workflows from the requirements and is based on the 'discussionboard_board_topics' table.","description":"This endpoint returns all details of a specific board topic referenced by its unique identifier. The discussionboard_board_topics table includes fields such as id, board id, creator, code, title, description, created_at, and updated_at. Permissions allow all users to view topics, while edit/delete is role-specific. Security: verifies user authentication and valid ID format (UUID). Returns an error if the topic does not exist, is deleted, or the user lacks permission. Related endpoints should include listing topics and topic creation/deletion endpoints for a full CRUD experience.","summary":"Retrieve full detail for a specific board topic from discussionboard_board_topics table.","parameters":[{"name":"id","description":"Board topic unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the selected board topic.","typeName":"DiscussionBoardBoardTopic"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics/{id}","method":"get"},{"specification":"Create a new board topic in a given board. Supports user (member) and moderator workflows for content creation. Directly implements business requirement 2.3 (Content Operations) and references the 'discussionboard_board_topics' table.","description":"This operation creates a new board topic, referencing the discussionboard_board_topics table. The request body must include required properties such as board ID, creator user, code, title, description, and optionally other metadata. Validation includes: title/code uniqueness in board, valid creator/member, board existence, and status initialization. Error responses will cover validation failures (duplicate code/title, nonexistent board/member, bad format). Success response returns the created board topic's details. Creation is authenticated, restricted to members or higher roles. Creation logs should be cross-referenced in related audit tables.","summary":"Create a new board topic in the discussionboard_board_topics table.","parameters":[],"requestBody":{"description":"Board topic details to create a new topic.","typeName":"DiscussionBoardBoardTopic.ICreate"},"responseBody":{"description":"The newly created board topic.","typeName":"DiscussionBoardBoardTopic"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics","method":"post"},{"specification":"Edit/update an existing board topic by ID. Covers moderation workflows for content correction and is associated with the 'discussionboard_board_topics' table.","description":"This endpoint allows a member, moderator, or admin to update the details of a board topic. Fields that may be updated include title, code, description, and metadata. It references the discussionboard_board_topics table. Authorization is checked, allowing the original creator or staff roles to update. Changes are validated for uniqueness and conformance to business logic (e.g., cannot make title empty, code must remain unique in the board). Updates are logged for audit trail. Errors cover missing topic, lack of permissions, or failed validations. This endpoint should be used in tandem with details and list APIs.","summary":"Update board topic details in the discussionboard_board_topics table.","parameters":[{"name":"id","description":"Board topic unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated details for the board topic.","typeName":"DiscussionBoardBoardTopic.IUpdate"},"responseBody":{"description":"The updated board topic entity.","typeName":"DiscussionBoardBoardTopic"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics/{id}","method":"put"},{"specification":"Delete a specific board topic by its unique ID. Reference for content removal workflows; targets 'discussionboard_board_topics' table.","description":"Deletes a particular board topic identified by its unique id. The endpoint references discussionboard_board_topics and performs a soft or hard delete, based on business logic and audit requirements. Only the topic creator, moderators, or admins may delete; permissions are checked. Validation confirms topic existence and user rights. Action is logged in moderator/admin action logs for transparency. Deletion may be non-physical, instead marking the record as deleted for audit/legal reasons. Returns status of the operation. Used alongside creation, update, and detail endpoints for full CRUD lifecycle.","summary":"Delete a board topic from discussionboard_board_topics table.","parameters":[{"name":"id","description":"Board topic unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result status of delete operation (success or reason for failure).","typeName":"IOperationStatus"},"authorizationRoles":null,"path":"/discussionboard/boards/boardTopics/{id}","method":"delete"},{"specification":"List all topic tags with filtering and pagination for curation/moderation. Based on discussionboard_topic_tags table. Used by admins/moderators for tag maintenance, by members for tag discovery.","description":"Retrieves a paginated list of topic tags stored in discussionboard_topic_tags table. Supports filtering by tag name, is_active status, or creation/update dates. Pagination and sorting options allow handling a large set. Permissions allow public listing, but tag management is restricted. Used for tag auto-complete, curation, and moderation. Error handling covers invalid filters, bad pagination, or search overload. Returns paginated result. Used next to single tag and topic endpoints.","summary":"Get a paginated and filtered list of topic tags from discussionboard_topic_tags.","parameters":[],"requestBody":{"description":"Filters and pagination info for searching topic tags.","typeName":"DiscussionBoardTopicTag.IRequest"},"responseBody":{"description":"Paginated topic tags matching the criteria.","typeName":"IPageDiscussionBoardTopicTag"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags","method":"patch"},{"specification":"Retrieve a single topic tag's detail by ID. Used in tag curation, assignment, and moderation flows. Based on discussionboard_topic_tags.","description":"Returns all properties of a topic tag identified by its unique ID, referencing discussionboard_topic_tags. Used to display tag information including name, is_active flag, timestamps. Permissions permit read by all roles. Returns not found/error if tag does not exist. Used together with tag list, create, update, and delete endpoints for management flows. Tag moderation (enable/disable) leverages this endpoint.","summary":"Retrieve full detail for a topic tag from discussionboard_topic_tags table.","parameters":[{"name":"id","description":"Topic tag unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full information of the selected topic tag.","typeName":"DiscussionBoardTopicTag"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags/{id}","method":"get"},{"specification":"Create a new topic tag. Directly addresses the need for tag curation by admins/moderators and tag proposal handling by members. Insert into discussionboard_topic_tags table.","description":"Creates a new topic tag, referencing discussionboard_topic_tags. The request body provides the tag name and is_active flag. All constraints for uniqueness and tag format apply as per business rules. Permissions restrict creation to moderators/admins or with a proposal flow for members. Error responses for duplicate names, bad formats, or unauthorized requests. Returns created tag entity upon success. Actions logged for audit. Related flows include proposal and curation endpoints.","summary":"Create a new topic tag in the discussionboard_topic_tags table.","parameters":[],"requestBody":{"description":"Properties for the new topic tag (name, is_active state, etc.).","typeName":"DiscussionBoardTopicTag.ICreate"},"responseBody":{"description":"The newly created topic tag entity.","typeName":"DiscussionBoardTopicTag"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags","method":"post"},{"specification":"Update a topic tag by its unique ID. Supports tag moderation and curation (enable, rename, etc.), referencing discussionboard_topic_tags.","description":"Updates a topic tag referenced by its unique ID. Accepts properties like name and is_active. Validation checks for unique names, correct status change workflows, and permission to edit. Only moderators or admins may update tags. Actions logged for audit. Errors for permissions, validation, or missing record. Related endpoints include create, detail, and list tags.","summary":"Edit topic tag details in the discussionboard_topic_tags table.","parameters":[{"name":"id","description":"Topic tag unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated topic tag properties.","typeName":"DiscussionBoardTopicTag.IUpdate"},"responseBody":{"description":"The updated topic tag entity.","typeName":"DiscussionBoardTopicTag"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags/{id}","method":"put"},{"specification":"Delete a topic tag by its unique ID. Used for tag curation and moderation workflows. Operates on discussionboard_topic_tags table.","description":"Deletes a topic tag referenced by its UUID. Typically a soft delete (sets inactive flag), not hard table deletion, per compliance rules. Requires moderator or admin privileges. Actions logged for compliance. Returns operation status response indicating outcome (success, error). Used alongside tag creation, update, and detail endpoints for full lifecycle management.","summary":"Delete a topic tag from discussionboard_topic_tags table.","parameters":[{"name":"id","description":"Topic tag unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Status response for delete action.","typeName":"IOperationStatus"},"authorizationRoles":null,"path":"/discussionboard/boards/topicTags/{id}","method":"delete"},{"specification":"List all board announcements with optional filters and pagination. Used for communication and info distribution workflows. Based on discussionboard_board_announcements table.","description":"Retrieves a paginated list of board announcements. Query supports filtering by board, date range, pin status, and announcement title or content. Permissions allow all authenticated users to read, with management restricted to staff. The endpoint references discussionboard_board_announcements and returns each result with all public fields. For full comms lifecycle management, this is paired with announcement detail, creation, and edit/delete endpoints. Validation includes pagination, filter types, and permission. Error handling for invalid queries and over-requesting. Useful for member dashboard, moderator panel, and board landing pages.","summary":"Fetch a paginated/filtered list of board announcements from discussionboard_board_announcements table.","parameters":[],"requestBody":{"description":"Search and filter options for announcements list.","typeName":"DiscussionBoardBoardAnnouncement.IRequest"},"responseBody":{"description":"Paginated announcement records matching request.","typeName":"IPageDiscussionBoardBoardAnnouncement"},"authorizationRoles":null,"path":"/discussionboard/boards/boardAnnouncements","method":"patch"},{"specification":"Retrieve a single board announcement by its unique ID. Used for announcement viewing on board pages. Based on discussionboard_board_announcements table.","description":"Returns full information for a board announcement, including the title, body, pin status, associated board, who published it, timestamps, and soft-delete status. Permissions allow access to all authenticated users. Errors for not-found or no-permission cases. Used together with announcement list, create, update, and delete endpoints as part of the announcement management process.","summary":"Get detailed information of a board announcement from discussionboard_board_announcements table.","parameters":[{"name":"id","description":"Board announcement unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the selected board announcement.","typeName":"DiscussionBoardBoardAnnouncement"},"authorizationRoles":null,"path":"/discussionboard/boards/boardAnnouncements/{id}","method":"get"},{"specification":"Create a new board announcement within the discussion board. This operation serves administrators and moderators by allowing them to post important updates, rules, or notifications for forum participants. The announcement is linked to a specific board, requires specification of title, body, and publisher, and supports pinning. Only users with appropriate admin or moderator privileges can utilize this endpoint. After creation, the announcement is immediately available and may be set as sticky if required.","description":"This API creates a new board announcement in the discussionboard_board_announcements table. Board announcements are system or community messages attached to a specific board (discussionboard_boards.id) and are visible to all users associated with that board. Only admin and moderator users have privileges to post an announcement, which includes a title, message body, pin status (for sticky display), and a reference to the publisher (admin). The business logic ensures that only one announcement can be pinned per board at a time. Uniqueness and access control are enforced through the system's RBAC. Validation requires a board ID, admin ID, title, and message. Incorrect privilege, missing, or malformed fields result in an error. This endpoint is typically used along with GET/PATCH endpoints for announcements listing and the PUT endpoint for updating announcements. Any operation is logged in the audit trail.","summary":"Create a board announcement (discussionboard_board_announcements table).","parameters":[],"requestBody":{"description":"Information for creating a new board announcement.","typeName":"IDiscussionboardBoardAnnouncements.ICreate"},"responseBody":{"description":"The created board announcement entry.","typeName":"IDiscussionboardBoardAnnouncements"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/boards/boardAnnouncements","method":"post"},{"specification":"Update an existing board announcement. Permits adjustment of title, body, pin status, or publisher for the specified announcement. Only accessible by moderators or admins and reflected in the audit log. Target announcement identified by its unique ID.","description":"This API updates an existing board announcement in the discussionboard_board_announcements table. Board announcements are linked to boards and issued by admins. This update endpoint allows changes to any announcement field, such as title, message content, or pin status. The record is identified by its unique announcement ID. Access is controlled; only admin or moderator users can update announcements. Validation ensures the presence of an existing announcement, correct privilege, and all required fields in the update object. Any changes are recorded in the audit log, and concurrent updates to pin status are carefully managed to allow only one pinned announcement per board. Errors include unauthorized access, non-existent announcement, or validation failures. Typically used in moderation/admin workflows for maintaining up-to-date board information.","summary":"Update a board announcement (discussionboard_board_announcements table).","parameters":[{"name":"id","description":"The ID of the announcement to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Announcement fields to update.","typeName":"IDiscussionboardBoardAnnouncements.IUpdate"},"responseBody":{"description":"The updated announcement entry.","typeName":"IDiscussionboardBoardAnnouncements"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/boards/boardAnnouncements/{id}","method":"put"},{"specification":"Delete an existing board announcement from a specified board. This is a soft delete (sets deleted_at) and is accessible by admins or moderators only. Used to remove outdated or inappropriate announcements, maintaining compliance with audit requirements.","description":"This API performs a soft delete for a board announcement in the discussionboard_board_announcements table by setting deleted_at. Target announcement is specified by its unique ID. Only admin or moderator users may delete announcements, in accordance with system business rules. This operation is logged in the audit system. Deletion ensures announcements remain in the backend for audit/legal retention, but are no longer displayed in board UIs. Returns the deleted entry for confirmation. Error handling includes permission denial, non-existent entry, and already-deleted state. Used in conjunction with endpoints for announcement creation and update.","summary":"Delete (soft-delete) a board announcement (discussionboard_board_announcements table).","parameters":[{"name":"id","description":"The ID of the announcement to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The soft-deleted announcement entry.","typeName":"IDiscussionboardBoardAnnouncements"},"authorizationRoles":["admin","moderator"],"path":"/discussionboard/boards/boardAnnouncements/{id}","method":"delete"},{"specification":"Search or list threads within the discussion board. Supports advanced filtering (e.g., by status, board, keyword), pagination, and sorting. Returns a collection of thread resources, intended for users to browse available discussions across or within boards.","description":"This API lists discussion threads from the discussionboard_threads table, supporting search and filtering by attributes like board, status, creator, title, and creation date. The endpoint enables pagination, sort order, and optional search queries for titles or keywords. Results are provided as a paged object containing a data array and metadata (e.g., total, cursor/offset, etc.). Used for thread overviews, listing threads in a board, or search results. Accessible to all registered members, but results may be filtered according to role, visibility, thread status, or user suspension. Commonly followed by GET endpoints for detailed thread retrieval. Validation and error handling cover malformed queries, permission limits (e.g. suspended users), and empty result sets.","summary":"List/search threads (discussionboard_threads table) with pagination and filters.","parameters":[],"requestBody":{"description":"List/search criteria for threads, including filters and pagination.","typeName":"IDiscussionboardThreads.IRequest"},"responseBody":{"description":"Paged list of thread summaries and pagination metadata.","typeName":"IPageIDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads","method":"patch"},{"specification":"Retrieve the details for a specific discussion thread, identified by its ID. Used for viewing the full details and contents (e.g., title, description, creator, status) of a thread.","description":"This API gets a specific discussion thread from the discussionboard_threads table by its unique ID. Returns the full thread object, including all metadata (title, description, status, creator, timestamps). Only threads that are visible and not deleted/hidden for the user are accessible, with business logic accommodating thread status and permissions (e.g., viewing locked or moderated threads may be limited). Errors include not found, permission denied, or suspended user state. Used for user profile displays, thread details view, and moderation audit.","summary":"Get details of a single discussion thread (discussionboard_threads table).","parameters":[{"name":"id","description":"ID of the discussion thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full discussion thread resource.","typeName":"IDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads/{id}","method":"get"},{"specification":"Create a new discussion thread under a specified board. Used for starting a new topic-based conversation. Accessible to registered members and higher roles, with possible validation for account state (e.g., non-suspended).","description":"This API creates a new discussion thread record in the discussionboard_threads table. Requires board ID, member (author) ID, thread title, optional description, and initial status (e.g., 'open'). The operation enforces business logic such as suspension checks, moderation lockdowns, and allows only non-suspended regular members or above to create threads. Audit logging is triggered for thread creation. The created thread is returned for client-side display or navigation. Validation ensures board exists, member is authorized, and all required fields are present. Used in conjunction with thread listing and individual GET endpoints for navigation/confirmation.","summary":"Create discussion thread (discussionboard_threads table).","parameters":[],"requestBody":{"description":"Payload for new thread creation.","typeName":"IDiscussionboardThreads.ICreate"},"responseBody":{"description":"Created thread object.","typeName":"IDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads","method":"post"},{"specification":"Update an existing discussion thread (e.g., changing its title, description, or status). Thread identified by its unique ID. Editing permitted to original thread creator, moderators, or administrators. Audit log is updated accordingly.","description":"This API updates a thread in the discussionboard_threads table. Permits changes to title, description, or thread status; restrictions may apply (e.g., only moderators can lock threads, only authors may edit titles/descriptions unless suspended or moderated). The endpoint enforces correct role and thread existence; audit logs are maintained. Thread is identified by its unique ID, and the body supplies update fields. Used in thread management UI components or moderation panels. Error handling includes permission denials, non-existent thread, or business rule violations.","summary":"Update a discussion thread (discussionboard_threads table).","parameters":[{"name":"id","description":"ID of the thread to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the thread.","typeName":"IDiscussionboardThreads.IUpdate"},"responseBody":{"description":"Updated thread resource.","typeName":"IDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads/{id}","method":"put"},{"specification":"Delete (or soft-delete) a specific thread by its ID. Marks it as deleted for audit and retention, and removes it from public/active listings. Operations are permission-controlled for thread owner, moderators, or administrators.","description":"Soft-deletes a discussion thread in the discussionboard_threads table by setting its deleted_at field. Requires thread ID, and only the creator, moderator, or admin roles may perform this operation, depending on thread status and business rules. Results in thread being hidden from listings but retained for audits. The deleted thread record is returned. Error handling includes permission checks, thread existence, and deletion state. Triggers an audit log entry.","summary":"Delete (soft-delete) a thread (discussionboard_threads table).","parameters":[{"name":"id","description":"ID of the thread to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Thread record after deletion flag is set.","typeName":"IDiscussionboardThreads"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/threads/{id}","method":"delete"},{"specification":"List or search posts within threads, supporting search, filters (by thread ID, author, etc.), pagination, and sorting. Returns a collection of post summaries for feed display or context navigation. Used to surface replies or main content in specific discussions.","description":"This API lists posts (discussionboard_posts table), with support for advanced search, filtering (thread ID, member/author, creation time), pagination, and sort options. Provides a paginated array with summary data for each post, as well as metadata for client pagination. Accessible to all registered members and higher roles, though results may be filtered by permissions (e.g., hidden posts, suspension, thread locks). Errors include invalid filters, out-of-range pages, permission blocks, or empty results. Generally followed by GET endpoints for post details. Used in building discussion feeds or exporting post data for moderation.","summary":"List/search posts (discussionboard_posts table) with pagination/filters.","parameters":[],"requestBody":{"description":"Search criteria and filters for listing posts.","typeName":"IDiscussionboardPosts.IRequest"},"responseBody":{"description":"Paged list of post summaries and pagination data.","typeName":"IPageIDiscussionboardPosts"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts","method":"patch"},{"specification":"Retrieve the full detail of a specific post by its ID. This operation returns the post's body, author, creation/update timestamps, and related thread reference.","description":"Gets a single post record from the discussionboard_posts table by its unique ID. Full details include body, author, post creation/update time, and thread or parent linkage. Accessible to all authenticated users, but may be limited depending on thread/post status and user suspension/role. Returns null or error if not found, deleted, or blocked by permissions. Used in post detail or moderation views. Errors for non-existent or inaccessible records. Often followed by comment/thread retrieval.","summary":"Get detail of a single post (discussionboard_posts table).","parameters":[{"name":"id","description":"ID of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full post resource.","typeName":"IDiscussionboardPosts"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts/{id}","method":"get"},{"specification":"Create a new post within a discussion thread. Used to contribute content in response to the thread topic. Any registered (non-suspended) member can post.","description":"This API creates a new post record in the discussionboard_posts table. Required fields include thread ID, member ID, and body content (markdown supported). The endpoint checks for member suspension and thread lock status. Business logic ensures access rights, audit trails, and validation for all required properties (no empty posts, valid thread, etc.). After creation, returns the full post data for confirmation or direct display. Used alongside post-listing (PATCH) or post-detail (GET), and in response flows in UIs.","summary":"Create a new post (discussionboard_posts table).","parameters":[],"requestBody":{"description":"Payload for creating a post within a thread.","typeName":"IDiscussionboardPosts.ICreate"},"responseBody":{"description":"The created post resource.","typeName":"IDiscussionboardPosts"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts","method":"post"},{"specification":"Update an existing post in a thread, identified by post ID. Allows updating body/content, with field validation and edit controls. Only original author or users with moderation/admin rights may update a post.","description":"This API updates an existing post within the discussionboard_posts table. Permits change to body/content and performs validation for markdown, forbidden content, or edit windows. Authorization/permissions restrict access to original author, moderators, or admins. The post is identified by unique ID, and updated fields are supplied. Includes audit logging. Errors include not found, permission denied, window expiration, or validation failure. Used with post detail and feed/list endpoints.","summary":"Update a post (discussionboard_posts table).","parameters":[{"name":"id","description":"ID of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the target post (e.g., body).","typeName":"IDiscussionboardPosts.IUpdate"},"responseBody":{"description":"The updated post resource.","typeName":"IDiscussionboardPosts"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts/{id}","method":"put"},{"specification":"Implements the deletion of a specific post within a thread for the Discussion Board platform. This operation targets the discussionboard_posts table by ID. It ensures that only authenticated users (typically original authors, moderators, or admins based on RBAC policies) can perform delete requests on posts. Logical deletion is enforced—posts are 'soft deleted' for retention and audit per business/legal rules. The endpoint checks for existence, validates permissions, sets the deleted_at timestamp, and triggers audit logging and notification routines. This is critical for complaint handling, audit transparency, and compliance with discussion platform business rules. The operation also enforces that suspended users or those with insufficient rights cannot delete posts, with error codes for permission denial or not found. Related APIs: Thread, comment, like/dislike, report, and moderation endpoints.","description":"This API endpoint performs the logical deletion of a single post within a discussion thread. Upon receiving a valid authenticated DELETE request for a specific post ID, the system checks:\n\n1. User permissions/role: Only the original post owner, moderator, or admin may initiate the delete.\n2. Post state: Ensures post is not already deleted or part of an ongoing moderation action (e.g., being reviewed).\n3. Consistency with business rules: Sets deleted_at with the current timestamp, records the action in the audit log, and triggers notifications if required.\n\nIf the user is authorized and the post exists, the API updates the post's deleted_at, returning a success response. If permissions are lacking or the post does not exist, returns relevant error. Soft deletion ensures the post is hidden from views but kept for legal/audit compliance. This endpoint is closely related to endpoints for post retrieval, creation, editing, reporting, as well as moderation audit endpoints.","summary":"Delete a post in the discussionboard_posts table (soft-delete by ID).","parameters":[{"name":"id","description":"Post's unique identifier (UUID) to delete. Must match discussionboard_posts.id field.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Deletion status and the details of the logically deleted post (e.g., with deleted_at timestamp set).","typeName":"IDiscussionboardPost"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/posts/{id}","method":"delete"},{"specification":"Implements a search, filter, and paging API for listing comments across all threads and posts within the DiscussionBoard domain. This operation targets the discussionboard_comments table and addresses moderator/member/business needs for powerful queries—filter by thread, post, author, date, and status, including full-text and hierarchy support. It supports advanced listing with pagination and sorting, necessary for mod dashboards, user content histories, and client comment lists. The API interlinks with reply/comment trees, moderation workflows, and supports the forum's audit and business rule requirements, returning both comment metadata and structure.","description":"This API retrieves a list of comments—potentially across all posts/threads—filtered, searched, and paged for frontend display or administration. The request body includes:\n\n- Filtering (e.g., by thread, post, member, status, parent_id)\n- Full-text search on comment body and nested replies\n- Pagination controls (cursor, offset, limit)\n- Sorting by created_at, likes, or other metadata\n\nReturns a paginated list with comment objects, hierarchical mappings, and relevant summary info (e.g., total count for client UI). Permission checks restrict deleted/suspended-user comments for non-admin users. Related to comment GET/PUT/DELETE and moderation audit APIs. This endpoint ensures high-performance querying and compliance with business logic around visibility, moderation, and retention.","summary":"List/search comments across all posts for the discussionboard_comments table.","parameters":[],"requestBody":{"description":"Request object containing filter, search, sort, and pagination information for comments.","typeName":"IDiscussionboardComment.IRequest"},"responseBody":{"description":"Paginated comment list and meta summary (hierarchy, total count, etc).","typeName":"IPageIDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments","method":"patch"},{"specification":"Retrieves a single comment entity from the discussionboard_comments table by unique ID for the DiscussionBoard forum. Delivers full comment object: metadata, relations (thread, post, parent, author), body text, and status. Enforces access controls (deleted, reported, or suspended-user content is gated by permissions). Necessary for showing comment detail view in UI, for reports, or moderation audits. Supports RBAC and API-layer business logic from requirements.","description":"This endpoint enables users, moderators, or admins to retrieve the full details of an individual comment by its unique ID. The system verifies that the comment is visible (not deleted or hidden due to moderation), the requesting user has permission (e.g., suppressed or hidden comments may only be shown to moderators/admins), and organizes the output to include relations to post/thread, comment text/body, and hierarchy info. This supports detailed thread trees, moderation audit trails, and in-depth reporting of platform discussions. Errors are returned if the comment is not found, hidden, or access is restricted due to business or moderation status.","summary":"Get a single comment by ID from the discussionboard_comments table.","parameters":[{"name":"id","description":"Unique comment ID (UUID) to retrieve details for. Must match discussionboard_comments.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete comment object, including text, metadata, and relations.","typeName":"IDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments/{id}","method":"get"},{"specification":"Creates a new comment within a thread post for the DiscussionBoard. Implements insert/creation to discussionboard_comments table. Validates user authentication, post existence and state (not deleted/locked), and possible business rule (edit window, reply hierarchy). On valid POST, comment is created with parent/child relationships as needed. Triggers notifications, engagement updates, and moderation routines. Strict audit trail. Returns the created comment object including IDs and meta.","description":"This endpoint allows a logged-in member to create a new comment on a specific post (and optionally as a reply to another comment). Request body must include: post ID, comment text, and optionally parent_id for threading. Validates that post exists, user is eligible (not suspended), and that reply/comment business rules are followed (max nesting, edit policy, moderation flags). On success, persists the comment with authorization details, emits notifications to relevant parties, and returns the new comment data. Errors given on invalid post, permission, or failed business rule checks. Closely linked to comment GET, PATCH (list/search), and moderation report APIs.","summary":"Create a new comment (discussionboard_comments) on a discussion post or as a reply.","parameters":[],"requestBody":{"description":"Payload to create a new comment—including post ID, comment text/body, and optional parent_id for threaded replies.","typeName":"IDiscussionboardComment.ICreate"},"responseBody":{"description":"The newly created comment object (with IDs, timestamps, and relational info).","typeName":"IDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments","method":"post"},{"specification":"Updates the content or properties of a single comment in the discussionboard_comments table. Implements 'edit own comment' business logic for members (with time windows) and full edit for moderators/admins. Validates permissions, prevents updates to comments that are locked, deleted, or under moderation action, and ensures audit. Returns updated comment object or relevant error (forbidden, not found, or locked). Full audit logging for compliance.","description":"This API enables a user (comment author within edit window) or moderator/admin (unrestricted) to update an existing comment's properties. PATCH/PUT is used for full replacement of comment text/body or metadata. Enforces business rules: only editable if not deleted, locked, or under active moderation. Requires role check and audit logging. Input includes new comment text/body and optionally parent_id (if supporting hierarchy re-parenting). Returns updated comment or error if business rule is violated. Related to comment GET, POST, DELETE, and moderation endpoints.","summary":"Update a single comment in the discussionboard_comments table by ID.","parameters":[{"name":"id","description":"Unique comment ID (UUID) to update. Must match discussionboard_comments.id field.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the comment (body text, possibly metadata or parent).","typeName":"IDiscussionboardComment.IUpdate"},"responseBody":{"description":"Updated comment object after changes, with audit/compliance info.","typeName":"IDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments/{id}","method":"put"},{"specification":"Implements logical deletion for a comment in the discussionboard_comments table by unique ID. Enforces RBAC: comment can be deleted by author within allowed window or any moderator/admin. Sets deleted_at, hides from normal view, logs deletion for audit/compliance, and updates related indexes. Essential for maintaining community health, enforcing business/moderation rules, and fulfilling audit/legal retention policies. Error/permission management included.","description":"This DELETE operation soft-deletes a comment by its unique ID: sets deleted_at, hides the comment from non-privileged users, but retains it for retention and audit. Validates that the user is eligible—a member can delete their own comment (possibly in allowed time), moderators/admins at all times. Prevents deletion if comment is locked or under current report/moderation. Triggers audit and notification routines. Errors returned for invalid ID, insufficient privilege, or business rule failure. Closely related to comment creation, update, and moderator reporting endpoints.","summary":"Delete a comment by ID (discussionboard_comments, soft-delete).","parameters":[{"name":"id","description":"Unique ID of the comment to logically delete (discussionboard_comments.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result with updated comment record (deleted_at) and status summary.","typeName":"IDiscussionboardComment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/comments/{id}","method":"delete"},{"specification":"Implements advanced retrieval (search, pagination, sorting) of comment replies (discussionboard_comment_replies) for the forum's threaded discussion UI and moderation workflows. Returns parent/reply structure, hierarchical mapping, and meta for displaying nested replies, for moderator dashboards and UI clients. Supports filtering by comment, reply, member, date, etc., per business logics and requirements. Tied to core comment/thread APIs and moderation flows, ensuring proper permissions and hiding soft-deleted/inactive replies from normal view.","description":"This API enables moderators, admins, or members to list, search, and paginate comment reply relationships. Clients can filter by parent comment, reply, author, created_at, and status. Useful for rendering threaded, nested discussion UIs, and for moderation or reporting actions. Permissions restrict access to hidden/deleted comments and replies for general users. Returns hierarchically structured reply mappings plus relevant meta for navigating deep discussion threads. Closely linked to core comment and reply manipulation endpoints, as well as moderation/dashboards.","summary":"List/search comment replies (threaded replies) for discussionboard_comment_replies.","parameters":[],"requestBody":{"description":"Filter, search, and paginate options for comment reply search (parent_id, reply_id, member_id, sort, etc.).","typeName":"IDiscussionboardCommentReply.IRequest"},"responseBody":{"description":"Paginated, meta-enriched list of comment replies. Includes parent-reply mappings for nested threads.","typeName":"IPageIDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies","method":"patch"},{"specification":"Retrieves a single comment reply relation from the discussionboard_comment_replies table by ID. Returns detail record for linking parent to reply, with hierarchy, meta, and audit info. Used by nested comment loaders, moderator tools, and dashboards. Enforces visibility business rules, RBAC, and soft-delete policies. Reports error if ID not found or not permitted. Central for reply-structure mapping in forum UIs and audits.","description":"This endpoint returns information on a single comment reply relationship given its unique ID. Outputs parent/reply IDs, creation time, author, and meta for front-end or moderation tracing. Enforces business rule: access is blocked if parent/reply is deleted except for admin/moderator. Used to reconstruct or audit reply trees, resolve disputes, and support advanced UI features for thread navigation. Related to core comment, reply, and thread APIs.","summary":"Get one comment reply relation (discussionboard_comment_replies) by ID.","parameters":[{"name":"id","description":"Unique comment reply ID to retrieve (discussionboard_comment_replies.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment reply object with full info, meta, and audit fields.","typeName":"IDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies/{id}","method":"get"},{"specification":"Creates a new comment reply relationship (discussionboard_comment_replies) for the threaded reply tree in DiscussionBoard. Accepts parent comment and reply IDs in body. Validates that both parent and reply exist and are visible/modifiable per business and moderation rules. On success, commits relation, updates corresponding comment trees, emits necessary notifications, and registers the operation for audit/log. Tied to thread hierarchies, moderation, and nested UI building.","description":"This POST operation registers a new direct reply relationship between two comments—parent and child—for a nested comment structure. Validates user eligibility (member, moderator, admin), checks both comments exist and are not restricted (deleted, not accessible, etc.), enforces business rule (max nesting depth if configured), and commits the reply mapping. Returns newly created relationship object with IDs, timestamps, and hierarchy fields. Related to core comment, thread, and reporting/moderation UIs and APIs.","summary":"Create a comment reply mapping (discussionboard_comment_replies) for threaded discussions.","parameters":[],"requestBody":{"description":"Object containing parent and reply comment IDs (must both exist), with any extra required meta.","typeName":"IDiscussionboardCommentReply.ICreate"},"responseBody":{"description":"Created comment reply mapping object (parent, reply, timestamp, etc).","typeName":"IDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies","method":"post"},{"specification":"Updates properties of a given comment reply mapping in discussionboard_comment_replies by unique ID. Implements business rule for correcting or adjusting reply hierarchies, moderator/admin review, or edit within allowed window by members. Validates permissions and ensures audit trail. Typical usage: moderation; reparenting or correcting thread structure. Returns updated mapping object and triggers hierarchical updates where needed.","description":"Enables updating an existing comment reply mapping: either correcting parent-child relations, adding hierarchical meta, or (for moderators/admins) resolving moderation situations. The PUT request uses reply mapping ID in the path and expects an update object as body (typically parent and/or reply IDs, plus meta). Checks permissions and audit trail requirements. Returns updated mapping object; error on forbidden, not found, or restricted update. Closely relates to comment, reply, and moderation structure APIs.","summary":"Update a single comment reply mapping (discussionboard_comment_replies) by ID.","parameters":[{"name":"id","description":"Unique ID of the comment reply mapping to update. Must correspond to discussionboard_comment_replies.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update object for comment reply mapping (parent_id, reply_id, meta, etc).","typeName":"IDiscussionboardCommentReply.IUpdate"},"responseBody":{"description":"Updated reply mapping object with audit/history info.","typeName":"IDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies/{id}","method":"put"},{"specification":"Deletes a comment reply mapping in discussionboard_comment_replies table using its unique ID. Typically used by moderators, admins, or the original author (within special business logic rules) to remove incorrect or problematic reply mappings. Validates permissions, prevents deletion of mappings in locked or moderated threads, and triggers reply tree recalculations and audit logging. Ensures compliance with audit and hierarchy integrity.","description":"DELETEs a comment reply mapping by ID, removing the row for parent-reply binding. This may affect thread/nesting UIs and triggers recalculation of nested structures. Only available to members (under certain rules), moderators, and admins. Returns the deleted mapping, with confirmation and meta. Error on permissions, mapping not found, or business rule violation. Closely linked to comment, thread, and moderation flow endpoints.","summary":"Delete a comment reply mapping (discussionboard_comment_replies) by its ID.","parameters":[{"name":"id","description":"ID of the reply mapping to delete (discussionboard_comment_replies.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details/confirmation of deleted mapping (parent, reply, meta, etc).","typeName":"IDiscussionboardCommentReply"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/commentReplies/{id}","method":"delete"},{"specification":"List, search, and paginate attached files for posts in the DiscussionBoard forum. Operates on discussionboard_post_attachments table to provide user/member, moderator, or admin access to post file metadata—e.g., file URIs, names, types, uploaded_by, and timestamps. Supports filtering by post, file type, date, uploader, etc. Implements business logic: only those with appropriate permission view attachments. Returns paged results for efficient UI and moderation interfaces. Related to post, thread, and moderation endpoints.","description":"Enables query/pagination of post attachments for a given set of posts or search filters. Returns attachment records with all file metadata (URI, file_name, file_type, uploaded_at, uploaded_by). Filters support querying by post(s), file type, date range, and uploader. Permissions restrict file access: only authors, thread participants, moderators, and admins can see files. Returns paginated/filtered list with relevant meta. Used primarily for display, moderation/audit, and for file/content UI in threads. Closely related to post CRUD and moderation APIs.","summary":"Paginated search/list of post attachment records (discussionboard_post_attachments).","parameters":[],"requestBody":{"description":"Search and paging options for post attachments (filter by post, uploader, file type, date, etc.)","typeName":"IDiscussionboardPostAttachment.IRequest"},"responseBody":{"description":"Paged result of post file attachments with meta info and next-page cursor.","typeName":"IPageIDiscussionboardPostAttachment"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/threads/postAttachments","method":"patch"},{"specification":"Get a specific post attachment by its unique identifier. This endpoint allows retrieval of detailed metadata and properties for a single post attachment (discussionboard_post_attachments) within a thread. Used by UI to display download link, filename, and associated information, with access control for the file resource. Fulfills audit and legal requirements by tracking access. Prisma table: discussionboard_post_attachments.","description":"Retrieves metadata and properties of a particular post attachment from the discussionboard_post_attachments table. This endpoint is essential for serving file downloads, showing information such as filename, uploader, and type. Permission checks ensure that only authorized users (the uploader, thread participants, or moderators/admins) can access sensitive or non-public files. Returns full information for one attachment. In case of missing or unauthorized access, relevant error messages are returned. This API references the Prisma schema comment for discussionboard_post_attachments and adheres to related access control and retention business rules.","summary":"Retrieve a single post attachment (discussionboard_post_attachments) by ID.","parameters":[{"name":"id","description":"Unique identifier of the post attachment.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post attachment information.","typeName":"IDiscussionboardPostAttachment"},"authorizationRoles":null,"path":"/discussionboard/threads/postAttachments/{id}","method":"get"},{"specification":"Create a new post attachment associated with a post in a discussion thread. The endpoint enables file attachment by users to enhance post expressiveness (e.g., image uploads, PDF, spreadsheets). Fully validated against allowed file types and size restrictions enforced by system configuration. Prisma table: discussionboard_post_attachments.","description":"Allows an authenticated user (typically the post author) to attach a new file to an existing post. Receives attachment metadata and the file URI, storing details in the discussionboard_post_attachments table. Permissions and quotas are verified for the member, and any restriction violations (such as file size/type or post ownership) are handled according to business rules. This API references Prisma schema comments for post attachments, ensuring normalization and audit compliance. Returns the created attachment's details. In the case of errors, validation or permission failure is indicated. Related APIs: GET for retrieval, PUT for update, DELETE for removal of attachments.","summary":"Create a new post attachment (discussionboard_post_attachments).","parameters":[],"requestBody":{"description":"Information about the attachment to be created.","typeName":"IDiscussionboardPostAttachment.ICreate"},"responseBody":{"description":"Newly created post attachment details.","typeName":"IDiscussionboardPostAttachment"},"authorizationRoles":null,"path":"/discussionboard/threads/postAttachments","method":"post"},{"specification":"Update the metadata or properties for a post attachment. This may include changing the display filename, updating the file URI, or changing file status. Prisma table: discussionboard_post_attachments.","description":"Updates an existing post attachment's metadata in the discussionboard_post_attachments table. Supported changes typically involve renaming, replacing the file, or updating associated metadata such as file type or display name. Proper permission checks ensure only the uploader or authorized moderators/admins can perform this operation. Business rules apply, including not allowing update on deleted or non-existent attachments. Logs changes for compliance. Related API operations include GET for retrieval and DELETE for removal.","summary":"Update an existing post attachment (discussionboard_post_attachments) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post attachment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated post attachment information.","typeName":"IDiscussionboardPostAttachment.IUpdate"},"responseBody":{"description":"Updated post attachment details.","typeName":"IDiscussionboardPostAttachment"},"authorizationRoles":null,"path":"/discussionboard/threads/postAttachments/{id}","method":"put"},{"specification":"Delete (remove) a post attachment from a post. Implements business rules for file deletion with retention for audit log compliance. This operation soft-deletes the attachment, retaining audit and legal information as required. Prisma table: discussionboard_post_attachments.","description":"Soft-deletes a specified post attachment in the discussionboard_post_attachments table—usually by the author, or by a moderator/admin for violating files. This operation flags the attachment as deleted, rather than removing it from storage immediately, to fulfill compliance requirements and enable future audits or restoration. Access control strictly enforced: only authorized users can delete. In case the attachment does not exist or deletion is not allowed, returns an appropriate error. Follows schema and business logic as stated in comments.","summary":"Delete a post attachment (discussionboard_post_attachments) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post attachment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of deletion operation.","typeName":"IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/threads/postAttachments/{id}","method":"delete"},{"specification":"List/search post likes for posts (discussionboard_post_likes). Used to show which members liked a particular post or to provide analytics about likes in threads or boards. Prisma table: discussionboard_post_likes.","description":"Retrieves multiple post like entries from the discussionboard_post_likes table. Supports searching (by member, post, or time) and pagination for performance/scalability. Returned data may include member/user info, post references, and timestamps. Permission checks ensure compliance with visibility and audit requirements. This operation is essential for engagement analytics, trending features, and personal dashboards. Related APIs: POST to create a like, GET for single like by ID.","summary":"List/search post likes (discussionboard_post_likes).","parameters":[],"requestBody":{"description":"Search and filter parameters for likes.","typeName":"IDiscussionboardPostLike.IRequest"},"responseBody":{"description":"Paginated list of post likes.","typeName":"IPageIDiscussionboardPostLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes","method":"patch"},{"specification":"Retrieve a specific post like by its unique identifier. Used to show details (who liked, when, and for which post) for audit/history or for displaying individual like actions. Prisma table: discussionboard_post_likes.","description":"Fetches details of a particular post like from the discussionboard_post_likes table, providing information about the member, the liked post, and timestamp metadata. Access control may restrict details to authorized parties (e.g., the user who performed the action, moderators, or admins). Related APIs: PATCH for listing, POST to create, PUT to update, DELETE to remove.","summary":"Retrieve a single post like (discussionboard_post_likes) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post like entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the post like entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes/{id}","method":"get"},{"specification":"Create a new like for a post by a member (discussionboard_post_likes). Used for user engagement and feedback on posts. Prisma table: discussionboard_post_likes.","description":"Allows an authenticated member to like a post. Validates that duplicate likes are not created (enforced by unique constraint). Stores the like entry in the discussionboard_post_likes table and updates any engagement statistics. Related APIs: PATCH for listing/searching likes, GET to retrieve details, PUT to update, DELETE to remove/unlike.","summary":"Create a new post like (discussionboard_post_likes).","parameters":[],"requestBody":{"description":"Information to create a post like entry.","typeName":"IDiscussionboardPostLike.ICreate"},"responseBody":{"description":"Details of the created post like entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes","method":"post"},{"specification":"Update the properties of an existing post like. Most commonly, this allows administrators to audit or correct engagement actions, or to update metadata if needed. Prisma table: discussionboard_post_likes.","description":"Updates metadata or properties of an existing post like in the discussionboard_post_likes table. Normally, likes are simple, but this supports audit correction or updating extra engagement fields, if schema allows. Permission checks enforce that only the actor, moderators, or admins can update engagement actions. Logs all changes for audit compliance. Related APIs: GET for viewing, DELETE for unliking, POST for new like.","summary":"Update an existing post like (discussionboard_post_likes) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post like entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated properties for the post like entry.","typeName":"IDiscussionboardPostLike.IUpdate"},"responseBody":{"description":"Details of the updated post like entry.","typeName":"IDiscussionboardPostLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes/{id}","method":"put"},{"specification":"Delete (remove/unlike) a post like. Allows a member to unlike a post, or allows moderators or admins to remove abusive/inappropriate likes. Prisma table: discussionboard_post_likes.","description":"Deletes a specific post like entry in the discussionboard_post_likes table, removing the like from the target post's engagement metrics. Enforces permissions so that only the like owner, post owner, or authorized staff can remove a like. Does not remove the post itself; only the engagement action. Related APIs: GET for retrieval, POST for creation, PUT for update.","summary":"Delete a post like (discussionboard_post_likes) by ID (unlike operation).","parameters":[{"name":"id","description":"Unique identifier for the post like entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the deletion operation.","typeName":"IDeleteResult"},"authorizationRoles":null,"path":"/discussionboard/interactions/postLikes/{id}","method":"delete"},{"specification":"List/search post dislikes for posts (discussionboard_post_dislikes). Used to audit negative engagement, support moderation, and conduct analytics. Prisma table: discussionboard_post_dislikes.","description":"Retrieves multiple post dislike entries from the discussionboard_post_dislikes table, supporting advanced search, filtering, and pagination for UI or backend consumption. Useful for tracking problematic content, auto-flagging, or for user dashboards. Access control is enforced for this operation, with sensitive data hidden when necessary. Related APIs: POST to create a dislike, GET to retrieve specific instance, PUT to update, DELETE to remove.","summary":"List/search post dislikes (discussionboard_post_dislikes).","parameters":[],"requestBody":{"description":"Search/filter parameters for post dislikes.","typeName":"IDiscussionboardPostDislike.IRequest"},"responseBody":{"description":"Paginated list of post dislikes.","typeName":"IPageIDiscussionboardPostDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes","method":"patch"},{"specification":"Retrieve a single post dislike by its unique identifier. Used to show who disliked a post and when. Used for moderation, audit, and user history display. Prisma table: discussionboard_post_dislikes.","description":"Fetches details for a specific post dislike from the discussionboard_post_dislikes table, including actor/member, target post, and timestamp. Permissions are enforced according to business logic—dislike owner, moderators/admins may view extra details. Related APIs: PATCH to list/search, POST to create, PUT to update, DELETE to remove.","summary":"Retrieve a single post dislike (discussionboard_post_dislikes) by ID.","parameters":[{"name":"id","description":"Unique identifier for the post dislike entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the post dislike entry.","typeName":"IDiscussionboardPostDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes/{id}","method":"get"},{"specification":"Create a new dislike for a post by a member. Enables expression of negative feedback for moderation signals and analytics. Prisma table: discussionboard_post_dislikes.","description":"Allows an authenticated member to dislike a post, recording the engagement event in the discussionboard_post_dislikes table. Duplicate dislikes by the same user for the same post are not permitted (enforced by unique constraint). Workflow includes updating engagement counters or flagging for moderation if thresholds are exceeded. Proper access control is validated for actor and target post. Related APIs: PATCH for listing/searching, GET for detail, PUT for update, DELETE for unliking/removal.","summary":"Create a new post dislike (discussionboard_post_dislikes).","parameters":[],"requestBody":{"description":"Information to create a post dislike entry.","typeName":"IDiscussionboardPostDislike.ICreate"},"responseBody":{"description":"Details of the created post dislike entry.","typeName":"IDiscussionboardPostDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes","method":"post"},{"specification":"Update an existing post dislike record by its ID. This operation allows a member to modify their previous dislike entry on a post, for example, if the reason or timestamp needs updating. It applies to the DiscussionBoard domain, specifically targeting the interaction entity 'discussionboard_post_dislikes' as outlined in the Interactions schema. The endpoint follows the RESTful convention of PUT for full updates to a resource by its identifier.","description":"This API operation enables a member to update a specific post dislike by its unique ID. According to the Prisma schema (discussionboard_post_dislikes), each dislike is an atomic record containing the post ID, member ID, and timestamp. Members may update their dislike—for instance, if the system allows users to change associated justification comments (though not explicitly described in the schema, the route supports RESTful resource modification). The operation enforces permission so users can only update their own dislikes; moderators and admins may have elevated permissions for management or correction. If the dislike does not exist or the user is unauthorized, appropriate errors are returned. All changes are auditable, and the modification time is logged for compliance with discussion board business rules. This operation relies on path parameter ID, which must be a UUID corresponding to an existing post dislike. Related endpoints include POST for creation, DELETE for removal, and GET (if exposed) for retrieval of single dislikes. Errors include not found, unauthorized, and validation failures.","summary":"Update a specific post dislike by its ID (discussionboard_post_dislikes).","parameters":[{"name":"id","description":"Unique identifier of the post dislike to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full update payload for the post dislike entry.","typeName":"IDiscussionboardPostDislike.IUpdate"},"responseBody":{"description":"The updated post dislike record.","typeName":"IDiscussionboardPostDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes/{id}","method":"put"},{"specification":"Remove a post dislike record by its ID. This endpoint enables a member to withdraw their dislike on a post, which is tracked in the 'discussionboard_post_dislikes' table. This resource deletion is in accordance with the RESTful DELETE method and the forum's business rules for managing user feedback. The operation strictly identifies a post dislike by its unique UUID.","description":"This API operation deletes a post dislike by its ID from the 'discussionboard_post_dislikes' table. Each dislike represents a member's explicit downvote/negative feedback on a post (see the Interactions schema for details). Only the dislike's creator, or users with moderator/admin privileges, are authorized to perform this action. The system physically deletes the record (as there is no soft deletion for dislikes); the member may then re-dislike by creating a new record in the future. Actions are audited for transparency. If the ID does not exist, a not found response is returned. If a user is not authorized, an error is raised. This operation is related to the POST (create) and PUT (update) endpoints for post dislikes. Errors include unauthorized, not found, and validation failure responses.","summary":"Delete a post dislike by ID (discussionboard_post_dislikes).","parameters":[{"name":"id","description":"ID of the post dislike entry to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/interactions/postDislikes/{id}","method":"delete"},{"specification":"Search for and retrieve multiple comment like records according to search and pagination parameters. This PATCH operation on 'discussionboard_comment_likes' implements advanced listing functionality, as described in forum engagement features. Typical usage is for admin/moderator analytics or for members to view their like history, according to system permissions. This adheres to the REST convention of PATCH for complex queries with request body payloads.","description":"Retrieve a list of comment like records using filter criteria, pagination, and sorting. This supports analytics, member engagement review, or moderation. The backing table is 'discussionboard_comment_likes' (see the Interactions domain schema), containing the linking between members and comment likes. Filtering may include by member, comment, or time window. Pagination parameters (limit/offset/page) and optional sorting fields are provided for efficient navigation. Access control may limit results: members see their data, moderation/admins may have broader query rights. Related endpoints are GET for details of a single record, POST for creating a like, PUT for modification, and DELETE for removal. Error handling covers invalid query parameters, unauthorized access, and database errors.","summary":"List and search comment likes (discussionboard_comment_likes).","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for listing comment likes.","typeName":"IDiscussionboardCommentLike.IRequest"},"responseBody":{"description":"Paginated list of comment like records matching the query.","typeName":"IPageIDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes","method":"patch"},{"specification":"Retrieve a single comment like by its unique ID. This operation accesses a specific entry in the 'discussionboard_comment_likes' entity, providing details about a member's like on a particular comment. The endpoint matches a RESTful GET on an individual resource.","description":"This API operation returns information on a single comment like. Data will include the member who liked, the comment liked, and the timestamp (see discussionboard_comment_likes schema in Interactions domain). Only the liking member, or admins/moderators, can access details. Audit/logging may be performed for sensitive operations. If the comment like does not exist, a not found response is returned. Related operations: POST to create a like, PATCH to list likes, PUT to modify, DELETE to remove. Error cases include not found, unauthorized access, and insufficient permissions.","summary":"Get a comment like by its ID (discussionboard_comment_likes).","parameters":[{"name":"id","description":"Comment like identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail of the specified comment like record.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes/{id}","method":"get"},{"specification":"Create a new comment like record, representing a member liking a comment. This endpoint creates an entry in the discussionboard_comment_likes table, implementing engagement functionality per business rules and the Interactions schema.","description":"This POST operation enables a member to like a comment, resulting in a new discussionboard_comment_likes record. Required parameters are typically the comment ID being liked and the member ID (authenticated automatically for the user). Only one like per member/comment is permitted (enforced as a unique constraint). The system logs the timestamp and enforces permission checks to prevent multiple likes by the same member. On success, returns the full data for the created comment like record. Moderators/admins may have additional privileges for synthetic/legacy entries. Errors: duplicate like, invalid data, unauthorized, and database errors. Related endpoints are PATCH (search), GET (by ID), PUT (update), and DELETE (remove).","summary":"Create a comment like (discussionboard_comment_likes).","parameters":[],"requestBody":{"description":"Data for new comment like creation.","typeName":"IDiscussionboardCommentLike.ICreate"},"responseBody":{"description":"The newly created comment like entry.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes","method":"post"},{"specification":"Update an existing comment like record by its ID. This operation is for correcting or re-attributing a comment like, working on the 'discussionboard_comment_likes' table per RESTful update semantics.","description":"This API operation modifies a specific comment like by its ID. Permitted only for the liking member or moderators/admins. Business logic may allow changing the liked comment or the timestamp if necessary. Changes are auditable. Record is identified uniquely by ID (UUID). If not found, a not found response is provided. Related endpoints: POST (create), PATCH (search), GET (details), DELETE (remove). Errors include validation, unauthorized, and system failures.","summary":"Update a comment like by ID (discussionboard_comment_likes).","parameters":[{"name":"id","description":"ID of the comment like to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for full update of the comment like resource.","typeName":"IDiscussionboardCommentLike.IUpdate"},"responseBody":{"description":"The updated comment like entry.","typeName":"IDiscussionboardCommentLike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes/{id}","method":"put"},{"specification":"Remove a comment like record by its ID. Enables a member to unlike a comment by deleting their like from the 'discussionboard_comment_likes' table. A RESTful DELETE operation for the resource.","description":"This DELETE operation removes a comment like reference by ID. Members may unlike their previous liked comment (one like per member/comment enforced). Only the like creator or users with elevated privileges (admin/moderator) may perform a delete. Upon deletion, no like is counted for that member on the comment. All deletion events are auditable. Errors include record not found, unauthorized access, and validation failures. Related endpoints: POST (create), PATCH (list), GET (details), PUT (update).","summary":"Delete a comment like by ID (discussionboard_comment_likes).","parameters":[{"name":"id","description":"ID of the comment like entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/interactions/commentLikes/{id}","method":"delete"},{"specification":"List and query all comment dislikes in the forum, supporting search, pagination, and filtering. This PATCH on 'discussionboard_comment_dislikes' enables admin/moderator analysis, member review, and auditing of engagement patterns, as per business requirements.","description":"Retrieve a paginated list of comment dislike records with filter, sort, and search options. Backed by the discussionboard_comment_dislikes table (Interactions domain), each record links a member, comment, and timestamp. Query may be filtered by member, comment, or date. Paginated and sortable for large result sets. Permissions restrict data based on user roles: regular members see only their dislikes, moderation/admins have wider access. All queries are auditable. Related endpoints: GET (single), POST (create), PUT (update), DELETE (remove). Errors include validation of request, unauthorized access, and system failures.","summary":"List/search comment dislikes (discussionboard_comment_dislikes).","parameters":[],"requestBody":{"description":"Search and pagination info for querying comment dislikes.","typeName":"IDiscussionboardCommentDislike.IRequest"},"responseBody":{"description":"Paginated list of comment dislike entries.","typeName":"IPageIDiscussionboardCommentDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes","method":"patch"},{"specification":"Retrieve one comment dislike by its ID. The endpoint performs a detail lookup in the 'discussionboard_comment_dislikes' entity, returning the member, comment, and timestamp of the dislike.","description":"Given a comment dislike identifier (UUID), this API returns the matching record from the discussionboard_comment_dislikes table. Only the member (creator) or privileged users may access details. Fields follow those in the Interactions schema. Not found or unauthorized errors are returned as appropriate. Related endpoints handle listing (PATCH), creation (POST), update (PUT), and deletion (DELETE) of dislikes.","summary":"Get a specific comment dislike by ID (discussionboard_comment_dislikes).","parameters":[{"name":"id","description":"Comment dislike UUID to look up.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the identified comment dislike entry.","typeName":"IDiscussionboardCommentDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes/{id}","method":"get"},{"specification":"Create a new dislike on a comment, recording the member's negative engagement. This inserts a new row into the discussionboard_comment_dislikes table (Interactions domain), enforcing 1 record per member/comment pair.","description":"This POST endpoint allows a member to dislike a specific comment, resulting in a new discussionboard_comment_dislikes record. Required input is usually the comment being disliked and the acting member (authenticated context). System guarantees one dislike per comment per member. Successful response provides the newly created dislike record. Failures include duplicate dislike attempt, invalid data, or permission errors. Tied to GET (detail), PATCH (list), PUT (update), and DELETE (remove) endpoints for full lifecycle. All events are audited.","summary":"Create a comment dislike (discussionboard_comment_dislikes).","parameters":[],"requestBody":{"description":"Payload for creating a comment dislike.","typeName":"IDiscussionboardCommentDislike.ICreate"},"responseBody":{"description":"The created comment dislike entry.","typeName":"IDiscussionboardCommentDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes","method":"post"},{"specification":"Update an existing comment dislike record by ID. Used for corrections or attribution changes, working on discussionboard_comment_dislikes entity, enforcing member or moderator permission.","description":"This PUT operation updates a specific comment dislike record. The acting member must be owner, or a privileged user (mod/admin). Allows for correcting the referenced comment or update timestamp as permitted by business rules. Related endpoints: POST (create), PATCH (search), GET (detail), DELETE (remove). Handles errors for invalid input, not found, unauthorized, and database issues. Fields and responses match discussionboard_comment_dislikes schema. Auditing applies for all changes.","summary":"Update a comment dislike by ID (discussionboard_comment_dislikes).","parameters":[{"name":"id","description":"ID of the comment dislike to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for full update of the comment dislike entity.","typeName":"IDiscussionboardCommentDislike.IUpdate"},"responseBody":{"description":"The updated comment dislike record.","typeName":"IDiscussionboardCommentDislike"},"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes/{id}","method":"put"},{"specification":"Remove a comment dislike by ID, revoking the member's previous negative feedback on a comment. Deletes the associated row from the discussionboard_comment_dislikes table, as per business logic and Interactions schema.","description":"A member or moderator/admin can delete a comment dislike by specifying its ID. Removes the matching entry from the database; after which, the member may re-dislike if desired. Permissions restrict who may delete. Auditable for transparency. On success, returns no content (204). Related operations: POST (create), PATCH (list), GET (detail), PUT (update). Error responses handle not found, unauthorized, and system errors.","summary":"Delete a comment dislike by ID (discussionboard_comment_dislikes).","parameters":[{"name":"id","description":"ID of the comment dislike to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionboard/interactions/commentDislikes/{id}","method":"delete"},{"specification":"DiscussionBoardPostReports resource, supporting querying a paginated/searchable list of post report records. This endpoint returns all post report entities for review, search, or moderation analysis as required by moderation workflows. Uses PATCH for complex filter/request body handling, matching normalized DB structure `discussionboard_post_reports`.","description":"This endpoint allows retrieval of multiple DiscussionBoard post report records by flexible criteria. Results are paginated and can be filtered by report reason, reporting member, post, date range, etc., assisting moderation workflow and abuse review. Permissions: typically available to moderators and admins but not regular members, unless retrieving their own reports. Handles various validation and business rules: members can report up to 10 items per day, and the API enforces this. The endpoint references the `discussionboard_post_reports` table in Prisma, returning the `IDiscussionboardPostReport` summary or full list structure (e.g., `IPageDiscussionboardPostReport`).","summary":"List and search DiscussionBoard post reports with filters and pagination (discussionboard_post_reports).","parameters":[],"requestBody":{"description":"Filtering/search and pagination parameters for querying post reports.","typeName":"IDiscussionboardPostReport.IRequest"},"responseBody":{"description":"Paginated list of post reports matching the search criteria.","typeName":"IPageDiscussionboardPostReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/postReports","method":"patch"},{"specification":"DiscussionBoardPostReports resource, supporting detailed retrieval of a specific post report by its unique identifier. Operates on normalized table `discussionboard_post_reports`.","description":"This endpoint retrieves a single DiscussionBoard post report record given its unique ID. It is intended for in-depth review by moderators or admins as part of the moderation and audit workflow. Returns all report details for the specified report, enforcing access control so only authorized roles (moderator, admin) or users who created the report can retrieve it. Validation: Ensures access is granted based on user role and that the ID is correctly formed (UUID). Maps to Prisma table `discussionboard_post_reports`.","summary":"Get DiscussionBoard post report detail by ID (discussionboard_post_reports).","parameters":[{"name":"id","description":"ID of the target post report record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All data fields for the specified post report.","typeName":"IDiscussionboardPostReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/postReports/{id}","method":"get"},{"specification":"DiscussionBoardPostReports resource, creation endpoint. Submits a new post report, as required by abuse reporting and moderation notification business logic. Operates on table `discussionboard_post_reports`.","description":"This endpoint is used by platform members to report a post for abuse, spam, or rules violation. Accepts structured data describing the reason, reported post, and reporting user (autofilled by authentication). On success, creates a new row in the `discussionboard_post_reports` table and triggers moderation workflow, potentially including triggers for notification. Enforces per-member daily report quota (e.g., 10 per day) to prevent spam/abuse of report system. Accessible to authenticated members only.","summary":"Submit new DiscussionBoard post report (discussionboard_post_reports).","parameters":[],"requestBody":{"description":"Information required to file a new post report (post, reason, etc.).","typeName":"IDiscussionboardPostReport.ICreate"},"responseBody":{"description":"The created post report record.","typeName":"IDiscussionboardPostReport"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/interactions/postReports","method":"post"},{"specification":"DiscussionBoardPostReports resource, update endpoint. Allows authorized modification of a post report record—for example, appending resolution note or correcting information. Works on table `discussionboard_post_reports`.","description":"This endpoint allows a moderator or admin to update specific properties of an existing DiscussionBoard post report, such as marking as resolved or updating the review status, fulfilling moderation and business rule flows. Regular members are not allowed to update other users' reports. Checks that ID exists and validates the update object per schema. Implements update (PUT) on a single resource by ID, mapping to the normalized `discussionboard_post_reports` entity.","summary":"Update DiscussionBoard post report by ID (discussionboard_post_reports).","parameters":[{"name":"id","description":"ID of the post report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update object for the post report, allowing modification of resolution status and details.","typeName":"IDiscussionboardPostReport.IUpdate"},"responseBody":{"description":"The updated post report record.","typeName":"IDiscussionboardPostReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/postReports/{id}","method":"put"},{"specification":"DiscussionBoardPostReports resource, delete endpoint. Allows moderator/admin to remove a report record, primarily for abuse, error, or moderation closure reasons. Operates on `discussionboard_post_reports`.","description":"This endpoint deletes an existing post report from the system, typically as part of moderation review workflows or in the case of erroneous submissions. Access limited to authorized roles (moderators/admins); not available to regular users. Validates the report ID and checks that deletion matches business logic (e.g., resolved, not under appeal, etc.).","summary":"Delete DiscussionBoard post report by ID (discussionboard_post_reports).","parameters":[{"name":"id","description":"ID of the post report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Indicates success/failure of post report deletion.","typeName":"IDiscussionboardPostReport.IDeleteResult"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/postReports/{id}","method":"delete"},{"specification":"DiscussionBoardCommentReports resource, supporting paginated/queryable list retrieval. Maps to normalized table `discussionboard_comment_reports`. PATCH enables advanced search or filter in request body, supporting moderation workflows. Returns summaries or detail as per business logic.","description":"This endpoint provides filtered, paginated access to the DiscussionBoard comment report records for moderation review and audit. Results may be filtered by comment, reason, reporting user, or time period, enforcing business rule for rate-limiting and review flow. Only authorized roles (moderator, admin) may access. Enforces Prisma normalization for audit assurance.","summary":"List and search DiscussionBoard comment reports (discussionboard_comment_reports).","parameters":[],"requestBody":{"description":"Request payload specifying filter and pagination for comment report lookup.","typeName":"IDiscussionboardCommentReport.IRequest"},"responseBody":{"description":"Paged list of comment reports matching the filter/query.","typeName":"IPageDiscussionboardCommentReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/commentReports","method":"patch"},{"specification":"DiscussionBoardCommentReports resource, detail endpoint. Enables retrieval of a specific comment report by unique ID, supporting review, moderation, or audit. Maps to normalized table `discussionboard_comment_reports`.","description":"Retrieves the full data record for a DiscussionBoard comment report using its unique identifier, supporting moderation, resolution, and logging processes. Return includes reason, reported comment, reporting member, and relevant timestamps. Access controlled to roles with privilege, or the reporting user themselves. Enforces UUID validity for IDs. Maps to the `discussionboard_comment_reports` table.","summary":"Get DiscussionBoard comment report by ID (discussionboard_comment_reports).","parameters":[{"name":"id","description":"Unique identifier for the requested comment report entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full record of the requested comment report.","typeName":"IDiscussionboardCommentReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/commentReports/{id}","method":"get"},{"specification":"DiscussionBoardCommentReports resource, creation endpoint. Lets a member report a comment for violation/spam. Maps to Prisma table `discussionboard_comment_reports`.","description":"Allows a member to submit a report about a comment that is spam, inappropriate, or violates rules. All required information (reported comment, reason) must be provided; reporting user is taken from authentication. Upon submission, the record is stored for moderation review, triggering notification flows as appropriate. Daily rate limit is enforced per user. Only members may report; moderation team reviews inbound reports via other endpoints.","summary":"Create a new DiscussionBoard comment report (discussionboard_comment_reports).","parameters":[],"requestBody":{"description":"Data for the new comment report (target, reason).","typeName":"IDiscussionboardCommentReport.ICreate"},"responseBody":{"description":"The created comment report record.","typeName":"IDiscussionboardCommentReport"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/interactions/commentReports","method":"post"},{"specification":"DiscussionBoardCommentReports resource, update endpoint. Updates a comment report record (typically for moderation review/resolution). Maps to normalized table `discussionboard_comment_reports`.","description":"Enables a moderator or admin to edit a comment report, updating its review status, resolution notes, or correcting data. Not accessible to general members. Validates both the ID and payload against DB and logic. Supports workflow where moderation team documents findings and closes reports.","summary":"Update DiscussionBoard comment report by ID (discussionboard_comment_reports).","parameters":[{"name":"id","description":"ID of the comment report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the comment report.","typeName":"IDiscussionboardCommentReport.IUpdate"},"responseBody":{"description":"The updated comment report entity.","typeName":"IDiscussionboardCommentReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/commentReports/{id}","method":"put"},{"specification":"DiscussionBoardCommentReports resource, delete endpoint. Removes a comment report, e.g., for error or moderation workflow. Maps to table `discussionboard_comment_reports`.","description":"Deletes an existing comment report record, usually by a moderator or admin upon review or error correction. Ensures required permissions, validates the specified report ID, and performs business logic checks as needed. Soft/hard deletion per business requirement. Not available to members. Relates to `discussionboard_comment_reports` Prisma model.","summary":"Delete DiscussionBoard comment report by ID (discussionboard_comment_reports).","parameters":[{"name":"id","description":"ID of the comment report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the comment report deletion process.","typeName":"IDiscussionboardCommentReport.IDeleteResult"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/commentReports/{id}","method":"delete"},{"specification":"DiscussionBoardTagProposals resource, paginated list/search endpoint. Fetches proposed tags from members awaiting moderator/admin review per business rules. Normalized table: `discussionboard_tag_proposals`.","description":"Returns a filtered, paginated list of topic tag proposals submitted by members for moderator/admin review. Enables the curation workflow, anti-abuse business rules, and supports user-driven structure of topical tagging. Only elevated roles (moderator, admin) may review proposals and decide on acceptance or rejection. Prisma model: `discussionboard_tag_proposals`.","summary":"List/search DiscussionBoard tag proposals (discussionboard_tag_proposals).","parameters":[],"requestBody":{"description":"Filter and search parameters for tag proposal listing/query.","typeName":"IDiscussionboardTagProposal.IRequest"},"responseBody":{"description":"Paged result of tag proposals submitted by members.","typeName":"IPageDiscussionboardTagProposal"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/tagProposals","method":"patch"},{"specification":"DiscussionBoardTagProposals resource, detail retrieval endpoint. Returns a specific tag proposal for moderator/admin review or member info. Normalized table: `discussionboard_tag_proposals`.","description":"Retrieves a specific tag proposal by its unique identifier. Used for reviewer interface or (if permission) the proposing member's view. Returns all details of the tag proposal for review, moderation, or anti-abuse action. Data source: `discussionboard_tag_proposals` table.","summary":"Get tag proposal detail by ID (discussionboard_tag_proposals).","parameters":[{"name":"id","description":"Unique ID of the tag proposal to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All details for the requested tag proposal entry.","typeName":"IDiscussionboardTagProposal"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/interactions/tagProposals/{id}","method":"get"},{"specification":"Create a new tag proposal entity for the discussion board system. This endpoint allows authenticated members to propose a new topic tag to be reviewed by moderators/admins. The operation is mapped to the discussionboard_tag_proposals table, which stores the atomic proposal event, the proposing member's identity, the proposed tag string, and the creation timestamp. The request body contains the proposal details (proposed_tag), and on success, the response includes full information of the new proposal. Moderation and curation logic is handled elsewhere; this operation is for creation only. Related APIs include those for updating (PUT), deleting (DELETE), and retrieving proposals. Only registered, active members can create tag proposals.","description":"This API operation creates a new topic tag proposal. It references the discussionboard_tag_proposals table, which allows members to propose additional tags for threads or topics. Members submit a proposed_tag string via the request body, and the system stores the member ID (from authentication), the tag string to be reviewed, and the timestamp.\n\nValidation rules ensure: the tag string is unique for that user (no duplicate proposals); tags must meet content guidelines (handled in API logic); and only active members (not suspended/banned) can submit proposals. If a moderator/admin accepts the proposal, it moves to the official tag table.\n\nStandard security and rate-limiting rules apply, and the endpoint is audit-logged for abuse monitoring. Related endpoints include PUT for updating proposals, DELETE for removal, and PATCH/GET for moderation review flows.","summary":"Create a new tag proposal (discussionboard_tag_proposals).","parameters":[],"requestBody":{"description":"Tag proposal creation input (proposed_tag string).","typeName":"IDiscussionboardTagProposal.ICreate"},"responseBody":{"description":"Full tag proposal entity after creation.","typeName":"IDiscussionboardTagProposal"},"authorizationRoles":["member"],"path":"/discussionboard/interactions/tagProposals","method":"post"},{"specification":"Update an existing tag proposal entity. This endpoint allows a proposing member to modify the details of their tag proposal, or for a moderator/admin to edit before review. It operates on the discussionboard_tag_proposals table and updates the atomic proposal fields if valid. Requires the proposal's id in the path, and a request body with the fields to update. Related operations: POST for create, DELETE for remove, GET for read. Only the original member or privileged users may edit.","description":"This API endpoint updates a tag proposal in discussionboard_tag_proposals, allowing the proposing member, or in some cases moderators/admins, to alter the proposed_tag string or other modifiable fields before review. Validation ensures the proposal exists, belongs to the requesting user (unless moderator/admin), and meets content guidelines (no profanity, uniqueness per member, length restriction). The operation is fully audit-logged and errors returned if access or update rules are not satisfied. Related endpoints are POST (create), DELETE (delete by id).","summary":"Update an existing tag proposal (discussionboard_tag_proposals).","parameters":[{"name":"id","description":"Target tag proposal's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated tag proposal information.","typeName":"IDiscussionboardTagProposal.IUpdate"},"responseBody":{"description":"Tag proposal entity after update.","typeName":"IDiscussionboardTagProposal"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/interactions/tagProposals/{id}","method":"put"},{"specification":"Delete a tag proposal entity by its ID. Enables a proposing member to retract their proposal or allows moderators/admins to remove inappropriate/irrelevant tag proposals. The endpoint operates on the discussionboard_tag_proposals table and requires the ID in the path. After successful validation (ownership or elevated privileges), the proposal is deleted. Only active, existing proposals can be deleted. This is a hard delete operation, fully audit-logged.","description":"This endpoint deletes a tag proposal from discussionboard_tag_proposals, based on the provided proposal ID. Only the original proposing member or a moderator/admin can delete a proposal. The operation is subject to validation rules: the proposal must exist and belong to the current user, unless privileges are elevated. All deletions are audit-logged (deleted_by, timestamp). Errors are returned on missing, already-reviewed, or unauthorized actions. Related operations are POST (create), PUT (update), PATCH/GET for moderation processes.","summary":"Delete a tag proposal (discussionboard_tag_proposals).","parameters":[{"name":"id","description":"Target tag proposal's ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/interactions/tagProposals/{id}","method":"delete"},{"specification":"List and search reports for moderation review. This endpoint supports retrieving lists of discussionboard_reports entities for dashboard or moderation workflow. Implements searching, pagination, and filtering for status, created/resolved timestamps, and targets. Designed for use by moderators/admins, based on report type (post/comment), resolution status, and assignment. Can be sorted and searched using many parameters. Uses request body; response includes paginated collection.","description":"Retrieves a paginated and filtered list of moderation reports, referencing the discussionboard_reports table. Supports searching by report status (pending, reviewed, etc.), timestamps, reported member, resolved moderator, and target (post/comment). Used in moderator/admin dashboards to manage reporting workload and track abuse/triage flows. Validation ensures only privileged users access this data, and standard audit logging applies. Error responses for out-of-bounds queries, invalid filters, or permission violations are returned.","summary":"List moderation reports with searching (discussionboard_reports).","parameters":[],"requestBody":{"description":"Report listing query parameters (pagination, search, filters).","typeName":"IDiscussionboardReport.IRequest"},"responseBody":{"description":"Paginated list of moderation reports.","typeName":"IPageDiscussionboardReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/reports","method":"patch"},{"specification":"Retrieve a specific moderation report by ID. This endpoint gets all information on a single report (for post or comment) for use in moderation workflow, dashboard inspection, or appeal review. References the discussionboard_reports table. ID is passed in the path.","description":"Fetches details for a single moderation report from discussionboard_reports using the specified report ID (uuid). Used for moderator/admin review, follow-up audits or member appeal flows. Ensures only privileged roles can access complete report data. Errors provided for missing or unauthorized access. Related endpoints cover listing (PATCH), updating (PUT), or deletion (DELETE) of reports.","summary":"Get details of a moderation report (discussionboard_reports).","parameters":[{"name":"id","description":"Target report's ID (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All details of the requested moderation report (post or comment complaint).","typeName":"IDiscussionboardReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/reports/{id}","method":"get"},{"specification":"Create a new moderation report. This endpoint allows a member to report inappropriate, abusive, or rule-violating content (post or comment). Mapped to discussionboard_reports table. Requires request body with report details (target type/post or comment ID, reason). Response contains the new report. Only active, non-suspended members may create reports. Duplicate/abusive reporting is rate-limited and validated in API/business logic.","description":"This operation creates a new report in the moderation system (discussionboard_reports), allowing a user to flag a post or comment for review. The request body specifies the report target and reason. Only authenticated, eligible members may submit reports, and API logic prevents abuse by enforcing per-user rate limits and validation of reason fields. On success, the API returns the created report entity, which is then available in moderation dashboard listing. Failure returns validation or permission errors. Related endpoints include PATCH for list/search and GET for detail.","summary":"Create a new report for moderation (discussionboard_reports).","parameters":[],"requestBody":{"description":"Report creation input (target, reason, etc.).","typeName":"IDiscussionboardReport.ICreate"},"responseBody":{"description":"Report entity created for moderation.","typeName":"IDiscussionboardReport"},"authorizationRoles":["member"],"path":"/discussionboard/moderation/reports","method":"post"},{"specification":"Update an existing moderation report. Allows privileged users to update details of a previously submitted report, generally for workflow management (status, resolution handling, moderator assignment). Requires report ID in path and body with fields to update. Only moderators/admins have access. Triggers audit logging on any change.","description":"Updates an existing report in the moderation system (discussionboard_reports), using the provided report ID and update data. Typical usage is to change report status (e.g., mark as reviewed), assign a moderator resolver, and record resolution actions. Only moderators/admins can update reports. The system validates permissions, report existence, and acceptable transition logic. Full details of the updated report are returned. Related endpoints are PATCH for listing and GET for details.","summary":"Update a moderation report (discussionboard_reports).","parameters":[{"name":"id","description":"Target report's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Report update data (status, resolution fields).","typeName":"IDiscussionboardReport.IUpdate"},"responseBody":{"description":"Updated moderation report entity.","typeName":"IDiscussionboardReport"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/reports/{id}","method":"put"},{"specification":"Delete a report from the moderation system. This endpoint allows authorized users (moderators/admins) to remove an individual report. The operation removes the report by ID, after validation (report must exist and user must be privileged). Audit logs record the action, and the system ensures that deletions adhere to business/legal retention rules. Can be limited via business logic to certain statuses (e.g., only deletable if dismissed or obsolete).","description":"Deletes a moderation report entity from discussionboard_reports using the specified ID. Only permitted for privileged users. The system validates report existence and deletion eligibility (e.g., must not be currently assigned/active, must meet business/legal rules for retention). Errors are thrown for unauthorized or improper actions. Action is logged for audit/compliance. Related endpoints are PATCH for list/search, GET for details.","summary":"Delete a moderation report (discussionboard_reports).","parameters":[{"name":"id","description":"Target report's ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/reports/{id}","method":"delete"},{"specification":"List or search all moderation action logs. This endpoint provides paginated searching and filtering for moderation event logs (discussionboard_moderation_logs). Used by admins and moderators to audit, analyze, or investigate actions by moderators (edit, delete, warning, suspension). Supports searching by action, actor, target, and time period. Uses request body for flexible search params; response is paginated.","description":"Provides a searchable, paginated listing of all moderation actions recorded in discussionboard_moderation_logs. Filters on moderator, action_type, timestamps, and affected entities are supported. Only privileged roles (moderator/admin) can access. The endpoint supports investigation, transparency and compliance/audit use cases. Errors for permission denial, invalid search parameters, or paging limits are standard. Related endpoints: POST for logging new actions, GET for specific details.","summary":"List moderation action logs with searching (discussionboard_moderation_logs).","parameters":[],"requestBody":{"description":"Moderation log listing params (search, filters, paging).","typeName":"IDiscussionboardModerationLog.IRequest"},"responseBody":{"description":"Paginated moderation log items.","typeName":"IPageDiscussionboardModerationLog"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/moderationLogs","method":"patch"},{"specification":"Retrieve full details of a moderation log event by its ID. This endpoint fetches the complete data for a single moderation log used in compliance, appeal, or analysis. Path parameter is the moderation log ID. Only privileged users (moderators/admins) can use.","description":"Gets the complete details for a specific moderation action log entry from discussionboard_moderation_logs by ID. Used by admins and moderators to investigate events, support audits, or supply evidence in appeals. The endpoint requires the ID and returns full details, including action_type, involved member/post/comment, description, and timestamps. Errors are returned on missing/unauthorized access. Related endpoints: PATCH for search/list and POST for creation (typically via workflow automation, not direct API use).","summary":"Get details of a moderation action log (discussionboard_moderation_logs).","parameters":[{"name":"id","description":"Target moderation log's ID (UUID) to retrieve details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderation action log details.","typeName":"IDiscussionboardModerationLog"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/moderationLogs/{id}","method":"get"},{"specification":"Create a new moderation action log entry. This endpoint is used by the system or privileged users to record moderator/admin actions such as delete, edit, warning, or suspension events. It inserts a new row into discussionboard_moderation_logs, containing moderator/member IDs, target entity, action_type, and details. Usually triggered automatically as part of moderation, but may have direct API in admin tools.","description":"This endpoint creates a moderation action log entry in discussionboard_moderation_logs. The request body contains the details of the action event—moderator ID, action type, details, and target entity (post/comment/member). Typically, this is triggered automatically during other workflow actions, but manual log entry may be supported for special cases. Only moderators and admins can use this endpoint. The operation returns the full moderation log event for audit and compliance purposes; errors are returned on permission or input violations.","summary":"Create a new moderation action log (discussionboard_moderation_logs).","parameters":[],"requestBody":{"description":"Moderation action log creation data.","typeName":"IDiscussionboardModerationLog.ICreate"},"responseBody":{"description":"Moderation log entity created.","typeName":"IDiscussionboardModerationLog"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/moderationLogs","method":"post"},{"specification":"Update an existing moderation log entry. Permits correction or extension of moderation event details; usually only accessible to admins for compliance or workflow correction. Requires the moderation log ID in the path, with request body including updatable fields (e.g., action details, target, or related metadata). The discussionboard_moderation_logs table is updated on success. The action is always audit-logged and permission-checked. Only admins and system tools should have access.","description":"Updates an existing entry in discussionboard_moderation_logs with new or corrected information. Used mainly for compliance corrections, administrative workflow fixes, or redaction/context updates post-event. Path parameter is log ID; request body includes updatable action log fields. Only available to admins (and system integrations), with strict audit and error handling. Full updated entity is returned. Related: PATCH for list/search, GET for detail.","summary":"Update a moderation log entry (discussionboard_moderation_logs).","parameters":[{"name":"id","description":"Target moderation log entry's ID (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderation log update data (action details, targets, etc).","typeName":"IDiscussionboardModerationLog.IUpdate"},"responseBody":{"description":"Updated moderation log entity.","typeName":"IDiscussionboardModerationLog"},"authorizationRoles":["admin"],"path":"/discussionboard/moderation/moderationLogs/{id}","method":"put"},{"specification":"Delete a moderation log entry by its unique identifier from the discussionboard_moderation_logs Prisma table. Used when an admin or authorized moderator removes a specific audit log entry, typically as part of a compliance activity or data retention policy. The operation must be restricted and audited, ensuring only privileged roles can perform deletions. Soft-delete is possible (as per business rules), but actual row removal mandates admin privileges due to legal retention requirements. Log entries may contain references to deleted content, so this operation must check dependencies before allowing deletion. Deletion must be archived in a separate audit log for traceability.","description":"This API deletes a moderation log entry based on its unique log ID, referencing the discussionboard_moderation_logs table. Only admin users are permitted to perform this operation due to the sensitive nature of audit logs and potential legal retention requirements. The endpoint must verify that no critical dependencies exist before allowing deletion, as moderation logs may reference moderation actions associated with deleted or suspended users and content. The operation should optionally support soft-delete logic, setting a deletion marker rather than removing the record, in accordance with compliance and auditability business rules. Attempting to delete a non-existent or already-deleted log must result in an appropriate error response, and all deletion actions should themselves be recorded in a secondary audit trace for regulatory compliance.","summary":"Delete a single moderation log entry from discussionboard_moderation_logs by its ID.","parameters":[{"name":"id","description":"The unique identifier of the moderation log to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderation/moderationLogs/{id}","method":"delete"},{"specification":"Retrieve a paginated, filterable list of suspension records from the discussionboard_suspension_records Prisma table. Supports searching, filtering by member, moderator, status (active, revoked, expired), and date range. Intended for use by moderators and admins reviewing suspension history or enforcing policy. The operation returns audit-ready detail, observing privacy and compliance requirements. Pagination, sorting, and search parameters are recommended. Business logic must restrict access to authorized roles. Related member, issuer, and revocation information may be joined or referenced for dashboard visualization.","description":"This API endpoint allows retrieval of a paginated and searchable list of suspension records from the discussionboard_suspension_records table. Moderators and admins use this to review member suspensions, check enforcement activity, and analyze historical data for audit or policy purposes. Supported query parameters typically include member ID, moderator ID, status (active, revoked, expired), and time range. Response includes full audit trail information, with relationships to member and moderation details optionally expanded. Results should be paginated and sorted according to request parameters. Access is restricted to roles with at least moderation privileges. Error handling ensures that improper queries or insufficient access are reported with appropriate HTTP status codes.","summary":"Retrieve a paginated, filtered list of suspension records (discussionboard_suspension_records).","parameters":[],"requestBody":{"description":"Filter and pagination information for retrieving suspension records.","typeName":"IDiscussionboardSuspensionRecord.IRequest"},"responseBody":{"description":"Paginated list of suspension records with audit details.","typeName":"IPageIDiscussionboardSuspensionRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/suspensionRecords","method":"patch"},{"specification":"Retrieve a single suspension record by its unique ID from the discussionboard_suspension_records Prisma table. Used to display or audit the details of a specific suspension event for a member, including information about suspension period, issuing moderator, and revocation status. This operation is typically restricted to moderators and admins. Behavior follows access control policies to prevent unauthorized disclosure of disciplinary records. The record includes suspension metadata, timing, reason, and links to affected member and issuer. Not found or unauthorized access returns appropriate errors.","description":"This endpoint returns the full detail for a specific member suspension event, referenced by its unique identifier and stored in the discussionboard_suspension_records table. Use cases include reviewing the enforcement history for a member, checking compliance, and supporting audits or appeals. The returned object contains all audit fields including start/end timestamps, reason, whether the record has been revoked, and metadata about who issued the action. Permissions restrict access to moderation and admin roles. Errors include not found, unauthorized, or retrieval failure due to data corruption.","summary":"Get details of a specific suspension record (discussionboard_suspension_records) by ID.","parameters":[{"name":"id","description":"The unique suspension record ID to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single suspension record with audit fields and related actor/member information.","typeName":"IDiscussionboardSuspensionRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/suspensionRecords/{id}","method":"get"},{"specification":"Create a new suspension record in the discussionboard_suspension_records Prisma table. Used by moderators or admins to suspend a member for a policy or code of conduct violation. The request includes details such as suspended_member_id, issued_by_moderator_id, start_at, end_at, reason, etc. Business logic enforces issuer permissions, validates required fields, and checks for conflicting/overlapping suspensions. The operation must log the action and update member status accordingly. Auditability and compliance are required—record all relevant metadata for later review. The newly created record is returned in the response. Only users with proper authority (moderator, admin) may perform this operation.","description":"This API operation creates a new suspension record for a member, reflecting a suspension action due to rule violations or policy breaches. On valid request, a new row is added to the discussionboard_suspension_records table, with attributes linking to the suspended member, issuing moderator/admin, timeframes, and detailed reason. The system updates associated member status and ensures audit trail creation. Business rules enforce authority checks, reject duplicates or overlaps, and require justification for the suspension. On success, the created suspension record is returned; on validation or policy failure, an error is reported. Access is restricted to moderator and admin roles.","summary":"Create a new member suspension record (discussionboard_suspension_records).","parameters":[],"requestBody":{"description":"Suspension record creation details: member, issuer, timeframe, reason, etc.","typeName":"IDiscussionboardSuspensionRecord.ICreate"},"responseBody":{"description":"Created suspension record, fully populated for audit and reference.","typeName":"IDiscussionboardSuspensionRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/suspensionRecords","method":"post"},{"specification":"Update an existing suspension record in the discussionboard_suspension_records Prisma table. Used when modifying the duration, revocation status, or other attributes of a suspension—possibly in response to an appeal, extension, or clerical error. The ID must correspond to an existing record. Business rules require authority checks, justification logging, and validation of possible changes. All updates are auditable for compliance. Only privileged roles (moderator, admin) can perform this update, and attempts to modify immutable audit fields are rejected. The updated record is returned for confirmation and further audit use.","description":"This endpoint modifies an existing member suspension record, identified by its ID. Common scenarios include extending the suspension period, marking the record as revoked, or correcting administrative errors. The incoming request details the fields to update, with validation and business rule enforcement. Only permitted users (moderators, admins) may use this operation, and all updates must be audit-logged for transparency and compliance. The full, updated suspension record is returned to facilitate further review or workflow. Errors include not found, unauthorized, or invalid update attempts (e.g., changing immutable audit details).","summary":"Update a member suspension record (discussionboard_suspension_records) by ID.","parameters":[{"name":"id","description":"ID of the suspension record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the targeted suspension record.","typeName":"IDiscussionboardSuspensionRecord.IUpdate"},"responseBody":{"description":"Updated suspension record, with all current audit and policy fields.","typeName":"IDiscussionboardSuspensionRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/suspensionRecords/{id}","method":"put"},{"specification":"Delete a suspension record by its unique ID from the discussionboard_suspension_records Prisma table. Designed for rare admin-only actions—such as compliance with legal data erasure requests. The operation enforces strict authority and audit log creation. Deletes must be handled carefully due to implications for member status and policy enforcement history. All deletions are also recorded in a separate audit system. Attempting to delete an active or non-existent record returns an error. Only admins may perform this operation. Soft-delete is preferable for most business cases.","description":"This API removes a suspension record (usually as a soft-delete or in response to a compliance request). Only admins may execute this action, and all deletions are separately audit-logged for compliance and transparency. Deleting a suspension record affects member status and possibly historical audit analysis, so extra checks and restrictions apply. Attempting to delete an active (in-effect) or non-existent record must produce error feedback. Standard use case is legal or compliance-driven data removal—routine expiration is handled via updates. Any deletion is followed by an audit entry recording details of the action and rationale.","summary":"Delete a member suspension record (discussionboard_suspension_records) by ID.","parameters":[{"name":"id","description":"The unique ID of the suspension record to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderation/suspensionRecords/{id}","method":"delete"},{"specification":"Retrieve a filtered, paginated list of warning records from the discussionboard_warning_records Prisma table. Used for moderator dashboards and appeals workflows. Filtering includes warned member, issuing moderator, time range, and warning type. The operation must enforce strict access controls and return audit-compliant detail, with joined actor/member information if useful. Pagination and sorting are included in the request body. Only moderators and admins may access this information.","description":"This API outputs a paginated list of warning records, supporting moderator/admin review, audit, and workflow management. Each warning record includes the warned member, issuer, timestamp, reason, and relevant metadata. The endpoint accepts filtering options such as targeted member, moderator, and date range to narrow results for large datasets. Use cases include checking escalation paths, supporting appeals, and process compliance. Sensitive content is protected by access controls: only trusted user roles can access this data. Response formatting supports dashboard/table visualization, and errors are handled for missing, invalid, or unauthorized requests.","summary":"Get a paginated list of warning records (discussionboard_warning_records) with filters.","parameters":[],"requestBody":{"description":"Dashboard query, search, and pagination for warning records retrieval.","typeName":"IDiscussionboardWarningRecord.IRequest"},"responseBody":{"description":"Paginated warning record list, with audit and member/issuer info.","typeName":"IPageIDiscussionboardWarningRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/warningRecords","method":"patch"},{"specification":"Retrieve a single warning record by its unique ID from the discussionboard_warning_records Prisma table. Used to review or audit individual warnings issued to members, particularly in support of escalation/disciplinary workflows. Business rules enforce access restrictions—only moderators and admins may view warning details. Returned information includes warned member, issuing authority, reason, and timing. Attempting to retrieve a non-existent record or without proper access yields an error response. Each retrieval is logged or counted to support transparency and appeal analytics.","description":"This endpoint provides the full audit detail of a warning event against a member, referenced by its unique identifier and stored in the discussionboard_warning_records table. Common use cases are disciplinary workflow support and appeal investigations by trusted users (moderators/admins). The result object contains member, moderator issuer, message, time, and related policy data. Access is strictly limited. Errors are returned for not found, unauthorized request, or data retrieval issues. Optionally, careful access logging is recommended for privacy policy compliance.","summary":"Get a single warning record (discussionboard_warning_records) by ID.","parameters":[{"name":"id","description":"Identifier of the warning record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Warning record details for audit and workflow.","typeName":"IDiscussionboardWarningRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/warningRecords/{id}","method":"get"},{"specification":"Create a new warning record in the discussionboard_warning_records table. Moderators or admins can use this to record warnings issued to members for infractions or near-violations. Request data includes warned_member_id, issued_by_moderator_id, and warning reason/message. All writes are subject to authorization, must pass validation, and require justification. Created records are returned with their new ID and audit stamp. All actions are audit-logged; business rules enforce that member has not already been warned for the same incident. Only moderators and admins may invoke this operation.","description":"This API writes a new warning record for a member when a moderator or admin issues a warning for a behavioral or rule infraction. Information is written atomically to the discussionboard_warning_records table, referencing both member and issuer for compliance and audit trail requirements. Input validation includes unique checks where needed (e.g., not duplicate warning for same infraction), authority verification, and reason justification. Created warning objects are returned with audit metadata. Unsuccessful writes due to authority or validation issues result in errors. Subsequent disciplinary actions may reference these warnings as escalation steps. Access is limited to authorized roles, with all actions audit-tracked.","summary":"Create a new warning record (discussionboard_warning_records).","parameters":[],"requestBody":{"description":"Creation details for warning record: member, issuer, reason.","typeName":"IDiscussionboardWarningRecord.ICreate"},"responseBody":{"description":"Created warning record, including audit and reference fields.","typeName":"IDiscussionboardWarningRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/warningRecords","method":"post"},{"specification":"Update an existing warning record by its ID in the discussionboard_warning_records table. Used for correcting reason text, updating escalation actions, or marking resolution status. Mutability must be carefully constrained—no historical edits to key audit fields. Authority/validation enforced. Only moderators and admins may update warning records. Attempt to modify non-existent or immutable data returns error. All updates are fully audit-logged; the updated warning record is returned for reference.","description":"This operation modifies an existing warning record in discussionboard_warning_records identified by ID. Valid use cases include correcting text, appending context, or marking a warning as resolved in the case of policy change or member appeal. Only trusted (moderator/admin) users may update. Attempting to change immutable/audit fields, or modify records outside of authority scope, results in error. Updated warning object is returned for workflow and audit consumption. Updates may trigger notifications or downstream process modifications. Full audit of the attempted update is maintained for transparency and regulatory compliance.","summary":"Update a warning record (discussionboard_warning_records) by ID.","parameters":[{"name":"id","description":"The unique warning record ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info for the warning record, such as reason, escalation detail, or resolution flag.","typeName":"IDiscussionboardWarningRecord.IUpdate"},"responseBody":{"description":"Updated warning record object with audit data.","typeName":"IDiscussionboardWarningRecord"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/warningRecords/{id}","method":"put"},{"specification":"Delete a warning record by its unique ID in the discussionboard_warning_records Prisma table. Rare operation for admin (and possibly moderator) only, to remove warning records for compliance or error correction. The operation is tightly restricted to prevent unauthorized erasure of audit trail. Deletions are themselves recorded in audit logs. Attempts to delete non-existent or critical audit records (those in escalation chains) return error. Data retention policies apply. Only admins should be allowed to physically remove warning records; moderators may only request soft-deletion depending on policy.","description":"This API removes a warning record from the discussionboard_warning_records table, as a soft- or hard-delete depending on policy. Used for compliance, error reversal, or in rare workflows that require audit correction. Operation is permitted only to admins (or possibly senior moderators, as per business logic), and all removals are separately audit-logged. If the record is part of an escalation sequence or otherwise protected, deletion is blocked. Non-existent record deletions return error. Results in updated audit trail and possibly notification to compliance systems.","summary":"Delete a warning record (discussionboard_warning_records) by ID.","parameters":[{"name":"id","description":"Unique identifier for the warning record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"path":"/discussionboard/moderation/warningRecords/{id}","method":"delete"},{"specification":"Search and retrieve a paginated, filterable list of content flags from the discussionboard_content_flags Prisma table. Used for moderator review of flagged content, abuse reporting, and system alert dashboards. Endpoint allows searching/filtering by flag_type, flagged_by, moderator, post, comment, auto_flagged, and date range. Pagination and sorting supported for dashboard use. Returned objects include references to all relevant entities and audit timestamps. Access limited to moderators and admins per business/requirements documentation. Results must avoid exposing sensitive user details outside compliant roles. Errors for malformed queries or unauthorized requests are handled appropriately.","description":"This API fetches a paginated, filterable list of content flags (abuse/spam/etc.) for moderation team dashboards. The underlying data comes from discussionboard_content_flags and supports flexible filters: flag type, who set the flag, post or comment references, automations, and time windows. Returned data is suitable for queue management, prioritization, and audit of moderation workloads. Enforces proper access controls—only moderator or admin users can access flagged content detail. Response includes references to posts/comments and all audit fields relevant for workflow. Malformed or unauthorized requests generate well-formatted error messages for client-side feedback and system logs.","summary":"Get a paginated, filtered list of content flags (discussionboard_content_flags) for moderation.","parameters":[],"requestBody":{"description":"Filter/search and pagination info for content flags list retrieval.","typeName":"IDiscussionboardContentFlag.IRequest"},"responseBody":{"description":"Paginated content flag queue for moderation/audit workloads.","typeName":"IPageIDiscussionboardContentFlag"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/contentFlags","method":"patch"},{"specification":"Retrieve a specific content flag in the discussion board moderation module. This operation is tightly coupled to the `discussionboard_content_flags` table, which is responsible for storing all flags set on posts or comments by users, moderators, or automated systems. The schema includes references to flagged posts and comments, the actor who set the flag (member or moderator), the type of flag, and timestamps. The endpoint supports both manual and automated flags. Only moderators and admins should have permission to access this operation due to its sensitive nature and audit/compliance requirements.","description":"This API operation allows a moderator or admin to retrieve the details of a specific content flag entry from the `discussionboard_content_flags` table. The content flags indicate whether a post or comment has been flagged for issues like spam, abuse, or profanity either by a user, a moderator, or by automated filters. \n\nThe operation ensures all access is logged for compliance with the system's audit requirements. Permissions are enforced such that only moderators or admins can request details about content flags. Sensitive data access, such as the identity of the flag setter (member or moderator), is protected in compliance with privacy rules. \n\nValidation includes checking that the flag ID exists and that the requester has appropriate permissions. If the requested flag does not exist or the user lacks the required authorization, appropriate error responses are returned. Related operations include creating, updating, or deleting content flags and querying all flags with pagination.","summary":"Get a specific content flag in the `discussionboard_content_flags` table.","parameters":[{"name":"id","description":"Unique content flag ID (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns complete details for the content flag, including post/comment referenced, actor, type, and timestamps.","typeName":"IDiscussionboardContentFlag"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/contentFlags/{id}","method":"get"},{"specification":"Create a new content flag record for moderation purposes in the discussion board system. Associated with the `discussionboard_content_flags` table, this endpoint enables users, moderators, or automated systems to flag posts or comments for issues like spam, abuse, or guideline violations. Stores flag type, target, flagger details, and reason codes as atomic entries for audit/compliance. Only authorized actors (members, moderators, system) can use this endpoint; access control is enforced.","description":"This API operation allows creation of a new content flag on a post or comment within the discussion board system, writing to the `discussionboard_content_flags` table. Content flags act as triggers for moderation, either through manual actions by users or moderators, or through automated detection systems for potential violations. All content flags are atomic records containing references to the flagged content (post or comment), the entity setting the flag (member, moderator, or automated system), as well as the type of flag such as 'spam', 'profanity', or 'abuse'.\n\nFor access control, regular members may only flag via limited interface; the API enforces role and rate limits as per business rules. Moderators and admins can set any flag type. All content flag creations are logged to the audit log, and every change must trigger notification workflows for transparency. Validation requires that either a post or comment ID (but not both) is present and that all inputs conform to allowed types and business rules. Error handling responds with validation details or forbidden access for unauthorized actors. Related endpoints handle retrieval, update, and deletion of content flags.","summary":"Create a new content flag in the `discussionboard_content_flags` table.","parameters":[],"requestBody":{"description":"Detailed information for creating the content flag, with references to post or comment, actor, reason, and metadata.","typeName":"IDiscussionboardContentFlag.ICreate"},"responseBody":{"description":"The newly created content flag record.","typeName":"IDiscussionboardContentFlag"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/moderation/contentFlags","method":"post"},{"specification":"Update an existing content flag record in the discussion board moderation system (`discussionboard_content_flags` table). Used for correcting or resolving flags, or updating reviewer info. Only accessible by moderators and admins with clear audit trail.","description":"This API operation makes it possible to update an existing content flag managed by the `discussionboard_content_flags` table. Operations could include resolving a flag, changing its type (if incorrectly classified), or updating which moderator handled the flag. The endpoint supports full audit logging to ensure traceability for all moderation actions, in accordance with compliance requirements.\n\nBusiness logic restricts updates to authorized moderators and admins. Updates require a valid flag ID and a body with allowed changes, aligned with business rules. Any invalid updates or unauthorized attempts result in detailed error responses. Related endpoints enable creation, retrieval, or deletion of content flags. Access is always logged for safeguarding system integrity.","summary":"Update a content flag in the `discussionboard_content_flags` table.","parameters":[{"name":"id","description":"Unique content flag ID (UUID) to identify which flag record is being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified content flag. Includes moderator or flag type updates, etc.","typeName":"IDiscussionboardContentFlag.IUpdate"},"responseBody":{"description":"The updated content flag record, after successful modification.","typeName":"IDiscussionboardContentFlag"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/contentFlags/{id}","method":"put"},{"specification":"Delete a specific content flag record (soft delete) from the `discussionboard_content_flags` table for moderation housekeeping and audit compliance. Only moderators or admins can access this operation. Implements audit logging.","description":"This API operation lets a moderator or admin mark a content flag as deleted from the `discussionboard_content_flags` table. Deletes are usually soft (record is marked rather than erased) to maintain a full history for audit and legal requirements. Only users with moderator or admin privileges may perform deletion.\n\nBefore deletion, validation ensures the content flag exists and that the user is properly authorized. All delete events are logged in the system audit log, preserving details about the action. If the flag does not exist, or permissions are lacking, appropriate structured errors are returned. Related endpoints include content flag creation, update, and retrieval. Deletions trigger notification events if applicable.","summary":"Delete a specific content flag from the `discussionboard_content_flags` table.","parameters":[{"name":"id","description":"Unique content flag ID (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion, including status and timestamp.","typeName":"IDiscussionboardContentFlag.IDeleteResponse"},"authorizationRoles":["moderator","admin"],"path":"/discussionboard/moderation/contentFlags/{id}","method":"delete"},{"specification":"Retrieve a paginated, optionally filtered, list of notifications for the authenticated user from the `discussionboard_notifications` table. Includes filtering by notification type, delivery status, and date range. Implements business and audit rules for notification center usability. Member authentication required.","description":"This API endpoint lets authenticated members fetch a list of their discussion board notifications, using the `discussionboard_notifications` table with support for search, filtering (e.g., by type, read/unread, date), and pagination. Notifications include replies, mentions, moderation actions, and announcements. \n\nBusiness rules enforce member-only access and restrict results to the calling user's notifications. Pagination and filtering parameters enable efficient notification center UI. Audit and delivery state (read, unread) are available in response data. Error handling includes validation for parameter ranges and unauthorized access. Related endpoints enable notification updates (mark as read), detail viewing, and creation by system events.","summary":"List authenticated user's notifications from `discussionboard_notifications` (paginated/filtered).","parameters":[],"requestBody":{"description":"Criteria for listing notifications, e.g., filters, sort order, pagination.","typeName":"IDiscussionboardNotification.IRequest"},"responseBody":{"description":"Paginated list of notifications matching the criteria. Includes notification details and delivery/read state.","typeName":"IPageDiscussionboardNotification"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications","method":"patch"},{"specification":"Fetch a single notification record by ID for the authenticated user, using the `discussionboard_notifications` table. Member authentication and ownership validation enforced. Supports notification center detail view.","description":"This API operation retrieves the details of a specific notification for the authenticated member. The target is a single row in the `discussionboard_notifications` table. Ownership and authentication are enforced: only the receiving member (or authorized admin) may view a notification's full detail. \n\nBusiness logic ensures that only the notification recipient or a system administrator may access this resource. The endpoint is used in notification center flows for members. If the notification does not exist or the user is not authorized to access it, an appropriate error is returned. Related endpoints in this domain handle notification listing, marking as read, creating system notifications, and user notification settings.","summary":"Get a single notification from `discussionboard_notifications` by ID.","parameters":[{"name":"id","description":"ID of the notification record to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification details for the specified ID, including title, body, type, and delivery info.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications/{id}","method":"get"},{"specification":"Create a new notification event for a member by writing a row to the `discussionboard_notifications` table. Used systemically after forum actions (reply, mention, moderation event, announcement). Member authentication required for self-created notifications; admin access required for system or moderator actions.","description":"With this API operation, a new notification record is created in the `discussionboard_notifications` table, targeting an individual member for a forum event (reply to post, mention, moderation, board announcement, etc). The endpoint supports all application-originated and system-originated notifications. The member may also use it to create notifications related to their own actions (such as subscribing/unsubscribing to threads).\n\nAccess is authenticated: regular members can only create notifications for themselves, while moderators and admins may generate system/announcement notifications. Input validation ensures all required fields (member, type, title, body, etc.) are present and business rules for notification delivery are respected. Operations are logged for audit and analytics use. Related endpoints manage notification listing, detail retrieval, and notification settings.","summary":"Create a new notification in `discussionboard_notifications`.","parameters":[],"requestBody":{"description":"Details for the notification event: recipient member, type, content, and link.","typeName":"IDiscussionboardNotification.ICreate"},"responseBody":{"description":"The new notification record created.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications","method":"post"},{"specification":"Update an existing notification record in the `discussionboard_notifications` table, e.g., to mark as read. Only allowed by the record's owner or admins. Audit logged.","description":"This API endpoint updates information about an existing notification in the member's `discussionboard_notifications` list. Typical usage includes marking a notification as read, e.g., updating the `read_at` property. Only the notification owner (the recipient member) or an admin may modify the notification record. All activity is audit logged.\n\nStrict validation ensures only allowed fields can be changed (e.g., no tampering with recipient). Attempts to access or update another member's notification, or update with invalid data, results in errors. Related endpoints support notification listing, creation, and per-member notification settings.","summary":"Update an existing notification in `discussionboard_notifications`.","parameters":[{"name":"id","description":"ID of the notification to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified notification (e.g., mark as read).","typeName":"IDiscussionboardNotification.IUpdate"},"responseBody":{"description":"The updated notification record.","typeName":"IDiscussionboardNotification"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications/{id}","method":"put"},{"specification":"Delete a notification record from `discussionboard_notifications` (soft-delete, for member clean-up or privacy compliance). Only notification recipient or privileged actor may access.","description":"This API operation deletes (soft-deletes) an individual notification for the authenticated member (recipient), e.g., to clean up their notification center or comply with privacy requests. Deletion is only allowed for the notification's owner, a moderator (where business-justified), or admin. The operation preserves audit history and triggers any appropriate notification read status or reporting logic.\n\nValidation is enforced so that only notification recipients, moderators (where allowed for moderation notices), and admins can delete notifications. Attempts to delete others' notifications are blocked. All deletions are audit logged. Related endpoints control notification center display, listing, and notification settings.","summary":"Delete a notification from `discussionboard_notifications`.","parameters":[{"name":"id","description":"ID of the notification to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion and the affected record.","typeName":"IDiscussionboardNotification.IDeleteResponse"},"authorizationRoles":["member","moderator","admin"],"path":"/discussionboard/notifications/notifications/{id}","method":"delete"},{"specification":"Retrieve a member's notification settings from `discussionboard_member_notification_settings`. Includes notification type, channel (in-app/email), and preference toggles. Only the member themselves or admins can access.","description":"This API operation fetches the current notification settings for the authenticated member, as stored in the `discussionboard_member_notification_settings` table. Members can view their preferred notification types/channels (in-app, email) and per-category toggles (replies, mentions, moderation, announcements). Access control is enforced so only the member or an admin can view the settings for privacy and compliance. Results are audit logged, and the operation underpins notification preference UIs and compliance flows.\n\nInvalid requests or unauthorized access results in appropriate errors. Related endpoints allow updating notification settings and fetching notification lists or details.","summary":"Get a member's notification settings from `discussionboard_member_notification_settings`.","parameters":[{"name":"id","description":"ID of the notification settings record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Current notification delivery and type preferences for the member.","typeName":"IDiscussionboardMemberNotificationSettings"},"authorizationRoles":["member","admin"],"path":"/discussionboard/notifications/memberNotificationSettings/{id}","method":"get"},{"specification":"Create a new notification settings record for a member in `discussionboard_member_notification_settings`. Used when a user first sets up notification preferences. Only self or admin can create.","description":"This API endpoint is used to create the initial notification settings record for a member in the `discussionboard_member_notification_settings` table. Members typically use it upon onboarding or when first setting their notification preferences. Admins may also set preferences for managed accounts. \n\nThe request must provide the member ID, initial toggle values for different notification types, and delivery channel choices. All business and validation rules are applied: only allowed notification types/settings can be enabled, and only self or admin actors may create records. Redundant creation (multiple records) is prevented via business constraints. Related endpoints exist for settings retrieval and updates.","summary":"Create a member's notification settings in `discussionboard_member_notification_settings`.","parameters":[],"requestBody":{"description":"Initial notification preference data to be stored for the member.","typeName":"IDiscussionboardMemberNotificationSettings.ICreate"},"responseBody":{"description":"The created notification settings record.","typeName":"IDiscussionboardMemberNotificationSettings"},"authorizationRoles":["member","admin"],"path":"/discussionboard/notifications/memberNotificationSettings","method":"post"},{"specification":"Fetch a paged or filtered list of notification settings (e.g., for admin tooling or analytics) from `discussionboard_member_notification_settings`. Admins use for system monitoring/reporting. Supports filtering by member or status.","description":"This API operation returns a paginated and/or filtered set of notification settings records from the `discussionboard_member_notification_settings` table. This is typically used for admin tooling, analytics, or system management; regular members may not access this endpoint. \n\nQuery parameters might include filters for member ID, enabled status of different notification types, date ranges, and paging constraints. Audit logging is enforced. Errors returned for unauthorized access or invalid filter/paging requests. Related endpoints support per-member preference detail, creation, and update.","summary":"List notification settings from `discussionboard_member_notification_settings` (admin/analytics).","parameters":[],"requestBody":{"description":"Search/filter and pagination info for listing notification settings (admin use).","typeName":"IDiscussionboardMemberNotificationSettings.IRequest"},"responseBody":{"description":"A paginated list of notification settings matching filters.","typeName":"IPageDiscussionboardMemberNotificationSettings"},"authorizationRoles":["admin"],"path":"/discussionboard/notifications/memberNotificationSettings","method":"patch"},{"specification":"Updates an existing notification setting record for a specific member. This operation targets the discussionboard_member_notification_settings table and enables modifications to the member's notification delivery preferences, including in-app and email channels, for the discussion board platform. The endpoint is used when a member changes their notification preferences through UI settings. Admins may also use this endpoint for compliance or support operations.","description":"This API updates the member's notification settings as stored in the discussionboard_member_notification_settings table. It allows members to modify their preferences for in-app notifications, email alerts, reply notifications, mention notifications, moderation updates, and board-wide announcements. The request body must supply the updated preference fields as defined in the schema. The operation enforces user authentication (member or admin) and validates that the record exists for the specified member ID. System logs actions for audit and compliance, and incorrect record access (e.g., editing someone else's settings without proper privilege) results in a 403 or 404 error. This endpoint adheres to business rules and fully complies with GDPR by respecting opt-in/opt-out requirements. Related endpoints include POST (creation), GET (retrieve single setting), and DELETE (removal/reset of preferences).","summary":"Update notification settings for a specific member (discussionboard_member_notification_settings table).","parameters":[{"name":"id","description":"Target notification settings record's ID (memberNotificationSettingsId). Used to identify which member's notification preferences are being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated notification settings information for the member.","typeName":"discussionboardMemberNotificationSettings.IUpdate"},"responseBody":{"description":"The updated member notification settings record.","typeName":"discussionboardMemberNotificationSettings"},"authorizationRoles":["member","admin"],"path":"/discussionboard/notifications/memberNotificationSettings/{id}","method":"put"},{"specification":"Deletes an existing notification settings record for a specific member. This operation removes the record from the discussionboard_member_notification_settings table, effectively resetting the member's notification delivery preferences to system defaults or removing all custom preferences. This is typically done when a user deactivates their account or chooses to reset notification settings via the UI. Only members or admins may perform this operation, as determined by access controls.","description":"This API operation deletes the notification settings record for a given member, as stored in the discussionboard_member_notification_settings table. It validates that the record exists and belongs to the currently authenticated user (unless performed by an administrator). Upon successful deletion, the system reverts the member's notification preferences to default behaviors or removes customizations entirely. All deletion events are logged in the system audit trail for compliance. Attempts to delete non-owned or non-existent records trigger a 403 or 404 error, per business logic. This endpoint upholds security, ensures data retention requirements are met, and supports self-service account management. Related endpoints include POST (creation), PUT (update), and GET (retrieve single setting).","summary":"Delete notification settings for a specific member (discussionboard_member_notification_settings table).","parameters":[{"name":"id","description":"Target notification settings record's ID (memberNotificationSettingsId). Identifies which member's notification preferences are to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Result of the deletion operation (success or error details).","typeName":"discussionboardMemberNotificationSettings.IDeleteResult"},"authorizationRoles":["member","admin"],"path":"/discussionboard/notifications/memberNotificationSettings/{id}","method":"delete"}],"components":{"schemas":{"IDiscussionboardChannel.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"A text search filter, applied to channel name and description for flexible discovery. This property allows a user or admin to find channels by partial keyword, supporting navigation and administrative review. Business rule: must be optional."},"enabled":{"oneOf":[{"type":"boolean","description":"A filter for the enabled status of the channel. Setting 'true' restricts results to currently active channels; 'false' shows disabled channels. Null or omission disables filtering by enabled state."},{"type":"null","description":"A filter for the enabled status of the channel. Setting 'true' restricts results to currently active channels; 'false' shows disabled channels. Null or omission disables filtering by enabled state."}],"description":"A filter for the enabled status of the channel. Setting 'true' restricts results to currently active channels; 'false' shows disabled channels. Null or omission disables filtering by enabled state."},"page":{"oneOf":[{"type":"integer","format":"int32","description":"The page number for paginated channel results. Starts at 1 if present; null disables paging. Combined with 'limit' for paginated navigation."},{"type":"null","format":"int32","description":"The page number for paginated channel results. Starts at 1 if present; null disables paging. Combined with 'limit' for paginated navigation."}],"description":"The page number for paginated channel results. Starts at 1 if present; null disables paging. Combined with 'limit' for paginated navigation."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Maximum number of records per page. Typical business default is 100. Null disables limit-based pagination."},{"type":"null","format":"int32","description":"Maximum number of records per page. Typical business default is 100. Null disables limit-based pagination."}],"description":"Maximum number of records per page. Typical business default is 100. Null disables limit-based pagination."},"sort":{"type":"string","description":"Sorting criteria, comma-separated. Format: 'property,[asc|desc]'. For example: 'created_at,desc'. Optional, for advanced channel ordering in admin UIs."}},"description":"Channel list/search request: This object supports the retrieval of discussion board channel entities with flexible filtering, paging, and sorting. Relates directly to the platform's need for scalable channel management as described in the requirements document and Prisma schema. Each property provides entry points for searching, discovery, and system administration. All parameters are optional to maximize UI flexibility and support diverse listing scenarios.","required":[]},"IPageIDiscussionboardChannel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardChannel"},"description":"Array of discussion board channels for this page. Each element represents a channel entity, aligned with the Prisma schema and supporting business/accountability needs."}},"required":["pagination","data"],"description":"Paginated list container for discussion board channels. Contains both the array of channel entities and the pagination metadata used for navigation, reporting, and UI. Inherits general IPage format for consistency across APIs. Ensures discoverability and scalable user experiences."},"IDiscussionboardChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID (UUID) for the channel entity. Primary key in Prisma; supports audit, navigation, and business constraint enforcement."},"code":{"type":"string","description":"Unique channel code (e.g., 'POLI', 'ECON'). Atomic, mandatory, and indexed for fast lookup. Used for routing, analytics, and system configuration. Tied to business logic for channel identification."},"name":{"type":"string","description":"Channel display name. Human-readable string; presented to users for all UIs and navigation. Distinct from code to enable localization and branding flexibility."},"description":{"oneOf":[{"type":"string","description":"Extended UI and onboarding description text. Optional. Used in popups, new user flows, or information panels for business context."},{"type":"null","description":"Extended UI and onboarding description text. Optional. Used in popups, new user flows, or information panels for business context."}],"description":"Extended UI and onboarding description text. Optional. Used in popups, new user flows, or information panels for business context."},"enabled":{"type":"boolean","description":"Indicates if the channel is currently active/visible. True for active, false for hidden (soft-disabled by admins). Support for business rule: channels may be hidden without losing data."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of channel creation (ISO 8601). For platform auditability, workflow automation, and business reporting. Never null."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) for latest metadata update. Used for audit, cache invalidation, and UI freshness. Required by 3NF business rules."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp. Null means not deleted; a date indicates the channel is archived/hidden, but not destroyed. Used for compliance and audits."},{"type":"null","format":"date-time","description":"Soft-delete timestamp. Null means not deleted; a date indicates the channel is archived/hidden, but not destroyed. Used for compliance and audits."}],"description":"Soft-delete timestamp. Null means not deleted; a date indicates the channel is archived/hidden, but not destroyed. Used for compliance and audits."}},"required":["id","code","name","enabled","created_at","updated_at"],"description":"Discussion board channel entity - aligns with Prisma table 'discussionboard_channels'. Represents top-level forum structure and business unit for navigation, permission scoping, and audit. Each property is atomic as per 3NF, and tightly maps to business requirements/constraints. Channels group categories/boards and are critical for platform segmentation, regulatory compliance, and UI clarity."},"IDiscussionboardChannel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique channel code (e.g., 'POLI', 'ECON'). Enforced as unique at database level. Required for new entity creation and must meet format/business rules for atomicity."},"name":{"type":"string","description":"Display name for the new channel. Human-readable/name as shown in UI."},"description":{"oneOf":[{"type":"string","description":"Optional extended description or onboarding/help message for the channel. May be omitted or null for simplicity."},{"type":"null","description":"Optional extended description or onboarding/help message for the channel. May be omitted or null for simplicity."}],"description":"Optional extended description or onboarding/help message for the channel. May be omitted or null for simplicity."},"enabled":{"type":"boolean","description":"Initial active state. If true, the channel is immediately enabled. If false, channel is created hidden (admin or staging workflows)."}},"required":["code","name","enabled"],"description":"Channel creation request body. Fields are required per business logic, reflecting mandatory fields in the DB schema and API contract. Optional description allows for onboarding/UI flexibility. Used by admin interfaces for platform structure expansion."},"IDiscussionboardChannel.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string","description":"New display name, if being changed. Optional; omit or null to keep previous value."},{"type":"null","description":"New display name, if being changed. Optional; omit or null to keep previous value."}],"description":"New display name, if being changed. Optional; omit or null to keep previous value."},"description":{"oneOf":[{"type":"string","description":"Updated long-form description for onboarding, context, or UI help. Nullable; omit or null to clear/keep."},{"type":"null","description":"Updated long-form description for onboarding, context, or UI help. Nullable; omit or null to clear/keep."}],"description":"Updated long-form description for onboarding, context, or UI help. Nullable; omit or null to clear/keep."},"enabled":{"oneOf":[{"type":"boolean","description":"If changing channel enabled status (active/hidden). Nullable; null means no change."},{"type":"null","description":"If changing channel enabled status (active/hidden). Nullable; null means no change."}],"description":"If changing channel enabled status (active/hidden). Nullable; null means no change."}},"description":"Channel update request. Fields are all optional: only set those to be modified. Used for flexible patch/put API operations, supporting business requirements for editable but non-destructive admin updates. Aligns with Prisma update patterns and requirements document (platform admin scenarios).","required":[]},"IDiscussionboardChannel.IRemoveResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the channel that was soft-deleted. Provided for audit/UI tracking."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp when soft-delete was set (ISO 8601). Used for compliance, admin confirmation, and auditing."}},"required":["id","deleted_at"],"description":"Result payload for channel delete (soft-delete) operation. Details which channel was archived and when, for admin UI and audit purposes. Guarantees traceability in business logic for retention/legal workflow."},"IDiscussionboardCategory.IRequest":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"UUID of parent channel. Optional; if set, filters categories to those under this channel. Supports admin workflows and targeted navigation, mapped directly to business rule for hierarchical grouping."},"search":{"type":"string","description":"Case-insensitive search filter for category name, code, or description. Optional string to enable flexible admin/member UI queries and streamlined discovery."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of parent category for subcategory listing/management. Supports hierarchical administration and UI, per requirements for category nesting."},{"type":"null","format":"uuid","description":"UUID of parent category for subcategory listing/management. Supports hierarchical administration and UI, per requirements for category nesting."}],"description":"UUID of parent category for subcategory listing/management. Supports hierarchical administration and UI, per requirements for category nesting."},"enabled":{"oneOf":[{"type":"boolean","description":"If true, limits to enabled categories; false shows disabled. Null disables status filtering, as per flexible admin UI and business policy requirements."},{"type":"null","description":"If true, limits to enabled categories; false shows disabled. Null disables status filtering, as per flexible admin UI and business policy requirements."}],"description":"If true, limits to enabled categories; false shows disabled. Null disables status filtering, as per flexible admin UI and business policy requirements."},"page":{"oneOf":[{"type":"integer","format":"int32","description":"Pagination: page number. Null disables."},{"type":"null","format":"int32","description":"Pagination: page number. Null disables."}],"description":"Pagination: page number. Null disables."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Results per page; null means default (often 100 or system set)."},{"type":"null","format":"int32","description":"Results per page; null means default (often 100 or system set)."}],"description":"Results per page; null means default (often 100 or system set)."},"sort":{"type":"string","description":"Sorting/cursor option. E.g., 'created_at,desc' for admin dashboards. Fully optional."}},"description":"Category search and listing request. This format enables hierarchical filtering for categories (for admin and user navigation), tying into multi-channel, multi-category structure defined in business requirements analysis and ERD.","required":[]},"IPageIDiscussionboardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCategory"},"description":"Category entity array: All returned objects are atomic, per normalized business requirements. Fulfills flexible UI/admin reporting/analytics workflows."}},"required":["pagination","data"],"description":"Paginated category result set. Used by admin consoles, user interfaces, and analytics in the DiscussionBoard context. Inherits standard IPage structure for listing; central to scalable frontend/data-grid experiences."},"IDiscussionboardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique category UUID, primary key for reference/audit. Enables navigation, permission enforcement, and normalized business workflows."},"discussionboard_channel_id":{"type":"string","format":"uuid","description":"Parent channel UUID, enforcing hierarchical structure (channel > category). Supports multi-board navigation and permission logic."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional parent category UUID. Null if top-level category; present when nested for subcategories."},{"type":"null","format":"uuid","description":"Optional parent category UUID. Null if top-level category; present when nested for subcategories."}],"description":"Optional parent category UUID. Null if top-level category; present when nested for subcategories."},"code":{"type":"string","description":"Unique category code (within channel). Used for routing, UI search, admin workflows, maintaining normalization."},"name":{"type":"string","description":"Display name for user/admin UI. Required, atomic, and unique per business logic."},"description":{"oneOf":[{"type":"string","description":"Optional, extended description. Used for onboarding, UI hints, and analytics. Nullable for flexibility."},{"type":"null","description":"Optional, extended description. Used for onboarding, UI hints, and analytics. Nullable for flexibility."}],"description":"Optional, extended description. Used for onboarding, UI hints, and analytics. Nullable for flexibility."},"enabled":{"type":"boolean","description":"True if active; false if hidden/disabled. Supports admin workflows and audit needs."},"created_at":{"type":"string","format":"date-time","description":"Category creation timestamp (ISO 8601). Required for audit/log/business policy."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp (ISO 8601) for tracking/listing/sync."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp (null if not deleted). For compliance, audit, and business retention rules."},{"type":"null","format":"date-time","description":"Soft-delete timestamp (null if not deleted). For compliance, audit, and business retention rules."}],"description":"Soft-delete timestamp (null if not deleted). For compliance, audit, and business retention rules."}},"required":["id","discussionboard_channel_id","code","name","enabled","created_at","updated_at"],"description":"Discussion board category entity. Directly reflects the multi-level, hierarchical forum structure specified in both DB schema and requirements document. Categories support flexible organization of boards/topics and represent both business/UX/UI navigation and permission grouping units. Each property has specific normalization, traceability, and retention implications."},"IDiscussionboardCategory.ICreate":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"UUID of parent channel—required to group category under channel for normalized structure/permissions."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional parent category UUID, enabling nested/subcategory creation as per business rule for hierarchical UI."},{"type":"null","format":"uuid","description":"Optional parent category UUID, enabling nested/subcategory creation as per business rule for hierarchical UI."}],"description":"Optional parent category UUID, enabling nested/subcategory creation as per business rule for hierarchical UI."},"code":{"type":"string","description":"Category code (unique per channel). Used for admin lookup/routing/search."},"name":{"type":"string","description":"Display name (atomic, required). Mirrors UI/analytics needs."},"description":{"oneOf":[{"type":"string","description":"Optional descriptive/onboarding metadata; supports flexible UI or info-context."},{"type":"null","description":"Optional descriptive/onboarding metadata; supports flexible UI or info-context."}],"description":"Optional descriptive/onboarding metadata; supports flexible UI or info-context."},"enabled":{"type":"boolean","description":"Initial enabled state. True: immediately visible. False: staging/hidden/admin use only."}},"required":["discussionboard_channel_id","code","name","enabled"],"description":"Category creation request: Used for admin/platform expansion of forum/category structure. Properties enforced by both DB schema and business rules. Optional parent_id/description supports nested/category-onboarding flexibility."},"IDiscussionboardCategory.IUpdate":{"type":"object","properties":{"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update parent category UUID (move/nest/un-nest subcategories), aligning with flexible navigation/business rules. Omit or set null to remove parent."},{"type":"null","format":"uuid","description":"Update parent category UUID (move/nest/un-nest subcategories), aligning with flexible navigation/business rules. Omit or set null to remove parent."}],"description":"Update parent category UUID (move/nest/un-nest subcategories), aligning with flexible navigation/business rules. Omit or set null to remove parent."},"name":{"oneOf":[{"type":"string","description":"Update category name. Optional: null means keep previous value."},{"type":"null","description":"Update category name. Optional: null means keep previous value."}],"description":"Update category name. Optional: null means keep previous value."},"description":{"oneOf":[{"type":"string","description":"Update extended description. Null or omit to keep/clear."},{"type":"null","description":"Update extended description. Null or omit to keep/clear."}],"description":"Update extended description. Null or omit to keep/clear."},"enabled":{"oneOf":[{"type":"boolean","description":"Set enabled/disabled state. Null to skip/no change."},{"type":"null","description":"Set enabled/disabled state. Null to skip/no change."}],"description":"Set enabled/disabled state. Null to skip/no change."}},"description":"Category update request: Admin-level operation supporting edit/patch processes for category metadata, structure, and visibility. All fields optional/null-accepting for maximum API flexibility (non-breaking admin workflows).","required":[]},"IDiscussionboardCategory.IRemoveResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the soft-deleted category. Used for confirming/admin-tracking archival actions."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp for when category was soft-deleted. Used for compliance/audit workflows."}},"required":["id","deleted_at"],"description":"Category delete (soft-delete) result object: Encapsulates status and metadata for admin/audit purposes. Ensures traceability and compliance per requirements document."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number (starting from 1).\n\nRequired for navigation and pagination logic."},"limit":{"type":"integer","format":"uint32","description":"Maximum entries per page (default 100 unless otherwise specified).\n\nUsed for controlling data window size and batching."},"records":{"type":"integer","format":"uint32","description":"Total number of records in the filtered set or table.\n\nSupports client-side page logic and meta info in UI."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages for this result (ceil(records/limit))."}},"required":["current","limit","records","pages"],"description":"Standard pagination metadata for API responses, as required for IPage<T> response containers throughout the system."},"IDiscussionboardSetting.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"검색어로, 설정 키, 값 또는 설명에 대해 텍스트 기반 검색을 수행하는 데 사용됩니다.\n\n프리즈마 discussionboard_settings 테이블의 속성(예: key, value, description)에 대해 부분 일치로 필터링할 수 있습니다."},"page":{"type":"integer","format":"int32","description":"페이지 번호(1부터 시작).\n\n페이지 기반 페이징 구현 시 요청된 페이지 번호를 지정합니다."},"limit":{"type":"integer","format":"int32","description":"한 페이지당 반환할 최대 레코드 수입니다.\n\n대용량 데이터셋에 대한 페이징 성능과 사용자 선택적 목록 길이 제어를 지원합니다. 기본값은 100입니다."},"createdAfter":{"type":"string","format":"date-time","description":"특정 시점 이후에 생성된 설정만 반환하는 필터입니다.\n\n감사 목적으로 사용되며 ISO 8601 날짜-시간 문자열이어야 합니다."},"createdBefore":{"type":"string","format":"date-time","description":"특정 시점 이전에 생성된 설정만 반환하는 필터입니다.\n\n감사 또는 이력 검토 목적이며, ISO 8601 날짜-시간 형식입니다."}},"required":[],"description":"시스템 설정 레코드의 목록 검색/페이징/필터링을 위한 요청 본문 타입입니다.\n\n이 타입은 discussionboard_settings 프리즈마 테이블의 레코드를 필터링, 검색, 페이징하거나 정렬할 때 사용됩니다. 각 속성은 요구 사항 정의서(04_DiscussionBoard_Requirements_and_Business_Rules.md) 및 시스템 구성 관리 비즈니스 로직을 반영합니다. 모든 필드는 선택적이며 적합한 복합 쿼리를 구성할 수 있습니다."},"IPageIDiscussionboardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보(현재 페이지, 제한값, 전체 레코드 수, 전체 페이지 수)를 담습니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSetting"},"description":"요청한 검색 조건 및 페이징/정렬에 일치하는 시스템 설정 레코드들의 배열입니다."}},"required":["pagination","data"],"description":"시스템 설정(discussionboard_settings)의 페이징 목록을 반환할 때 사용하는 표준 페이지 형식 타입입니다.\n\n각 설정 레코드의 속성(키, 값, 설명, 생성/수정 타임스탬프 등)과 페이지네이션 메타 정보를 포함합니다."},"IDiscussionboardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"설정의 고유식별자(PK).\n\ndiscussionboard_settings.id. UUID v4 문자열로, 시스템 내 전체적으로 고유 식별을 보장합니다."},"key":{"type":"string","description":"설정의 논리적 키입니다.\n\n시스템 요구사항(글로벌 설정 관리)에 따라 고유 문자열로 사용되며 예: 'maintenance_mode', 'email:smtp_host'.\n프리즈마 discussionboard_settings.key와 직접 매칭되며, 중복 불가(UNIQUE 제약)."},"value":{"type":"string","description":"설정 값입니다. 모든 실제 환경설정 데이터는 문자열로 저장되며, 불린형 값은 'true'/'false', 숫자는 문자열로 저장합니다.\n\ndiscussionboard_settings.value와 1:1 대응합니다."},"description":{"oneOf":[{"type":"string","description":"설정의 설명, 관리자 UI 등에서 참고 가능한 메타데이터 역할.\n\ndiscussionboard_settings.description. null 허용."},{"type":"null","description":"설정의 설명, 관리자 UI 등에서 참고 가능한 메타데이터 역할.\n\ndiscussionboard_settings.description. null 허용."}],"description":"설정의 설명, 관리자 UI 등에서 참고 가능한 메타데이터 역할.\n\ndiscussionboard_settings.description. null 허용."},"created_at":{"type":"string","format":"date-time","description":"설정 행이 최초 저장된 시점(감사/로그 목적).\n\ndiscussionboard_settings.created_at(Prisma, @Timestamptz). ISO 8601 날짜-시간."},"updated_at":{"type":"string","format":"date-time","description":"설정이 마지막으로 수정된 시점(감사 추적).\n\ndiscussionboard_settings.updated_at. ISO 8601 date-time."}},"required":["id","key","value","created_at","updated_at"],"description":"시스템 전체 설정 엔티티로 discussionboard_settings 프리즈마 테이블에 매핑됩니다.\n\n각 속성은 비즈니스 규칙(글로벌 설정 관리, 2년 이상 데이터 보존 및 관리자 감사 추적 등)에 따라 정의되어 있습니다. 키와 값은 모두 원자적으로 관리되고, 레코드 라이프사이클 내내 감사 추적이 필수입니다."},"IDiscussionboardSettings.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"생성할 시스템 설정의 고유 키.\n\ndiscussionboard_settings.key와 매핑되며, 중복 불가(UNIQUE 제약), 예: 'maintenance_mode', 'file_upload_limit' 등"},"value":{"type":"string","description":"설정의 실제 값.\n\n문자열 형태로 입력받아야 하며, 불린/숫자 등도 문자열로 저장됩니다."},"description":{"oneOf":[{"type":"string","description":"설정에 관한 부가 설명/주석.\n\n관리자 UI에서 참조 및 관리 목적이며, nullable입니다."},{"type":"null","description":"설정에 관한 부가 설명/주석.\n\n관리자 UI에서 참조 및 관리 목적이며, nullable입니다."}],"description":"설정에 관한 부가 설명/주석.\n\n관리자 UI에서 참조 및 관리 목적이며, nullable입니다."}},"required":["key","value"],"description":"새 시스템 설정(글로벌 환경설정 등)을 생성할 때 요청 본문에 사용하는 타입입니다.\n\ndiscussionboard_settings 프리즈마 테이블의 구조와 비즈니스 규칙(고유 키, 값, 선택적 설명)에 대응합니다."},"IDiscussionboardSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"생성된 시스템 설정 행의 고유 식별자(PK).\n\ndiscussionboard_settings.id와 직접 매핑, UUID입니다."},"key":{"type":"string","description":"설정의 논리 키. 중복 불가.\n\ndiscussionboard_settings.key, 비즈니스에서 관리되는 고유 키입니다."},"value":{"type":"string","description":"설정 실제 값, 문자열 저장.\n\ndiscussionboard_settings.value"},"description":{"oneOf":[{"type":"string","description":"설정 설명, 관리 목적 메타데이터.\n\ndiscussionboard_settings.description"},{"type":"null","description":"설정 설명, 관리 목적 메타데이터.\n\ndiscussionboard_settings.description"}],"description":"설정 설명, 관리 목적 메타데이터.\n\ndiscussionboard_settings.description"},"created_at":{"type":"string","format":"date-time","description":"설정 최초 저장 시각.\n\ndiscussionboard_settings.created_at, ISO 8601 포맷."},"updated_at":{"type":"string","format":"date-time","description":"설정 마지막 수정 시각, 감사 추적.\n\ndiscussionboard_settings.updated_at"}},"required":["id","key","value","created_at","updated_at"],"description":"시스템 설정 생성/조회 요청에 대한 반환 엔터티. discussionboard_settings 프리즈마 DB의 각 행을 완전히 설명합니다.\n\n모든 레코드는 고유 식별자, 설정 키, 값, 설명(선택), 생성/수정 타임스탬프를 포함합니다. 비즈니스 규칙 및 데이터 보존/감사 정책과 일치합니다."},"IDiscussionboardSettings.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"설정 값의 최신 값.\n\ndiscussionboard_settings.value 항목 갱신(전체 교체) 시 사용. 문자열로 저장됨."},"description":{"oneOf":[{"type":"string","description":"설정에 대한 관리자 설명/주석.\n\n설정 설명을 바꿀 때 입력. nullable."},{"type":"null","description":"설정에 대한 관리자 설명/주석.\n\n설정 설명을 바꿀 때 입력. nullable."}],"description":"설정에 대한 관리자 설명/주석.\n\n설정 설명을 바꿀 때 입력. nullable."}},"required":["value"],"description":"기존 시스템 설정 항목의 값을 변경할 때 PUT 요청 본문에 사용하는 타입입니다.\n\ndiscussionboard_settings 프리즈마 테이블의 update 오퍼레이션과 매칭하며 값(value)은 필수, 설명(description)은 선택 필드입니다."},"IDiscussionboardAuditLogs.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"전체 감사 로그의 action, actor_id, target_table, target_id, details 필드에 대해 텍스트(부분) 검색 필터로 사용합니다."},"actor_id":{"type":"string","format":"uuid","description":"특정 액터(행동 주체) ID로 감사 로그 필터링.\n\ndiscussionboard_audit_logs.actor_id와 매핑."},"action":{"type":"string","description":"로그된 액션 타입/이벤트명별(예: 'SETTING_UPDATE', 'ACCOUNT_SUSPEND')로만 필터링."},"target_table":{"type":"string","description":"감사로그의 대상 테이블 명으로만 필터링. 예: 'discussionboard_boards', 'discussionboard_threads' 등."},"createdAfter":{"type":"string","format":"date-time","description":"시작(이후) 날짜로 타임스탬프 필터. ISO 8601 포맷."},"createdBefore":{"type":"string","format":"date-time","description":"종료(이전) 날짜로 타임스탬프 필터. ISO 8601 포맷."},"page":{"type":"integer","format":"int32","description":"요청 페이지 번호."},"limit":{"type":"integer","format":"int32","description":"한 페이지당 반환할 레코드 수. 기본값 100."}},"required":[],"description":"감사 로그 목록(관리/감사 목적)의 검색, 필터, 페이징 요청용 타입입니다.\n\ndiscussionboard_audit_logs 프리즈마 테이블의 Action, Actor, Time, Target 필드와 긴밀히 연동되며, 관리/감사 도구 UI와 바로 연결되는 구조입니다."},"IPageDiscussionboardAuditLogs":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지 정보: 현재 페이지, 제한값, 전체 개수, 전체 페이지 수 포함."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAuditLogs"},"description":"조건에 부합하는 감사 로그 엔트리들의 배열."}},"required":["pagination","data"],"description":"감사 로그(discussionboard_audit_logs)의 페이지 단위 검색 결과 반환 타입입니다.\n\n전체 시스템 감사 목록 화면, 관리 UI 등에서 사용됩니다."},"IDiscussionboardAuditLogs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"감사 로그 고유 식별자(PK).\n\ndiscussionboard_audit_logs.id, 시스템 내 유일."},"action":{"type":"string","description":"감사 이벤트/행위의 구분 코드(예: 'SETTING_UPDATE', 'ACCOUNT_SUSPEND').\n\ndiscussionboard_audit_logs.action의 비즈니스 코드입니다."},"actor_id":{"type":"string","format":"uuid","description":"행위 주체의 고유 UUID(예: 관리자, 모더레이터, 일반 멤버 등).\n\ndiscussionboard_audit_logs.actor_id. FK 아님(액터 삭제 대응)."},"target_table":{"oneOf":[{"type":"string","description":"변경/감사 대상 테이블명. null 가능(예: 시스템 로그인 이벤트 등 대상 없음).\n\ndiscussionboard_audit_logs.target_table."},{"type":"null","description":"변경/감사 대상 테이블명. null 가능(예: 시스템 로그인 이벤트 등 대상 없음).\n\ndiscussionboard_audit_logs.target_table."}],"description":"변경/감사 대상 테이블명. null 가능(예: 시스템 로그인 이벤트 등 대상 없음).\n\ndiscussionboard_audit_logs.target_table."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"감사 이벤트의 대상 행/레코드의 UUID. null 허용.\n\ndiscussionboard_audit_logs.target_id."},{"type":"null","format":"uuid","description":"감사 이벤트의 대상 행/레코드의 UUID. null 허용.\n\ndiscussionboard_audit_logs.target_id."}],"description":"감사 이벤트의 대상 행/레코드의 UUID. null 허용.\n\ndiscussionboard_audit_logs.target_id."},"details":{"oneOf":[{"type":"string","description":"추가 세부 속성/메타 정보(JSON 문자열 또는 상세 텍스트). null 가능.\n\ndiscussionboard_audit_logs.details."},{"type":"null","description":"추가 세부 속성/메타 정보(JSON 문자열 또는 상세 텍스트). null 가능.\n\ndiscussionboard_audit_logs.details."}],"description":"추가 세부 속성/메타 정보(JSON 문자열 또는 상세 텍스트). null 가능.\n\ndiscussionboard_audit_logs.details."},"created_at":{"type":"string","format":"date-time","description":"감사 로그 생성 시각(한국/서울 기준).\n\ndiscussionboard_audit_logs.created_at, ISO8601 포맷."}},"required":["id","action","actor_id","created_at"],"description":"시스템 감사 로그 엔티티(행위 이력, 보안, 컴플라이언스, 시스템 변경 등).\n\ndiscussionboard_audit_logs DB 구조를 반영하며, 모든 이벤트별 action 및 actor_id를 중심으로, 생성 타임스탬프 및 추가 대상 테이블/ID/세부 정보를 포함합니다. 비즈니스 규칙/컴플라이언스 2년 이상 보관 등에 사용됩니다."},"IDiscussionboardAuditLogs.ICreate":{"type":"object","properties":{"action":{"type":"string","description":"기록할 감사 이벤트 액션 코드.\n\n예: 'SETTING_CREATE', 'ACCOUNT_BAN' 등. discussionboard_audit_logs.action."},"actor_id":{"type":"string","format":"uuid","description":"이 이벤트를 발생시킨 시스템 사용자(예: 관리자, 모더레이터 등)의 UUID.\n\ndiscussionboard_audit_logs.actor_id."},"target_table":{"oneOf":[{"type":"string","description":"감사 대상 테이블명, 없는 경우 null."},{"type":"null","description":"감사 대상 테이블명, 없는 경우 null."}],"description":"감사 대상 테이블명, 없는 경우 null."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"감사 대상 행의 UUID 또는 null."},{"type":"null","format":"uuid","description":"감사 대상 행의 UUID 또는 null."}],"description":"감사 대상 행의 UUID 또는 null."},"details":{"oneOf":[{"type":"string","description":"상세 설명/변경 전후 데이터 등. null 가능."},{"type":"null","description":"상세 설명/변경 전후 데이터 등. null 가능."}],"description":"상세 설명/변경 전후 데이터 등. null 가능."}},"required":["action","actor_id"],"description":"새 감사 로그 레코드를 삽입(Create)할 때 사용하는 요청 본문 타입입니다.\n\n모든 필드는 DB discussionboard_audit_logs 구조 및 시스템 감사 로직에 맞춰 정의되었습니다. 상세 대상 정보(테이블, ID, 상세 설명)는 선택적 입력입니다."},"IDiscussionboardAuditLogs.IUpdate":{"type":"object","properties":{"action":{"type":"string","description":"감사 로그의 변경 후 action 값."},"target_table":{"oneOf":[{"type":"string","description":"업데이트할 대상 테이블명."},{"type":"null","description":"업데이트할 대상 테이블명."}],"description":"업데이트할 대상 테이블명."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"업데이트할 대상 행의 UUID."},{"type":"null","format":"uuid","description":"업데이트할 대상 행의 UUID."}],"description":"업데이트할 대상 행의 UUID."},"details":{"oneOf":[{"type":"string","description":"업데이트할 상세 설명/메타 데이터."},{"type":"null","description":"업데이트할 상세 설명/메타 데이터."}],"description":"업데이트할 상세 설명/메타 데이터."}},"required":["action"],"description":"기존 감사 로그 엔티티(ID 기준)를 수정할 때 PUT 요청에 사용하는 타입입니다.\n\ndiscussionboard_audit_logs DB 레코드 중 action 필드는 필수, 나머지는 선택적 변경입니다."},"IDiscussionboardMembers.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"회원 ID, 상태, 가입일, 또는 기타 필드에 대한 부분 일치 텍스트 검색어입니다.\n\ndiscussionboard_members.* 필드(주로 id, status, joined_at)에 대해 동작합니다."},"status":{"type":"string","description":"회원 상태 값 필터(예: 'active', 'pending', 'suspended')\n\n기준값은 discussionboard_members.status에 부합해야 합니다."},"joinedAfter":{"type":"string","format":"date-time","description":"특정 날짜 이후에 가입한 멤버만 반환(ISO 8601).\n\n감사, 활동 분석에 활용."},"joinedBefore":{"type":"string","format":"date-time","description":"특정 날짜 이전에 가입한 멤버만 반환(ISO 8601).\n\n이력 관리나 통계 목적으로 사용."},"page":{"type":"integer","format":"int32","description":"페이지네이션 요청: 몇번째 페이지를 반환할지 지정, 1-base."},"limit":{"type":"integer","format":"int32","description":"페이지당 반환할 최다 멤버 수(기본 100)."}},"required":[],"description":"회원 리스트(멤버 검색/페이징/필터 UI 등) 요청 시 사용하는 쿼리 객체 타입입니다.\n\ndiscussionboard_members DB 테이블의 검색/조회/감사 비즈니스 로직 파라미터와 매핑됩니다.\n각 필드는 optional입니다."},"IPageDiscussionboardMembers":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMembers"}}},"required":["pagination","data"],"description":"Paginated list of board member records.\n\nThis type provides a page of members along with pagination metadata, such as current page and total count, used for directory, admin overview, and advanced filtering. Aligns with standard IPage<T> container types."},"IDiscussionboardMembers":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique member identifier. References the main user entity in the Discussion Board system (see discussionboard_members in Prisma schema).\n\nUsed as foreign key in profiles, authentications, posts, and moderation actions."},"joined_at":{"type":"string","format":"date-time","description":"Member join date/time in ISO 8601 format. Indicates when the registration was successfully completed.\n\nAligns with audit and history requirements of the system."},"status":{"type":"string","description":"Current account status, e.g., 'active', 'pending', or 'suspended'. Business rules govern which APIs/features are available per status.\n\nReflects member enablement and privilege flows."}},"required":["id","joined_at","status"],"description":"Discussion Board member (user) entity type.\n\nCaptures the minimal identity fields for a system user and provides primary linkage for posts, authentications, and profile. Reflects core account state as defined in the discussionboard_members table."},"IDiscussionboardMembers.ICreate":{"type":"object","properties":{"joined_at":{"type":"string","format":"date-time","description":"The registration join date/time (ISO 8601). Must be provided by the API at registration time.\n\nRequired to fulfill audit/logging functions."},"status":{"type":"string","description":"Initial member status, typically 'active' or 'pending'.\n\nAccess rights and onboarding flow may depend on this value."}},"required":["joined_at","status"],"description":"Request body schema for member registration.\n\nSpecifies the minimal properties needed when a new user is created in the system (see business rules for registration and onboarding)."},"IDiscussionboardMembers.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Member status field update. Allows for status transitions (e.g., 'suspended', 'active').\n\nTypical use cases include admin- or system-triggered state changes. This is optional to allow partial updates."}},"required":[],"description":"Member update payload.\n\nCurrently, only the status field is supported for direct update via this schema. Expansion possible in future versions."},"DiscussionBoardModerators.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Optional: Filter moderator role assignments by specific member ID.\n\nWhen provided, narrows search/query for moderators linked to a given member."},"promoted_from":{"type":"string","format":"date-time","description":"Optional: Filter only moderator assignments promoted after this timestamp (ISO8601).\n\nUsed for administrative search tools and audit analytics."},"promoted_to":{"type":"string","format":"date-time","description":"Optional: Only retrieve moderator assignments promoted before this timestamp (ISO8601).\n\nHelps support range searches in dashboards and history views."},"is_active":{"type":"boolean","description":"Optional: Filter for currently active moderator assignments (demoted_at is null)."}},"required":[],"description":"Moderator list/search request schema.\n\nAllows advanced filtering, paging, and search for moderator assignments via admin UI or API."},"DiscussionBoardModerators.IPage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardModerators"}}},"required":["pagination","data"],"description":"Paginated result of moderator role assignments, including relevant metadata for navigation, sorting, and display.\n\nUsed for admin role management UIs and dashboards."},"DiscussionBoardModerators":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique moderator assignment record ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's unique identifier (foreign key to members table)."},"promoted_at":{"type":"string","format":"date-time","description":"Datetime role assignment was granted."},"demoted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If present, date/time moderator was demoted (null if currently active)."},{"type":"null"}],"description":"If present, date/time moderator was demoted (null if currently active)."}},"required":["id","discussionboard_member_id","promoted_at"],"description":"Moderator role entity, includes reference to member, promotion/demotion state, and audit trail.\n\nMatches the structure of discussionboard_moderators table in the Actors domain."},"DiscussionBoardModerators.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's ID to promote to moderator. Must refer to an existing, eligible member account. Business rules prevent duplicate or concurrent roles per member."},"promoted_at":{"type":"string","format":"date-time","description":"Datetime when moderator role is assigned."}},"required":["discussionboard_member_id","promoted_at"],"description":"Request to create a moderator assignment by promoting a member.\n\nAdmin-initiated role elevation to moderator status."},"DiscussionBoardModerators.IUpdate":{"type":"object","properties":{"demoted_at":{"type":"string","format":"date-time","description":"If provided, marks this moderator role assignment as ended at the specified time. Supports soft demotion flows and privilege audits. Optional."}},"required":[],"description":"Moderator role assignment update.\n\nUsed for demotion or privilege state changes tracked via this role entity."},"DiscussionBoardAdmins.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Optional: Filter for admin role assignments belonging to a specific member. Used in broader role audits and assignment histories. Allows precise admin role lookup or targeted revocation workflows."},"elevated_from":{"type":"string","format":"date-time","description":"Optional: Restrict search to admins elevated after this date/time (ISO8601). Workflow for role review, escalation, and analytics."},"elevated_to":{"type":"string","format":"date-time","description":"Optional: Restrict detection to admins elevated before this date/time (ISO8601). Enables time-span-based analytics or review screens."}},"required":[],"description":"Admin assignment search/list request object.\n\nDesigned for advanced access, audit, or reporting flows in role management features."},"DiscussionBoardAdmins.IPage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardAdmins"}}},"required":["pagination","data"],"description":"Paginated array of admin assignment records with metadata for navigation and analytics.\n\nStandard admin list page wrapper."},"DiscussionBoardAdmins":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique record identifier for admin role assignment. Uniquely identifies an admin role for a member."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member account UUID linked to admin role. Foreign key to core actors table."},"elevated_at":{"type":"string","format":"date-time","description":"Datetime when admin privileges were granted. Used for audit, role traceability, and privilege management."}},"required":["id","discussionboard_member_id","elevated_at"],"description":"Admin role assignment entity schema. Refers to a member, elevation timestamp, and unique assignment ID.\n\nEnables management and audit of high-level role states."},"DiscussionBoardAdmins.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member to be promoted to admin. References a unique user in the Actors domain. Value must match an existing, active member's UUID. Required for establishing the admin relationship."},"elevated_at":{"type":"string","format":"date-time","description":"Timestamp for when admin privileges were granted to the member. This is a required, server-generated or client-provided ISO 8601 datetime indicating role elevation, supporting audit compliance as per business rules."}},"required":["discussionboard_member_id","elevated_at"],"description":"Object used to create a new admin assignment in the system. Based on discussionboard_admins Prisma table and relevant to role elevation operations. Aligns with business requirement for explicit privilege tracking and audit compliance."},"DiscussionBoardAdmins.IUpdate":{"type":"object","properties":{"elevated_at":{"type":"string","format":"date-time","description":"The new timestamp for admin privilege assignment, if being changed. Must be ISO 8601 datetime. Used for correcting elevated role records or forced role recertification by system administrator."}},"required":["elevated_at"],"description":"Object for updating the admin elevation record for a member in the admin system. Syncs with business audit and privilege recertification requirements for role management."},"DiscussionBoardMemberProfiles.IRequest":{"type":"object","properties":{"display_name":{"type":"string","description":"Display name string for filtering member profiles. Enables admin/moderator user search for a visible or preferred nickname. Optional, case-insensitive partial matches allowed."},"joined_after":{"type":"string","format":"date-time","description":"Find members who joined after this ISO 8601 datetime. Supports onboarding reports and retention queries."},"joined_before":{"type":"string","format":"date-time","description":"Find members who joined before this ISO 8601 datetime. Allows for time range user profile audits or stale account filtering."},"page":{"type":"integer","minimum":1,"description":"Pagination: the page number (1-based)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: maximum number of items to return per page."}},"required":[],"description":"Request object for searching, filtering, and paginating member profiles (user profile domain). Used in admin/moderator profile list views for audit or search."},"DiscussionBoardMemberProfiles.IPage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMemberProfile"},"description":"The array of member profile entities for the current page. Each is a profile object with all associated metadata."}},"required":["pagination","data"],"description":"Pagination container for member profile list queries. Extends standard IPage pattern with array of profile objects and page metadata."},"IDiscussionBoardMemberProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the member profile. This is the primary key of the discussionboard_member_profiles table. Required for linking to the member and for all profile operations."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who owns this profile. Foreign key into the members domain. Supports 1:1 relationships and profile authorization logic."},"display_name":{"oneOf":[{"type":"string","description":"Optional, user-specified display name. Can be null if not set or privacy opted out. Used for personalization, mentions, and visibility/search."},{"type":"null"}],"description":"Optional, user-specified display name. Can be null if not set or privacy opted out. Used for personalization, mentions, and visibility/search."},"bio":{"oneOf":[{"type":"string","description":"Optional biography string (user-authored). Can be null if empty or privacy-protected. Allows rich text/markdown for expression, displayed in profile UI."},{"type":"null"}],"description":"Optional biography string (user-authored). Can be null if empty or privacy-protected. Allows rich text/markdown for expression, displayed in profile UI."},"avatar_uri":{"oneOf":[{"type":"string","maxLength":80000,"description":"Optional URI to avatar image, photo, or profile picture. May be null if unused, for privacy, or if not set. Used for visual personalization in UI; must point to valid and secure resource."},{"type":"null"}],"description":"Optional URI to avatar image, photo, or profile picture. May be null if unused, for privacy, or if not set. Used for visual personalization in UI; must point to valid and secure resource."},"website":{"oneOf":[{"type":"string","maxLength":80000,"description":"User's personal or professional website URL. Optional, may be null for privacy. Supports https URIs, long enough for tracking/redirect URLs, and is displayed on profile if present."},{"type":"null"}],"description":"User's personal or professional website URL. Optional, may be null for privacy. Supports https URIs, long enough for tracking/redirect URLs, and is displayed on profile if present."},"location":{"oneOf":[{"type":"string","description":"Optional user-supplied location info. Null if not set, otherwise shows a city, region, or custom string (no strict format). Used for community statistics and profile enrichment."},{"type":"null"}],"description":"Optional user-supplied location info. Null if not set, otherwise shows a city, region, or custom string (no strict format). Used for community statistics and profile enrichment."}},"required":["id","discussionboard_member_id"],"description":"Represents a member profile in the system. Fully normalized object mapping to discussionboard_member_profiles, with all expressiveness and privacy fields documented. Required for displaying or modifying user profile information."},"IDiscussionBoardMemberProfile.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who is creating this profile. Ensures 1:1 relationship between member and profile. Required and must map to an active member."},"display_name":{"oneOf":[{"type":"string","description":"Optional display name for the user profile. Can be null for privacy. Shows up in profile and search UI if present."},{"type":"null"}],"description":"Optional display name for the user profile. Can be null for privacy. Shows up in profile and search UI if present."},"bio":{"oneOf":[{"type":"string","description":"Optional bio/description. May include markdown. Null for suppressed or omitted."},{"type":"null"}],"description":"Optional bio/description. May include markdown. Null for suppressed or omitted."},"avatar_uri":{"oneOf":[{"type":"string","maxLength":80000,"description":"Optional avatar image URI. Users may omit for privacy or style reasons. Must be a valid URI or null."},{"type":"null"}],"description":"Optional avatar image URI. Users may omit for privacy or style reasons. Must be a valid URI or null."},"website":{"oneOf":[{"type":"string","maxLength":80000,"description":"Optional website URI. Null if not set. Uses long string to support full web URLs."},{"type":"null"}],"description":"Optional website URI. Null if not set. Uses long string to support full web URLs."},"location":{"oneOf":[{"type":"string","description":"Optional location string. Set to null for privacy or unspecified."},{"type":"null"}],"description":"Optional location string. Set to null for privacy or unspecified."}},"required":["discussionboard_member_id"],"description":"Properties required to create a new user profile. Used in profile creation flows, mapped to the profiles DB. Allows for partial/empty values for privacy."},"IDiscussionBoardMemberProfile.IUpdate":{"type":"object","properties":{"display_name":{"oneOf":[{"type":"string","description":"Updated or new display name. Null means remove or redact."},{"type":"null"}],"description":"Updated or new display name. Null means remove or redact."},"bio":{"oneOf":[{"type":"string","description":"Updated biography string. Null to clear value; markdown supported."},{"type":"null"}],"description":"Updated biography string. Null to clear value; markdown supported."},"avatar_uri":{"oneOf":[{"type":"string","maxLength":80000,"description":"New or updated avatar URI; null to clear avatar."},{"type":"null"}],"description":"New or updated avatar URI; null to clear avatar."},"website":{"oneOf":[{"type":"string","maxLength":80000,"description":"New or updated website link; null to clear or suppress."},{"type":"null"}],"description":"New or updated website link; null to clear or suppress."},"location":{"oneOf":[{"type":"string","description":"New or updated location string; null to clear or hide location."},{"type":"null"}],"description":"New or updated location string; null to clear or hide location."}},"required":[],"description":"Update object for modifying member profile data. Fields are optional and may be set to null to clear; only provided values are changed. Used by member or admin/moderator interfaces."},"IDiscussionBoardMemberProfile.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of the deleted profile. Used to reference or confirm the removed record."},"status":{"type":"string","description":"Result of the deletion operation. Expected to be values such as 'deleted', 'not_found', 'error', following system operation conventions."}},"required":["id","status"],"description":"Result object returned after attempting to delete a member profile. Contains ID and status for client confirmation."},"IDiscussionBoardMemberAuthentication.IRequest":{"type":"object","properties":{"provider":{"type":"string","description":"Authentication provider, e.g., 'local', 'google', 'kakao'. Used for filtering credential entries. Optional, case-insensitive."},"last_login_after":{"type":"string","format":"date-time","description":"Optional ISO 8601 datetime restricting results to credentials used after a certain date/time."},"last_login_before":{"type":"string","format":"date-time","description":"Optional ISO 8601 datetime filtering records to those last used before a specific moment."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: maximum results per page."}},"required":[],"description":"Request object for searching or paginating member authentication records. Used mainly for admin troubleshooting or security audit screens."},"IPageDiscussionBoardMemberAuthentication":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMemberAuthentication"},"description":"Array of authentication records matching query/page. Each represents a unique member login credential."}},"required":["pagination","data"],"description":"Pagination container for authentication record list queries. Follows IPage contract; used in credential admin UIs."},"IDiscussionBoardMemberAuthentication":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Authentication record unique identifier. Primary key in the discussionboard_member_authentications table."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's UUID. Associates this credential with a specific member and allows linking to the user domain."},"provider":{"type":"string","description":"The authentication method/provider (e.g., 'local', 'google', 'kakao'). Enables login flows or debugging."},"provider_identifier":{"type":"string","description":"Provider-unique identifier (username/email for local, external ID for OAuth). Used for authentication and account linking."},"password_hash":{"oneOf":[{"type":"string","description":"Hashed credential (for local sign-ins). For OAuth/external, this will be null (never store password as cleartext). Security-critical. May be null if external login."},{"type":"null"}],"description":"Hashed credential (for local sign-ins). For OAuth/external, this will be null (never store password as cleartext). Security-critical. May be null if external login."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time","description":"Last successful login datetime (ISO 8601). Used for audit, SSO troubleshooting, and inactivity checks. Null if never used."},{"type":"null"}],"description":"Last successful login datetime (ISO 8601). Used for audit, SSO troubleshooting, and inactivity checks. Null if never used."}},"required":["id","discussionboard_member_id","provider","provider_identifier"],"description":"Represents a member's authentication method. Used for login credential listings, auditing, and credential management. Fully normalized per security/business requirement."},"IDiscussionBoardMemberAuthentication.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member for whom this credential will be created. Must correspond to an active user and allows linking multiple login types to a member account."},"provider":{"type":"string","description":"Name of authentication provider (e.g., 'local', 'google'). Enforces login method uniqueness within the system."},"provider_identifier":{"type":"string","description":"Provider-unique value; for local, the email/username; for SSO/OAuth, the provider-issued user ID or email."},"password_hash":{"oneOf":[{"type":"string","description":"Securely stored hash for password (when applicable). Null if not storing password/using external login."},{"type":"null"}],"description":"Securely stored hash for password (when applicable). Null if not storing password/using external login."}},"required":["discussionboard_member_id","provider","provider_identifier"],"description":"Properties required to create a new member authentication credential. Used in account onboarding and credential add/remove flows."},"IDiscussionBoardMemberAuthentication.IUpdate":{"type":"object","properties":{"provider":{"type":"string","description":"The authentication provider name (e.g., 'local', 'google', 'kakao').\n\nThis value maps the authentication method for the identity record and must match values accepted by the authentication pipeline. Directly references the 'provider' column in the discussionboard_member_authentications table."},"provider_identifier":{"type":"string","description":"A unique identifier per provider – may be a username, email (for local), or external user ID (for OAuth, SSO).\n\nDirectly references 'provider_identifier' column and is required for provider-identity disambiguation."},"password_hash":{"oneOf":[{"type":"string","description":"The hash of the user's credential (never cleartext password). Required for 'local' provider, must be null for OAuth logins.\n\nReferences 'password_hash' column. If updating to a new password, this must contain the result of the system password hashing function. May be omitted/null if not updating credential."},{"type":"null","description":"The hash of the user's credential (never cleartext password). Required for 'local' provider, must be null for OAuth logins.\n\nReferences 'password_hash' column. If updating to a new password, this must contain the result of the system password hashing function. May be omitted/null if not updating credential."}],"description":"The hash of the user's credential (never cleartext password). Required for 'local' provider, must be null for OAuth logins.\n\nReferences 'password_hash' column. If updating to a new password, this must contain the result of the system password hashing function. May be omitted/null if not updating credential."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time","description":"The timestamp of the last successful authentication event for this record (ISO 8601).\n\nDirectly references 'last_login_at' column for state update/audit. If updating to log a new auth event, set this to the latest successful login, else null or previous value."},{"type":"null","format":"date-time","description":"The timestamp of the last successful authentication event for this record (ISO 8601).\n\nDirectly references 'last_login_at' column for state update/audit. If updating to log a new auth event, set this to the latest successful login, else null or previous value."}],"description":"The timestamp of the last successful authentication event for this record (ISO 8601).\n\nDirectly references 'last_login_at' column for state update/audit. If updating to log a new auth event, set this to the latest successful login, else null or previous value."}},"required":["provider","provider_identifier"],"description":"Update structure for a member authentication method as stored in discussionboard_member_authentications table. Fields are mapped 1:1 to authentication table columns. Used during password change, provider migration, or login credential updates. Must conform to platform's normalization requirements. For detailed business rules, see DB schema and registration/authentication workflow section."},"IDiscussionBoardMemberAuthentication.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates if the deletion of the member authentication record was successful.\n\nBased on business rules, this may be true if the record was found and deleted, false otherwise."},"deleted_id":{"oneOf":[{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the deleted authentication record.\n\nReferences the 'id' of discussionboard_member_authentications. Set to null if no record was deleted."},{"type":"null","format":"uuid","description":"The unique identifier (UUID) of the deleted authentication record.\n\nReferences the 'id' of discussionboard_member_authentications. Set to null if no record was deleted."}],"description":"The unique identifier (UUID) of the deleted authentication record.\n\nReferences the 'id' of discussionboard_member_authentications. Set to null if no record was deleted."},"message":{"oneOf":[{"type":"string","description":"A descriptive message about the outcome of the delete operation.\n\nUse for audit, compliance or client feedback."},{"type":"null","description":"A descriptive message about the outcome of the delete operation.\n\nUse for audit, compliance or client feedback."}],"description":"A descriptive message about the outcome of the delete operation.\n\nUse for audit, compliance or client feedback."}},"required":["success"],"description":"Response object for deletion of a member authentication record. Includes success flag, deleted record ID, and audit message as per business and audit rules."},"IDiscussionBoardMemberSuspension.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by member's unique ID (UUID).\n\nReferences the 'discussionboard_member_id' column in discussionboard_member_suspensions. Only records matching this member will be included."},{"type":"null","format":"uuid","description":"Filter by member's unique ID (UUID).\n\nReferences the 'discussionboard_member_id' column in discussionboard_member_suspensions. Only records matching this member will be included."}],"description":"Filter by member's unique ID (UUID).\n\nReferences the 'discussionboard_member_id' column in discussionboard_member_suspensions. Only records matching this member will be included."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by the moderator's ID who issued the suspension (UUID).\n\nCorresponds to 'issued_by_moderator_id'. Used for admin dashboards/moderator management."},{"type":"null","format":"uuid","description":"Filter by the moderator's ID who issued the suspension (UUID).\n\nCorresponds to 'issued_by_moderator_id'. Used for admin dashboards/moderator management."}],"description":"Filter by the moderator's ID who issued the suspension (UUID).\n\nCorresponds to 'issued_by_moderator_id'. Used for admin dashboards/moderator management."},"issued_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by the admin's ID who issued the suspension (UUID).\n\nUsed for elevated privilege audits and operational tracking."},{"type":"null","format":"uuid","description":"Filter by the admin's ID who issued the suspension (UUID).\n\nUsed for elevated privilege audits and operational tracking."}],"description":"Filter by the admin's ID who issued the suspension (UUID).\n\nUsed for elevated privilege audits and operational tracking."},"status":{"oneOf":[{"const":"active","description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},{"const":"revoked","description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},{"const":"expired","description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},{"const":"any","description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},{"type":"null","enum":["active","revoked","expired","any"],"description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."}],"description":"Filter by the suspension status.\n\nAccepted values: 'active', 'revoked', 'expired', or 'any'.\n- 'active': Ongoing\n- 'revoked': Removed by moderator/admin\n- 'expired': Past end date\n- 'any': No filter on status."},"starts_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started after this ISO 8601 datetime."},{"type":"null","format":"date-time","description":"Lower bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started after this ISO 8601 datetime."}],"description":"Lower bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started after this ISO 8601 datetime."},"starts_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started before this ISO 8601 datetime."},{"type":"null","format":"date-time","description":"Upper bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started before this ISO 8601 datetime."}],"description":"Upper bound for suspension start date search (inclusive).\n\nUsed to retrieve suspensions that started before this ISO 8601 datetime."},"ends_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date after this ISO 8601 datetime."},{"type":"null","format":"date-time","description":"Lower bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date after this ISO 8601 datetime."}],"description":"Lower bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date after this ISO 8601 datetime."},"ends_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date before this ISO 8601 datetime."},{"type":"null","format":"date-time","description":"Upper bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date before this ISO 8601 datetime."}],"description":"Upper bound for suspension end date search (inclusive).\n\nUse for querying suspensions with an end date before this ISO 8601 datetime."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (1-based).\n\nIf omitted or null, defaults to page 1."},{"type":"null","description":"Page number for pagination (1-based).\n\nIf omitted or null, defaults to page 1."}],"description":"Page number for pagination (1-based).\n\nIf omitted or null, defaults to page 1."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of records per page.\n\nIf omitted or null, the default system limit applies (e.g., 100)."},{"type":"null","description":"Maximum number of records per page.\n\nIf omitted or null, the default system limit applies (e.g., 100)."}],"description":"Maximum number of records per page.\n\nIf omitted or null, the default system limit applies (e.g., 100)."}},"description":"Request filter for listing/searching member suspensions.\n\nAll fields map to standard filter/search patterns for the discussionboard_member_suspensions table.","required":[]},"IPageDiscussionBoardMemberSuspension":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMemberSuspension"},"description":"Array of member suspension record results."}},"required":["pagination","data"],"description":"Paginated container for member suspension records in search/list response.\n\nFulfills normalization and audit needs. 'pagination' contains page info; 'data' holds the suspension entries."},"IDiscussionBoardMemberSuspension":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the suspension record.\n\nPrimary key for discussionboard_member_suspensions table. Required for updating, referencing, or auditing the entry."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Target member's unique ID who was suspended.\n\nReferences 'discussionboard_members.id', fulfilling 3NF and traceability."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator ID who issued the suspension, nullable if not issued by moderator.\n\nFK to 'discussionboard_moderators.id'. Business logic distinguishes moderation/admin actions."},{"type":"null","format":"uuid","description":"Moderator ID who issued the suspension, nullable if not issued by moderator.\n\nFK to 'discussionboard_moderators.id'. Business logic distinguishes moderation/admin actions."}],"description":"Moderator ID who issued the suspension, nullable if not issued by moderator.\n\nFK to 'discussionboard_moderators.id'. Business logic distinguishes moderation/admin actions."},"issued_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin ID who issued the suspension, nullable if not admin-issued.\n\nFK to 'discussionboard_admins.id'."},{"type":"null","format":"uuid","description":"Admin ID who issued the suspension, nullable if not admin-issued.\n\nFK to 'discussionboard_admins.id'."}],"description":"Admin ID who issued the suspension, nullable if not admin-issued.\n\nFK to 'discussionboard_admins.id'."},"reason":{"type":"string","description":"Explanation for the suspension event.\n\nRequired for audit, review, and compliance workflows. Populates the 'reason' column."},"starts_at":{"type":"string","format":"date-time","description":"Start datetime when suspension becomes effective.\n\nPopulates 'starts_at' column for feature gating."},"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"End datetime for the suspension. Null if the suspension is permanent or ongoing.\n\nReferences 'ends_at'."},{"type":"null","format":"date-time","description":"End datetime for the suspension. Null if the suspension is permanent or ongoing.\n\nReferences 'ends_at'."}],"description":"End datetime for the suspension. Null if the suspension is permanent or ongoing.\n\nReferences 'ends_at'."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when the suspension was revoked/cancelled before natural end, if applicable.\n\nPopulates 'revoked_at'. Null if never revoked."},{"type":"null","format":"date-time","description":"Datetime when the suspension was revoked/cancelled before natural end, if applicable.\n\nPopulates 'revoked_at'. Null if never revoked."}],"description":"Datetime when the suspension was revoked/cancelled before natural end, if applicable.\n\nPopulates 'revoked_at'. Null if never revoked."}},"required":["id","discussionboard_member_id","reason","starts_at"],"description":"Member suspension record as stored in discussionboard_member_suspensions.\n\nIncludes all fields for display, management, and audit. 1:1 mapped to DB columns per Prisma schema."},"IDiscussionBoardMemberSuspension.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Unique ID of the member to be suspended. Required.\n\nReferences discussionboard_members.id."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderator issuing the suspension, if any.\n\nNull when issued by admin only (non-moderator action). FK to discussionboard_moderators.id."},{"type":"null","format":"uuid","description":"ID of the moderator issuing the suspension, if any.\n\nNull when issued by admin only (non-moderator action). FK to discussionboard_moderators.id."}],"description":"ID of the moderator issuing the suspension, if any.\n\nNull when issued by admin only (non-moderator action). FK to discussionboard_moderators.id."},"issued_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the admin issuing the suspension, if any.\n\nNull if not an admin-issued action. FK to discussionboard_admins.id."},{"type":"null","format":"uuid","description":"ID of the admin issuing the suspension, if any.\n\nNull if not an admin-issued action. FK to discussionboard_admins.id."}],"description":"ID of the admin issuing the suspension, if any.\n\nNull if not an admin-issued action. FK to discussionboard_admins.id."},"reason":{"type":"string","description":"Explanation/reason for the suspension event. Required.\n\nPopulates the 'reason' column for audit/review."},"starts_at":{"type":"string","format":"date-time","description":"Datetime when suspension takes effect (ISO 8601).\n\nUsed for audit and system enforcement."},"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional end datetime (null for permanent suspensions).\n\nPopulates 'ends_at'."},{"type":"null","format":"date-time","description":"Optional end datetime (null for permanent suspensions).\n\nPopulates 'ends_at'."}],"description":"Optional end datetime (null for permanent suspensions).\n\nPopulates 'ends_at'."}},"required":["discussionboard_member_id","reason","starts_at"],"description":"Input structure for creating a member suspension record.\n\nThe request must specify target, reason, time bounds, and the issuing actor as defined by business rules."},"DiscussionboardMemberSuspension.IUpdate":{"type":"object","properties":{"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"Updated end datetime, or null to set indefinite/permanent suspension.\n\nPopulates 'ends_at' column if changing suspension timeframe."},{"type":"null","format":"date-time","description":"Updated end datetime, or null to set indefinite/permanent suspension.\n\nPopulates 'ends_at' column if changing suspension timeframe."}],"description":"Updated end datetime, or null to set indefinite/permanent suspension.\n\nPopulates 'ends_at' column if changing suspension timeframe."},"reason":{"oneOf":[{"type":"string","description":"Updated explanation for the suspension. Required for audit if changed.\n\nNull if unchanged."},{"type":"null","description":"Updated explanation for the suspension. Required for audit if changed.\n\nNull if unchanged."}],"description":"Updated explanation for the suspension. Required for audit if changed.\n\nNull if unchanged."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when the suspension was revoked (or to mark as revoked now).\n\nIf null, no revocation performed."},{"type":"null","format":"date-time","description":"Datetime when the suspension was revoked (or to mark as revoked now).\n\nIf null, no revocation performed."}],"description":"Datetime when the suspension was revoked (or to mark as revoked now).\n\nIf null, no revocation performed."}},"description":"Update object for a member suspension record in discussionboard_member_suspensions.\n\nPermits updating end date, reason, and revocation marker subject to admin/moderator privileges.","required":[]},"DiscussionboardMemberSuspension":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the member suspension record.\n\nPrimary key in discussionboard_member_suspensions table."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key to the suspended member's UUID.\n\nLinks to discussionboard_members.id."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator's ID (nullable).\n\nWhen present, indicates moderator-issued suspension; null for admin-only actions."},{"type":"null","format":"uuid","description":"Moderator's ID (nullable).\n\nWhen present, indicates moderator-issued suspension; null for admin-only actions."}],"description":"Moderator's ID (nullable).\n\nWhen present, indicates moderator-issued suspension; null for admin-only actions."},"issued_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin's ID (nullable).\n\nPresent for admin-issued suspensions."},{"type":"null","format":"uuid","description":"Admin's ID (nullable).\n\nPresent for admin-issued suspensions."}],"description":"Admin's ID (nullable).\n\nPresent for admin-issued suspensions."},"reason":{"type":"string","description":"Reason text for why the suspension was issued.\n\nMirrors 'reason' column in table; required for compliance/audit."},"starts_at":{"type":"string","format":"date-time","description":"Datetime when suspension started (ISO 8601).\n\nRequired for system gating and audit."},"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when suspension is set to end (ISO 8601), null for permanent suspension.\n\nDirectly populates 'ends_at'."},{"type":"null","format":"date-time","description":"Datetime when suspension is set to end (ISO 8601), null for permanent suspension.\n\nDirectly populates 'ends_at'."}],"description":"Datetime when suspension is set to end (ISO 8601), null for permanent suspension.\n\nDirectly populates 'ends_at'."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of revocation if suspension was ended early (null otherwise).\n\nFrom column 'revoked_at', for early lifting of suspension."},{"type":"null","format":"date-time","description":"Timestamp of revocation if suspension was ended early (null otherwise).\n\nFrom column 'revoked_at', for early lifting of suspension."}],"description":"Timestamp of revocation if suspension was ended early (null otherwise).\n\nFrom column 'revoked_at', for early lifting of suspension."}},"required":["id","discussionboard_member_id","reason","starts_at"],"description":"Full member suspension entity for discussionboard_member_suspensions. Fields are mapped exactly to the table by column name, supporting management, audit, and enforcement operations."},"DiscussionboardModeratorAction.IRequest":{"type":"object","properties":{"discussionboard_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for actions by specific moderator (UUID).\n\nReferences 'discussionboard_moderators.id'."},{"type":"null","format":"uuid","description":"Filter for actions by specific moderator (UUID).\n\nReferences 'discussionboard_moderators.id'."}],"description":"Filter for actions by specific moderator (UUID).\n\nReferences 'discussionboard_moderators.id'."},"action_type":{"oneOf":[{"type":"string","description":"The type of moderator action to filter for (e.g. 'edit_post', 'delete_comment', 'issue_warning', 'suspend_member').\n\nReferences 'action_type' column and supports dashboard analytics."},{"type":"null","description":"The type of moderator action to filter for (e.g. 'edit_post', 'delete_comment', 'issue_warning', 'suspend_member').\n\nReferences 'action_type' column and supports dashboard analytics."}],"description":"The type of moderator action to filter for (e.g. 'edit_post', 'delete_comment', 'issue_warning', 'suspend_member').\n\nReferences 'action_type' column and supports dashboard analytics."},"target_type":{"oneOf":[{"type":"string","description":"Type of entity affected (e.g. 'post', 'comment', 'member', 'tag'). Optional filter for dashboard and reporting."},{"type":"null","description":"Type of entity affected (e.g. 'post', 'comment', 'member', 'tag'). Optional filter for dashboard and reporting."}],"description":"Type of entity affected (e.g. 'post', 'comment', 'member', 'tag'). Optional filter for dashboard and reporting."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for actions targeting a specific entity by UUID.\n\nMay be a post/comment/member/tag depending on target_type."},{"type":"null","format":"uuid","description":"Filter for actions targeting a specific entity by UUID.\n\nMay be a post/comment/member/tag depending on target_type."}],"description":"Filter for actions targeting a specific entity by UUID.\n\nMay be a post/comment/member/tag depending on target_type."},"action_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for action timestamp filtering (inclusive). ISO 8601 string."},{"type":"null","format":"date-time","description":"Lower bound for action timestamp filtering (inclusive). ISO 8601 string."}],"description":"Lower bound for action timestamp filtering (inclusive). ISO 8601 string."},"action_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for action timestamp filtering (inclusive). ISO 8601 string."},{"type":"null","format":"date-time","description":"Upper bound for action timestamp filtering (inclusive). ISO 8601 string."}],"description":"Upper bound for action timestamp filtering (inclusive). ISO 8601 string."},"page":{"oneOf":[{"type":"integer","description":"Result page (1-based). Defaults to 1 if omitted/null."},{"type":"null","description":"Result page (1-based). Defaults to 1 if omitted/null."}],"description":"Result page (1-based). Defaults to 1 if omitted/null."},"limit":{"oneOf":[{"type":"integer","description":"Max records per page (system default if omitted/null)."},{"type":"null","description":"Max records per page (system default if omitted/null)."}],"description":"Max records per page (system default if omitted/null)."}},"description":"Request object for searching/filtering moderator actions in discussionboard_moderator_actions. Supports all admin panel, dashboard, or reporting use cases.","required":[]},"IPageDiscussionboardModeratorAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionboardModeratorAction"},"description":"Array of moderator action log results."}},"required":["pagination","data"],"description":"Paginated page result for moderator actions log list queries."},"DiscussionboardModeratorAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator action record.\n\nPrimary key for discussionboard_moderator_actions table."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"FK to acting moderator's UUID on discussionboard_moderators.\n\nEnables audit trail for specific moderator."},"action_type":{"type":"string","description":"Type of action performed (e.g., 'edit_post', 'suspend_member').\n\nCategorizes moderation actions; source for audit and dashboard analytics."},"target_type":{"type":"string","description":"Type of entity affected (e.g. 'post', 'comment', 'member', 'tag').\n\nRequired for polymorphic audit reports and workflow analytics."},"target_id":{"type":"string","format":"uuid","description":"UUID of the affected entity (post, comment, member, etc).\n\nRequired for linking action logs to concrete objects."},"details":{"type":"string","description":"Free-form string describing the intervention (context, justification, etc).\n\nPopulates 'details' in DB; required for transparency and compliance review."},"action_at":{"type":"string","format":"date-time","description":"Action timestamp (ISO8601).\n\nUsed for ordering, time-window dashboards, and compliance audit."}},"required":["id","discussionboard_moderator_id","action_type","target_type","target_id","details","action_at"],"description":"Moderator action record entity as stored in discussionboard_moderator_actions table. Used for transparency, audit trails, and moderator analytics."},"DiscussionboardModeratorAction.ICreate":{"type":"object","properties":{"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator issuing the action. Required.\n\nMust reference discussionboard_moderators.id."},"action_type":{"type":"string","description":"The type of action/intervention (e.g. 'edit_post', 'delete_comment').\n\nShould reflect defined workflow event taxonomy for moderation actions. Required."},"target_type":{"type":"string","description":"Entity type affected ('post', 'comment', etc). Required.\n\nCategorizes which business object this action affected."},"target_id":{"type":"string","format":"uuid","description":"UUID of the affected target (post/comment/member/tag).\n\nRequired; must reference valid business object in DB."},"details":{"type":"string","description":"Freeform string describing the action context, motivation, or audit details.\n\nRequired for audit trail and moderation transparency."},"action_at":{"type":"string","format":"date-time","description":"Datetime of the moderator action (ISO8601 string).\n\nRequired for accurate time-based auditing and dashboard analytics."}},"required":["discussionboard_moderator_id","action_type","target_type","target_id","details","action_at"],"description":"Input object for creating a moderator action log entry in discussionboard_moderator_actions. All properties are required by business rules for audit transparency and 3NF normalization."},"DiscussionboardModeratorAction.IUpdate":{"type":"object","properties":{},"description":"Update schema for a moderator action log entry related to the DiscussionBoard moderation domain. This is used for amending action_type, target_type, target_id, or details fields of an existing moderator action record. All properties are optional for partial updates.\n\nAccording to the Prisma schema, it may include moderator ID, action type, target type, target ID, details (notes/justification), and the updated timestamp. Use this type for PATCH/PUT update operations for moderator actions.","required":[]},"DiscussionboardBoard.IRequest":{"type":"object","properties":{},"description":"Request schema for searching, filtering, and paginating board records in the DiscussionBoard forum. Input is sent for advanced query APIs listing available boards. Properties may include page, limit, search, sort, and filter fields as defined by backend API logic.\n\nNo explicit properties are defined here; refer to API documentation for supported search and pagination arguments. Used for PATCH/POST list endpoints for board overviews.","required":[]},"IPageDiscussionboardBoard":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the board page query."},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionboardBoard"},"description":"Array of DiscussionboardBoard records in this page."}},"required":["pagination","data"],"description":"Paginated result container for DiscussionBoard board records, used in list/search APIs. Contains an array of DiscussionboardBoard objects and pagination metadata. Follows IPage<T> container convention described in requirements."},"DiscussionboardBoard":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key ID for the board."},"discussionboard_category_id":{"type":"string","format":"uuid","description":"Reference to the category this board belongs to (foreign key to discussionboard_categories.id)."},"code":{"type":"string","description":"Internal code for the board (unique per platform). Example: 'POLITICS'."},"name":{"type":"string","description":"Name string for board, used for display and search."},"description":{"oneOf":[{"type":"string","description":"Multiline text description about board purpose, rules, or context. Optional."},{"type":"null"}],"description":"Multiline text description about board purpose, rules, or context. Optional."},"is_active":{"type":"boolean","description":"Indicates if the board is visible and open for discussion. Board admins can toggle this."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of board creation, always present."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last modification to the board."}},"required":["id","discussionboard_category_id","code","name","is_active","created_at","updated_at"],"description":"Full board entity type for the DiscussionBoard domain, as described in the business requirements and Prisma ERD. Includes all atomic fields per strict 3NF normalization.\n\nCaptures board's unique identifier, category reference (discussionboard_category_id), code, display name, textual description, activation state, and audit timestamps for creation and update. Used for display, management, and analytics workflows as well as in board listing and detail endpoints."},"DiscussionboardBoard.ICreate":{"type":"object","properties":{"discussionboard_category_id":{"type":"string","format":"uuid","description":"Foreign key UUID of the category this board belongs to."},"code":{"type":"string","description":"Unique code for internal identification (must be globally unique)."},"name":{"type":"string","description":"Human-readable board name for UI and search."},"description":{"oneOf":[{"type":"string","description":"Optional board description for help or context popups."},{"type":"null"}],"description":"Optional board description for help or context popups."},"is_active":{"type":"boolean","description":"Indicates if board is active/visible on creation (default: true)."}},"required":["discussionboard_category_id","code","name","is_active"],"description":"Schema for creating a new DiscussionBoard board. Contains category ID, unique code, display name, optional description, and active flag. Used in board creation endpoints. All fields except description are required; is_active must be specified for business logic/audit consistency."},"DiscussionboardBoard.IUpdate":{"type":"object","properties":{"discussionboard_category_id":{"type":"string","format":"uuid","description":"ID of the new or same parent category for this board."},"code":{"type":"string","description":"New or existing board code."},"name":{"type":"string","description":"Board name; visible to UI end-users."},"description":{"oneOf":[{"type":"string","description":"Updated (or cleared) board description."},{"type":"null"}],"description":"Updated (or cleared) board description."},"is_active":{"type":"boolean","description":"Set to true/false to update board visibility/activation."}},"description":"Update schema for a board entity in DiscussionBoard. All fields optional; provided fields will be updated. Use for PATCH/PUT board update endpoints. Fields mirror those in ICreate except fields can be omitted if unchanged.","required":[]},"DiscussionBoardBoardTopic.IRequest":{"type":"object","properties":{},"description":"Request schema for searching, filtering, and paginating board topics in the DiscussionBoard forum. Input for PATCH/POST APIs listing topics by criteria. Parameters may include pagination, board, code, title, or creator, depending on API implementation.","required":[]},"IPageDiscussionBoardBoardTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Metadata for paginated result (current page, total number of records, pages, etc)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardBoardTopic"},"description":"Topic records on this page."}},"required":["pagination","data"],"description":"Page container for DiscussionBoard board topics, as returned by the topic list/search APIs. Conforms to standard IPage<T> contract with pagination metadata and record array."},"DiscussionBoardBoardTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique board topic ID (primary key)."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Reference to the parent board (discussionboard_boards.id)."},"code":{"type":"string","description":"Unique topic code per board."},"title":{"type":"string","description":"Title of the board topic—used in UI, listings, and search."},"description":{"oneOf":[{"type":"string","description":"Topic summary or context—supports Markdown, optional."},{"type":"null"}],"description":"Topic summary or context—supports Markdown, optional."},"created_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member who created this topic."},"created_at":{"type":"string","format":"date-time","description":"Datetime this topic was created."},"updated_at":{"type":"string","format":"date-time","description":"Datetime topic was last updated."}},"required":["id","discussionboard_board_id","code","title","created_by_member_id","created_at","updated_at"],"description":"Full entity schema for DiscussionBoard board topic. Includes ID, parent board reference (discussionboard_board_id), topic code, title, description, creator member, and timestamps. Used for listing, detail, and management endpoints for board topics."},"DiscussionBoardBoardTopic.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of parent board for this topic."},"code":{"type":"string","description":"Unique code for the topic within the board."},"title":{"type":"string","description":"Title for new topic (required)."},"description":{"oneOf":[{"type":"string","description":"Optional summary/description/body for topic (Markdown supported if UI enables)."},{"type":"null"}],"description":"Optional summary/description/body for topic (Markdown supported if UI enables)."},"created_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member creating this topic."}},"required":["discussionboard_board_id","code","title","created_by_member_id"],"description":"Creation schema for board topic entities. Specifies parent board, unique topic code/title, optional description, and creator member. Used by board topic create endpoints."},"DiscussionBoardBoardTopic.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"New unique code (if updating; may be omitted to keep current)."},"title":{"type":"string","description":"Updated topic title."},"description":{"oneOf":[{"type":"string","description":"Revised or new description for topic (optional)."},{"type":"null"}],"description":"Revised or new description for topic (optional)."}},"description":"Update schema for board topic—the IUpdate contract for modifying topic properties. All fields are optional; send only fields to update. Used in PATCH/PUT update endpoints for DiscussionBoardBoardTopic","required":[]},"IOperationStatus":{"type":"object","properties":{"success":{"type":"boolean","description":"True if the operation completed without error."},"message":{"oneOf":[{"type":"string","description":"Details or diagnostic message about the operation. Included if operation failed or to provide additional info."},{"type":"null"}],"description":"Details or diagnostic message about the operation. Included if operation failed or to provide additional info."}},"required":["success"],"description":"Standardized success/failure indicator for DiscussionBoard operations, per OpenAPI best practices. success true/false indicates if operation succeeded; message provides error or informational detail. Used for delete/operation endpoints."},"DiscussionBoardTopicTag.IRequest":{"type":"object","properties":{"filter":{"type":"string","description":"A filter string for searching topic tags by name or partial name. Implements search and discovery UX as described in the business logic.\n\nFulfills the requirement that users, moderators, or admins can search for tags efficiently. Corresponds to the normalized tag lookup function. Null or empty string retrieves all tags."},"is_active":{"oneOf":[{"type":"boolean","description":"Boolean filter for limiting results to only active or inactive tags. If null, returns all tags regardless of active status.\n\nSupports the admin/moderator curation workflow for enabled/disabled tags. Business rule compliance for tag listing interfaces."},{"type":"null","description":"Boolean filter for limiting results to only active or inactive tags. If null, returns all tags regardless of active status.\n\nSupports the admin/moderator curation workflow for enabled/disabled tags. Business rule compliance for tag listing interfaces."}],"description":"Boolean filter for limiting results to only active or inactive tags. If null, returns all tags regardless of active status.\n\nSupports the admin/moderator curation workflow for enabled/disabled tags. Business rule compliance for tag listing interfaces."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"The page number for paginated results (1-based). Implements standard pagination for list APIs.\n\nEnables large tag set navigation in UIs and moderation tools. Fulfills performance and usability requirements."},{"type":"null","minimum":1,"description":"The page number for paginated results (1-based). Implements standard pagination for list APIs.\n\nEnables large tag set navigation in UIs and moderation tools. Fulfills performance and usability requirements."}],"description":"The page number for paginated results (1-based). Implements standard pagination for list APIs.\n\nEnables large tag set navigation in UIs and moderation tools. Fulfills performance and usability requirements."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"The number of results per page. Null means use the system default (see discussionboard_settings for reference).\n\nBusiness rule: Allows admins/moderators to control result batch size for improved curation UX."},{"type":"null","minimum":1,"description":"The number of results per page. Null means use the system default (see discussionboard_settings for reference).\n\nBusiness rule: Allows admins/moderators to control result batch size for improved curation UX."}],"description":"The number of results per page. Null means use the system default (see discussionboard_settings for reference).\n\nBusiness rule: Allows admins/moderators to control result batch size for improved curation UX."}},"required":[],"description":"Request body for listing, searching, and paginating topic tags in the discussion board domain.\n\nImplements filtering and query requirements for admins, moderators, and user search scenarios as described in the requirements analysis. Follows normalization and business logic constraints for scalable tag browsing."},"IPageDiscussionBoardTopicTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardTopicTag"},"description":"Array of topic tag objects for the requested page. Each represents a discussion domain tag and follows normalized structure."}},"required":["pagination","data"],"description":"Paginated result list of topic tags.\n\nImplements the container for list/search endpoints on discussionboard_topic_tags. Includes pagination metadata and the array of topic tag entity objects as defined by business and normalization rules."},"DiscussionBoardTopicTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the topic tag record.\n\nImplements the primary key for topic tag management as referenced in the Prisma schema and ERD. Critical for updates, deletion, and assignment workflows."},"name":{"type":"string","description":"Canonical name of the topic tag. This is unique and used for display, search, and tag assignment workflows.\n\nFulfills the requirement that tags must be unique and human-readable. Enforced for consistency and normalization."},"is_active":{"type":"boolean","description":"Indicates whether this topic tag is enabled for use/assignment.\n\nFulfills the business rule for moderated/cured tags. Used to control tag visibility in UI and assignment logic."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the topic tag was created (ISO 8601 format).\n\nImplements audit, search, filter, and moderation flows. Required by business rules for history and compliance."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp for the tag (ISO 8601). Supports audit trail, updates, and UI freshness requirements as per business policy."}},"required":["id","name","is_active","created_at","updated_at"],"description":"Represents a single topic tag entity.\n\nImplements normalization for curated tagging, search, curation/moderation, and assignment to threads/topics as specified in business and domain requirements. Underlies workflows for tag management and content discovery across the discussion board system."},"DiscussionBoardTopicTag.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Name of the new tag to be created. Must be unique, comply with UI guidelines, and be suitable for assignment to threads/topics.\n\nImplements tag creation flows for admins/moderators per business logic."},"is_active":{"type":"boolean","description":"Whether the new tag is enabled/available for assignment upon creation, as required by moderation and system rules."}},"required":["name","is_active"],"description":"Request payload for creating a new topic tag entity in the board system.\n\nFulfills moderator/admin workflows for curation and assignment per requirements analysis and business logic."},"DiscussionBoardTopicTag.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Updated name for the topic tag, if renaming is permitted by business rule. Must remain unique and UI-suitable."},"is_active":{"type":"boolean","description":"Updated enabled status for this tag, controlling whether it is assignable or visible in UI."}},"required":["name","is_active"],"description":"Request payload for updating a topic tag record.\n\nImplements moderator/admin workflows for tag curation, correction, and moderation action per business rules and requirements."},"DiscussionBoardBoardAnnouncement.IRequest":{"type":"object","properties":{"filter":{"type":"string","description":"Text to search for in the announcement title or body. Implements requirement for rapid discovery of relevant announcements in UIs.\n\nNull or empty means no filter (all announcements)."},"board_id":{"type":"string","format":"uuid","description":"Optional board ID to filter announcements by their associated board/forum. Implements business logic for scoping and navigation in moderation/admin UX. Null returns all boards (global search)."},"is_pinned":{"oneOf":[{"type":"boolean","description":"Filters only pinned or unpinned announcements. Null yields all.\n\nCorresponds to business logic for board message curation and UI prioritization."},{"type":"null","description":"Filters only pinned or unpinned announcements. Null yields all.\n\nCorresponds to business logic for board message curation and UI prioritization."}],"description":"Filters only pinned or unpinned announcements. Null yields all.\n\nCorresponds to business logic for board message curation and UI prioritization."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Page number for pagination. 1-based, follows site-wide paging UI standards."},{"type":"null","minimum":1,"description":"Page number for pagination. 1-based, follows site-wide paging UI standards."}],"description":"Page number for pagination. 1-based, follows site-wide paging UI standards."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Limit for number of announcements per page. Null defaults to system or settings-driven value; supports moderator UX/performance rules."},{"type":"null","minimum":1,"description":"Limit for number of announcements per page. Null defaults to system or settings-driven value; supports moderator UX/performance rules."}],"description":"Limit for number of announcements per page. Null defaults to system or settings-driven value; supports moderator UX/performance rules."}},"required":[],"description":"Request object for listing/searching board announcements in the discussion board system.\n\nImplements filtering and paginated access per board, pin status, and search query as required by admins/moderators and end-user UIs."},"IPageDiscussionBoardBoardAnnouncement":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/DiscussionBoardBoardAnnouncement"},"description":"Paginated array of board announcements matching filter/criteria."}},"required":["pagination","data"],"description":"Paginated result list of board announcement objects.\n\nImplements the response envelope for announcement list APIs, including pagination meta and normalized data arrays."},"DiscussionBoardBoardAnnouncement":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the announcement record."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board ID this announcement is attached to. Implements business rules for board/announcement linking and scoped visibility."},"published_by_admin_id":{"type":"string","format":"uuid","description":"ID of the admin who published this announcement. Used for audit, transparency, and business logic for privilege enforcement."},"title":{"type":"string","description":"Title of the announcement. Used in UI summary, search, highlights, and auditing."},"body":{"type":"string","description":"Full markdown message body of the announcement. Implements content delivery, legal compliance (rules changes), and onboarding."},"is_pinned":{"type":"boolean","description":"Whether this announcement is 'sticky' (UI-prioritized) for the board. Only one can be pinned per board at once, per business logic."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the announcement (ISO 8601 for audit/logic)."},"updated_at":{"type":"string","format":"date-time","description":"Last modification date of this record (audit trail, moderation logic)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp; null if this is still live. Implements audit/legal retention and compliance workflows."},{"type":"null","format":"date-time","description":"Soft-deletion timestamp; null if this is still live. Implements audit/legal retention and compliance workflows."}],"description":"Soft-deletion timestamp; null if this is still live. Implements audit/legal retention and compliance workflows."}},"required":["id","discussionboard_board_id","published_by_admin_id","title","body","is_pinned","created_at","updated_at"],"description":"Normalized board announcement object for announcements API domain.\n\nImplements audit, notification, curation, and UI presentation requirements for board-based communications per requirements analysis and Prisma schema."},"IDiscussionboardBoardAnnouncements.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Target board ID to link new announcement to. Important for UI scoping, notifications, and compliance logic."},"published_by_admin_id":{"type":"string","format":"uuid","description":"Admin or moderator ID publishing this announcement. Required for privilege checks, audit trail, and accountability."},"title":{"type":"string","description":"Human-readable title for announcement. Source for summaries, highlights, and legal review."},"body":{"type":"string","description":"Full markdown body of announcement. Underlies community guideline updates, onboarding, alerts."},"is_pinned":{"type":"boolean","description":"Indicates if this announcement should be sticky in the UI for this board as required by UX/business logic."}},"required":["discussionboard_board_id","published_by_admin_id","title","body","is_pinned"],"description":"Payload for creating a board announcement. Used in admin/moderator publishing workflows, onboarding, and policy updates per business/domain requirements."},"IDiscussionboardBoardAnnouncements":{"type":"object","properties":{"id":{"type":"string","format":"uuid"},"discussionboard_board_id":{"type":"string","format":"uuid"},"published_by_admin_id":{"type":"string","format":"uuid"},"title":{"type":"string"},"body":{"type":"string"},"is_pinned":{"type":"boolean"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null","format":"date-time"}]}},"required":["id","discussionboard_board_id","published_by_admin_id","title","body","is_pinned","created_at","updated_at"],"description":"Full board announcement entry for admin/moderator dashboards and notification flows.\n\nImplements announcement auditing, update, and curation flows for policy dissemination and community management."},"IDiscussionboardBoardAnnouncements.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"New or updated title for the board announcement."},"body":{"type":"string","description":"New or updated body (markdown-compatible) for the announcement."},"is_pinned":{"type":"boolean","description":"Update for sticky/pinned status in the board's UI. Only one per board can be pinned at once."}},"required":["title","body","is_pinned"],"description":"Payload for updating an existing board announcement record, as used in admin/moderator policy workflows.\n\nEnables rapid revision of board messages in compliance with business logic and audit trail requirements."},"IDiscussionboardThreads.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter for returning only threads in the given board. Implements board-level navigation and moderation flows."},"status":{"type":"string","description":"Requested thread status (e.g. 'open', 'closed', 'locked', etc.). If null or omitted, returns all threads.\n\nUsed in moderation, browsing, and dashboard filtering."},"filter":{"type":"string","description":"Search string for thread title, description, or keywords. Implements advanced UI search, moderation, and business-driven content discovery."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination—page number. 1-based. Fulfills UI, dashboard, and performance business rules for scalable thread browsing."},{"type":"null","minimum":1,"description":"Pagination—page number. 1-based. Fulfills UI, dashboard, and performance business rules for scalable thread browsing."}],"description":"Pagination—page number. 1-based. Fulfills UI, dashboard, and performance business rules for scalable thread browsing."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Number of thread records to return per page. Implements business and system default constraints as required in requirements."},{"type":"null","minimum":1,"description":"Number of thread records to return per page. Implements business and system default constraints as required in requirements."}],"description":"Number of thread records to return per page. Implements business and system default constraints as required in requirements."}},"required":[],"description":"Payload for listing and searching discussion threads. Fulfills business/domain requirements for scalable, filterable thread retrieval—used in admin, mod, and member UI in the discussion board system."},"IPageIDiscussionboardThreads":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreads"}}},"required":["pagination","data"],"description":"A paginated list of thread records for the DiscussionBoard system.\n\nThis schema is used as a standard response for list APIs returning discussion threads, providing both an array of thread records and pagination metadata. The 'pagination' object describes page number, limits, total records, and total pages, while 'data' holds the thread entities. Reflects use cases for APIs that need to fetch multiple threads in a scalable fashion, supporting UI thread lists and administrative moderation workflows."},"IDiscussionboardThreads":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for each thread. See discussionboard_threads.id"},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key to Board (discussionboard_boards.id). Indicates which board this thread belongs to."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key to Member (discussionboard_members.id). The member who created this thread."},"title":{"type":"string","description":"Thread title. See discussionboard_threads.title. Must be unique per board and descriptive for subject/content discovery. Supports advanced search UI."},"description":{"oneOf":[{"type":"string","description":"Optional thread description/body. See discussionboard_threads.description. Supports markdown for in-depth context at thread initiation. Nullable if no description."},{"type":"null","description":"Optional thread description/body. See discussionboard_threads.description. Supports markdown for in-depth context at thread initiation. Nullable if no description."}],"description":"Optional thread description/body. See discussionboard_threads.description. Supports markdown for in-depth context at thread initiation. Nullable if no description."},"status":{"type":"string","description":"Thread status (e.g. 'open', 'closed', 'locked'). See discussionboard_threads.status. Determines whether users can participate or view."},"created_at":{"type":"string","format":"date-time","description":"Thread creation timestamp (ISO 8601). Fulfills ordering/audit/log requirements. See discussionboard_threads.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp. Tracks edit history; reflects most recent change. See discussionboard_threads.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp. If set, thread is considered deleted but retained for audit/data retention. See discussionboard_threads.deleted_at."},{"type":"null","format":"date-time","description":"Soft-delete timestamp. If set, thread is considered deleted but retained for audit/data retention. See discussionboard_threads.deleted_at."}],"description":"Soft-delete timestamp. If set, thread is considered deleted but retained for audit/data retention. See discussionboard_threads.deleted_at."}},"required":["id","discussionboard_board_id","discussionboard_member_id","title","status","created_at","updated_at"],"description":"Discussion thread entity for the DiscussionBoard platform, as defined in discussionboard_threads schema.\n\nRepresents a top-level topic within a board. Contains all atomic fields for UI, audit, and API management. The entity separates UI-visible data (title/description/status) from relational identifiers (board/member), with required timestamps for audit compliance."},"IDiscussionboardThreads.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Target board ID to which this thread will belong. Required."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Creator member ID. Required."},"title":{"type":"string","description":"Thread title (must be unique within the board). Required."},"description":{"oneOf":[{"type":"string","description":"Optional thread description/body supporting markdown."},{"type":"null","description":"Optional thread description/body supporting markdown."}],"description":"Optional thread description/body supporting markdown."},"status":{"type":"string","description":"Initial thread status (e.g. 'open')."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of thread creation (ISO 8601 format)."}},"required":["discussionboard_board_id","discussionboard_member_id","title","status","created_at"],"description":"Schema for creating a new thread entity on the DiscussionBoard.\n\nFollows the requirements of discussionboard_threads for registration of a topic—including links to board and member, title, (optional) description, initial status, and creation timestamp. Used as request body for thread creation endpoint."},"IDiscussionboardThreads.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"New or updated thread title. If changed, must comply with board-uniqueness constraint."},"description":{"oneOf":[{"type":"string","description":"New thread description/body (markdown supported). Nullable."},{"type":"null","description":"New thread description/body (markdown supported). Nullable."}],"description":"New thread description/body (markdown supported). Nullable."},"status":{"type":"string","description":"New thread status ('open', 'closed', etc)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update (ISO 8601). Should correspond to edit action."}},"required":["updated_at"],"description":"Schema for updating an existing thread entity on the DiscussionBoard.\n\nPermits updating the thread title, description/body, and status. 'updated_at' is required for audit and edit tracking. All properties are optional except updated_at, so only fields to be changed need be included."},"IDiscussionboardPosts.IRequest":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"(Optional) Filter: posts belonging to specific thread ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) Filter: posts created by member."},"created_at_from":{"type":"string","format":"date-time","description":"(Optional) Filter: posts created after this date/time (ISO 8601)."},"created_at_to":{"type":"string","format":"date-time","description":"(Optional) Filter: posts created before this date/time (ISO 8601)."},"page":{"type":"integer","description":"Page number for pagination (starts from 1). Optional."},"limit":{"type":"integer","description":"Maximum number of posts per page. Optional."},"sort":{"type":"string","description":"Sort order: e.g. 'created_at desc', 'created_at asc', 'updated_at desc'. Optional."}},"required":[],"description":"Request schema for searching/listing DiscussionBoard posts with filtering, pagination, and sorting.\n\nUsed as request body for post-listing endpoint, enables advanced queries for feeds, dashboards, and administration."},"IPageIDiscussionboardPosts":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPosts"}}},"required":["pagination","data"],"description":"A paged response with list of DiscussionBoard posts for feeds or moderation views.\n\nProvides required 'pagination' structure and data array as per IPage contracts, holding DiscussionBoard post entities for API responses."},"IDiscussionboardPosts":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (ID) for the post. See discussionboard_posts.id."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Foreign key to thread. Which thread this post belongs to. See discussionboard_posts.discussionboard_thread_id."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Foreign key to member. Author of the post."},"body":{"type":"string","description":"Main post content/body (markdown supported). Business field required for thread participation."},"created_at":{"type":"string","format":"date-time","description":"Post creation datetime (ISO 8601). For audit trails and ordering."},"updated_at":{"type":"string","format":"date-time","description":"Last post modification datetime."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp (nullable). If set, post is logically deleted in UI/API results."},{"type":"null","format":"date-time","description":"Soft-delete timestamp (nullable). If set, post is logically deleted in UI/API results."}],"description":"Soft-delete timestamp (nullable). If set, post is logically deleted in UI/API results."}},"required":["id","discussionboard_thread_id","discussionboard_member_id","body","created_at","updated_at"],"description":"DiscussionBoard post entity. Defines all fields for core thread/post structures, links to thread/member, and auditing timestamps.\n\nUsed for direct display in APIs, UI, and audit/compliance reports. Conforms to discussionboard_posts table. 'body' is required and always markdown-capable."},"IDiscussionboardPosts.ICreate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread ID to which this post is to be attached. Required."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member ID for the post author (required)."},"body":{"type":"string","description":"Post body/content (markdown supported). Required."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of post creation."}},"required":["discussionboard_thread_id","discussionboard_member_id","body","created_at"],"description":"Request body schema to create a new post in a discussion thread.\n\nRepresents all required input fields per DB and business logic: links to thread/member, content, and audit field for timestamp. Used in frontend post creation UI and backend APIs."},"IDiscussionboardPosts.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Updated post body/content (markdown supported)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of post update (ISO 8601, required for audit)."}},"required":["updated_at"],"description":"Request body schema to update an existing discussion post.\n\nAllows updating only the body/content and timestamp. Use for member edits and moderation. No other mutable fields."},"IDiscussionboardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post. See discussionboard_posts.id"},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Thread ID this post belongs to."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member who authored the post."},"body":{"type":"string","description":"Post body/content."},"created_at":{"type":"string","format":"date-time","description":"When the post was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update time for post."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, the post is deleted/hidden in the UI. Null otherwise."},{"type":"null","format":"date-time","description":"If set, the post is deleted/hidden in the UI. Null otherwise."}],"description":"If set, the post is deleted/hidden in the UI. Null otherwise."}},"required":["id","discussionboard_thread_id","discussionboard_member_id","body","created_at","updated_at"],"description":"DiscussionBoard post resource entity object. Used as response payload for post queries, including fetch by id and delete (soft-delete) return types.\n\nFields match discussionboard_posts DB entity: UUIDs for relations, markdown body, and standard audit timestamps (creation/update/deletion)."},"IDiscussionboardComment.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"(Optional) Filter by parent post ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) Filter by member/author id."},"parent_id":{"type":"string","format":"uuid","description":"(Optional) Filter for comments that are replies to a specific comment (threaded discussion)."},"created_at_from":{"type":"string","format":"date-time","description":"(Optional) Only comments created after this datetime."},"created_at_to":{"type":"string","format":"date-time","description":"(Optional) Only comments created before this datetime."},"page":{"type":"integer","description":"Results page number for pagination (optional)."},"limit":{"type":"integer","description":"Maximum number of comments per page (optional)."},"sort":{"type":"string","description":"Sort criteria, e.g. 'created_at desc', 'created_at asc', 'updated_at desc' (optional)."}},"required":[],"description":"Request body schema for searching/listing comments (discussionboard_comments) with filters, search, and pagination.\n\nEnables advanced queries for threaded forum display, admin review, and hierarchical UI."},"IPageIDiscussionboardComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardComment"}}},"required":["pagination","data"],"description":"Paged response of DiscussionBoard comments, with thread/post context for each and pagination metadata for UI and backoffice moderation workflows.\n\nReturns an array of comment entities for forum/audit/reporting views."},"IDiscussionboardComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key and unique identifier for the comment. Corresponds to the discussionboard_comments.id field in the database. Used to reference the comment in all thread and moderation flows.\n\nThis must be a valid UUID. It is required and used for all GET/UPDATE/DELETE operations."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"The parent post's unique identifier the comment belongs to. Corresponds to discussionboard_posts.id. Required for relation mapping and data retrieval in APIs, feeds, and moderation.\n\nValid UUID, must reference an existing post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Unique ID of the user who authored the comment. Corresponds to discussionboard_members.id. Used in author attributions, auditing, moderation workflows, and permissions enforcement.\n\nMust always be a valid user referencing a member."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this comment is a reply to another comment, this stores the parent comment's ID (discussionboard_comments.id). Supports threading/hierarchy. Null for top-level comments.\n\nIf present, must reference a valid comment inside the same thread."},{"type":"null","format":"uuid","description":"If this comment is a reply to another comment, this stores the parent comment's ID (discussionboard_comments.id). Supports threading/hierarchy. Null for top-level comments.\n\nIf present, must reference a valid comment inside the same thread."}],"description":"If this comment is a reply to another comment, this stores the parent comment's ID (discussionboard_comments.id). Supports threading/hierarchy. Null for top-level comments.\n\nIf present, must reference a valid comment inside the same thread."},"body":{"type":"string","description":"Actual text/content of the comment. Markdown formatting supported according to business rules. Content is subject to moderation, length, and formatting checks per requirements.\n\nMust not be empty."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created (ISO 8601, e.g., '2025-07-22T11:00:00+09:00'). Included for display, audit, and sorting purposes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to the comment. Used for edit history, audit, and UI freshness logic. Always present."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, indicates this comment was soft-deleted at this datetime. Used for moderation, compliance, and to support legal/audit retention. If null, the comment is live."},{"type":"null","format":"date-time","description":"If set, indicates this comment was soft-deleted at this datetime. Used for moderation, compliance, and to support legal/audit retention. If null, the comment is live."}],"description":"If set, indicates this comment was soft-deleted at this datetime. Used for moderation, compliance, and to support legal/audit retention. If null, the comment is live."}},"required":["id","discussionboard_post_id","discussionboard_member_id","body","created_at","updated_at"],"description":"Full comment entity as stored in the forum DB. Implements business requirements for nested/threaded discussion, moderation, audit, and compliance as described in the requirements analysis and Prisma schema. Includes all atomic and relational attributes required for user interface, audit trails, and legal compliance. Each comment can reference a parent for reply trees, supports markdown, and is subject to moderation.\n\nRead-only or computed fields (like counts/reactions) are not included; see related endpoints for those.\n\nCovers all CRUD and moderation flows, enforces API consistency and traceability."},"IDiscussionboardComment.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"The ID of the parent post this comment is attached to. Must reference an existing post. This is a required relation for threading and reply trees."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member who is making the comment. Must reference a valid, non-suspended user in the system."},"body":{"type":"string","description":"Comment text content. Markdown supported if permitted by forum configuration. Must not be empty; subject to length and formatting constraints."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this is a reply to another comment, specify the parent comment's UUID (nullable for top-level comments). Must refer to a valid comment inside the same post/thread."},{"type":"null","format":"uuid","description":"If this is a reply to another comment, specify the parent comment's UUID (nullable for top-level comments). Must refer to a valid comment inside the same post/thread."}],"description":"If this is a reply to another comment, specify the parent comment's UUID (nullable for top-level comments). Must refer to a valid comment inside the same post/thread."}},"required":["discussionboard_post_id","discussionboard_member_id","body"],"description":"Shape for API calls to create a new comment within a thread's post. Matches core business requirements for user discussion flows, hierarchical threading, and content auditability.\n\nAll fields must match business rules as specified in entity design, and relations are checked in backend logic."},"IDiscussionboardComment.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"The new or updated comment text/body. Required. Must pass moderation and validation. May be rejected if under edit lock, moderation hold, or compliance block."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Update the threading/parent relationship for this comment. If provided, must refer to a valid comment in the same thread. Nullable to remove reply relationship."},{"type":"null","format":"uuid","description":"(Optional) Update the threading/parent relationship for this comment. If provided, must refer to a valid comment in the same thread. Nullable to remove reply relationship."}],"description":"(Optional) Update the threading/parent relationship for this comment. If provided, must refer to a valid comment in the same thread. Nullable to remove reply relationship."}},"required":["body"],"description":"Update structure for editing comment content or parent relationship. Used by PATCH/PUT comment APIs.\n\nOnly owners or privileged users may update; enforcement is handled at API layer/permissions."},"IDiscussionboardCommentReply.IRequest":{"type":"object","properties":{"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If set, filters for all replies to the given parent comment (discussionboard_comments.id). Nullable for unconstrained search."},{"type":"null","format":"uuid","description":"If set, filters for all replies to the given parent comment (discussionboard_comments.id). Nullable for unconstrained search."}],"description":"If set, filters for all replies to the given parent comment (discussionboard_comments.id). Nullable for unconstrained search."},"reply_id":{"oneOf":[{"type":"string","format":"uuid","description":"If set, filters for a specific reply comment (discussionboard_comments.id) in reply relationships. Nullable when searching for all replies under a parent."},{"type":"null","format":"uuid","description":"If set, filters for a specific reply comment (discussionboard_comments.id) in reply relationships. Nullable when searching for all replies under a parent."}],"description":"If set, filters for a specific reply comment (discussionboard_comments.id) in reply relationships. Nullable when searching for all replies under a parent."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"If set, restricts results to replies involving a specific member (as parent or reply author). Nullable."},{"type":"null","format":"uuid","description":"If set, restricts results to replies involving a specific member (as parent or reply author). Nullable."}],"description":"If set, restricts results to replies involving a specific member (as parent or reply author). Nullable."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional lower bound for reply relationship creation datetime (ISO 8601). Useful for audit or user history filtering."},{"type":"null","format":"date-time","description":"Optional lower bound for reply relationship creation datetime (ISO 8601). Useful for audit or user history filtering."}],"description":"Optional lower bound for reply relationship creation datetime (ISO 8601). Useful for audit or user history filtering."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional upper bound for reply creation datetime (ISO 8601). Useful for ranged or dashboard queries."},{"type":"null","format":"date-time","description":"Optional upper bound for reply creation datetime (ISO 8601). Useful for ranged or dashboard queries."}],"description":"Optional upper bound for reply creation datetime (ISO 8601). Useful for ranged or dashboard queries."},"page":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"description":"Page number for pagination (1-based). Optional; default is 1 when omitted."},{"type":"null","format":"int32","minimum":1,"description":"Page number for pagination (1-based). Optional; default is 1 when omitted."}],"description":"Page number for pagination (1-based). Optional; default is 1 when omitted."},"limit":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"maximum":100,"description":"Maximum records to return per page. Optional; system default applies if omitted."},{"type":"null","format":"int32","minimum":1,"maximum":100,"description":"Maximum records to return per page. Optional; system default applies if omitted."}],"description":"Maximum records to return per page. Optional; system default applies if omitted."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."},{"const":"comment_id","description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."},{"const":"reply_id","description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."},{"type":"null","enum":["created_at","comment_id","reply_id"],"description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."}],"description":"Sorting key for result ordering. Enum allows 'created_at', 'comment_id', 'reply_id'. Optional; default ordering may apply."},"sort_order":{"oneOf":[{"const":"asc","description":"Sorting order: 'asc' (ascending) or 'desc' (descending). Optional; ascending is default."},{"const":"desc","description":"Sorting order: 'asc' (ascending) or 'desc' (descending). Optional; ascending is default."},{"type":"null","enum":["asc","desc"],"description":"Sorting order: 'asc' (ascending) or 'desc' (descending). Optional; ascending is default."}],"description":"Sorting order: 'asc' (ascending) or 'desc' (descending). Optional; ascending is default."}},"required":[],"description":"Request format for searching/comment reply relationships. Allows querying for threaded reply trees, UI navigation, auditing, and moderation analysis. Matches pagination and filter pattern from IPage/standard API."},"IPageIDiscussionboardCommentReply":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentReply"},"description":"Array of comment reply relationships for the current page."}},"required":["pagination","data"],"description":"Paginated results for comment reply relationship search. Used in moderation, dashboard, or discussion views aggregating reply structure. Follows standard IPage<T> pattern."},"IDiscussionboardCommentReply":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment reply mapping (discussionboard_comment_replies.id). Required for all CRUD and audit interfaces.\n\nMust be a valid UUID."},"comment_id":{"type":"string","format":"uuid","description":"ID of the parent comment (discussionboard_comments.id). Mandatory for mapping/thread hierarchy.\n\nMust reference an existing comment in the same thread/post."},"reply_id":{"type":"string","format":"uuid","description":"ID of the reply comment (discussionboard_comments.id). Identifies the child comment in the reply relation. Must reference another comment (valid UUID).\n\nEnforces 1:1 mapping for reply relation integrity."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601). When the reply relationship was created. Used for ordering, dashboard replay, audit, and query filtering."}},"required":["id","comment_id","reply_id","created_at"],"description":"Mapping record for parent-reply comment relationships in threaded discussion. Satisfies reply tree retrieval, UI rendering, audit trail, and moderation navigation workflows. Maintains full normalization (no embedded comment content here)."},"IDiscussionboardCommentReply.ICreate":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"ID of the parent comment (discussionboard_comments.id) being replied to. Must reference a valid, live comment."},"reply_id":{"type":"string","format":"uuid","description":"ID of the reply (child) comment (discussionboard_comments.id). Must reference a different, existing comment in the same thread/post."}},"required":["comment_id","reply_id"],"description":"Payload for creating a parent-reply comment mapping. Used whenever a user replies to another comment for threading/nesting construction. Backend enforces only valid comment pairings in accordance with forum/hierarchy rules."},"IDiscussionboardCommentReply.IUpdate":{"type":"object","properties":{"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) New parent comment ID to update the mapping. Nullable to remove association. Constraints: must reference a valid comment or be set to null without breaking thread integrity."},{"type":"null","format":"uuid","description":"(Optional) New parent comment ID to update the mapping. Nullable to remove association. Constraints: must reference a valid comment or be set to null without breaking thread integrity."}],"description":"(Optional) New parent comment ID to update the mapping. Nullable to remove association. Constraints: must reference a valid comment or be set to null without breaking thread integrity."},"reply_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Update which comment is associated as reply in the mapping. Nullable only when severing the relationship outright or for internal auditing."},{"type":"null","format":"uuid","description":"(Optional) Update which comment is associated as reply in the mapping. Nullable only when severing the relationship outright or for internal auditing."}],"description":"(Optional) Update which comment is associated as reply in the mapping. Nullable only when severing the relationship outright or for internal auditing."}},"required":[],"description":"Update structure for reply mapping. Used for moderator/admin or member correction of threading relationships, supporting auditing, moderation, and edge case repair."},"IDiscussionboardPostAttachment.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter for post ID (discussionboard_posts.id) to list only attachments belonging to a specific post."},{"type":"null","format":"uuid","description":"Optional filter for post ID (discussionboard_posts.id) to list only attachments belonging to a specific post."}],"description":"Optional filter for post ID (discussionboard_posts.id) to list only attachments belonging to a specific post."},"uploaded_by":{"oneOf":[{"type":"string","format":"uuid","description":"Restricts attachments to those uploaded by a specific user (discussionboard_members.id). Nullable for unconstrained."},{"type":"null","format":"uuid","description":"Restricts attachments to those uploaded by a specific user (discussionboard_members.id). Nullable for unconstrained."}],"description":"Restricts attachments to those uploaded by a specific user (discussionboard_members.id). Nullable for unconstrained."},"file_type":{"oneOf":[{"type":"string","description":"Filter for MIME type of file (e.g., 'image/png'). Allows listing only certain types of attachments."},{"type":"null","description":"Filter for MIME type of file (e.g., 'image/png'). Allows listing only certain types of attachments."}],"description":"Filter for MIME type of file (e.g., 'image/png'). Allows listing only certain types of attachments."},"uploaded_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower-bound (inclusive) filter for uploaded files by upload datetime, ISO8601."},{"type":"null","format":"date-time","description":"Lower-bound (inclusive) filter for uploaded files by upload datetime, ISO8601."}],"description":"Lower-bound (inclusive) filter for uploaded files by upload datetime, ISO8601."},"uploaded_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper-bound (inclusive) filter for upload datetime, ISO8601."},{"type":"null","format":"date-time","description":"Upper-bound (inclusive) filter for upload datetime, ISO8601."}],"description":"Upper-bound (inclusive) filter for upload datetime, ISO8601."},"page":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"description":"Page number for pagination (≥1), default 1 if omitted."},{"type":"null","format":"int32","minimum":1,"description":"Page number for pagination (≥1), default 1 if omitted."}],"description":"Page number for pagination (≥1), default 1 if omitted."},"limit":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"maximum":100,"description":"Maximum results per page, default specified by forum settings, up to 100."},{"type":"null","format":"int32","minimum":1,"maximum":100,"description":"Maximum results per page, default specified by forum settings, up to 100."}],"description":"Maximum results per page, default specified by forum settings, up to 100."},"sort_by":{"oneOf":[{"const":"uploaded_at","description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."},{"const":"file_name","description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."},{"const":"file_type","description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."},{"type":"null","enum":["uploaded_at","file_name","file_type"],"description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."}],"description":"Result sorting column. Enum includes 'uploaded_at', 'file_name', 'file_type'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order, 'asc' or 'desc'. Optional; default determined by backend."},{"const":"desc","description":"Sort order, 'asc' or 'desc'. Optional; default determined by backend."},{"type":"null","enum":["asc","desc"],"description":"Sort order, 'asc' or 'desc'. Optional; default determined by backend."}],"description":"Sort order, 'asc' or 'desc'. Optional; default determined by backend."}},"required":[],"description":"Query structure for searching and paginating post attachments. Used in user uploads UI, moderator panels, and attachment overviews."},"IPageIDiscussionboardPostAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostAttachment"},"description":"Array of post attachment records for current page."}},"required":["pagination","data"],"description":"Output structure for paginated attachment queries. Follows standard IPage<T> format for indexed lists."},"IDiscussionboardPostAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for post attachment (discussionboard_post_attachments.id). Required for reference and audit."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"The post's unique identifier to which the attachment belongs. Required for all attachment management actions."},"file_uri":{"type":"string","description":"URI or storage pointer to the uploaded file (e.g., S3, CDN, file service). Must be a safe URL or storage reference per security rules. Used for serving and downloading files."},"file_name":{"type":"string","description":"Filename displayed to users for this attachment. Must be a valid, safe string (no path traversal, XSS, etc.). Enforced by backend validation and upload."},"file_type":{"type":"string","description":"MIME type of the file (e.g., 'image/jpeg', 'application/pdf'). Used for validation and preview logic."},"uploaded_at":{"type":"string","format":"date-time","description":"Datetime file was uploaded (ISO 8601 format). Important for audit, sorting, and business rules."},"uploaded_by":{"type":"string","format":"uuid","description":"ID of the user who uploaded the attachment. Tracks responsible member, enforces upload/edit/delete permissions."}},"required":["id","discussionboard_post_id","file_uri","file_name","file_type","uploaded_at","uploaded_by"],"description":"Complete record for a file attached to a post. Satisfies business, security, and audit requirements for file metadata. Used in attachment display, download, and moderation APIs."},"IDiscussionboardPostAttachment.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post's unique identifier; associates file to this post. Must exist and be write-accessible to the uploader."},"file_uri":{"type":"string","description":"Storage location or CDN URI for the actual uploaded file. Must conform to backend security and file validation rules."},"file_name":{"type":"string","description":"Display filename for the attachment, used in UI/file pickers and for downloads."},"file_type":{"type":"string","description":"MIME type string, e.g., 'image/png', 'application/pdf'. Enforced by backend during upload for virus/malware/content policy."},"uploaded_by":{"type":"string","format":"uuid","description":"ID of the member uploading the file. Used to validate ownership, auditing, and permission enforcement."}},"required":["discussionboard_post_id","file_uri","file_name","file_type","uploaded_by"],"description":"Structure for new file attachment uploads in post content. Used in submission, moderation, and initial display workflows."},"IDiscussionboardPostAttachment.IUpdate":{"type":"object","properties":{"file_name":{"type":"string","description":"The display name of the attachment file. A user-friendly name presented in the UI; atomic text value used for identification and download purposes.\n\nMaps to the 'file_name' column in Prisma's 'discussionboard_post_attachments' table. If updated, changes how the file appears attached to the post—not used for the file storage name."},"file_type":{"type":"string","description":"MIME type representing the file, e.g., 'image/png', 'application/pdf'.\n\nThis field dictates preview/handling logic on the frontend. Maps to 'file_type' in the Prisma schema; updating may impact interface and download. Set to the new type when the file is replaced."},"file_uri":{"type":"string","description":"The URI or location of the actual file. Used to retrieve/download the file.\n\nMirrors the 'file_uri' field in the database. An update here may point to a new file version or replacement file. Must be a valid URI/URL (can be a remote or internal resource, such as AWS S3, CDN, etc.)."}},"required":["file_name","file_type","file_uri"],"description":"Update payload for post attachment record in the Discussion Board system. Each field corresponds to metadata for a file attached to a forum post. When updating, all three fields must be supplied to fully replace the attachment metadata. Descriptions based on the 'discussionboard_post_attachments' Prisma model and platform requirements.\n\nThis object is used in PUT/UPDATE operations and provides strong normalization between request data and audit tracking for compliance."},"IDeleteResult":{"type":"object","properties":{"status":{"type":"string","description":"Status message of the delete operation. Indicates whether the deletion was successful or provides error context.\n\nTypical values could be 'success', 'not found', 'already deleted', or detailed error messages, depending on business logic."},"deleted_at":{"oneOf":[{"type":"string","description":"ISO 8601 timestamp when the resource was deleted.\n\nNull if the object was previously deleted or the resource did not exist. Used for audit, compliance, and confirming time of logical/soft delete. Mirrors 'deleted_at' fields in Prisma soft-delete patterns."},{"type":"null","description":"ISO 8601 timestamp when the resource was deleted.\n\nNull if the object was previously deleted or the resource did not exist. Used for audit, compliance, and confirming time of logical/soft delete. Mirrors 'deleted_at' fields in Prisma soft-delete patterns."}],"description":"ISO 8601 timestamp when the resource was deleted.\n\nNull if the object was previously deleted or the resource did not exist. Used for audit, compliance, and confirming time of logical/soft delete. Mirrors 'deleted_at' fields in Prisma soft-delete patterns."}},"required":["status"],"description":"Result object returned after a DELETE (or soft-delete) API operation. Provides status of the delete action along with a timestamp if the action succeeded and was recorded. Standardized for Discussion Board resource deletion results."},"IDiscussionboardPostLike.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Filter by target post's UUID. Only like records associated with this post will be returned.\n\nDirectly aligns with 'discussionboard_post_id' in 'discussionboard_post_likes'. Allows clients to query for all likes on a single post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter by the member's UUID who gave likes. Can be used for dashboards showing what a particular member has liked.\n\nDirectly aligns with 'discussionboard_member_id' in 'discussionboard_post_likes'."},"from_created_at":{"type":"string","format":"date-time","description":"Start of the time range for filtering like records, using ISO 8601 datetime. Only likes created at or after this are returned."},"to_created_at":{"type":"string","format":"date-time","description":"End of the time range for like records, using ISO 8601 datetime. Only likes created at or before this timestamp will be included."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Defaults to 1 if not provided. Used for navigating large result sets."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of results to return per page. Defaults to system standard if not set. Used for pagination control."}},"description":"Request object for listing or searching DiscussionBoard post like records. All fields are optional and provide filtering/pagination for querying the 'discussionboard_post_likes' table. Maps to engagement analytics and personal dashboard needs.","required":[]},"IPageIDiscussionboardPostLike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostLike"},"description":"List of post like record objects matching the list query."}},"required":["pagination","data"],"description":"A paginated list of 'discussionboard_post_likes' records. Combines pagination meta (page/limit/total/etc.) and the core data set for client consumption. Used across all API endpoints returning bulk like data."},"IDiscussionboardPostLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post like record. Directly matches 'id' in the Prisma schema table. Used for referencing and auditing."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Post UUID that this like is attached to. Connects the like event with the forum post.\n\nReferences 'discussionboard_post_id' in 'discussionboard_post_likes'."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member UUID for the user who liked the post. Shows who performed the like action."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the like was given. Used in analytics and UI feeds."}},"required":["id","discussionboard_post_id","discussionboard_member_id","created_at"],"description":"Represents a single member's like on a discussion post in the 'discussionboard_post_likes' table. Every like is atomic, immutable, and tied to both a member and a post per business rules. This model is central for engagement, trending calculations, and moderator review."},"IDiscussionboardPostLike.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post's UUID. When creating a like, this is the post to be liked. Must refer to a valid post already in the system."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member UUID who is liking the post. Normally derived from authentication context."}},"required":["discussionboard_post_id","discussionboard_member_id"],"description":"Payload for creating a new post like record in the Discussion Board. Requires both the post and acting member IDs. Fulfills business logic: only one like per post/member pair; API must check for duplicates."},"IDiscussionboardPostLike.IUpdate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post's UUID for updating a like record. Normally cannot be changed for existing records, but included for update compliance if schema allows post reattribution."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member UUID for updating like attribution (typically not allowed in production, but present for audit/admin fix use cases)."}},"description":"Update data for a post like record in the Discussion Board. These fields may be only exposed to admins/moderators for audit correction. In production, like relationships are normally immutable post-creation.\n\nMirrors 'discussionboard_post_likes' schema fields.","required":[]},"IDiscussionboardPostDislike.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Filter for dislikes on a given post. UUID aligns with 'discussionboard_post_id' in the table."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter for dislikes from a specific member. UUID aligns with 'discussionboard_member_id' in 'discussionboard_post_dislikes'."},"from_created_at":{"type":"string","format":"date-time","description":"Low-end of creation time filter, using ISO 8601 datetime. Inclusive."},"to_created_at":{"type":"string","format":"date-time","description":"High-end of creation time filter."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Limit of records per page."}},"description":"Query/filter object for searching dislikes on posts within the Discussion Board. All fields are optional and provide flexible querying for moderation tools, analytics, or user dashboards.","required":[]},"IPageIDiscussionboardPostDislike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostDislike"},"description":"Array of post dislike records for the current result page."}},"required":["pagination","data"],"description":"Paginated result set for post dislikes. Combines pagination metadata and result array of dislike entries. Used by moderator dashboards, analytics, and user profile/history screens."},"IDiscussionboardPostDislike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post dislike record. Corresponds to 'id' in 'discussionboard_post_dislikes'."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post's ID. Indicates which post the dislike is for."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's UUID who disliked the post."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when the dislike event occurred."}},"required":["id","discussionboard_post_id","discussionboard_member_id","created_at"],"description":"Represents a single member's dislike on a discussion post. Stored atomically in 'discussionboard_post_dislikes'. Each record is an immutable event reflecting negative feedback, used for moderation and analytic workflows."},"IDiscussionboardPostDislike.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post being disliked. Must exist in the system."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member disliking the post. Set from the authentication/user context."}},"required":["discussionboard_post_id","discussionboard_member_id"],"description":"Payload for creating a post dislike record in the Discussion Board. Requires post and member UUID. Validates no duplicate entries are created for post/member pair per business rule."},"IDiscussionboardPostDislike.IUpdate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Target post for updating a dislike record. In practice, should only be used in admin/audit scenarios for post reattribution."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Updated member UUID for the dislike event, if necessary for audit correction."}},"description":"Update object for post dislike record on the Discussion Board. These operations are generally highly restricted and intended only for audit/admin repair workflows; normal like/dislike relationships should not be changed in end-user flows.\n\nProperties match the table schema; all fields optional for partial updates.","required":[]},"IDiscussionboardCommentLike.IRequest":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"The unique identifier of the comment for which likes are being queried.\n\nReferenced from the discussionboard_comments table. Used in filtering which comment's like records to retrieve.\n\nBased on the business rule, only likes for valid (non-deleted) comments will be returned."},"member_id":{"type":"string","format":"uuid","description":"The unique identifier of the member whose likes are being queried.\n\nReferences the discussionboard_members table. Used to filter comment likes by the member who performed the action.\n\nIf omitted, lists likes from all members subject to permissions."},"created_after":{"type":"string","format":"date-time","description":"Optional filter to retrieve likes created after a specified ISO 8601 timestamp.\n\nUseful for time-based queries in moderation and analytics workflows.\n\nIf not supplied, no lower time bound is applied."},"created_before":{"type":"string","format":"date-time","description":"Optional filter to retrieve likes created before a specific ISO 8601 timestamp.\n\nSupports time-windowed searches for reporting or analytics.\n\nIf not specified, no upper bound filter is applied."},"page":{"type":"integer","minimum":1,"description":"Pagination: the number of the page to retrieve (1-based). Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Pagination: maximum number of comment like records per page. Default is 20, maximum is 100."},"sort_key":{"oneOf":[{"const":"created_at","description":"Sort key for ordering comment likes. Supported values: 'created_at', 'comment_id', 'member_id'. Default is 'created_at'."},{"const":"comment_id","description":"Sort key for ordering comment likes. Supported values: 'created_at', 'comment_id', 'member_id'. Default is 'created_at'."},{"const":"member_id","description":"Sort key for ordering comment likes. Supported values: 'created_at', 'comment_id', 'member_id'. Default is 'created_at'."}],"description":"Sort key for ordering comment likes. Supported values: 'created_at', 'comment_id', 'member_id'. Default is 'created_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for the selected key. 'asc' for ascending, 'desc' for descending. Default is 'desc'."},{"const":"desc","description":"Sort order for the selected key. 'asc' for ascending, 'desc' for descending. Default is 'desc'."}],"description":"Sort order for the selected key. 'asc' for ascending, 'desc' for descending. Default is 'desc'."}},"required":[],"description":"Request object for searching, filtering, and paginating comment like records in the DiscussionBoard.\n\nMaps to fields in the discussionboard_comment_likes table. Used by moderators, admins, and members to list engagement records with applied filters and sorting.\n\nEach property corresponds to an atomic query parameter, strictly normalized as per database and business rule definitions."},"IPageIDiscussionboardCommentLike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentLike"},"description":"A list of comment like objects returned in this page."}},"required":["pagination","data"],"description":"Paginated list/summary container for discussionboard_comment_likes records.\n\nContains both the results array and pagination metadata, with references to the schema that enforces normalized/atomic data in each list entry."},"IDiscussionboardCommentLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment like record.\n\nReferences the primary key in the discussionboard_comment_likes table.\n\nEnables precise, atomic tracking for audit trail, analytics, and reporting workflows."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"The unique identifier of the comment that received the like.\n\nForeign key to discussionboard_comments.id. Directly supports engagement analytics, abuse-reporting correlations, and UI summaries of who liked each comment."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Unique identifier of the member who performed the like.\n\nReferences discussionboard_members.id. Critical for audit, rate-limiting, and eligibility checks in business rules."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this like was recorded by the system.\n\nStored as an ISO 8601 string. Used for time-bounded queries, user history, and engagement trend analyses."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","created_at"],"description":"Represents one like action performed by a member on a comment in the DiscussionBoard.\n\nAtomic record in the discussionboard_comment_likes table. All properties map to database fields and are required for audit, analytics, and engagement logic."},"IDiscussionboardCommentLike.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"The unique identifier of the comment to like.\n\nMust reference a valid, non-deleted comment in discussionboard_comments.\n\nThis field is required for the like creation business logic."}},"required":["discussionboard_comment_id"],"description":"Schema for creating (adding) a like to a comment in the DiscussionBoard system.\n\nUsed in POST endpoints.\n\nRequires specifying the comment to like. The liking member is inferred from the authentication context.\n\nEnsures clean normalization and enforcement against duplicate likes by the same member for the same comment."},"IDiscussionboardCommentLike.IUpdate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"(If supported) Change the comment being liked. Usually restricted; changing the reference after creation is rare but permitted in audit/admin correction scenarios.\n\nReferences discussionboard_comments.id.\n\nShould not allow setting to a comment already liked by the same member."}},"required":[],"description":"Schema for updating a comment like record, usually in moderation or audit correction scenarios.\n\nIn standard operations, likes are immutable. However, admins or business logic may allow limited updates (e.g., correcting the referenced comment).\n\nAll updates must be audit-logged with before/after state."},"IDiscussionboardCommentDislike.IRequest":{"type":"object","properties":{"comment_id":{"type":"string","format":"uuid","description":"Filter by the unique identifier of the comment whose dislikes are being queried.\n\nReferences discussionboard_comments.id.\n\nUsed in dislike engagement analytics and moderation."},"member_id":{"type":"string","format":"uuid","description":"Filter by the member who performed the dislike.\n\nReferences discussionboard_members.id.\n\nSupports per-user dislike tracking for feature and audit use cases."},"created_after":{"type":"string","format":"date-time","description":"Retrieve dislikes created after this ISO 8601 timestamp.\n\nUseful for time-series analytics, reporting, and burst analysis in content moderation."},"created_before":{"type":"string","format":"date-time","description":"Retrieve dislikes created before this ISO 8601 timestamp.\n\nUsed for data-windowing and snapshot reporting."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number to retrieve (1-based). Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Pagination: maximum records per page. Default is 20, max is 100."},"sort_key":{"oneOf":[{"const":"created_at","description":"Sort key: one of 'created_at', 'comment_id', 'member_id'. Default: 'created_at'."},{"const":"comment_id","description":"Sort key: one of 'created_at', 'comment_id', 'member_id'. Default: 'created_at'."},{"const":"member_id","description":"Sort key: one of 'created_at', 'comment_id', 'member_id'. Default: 'created_at'."}],"description":"Sort key: one of 'created_at', 'comment_id', 'member_id'. Default: 'created_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order: 'asc' (ascending) or 'desc' (descending). Default: 'desc'."},{"const":"desc","description":"Sort order: 'asc' (ascending) or 'desc' (descending). Default: 'desc'."}],"description":"Sort order: 'asc' (ascending) or 'desc' (descending). Default: 'desc'."}},"required":[],"description":"Request object for searching/filtering/paginating comment dislike records, following the atomic structure of discussionboard_comment_dislikes.\n\nEach field is atomic and filterable; designed for analytics, moderation, and user history queries.\n\nFollows normalized, audit-friendly DB column mapping."},"IPageIDiscussionboardCommentDislike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentDislike"},"description":"Array of comment dislike records present in this paginated result."}},"required":["pagination","data"],"description":"Paginated page container for comment dislikes (engagement/analytic/feedback purposes).\n\nIncludes result data and page cursor metadata. Atomic and compliant with standard IPage pattern."},"IDiscussionboardCommentDislike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for the comment dislike event/record. Atomic and references primary key in discussionboard_comment_dislikes."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Comment ID indicating which comment was disliked.\n\nForeign key from discussionboard_comments.id.\n\nRequired for both audit and UI engagement analytics."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"The member ID who performed the dislike.\n\nReferences discussionboard_members.id. Supports audit, anti-abuse, and feedback systems."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the dislike event was recorded by the system.\n\nSupports analytics, moderation, and time-limited engagement queries."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","created_at"],"description":"Atomic record representing a single dislike event for a comment in the DiscussionBoard.\n\nRows follow strict normalization; all fields are required for audit and analytics.\n\nReflects engagement/feedback for threaded comments."},"IDiscussionboardCommentDislike.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"UUID of the comment to be disliked.\n\nMust belong to a valid, non-deleted comment.\n\nBusiness logic prevents duplicate dislikes by the same member for the same comment.\n\nThis is required for creating the dislike record."}},"required":["discussionboard_comment_id"],"description":"Schema for creating a dislike event for a comment, attached to the active member from the authentication context.\n\nEnforces normalization: each entry is an atomic dislike event for a specific member and comment.\n\nHandles duplicate and permission checks as per business logic."},"IDiscussionboardCommentDislike.IUpdate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"(If business rules allow) Update the referenced comment for this dislike record. Normally, dislikes are immutable but admin/audit flows might permit correction or re-attribution.\n\nReferences discussionboard_comments.id."}},"required":[],"description":"Schema for updating a comment dislike record—usually for audit/admin error correction.\n\nRegular member operations don't permit modification, but admins may update for compliance.\n\nEvery change must be audit-logged."},"IDiscussionboardPostReport.IRequest":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"Restrict search to reports for a specific post. References discussionboard_posts.id.\n\nCritical for moderation workflow filtering and targeted abuse review."},"reporting_member_id":{"type":"string","format":"uuid","description":"Limit results to reports filed by this member. References discussionboard_members.id.\n\nUsed for member history review, rate-limiting enforcement, and abuse prevention."},"created_after":{"type":"string","format":"date-time","description":"Retrieve post reports created after this date/time (ISO 8601).\n\nEnables time-windowed analysis for analytics and reporting dashboards."},"created_before":{"type":"string","format":"date-time","description":"Retrieve post reports created before this date/time (ISO 8601).\n\nHelps provide time-bounded results for reporting and audit trails."},"reason_search":{"type":"string","description":"Full-text search within the report reason field.\n\nUsed for advanced filter scenarios where specific types of reports (spam, abuse) are targeted for review."},"page":{"type":"integer","minimum":1,"default":1,"description":"Pagination: which page of results to return (1-based, default 1)."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Pagination: maximum records per page (default 20, maximum 100)."},"sort_key":{"oneOf":[{"const":"created_at","description":"Sort key field. Allowed values: 'created_at', 'post_id', 'reporting_member_id'. Default is 'created_at'."},{"const":"post_id","description":"Sort key field. Allowed values: 'created_at', 'post_id', 'reporting_member_id'. Default is 'created_at'."},{"const":"reporting_member_id","description":"Sort key field. Allowed values: 'created_at', 'post_id', 'reporting_member_id'. Default is 'created_at'."}],"description":"Sort key field. Allowed values: 'created_at', 'post_id', 'reporting_member_id'. Default is 'created_at'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order: 'asc' or 'desc'. Default is 'desc'."},{"const":"desc","description":"Sort order: 'asc' or 'desc'. Default is 'desc'."}],"description":"Sort order: 'asc' or 'desc'. Default is 'desc'."}},"required":[],"description":"Search and filter object for querying reported posts for moderation workflows.\n\nAll fields are mapped to a strict, normalized database schema in discussionboard_post_reports.\n\nUsed by moderation UIs to efficiently filter, search, and review reported post events per business rules."},"IPageDiscussionboardPostReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPostReport"},"description":"The list of DiscussionBoard post report records for this page."}},"required":["pagination","data"],"description":"Page container type for a paginated result of post abuse/spam report records in the DiscussionBoard.\n\nFollows the IPage<T> pattern for page metadata and result data arrays."},"IDiscussionboardPostReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for this post report. It corresponds to the 'id' field in the Prisma table `discussionboard_post_reports`. This value is required for consistent referencing and system operations.\n\nUUID values ensure global uniqueness and support system-wide identification, including audit and moderation workflows."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"The identifier of the post being reported. References a record in the posts entity, not a foreign key constraint, but used to trace moderation and reporting chains.\n\nSupports audit, abuse tracking, and is used in moderation dashboards."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Identifier of the member who reported the post. This is a foreign key to the reporting user, essential for quota enforcement (e.g., max 10 reports/day) and audit compliance.\n\nUsed for tracking user engagement, abuse control, and reporting rate limits."},"reason":{"type":"string","description":"The reason provided by the member for reporting this post. Supports normalized atomic reasons. Examples include 'Spam', 'Hate speech', etc.\n\nFreeform string per business rule. Used for moderation filtering and insight analytics."},"created_at":{"type":"string","format":"date-time","description":"The timestamp the report was created. Full ISO8601 string. Used for rate-limiting and workflow ordering.\n\nRequired by business compliance and for effective moderation review."}},"required":["id","discussionboard_post_id","discussionboard_member_id","reason","created_at"],"description":"A record of a post report submitted by a member, stored in the Prisma table `discussionboard_post_reports`. Represents an abuse/reporting event linked to a particular post for moderation review.\n\nIncludes all key fields required for audit, business rule, and review workflows in the discussion board system."},"IDiscussionboardPostReport.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID identifier of the post the member is reporting. Cross-references `discussionboard_posts.id`."},"reason":{"type":"string","description":"Human-readable reason for reporting this post. Examples: 'Spam', 'Offensive language'. Fulfills normalized business logic."}},"required":["discussionboard_post_id","reason"],"description":"Input payload used to create a new post report in the discussion board system. Sent by authenticated users when submitting a report via the API.\n\nMatches the writable fields as per the Prisma schema and business rules. `discussionboard_member_id` (the reporter) is inferred from authentication context."},"IDiscussionboardPostReport.IUpdate":{"type":"object","properties":{"reason":{"type":"string","description":"(Optional) Updates the reason provided for this report. May be used for correction or moderator commentary, as permitted by business rules."}},"required":["reason"],"description":"Payload used for updating an existing post report record. Primarily used by moderators or admins for workflow correction.\n\nIncludes only mutable fields. In most cases, only `reason` can be revised."},"IDiscussionboardPostReport.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the delete operation was successful."},"deleted_id":{"type":"string","format":"uuid","description":"UUID of the deleted report, confirming which entity was removed. For audit and client UI confirmation."}},"required":["success","deleted_id"],"description":"Result/confirmation object returned by a delete operation on a post report in the system. Used for client confirmation and audit trail."},"IDiscussionboardCommentReport.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter for reports related to a specific comment. UUID as per the `discussionboard_comments.id` field."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter to show reports made by a specific member (the reporter). Corresponds to `discussionboard_members.id`."},"reason":{"type":"string","description":"Text search or filter for the report reason. Matches normalized 'reason' field for analytics or workflow triage."},"page":{"type":"integer","format":"int32","description":"Pagination: page number. Used to browse paginated results. Follows the system's standard page-based navigation."},"limit":{"type":"integer","format":"int32","description":"Pagination: maximum records per page. Used for API scalability and frontend client batching."}},"required":[],"description":"Query and filter parameters for listing/searching comment reports in the moderation view. Used to retrieve paginated results by moderators/admins.\n\nAll parameters are optional, supporting flexible query composition for moderation dashboards."},"IPageDiscussionboardCommentReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentReport"},"description":"Array of comment report summary/details."}},"required":["pagination","data"],"description":"Paginated list result structure for comment reports. Matches the standard IPage<T> interface for the discussion board system.\n\nSupplies both page metadata and array of comment report objects, supporting robust UI/data traversal for moderators/admins."},"IDiscussionboardCommentReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for this comment report. Refers to the `id` in the Prisma `discussionboard_comment_reports` table."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"The comment that was reported. Corresponds to `discussionboard_comments.id`."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member (reporter) who filed the report. Corresponds to `discussionboard_members.id`."},"reason":{"type":"string","description":"Reason string describing why the report was made. Freeform by business rule."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the report was submitted, ISO8601."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","reason","created_at"],"description":"Entity representing a report submitted against a comment by a member. Matches an entry in the `discussionboard_comment_reports` Prisma table, including all key audit, relationship, and business logic fields required for moderation workflow."},"IDiscussionboardCommentReport.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment (UUID) being reported. Cross-references `discussionboard_comments.id`."},"reason":{"type":"string","description":"Freeform reason from the reporting member, e.g., 'Spam', 'Profanity', etc. Used for moderation workflow."}},"required":["discussionboard_comment_id","reason"],"description":"Input object for creating a new report against a comment. Fields align with writable data by end-users in the API, and mapped to the discussion board's moderation reporting workflow."},"IDiscussionboardCommentReport.IUpdate":{"type":"object","properties":{"reason":{"type":"string","description":"Revised/updated reason for report, allowed under moderation audit/correction or special business rules."}},"required":["reason"],"description":"Payload for updating (correcting) the reason or details for an existing comment report. Only used by moderation/admin workflows as allowed by business policy."},"IDiscussionboardCommentReport.IDeleteResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates if the deletion was successful."},"deleted_id":{"type":"string","format":"uuid","description":"UUID of the deleted comment report."}},"required":["success","deleted_id"],"description":"Result/confirmation object returned after deleting a comment report. Used for client workflow and audit confirmation."},"IDiscussionboardTagProposal.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"(Optional) Filter proposals by member ID. Useful for showing a member's submissions for moderation review."},"proposed_tag":{"type":"string","description":"(Optional) Partial or exact-match filter on the tag string proposed by members. Used for search and moderation curation."},"page":{"type":"integer","format":"int32","description":"Pagination page number for listing moderation requests."},"limit":{"type":"integer","format":"int32","description":"Max number of proposals to return per page. Used for pagination, scalability, and rate-limiting."}},"required":[],"description":"Filter and query parameters for listing/searching tag proposals submitted by members. Used in the moderation and curation dashboard APIs. All properties are optional for flexible queries."},"IPageDiscussionboardTagProposal":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardTagProposal"},"description":"The array of tag proposal summary/detail objects for the page."}},"required":["pagination","data"],"description":"Paginated array result structure for listing tag proposals. Follows system-standard IPage<T> response contracts to handle metadata and records."},"IDiscussionboardTagProposal":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for each tag proposal.\n\nThis is the atomic ID for referencing the tag proposal record in all moderation, admin workflow, and business logic layers. It is stored as a UUID and ensures 3NF normalization by not duplicating or calculating information elsewhere. Used in querying, audit logs, and reviewing proposals."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member's unique identifier (UUID) who is proposing the tag to the forum.\n\nLinks directly to the member (user) object. Fulfills business and audit requirements for tracing who proposed each tag and supporting accountability. Never nullable."},"proposed_tag":{"type":"string","description":"String value of the tag being proposed. Must be unique for each member proposal.\n\nCarries the atomic tag label string that the proposing user entered. Used in tag creation flows, moderation, and anti-abuse logic. Supports uniqueness constraints, profanity filtering, and business validation at the API/business layer."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for when the tag proposal was submitted.\n\nSupports audit/lifecycle flows for the tag curation system, rate-limiting logic for proposals, and analytics. Always present."}},"required":["id","discussionboard_member_id","proposed_tag","created_at"],"description":"Discussion Board Tag Proposal entity representing an atomic proposal for a new topic tag to be added to the curated set.\n\nRefer to the requirements regarding curated tags and proposal/approval moderation flow. This model is normalized and tracks proposals per member for audit, curation, and abuse prevention. Every tag proposal is linked to its proposing member, supports rate-limiting and anti-abuse business logic, and enables end-to-end lifecycle tracking for tag onboarding."},"IDiscussionboardTagProposal.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member proposing the tag, fulfilling the business requirement to associate all proposals with an authenticated user.\n\nKey for validation, curation review, and auditing."},"proposed_tag":{"type":"string","description":"String representing the tag being proposed for addition.\n\nEnsures 3NF compliance. Uniqueness required (per member) and subject to moderation, profanity filtering, and system-wide tag policy. Examples: 'Elections', 'Macroeconomics', 'CampaignFinance'."}},"required":["discussionboard_member_id","proposed_tag"],"description":"Request body schema for creating a new tag proposal.\n\nProvided by a member submitting a new tag for moderator/admin review. Only authenticated, non-suspended members may create proposals. Used in rate-limiting and tag curation flows."},"IDiscussionboardTagProposal.IUpdate":{"type":"object","properties":{"proposed_tag":{"type":"string","description":"Updated tag string for the proposal. Must comply with tag guidelines, maintain uniqueness per member, and be subject to all business and moderation filtering rules."}},"required":["proposed_tag"],"description":"Request body schema for updating an existing tag proposal.\n\nPermits a member or privileged moderator/admin to change the string of a proposed tag before review. Must comply with tag naming, uniqueness, and community rules."},"IDiscussionboardReport.IRequest":{"type":"object","properties":{"reported_by_member_id":{"type":"string","format":"uuid","description":"UUID of the reporting member (who filed the report), for filtering/search.\n\nAids in moderation review, audit, and rate-limiting reporting flows."},"resolved_by_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who resolved this report (if resolved). Useful for filtering by handler or admin in moderation dashboards."},"status":{"type":"string","description":"Moderation workflow status for filtering (e.g. 'pending', 'reviewed', 'actioned', 'dismissed').\n\nEnforces search, queueing, and reporting flows per requirements."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of target post, for searching reports by content. Supports reporting, audit, and moderation use-cases."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of the target comment for filtering comment-specific reports."},"created_from":{"type":"string","format":"date-time","description":"Lower-bound datetime for filtering reports created after this moment in time."},"created_to":{"type":"string","format":"date-time","description":"Upper-bound datetime for filtering reports created before this time."},"page":{"type":"integer","format":"int32","description":"Pagination: requested page number (1-based default)."},"limit":{"type":"integer","format":"int32","description":"Pagination: number of reports per page (API and UI enforce reasonable per-request caps for system health)."}},"required":[],"description":"Request body schema for listing or searching moderation reports.\n\nEnables paginated, filterable queries for all moderation reports. Supports queueing, batch review, and audit/reporting use-cases. Reference to business requirements for rate-limiting, workflow status, and moderation dashboard UX."},"IPageDiscussionboardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardReport"},"description":"Array of report entities for the current result page."}},"required":["pagination","data"],"description":"Paginated search/list result for moderation reports (discussionboard_reports).\n\nContains queueable result items for moderation dashboards, analytics, and batch admin workflows. Used for implementation of audit trails and review logs."},"IDiscussionboardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for each report entity.\n\nAtomic UUID for referencing the report in all moderation, audit, and dashboard logic. Supports audit, appeals, and rate-limiting enforcement."},"reported_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member who filed the report. Links to user account history, supports abuse/rate-limiting controls, and allows for statistical dashboards tracking reporting activity."},"resolved_by_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who resolved this report. Nullable if unresolved or resolution is automated. Business logic references audit, review, and transparency rules."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of the reported post if this report targets a post. Null if not a post report."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of the reported comment if this report targets a comment entity. Null if not applicable."},"reason":{"type":"string","description":"Human-readable string reason for report (e.g., 'Spam', 'Hate Speech', or custom message).\n\nRefer to content guidelines and moderation policy for required handling, audit, and evidentiary trace."},"status":{"type":"string","description":"Current workflow status (e.g., 'pending', 'reviewed', 'actioned', 'dismissed').\n\nEnables queueing, automated handling, state transitions, and process tracking for the moderation team."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for report creation. Supports audit trails, reporting, and appeals workflows."},"resolved_at":{"type":"string","format":"date-time","description":"When the report was resolved (null if unresolved/ongoing). For workflow tracking, audit, resolution, and transparency features."}},"required":["id","reported_by_member_id","reason","status","created_at"],"description":"Moderation Report entity representing a flagged post or comment as reported by a board member, tracked through resolution workflow.\n\nTracks detailed moderation, audit, and appeal status for reported posts or comments. Atomic record used in moderation dashboards, appeals, compliance records. All handling of report is governed by transparency, workflow, and logging business rules."},"IDiscussionboardReport.ICreate":{"type":"object","properties":{"reported_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member filing the report, ensuring auditability and enforcing business validation/rate limit per user."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of the post being reported (nullable—must have either post or comment)."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of the comment being reported (nullable—must have either post or comment)."},"reason":{"type":"string","description":"The reason for reporting (free-form or policy-guided string).\n\nMay be constrained by content policy, with predefined categories and/or custom entries."}},"required":["reported_by_member_id","reason"],"description":"Request body schema for creating a new moderation report.\n\nMember-supplied input for flagging content (post or comment) for review. Must satisfy business/logical enforcement for per-user rate-limiting, content validation, and correctness in targeting either post or comment but not both."},"IDiscussionboardReport.IUpdate":{"type":"object","properties":{"resolved_by_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who is resolving this report. Tracked for audit, transparency, and operational metrics."},"status":{"type":"string","description":"Workflow status after resolution (e.g. 'reviewed', 'actioned', 'dismissed'). Enforced by moderation, audit, and analytics."},"resolved_at":{"type":"string","format":"date-time","description":"Timestamp marking when the report was resolved. Required for proper audit/compliance."}},"required":["resolved_by_moderator_id","status","resolved_at"],"description":"Request body schema for updating (resolving) a moderation report.\n\nSupplies required information for closing, dismissing, or actioning the flagged content, meeting all compliance, audit, and transparency rules."},"IDiscussionboardModerationLog.IRequest":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator whose actions are being queried/filtering.\n\nAids in accountability dashboards and audit logs."},"action_type":{"type":"string","description":"Moderation action type filter (e.g. 'delete_post', 'issue_warning', etc). Enables search by type via dashboard, analytics, or audit review mechanisms."},"target_type":{"type":"string","description":"Target entity type string (e.g. 'post', 'comment', 'member', 'tag'). Allows focused action review according to content or user affected."},"target_id":{"type":"string","format":"uuid","description":"UUID of the target entity in question (post/comment/member etc). For use in targeted event search flows."},"from":{"type":"string","format":"date-time","description":"Lower-bound for action_at range filtering."},"to":{"type":"string","format":"date-time","description":"Upper-bound for action_at range filtering."},"page":{"type":"integer","format":"int32","description":"Pagination: requested result page index (1-based)."},"limit":{"type":"integer","format":"int32","description":"Pagination: number of logs per page (API and UI enforce per-request upper limits)."}},"required":[],"description":"Request body schema for querying/paginating moderation logs.\n\nAllows filtering by moderator, action type, target, and period for investigation, reporting, or analytics."},"IPageDiscussionboardModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerationLog"},"description":"Array of moderation log entries for current page."}},"required":["pagination","data"],"description":"Paginated moderation log result schema.\n\nCarries array of log entities and full pagination info as required for audit review, dashboard query, and process analytics."},"IDiscussionboardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the moderation log entry.\n\nAtomic reference for audit, investigation, and appeals workflows."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who performed this action. Used for accountability, operational metrics, and appeals tracking."},"target_member_id":{"type":"string","format":"uuid","description":"UUID of the affected member if a user-targeted action (nullable where content-only actions are involved). Enables compliance, escalation ladders, contextual appeals."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of affected post if action is related to a post (null otherwise). Nested targets handled in audit/business logic."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of affected comment if moderation activity is on a comment. Null for non-comment actions."},"action_type":{"type":"string","description":"String code for log action (e.g. 'delete_post', 'suspend_member'). Categorical and used for operational analytics and audit clarity."},"action_details":{"type":"string","description":"Extra information describing the moderation action. Null if not provided. Supports compliance, appeals reference."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the moderation event took place. For investigation/audit timelines."}},"required":["id","moderator_id","action_type","created_at"],"description":"Moderation log entity representing moderator/admin actions for audit, analytics, and compliance recording.\n\nEach event is standalone and atomic for legal, appeals, and governance requirements. References moderator, target entities (user, post, comment), log action and time, with optional additional detail."},"IDiscussionboardModerationLog.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator creating the log event. Needed for accountability, auditing, and workflow linkage."},"action_type":{"type":"string","description":" String code for the type of moderation event performed (e.g., 'delete_post', 'warn_user').\n\nOpen string category enabling operational analytics, reporting, and flexibility in business rule extensions."},"target_member_id":{"type":"string","format":"uuid","description":"UUID of affected member, for user-directed actions. Null if event is not user-related."},"target_post_id":{"type":"string","format":"uuid","description":"UUID of affected post for content moderation events. Null if unrelated."},"target_comment_id":{"type":"string","format":"uuid","description":"UUID of affected comment entity. Null if unrelated to comment moderation."},"action_details":{"type":"string","description":"Optional descriptive narrative explaining what was done, justification, or evidence/log trace. Used for appeals and compliance."}},"required":["moderator_id","action_type"],"description":"Request body schema for creating a moderator action log entry.\n\nEnforced for all moderator/admin interventions (delete, suspend, warn, tag action, etc) to provide a traceable action trail per organizational, legal, and community governance requirements."},"IDiscussionboardModerationLog.IUpdate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"The ID of the moderator who performed or is responsible for the moderation action. Used to track accountability and link actions to specific staff. This field should be a valid UUID string referencing the moderator's unique record."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member who is the subject of the moderation action, if applicable. Nullable if the action is not directed at a specific user (e.g., targeting a post or comment instead). Always a valid UUID or null."},{"type":"null","format":"uuid","description":"ID of the member who is the subject of the moderation action, if applicable. Nullable if the action is not directed at a specific user (e.g., targeting a post or comment instead). Always a valid UUID or null."}],"description":"ID of the member who is the subject of the moderation action, if applicable. Nullable if the action is not directed at a specific user (e.g., targeting a post or comment instead). Always a valid UUID or null."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the affected post, applicable for actions such as 'delete_post', 'edit_post', etc. Nullable if not relevant for this moderation action. Must be a valid UUID string or null."},{"type":"null","format":"uuid","description":"ID of the affected post, applicable for actions such as 'delete_post', 'edit_post', etc. Nullable if not relevant for this moderation action. Must be a valid UUID string or null."}],"description":"ID of the affected post, applicable for actions such as 'delete_post', 'edit_post', etc. Nullable if not relevant for this moderation action. Must be a valid UUID string or null."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the affected comment, applicable for actions on comments. Nullable for non-comment actions. Must be a valid UUID or null."},{"type":"null","format":"uuid","description":"ID of the affected comment, applicable for actions on comments. Nullable for non-comment actions. Must be a valid UUID or null."}],"description":"ID of the affected comment, applicable for actions on comments. Nullable for non-comment actions. Must be a valid UUID or null."},"action_type":{"type":"string","description":"Normalized code indicating the type of moderation action (e.g., 'deleted_post', 'suspended_user', etc.). Provides a consistent action taxonomy per business, audit, and reporting needs."},"action_details":{"oneOf":[{"type":"string","description":"Additional details, context, or moderator notes for the action. Freeform text to elaborate justification or action outcome. Nullable."},{"type":"null","description":"Additional details, context, or moderator notes for the action. Freeform text to elaborate justification or action outcome. Nullable."}],"description":"Additional details, context, or moderator notes for the action. Freeform text to elaborate justification or action outcome. Nullable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the moderation action occurred, in ISO 8601 format. Used for audit trails, escalation time analysis, and incident reviews."}},"required":["moderator_id","action_type","created_at"],"description":"Update payload for the DiscussionBoard moderation log entity, representing changes to a specific moderator action. This schema supports audit trail corrections, additional data enrichment, or resolving historic moderation entries. Referenced Prisma DB table: discussionboard_moderation_logs.\n\nEach moderation action log documents a single intervention or decision by a moderator, with linkage to the affected member/post/comment (if any), action type, details, and time. Updates may be restricted to certain fields for preserving audit chain integrity. Used by admin and compliance tools."},"IDiscussionboardSuspensionRecord.IRequest":{"type":"object","properties":{"suspended_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member whose suspension records are being searched for. Nullable to include all members. Used for targeted dashboard queries or appeals workflows."},{"type":"null","format":"uuid","description":"ID of the member whose suspension records are being searched for. Nullable to include all members. Used for targeted dashboard queries or appeals workflows."}],"description":"ID of the member whose suspension records are being searched for. Nullable to include all members. Used for targeted dashboard queries or appeals workflows."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderator who issued the suspension, for filtering. Null indicates no filter. Facilitates moderator activity analysis or audit."},{"type":"null","format":"uuid","description":"ID of the moderator who issued the suspension, for filtering. Null indicates no filter. Facilitates moderator activity analysis or audit."}],"description":"ID of the moderator who issued the suspension, for filtering. Null indicates no filter. Facilitates moderator activity analysis or audit."},"start_after":{"oneOf":[{"type":"string","format":"date-time","description":"Filtering criterion: Include only started after this ISO 8601 timestamp. Nullable if not filtering by start time."},{"type":"null","format":"date-time","description":"Filtering criterion: Include only started after this ISO 8601 timestamp. Nullable if not filtering by start time."}],"description":"Filtering criterion: Include only started after this ISO 8601 timestamp. Nullable if not filtering by start time."},"end_before":{"oneOf":[{"type":"string","format":"date-time","description":"Filtering criterion: Include only ended before this ISO 8601 timestamp. Nullable if not filtering by end time."},{"type":"null","format":"date-time","description":"Filtering criterion: Include only ended before this ISO 8601 timestamp. Nullable if not filtering by end time."}],"description":"Filtering criterion: Include only ended before this ISO 8601 timestamp. Nullable if not filtering by end time."},"revoked":{"oneOf":[{"type":"boolean","description":"If true, only revoked suspensions are included; if false, only non-revoked suspensions. If null, include all regardless of revoked status."},{"type":"null","description":"If true, only revoked suspensions are included; if false, only non-revoked suspensions. If null, include all regardless of revoked status."}],"description":"If true, only revoked suspensions are included; if false, only non-revoked suspensions. If null, include all regardless of revoked status."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"The page number for paginated results. Optional/null means default (typically page 1 in standard paging semantics)."},{"type":"null","minimum":1,"description":"The page number for paginated results. Optional/null means default (typically page 1 in standard paging semantics)."}],"description":"The page number for paginated results. Optional/null means default (typically page 1 in standard paging semantics)."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Maximum records per page. Helps with pagination UI and dashboard performance. Nullable for default."},{"type":"null","minimum":1,"description":"Maximum records per page. Helps with pagination UI and dashboard performance. Nullable for default."}],"description":"Maximum records per page. Helps with pagination UI and dashboard performance. Nullable for default."}},"required":[],"description":"Request body structure for querying or filtering suspension records as implemented for the DiscussionBoard platform (discussionboard_suspension_records). Allows filtering by suspended member, issuing moderator, date ranges, revocation status, and includes pagination. Used in moderator/admin dashboards and compliance reporting."},"IPageIDiscussionboardSuspensionRecord":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination meta information describing the current set, total count, pages, etc."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSuspensionRecord"},"description":"The array of suspension records returned by the paginated query, filtered as per request criteria."}},"required":["pagination","data"],"description":"Container object for a page of DiscussionBoard suspension records, as used by the platform’s listing APIs. Supports collection listing with paging meta per IPage<T> pattern. See DiscussionBoard business rules regarding minimum retention and paging limits."},"IDiscussionboardSuspensionRecord":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of this suspension record (Prisma PK). Used for audit, dereferencing, and updates."},"suspended_member_id":{"type":"string","format":"uuid","description":"ID of the member who is/was suspended. References the member’s main record ID. Required for lookup, dashboard display, and audits."},"issued_by_moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator who issued the suspension. Business rule: Must reference a valid moderator, even if suspension is later escalated to admin. Enforced by FK in DB."},"start_at":{"type":"string","format":"date-time","description":"The date/time the suspension began. Must be in ISO 8601 format. Used for enforcement windows and time-based policy reporting."},"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the suspension ends, or null for permanent suspensions. Used by enforcement logic and appeal workflows."},{"type":"null","format":"date-time","description":"When the suspension ends, or null for permanent suspensions. Used by enforcement logic and appeal workflows."}],"description":"When the suspension ends, or null for permanent suspensions. Used by enforcement logic and appeal workflows."},"reason":{"type":"string","description":"Human-readable or rule-based reason describing why the suspension was issued. Required for audit, compliance, and support. Example: 'Multiple policy violations'."},"revoked":{"type":"boolean","description":"True if this suspension was lifted before expiration. Records appeal or moderator/admin action. Used for escalation decision analytics."},"created_at":{"type":"string","format":"date-time","description":"When the suspension record was created in the system. Used for audit/compliance, appeals, and expiration policies."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"When, if ever, this suspension was revoked. Null if suspension was never lifted early. Required for policy compliance and appeals analytics."},{"type":"null","format":"date-time","description":"When, if ever, this suspension was revoked. Null if suspension was never lifted early. Required for policy compliance and appeals analytics."}],"description":"When, if ever, this suspension was revoked. Null if suspension was never lifted early. Required for policy compliance and appeals analytics."}},"required":["id","suspended_member_id","issued_by_moderator_id","start_at","reason","revoked","created_at"],"description":"Represents a member’s suspension event within the DiscussionBoard platform. Each record captures details such as issuer, reasoning, starting/ending window, revocation, and audit metadata. Based on discussionboard_suspension_records DB table. All records must be retained per compliance and audit policy."},"IDiscussionboardSuspensionRecord.ICreate":{"type":"object","properties":{"suspended_member_id":{"type":"string","format":"uuid","description":"ID of the member to be suspended. References the unique member record; must be present in discussionboard_members."},"issued_by_moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator/admin issuing the suspension. Only moderators or admins can issue suspensions, per RBAC."},"start_at":{"type":"string","format":"date-time","description":"Datetime at which the suspension becomes effective. Format must be ISO 8601. Used for enforcement and audit."},"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when suspension ends (null for indefinite/permanent suspensions). Used for appeal and automatic expiry workflows."},{"type":"null","format":"date-time","description":"Datetime when suspension ends (null for indefinite/permanent suspensions). Used for appeal and automatic expiry workflows."}],"description":"Datetime when suspension ends (null for indefinite/permanent suspensions). Used for appeal and automatic expiry workflows."},"reason":{"type":"string","description":"Reason for the suspension, provided by the issuer. Must adhere to business process/legal logging requirements (e.g., not empty, not abusive, etc)."}},"required":["suspended_member_id","issued_by_moderator_id","start_at","reason"],"description":"Request body for creating a new member suspension in the DiscussionBoard platform. See business rule/enforcement workflows around permitted durations and allowable issuers. Fulfills audit legality and compliance."},"IDiscussionboardSuspensionRecord.IUpdate":{"type":"object","properties":{"end_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update to the scheduled end time for the suspension. Null means make it indefinite/permanent. Used for appeal, extension, or adjustment logic."},{"type":"null","format":"date-time","description":"Update to the scheduled end time for the suspension. Null means make it indefinite/permanent. Used for appeal, extension, or adjustment logic."}],"description":"Update to the scheduled end time for the suspension. Null means make it indefinite/permanent. Used for appeal, extension, or adjustment logic."},"reason":{"oneOf":[{"type":"string","description":"Optionally update the explanation or reason for the suspension. Nullable—may leave unchanged when not supplied."},{"type":"null","description":"Optionally update the explanation or reason for the suspension. Nullable—may leave unchanged when not supplied."}],"description":"Optionally update the explanation or reason for the suspension. Nullable—may leave unchanged when not supplied."},"revoked":{"oneOf":[{"type":"boolean","description":"Update the revoked status to reflect an appeal or administrative reversal. Null means no change."},{"type":"null","description":"Update the revoked status to reflect an appeal or administrative reversal. Null means no change."}],"description":"Update the revoked status to reflect an appeal or administrative reversal. Null means no change."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set or update the date/time of revocation for the suspension. Nullable—null when not setting this flag."},{"type":"null","format":"date-time","description":"Set or update the date/time of revocation for the suspension. Nullable—null when not setting this flag."}],"description":"Set or update the date/time of revocation for the suspension. Nullable—null when not setting this flag."}},"required":[],"description":"Payload for updating properties of an existing DiscussionBoard suspension record. May be used to adjust time windows, modify reason, or change revoked/revoked_at state. Changes must be audit-trailed per business/compliance policy."},"IDiscussionboardWarningRecord.IRequest":{"type":"object","properties":{"warned_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters warning records by warned member. UUID or null for all members."},{"type":"null","format":"uuid","description":"Filters warning records by warned member. UUID or null for all members."}],"description":"Filters warning records by warned member. UUID or null for all members."},"issued_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters warnings by issuing moderator ID. UUID or null for all moderators."},{"type":"null","format":"uuid","description":"Filters warnings by issuing moderator ID. UUID or null for all moderators."}],"description":"Filters warnings by issuing moderator ID. UUID or null for all moderators."},"created_after":{"oneOf":[{"type":"string","format":"date-time","description":"Return only warnings created after this timestamp. Nullable."},{"type":"null","format":"date-time","description":"Return only warnings created after this timestamp. Nullable."}],"description":"Return only warnings created after this timestamp. Nullable."},"created_before":{"oneOf":[{"type":"string","format":"date-time","description":"Return only warnings created before this timestamp. Nullable."},{"type":"null","format":"date-time","description":"Return only warnings created before this timestamp. Nullable."}],"description":"Return only warnings created before this timestamp. Nullable."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Page number of the request in paginated results."},{"type":"null","minimum":1,"description":"Page number of the request in paginated results."}],"description":"Page number of the request in paginated results."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Number of records per page (page size)."},{"type":"null","minimum":1,"description":"Number of records per page (page size)."}],"description":"Number of records per page (page size)."}},"required":[],"description":"Request object for filtering, searching, and paginating warning records in the DiscussionBoard system (discussionboard_warning_records). Used in moderator/admin dashboards and reporting."},"IPageIDiscussionboardWarningRecord":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Information about current chunk of result-set: current page, limit, total records, page count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardWarningRecord"},"description":"Warning records associated with this page, result of filter/search."}},"required":["pagination","data"],"description":"Paginated container for DiscussionBoard warning records utilizing IPage pattern. See business rules for minimum retention, page sizes, and audit history."},"IDiscussionboardWarningRecord":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of this warning record. Required for audit referencing and updates."},"warned_member_id":{"type":"string","format":"uuid","description":"ID of member who received the warning. Always a valid UUID linked to discussionboard_members."},"issued_by_moderator_id":{"type":"string","format":"uuid","description":"ID of moderator who issued the warning. UUID, required for audit, compliance, and chain-of-command."},"reason":{"type":"string","description":"Explanation or context for the warning, compliant with moderation rules. Not null or empty."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the warning was issued. Used for audit and history escalation logic."}},"required":["id","warned_member_id","issued_by_moderator_id","reason","created_at"],"description":"Warning record for a member within the DiscussionBoard community, as per discussionboard_warning_records DB table. Defines all key audit fields: issuer, member, time, and rationale for escalations and reporting."},"IDiscussionboardWarningRecord.ICreate":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"ID of member to warn (target user). Must exist in main member table. Required."},"issued_by_moderator_id":{"type":"string","format":"uuid","description":"ID of moderator issuing the warning. Must exist, required by business policy."},"reason":{"type":"string","description":"Explanation or context for warning action. Must comply with audit, chain-of-command, and appeal procedures."}},"required":["warned_member_id","issued_by_moderator_id","reason"],"description":"Payload/schema for creating a new warning record in the DiscussionBoard system. Used during member moderation, escalation, and compliance workflows."},"IDiscussionboardWarningRecord.IUpdate":{"type":"object","properties":{"reason":{"oneOf":[{"type":"string","description":"Optionally update the warning reason, context, or message. Null for no change."},{"type":"null","description":"Optionally update the warning reason, context, or message. Null for no change."}],"description":"Optionally update the warning reason, context, or message. Null for no change."}},"required":[],"description":"Payload for updating a warning record within the DiscussionBoard system. Only editable field is the reason/context. Change history must be audit-logged."},"IDiscussionboardContentFlag.IRequest":{"type":"object","properties":{"flagged_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for content flags set by a particular member. Null for all."},{"type":"null","format":"uuid","description":"Filter for content flags set by a particular member. Null for all."}],"description":"Filter for content flags set by a particular member. Null for all."},"set_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for content flags set by specific moderator. Null for any."},{"type":"null","format":"uuid","description":"Filter for content flags set by specific moderator. Null for any."}],"description":"Filter for content flags set by specific moderator. Null for any."},"flag_type":{"oneOf":[{"type":"string","description":"Type(s) of content flag (e.g., 'spam','profanity','abuse'). Null for all types."},{"type":"null","description":"Type(s) of content flag (e.g., 'spam','profanity','abuse'). Null for all types."}],"description":"Type(s) of content flag (e.g., 'spam','profanity','abuse'). Null for all types."},"auto_flagged":{"oneOf":[{"type":"boolean","description":"Filter: restrict to auto-flagged items (by system). Null for all."},{"type":"null","description":"Filter: restrict to auto-flagged items (by system). Null for all."}],"description":"Filter: restrict to auto-flagged items (by system). Null for all."},"flagged_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter: Only flags on particular post. Null for any/none."},{"type":"null","format":"uuid","description":"Filter: Only flags on particular post. Null for any/none."}],"description":"Filter: Only flags on particular post. Null for any/none."},"flagged_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter: Only flags on particular comment. Null for any/none."},{"type":"null","format":"uuid","description":"Filter: Only flags on particular comment. Null for any/none."}],"description":"Filter: Only flags on particular comment. Null for any/none."},"flagged_after":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 lower bound for flagged_at date (include only flags after this datetime)."},{"type":"null","format":"date-time","description":"ISO 8601 lower bound for flagged_at date (include only flags after this datetime)."}],"description":"ISO 8601 lower bound for flagged_at date (include only flags after this datetime)."},"flagged_before":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 upper bound for flagged_at date (include only flags before this datetime)."},{"type":"null","format":"date-time","description":"ISO 8601 upper bound for flagged_at date (include only flags before this datetime)."}],"description":"ISO 8601 upper bound for flagged_at date (include only flags before this datetime)."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Current page (for pagination)."},{"type":"null","minimum":1,"description":"Current page (for pagination)."}],"description":"Current page (for pagination)."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Records per page (pagination chunk size)."},{"type":"null","minimum":1,"description":"Records per page (pagination chunk size)."}],"description":"Records per page (pagination chunk size)."}},"required":[],"description":"Request payload for filtering and listing content flags in the DiscussionBoard moderation system. Allows moderators/admins to search by actor, target, flag type, automation, and time."},"IPageIDiscussionboardContentFlag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata object as defined by the OpenAPI standard. This provides detailed information about current page, total records, page limits and how the response was paginated. Referenced from standard IPage template."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardContentFlag"},"description":"Array of DiscussionboardContentFlag records for the current page. Each entry represents a single content flag as normalized in the moderation audit schema."}},"required":["pagination","data"],"description":"A page object for discussion board content flag moderation records. This type defines the paged list structure for flagged content in the system, supporting robust auditing of moderation actions. Corresponds to the IPage<T> structure with DiscussionboardContentFlag responses as the records. For full context, see flagging business rules in the Prisma schema and requirements analysis.\n\nThe purpose of content flag pagination is to allow efficient browsing, actionable dashboards for moderation staff, and compliance reviews for automated and manual flag triggers."},"IDiscussionboardContentFlag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the content flag record. This is a unique identifier for each individual flag instance. Referenced in other records for traceability and auditability."},"flagged_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If a post was flagged, this property holds the unique identifier of the post. Nullable if the target is a comment. Ensures normalization by not mixing flag contexts."},{"type":"null","format":"uuid","description":"If a post was flagged, this property holds the unique identifier of the post. Nullable if the target is a comment. Ensures normalization by not mixing flag contexts."}],"description":"If a post was flagged, this property holds the unique identifier of the post. Nullable if the target is a comment. Ensures normalization by not mixing flag contexts."},"flagged_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If a comment was flagged, this property contains the UUID for the comment. Nullable if the flag is for a post. Maintains atomic distinction between posts and comments as required by moderation schema."},{"type":"null","format":"uuid","description":"If a comment was flagged, this property contains the UUID for the comment. Nullable if the flag is for a post. Maintains atomic distinction between posts and comments as required by moderation schema."}],"description":"If a comment was flagged, this property contains the UUID for the comment. Nullable if the flag is for a post. Maintains atomic distinction between posts and comments as required by moderation schema."},"flagged_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"The member’s unique identifier who flagged the content. Null if flag was created by automated system or directly by moderator."},{"type":"null","format":"uuid","description":"The member’s unique identifier who flagged the content. Null if flag was created by automated system or directly by moderator."}],"description":"The member’s unique identifier who flagged the content. Null if flag was created by automated system or directly by moderator."},"set_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"The moderator’s unique ID if the flag was set by manual moderation. Null if not manual or by system/member."},{"type":"null","format":"uuid","description":"The moderator’s unique ID if the flag was set by manual moderation. Null if not manual or by system/member."}],"description":"The moderator’s unique ID if the flag was set by manual moderation. Null if not manual or by system/member."},"flag_type":{"type":"string","description":"Atomic type code describing why the content was flagged. Typical values: 'spam', 'profanity', 'abuse', 'automation', etc. Enum may be described externally by platform policy or admin configuration."},"flagged_at":{"type":"string","format":"date-time","description":"ISO-8601 timestamp recording exactly when the content flag was set. Fulfills audit/compliance requirement for moderation traceability."},"auto_flagged":{"type":"boolean","description":"Indicates whether this flag was set by automated system (true) or manually by a user or moderator (false). Fulfills reporting and compliance business logic."}},"required":["id","flag_type","flagged_at","auto_flagged"],"description":"Represents a single moderation-flag record for discussion board content. Closely models the discussionboard_content_flags table as described in the moderation domain and Prisma schema.\n\nFlags may relate to posts or comments, and may be set by users, moderators, or automated rules for spam/abuse/profanity/etc. Used to power queue-based moderation interfaces and historical/audit views. The design supports strict normalization for compliance and deep analytics."},"IDiscussionboardContentFlag.ICreate":{"type":"object","properties":{"flagged_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If flagging a post, supply the unique identifier (UUID) for the post. Must not be filled if this flag is for a comment. Validated at API boundary according to content type."},{"type":"null","format":"uuid","description":"If flagging a post, supply the unique identifier (UUID) for the post. Must not be filled if this flag is for a comment. Validated at API boundary according to content type."}],"description":"If flagging a post, supply the unique identifier (UUID) for the post. Must not be filled if this flag is for a comment. Validated at API boundary according to content type."},"flagged_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If flagging a comment, supply its UUID. Null for post-only flags."},{"type":"null","format":"uuid","description":"If flagging a comment, supply its UUID. Null for post-only flags."}],"description":"If flagging a comment, supply its UUID. Null for post-only flags."},"flagged_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the member submitting the flag. If the flag is raised by an automated system or a moderator directly, leave null."},{"type":"null","format":"uuid","description":"ID of the member submitting the flag. If the flag is raised by an automated system or a moderator directly, leave null."}],"description":"ID of the member submitting the flag. If the flag is raised by an automated system or a moderator directly, leave null."},"set_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderator who sets the flag directly. Null for member/automatic/system flags."},{"type":"null","format":"uuid","description":"ID of the moderator who sets the flag directly. Null for member/automatic/system flags."}],"description":"ID of the moderator who sets the flag directly. Null for member/automatic/system flags."},"flag_type":{"type":"string","description":"Required business-logic string specifying why content is flagged (spam, abuse, forbidden, etc.). Must follow platform moderation/business policy enumeration."},"auto_flagged":{"type":"boolean","description":"If true, this flag is being set by an automated rule or system process. If false, set by a human (member or moderator) as allowed by business logic."}},"required":["flag_type","auto_flagged"],"description":"Request body for creating a new discussion board content flag. This input type matches the moderation business process as described in the requirements and Prisma schema (discussionboard_content_flags create).\n\nEnforces clear separation between post/comment context, actor responsible for flagging, and reason/type. Supports both automated and manual flags. Validation distinguishes between automated, member, and moderator sources as well as content type."},"IDiscussionboardContentFlag.IUpdate":{"type":"object","properties":{"flagged_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If needed, update the post reference for this flag (should only be used to correct or re-attribute context in rare moderation workflows)."},{"type":"null","format":"uuid","description":"If needed, update the post reference for this flag (should only be used to correct or re-attribute context in rare moderation workflows)."}],"description":"If needed, update the post reference for this flag (should only be used to correct or re-attribute context in rare moderation workflows)."},"flagged_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If required, reassign the target to a different comment. Extremely rare and meant for admin-level corrections."},{"type":"null","format":"uuid","description":"If required, reassign the target to a different comment. Extremely rare and meant for admin-level corrections."}],"description":"If required, reassign the target to a different comment. Extremely rare and meant for admin-level corrections."},"flagged_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the member reference—should only be used if originally recorded incorrectly. See business policy for editing flags."},{"type":"null","format":"uuid","description":"Update the member reference—should only be used if originally recorded incorrectly. See business policy for editing flags."}],"description":"Update the member reference—should only be used if originally recorded incorrectly. See business policy for editing flags."},"set_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the assigned moderator if original flag was corrected. Only for moderation/admin use."},{"type":"null","format":"uuid","description":"Update the assigned moderator if original flag was corrected. Only for moderation/admin use."}],"description":"Update the assigned moderator if original flag was corrected. Only for moderation/admin use."},"flag_type":{"type":"string","description":"Update/moderate the content flag reason (e.g., if misclassified or investigation reveals different flag type). Value must still conform to policy enumeration."},"auto_flagged":{"type":"boolean","description":"Update whether the flag is marked as automatically set or not. Used in rare audit corrections or appeals."}},"description":"Update schema for a discussion board content flag record. Used by moderation/admin backend systems for correcting misflagged content or adjusting audit trails in rare workflows. All updates must be audit logged.\n\nModifications typically only allowed to privileged accounts and with business policy restrictions.","required":[]},"IDiscussionboardContentFlag.IDeleteResponse":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of the deleted flag record."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp (ISO-8601) marking when the flag was (soft-)deleted from the content moderation queue."},"success":{"type":"boolean","description":"Indicates whether the deletion of the flag was successful."}},"required":["id","deleted_at","success"],"description":"Response/result object for flag deletion endpoints. Returns details about the flag and the status of deletion for reliable audit and compliance monitoring according to moderation rules.\n\nThis type documents the evidence trail for recordkeeping, supporting both user feedback and regulatory reporting."},"IDiscussionboardNotification.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for paginated notification results. Optional—defaults to first page if not supplied."},{"type":"null","description":"Page number for paginated notification results. Optional—defaults to first page if not supplied."}],"description":"Page number for paginated notification results. Optional—defaults to first page if not supplied."},"limit":{"oneOf":[{"type":"integer","description":"Optional. Number of notifications per page (system default may apply when absent)."},{"type":"null","description":"Optional. Number of notifications per page (system default may apply when absent)."}],"description":"Optional. Number of notifications per page (system default may apply when absent)."},"type":{"oneOf":[{"type":"string","description":"Optional filter: type of notification (e.g., 'reply', 'mention', 'moderation', 'announcement'). Allows filtering by event category; see business rules for system notification types."},{"type":"null","description":"Optional filter: type of notification (e.g., 'reply', 'mention', 'moderation', 'announcement'). Allows filtering by event category; see business rules for system notification types."}],"description":"Optional filter: type of notification (e.g., 'reply', 'mention', 'moderation', 'announcement'). Allows filtering by event category; see business rules for system notification types."},"read":{"oneOf":[{"type":"boolean","description":"Optional filter (true/false/null)—filters notifications by read/unread status if supplied. Null means all statuses are included."},{"type":"null","description":"Optional filter (true/false/null)—filters notifications by read/unread status if supplied. Null means all statuses are included."}],"description":"Optional filter (true/false/null)—filters notifications by read/unread status if supplied. Null means all statuses are included."},"delivered_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional. Lower time-bound for delivered_at—used for filtering results by delivery date (ISO-8601 format)."},{"type":"null","format":"date-time","description":"Optional. Lower time-bound for delivered_at—used for filtering results by delivery date (ISO-8601 format)."}],"description":"Optional. Lower time-bound for delivered_at—used for filtering results by delivery date (ISO-8601 format)."},"delivered_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional. Upper time-bound for delivered_at—used for date range filtering."},{"type":"null","format":"date-time","description":"Optional. Upper time-bound for delivered_at—used for date range filtering."}],"description":"Optional. Upper time-bound for delivered_at—used for date range filtering."}},"description":"Request body schema for searching and listing notifications for the authenticated member. Supports filters for notification type, read/unread state, and delivery date ranges.\n\nImplements list/search paging according to requirements analysis for notification center implementation. All filtering is governed by API and platform business policy. Returns a paginated, filtered view of notification records as a result.","required":[]},"IPageDiscussionboardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata object describing the returned window of notifications. Standard system-wide definition, see IPage.IPagination."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotification"},"description":"Array of notification records present in the returned page."}},"required":["pagination","data"],"description":"A page of notification records for the discussion board system. This schema is the standard container structure for multiplexed notification center results, following the pattern set in IPage<T>. Each data element is a single notification object as defined in IDiscussionboardNotification.\n\nThe design supports platform-wide consistency in paginated listings and enables UI/UX for notification dashboards and member audit/engagement features."},"IDiscussionboardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/identifier for the notification record. Ensures every notification event is audit ready and addressable by member and system tools."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member recipient’s unique ID. Enforces 1:1 mapping to user (see notification schema for privacy/audit context)."},"type":{"type":"string","description":"Categorical code of notification event (e.g., 'reply', 'mention', 'announcement', 'moderation'). See platform requirements for type enumeration and business logic for handling."},"title":{"type":"string","description":"Notification title/subject, for UI display or inbox/summary preview. Normally a brief description of the trigger event."},"body":{"type":"string","description":"Full textual message of the notification. May contain references to other system elements or member actions."},"url":{"oneOf":[{"type":"string","description":"Optional. URL or deep-link to related board/forum/thread entity, for use in web/mobile navigation and context restoration."},{"type":"null","description":"Optional. URL or deep-link to related board/forum/thread entity, for use in web/mobile navigation and context restoration."}],"description":"Optional. URL or deep-link to related board/forum/thread entity, for use in web/mobile navigation and context restoration."},"delivered_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was delivered to the member, required for all notification records (ISO-8601 format, UTC preferred)."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional timestamp for when notification was read by the member. Null until marked as read."},{"type":"null","format":"date-time","description":"Optional timestamp for when notification was read by the member. Null until marked as read."}],"description":"Optional timestamp for when notification was read by the member. Null until marked as read."},"created_at":{"type":"string","format":"date-time","description":"Audit timestamp recording when notification was first generated in the system. Ensures traceability, analytics, legal compliance, and debugging capabilities."}},"required":["id","discussionboard_member_id","type","title","body","delivered_at","created_at"],"description":"Notification event record for the forum system, matching discussionboard_notifications table in the Notifications schema. Each object corresponds to a real notification delivery and includes audit fields required by data governance/business rules.\n\nComprehensive detail is included, for reliable notification center, engagement analytics, and compliance. The schema enforces a 1:1 mapping for recipient member and tracks title, body, link, delivery/read state, and audit timestamps."},"IDiscussionboardNotification.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Required. Recipient member's unique ID for whom the notification is being created."},"type":{"type":"string","description":"Categorical event code for notification type (see platform event enumeration and requirements analysis)."},"title":{"type":"string","description":"Notification title/subject shown in the member UI notification list."},"body":{"type":"string","description":"Full text or markdown-enabled message body to be delivered."},"url":{"oneOf":[{"type":"string","description":"Optional. URL or deep-link for notification context (e.g., post, moderation action, thread, announcement)."},{"type":"null","description":"Optional. URL or deep-link for notification context (e.g., post, moderation action, thread, announcement)."}],"description":"Optional. URL or deep-link for notification context (e.g., post, moderation action, thread, announcement)."},"delivered_at":{"type":"string","format":"date-time","description":"Timestamp at which notification should be considered delivered (ISO-8601). May be set in the future for scheduled/batched delivery."}},"required":["discussionboard_member_id","type","title","body","delivered_at"],"description":"Request object for creating a new member notification event per requirements in notification flows and the Prisma schema.\n\nThis schema supports both immediate and scheduled delivery. All fields map directly to audit and analytics requirements for system notifications."},"IDiscussionboardNotification.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string","description":"Update notification's title/subject. Nullable to preserve previous title if not updating."},{"type":"null","description":"Update notification's title/subject. Nullable to preserve previous title if not updating."}],"description":"Update notification's title/subject. Nullable to preserve previous title if not updating."},"body":{"oneOf":[{"type":"string","description":"Update the message or body text. Nullable for partial updates."},{"type":"null","description":"Update the message or body text. Nullable for partial updates."}],"description":"Update the message or body text. Nullable for partial updates."},"url":{"oneOf":[{"type":"string","description":"Update the URL/context link (can be set to null to remove)."},{"type":"null","description":"Update the URL/context link (can be set to null to remove)."}],"description":"Update the URL/context link (can be set to null to remove)."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update delivery timestamp, if using scheduled/batched notifications."},{"type":"null","format":"date-time","description":"Update delivery timestamp, if using scheduled/batched notifications."}],"description":"Update delivery timestamp, if using scheduled/batched notifications."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set/update when notification was read by the member. Null unsets read state for audit correction."},{"type":"null","format":"date-time","description":"Set/update when notification was read by the member. Null unsets read state for audit correction."}],"description":"Set/update when notification was read by the member. Null unsets read state for audit correction."}},"description":"Update object for member notification event. Used for partial or full modifications, including marking as read/unread or updating metadata. Only mutable fields permitted by business/policy can be changed. The API will preserve and validate required fields such as type/timestamps for audit trail.","required":[]},"IDiscussionboardNotification.IDeleteResponse":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of notification record deleted."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp (ISO-8601) for when the notification was logically removed from the member notification list or notification center."},"success":{"type":"boolean","description":"Whether the deletion operation succeeded (true/false)."}},"required":["id","deleted_at","success"],"description":"Result/confirmation object for notification deletion endpoints. Contains audit/reconciliation details as required for regulatory reporting and member feedback in notification settings/panel flows."},"IDiscussionboardMemberNotificationSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key/identifier for this settings record. Enforces 1:1 mapping to member via discussionboard_member_id. Required for all retrieval and mutation operations."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Unique member ID to whom these notification settings belong. Foreign key to platform member registry."},"in_app_enabled":{"type":"boolean","description":"Boolean toggle: true if member is to receive in-app notifications. Controls UI alert pipelining and popups for the member."},"email_enabled":{"type":"boolean","description":"Boolean toggle: if true, email notifications are sent for matching events."},"reply_notification_enabled":{"type":"boolean","description":"If true, the system will generate notifications for direct replies to the member's threads, posts, or comments."},"mention_notification_enabled":{"type":"boolean","description":"If true, enables @mention-based notifications in posts/comments."},"moderation_notification_enabled":{"type":"boolean","description":"If true, the member will receive notifications regarding moderation events affecting themselves (e.g., warnings, suspensions, content removals)."},"announcement_notification_enabled":{"type":"boolean","description":"If true, system/board announcements will be delivered to this member as notifications."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking when these settings were first created. Used for analytics/audit/compliance."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp for these notification settings (ISO-8601 UTC)."}},"required":["id","discussionboard_member_id","in_app_enabled","email_enabled","reply_notification_enabled","mention_notification_enabled","moderation_notification_enabled","announcement_notification_enabled","created_at","updated_at"],"description":"Member’s notification settings object for the DiscussionBoard system, corresponds to the discussionboard_member_notification_settings table in the notification domain schema. Contains full preference flags for each supported event/alert channel as defined by feature requirements and user personalization flows.\n\nAll boolean flags are atomic, tracked at the member level, and auditable for compliance, privacy control, and notification workflow optimization."},"IDiscussionboardMemberNotificationSettings.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member (UUID) for whom to create notification settings. References the member entity in the database.\n\nThis is required for 1:1 linkage and permission enforcement. Ensures settings are applied to the correct user as mandated by privacy and audit requirements."},"in_app_enabled":{"type":"boolean","description":"Whether the member wants to receive in-app notifications for activities in the discussion board.\n\nControls system-side push of new/reply/mention/moderation/announcement events to the web/mobile client UI."},"email_enabled":{"type":"boolean","description":"If true, email notifications are delivered for events the member has enabled (e.g., replies, moderation updates, announcements).\n\nServes for opt-in/opt-out per GDPR and user privacy, fulfills business requirement for alert configuration."},"reply_notification_enabled":{"type":"boolean","description":"Whether the member should receive notifications (in-app/email) when someone replies to their posts, comments, or threads.\n\nImplements key engagement flow required for personalized alerting."},"mention_notification_enabled":{"type":"boolean","description":"Controls receiving alerts when the member is @mentioned in posts/comments.\n\nRequired for engagement and complaint flows as described in user journeys and requirements analysis."},"moderation_notification_enabled":{"type":"boolean","description":"Whether the user should receive notifications relating to moderation (warnings, suspensions, moderation actions on their content).\n\nOpt-in/opt-out is required for transparency per business and compliance rules."},"announcement_notification_enabled":{"type":"boolean","description":"Indicates if board announcements (global or per-board info, rule changes, etc.) should be pushed to this user.\n\nField supports member control of communication volume and legal notice requirements."}},"required":["discussionboard_member_id","in_app_enabled","email_enabled","reply_notification_enabled","mention_notification_enabled","moderation_notification_enabled","announcement_notification_enabled"],"description":"Schema for creating a new notification settings record for a DiscussionBoard member.\n\nImplements business requirement for user preference and compliance with privacy regulations. Each property corresponds to toggles in the notification settings UI, giving members granular control over which notifications they wish to receive by channel or event type. All fields are atomic and map directly to the Prisma schema for notification settings records."},"IDiscussionboardMemberNotificationSettings.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optionally filters by member ID (UUID). Only retrieve settings for this member if set.\n\nUsed in admin dashboards or for analytics."},"in_app_enabled":{"type":"boolean","description":"Filter for members who have in-app notifications enabled (true) or disabled (false).\n\nSupports segmentation and delivery targeting."},"email_enabled":{"type":"boolean","description":"Filter settings where email delivery is enabled/disabled. Used for campaign targeting or opt-out reporting."},"announcement_notification_enabled":{"type":"boolean","description":"If set, filters members by whether they have enabled announcement notifications. Used for regulatory delivery compliance."},"page":{"type":"integer","format":"uint32","description":"Page number for pagination (starts from 1).\n\nImplements standard pagination for list or admin search UI."},"limit":{"type":"integer","format":"uint32","description":"Limit on number of results per page (default may be 100 or system-defined cap).\n\nHelps with result batching and API performance."}},"description":"Request schema for searching, filtering, or listing DiscussionBoard member notification settings.\n\nImplements query logic as required for user list UIs, admin analysis, and API pagination. Derived directly from Prisma and OpenAPI operation requirements. All properties are optional search/aggregation criteria, with full compliance to original business rules and structure.","required":[]},"IPageDiscussionboardMemberNotificationSettings":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/discussionboardMemberNotificationSettings"},"description":"The main list of notification settings records for this response page."}},"required":["pagination","data"],"description":"Container schema for paginated result sets of DiscussionBoard member notification settings list/search operations.\n\nFollows the IPage<T> convention for OpenAPI pagination. Used for authentication and admin UI endpoints requiring result batching, total count metadata, and standard navigation structure as detailed in business and non-functional requirements."},"discussionboardMemberNotificationSettings.IUpdate":{"type":"object","properties":{"in_app_enabled":{"type":"boolean","description":"Whether the member should receive notifications via in-app delivery. Fulfills UI toggle and opt-in/out flows."},"email_enabled":{"type":"boolean","description":"If true, email notification delivery is enabled for this member. Supports user self-service for privacy and delivery compliance."},"reply_notification_enabled":{"type":"boolean","description":"Enable/disable notifications when user receives replies to their posts/comments."},"mention_notification_enabled":{"type":"boolean","description":"Enable/disable notifications for @mentions."},"moderation_notification_enabled":{"type":"boolean","description":"If true, user will be alerted on moderation events affecting them."},"announcement_notification_enabled":{"type":"boolean","description":"Whether board announcements are notified to this user."}},"description":"Schema for updating the notification delivery preferences for a member in the DiscussionBoard platform.\n\nUsed for in-app, email, and per-event-type notification toggles. All fields are optional—updates only supplied properties while preserving other values.","required":[]},"discussionboardMemberNotificationSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification settings record. Primary key in the Prisma schema.\n\nThis is required for settings record mutation, lookup, or audit trail referencing."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID identifying the member whom this settings record belongs to. Fulfills 1:1 mapping, linking the settings to an individual user as enforced in the Actors domain data model.\n\nCritical for user-driven preference and privacy enforcement."},"in_app_enabled":{"type":"boolean","description":"Indicates whether the member receives in-app notifications for the forum.\n\nAtomic field, maps to personal delivery toggle as per business requirement."},"email_enabled":{"type":"boolean","description":"Shows whether email notifications are enabled for this user in the discussion board.\n\nSupports GDPR and user privacy radio toggles in self-service UI."},"reply_notification_enabled":{"type":"boolean","description":"If true, the member receives notifications on replies to their threads/posts/comments."},"mention_notification_enabled":{"type":"boolean","description":"Whether notifications are pushed for @mentions."},"moderation_notification_enabled":{"type":"boolean","description":"Indicates if moderation action notifications (suspensions, warnings, content edits) are enabled."},"announcement_notification_enabled":{"type":"boolean","description":"If true, site-wide or board-specific announcements are pushed to this member as notifications."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this notification setting record was created. Set automatically at insert.\n\nRequired for compliance and retention audits."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when settings were last updated. Used for audit trails and change history.\n\nSupports rollback/history display in admin tools."}},"required":["id","discussionboard_member_id","in_app_enabled","email_enabled","reply_notification_enabled","mention_notification_enabled","moderation_notification_enabled","announcement_notification_enabled","created_at","updated_at"],"description":"Main representation of a DiscussionBoard member's notification delivery settings.\n\nEach record is 1:1 tied to a user, with atomic fields for each event/channel toggle. Aligns with business rules for compliance, notification delivery engine, and user-centric opt-in/out control as detailed in the requirements analysis and Prisma schema comments. All fields are mandatory for DB integrity, reporting, and auditability."},"discussionboardMemberNotificationSettings.IDeleteResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the notification settings record that was deleted. Always present for confirmation and audit trail linkage."},"result":{"oneOf":[{"const":"success","description":"Status of the delete operation. Must be one of: 'success' (operation successful), 'not_found' (no record deleted), or 'error' (operation failed unexpectedly).\n\nImplements API feedback for client and admin flows, as required by business rules."},{"const":"not_found","description":"Status of the delete operation. Must be one of: 'success' (operation successful), 'not_found' (no record deleted), or 'error' (operation failed unexpectedly).\n\nImplements API feedback for client and admin flows, as required by business rules."},{"const":"error","description":"Status of the delete operation. Must be one of: 'success' (operation successful), 'not_found' (no record deleted), or 'error' (operation failed unexpectedly).\n\nImplements API feedback for client and admin flows, as required by business rules."}],"description":"Status of the delete operation. Must be one of: 'success' (operation successful), 'not_found' (no record deleted), or 'error' (operation failed unexpectedly).\n\nImplements API feedback for client and admin flows, as required by business rules."},"deletedAt":{"type":"string","format":"date-time","description":"Timestamp for when the notification settings record was deleted or marked deleted. Null if operation failed."}},"required":["id","result"],"description":"API response schema for deletion of a member's notification settings.\n\nEnsures standardization of feedback from delete endpoints, providing audit, compliance, and traceability of settings removal actions as required by privacy and data governance policies."}},"authorization":[{"name":"member","description":"Regular user who can register, log in, post topics, comment, and participate in discussions on political/economic topics."},{"name":"moderator","description":"User responsible for monitoring discussions, managing content, moderating posts/comments, and handling reports of inappropriate behavior."},{"name":"admin","description":"Administrator with full system permissions, including user and forum management, settings, and system configuration."}]}},"created_at":"2025-07-22T08:15:42.637Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":1982559,"input":{"total":1867342,"cached":7936},"output":{"total":115217,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1982559,"input":{"total":1867342,"cached":7936},"output":{"total":115217,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1982559,"input":{"total":1867342,"cached":7936},"output":{"total":115217,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1982559,"input":{"total":1867342,"cached":7936},"output":{"total":115217,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}}]