[{"event":{"type":"interfaceStart","created_at":"2025-07-23T06:52:12.803Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceEndpoints","endpoints":[{"path":"/discussionBoard/channels","method":"patch"},{"path":"/discussionBoard/channels/{id}","method":"get"},{"path":"/discussionBoard/channels","method":"post"},{"path":"/discussionBoard/channels/{id}","method":"put"},{"path":"/discussionBoard/channels/{id}","method":"delete"},{"path":"/discussionBoard/sections","method":"patch"},{"path":"/discussionBoard/sections/{id}","method":"get"},{"path":"/discussionBoard/sections","method":"post"},{"path":"/discussionBoard/sections/{id}","method":"put"},{"path":"/discussionBoard/sections/{id}","method":"delete"},{"path":"/discussionBoard/configurations","method":"patch"},{"path":"/discussionBoard/configurations/{id}","method":"get"},{"path":"/discussionBoard/configurations","method":"post"},{"path":"/discussionBoard/configurations/{id}","method":"put"},{"path":"/discussionBoard/configurations/{id}","method":"delete"},{"path":"/discussionBoard/guests","method":"patch"},{"path":"/discussionBoard/guests/{id}","method":"get"},{"path":"/discussionBoard/guests","method":"post"},{"path":"/discussionBoard/guests/{id}","method":"put"},{"path":"/discussionBoard/guests/{id}","method":"delete"},{"path":"/discussionBoard/members","method":"patch"},{"path":"/discussionBoard/members/{id}","method":"get"},{"path":"/discussionBoard/members","method":"post"},{"path":"/discussionBoard/members/{id}","method":"put"},{"path":"/discussionBoard/members/{id}","method":"delete"},{"path":"/discussionBoard/moderators","method":"patch"},{"path":"/discussionBoard/moderators/{id}","method":"get"},{"path":"/discussionBoard/moderators","method":"post"},{"path":"/discussionBoard/moderators/{id}","method":"put"},{"path":"/discussionBoard/moderators/{id}","method":"delete"},{"path":"/discussionBoard/administrators","method":"patch"},{"path":"/discussionBoard/administrators/{id}","method":"get"},{"path":"/discussionBoard/administrators","method":"post"},{"path":"/discussionBoard/administrators/{id}","method":"put"},{"path":"/discussionBoard/administrators/{id}","method":"delete"},{"path":"/discussionBoard/threads","method":"patch"},{"path":"/discussionBoard/threads/{id}","method":"get"},{"path":"/discussionBoard/threads","method":"post"},{"path":"/discussionBoard/threads/{id}","method":"put"},{"path":"/discussionBoard/threads/{id}","method":"delete"},{"path":"/discussionBoard/posts","method":"patch"},{"path":"/discussionBoard/posts/{id}","method":"get"},{"path":"/discussionBoard/posts","method":"post"},{"path":"/discussionBoard/posts/{id}","method":"put"},{"path":"/discussionBoard/posts/{id}","method":"delete"},{"path":"/discussionBoard/comments","method":"patch"},{"path":"/discussionBoard/comments/{id}","method":"get"},{"path":"/discussionBoard/comments","method":"post"},{"path":"/discussionBoard/comments/{id}","method":"put"},{"path":"/discussionBoard/comments/{id}","method":"delete"},{"path":"/discussionBoard/attachments","method":"patch"},{"path":"/discussionBoard/attachments/{id}","method":"get"},{"path":"/discussionBoard/attachments","method":"post"},{"path":"/discussionBoard/attachments/{id}","method":"put"},{"path":"/discussionBoard/attachments/{id}","method":"delete"},{"path":"/discussionBoard/reports","method":"patch"},{"path":"/discussionBoard/reports/{id}","method":"get"},{"path":"/discussionBoard/reports","method":"post"},{"path":"/discussionBoard/reports/{id}","method":"put"},{"path":"/discussionBoard/reports/{id}","method":"delete"},{"path":"/discussionBoard/moderationLogs","method":"patch"},{"path":"/discussionBoard/moderationLogs/{id}","method":"get"},{"path":"/discussionBoard/moderationLogs","method":"post"},{"path":"/discussionBoard/moderationLogs/{id}","method":"put"},{"path":"/discussionBoard/moderationLogs/{id}","method":"delete"},{"path":"/discussionBoard/warnings","method":"patch"},{"path":"/discussionBoard/warnings/{id}","method":"get"},{"path":"/discussionBoard/warnings","method":"post"},{"path":"/discussionBoard/warnings/{id}","method":"put"},{"path":"/discussionBoard/warnings/{id}","method":"delete"},{"path":"/discussionBoard/bans","method":"patch"},{"path":"/discussionBoard/bans/{id}","method":"get"},{"path":"/discussionBoard/bans","method":"post"},{"path":"/discussionBoard/bans/{id}","method":"put"},{"path":"/discussionBoard/bans/{id}","method":"delete"},{"path":"/discussionBoard/notifications","method":"patch"},{"path":"/discussionBoard/notifications/{id}","method":"get"},{"path":"/discussionBoard/notifications","method":"post"},{"path":"/discussionBoard/notifications/{id}","method":"put"},{"path":"/discussionBoard/notifications/{id}","method":"delete"},{"path":"/discussionBoard/subscriptions","method":"patch"},{"path":"/discussionBoard/subscriptions/{id}","method":"get"},{"path":"/discussionBoard/subscriptions","method":"post"},{"path":"/discussionBoard/subscriptions/{id}","method":"put"},{"path":"/discussionBoard/subscriptions/{id}","method":"delete"},{"path":"/discussionBoard/mentions","method":"patch"},{"path":"/discussionBoard/mentions/{id}","method":"get"},{"path":"/discussionBoard/mentions","method":"post"},{"path":"/discussionBoard/mentions/{id}","method":"put"},{"path":"/discussionBoard/mentions/{id}","method":"delete"},{"path":"/discussionBoard/voteTypes","method":"patch"},{"path":"/discussionBoard/voteTypes/{id}","method":"get"},{"path":"/discussionBoard/voteTypes","method":"post"},{"path":"/discussionBoard/voteTypes/{id}","method":"put"},{"path":"/discussionBoard/voteTypes/{id}","method":"delete"},{"path":"/discussionBoard/votes","method":"patch"},{"path":"/discussionBoard/votes/{id}","method":"get"},{"path":"/discussionBoard/votes","method":"post"},{"path":"/discussionBoard/votes/{id}","method":"put"},{"path":"/discussionBoard/votes/{id}","method":"delete"},{"path":"/discussionBoard/tags","method":"patch"},{"path":"/discussionBoard/tags/{id}","method":"get"},{"path":"/discussionBoard/tags","method":"post"},{"path":"/discussionBoard/tags/{id}","method":"put"},{"path":"/discussionBoard/tags/{id}","method":"delete"},{"path":"/discussionBoard/categories","method":"patch"},{"path":"/discussionBoard/categories/{id}","method":"get"},{"path":"/discussionBoard/categories","method":"post"},{"path":"/discussionBoard/categories/{id}","method":"put"},{"path":"/discussionBoard/categories/{id}","method":"delete"},{"path":"/discussionBoard/searchHistories","method":"patch"},{"path":"/discussionBoard/searchHistories/{id}","method":"get"},{"path":"/discussionBoard/searchHistories","method":"post"},{"path":"/discussionBoard/searchHistories/{id}","method":"put"},{"path":"/discussionBoard/searchHistories/{id}","method":"delete"}],"created_at":"2025-07-23T06:52:12.803Z","step":0},"tokenUsage":{"facade":{"aggregate":{"total":32495,"input":{"total":30873,"cached":0},"output":{"total":1622,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":32495,"input":{"total":30873,"cached":0},"output":{"total":1622,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":32495,"input":{"total":30873,"cached":0},"output":{"total":1622,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":32495,"input":{"total":30873,"cached":0},"output":{"total":1622,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"This operation updates an existing discussion board category given its unique UUID identifier. The update will only be allowed for the actual schema-defined fields: 'name' (category label) and 'description' (optional purpose/scope). The request must include the new values for updatable fields according to the Prisma schema, strictly disallowing the update of non-existent fields. The operation does not update audit fields (created_at, updated_at), which are set automatically by the system. It performs updates only and never references or touches soft-delete logic, as deletion is a separate endpoint.","description":"This API operation updates one or more properties of an existing discussion board category. Only schema-defined fields can be edited: 'name' (the unique, human-readable category label, required) and 'description' (optional string describing the category's purpose). Attempts to update any property not defined in the 'discussion_board_categories' table—such as deleted_at or created_at—are forbidden. Audit fields such as 'updated_at' are managed internally and cannot be supplied directly. Applications should invoke this API when an administrator edits category names or descriptions. If the new 'name' value conflicts with an existing category, the operation must fail with a uniqueness violation error. If successful, the category's details are updated, and the new data is returned in the response. If no matching category is found by the provided ID, a 404 error is returned. The operation rejects attempts to edit soft/hard-delete status, as deletion is strictly handled by the delete endpoint. Related endpoints: deleting a category (DELETE /discussionBoard/categories/{id}), creating a category (POST /discussionBoard/categories), retrieving a category by ID (GET /discussionBoard/categories/{id}).","summary":"Update an existing discussion board category by ID (discussion_board_categories).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the discussion board category (name, description).","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"The updated discussion board category object.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/categories/{id}","method":"put"},{"specification":"This operation deletes an existing discussion board category by its unique UUID identifier. The Prisma schema defines a nullable 'deleted_at' field, indicating that categories are soft-deleted. This API sets the 'deleted_at' timestamp (typically to current time) so that the category is excluded from active queries but remains in the system for auditing and potential restoration. The operation does not physically remove data from the database. Only the 'deleted_at' field is set; other data remains unchanged. ","description":"This API endpoint performs a soft delete of a discussion board category by setting its 'deleted_at' field to the current timestamp. The Prisma schema for 'discussion_board_categories' explicitly provides a nullable 'deleted_at' property, supporting reversible deletions and regulatory compliance. On request, the operation locates the category by provided UUID and updates the 'deleted_at' field if not already set, excluding the category from future active queries and listings. No actual data is removed; only the soft delete flag is set. If the category does not exist or has already been soft-deleted, a 404 or idempotent response is returned. This approach enables undo/restore workflows and historic record-keeping. Attempts to use this endpoint on categories without the 'deleted_at' field (which does exist in schema) would be rejected. Related endpoints: restoring a category (if implemented), updating a category (PUT /discussionBoard/categories/{id}).","summary":"Soft delete a discussion board category by ID (discussion_board_categories).","parameters":[{"name":"id","description":"Unique identifier (UUID) for the category to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Representation of the category after soft-delete (deleted_at set).","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/categories/{id}","method":"delete"},{"specification":"This operation retrieves a list of discussion board search histories, supporting search, pagination, and sorting according to the 'discussion_board_search_histories' schema. Each entry logs a user's (guest or member) executed search with details such as keyword, filters, context, and time. Complex search and navigation over histories is enabled, with support for filtering by actor, keyword, context, or date range.","description":"This API retrieves multiple discussion board search history entries. The 'discussion_board_search_histories' table contains per-search records, annotating the 'actor_id' (user or guest), 'keyword' (query string entered), 'filters' (serialized advanced search filters, optional), 'search_context' (location in UI), and 'created_at' timestamp. Callers may filter, paginate, or sort by these fields, supporting analytics, audit log review, and enhancement of user search experience. Application can limit results by user or keyword, or present histories by recent activity. No soft or hard deletion logic exists; records are always present unless removed with the delete endpoint. Related endpoints: GET/PATCH/POST/DELETE for search histories.","summary":"List and search discussion board search histories (discussion_board_search_histories).","parameters":[],"requestBody":{"description":"Request data for paginated, filtered, or sorted search history results.","typeName":"IDiscussionBoardSearchHistory.IRequest"},"responseBody":{"description":"Paginated list of search history entries.","typeName":"IPageIDiscussionBoardSearchHistory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories","method":"patch"},{"specification":"This operation retrieves a single search history entry from the discussion board, identified by its unique UUID. Provides a detailed view of the search event, as logged in the 'discussion_board_search_histories' schema, including actor, keyword, filters, search context, and the timestamp.","description":"This API endpoint fetches the details of a single discussion board search history entry by its UUID. The operation returns all schema-defined fields: 'id', 'actor_id' (the user/guest/membership session who performed the search), 'keyword' (the literal search string entered), 'filters' (serialized advanced filters object, if supplied), 'search_context' (where in the UI the search was initiated, if provided), and 'created_at' (when the search took place). No deletion, update, or audit timestamps are accessible from this endpoint; it is strictly for retrieval and only returns fields present in the database schema. If the specified record does not exist, a 404 error is returned. This endpoint is typically used by UI components or admin tools reviewing search history. Related endpoints: PATCH (list/by query), PUT (update), POST (create), and DELETE (remove).","summary":"Retrieve a single discussion board search history entry by ID (discussion_board_search_histories).","parameters":[{"name":"id","description":"UUID identifier for the target search history record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discussion board search history record.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories/{id}","method":"get"},{"specification":"This operation creates a new record in the 'discussion_board_search_histories' table, logging a user's search event for analytic, audit, or personalization purposes. The API requires the fields as defined in the schema: actor_id (UUID), keyword (non-null search string from the UI), optionally filters (serialized JSON string) and search_context, and automatically assigns an ID and created_at timestamp. Creation is available only to authenticated users or system actors with proper role.","description":"This API operation logs a new search history event for the discussion board search history table. Required input fields are: 'actor_id' (UUID of guest/member session performing the search), 'keyword' (the search phrase used). Optional elements are 'filters' (JSON string representing advanced search parameters), and 'search_context' (UI or application context for the search, if applicable). The system auto-generates a unique ID and creation timestamp. Application logic should validate all input fields according to business rules and the schema, and immediately return the recorded entry including all non-sensitive values. Related endpoints: update (PUT), retrieve by ID (GET), list (PATCH), delete (DELETE).","summary":"Log a new discussion board search history entry (discussion_board_search_histories).","parameters":[],"requestBody":{"description":"Information for the new search history record.","typeName":"IDiscussionBoardSearchHistory.ICreate"},"responseBody":{"description":"The created search history entry.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories","method":"post"},{"specification":"This operation updates an existing search history entry by its UUID, letting authorized users correct or annotate search event metadata. Updatable fields are 'keyword' (search phrase), 'filters' (advanced search criteria as JSON string), and 'search_context' (UI context). The schema does not permit update of the actor or original creation date, nor does it record soft/hard delete status. The endpoint strictly rejects references to fields or logic not present in the schema.","description":"This API updates one or more properties on a previously logged discussion board search history record, referenced by UUID. Permitted changes per schema: update 'keyword' (search phrase), modify 'filters' (serialized JSON of additional criteria), or set a new 'search_context' (UI/UX context string). The operation never allows change to the immutable 'actor_id' (who performed the search) or 'created_at' (timestamp of logging). Attempts to update fields outside the schema or manage deletion/audit status are forbidden and return validation errors. If the record does not exist, a 404 is returned. The endpoint returns the updated search history object as defined by schema. Related endpoints: create (POST), retrieve (GET), list (PATCH), delete (DELETE).","summary":"Update an existing discussion board search history record by ID (discussion_board_search_histories).","parameters":[{"name":"id","description":"UUID identifier for entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable search history fields: keyword, filters, search_context.","typeName":"IDiscussionBoardSearchHistory.IUpdate"},"responseBody":{"description":"The updated search history entry.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories/{id}","method":"put"},{"specification":"This operation deletes a search history entry from the discussion board by its UUID. The 'discussion_board_search_histories' schema does not include a soft-delete or 'deleted_at' field, so deletion is performed as a hard delete: the record is permanently removed from the database. Only administrators may perform this action.","description":"This API endpoint permanently deletes a search history record from the discussion board by its UUID. The backing schema lacks a soft-delete marker (such as 'deleted_at'), so the record is fully and irreversibly removed from the system (hard delete) upon request. If the record is not found, a 404 error is returned; otherwise, a successful deletion response is provided. The operation cannot be reversed, and deleted data is not recoverable. Attempts to reference non-existent or soft delete fields, or to partially remove data, will fail schema validation. This endpoint is intended strictly for administrative maintenance or compliance purposes.","summary":"Hard delete a discussion board search history by ID (discussion_board_search_histories).","parameters":[{"name":"id","description":"UUID identifier of the search history entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories/{id}","method":"delete"}],"completed":7,"total":115,"step":0,"created_at":"2025-07-23T06:53:15.308Z"},"tokenUsage":{"facade":{"aggregate":{"total":68752,"input":{"total":64625,"cached":0},"output":{"total":4127,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":68752,"input":{"total":64625,"cached":0},"output":{"total":4127,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":68752,"input":{"total":64625,"cached":0},"output":{"total":4127,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":68752,"input":{"total":64625,"cached":0},"output":{"total":4127,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements member hard/soft deletion logic. Delete the specified member by their unique id field (String, UUID). If the discussion_board_members table contains a deleted_at field (as per schema), this operation will perform a soft delete by setting deleted_at to the current timestamp. If the field does not exist, it will perform a hard delete (permanently removing the member row). No other fields except id and deleted_at are referenced, per the hard/soft deletion CRITICAL INSTRUCTIONS. No non-existing fields are referenced.","description":"This operation deletes a member from the discussion board system by their unique id as defined in the discussion_board_members table. If the table includes a deleted_at field (as verified in the schema), the API will perform a soft deletion by updating only this field to the current timestamp, effectively making the account inactive and invisible to general users while preserving it for audit and reversibility. If the deleted_at field does not exist, a hard delete will be executed, removing the member permanently from the database.\n\nNo other fields are considered, as required by CRITICAL INSTRUCTIONS. The id field is always required and must be a UUID string matching the member's table row. The API never references fields not in the schema. Deletion events should be logged for compliance but are handled at the API layer.\n\nThis deletion operation supports the enforcement of right-to-be-forgotten or admin/moderator-triggered removals, depending on platform policies. Related content (threads, posts, comments) is not automatically deleted by this operation but application-side cascading or manual review may be required as a follow-up business process.","summary":"Deletes a member account by id (soft delete using deleted_at if field exists; otherwise hard delete) in discussion_board_members table.","parameters":[{"name":"id","description":"The unique identifier (UUID string) of the discussion_board_member to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/members/{id}","method":"delete"},{"specification":"Implements list/search for moderator roles. Retrieve a filtered or paginated list of moderator assignments from discussion_board_moderators using PATCH, supporting search or filter criteria in the request body. All referenced fields (assigned_at, revoked_at, id, member_id) are present in the schema. Do not reference fields not in schema.","description":"This API operation lists moderator assignments (role escalation records) in the system via a PATCH call for advanced search/filter. Only fields available in the discussion_board_moderators table (id, member_id, assigned_at, revoked_at) may be used in filters or results. Pagination or search criteria can be included in the request body. No fields not existing in the schema are referenced.\n\nTypical usages include searching for active or past moderators, filtering by assignment or revocation timestamps, and showing paginated lists for admin review. This supports admin operational needs and role assignment auditing per requirements. All filtering or search logic is based on schema fields only.","summary":"Lists or searches moderator assignments (discussion_board_moderators) using PATCH and request body filters.","parameters":[],"requestBody":{"description":"Optional search or filter criteria using only id, member_id, assigned_at, revoked_at.","typeName":"IModeratorSearchRequest"},"responseBody":{"description":"Paginated result or array of moderator assignment entities matching search.","typeName":"IPageDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators","method":"patch"},{"specification":"Fetch a moderator assignment record by primary key (id) from discussion_board_moderators. Only references id, member_id, assigned_at, revoked_at, as these are present per schema. Strictly avoids referencing fields not defined in Prisma model.","description":"This GET operation retrieves a single moderator role assignment entity from discussion_board_moderators using its unique id as the path parameter. The response will include only schema-defined fields (id, member_id, assigned_at, revoked_at), reflecting all moderation role metadata. This supports admin auditing, operational review, or detailed UI views of moderator assignments. No non-existent fields are referenced at any point. Success returns moderator assignment or 404 if not found. Access is controlled for administrator roles only.","summary":"Fetch a discussion_board_moderators entry by its id (returns id, member_id, assigned_at, revoked_at only).","parameters":[{"name":"id","description":"UUID of moderator assignment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment entity record from discussion_board_moderators.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators/{id}","method":"get"},{"specification":"Creates a new moderator role assignment by inserting a record into discussion_board_moderators. Only accepts and stores fields present in the schema: id (auto), member_id (required, FK), assigned_at (set to now). Never invent fields or use properties not in schema. Application is expected to generate id and assigned_at on insertion if not specified.","description":"POST to /discussionBoard/moderators creates a new moderator assignment, escalating a member to moderator status. The request body must provide required fields (member_id) as defined in schema. No fields outside the model (id, member_id, assigned_at, revoked_at) are involved. On success, returns newly created moderator assignment entry. Uniqueness is enforced on member_id as per schema. Access restricted to administrator. Required for granting moderator privileges in user management flows.","summary":"Assigns moderator role to a member (creates discussion_board_moderators record).","parameters":[],"requestBody":{"description":"Information for moderator assignment; member_id is required.","typeName":"IModeratorCreate"},"responseBody":{"description":"Moderator assignment record created.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators","method":"post"},{"specification":"Updates a moderator role assignment entry by id, using only fields actually present in discussion_board_moderators schema: member_id, assigned_at, revoked_at. Does not reference fields not in schema (follows CRITICAL INSTRUCTIONS).","description":"PUT to /discussionBoard/moderators/{id} updates an existing role assignment. The path parameter id indicates the target moderator assignment. Only the fields present in schema (member_id, assigned_at, revoked_at) can be updated; all must be referenced by their schema names. Modifying revoked_at allows for deactivating or reactivating moderator role. Never invent or reference non-schema properties. Success returns updated entity, or 404 if not found. Access controlled for administrator only.","summary":"Update an existing moderator role assignment by id (fields: member_id, assigned_at, revoked_at).","parameters":[{"name":"id","description":"UUID of moderator assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Defines new values for updatable fields (member_id, assigned_at, revoked_at) according to schema.","typeName":"IModeratorUpdate"},"responseBody":{"description":"Updated moderator assignment entity.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators/{id}","method":"put"},{"specification":"Deletes a moderator role assignment by its id. The discussion_board_moderators table does not have a soft delete field (no deleted_at), so this is a hard delete (permanent removal). Only id is referenced, as defined in schema. All description references only actual schema fields.","description":"DELETE to /discussionBoard/moderators/{id} removes the moderator role assignment identified by the id path parameter. As the schema for discussion_board_moderators does not define a soft-delete or deleted_at field, this operation performs a hard delete, removing the entity from the table entirely with no reversibility. All description and logic reference only the id property in the schema according to CRITICAL INSTRUCTIONS. Access is restricted to administrator role.","summary":"Deletes a moderator assignment by id directly (hard delete, as no deleted_at field in schema).","parameters":[{"name":"id","description":"UUID primary key of moderator assignment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators/{id}","method":"delete"},{"specification":"Lists or searches administrator assignments using PATCH for advanced query/filter. Pulls all records from discussion_board_administrators using only schema fields: id, member_id, assigned_at, revoked_at. PATCH request body allows filters strictly on those fields (never any created/updated_by/etc).","description":"This PATCH operation lists administrator assignments or searches using advanced filters, directly querying discussion_board_administrators for only schema-defined fields: id, member_id, assigned_at, revoked_at. The PATCH request body supplies filter or pagination criteria based only on those attributes. The endpoint supports admin dashboards, compliance review, or auditing of administrator role history. No unknown fields are referenced at any stage. Returns paginated or filtered results array. Access restricted to administrator users.","summary":"List/search administrator assignments from discussion_board_administrators with PATCH (fields: id, member_id, assigned_at, revoked_at).","parameters":[],"requestBody":{"description":"Optional filtering/query criteria (uses only id, member_id, assigned_at, revoked_at).","typeName":"IAdministratorSearchRequest"},"responseBody":{"description":"List or page of administrator assignments matching query.","typeName":"IPageDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators","method":"patch"},{"specification":"Fetch an administrator assignment record by id (primary key) from discussion_board_administrators. Returns only fields present in schema (id, member_id, assigned_at, revoked_at).","description":"GET /discussionBoard/administrators/{id} retrieves a detailed administrator assignment entity, querying by id (UUID) path parameter. Only fields in discussion_board_administrators schema (id, member_id, assigned_at, revoked_at) are included in the response. Operation supports admin role management dashboards, auditing, and direct entity queries. All referenced schema fields are required for output; no additional or non-existent fields mentioned. Strict access control for administrator role applies.","summary":"Retrieve an administrator assignment record by id (fields: id, member_id, assigned_at, revoked_at).","parameters":[{"name":"id","description":"UUID of administrator assignment to look up.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator assignment record from discussion_board_administrators.","typeName":"IDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators/{id}","method":"get"},{"specification":"Assigns administrator role to a member by creating an entry in discussion_board_administrators. The request body must supply the member_id (the member to assign as administrator). Only uses schema fields id (auto or supplied), member_id, assigned_at, revoked_at. Never references fields not defined by the Prisma model.","description":"POST operation at /discussionBoard/administrators adds a new administrator role assignment. The request body includes member_id as required by the schema; on creation, assigned_at is set automatically or from supplied value. id may be supplied or auto-generated. No additional properties are referenced or permitted. This is required for elevating user privileges to administrator, complying with business logic for privilege management. Success returns the stored administrator assignment record. Access is restricted to existing administrators.","summary":"Assign a discussion_board_member as administrator (creates in discussion_board_administrators table).","parameters":[],"requestBody":{"description":"Payload with member_id as required for new administrator assignment (id, assigned_at, revoked_at optional).","typeName":"IAdministratorCreate"},"responseBody":{"description":"Administrator assignment entity created and stored.","typeName":"IDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators","method":"post"},{"specification":"Updates an administrator assignment entity by its id. Payload may update any field existing in schema (member_id, assigned_at, revoked_at); does not reference non-schema properties. Returns updated entity.","description":"PUT to /discussionBoard/administrators/{id} updates the administrator assignment identified by id path parameter. Only fields present in schema (member_id, assigned_at, revoked_at) may be modified by the request body. On success returns updated entity, access restricted to administrator role holders. All field references are strictly per model definition without invention. Used for transferring, revoking, or modifying administrator role assignments per organizational needs.","summary":"Update an administrator assignment entity by id, only using schema fields member_id, assigned_at, revoked_at.","parameters":[{"name":"id","description":"UUID of administrator assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Body for updating assignment: member_id, assigned_at, revoked_at per model.","typeName":"IAdministratorUpdate"},"responseBody":{"description":"Updated administrator assignment entity.","typeName":"IDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators/{id}","method":"put"},{"specification":"Removes an administrator assignment entity by id. The discussion_board_administrators table does NOT contain a soft delete/deleted_at field, so this is a hard delete. Only id is referenced; never invokes or describes any other schema property not in table.","description":"DELETE to /discussionBoard/administrators/{id} performs a hard delete of administrator assignment row using id as primary key. Because the model does not define a soft delete field, the entity is permanently removed from the system and cannot be restored. Application log/audit is expected for compliance. Endpoint only references id schema field per table definition. Strictly for administrator users as permitted in platform policies.","summary":"Hard deletes administrator assignment entity by id (no soft delete property exists in this model).","parameters":[{"name":"id","description":"UUID of administrator assignment to hard delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators/{id}","method":"delete"},{"specification":"Retrieves a paginated or filtered list of discussion threads from discussion_board_threads table using PATCH and optional search/filter request body. Only refers to defined schema fields: id, discussion_board_member_id, discussion_board_category_id, title, body, is_pinned, is_closed, created_at, updated_at, deleted_at. No invented or non-schema fields.","description":"PATCH to /discussionBoard/threads lists or searches for discussion threads, using filter, sort, or paging logic in the request body with only those properties in the discussion_board_threads schema (id, member_id, category_id, title, body, is_pinned, is_closed, created_at, updated_at, deleted_at). Returns array or paginated page of matching thread entities for admin, member, or guest usage as permitted. No fields outside the schema are touched. Used for feed display, advanced search, and moderation review.","summary":"Lists or searches discussion threads via PATCH and filters (fields: id, member_id, category_id, title, body, is_pinned, is_closed, created_at, updated_at, deleted_at).","parameters":[],"requestBody":{"description":"Filter/sort/request information for thread search (utilizes schema fields only).","typeName":"IThreadSearchRequest"},"responseBody":{"description":"Paginated or array result of thread entities from search.","typeName":"IPageDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads","method":"patch"}],"completed":19,"total":115,"step":0,"created_at":"2025-07-23T06:53:22.022Z"},"tokenUsage":{"facade":{"aggregate":{"total":105906,"input":{"total":98493,"cached":0},"output":{"total":7413,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":105906,"input":{"total":98493,"cached":0},"output":{"total":7413,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":105906,"input":{"total":98493,"cached":0},"output":{"total":7413,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":105906,"input":{"total":98493,"cached":0},"output":{"total":7413,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Get a specific discussion thread by its unique UUID. This endpoint retrieves all fields for a given thread, based strictly on the discussion_board_threads Prisma schema. The thread object includes its creator's member UUID, associated category UUID, title, body, pin/closed status, and relevant audit timestamps. Only fields defined in the schema are included. The description, updated_at, created_at, and deleted_at are provided. If the thread is soft-deleted (deleted_at not null), it is considered removed by moderation/admin but NOT physically deleted from the database.","description":"Retrieves all information for a discussion thread using its unique identifier. This includes the creator's member ID, associated category ID, title, body, is_pinned and is_closed flags, creation and update timestamps, and whether the thread has been soft-deleted (via the deleted_at field). This endpoint directly references the discussion_board_threads table and does not include any associations or expandable relationships. Permissions should be enforced according to role-based access control, as documented in the requirements analysis, ensuring that only visible (non-deleted or authorized) threads are returned. If deleted_at is set, the thread is considered soft-deleted and may be hidden from typical end-user views, depending on authorization. Validation is performed only on the fields actually in the schema. Error responses are provided for not-found or unauthorized access attempts. Strict field compliance is maintained: no extra fields beyond the schema.","summary":"Get discussion board thread by ID (discussion_board_threads).","parameters":[{"name":"id","description":"UUID of the discussion thread to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The discussion board thread object.","typeName":"IDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads/{id}","method":"get"},{"specification":"Create a new discussion thread. Input strictly follows the discussion_board_threads schema: must include creator's member ID (discussion_board_member_id), associated category ID (discussion_board_category_id), title (string), body (string), is_pinned (boolean), is_closed (boolean), and initial timestamps. All required fields are as in the schema; no extra properties are allowed. Soft deletion is supported via deleted_at, but this is not set on creation.","description":"Creates a new discussion thread. Required fields are: discussion_board_member_id (UUID of creator), discussion_board_category_id (UUID of the category), title (string), body (string), is_pinned (boolean), is_closed (boolean), plus created_at and updated_at timestamps (typically auto-set). The POST body must match the schema, and no other properties are allowed. On success, returns the stored thread object. Role-based access controls are enforced as per requirements: only active, authenticated members may create threads. Validation rejects requests that reference nonexistent member, category, or have invalid types. The response is a complete thread object per schema, reflecting only actual columns. If requested by non-authorized users, returns an error per RBAC.","summary":"Create new discussion board thread (discussion_board_threads).","parameters":[],"requestBody":{"description":"Thread creation parameters strictly matching discussion_board_threads schema.","typeName":"IDiscussionBoardThread.ICreate"},"responseBody":{"description":"Created discussion board thread object.","typeName":"IDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads","method":"post"},{"specification":"Update an existing discussion thread, identified by its UUID. Only fields in the discussion_board_threads schema may be updated. Supports editing the title, body, is_pinned status, is_closed status, and updated_at timestamp. Soft-deleted threads (deleted_at not null) may not be updated unless authorized. Enforces RBAC from requirements documentation.","description":"Updates an existing thread by its unique identifier. The PUT body consists only of allowed updatable fields from the schema: title (string), body (string), is_pinned (boolean), is_closed (boolean), and updated_at (timestamp). The endpoint verifies existence and may reject updates for soft-deleted threads unless requested by an admin or moderator. No other properties can be updated or referenced. Follows role-based access controls: only the thread creator, moderators, or administrators may update, per permissions matrix. Error handling follows proper 404 for not found, 403 for unauthorized, and 400 for invalid input. Upon success, returns the updated thread object (no intermediary fields).","summary":"Update discussion board thread (discussion_board_threads).","parameters":[{"name":"id","description":"UUID of the thread to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for thread update, as permitted by discussion_board_threads.","typeName":"IDiscussionBoardThread.IUpdate"},"responseBody":{"description":"Updated discussion thread object.","typeName":"IDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads/{id}","method":"put"},{"specification":"Soft-delete a discussion thread by its UUID. The delete operation sets the deleted_at field to the current timestamp (soft delete), as specified by the discussion_board_threads Prisma schema. The thread is NOT permanently removed, only marked as deleted. This ensures reversible deletion in line with moderation and compliance requirements.","description":"Soft-deletes a thread identified by its UUID. Rather than permanent removal, sets the thread's deleted_at field to the current timestamp and prevents it from appearing in standard listings. Only users with appropriate permissions (thread creator, moderator, or admin) may perform this operation. The operation is strictly compliant with the schema: only modifies the deleted_at field, does not remove or update other fields. Attempting to delete an already soft-deleted thread should have no effect or return appropriate feedback. On success, returns the updated thread object reflecting soft-deletion. Unauthorized or nonexistent deletions return appropriate error codes. No extra fields are used beyond those in the schema.","summary":"Soft-delete a discussion board thread (discussion_board_threads).","parameters":[{"name":"id","description":"UUID of the thread to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Thread object after soft-delete.","typeName":"IDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads/{id}","method":"delete"},{"specification":"List or search discussion board posts. Retrieves post objects, allowing for search/filter logic, in strict accordance with the discussion_board_posts schema. Each result includes discussion_board_thread_id, discussion_board_member_id, body, is_edited, created_at, updated_at, and deleted_at as present in the schema. Supports pagination/filtering as implemented on the server side; request body should match .IRequest convention. Returned posts only reference existing fields.","description":"Retrieves a paginated, filtered, or searched listing of posts, based on posted criteria. Only fields present in the discussion_board_posts schema are returned (discussion_board_thread_id, discussion_board_member_id, body, is_edited, created_at, updated_at, deleted_at). Posts that have been soft-deleted (deleted_at not null) may be filtered from standard user listings unless the requester has elevated privileges. Filtering, sorting, and pagination must be driven by actual indexed fields in the schema. No extra/non-schema columns are included. Error handling includes standard validation errors and RBAC enforcement, per requirements documentation.","summary":"List/search discussion board posts (discussion_board_posts).","parameters":[],"requestBody":{"description":"Search or filter parameters for posts.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated post listing per schema.","typeName":"IPageIDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts","method":"patch"},{"specification":"Get a specific post by its UUID. Retrieves post object per discussion_board_posts schema: includes thread ID, member ID, body, is_edited, created_at, updated_at, and deleted_at. Returns all actual schema fields; soft-deleted posts are included only if authorized.","description":"Retrieves the post matching the provided UUID. Returns schema fields only: discussion_board_thread_id, discussion_board_member_id, body, is_edited, created_at, updated_at, and deleted_at. References only fields defined in the Prisma schema. Soft-deletion respected: posts with deleted_at not null generally hidden from standard listings unless requester has appropriate role. Returns 404 if not found, 403 for unauthorized, and omits non-schema fields. Error handling and permission checks are per requirements documentation.","summary":"Get discussion board post by ID (discussion_board_posts).","parameters":[{"name":"id","description":"UUID of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The post object by ID.","typeName":"IDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts/{id}","method":"get"},{"specification":"Create a new discussion post. Accepts only fields from discussion_board_posts schema: requires discussion_board_thread_id (UUID), discussion_board_member_id (UUID), body (string), is_edited (boolean), created_at, and updated_at. deleted_at not set at creation. Does not accept extra fields.","description":"Creates a new post under an existing thread. The request body must contain only allowed schema fields: discussion_board_thread_id (thread UUID), discussion_board_member_id (posting user UUID), body (string, post content), is_edited (boolean: initial should be false), created_at, and updated_at. No extra properties or composite fields permitted. If the specified thread or member does not exist, or user lacks permission, returns error. Upon success, returns complete post object as stored in schema, and omits all non-schema fields.","summary":"Create new post on a discussion thread (discussion_board_posts).","parameters":[],"requestBody":{"description":"New post parameters per schema.","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"The created post object.","typeName":"IDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts","method":"post"},{"specification":"Update a post by its UUID. Only updates fields defined in discussion_board_posts schema. Permits changes to body, is_edited, and updated_at timestamp. Will not restore soft-deleted posts unless specifically authorized. Reference only schema fields.","description":"Updates a post, identified by its UUID. Allowed fields for update: body (string), is_edited (boolean), updated_at (timestamp). Permissions are enforced: only the original author, moderators, or administrators may perform this operation, subject to RBAC. Soft-deleted posts (deleted_at not null) generally may not be edited unless elevated privileges are held. On success, returns the fully updated post object as per schema. Does not touch any extra or non-schema fields. Error codes and validations per requirements documentation and authorization matrix.","summary":"Update a discussion board post (discussion_board_posts).","parameters":[{"name":"id","description":"Post UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for post update as allowed by schema.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"Updated post object after edit.","typeName":"IDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts/{id}","method":"put"},{"specification":"Soft-delete a post identified by its UUID. Operation sets deleted_at to current timestamp, not physically removing the row. Only discussion_board_posts schema fields are referenced. Only authorized users (author, moderator, admin) may perform the soft delete.","description":"Soft-deletes a post: sets the deleted_at field in the discussion_board_posts table to current timestamp. Does not permanently remove data. After soft deletion, the post is excluded from public listings and may only be accessed by authorized staff. Nonexistent or already soft-deleted posts result in a no-op or error. All other fields are untouched. Role-based permissions are enforced, in compliance with requirements. Returns the updated post object reflecting soft-deleted state. Errors for unauthorized, not-found, and input validation handled per strict schema field list.","summary":"Soft-delete a post (discussion_board_posts).","parameters":[{"name":"id","description":"Post UUID to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post object after soft-delete.","typeName":"IDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts/{id}","method":"delete"},{"specification":"List or search comments on posts. Returns only discussion_board_comments schema fields: includes post_id, parent_id, member_id, body, is_edited, created_at, updated_at, deleted_at. Supports pagination/filter logic if provided; only fields defined in the schema. Soft-deleted comments (deleted_at not null) are subject to RBAC and may not show in default results.","description":"Lists or searches discussion/post comments using request parameters. Only returns comment objects with schema-accurate fields: discussion_board_post_id, parent_id, discussion_board_member_id, body, is_edited, created_at, updated_at, and deleted_at. Pagination and filtering should use only indexed/allowed schema fields. Soft-deleted comments omitted unless raised permissions. All logic and security tracks with requirements documentation and role-based access control matrix. No extra fields allowed.","summary":"List/search comments (discussion_board_comments).","parameters":[],"requestBody":{"description":"Request parameters for searching/filtering comments.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated list of comments.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments","method":"patch"},{"specification":"Get a specific comment by its UUID. Returns comment object as per discussion_board_comments schema: includes post_id, parent_id, member_id, body, is_edited, created_at, updated_at, and deleted_at. No extra properties or embedded data. Soft-deleted comments only visible to authorized users.","description":"Retrieves a single comment (by UUID), returning only the schema-specified fields: discussion_board_post_id, parent_id (nullable), discussion_board_member_id, body, is_edited, created_at, updated_at, and deleted_at. Checks if comment is soft-deleted and applies RBAC for visibility. No cross-table expansion or extra information. Returns 404 for missing comments, 403 for unauthorized, with strict compliance to the schema field list. All field accesses validated strictly against the current DB schema.","summary":"Get discussion board comment by ID (discussion_board_comments).","parameters":[{"name":"id","description":"UUID of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Schema-accurate comment object.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments/{id}","method":"get"},{"specification":"Create a new comment on a post or parent comment. Request body limited to fields defined in discussion_board_comments schema: discussion_board_post_id (UUID), parent_id (nullable UUID), discussion_board_member_id (UUID), body (string), is_edited (boolean), created_at, updated_at. Soft-deletion and edit tracking are not applied on comment creation. No extra properties or relationships in request or response.","description":"Creates a new comment on a post or in reply to another comment. Required request fields are: discussion_board_post_id (post UUID), parent_id (UUID of parent comment, nullable), discussion_board_member_id (commenter), body, is_edited (should be false on initial write), created_at, and updated_at. The new comment object is returned exactly as per schema fields, with no embedding or extra information, and cannot reference non-schema fields. Only authorized, active members can create comments, enforced by RBAC. Invalid or missing relationships (e.g., non-existent post) result in error per requirements. Soft deletion and edit tracking are present for later modification events only.","summary":"Create new comment on a post or comment (discussion_board_comments).","parameters":[],"requestBody":{"description":"New comment input strictly mapped to schema.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Created comment object as stored.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments","method":"post"}],"completed":31,"total":115,"step":0,"created_at":"2025-07-23T06:53:22.487Z"},"tokenUsage":{"facade":{"aggregate":{"total":143183,"input":{"total":132343,"cached":0},"output":{"total":10840,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":143183,"input":{"total":132343,"cached":0},"output":{"total":10840,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":143183,"input":{"total":132343,"cached":0},"output":{"total":10840,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":143183,"input":{"total":132343,"cached":0},"output":{"total":10840,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Delete a subscription record from the discussion_board_subscriptions table. According to the schema, the entity does not have a soft delete (no deleted_at or similar field), so a DELETE operation must perform a hard delete (permanent removal) of the row identified by its id. This operation is typically restricted to the owner of the subscription or authorized administrators. Requests referencing this endpoint must only use fields present in the schema, such as id.","description":"This operation deletes a single discussion board subscription from the system. The discussion_board_subscriptions entity, as defined in the Prisma schema, does not have a soft delete field, meaning that deleting a record results in its permanent removal from the database. Only the unique identifier (id) is required to find and remove the record. The API must validate that the requesting user is authorized to perform this operation, such as being the owner of the subscription or an administrator.\n\nUpon successful deletion, the record will no longer exist in the database and cannot be recovered except through out-of-band mechanisms (such as backups). Error handling must account for cases where the id is not found, or deletion is denied due to insufficient permissions. No references should be made to non-existent fields such as 'deleted_at', 'created_by', or similar.\n\nThis endpoint is critical for managing notification preferences or following/unfollowing content flows per requirement F07.","summary":"Hard delete a subscription from discussion_board_subscriptions by id (permanent removal).","parameters":[{"name":"id","description":"Unique identifier for the subscription record to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionBoard/subscriptions/{id}","method":"delete"},{"specification":"Search for mentions in the discussion_board_mentions table using advanced criteria. The PATCH method is used for retrieving a filtered list based on request body parameters (such as actor_member_id, mentioned_member_id, content_type, content_id, or created_at) as defined in the schema. This is not a partial update, but an advanced search endpoint for retrieving multiple results.","description":"This operation provides an advanced search/list retrieval for discussion_board_mentions entities. It allows clients to query mentions by various supported parameters in the request body, such as actor_member_id, mentioned_member_id, content_type, content_id, and created_at. It supports pagination, filtering, and potentially sorting results, as required for features like notification history, mention review, or analytics.\n\nThe schema for discussion_board_mentions includes only the following fields: id, mentioned_member_id, actor_member_id, content_type, content_id, and created_at. All queries and filters must reference strictly these fields, and the response should be a list of mention objects matching the criteria. No fields such as deleted_at, updated_by, or similar are available in this entity and must not be referenced.\n\nPermission checks should ensure that only authorized actors can access mentions relevant to them. Error handling must handle cases where filters are invalid or where users lack access to some data. This endpoint supports power users and moderators in tracking and managing mentions as part of notifications (F07).","summary":"List/search mentions in discussion_board_mentions with request body filters (not partial update).","parameters":[],"requestBody":{"description":"Searching and filtering parameters for retrieving a list of mentions.","typeName":"IDiscussionBoardMention.IRequest"},"responseBody":{"description":"Paginated list of mention objects matching the search criteria.","typeName":"IPageIDiscussionBoardMention"},"authorizationRoles":null,"path":"/discussionBoard/mentions","method":"patch"},{"specification":"Retrieve a single mention record from the discussion_board_mentions table by id. Only the id field should be used as a parameter. The returned object will contain only fields defined in the Prisma schema: id, mentioned_member_id, actor_member_id, content_type, content_id, and created_at.","description":"Fetch a single discussion_board_mentions entity by its unique id. The schema specifies only the following fields: id, mentioned_member_id, actor_member_id, content_type, content_id, and created_at. This endpoint returns all defined fields for the targeted mention and should not include or reference any non-existent fields, such as deleted_at, update timestamps, or audit logs.\n\nUsed in scenarios where a user or moderator wants to view the details of a specific mention event (e.g., for notification review, audit, or message context extraction). Error situations, such as not found or unauthorized access, should be gracefully handled.","summary":"Get a mention by id from discussion_board_mentions (fields as schema-defined only).","parameters":[{"name":"id","description":"Unique identifier for the mention record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full mention object as defined in the schema.","typeName":"IDiscussionBoardMention"},"authorizationRoles":null,"path":"/discussionBoard/mentions/{id}","method":"get"},{"specification":"Create a new mention record in the discussion_board_mentions table. The POST method accepts mention details corresponding strictly to schema-defined fields: mentioned_member_id, actor_member_id, content_type, and content_id. No extra fields outside the schema are permitted. Returns the created entity.","description":"Insert a new mention in the discussion_board_mentions table. Clients must provide mentioned_member_id (the target of the mention), actor_member_id (the user creating the mention), content_type (e.g., thread, post, comment), and content_id (UUID for the content where mention occurred). created_at is generated automatically. The payload must not include or reference any fields not defined in the schema.\n\nCreates an auditable entry for use in notifications, history, or analytics flows as described in F07 of the requirements. The endpoint should return a representation of the newly created mention entity, containing only the fields listed in the Prisma schema (no soft-deletion, modification, or extra audit fields).","summary":"Create a new mention in discussion_board_mentions with schema-defined fields only.","parameters":[],"requestBody":{"description":"Mention creation payload as per schema (no extra fields).","typeName":"IDiscussionBoardMention.ICreate"},"responseBody":{"description":"The newly created mention entity.","typeName":"IDiscussionBoardMention"},"authorizationRoles":null,"path":"/discussionBoard/mentions","method":"post"},{"specification":"Update an existing mention record in the discussion_board_mentions table. PUT method is used for full resource replacement, requiring all relevant fields (mentioned_member_id, actor_member_id, content_type, content_id). No extra fields are permitted. Updates are only applied to fields present in the schema, and not to non-existent fields like deleted_at or audit logs.","description":"This endpoint updates all updatable fields of an existing mention in the discussion_board_mentions table by its id. The request body should include only mention fields present in the schema: mentioned_member_id, actor_member_id, content_type, content_id. created_at cannot be changed. All updates must avoid referencing any non-existent fields, such as deleted_at, created_by, or similar.\n\nThis allows for correcting mention targets, actor assignment, or content reference in line with the requirements for mention management and audit (F07). On success, returns the updated mention, reflecting only schema-defined fields. Idempotency and all validation rules must follow standard PUT semantics.","summary":"Replace an existing mention entity in discussion_board_mentions with request body fields.","parameters":[{"name":"id","description":"Identifier for the mention entity to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload with all fields to replace the entity (schema-only fields).","typeName":"IDiscussionBoardMention.IUpdate"},"responseBody":{"description":"The updated mention entity as per schema.","typeName":"IDiscussionBoardMention"},"authorizationRoles":null,"path":"/discussionBoard/mentions/{id}","method":"put"},{"specification":"Delete a mention record from the discussion_board_mentions table. The schema does not have a soft delete field, so this operation performs a hard delete (removal) by id. Only the id is used to locate and delete the mention. All other fields are ignored. This action is permanent and non-reversible via the API.","description":"Removes a single mention entity from the discussion_board_mentions table based on its id. As the schema does not contain a soft delete (e.g., deleted_at), the DELETE operation performs a hard deletion, meaning the record is permanently removed and cannot be restored through the API. Only the id field is used in the operation. References to additional fields, non-existent or otherwise, are NOT permitted.\n\nThe DELETE endpoint is critical for managing audit, data clean-up, or removing erroneous/expired mentions for notification management (F07).","summary":"Permanently delete a mention entity from discussion_board_mentions by id (hard delete).","parameters":[{"name":"id","description":"Id of the mention entity to delete from the system.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionBoard/mentions/{id}","method":"delete"},{"specification":"List/search all vote types in the discussion_board_vote_types table. PATCH is used for complex querying/search (not for partial entity updates). Fields available for search/filter: id, code, name, description, created_at, updated_at only. No soft delete field exists. Pagination and/or sorting supported in the request body. Returns paged results.","description":"Searches for discussion_board_vote_types entities using request body parameters. Filters can be applied to id, code, name, description, created_at, updated_at (as per schema). Useful for site administrators, configuration workflows, UI setup, or analytics. There is no deleted_at field, so all returned results are active (hard deletes only). The endpoint supports pagination, filtering, and potentially sorting but only using schema-present fields.\n\nDo NOT reference fields such as deleted_at, created_by, etc. in request or responses. Returns a paginated collection of vote type objects. Errors from invalid filters or unauthorized access must be handled gracefully.","summary":"Search/list vote types with complex filters for discussion_board_vote_types (no partial update).","parameters":[],"requestBody":{"description":"Search/filter parameters for listing vote types.","typeName":"IDiscussionBoardVoteType.IRequest"},"responseBody":{"description":"Paginated results of vote types matching search criteria.","typeName":"IPageIDiscussionBoardVoteType"},"authorizationRoles":null,"path":"/discussionBoard/voteTypes","method":"patch"},{"specification":"Get an individual vote type from discussion_board_vote_types by id. The schema contains only id, code, name, description, created_at, updated_at fields for this entity. Only use the id as identifier, and response must not contain non-existent fields.","description":"Retrieves a single vote type entity by primary key from discussion_board_vote_types. The only fields in the schema are: id, code, name, description, created_at, and updated_at. This endpoint is necessary for viewing the characteristics of specific voting mechanism types (e.g., for displaying vote options in the UI or enforcing logic in content voting flows). No soft deletion exists (deleted_at is not present), so only active or existing types are retrievable. Fields outside of the schema, such as state, are not permitted in the response.\n\nHandles cases where the id does not exist by returning not found errors.","summary":"Get a single vote type from discussion_board_vote_types by id (schema-only fields).","parameters":[{"name":"id","description":"Vote type id (UUID) to retrieve from the table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full vote type entity with all schema fields.","typeName":"IDiscussionBoardVoteType"},"authorizationRoles":null,"path":"/discussionBoard/voteTypes/{id}","method":"get"},{"specification":"Create a new vote type entry in the discussion_board_vote_types table. Only schema-defined fields (code, name, description) are allowed in the request. created_at and updated_at are handled automatically. No soft delete or extra fields allowed. Returns the created entity.","description":"Allows administrators to define a new voting option type in the system, such as 'upvote', 'downvote', etc. The schema allows only code, name, and description as user-supplied fields. No soft delete is supported, and fields such as deleted_at must not appear in request or response. The entity is created with a new id and system timestamps.\n\nThis operation is essential for extending or modifying the available vote options for UI and content workflows. Returns the created vote type as per all schema-defined fields only.","summary":"Create a new vote type in discussion_board_vote_types with schema-defined fields only.","parameters":[],"requestBody":{"description":"Vote type creation data per schema-only fields.","typeName":"IDiscussionBoardVoteType.ICreate"},"responseBody":{"description":"The created vote type entity.","typeName":"IDiscussionBoardVoteType"},"authorizationRoles":null,"path":"/discussionBoard/voteTypes","method":"post"},{"specification":"PUT operation to fully update a vote type in discussion_board_vote_types by id. Only code, name, or description can be changed (as per schema). created_at and updated_at are managed by the system. No soft delete exists.","description":"This endpoint replaces all updatable fields of a given vote type entity. Fields allowed for modification per schema are: code, name, and description. No soft delete or deletion-related fields may be referenced. System-generated fields (id, created_at, updated_at) are handled separately and should not be in the request body. The endpoint must validate that the new values do not violate uniqueness constraints (for code and name). Returns the updated vote type as defined by the schema. Error handling must deal with unique constraint violations and not-found scenarios.","summary":"Replace an existing vote type in discussion_board_vote_types by id (PUT, schema-only fields).","parameters":[{"name":"id","description":"Id of the vote type to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full update data for all updatable fields (per schema).","typeName":"IDiscussionBoardVoteType.IUpdate"},"responseBody":{"description":"The updated vote type entity (full schema).","typeName":"IDiscussionBoardVoteType"},"authorizationRoles":null,"path":"/discussionBoard/voteTypes/{id}","method":"put"},{"specification":"Delete a vote type entry from the discussion_board_vote_types table. No soft delete exists (deleted_at is not in schema), so DELETE is a hard delete operation by id. Any related votes must be checked at the application level, as the schema does not address cascading deletes. The only parameter used is id.","description":"Permanently remove a vote type entity from discussion_board_vote_types by its primary key. Because the schema does not contain deleted_at, the operation is a hard delete. Attempts to delete a vote type in use may fail depending on referential constraints or application logic. Only id is used to identify the record for deletion. No field outside the schema should be referenced.\n\nThis operation is necessary for administrators to manage supported vote types and clean up deprecated options. Error handling must cover authentication as well as referential integrity cases (e.g., associated votes still exist for this type).","summary":"Hard delete a vote type from discussion_board_vote_types by id (permanent removal).","parameters":[{"name":"id","description":"Id of the vote type entity to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionBoard/voteTypes/{id}","method":"delete"},{"specification":"List/search all votes (across threads, posts, or comments) found in discussion_board_votes. PATCH method allows for complex querying and is not used for partial entity updates. Only fields in the schema (id, voter_id, vote_type_id, thread_id, post_id, comment_id, created_at, updated_at) can be used as filter or returned fields. Returns a paginated array of matching vote entities.","description":"Retrieves a paginated list of votes from the discussion_board_votes table as per advanced filtering criteria provided in the request body. Searchable fields include: id, voter_id, vote_type_id, thread_id, post_id, comment_id, created_at, updated_at. The API will not accept any field outside of those defined in the schema, and it must not reference deleted_at, created_by, or similar non-existent fields.\n\nSupports features like aggregate voting history, analytics, UI rendering for voting, and admin review of voting activity. Pagination and sorting should be implemented in the request and response structure. Permissions must ensure that only authorized users (e.g., the voter, content owner, or admins) may access non-public voting data. Error handling covers not found, unauthorized, and validation failure scenarios.","summary":"List/search votes across all supported content types from discussion_board_votes (PATCH, advanced criteria).","parameters":[],"requestBody":{"description":"Filter/search parameters per schema-defined vote fields only.","typeName":"IDiscussionBoardVote.IRequest"},"responseBody":{"description":"Paged list of vote entities matching the query.","typeName":"IPageIDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes","method":"patch"}],"completed":43,"total":115,"step":0,"created_at":"2025-07-23T06:53:23.364Z"},"tokenUsage":{"facade":{"aggregate":{"total":180683,"input":{"total":166206,"cached":3840},"output":{"total":14477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":180683,"input":{"total":166206,"cached":3840},"output":{"total":14477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":180683,"input":{"total":166206,"cached":3840},"output":{"total":14477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":180683,"input":{"total":166206,"cached":3840},"output":{"total":14477,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new configuration entry in the discussion_board_configurations table. Only fields present in the schema should be referenced. This operation creates a new global key-value configuration for the discussion board, including key, value, description (optional), and current timestamps. No soft delete for creation operation. Admin permissions required.","description":"This endpoint allows administrators to create a new configuration item for the discussion board system. The configuration stores a unique key, its value, and an optional description to document the setting's purpose. The operation adheres strictly to the fields in the discussion_board_configurations schema: id (auto-generated, not client-set), key, value, description (optional), created_at and updated_at (server-generated). Key uniqueness is enforced, and the endpoint does not reference any non-existent or inferred columns. The configuration is used for site-wide settings such as feature toggles or limits. All parameters must match the table's definition, and business logic must ensure atomicity per row. If a submitted key duplicates an existing configuration, an error is returned. This API should be restricted to system administrators as it affects global board configuration. There is no soft-delete support for create operations. Related: see update, delete, and get endpoints for configuration management.","summary":"Creates a configuration entry in discussion_board_configurations table.","parameters":[],"requestBody":{"description":"Payload for creating a configuration entry. Only includes fields from the schema: key, value, optional description.","typeName":"IDiscussionBoardConfiguration.ICreate"},"responseBody":{"description":"Returns the created configuration entry as per the discussion_board_configurations schema.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations","method":"post"},{"specification":"Update an existing configuration entry in discussion_board_configurations, referencing only actual schema fields. This operation modifies the value and/or description for a configuration identified by id. It does not reference deleted_at (which does not exist). Admin permissions are enforced. Only fields: key, value, description, updated_at are relevant for update; created_at and id are not client-settable.","description":"This endpoint allows administrators to update an existing configuration entry for the discussion board system, uniquely identified by its id. The only updatable fields, matching the actual schema, are value and description (optionally), while the key remains unique and unmodifiable after creation. Attempting to update fields outside of the schema (such as deleted_at) is strictly forbidden. The updated_at timestamp is managed by the server to reflect update time. If the id does not reference an existing entry, an error is returned. This action is limited to admin-level users, as global configurations directly impact board behavior.","summary":"Updates configuration entry in discussion_board_configurations by id.","parameters":[{"name":"id","description":"Target configuration's unique id for update, as per table PK.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload to update a configuration entry. Only value and description are updatable, per schema.","typeName":"IDiscussionBoardConfiguration.IUpdate"},"responseBody":{"description":"Returns the updated configuration entry as per the discussion_board_configurations schema.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations/{id}","method":"put"},{"specification":"Delete a configuration entry from the discussion_board_configurations table by id. No soft-delete is supported (no deleted_at column). This is a hard delete operation, permanently removing the row. Authorization is restricted to administrators.","description":"This endpoint permanently deletes a configuration entry from the discussion_board_configurations table, using the row's id as the path parameter. Since there is no deleted_at or soft-delete support in the schema, this action immediately removes the record from the database. The operation should be restricted to administrators due to the impact on global board configuration. The id path parameter must represent a valid existing configuration's primary key. All references are strictly to fields in the schema; no unsupported columns are mentioned.","summary":"Deletes (hard delete) a configuration entry by id from discussion_board_configurations.","parameters":[{"name":"id","description":"Target configuration's unique id for deletion, as per table PK.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations/{id}","method":"delete"},{"specification":"Query (list/search) guest sessions from discussion_board_guests table. Supports paging, filtering, and sorting on fields present in the schema (id, session_token, ip_address, user_agent, created_at, expires_at). Do NOT reference non-existent fields. Guest sessions are passive browsing records, not accounts.","description":"Returns a list of guest session records (not user accounts) with optional search filters. Only the following fields can be used for filtering, pagination, or sorting: id, session_token, ip_address, user_agent, created_at, expires_at. This is NOT for authentication, but to support admin analytics, abuse tracking, or rate limiting. Each guest record is traceable for browsing-only sessions, in accordance with the schema. No non-existent or derived fields are referenced.","summary":"Query/search guest browsing sessions from discussion_board_guests table.","parameters":[],"requestBody":{"description":"Search/filter/pagination parameters targeting actual guest fields: id, session_token, ip_address, user_agent, created_at, expires_at.","typeName":"IPageDiscussionBoardGuest.IRequest"},"responseBody":{"description":"Paginated list of guest session records, structured per the schema.","typeName":"IPageDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests","method":"patch"},{"specification":"Get a single guest session by id from discussion_board_guests table. Path parameter id must match schema's PK. No authentication or login is possible for guests (guests do not have accounts); this enables admin analytics or audit only.","description":"Returns the detail of a guest session record identified by id, using only properties present in the discussion_board_guests schema. This is for administrative or analytic access—not login. If the id does not reference an actual guest record, a not-found error is returned. Only schema fields are returned (id, session_token, ip_address, user_agent, created_at, expires_at). No non-existent or authentication-related properties are referenced.","summary":"Retrieve a single guest browsing session by id (PK) from discussion_board_guests.","parameters":[{"name":"id","description":"The primary key id of the guest session to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail guest session record, as per discussion_board_guests schema.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests/{id}","method":"get"},{"specification":"Create a guest browsing session record in discussion_board_guests table. Only schema fields are referenced: session_token, ip_address, user_agent (optional), created_at, expires_at. No password or authentication is possible; these are not user accounts.","description":"Creates a new guest browsing session record, storing session token, IP address, optional user agent, and valid time range. All values must match the schema's types and constraints. This endpoint is NOT for user authentication or guest login (guests are not accounts, but passive session records). Session token uniqueness is enforced and duplicate attempts will result in an error. Access should be restricted to server-side instrumentation or admin tools. No fields outside the schema may be referenced or returned.","summary":"Create a guest browsing session record in discussion_board_guests table.","parameters":[],"requestBody":{"description":"Fields to create a guest session: session_token, ip_address, optional user_agent, created_at, expires_at.","typeName":"IDiscussionBoardGuest.ICreate"},"responseBody":{"description":"The created guest session record as per discussion_board_guests schema.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests","method":"post"},{"specification":"Update a guest session record by id in discussion_board_guests. Permitted fields to update are session_token, ip_address, user_agent, expires_at as per schema (id and created_at cannot be changed). No authentication—guests are not users. Used for admin session corrections/analytics only.","description":"Updates an existing guest browsing session's metadata. Only valid schema fields are modifiable: session_token, ip_address, user_agent, expires_at. The id path parameter references the target session (primary key); created_at and id are immutable. This is not for authentication or login, but for correcting passive session data for analytics, abuse prevention, or logging. Fields not in schema must not be referenced. If session_token is changed to duplicate another, a conflict error is returned. Administrative access required.","summary":"Update a guest session by id; only schema fields updated.","parameters":[{"name":"id","description":"Target guest session's PK for update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update: session_token, ip_address, user_agent, expires_at. All values must match schema.","typeName":"IDiscussionBoardGuest.IUpdate"},"responseBody":{"description":"The updated guest session record as per discussion_board_guests schema.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests/{id}","method":"put"},{"specification":"Delete (hard delete) a guest session from discussion_board_guests by id (PK). No deleted_at field in schema, so this is a permanent removal. Guests are passive analytic/browsing objects, not users. Admin authorization enforced.","description":"Permanently deletes the guest session identified by id from the discussion_board_guests table. Since there is no deleted_at (soft delete) field in the schema, this operation removes the record irreversibly. The id path parameter must be a valid PK for a guest record. This endpoint supports only admin access and cannot be used for user (member) actions. Operation impacts audit trails and may inform anti-abuse policies.","summary":"Delete (hard/permanent) a guest session record by id from discussion_board_guests table.","parameters":[{"name":"id","description":"Unique PK id of guest session to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/guests/{id}","method":"delete"},{"specification":"Query (list/search) member (registered user) accounts in discussion_board_members table, with filters only on schema fields (id, username, email, display_name, profile_image_url, is_active, created_at, updated_at, deleted_at). Soft-deleted records can be shown with deleted_at property, as per schema. Admin-only access.","description":"Returns a paginated or filtered list of registered member accounts held in discussion_board_members. Permissible search and filter fields are only those present in the schema: id, username, email, display_name, profile_image_url (optional), is_active, created_at, updated_at, and deleted_at (for soft-deleted records). Authentication credentials (hashed_password) must not be shown or filtered on. This endpoint supports analytics, moderation, and user management—only for admins. No additional fields, such as non-existent audit columns, are referenced. Results include both active and (optionally) soft-deleted records for compliance audits.","summary":"Query/search member accounts (registered users) from discussion_board_members table.","parameters":[],"requestBody":{"description":"Supports search, paging, and filter on member accounts. Only schema fields allowed: id, username, email, display_name, profile_image_url, is_active, created_at, updated_at, deleted_at.","typeName":"IPageDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated member account results, including soft-deleted records as per schema.","typeName":"IPageDiscussionBoardMember"},"authorizationRoles":["administrator"],"path":"/discussionBoard/members","method":"patch"},{"specification":"Get a single member account (registered user) by id from discussion_board_members. Path parameter is schema PK. Only fields present in schema included in output: id, username, email, display_name, profile_image_url, is_active, created_at, updated_at, deleted_at, authentication credentials (hashed_password) never returned.","description":"Returns the detail of a registered member's account by unique id. Output includes only schema fields: id, username, email, display_name, profile_image_url (optional), is_active, created_at, updated_at, deleted_at (optional/if soft-deleted). hashed_password is never returned or output in the response. Members are the main registered users, capable of posting and interacting on the board. If the id does not correspond to an existing record, a not-found result is returned. Admin-only access.","summary":"Retrieve member account details (by id/PK) from discussion_board_members table.","parameters":[{"name":"id","description":"The primary key id of the member account to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Member account record (details) per discussion_board_members schema (no hashed_password in output).","typeName":"IDiscussionBoardMember"},"authorizationRoles":["administrator"],"path":"/discussionBoard/members/{id}","method":"get"},{"specification":"Create a new registered member account (user) in discussion_board_members. Only fields: username, email, hashed_password, display_name, profile_image_url (optional), is_active, created_at, updated_at (managed by server). Cannot set deleted_at (soft delete) or id directly. Unique constraints on username/email are enforced. Admin/registration context only.","description":"Creates a new registered member account (user), accepting fields: username, email, hashed_password, display_name, and (optionally) profile_image_url, all per the strict type/constraints in schema. is_active flag must be set explicitly. Timestamps (created_at, updated_at) are managed by the server. Neither id nor deleted_at are supplied by the client. The system enforces uniqueness on username/email. Admin-only or registration endpoint; hashed_password is never output in results or logs. No unsupported properties may be referenced.","summary":"Create a new member account record in discussion_board_members table.","parameters":[],"requestBody":{"description":"Create member account request body. Schema fields: username, email, hashed_password, display_name, profile_image_url (optional), is_active.","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"The created member account as per schema (never returns hashed_password field).","typeName":"IDiscussionBoardMember"},"authorizationRoles":["administrator"],"path":"/discussionBoard/members","method":"post"},{"specification":"Update an existing member account in discussion_board_members by id. Updatable fields: username, email, display_name, profile_image_url, is_active, and (optionally) hashed_password. id, created_at, updated_at, and deleted_at are server-managed and cannot be modified directly. This operation references only physical schema fields and supports soft-delete for reversibility.","description":"Updates a registered member account's information (found by id/PK). Updatable fields are username, email, display_name, profile_image_url, is_active, and, if needed, hashed_password. The response returns the post-update state (excluding hashed_password). Non-updatable columns (id, created_at, updated_at, deleted_at) are managed by the system and not client-settable. This endpoint is for administration or account management only, strictly references real fields. Uniqueness constraints for username/email apply. If username/email conflict with existing records, a conflict error is raised. hashed_password updates require additional verification (per policy).","summary":"Update member account record by id (registered user, admin-only) in discussion_board_members table.","parameters":[{"name":"id","description":"Target member's unique id (PK) for update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update member account body: may include username, email, display_name, profile_image_url, is_active, and/or hashed_password, all matching schema types.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"Updated member account details (no hashed_password in response as per schema/business logic).","typeName":"IDiscussionBoardMember"},"authorizationRoles":["administrator"],"path":"/discussionBoard/members/{id}","method":"put"}],"completed":55,"total":115,"step":0,"created_at":"2025-07-23T06:53:24.424Z"},"tokenUsage":{"facade":{"aggregate":{"total":218003,"input":{"total":200069,"cached":3840},"output":{"total":17934,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":218003,"input":{"total":200069,"cached":3840},"output":{"total":17934,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":218003,"input":{"total":200069,"cached":3840},"output":{"total":17934,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":218003,"input":{"total":200069,"cached":3840},"output":{"total":17934,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new ban entry in the discussion_board_bans table. This operation enables moderators or administrators to record the banning of a member, either permanently or temporarily, for violation of community guidelines. The ban record includes information about the banned member, the issuing moderator, the ban reason, permanence, creation date, potential expiration date, and soft deletion timestamp. The soft delete (deleted_at) field supports reversibility and auditability, in line with the specifications outlined in the schema and requirement analysis. This operation is critical for enforcing disciplinary action and tracking ban history on the forum.","description":"This API endpoint creates a new ban record for a board member. Clients must supply the member_id (UUID of the banned member), moderator_id (UUID of the moderator enacting the ban), ban_reason (textual explanation for the ban), permanent (boolean flag indicating if the ban is permanent), created_at (ISO 8601 UTC timestamp of ban creation), and optionally expires_at (timestamp for temporary ban expiry). No calculated or derived audit fields are required beyond those in the schema. Upon creation, the ban is active until deleted_at is set. If deleted_at is null, the ban remains in effect. Soft deletion supports audit trails and reversibility according to the requirements. If a soft-deletion is performed later, deleted_at will be updated, not removed from the DB.","summary":"Create a new ban record (discussion_board_bans table, soft delete enabled)","parameters":[],"requestBody":{"description":"Ban creation input. All properties must match Prisma schema fields and types for discussion_board_bans.","typeName":"IDiscussionBoardBan.ICreate"},"responseBody":{"description":"The created ban record, matching the full discussion_board_bans schema.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans","method":"post"},{"specification":"Update an existing ban entry in the discussion_board_bans table. Used by moderators or administrators to alter ban details, such as updating the ban reason, changing expiration date, or altering the permanence of a ban. Only fields defined in the Prisma schema (e.g., ban_reason, permanent, expires_at) can be updated. The updated_at and deleted_at fields are not present in this schema, so only explicit listed fields may be modified. The operation supports auditability and compliance by offering edit history through the creation date and soft delete timestamp, if updated.","description":"This API endpoint updates an existing ban. All updatable fields must be included in the request: ban_reason (reason for ban), permanent (true if ban is permanent, false if temporary), expires_at (timestamp for ban expiry, or null), as well as the moderator_id (UUID of the moderator performing the change, for audit purposes). The endpoint uses the id path parameter to locate the existing record. As there is no updated_at field, there is no audit record of edit timing except through moderator processes. If updated, the changes overwrite previous values in the database. Soft delete (deleted_at) is not handled through this endpoint.","summary":"Update an existing ban record (discussion_board_bans table)","parameters":[{"name":"id","description":"The unique identifier of the ban to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Ban update payload, containing only editable fields as defined in schema.","typeName":"IDiscussionBoardBan.IUpdate"},"responseBody":{"description":"The updated ban record, as per the Prisma schema for discussion_board_bans.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans/{id}","method":"put"},{"specification":"Deletes (soft delete) a ban from the discussion_board_bans table. Instead of hard-deleting, the API sets the deleted_at timestamp to indicate removal, as specified in the non-functional requirements and the schema. This gives moderators/administrators an undo/restore mechanism for reversibility and compliance. A soft-deleted ban is considered inactive but remains in the database for compliance and potential restoration. The operation requires the id path parameter, and updates the deleted_at field with the current timestamp (handled in the backend, not in the request body).","description":"This endpoint performs a soft delete on the specified ban record by setting the deleted_at field to the current timestamp. It does not remove the record from the table, aligning with the audit/reversibility requirements. Clients must specify the ban id via the path parameter. No request body is required, as only deletion is being performed. The operation is restricted to moderator and administrator roles to prevent unauthorized ban removal.","summary":"Soft delete a ban (discussion_board_bans), setting deleted_at timestamp","parameters":[{"name":"id","description":"The unique identifier of the ban to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The soft-deleted ban record including deleted_at timestamp, as defined in the discussion_board_bans schema.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans/{id}","method":"delete"},{"specification":"Retrieve a list of notifications for the current user or admin interface; supports advanced search, pagination, and filtering. This PATCH operation aligns with requirements for viewing and managing user notifications. Only fields present in the notification schema are surfaced in response. List retrieval can be filtered by recipient_member_id, type, read status, delivery status, or creation date; search query should be included in request body as per schema extension. The operation is available to all authenticated users with a valid session.","description":"This endpoint retrieves a list of discussion board notifications according to search, filter, and pagination parameters presented in the request body. Fields available for filtering include recipient_member_id (UUID), notification type (e.g., reply, mention, moderation), and read status (boolean). Sorting and pagination arguments are handled through the standardized request structure. Only fields defined in the discussion_board_notifications schema are returned in the payload; any reference to non-existent fields is prohibited. The endpoint supports transparency, compliance, and user engagement through efficient notification management. All returned notifications are subject to soft deletion tracking via deleted_at (field exists in schema).","summary":"List notifications with search and pagination (discussion_board_notifications table)","parameters":[],"requestBody":{"description":"Notification list request query (search/filter/pagination) as accepted by API.","typeName":"INotification.IRequest"},"responseBody":{"description":"Paginated notifications with items as per discussion_board_notifications schema fields.","typeName":"IPageINotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications","method":"patch"},{"specification":"Retrieve a single notification by ID, for the current user. Provides all details available in the discussion_board_notifications schema, including type, content_preview, url, read status, delivery time, and timestamps. This is a view-only operation and returns all fields as they exist in the record (including soft delete status if applicable).","description":"Fetch a specific notification by its UUID. Responds with all notification properties defined in the schema: id, recipient_member_id, trigger_actor_id, type, content_preview, url, read (boolean), delivered_at (if set), created_at, and deleted_at (if not null). Does not include any data beyond the schema. Useful for clients wanting to display full notification details before, for example, marking as read. Returns soft-deleted notifications if requested explicitly by ID.","summary":"Get a single notification by ID (discussion_board_notifications)","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The notification record with all fields as defined by the schema.","typeName":"INotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications/{id}","method":"get"},{"specification":"Create a new notification record, typically triggered by an event such as a mention, reply, or moderation action. Creates a row in discussion_board_notifications with all fields as defined in the schema, including recipient_member_id, trigger_actor_id (nullable), type, content_preview, url, read status (usually false on creation), delivered_at (may be null), and created_at. The backend sets creation timestamps, and handles delivery asynchronously if applicable. This operation matches requirements for scalable, auditable notification systems and supports soft deletion (deleted_at).","description":"Creates a new notification in the discussion_board_notifications table. The client must provide recipient_member_id, type, url, and may include trigger_actor_id and content_preview. Initial read status must be set (usually false), with delivered_at optionally present. The backend timestamps the creation and manages the delivery pipeline (e.g., email or in-app). All properties returned are constrained by the Prisma schema. Supports compliance and auditability through soft delete, with deleted_at managed separately.","summary":"Create notification (discussion_board_notifications table, soft delete supported, all schema fields enforced)","parameters":[],"requestBody":{"description":"Notification creation input, including only fields in the Prisma schema.","typeName":"INotification.ICreate"},"responseBody":{"description":"The created notification record as per Prisma schema.","typeName":"INotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications","method":"post"},{"specification":"Update an existing notification (e.g., to mark as read, update url/preview, or set delivery timestamp) in the discussion_board_notifications table. All updatable fields must match those present in the schema. The endpoint enforces field exclusivity, rejecting any references to non-existent properties. Changes are reflected in the database and returned in the response. Soft delete is not performed here (handled by delete operation). This operation is restricted to relevant users and admins as per authorization policy.","description":"Updates the specified notification record per its UUID identifier. Only fields present in the discussion_board_notifications schema may be updated, typically read status, url, content_preview, delivered_at, or type. Receives an 'id' path parameter and a valid update payload. Soft deletion (deleted_at) is not performed by this operation. Returns the updated notification post-save. Only current, allowed fields may be written or returned.","summary":"Update notification (discussion_board_notifications, field-restricted, no soft delete here)","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update information, matching updatable fields in schema.","typeName":"INotification.IUpdate"},"responseBody":{"description":"The updated notification according to schema.","typeName":"INotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications/{id}","method":"put"},{"specification":"Soft-delete a notification record from the discussion_board_notifications table. Rather than removing the row, this sets the deleted_at timestamp, aligning with requirements for reversibility, audit trails, and GDPR compliance. Only sets deleted_at—no other modification or removal occurs. Requires a valid notification UUID as path parameter. Only authorized members, moderators, or administrators can invoke this operation. Returns result as per schema (with deleted_at set).","description":"Marks the specified notification as deleted by setting the deleted_at timestamp. Record remains available for audit and possible restoration. The endpoint requires the notification ID. No request body is needed. Responds with updated notification including deleted_at field. This ensures safe, compliant, reversible deletion, as outlined in system specifications and Prisma schema.","summary":"Soft delete a notification (discussion_board_notifications) by setting deleted_at, not hard deletion","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The soft-deleted notification (deleted_at set), following schema.","typeName":"INotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications/{id}","method":"delete"},{"specification":"Retrieve a list of subscriptions for content on the discussion board by search, filter, or pagination. The PATCH endpoint returns existing subscriptions for the authenticated user, supporting searches by member_id, target_type, target_id, or creation date, all of which exist in the discussion_board_subscriptions schema. Returned results adhere strictly to the schema, omitting any non-existent fields. This operation implements notification workflow and content-follow requirements, supporting efficient user engagement management.","description":"Lists subscriptions for a member on the discussion board, allowing query by member_id (UUID), target_type, target_id, or created_at timestamp, as supplied in the request body. Supports advanced filtering and pagination for UI/UX or analytic consumption. Returns all fields as defined for the discussion_board_subscriptions entity in the schema. No soft-delete in schema—records are hard-deleted elsewhere. Enables management and review of followed threads, sections, or other targets within the board’s notification infrastructure.","summary":"List subscriptions with queries and pagination (discussion_board_subscriptions, no soft delete)","parameters":[],"requestBody":{"description":"Subscription list query: search, filter, and pagination, matching schema fields.","typeName":"ISubscription.IRequest"},"responseBody":{"description":"Paginated list of subscription entities as per schema.","typeName":"IPageISubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions","method":"patch"},{"specification":"Get a single subscription entity from the discussion_board_subscriptions table by ID. Returns full details according to the Prisma schema. Intended for user review, settings display, or analytic runtime queries. As with all get operations, no fields may be referenced outside those in the schema. No soft delete supported for subscriptions, so retrieval indicates the record is present and active.","description":"Retrieve a specific subscription identified by its UUID. Response includes all fields in the discussion_board_subscriptions schema: id, member_id, target_type, target_id, created_at. Used for individual management or audit scenarios. No soft deletion supported in this table, therefore the operation will fail if the record is hard-deleted. Returns subscription matching the path id.","summary":"Get subscription details by ID (discussion_board_subscriptions)","parameters":[{"name":"id","description":"UUID of the subscription entity to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Subscription record matching schema fields.","typeName":"ISubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions/{id}","method":"get"},{"specification":"Create a new subscription for a discussion board resource (thread, section, tag, etc.). This records a member’s intent to follow/receive notifications for actions on the resource. Only fields in the schema may be referenced: member_id (subscriber UUID), target_type (type of followed resource), target_id (target resource UUID), and created_at. This aligns with scalable notification delivery and tracking requirements. Original creation date is set by backend. No soft-delete support: all records are persistent or hard-deleted.","description":"Create a new resource subscription. The client must supply member_id, target_type (thread, section, tag, etc.), and target_id (UUID of followed resource). The backend records the subscription creation date. On success, responds with the full subscription entity per schema. Used for user-follow, notification delivery, or recommendation workflows. No fields outside schema permitted; no soft delete or audit trails apply.","summary":"Create subscription record (discussion_board_subscriptions, schema-only fields)","parameters":[],"requestBody":{"description":"Subscription creation info, only accepting values for schema fields.","typeName":"ISubscription.ICreate"},"responseBody":{"description":"Created subscription entity matching all schema fields.","typeName":"ISubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions","method":"post"},{"specification":"Update an existing subscription record in the discussion_board_subscriptions table. Enables changes to resource or type followed. Only schema fields may be changed (e.g., target_type, target_id, possibly member_id with admin). The request identifies the record via path parameter (id) and payload includes only updatable fields according to schema. As the table does not have soft delete, updates are only for present, active records. Changes overwrite previous values directly. Used for personalizing notification preferences or UX flows.","description":"Modify attributes of a board subscription, supporting updates to fields: target_type, target_id, or member_id (admin/migration scenarios only; typical users only update target fields). Requires subscription id as path parameter and payload of changed fields. The operation is restricted to authorized users and will update only fields defined in the schema. Returns the latest subscription entity. No audit trail except through created_at; changes are immediate and permanent.","summary":"Update subscription (discussion_board_subscriptions, minimal, schema-compliant)","parameters":[{"name":"id","description":"UUID identifier for the subscription to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Subscription update information; only schema fields changed.","typeName":"ISubscription.IUpdate"},"responseBody":{"description":"Updated subscription as per schema fields.","typeName":"ISubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions/{id}","method":"put"}],"completed":67,"total":115,"step":0,"created_at":"2025-07-23T06:53:27.492Z"},"tokenUsage":{"facade":{"aggregate":{"total":255505,"input":{"total":233927,"cached":3840},"output":{"total":21578,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":255505,"input":{"total":233927,"cached":3840},"output":{"total":21578,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":255505,"input":{"total":233927,"cached":3840},"output":{"total":21578,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":255505,"input":{"total":233927,"cached":3840},"output":{"total":21578,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"This operation retrieves a single discussion board vote record by its unique ID from the discussion_board_votes table. The fields exposed are limited strictly to those present in the Prisma schema: id, voter_id, vote_type_id, thread_id, post_id, comment_id, created_at, and updated_at. The endpoint enables clients to fetch the current state of a specific vote, including associations to voter, vote type, and the optionally referenced thread, post, or comment. No soft-delete field is present, so deleted records will not be queryable. This endpoint may be used for admin review, member vote history, and moderation interfaces.\n\n- Only exposes strictly existing columns: id, voter_id, vote_type_id, thread_id (nullable), post_id (nullable), comment_id (nullable), created_at, updated_at.\n- NEVER includes or references deleted_at or other non-existent fields.\n- Properly enforces UUID format for the id.\n- Returns the full vote entity in detail.\n- Used by backend services, moderation tools, and clients needing to display or audit an individual vote.","description":"Retrieves a single vote record from the discussion_board_votes table using its unique UUID identifier. The response contains only the schema-defined fields: id, voter_id (UUID of the member who cast the vote), vote_type_id (UUID of the vote type, e.g., 'upvote'), optionally thread_id, post_id, or comment_id (one must be non-null; all are UUIDs), plus created_at and updated_at timestamps. This endpoint does not reference any fields not present in the schema and does not reflect deleted states, as there is no deleted_at column. If the ID does not exist, a not-found error is returned. Related vote type information must be retrieved via a separate API call to the vote types resource.","summary":"Get a single vote by ID (discussion_board_votes table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the vote to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete vote record as stored in discussion_board_votes table.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes/{id}","method":"get"},{"specification":"This operation inserts a new vote record into the discussion_board_votes table. The schema supports voting by members (voter_id) on either a thread, post, or comment, using a specific vote_type_id. Fields accepted during creation are: voter_id (UUID), vote_type_id (UUID), plus the UUID of the target content (thread_id, post_id, or comment_id), with one REQUIRED to be non-null (enforced at the application logic level). The only other fields settable/returnable at creation are created_at (set server-side) and updated_at (if needed). This operation never references non-existent fields or columns such as deleted_at.\n\n- Accepts only those fields present in the schema: voter_id, vote_type_id, and one of thread_id/post_id/comment_id.\n- Sets created_at and updated_at server-side.\n- Does not manipulate or reference deleted states.","description":"Creates a new vote (from a member) and records it in the discussion_board_votes table. Required properties: voter_id (UUID of the voting member), vote_type_id (identifies type such as upvote/downvote), plus EITHER thread_id, post_id, or comment_id (one and only one, as UUID, required). At least one of these three target IDs must be specified; all are nullable, but app/business logic should enforce only one. On success, returns the created vote entity as stored. Does not interact with or expose any deleted_at or soft-delete semantics.","summary":"Create a new vote (discussion_board_votes table)","parameters":[],"requestBody":{"description":"New vote object to insert. Must include voter_id, vote_type_id, and one of thread_id, post_id, or comment_id.","typeName":"IDiscussionBoardVote.ICreate"},"responseBody":{"description":"Complete created vote record as stored in discussion_board_votes table.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes","method":"post"},{"specification":"This operation updates an existing vote record in the discussion_board_votes table by its unique ID, modifying only schema-valid columns. Supported updates include changing the vote_type_id or switching the referenced target among thread_id, post_id, or comment_id (one MUST be non-null), as well as record update timestamp (updated_at, updated by the system automatically). The only fields eligible for update are vote_type_id, thread_id, post_id, and comment_id. Fields like created_at and id are immutable. There is no soft delete mechanism (no deleted_at field), so this update is effective immediately and permanent.","description":"Updates an existing vote's type or target content. Sets the updated_at timestamp to the current time upon update. Fields allowed for update: vote_type_id (UUID), and optionally, which content this vote applies to (thread_id, post_id, comment_id, all UUIDs; only one should be non-null). id is immutable. This operation cannot affect or read any deleted_at field as it is not present in the schema. Used for correcting misvotes or changing the target content association. Returns the updated entire vote record as stored.","summary":"Update an existing vote (discussion_board_votes table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the vote, including vote_type_id or new thread_id/post_id/comment_id.","typeName":"IDiscussionBoardVote.IUpdate"},"responseBody":{"description":"Complete updated vote record.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes/{id}","method":"put"},{"specification":"This operation deletes a vote record from the discussion_board_votes table by its unique ID. There is NO deleted_at field, so this operation performs a HARD DELETE, permanently removing the row from the database. Once deleted, the record is unrecoverable. Application/business logic must ensure idempotency and integrity post-deletion. The operation enforces the exact set of columns: id (UUID) as the only parameter to identify target record.","description":"Deletes a vote entry from the discussion_board_votes table by its UUID. This is a HARD DELETE; the target row is permanently removed because the schema does not define a soft-delete (deleted_at) field. Calling this endpoint is irreversible, and no deleted_at or recovery mechanism is provided as per the schema. This operation is intended for admin, moderation, or user vote retraction scenarios where true record removal is desired. If vote does not exist, returns not found.","summary":"Delete a vote (hard delete, discussion_board_votes table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the vote to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Empty object on success; no content is returned as vote is deleted.","typeName":"IEmpty"},"authorizationRoles":null,"path":"/discussionBoard/votes/{id}","method":"delete"},{"specification":"This operation retrieves a list of discussion board tags from the discussion_board_tags table, supporting advanced search and filtering. The PATCH method is used for complex query request bodies including search keywords, creation/modification date ranges, and sorting preferences. Fields exposed are id, name, description, created_at, updated_at, and (optionally) deleted_at. Since a deleted_at field exists, soft-deleted tags can be included, excluded, or filtered explicitly. The operation adheres strictly to schema-defined fields; never references fields outside the schema. Used for tag management, selection, or public discovery in the discussion board.","description":"Retrieves a paginated list of tag records from the discussion_board_tags table, using advanced query capabilities via a PATCH body. The request may include filters for id, name, creation or modification ranges, and explicit filters on deleted_at (for soft-deleted record handling). Returns all fields present in the schema: id (UUID), name (unique string), description (optional), created_at, updated_at, and deleted_at (nullable, for soft delete). This endpoint is used by tag management UIs, admin tools, or clients needing to show/discover available tags—including searching and sorting.","summary":"Search/list tags with filtering/sorting (discussion_board_tags table)","parameters":[],"requestBody":{"description":"Search, filter, and sort parameters for tag listing.","typeName":"IDiscussionBoardTag.IRequest"},"responseBody":{"description":"Paginated/tagged set of tag records from discussion_board_tags.","typeName":"IPageIDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags","method":"patch"},{"specification":"This operation retrieves a single tag by its unique identifier from the discussion_board_tags table. The resulting data includes only actual schema fields: id, name, description (nullable), created_at, updated_at, and deleted_at (nullable, as soft delete is supported). The endpoint allows public retrieval of tag information (e.g., for filtering, tag UI drilldown, or admin review). No business logic beyond schema-present fields is performed. If the tag is soft-deleted (deleted_at set), the record is still retrievable by this endpoint, supporting reversible UI/moderation flows. No non-existent fields are referenced.","description":"Gets the record for a single tag using its UUID id. Returns id, name (unique string), description (nullable string), created_at (timestamp), updated_at (timestamp), and deleted_at (nullable timestamp for soft deletion). No other fields are included or referenced. If the ID is invalid or does not exist, a not-found response is returned. Soft-deleted tags (deleted_at present) are returned by this endpoint for moderation/admin audit, allowing possible un-delete or review.","summary":"Get a single tag by ID (discussion_board_tags table)","parameters":[{"name":"id","description":"Unique identifier (UUID) for the tag to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Tag record as stored in discussion_board_tags table, including soft-deleted tags.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags/{id}","method":"get"},{"specification":"This operation creates a new tag record in the discussion_board_tags table. Only fields explicitly present in the schema are accepted: name (unique, required string), optional description, created_at/updated_at (set server-side), and deleted_at remains null at creation (for soft delete logic). Other fields or invented fields are strictly disallowed. This endpoint is typically used only by administrators or moderators to add new tags for UI filtering, discovery, or content organization.","description":"Creates a tag record, requiring only name (unique string) as input. Optional description may be provided. At creation, deleted_at is not set (implicitly null, record is active). No other fields are accepted or stored. All returned fields strictly match schema: id (UUID, auto-generated), name (string), description (nullable), created_at, updated_at, and deleted_at (nullable, should be null for new records). Used in tag management admin UIs, or bulk data seeding flows.","summary":"Create a new tag in the discussion_board_tags table","parameters":[],"requestBody":{"description":"New tag specification: requires name (string), optional description.","typeName":"IDiscussionBoardTag.ICreate"},"responseBody":{"description":"Created tag record as stored in discussion_board_tags table.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags","method":"post"},{"specification":"This operation updates an existing tag record in the discussion_board_tags table by unique id. Editable fields, as per schema, are name (string, must remain unique), description (optional), and soft-delete status via deleted_at (for moderation reversal/application). id and created_at are immutable. Updates to updated_at are handled automatically. Never references or changes any schema-nonexistent fields. Used by admin/moderation consoles for tag edits, or revert deletion/restore.","description":"Updates an existing tag. Editable fields: name (unique string), description (optional string, nullable), and, optionally, set deleted_at for soft deletion or restoration (must be a timestamp or null). id is immutable. The operation does not reference non-schema fields. Returns full updated record after mutation, including updated_at as managed by the system. Used for tag edits, moderation soft-delete/restore, or retagging migrations.","summary":"Update a tag (discussion_board_tags table)","parameters":[{"name":"id","description":"UUID of tag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable tag fields: name (string), description (optional), deleted_at (for soft delete/restore).","typeName":"IDiscussionBoardTag.IUpdate"},"responseBody":{"description":"Complete updated tag record including any soft delete changes.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags/{id}","method":"put"},{"specification":"This operation deletes (soft deletes) a tag record from the discussion_board_tags table by unique id. If deleted_at exists in the schema (which it does), this endpoint sets deleted_at to the current timestamp (soft deletion) rather than removing the record from the database. As soft delete is enabled, tags can be restored by clearing deleted_at via update. This operation never removes the row permanently. id must be provided as a UUID.","description":"Soft deletes a tag by setting its deleted_at field to the current timestamp. Requires tag id as UUID. The record is retained in the database for audit/moderation purposes, allowing potential restoration by clearing deleted_at. No permanent hard delete is performed, and no non-schema fields are affected. Used for compliance, audit trails, or reversible moderation. If the tag does not exist, returns not found. Returns the full updated record with deleted_at set.","summary":"Soft delete a tag (discussion_board_tags table)","parameters":[{"name":"id","description":"UUID of tag to soft-delete (sets deleted_at).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Tag record as stored after soft-deletion (deleted_at set).","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of categories from the discussion_board_categories table, using the PATCH method to allow for complex query/filter/sort expression in the request body. Supported filters: id, name, created_at/updated_at ranges, and deleted_at (enables filtering for soft-deleted records, as the field exists in schema). NEVER references absent fields. The endpoint returns only schema-present fields: id, name (unique), description (optional), created_at, updated_at, and deleted_at (soft delete). Used for UI category filtering/browsing, admin interfaces, and advanced search scenarios needing sorting, logical filtering, or full-text search by name or description.","description":"Fetches a paginated category list, supporting advanced search and filtering. Search parameters are provided in PATCH body, and can filter on: id (UUID), name (string), created_at/updated_at (timestamp ranges), and deleted_at (include/exclude/only). Only schema-defined fields are present: id, name, description (optional), created_at, updated_at, deleted_at (soft delete, nullable). Used by admin panels, moderation UIs, or client-side content discovery/browsing. Returns paginated results for client-side navigation or infinite scroll.","summary":"Search/list categories with filtering/sorting (discussion_board_categories table)","parameters":[],"requestBody":{"description":"Request object for category search, filtering, and sorting.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated/category list records as per schema.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":null,"path":"/discussionBoard/categories","method":"patch"},{"specification":"This operation retrieves a single category record by UUID from the discussion_board_categories table. The only fields returned are strictly as per schema: id (UUID), name (unique, string), description (nullable), created_at (timestamp), updated_at (timestamp), and deleted_at (nullable, for soft delete). If the category is soft-deleted (deleted_at set), it will still be returned (enables moderation/auditing by admin). This operation never references not-present fields. Used by admin/UX for display, management, or category drilldown.","description":"Gets the record for a single category by its unique UUID. Returns fields: id, name, description (nullable string), created_at, updated_at, and deleted_at (nullable soft delete timestamp). Never includes non-schema fields. If the category does not exist, returns an error. Used by admin, client, and moderation browsers.","summary":"Get a single category by ID (discussion_board_categories table)","parameters":[{"name":"id","description":"UUID for the category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Category record as stored, including soft-delete state.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":null,"path":"/discussionBoard/categories/{id}","method":"get"},{"specification":"This operation creates a new category in the discussion_board_categories table. Only schema-defined fields are accepted: name (unique, string, required), and optional description (string, nullable). created_at and updated_at are set by the system; deleted_at remains null on creation. No extraneous or non-schema fields accepted. This endpoint is used by admin or moderator flows to add new content/navigational categories for thread organization, browsing, or client-side content discovery.","description":"Creates a new category. Required: name (string, unique per table). Optional: description (nullable string). created_at/updated_at created by backend, deleted_at not set. Returned object contains all persisted record fields: id (UUID), name, description (nullable), created_at, updated_at, deleted_at (null for new). Used in admin, content/configuration flows. This operation never references not-present fields.","summary":"Create a new category (discussion_board_categories table)","parameters":[],"requestBody":{"description":"Category creation object: requires name; description optional.","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"Created category record per schema.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":null,"path":"/discussionBoard/categories","method":"post"}],"completed":79,"total":115,"step":0,"created_at":"2025-07-23T06:53:27.614Z"},"tokenUsage":{"facade":{"aggregate":{"total":293303,"input":{"total":267782,"cached":3840},"output":{"total":25521,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":293303,"input":{"total":267782,"cached":3840},"output":{"total":25521,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":293303,"input":{"total":267782,"cached":3840},"output":{"total":25521,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":293303,"input":{"total":267782,"cached":3840},"output":{"total":25521,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Update an existing comment in the discussion board. This operation modifies fields such as the comment body or the is_edited flag on the specified comment. Only the actual fields present in the discussion_board_comments table will be referenced. Relationships such as parent_id for nesting and discussion_board_member_id for authorship are included. All changes update the updated_at timestamp, but will not create audit trails unless handled by moderation logs. The operation only updates information based on properties defined in the Prisma schema.\n\nSoft deletion is supported via the deleted_at field: if present, a deleted comment should not be updated (handled by application logic outside this operation).","description":"This operation updates an existing comment record in the discussion_board_comments table. Fields that can be updated include the comment body, the is_edited flag, and potentially parent_id for thread/nesting changes, if allowed by business logic. The operation references only those properties present in the Prisma schema: body, is_edited, parent_id, and updated_at. Changes are only applied if the comment has not been soft deleted (deleted_at is null); attempts to update soft-deleted comments should be denied or no-op at the business logic layer. Relationships such as discussion_board_member_id (comment author) are preserved and cannot be reassigned via this endpoint. The updated_at timestamp is automatically set to the time of update. No fields outside the schema are referenced. Audit or moderation tracks are not created by this endpoint itself but may be handled by separate moderation log entries.","summary":"Updates a comment in the discussion_board_comments table by id.","parameters":[{"name":"id","description":"Target comment's unique identifier (UUID) as primary key in discussion_board_comments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The fields of the comment to update, corresponding to schema properties: body (string), is_edited (boolean), parent_id (UUID or null). Only provide those properties that need modification.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object as defined in discussion_board_comments.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments/{id}","method":"put"},{"specification":"Soft-delete a comment in the discussion board. This operation sets the deleted_at timestamp in the discussion_board_comments table to the current timestamp, marking the record as deleted without permanent removal. All references and relationships are maintained for audit and potential restoration. No fields are removed or modified beyond setting deleted_at. Only fields present in the Prisma schema are referenced. Hard deletion is NOT performed, as deleted_at exists.","description":"Marks a comment record as deleted by assigning the current timestamp to the deleted_at field in discussion_board_comments, following soft-delete semantics. This operation allows for reversibility and audit, and does not physically remove the underlying database record. All other fields (body, parent_id, is_edited, etc.) remain untouched, and relationships persist. The operation is idempotent for already-soft-deleted comments (deleted_at not null). It does not reference or modify any non-existent schema fields. All status transitions and state changes are handled according to the presence of the deleted_at property.","summary":"Soft-deletes a comment by setting deleted_at, per discussion_board_comments schema.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the comment to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The comment object after soft delete, reflecting the updated deleted_at field if successful.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments/{id}","method":"delete"},{"specification":"Get a filtered and/or paginated list of attachments (files) in the discussion board system. Searches and sorts over actual fields in discussion_board_attachments, such as file_name, file_uri, created_at, and optionally filters by discussion_board_post_id or discussion_board_comment_id. No reference will be made to fields not present in the schema. Returns paginated and sorted results.","description":"This operation returns a list of attachments matching search criteria and/or pagination controls. The filters can include direct matches for file_name, file_uri, content_type, content_hash, uploader's member id, post id, or comment id (all as defined in discussion_board_attachments). Sorting is performed via fields available in the schema (e.g., created_at). No deleted attachments are returned (deleted_at is checked for null in backend application logic). No references are made to non-existent schema fields.","summary":"Lists attachments with filtering/pagination from discussion_board_attachments.","parameters":[],"requestBody":{"description":"Filtering and pagination parameters that reference only fields present in discussion_board_attachments (e.g., file_name, post_id, comment_id, created_at).","typeName":"IDiscussionBoardAttachment.IRequest"},"responseBody":{"description":"Paginated attachment results as defined by the schema, with pagination and list data.","typeName":"IPageIDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments","method":"patch"},{"specification":"Retrieve a single attachment record identified by its unique id from the discussion_board_attachments table. The operation exposes all atomic fields available in the schema, such as file_name, file_uri, content_type, and related foreign keys.","description":"Returns all information for a single attachment in the discussion board system, given the unique identifier. The returned data strictly matches the fields in the discussion_board_attachments schema: id, discussion_board_post_id, discussion_board_comment_id, discussion_board_member_id, file_name, file_uri, content_type, content_hash, created_at, and deleted_at. If the deleted_at field is not null (i.e., the attachment is soft deleted), the operation may be denied or the deleted resource may be hidden, handled by application logic. No non-existent fields are referenced or exposed.","summary":"Retrieves an attachment by id according to discussion_board_attachments schema.","parameters":[{"name":"id","description":"Attachment id (UUID) as the primary key for the discussion_board_attachments table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The attachment record corresponding to the id, per schema.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments/{id}","method":"get"},{"specification":"Create a new attachment for a post or comment in the discussion board. Creates a row in discussion_board_attachments referencing all actual schema fields: discussion_board_post_id or discussion_board_comment_id, discussion_board_member_id (the uploader), file_name, file_uri, content_type, content_hash, and created_at. The endpoint does not insert data into any non-existent fields. Soft-delete is handled only at later stages, if required.","description":"Adds a new attachment to the discussion board by inserting a row in the discussion_board_attachments table. All provided properties must match field definitions in the schema. The attachment must reference either a post or a comment (never both at once), and must include uploader's member id, file metadata, and content hash. The created_at field is automatically assigned. No other, non-schema fields are permitted. The attachment will not be soft deleted at creation.","summary":"Creates a new attachment as per discussion_board_attachments schema.","parameters":[],"requestBody":{"description":"Attachment creation fields referencing only schema properties: either discussion_board_post_id or discussion_board_comment_id, discussion_board_member_id, file_name, file_uri, content_type, and content_hash.","typeName":"IDiscussionBoardAttachment.ICreate"},"responseBody":{"description":"The newly-created attachment object as per schema.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments","method":"post"},{"specification":"Update an existing attachment in the discussion board. Modifies one or more allowed fields on the row in discussion_board_attachments identified by id. Only properties present in the Prisma schema may be updated. Soft-deleted attachments (where deleted_at is not null) cannot be updated. Primary key (id) and created_at cannot be changed. Updates updated_at timestamp automatically.","description":"Updates an attachment entity in the discussion_board_attachments table, modifying fields such as file_name, file_uri, content_type, or content_hash, according to the actual schema columns. The operation is denied if the attachment is soft deleted (deleted_at not null). Only present fields are referenced. File re-association with posts/comments or uploader is possible per schema, but must follow business logic and maintain referential integrity. updated_at is refreshed to reflect the update. No reference is made to fields not in the schema.","summary":"Updates an attachment by id in discussion_board_attachments.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the attachment as in discussion_board_attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment update fields, such as file_name, file_uri, or content_type, strictly per schema field definitions.","typeName":"IDiscussionBoardAttachment.IUpdate"},"responseBody":{"description":"The updated attachment object as per schema.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments/{id}","method":"put"},{"specification":"Soft-delete an attachment in the discussion board by id. This operation updates the deleted_at field to the current timestamp in discussion_board_attachments, marking the attachment as deleted without removing its row from the table. Only the deleted_at field is modified; all others are preserved. No hard deletion is performed. No schema fields outside of discussion_board_attachments are referenced. Operation is idempotent for already-soft-deleted rows.","description":"Soft-deletes an attachment by setting the deleted_at timestamp, per the discussion_board_attachments schema. The attachment record remains in the database, fulfilling requirements for auditability and reversibility. Attempts to soft-delete an already deleted item have no additional effect. Only the deleted_at property is changed during this operation; all others, including file_name, file_uri, and relationships, are maintained. No non-existent fields are referenced. Hard deletion is never performed by this operation.","summary":"Soft-deletes an attachment from discussion_board_attachments by id.","parameters":[{"name":"id","description":"UUID of the attachment to soft-delete, as primary key in discussion_board_attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment object after soft delete, reflecting the set deleted_at.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments/{id}","method":"delete"},{"specification":"Get a filtered, sorted, and/or paginated list of moderation reports from discussion_board_reports. The operation can filter records by fields actually present in the schema (e.g., reporter_member_id, moderator_id, thread_id, post_id, comment_id, status, reason, created_at). Results do not include soft-deleted rows (deleted_at is excluded by application logic). No fields are referenced beyond the schema definition. Results are returned with pagination and/or sorting information.","description":"Lists moderation reports with search, filter, and pagination capabilities based strictly on schema fields. Filters and sorting may include fields such as reporter_member_id, moderator_id, status, content references (thread_id, post_id, comment_id), reason, and created_at. Only non-deleted (deleted_at null) rows are returned. Returned data matches the properties of discussion_board_reports. No non-schema fields are referenced. Relationships to reported content are represented via their respective schema fields (thread_id, post_id, comment_id, etc).","summary":"Retrieves moderation reports with search/filter/pagination. Schema: discussion_board_reports.","parameters":[],"requestBody":{"description":"Filter, search, and pagination data using schema fields for reports (status, content references, reporter/moderator IDs, etc).","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated moderation report results, with schema-aligned fields.","typeName":"IPageIDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports","method":"patch"},{"specification":"Retrieve a single moderation report by its unique identifier from the discussion_board_reports table. Returns all actual fields, such as reporter_member_id, moderator_id, content references (thread_id, post_id, comment_id), reason, status, timestamps, and resolution_notes. Soft-deleted reports may be handled according to application logic but are not shown if deleted_at is set. No non-schema fields included.","description":"Returns a moderation report, with details from discussion_board_reports: id, reporter_member_id, moderator_id, thread_id, post_id, comment_id, reason, status, created_at, resolved_at, resolution_notes, and deleted_at. Soft deleted reports (deleted_at set) are not returned by business logic. Only schema fields are referenced.","summary":"Gets a moderation report by id from discussion_board_reports.","parameters":[{"name":"id","description":"Unique UUID for the moderation report, primary key in discussion_board_reports.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderation report object, all fields match schema.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports/{id}","method":"get"},{"specification":"Create a new moderation report in the discussion board. This operation inserts a row into discussion_board_reports referencing schema fields: reporter_member_id, moderator_id (optional until assigned), thread_id, post_id, comment_id (only one of these may be non-null per report), reason, and status. created_at is set automatically. Resolution fields and deleted_at are null on creation. No non-schema fields are touched.","description":"Creates a new report against a thread, post, or comment for moderator review. The request must include a valid reporter_member_id, a description for reason, and the status of the initial report. Content references must use only schema fields (thread_id, post_id, comment_id), one or more set to reference a particular content item. Moderator assignment may be null until assignment. All timestamps are set following schema field rules. No reference is made to any field that does not exist in the table.","summary":"Creates a moderation report as per discussion_board_reports schema.","parameters":[],"requestBody":{"description":"Fields to create report: reporter_member_id, moderator_id (optional), content reference (thread_id, post_id, comment_id), reason, and status. Only schema fields permitted.","typeName":"IDiscussionBoardReport.ICreate"},"responseBody":{"description":"New report object as created per schema.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports","method":"post"},{"specification":"Update an existing moderation report in the discussion board. Modifies any allowed fields per the discussion_board_reports schema. Only permitted fields are changed: moderator_id, status, resolution_notes, and timestamps. reporter_member_id and content references are immutable. Soft deleted reports (deleted_at is not null) cannot be updated. Resolution notes and resolved_at may be set only through this operation. The operation does not reference or modify any field that does not exist in the Prisma schema.","description":"Updates a moderation report by id in the discussion_board_reports table. Allows updating moderator_id (assigning a mod), status (for state transitions), resolution_notes, and resolved_at (when status changes). Timestamps are managed automatically per audited field updates. Attempts to update non-existent fields or to reassign reporter/content references are denied. Soft delete state (deleted_at) cannot be updated here. No non-schema fields are manipulated.","summary":"Updates a moderation report by id as per discussion_board_reports schema.","parameters":[{"name":"id","description":"UUID of the report being updated, primary key in discussion_board_reports.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Permitted schema fields to update: moderator_id, status, resolution_notes, resolved_at. Only schema properties included.","typeName":"IDiscussionBoardReport.IUpdate"},"responseBody":{"description":"Updated report object, strictly according to the schema.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports/{id}","method":"put"},{"specification":"Soft-delete a moderation report in the discussion board system. This operation sets the deleted_at field for the target row in discussion_board_reports to the current timestamp. No records are permanently removed with this operation; all other fields remain unchanged, supporting reversibility and regulatory compliance. The endpoint does not reference non-existent or extra fields in the schema. The operation is a no-op if the row is already soft deleted (deleted_at is not null).","description":"Marks a report as soft deleted by populating the deleted_at column for the row in discussion_board_reports. Only the deleted_at field is modified (set to the current time); all others are untouched, per soft-deletion semantics. Existing soft-deleted rows are unaffected by repeated requests. This endpoint never physically deletes rows. No extra fields outside schema are referenced or returned.","summary":"Soft-deletes a moderation report by id (sets deleted_at per schema).","parameters":[{"name":"id","description":"Unique id of the report to be soft deleted (UUID, primary key in discussion_board_reports).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Report object after soft delete, with deleted_at set.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports/{id}","method":"delete"}],"completed":91,"total":115,"step":0,"created_at":"2025-07-23T06:53:37.356Z"},"tokenUsage":{"facade":{"aggregate":{"total":330842,"input":{"total":301640,"cached":3840},"output":{"total":29202,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":330842,"input":{"total":301640,"cached":3840},"output":{"total":29202,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":330842,"input":{"total":301640,"cached":3840},"output":{"total":29202,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":330842,"input":{"total":301640,"cached":3840},"output":{"total":29202,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"List and search moderation log records for the discussion board. This endpoint allows filtering and pagination for logs of moderation actions such as hiding, editing, or deleting content related to threads, posts, or comments. Every returned log entry includes only fields present in the Prisma schema: 'id', 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'. This operation is for audit tracing and moderator activity review. No non-existent fields are referenced. Related APIs: GET for detail ('/discussionBoard/moderationLogs/{id}'), POST for creation, PUT for update, DELETE for removal. No modification of data is performed here.","description":"This operation retrieves a paginated and filterable list of moderation log records from the 'discussion_board_moderation_logs' table. Each log represents a single moderation event performed by a moderator, such as hiding, deleting, or editing content in threads, posts, or comments. The only fields included or referenced are those that exist in the schema: 'id' (PK), 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'. Filtering and search are performed only over valid schema fields. This operation is typically used by administrators or moderators to monitor board activity, support compliance with audit requirements, and review historical moderation actions taken by users with elevated privileges. No fields absent from the schema (such as deleted_at, updated_by) are referenced or exposed. Related operations include GET (detail), POST (create new logs), PUT (update logs), and DELETE (remove logs). Error responses occur only when invalid filters or schema-mismatched values are supplied.","summary":"List and search moderation logs (discussion_board_moderation_logs) with pagination and filtering.","parameters":[],"requestBody":{"description":"Parameters for searching and filtering moderation logs. Includes only properties valid in the schema for search/filter fields such as 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'created_at', with pagination and sorting. Excludes any non-schema fields.","typeName":"IDiscussionBoardModerationLog.IRequest"},"responseBody":{"description":"Paginated moderation log results. Each entry includes only valid schema fields: 'id', 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'.","typeName":"IPageIDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs","method":"patch"},{"specification":"Get detailed information for a specific moderation log entry by its unique identifier. Operates on the 'discussion_board_moderation_logs' table and provides a complete view of a moderation action. All returned fields must be present in the schema: 'id', 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'. No soft delete is managed (there is no deleted_at field). This operation is strictly for retrieval and does not modify data. Related endpoints: PATCH for list/search, POST for creation, PUT for update, DELETE for removal.","description":"Retrieves the full information for a specific moderation log record from 'discussion_board_moderation_logs'. Includes all fields defined for this entity: 'id' (primary key), 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'. This endpoint is used by administrators and moderators for audit trail review and moderation activity analysis. No fields such as soft delete are referenced, since 'deleted_at' is not present in the schema. Requests using IDs not matching any record return a 404 error. Update, create, and delete actions are handled by other endpoints. No extra fields or non-schema references included.","summary":"Get detail for one moderation log entry (discussion_board_moderation_logs) by ID.","parameters":[{"name":"id","description":"Target moderation log record's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for one moderation log record. Includes only the fields present in the schema.","typeName":"IDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs/{id}","method":"get"},{"specification":"Create a new moderation log entry documenting an action taken by a moderator. This registers a new record in the 'discussion_board_moderation_logs' table. Permitted fields are: 'moderator_id', optional 'thread_id', 'post_id', or 'comment_id', 'action', 'action_reason', and 'created_at'. No fields not in schema are touched. This operation should be used whenever a moderator edits, hides, or deletes a post, thread, or comment and an immutable audit log must be produced. Related endpoints: PATCH for list, GET for detail, PUT for update, DELETE for removal.","description":"Adds a new record to 'discussion_board_moderation_logs', representing a singular moderation action performed by a moderator on a thread, post, or comment. The required and only permitted fields are: 'moderator_id' (who performed the action), optionally 'thread_id', 'post_id', or 'comment_id' (on what content), 'action' (type of action performed, e.g., 'hide', 'edit', etc.), 'action_reason' (justification for action, optional), and 'created_at' (timestamp). No soft or hard delete is handled in this endpoint. Upon successful creation, returns the record detail. No fields unspecified in the schema are touched or referenced.","summary":"Create new moderation log entry in discussion_board_moderation_logs.","parameters":[],"requestBody":{"description":"Creation parameters for new moderation log record. Must include all required fields from 'discussion_board_moderation_logs', and only fields present in schema. Excludes non-existent fields like deleted_at.","typeName":"IDiscussionBoardModerationLog.ICreate"},"responseBody":{"description":"Created moderation log record. Contains only valid schema properties.","typeName":"IDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs","method":"post"},{"specification":"Update an existing moderation log record by its unique identifier. Only fields actually existing in the 'discussion_board_moderation_logs' schema can be modified: 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', and 'action_reason'. There is no soft or hard delete performed here. Changes only permitted fields with schema validation and business rules enforced. Used for correcting, annotating, or re-categorizing a previous moderation event. Related endpoints: PATCH for search, GET for detail, POST for create, DELETE for removal.","description":"Updates a specific moderation log in 'discussion_board_moderation_logs' based on its primary key. Possible changes are limited strictly to schema-defined attributes such as: 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', and 'action_reason'. Timestamps are not directly editable unless explicitly allowed by business rules (but typically set by the system). No soft/hard delete is performed, and no extra fields (such as deleted_at) are referenced. This operation supports moderator/admin activity review and audit trail amendment in accordance with moderation policies. Attempts to update non-existent or out-of-schema fields will result in errors. Only returns updated record using valid fields.","summary":"Update an existing moderation log (discussion_board_moderation_logs) by ID.","parameters":[{"name":"id","description":"Target moderation log record's unique identifier (UUID) to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update parameters for the moderation log record. Allowed only fields as defined in the schema; excludes all extraneous or derived fields.","typeName":"IDiscussionBoardModerationLog.IUpdate"},"responseBody":{"description":"Updated moderation log record (valid schema fields only).","typeName":"IDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs/{id}","method":"put"},{"specification":"Delete a moderation log record by its unique ID. This performs a hard delete, as the 'discussion_board_moderation_logs' model does not have a 'deleted_at' field for soft deletion. This operation irreversibly removes the log entry from persistent storage. Related: PATCH for list/search, GET for detail, POST for create, PUT for update.","description":"Removes a specific moderation log entry from 'discussion_board_moderation_logs'. Because 'deleted_at' is NOT present in this model, this operation IRREVERSIBLY deletes the row by its unique identifier (UUID). No soft delete is possible; once deleted, the log cannot be recovered. Used by administrators and moderators for managing audit records in compliance with board data retention policies. This endpoint only requires the record ID and returns no content on success. Requests referencing non-existent IDs yield a 404 error. Attempts to use fields not present in the schema will result in errors.","summary":"Hard delete moderation log (discussion_board_moderation_logs) by ID (no soft delete supported).","parameters":[{"name":"id","description":"Target moderation log record's unique identifier (UUID) to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs/{id}","method":"delete"},{"specification":"List and search warnings issued to members in the discussion board. Leverages valid fields from 'discussion_board_warnings': 'id', 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', 'expires_at', and 'deleted_at'. Supports pagination, filtering, and sorting using those fields. The 'deleted_at' field supports soft delete awareness in results but not removal here. Only valid fields are referenced. Related endpoints: GET for detail, POST for new warnings, PUT for update, DELETE for soft delete.","description":"Retrieves a filtered and paginated list of warning records issued to members from 'discussion_board_warnings'. The list includes all fields present in the schema: 'id', 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', 'expires_at', and 'deleted_at'. Moderator/admins can see warnings, filter by issued/expired/deleted, and review warning audit trails. The operation supports only the actual fields in the schema—no extra or non-existent attributes like created_by or updated_by. 'deleted_at' is included to indicate soft deletes (hidden warnings) but does not perform removal itself. Soft delete and warning lifting are handled in DELETE. Other operations: GET for detail, POST for add, PUT for update, DELETE for soft delete.","summary":"List and search warnings (discussion_board_warnings) with support for soft deletes.","parameters":[],"requestBody":{"description":"Parameters for warning list/search. Only real schema fields like 'member_id', 'moderator_id', 'warning_type', 'created_at', 'expires_at', 'deleted_at', pagination, and sorting.","typeName":"IDiscussionBoardWarning.IRequest"},"responseBody":{"description":"Paginated warning results. Each warning contains only valid schema fields including soft delete flag ('deleted_at').","typeName":"IPageIDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings","method":"patch"},{"specification":"Get full detail of a single warning to a member by its unique ID. Returns the warning with all present fields, including soft delete indicator. Only operates on fields present in 'discussion_board_warnings' schema: 'id', 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', 'expires_at', 'deleted_at'. Related endpoints include PATCH for list/search, POST for creation, PUT for update, DELETE for soft delete.","description":"Fetch detailed information for one warning record issued to a board member from 'discussion_board_warnings'. All schema fields are included: 'id', 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', 'expires_at', and 'deleted_at'. The 'deleted_at' field indicates soft delete status (e.g., warning lifted or hidden, but not physically deleted). No other fields outside the schema are referenced. Used for moderator/admin warning review and user management workflows. If the ID does not match any record, returns 404.","summary":"Get full detail for one discussion_board_warning by ID (fields include soft delete flag).","parameters":[{"name":"id","description":"The warning record's unique identifier (UUID) for retrieval.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full schema-valid warning record, including the soft delete field ('deleted_at').","typeName":"IDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings/{id}","method":"get"},{"specification":"Issue a new warning to a board member. Creates a new record in the 'discussion_board_warnings' table using valid schema fields: 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', and optionally 'expires_at'. The record may also include soft delete field 'deleted_at' if warning is immediately lifted (rare). Only existing fields are settable: extra fields are not referenced. Used as part of moderation actions against members with infractions. Related endpoints: PATCH for list/search, GET for detail, PUT for update, DELETE for soft delete removal.","description":"Creates a new warning for a specific discussion board member, updating 'discussion_board_warnings' with valid schema fields: 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', optionally 'expires_at', and possibly 'deleted_at' (usually null unless warning is set as already lifted). This function only manipulates the actual schema fields—no extra, derived, or non-existent properties are referenced. Used by moderators/admins for user management escalation and infraction tracking. Returns created warning record in full, including the soft delete flag as appropriate.","summary":"Create a new warning record (discussion_board_warnings) for a member.","parameters":[],"requestBody":{"description":"Creation parameters for new warning. All fields must exist in the schema. No non-existent properties allowed.","typeName":"IDiscussionBoardWarning.ICreate"},"responseBody":{"description":"Created warning record for the member, valid schema only (plus soft delete field).","typeName":"IDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings","method":"post"},{"specification":"Update an existing warning record by ID. Allows changing only the valid schema fields for warnings: 'member_id', 'moderator_id', 'warning_type', 'message', 'expires_at', and 'deleted_at' (if lifting/removing warning). Does not allow modification of non-existent attributes. Returns the updated warning, including the soft delete status. PATCH for search/listing, GET for detail, POST for warn, DELETE for soft delete removal are available.","description":"Updates one warning record in 'discussion_board_warnings' using the valid schema fields: 'member_id', 'moderator_id', 'warning_type', 'message', 'expires_at', and optionally the soft delete timestamp ('deleted_at') if warning is being lifted or hidden. Excludes non-schema fields. Primarily used by moderators/admins for user management and escalation workflows in line with audit trail needs. If no record matches, returns 404. All other access is subject to role authorization.","summary":"Update a warning record (discussion_board_warnings) by ID (soft delete field supported).","parameters":[{"name":"id","description":"The warning record's unique identifier (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the warning: only valid schema properties (including deleted_at for soft delete).","typeName":"IDiscussionBoardWarning.IUpdate"},"responseBody":{"description":"Updated warning record, valid schema fields only (plus soft delete field).","typeName":"IDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings/{id}","method":"put"},{"specification":"Soft delete a warning by marking its 'deleted_at' timestamp in discussion_board_warnings. Implements reversibility/audit trail for warning removals per requirements. No physical deletion is performed: the record is hidden by setting 'deleted_at' to the current time. Only valid schema fields are referenced throughout the operation: if 'deleted_at' is already set, the warning is already soft-deleted. For actual data removal (hard delete), use a different operation. Related endpoints: PATCH for list/search, GET for detail, POST for create, PUT for update (which may also soft delete).","description":"Performs a soft delete of a warning record in 'discussion_board_warnings' by updating the 'deleted_at' field to mark the record as deleted (hidden, not erased). This operation only references schema fields and does not physically remove the record from storage. This is used by moderators/admins to enforce reversibility and auditability of warning removals. The endpoint requires the unique identifier of the warning to soft delete. Only the 'deleted_at' field is changed, and the operation is unsuccessful if the field is already set or the record does not exist. Errors are returned for invalid IDs or access violations.","summary":"Soft delete warning (discussion_board_warnings) by updating 'deleted_at' field; no hard delete.","parameters":[{"name":"id","description":"The warning record's unique identifier (UUID) to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings/{id}","method":"delete"},{"specification":"List and search member ban records in the discussion board platform. Provides pagination, filtering and sorting for bans. Only operates on present schema fields: 'id', 'member_id', 'moderator_id', 'ban_reason', 'permanent', 'created_at', 'expires_at', and 'deleted_at' for soft delete tracking. No extra or non-existent fields referenced. Used for audit management and escalation review by moderators and administrators. Related endpoints: GET for detail, POST for create ban, PUT for update (if allowed), DELETE for soft delete.","description":"Retrieves a paginated, filterable list of ban records for members from 'discussion_board_bans'. The list contains only schema-defined fields for bans: 'id', 'member_id', 'moderator_id', 'ban_reason', 'permanent', 'created_at', 'expires_at', and 'deleted_at' (soft delete field). Used to review active, expired, and lifted bans as part of moderation review and audit processes for the board. Operations only reference fields present in Prisma schema. PATCH for list/search, GET for detail, POST for create ban, PUT for update, DELETE for soft delete are available.","summary":"List and search bans (discussion_board_bans) with soft delete support.","parameters":[],"requestBody":{"description":"Ban list/search parameters. Filters can use valid schema fields such as 'member_id', 'moderator_id', 'permanent', 'created_at', 'expires_at', and 'deleted_at', plus pagination and sorting.","typeName":"IDiscussionBoardBan.IRequest"},"responseBody":{"description":"Paginated ban records containing only schema-valid fields (including deleted_at for soft delete monitoring).","typeName":"IPageIDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans","method":"patch"},{"specification":"Get detailed information for a specific member ban record by unique ID. Only presents fields included in the 'discussion_board_bans' schema: 'id', 'member_id', 'moderator_id', 'ban_reason', 'permanent', 'created_at', 'expires_at', and 'deleted_at'. Used for moderator/admin review of user bans. Related endpoints: PATCH for list/search, POST for add ban, PUT for update, DELETE for soft delete.","description":"Retrieves the detail of a single ban issued to a member by its unique identifier. Reports only the fields specified in the schema: 'id', 'member_id', 'moderator_id', 'ban_reason', 'permanent', 'created_at', 'expires_at', and 'deleted_at' marking soft delete status (if ban is lifted/expired). Used to inform moderation and administration audit/review processes. Does not reference or return any fields outside the Prisma schema. 404 returned if no record matches. Related endpoints for create/update/delete/list.","summary":"Get detail of a member ban (discussion_board_bans) by ID (with soft delete field).","parameters":[{"name":"id","description":"Ban record's unique identifier (UUID) for member ban to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full schema-valid ban record, with deleted_at as soft delete marker.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans/{id}","method":"get"}],"completed":103,"total":115,"step":0,"created_at":"2025-07-23T06:53:42.126Z"},"tokenUsage":{"facade":{"aggregate":{"total":369197,"input":{"total":335508,"cached":3840},"output":{"total":33689,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":369197,"input":{"total":335508,"cached":3840},"output":{"total":33689,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":369197,"input":{"total":335508,"cached":3840},"output":{"total":33689,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":369197,"input":{"total":335508,"cached":3840},"output":{"total":33689,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"List, filter, and search discussion board channels using criteria such as channel code, name, and description. Supports advanced search, sorting by created_at or updated_at, and pagination. Results include detailed channel information as per the 'discussion_board_channels' schema: id (UUID), code (unique string), name (string), description (nullable string), created_at, updated_at, and deleted_at (nullable, for soft delete). Only fields present in the schema are included. Soft deletion is signaled by a non-null deleted_at value (records with deleted_at NOT NULL are considered soft deleted and may or may not be returned depending on client request). No references to created_by or similar non-schema fields.","description":"This operation retrieves a paginated, filtered list of all existing discussion board channels. The search query can filter by channel code, name, and description, supporting case-insensitive and partial matching (utilizing the indexed name and description fields). Sorting can be performed by created_at, updated_at, or other indexed fields. Useful for administrators and moderators to review channel structure, and for clients needing to display available channels for selection. Soft deletion is implemented via the 'deleted_at' field: channels with deleted_at NOT NULL are considered deleted but not removed from storage, supporting reversibility in line with audit and compliance requirements. The operation never references fields like created_by, updated_by, or is_deleted, as those do not exist in the schema. Only fields defined in the actual schema—id, code, name, description, created_at, updated_at, and deleted_at—can be retrieved. Related sections (discussion_board_sections) are not directly returned unless explicitly requested by the client or operation extension. The operation supports pagination and ordering but does not expose or process fields not present in the schema.","summary":"Retrieve a paginated, filtered list of discussion board channels (from discussion_board_channels table).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination options for retrieving channel list.","typeName":"IDiscussionBoardChannel.IRequest"},"responseBody":{"description":"Paginated, filtered results containing discussion board channels matching query filters.","typeName":"IPageDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels","method":"patch"},{"specification":"Retrieve a single discussion board channel by its unique ID. The ID must be a valid UUID corresponding to an existing row in 'discussion_board_channels'. The returned data includes all defined fields: id, code, name, description, created_at, updated_at, and deleted_at. Soft deletion is supported via deleted_at; if the row's deleted_at is not null, the record is considered soft deleted and may be excluded from default queries. Never reference fields outside the schema. Used for admin review, display, editing, or client details views.","description":"Retrieves the details of a specific discussion board channel identified by its unique ID. Returns all schema-defined properties: id (UUID), code (string), name (string), description (nullable string), created_at (datetime), updated_at (datetime), and deleted_at (nullable datetime indicating if the channel is soft-deleted). If the specified ID does not correspond to an existing or active channel (e.g., deleted_at is set and client only wants active), an error is returned. Fields such as created_by, updated_by, or any not present in the schema are never referenced. Related sections are not directly returned in this operation.","summary":"Get a single discussion board channel (from discussion_board_channels) by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the channel to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the selected discussion board channel.","typeName":"IDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels/{id}","method":"get"},{"specification":"Create a new discussion board channel by providing required fields: code (unique string), name (string), and optional description. Upon creation, the system records created_at and updated_at timestamps. Only the schema-defined fields are processed; created_by and similar non-existent schema fields must never be referenced. Record is initially not soft deleted (deleted_at is null). Returns the created channel object including all defined fields.","description":"Creates a new discussion board channel with the specified code, name, and optional description. The returned object includes id, code, name, description (nullable), created_at, updated_at, and (null) deleted_at. The operation enforces uniqueness constraints on code. created_by and updated_by fields are not handled, as they are not defined in the schema. On success, returns the full discussion_board_channels object reflecting the stored state.","summary":"Create a new discussion board channel (discussion_board_channels).","parameters":[],"requestBody":{"description":"Required and optional fields for creating a discussion board channel.","typeName":"IDiscussionBoardChannel.ICreate"},"responseBody":{"description":"The created discussion board channel object.","typeName":"IDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels","method":"post"},{"specification":"Update an existing discussion board channel using its ID. The client provides new values for code, name, or description. Only fields defined in the schema (code, name, description) are allowed to be updated. updated_at is set to the modification time. If updating a soft-deleted row (deleted_at not null), the operation can either fail or require explicit restoration logic (not handled here). No references to non-existent schema fields such as updated_by, created_by, or is_deleted. Returns the updated channel object.","description":"Updates the properties (code, name, description) of an existing discussion board channel identified by ID. Only code, name, and description can be updated, per the schema. The operation also updates the updated_at timestamp. If the specified ID does not correspond to an existing channel or if soft deleted (deleted_at not null), the operation may fail unless a restoration process is specified elsewhere. Returns the full updated channel object. No references to fields outside the actual schema are permitted.","summary":"Update an existing discussion board channel (discussion_board_channels) by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the channel to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update (code, name, description) in the channel.","typeName":"IDiscussionBoardChannel.IUpdate"},"responseBody":{"description":"The updated discussion board channel object.","typeName":"IDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels/{id}","method":"put"},{"specification":"Delete (soft delete) a discussion board channel using its ID. The deleted_at field (nullable datetime) is set to the current time to indicate soft deletion. The record is not actually removed from the database, supporting reversibility and audit requirements per schema definition. The operation never references fields outside the schema (e.g., deleted_by, is_deleted, or removal logs). On success, returns the updated channel object with deleted_at set. If deleted_at is already set, returns an error or unchanged.","description":"Performs a soft delete of a discussion board channel by marking its deleted_at timestamp. The record remains in the database, compliant with auditability rules, and can be restored by clearing deleted_at (handled elsewhere). No permanent removal occurs. Deletes referencing only the schema-defined field deleted_at; any attempt to reference fields like deleted_by, is_deleted, or similar will fail. Returns the full channel record after marking deleted_at, or an error if already deleted.","summary":"Soft delete a discussion board channel (set deleted_at in discussion_board_channels).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the channel to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Channel object after soft deletion (deleted_at set).","typeName":"IDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels/{id}","method":"delete"},{"specification":"List, filter, and search discussion board sections. Sections are always linked to a parent channel via discussion_board_channel_id. This operation supports advanced search and pagination. Only schema fields (id, discussion_board_channel_id, code, name, description, created_at, updated_at, deleted_at) are processed. Soft deletion is implemented via deleted_at: soft-deleted rows may be included or excluded depending on query parameters. No use of non-existent fields (e.g., created_by, updated_by, or is_deleted).","description":"Retrieves a paginated, filtered list of all discussion board sections. Filter options may include channel association (discussion_board_channel_id), section code, or name; supports efficient search and partial match queries. Sorting may be performed by created_at or updated_at. Returns full details as defined in the schema: id, discussion_board_channel_id, code, name, description, created_at, updated_at, deleted_at. Soft deletion is based on deleted_at: if set, the section is not visible by default unless specifically requested. Fields not in the schema (e.g., is_deleted) are never accessed. This operation is typically used by moderators or admins to manage board structure and organization.","summary":"Retrieve a paginated, filtered list of discussion board sections (discussion_board_sections).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination options for section search.","typeName":"IDiscussionBoardSection.IRequest"},"responseBody":{"description":"Paginated, filtered list of discussion board sections.","typeName":"IPageDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections","method":"patch"},{"specification":"Retrieve details for a single discussion board section by its unique ID. Only defined schema fields may be retrieved: id, discussion_board_channel_id, code, name, description, created_at, updated_at, and deleted_at. If the section is soft deleted (deleted_at not null), client may receive an error or an object indicating such. No non-schema fields may be referenced. Used for editing, reviewing, or displaying details.","description":"Fetches the details of a specific discussion board section by its unique ID. Returns all schema-defined fields: id, discussion_board_channel_id (foreign key to parent channel), code, name, description, created_at, updated_at, deleted_at (for soft deletion). Soft-deleted sections may or may not be included in results depending on policy. Any request for non-existent fields (e.g., created_by, is_deleted) will result in an error. Designed for use in admin or moderator UIs and detail pages.","summary":"Get a single discussion board section (from discussion_board_sections) by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the section to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the selected discussion board section.","typeName":"IDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections/{id}","method":"get"},{"specification":"Create a new discussion board section within a channel. Required fields: discussion_board_channel_id (UUID), code (unique per channel), name (string), optional description. created_at and updated_at are set automatically. Only fields present in the schema may be provided/returned. Returns the created section object including all defined fields.","description":"Creates a new discussion board section associated with a parent channel, providing code, name, and optional description. Requires discussion_board_channel_id (must reference an existing channel). All returned fields are as defined in the schema: id (UUID), discussion_board_channel_id, code, name, description, created_at, updated_at, deleted_at (which is null upon creation). created_by and other non-schema fields are not handled. Ensures integrity and atomic representation of each property. Returns the newly created section object upon success.","summary":"Create a new discussion board section (discussion_board_sections).","parameters":[],"requestBody":{"description":"Required/optional data for section creation (channel association, code, name, description).","typeName":"IDiscussionBoardSection.ICreate"},"responseBody":{"description":"The created discussion board section object.","typeName":"IDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections","method":"post"},{"specification":"Update an existing discussion board section by ID. Allows updating code, name, description, channel association, or other schema-defined fields. Only the specified schema fields are accepted and updated (no references to non-existent fields). updated_at is set appropriately. Returns the updated section object upon success.","description":"Updates the details of an existing discussion board section specified by ID. Updatable fields are as per the schema: code, name, description, and potentially channel association (discussion_board_channel_id). updated_at is set to the new modification time. Does not handle fields outside the schema, including created_by, updated_by, or is_deleted. Soft-deleted rows (deleted_at set) will only be updated if restore logic is separately defined or requested. Returns the updated section object. Used for admin and moderator interfaces.","summary":"Update a discussion board section (discussion_board_sections) by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the section to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the section (including code, name, description, channel association).","typeName":"IDiscussionBoardSection.IUpdate"},"responseBody":{"description":"The updated discussion board section object.","typeName":"IDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections/{id}","method":"put"},{"specification":"Delete (soft delete) a discussion board section by ID. The deleted_at field is used for soft delete: set to the current timestamp. No actual record removal from the database. Only the deleted_at field is updated; no use of non-existent deletion fields. Returns section object with deleted_at set upon success, or error on preexisting soft delete.","description":"Soft deletes a discussion board section by marking its deleted_at timestamp. Does not physically remove the section from the database, ensuring reversibility for audit and regulatory compliance. The operation returns the updated section object with deleted_at set, as defined in the schema. Fields such as deleted_by, is_deleted, or hard-delete logs are not handled, as they do not exist in the schema. Designed for moderation or admin actions with full auditability.","summary":"Soft delete a discussion board section (set deleted_at in discussion_board_sections).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the section to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Section object after setting deleted_at.","typeName":"IDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections/{id}","method":"delete"},{"specification":"List, filter, and search global discussion board configurations. Enables admins and moderators to retrieve key-value setting definitions for platform features. All fields are atomic, as per the schema: id, key (unique), value (string), description (nullable), created_at, updated_at. Pagination and ordering supported. No soft delete: as deleted_at does not exist in this schema.","description":"Retrieves a paginated, filtered list of discussion board configuration settings. Supports filtering by key, value, or description (case-insensitive, supports partial match), as well as sorting by created_at or updated_at. No pagination on soft-deletion, as there is no deleted_at; all records are considered active. Only schema-defined fields are retrieved: id, key, value, description, created_at, updated_at. Never references fields such as is_deleted or deleted_at, as these do not exist. Used for admin dashboards, platform feature toggling overview, and audit.","summary":"Retrieve list of board configuration key-values (discussion_board_configurations table).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for configuration list retrieval.","typeName":"IDiscussionBoardConfiguration.IRequest"},"responseBody":{"description":"Paginated, filtered list of discussion board configurations.","typeName":"IPageDiscussionBoardConfiguration"},"authorizationRoles":null,"path":"/discussionBoard/configurations","method":"patch"},{"specification":"Retrieve a single discussion board configuration by its unique ID. The returned fields are strictly those defined in the schema: id, key, value, description, created_at, updated_at. No soft deletion is possible as deleted_at does not exist in this model. Used for editing or displaying configuration details to administrators. Any request for deleted_at or other non-schema fields results in error.","description":"Fetches the details of a specific discussion board configuration item by unique ID. Returns all fields from the schema: id, key, value, description (nullable), created_at, updated_at. No deleted_at field exists here, so hard delete or soft delete is not supported. This operation is essential for admin interfaces modifying or reviewing board configuration, and never exposes or refers to non-schema fields.","summary":"Get a single discussion board configuration by ID (from discussion_board_configurations).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the configuration to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The selected board configuration item.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":null,"path":"/discussionBoard/configurations/{id}","method":"get"}],"completed":115,"total":115,"step":0,"created_at":"2025-07-23T06:54:11.734Z"},"tokenUsage":{"facade":{"aggregate":{"total":406716,"input":{"total":369366,"cached":3840},"output":{"total":37350,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":406716,"input":{"total":369366,"cached":3840},"output":{"total":37350,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":406716,"input":{"total":369366,"cached":3840},"output":{"total":37350,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":406716,"input":{"total":369366,"cached":3840},"output":{"total":37350,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardMember.IUpdate":{"type":"object","properties":{"username":{"type":"string","description":"The member's unique public username. Used for profile URL, notification, and search. Must be unique. Referenced from discussion_board_members.username in the Prisma schema. Example: \"democracyFan_21\".\n\nMust reflect update intent; changing this affects how the member is identified platform-wide."},"email":{"type":"string","description":"The member's email address for system notifications, password recovery, and authentication. Must be unique per member. Referenced from discussion_board_members.email in Prisma schema. Example: \"jane.doe@email.com\".\n\nChanges require authentication and have security implications. Refer to business rules for email validation and use."},"hashed_password":{"type":"string","description":"Hashed password storage for the member. Directly referenced from discussion_board_members.hashed_password in Prisma. Password must be securely handled—never raw in UI.\n\nUpdates require secure handling, validations, and may trigger audit logs."},"display_name":{"type":"string","description":"User-chosen display name (nickname) for UI and community presence. From discussion_board_members.display_name in Prisma schema. Example: \"Jane D.\".\n\nThis property can be updated to change visible name without affecting login/identity."},"profile_image_url":{"oneOf":[{"type":"string","description":"Optional URI for the member's profile image. Supports both image upload (url to CDN) and null (no image). From discussion_board_members.profile_image_url in Prisma (nullable). Example: \"https://cdn.site.com/profiles/member-42.jpg\"."},{"type":"null","description":"Optional URI for the member's profile image. Supports both image upload (url to CDN) and null (no image). From discussion_board_members.profile_image_url in Prisma (nullable). Example: \"https://cdn.site.com/profiles/member-42.jpg\"."}],"description":"Optional URI for the member's profile image. Supports both image upload (url to CDN) and null (no image). From discussion_board_members.profile_image_url in Prisma (nullable). Example: \"https://cdn.site.com/profiles/member-42.jpg\"."},"is_active":{"type":"boolean","description":"Whether the member account is active. Used for suspending or re-enabling accounts. Referenced from discussion_board_members.is_active in Prisma schema. Set to false for banned/deactivated users."}},"required":["username","email","display_name","is_active"],"description":"Payload for updating a discussion board member account. Includes all updatable fields as per discussion_board_members schema. hashed_password can be updated for password resets; profile_image_url is optional. Each property is mapped directly to database columns."},"IModeratorSearchRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator assignment. Sourced from discussion_board_moderators.id in Prisma schema."},"member_id":{"type":"string","format":"uuid","description":"ID of the member assigned as moderator. Links to discussion_board_moderators.member_id. Relates to member PK in main member table."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when moderator role was assigned. Used for searching within assignment timeframes (ISO8601)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp when moderator role was revoked. null means current/active moderator."},{"type":"null","format":"date-time","description":"Nullable timestamp when moderator role was revoked. null means current/active moderator."}],"description":"Nullable timestamp when moderator role was revoked. null means current/active moderator."}},"required":[],"description":"Request payload for searching moderator roles/assignments. Fields correspond to discussion_board_moderators table for advanced query by ID, member, assignment period, or revocation state."},"IPageDiscussionBoardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerator"},"description":"Array of moderator role assignments matching query/search. Each record as per discussion_board_moderators schema."}},"required":["pagination","data"],"description":"Paginated result for moderator assignments. Combines standard page metadata with array of IDiscussionBoardModerator entities for admin/moderator UI or analytics."},"IDiscussionBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the moderator assignment entity. Referenced from discussion_board_moderators.id."},"member_id":{"type":"string","format":"uuid","description":"ID of the board member promoted to moderator. FK to discussion_board_members.id."},"assigned_at":{"type":"string","format":"date-time","description":"Date/time moderator role was assigned. For audit trail, onboarding tracking."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp of moderator role revocation. null if still active. Used for revocation and compliance workflows."},{"type":"null","format":"date-time","description":"Nullable timestamp of moderator role revocation. null if still active. Used for revocation and compliance workflows."}],"description":"Nullable timestamp of moderator role revocation. null if still active. Used for revocation and compliance workflows."}},"required":["id","member_id","assigned_at"],"description":"Single moderator assignment entity. All properties directly mapped to fields in discussion_board_moderators model. Used for searching, assigning, revoking, and describing moderator permissions."},"IModeratorCreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of the member being promoted to moderator (FK to members table). Matches discussion_board_moderators.member_id in Prisma. Must reference existing and valid user."},"assigned_at":{"type":"string","format":"date-time","description":"Datetime when moderator role is assigned. Usually set to now; can be provided for migration/backdating."}},"required":["member_id"],"description":"Request payload for assigning moderator role to a member. Establishes moderator status. assigned_at is usually set server-side, but may be supplied for migration/audit."},"IModeratorUpdate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"(Optional) Updated member assignment for moderator role, only for migration or admin override. FK to discussion_board_members.id."},"assigned_at":{"type":"string","format":"date-time","description":"(Optional) New assignment timestamp for moderator role, typically for auditing or migration."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) New revocation timestamp (null for activate, datetime for revoke). Used for deactivating moderator role."},{"type":"null","format":"date-time","description":"(Optional) New revocation timestamp (null for activate, datetime for revoke). Used for deactivating moderator role."}],"description":"(Optional) New revocation timestamp (null for activate, datetime for revoke). Used for deactivating moderator role."}},"required":[],"description":"Used to update critical fields of a moderator assignment: member_id (for migration/fix), assigned_at (for audit), revoked_at (for role deactivation/restore). All mapped to discussion_board_moderators model fields."},"IAdministratorSearchRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the administrator assignment. Links to discussion_board_administrators.id in Prisma schema."},"member_id":{"type":"string","format":"uuid","description":"ID of the member holding admin role assignment. Links to member PK."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when admin privileges were granted. Used for filtering on admin role onboarding (ISO8601)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp when admin rights were revoked. null if currently admin; used for compliance tracking."},{"type":"null","format":"date-time","description":"Nullable timestamp when admin rights were revoked. null if currently admin; used for compliance tracking."}],"description":"Nullable timestamp when admin rights were revoked. null if currently admin; used for compliance tracking."}},"required":[],"description":"Request body for searching/filtering administrator assignments using only schema-defined fields in discussion_board_administrators."},"IPageDiscussionBoardAdministrator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAdministrator"},"description":"List of admin assignments in current page. Each as per discussion_board_administrators schema."}},"required":["pagination","data"],"description":"Paginated result format for admin role assignments, combining standard pagination data with array of administrator assignment objects."},"IDiscussionBoardAdministrator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for this administrator role assignment. Referenced from discussion_board_administrators.id."},"member_id":{"type":"string","format":"uuid","description":"ID of the member assigned as administrator (FK to members table)."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp of administrator role assignment. tracked for audit and onboarding."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datestamp when administration privileges were revoked, or null if still active (soft revocation pattern)."},{"type":"null","format":"date-time","description":"Datestamp when administration privileges were revoked, or null if still active (soft revocation pattern)."}],"description":"Datestamp when administration privileges were revoked, or null if still active (soft revocation pattern)."}},"required":["id","member_id","assigned_at"],"description":"Admin assignment record; captures member, audit, and revocation data as in discussion_board_administrators."},"IAdministratorCreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of the member being escalated to administrator. (FK to member PK, required per assignment)."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp of admin role assignment (optional, usually set by server)."}},"required":["member_id"],"description":"Payload for creating/assigning admin privileges to a member. assigned_at is optional (for migration), typically set on insert."},"IAdministratorUpdate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"(Optional) Member ID for admin assignment (generally for error correction/migration only)."},"assigned_at":{"type":"string","format":"date-time","description":"(Optional) New assignment timestamp in ISO8601 (for audit/migration)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) When to revoke admin rights. null for restoration, datetime for revocation."},{"type":"null","format":"date-time","description":"(Optional) When to revoke admin rights. null for restoration, datetime for revocation."}],"description":"(Optional) When to revoke admin rights. null for restoration, datetime for revocation."}},"required":[],"description":"Updates administrator assignment. Supports fixing member link, adjusting assignment timestamp, or revoking/undoing admin rights using revoked_at. Directly mapped to schema fields."},"IThreadSearchRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"(Optional) Thread unique id (discussion_board_threads.id). Useful for single-thread query."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"ID of the thread creator. search/filter by author. Prisma schema: discussion_board_threads.discussion_board_member_id."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"ID of the associated category. Filter by topic group. Prisma: discussion_board_threads.discussion_board_category_id."},"title":{"type":"string","description":"Full thread title (for full match). For advanced search, may implement GIN index full-text search. Primavera: discussion_board_threads.title."},"body":{"type":"string","description":"Thread body initial content. Used for search/filtering full text if relevant. Prisma: discussion_board_threads.body."},"is_pinned":{"type":"boolean","description":"Filter by pin status (Featured/Top). Prisma: discussion_board_threads.is_pinned."},"is_closed":{"type":"boolean","description":"Restrict search to closed/resolved threads. Prisma: discussion_board_threads.is_closed."},"created_at":{"type":"string","format":"date-time","description":"Search for threads created at a certain time (ISO8601). Prisma: discussion_board_threads.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Search by last modified date (ISO8601). Prisma: discussion_board_threads.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable field for soft delete detection (only included if requesting deleted data). Prisma: discussion_board_threads.deleted_at."},{"type":"null","format":"date-time","description":"Nullable field for soft delete detection (only included if requesting deleted data). Prisma: discussion_board_threads.deleted_at."}],"description":"Nullable field for soft delete detection (only included if requesting deleted data). Prisma: discussion_board_threads.deleted_at."}},"required":[],"description":"Search or filter payload for retrieving threads. All fields reference Prisma schema columns in discussion_board_threads. Used for admin/member/UX filtering (search by title, author, date, pin, closure, etc)."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number. Used for paginated data browsing within query result sets."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of records per page. Defaults to 100. Server/application may enforce upper/lower bounds."},"records":{"type":"integer","format":"uint32","description":"Total records matching query, across all pages. For summary in paginated tables."},"pages":{"type":"integer","format":"uint32","description":"Total number of result pages (ceil(records/limit)), for UX navigation."}},"required":["current","limit","records","pages"],"description":"Standard page meta-information for paginated results. All values required for IPage<T> result sets."}}},"completed":12,"total":116,"step":0,"created_at":"2025-07-23T06:54:50.809Z"},"tokenUsage":{"facade":{"aggregate":{"total":473269,"input":{"total":433372,"cached":3840},"output":{"total":39897,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":473269,"input":{"total":433372,"cached":3840},"output":{"total":39897,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":473269,"input":{"total":433372,"cached":3840},"output":{"total":39897,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":473269,"input":{"total":433372,"cached":3840},"output":{"total":39897,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자입니다. 각 토론 게시판 카테고리 레코드를 고유하게 식별합니다. Prisma schema discussion_board_categories.id 컬럼을 참고하세요.\n\n카테고리 관리, 게시글 분류 등에 사용되며, UUID 형식의 문자열입니다."},"name":{"type":"string","description":"카테고리명입니다. UI 및 관리에서 사용자에게 보여질 때 사용됩니다. Prisma schema discussion_board_categories.name 컬럼을 참고하세요.\n\n사이트에 등록된 다른 카테고리들과 중복되지 않으며, 보통 '정치', '경제' 등과 같은 라벨로 사용됩니다."},"description":{"oneOf":[{"type":"string","description":"카테고리 설명입니다. 제공 시, 유저 및 관리자가 카테고리 용도와 범위를 쉽게 이해할 수 있도록 도와줍니다. Prisma schema discussion_board_categories.description 컬럼을 참고.\n\nUI 툴팁/상세정보, 관리자가 카테고리 의미 파악 등에 활용됩니다. 없는 경우 null입니다."},{"type":"null"}],"description":"카테고리 설명입니다. 제공 시, 유저 및 관리자가 카테고리 용도와 범위를 쉽게 이해할 수 있도록 도와줍니다. Prisma schema discussion_board_categories.description 컬럼을 참고.\n\nUI 툴팁/상세정보, 관리자가 카테고리 의미 파악 등에 활용됩니다. 없는 경우 null입니다."},"created_at":{"type":"string","format":"date-time","description":"카테고리 생성 일시입니다. Prisma schema discussion_board_categories.created_at 컬럼을 참고.\n\n관리 도구, 감사로그, 생성순 정렬 등에 사용됩니다. ISO 8601 형식(예시: 2024-07-22T14:17:31.291Z)입니다."},"updated_at":{"type":"string","format":"date-time","description":"카테고리 최종 수정 일시입니다. Prisma schema discussion_board_categories.updated_at 컬럼을 참고.\n\n카테고리 정보가 변경된 시점 추적 및 이력 관리에 활용됩니다."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"카테고리 소프트 삭제(삭제 플래그) 일시입니다. Prisma schema discussion_board_categories.deleted_at 컬럼 참조.\n\nnull이면 정상 데이터, 값이 있으면 삭제 상태(기본적으로 UI에서 숨김 처리). 복구/감사 목적 등으로 활용됩니다."},{"type":"null"}],"description":"카테고리 소프트 삭제(삭제 플래그) 일시입니다. Prisma schema discussion_board_categories.deleted_at 컬럼 참조.\n\nnull이면 정상 데이터, 값이 있으면 삭제 상태(기본적으로 UI에서 숨김 처리). 복구/감사 목적 등으로 활용됩니다."}},"required":["id","name","created_at","updated_at"],"description":"토론 게시판의 카테고리 엔터티이며, 게시글 분류 및 탐색 시 반드시 참조됩니다.\n\nPrisma schema discussion_board_categories 테이블과 1:1로 매핑되며, 각 필드는 해당 스키마의 컬럼을 정확히 반영합니다. 카테고리는 게시판 내의 대표적 분류 구조를 담당하며, 사용자, 게시글, 관리 인터페이스 등 다양한 곳에서 활용됩니다. 작성 시 중복 예방, 설명 관리, 삭제 이력 보존 등 다양한 비즈니스 요구사항을 충족시킵니다."},"IDiscussionBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"생성할 카테고리의 이름(라벨)입니다. Prisma discussion_board_categories.name 컬럼과 동일합니다.\n\n다른 카테고리명과 중복될 수 없으며, UI 및 관리에서 사용자를 위한 분류라벨로 사용됩니다(예: '정치', '법과 정책')."},"description":{"oneOf":[{"type":"string","description":"카테고리 설명입니다. Prisma discussion_board_categories.description 컬럼 기반.\n\n디자인 목적 또는 관리 인터페이스에서 의미전달을 위해 선택적으로 입력됩니다. 없는 경우 null로 처리합니다."},{"type":"null"}],"description":"카테고리 설명입니다. Prisma discussion_board_categories.description 컬럼 기반.\n\n디자인 목적 또는 관리 인터페이스에서 의미전달을 위해 선택적으로 입력됩니다. 없는 경우 null로 처리합니다."}},"required":["name"],"description":"새로운 토론 게시판 카테고리를 생성하기 위한 입력 스키마입니다.\n\nPrisma discussion_board_categories 테이블의 name, description 컬럼을 받아 카테고리 등록에 사용합니다. name 필드는 고유하게 관리되어야 하며, description은 선택적입니다."},"IDiscussionBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"수정할 카테고리의 이름입니다. Prisma discussion_board_categories.name 컬럼에 반영됩니다.\n\n기존 카테고리와의 중복을 허용하지 않습니다."},"description":{"oneOf":[{"type":"string","description":"수정할 카테고리 설명입니다. Prisma discussion_board_categories.description 컬럼에 반영.\n\n설명을 첨부하지 않을 경우 null 전달도 허용합니다."},{"type":"null"}],"description":"수정할 카테고리 설명입니다. Prisma discussion_board_categories.description 컬럼에 반영.\n\n설명을 첨부하지 않을 경우 null 전달도 허용합니다."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"카테고리 소프트 삭제/복구 명령 시 사용하는 삭제 일시입니다. Prisma schema discussion_board_categories.deleted_at 컬럼 참조.\n\n삭제 처리 시 현재 시간(ISO 8601)을 입력하고, 복구 시 null로 재설정합니다."},{"type":"null"}],"description":"카테고리 소프트 삭제/복구 명령 시 사용하는 삭제 일시입니다. Prisma schema discussion_board_categories.deleted_at 컬럼 참조.\n\n삭제 처리 시 현재 시간(ISO 8601)을 입력하고, 복구 시 null로 재설정합니다."}},"description":"토론 게시판 카테고리 수정 요청을 위한 입력 스키마이며, 이름, 설명, 소프트 삭제/복구 여부를 반영합니다.\n\nPrisma discussion_board_categories 테이블의 컬럼을 기반으로 하며, name과 description 수정, deleted_at(소프트 삭제/복구) 관리 용으로 활용합니다.","required":[]},"IDiscussionBoardSearchHistory.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"검색을 실행한 주체의 식별자(게스트, 멤버 등). Prisma discussion_board_search_histories.actor_id 컬럼 참조.\n\n레코드 소유권/권한 체크, 사용자별 히스토리 제공시 활용함."},"keyword":{"type":"string","description":"검색어/키워드. Prisma discussion_board_search_histories.keyword 컬럼과 동일.\n\n검색 수행 시 입력한 텍스트로, 검색 기록 소팅/필터 등에 사용."},"filters":{"oneOf":[{"type":"string","description":"구조적/고급 검색 필터를 직렬화한 문자열(JSON 등). Prisma schema discussion_board_search_histories.filters 컬럼 참조.\n\n예시: '{\"tags\":[\"경제\"],\"기간\":\"2025-07\"}' 등. 미사용 시 null입니다."},{"type":"null"}],"description":"구조적/고급 검색 필터를 직렬화한 문자열(JSON 등). Prisma schema discussion_board_search_histories.filters 컬럼 참조.\n\n예시: '{\"tags\":[\"경제\"],\"기간\":\"2025-07\"}' 등. 미사용 시 null입니다."},"search_context":{"oneOf":[{"type":"string","description":"검색이 수행된 위치/컨텍스트. Prisma schema discussion_board_search_histories.search_context 컬럼(예: thread_list, homepage 등).\n\n검색 UI 위치 분석, 화면별 통계 등에 활용됩니다."},{"type":"null"}],"description":"검색이 수행된 위치/컨텍스트. Prisma schema discussion_board_search_histories.search_context 컬럼(예: thread_list, homepage 등).\n\n검색 UI 위치 분석, 화면별 통계 등에 활용됩니다."},"created_at":{"type":"string","format":"date-time","description":"검색 수행 시각. Prisma schema discussion_board_search_histories.created_at와 매핑됨.\n\n기록 정렬, 통계, 행위 분석 등에 필요합니다."}},"description":"토론 게시판 내 검색 이력 조회 시 사용할 필터/페이징/정렬용 입력 스키마입니다.\n\n각 속성은 Prisma discussion_board_search_histories 컬럼에 기반하며, 주로 대량 검색 이력 조회 및 분석, 관리자 감사 등에 활용합니다.","required":[]},"IPageIDiscussionBoardSearchHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보를 담으며, 페이징 조회 시 현재 페이지 등 기록.\n\nIPage.IPagination 타입 구조를 참조."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSearchHistory"},"description":"현재 페이지에 해당하는 검색 이력 레코드 배열.\n\n각 요소는 IDiscussionBoardSearchHistory 타입으로 반영."}},"required":["pagination","data"],"description":"검색 이력 조회의 페이지네이션 컨테이너이며, 데이터 배열과 페이지 정보가 결합된 구조입니다.\n\nIPage<T> 공식 규약을 따르며, data는 검색 이력 객체의 배열, pagination은 페이징 정보입니다."},"IDiscussionBoardSearchHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"각 검색 이력 레코드의 고유 식별자(UUID). Prisma discussion_board_search_histories.id 참조.\n\n검색 이력의 고유성을 보장하며, 검색 이력 상세조회/수정 등에 활용합니다."},"actor_id":{"type":"string","format":"uuid","description":"검색을 실행한 주체(게스트, 멤버, 관리자 등)의 식별자. Prisma discussion_board_search_histories.actor_id 컬럼 기반.\n\n로그 추적, 검색 분석, 사용자별 히스토리 제공 등에 활용."},"keyword":{"type":"string","description":"입력한 검색어(키워드). Prisma discussion_board_search_histories.keyword 컬럼 기반.\n\n필수 입력값으로, 검색어 기록 및 추천 엔진 등에 활용."},"filters":{"oneOf":[{"type":"string","description":"직렬화된 검색 필터(옵션). Prisma discussion_board_search_histories.filters 컬럼 기반.\n\n사용 예시: 태그, 날짜, 정렬 등 고급 옵션의 JSON 문자열. 없으면 null."},{"type":"null"}],"description":"직렬화된 검색 필터(옵션). Prisma discussion_board_search_histories.filters 컬럼 기반.\n\n사용 예시: 태그, 날짜, 정렬 등 고급 옵션의 JSON 문자열. 없으면 null."},"search_context":{"oneOf":[{"type":"string","description":"검색 실행 UI 컨텍스트. Prisma discussion_board_search_histories.search_context 기반.\n\n검색이 실행된 위치(예: thread_list, homepage 등)의 기록. 없는 경우 null."},{"type":"null"}],"description":"검색 실행 UI 컨텍스트. Prisma discussion_board_search_histories.search_context 기반.\n\n검색이 실행된 위치(예: thread_list, homepage 등)의 기록. 없는 경우 null."},"created_at":{"type":"string","format":"date-time","description":"검색 실행 시각. Prisma discussion_board_search_histories.created_at 컬럼 기반.\n\n감사, 행동 분석, 순차 정렬 등에 사용."}},"required":["id","actor_id","keyword","created_at"],"description":"토론 게시판에서 실행된 검색 이력 레코드의 메인 타입입니다.\n\n각 속성은 discussion_board_search_histories 테이블의 컬럼과 1:1 매핑되며, 이력관리를 위한 감사, 추천, 사용자별 검색 분석 등에 폭넓게 활용됩니다."},"IDiscussionBoardSearchHistory.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"검색을 수행한 주체의 ID(UUID); 게스트, 멤버 등. Prisma search_histories.actor_id 컬럼과 동일.\n\n로그추적/권한체크/사용자 추천 등에 필요."},"keyword":{"type":"string","description":"입력한 검색 텍스트(필수). Prisma search_histories.keyword 컬럼 참조.\n\n검색 실행 시 입력값 그대로 저장."},"filters":{"oneOf":[{"type":"string","description":"JSON 등으로 직렬화된 고급검색 필터. Prisma search_histories.filters 컬럼 기반.\n\n없으면 null, 예: {\"tags\":[],\"기간\":\"2025-07\"}."},{"type":"null"}],"description":"JSON 등으로 직렬화된 고급검색 필터. Prisma search_histories.filters 컬럼 기반.\n\n없으면 null, 예: {\"tags\":[],\"기간\":\"2025-07\"}."},"search_context":{"oneOf":[{"type":"string","description":"검색 수행 위치/화면 등을 알려주는 컨텍스트 문자열. Prisma search_histories.search_context 컬럼 참조.\n\n메인화면, 상세화면, 관리자 등 구분하며 null 허용."},{"type":"null"}],"description":"검색 수행 위치/화면 등을 알려주는 컨텍스트 문자열. Prisma search_histories.search_context 컬럼 참조.\n\n메인화면, 상세화면, 관리자 등 구분하며 null 허용."}},"required":["actor_id","keyword"],"description":"토론 게시판 검색 이력 등록 시 제출하는 요청 스키마입니다.\n\n필수 필드(router, 게스트/멤버 id, 검색어)를 요구하며, 고급 필터 및 컨텍스트는 선택사항입니다."},"IDiscussionBoardSearchHistory.IUpdate":{"type":"object","properties":{"keyword":{"type":"string","description":"수정하려는 검색어 텍스트. Prisma search_histories.keyword 컬럼에 반영.\n\n검색어 정정 및 재분류 목적 등으로 사용."},"filters":{"oneOf":[{"type":"string","description":"수정될 고급검색 옵션(JSON 직렬화). Prisma search_histories.filters 컬럼 기반.\n\nnull 지정 가능, 기존 필터 제외하고 단순검색만 남기고 싶을 때 등."},{"type":"null"}],"description":"수정될 고급검색 옵션(JSON 직렬화). Prisma search_histories.filters 컬럼 기반.\n\nnull 지정 가능, 기존 필터 제외하고 단순검색만 남기고 싶을 때 등."},"search_context":{"oneOf":[{"type":"string","description":"검색을 수행한 컨텍스트의 변경값. Prisma search_histories.search_context 컬럼 기준.\n\n검색 위치 변경 등 용도로 사용, null 입력시 기존 값 삭제."},{"type":"null"}],"description":"검색을 수행한 컨텍스트의 변경값. Prisma search_histories.search_context 컬럼 기준.\n\n검색 위치 변경 등 용도로 사용, null 입력시 기존 값 삭제."}},"description":"토론 게시판 검색 이력의 수정용 입력 타입.\n\n검색어, 고급검색 필터, context 등의 값 수정에 사용하며, actor_id 또는 created_at 등 기본 정보는 불변입니다.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"현재 페이지 번호입니다. 전체 페이지 수 내에서 1 이상의 값을 가집니다."},"limit":{"type":"integer","format":"uint32","description":"페이지별 최대 데이터 개수. 기본값은 100이며, 1 이상 허용."},"records":{"type":"integer","format":"uint32","description":"전체 레코드 수. 필터 조건에 따라 동적으로 결정됩니다."},"pages":{"type":"integer","format":"uint32","description":"전체 페이지 수. records/limit 계산치로 전체 네비게이션에 사용."}},"required":["current","limit","records","pages"],"description":"페이지네이션 정보 타입이며, IPage<T> 각 페이지에 결합되어 반환되는 구조입니다.\n\ncurrent, limit, records, pages로 구성되어 전체 페이징 상태를 표현합니다."}}},"completed":20,"total":116,"step":0,"created_at":"2025-07-23T06:54:52.014Z"},"tokenUsage":{"facade":{"aggregate":{"total":540106,"input":{"total":497369,"cached":3840},"output":{"total":42737,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":540106,"input":{"total":497369,"cached":3840},"output":{"total":42737,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":540106,"input":{"total":497369,"cached":3840},"output":{"total":42737,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":540106,"input":{"total":497369,"cached":3840},"output":{"total":42737,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionBoardVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the page of discussion board votes. Documents the current page, limit, record count, and page count in accordance with IPage documentation and platform-wide pagination standards."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVote"},"description":"The list of discussion board votes on this page. Each object is a complete discussion board vote entity as defined in the IDiscussionBoardVote schema."}},"required":["pagination","data"],"description":"A paginated set of discussion board votes. Provides both page metadata and an array of discussion board vote objects returned by a search/filter. This type references the underlying IDiscussionBoardVote entity and pagination schema. Used for displaying or transmitting large vote datasets efficiently with UI navigation."},"IDiscussionBoardVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for this vote. Directly references the id field of discussion_board_votes table."},"voter_id":{"type":"string","format":"uuid","description":"The ID of the member who cast the vote. Links to discussion_board_members.id."},"vote_type_id":{"type":"string","format":"uuid","description":"References the vote type for this vote (e.g., upvote, downvote). Links to discussion_board_vote_types.id. Only valid values for types stored in that table."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the vote targets a thread, this is the UUID of that thread (nullable; one of thread_id, post_id, or comment_id must be non-null)."},{"type":"null","format":"uuid","description":"If the vote targets a thread, this is the UUID of that thread (nullable; one of thread_id, post_id, or comment_id must be non-null)."}],"description":"If the vote targets a thread, this is the UUID of that thread (nullable; one of thread_id, post_id, or comment_id must be non-null)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the vote targets a post, post UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If the vote targets a post, post UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."}],"description":"If the vote targets a post, post UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the vote targets a comment, comment UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If the vote targets a comment, comment UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."}],"description":"If the vote targets a comment, comment UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."},"created_at":{"type":"string","format":"date-time","description":"Timestamp at which this vote was created (ISO 8601 UTC format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this vote was last updated (ISO 8601 UTC format)."}},"required":["id","voter_id","vote_type_id","created_at","updated_at"],"description":"Discussion board vote entity. Each record represents a single voting action (e.g., upvote, downvote) by a member on a thread, post, or comment. Based on discussion_board_votes in the DB. Includes references to the type, actor, and target content, as well as creation and last update timestamps. Exactly matches the DB schema and is used for vote retrieval, list, analytics, and API documentation."},"IDiscussionBoardVote.ICreate":{"type":"object","properties":{"voter_id":{"type":"string","format":"uuid","description":"The member's UUID who is casting the vote. Foreign key to discussion_board_members.id."},"vote_type_id":{"type":"string","format":"uuid","description":"Specifies which type of vote this is (e.g., upvote or downvote). Foreign key to discussion_board_vote_types.id. Must be a valid type id."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the thread being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},{"type":"null","format":"uuid","description":"UUID of the thread being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."}],"description":"UUID of the thread being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the post being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},{"type":"null","format":"uuid","description":"UUID of the post being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."}],"description":"UUID of the post being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},{"type":"null","format":"uuid","description":"UUID of the comment being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."}],"description":"UUID of the comment being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."}},"required":["voter_id","vote_type_id"],"description":"Request body schema for creating a new vote in the discussion board system. Must provide voter_id and vote_type_id, and exactly one of thread_id, post_id, or comment_id (all nullable). References to content must be valid and exist. Used by endpoint to process member voting actions."},"IDiscussionBoardVote.IUpdate":{"type":"object","properties":{"vote_type_id":{"type":"string","format":"uuid","description":"Specifies the updated vote type for this vote (e.g., changing from upvote to downvote). Foreign key to discussion_board_vote_types.id. Must be a valid type id."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"If updating the target thread for a vote, the new thread UUID here (nullable); only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If updating the target thread for a vote, the new thread UUID here (nullable); only one of thread_id, post_id, or comment_id should be set."}],"description":"If updating the target thread for a vote, the new thread UUID here (nullable); only one of thread_id, post_id, or comment_id should be set."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If updating the post a vote applies to, the new post UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If updating the post a vote applies to, the new post UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."}],"description":"If updating the post a vote applies to, the new post UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If updating the comment a vote applies to, the new comment UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If updating the comment a vote applies to, the new comment UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."}],"description":"If updating the comment a vote applies to, the new comment UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."}},"required":["vote_type_id"],"description":"Request body for updating an existing vote entity. Only vote_type_id (required) and at most one of the content target ids (thread_id, post_id, comment_id) are accepted. This schema supports corrections to a user's vote (type or target)."},"IEmpty":{"type":"object","properties":{},"description":"An empty object used when no response body is required (e.g., for hard delete endpoints).","required":[]},"IDiscussionBoardTag.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid","description":"The unique identifier for the tag, used for filtering by a specific tag UUID."},{"type":"null","format":"uuid","description":"The unique identifier for the tag, used for filtering by a specific tag UUID."}],"description":"The unique identifier for the tag, used for filtering by a specific tag UUID."},"name":{"oneOf":[{"type":"string","description":"Exact or partial tag name for filtering. Supports full-text and case-insensitive search."},{"type":"null","description":"Exact or partial tag name for filtering. Supports full-text and case-insensitive search."}],"description":"Exact or partial tag name for filtering. Supports full-text and case-insensitive search."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter to tags created at or after this time (ISO 8601 UTC)."},{"type":"null","format":"date-time","description":"Filter to tags created at or after this time (ISO 8601 UTC)."}],"description":"Filter to tags created at or after this time (ISO 8601 UTC)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter to tags created at or before this time (ISO 8601 UTC)."},{"type":"null","format":"date-time","description":"Filter to tags created at or before this time (ISO 8601 UTC)."}],"description":"Filter to tags created at or before this time (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for soft-deleted tags (specify deleted_at for inclusion/exclusion logic)."},{"type":"null","format":"date-time","description":"Filter for soft-deleted tags (specify deleted_at for inclusion/exclusion logic)."}],"description":"Filter for soft-deleted tags (specify deleted_at for inclusion/exclusion logic)."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: the page number, 1-based. Null for first page."},{"type":"null","minimum":1,"description":"Pagination: the page number, 1-based. Null for first page."}],"description":"Pagination: the page number, 1-based. Null for first page."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: maximum number of items per page. Null or omitted for default value."},{"type":"null","minimum":1,"description":"Pagination: maximum number of items per page. Null or omitted for default value."}],"description":"Pagination: maximum number of items per page. Null or omitted for default value."},"sort_field":{"oneOf":[{"type":"string","description":"Field name to sort by (e.g., name, created_at, etc)."},{"type":"null","description":"Field name to sort by (e.g., name, created_at, etc)."}],"description":"Field name to sort by (e.g., name, created_at, etc)."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction: asc (ascending) or desc (descending)."},{"const":"desc","description":"Sort direction: asc (ascending) or desc (descending)."},{"type":"null","enum":["asc","desc"],"description":"Sort direction: asc (ascending) or desc (descending)."}],"description":"Sort direction: asc (ascending) or desc (descending)."}},"description":"Request schema for searching, filtering, and paginating discussion board tags. Only references schema-present fields. Supports filtering by id, name, creation times, deletion status, with paging and sort controls for efficient API queries.","required":[]},"IPageIDiscussionBoardTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata describing page, limit, record, and pages for this tag results page."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTag"},"description":"Array of tag entities matching the query criteria, as defined in the IDiscussionBoardTag schema."}},"required":["pagination","data"],"description":"Paginated results set for discussion board tags. Contains page info and actual tag entities, supporting UI page transitions and API efficiency."},"IDiscussionBoardTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for this tag. Primary key of discussion_board_tags."},"name":{"type":"string","description":"Human-readable tag label, unique per board. Used for filtering/discovery, e.g., 'inflation'."},"description":{"oneOf":[{"type":"string","description":"Optional description of tag purpose (nullable). E.g., 'Discussion about macroeconomic inflation.'"},{"type":"null","description":"Optional description of tag purpose (nullable). E.g., 'Discussion about macroeconomic inflation.'"}],"description":"Optional description of tag purpose (nullable). E.g., 'Discussion about macroeconomic inflation.'"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the tag was created (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"When the tag was last updated (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp; if set, tag is deleted but not removed. Null otherwise."},{"type":"null","format":"date-time","description":"Soft delete timestamp; if set, tag is deleted but not removed. Null otherwise."}],"description":"Soft delete timestamp; if set, tag is deleted but not removed. Null otherwise."}},"required":["id","name","created_at","updated_at"],"description":"Discussion board tag entity. Each record represents a content label (e.g., 'inflation', 'macroeconomics') enabling flexible categorization and discovery. Maps to discussion_board_tags in DB and includes unique tag name, description, and audit timestamps including support for soft deletion."},"IDiscussionBoardTag.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"The label for the new tag. Must be unique and non-null as per schema."},"description":{"oneOf":[{"type":"string","description":"Optional explanatory description for the new tag. If null or omitted, the tag has no description."},{"type":"null","description":"Optional explanatory description for the new tag. If null or omitted, the tag has no description."}],"description":"Optional explanatory description for the new tag. If null or omitted, the tag has no description."}},"required":["name"],"description":"Request body for creating a new tag. Accepts name (required, unique, string) and optional description (nullable string). Used by tag management APIs per discussion_board_tags schema."},"IDiscussionBoardTag.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"New/updated tag label, must be unique and non-null."},"description":{"oneOf":[{"type":"string","description":"New or updated description for the tag (nullable)."},{"type":"null","description":"New or updated description for the tag (nullable)."}],"description":"New or updated description for the tag (nullable)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft delete or restoration; set to now to delete, null to restore/activate."},{"type":"null","format":"date-time","description":"Timestamp for soft delete or restoration; set to now to delete, null to restore/activate."}],"description":"Timestamp for soft delete or restoration; set to now to delete, null to restore/activate."}},"description":"Request body for updating a tag, supporting change of label, description, and soft-delete status. Only includes schema-matching fields. Used for admin/moderation of tag entities.","required":[]},"IDiscussionBoardCategory.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional category UUID for filtering specific categories."},{"type":"null","format":"uuid","description":"Optional category UUID for filtering specific categories."}],"description":"Optional category UUID for filtering specific categories."},"name":{"oneOf":[{"type":"string","description":"Filter to categories whose name matches value (exact or partial case-insensitive string match)."},{"type":"null","description":"Filter to categories whose name matches value (exact or partial case-insensitive string match)."}],"description":"Filter to categories whose name matches value (exact or partial case-insensitive string match)."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for categories created after or at this time (ISO 8601 UTC)."},{"type":"null","format":"date-time","description":"Filter for categories created after or at this time (ISO 8601 UTC)."}],"description":"Filter for categories created after or at this time (ISO 8601 UTC)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for categories created before or at this time (ISO 8601 UTC)."},{"type":"null","format":"date-time","description":"Filter for categories created before or at this time (ISO 8601 UTC)."}],"description":"Filter for categories created before or at this time (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp; if specified, filters for soft-deleted categories."},{"type":"null","format":"date-time","description":"Soft delete timestamp; if specified, filters for soft-deleted categories."}],"description":"Soft delete timestamp; if specified, filters for soft-deleted categories."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination - the results page to return, starting at 1."},{"type":"null","minimum":1,"description":"Pagination - the results page to return, starting at 1."}],"description":"Pagination - the results page to return, starting at 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Number of categories to return per page."},{"type":"null","minimum":1,"description":"Number of categories to return per page."}],"description":"Number of categories to return per page."},"sort_field":{"oneOf":[{"type":"string","description":"Which field to sort by (e.g., name, created_at)."},{"type":"null","description":"Which field to sort by (e.g., name, created_at)."}],"description":"Which field to sort by (e.g., name, created_at)."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending, 'desc' for descending. Defaults to system's default if not set."},{"const":"desc","description":"Sort direction: 'asc' for ascending, 'desc' for descending. Defaults to system's default if not set."},{"type":"null","enum":["asc","desc"],"description":"Sort direction: 'asc' for ascending, 'desc' for descending. Defaults to system's default if not set."}],"description":"Sort direction: 'asc' for ascending, 'desc' for descending. Defaults to system's default if not set."}},"description":"Request body for searching/filtering discussion board categories. Supports all schema fields as filters, paging, and sort options. Used in category management and browsing APIs.","required":[]},"IPageIDiscussionBoardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for this page of categories. Based on platform-wide page structure."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategory"},"description":"The array of actual discussion board category entities on this page, matching search/filter parameters."}},"required":["pagination","data"],"description":"Paginated result object for category listings. Contains both page metadata and the array of category entities matching filter."},"IDiscussionBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for the category. Primary key on discussion_board_categories table."},"name":{"type":"string","description":"The category label. Unique per board, used for filtering, thread associations, and navigation."},"description":{"oneOf":[{"type":"string","description":"Optional explanation of this category's purpose or scope. If null, no additional info is associated."},{"type":"null","description":"Optional explanation of this category's purpose or scope. If null, no additional info is associated."}],"description":"Optional explanation of this category's purpose or scope. If null, no additional info is associated."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this category was created (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last modification to this category (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete indicator: null means active, set to timestamp if deleted."},{"type":"null","format":"date-time","description":"Soft delete indicator: null means active, set to timestamp if deleted."}],"description":"Soft delete indicator: null means active, set to timestamp if deleted."}},"required":["id","name","created_at","updated_at"],"description":"Discussion board category entity. Each record is a broad grouping for threads/posts, supporting navigation, organization, and discovery. Maps to discussion_board_categories in DB, supporting soft delete with deleted_at field."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number, starting from 1."},"limit":{"type":"integer","format":"uint32","description":"Number of records per page (default 100)."},"records":{"type":"integer","format":"uint32","description":"Total number of records in the dataset."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages (records / limit, rounded up)."}},"required":["current","limit","records","pages"],"description":"Page information: describes the structure of a paginated results set, with page number, size, total, and overall page count. Used throughout all IPage containers."}}},"completed":32,"total":116,"step":0,"created_at":"2025-07-23T06:54:54.600Z"},"tokenUsage":{"facade":{"aggregate":{"total":607237,"input":{"total":561396,"cached":3840},"output":{"total":45841,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":607237,"input":{"total":561396,"cached":3840},"output":{"total":45841,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":607237,"input":{"total":561396,"cached":3840},"output":{"total":45841,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":607237,"input":{"total":561396,"cached":3840},"output":{"total":45841,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"ISubscription.IUpdate":{"type":"object","properties":{"target_type":{"type":"string","description":"The type of resource this subscription references (e.g., 'thread', 'section', 'tag').\n\nThis string must match exactly a known value as used in discussion_board_subscriptions.target_type. Used to identify the type of content the member is subscribing to.\n\nCorresponds to the 'target_type' column in the Prisma schema."},"target_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the target resource being followed (thread, section, tag, etc.).\n\nReferences the 'target_id' field in discussion_board_subscriptions. Must correspond to a valid UUID for a followable resource."}},"required":["target_type","target_id"],"description":"Update object for a board subscription.\n\nThis type allows for updating the type and resource target of a subscription, as defined in discussion_board_subscriptions. All properties must directly correspond to schema columns."},"IDiscussionBoardMention.IRequest":{"type":"object","properties":{"mentioned_member_id":{"type":"string","format":"uuid","description":"UUID of the member being mentioned. Optional: filter search for only mentions of this user.\n\nReferences the schema's 'mentioned_member_id' column."},"actor_member_id":{"type":"string","format":"uuid","description":"UUID of the member who created the mention. Optional: used to filter mentions authored by a user.\n\nReferences 'actor_member_id' in the schema."},"content_type":{"type":"string","description":"Type of content where the mention occurred (e.g., 'post','comment','thread'). Optional: restrict query to certain mention types.\n\nReferences the content_type column."},"content_id":{"type":"string","format":"uuid","description":"UUID of the resource where mention occurred. Optional: restricts search to a specific content target.\n\nMaps to content_id."},"created_at":{"type":"string","format":"date-time","description":"Search or filter by creation timestamp. Optional."},"page":{"type":"integer","format":"int32","description":"Page number (optional, for pagination)."},"limit":{"type":"integer","format":"int32","description":"Maximum records per page (optional, for pagination)."}},"required":[],"description":"Request object for searching/listing mentions.\n\nAll fields filter query according to schema columns in discussion_board_mentions. No field is required; supplying none returns unfiltered list."},"IPageIDiscussionBoardMention":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for results (current page, total, etc.)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMention"},"description":"Array of mention objects returned in the query."}},"required":["pagination","data"],"description":"A paginated result set of IDiscussionBoardMention entities.\n\nThis standard type is used for any search/list patch returning mention objects, in line with IPage<T> conventions."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"int32","description":"Current page number, 1-based."},"limit":{"type":"integer","format":"int32","description":"Number of records per page."},"records":{"type":"integer","format":"int32","description":"Total number of records available."},"pages":{"type":"integer","format":"int32","description":"Total number of pages available, using ceil(records/limit)."}},"required":["current","limit","records","pages"],"description":"Page information for paginated return sets. See IPage<T> docs for role in result pagination."},"IDiscussionBoardMention":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the mention event (UUID).\n\nEquals 'id' column in discussion_board_mentions."},"mentioned_member_id":{"type":"string","format":"uuid","description":"UUID of the member who was mentioned. Required.\n\nReferences 'mentioned_member_id' in schema."},"actor_member_id":{"type":"string","format":"uuid","description":"UUID of the member who created the mention event. Required.\n\nReferences 'actor_member_id' in schema."},"content_type":{"type":"string","description":"Type of content where the mention happened (e.g., 'thread', 'post', 'comment'). Required.\n\nMaps directly to 'content_type' in Prisma schema."},"content_id":{"type":"string","format":"uuid","description":"UUID of the resource where mention was made. Required.\n\nReferences 'content_id' schema column."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this mention event was recorded (ISO 8601 UTC).\n\nEquals 'created_at' in schema."}},"required":["id","mentioned_member_id","actor_member_id","content_type","content_id","created_at"],"description":"A mention entity as stored in discussion_board_mentions.\n\nRepresents the event of a member being mentioned in a piece of content (thread, post, or comment). All fields correspond exactly to schema columns, supporting notification and audit requirements."},"IDiscussionBoardMention.ICreate":{"type":"object","properties":{"mentioned_member_id":{"type":"string","format":"uuid","description":"UUID of the member to be mentioned. Required.\n\nEquals 'mentioned_member_id' column."},"actor_member_id":{"type":"string","format":"uuid","description":"UUID of the member authoring the mention (the one who creates this reference event). Required.\n\nEquals 'actor_member_id' column."},"content_type":{"type":"string","description":"Type of content where the mention occurs, such as 'thread', 'post', or 'comment'. Required.\n\nEquals 'content_type' column."},"content_id":{"type":"string","format":"uuid","description":"UUID of the resource where the mention is being made. Required.\n\nEquals 'content_id' column."}},"required":["mentioned_member_id","actor_member_id","content_type","content_id"],"description":"Input object for creating a mention.\n\nEvery property matches a column in the discussion_board_mentions schema. Used when inserting new mention events (e.g., on content creation or edit that includes an @-mention in text)."},"IDiscussionBoardMention.IUpdate":{"type":"object","properties":{"mentioned_member_id":{"type":"string","format":"uuid","description":"(Required) The UUID of the member mentioned. Must correspond to a valid member.\n\nReferences the schema column."},"actor_member_id":{"type":"string","format":"uuid","description":"(Required) The UUID of the member performing/creating the mention event.\n\nReferences the schema column."},"content_type":{"type":"string","description":"(Required) The type of content where the mention occurred (e.g., 'thread', 'post', 'comment').\n\nReferences discussion_board_mentions.content_type."},"content_id":{"type":"string","format":"uuid","description":"(Required) UUID of the referenced content (thread, post, or comment).\n\nReferences the schema column."}},"required":["mentioned_member_id","actor_member_id","content_type","content_id"],"description":"Update object for replacing a mention. All fields must be provided (full replacement via PUT). Every property must match the schema exactly."},"IDiscussionBoardVoteType.IRequest":{"type":"object","properties":{"name":{"type":"string","description":"Text filter or exact search for vote type display name.\n\nMaps to discussion_board_vote_types.name column."},"code":{"type":"string","description":"Filter for the unique code of the vote type (e.g., 'upvote', 'downvote').\n\nMaps to vote_types.code; must match for search."},"description":{"type":"string","description":"Optional: filter vote type list by substring or presence in the description field.\n\nMaps to vote_types.description."},"page":{"type":"integer","format":"int32","description":"Pagination: which page of results (1-based, optional)."},"limit":{"type":"integer","format":"int32","description":"Number of results to return per page (optional)."}},"required":[],"description":"Search, filter, or paginate request for discussion_board_vote_types. No required field; supply any combination for advanced query."},"IPageIDiscussionBoardVoteType":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVoteType"}}},"required":["pagination","data"],"description":"Paginated result set for vote types. Used for advanced PATCH-based search and listing workflows."},"IDiscussionBoardVoteType":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for the vote type. Required.\n\nCorresponds to discussion_board_vote_types.id."},"code":{"type":"string","description":"Programmatic code for the vote type (e.g., 'upvote', 'downvote'). Unique per type.\n\nFrom vote_types.code column."},"name":{"type":"string","description":"Human-friendly display name for vote type (e.g., 'Upvote').\n\nFrom vote_types.name column."},"description":{"oneOf":[{"type":"string","description":"Nullable descriptive string explaining the vote type purpose.\n\nFrom vote_types.description column."},{"type":"null"}],"description":"Nullable descriptive string explaining the vote type purpose.\n\nFrom vote_types.description column."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of creation (ISO 8601 UTC, corresponds to created_at schema column)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (ISO 8601 UTC, corresponds to updated_at schema column)."}},"required":["id","code","name","created_at","updated_at"],"description":"A board voting type entity (e.g., 'upvote', 'downvote').\n\nAll properties must map directly to columns in discussion_board_vote_types. Used for extensible voting mechanisms."},"IDiscussionBoardVoteType.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique programmatic code for the vote type (required).\n\nFrom vote_types.code. Must not duplicate an existing type."},"name":{"type":"string","description":"Display name for the vote type (required).\n\nFrom vote_types.name."},"description":{"oneOf":[{"type":"string","description":"Optional explanation of what the vote type means or when it is used.\n\nFrom vote_types.description."},{"type":"null"}],"description":"Optional explanation of what the vote type means or when it is used.\n\nFrom vote_types.description."}},"required":["code","name"],"description":"Input payload for creating a new vote type. Only fields present in the schema are supported."},"IDiscussionBoardVoteType.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"(Required) The unique code for this vote type.\n\nFrom vote_types.code (must remain unique)."},"name":{"type":"string","description":"(Required) The human-readable display name for this vote type.\n\nFrom vote_types.name."},"description":{"oneOf":[{"type":"string","description":"(Optional) Human-readable explanation for the vote type purpose.\n\nFrom vote_types.description."},{"type":"null"}],"description":"(Optional) Human-readable explanation for the vote type purpose.\n\nFrom vote_types.description."}},"required":["code","name"],"description":"Object for full update (PUT) of vote type. All properties required except optional description. Mirrors schema, updating only actual columns defined."},"IDiscussionBoardVote.IRequest":{"type":"object","properties":{"voter_id":{"type":"string","format":"uuid","description":"UUID of the member who cast the vote (optional filter).\n\nCorresponds to discussion_board_votes.voter_id."},"vote_type_id":{"type":"string","format":"uuid","description":"UUID reference to the type of the vote (e.g., upvote, downvote). Optional filter.\n\nCorresponds to discussion_board_votes.vote_type_id."},"thread_id":{"type":"string","format":"uuid","description":"Return votes for a specific thread (optional). UUID.\n\nFrom vote's thread_id schema column."},"post_id":{"type":"string","format":"uuid","description":"Return votes for a specific post (optional). UUID.\n\nFrom vote's post_id schema column."},"comment_id":{"type":"string","format":"uuid","description":"Return votes for a specific comment (optional). UUID.\n\nFrom vote's comment_id schema column."},"created_at":{"type":"string","format":"date-time","description":"Optional filter: timestamp when vote was cast. ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Optional filter: timestamp of last vote update. ISO 8601."},"page":{"type":"integer","format":"int32","description":"Pagination: result page number (optional)."},"limit":{"type":"integer","format":"int32","description":"Maximum results per page (optional)."}},"required":[],"description":"Filter/search parameter object for board vote search. All fields map to discussion_board_votes schema columns. No required field; supply any combination for advanced queries."}}},"completed":44,"total":116,"step":0,"created_at":"2025-07-23T06:54:54.939Z"},"tokenUsage":{"facade":{"aggregate":{"total":674020,"input":{"total":625431,"cached":3840},"output":{"total":48589,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":674020,"input":{"total":625431,"cached":3840},"output":{"total":48589,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":674020,"input":{"total":625431,"cached":3840},"output":{"total":48589,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":674020,"input":{"total":625431,"cached":3840},"output":{"total":48589,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardComment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"The UUID of the post to which this comment will be attached. This property references {@link discussion_board_posts.id} and is required. This matches the requirement for nested commentary and threaded discussions, enabling users to respond directly to particular posts. See the Prisma schema for details of foreign key enforcement and nullability."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the parent comment if this is a nested (threaded) comment, or null if this is a top-level comment on the post. This enables deep discussion threads as required by the platform's model. If supplied, must reference an existing discussion_board_comments.id, otherwise null. See the Prisma schema for details of recursive/nested design."},{"type":"null","format":"uuid","description":"The UUID of the parent comment if this is a nested (threaded) comment, or null if this is a top-level comment on the post. This enables deep discussion threads as required by the platform's model. If supplied, must reference an existing discussion_board_comments.id, otherwise null. See the Prisma schema for details of recursive/nested design."}],"description":"The UUID of the parent comment if this is a nested (threaded) comment, or null if this is a top-level comment on the post. This enables deep discussion threads as required by the platform's model. If supplied, must reference an existing discussion_board_comments.id, otherwise null. See the Prisma schema for details of recursive/nested design."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"The UUID of the member authoring the comment, referencing {@link discussion_board_members.id}. This satisfies the need for traceability, authorship, and subsequent notifications and moderation. Required for all comments."},"body":{"type":"string","description":"The text of the comment, as stored in the 'body' field of the Prisma schema. Implements F03, F08 (commenting and moderation requirement) and supports thread discussions. Cannot be null; must be a string with user-generated content."},"is_edited":{"type":"boolean","description":"Flag indicating whether the comment content has ever been edited after its creation. Implements auditing and user transparency in comment revision workflows. On creation, this field should be set to false."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) of when the comment is created. Used for audit, sorting, and history tracking as per requirements. Set automatically on creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to this comment, required for moderation auditing and sort ordering. Should be set to created_at upon creation."}},"required":["discussion_board_post_id","discussion_board_member_id","body","is_edited","created_at","updated_at"],"description":"Request body for creating a new comment on a discussion board post. Aligns with comment creation requirements in the documentation and matches the Prisma schema. Enables both root-level and nested comment creation, includes author/member tracking, timestamps, and edit state. All properties strictly correspond to actual columns in the 'discussion_board_comments' table."},"IDiscussionBoardComment.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"The updated text of the comment. As defined in the 'body' field of the Prisma schema, this property supports editing workflows and moderation-driven rewrites. (Requirement F03, F08)."},"is_edited":{"type":"boolean","description":"Flag indicating whether this comment has been edited. If true, the comment will be marked as modified, used for audit trails and client transparency."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) If moving this comment to become a reply under a different parent comment node, supply the new parent_id (UUID). If left null, the comment is a top-level reply. Enables threaded/nested replies per schema design."},{"type":"null","format":"uuid","description":"(Optional) If moving this comment to become a reply under a different parent comment node, supply the new parent_id (UUID). If left null, the comment is a top-level reply. Enables threaded/nested replies per schema design."}],"description":"(Optional) If moving this comment to become a reply under a different parent comment node, supply the new parent_id (UUID). If left null, the comment is a top-level reply. Enables threaded/nested replies per schema design."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) of this last update. Must always be provided to support audit and moderation traceability as described in system requirements."}},"required":["updated_at"],"description":"Update payload for an existing discussion board comment. Enables editing comment text, changing the parent for nesting, or flagging as edited. All properties map directly to fields in the Prisma schema for comments. Does not permit author/member change. All fields are optional except updated_at, which is required for audit and moderation workflow compliance."},"IDiscussionBoardAttachment.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for attachments associated with a specific post. References {@link discussion_board_posts.id}. If null, this filter is ignored."},{"type":"null","format":"uuid","description":"Filter for attachments associated with a specific post. References {@link discussion_board_posts.id}. If null, this filter is ignored."}],"description":"Filter for attachments associated with a specific post. References {@link discussion_board_posts.id}. If null, this filter is ignored."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for attachments linked to a specific comment. References {@link discussion_board_comments.id}. Nullable; ignored if null."},{"type":"null","format":"uuid","description":"Filter for attachments linked to a specific comment. References {@link discussion_board_comments.id}. Nullable; ignored if null."}],"description":"Filter for attachments linked to a specific comment. References {@link discussion_board_comments.id}. Nullable; ignored if null."},"discussion_board_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for attachments uploaded by a particular member. References {@link discussion_board_members.id}. Can be null to ignore filter."},{"type":"null","format":"uuid","description":"Filter for attachments uploaded by a particular member. References {@link discussion_board_members.id}. Can be null to ignore filter."}],"description":"Filter for attachments uploaded by a particular member. References {@link discussion_board_members.id}. Can be null to ignore filter."},"file_name":{"oneOf":[{"type":"string","description":"Attachment file name to filter by. Supports exact or partial (case-insensitive) match for improved search UX. Null disables this filter."},{"type":"null","description":"Attachment file name to filter by. Supports exact or partial (case-insensitive) match for improved search UX. Null disables this filter."}],"description":"Attachment file name to filter by. Supports exact or partial (case-insensitive) match for improved search UX. Null disables this filter."},"content_type":{"oneOf":[{"type":"string","description":"Attachment MIME type to filter (e.g., 'application/pdf', 'image/png'). Null disables filter."},{"type":"null","description":"Attachment MIME type to filter (e.g., 'application/pdf', 'image/png'). Null disables filter."}],"description":"Attachment MIME type to filter (e.g., 'application/pdf', 'image/png'). Null disables filter."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Begin range for created_at timestamp search (inclusive). Enables filtering for files uploaded after this timestamp. Null disables this bound."},{"type":"null","format":"date-time","description":"Begin range for created_at timestamp search (inclusive). Enables filtering for files uploaded after this timestamp. Null disables this bound."}],"description":"Begin range for created_at timestamp search (inclusive). Enables filtering for files uploaded after this timestamp. Null disables this bound."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End range for created_at timestamp search (inclusive). Enables searching for attachments uploaded on or before this time. Null disables."},{"type":"null","format":"date-time","description":"End range for created_at timestamp search (inclusive). Enables searching for attachments uploaded on or before this time. Null disables."}],"description":"End range for created_at timestamp search (inclusive). Enables searching for attachments uploaded on or before this time. Null disables."},"page":{"oneOf":[{"type":"integer","format":"int32","description":"Page number for pagination purposes (>=1), per standard IPage.IRequest. Null means first page/default."},{"type":"null","format":"int32","description":"Page number for pagination purposes (>=1), per standard IPage.IRequest. Null means first page/default."}],"description":"Page number for pagination purposes (>=1), per standard IPage.IRequest. Null means first page/default."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Records per page (pagination). See IPage.IRequest documentation for default/max/min."},{"type":"null","format":"int32","description":"Records per page (pagination). See IPage.IRequest documentation for default/max/min."}],"description":"Records per page (pagination). See IPage.IRequest documentation for default/max/min."},"sort_by":{"oneOf":[{"type":"string","description":"Field to sort results by (e.g., 'created_at', 'file_name', per schema). Null disables custom sort."},{"type":"null","description":"Field to sort results by (e.g., 'created_at', 'file_name', per schema). Null disables custom sort."}],"description":"Field to sort results by (e.g., 'created_at', 'file_name', per schema). Null disables custom sort."},"sort_dir":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc' for sorting order, null for default direction."},{"const":"desc","description":"Sort direction: 'asc' or 'desc' for sorting order, null for default direction."},{"type":"null","enum":["asc","desc",null],"description":"Sort direction: 'asc' or 'desc' for sorting order, null for default direction."}],"description":"Sort direction: 'asc' or 'desc' for sorting order, null for default direction."}},"description":"Request type for listing/searching attachments on the board. Supports extensive filtering by file/post/comment/uploader, plus pagination/sorting controls. Aligns with standard 'IPage.IRequest' variant plus attachment-specific filters. All properties must strictly map to columns in the 'discussion_board_attachments' schema or paging interface.","required":[]},"IPageIDiscussionBoardAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAttachment"},"description":"Array of attachment objects returned in this result page. Each conforms to the 'IDiscussionBoardAttachment' schema with full detail, as required by audit, moderation, and client display."}},"required":["pagination","data"],"description":"Paginated results for listings/searches of discussion board attachments. Includes pagination information and an array of schema-conforming attachment objects. Used throughout file/attachment browsing and administration workflow interfaces."},"IDiscussionBoardAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the attachment, uniquely identifying it in the system. As defined in 'discussion_board_attachments.id'. Required for all updates, lookups, or deletes."},"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing the post that owns this attachment—may be null if belonging instead to a comment. As per 'discussion_board_attachments.discussion_board_post_id'. Enforces business rules for one-parent-only attachments."},{"type":"null","format":"uuid","description":"UUID referencing the post that owns this attachment—may be null if belonging instead to a comment. As per 'discussion_board_attachments.discussion_board_post_id'. Enforces business rules for one-parent-only attachments."}],"description":"UUID referencing the post that owns this attachment—may be null if belonging instead to a comment. As per 'discussion_board_attachments.discussion_board_post_id'. Enforces business rules for one-parent-only attachments."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing the comment that owns this attachment—may be null if belonging to a post. Pattern and business rules identical to 'discussion_board_post_id'."},{"type":"null","format":"uuid","description":"UUID referencing the comment that owns this attachment—may be null if belonging to a post. Pattern and business rules identical to 'discussion_board_post_id'."}],"description":"UUID referencing the comment that owns this attachment—may be null if belonging to a post. Pattern and business rules identical to 'discussion_board_post_id'."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"UUID of the member who uploaded the attachment, matching 'discussion_board_members.id'. Required for traceability and audit."},"file_name":{"type":"string","description":"Original file name supplied by user on upload. Schema: 'file_name' column in 'discussion_board_attachments'. String only; max length per underlying schema."},"file_uri":{"type":"string","description":"URI/URL of actual file storage location (e.g., S3, CDN). Schema field: 'file_uri'. Used for download/preview by clients. Length constrained in DB (max 80000 chars)."},"content_type":{"type":"string","description":"MIME type/format of the file (e.g., 'application/pdf', 'image/png'). Column: 'content_type'. Used for content type negotiation and client preview."},"content_hash":{"type":"string","description":"Unique file checksum (SHA-256 or equivalent) for deduplication and integrity. Enforced as unique in Prisma schema: 'content_hash'. All uploads must provide a calculated digest."},"created_at":{"type":"string","format":"date-time","description":"Timestamp recording when this attachment was uploaded. Maps to 'created_at' in schema. Used for audit and file management."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of soft deletion, or null if active. Present as 'deleted_at' column in schema. Set if file is hidden from user listings or under appeal; null if not deleted. Enforces reversibility and audit per requirements."},{"type":"null","format":"date-time","description":"Timestamp of soft deletion, or null if active. Present as 'deleted_at' column in schema. Set if file is hidden from user listings or under appeal; null if not deleted. Enforces reversibility and audit per requirements."}],"description":"Timestamp of soft deletion, or null if active. Present as 'deleted_at' column in schema. Set if file is hidden from user listings or under appeal; null if not deleted. Enforces reversibility and audit per requirements."}},"required":["id","discussion_board_member_id","file_name","file_uri","content_type","content_hash","created_at"],"description":"Schema description for a discussion board attachment object, referencing fields exactly as defined in the 'discussion_board_attachments' table. Used throughout the API for upload, display, and file management features. The schema enforces uniqueness, traceability, and reversible (soft) deletion handling as described in the requirements. All usage and references must comply with file policy documentation."},"IDiscussionBoardAttachment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the post to attach this file to. Must be null if attached to a comment instead. Refer to attachment business rule: always linked to only one parent (post or comment, never both)."},{"type":"null","format":"uuid","description":"UUID of the post to attach this file to. Must be null if attached to a comment instead. Refer to attachment business rule: always linked to only one parent (post or comment, never both)."}],"description":"UUID of the post to attach this file to. Must be null if attached to a comment instead. Refer to attachment business rule: always linked to only one parent (post or comment, never both)."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment to attach this file to. Must be null if attached to a post instead."},{"type":"null","format":"uuid","description":"UUID of the comment to attach this file to. Must be null if attached to a post instead."}],"description":"UUID of the comment to attach this file to. Must be null if attached to a post instead."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"UUID of the user uploading this attachment, required for attribution, moderation, and policy enforcement."},"file_name":{"type":"string","description":"Original user-supplied file name, used for display and download. String, required."},"file_uri":{"type":"string","description":"Permanent URI or URL for the stored file (S3, CDN, etc). Required for download and preview."},"content_type":{"type":"string","description":"MIME type of the file. Must be provided to ensure compliance and client usage. (E.g., 'application/pdf')."},"content_hash":{"type":"string","description":"Calculated SHA-256 (or similar) hash of the file contents, used for deduplication and integrity."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when file was uploaded (UTC, ISO 8601). Set on registration."}},"required":["discussion_board_member_id","file_name","file_uri","content_type","content_hash","created_at"],"description":"Request body schema for creating an attachment in the discussion board. New attachments must always be associated with exactly one parent (either post or comment, not both or neither). Includes all metadata to enable secure, auditable, and recoverable file management as per requirements and schema. No additional business logic enforced at the schema layer; refer to application for enforcement details."},"IDiscussionBoardAttachment.IUpdate":{"type":"object","properties":{"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the file is being moved to a different post, provide the new post UUID (or null if moving to a comment). See business rules about parent object consistency."},{"type":"null","format":"uuid","description":"If the file is being moved to a different post, provide the new post UUID (or null if moving to a comment). See business rules about parent object consistency."}],"description":"If the file is being moved to a different post, provide the new post UUID (or null if moving to a comment). See business rules about parent object consistency."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the file is being associated with a comment (or changing parent from post to comment), supply the comment UUID (or null if detaching from comment)."},{"type":"null","format":"uuid","description":"If the file is being associated with a comment (or changing parent from post to comment), supply the comment UUID (or null if detaching from comment)."}],"description":"If the file is being associated with a comment (or changing parent from post to comment), supply the comment UUID (or null if detaching from comment)."},"file_name":{"type":"string","description":"Update the attachment's file name (original file name as displayed to users)."},"file_uri":{"type":"string","description":"Update the file's permanent URI if migrated or replaced."},"content_type":{"type":"string","description":"Update the MIME type (e.g., upon file conversion by user or moderation process)."},"content_hash":{"type":"string","description":"Replace the file hash if the actual content of the file changes (rare, and only in moderation workflows)."}},"description":"Update payload for an attachment record. Supports changes to file name/parent/content/meta. Actual permission checks, deduplication, and integrity rules enforced at the application layer. The update can only affect schema-defined fields: discussion_board_post_id, discussion_board_comment_id, file_name, file_uri, content_type, content_hash.","required":[]},"IDiscussionBoardReport.IRequest":{"type":"object","properties":{"reporter_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for reports submitted by a specific member. UUID of the reporter. Set null to disable this filter."},{"type":"null","format":"uuid","description":"Filter for reports submitted by a specific member. UUID of the reporter. Set null to disable this filter."}],"description":"Filter for reports submitted by a specific member. UUID of the reporter. Set null to disable this filter."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for reports that have been or are being handled by a specific moderator. Match UUID for the reviewing moderator or set null to ignore."},{"type":"null","format":"uuid","description":"Filter for reports that have been or are being handled by a specific moderator. Match UUID for the reviewing moderator or set null to ignore."}],"description":"Filter for reports that have been or are being handled by a specific moderator. Match UUID for the reviewing moderator or set null to ignore."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Limit to reports targeting a particular thread. Filter by thread UUID or null to ignore."},{"type":"null","format":"uuid","description":"Limit to reports targeting a particular thread. Filter by thread UUID or null to ignore."}],"description":"Limit to reports targeting a particular thread. Filter by thread UUID or null to ignore."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Show only reports about a specific post by UUID (nullable for no filter)."},{"type":"null","format":"uuid","description":"Show only reports about a specific post by UUID (nullable for no filter)."}],"description":"Show only reports about a specific post by UUID (nullable for no filter)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Show only reports about a specific comment by UUID (nullable for no filter)."},{"type":"null","format":"uuid","description":"Show only reports about a specific comment by UUID (nullable for no filter)."}],"description":"Show only reports about a specific comment by UUID (nullable for no filter)."},"status":{"oneOf":[{"type":"string","description":"Restrict to reports by workflow status. Status values must match moderation workflow/canonical enum; examples: 'pending','under_review','resolved','dismissed'. Null disables filter."},{"type":"null","description":"Restrict to reports by workflow status. Status values must match moderation workflow/canonical enum; examples: 'pending','under_review','resolved','dismissed'. Null disables filter."}],"description":"Restrict to reports by workflow status. Status values must match moderation workflow/canonical enum; examples: 'pending','under_review','resolved','dismissed'. Null disables filter."},"reason":{"oneOf":[{"type":"string","description":"Match only reports with a given textual reason for reporting (freeform, case-insensitive, partial allowed)."},{"type":"null","description":"Match only reports with a given textual reason for reporting (freeform, case-insensitive, partial allowed)."}],"description":"Match only reports with a given textual reason for reporting (freeform, case-insensitive, partial allowed)."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Begin range for created_at timestamp search (inclusive). Enables filtering for reports filed after this time. Null disables bound."},{"type":"null","format":"date-time","description":"Begin range for created_at timestamp search (inclusive). Enables filtering for reports filed after this time. Null disables bound."}],"description":"Begin range for created_at timestamp search (inclusive). Enables filtering for reports filed after this time. Null disables bound."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End range for created_at timestamp search (inclusive). Enables searching for reports filed on or before this time. Null disables."},{"type":"null","format":"date-time","description":"End range for created_at timestamp search (inclusive). Enables searching for reports filed on or before this time. Null disables."}],"description":"End range for created_at timestamp search (inclusive). Enables searching for reports filed on or before this time. Null disables."},"page":{"oneOf":[{"type":"integer","format":"int32","description":"Request page number (pagination)."},{"type":"null","format":"int32","description":"Request page number (pagination)."}],"description":"Request page number (pagination)."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Request page size/limit for pagination."},{"type":"null","format":"int32","description":"Request page size/limit for pagination."}],"description":"Request page size/limit for pagination."}},"description":"Request schema for listing/searching moderation reports. Permits filtering by all core fields for effective audit, triage, and operational dashboards. Ensures only actual Prisma schema columns are referenced.","required":[]},"IPageIDiscussionBoardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReport"},"description":"Paginated array of report objects as per moderation workflows. Schema-conforming to support compliance, triage, and analytics."}},"required":["pagination","data"],"description":"Paginated moderation report list. Used in compliance, triage views, and for audit/analytics purposes. Integrates pagination information and an array of schema-conforming moderation reports."},"IDiscussionBoardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key ID for the report record. Required in all output and update operations."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member UUID who filed the report, per 'reporter_member_id' field in Prisms schema. Used for tracing accountability."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Nullable moderator assignment for the report. Set to UUID if assigned, else null. Links to moderation workflows and audit trail."},{"type":"null","format":"uuid","description":"Nullable moderator assignment for the report. Set to UUID if assigned, else null. Links to moderation workflows and audit trail."}],"description":"Nullable moderator assignment for the report. Set to UUID if assigned, else null. Links to moderation workflows and audit trail."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of thread being reported, if applicable (else null). Used for context/audit."},{"type":"null","format":"uuid","description":"UUID of thread being reported, if applicable (else null). Used for context/audit."}],"description":"UUID of thread being reported, if applicable (else null). Used for context/audit."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of post being reported, if applicable (else null)."},{"type":"null","format":"uuid","description":"UUID of post being reported, if applicable (else null)."}],"description":"UUID of post being reported, if applicable (else null)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of comment being reported, if applicable (else null)."},{"type":"null","format":"uuid","description":"UUID of comment being reported, if applicable (else null)."}],"description":"UUID of comment being reported, if applicable (else null)."},"reason":{"type":"string","description":"Textual reason for reporting. Required in all report records. Sourced from 'reason' field in schema."},"status":{"type":"string","description":"Status of the report workflow. Examples: 'pending','under_review','resolved','dismissed'. See moderation state machine."},"created_at":{"type":"string","format":"date-time","description":"Report creation timestamp. Audit and triage use, ISO 8601."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of resolution/closure (if applicable), null if not resolved."},{"type":"null","format":"date-time","description":"Timestamp of resolution/closure (if applicable), null if not resolved."}],"description":"Timestamp of resolution/closure (if applicable), null if not resolved."},"resolution_notes":{"oneOf":[{"type":"string","description":"Free-form moderator notes upon resolving the report. Null if not set."},{"type":"null","description":"Free-form moderator notes upon resolving the report. Null if not set."}],"description":"Free-form moderator notes upon resolving the report. Null if not set."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp if report is soft-deleted, null if active. Enforces reversibility and data retention compliance."},{"type":"null","format":"date-time","description":"Timestamp if report is soft-deleted, null if active. Enforces reversibility and data retention compliance."}],"description":"Timestamp if report is soft-deleted, null if active. Enforces reversibility and data retention compliance."}},"required":["id","reporter_member_id","reason","status","created_at"],"description":"Moderation report object as stored in 'discussion_board_reports', matching exactly to schema. Includes full audit, moderation linkage, and soft/hard delete compliance. Does not invent non-schema columns; used in moderation, compliance, and content workflow."},"IDiscussionBoardReport.ICreate":{"type":"object","properties":{"reporter_member_id":{"type":"string","format":"uuid","description":"UUID of the member submitting the report. Required for traceability, compliance, and subsequent moderation."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Assigned moderator for the report, null for unassigned."},{"type":"null","format":"uuid","description":"(Optional) Assigned moderator for the report, null for unassigned."}],"description":"(Optional) Assigned moderator for the report, null for unassigned."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the reported thread (set if reporting a thread, else null as only one non-null content PK is allowed)."},{"type":"null","format":"uuid","description":"UUID of the reported thread (set if reporting a thread, else null as only one non-null content PK is allowed)."}],"description":"UUID of the reported thread (set if reporting a thread, else null as only one non-null content PK is allowed)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the reported post (set if reporting a post, else null)."},{"type":"null","format":"uuid","description":"UUID of the reported post (set if reporting a post, else null)."}],"description":"UUID of the reported post (set if reporting a post, else null)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the reported comment (set if reporting a comment, else null)."},{"type":"null","format":"uuid","description":"UUID of the reported comment (set if reporting a comment, else null)."}],"description":"UUID of the reported comment (set if reporting a comment, else null)."},"reason":{"type":"string","description":"Reason the content is being reported. String, required, for audit, compliance, and triage."},"status":{"type":"string","description":"Initial status, must be a valid workflow state. Examples: 'pending', 'under_review', 'resolved', 'dismissed'. Must match agreed values for the moderation state machine."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when report was created, for audit and analytics."}},"required":["reporter_member_id","reason","status","created_at"],"description":"Schema for creating a moderation report entry, matching the Prisma schema. Requires reporter, reason, status, timestamp; content reference (thread/post/comment) must have at least one set. Actual workflow validation/enforcement done at application level."},"IDiscussionBoardReport.IUpdate":{"type":"object","properties":{"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update assigned moderator for workflow triage. Null to unassign or leave unchanged."},{"type":"null","format":"uuid","description":"Update assigned moderator for workflow triage. Null to unassign or leave unchanged."}],"description":"Update assigned moderator for workflow triage. Null to unassign or leave unchanged."},"status":{"type":"string","description":"Update report workflow status (e.g., 'pending', 'resolved'). Must match application state rules."},"resolution_notes":{"oneOf":[{"type":"string","description":"Optional: Add or revise moderator notes visible for audit/compliance."},{"type":"null","description":"Optional: Add or revise moderator notes visible for audit/compliance."}],"description":"Optional: Add or revise moderator notes visible for audit/compliance."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set resolution timestamp (if closing or resolving the report). Null if still open or pending."},{"type":"null","format":"date-time","description":"Set resolution timestamp (if closing or resolving the report). Null if still open or pending."}],"description":"Set resolution timestamp (if closing or resolving the report). Null if still open or pending."}},"description":"Permits updating core workflow fields of an existing moderation report. Does not allow changing reporter/content relationships or scheduling deletion; only modifies fields allowed in the schema and business rules for moderation triage/completion.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number, 1-based index."},"limit":{"type":"integer","format":"uint32","description":"Number of items per page (default 100)."},"records":{"type":"integer","format":"uint32","description":"Total number of records in the database for this query/context."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages (computed as records/limit, rounded up)."}},"required":["current","limit","records","pages"],"description":"Page information supporting pagination for queries and result listings. Used by all list-type container responses. Standard schema across the platform."}}},"completed":56,"total":116,"step":0,"created_at":"2025-07-23T06:55:04.613Z"},"tokenUsage":{"facade":{"aggregate":{"total":742586,"input":{"total":689463,"cached":3840},"output":{"total":53123,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":742586,"input":{"total":689463,"cached":3840},"output":{"total":53123,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":742586,"input":{"total":689463,"cached":3840},"output":{"total":53123,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":742586,"input":{"total":689463,"cached":3840},"output":{"total":53123,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for a ban record in the discussion board system. References the primary key from the discussion_board_bans table in the database.\n\nA UUID string, this value is immutable and serves as the central reference for ban modification, audit, or removal workflows throughout the moderation lifecycle."},"member_id":{"type":"string","format":"uuid","description":"The unique identifier of the member who has been banned. Foreign key to the discussion_board_members.id column. Atomic and required per row, enables tracing of bans to member accounts directly.\n\nThis value is critical for enforcing restrictions on the targeted user and supports business logic for participation controls, escalation, and unbanning workflows."},"moderator_id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator who enacted the ban. Foreign key to discussion_board_moderators.id. Required for administrative audit and accountability purposes.\n\nLinks ban records with responsible moderators according to compliance and audit trail requirements, ensuring full traceability of disciplinary actions."},"ban_reason":{"type":"string","description":"Textual explanation for the ban. Stored as a single, non-null string, this represents the rationale for the ban and is surfaced in moderation/audit UIs.\n\nFulfills business requirements for documenting infraction category or context (e.g., spam, harassment, repeated ToS violations)."},"permanent":{"type":"boolean","description":"Indicates whether the ban is permanent. True when the ban has no expiration and is designed to restrict the user indefinitely, false if there is an expiration defined."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601 format) when the ban was created. Set at creation, immutable for audit and compliance purposes."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp indicating when a temporary ban will be lifted. Null for permanent bans, otherwise stores an ISO date/time. Used for both enforcement automation and audit workflows."},{"type":"null","format":"date-time","description":"Nullable timestamp indicating when a temporary ban will be lifted. Null for permanent bans, otherwise stores an ISO date/time. Used for both enforcement automation and audit workflows."}],"description":"Nullable timestamp indicating when a temporary ban will be lifted. Null for permanent bans, otherwise stores an ISO date/time. Used for both enforcement automation and audit workflows."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for soft deletion (lifting the ban or removing from active records). Set to null if record is active, otherwise populated during ban reversal. Required for audit and undo workflows."},{"type":"null","format":"date-time","description":"Nullable timestamp for soft deletion (lifting the ban or removing from active records). Set to null if record is active, otherwise populated during ban reversal. Required for audit and undo workflows."}],"description":"Nullable timestamp for soft deletion (lifting the ban or removing from active records). Set to null if record is active, otherwise populated during ban reversal. Required for audit and undo workflows."}},"required":["id","member_id","moderator_id","ban_reason","permanent","created_at"],"description":"A record representing a disciplinary ban placed on a member of the board. Each ban is atomic, fully auditable, and references responsible parties directly. Serves as the enforcement artifact for exclusion from board participation activities. See the discussion_board_bans table in the Prisma schema for complete definition. Supports soft deletion (reversibility and audit compliance) via deleted_at."},"IDiscussionBoardBan.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the member being banned. Must reference an active record in discussion_board_members."},"moderator_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the moderator imposing the ban. References a valid moderator."},"ban_reason":{"type":"string","description":"Reason for the ban (e.g., 'abuse', 'spam/advertising', 'policy violation'). Required for all new bans."},"permanent":{"type":"boolean","description":"Whether the ban is permanent (true) or will automatically expire (false)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiration timestamp for temporary ban (mandatory when permanent=false). May be null for permanent bans."},{"type":"null","format":"date-time","description":"Expiration timestamp for temporary ban (mandatory when permanent=false). May be null for permanent bans."}],"description":"Expiration timestamp for temporary ban (mandatory when permanent=false). May be null for permanent bans."}},"required":["member_id","moderator_id","ban_reason","permanent"],"description":"Object describing the request body for creating a ban in the board system (see discussion_board_bans Prisma schema). Completely aligns with business rules around audit, accountability, and reversibility. Supports both permanent and temporary bans."},"IDiscussionBoardBan.IUpdate":{"type":"object","properties":{"ban_reason":{"type":"string","description":"The updated rationale or description for the ban, if changed after creation. Aligned with compliance and infraction management."},"permanent":{"type":"boolean","description":"Flag indicating whether the ban is permanent. May be toggled to convert a temporary ban to indefinite, or vice versa."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Updated expiration date for temporary bans. Null if the updated ban is now permanent."},{"type":"null","format":"date-time","description":"Updated expiration date for temporary bans. Null if the updated ban is now permanent."}],"description":"Updated expiration date for temporary bans. Null if the updated ban is now permanent."}},"required":[],"description":"Object describing a partial or complete update to an existing ban (see discussion_board_bans Prisma schema). Only mutable fields—ban_reason, permanent, and expires_at—are represented. Enables moderation teams to adjust timing, infraction description, or permanent/temporary status. Mutability is strictly limited to business rules around ban reversal and escalation."},"INotification.IRequest":{"type":"object","properties":{"recipient_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filtering for notifications sent to this member (foreign key to members). Null means no filter or all."},{"type":"null","format":"uuid","description":"Optional filtering for notifications sent to this member (foreign key to members). Null means no filter or all."}],"description":"Optional filtering for notifications sent to this member (foreign key to members). Null means no filter or all."},"type":{"oneOf":[{"type":"string","description":"Notification type/category to filter (e.g., 'reply', 'mention', 'moderation', etc.). Null for all types."},{"type":"null","description":"Notification type/category to filter (e.g., 'reply', 'mention', 'moderation', etc.). Null for all types."}],"description":"Notification type/category to filter (e.g., 'reply', 'mention', 'moderation', etc.). Null for all types."},"read":{"oneOf":[{"type":"boolean","description":"Filter by read/unread notifications. Null for any read status."},{"type":"null","description":"Filter by read/unread notifications. Null for any read status."}],"description":"Filter by read/unread notifications. Null for any read status."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional delivery timestamp filter. Null for any delivery status."},{"type":"null","format":"date-time","description":"Optional delivery timestamp filter. Null for any delivery status."}],"description":"Optional delivery timestamp filter. Null for any delivery status."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional filter for notifications created at this time (or after/before, per API use). Null to ignore."},{"type":"null","format":"date-time","description":"Optional filter for notifications created at this time (or after/before, per API use). Null to ignore."}],"description":"Optional filter for notifications created at this time (or after/before, per API use). Null to ignore."},"page":{"oneOf":[{"type":"integer","description":"Optional pagination page number. Null for default."},{"type":"null","description":"Optional pagination page number. Null for default."}],"description":"Optional pagination page number. Null for default."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of results per page. Null to use default."},{"type":"null","description":"Maximum number of results per page. Null to use default."}],"description":"Maximum number of results per page. Null to use default."}},"required":[],"description":"Request body schema for listing, searching, or filtering notification records (see discussion_board_notifications Prisma schema). Supports flexible filter/sort/pagination for members/admins. All filter values are nullable to indicate 'no filter' when desired."},"IPageINotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotification"},"description":"Array of notification objects matching filters/pagination."}},"required":["pagination","data"],"description":"A container for paginated results of notifications, following the generalized IPage<T> interface semantics. Includes a pagination info object and a data array with notification objects."},"INotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the notification record (from discussion_board_notifications.id). Immutable."},"recipient_member_id":{"type":"string","format":"uuid","description":"The member targeted by the notification (recipient). Foreign key to discussion_board_members.id."},"trigger_actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Nullable foreign key to discussion_board_members.id representing the member who triggered the notification. Null for system events."},{"type":"null","format":"uuid","description":"Nullable foreign key to discussion_board_members.id representing the member who triggered the notification. Null for system events."}],"description":"Nullable foreign key to discussion_board_members.id representing the member who triggered the notification. Null for system events."},"type":{"type":"string","description":"The type/category of the notification (e.g., 'reply', 'mention', 'moderation', 'subscription'). Defines UX behavior and grouping."},"content_preview":{"oneOf":[{"type":"string","description":"Optional textual excerpt or short preview of the triggering event, such as post/comment snippet or action summary."},{"type":"null","description":"Optional textual excerpt or short preview of the triggering event, such as post/comment snippet or action summary."}],"description":"Optional textual excerpt or short preview of the triggering event, such as post/comment snippet or action summary."},"url":{"type":"string","description":"A URL for navigating to the content/resource associated with this notification (e.g., thread, post, moderation event). Used for in-app linking."},"read":{"type":"boolean","description":"Boolean indicating if the notification has been opened/read by the recipient member. Used for UI state and notification badges."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp when in-app or email notification was delivered. Null if not yet delivered."},{"type":"null","format":"date-time","description":"Nullable timestamp when in-app or email notification was delivered. Null if not yet delivered."}],"description":"Nullable timestamp when in-app or email notification was delivered. Null if not yet delivered."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was generated (atomic, non-derived)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for soft delete of notification (compliance/audit). Null for active notifications."},{"type":"null","format":"date-time","description":"Nullable timestamp for soft delete of notification (compliance/audit). Null for active notifications."}],"description":"Nullable timestamp for soft delete of notification (compliance/audit). Null for active notifications."}},"required":["id","recipient_member_id","type","url","read","created_at"],"description":"Represents a notification event record as per the discussion_board_notifications table in the schema. Includes recipient, type, trigger actor (nullable), payload links/preview, delivery/read state, and audit fields. Supports regulatory soft deletion and role-based access."},"INotification.ICreate":{"type":"object","properties":{"recipient_member_id":{"type":"string","format":"uuid","description":"UUID of the member to receive the notification. Required, foreign key to members."},"trigger_actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the member whose action triggered this notification. Null for system or broadcast events."},{"type":"null","format":"uuid","description":"UUID of the member whose action triggered this notification. Null for system or broadcast events."}],"description":"UUID of the member whose action triggered this notification. Null for system or broadcast events."},"type":{"type":"string","description":"The notification type/category (e.g., 'reply', 'mention', 'moderation', etc.)."},"content_preview":{"oneOf":[{"type":"string","description":"Short preview, excerpt, or message to display in notification center (optional)."},{"type":"null","description":"Short preview, excerpt, or message to display in notification center (optional)."}],"description":"Short preview, excerpt, or message to display in notification center (optional)."},"url":{"type":"string","description":"Link/uri to associated resource or event for fast navigation (required, must be a valid URL)."},"read":{"type":"boolean","description":"Initial read status, usually false upon creation."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for when notification was delivered to user (in-app/email); may be set at creation or later."},{"type":"null","format":"date-time","description":"Nullable timestamp for when notification was delivered to user (in-app/email); may be set at creation or later."}],"description":"Nullable timestamp for when notification was delivered to user (in-app/email); may be set at creation or later."}},"required":["recipient_member_id","type","url","read"],"description":"Notification creation request body object. Aligns fields exactly with discussion_board_notifications schema. Required fields: recipient, type, URL, read status; others are optional (for event context or audit)."},"INotification.IUpdate":{"type":"object","properties":{"trigger_actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) To update the triggering user for the notification (rare except for event corrections)."},{"type":"null","format":"uuid","description":"(Optional) To update the triggering user for the notification (rare except for event corrections)."}],"description":"(Optional) To update the triggering user for the notification (rare except for event corrections)."},"type":{"type":"string","description":"(Optional) Change the notification type/category."},"content_preview":{"oneOf":[{"type":"string","description":"(Optional) Update the message/preview/excerpt for this notification."},{"type":"null","description":"(Optional) Update the message/preview/excerpt for this notification."}],"description":"(Optional) Update the message/preview/excerpt for this notification."},"url":{"type":"string","description":"(Optional) Change the link/URL associated with this notification."},"read":{"type":"boolean","description":"Set or change read state (main purpose of most notification updates)."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) Update/patch the moment notification is delivered via in-app/email."},{"type":"null","format":"date-time","description":"(Optional) Update/patch the moment notification is delivered via in-app/email."}],"description":"(Optional) Update/patch the moment notification is delivered via in-app/email."}},"required":[],"description":"Partial/full update object for notifications. All fields are optional patches to existing record (INotification). Main use is marking notifications as read/delivered, correcting previews, links, or types."},"ISubscription.IRequest":{"type":"object","properties":{"member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter to query subscriptions for a particular member. Null to search all."},{"type":"null","format":"uuid","description":"Optional filter to query subscriptions for a particular member. Null to search all."}],"description":"Optional filter to query subscriptions for a particular member. Null to search all."},"target_type":{"oneOf":[{"type":"string","description":"Filter for subscriptions by type of followed resource (e.g., 'thread', 'section', 'tag'). Null means any/all types."},{"type":"null","description":"Filter for subscriptions by type of followed resource (e.g., 'thread', 'section', 'tag'). Null means any/all types."}],"description":"Filter for subscriptions by type of followed resource (e.g., 'thread', 'section', 'tag'). Null means any/all types."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter for subscriptions targeting a particular resource. Null for all resources."},{"type":"null","format":"uuid","description":"Optional filter for subscriptions targeting a particular resource. Null for all resources."}],"description":"Optional filter for subscriptions targeting a particular resource. Null for all resources."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime filter to only include subscriptions created after/before this timestamp. Null to ignore."},{"type":"null","format":"date-time","description":"Datetime filter to only include subscriptions created after/before this timestamp. Null to ignore."}],"description":"Datetime filter to only include subscriptions created after/before this timestamp. Null to ignore."},"page":{"oneOf":[{"type":"integer","description":"Requested page number for paginated responses (optional, null for default)."},{"type":"null","description":"Requested page number for paginated responses (optional, null for default)."}],"description":"Requested page number for paginated responses (optional, null for default)."},"limit":{"oneOf":[{"type":"integer","description":"Maximum count of results per page (optional, null to use system default)."},{"type":"null","description":"Maximum count of results per page (optional, null to use system default)."}],"description":"Maximum count of results per page (optional, null to use system default)."}},"required":[],"description":"Request body object for searching/filtering/paginating notification subscriptions. All filters are optional and strictly follow the discussion_board_subscriptions schema."},"IPageISubscription":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISubscription"},"description":"Array of subscription entities."}},"required":["pagination","data"],"description":"Paginated response structure for notification subscriptions as per IPage<T> semantics. Follows generic board API conventions for batch retrieval."},"ISubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the subscription entity (discussion_board_subscriptions.id). Primary key for API lookups, audits, or editing/removal."},"member_id":{"type":"string","format":"uuid","description":"Foreign key to the subscribing member (discussion_board_members.id). Member who will receive notifications about target events/changes."},"target_type":{"type":"string","description":"Type/category of resource being followed (e.g., 'thread', 'section', 'tag'). Used to model polymorphic subscriptions and drive dynamic notification workflows."},"target_id":{"type":"string","format":"uuid","description":"UUID identifier for the specific resource being followed (distinct table per target_type, not enforced at schema level). Maintains referential integrity for notification routing/audit."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of subscription creation (board policies enforce uniqueness over (member, target_type, target_id))."}},"required":["id","member_id","target_type","target_id","created_at"],"description":"Entity for resource subscription on the board. Each entry indicates a member's subscription to a thread/section/tag/etc. Used to drive personalized notification flows for updates to followed resources. See discussion_board_subscriptions Prisma schema."},"ISubscription.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"The UUID of the member subscribing to a resource (FK to members). Required for subscription creation."},"target_type":{"type":"string","description":"Target resource type/category (e.g., 'thread', 'section', 'tag'). String, must match business-allowed values."},"target_id":{"type":"string","format":"uuid","description":"UUID identifier for concrete resource (FK semantics not enforced in schema, but required for business rules)."}},"required":["member_id","target_type","target_id"],"description":"Request body for subscription creation to board resources. Follows discussion_board_subscriptions schema, uniquely binding a member to a targeted resource (thread/section/tag/etc)."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number in paginated response. Used for navigation UX and client-side state."},"limit":{"type":"integer","format":"uint32","description":"Count of records per page. Must match client request or system default (typically 100 for most endpoints)."},"records":{"type":"integer","format":"uint32","description":"Total count of records matching the filter in the table (used for UX purposes and API optimization)."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages available given records and limit (calculated by API)."}},"required":["current","limit","records","pages"],"description":"Pagination state object for IPage<T> results. Used in all paginated board API responses. See IPage standard type at root of documentation."}}},"completed":68,"total":116,"step":0,"created_at":"2025-07-23T06:55:14.267Z"},"tokenUsage":{"facade":{"aggregate":{"total":941209,"input":{"total":881751,"cached":3840},"output":{"total":59458,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":941209,"input":{"total":881751,"cached":3840},"output":{"total":59458,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":941209,"input":{"total":881751,"cached":3840},"output":{"total":59458,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":941209,"input":{"total":881751,"cached":3840},"output":{"total":59458,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageDiscussionBoardThread":{"type":"object","description":"A paginated result set of discussion threads within the board. \n\nThis schema facilitates navigation of large datasets by providing threads in pages, compliant with common API best practices. \n\nIncludes pagination metadata and a list of `IDiscussionBoardThread` objects. Directly references the discussion threads entity described in the requirements and Prisma schema, ensuring complete traceability and consistency.\n\nPagination information enables clients to render navigation controls, implement infinite scroll, or perform results slicing as needed.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardThread"},"description":"A list of discussion board thread entities for the current result page.\n\nEach entity follows the comprehensive structure defined in `IDiscussionBoardThread`, strictly in line with the Prisma schema for `discussion_board_threads`."}},"required":["pagination","data"]},"IDiscussionBoardThread":{"type":"object","description":"Represents a discussion thread—the top-level discussion entity for the platform.\n\nThis model fully references the `discussion_board_threads` Prisma schema and domain requirements. It incorporates all columns with rich, multi-paragraph descriptions to guide API clients and integrators.\n\nServes as the foundational data structure for discussion lists and details. Properties include metadata, moderation, access, and content presentation fields.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key — Unique thread identifier, defined as a UUID. Used for referencing the thread throughout the application and between related tables.\n\nReferences the `id` column in the `discussion_board_threads` Prisma model. Enables precise cross-entity relationship management and guaranteed uniqueness."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Foreign key—References the creator's member account (`discussion_board_members.id`). Required for author identity, permissions enforcement, analytics, and business operations.\n\nThis is required by the schema for all threads and is critical for establishing thread authorship and producer auditing."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Foreign key—References the topic category for the thread (`discussion_board_categories.id`).\n\nEnables advanced filtering, discovery, and content categorization for both end users and moderators. Used throughout the UI for organizing discussion lists."},"title":{"type":"string","description":"Thread title—A required, human-readable subject or summary of the discussion, optimized for display and indexing.\n\nDirectly maps to the `title` field in the schema. Used for inline thread navigation, search, and semantic analysis."},"body":{"type":"string","description":"Thread body—The main initial content for the thread. Used for context, indexing, and launching discussions. \n\nDefined as non-nullable in the schema. Provides opening material and guides participants in the thread's scope."},"is_pinned":{"type":"boolean","description":"Boolean flag—Indicates whether this thread is pinned ('sticky') to the top of the thread list for special prominence, usually by moderator action. \n\nDirectly references the `is_pinned` column in the schema."},"is_closed":{"type":"boolean","description":"Boolean flag—Marks the thread as closed to new posts or comments. Managed by moderators and administrators for compliance, off-topic handling, or archival. \n\nReferenced directly from the schema's `is_closed` field."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp—Precise UTC indication of when the thread was created. \n\nUsed in timestamp sorting, thread lifecycle analysis, and compliance audit. Defined per the `created_at` field in the schema."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp—Indicates the most recent metadata modification. \n\nFacilitates UI freshness, edit history, and concurrency management. Bound to the `updated_at` schema column."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp—`null` if the thread is active, or an ISO timestamp of soft-deletion for moderation/audit reversibility. \n\nImplements requirements for reversible content management and regulatory compliance. Sourced from schema's `deleted_at` property."},{"type":"null"}],"description":"Soft delete timestamp—`null` if the thread is active, or an ISO timestamp of soft-deletion for moderation/audit reversibility. \n\nImplements requirements for reversible content management and regulatory compliance. Sourced from schema's `deleted_at` property."}},"required":["id","discussion_board_member_id","discussion_board_category_id","title","body","is_pinned","is_closed","created_at","updated_at"]},"IDiscussionBoardThread.ICreate":{"type":"object","description":"Request body for creating a new discussion board thread. All properties are strictly defined in the Prisma schema for `discussion_board_threads`.\n\nThis type is used when a client wishes to create a new discussion, providing all necessary details except for fields handled exclusively by the system (e.g., `id`, and possibly `created_at` which may be auto-filled by the backend).\n\nIt ensures required linkage to the member (author) and category, along with opening content, pin/close status, and editability indicators. Every property is mapped 1:1 to the schema with thorough description for client-side validation and user-facing interfaces.","properties":{"discussion_board_member_id":{"type":"string","format":"uuid","description":"Foreign key referencing the thread creator (`discussion_board_members.id`).\n\nRequired for thread attribution, moderation, reputation, and notification logic."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Foreign key referencing the category under which this thread is created (`discussion_board_categories.id`).\n\nEssential for thread placement, filtering, and content discovery."},"title":{"type":"string","description":"Thread title. Required and must be unique within the category as enforced by schema constraints.\n\nGuides search, navigation, and UI displays."},"body":{"type":"string","description":"Opening post or main description for the thread. Non-nullable per schema."},"is_pinned":{"type":"boolean","description":"True if thread should initially be pinned (requires elevated client permissions).\n\nUsually false for standard creation but is schema-required."},"is_closed":{"type":"boolean","description":"Indicates whether the thread should start as closed to new comments (reserved for moderators/admin/automated workflows). \n\nRequired to satisfy model completeness and audit compliance."}},"required":["discussion_board_member_id","discussion_board_category_id","title","body","is_pinned","is_closed"]},"IDiscussionBoardThread.IUpdate":{"type":"object","description":"Request body for updating an existing discussion thread. All updatable fields present in the `discussion_board_threads` schema are included, with flexibility for partial edits.\n\nEnables modification of title, body, pin/close status, or category association. System-managed fields (like `id`, `created_at`) are excluded by convention. All property types and business constraints are directly referenced from the Prisma schema.\n\nUsed for advanced admin and member editing workflows, ensuring strong type safety and comprehensive validation.","properties":{"title":{"type":"string","description":"The updated thread title. Must be unique within category as per schema constraints."},"body":{"type":"string","description":"The updated thread body; replaces main thread content."},"is_pinned":{"type":"boolean","description":"Whether the thread is currently pinned to display more prominently."},"is_closed":{"type":"boolean","description":"Whether the thread is currently open to contribution or commenting."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Update the thread's parent category if required."}},"required":[]},"IDiscussionBoardPost.IRequest":{"type":"object","description":"Request object for searching, filtering, or paginating discussion board posts.\n\nProvides query parameters for advanced search, sorting, or paging. All fields reference columns in the `discussion_board_posts` schema, supporting precise and efficient results navigation. Used extensively in the board interface, moderation tools, analytics, and mobile applications.","properties":{"discussion_board_thread_id":{"type":"string","format":"uuid","description":"Thread ID by which to filter posts. Restricts results to those linked with the specified discussion thread.\n\nMaps to `discussion_board_thread_id` column in `discussion_board_posts`."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Member ID by which to filter results. Only posts created by this user are fetched.\n\nReferences `discussion_board_member_id`."},"is_edited":{"type":"boolean","description":"Filter by edit status: true for edited, false for original/never edited."},"created_at_from":{"type":"string","format":"date-time","description":"Start range (inclusive) for created_at, restricting result to posts created on/after this date.\n\nUseful for audit, trend analysis, and temporal browses."},"created_at_to":{"type":"string","format":"date-time","description":"End range (inclusive) for created_at, filtering for posts created on/before this date."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter by soft deletion status for moderation views or audit purposes. If provided as null, only non-deleted posts are included."},{"type":"null","format":"date-time","description":"Filter by soft deletion status for moderation views or audit purposes. If provided as null, only non-deleted posts are included."}],"description":"Filter by soft deletion status for moderation views or audit purposes. If provided as null, only non-deleted posts are included."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination page number to fetch."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Maximum number of results per page."}},"required":[]},"IPageIDiscussionBoardPost":{"type":"object","description":"A paginated result set of discussion board posts.\n\nThis schema follows a common API pattern for presenting large datasets page by page, supporting infinite scroll, desktop UIs, and audit tools. Results are always structured as arrays of post objects per page, with associated pagination info for UI/logic support. Relies on strong cross-schema references to ensure data consistency and reliability.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPost"},"description":"A list of posts (per-thread or multi-thread search)."}},"required":["pagination","data"]},"IDiscussionBoardPost":{"type":"object","description":"Represents a single post within a discussion thread.\n\nObjects of this type match the full set of attributes described in the `discussion_board_posts` schema. Used in the creation, editing, display, audit, and moderation of individual contributions to a thread.\n\nSchema covers relationships to threads, post authorship, content edit-tracking, creation/update timestamps, and moderation (soft delete) state for compliance and reversibility.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key—unique identifier for this post."},"discussion_board_thread_id":{"type":"string","format":"uuid","description":"Foreign key referencing the thread this post belongs to (`discussion_board_threads.id`).\n\nEssential for data retrieval, history, and implicit thread filtering."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Foreign key referencing the member who authored the post.\n\nProvides identity, permissions, and audit traceability."},"body":{"type":"string","description":"Main content/body text of the post.\n\nCannot be null; captures user's contribution or argument."},"is_edited":{"type":"boolean","description":"Edit state flag. Set to true if the post content has been updated since creation. Used in audit logs and UI indicators."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the post was created. UTC/ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last update (edit) of the post content. UTC/ISO 8601."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, the post is soft-deleted for moderation or audit compliance. null means post is visible to the public."},{"type":"null"}],"description":"If set, the post is soft-deleted for moderation or audit compliance. null means post is visible to the public."}},"required":["id","discussion_board_thread_id","discussion_board_member_id","body","is_edited","created_at","updated_at"]},"IDiscussionBoardPost.ICreate":{"type":"object","description":"Request body for creating a new post within a thread.\n\nAll required attributes are enforced by the schema. Some fields (such as timestamps and soft delete status) are set by the backend system on record creation. Used by clients to contribute new content or add replies to existing threads.","properties":{"discussion_board_thread_id":{"type":"string","format":"uuid","description":"References the parent thread for this post."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Member creating this post."},"body":{"type":"string","description":"Body/content of the post."},"is_edited":{"type":"boolean","description":"Edit flag. For creation, typically false (no edits yet)."}},"required":["discussion_board_thread_id","discussion_board_member_id","body","is_edited"]},"IDiscussionBoardPost.IUpdate":{"type":"object","description":"Request body for updating a post's content. Provides fields defined as updatable in the corresponding `discussion_board_posts` schema.\n\nThis facilitates support for editing post text, modifying edit tracking, or (optionally) re-associating post to another thread/member if permitted by business logic. Designed for advanced moderation and UX edit flows. Requires strong type checks and business policy enforcement at the application layer.","properties":{"body":{"type":"string","description":"The new or updated post body."},"is_edited":{"type":"boolean","description":"Set to true if post has been modified (required for edit-tracking in UI/audit log)."}},"required":[]},"IDiscussionBoardComment.IRequest":{"type":"object","description":"Request object for listing, searching, or filtering comments on posts. Supports nested, threaded discussion models, collaborative editing, and deep content drilldown workflows.\n\nAll filter fields correspond to columns in `discussion_board_comments`. This schema enables fine-grained search (by post/comment/member/timestamp/state), vital for moderation dashboards and advanced analytics workflows.","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Post ID by which to filter comments. Required for listing all comments attached to a post."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Parent comment ID for filtering replies or specific threads in a nested discussion."},{"type":"null"}],"description":"Parent comment ID for filtering replies or specific threads in a nested discussion."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Member/user ID; fetches only comments authored by this user."},"is_edited":{"type":"boolean","description":"Filter by comments that have been edited (vs. initial-only originals)."},"created_at_from":{"type":"string","format":"date-time","description":"Start datetime for comment creation window, for filtering."},"created_at_to":{"type":"string","format":"date-time","description":"End datetime for comment creation window."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for comment deletion state (null for active, ISO 8601 timestamp for soft-deleted)."},{"type":"null","format":"date-time","description":"Filter for comment deletion state (null for active, ISO 8601 timestamp for soft-deleted)."}],"description":"Filter for comment deletion state (null for active, ISO 8601 timestamp for soft-deleted)."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Page number for paginated listing."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Maximum number of results per page."}},"required":[]},"IPageIDiscussionBoardComment":{"type":"object","description":"Paginated result set for comments. Used where listing or searching comments returns more than one entity.\n\nFollows consistent pagination schema for performance and usability. Each cell in 'data' array is a complete `IDiscussionBoardComment` object, referencing its parent post/comment/member as required. Used for moderation, analytics, and UX-driven listing workflows.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardComment"},"description":"The list of comments for the result page, as per the `IDiscussionBoardComment` structure."}},"required":["pagination","data"]},"IDiscussionBoardComment":{"type":"object","description":"A single comment entity, representing feedback, replies, or deep/nested engagement on a post. Strictly matches the detailed `discussion_board_comments` schema, including all present fields and relationships.\n\nSupports use cases from single-entity read to bulk moderation, UX display, and audit tracing.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the comment entity. Globally unique."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"Foreign key referencing the post this comment belongs to."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Parent comment ID for threading; null indicates a root-level comment."},{"type":"null"}],"description":"Parent comment ID for threading; null indicates a root-level comment."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Author/member ID for the commenter."},"body":{"type":"string","description":"Main text body of the comment. Non-null per schema."},"is_edited":{"type":"boolean","description":"Edit tracking flag: true if the comment has been updated since creation."},"created_at":{"type":"string","format":"date-time","description":"Comment creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp, set on edit or moderated change."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp—for compliance, audit, and reversibility. null for visible comments."},{"type":"null"}],"description":"Soft delete timestamp—for compliance, audit, and reversibility. null for visible comments."}},"required":["id","discussion_board_post_id","discussion_board_member_id","body","is_edited","created_at","updated_at"]},"IPage.IPagination":{"type":"object","description":"Standardized pagination object providing numeric context for paged results. \n\nWidely adopted across the API for navigational consistency, analytics processing, and user interface support. \n\nThis structure is derived from the IPage<T> specification provided. Each property has explicit typing and constraints, as described in requirements, with default values and formatting notes for precision.","properties":{"current":{"type":"integer","format":"uint32","description":"The current page number (1-based index)."},"limit":{"type":"integer","format":"uint32","description":"Number of items per page."},"records":{"type":"integer","format":"uint32","description":"Total number of matching records available."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages computed from records and limit; always ceiling(records/limit)."}},"required":["current","limit","records","pages"]}}},"completed":80,"total":116,"step":0,"created_at":"2025-07-23T06:55:14.745Z"},"tokenUsage":{"facade":{"aggregate":{"total":1009121,"input":{"total":945779,"cached":3840},"output":{"total":63342,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1009121,"input":{"total":945779,"cached":3840},"output":{"total":63342,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1009121,"input":{"total":945779,"cached":3840},"output":{"total":63342,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1009121,"input":{"total":945779,"cached":3840},"output":{"total":63342,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자(UUID).\n\n이 설정 레코드의 기본 키로, 시스템 내에서 각 환경설정 값을 유일하게 식별합니다. 관리, 감사, 추적 등 모든 연계 로직에서 참조됩니다. 예시: \"45006c7c-1142-4cdc-8276-e27accf0414d\"."},"key":{"type":"string","description":"설정 키(고유 문자열).\n\n환경설정 키로, 플랫폼 전역의 설정을 참조할 때 사용됩니다. 예: 'max_post_length', 'allow_guest_voting'.\n\nDB 고유 제약 조건이 있으므로 값이 중복될 수 없습니다."},"value":{"type":"string","description":"설정 값(문자열 또는 JSON 직렬화 문자열).\n\n각 환경설정의 실제 값이며, 단일 문자열로 저장할 수 있는 모든 데이터(숫자, 부울, JSON 직렬화 등)를 지원합니다. 예: '10000', '{\"enable\":true}'."},"description":{"oneOf":[{"type":"string","description":"설정 설명(선택적).\n\n이 설정이 무엇을 의미하고, 어떤 기능 제어 역할을 하는지 설명합니다. 관리자의 이해를 돕고, 대시보드 등에서 표시됩니다. 예: '게시글 최대 작성 가능 글자수 제한'."},{"type":"null","description":"설정 설명(선택적).\n\n이 설정이 무엇을 의미하고, 어떤 기능 제어 역할을 하는지 설명합니다. 관리자의 이해를 돕고, 대시보드 등에서 표시됩니다. 예: '게시글 최대 작성 가능 글자수 제한'."}],"description":"설정 설명(선택적).\n\n이 설정이 무엇을 의미하고, 어떤 기능 제어 역할을 하는지 설명합니다. 관리자의 이해를 돕고, 대시보드 등에서 표시됩니다. 예: '게시글 최대 작성 가능 글자수 제한'."},"created_at":{"type":"string","format":"date-time","description":"생성 타임스탬프(UTC ISO 8601).\n\n이 설정이 생성된 시점을 나타내며, 감사 추적 및 관리자 조회에 사용됩니다."},"updated_at":{"type":"string","format":"date-time","description":"최종 수정 타임스탬프(UTC ISO 8601).\n\n이 설정이 마지막으로 갱신된 시점을 기록합니다."}},"required":["id","key","value","created_at","updated_at"],"description":"설정 키-값 레코드 (discussion_board_configurations 테이블).\n\n전역 플랫폼 기능의 설정 및 동작을 동적으로 제어하기 위한 엔티티로, 게시판 동작과 안전성, 기능 확장성을 확보합니다. 키는 고유하며, 각 설정값은 atomic 데이터로 저장됩니다. 관리에서 수정·추적 및 설명이 가능하며, 관리자 전용 대시보드 및 API와 연동됩니다."},"IDiscussionBoardConfiguration.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"환경설정 키(고유, 필수).\n\n플랫폼 기능 제어에 쓰일 유일 식별자로 사용되어야 하며, 예시는 'max_post_length', 'default_language' 등입니다."},"value":{"type":"string","description":"설정 값(필수).\n\n각 설정의 실제 값이며, 단일 문자열 또는 JSON 직렬화 문자열 가능합니다. 예: '2000', '{\"enable\": true}'."},"description":{"oneOf":[{"type":"string","description":"설정 항목의 관리자용 설명. 선택 입력 가능.\n\n이 설정이 무엇을 제어하는지, 핵심 용도와 관련 정책을 서술합니다. 관리자 UI 및 API 문서에서 활용됩니다."},{"type":"null","description":"설정 항목의 관리자용 설명. 선택 입력 가능.\n\n이 설정이 무엇을 제어하는지, 핵심 용도와 관련 정책을 서술합니다. 관리자 UI 및 API 문서에서 활용됩니다."}],"description":"설정 항목의 관리자용 설명. 선택 입력 가능.\n\n이 설정이 무엇을 제어하는지, 핵심 용도와 관련 정책을 서술합니다. 관리자 UI 및 API 문서에서 활용됩니다."}},"required":["key","value"],"description":"설정 키-값 생성 요청 데이터.\n\n새로운 환경설정 항목을 생성할 때 클라이언트가 보내는 요청 구조입니다. 키의 유일성과 값의 atomic 저장‧호환성이 핵심입니다."},"IDiscussionBoardConfiguration.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"변경할 설정 값(필수).\n\n수정할 환경설정의 값입니다. 예: 새로운 글자 제한, 정책 스위치 등."},"description":{"oneOf":[{"type":"string","description":"설정 항목의 관리자용 설명(선택)."},{"type":"null","description":"설정 항목의 관리자용 설명(선택)."}],"description":"설정 항목의 관리자용 설명(선택)."}},"required":["value"],"description":"환경설정 값/설명 수정 요청 구조.\n\n기존 설정에 대해 값(value) 및 관리자용 설명(description)만 수정할 수 있습니다."},"IPageDiscussionBoardGuest.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32","description":"페이지 번호(1-base). 기본값은 1입니다."},{"type":"null","format":"int32","description":"페이지 번호(1-base). 기본값은 1입니다."}],"description":"페이지 번호(1-base). 기본값은 1입니다."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"페이지별 레코드 제한(기본값: 100)."},{"type":"null","format":"int32","description":"페이지별 레코드 제한(기본값: 100)."}],"description":"페이지별 레코드 제한(기본값: 100)."},"session_token":{"oneOf":[{"type":"string","description":"조회할 세션 토큰 값. 특정 게스트 세션만 필터링할 때 사용."},{"type":"null","description":"조회할 세션 토큰 값. 특정 게스트 세션만 필터링할 때 사용."}],"description":"조회할 세션 토큰 값. 특정 게스트 세션만 필터링할 때 사용."},"ip_address":{"oneOf":[{"type":"string","description":"IP 주소 필터(선택). 지정된 IP의 세션만 반환."},{"type":"null","description":"IP 주소 필터(선택). 지정된 IP의 세션만 반환."}],"description":"IP 주소 필터(선택). 지정된 IP의 세션만 반환."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"조회 시작 시각(UTC ISO8601, 선택)."},{"type":"null","format":"date-time","description":"조회 시작 시각(UTC ISO8601, 선택)."}],"description":"조회 시작 시각(UTC ISO8601, 선택)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"조회 종료 시각(UTC ISO8601, 선택)."},{"type":"null","format":"date-time","description":"조회 종료 시각(UTC ISO8601, 선택)."}],"description":"조회 종료 시각(UTC ISO8601, 선택)."}},"description":"게스트 세션 목록 요청 (검색, 페이징, 필터 구조).\n\n특정 조건/범위의 비회원 접속기록 페이징, 분석, 감사 등을 위해 사용됩니다.","required":[]},"IPageDiscussionBoardGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardGuest"},"description":"요청 조건에 부합하는 discussion_board_guests 레코드 배열.\n\n각 레코드는 개별 게스트(비회원) 세션의 상세 정보이며, 식별자, 세션 토큰, IP, UserAgent, 타임스탬프 등 포함."}},"required":["pagination","data"],"description":"게스트 세션 엔티티의 페이지네이션 컨테이너.\n\n검색 조건에 따른 guest 세션 목록(배열)과 페이징 정보를 담는 표준 구조입니다."},"IDiscussionBoardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"기본 키. 고유 식별자(UUID)로써 게스트 세션을 시스템 내에서 유일하게 식별합니다."},"session_token":{"type":"string","description":"세션 토큰(고유).\n\n익명 접속자를 추적 및 감사용으로 식별하는 문자열. 예: 'guest_ae892ded9b5e2da4'"},"ip_address":{"type":"string","description":"IP 주소(문자열).\n\n접속한 게스트의 원본 IP로, 보안·감사·관리에서 사용됩니다. 예: '203.0.113.42'. 규정에 따라 익명화 적용될 수 있음."},"user_agent":{"oneOf":[{"type":"string","description":"사용자 에이전트 문자열(선택).\n\n브라우저/디바이스 구분 목적으로 저장. 예: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0)...'"},{"type":"null","description":"사용자 에이전트 문자열(선택).\n\n브라우저/디바이스 구분 목적으로 저장. 예: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0)...'"}],"description":"사용자 에이전트 문자열(선택).\n\n브라우저/디바이스 구분 목적으로 저장. 예: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0)...'"},"created_at":{"type":"string","format":"date-time","description":"세션 생성 시각(UTC ISO 8601)."},"expires_at":{"type":"string","format":"date-time","description":"세션 유효 만료 시각(UTC ISO 8601)."}},"required":["id","session_token","ip_address","created_at","expires_at"],"description":"게스트 세션 정보 엔티티(discussion_board_guests 테이블).\n\n비회원 사용자의 각 세션 상태를 추적하며, 접속 감사, 악용 방지, 익명 사용 분석 등에 활용됩니다. 세션 토큰, IP, 만료 기한을 포함하는 것이 특징입니다."},"IDiscussionBoardGuest.ICreate":{"type":"object","properties":{"session_token":{"type":"string","description":"신규 세션 토큰(고유).\n\n서버/클라이언트가 발급한 게스트 세션 추적 문자열. 고유 값이어야 하며, 예시는 'guest_93fa10e8c9552da9' 등입니다."},"ip_address":{"type":"string","description":"게스트 접속 IP 주소(필수).\n\n실제 접속지 정보로, 추적과 감시, 악용 방지를 위함입니다."},"user_agent":{"oneOf":[{"type":"string","description":"사용자 에이전트 문자열(선택).\n\n디바이스/브라우저 구분 목적. 없으면 null 입력."},{"type":"null","description":"사용자 에이전트 문자열(선택).\n\n디바이스/브라우저 구분 목적. 없으면 null 입력."}],"description":"사용자 에이전트 문자열(선택).\n\n디바이스/브라우저 구분 목적. 없으면 null 입력."},"created_at":{"type":"string","format":"date-time","description":"세션 시작 시각(UTC)."},"expires_at":{"type":"string","format":"date-time","description":"세션 만료 예정 시각(UTC)."}},"required":["session_token","ip_address","created_at","expires_at"],"description":"게스트 세션 신규 생성 요청 구조.\n\n비회원 접속 기록을 남길 때 반드시 발급할 세션 정보 구조체입니다."},"IDiscussionBoardGuest.IUpdate":{"type":"object","properties":{"session_token":{"type":"string","description":"업데이트할 세션 토큰."},"ip_address":{"type":"string","description":"변경할 IP 주소."},"user_agent":{"oneOf":[{"type":"string","description":"에이전트 새 값(없으면 null 입력)."},{"type":"null","description":"에이전트 새 값(없으면 null 입력)."}],"description":"에이전트 새 값(없으면 null 입력)."},"expires_at":{"type":"string","format":"date-time","description":"만료일 갱신(UTC)."}},"description":"게스트 세션 수정 요청 구조.\n\n비회원 세션의 IP, 토큰, 에이전트, 만료일 정보 갱신용 타입.","required":[]},"IPageDiscussionBoardMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32","description":"페이지 번호(기본 1)."},{"type":"null","format":"int32","description":"페이지 번호(기본 1)."}],"description":"페이지 번호(기본 1)."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"페이지당 레코드 수(기본 100)."},{"type":"null","format":"int32","description":"페이지당 레코드 수(기본 100)."}],"description":"페이지당 레코드 수(기본 100)."},"username":{"oneOf":[{"type":"string","description":"검색용 사용자 이름(선택)."},{"type":"null","description":"검색용 사용자 이름(선택)."}],"description":"검색용 사용자 이름(선택)."},"email":{"oneOf":[{"type":"string","description":"이메일 검색(선택)."},{"type":"null","description":"이메일 검색(선택)."}],"description":"이메일 검색(선택)."},"display_name":{"oneOf":[{"type":"string","description":"디스플레이 네임 부분검색(선택)."},{"type":"null","description":"디스플레이 네임 부분검색(선택)."}],"description":"디스플레이 네임 부분검색(선택)."},"is_active":{"oneOf":[{"type":"boolean","description":"활성/비활성 필터(선택)."},{"type":"null","description":"활성/비활성 필터(선택)."}],"description":"활성/비활성 필터(선택)."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"등록일 시작 (ISO 8601, 선택)."},{"type":"null","format":"date-time","description":"등록일 시작 (ISO 8601, 선택)."}],"description":"등록일 시작 (ISO 8601, 선택)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"등록일 끝 (ISO 8601, 선택)."},{"type":"null","format":"date-time","description":"등록일 끝 (ISO 8601, 선택)."}],"description":"등록일 끝 (ISO 8601, 선택)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete 상태 필터(선택, null: active만, not null: 삭제)"},{"type":"null","format":"date-time","description":"Soft-delete 상태 필터(선택, null: active만, not null: 삭제)"}],"description":"Soft-delete 상태 필터(선택, null: active만, not null: 삭제)"}},"description":"회원(사용자) 목록 조회/검색 요청 구조.\n\npagination, 조건검색, soft-delete 상태 구분까지 지원합니다.","required":[]},"IPageDiscussionBoardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMember"},"description":"member 레코드 배열(각 사용자의 상세 정보 포함)"}},"required":["pagination","data"],"description":"회원 목록 페이지네이션 컨테이너.\n\n검색 등으로 조회된 사용자(회원) 엔티티 목록과 페이징 데이터를 담는 표준 구조입니다."},"IDiscussionBoardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"기본 키(UUID). 회원의 전역 고유 식별자입니다. 시스템 내 일관된 참조 또는 관계 연결에 사용됩니다."},"username":{"type":"string","description":"회원 고유 사용자명.\n\n게시판 내 식별 및 검색, 알람 및 인증 등 다양한 기능의 기본 키워드이자 프로필 정보입니다."},"email":{"type":"string","description":"회원 이메일 주소(고유).\n\n알림 발송, 비밀번호 복구, 인증 절차 절대값. 중복 허용 불가."},"hashed_password":{"type":"string","description":"비밀번호 해시(실제 패스워드는 저장‧전송 X).\n\n내부 인증 인터페이스에서만 활용."},"display_name":{"type":"string","description":"프로필 표시용 이름.\n\nUI에서 노출되는 닉네임 용도. 본명, 별명, 가명 가능."},"profile_image_url":{"oneOf":[{"type":"string","description":"프로필 이미지의 URL(선택값).\n\n커뮤니티 활동이력에서 UI/UX 표시용 채널로 활용합니다."},{"type":"null","description":"프로필 이미지의 URL(선택값).\n\n커뮤니티 활동이력에서 UI/UX 표시용 채널로 활용합니다."}],"description":"프로필 이미지의 URL(선택값).\n\n커뮤니티 활동이력에서 UI/UX 표시용 채널로 활용합니다."},"is_active":{"type":"boolean","description":"계정 활성화 상태(로그인 가능여부).\n\n활성: true(로그인/활동 가능), 비활성: false(정지, 영구 탈퇴 등)."},"created_at":{"type":"string","format":"date-time","description":"회원 등록일, UTC ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"회원 정보 최종 갱신일(UTC ISO 8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"탈퇴/삭제 Soft-Delete 일시(삭제 안 됨= null)"},{"type":"null","format":"date-time","description":"탈퇴/삭제 Soft-Delete 일시(삭제 안 됨= null)"}],"description":"탈퇴/삭제 Soft-Delete 일시(삭제 안 됨= null)"}},"required":["id","username","email","hashed_password","display_name","is_active","created_at","updated_at"],"description":"회원(유저/계정) 정보 엔티티(discussion_board_members 테이블).\n\n정규 회원의 고유 식별명, 이메일, 해시 패스워드, 닉네임, 프로필 이미지, 활성상태, 가입/갱신일, Soft Delete 기반 탈퇴 일시를 갖습니다. 게시글, 댓글, 알림 등 다양한 보드 내 관계 중심역할입니다."},"IDiscussionBoardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"회원 고유 사용자명(필수).\n\n회원 가입, 인증, 알림, 식별자 등 전 범위에서 고유, 중복불가로 사용됩니다."},"email":{"type":"string","description":"이메일 주소(필수).\n\n알림, 인증에 반드시 사용되며, 중복 허용 불가. 형식: RFC 5322 준수 이메일."},"hashed_password":{"type":"string","description":"비밀번호 해시(필수).\n\n실제 비밀번호 원문이 절대 노출/저장되지 않으며, 반드시 해시 후 저장."},"display_name":{"type":"string","description":"프로필용 표시 이름(필수).\n\n닉네임, 가명, UI/UX에서 보여지는 값."},"profile_image_url":{"oneOf":[{"type":"string","description":"프로필 이미지 URL(선택).\n\n없으면 null 지정."},{"type":"null","description":"프로필 이미지 URL(선택).\n\n없으면 null 지정."}],"description":"프로필 이미지 URL(선택).\n\n없으면 null 지정."},"is_active":{"type":"boolean","description":"계정 활성화 플래그(필수).\n\n바로 활성화= true, 가입 직후 대기 또는 비활성시 false."}},"required":["username","email","hashed_password","display_name","is_active"],"description":"회원 계정 신규 생성 요청(회원 가입).\n\n중복 검사/유효성 검사 완료된 요청에 대해 회원계정이 실제로 생성될 때 사용하는 스키마입니다."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"int32","description":"현재 페이지 번호."},"limit":{"type":"integer","format":"int32","description":"페이지 당 데이터 갯수."},"records":{"type":"integer","format":"int32","description":"전체 데이터 카운트(레코드 수)."},"pages":{"type":"integer","format":"int32","description":"전체 페이지 수(올림)."}},"required":["current","limit","records","pages"],"description":"페이지네이션 정보를 담는 표준 구조체.\n\n현재 페이지, 페이지 당 레코드 수, 전체 레코드/페이지 수로 구성됩니다."}}},"completed":92,"total":116,"step":0,"created_at":"2025-07-23T06:55:26.485Z"},"tokenUsage":{"facade":{"aggregate":{"total":1076664,"input":{"total":1009805,"cached":3840},"output":{"total":66859,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1076664,"input":{"total":1009805,"cached":3840},"output":{"total":66859,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1076664,"input":{"total":1009805,"cached":3840},"output":{"total":66859,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1076664,"input":{"total":1009805,"cached":3840},"output":{"total":66859,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"discussion_board_IDiscussionBoardModerationLog.IRequest":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator who performed the moderation action. Used for filtering logs by moderator. \n\nCorresponds to the moderator_id column of discussion_board_moderation_logs as in the Prisma schema. Required for tracing, analytics, and moderator activity breakdown."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the thread affected by this moderation action (nullable).\n\nCorresponds to thread_id column of discussion_board_moderation_logs in the Prisma schema. Enables filtering logs to those affecting a specific thread. Null allows searching for moderation logs not tied to a specific thread."},{"type":"null","format":"uuid","description":"ID of the thread affected by this moderation action (nullable).\n\nCorresponds to thread_id column of discussion_board_moderation_logs in the Prisma schema. Enables filtering logs to those affecting a specific thread. Null allows searching for moderation logs not tied to a specific thread."}],"description":"ID of the thread affected by this moderation action (nullable).\n\nCorresponds to thread_id column of discussion_board_moderation_logs in the Prisma schema. Enables filtering logs to those affecting a specific thread. Null allows searching for moderation logs not tied to a specific thread."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the post affected by this moderation action (nullable).\n\nCorresponds to post_id column of the discussion_board_moderation_logs table. Useful for filtering logs to actions on specific posts, such as edits, hides, or deletes."},{"type":"null","format":"uuid","description":"ID of the post affected by this moderation action (nullable).\n\nCorresponds to post_id column of the discussion_board_moderation_logs table. Useful for filtering logs to actions on specific posts, such as edits, hides, or deletes."}],"description":"ID of the post affected by this moderation action (nullable).\n\nCorresponds to post_id column of the discussion_board_moderation_logs table. Useful for filtering logs to actions on specific posts, such as edits, hides, or deletes."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of comment affected by this moderation action (nullable).\n\nThis matches the comment_id column and enables filtering logs on moderation actions for specific comments."},{"type":"null","format":"uuid","description":"ID of comment affected by this moderation action (nullable).\n\nThis matches the comment_id column and enables filtering logs on moderation actions for specific comments."}],"description":"ID of comment affected by this moderation action (nullable).\n\nThis matches the comment_id column and enables filtering logs on moderation actions for specific comments."},"action":{"type":"string","description":"Type of moderation action taken (e.g., 'hide', 'edit', 'delete').\n\nThis property is used for searching/filtering for certain types of events in moderation logs (see action column in discussion_board_moderation_logs)."},"created_at_from":{"type":"string","format":"date-time","description":"Lower bound (inclusive) on log creation timestamp for search/filtering. Should be in ISO 8601 format. Used for temporal filtering of moderation logs. Not present in the raw schema; provided as a logical query parameter."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound (inclusive) on log creation timestamp for search/filtering (ISO 8601). Used for temporal filtering of moderation logs. Not present in the raw schema; provided as a logical query parameter."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Standard pagination information for limiting and offsetting results."}},"description":"Request type for listing, searching, or filtering moderation logs in the discussion board platform.\n\nAggregates all filterable schema fields from the discussion_board_moderation_logs table: moderator_id, thread_id, post_id, comment_id, action, and supports date-time range filtering.","required":[]},"discussion_board_IPageIDiscussionBoardModerationLog":{"description":"Paginated container for moderation logs.\n\nContains page information and an array of moderation log records from the discussion_board_moderation_logs table. Follows the IPage standard type for paginated responses."},"discussion_board_IDiscussionBoardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for the moderation log event.\n\nReference: id column of discussion_board_moderation_logs."},"moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator who performed this moderation action. Foreign key to moderator.\n\nReference: moderator_id in Prisma. Required for accountability, auditing, and moderation UI breakdown."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"The thread targeted by this moderation action, if any (nullable).\n\nReference: thread_id column. Enables linking moderation events to specific threads. May be null if action is not thread-specific."},{"type":"null","format":"uuid","description":"The thread targeted by this moderation action, if any (nullable).\n\nReference: thread_id column. Enables linking moderation events to specific threads. May be null if action is not thread-specific."}],"description":"The thread targeted by this moderation action, if any (nullable).\n\nReference: thread_id column. Enables linking moderation events to specific threads. May be null if action is not thread-specific."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post targeted by this moderation action, if any (nullable).\n\nReference: post_id column. Allows linking moderation events to a specific post."},{"type":"null","format":"uuid","description":"Post targeted by this moderation action, if any (nullable).\n\nReference: post_id column. Allows linking moderation events to a specific post."}],"description":"Post targeted by this moderation action, if any (nullable).\n\nReference: post_id column. Allows linking moderation events to a specific post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment targeted by this moderation action, if any (nullable).\n\nReference: comment_id column. For actions targeting comments."},{"type":"null","format":"uuid","description":"Comment targeted by this moderation action, if any (nullable).\n\nReference: comment_id column. For actions targeting comments."}],"description":"Comment targeted by this moderation action, if any (nullable).\n\nReference: comment_id column. For actions targeting comments."},"action":{"type":"string","description":"String indicating the moderation action (e.g., 'hide', 'edit', 'warn', 'delete').\n\nReference: action column. Required. Used for event analysis, audit, and reporting."},"action_reason":{"oneOf":[{"type":"string","description":"Free-form moderator-provided rationale for the moderation action, if provided.\n\nReference: action_reason (nullable). Enables transparency, audit, and review."},{"type":"null","description":"Free-form moderator-provided rationale for the moderation action, if provided.\n\nReference: action_reason (nullable). Enables transparency, audit, and review."}],"description":"Free-form moderator-provided rationale for the moderation action, if provided.\n\nReference: action_reason (nullable). Enables transparency, audit, and review."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this moderation action/event was performed.\n\nReference: created_at column of discussion_board_moderation_logs. Used for sorting and querying."}},"required":["id","moderator_id","action","created_at"],"description":"Entity model for a single moderation log record in the discussion board system.\n\nDirectly references the discussion_board_moderation_logs table in schema. Includes all properties for auditing, compliance, and moderation analysis."},"discussion_board_IDiscussionBoardModerationLog.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"Foreign key to discussion_board_moderators.id. The moderator performing the action."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the thread targeted by the moderation event, if any."},{"type":"null","format":"uuid","description":"ID of the thread targeted by the moderation event, if any."}],"description":"ID of the thread targeted by the moderation event, if any."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the post targeted by the moderation event, if any."},{"type":"null","format":"uuid","description":"ID of the post targeted by the moderation event, if any."}],"description":"ID of the post targeted by the moderation event, if any."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the comment targeted by the event, if any."},{"type":"null","format":"uuid","description":"ID of the comment targeted by the event, if any."}],"description":"ID of the comment targeted by the event, if any."},"action":{"type":"string","description":"Type of moderation action taken (e.g., 'hide', 'edit', 'delete')."},"action_reason":{"oneOf":[{"type":"string","description":"Moderator-provided rationale for the action taken (nullable for optional rationale/commentary)."},{"type":"null","description":"Moderator-provided rationale for the action taken (nullable for optional rationale/commentary)."}],"description":"Moderator-provided rationale for the action taken (nullable for optional rationale/commentary)."}},"required":["moderator_id","action"],"description":"Request body to create a moderation log event. References discussion_board_moderation_logs.\n\nRequired: moderator_id, action. Optional: thread_id, post_id, comment_id, action_reason."},"discussion_board_IDiscussionBoardModerationLog.IUpdate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"The moderator performing the action."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread targeted by the action, if changed."},{"type":"null","format":"uuid","description":"Thread targeted by the action, if changed."}],"description":"Thread targeted by the action, if changed."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post targeted, if changed."},{"type":"null","format":"uuid","description":"Post targeted, if changed."}],"description":"Post targeted, if changed."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment targeted, if changed."},{"type":"null","format":"uuid","description":"Comment targeted, if changed."}],"description":"Comment targeted, if changed."},"action":{"type":"string","description":"Type of moderation action."},"action_reason":{"oneOf":[{"type":"string","description":"Updated rationale or moderation justification."},{"type":"null","description":"Updated rationale or moderation justification."}],"description":"Updated rationale or moderation justification."}},"description":"Request body for updating (PUT) a moderation log event. Updates permitted schema fields. All properties are optional for PATCH/PUT, with the system updating only supplied fields referencing discussion_board_moderation_logs.","required":[]},"discussion_board_IDiscussionBoardWarning.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of the member warned (warned member).\n\nFor filtering/searching warning records by the warned user."},"moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator who issued this warning.\n\nFor filtering/search by moderator."},"warning_type":{"type":"string","description":"String category/type of warning (e.g., 'spam', 'harassment').\n\nUsed to find/aggregate warnings by category."},"created_at_from":{"type":"string","format":"date-time","description":"Earliest creation timestamp to filter warnings (inclusive).\n\nISO 8601. Not stored on the database row."},"created_at_to":{"type":"string","format":"date-time","description":"Latest creation timestamp to filter warnings (inclusive).\n\nISO 8601. Not stored on the database row."},"expires_at":{"type":"string","format":"date-time","description":"Expiration time of warnings, for filtering active/expired statuses."},"deleted_at":{"type":"string","format":"date-time","description":"Soft delete timestamp to include/exclude soft-deleted warning records in search."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination/query options for warnings search."}},"description":"Request/Query type for listing, filtering, or searching board user warning records.\n\nIncludes all discussion_board_warnings properties plus semantic query control (date ranges, pagination, etc).","required":[]},"discussion_board_IPageIDiscussionBoardWarning":{"description":"Paginated container for board warning records.\n\nContains page info and array of board warning record entities. Used for warning search/listing results (see discussion_board_warnings)."},"discussion_board_IDiscussionBoardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the warning record (UUID).\n\nCorresponds to id in discussion_board_warnings schema."},"member_id":{"type":"string","format":"uuid","description":"The warned member's ID (UUID).\n\nReferences member_id column in schema."},"moderator_id":{"type":"string","format":"uuid","description":"The ID of the moderator who issued the warning (UUID)."},"warning_type":{"type":"string","description":"Type/category of the warning (string, e.g., 'harassment', 'spam')."},"message":{"type":"string","description":"Moderator's message or rationale presented with the warning (visible to member/audit, full text)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when warning was issued. ISO 8601."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, when warning expires; null for indefinite/permanent."},{"type":"null","format":"date-time","description":"If set, when warning expires; null for indefinite/permanent."}],"description":"If set, when warning expires; null for indefinite/permanent."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft delete (null if active, set if lifted/hidden) as per discussion_board_warnings."},{"type":"null","format":"date-time","description":"Timestamp for soft delete (null if active, set if lifted/hidden) as per discussion_board_warnings."}],"description":"Timestamp for soft delete (null if active, set if lifted/hidden) as per discussion_board_warnings."}},"required":["id","member_id","moderator_id","warning_type","message","created_at"],"description":"Entity for a single warning issued to a discussion board member (see discussion_board_warnings).\n\nContains audit, user, content, and moderation relationships as defined in the schema; full traceability."},"discussion_board_IDiscussionBoardWarning.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of warned user. Required."},"moderator_id":{"type":"string","format":"uuid","description":"ID of moderator issuing the warning. Required."},"warning_type":{"type":"string","description":"Warning's category (e.g., 'abuse', 'off-topic'). Required."},"message":{"type":"string","description":"Moderator's message/rationale. Required."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiration of warning. Null for permanent."},{"type":"null","format":"date-time","description":"Expiration of warning. Null for permanent."}],"description":"Expiration of warning. Null for permanent."}},"required":["member_id","moderator_id","warning_type","message"],"description":"Create data for warning records (discussion_board_warnings).\n\nRequires all fields except id and deleted_at (which are handled automatically); expires_at is optional."},"discussion_board_IDiscussionBoardWarning.IUpdate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Warned member (may allow reassignment in exceptional cases)."},"moderator_id":{"type":"string","format":"uuid","description":"Moderator updating warning."},"warning_type":{"type":"string","description":"Category/type of warning."},"message":{"type":"string","description":"Full rationale/message."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiration or null for permanent."},{"type":"null","format":"date-time","description":"Expiration or null for permanent."}],"description":"Expiration or null for permanent."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete/removal timestamp."},{"type":"null","format":"date-time","description":"Soft delete/removal timestamp."}],"description":"Soft delete/removal timestamp."}},"description":"Update data for warning records (discussion_board_warnings). Editable properties: all except id and created_at.","required":[]},"discussion_board_IDiscussionBoardBan.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of banned member.\n\nSupported for filter/search by banned user in the bans list."},"moderator_id":{"type":"string","format":"uuid","description":"ID of moderator who performed the ban.\n\nSupported for finding bans enacted by specific moderators."},"ban_reason":{"type":"string","description":"String reason for ban.\n\nE.g., 'repeat violations', 'harassment', for aggregation/reporting."},"permanent":{"type":"boolean","description":"Boolean filter for whether the ban is permanent or temporary."},"created_at_from":{"type":"string","format":"date-time","description":"Lower time bound for ban creation timestamp (inclusive, for filtering)."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound for ban creation date (inclusive)."},"expires_at":{"type":"string","format":"date-time","description":"Filter for banned-until timestamp."},"deleted_at":{"type":"string","format":"date-time","description":"Filter for soft-deleted bans if included."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination and batching configuration."}},"description":"Request/search query type for ban records (discussion_board_bans). For listing, filtering, searching, auditing of ban events in discussion board; includes all properties for advanced search by moderator, time, reason, status, and pagination.","required":[]},"discussion_board_IPageIDiscussionBoardBan":{"description":"Paginated container for ban records (discussion_board_bans).\n\nContains batch/pagination info and array of ban record entries."},"IDiscussionBoardModerationLog.IRequest":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"Filters the moderation logs to actions taken by a specific moderator. Must be a valid UUID string corresponding to a moderator's unique id in the system.\n\nThis enables audit trails for individual moderator activities."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters logs to only those associated with a specific discussion thread. Accepts thread UUID or null to ignore this filter.\n\nSupports investigations or history review on particular threads."},{"type":"null"}],"description":"Filters logs to only those associated with a specific discussion thread. Accepts thread UUID or null to ignore this filter.\n\nSupports investigations or history review on particular threads."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters logs to only those related to a particular post. Accepts the UUID of a discussion_board_post or null if not filtering posts.\n\nUseful for auditing actions on a single post."},{"type":"null"}],"description":"Filters logs to only those related to a particular post. Accepts the UUID of a discussion_board_post or null if not filtering posts.\n\nUseful for auditing actions on a single post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters logs by comment. Accepts UUID or null.\n\nFacilitates deep drilldowns into comment-level moderation activity."},{"type":"null"}],"description":"Filters logs by comment. Accepts UUID or null.\n\nFacilitates deep drilldowns into comment-level moderation activity."},"action":{"type":"string","description":"Filters by action performed (e.g., 'hide', 'delete', 'warn', 'edit').\n\nMatches the 'action' property used in moderation logs, for workflow or analytics purposes."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for creation datetime filter (inclusive). ISO 8601 with time zone (e.g., 2025-07-01T00:00:00Z)."},{"type":"null"}],"description":"Lower bound for creation datetime filter (inclusive). ISO 8601 with time zone (e.g., 2025-07-01T00:00:00Z)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for creation datetime filter (inclusive). ISO 8601 with time zone (e.g., 2025-07-23T23:59:59Z)."},{"type":"null"}],"description":"Upper bound for creation datetime filter (inclusive). ISO 8601 with time zone (e.g., 2025-07-23T23:59:59Z)."},"page":{"type":"integer","minimum":1,"description":"Page number to retrieve for paginated results.\n\nDefaults to 1 if omitted."},"limit":{"type":"integer","minimum":1,"description":"How many records to return per page (for pagination). Default and maximum values determined by system policy."}},"description":"Request object for searching and paginating moderation log entries. Fields allow for rich filtering and audit workflow as required in discussion_board_moderation_logs table. All properties mirror fields or query needs described in system requirements analysis and schema comments.\n\nContains parameters for moderator, content target, action type, and time bounds; fully supports paginated result sets. Used by administrative and moderator interfaces for audit, sorting, and workflow management.","required":[]},"IPageIDiscussionBoardModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationLog"},"description":"Array of moderation log records matching the query/page request."}},"required":["pagination","data"],"description":"Paginated container type for moderation logs result sets. Implements the IPage generic documented in the system for listing entities. Used by administrative/moderator UIs to support paginated viewing of large audit trails.\n\nIncludes full moderation log entities (see IDiscussionBoardModerationLog) and pagination information for scalable navigation."},"IDiscussionBoardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the moderation log record, used for referencing, updates, and detailed lookup. Generated as a UUID string. Required per base schema."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who performed the action. References discussion_board_moderators.id.\n\nEnables traceability and compliance review for all moderation events."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID reference to the affected thread (if action was on a thread). Nullable for actions on posts, comments, or global moderation events. Required for proper audit but can be null for non-thread actions."},{"type":"null"}],"description":"UUID reference to the affected thread (if action was on a thread). Nullable for actions on posts, comments, or global moderation events. Required for proper audit but can be null for non-thread actions."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID reference to the affected post, if action directly targeted a post. Nullable for other types of events.\n\nUsed for pinpoint audit of post-level actions."},{"type":"null"}],"description":"UUID reference to the affected post, if action directly targeted a post. Nullable for other types of events.\n\nUsed for pinpoint audit of post-level actions."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID reference to the affected comment, if relevant. Nullable for actions not involving comments.\n\nSupports moderation specificity at the comment granularity."},{"type":"null"}],"description":"UUID reference to the affected comment, if relevant. Nullable for actions not involving comments.\n\nSupports moderation specificity at the comment granularity."},"action":{"type":"string","description":"Type of action performed (e.g., 'hide', 'delete', 'warn', 'edit'). Required for state tracking and compliance modeling.\n\nExclusively stores atomic event labels for each moderation activity."},"action_reason":{"oneOf":[{"type":"string","description":"Optional field for the moderator's justification for the action taken. Enables transparency and supports complex audit requirements. Free text. Nullable if action reason not provided."},{"type":"null"}],"description":"Optional field for the moderator's justification for the action taken. Enables transparency and supports complex audit requirements. Free text. Nullable if action reason not provided."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the moderation event occurred. Used for time-based queries, analytics, and compliance timelines. Required for every log record."}},"required":["id","moderator_id","action","created_at"],"description":"Entity type representing a single moderation log event. Aligns strictly with the discussion_board_moderation_logs table in schema. Each record is immutable and fully auditable as part of the moderation trail.\n\nIncludes foreign keys to moderator and relevant content object (thread, post, comment as applicable), a textual label for the moderation action, rationale, and a timestamp. Serves as the atomic unit for all moderation/audit analytics and history."},"IDiscussionBoardModerationLog.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator initiating the moderation event. Required for authorizing/moderation compliance."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target thread's UUID (nullable if not on thread)."},{"type":"null"}],"description":"Target thread's UUID (nullable if not on thread)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target post's UUID (nullable if not on a post)."},{"type":"null"}],"description":"Target post's UUID (nullable if not on a post)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target comment's UUID (nullable if not on a comment)."},{"type":"null"}],"description":"Target comment's UUID (nullable if not on a comment)."},"action":{"type":"string","description":"Type of moderation action as free text (permitted values: 'hide', 'delete', 'warn', 'edit', or other platform-defined actions)."},"action_reason":{"oneOf":[{"type":"string","description":"Optional moderator-issued rationale for this action. Enables transparency and audit compliance."},{"type":"null"}],"description":"Optional moderator-issued rationale for this action. Enables transparency and audit compliance."}},"required":["moderator_id","action"],"description":"Payload for creating a new moderation log event, as stored in discussion_board_moderation_logs. Used in POST operations for audit trail creation. Any relevant content references must be provided in the appropriate key fields, actions should match platform convention. All documentation aligns with Prisma schema and requirements analysis for moderation compliance."},"IDiscussionBoardModerationLog.IUpdate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator responsible for the log event. May be edited in error correction or reassignment scenarios."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID identifying target thread (nullable if not involving a thread)."},{"type":"null"}],"description":"UUID identifying target thread (nullable if not involving a thread)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing post involved; nullable for other targets."},{"type":"null"}],"description":"UUID referencing post involved; nullable for other targets."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing specific comment involved; nullable if not relevant."},{"type":"null"}],"description":"UUID referencing specific comment involved; nullable if not relevant."},"action":{"type":"string","description":"Type of action in log, e.g., 'delete', 'hide', 'warn', 'edit', per system-defined values."},"action_reason":{"oneOf":[{"type":"string","description":"Optional free-text rationale for the action. Transparent audit and compliance reasons may be attached."},{"type":"null"}],"description":"Optional free-text rationale for the action. Transparent audit and compliance reasons may be attached."}},"required":["moderator_id","action"],"description":"Update payload for moderation log record. Used for correcting or annotating log entries as permitted by the business process. Only fields present in the discussion_board_moderation_logs schema are allowed. All updates are consistent with audit trail integrity and historical review requirements."},"IDiscussionBoardWarning.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Filter results to warnings belonging to a specific member account (UUID string).\n\nEnables review of warnings for a particular user, supporting member management and audit."},"moderator_id":{"type":"string","format":"uuid","description":"Filter by moderator who issued the warning (UUID of moderator).\n\nPermits analytics or compliance review of moderation patterns."},"warning_type":{"type":"string","description":"Filter for type/category of warning (e.g., 'spam', 'harassment').\n\nSupports infraction analytics or type-based workflows."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for warning issue date (inclusive). Timestamp, ISO 8601 format."},{"type":"null"}],"description":"Lower bound for warning issue date (inclusive). Timestamp, ISO 8601 format."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for warning issue date (inclusive). Timestamp, ISO 8601 format."},{"type":"null"}],"description":"Upper bound for warning issue date (inclusive). Timestamp, ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter by deleted (soft-deleted) warnings, supports audit trails and moderation workflow; nullable to include all records."},{"type":"null"}],"description":"Filter by deleted (soft-deleted) warnings, supports audit trails and moderation workflow; nullable to include all records."},"page":{"type":"integer","minimum":1,"description":"Page number to retrieve in paginated results. Defaults to 1."},"limit":{"type":"integer","minimum":1,"description":"How many warning records to return in a single page (pagination parameter). System policy may cap."}},"description":"Search/filter request object for warnings issued to members. Maps directly to the audit and moderation management features documented in requirements, and to the structure of the discussion_board_warnings table.\n\nSupports compliance review, member behavior analytics, and moderation workflow for infractions. All filter fields correspond to searchable schema columns with appropriate types.","required":[]},"IPageIDiscussionBoardWarning":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardWarning"},"description":"Array of warning records for the query page."}},"required":["pagination","data"],"description":"Paginated result set for discussion board warnings. Implements the generic IPage container for paging through warning audit trails and moderation lists. Returned data array always consists of IDiscussionBoardWarning entities matching query."},"IDiscussionBoardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the warning entity (UUID). Used for referencing in workflows and audit analytics."},"member_id":{"type":"string","format":"uuid","description":"UUID referencing the member warned in this record, foreign key to discussion_board_members.id."},"moderator_id":{"type":"string","format":"uuid","description":"UUID referencing moderator who issued the warning (foreign key to discussion_board_moderators.id).\n\nEssential for compliance, audit trail, and accountability."},"warning_type":{"type":"string","description":"Warning type (e.g., 'spam', 'harassment'). Used for infraction categorization, escalation analytics, and workflow automation.\n\nPermitted values documented at the business-level policy."},"message":{"type":"string","description":"Human-readable moderator message to member. Provides rationale, evidence, or instruction. Free-text and required."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when warning was issued. Key for time-based analytics, escalation, and compliance/time-limited warnings."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable expiration timestamp for the warning (if temporary). If null, the warning is permanent until removed."},{"type":"null"}],"description":"Nullable expiration timestamp for the warning (if temporary). If null, the warning is permanent until removed."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp; set to hide or lift the warning while retaining audit history. Null if warning is active/present."},{"type":"null"}],"description":"Soft-delete timestamp; set to hide or lift the warning while retaining audit history. Null if warning is active/present."}},"required":["id","member_id","moderator_id","warning_type","message","created_at"],"description":"Entity representing a warning issued to a board member per moderation policy. Implements all requirements for auditability, escalation tracking, and compliance reversibility.\n\nWarning details cover target (member), issuing moderator, infraction type, message, timestamp, expiration semantics, and soft delete flag (supporting reversible removal). All documentation derived from requirements analysis and strict table schema."},"IDiscussionBoardWarning.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"UUID of target member receiving the warning. Required for all warning creation actions."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator issuing warning. Ensures compliance and trace auditability."},"warning_type":{"type":"string","description":"Atomic label for infraction type (e.g., 'harassment', 'spam').\n\nRequired for analytics and enforcement escalation."},"message":{"type":"string","description":"Human-facing message to the member from the moderator. Free text explaining rationale, evidence, or next step. Required."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional expiration timestamp (if warning is not permanent)."},{"type":"null"}],"description":"Optional expiration timestamp (if warning is not permanent)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional, used to immediately set a warning as deleted/lifted at creation (rare). Null for standard creation."},{"type":"null"}],"description":"Optional, used to immediately set a warning as deleted/lifted at creation (rare). Null for standard creation."}},"required":["member_id","moderator_id","warning_type","message"],"description":"Payload for POSTing a new warning. Required fields enforce business logic and compliance with moderation policy. Expiry and soft delete fields provided for administrative workflows per audit policy."},"IDiscussionBoardWarning.IUpdate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"UUID of member warned. Not updatable in practice except for administrative error correction."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator associated with warning; updatable for error correction/compliance."},"warning_type":{"type":"string","description":"Type/category of warning. Permits analytics or escalation workflows."},"message":{"type":"string","description":"Modification/correction of moderator-to-member message. Permitted for administrative corrections only."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Updated (or nullified) expiration for temporary warning."},{"type":"null"}],"description":"Updated (or nullified) expiration for temporary warning."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set/lift soft delete of warning; null means active, timestamp means removed/hidden as per audit/compliance."},{"type":"null"}],"description":"Set/lift soft delete of warning; null means active, timestamp means removed/hidden as per audit/compliance."}},"description":"Editable warning entity update for moderation workflows. Only schema properties permitted, all fields vetted for audit, error-repair, or soft delete behavior.\n\nBusiness logic must respect non-editability of creation timestamp and PK, and restrict soft delete changes to authorized roles only.","required":[]},"IDiscussionBoardBan.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Target banned member (UUID string from discussion_board_members).\n\nSupports filtering on a specific user's ban record(s)."},"moderator_id":{"type":"string","format":"uuid","description":"Moderator who issued the ban (references discussion_board_moderators).\n\nSupports compliance review of moderator activity."},"permanent":{"type":"boolean","description":"Filter to permanent (true) or temporary (false) bans.\n\nFacilitates review of enforcement patterns."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Earliest creation timestamp for ban inclusion (inclusive). ISO 8601 with time zone."},{"type":"null"}],"description":"Earliest creation timestamp for ban inclusion (inclusive). ISO 8601 with time zone."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Latest creation timestamp for ban inclusion (inclusive). ISO 8601 with time zone."},{"type":"null"}],"description":"Latest creation timestamp for ban inclusion (inclusive). ISO 8601 with time zone."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter bans by expiry timestamp. Useful for reviewing active, expired or soon-to-expire bans."},{"type":"null"}],"description":"Filter bans by expiry timestamp. Useful for reviewing active, expired or soon-to-expire bans."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Show only bans that have been lifted (soft-deleted), active (null), or all (null param)."},{"type":"null"}],"description":"Show only bans that have been lifted (soft-deleted), active (null), or all (null param)."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results, default 1."},"limit":{"type":"integer","minimum":1,"description":"Records per page (system default and maximum constraints apply)."}},"description":"Request object for querying/discovering ban records in the discussion_board_bans table. Enables advanced searching, auditing and workflow support for moderation and compliance. All filter parameters mapped precisely to schema fields or usage documented in requirements.","required":[]},"IPageIDiscussionBoardBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardBan"},"description":"Array of ban records for a query result page."}},"required":["pagination","data"],"description":"Paginated result page for ban record queries in the discussion board system. Follows IPage container format documented in system standard. Data always array of IDiscussionBoardBan type, aligned to query and audit needs."}}},"completed":104,"total":116,"step":0,"created_at":"2025-07-23T06:56:25.429Z"},"tokenUsage":{"facade":{"aggregate":{"total":1144559,"input":{"total":1074039,"cached":3840},"output":{"total":70520,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1144559,"input":{"total":1074039,"cached":3840},"output":{"total":70520,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1144559,"input":{"total":1074039,"cached":3840},"output":{"total":70520,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1144559,"input":{"total":1074039,"cached":3840},"output":{"total":70520,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardChannel.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"Filter by channel code. Should match the 'code' field on discussion_board_channels. Example: 'eco'."},"name":{"type":"string","description":"Filter by channel name. Should match the 'name' field on discussion_board_channels. Partial match is typically supported."},"description":{"type":"string","description":"Filter by channel description. Partial match search on 'description' column."},"created_at_from":{"type":"string","format":"date-time","description":"Return channels created after this timestamp (inclusive, UTC ISO 8601). Enables time-based filtering."},"created_at_to":{"type":"string","format":"date-time","description":"Return channels created before this timestamp (inclusive, UTC ISO 8601). Enables time-based filtering."},"updated_at_from":{"type":"string","format":"date-time","description":"Return channels updated after this timestamp (inclusive, UTC ISO 8601). Enables filter on last update time."},"updated_at_to":{"type":"string","format":"date-time","description":"Return channels updated before this timestamp (inclusive, UTC ISO 8601). Enables upper bound filtering."},"include_deleted":{"type":"boolean","description":"If true, include soft-deleted records (deleted_at is not null)."},"sort":{"type":"string","description":"Sort field (e.g., 'created_at', 'updated_at', 'name'). Direction can be specified as 'asc' or 'desc', e.g., 'created_at:desc'."},"page":{"type":"integer","description":"Page number for pagination. Defaults to 1.","minimum":1},"limit":{"type":"integer","description":"Records per page. Defaults to 100. Use for pagination.","minimum":1}},"description":"Request body for listing/filtering channels. Supports filtering by code, name, description, time ranges, including soft-deleted records, sorting, and pagination.\n\nAll fields correspond directly to atomic fields in the discussion_board_channels table. Does not include inline objects or references to foreign tables.\n\nMulti-paragraph description:\nThis object enables clients and admins to list, search, and filter discussion board channels in a structured, paginated way. It directly relates to features described in the requirements analysis around channel discovery, moderation, and admin control. Supports flexible UI querying by code, name, and soft-deletion state. Pagination and date-range parameters enable efficient handling of large channel sets in the admin console.","required":[]},"IPageDiscussionBoardChannel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardChannel"}}},"required":["pagination","data"],"description":"Paginated container for lists of discussion board channels.\n\nConforms to the IPage<T> pattern, where T is IDiscussionBoardChannel. Used in all paginated channel API results. Each page includes pagination metadata (current page, record counts) and an array of channel objects.\n\nDescription references requirements for audit-friendly, large-scale management of board structure and aligns with best practices for API pagination."},"IDiscussionBoardChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique channel identifier as a UUID string. Atomic and non-derived, used for referencing channels in all relations and APIs.\n\nThis field guarantees referential integrity and supports audit trails by uniquely identifying each channel entity."},"code":{"type":"string","description":"Unique channel code for addressing, navigation, and internal routing. Required and unique across all channels. Examples: 'pol', 'eco'. Enforced in database by unique constraint.\n\nThis property is used for clean URLs, cross-feature consistency, and admin selection interfaces."},"name":{"type":"string","description":"Human-friendly full channel name, used for selection, lists, and admin UI. Atomic and required. Example: 'Politics', 'Economics'.\n\nNot repeated or derived elsewhere; ensures normalization and clarity in content display."},"description":{"oneOf":[{"type":"string","description":"Channel description for display, discoverability, and search. Nullable atomic value, never repeated in other records. Example: 'Discussion of global economic issues.'\n\nSupports search UI, filtering, and summary views."},{"type":"null","description":"Channel description for display, discoverability, and search. Nullable atomic value, never repeated in other records. Example: 'Discussion of global economic issues.'\n\nSupports search UI, filtering, and summary views."}],"description":"Channel description for display, discoverability, and search. Nullable atomic value, never repeated in other records. Example: 'Discussion of global economic issues.'\n\nSupports search UI, filtering, and summary views."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp. UTC ISO 8601 datetime when the channel was created. Used for audit/compliance.\n\nField is set by the server on insert and never changes. Useful for sort/filter and analytics."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp. UTC ISO 8601. Reflects most recent admin or mod change to the channel entity.\n\nUsed for moderation history and change tracking."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp. Null if active, non-null if channel is soft-deleted (hidden, but recoverable).\n\nEnables compliance with audit/reversibility/non-destructive deletion requirements."},{"type":"null","format":"date-time","description":"Soft deletion timestamp. Null if active, non-null if channel is soft-deleted (hidden, but recoverable).\n\nEnables compliance with audit/reversibility/non-destructive deletion requirements."}],"description":"Soft deletion timestamp. Null if active, non-null if channel is soft-deleted (hidden, but recoverable).\n\nEnables compliance with audit/reversibility/non-destructive deletion requirements."}},"required":["id","code","name","created_at","updated_at"],"description":"Discussion Board Channel Entity.\n\nRepresents the top-level partition of the discussion board, e.g. 'Politics', 'Economics'. Implements features and business rules for channel-based organization, as documented in the requirements analysis. All fields are atomic, normalized, and strictly derived from the discussion_board_channels table.\n\nMultiple paragraphs:\nCore to organizing the forum, channels allow admins/moderators to divvy up content logically and manage access controls or promotional campaigns at the channel level. This type is used throughout channel management interfaces, in system audit logs, site config, and links all related sections and subforums.\n\nFull referential documentation of all fields is provided in the property descriptions, referencing original Prisma schema comments."},"IDiscussionBoardChannel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Required. New channel code, unique. Example: 'eco'."},"name":{"type":"string","description":"Required. Human-readable channel name. Example: 'Economics'."},"description":{"oneOf":[{"type":"string","description":"Optional. Channel description for search/discovery. Example: 'Discussion of global economic issues.'"},{"type":"null","description":"Optional. Channel description for search/discovery. Example: 'Discussion of global economic issues.'"}],"description":"Optional. Channel description for search/discovery. Example: 'Discussion of global economic issues.'"}},"required":["code","name"],"description":"Payload for creating a new channel entity.\n\nAll fields must conform to database constraints described in schema. Code must be unique per table rules, and name is required for user interface display. Description is optional and null indicates no channel description.\n\nThis object exactly matches the atomic, non-derived creation rules for top-level channels described in requirements analysis section 3 and original Prisma schema comments."},"IDiscussionBoardChannel.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"If present, updates the channel code. Must be unique; see schema for constraints."},"name":{"type":"string","description":"If present, sets a new human-friendly name for the channel."},"description":{"oneOf":[{"type":"string","description":"Optional update for channel's description. Null to unset."},{"type":"null","description":"Optional update for channel's description. Null to unset."}],"description":"Optional update for channel's description. Null to unset."}},"description":"Update payload for channel. Can change code, name, or description as allowed by schema. Partial/patch updates are permitted; all provided fields must map to atomic columns in the discussion_board_channels table.\n\nAttribute constraints as per creation rules apply (e.g., code uniqueness, non-null for code/name unless patch semantics permit).\n\nReferences creation/update flows in requirements, and business/validation requirements from original schema.","required":[]},"IDiscussionBoardSection.IRequest":{"type":"object","properties":{"discussion_board_channel_id":{"type":"string","format":"uuid","description":"Filter by parent channel (UUID). Required for channel-scoped section listing or hierarchy queries."},"code":{"type":"string","description":"Filter by unique section code within a channel. Example: 'markets'."},"name":{"type":"string","description":"Filter by section name. Partial match supported for search UIs."},"description":{"type":"string","description":"Search by section description. Enables full-text, partial, and filter-style queries."},"created_at_from":{"type":"string","format":"date-time","description":"Return sections created after this ISO datetime, inclusive."},"created_at_to":{"type":"string","format":"date-time","description":"Return sections created before this ISO datetime, inclusive."},"updated_at_from":{"type":"string","format":"date-time","description":"Return sections updated after this ISO datetime, inclusive."},"updated_at_to":{"type":"string","format":"date-time","description":"Return sections updated before this ISO datetime, inclusive."},"include_deleted":{"type":"boolean","description":"If true, soft-deleted sections (deleted_at != null) are included in search results."},"sort":{"type":"string","description":"Sort field (e.g., 'created_at', 'updated_at', 'name'), optionally with direction: 'created_at:desc'."},"page":{"type":"integer","description":"Page number for pagination. One-based. Defaults to 1.","minimum":1},"limit":{"type":"integer","description":"Records per page. Defaults to 100 for large boards.","minimum":1}},"description":"Request parameters for listing/filtering board sections. All properties map directly to base fields of the discussion_board_sections table.\n\nEnables admin/moderator UIs to query and manage sub-channel partitions, supporting all requirements for advanced search, dynamic content navigation, moderation, and admin review.","required":[]},"IPageDiscussionBoardSection":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSection"}}},"required":["pagination","data"],"description":"Paginated result object returning one page of section entities per board.\n\nImplements the IPage<T> wrapper for type-safe client/server interaction. Used throughout admin, moderation, and frontend interfaces for scalable board management and reporting."},"IDiscussionBoardSection":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this section. UUID style per standard board entity design."},"discussion_board_channel_id":{"type":"string","format":"uuid","description":"UUID foreign key: points to the parent channel entity. Required for all section relations and for enforcing hierarchy rules."},"code":{"type":"string","description":"Unique code within channel, used for routing and admin. See original schema comment for uniqueness scope."},"name":{"type":"string","description":"Descriptive section label for UI selection, admin listings, and search."},"description":{"oneOf":[{"type":"string","description":"Section description for display and discoverability. Optional and atomic."},{"type":"null","description":"Section description for display and discoverability. Optional and atomic."}],"description":"Section description for display and discoverability. Optional and atomic."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this section/chart entry. ISO 8601, UTC."},"updated_at":{"type":"string","format":"date-time","description":"Last update ISO 8601 timestamp. Used for audit and admin tracking."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp for moderation and compliance. Null means section is active; non-null means soft deleted."},{"type":"null","format":"date-time","description":"Soft-deletion timestamp for moderation and compliance. Null means section is active; non-null means soft deleted."}],"description":"Soft-deletion timestamp for moderation and compliance. Null means section is active; non-null means soft deleted."}},"required":["id","discussion_board_channel_id","code","name","created_at","updated_at"],"description":"Discussion Board Section Entity.\n\nProvides second-level forum partitioning within a channel as documented in the requirements analysis. All properties map directly to 1:1 database fields, and all relationships (parent channel) are expressed via foreign key.\n\nMultiple paragraph description formalizes section as child of channel, atomic, audit-ready, and fully aligned to the requirements around section management and operation. All property descriptions are referenced/derived from Prisma DB table, and 3NF normalization applies."},"IDiscussionBoardSection.ICreate":{"type":"object","properties":{"discussion_board_channel_id":{"type":"string","format":"uuid","description":"UUID of the parent channel this section will belong to. Must reference a valid discussion_board_channels entry (foreign key constraint)."},"code":{"type":"string","description":"Unique code for section within this channel. Example: 'markets'. Unique per channel for clean routing and admin configuration."},"name":{"type":"string","description":"Human-readable section name. Required for both admin and user UI navigation."},"description":{"oneOf":[{"type":"string","description":"Optional: Section description for search and admin reference."},{"type":"null","description":"Optional: Section description for search and admin reference."}],"description":"Optional: Section description for search and admin reference."}},"required":["discussion_board_channel_id","code","name"],"description":"Payload for section creation. Directly reflects the schema for discussion_board_sections table.\n\nAll required properties are atomic and needed for section insertion. Description is optional. This creation contract enforces referential integrity and aligns with both application and data layer requirements."},"IDiscussionBoardSection.IUpdate":{"type":"object","properties":{"discussion_board_channel_id":{"type":"string","format":"uuid","description":"Optionally update the parent channel for this section. Must be a valid UUID or null if no change."},"code":{"type":"string","description":"Update to code (unique within channel). Respects uniqueness constraint at channel level."},"name":{"type":"string","description":"Update to display name. Must remain unique within channel if applicable."},"description":{"oneOf":[{"type":"string","description":"Update description, or null to unset."},{"type":"null","description":"Update description, or null to unset."}],"description":"Update description, or null to unset."}},"description":"Update payload for board section entity. References atomic update of individual database columns.\n\nEnforces all channel and section uniqueness constraints, referential, and normalization requirements as per table specification. Required fields/primary key are resolved by path for update operations.","required":[]},"IDiscussionBoardConfiguration.IRequest":{"type":"object","properties":{"key":{"type":"string","description":"Filter by configuration key. Unique config setting identifier."},"value":{"type":"string","description":"Filter by configuration value (string or JSON, exact match or pattern depending on implementation)."},"created_at_from":{"type":"string","format":"date-time","description":"Created at lower bound filter (ISO 8601)."},"created_at_to":{"type":"string","format":"date-time","description":"Created at upper bound filter (ISO 8601)."},"updated_at_from":{"type":"string","format":"date-time","description":"Updated at lower bound."},"updated_at_to":{"type":"string","format":"date-time","description":"Updated at upper bound."},"sort":{"type":"string","description":"Sort field (e.g., 'created_at', 'updated_at', 'key'), optional direction (asc/desc) e.g., 'key:asc'."},"page":{"type":"integer","description":"Page number for pagination, 1-based.","minimum":1},"limit":{"type":"integer","description":"Records per page, default 100.","minimum":1}},"description":"Request object for listing and filtering configuration settings. Parameters support admin search and management of platform-level key/value pairs, referencing requirements around centralized configuration management, audit, and compliance.","required":[]},"IPageDiscussionBoardConfiguration":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardConfiguration"}}},"required":["pagination","data"],"description":"Paginated structure for configuration records, matching IPage<T> pattern where T=IDiscussionBoardConfiguration. Enables efficient admin-side review, sorting, and retrieval of potentially large key/value setting sets."},"IDiscussionBoardConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key, unique identifier for this configuration record. Atomic, 3NF-compliant, as required by admin audit and rollback scenarios."},"key":{"type":"string","description":"Unique configuration key. Directly implements platform feature flag or setting identifier. Required, used in all access/update queries per table schema."},"value":{"type":"string","description":"The configuration value as string or JSON blob. Implements actual setting to be interpreted by application logic. Fully atomic, never derived elsewhere."},"description":{"oneOf":[{"type":"string","description":"Optional: human-facing description for admin audit, review, and comprehension. Used only in dashboards and admin UIs."},{"type":"null","description":"Optional: human-facing description for admin audit, review, and comprehension. Used only in dashboards and admin UIs."}],"description":"Optional: human-facing description for admin audit, review, and comprehension. Used only in dashboards and admin UIs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of creation (UTC ISO 8601). Used for audit and compliance/correctness checking."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last change. Maintained for audit, rollback, and change trace/review."}},"required":["id","key","value","created_at","updated_at"],"description":"Discussion Board Configuration Key-Value Entity.\n\nImplements requirements around centralized configuration for board management. Atomic, normalized, and directly represents rows in discussion_board_configurations table. Key constraints (unique, immutable) are enforced at DB level per schema. Describes all advanced configuration management business logic identified in requirements analysis."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number (one-based index). Must be non-negative integer corresponding to current result page."},"limit":{"type":"integer","description":"Maximum number of records per page (per-request/requested limit). Default is 100. Must reflect actual current limit in effect for client view."},"records":{"type":"integer","description":"Total count of records matching query. Used for computing total pages, showing progress bars, and analytics."},"pages":{"type":"integer","description":"Total number of pages available, computed as ceiling(records/limit). Needed for client page navigation & UI presentation."}},"required":["current","limit","records","pages"],"description":"Pagination metadata for all IPage<T> paginated response wrappers.\n\nRecords the current paging state, result limits, and total record/page counts to support all admin, moderator, and regular paginated list UIs. Maps to business requirements for large forum data access, compliance, and client performance."}}},"completed":116,"total":116,"step":0,"created_at":"2025-07-23T06:59:55.178Z"},"tokenUsage":{"facade":{"aggregate":{"total":1229389,"input":{"total":1138065,"cached":3840},"output":{"total":91324,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1229389,"input":{"total":1138065,"cached":3840},"output":{"total":91324,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1229389,"input":{"total":1138065,"cached":3840},"output":{"total":91324,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1229389,"input":{"total":1138065,"cached":3840},"output":{"total":91324,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComplete","document":{"operations":[{"specification":"List, filter, and search discussion board channels using criteria such as channel code, name, and description. Supports advanced search, sorting by created_at or updated_at, and pagination. Results include detailed channel information as per the 'discussion_board_channels' schema: id (UUID), code (unique string), name (string), description (nullable string), created_at, updated_at, and deleted_at (nullable, for soft delete). Only fields present in the schema are included. Soft deletion is signaled by a non-null deleted_at value (records with deleted_at NOT NULL are considered soft deleted and may or may not be returned depending on client request). No references to created_by or similar non-schema fields.","description":"This operation retrieves a paginated, filtered list of all existing discussion board channels. The search query can filter by channel code, name, and description, supporting case-insensitive and partial matching (utilizing the indexed name and description fields). Sorting can be performed by created_at, updated_at, or other indexed fields. Useful for administrators and moderators to review channel structure, and for clients needing to display available channels for selection. Soft deletion is implemented via the 'deleted_at' field: channels with deleted_at NOT NULL are considered deleted but not removed from storage, supporting reversibility in line with audit and compliance requirements. The operation never references fields like created_by, updated_by, or is_deleted, as those do not exist in the schema. Only fields defined in the actual schema—id, code, name, description, created_at, updated_at, and deleted_at—can be retrieved. Related sections (discussion_board_sections) are not directly returned unless explicitly requested by the client or operation extension. The operation supports pagination and ordering but does not expose or process fields not present in the schema.","summary":"Retrieve a paginated, filtered list of discussion board channels (from discussion_board_channels table).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination options for retrieving channel list.","typeName":"IDiscussionBoardChannel.IRequest"},"responseBody":{"description":"Paginated, filtered results containing discussion board channels matching query filters.","typeName":"IPageDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels","method":"patch"},{"specification":"Retrieve a single discussion board channel by its unique ID. The ID must be a valid UUID corresponding to an existing row in 'discussion_board_channels'. The returned data includes all defined fields: id, code, name, description, created_at, updated_at, and deleted_at. Soft deletion is supported via deleted_at; if the row's deleted_at is not null, the record is considered soft deleted and may be excluded from default queries. Never reference fields outside the schema. Used for admin review, display, editing, or client details views.","description":"Retrieves the details of a specific discussion board channel identified by its unique ID. Returns all schema-defined properties: id (UUID), code (string), name (string), description (nullable string), created_at (datetime), updated_at (datetime), and deleted_at (nullable datetime indicating if the channel is soft-deleted). If the specified ID does not correspond to an existing or active channel (e.g., deleted_at is set and client only wants active), an error is returned. Fields such as created_by, updated_by, or any not present in the schema are never referenced. Related sections are not directly returned in this operation.","summary":"Get a single discussion board channel (from discussion_board_channels) by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the channel to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the selected discussion board channel.","typeName":"IDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels/{id}","method":"get"},{"specification":"Create a new discussion board channel by providing required fields: code (unique string), name (string), and optional description. Upon creation, the system records created_at and updated_at timestamps. Only the schema-defined fields are processed; created_by and similar non-existent schema fields must never be referenced. Record is initially not soft deleted (deleted_at is null). Returns the created channel object including all defined fields.","description":"Creates a new discussion board channel with the specified code, name, and optional description. The returned object includes id, code, name, description (nullable), created_at, updated_at, and (null) deleted_at. The operation enforces uniqueness constraints on code. created_by and updated_by fields are not handled, as they are not defined in the schema. On success, returns the full discussion_board_channels object reflecting the stored state.","summary":"Create a new discussion board channel (discussion_board_channels).","parameters":[],"requestBody":{"description":"Required and optional fields for creating a discussion board channel.","typeName":"IDiscussionBoardChannel.ICreate"},"responseBody":{"description":"The created discussion board channel object.","typeName":"IDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels","method":"post"},{"specification":"Update an existing discussion board channel using its ID. The client provides new values for code, name, or description. Only fields defined in the schema (code, name, description) are allowed to be updated. updated_at is set to the modification time. If updating a soft-deleted row (deleted_at not null), the operation can either fail or require explicit restoration logic (not handled here). No references to non-existent schema fields such as updated_by, created_by, or is_deleted. Returns the updated channel object.","description":"Updates the properties (code, name, description) of an existing discussion board channel identified by ID. Only code, name, and description can be updated, per the schema. The operation also updates the updated_at timestamp. If the specified ID does not correspond to an existing channel or if soft deleted (deleted_at not null), the operation may fail unless a restoration process is specified elsewhere. Returns the full updated channel object. No references to fields outside the actual schema are permitted.","summary":"Update an existing discussion board channel (discussion_board_channels) by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the channel to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update (code, name, description) in the channel.","typeName":"IDiscussionBoardChannel.IUpdate"},"responseBody":{"description":"The updated discussion board channel object.","typeName":"IDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels/{id}","method":"put"},{"specification":"Delete (soft delete) a discussion board channel using its ID. The deleted_at field (nullable datetime) is set to the current time to indicate soft deletion. The record is not actually removed from the database, supporting reversibility and audit requirements per schema definition. The operation never references fields outside the schema (e.g., deleted_by, is_deleted, or removal logs). On success, returns the updated channel object with deleted_at set. If deleted_at is already set, returns an error or unchanged.","description":"Performs a soft delete of a discussion board channel by marking its deleted_at timestamp. The record remains in the database, compliant with auditability rules, and can be restored by clearing deleted_at (handled elsewhere). No permanent removal occurs. Deletes referencing only the schema-defined field deleted_at; any attempt to reference fields like deleted_by, is_deleted, or similar will fail. Returns the full channel record after marking deleted_at, or an error if already deleted.","summary":"Soft delete a discussion board channel (set deleted_at in discussion_board_channels).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the channel to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Channel object after soft deletion (deleted_at set).","typeName":"IDiscussionBoardChannel"},"authorizationRoles":null,"path":"/discussionBoard/channels/{id}","method":"delete"},{"specification":"List, filter, and search discussion board sections. Sections are always linked to a parent channel via discussion_board_channel_id. This operation supports advanced search and pagination. Only schema fields (id, discussion_board_channel_id, code, name, description, created_at, updated_at, deleted_at) are processed. Soft deletion is implemented via deleted_at: soft-deleted rows may be included or excluded depending on query parameters. No use of non-existent fields (e.g., created_by, updated_by, or is_deleted).","description":"Retrieves a paginated, filtered list of all discussion board sections. Filter options may include channel association (discussion_board_channel_id), section code, or name; supports efficient search and partial match queries. Sorting may be performed by created_at or updated_at. Returns full details as defined in the schema: id, discussion_board_channel_id, code, name, description, created_at, updated_at, deleted_at. Soft deletion is based on deleted_at: if set, the section is not visible by default unless specifically requested. Fields not in the schema (e.g., is_deleted) are never accessed. This operation is typically used by moderators or admins to manage board structure and organization.","summary":"Retrieve a paginated, filtered list of discussion board sections (discussion_board_sections).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination options for section search.","typeName":"IDiscussionBoardSection.IRequest"},"responseBody":{"description":"Paginated, filtered list of discussion board sections.","typeName":"IPageDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections","method":"patch"},{"specification":"Retrieve details for a single discussion board section by its unique ID. Only defined schema fields may be retrieved: id, discussion_board_channel_id, code, name, description, created_at, updated_at, and deleted_at. If the section is soft deleted (deleted_at not null), client may receive an error or an object indicating such. No non-schema fields may be referenced. Used for editing, reviewing, or displaying details.","description":"Fetches the details of a specific discussion board section by its unique ID. Returns all schema-defined fields: id, discussion_board_channel_id (foreign key to parent channel), code, name, description, created_at, updated_at, deleted_at (for soft deletion). Soft-deleted sections may or may not be included in results depending on policy. Any request for non-existent fields (e.g., created_by, is_deleted) will result in an error. Designed for use in admin or moderator UIs and detail pages.","summary":"Get a single discussion board section (from discussion_board_sections) by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the section to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the selected discussion board section.","typeName":"IDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections/{id}","method":"get"},{"specification":"Create a new discussion board section within a channel. Required fields: discussion_board_channel_id (UUID), code (unique per channel), name (string), optional description. created_at and updated_at are set automatically. Only fields present in the schema may be provided/returned. Returns the created section object including all defined fields.","description":"Creates a new discussion board section associated with a parent channel, providing code, name, and optional description. Requires discussion_board_channel_id (must reference an existing channel). All returned fields are as defined in the schema: id (UUID), discussion_board_channel_id, code, name, description, created_at, updated_at, deleted_at (which is null upon creation). created_by and other non-schema fields are not handled. Ensures integrity and atomic representation of each property. Returns the newly created section object upon success.","summary":"Create a new discussion board section (discussion_board_sections).","parameters":[],"requestBody":{"description":"Required/optional data for section creation (channel association, code, name, description).","typeName":"IDiscussionBoardSection.ICreate"},"responseBody":{"description":"The created discussion board section object.","typeName":"IDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections","method":"post"},{"specification":"Update an existing discussion board section by ID. Allows updating code, name, description, channel association, or other schema-defined fields. Only the specified schema fields are accepted and updated (no references to non-existent fields). updated_at is set appropriately. Returns the updated section object upon success.","description":"Updates the details of an existing discussion board section specified by ID. Updatable fields are as per the schema: code, name, description, and potentially channel association (discussion_board_channel_id). updated_at is set to the new modification time. Does not handle fields outside the schema, including created_by, updated_by, or is_deleted. Soft-deleted rows (deleted_at set) will only be updated if restore logic is separately defined or requested. Returns the updated section object. Used for admin and moderator interfaces.","summary":"Update a discussion board section (discussion_board_sections) by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the section to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the section (including code, name, description, channel association).","typeName":"IDiscussionBoardSection.IUpdate"},"responseBody":{"description":"The updated discussion board section object.","typeName":"IDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections/{id}","method":"put"},{"specification":"Delete (soft delete) a discussion board section by ID. The deleted_at field is used for soft delete: set to the current timestamp. No actual record removal from the database. Only the deleted_at field is updated; no use of non-existent deletion fields. Returns section object with deleted_at set upon success, or error on preexisting soft delete.","description":"Soft deletes a discussion board section by marking its deleted_at timestamp. Does not physically remove the section from the database, ensuring reversibility for audit and regulatory compliance. The operation returns the updated section object with deleted_at set, as defined in the schema. Fields such as deleted_by, is_deleted, or hard-delete logs are not handled, as they do not exist in the schema. Designed for moderation or admin actions with full auditability.","summary":"Soft delete a discussion board section (set deleted_at in discussion_board_sections).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the section to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Section object after setting deleted_at.","typeName":"IDiscussionBoardSection"},"authorizationRoles":null,"path":"/discussionBoard/sections/{id}","method":"delete"},{"specification":"List, filter, and search global discussion board configurations. Enables admins and moderators to retrieve key-value setting definitions for platform features. All fields are atomic, as per the schema: id, key (unique), value (string), description (nullable), created_at, updated_at. Pagination and ordering supported. No soft delete: as deleted_at does not exist in this schema.","description":"Retrieves a paginated, filtered list of discussion board configuration settings. Supports filtering by key, value, or description (case-insensitive, supports partial match), as well as sorting by created_at or updated_at. No pagination on soft-deletion, as there is no deleted_at; all records are considered active. Only schema-defined fields are retrieved: id, key, value, description, created_at, updated_at. Never references fields such as is_deleted or deleted_at, as these do not exist. Used for admin dashboards, platform feature toggling overview, and audit.","summary":"Retrieve list of board configuration key-values (discussion_board_configurations table).","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for configuration list retrieval.","typeName":"IDiscussionBoardConfiguration.IRequest"},"responseBody":{"description":"Paginated, filtered list of discussion board configurations.","typeName":"IPageDiscussionBoardConfiguration"},"authorizationRoles":null,"path":"/discussionBoard/configurations","method":"patch"},{"specification":"Retrieve a single discussion board configuration by its unique ID. The returned fields are strictly those defined in the schema: id, key, value, description, created_at, updated_at. No soft deletion is possible as deleted_at does not exist in this model. Used for editing or displaying configuration details to administrators. Any request for deleted_at or other non-schema fields results in error.","description":"Fetches the details of a specific discussion board configuration item by unique ID. Returns all fields from the schema: id, key, value, description (nullable), created_at, updated_at. No deleted_at field exists here, so hard delete or soft delete is not supported. This operation is essential for admin interfaces modifying or reviewing board configuration, and never exposes or refers to non-schema fields.","summary":"Get a single discussion board configuration by ID (from discussion_board_configurations).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the configuration to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The selected board configuration item.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":null,"path":"/discussionBoard/configurations/{id}","method":"get"},{"specification":"Create a new configuration entry in the discussion_board_configurations table. Only fields present in the schema should be referenced. This operation creates a new global key-value configuration for the discussion board, including key, value, description (optional), and current timestamps. No soft delete for creation operation. Admin permissions required.","description":"This endpoint allows administrators to create a new configuration item for the discussion board system. The configuration stores a unique key, its value, and an optional description to document the setting's purpose. The operation adheres strictly to the fields in the discussion_board_configurations schema: id (auto-generated, not client-set), key, value, description (optional), created_at and updated_at (server-generated). Key uniqueness is enforced, and the endpoint does not reference any non-existent or inferred columns. The configuration is used for site-wide settings such as feature toggles or limits. All parameters must match the table's definition, and business logic must ensure atomicity per row. If a submitted key duplicates an existing configuration, an error is returned. This API should be restricted to system administrators as it affects global board configuration. There is no soft-delete support for create operations. Related: see update, delete, and get endpoints for configuration management.","summary":"Creates a configuration entry in discussion_board_configurations table.","parameters":[],"requestBody":{"description":"Payload for creating a configuration entry. Only includes fields from the schema: key, value, optional description.","typeName":"IDiscussionBoardConfiguration.ICreate"},"responseBody":{"description":"Returns the created configuration entry as per the discussion_board_configurations schema.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations","method":"post"},{"specification":"Update an existing configuration entry in discussion_board_configurations, referencing only actual schema fields. This operation modifies the value and/or description for a configuration identified by id. It does not reference deleted_at (which does not exist). Admin permissions are enforced. Only fields: key, value, description, updated_at are relevant for update; created_at and id are not client-settable.","description":"This endpoint allows administrators to update an existing configuration entry for the discussion board system, uniquely identified by its id. The only updatable fields, matching the actual schema, are value and description (optionally), while the key remains unique and unmodifiable after creation. Attempting to update fields outside of the schema (such as deleted_at) is strictly forbidden. The updated_at timestamp is managed by the server to reflect update time. If the id does not reference an existing entry, an error is returned. This action is limited to admin-level users, as global configurations directly impact board behavior.","summary":"Updates configuration entry in discussion_board_configurations by id.","parameters":[{"name":"id","description":"Target configuration's unique id for update, as per table PK.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload to update a configuration entry. Only value and description are updatable, per schema.","typeName":"IDiscussionBoardConfiguration.IUpdate"},"responseBody":{"description":"Returns the updated configuration entry as per the discussion_board_configurations schema.","typeName":"IDiscussionBoardConfiguration"},"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations/{id}","method":"put"},{"specification":"Delete a configuration entry from the discussion_board_configurations table by id. No soft-delete is supported (no deleted_at column). This is a hard delete operation, permanently removing the row. Authorization is restricted to administrators.","description":"This endpoint permanently deletes a configuration entry from the discussion_board_configurations table, using the row's id as the path parameter. Since there is no deleted_at or soft-delete support in the schema, this action immediately removes the record from the database. The operation should be restricted to administrators due to the impact on global board configuration. The id path parameter must represent a valid existing configuration's primary key. All references are strictly to fields in the schema; no unsupported columns are mentioned.","summary":"Deletes (hard delete) a configuration entry by id from discussion_board_configurations.","parameters":[{"name":"id","description":"Target configuration's unique id for deletion, as per table PK.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/configurations/{id}","method":"delete"},{"specification":"Query (list/search) guest sessions from discussion_board_guests table. Supports paging, filtering, and sorting on fields present in the schema (id, session_token, ip_address, user_agent, created_at, expires_at). Do NOT reference non-existent fields. Guest sessions are passive browsing records, not accounts.","description":"Returns a list of guest session records (not user accounts) with optional search filters. Only the following fields can be used for filtering, pagination, or sorting: id, session_token, ip_address, user_agent, created_at, expires_at. This is NOT for authentication, but to support admin analytics, abuse tracking, or rate limiting. Each guest record is traceable for browsing-only sessions, in accordance with the schema. No non-existent or derived fields are referenced.","summary":"Query/search guest browsing sessions from discussion_board_guests table.","parameters":[],"requestBody":{"description":"Search/filter/pagination parameters targeting actual guest fields: id, session_token, ip_address, user_agent, created_at, expires_at.","typeName":"IPageDiscussionBoardGuest.IRequest"},"responseBody":{"description":"Paginated list of guest session records, structured per the schema.","typeName":"IPageDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests","method":"patch"},{"specification":"Get a single guest session by id from discussion_board_guests table. Path parameter id must match schema's PK. No authentication or login is possible for guests (guests do not have accounts); this enables admin analytics or audit only.","description":"Returns the detail of a guest session record identified by id, using only properties present in the discussion_board_guests schema. This is for administrative or analytic access—not login. If the id does not reference an actual guest record, a not-found error is returned. Only schema fields are returned (id, session_token, ip_address, user_agent, created_at, expires_at). No non-existent or authentication-related properties are referenced.","summary":"Retrieve a single guest browsing session by id (PK) from discussion_board_guests.","parameters":[{"name":"id","description":"The primary key id of the guest session to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail guest session record, as per discussion_board_guests schema.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests/{id}","method":"get"},{"specification":"Create a guest browsing session record in discussion_board_guests table. Only schema fields are referenced: session_token, ip_address, user_agent (optional), created_at, expires_at. No password or authentication is possible; these are not user accounts.","description":"Creates a new guest browsing session record, storing session token, IP address, optional user agent, and valid time range. All values must match the schema's types and constraints. This endpoint is NOT for user authentication or guest login (guests are not accounts, but passive session records). Session token uniqueness is enforced and duplicate attempts will result in an error. Access should be restricted to server-side instrumentation or admin tools. No fields outside the schema may be referenced or returned.","summary":"Create a guest browsing session record in discussion_board_guests table.","parameters":[],"requestBody":{"description":"Fields to create a guest session: session_token, ip_address, optional user_agent, created_at, expires_at.","typeName":"IDiscussionBoardGuest.ICreate"},"responseBody":{"description":"The created guest session record as per discussion_board_guests schema.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests","method":"post"},{"specification":"Update a guest session record by id in discussion_board_guests. Permitted fields to update are session_token, ip_address, user_agent, expires_at as per schema (id and created_at cannot be changed). No authentication—guests are not users. Used for admin session corrections/analytics only.","description":"Updates an existing guest browsing session's metadata. Only valid schema fields are modifiable: session_token, ip_address, user_agent, expires_at. The id path parameter references the target session (primary key); created_at and id are immutable. This is not for authentication or login, but for correcting passive session data for analytics, abuse prevention, or logging. Fields not in schema must not be referenced. If session_token is changed to duplicate another, a conflict error is returned. Administrative access required.","summary":"Update a guest session by id; only schema fields updated.","parameters":[{"name":"id","description":"Target guest session's PK for update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update: session_token, ip_address, user_agent, expires_at. All values must match schema.","typeName":"IDiscussionBoardGuest.IUpdate"},"responseBody":{"description":"The updated guest session record as per discussion_board_guests schema.","typeName":"IDiscussionBoardGuest"},"authorizationRoles":["administrator"],"path":"/discussionBoard/guests/{id}","method":"put"},{"specification":"Delete (hard delete) a guest session from discussion_board_guests by id (PK). No deleted_at field in schema, so this is a permanent removal. Guests are passive analytic/browsing objects, not users. Admin authorization enforced.","description":"Permanently deletes the guest session identified by id from the discussion_board_guests table. Since there is no deleted_at (soft delete) field in the schema, this operation removes the record irreversibly. The id path parameter must be a valid PK for a guest record. This endpoint supports only admin access and cannot be used for user (member) actions. Operation impacts audit trails and may inform anti-abuse policies.","summary":"Delete (hard/permanent) a guest session record by id from discussion_board_guests table.","parameters":[{"name":"id","description":"Unique PK id of guest session to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/guests/{id}","method":"delete"},{"specification":"Query (list/search) member (registered user) accounts in discussion_board_members table, with filters only on schema fields (id, username, email, display_name, profile_image_url, is_active, created_at, updated_at, deleted_at). Soft-deleted records can be shown with deleted_at property, as per schema. Admin-only access.","description":"Returns a paginated or filtered list of registered member accounts held in discussion_board_members. Permissible search and filter fields are only those present in the schema: id, username, email, display_name, profile_image_url (optional), is_active, created_at, updated_at, and deleted_at (for soft-deleted records). Authentication credentials (hashed_password) must not be shown or filtered on. This endpoint supports analytics, moderation, and user management—only for admins. No additional fields, such as non-existent audit columns, are referenced. Results include both active and (optionally) soft-deleted records for compliance audits.","summary":"Query/search member accounts (registered users) from discussion_board_members table.","parameters":[],"requestBody":{"description":"Supports search, paging, and filter on member accounts. Only schema fields allowed: id, username, email, display_name, profile_image_url, is_active, created_at, updated_at, deleted_at.","typeName":"IPageDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated member account results, including soft-deleted records as per schema.","typeName":"IPageDiscussionBoardMember"},"authorizationRoles":["administrator"],"path":"/discussionBoard/members","method":"patch"},{"specification":"Get a single member account (registered user) by id from discussion_board_members. Path parameter is schema PK. Only fields present in schema included in output: id, username, email, display_name, profile_image_url, is_active, created_at, updated_at, deleted_at, authentication credentials (hashed_password) never returned.","description":"Returns the detail of a registered member's account by unique id. Output includes only schema fields: id, username, email, display_name, profile_image_url (optional), is_active, created_at, updated_at, deleted_at (optional/if soft-deleted). hashed_password is never returned or output in the response. Members are the main registered users, capable of posting and interacting on the board. If the id does not correspond to an existing record, a not-found result is returned. Admin-only access.","summary":"Retrieve member account details (by id/PK) from discussion_board_members table.","parameters":[{"name":"id","description":"The primary key id of the member account to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Member account record (details) per discussion_board_members schema (no hashed_password in output).","typeName":"IDiscussionBoardMember"},"authorizationRoles":["administrator"],"path":"/discussionBoard/members/{id}","method":"get"},{"specification":"Create a new registered member account (user) in discussion_board_members. Only fields: username, email, hashed_password, display_name, profile_image_url (optional), is_active, created_at, updated_at (managed by server). Cannot set deleted_at (soft delete) or id directly. Unique constraints on username/email are enforced. Admin/registration context only.","description":"Creates a new registered member account (user), accepting fields: username, email, hashed_password, display_name, and (optionally) profile_image_url, all per the strict type/constraints in schema. is_active flag must be set explicitly. Timestamps (created_at, updated_at) are managed by the server. Neither id nor deleted_at are supplied by the client. The system enforces uniqueness on username/email. Admin-only or registration endpoint; hashed_password is never output in results or logs. No unsupported properties may be referenced.","summary":"Create a new member account record in discussion_board_members table.","parameters":[],"requestBody":{"description":"Create member account request body. Schema fields: username, email, hashed_password, display_name, profile_image_url (optional), is_active.","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"The created member account as per schema (never returns hashed_password field).","typeName":"IDiscussionBoardMember"},"authorizationRoles":["administrator"],"path":"/discussionBoard/members","method":"post"},{"specification":"Update an existing member account in discussion_board_members by id. Updatable fields: username, email, display_name, profile_image_url, is_active, and (optionally) hashed_password. id, created_at, updated_at, and deleted_at are server-managed and cannot be modified directly. This operation references only physical schema fields and supports soft-delete for reversibility.","description":"Updates a registered member account's information (found by id/PK). Updatable fields are username, email, display_name, profile_image_url, is_active, and, if needed, hashed_password. The response returns the post-update state (excluding hashed_password). Non-updatable columns (id, created_at, updated_at, deleted_at) are managed by the system and not client-settable. This endpoint is for administration or account management only, strictly references real fields. Uniqueness constraints for username/email apply. If username/email conflict with existing records, a conflict error is raised. hashed_password updates require additional verification (per policy).","summary":"Update member account record by id (registered user, admin-only) in discussion_board_members table.","parameters":[{"name":"id","description":"Target member's unique id (PK) for update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update member account body: may include username, email, display_name, profile_image_url, is_active, and/or hashed_password, all matching schema types.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"Updated member account details (no hashed_password in response as per schema/business logic).","typeName":"IDiscussionBoardMember"},"authorizationRoles":["administrator"],"path":"/discussionBoard/members/{id}","method":"put"},{"specification":"Implements member hard/soft deletion logic. Delete the specified member by their unique id field (String, UUID). If the discussion_board_members table contains a deleted_at field (as per schema), this operation will perform a soft delete by setting deleted_at to the current timestamp. If the field does not exist, it will perform a hard delete (permanently removing the member row). No other fields except id and deleted_at are referenced, per the hard/soft deletion CRITICAL INSTRUCTIONS. No non-existing fields are referenced.","description":"This operation deletes a member from the discussion board system by their unique id as defined in the discussion_board_members table. If the table includes a deleted_at field (as verified in the schema), the API will perform a soft deletion by updating only this field to the current timestamp, effectively making the account inactive and invisible to general users while preserving it for audit and reversibility. If the deleted_at field does not exist, a hard delete will be executed, removing the member permanently from the database.\n\nNo other fields are considered, as required by CRITICAL INSTRUCTIONS. The id field is always required and must be a UUID string matching the member's table row. The API never references fields not in the schema. Deletion events should be logged for compliance but are handled at the API layer.\n\nThis deletion operation supports the enforcement of right-to-be-forgotten or admin/moderator-triggered removals, depending on platform policies. Related content (threads, posts, comments) is not automatically deleted by this operation but application-side cascading or manual review may be required as a follow-up business process.","summary":"Deletes a member account by id (soft delete using deleted_at if field exists; otherwise hard delete) in discussion_board_members table.","parameters":[{"name":"id","description":"The unique identifier (UUID string) of the discussion_board_member to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/members/{id}","method":"delete"},{"specification":"Implements list/search for moderator roles. Retrieve a filtered or paginated list of moderator assignments from discussion_board_moderators using PATCH, supporting search or filter criteria in the request body. All referenced fields (assigned_at, revoked_at, id, member_id) are present in the schema. Do not reference fields not in schema.","description":"This API operation lists moderator assignments (role escalation records) in the system via a PATCH call for advanced search/filter. Only fields available in the discussion_board_moderators table (id, member_id, assigned_at, revoked_at) may be used in filters or results. Pagination or search criteria can be included in the request body. No fields not existing in the schema are referenced.\n\nTypical usages include searching for active or past moderators, filtering by assignment or revocation timestamps, and showing paginated lists for admin review. This supports admin operational needs and role assignment auditing per requirements. All filtering or search logic is based on schema fields only.","summary":"Lists or searches moderator assignments (discussion_board_moderators) using PATCH and request body filters.","parameters":[],"requestBody":{"description":"Optional search or filter criteria using only id, member_id, assigned_at, revoked_at.","typeName":"IModeratorSearchRequest"},"responseBody":{"description":"Paginated result or array of moderator assignment entities matching search.","typeName":"IPageDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators","method":"patch"},{"specification":"Fetch a moderator assignment record by primary key (id) from discussion_board_moderators. Only references id, member_id, assigned_at, revoked_at, as these are present per schema. Strictly avoids referencing fields not defined in Prisma model.","description":"This GET operation retrieves a single moderator role assignment entity from discussion_board_moderators using its unique id as the path parameter. The response will include only schema-defined fields (id, member_id, assigned_at, revoked_at), reflecting all moderation role metadata. This supports admin auditing, operational review, or detailed UI views of moderator assignments. No non-existent fields are referenced at any point. Success returns moderator assignment or 404 if not found. Access is controlled for administrator roles only.","summary":"Fetch a discussion_board_moderators entry by its id (returns id, member_id, assigned_at, revoked_at only).","parameters":[{"name":"id","description":"UUID of moderator assignment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment entity record from discussion_board_moderators.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators/{id}","method":"get"},{"specification":"Creates a new moderator role assignment by inserting a record into discussion_board_moderators. Only accepts and stores fields present in the schema: id (auto), member_id (required, FK), assigned_at (set to now). Never invent fields or use properties not in schema. Application is expected to generate id and assigned_at on insertion if not specified.","description":"POST to /discussionBoard/moderators creates a new moderator assignment, escalating a member to moderator status. The request body must provide required fields (member_id) as defined in schema. No fields outside the model (id, member_id, assigned_at, revoked_at) are involved. On success, returns newly created moderator assignment entry. Uniqueness is enforced on member_id as per schema. Access restricted to administrator. Required for granting moderator privileges in user management flows.","summary":"Assigns moderator role to a member (creates discussion_board_moderators record).","parameters":[],"requestBody":{"description":"Information for moderator assignment; member_id is required.","typeName":"IModeratorCreate"},"responseBody":{"description":"Moderator assignment record created.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators","method":"post"},{"specification":"Updates a moderator role assignment entry by id, using only fields actually present in discussion_board_moderators schema: member_id, assigned_at, revoked_at. Does not reference fields not in schema (follows CRITICAL INSTRUCTIONS).","description":"PUT to /discussionBoard/moderators/{id} updates an existing role assignment. The path parameter id indicates the target moderator assignment. Only the fields present in schema (member_id, assigned_at, revoked_at) can be updated; all must be referenced by their schema names. Modifying revoked_at allows for deactivating or reactivating moderator role. Never invent or reference non-schema properties. Success returns updated entity, or 404 if not found. Access controlled for administrator only.","summary":"Update an existing moderator role assignment by id (fields: member_id, assigned_at, revoked_at).","parameters":[{"name":"id","description":"UUID of moderator assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Defines new values for updatable fields (member_id, assigned_at, revoked_at) according to schema.","typeName":"IModeratorUpdate"},"responseBody":{"description":"Updated moderator assignment entity.","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators/{id}","method":"put"},{"specification":"Deletes a moderator role assignment by its id. The discussion_board_moderators table does not have a soft delete field (no deleted_at), so this is a hard delete (permanent removal). Only id is referenced, as defined in schema. All description references only actual schema fields.","description":"DELETE to /discussionBoard/moderators/{id} removes the moderator role assignment identified by the id path parameter. As the schema for discussion_board_moderators does not define a soft-delete or deleted_at field, this operation performs a hard delete, removing the entity from the table entirely with no reversibility. All description and logic reference only the id property in the schema according to CRITICAL INSTRUCTIONS. Access is restricted to administrator role.","summary":"Deletes a moderator assignment by id directly (hard delete, as no deleted_at field in schema).","parameters":[{"name":"id","description":"UUID primary key of moderator assignment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/moderators/{id}","method":"delete"},{"specification":"Lists or searches administrator assignments using PATCH for advanced query/filter. Pulls all records from discussion_board_administrators using only schema fields: id, member_id, assigned_at, revoked_at. PATCH request body allows filters strictly on those fields (never any created/updated_by/etc).","description":"This PATCH operation lists administrator assignments or searches using advanced filters, directly querying discussion_board_administrators for only schema-defined fields: id, member_id, assigned_at, revoked_at. The PATCH request body supplies filter or pagination criteria based only on those attributes. The endpoint supports admin dashboards, compliance review, or auditing of administrator role history. No unknown fields are referenced at any stage. Returns paginated or filtered results array. Access restricted to administrator users.","summary":"List/search administrator assignments from discussion_board_administrators with PATCH (fields: id, member_id, assigned_at, revoked_at).","parameters":[],"requestBody":{"description":"Optional filtering/query criteria (uses only id, member_id, assigned_at, revoked_at).","typeName":"IAdministratorSearchRequest"},"responseBody":{"description":"List or page of administrator assignments matching query.","typeName":"IPageDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators","method":"patch"},{"specification":"Fetch an administrator assignment record by id (primary key) from discussion_board_administrators. Returns only fields present in schema (id, member_id, assigned_at, revoked_at).","description":"GET /discussionBoard/administrators/{id} retrieves a detailed administrator assignment entity, querying by id (UUID) path parameter. Only fields in discussion_board_administrators schema (id, member_id, assigned_at, revoked_at) are included in the response. Operation supports admin role management dashboards, auditing, and direct entity queries. All referenced schema fields are required for output; no additional or non-existent fields mentioned. Strict access control for administrator role applies.","summary":"Retrieve an administrator assignment record by id (fields: id, member_id, assigned_at, revoked_at).","parameters":[{"name":"id","description":"UUID of administrator assignment to look up.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator assignment record from discussion_board_administrators.","typeName":"IDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators/{id}","method":"get"},{"specification":"Assigns administrator role to a member by creating an entry in discussion_board_administrators. The request body must supply the member_id (the member to assign as administrator). Only uses schema fields id (auto or supplied), member_id, assigned_at, revoked_at. Never references fields not defined by the Prisma model.","description":"POST operation at /discussionBoard/administrators adds a new administrator role assignment. The request body includes member_id as required by the schema; on creation, assigned_at is set automatically or from supplied value. id may be supplied or auto-generated. No additional properties are referenced or permitted. This is required for elevating user privileges to administrator, complying with business logic for privilege management. Success returns the stored administrator assignment record. Access is restricted to existing administrators.","summary":"Assign a discussion_board_member as administrator (creates in discussion_board_administrators table).","parameters":[],"requestBody":{"description":"Payload with member_id as required for new administrator assignment (id, assigned_at, revoked_at optional).","typeName":"IAdministratorCreate"},"responseBody":{"description":"Administrator assignment entity created and stored.","typeName":"IDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators","method":"post"},{"specification":"Updates an administrator assignment entity by its id. Payload may update any field existing in schema (member_id, assigned_at, revoked_at); does not reference non-schema properties. Returns updated entity.","description":"PUT to /discussionBoard/administrators/{id} updates the administrator assignment identified by id path parameter. Only fields present in schema (member_id, assigned_at, revoked_at) may be modified by the request body. On success returns updated entity, access restricted to administrator role holders. All field references are strictly per model definition without invention. Used for transferring, revoking, or modifying administrator role assignments per organizational needs.","summary":"Update an administrator assignment entity by id, only using schema fields member_id, assigned_at, revoked_at.","parameters":[{"name":"id","description":"UUID of administrator assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Body for updating assignment: member_id, assigned_at, revoked_at per model.","typeName":"IAdministratorUpdate"},"responseBody":{"description":"Updated administrator assignment entity.","typeName":"IDiscussionBoardAdministrator"},"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators/{id}","method":"put"},{"specification":"Removes an administrator assignment entity by id. The discussion_board_administrators table does NOT contain a soft delete/deleted_at field, so this is a hard delete. Only id is referenced; never invokes or describes any other schema property not in table.","description":"DELETE to /discussionBoard/administrators/{id} performs a hard delete of administrator assignment row using id as primary key. Because the model does not define a soft delete field, the entity is permanently removed from the system and cannot be restored. Application log/audit is expected for compliance. Endpoint only references id schema field per table definition. Strictly for administrator users as permitted in platform policies.","summary":"Hard deletes administrator assignment entity by id (no soft delete property exists in this model).","parameters":[{"name":"id","description":"UUID of administrator assignment to hard delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/administrators/{id}","method":"delete"},{"specification":"Retrieves a paginated or filtered list of discussion threads from discussion_board_threads table using PATCH and optional search/filter request body. Only refers to defined schema fields: id, discussion_board_member_id, discussion_board_category_id, title, body, is_pinned, is_closed, created_at, updated_at, deleted_at. No invented or non-schema fields.","description":"PATCH to /discussionBoard/threads lists or searches for discussion threads, using filter, sort, or paging logic in the request body with only those properties in the discussion_board_threads schema (id, member_id, category_id, title, body, is_pinned, is_closed, created_at, updated_at, deleted_at). Returns array or paginated page of matching thread entities for admin, member, or guest usage as permitted. No fields outside the schema are touched. Used for feed display, advanced search, and moderation review.","summary":"Lists or searches discussion threads via PATCH and filters (fields: id, member_id, category_id, title, body, is_pinned, is_closed, created_at, updated_at, deleted_at).","parameters":[],"requestBody":{"description":"Filter/sort/request information for thread search (utilizes schema fields only).","typeName":"IThreadSearchRequest"},"responseBody":{"description":"Paginated or array result of thread entities from search.","typeName":"IPageDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads","method":"patch"},{"specification":"Get a specific discussion thread by its unique UUID. This endpoint retrieves all fields for a given thread, based strictly on the discussion_board_threads Prisma schema. The thread object includes its creator's member UUID, associated category UUID, title, body, pin/closed status, and relevant audit timestamps. Only fields defined in the schema are included. The description, updated_at, created_at, and deleted_at are provided. If the thread is soft-deleted (deleted_at not null), it is considered removed by moderation/admin but NOT physically deleted from the database.","description":"Retrieves all information for a discussion thread using its unique identifier. This includes the creator's member ID, associated category ID, title, body, is_pinned and is_closed flags, creation and update timestamps, and whether the thread has been soft-deleted (via the deleted_at field). This endpoint directly references the discussion_board_threads table and does not include any associations or expandable relationships. Permissions should be enforced according to role-based access control, as documented in the requirements analysis, ensuring that only visible (non-deleted or authorized) threads are returned. If deleted_at is set, the thread is considered soft-deleted and may be hidden from typical end-user views, depending on authorization. Validation is performed only on the fields actually in the schema. Error responses are provided for not-found or unauthorized access attempts. Strict field compliance is maintained: no extra fields beyond the schema.","summary":"Get discussion board thread by ID (discussion_board_threads).","parameters":[{"name":"id","description":"UUID of the discussion thread to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The discussion board thread object.","typeName":"IDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads/{id}","method":"get"},{"specification":"Create a new discussion thread. Input strictly follows the discussion_board_threads schema: must include creator's member ID (discussion_board_member_id), associated category ID (discussion_board_category_id), title (string), body (string), is_pinned (boolean), is_closed (boolean), and initial timestamps. All required fields are as in the schema; no extra properties are allowed. Soft deletion is supported via deleted_at, but this is not set on creation.","description":"Creates a new discussion thread. Required fields are: discussion_board_member_id (UUID of creator), discussion_board_category_id (UUID of the category), title (string), body (string), is_pinned (boolean), is_closed (boolean), plus created_at and updated_at timestamps (typically auto-set). The POST body must match the schema, and no other properties are allowed. On success, returns the stored thread object. Role-based access controls are enforced as per requirements: only active, authenticated members may create threads. Validation rejects requests that reference nonexistent member, category, or have invalid types. The response is a complete thread object per schema, reflecting only actual columns. If requested by non-authorized users, returns an error per RBAC.","summary":"Create new discussion board thread (discussion_board_threads).","parameters":[],"requestBody":{"description":"Thread creation parameters strictly matching discussion_board_threads schema.","typeName":"IDiscussionBoardThread.ICreate"},"responseBody":{"description":"Created discussion board thread object.","typeName":"IDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads","method":"post"},{"specification":"Update an existing discussion thread, identified by its UUID. Only fields in the discussion_board_threads schema may be updated. Supports editing the title, body, is_pinned status, is_closed status, and updated_at timestamp. Soft-deleted threads (deleted_at not null) may not be updated unless authorized. Enforces RBAC from requirements documentation.","description":"Updates an existing thread by its unique identifier. The PUT body consists only of allowed updatable fields from the schema: title (string), body (string), is_pinned (boolean), is_closed (boolean), and updated_at (timestamp). The endpoint verifies existence and may reject updates for soft-deleted threads unless requested by an admin or moderator. No other properties can be updated or referenced. Follows role-based access controls: only the thread creator, moderators, or administrators may update, per permissions matrix. Error handling follows proper 404 for not found, 403 for unauthorized, and 400 for invalid input. Upon success, returns the updated thread object (no intermediary fields).","summary":"Update discussion board thread (discussion_board_threads).","parameters":[{"name":"id","description":"UUID of the thread to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for thread update, as permitted by discussion_board_threads.","typeName":"IDiscussionBoardThread.IUpdate"},"responseBody":{"description":"Updated discussion thread object.","typeName":"IDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads/{id}","method":"put"},{"specification":"Soft-delete a discussion thread by its UUID. The delete operation sets the deleted_at field to the current timestamp (soft delete), as specified by the discussion_board_threads Prisma schema. The thread is NOT permanently removed, only marked as deleted. This ensures reversible deletion in line with moderation and compliance requirements.","description":"Soft-deletes a thread identified by its UUID. Rather than permanent removal, sets the thread's deleted_at field to the current timestamp and prevents it from appearing in standard listings. Only users with appropriate permissions (thread creator, moderator, or admin) may perform this operation. The operation is strictly compliant with the schema: only modifies the deleted_at field, does not remove or update other fields. Attempting to delete an already soft-deleted thread should have no effect or return appropriate feedback. On success, returns the updated thread object reflecting soft-deletion. Unauthorized or nonexistent deletions return appropriate error codes. No extra fields are used beyond those in the schema.","summary":"Soft-delete a discussion board thread (discussion_board_threads).","parameters":[{"name":"id","description":"UUID of the thread to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Thread object after soft-delete.","typeName":"IDiscussionBoardThread"},"authorizationRoles":null,"path":"/discussionBoard/threads/{id}","method":"delete"},{"specification":"List or search discussion board posts. Retrieves post objects, allowing for search/filter logic, in strict accordance with the discussion_board_posts schema. Each result includes discussion_board_thread_id, discussion_board_member_id, body, is_edited, created_at, updated_at, and deleted_at as present in the schema. Supports pagination/filtering as implemented on the server side; request body should match .IRequest convention. Returned posts only reference existing fields.","description":"Retrieves a paginated, filtered, or searched listing of posts, based on posted criteria. Only fields present in the discussion_board_posts schema are returned (discussion_board_thread_id, discussion_board_member_id, body, is_edited, created_at, updated_at, deleted_at). Posts that have been soft-deleted (deleted_at not null) may be filtered from standard user listings unless the requester has elevated privileges. Filtering, sorting, and pagination must be driven by actual indexed fields in the schema. No extra/non-schema columns are included. Error handling includes standard validation errors and RBAC enforcement, per requirements documentation.","summary":"List/search discussion board posts (discussion_board_posts).","parameters":[],"requestBody":{"description":"Search or filter parameters for posts.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated post listing per schema.","typeName":"IPageIDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts","method":"patch"},{"specification":"Get a specific post by its UUID. Retrieves post object per discussion_board_posts schema: includes thread ID, member ID, body, is_edited, created_at, updated_at, and deleted_at. Returns all actual schema fields; soft-deleted posts are included only if authorized.","description":"Retrieves the post matching the provided UUID. Returns schema fields only: discussion_board_thread_id, discussion_board_member_id, body, is_edited, created_at, updated_at, and deleted_at. References only fields defined in the Prisma schema. Soft-deletion respected: posts with deleted_at not null generally hidden from standard listings unless requester has appropriate role. Returns 404 if not found, 403 for unauthorized, and omits non-schema fields. Error handling and permission checks are per requirements documentation.","summary":"Get discussion board post by ID (discussion_board_posts).","parameters":[{"name":"id","description":"UUID of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The post object by ID.","typeName":"IDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts/{id}","method":"get"},{"specification":"Create a new discussion post. Accepts only fields from discussion_board_posts schema: requires discussion_board_thread_id (UUID), discussion_board_member_id (UUID), body (string), is_edited (boolean), created_at, and updated_at. deleted_at not set at creation. Does not accept extra fields.","description":"Creates a new post under an existing thread. The request body must contain only allowed schema fields: discussion_board_thread_id (thread UUID), discussion_board_member_id (posting user UUID), body (string, post content), is_edited (boolean: initial should be false), created_at, and updated_at. No extra properties or composite fields permitted. If the specified thread or member does not exist, or user lacks permission, returns error. Upon success, returns complete post object as stored in schema, and omits all non-schema fields.","summary":"Create new post on a discussion thread (discussion_board_posts).","parameters":[],"requestBody":{"description":"New post parameters per schema.","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"The created post object.","typeName":"IDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts","method":"post"},{"specification":"Update a post by its UUID. Only updates fields defined in discussion_board_posts schema. Permits changes to body, is_edited, and updated_at timestamp. Will not restore soft-deleted posts unless specifically authorized. Reference only schema fields.","description":"Updates a post, identified by its UUID. Allowed fields for update: body (string), is_edited (boolean), updated_at (timestamp). Permissions are enforced: only the original author, moderators, or administrators may perform this operation, subject to RBAC. Soft-deleted posts (deleted_at not null) generally may not be edited unless elevated privileges are held. On success, returns the fully updated post object as per schema. Does not touch any extra or non-schema fields. Error codes and validations per requirements documentation and authorization matrix.","summary":"Update a discussion board post (discussion_board_posts).","parameters":[{"name":"id","description":"Post UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for post update as allowed by schema.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"Updated post object after edit.","typeName":"IDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts/{id}","method":"put"},{"specification":"Soft-delete a post identified by its UUID. Operation sets deleted_at to current timestamp, not physically removing the row. Only discussion_board_posts schema fields are referenced. Only authorized users (author, moderator, admin) may perform the soft delete.","description":"Soft-deletes a post: sets the deleted_at field in the discussion_board_posts table to current timestamp. Does not permanently remove data. After soft deletion, the post is excluded from public listings and may only be accessed by authorized staff. Nonexistent or already soft-deleted posts result in a no-op or error. All other fields are untouched. Role-based permissions are enforced, in compliance with requirements. Returns the updated post object reflecting soft-deleted state. Errors for unauthorized, not-found, and input validation handled per strict schema field list.","summary":"Soft-delete a post (discussion_board_posts).","parameters":[{"name":"id","description":"Post UUID to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post object after soft-delete.","typeName":"IDiscussionBoardPost"},"authorizationRoles":null,"path":"/discussionBoard/posts/{id}","method":"delete"},{"specification":"List or search comments on posts. Returns only discussion_board_comments schema fields: includes post_id, parent_id, member_id, body, is_edited, created_at, updated_at, deleted_at. Supports pagination/filter logic if provided; only fields defined in the schema. Soft-deleted comments (deleted_at not null) are subject to RBAC and may not show in default results.","description":"Lists or searches discussion/post comments using request parameters. Only returns comment objects with schema-accurate fields: discussion_board_post_id, parent_id, discussion_board_member_id, body, is_edited, created_at, updated_at, and deleted_at. Pagination and filtering should use only indexed/allowed schema fields. Soft-deleted comments omitted unless raised permissions. All logic and security tracks with requirements documentation and role-based access control matrix. No extra fields allowed.","summary":"List/search comments (discussion_board_comments).","parameters":[],"requestBody":{"description":"Request parameters for searching/filtering comments.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated list of comments.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments","method":"patch"},{"specification":"Get a specific comment by its UUID. Returns comment object as per discussion_board_comments schema: includes post_id, parent_id, member_id, body, is_edited, created_at, updated_at, and deleted_at. No extra properties or embedded data. Soft-deleted comments only visible to authorized users.","description":"Retrieves a single comment (by UUID), returning only the schema-specified fields: discussion_board_post_id, parent_id (nullable), discussion_board_member_id, body, is_edited, created_at, updated_at, and deleted_at. Checks if comment is soft-deleted and applies RBAC for visibility. No cross-table expansion or extra information. Returns 404 for missing comments, 403 for unauthorized, with strict compliance to the schema field list. All field accesses validated strictly against the current DB schema.","summary":"Get discussion board comment by ID (discussion_board_comments).","parameters":[{"name":"id","description":"UUID of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Schema-accurate comment object.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments/{id}","method":"get"},{"specification":"Create a new comment on a post or parent comment. Request body limited to fields defined in discussion_board_comments schema: discussion_board_post_id (UUID), parent_id (nullable UUID), discussion_board_member_id (UUID), body (string), is_edited (boolean), created_at, updated_at. Soft-deletion and edit tracking are not applied on comment creation. No extra properties or relationships in request or response.","description":"Creates a new comment on a post or in reply to another comment. Required request fields are: discussion_board_post_id (post UUID), parent_id (UUID of parent comment, nullable), discussion_board_member_id (commenter), body, is_edited (should be false on initial write), created_at, and updated_at. The new comment object is returned exactly as per schema fields, with no embedding or extra information, and cannot reference non-schema fields. Only authorized, active members can create comments, enforced by RBAC. Invalid or missing relationships (e.g., non-existent post) result in error per requirements. Soft deletion and edit tracking are present for later modification events only.","summary":"Create new comment on a post or comment (discussion_board_comments).","parameters":[],"requestBody":{"description":"New comment input strictly mapped to schema.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Created comment object as stored.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments","method":"post"},{"specification":"Update an existing comment in the discussion board. This operation modifies fields such as the comment body or the is_edited flag on the specified comment. Only the actual fields present in the discussion_board_comments table will be referenced. Relationships such as parent_id for nesting and discussion_board_member_id for authorship are included. All changes update the updated_at timestamp, but will not create audit trails unless handled by moderation logs. The operation only updates information based on properties defined in the Prisma schema.\n\nSoft deletion is supported via the deleted_at field: if present, a deleted comment should not be updated (handled by application logic outside this operation).","description":"This operation updates an existing comment record in the discussion_board_comments table. Fields that can be updated include the comment body, the is_edited flag, and potentially parent_id for thread/nesting changes, if allowed by business logic. The operation references only those properties present in the Prisma schema: body, is_edited, parent_id, and updated_at. Changes are only applied if the comment has not been soft deleted (deleted_at is null); attempts to update soft-deleted comments should be denied or no-op at the business logic layer. Relationships such as discussion_board_member_id (comment author) are preserved and cannot be reassigned via this endpoint. The updated_at timestamp is automatically set to the time of update. No fields outside the schema are referenced. Audit or moderation tracks are not created by this endpoint itself but may be handled by separate moderation log entries.","summary":"Updates a comment in the discussion_board_comments table by id.","parameters":[{"name":"id","description":"Target comment's unique identifier (UUID) as primary key in discussion_board_comments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The fields of the comment to update, corresponding to schema properties: body (string), is_edited (boolean), parent_id (UUID or null). Only provide those properties that need modification.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object as defined in discussion_board_comments.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments/{id}","method":"put"},{"specification":"Soft-delete a comment in the discussion board. This operation sets the deleted_at timestamp in the discussion_board_comments table to the current timestamp, marking the record as deleted without permanent removal. All references and relationships are maintained for audit and potential restoration. No fields are removed or modified beyond setting deleted_at. Only fields present in the Prisma schema are referenced. Hard deletion is NOT performed, as deleted_at exists.","description":"Marks a comment record as deleted by assigning the current timestamp to the deleted_at field in discussion_board_comments, following soft-delete semantics. This operation allows for reversibility and audit, and does not physically remove the underlying database record. All other fields (body, parent_id, is_edited, etc.) remain untouched, and relationships persist. The operation is idempotent for already-soft-deleted comments (deleted_at not null). It does not reference or modify any non-existent schema fields. All status transitions and state changes are handled according to the presence of the deleted_at property.","summary":"Soft-deletes a comment by setting deleted_at, per discussion_board_comments schema.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the comment to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The comment object after soft delete, reflecting the updated deleted_at field if successful.","typeName":"IDiscussionBoardComment"},"authorizationRoles":null,"path":"/discussionBoard/comments/{id}","method":"delete"},{"specification":"Get a filtered and/or paginated list of attachments (files) in the discussion board system. Searches and sorts over actual fields in discussion_board_attachments, such as file_name, file_uri, created_at, and optionally filters by discussion_board_post_id or discussion_board_comment_id. No reference will be made to fields not present in the schema. Returns paginated and sorted results.","description":"This operation returns a list of attachments matching search criteria and/or pagination controls. The filters can include direct matches for file_name, file_uri, content_type, content_hash, uploader's member id, post id, or comment id (all as defined in discussion_board_attachments). Sorting is performed via fields available in the schema (e.g., created_at). No deleted attachments are returned (deleted_at is checked for null in backend application logic). No references are made to non-existent schema fields.","summary":"Lists attachments with filtering/pagination from discussion_board_attachments.","parameters":[],"requestBody":{"description":"Filtering and pagination parameters that reference only fields present in discussion_board_attachments (e.g., file_name, post_id, comment_id, created_at).","typeName":"IDiscussionBoardAttachment.IRequest"},"responseBody":{"description":"Paginated attachment results as defined by the schema, with pagination and list data.","typeName":"IPageIDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments","method":"patch"},{"specification":"Retrieve a single attachment record identified by its unique id from the discussion_board_attachments table. The operation exposes all atomic fields available in the schema, such as file_name, file_uri, content_type, and related foreign keys.","description":"Returns all information for a single attachment in the discussion board system, given the unique identifier. The returned data strictly matches the fields in the discussion_board_attachments schema: id, discussion_board_post_id, discussion_board_comment_id, discussion_board_member_id, file_name, file_uri, content_type, content_hash, created_at, and deleted_at. If the deleted_at field is not null (i.e., the attachment is soft deleted), the operation may be denied or the deleted resource may be hidden, handled by application logic. No non-existent fields are referenced or exposed.","summary":"Retrieves an attachment by id according to discussion_board_attachments schema.","parameters":[{"name":"id","description":"Attachment id (UUID) as the primary key for the discussion_board_attachments table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The attachment record corresponding to the id, per schema.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments/{id}","method":"get"},{"specification":"Create a new attachment for a post or comment in the discussion board. Creates a row in discussion_board_attachments referencing all actual schema fields: discussion_board_post_id or discussion_board_comment_id, discussion_board_member_id (the uploader), file_name, file_uri, content_type, content_hash, and created_at. The endpoint does not insert data into any non-existent fields. Soft-delete is handled only at later stages, if required.","description":"Adds a new attachment to the discussion board by inserting a row in the discussion_board_attachments table. All provided properties must match field definitions in the schema. The attachment must reference either a post or a comment (never both at once), and must include uploader's member id, file metadata, and content hash. The created_at field is automatically assigned. No other, non-schema fields are permitted. The attachment will not be soft deleted at creation.","summary":"Creates a new attachment as per discussion_board_attachments schema.","parameters":[],"requestBody":{"description":"Attachment creation fields referencing only schema properties: either discussion_board_post_id or discussion_board_comment_id, discussion_board_member_id, file_name, file_uri, content_type, and content_hash.","typeName":"IDiscussionBoardAttachment.ICreate"},"responseBody":{"description":"The newly-created attachment object as per schema.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments","method":"post"},{"specification":"Update an existing attachment in the discussion board. Modifies one or more allowed fields on the row in discussion_board_attachments identified by id. Only properties present in the Prisma schema may be updated. Soft-deleted attachments (where deleted_at is not null) cannot be updated. Primary key (id) and created_at cannot be changed. Updates updated_at timestamp automatically.","description":"Updates an attachment entity in the discussion_board_attachments table, modifying fields such as file_name, file_uri, content_type, or content_hash, according to the actual schema columns. The operation is denied if the attachment is soft deleted (deleted_at not null). Only present fields are referenced. File re-association with posts/comments or uploader is possible per schema, but must follow business logic and maintain referential integrity. updated_at is refreshed to reflect the update. No reference is made to fields not in the schema.","summary":"Updates an attachment by id in discussion_board_attachments.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the attachment as in discussion_board_attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment update fields, such as file_name, file_uri, or content_type, strictly per schema field definitions.","typeName":"IDiscussionBoardAttachment.IUpdate"},"responseBody":{"description":"The updated attachment object as per schema.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments/{id}","method":"put"},{"specification":"Soft-delete an attachment in the discussion board by id. This operation updates the deleted_at field to the current timestamp in discussion_board_attachments, marking the attachment as deleted without removing its row from the table. Only the deleted_at field is modified; all others are preserved. No hard deletion is performed. No schema fields outside of discussion_board_attachments are referenced. Operation is idempotent for already-soft-deleted rows.","description":"Soft-deletes an attachment by setting the deleted_at timestamp, per the discussion_board_attachments schema. The attachment record remains in the database, fulfilling requirements for auditability and reversibility. Attempts to soft-delete an already deleted item have no additional effect. Only the deleted_at property is changed during this operation; all others, including file_name, file_uri, and relationships, are maintained. No non-existent fields are referenced. Hard deletion is never performed by this operation.","summary":"Soft-deletes an attachment from discussion_board_attachments by id.","parameters":[{"name":"id","description":"UUID of the attachment to soft-delete, as primary key in discussion_board_attachments.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment object after soft delete, reflecting the set deleted_at.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":null,"path":"/discussionBoard/attachments/{id}","method":"delete"},{"specification":"Get a filtered, sorted, and/or paginated list of moderation reports from discussion_board_reports. The operation can filter records by fields actually present in the schema (e.g., reporter_member_id, moderator_id, thread_id, post_id, comment_id, status, reason, created_at). Results do not include soft-deleted rows (deleted_at is excluded by application logic). No fields are referenced beyond the schema definition. Results are returned with pagination and/or sorting information.","description":"Lists moderation reports with search, filter, and pagination capabilities based strictly on schema fields. Filters and sorting may include fields such as reporter_member_id, moderator_id, status, content references (thread_id, post_id, comment_id), reason, and created_at. Only non-deleted (deleted_at null) rows are returned. Returned data matches the properties of discussion_board_reports. No non-schema fields are referenced. Relationships to reported content are represented via their respective schema fields (thread_id, post_id, comment_id, etc).","summary":"Retrieves moderation reports with search/filter/pagination. Schema: discussion_board_reports.","parameters":[],"requestBody":{"description":"Filter, search, and pagination data using schema fields for reports (status, content references, reporter/moderator IDs, etc).","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated moderation report results, with schema-aligned fields.","typeName":"IPageIDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports","method":"patch"},{"specification":"Retrieve a single moderation report by its unique identifier from the discussion_board_reports table. Returns all actual fields, such as reporter_member_id, moderator_id, content references (thread_id, post_id, comment_id), reason, status, timestamps, and resolution_notes. Soft-deleted reports may be handled according to application logic but are not shown if deleted_at is set. No non-schema fields included.","description":"Returns a moderation report, with details from discussion_board_reports: id, reporter_member_id, moderator_id, thread_id, post_id, comment_id, reason, status, created_at, resolved_at, resolution_notes, and deleted_at. Soft deleted reports (deleted_at set) are not returned by business logic. Only schema fields are referenced.","summary":"Gets a moderation report by id from discussion_board_reports.","parameters":[{"name":"id","description":"Unique UUID for the moderation report, primary key in discussion_board_reports.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderation report object, all fields match schema.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports/{id}","method":"get"},{"specification":"Create a new moderation report in the discussion board. This operation inserts a row into discussion_board_reports referencing schema fields: reporter_member_id, moderator_id (optional until assigned), thread_id, post_id, comment_id (only one of these may be non-null per report), reason, and status. created_at is set automatically. Resolution fields and deleted_at are null on creation. No non-schema fields are touched.","description":"Creates a new report against a thread, post, or comment for moderator review. The request must include a valid reporter_member_id, a description for reason, and the status of the initial report. Content references must use only schema fields (thread_id, post_id, comment_id), one or more set to reference a particular content item. Moderator assignment may be null until assignment. All timestamps are set following schema field rules. No reference is made to any field that does not exist in the table.","summary":"Creates a moderation report as per discussion_board_reports schema.","parameters":[],"requestBody":{"description":"Fields to create report: reporter_member_id, moderator_id (optional), content reference (thread_id, post_id, comment_id), reason, and status. Only schema fields permitted.","typeName":"IDiscussionBoardReport.ICreate"},"responseBody":{"description":"New report object as created per schema.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports","method":"post"},{"specification":"Update an existing moderation report in the discussion board. Modifies any allowed fields per the discussion_board_reports schema. Only permitted fields are changed: moderator_id, status, resolution_notes, and timestamps. reporter_member_id and content references are immutable. Soft deleted reports (deleted_at is not null) cannot be updated. Resolution notes and resolved_at may be set only through this operation. The operation does not reference or modify any field that does not exist in the Prisma schema.","description":"Updates a moderation report by id in the discussion_board_reports table. Allows updating moderator_id (assigning a mod), status (for state transitions), resolution_notes, and resolved_at (when status changes). Timestamps are managed automatically per audited field updates. Attempts to update non-existent fields or to reassign reporter/content references are denied. Soft delete state (deleted_at) cannot be updated here. No non-schema fields are manipulated.","summary":"Updates a moderation report by id as per discussion_board_reports schema.","parameters":[{"name":"id","description":"UUID of the report being updated, primary key in discussion_board_reports.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Permitted schema fields to update: moderator_id, status, resolution_notes, resolved_at. Only schema properties included.","typeName":"IDiscussionBoardReport.IUpdate"},"responseBody":{"description":"Updated report object, strictly according to the schema.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports/{id}","method":"put"},{"specification":"Soft-delete a moderation report in the discussion board system. This operation sets the deleted_at field for the target row in discussion_board_reports to the current timestamp. No records are permanently removed with this operation; all other fields remain unchanged, supporting reversibility and regulatory compliance. The endpoint does not reference non-existent or extra fields in the schema. The operation is a no-op if the row is already soft deleted (deleted_at is not null).","description":"Marks a report as soft deleted by populating the deleted_at column for the row in discussion_board_reports. Only the deleted_at field is modified (set to the current time); all others are untouched, per soft-deletion semantics. Existing soft-deleted rows are unaffected by repeated requests. This endpoint never physically deletes rows. No extra fields outside schema are referenced or returned.","summary":"Soft-deletes a moderation report by id (sets deleted_at per schema).","parameters":[{"name":"id","description":"Unique id of the report to be soft deleted (UUID, primary key in discussion_board_reports).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Report object after soft delete, with deleted_at set.","typeName":"IDiscussionBoardReport"},"authorizationRoles":null,"path":"/discussionBoard/reports/{id}","method":"delete"},{"specification":"List and search moderation log records for the discussion board. This endpoint allows filtering and pagination for logs of moderation actions such as hiding, editing, or deleting content related to threads, posts, or comments. Every returned log entry includes only fields present in the Prisma schema: 'id', 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'. This operation is for audit tracing and moderator activity review. No non-existent fields are referenced. Related APIs: GET for detail ('/discussionBoard/moderationLogs/{id}'), POST for creation, PUT for update, DELETE for removal. No modification of data is performed here.","description":"This operation retrieves a paginated and filterable list of moderation log records from the 'discussion_board_moderation_logs' table. Each log represents a single moderation event performed by a moderator, such as hiding, deleting, or editing content in threads, posts, or comments. The only fields included or referenced are those that exist in the schema: 'id' (PK), 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'. Filtering and search are performed only over valid schema fields. This operation is typically used by administrators or moderators to monitor board activity, support compliance with audit requirements, and review historical moderation actions taken by users with elevated privileges. No fields absent from the schema (such as deleted_at, updated_by) are referenced or exposed. Related operations include GET (detail), POST (create new logs), PUT (update logs), and DELETE (remove logs). Error responses occur only when invalid filters or schema-mismatched values are supplied.","summary":"List and search moderation logs (discussion_board_moderation_logs) with pagination and filtering.","parameters":[],"requestBody":{"description":"Parameters for searching and filtering moderation logs. Includes only properties valid in the schema for search/filter fields such as 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'created_at', with pagination and sorting. Excludes any non-schema fields.","typeName":"IDiscussionBoardModerationLog.IRequest"},"responseBody":{"description":"Paginated moderation log results. Each entry includes only valid schema fields: 'id', 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'.","typeName":"IPageIDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs","method":"patch"},{"specification":"Get detailed information for a specific moderation log entry by its unique identifier. Operates on the 'discussion_board_moderation_logs' table and provides a complete view of a moderation action. All returned fields must be present in the schema: 'id', 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'. No soft delete is managed (there is no deleted_at field). This operation is strictly for retrieval and does not modify data. Related endpoints: PATCH for list/search, POST for creation, PUT for update, DELETE for removal.","description":"Retrieves the full information for a specific moderation log record from 'discussion_board_moderation_logs'. Includes all fields defined for this entity: 'id' (primary key), 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', 'action_reason', and 'created_at'. This endpoint is used by administrators and moderators for audit trail review and moderation activity analysis. No fields such as soft delete are referenced, since 'deleted_at' is not present in the schema. Requests using IDs not matching any record return a 404 error. Update, create, and delete actions are handled by other endpoints. No extra fields or non-schema references included.","summary":"Get detail for one moderation log entry (discussion_board_moderation_logs) by ID.","parameters":[{"name":"id","description":"Target moderation log record's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail for one moderation log record. Includes only the fields present in the schema.","typeName":"IDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs/{id}","method":"get"},{"specification":"Create a new moderation log entry documenting an action taken by a moderator. This registers a new record in the 'discussion_board_moderation_logs' table. Permitted fields are: 'moderator_id', optional 'thread_id', 'post_id', or 'comment_id', 'action', 'action_reason', and 'created_at'. No fields not in schema are touched. This operation should be used whenever a moderator edits, hides, or deletes a post, thread, or comment and an immutable audit log must be produced. Related endpoints: PATCH for list, GET for detail, PUT for update, DELETE for removal.","description":"Adds a new record to 'discussion_board_moderation_logs', representing a singular moderation action performed by a moderator on a thread, post, or comment. The required and only permitted fields are: 'moderator_id' (who performed the action), optionally 'thread_id', 'post_id', or 'comment_id' (on what content), 'action' (type of action performed, e.g., 'hide', 'edit', etc.), 'action_reason' (justification for action, optional), and 'created_at' (timestamp). No soft or hard delete is handled in this endpoint. Upon successful creation, returns the record detail. No fields unspecified in the schema are touched or referenced.","summary":"Create new moderation log entry in discussion_board_moderation_logs.","parameters":[],"requestBody":{"description":"Creation parameters for new moderation log record. Must include all required fields from 'discussion_board_moderation_logs', and only fields present in schema. Excludes non-existent fields like deleted_at.","typeName":"IDiscussionBoardModerationLog.ICreate"},"responseBody":{"description":"Created moderation log record. Contains only valid schema properties.","typeName":"IDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs","method":"post"},{"specification":"Update an existing moderation log record by its unique identifier. Only fields actually existing in the 'discussion_board_moderation_logs' schema can be modified: 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', and 'action_reason'. There is no soft or hard delete performed here. Changes only permitted fields with schema validation and business rules enforced. Used for correcting, annotating, or re-categorizing a previous moderation event. Related endpoints: PATCH for search, GET for detail, POST for create, DELETE for removal.","description":"Updates a specific moderation log in 'discussion_board_moderation_logs' based on its primary key. Possible changes are limited strictly to schema-defined attributes such as: 'moderator_id', 'thread_id', 'post_id', 'comment_id', 'action', and 'action_reason'. Timestamps are not directly editable unless explicitly allowed by business rules (but typically set by the system). No soft/hard delete is performed, and no extra fields (such as deleted_at) are referenced. This operation supports moderator/admin activity review and audit trail amendment in accordance with moderation policies. Attempts to update non-existent or out-of-schema fields will result in errors. Only returns updated record using valid fields.","summary":"Update an existing moderation log (discussion_board_moderation_logs) by ID.","parameters":[{"name":"id","description":"Target moderation log record's unique identifier (UUID) to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update parameters for the moderation log record. Allowed only fields as defined in the schema; excludes all extraneous or derived fields.","typeName":"IDiscussionBoardModerationLog.IUpdate"},"responseBody":{"description":"Updated moderation log record (valid schema fields only).","typeName":"IDiscussionBoardModerationLog"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs/{id}","method":"put"},{"specification":"Delete a moderation log record by its unique ID. This performs a hard delete, as the 'discussion_board_moderation_logs' model does not have a 'deleted_at' field for soft deletion. This operation irreversibly removes the log entry from persistent storage. Related: PATCH for list/search, GET for detail, POST for create, PUT for update.","description":"Removes a specific moderation log entry from 'discussion_board_moderation_logs'. Because 'deleted_at' is NOT present in this model, this operation IRREVERSIBLY deletes the row by its unique identifier (UUID). No soft delete is possible; once deleted, the log cannot be recovered. Used by administrators and moderators for managing audit records in compliance with board data retention policies. This endpoint only requires the record ID and returns no content on success. Requests referencing non-existent IDs yield a 404 error. Attempts to use fields not present in the schema will result in errors.","summary":"Hard delete moderation log (discussion_board_moderation_logs) by ID (no soft delete supported).","parameters":[{"name":"id","description":"Target moderation log record's unique identifier (UUID) to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/moderationLogs/{id}","method":"delete"},{"specification":"List and search warnings issued to members in the discussion board. Leverages valid fields from 'discussion_board_warnings': 'id', 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', 'expires_at', and 'deleted_at'. Supports pagination, filtering, and sorting using those fields. The 'deleted_at' field supports soft delete awareness in results but not removal here. Only valid fields are referenced. Related endpoints: GET for detail, POST for new warnings, PUT for update, DELETE for soft delete.","description":"Retrieves a filtered and paginated list of warning records issued to members from 'discussion_board_warnings'. The list includes all fields present in the schema: 'id', 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', 'expires_at', and 'deleted_at'. Moderator/admins can see warnings, filter by issued/expired/deleted, and review warning audit trails. The operation supports only the actual fields in the schema—no extra or non-existent attributes like created_by or updated_by. 'deleted_at' is included to indicate soft deletes (hidden warnings) but does not perform removal itself. Soft delete and warning lifting are handled in DELETE. Other operations: GET for detail, POST for add, PUT for update, DELETE for soft delete.","summary":"List and search warnings (discussion_board_warnings) with support for soft deletes.","parameters":[],"requestBody":{"description":"Parameters for warning list/search. Only real schema fields like 'member_id', 'moderator_id', 'warning_type', 'created_at', 'expires_at', 'deleted_at', pagination, and sorting.","typeName":"IDiscussionBoardWarning.IRequest"},"responseBody":{"description":"Paginated warning results. Each warning contains only valid schema fields including soft delete flag ('deleted_at').","typeName":"IPageIDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings","method":"patch"},{"specification":"Get full detail of a single warning to a member by its unique ID. Returns the warning with all present fields, including soft delete indicator. Only operates on fields present in 'discussion_board_warnings' schema: 'id', 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', 'expires_at', 'deleted_at'. Related endpoints include PATCH for list/search, POST for creation, PUT for update, DELETE for soft delete.","description":"Fetch detailed information for one warning record issued to a board member from 'discussion_board_warnings'. All schema fields are included: 'id', 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', 'expires_at', and 'deleted_at'. The 'deleted_at' field indicates soft delete status (e.g., warning lifted or hidden, but not physically deleted). No other fields outside the schema are referenced. Used for moderator/admin warning review and user management workflows. If the ID does not match any record, returns 404.","summary":"Get full detail for one discussion_board_warning by ID (fields include soft delete flag).","parameters":[{"name":"id","description":"The warning record's unique identifier (UUID) for retrieval.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full schema-valid warning record, including the soft delete field ('deleted_at').","typeName":"IDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings/{id}","method":"get"},{"specification":"Issue a new warning to a board member. Creates a new record in the 'discussion_board_warnings' table using valid schema fields: 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', and optionally 'expires_at'. The record may also include soft delete field 'deleted_at' if warning is immediately lifted (rare). Only existing fields are settable: extra fields are not referenced. Used as part of moderation actions against members with infractions. Related endpoints: PATCH for list/search, GET for detail, PUT for update, DELETE for soft delete removal.","description":"Creates a new warning for a specific discussion board member, updating 'discussion_board_warnings' with valid schema fields: 'member_id', 'moderator_id', 'warning_type', 'message', 'created_at', optionally 'expires_at', and possibly 'deleted_at' (usually null unless warning is set as already lifted). This function only manipulates the actual schema fields—no extra, derived, or non-existent properties are referenced. Used by moderators/admins for user management escalation and infraction tracking. Returns created warning record in full, including the soft delete flag as appropriate.","summary":"Create a new warning record (discussion_board_warnings) for a member.","parameters":[],"requestBody":{"description":"Creation parameters for new warning. All fields must exist in the schema. No non-existent properties allowed.","typeName":"IDiscussionBoardWarning.ICreate"},"responseBody":{"description":"Created warning record for the member, valid schema only (plus soft delete field).","typeName":"IDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings","method":"post"},{"specification":"Update an existing warning record by ID. Allows changing only the valid schema fields for warnings: 'member_id', 'moderator_id', 'warning_type', 'message', 'expires_at', and 'deleted_at' (if lifting/removing warning). Does not allow modification of non-existent attributes. Returns the updated warning, including the soft delete status. PATCH for search/listing, GET for detail, POST for warn, DELETE for soft delete removal are available.","description":"Updates one warning record in 'discussion_board_warnings' using the valid schema fields: 'member_id', 'moderator_id', 'warning_type', 'message', 'expires_at', and optionally the soft delete timestamp ('deleted_at') if warning is being lifted or hidden. Excludes non-schema fields. Primarily used by moderators/admins for user management and escalation workflows in line with audit trail needs. If no record matches, returns 404. All other access is subject to role authorization.","summary":"Update a warning record (discussion_board_warnings) by ID (soft delete field supported).","parameters":[{"name":"id","description":"The warning record's unique identifier (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the warning: only valid schema properties (including deleted_at for soft delete).","typeName":"IDiscussionBoardWarning.IUpdate"},"responseBody":{"description":"Updated warning record, valid schema fields only (plus soft delete field).","typeName":"IDiscussionBoardWarning"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings/{id}","method":"put"},{"specification":"Soft delete a warning by marking its 'deleted_at' timestamp in discussion_board_warnings. Implements reversibility/audit trail for warning removals per requirements. No physical deletion is performed: the record is hidden by setting 'deleted_at' to the current time. Only valid schema fields are referenced throughout the operation: if 'deleted_at' is already set, the warning is already soft-deleted. For actual data removal (hard delete), use a different operation. Related endpoints: PATCH for list/search, GET for detail, POST for create, PUT for update (which may also soft delete).","description":"Performs a soft delete of a warning record in 'discussion_board_warnings' by updating the 'deleted_at' field to mark the record as deleted (hidden, not erased). This operation only references schema fields and does not physically remove the record from storage. This is used by moderators/admins to enforce reversibility and auditability of warning removals. The endpoint requires the unique identifier of the warning to soft delete. Only the 'deleted_at' field is changed, and the operation is unsuccessful if the field is already set or the record does not exist. Errors are returned for invalid IDs or access violations.","summary":"Soft delete warning (discussion_board_warnings) by updating 'deleted_at' field; no hard delete.","parameters":[{"name":"id","description":"The warning record's unique identifier (UUID) to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/warnings/{id}","method":"delete"},{"specification":"List and search member ban records in the discussion board platform. Provides pagination, filtering and sorting for bans. Only operates on present schema fields: 'id', 'member_id', 'moderator_id', 'ban_reason', 'permanent', 'created_at', 'expires_at', and 'deleted_at' for soft delete tracking. No extra or non-existent fields referenced. Used for audit management and escalation review by moderators and administrators. Related endpoints: GET for detail, POST for create ban, PUT for update (if allowed), DELETE for soft delete.","description":"Retrieves a paginated, filterable list of ban records for members from 'discussion_board_bans'. The list contains only schema-defined fields for bans: 'id', 'member_id', 'moderator_id', 'ban_reason', 'permanent', 'created_at', 'expires_at', and 'deleted_at' (soft delete field). Used to review active, expired, and lifted bans as part of moderation review and audit processes for the board. Operations only reference fields present in Prisma schema. PATCH for list/search, GET for detail, POST for create ban, PUT for update, DELETE for soft delete are available.","summary":"List and search bans (discussion_board_bans) with soft delete support.","parameters":[],"requestBody":{"description":"Ban list/search parameters. Filters can use valid schema fields such as 'member_id', 'moderator_id', 'permanent', 'created_at', 'expires_at', and 'deleted_at', plus pagination and sorting.","typeName":"IDiscussionBoardBan.IRequest"},"responseBody":{"description":"Paginated ban records containing only schema-valid fields (including deleted_at for soft delete monitoring).","typeName":"IPageIDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans","method":"patch"},{"specification":"Get detailed information for a specific member ban record by unique ID. Only presents fields included in the 'discussion_board_bans' schema: 'id', 'member_id', 'moderator_id', 'ban_reason', 'permanent', 'created_at', 'expires_at', and 'deleted_at'. Used for moderator/admin review of user bans. Related endpoints: PATCH for list/search, POST for add ban, PUT for update, DELETE for soft delete.","description":"Retrieves the detail of a single ban issued to a member by its unique identifier. Reports only the fields specified in the schema: 'id', 'member_id', 'moderator_id', 'ban_reason', 'permanent', 'created_at', 'expires_at', and 'deleted_at' marking soft delete status (if ban is lifted/expired). Used to inform moderation and administration audit/review processes. Does not reference or return any fields outside the Prisma schema. 404 returned if no record matches. Related endpoints for create/update/delete/list.","summary":"Get detail of a member ban (discussion_board_bans) by ID (with soft delete field).","parameters":[{"name":"id","description":"Ban record's unique identifier (UUID) for member ban to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full schema-valid ban record, with deleted_at as soft delete marker.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans/{id}","method":"get"},{"specification":"Create a new ban entry in the discussion_board_bans table. This operation enables moderators or administrators to record the banning of a member, either permanently or temporarily, for violation of community guidelines. The ban record includes information about the banned member, the issuing moderator, the ban reason, permanence, creation date, potential expiration date, and soft deletion timestamp. The soft delete (deleted_at) field supports reversibility and auditability, in line with the specifications outlined in the schema and requirement analysis. This operation is critical for enforcing disciplinary action and tracking ban history on the forum.","description":"This API endpoint creates a new ban record for a board member. Clients must supply the member_id (UUID of the banned member), moderator_id (UUID of the moderator enacting the ban), ban_reason (textual explanation for the ban), permanent (boolean flag indicating if the ban is permanent), created_at (ISO 8601 UTC timestamp of ban creation), and optionally expires_at (timestamp for temporary ban expiry). No calculated or derived audit fields are required beyond those in the schema. Upon creation, the ban is active until deleted_at is set. If deleted_at is null, the ban remains in effect. Soft deletion supports audit trails and reversibility according to the requirements. If a soft-deletion is performed later, deleted_at will be updated, not removed from the DB.","summary":"Create a new ban record (discussion_board_bans table, soft delete enabled)","parameters":[],"requestBody":{"description":"Ban creation input. All properties must match Prisma schema fields and types for discussion_board_bans.","typeName":"IDiscussionBoardBan.ICreate"},"responseBody":{"description":"The created ban record, matching the full discussion_board_bans schema.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans","method":"post"},{"specification":"Update an existing ban entry in the discussion_board_bans table. Used by moderators or administrators to alter ban details, such as updating the ban reason, changing expiration date, or altering the permanence of a ban. Only fields defined in the Prisma schema (e.g., ban_reason, permanent, expires_at) can be updated. The updated_at and deleted_at fields are not present in this schema, so only explicit listed fields may be modified. The operation supports auditability and compliance by offering edit history through the creation date and soft delete timestamp, if updated.","description":"This API endpoint updates an existing ban. All updatable fields must be included in the request: ban_reason (reason for ban), permanent (true if ban is permanent, false if temporary), expires_at (timestamp for ban expiry, or null), as well as the moderator_id (UUID of the moderator performing the change, for audit purposes). The endpoint uses the id path parameter to locate the existing record. As there is no updated_at field, there is no audit record of edit timing except through moderator processes. If updated, the changes overwrite previous values in the database. Soft delete (deleted_at) is not handled through this endpoint.","summary":"Update an existing ban record (discussion_board_bans table)","parameters":[{"name":"id","description":"The unique identifier of the ban to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Ban update payload, containing only editable fields as defined in schema.","typeName":"IDiscussionBoardBan.IUpdate"},"responseBody":{"description":"The updated ban record, as per the Prisma schema for discussion_board_bans.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans/{id}","method":"put"},{"specification":"Deletes (soft delete) a ban from the discussion_board_bans table. Instead of hard-deleting, the API sets the deleted_at timestamp to indicate removal, as specified in the non-functional requirements and the schema. This gives moderators/administrators an undo/restore mechanism for reversibility and compliance. A soft-deleted ban is considered inactive but remains in the database for compliance and potential restoration. The operation requires the id path parameter, and updates the deleted_at field with the current timestamp (handled in the backend, not in the request body).","description":"This endpoint performs a soft delete on the specified ban record by setting the deleted_at field to the current timestamp. It does not remove the record from the table, aligning with the audit/reversibility requirements. Clients must specify the ban id via the path parameter. No request body is required, as only deletion is being performed. The operation is restricted to moderator and administrator roles to prevent unauthorized ban removal.","summary":"Soft delete a ban (discussion_board_bans), setting deleted_at timestamp","parameters":[{"name":"id","description":"The unique identifier of the ban to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The soft-deleted ban record including deleted_at timestamp, as defined in the discussion_board_bans schema.","typeName":"IDiscussionBoardBan"},"authorizationRoles":["moderator","administrator"],"path":"/discussionBoard/bans/{id}","method":"delete"},{"specification":"Retrieve a list of notifications for the current user or admin interface; supports advanced search, pagination, and filtering. This PATCH operation aligns with requirements for viewing and managing user notifications. Only fields present in the notification schema are surfaced in response. List retrieval can be filtered by recipient_member_id, type, read status, delivery status, or creation date; search query should be included in request body as per schema extension. The operation is available to all authenticated users with a valid session.","description":"This endpoint retrieves a list of discussion board notifications according to search, filter, and pagination parameters presented in the request body. Fields available for filtering include recipient_member_id (UUID), notification type (e.g., reply, mention, moderation), and read status (boolean). Sorting and pagination arguments are handled through the standardized request structure. Only fields defined in the discussion_board_notifications schema are returned in the payload; any reference to non-existent fields is prohibited. The endpoint supports transparency, compliance, and user engagement through efficient notification management. All returned notifications are subject to soft deletion tracking via deleted_at (field exists in schema).","summary":"List notifications with search and pagination (discussion_board_notifications table)","parameters":[],"requestBody":{"description":"Notification list request query (search/filter/pagination) as accepted by API.","typeName":"INotification.IRequest"},"responseBody":{"description":"Paginated notifications with items as per discussion_board_notifications schema fields.","typeName":"IPageINotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications","method":"patch"},{"specification":"Retrieve a single notification by ID, for the current user. Provides all details available in the discussion_board_notifications schema, including type, content_preview, url, read status, delivery time, and timestamps. This is a view-only operation and returns all fields as they exist in the record (including soft delete status if applicable).","description":"Fetch a specific notification by its UUID. Responds with all notification properties defined in the schema: id, recipient_member_id, trigger_actor_id, type, content_preview, url, read (boolean), delivered_at (if set), created_at, and deleted_at (if not null). Does not include any data beyond the schema. Useful for clients wanting to display full notification details before, for example, marking as read. Returns soft-deleted notifications if requested explicitly by ID.","summary":"Get a single notification by ID (discussion_board_notifications)","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The notification record with all fields as defined by the schema.","typeName":"INotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications/{id}","method":"get"},{"specification":"Create a new notification record, typically triggered by an event such as a mention, reply, or moderation action. Creates a row in discussion_board_notifications with all fields as defined in the schema, including recipient_member_id, trigger_actor_id (nullable), type, content_preview, url, read status (usually false on creation), delivered_at (may be null), and created_at. The backend sets creation timestamps, and handles delivery asynchronously if applicable. This operation matches requirements for scalable, auditable notification systems and supports soft deletion (deleted_at).","description":"Creates a new notification in the discussion_board_notifications table. The client must provide recipient_member_id, type, url, and may include trigger_actor_id and content_preview. Initial read status must be set (usually false), with delivered_at optionally present. The backend timestamps the creation and manages the delivery pipeline (e.g., email or in-app). All properties returned are constrained by the Prisma schema. Supports compliance and auditability through soft delete, with deleted_at managed separately.","summary":"Create notification (discussion_board_notifications table, soft delete supported, all schema fields enforced)","parameters":[],"requestBody":{"description":"Notification creation input, including only fields in the Prisma schema.","typeName":"INotification.ICreate"},"responseBody":{"description":"The created notification record as per Prisma schema.","typeName":"INotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications","method":"post"},{"specification":"Update an existing notification (e.g., to mark as read, update url/preview, or set delivery timestamp) in the discussion_board_notifications table. All updatable fields must match those present in the schema. The endpoint enforces field exclusivity, rejecting any references to non-existent properties. Changes are reflected in the database and returned in the response. Soft delete is not performed here (handled by delete operation). This operation is restricted to relevant users and admins as per authorization policy.","description":"Updates the specified notification record per its UUID identifier. Only fields present in the discussion_board_notifications schema may be updated, typically read status, url, content_preview, delivered_at, or type. Receives an 'id' path parameter and a valid update payload. Soft deletion (deleted_at) is not performed by this operation. Returns the updated notification post-save. Only current, allowed fields may be written or returned.","summary":"Update notification (discussion_board_notifications, field-restricted, no soft delete here)","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update information, matching updatable fields in schema.","typeName":"INotification.IUpdate"},"responseBody":{"description":"The updated notification according to schema.","typeName":"INotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications/{id}","method":"put"},{"specification":"Soft-delete a notification record from the discussion_board_notifications table. Rather than removing the row, this sets the deleted_at timestamp, aligning with requirements for reversibility, audit trails, and GDPR compliance. Only sets deleted_at—no other modification or removal occurs. Requires a valid notification UUID as path parameter. Only authorized members, moderators, or administrators can invoke this operation. Returns result as per schema (with deleted_at set).","description":"Marks the specified notification as deleted by setting the deleted_at timestamp. Record remains available for audit and possible restoration. The endpoint requires the notification ID. No request body is needed. Responds with updated notification including deleted_at field. This ensures safe, compliant, reversible deletion, as outlined in system specifications and Prisma schema.","summary":"Soft delete a notification (discussion_board_notifications) by setting deleted_at, not hard deletion","parameters":[{"name":"id","description":"The unique identifier (UUID) of the notification to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The soft-deleted notification (deleted_at set), following schema.","typeName":"INotification"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/notifications/{id}","method":"delete"},{"specification":"Retrieve a list of subscriptions for content on the discussion board by search, filter, or pagination. The PATCH endpoint returns existing subscriptions for the authenticated user, supporting searches by member_id, target_type, target_id, or creation date, all of which exist in the discussion_board_subscriptions schema. Returned results adhere strictly to the schema, omitting any non-existent fields. This operation implements notification workflow and content-follow requirements, supporting efficient user engagement management.","description":"Lists subscriptions for a member on the discussion board, allowing query by member_id (UUID), target_type, target_id, or created_at timestamp, as supplied in the request body. Supports advanced filtering and pagination for UI/UX or analytic consumption. Returns all fields as defined for the discussion_board_subscriptions entity in the schema. No soft-delete in schema—records are hard-deleted elsewhere. Enables management and review of followed threads, sections, or other targets within the board’s notification infrastructure.","summary":"List subscriptions with queries and pagination (discussion_board_subscriptions, no soft delete)","parameters":[],"requestBody":{"description":"Subscription list query: search, filter, and pagination, matching schema fields.","typeName":"ISubscription.IRequest"},"responseBody":{"description":"Paginated list of subscription entities as per schema.","typeName":"IPageISubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions","method":"patch"},{"specification":"Get a single subscription entity from the discussion_board_subscriptions table by ID. Returns full details according to the Prisma schema. Intended for user review, settings display, or analytic runtime queries. As with all get operations, no fields may be referenced outside those in the schema. No soft delete supported for subscriptions, so retrieval indicates the record is present and active.","description":"Retrieve a specific subscription identified by its UUID. Response includes all fields in the discussion_board_subscriptions schema: id, member_id, target_type, target_id, created_at. Used for individual management or audit scenarios. No soft deletion supported in this table, therefore the operation will fail if the record is hard-deleted. Returns subscription matching the path id.","summary":"Get subscription details by ID (discussion_board_subscriptions)","parameters":[{"name":"id","description":"UUID of the subscription entity to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Subscription record matching schema fields.","typeName":"ISubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions/{id}","method":"get"},{"specification":"Create a new subscription for a discussion board resource (thread, section, tag, etc.). This records a member’s intent to follow/receive notifications for actions on the resource. Only fields in the schema may be referenced: member_id (subscriber UUID), target_type (type of followed resource), target_id (target resource UUID), and created_at. This aligns with scalable notification delivery and tracking requirements. Original creation date is set by backend. No soft-delete support: all records are persistent or hard-deleted.","description":"Create a new resource subscription. The client must supply member_id, target_type (thread, section, tag, etc.), and target_id (UUID of followed resource). The backend records the subscription creation date. On success, responds with the full subscription entity per schema. Used for user-follow, notification delivery, or recommendation workflows. No fields outside schema permitted; no soft delete or audit trails apply.","summary":"Create subscription record (discussion_board_subscriptions, schema-only fields)","parameters":[],"requestBody":{"description":"Subscription creation info, only accepting values for schema fields.","typeName":"ISubscription.ICreate"},"responseBody":{"description":"Created subscription entity matching all schema fields.","typeName":"ISubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions","method":"post"},{"specification":"Update an existing subscription record in the discussion_board_subscriptions table. Enables changes to resource or type followed. Only schema fields may be changed (e.g., target_type, target_id, possibly member_id with admin). The request identifies the record via path parameter (id) and payload includes only updatable fields according to schema. As the table does not have soft delete, updates are only for present, active records. Changes overwrite previous values directly. Used for personalizing notification preferences or UX flows.","description":"Modify attributes of a board subscription, supporting updates to fields: target_type, target_id, or member_id (admin/migration scenarios only; typical users only update target fields). Requires subscription id as path parameter and payload of changed fields. The operation is restricted to authorized users and will update only fields defined in the schema. Returns the latest subscription entity. No audit trail except through created_at; changes are immediate and permanent.","summary":"Update subscription (discussion_board_subscriptions, minimal, schema-compliant)","parameters":[{"name":"id","description":"UUID identifier for the subscription to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Subscription update information; only schema fields changed.","typeName":"ISubscription.IUpdate"},"responseBody":{"description":"Updated subscription as per schema fields.","typeName":"ISubscription"},"authorizationRoles":["member","moderator","administrator"],"path":"/discussionBoard/subscriptions/{id}","method":"put"},{"specification":"Delete a subscription record from the discussion_board_subscriptions table. According to the schema, the entity does not have a soft delete (no deleted_at or similar field), so a DELETE operation must perform a hard delete (permanent removal) of the row identified by its id. This operation is typically restricted to the owner of the subscription or authorized administrators. Requests referencing this endpoint must only use fields present in the schema, such as id.","description":"This operation deletes a single discussion board subscription from the system. The discussion_board_subscriptions entity, as defined in the Prisma schema, does not have a soft delete field, meaning that deleting a record results in its permanent removal from the database. Only the unique identifier (id) is required to find and remove the record. The API must validate that the requesting user is authorized to perform this operation, such as being the owner of the subscription or an administrator.\n\nUpon successful deletion, the record will no longer exist in the database and cannot be recovered except through out-of-band mechanisms (such as backups). Error handling must account for cases where the id is not found, or deletion is denied due to insufficient permissions. No references should be made to non-existent fields such as 'deleted_at', 'created_by', or similar.\n\nThis endpoint is critical for managing notification preferences or following/unfollowing content flows per requirement F07.","summary":"Hard delete a subscription from discussion_board_subscriptions by id (permanent removal).","parameters":[{"name":"id","description":"Unique identifier for the subscription record to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionBoard/subscriptions/{id}","method":"delete"},{"specification":"Search for mentions in the discussion_board_mentions table using advanced criteria. The PATCH method is used for retrieving a filtered list based on request body parameters (such as actor_member_id, mentioned_member_id, content_type, content_id, or created_at) as defined in the schema. This is not a partial update, but an advanced search endpoint for retrieving multiple results.","description":"This operation provides an advanced search/list retrieval for discussion_board_mentions entities. It allows clients to query mentions by various supported parameters in the request body, such as actor_member_id, mentioned_member_id, content_type, content_id, and created_at. It supports pagination, filtering, and potentially sorting results, as required for features like notification history, mention review, or analytics.\n\nThe schema for discussion_board_mentions includes only the following fields: id, mentioned_member_id, actor_member_id, content_type, content_id, and created_at. All queries and filters must reference strictly these fields, and the response should be a list of mention objects matching the criteria. No fields such as deleted_at, updated_by, or similar are available in this entity and must not be referenced.\n\nPermission checks should ensure that only authorized actors can access mentions relevant to them. Error handling must handle cases where filters are invalid or where users lack access to some data. This endpoint supports power users and moderators in tracking and managing mentions as part of notifications (F07).","summary":"List/search mentions in discussion_board_mentions with request body filters (not partial update).","parameters":[],"requestBody":{"description":"Searching and filtering parameters for retrieving a list of mentions.","typeName":"IDiscussionBoardMention.IRequest"},"responseBody":{"description":"Paginated list of mention objects matching the search criteria.","typeName":"IPageIDiscussionBoardMention"},"authorizationRoles":null,"path":"/discussionBoard/mentions","method":"patch"},{"specification":"Retrieve a single mention record from the discussion_board_mentions table by id. Only the id field should be used as a parameter. The returned object will contain only fields defined in the Prisma schema: id, mentioned_member_id, actor_member_id, content_type, content_id, and created_at.","description":"Fetch a single discussion_board_mentions entity by its unique id. The schema specifies only the following fields: id, mentioned_member_id, actor_member_id, content_type, content_id, and created_at. This endpoint returns all defined fields for the targeted mention and should not include or reference any non-existent fields, such as deleted_at, update timestamps, or audit logs.\n\nUsed in scenarios where a user or moderator wants to view the details of a specific mention event (e.g., for notification review, audit, or message context extraction). Error situations, such as not found or unauthorized access, should be gracefully handled.","summary":"Get a mention by id from discussion_board_mentions (fields as schema-defined only).","parameters":[{"name":"id","description":"Unique identifier for the mention record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full mention object as defined in the schema.","typeName":"IDiscussionBoardMention"},"authorizationRoles":null,"path":"/discussionBoard/mentions/{id}","method":"get"},{"specification":"Create a new mention record in the discussion_board_mentions table. The POST method accepts mention details corresponding strictly to schema-defined fields: mentioned_member_id, actor_member_id, content_type, and content_id. No extra fields outside the schema are permitted. Returns the created entity.","description":"Insert a new mention in the discussion_board_mentions table. Clients must provide mentioned_member_id (the target of the mention), actor_member_id (the user creating the mention), content_type (e.g., thread, post, comment), and content_id (UUID for the content where mention occurred). created_at is generated automatically. The payload must not include or reference any fields not defined in the schema.\n\nCreates an auditable entry for use in notifications, history, or analytics flows as described in F07 of the requirements. The endpoint should return a representation of the newly created mention entity, containing only the fields listed in the Prisma schema (no soft-deletion, modification, or extra audit fields).","summary":"Create a new mention in discussion_board_mentions with schema-defined fields only.","parameters":[],"requestBody":{"description":"Mention creation payload as per schema (no extra fields).","typeName":"IDiscussionBoardMention.ICreate"},"responseBody":{"description":"The newly created mention entity.","typeName":"IDiscussionBoardMention"},"authorizationRoles":null,"path":"/discussionBoard/mentions","method":"post"},{"specification":"Update an existing mention record in the discussion_board_mentions table. PUT method is used for full resource replacement, requiring all relevant fields (mentioned_member_id, actor_member_id, content_type, content_id). No extra fields are permitted. Updates are only applied to fields present in the schema, and not to non-existent fields like deleted_at or audit logs.","description":"This endpoint updates all updatable fields of an existing mention in the discussion_board_mentions table by its id. The request body should include only mention fields present in the schema: mentioned_member_id, actor_member_id, content_type, content_id. created_at cannot be changed. All updates must avoid referencing any non-existent fields, such as deleted_at, created_by, or similar.\n\nThis allows for correcting mention targets, actor assignment, or content reference in line with the requirements for mention management and audit (F07). On success, returns the updated mention, reflecting only schema-defined fields. Idempotency and all validation rules must follow standard PUT semantics.","summary":"Replace an existing mention entity in discussion_board_mentions with request body fields.","parameters":[{"name":"id","description":"Identifier for the mention entity to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload with all fields to replace the entity (schema-only fields).","typeName":"IDiscussionBoardMention.IUpdate"},"responseBody":{"description":"The updated mention entity as per schema.","typeName":"IDiscussionBoardMention"},"authorizationRoles":null,"path":"/discussionBoard/mentions/{id}","method":"put"},{"specification":"Delete a mention record from the discussion_board_mentions table. The schema does not have a soft delete field, so this operation performs a hard delete (removal) by id. Only the id is used to locate and delete the mention. All other fields are ignored. This action is permanent and non-reversible via the API.","description":"Removes a single mention entity from the discussion_board_mentions table based on its id. As the schema does not contain a soft delete (e.g., deleted_at), the DELETE operation performs a hard deletion, meaning the record is permanently removed and cannot be restored through the API. Only the id field is used in the operation. References to additional fields, non-existent or otherwise, are NOT permitted.\n\nThe DELETE endpoint is critical for managing audit, data clean-up, or removing erroneous/expired mentions for notification management (F07).","summary":"Permanently delete a mention entity from discussion_board_mentions by id (hard delete).","parameters":[{"name":"id","description":"Id of the mention entity to delete from the system.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionBoard/mentions/{id}","method":"delete"},{"specification":"List/search all vote types in the discussion_board_vote_types table. PATCH is used for complex querying/search (not for partial entity updates). Fields available for search/filter: id, code, name, description, created_at, updated_at only. No soft delete field exists. Pagination and/or sorting supported in the request body. Returns paged results.","description":"Searches for discussion_board_vote_types entities using request body parameters. Filters can be applied to id, code, name, description, created_at, updated_at (as per schema). Useful for site administrators, configuration workflows, UI setup, or analytics. There is no deleted_at field, so all returned results are active (hard deletes only). The endpoint supports pagination, filtering, and potentially sorting but only using schema-present fields.\n\nDo NOT reference fields such as deleted_at, created_by, etc. in request or responses. Returns a paginated collection of vote type objects. Errors from invalid filters or unauthorized access must be handled gracefully.","summary":"Search/list vote types with complex filters for discussion_board_vote_types (no partial update).","parameters":[],"requestBody":{"description":"Search/filter parameters for listing vote types.","typeName":"IDiscussionBoardVoteType.IRequest"},"responseBody":{"description":"Paginated results of vote types matching search criteria.","typeName":"IPageIDiscussionBoardVoteType"},"authorizationRoles":null,"path":"/discussionBoard/voteTypes","method":"patch"},{"specification":"Get an individual vote type from discussion_board_vote_types by id. The schema contains only id, code, name, description, created_at, updated_at fields for this entity. Only use the id as identifier, and response must not contain non-existent fields.","description":"Retrieves a single vote type entity by primary key from discussion_board_vote_types. The only fields in the schema are: id, code, name, description, created_at, and updated_at. This endpoint is necessary for viewing the characteristics of specific voting mechanism types (e.g., for displaying vote options in the UI or enforcing logic in content voting flows). No soft deletion exists (deleted_at is not present), so only active or existing types are retrievable. Fields outside of the schema, such as state, are not permitted in the response.\n\nHandles cases where the id does not exist by returning not found errors.","summary":"Get a single vote type from discussion_board_vote_types by id (schema-only fields).","parameters":[{"name":"id","description":"Vote type id (UUID) to retrieve from the table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full vote type entity with all schema fields.","typeName":"IDiscussionBoardVoteType"},"authorizationRoles":null,"path":"/discussionBoard/voteTypes/{id}","method":"get"},{"specification":"Create a new vote type entry in the discussion_board_vote_types table. Only schema-defined fields (code, name, description) are allowed in the request. created_at and updated_at are handled automatically. No soft delete or extra fields allowed. Returns the created entity.","description":"Allows administrators to define a new voting option type in the system, such as 'upvote', 'downvote', etc. The schema allows only code, name, and description as user-supplied fields. No soft delete is supported, and fields such as deleted_at must not appear in request or response. The entity is created with a new id and system timestamps.\n\nThis operation is essential for extending or modifying the available vote options for UI and content workflows. Returns the created vote type as per all schema-defined fields only.","summary":"Create a new vote type in discussion_board_vote_types with schema-defined fields only.","parameters":[],"requestBody":{"description":"Vote type creation data per schema-only fields.","typeName":"IDiscussionBoardVoteType.ICreate"},"responseBody":{"description":"The created vote type entity.","typeName":"IDiscussionBoardVoteType"},"authorizationRoles":null,"path":"/discussionBoard/voteTypes","method":"post"},{"specification":"PUT operation to fully update a vote type in discussion_board_vote_types by id. Only code, name, or description can be changed (as per schema). created_at and updated_at are managed by the system. No soft delete exists.","description":"This endpoint replaces all updatable fields of a given vote type entity. Fields allowed for modification per schema are: code, name, and description. No soft delete or deletion-related fields may be referenced. System-generated fields (id, created_at, updated_at) are handled separately and should not be in the request body. The endpoint must validate that the new values do not violate uniqueness constraints (for code and name). Returns the updated vote type as defined by the schema. Error handling must deal with unique constraint violations and not-found scenarios.","summary":"Replace an existing vote type in discussion_board_vote_types by id (PUT, schema-only fields).","parameters":[{"name":"id","description":"Id of the vote type to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full update data for all updatable fields (per schema).","typeName":"IDiscussionBoardVoteType.IUpdate"},"responseBody":{"description":"The updated vote type entity (full schema).","typeName":"IDiscussionBoardVoteType"},"authorizationRoles":null,"path":"/discussionBoard/voteTypes/{id}","method":"put"},{"specification":"Delete a vote type entry from the discussion_board_vote_types table. No soft delete exists (deleted_at is not in schema), so DELETE is a hard delete operation by id. Any related votes must be checked at the application level, as the schema does not address cascading deletes. The only parameter used is id.","description":"Permanently remove a vote type entity from discussion_board_vote_types by its primary key. Because the schema does not contain deleted_at, the operation is a hard delete. Attempts to delete a vote type in use may fail depending on referential constraints or application logic. Only id is used to identify the record for deletion. No field outside the schema should be referenced.\n\nThis operation is necessary for administrators to manage supported vote types and clean up deprecated options. Error handling must cover authentication as well as referential integrity cases (e.g., associated votes still exist for this type).","summary":"Hard delete a vote type from discussion_board_vote_types by id (permanent removal).","parameters":[{"name":"id","description":"Id of the vote type entity to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":null,"path":"/discussionBoard/voteTypes/{id}","method":"delete"},{"specification":"List/search all votes (across threads, posts, or comments) found in discussion_board_votes. PATCH method allows for complex querying and is not used for partial entity updates. Only fields in the schema (id, voter_id, vote_type_id, thread_id, post_id, comment_id, created_at, updated_at) can be used as filter or returned fields. Returns a paginated array of matching vote entities.","description":"Retrieves a paginated list of votes from the discussion_board_votes table as per advanced filtering criteria provided in the request body. Searchable fields include: id, voter_id, vote_type_id, thread_id, post_id, comment_id, created_at, updated_at. The API will not accept any field outside of those defined in the schema, and it must not reference deleted_at, created_by, or similar non-existent fields.\n\nSupports features like aggregate voting history, analytics, UI rendering for voting, and admin review of voting activity. Pagination and sorting should be implemented in the request and response structure. Permissions must ensure that only authorized users (e.g., the voter, content owner, or admins) may access non-public voting data. Error handling covers not found, unauthorized, and validation failure scenarios.","summary":"List/search votes across all supported content types from discussion_board_votes (PATCH, advanced criteria).","parameters":[],"requestBody":{"description":"Filter/search parameters per schema-defined vote fields only.","typeName":"IDiscussionBoardVote.IRequest"},"responseBody":{"description":"Paged list of vote entities matching the query.","typeName":"IPageIDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes","method":"patch"},{"specification":"This operation retrieves a single discussion board vote record by its unique ID from the discussion_board_votes table. The fields exposed are limited strictly to those present in the Prisma schema: id, voter_id, vote_type_id, thread_id, post_id, comment_id, created_at, and updated_at. The endpoint enables clients to fetch the current state of a specific vote, including associations to voter, vote type, and the optionally referenced thread, post, or comment. No soft-delete field is present, so deleted records will not be queryable. This endpoint may be used for admin review, member vote history, and moderation interfaces.\n\n- Only exposes strictly existing columns: id, voter_id, vote_type_id, thread_id (nullable), post_id (nullable), comment_id (nullable), created_at, updated_at.\n- NEVER includes or references deleted_at or other non-existent fields.\n- Properly enforces UUID format for the id.\n- Returns the full vote entity in detail.\n- Used by backend services, moderation tools, and clients needing to display or audit an individual vote.","description":"Retrieves a single vote record from the discussion_board_votes table using its unique UUID identifier. The response contains only the schema-defined fields: id, voter_id (UUID of the member who cast the vote), vote_type_id (UUID of the vote type, e.g., 'upvote'), optionally thread_id, post_id, or comment_id (one must be non-null; all are UUIDs), plus created_at and updated_at timestamps. This endpoint does not reference any fields not present in the schema and does not reflect deleted states, as there is no deleted_at column. If the ID does not exist, a not-found error is returned. Related vote type information must be retrieved via a separate API call to the vote types resource.","summary":"Get a single vote by ID (discussion_board_votes table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the vote to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete vote record as stored in discussion_board_votes table.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes/{id}","method":"get"},{"specification":"This operation inserts a new vote record into the discussion_board_votes table. The schema supports voting by members (voter_id) on either a thread, post, or comment, using a specific vote_type_id. Fields accepted during creation are: voter_id (UUID), vote_type_id (UUID), plus the UUID of the target content (thread_id, post_id, or comment_id), with one REQUIRED to be non-null (enforced at the application logic level). The only other fields settable/returnable at creation are created_at (set server-side) and updated_at (if needed). This operation never references non-existent fields or columns such as deleted_at.\n\n- Accepts only those fields present in the schema: voter_id, vote_type_id, and one of thread_id/post_id/comment_id.\n- Sets created_at and updated_at server-side.\n- Does not manipulate or reference deleted states.","description":"Creates a new vote (from a member) and records it in the discussion_board_votes table. Required properties: voter_id (UUID of the voting member), vote_type_id (identifies type such as upvote/downvote), plus EITHER thread_id, post_id, or comment_id (one and only one, as UUID, required). At least one of these three target IDs must be specified; all are nullable, but app/business logic should enforce only one. On success, returns the created vote entity as stored. Does not interact with or expose any deleted_at or soft-delete semantics.","summary":"Create a new vote (discussion_board_votes table)","parameters":[],"requestBody":{"description":"New vote object to insert. Must include voter_id, vote_type_id, and one of thread_id, post_id, or comment_id.","typeName":"IDiscussionBoardVote.ICreate"},"responseBody":{"description":"Complete created vote record as stored in discussion_board_votes table.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes","method":"post"},{"specification":"This operation updates an existing vote record in the discussion_board_votes table by its unique ID, modifying only schema-valid columns. Supported updates include changing the vote_type_id or switching the referenced target among thread_id, post_id, or comment_id (one MUST be non-null), as well as record update timestamp (updated_at, updated by the system automatically). The only fields eligible for update are vote_type_id, thread_id, post_id, and comment_id. Fields like created_at and id are immutable. There is no soft delete mechanism (no deleted_at field), so this update is effective immediately and permanent.","description":"Updates an existing vote's type or target content. Sets the updated_at timestamp to the current time upon update. Fields allowed for update: vote_type_id (UUID), and optionally, which content this vote applies to (thread_id, post_id, comment_id, all UUIDs; only one should be non-null). id is immutable. This operation cannot affect or read any deleted_at field as it is not present in the schema. Used for correcting misvotes or changing the target content association. Returns the updated entire vote record as stored.","summary":"Update an existing vote (discussion_board_votes table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the vote, including vote_type_id or new thread_id/post_id/comment_id.","typeName":"IDiscussionBoardVote.IUpdate"},"responseBody":{"description":"Complete updated vote record.","typeName":"IDiscussionBoardVote"},"authorizationRoles":null,"path":"/discussionBoard/votes/{id}","method":"put"},{"specification":"This operation deletes a vote record from the discussion_board_votes table by its unique ID. There is NO deleted_at field, so this operation performs a HARD DELETE, permanently removing the row from the database. Once deleted, the record is unrecoverable. Application/business logic must ensure idempotency and integrity post-deletion. The operation enforces the exact set of columns: id (UUID) as the only parameter to identify target record.","description":"Deletes a vote entry from the discussion_board_votes table by its UUID. This is a HARD DELETE; the target row is permanently removed because the schema does not define a soft-delete (deleted_at) field. Calling this endpoint is irreversible, and no deleted_at or recovery mechanism is provided as per the schema. This operation is intended for admin, moderation, or user vote retraction scenarios where true record removal is desired. If vote does not exist, returns not found.","summary":"Delete a vote (hard delete, discussion_board_votes table)","parameters":[{"name":"id","description":"Unique identifier (UUID) of the vote to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Empty object on success; no content is returned as vote is deleted.","typeName":"IEmpty"},"authorizationRoles":null,"path":"/discussionBoard/votes/{id}","method":"delete"},{"specification":"This operation retrieves a list of discussion board tags from the discussion_board_tags table, supporting advanced search and filtering. The PATCH method is used for complex query request bodies including search keywords, creation/modification date ranges, and sorting preferences. Fields exposed are id, name, description, created_at, updated_at, and (optionally) deleted_at. Since a deleted_at field exists, soft-deleted tags can be included, excluded, or filtered explicitly. The operation adheres strictly to schema-defined fields; never references fields outside the schema. Used for tag management, selection, or public discovery in the discussion board.","description":"Retrieves a paginated list of tag records from the discussion_board_tags table, using advanced query capabilities via a PATCH body. The request may include filters for id, name, creation or modification ranges, and explicit filters on deleted_at (for soft-deleted record handling). Returns all fields present in the schema: id (UUID), name (unique string), description (optional), created_at, updated_at, and deleted_at (nullable, for soft delete). This endpoint is used by tag management UIs, admin tools, or clients needing to show/discover available tags—including searching and sorting.","summary":"Search/list tags with filtering/sorting (discussion_board_tags table)","parameters":[],"requestBody":{"description":"Search, filter, and sort parameters for tag listing.","typeName":"IDiscussionBoardTag.IRequest"},"responseBody":{"description":"Paginated/tagged set of tag records from discussion_board_tags.","typeName":"IPageIDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags","method":"patch"},{"specification":"This operation retrieves a single tag by its unique identifier from the discussion_board_tags table. The resulting data includes only actual schema fields: id, name, description (nullable), created_at, updated_at, and deleted_at (nullable, as soft delete is supported). The endpoint allows public retrieval of tag information (e.g., for filtering, tag UI drilldown, or admin review). No business logic beyond schema-present fields is performed. If the tag is soft-deleted (deleted_at set), the record is still retrievable by this endpoint, supporting reversible UI/moderation flows. No non-existent fields are referenced.","description":"Gets the record for a single tag using its UUID id. Returns id, name (unique string), description (nullable string), created_at (timestamp), updated_at (timestamp), and deleted_at (nullable timestamp for soft deletion). No other fields are included or referenced. If the ID is invalid or does not exist, a not-found response is returned. Soft-deleted tags (deleted_at present) are returned by this endpoint for moderation/admin audit, allowing possible un-delete or review.","summary":"Get a single tag by ID (discussion_board_tags table)","parameters":[{"name":"id","description":"Unique identifier (UUID) for the tag to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Tag record as stored in discussion_board_tags table, including soft-deleted tags.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags/{id}","method":"get"},{"specification":"This operation creates a new tag record in the discussion_board_tags table. Only fields explicitly present in the schema are accepted: name (unique, required string), optional description, created_at/updated_at (set server-side), and deleted_at remains null at creation (for soft delete logic). Other fields or invented fields are strictly disallowed. This endpoint is typically used only by administrators or moderators to add new tags for UI filtering, discovery, or content organization.","description":"Creates a tag record, requiring only name (unique string) as input. Optional description may be provided. At creation, deleted_at is not set (implicitly null, record is active). No other fields are accepted or stored. All returned fields strictly match schema: id (UUID, auto-generated), name (string), description (nullable), created_at, updated_at, and deleted_at (nullable, should be null for new records). Used in tag management admin UIs, or bulk data seeding flows.","summary":"Create a new tag in the discussion_board_tags table","parameters":[],"requestBody":{"description":"New tag specification: requires name (string), optional description.","typeName":"IDiscussionBoardTag.ICreate"},"responseBody":{"description":"Created tag record as stored in discussion_board_tags table.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags","method":"post"},{"specification":"This operation updates an existing tag record in the discussion_board_tags table by unique id. Editable fields, as per schema, are name (string, must remain unique), description (optional), and soft-delete status via deleted_at (for moderation reversal/application). id and created_at are immutable. Updates to updated_at are handled automatically. Never references or changes any schema-nonexistent fields. Used by admin/moderation consoles for tag edits, or revert deletion/restore.","description":"Updates an existing tag. Editable fields: name (unique string), description (optional string, nullable), and, optionally, set deleted_at for soft deletion or restoration (must be a timestamp or null). id is immutable. The operation does not reference non-schema fields. Returns full updated record after mutation, including updated_at as managed by the system. Used for tag edits, moderation soft-delete/restore, or retagging migrations.","summary":"Update a tag (discussion_board_tags table)","parameters":[{"name":"id","description":"UUID of tag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable tag fields: name (string), description (optional), deleted_at (for soft delete/restore).","typeName":"IDiscussionBoardTag.IUpdate"},"responseBody":{"description":"Complete updated tag record including any soft delete changes.","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags/{id}","method":"put"},{"specification":"This operation deletes (soft deletes) a tag record from the discussion_board_tags table by unique id. If deleted_at exists in the schema (which it does), this endpoint sets deleted_at to the current timestamp (soft deletion) rather than removing the record from the database. As soft delete is enabled, tags can be restored by clearing deleted_at via update. This operation never removes the row permanently. id must be provided as a UUID.","description":"Soft deletes a tag by setting its deleted_at field to the current timestamp. Requires tag id as UUID. The record is retained in the database for audit/moderation purposes, allowing potential restoration by clearing deleted_at. No permanent hard delete is performed, and no non-schema fields are affected. Used for compliance, audit trails, or reversible moderation. If the tag does not exist, returns not found. Returns the full updated record with deleted_at set.","summary":"Soft delete a tag (discussion_board_tags table)","parameters":[{"name":"id","description":"UUID of tag to soft-delete (sets deleted_at).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Tag record as stored after soft-deletion (deleted_at set).","typeName":"IDiscussionBoardTag"},"authorizationRoles":null,"path":"/discussionBoard/tags/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of categories from the discussion_board_categories table, using the PATCH method to allow for complex query/filter/sort expression in the request body. Supported filters: id, name, created_at/updated_at ranges, and deleted_at (enables filtering for soft-deleted records, as the field exists in schema). NEVER references absent fields. The endpoint returns only schema-present fields: id, name (unique), description (optional), created_at, updated_at, and deleted_at (soft delete). Used for UI category filtering/browsing, admin interfaces, and advanced search scenarios needing sorting, logical filtering, or full-text search by name or description.","description":"Fetches a paginated category list, supporting advanced search and filtering. Search parameters are provided in PATCH body, and can filter on: id (UUID), name (string), created_at/updated_at (timestamp ranges), and deleted_at (include/exclude/only). Only schema-defined fields are present: id, name, description (optional), created_at, updated_at, deleted_at (soft delete, nullable). Used by admin panels, moderation UIs, or client-side content discovery/browsing. Returns paginated results for client-side navigation or infinite scroll.","summary":"Search/list categories with filtering/sorting (discussion_board_categories table)","parameters":[],"requestBody":{"description":"Request object for category search, filtering, and sorting.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated/category list records as per schema.","typeName":"IPageIDiscussionBoardCategory"},"authorizationRoles":null,"path":"/discussionBoard/categories","method":"patch"},{"specification":"This operation retrieves a single category record by UUID from the discussion_board_categories table. The only fields returned are strictly as per schema: id (UUID), name (unique, string), description (nullable), created_at (timestamp), updated_at (timestamp), and deleted_at (nullable, for soft delete). If the category is soft-deleted (deleted_at set), it will still be returned (enables moderation/auditing by admin). This operation never references not-present fields. Used by admin/UX for display, management, or category drilldown.","description":"Gets the record for a single category by its unique UUID. Returns fields: id, name, description (nullable string), created_at, updated_at, and deleted_at (nullable soft delete timestamp). Never includes non-schema fields. If the category does not exist, returns an error. Used by admin, client, and moderation browsers.","summary":"Get a single category by ID (discussion_board_categories table)","parameters":[{"name":"id","description":"UUID for the category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Category record as stored, including soft-delete state.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":null,"path":"/discussionBoard/categories/{id}","method":"get"},{"specification":"This operation creates a new category in the discussion_board_categories table. Only schema-defined fields are accepted: name (unique, string, required), and optional description (string, nullable). created_at and updated_at are set by the system; deleted_at remains null on creation. No extraneous or non-schema fields accepted. This endpoint is used by admin or moderator flows to add new content/navigational categories for thread organization, browsing, or client-side content discovery.","description":"Creates a new category. Required: name (string, unique per table). Optional: description (nullable string). created_at/updated_at created by backend, deleted_at not set. Returned object contains all persisted record fields: id (UUID), name, description (nullable), created_at, updated_at, deleted_at (null for new). Used in admin, content/configuration flows. This operation never references not-present fields.","summary":"Create a new category (discussion_board_categories table)","parameters":[],"requestBody":{"description":"Category creation object: requires name; description optional.","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"Created category record per schema.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":null,"path":"/discussionBoard/categories","method":"post"},{"specification":"This operation updates an existing discussion board category given its unique UUID identifier. The update will only be allowed for the actual schema-defined fields: 'name' (category label) and 'description' (optional purpose/scope). The request must include the new values for updatable fields according to the Prisma schema, strictly disallowing the update of non-existent fields. The operation does not update audit fields (created_at, updated_at), which are set automatically by the system. It performs updates only and never references or touches soft-delete logic, as deletion is a separate endpoint.","description":"This API operation updates one or more properties of an existing discussion board category. Only schema-defined fields can be edited: 'name' (the unique, human-readable category label, required) and 'description' (optional string describing the category's purpose). Attempts to update any property not defined in the 'discussion_board_categories' table—such as deleted_at or created_at—are forbidden. Audit fields such as 'updated_at' are managed internally and cannot be supplied directly. Applications should invoke this API when an administrator edits category names or descriptions. If the new 'name' value conflicts with an existing category, the operation must fail with a uniqueness violation error. If successful, the category's details are updated, and the new data is returned in the response. If no matching category is found by the provided ID, a 404 error is returned. The operation rejects attempts to edit soft/hard-delete status, as deletion is strictly handled by the delete endpoint. Related endpoints: deleting a category (DELETE /discussionBoard/categories/{id}), creating a category (POST /discussionBoard/categories), retrieving a category by ID (GET /discussionBoard/categories/{id}).","summary":"Update an existing discussion board category by ID (discussion_board_categories).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the discussion board category (name, description).","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"The updated discussion board category object.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/categories/{id}","method":"put"},{"specification":"This operation deletes an existing discussion board category by its unique UUID identifier. The Prisma schema defines a nullable 'deleted_at' field, indicating that categories are soft-deleted. This API sets the 'deleted_at' timestamp (typically to current time) so that the category is excluded from active queries but remains in the system for auditing and potential restoration. The operation does not physically remove data from the database. Only the 'deleted_at' field is set; other data remains unchanged. ","description":"This API endpoint performs a soft delete of a discussion board category by setting its 'deleted_at' field to the current timestamp. The Prisma schema for 'discussion_board_categories' explicitly provides a nullable 'deleted_at' property, supporting reversible deletions and regulatory compliance. On request, the operation locates the category by provided UUID and updates the 'deleted_at' field if not already set, excluding the category from future active queries and listings. No actual data is removed; only the soft delete flag is set. If the category does not exist or has already been soft-deleted, a 404 or idempotent response is returned. This approach enables undo/restore workflows and historic record-keeping. Attempts to use this endpoint on categories without the 'deleted_at' field (which does exist in schema) would be rejected. Related endpoints: restoring a category (if implemented), updating a category (PUT /discussionBoard/categories/{id}).","summary":"Soft delete a discussion board category by ID (discussion_board_categories).","parameters":[{"name":"id","description":"Unique identifier (UUID) for the category to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Representation of the category after soft-delete (deleted_at set).","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/categories/{id}","method":"delete"},{"specification":"This operation retrieves a list of discussion board search histories, supporting search, pagination, and sorting according to the 'discussion_board_search_histories' schema. Each entry logs a user's (guest or member) executed search with details such as keyword, filters, context, and time. Complex search and navigation over histories is enabled, with support for filtering by actor, keyword, context, or date range.","description":"This API retrieves multiple discussion board search history entries. The 'discussion_board_search_histories' table contains per-search records, annotating the 'actor_id' (user or guest), 'keyword' (query string entered), 'filters' (serialized advanced search filters, optional), 'search_context' (location in UI), and 'created_at' timestamp. Callers may filter, paginate, or sort by these fields, supporting analytics, audit log review, and enhancement of user search experience. Application can limit results by user or keyword, or present histories by recent activity. No soft or hard deletion logic exists; records are always present unless removed with the delete endpoint. Related endpoints: GET/PATCH/POST/DELETE for search histories.","summary":"List and search discussion board search histories (discussion_board_search_histories).","parameters":[],"requestBody":{"description":"Request data for paginated, filtered, or sorted search history results.","typeName":"IDiscussionBoardSearchHistory.IRequest"},"responseBody":{"description":"Paginated list of search history entries.","typeName":"IPageIDiscussionBoardSearchHistory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories","method":"patch"},{"specification":"This operation retrieves a single search history entry from the discussion board, identified by its unique UUID. Provides a detailed view of the search event, as logged in the 'discussion_board_search_histories' schema, including actor, keyword, filters, search context, and the timestamp.","description":"This API endpoint fetches the details of a single discussion board search history entry by its UUID. The operation returns all schema-defined fields: 'id', 'actor_id' (the user/guest/membership session who performed the search), 'keyword' (the literal search string entered), 'filters' (serialized advanced filters object, if supplied), 'search_context' (where in the UI the search was initiated, if provided), and 'created_at' (when the search took place). No deletion, update, or audit timestamps are accessible from this endpoint; it is strictly for retrieval and only returns fields present in the database schema. If the specified record does not exist, a 404 error is returned. This endpoint is typically used by UI components or admin tools reviewing search history. Related endpoints: PATCH (list/by query), PUT (update), POST (create), and DELETE (remove).","summary":"Retrieve a single discussion board search history entry by ID (discussion_board_search_histories).","parameters":[{"name":"id","description":"UUID identifier for the target search history record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discussion board search history record.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories/{id}","method":"get"},{"specification":"This operation creates a new record in the 'discussion_board_search_histories' table, logging a user's search event for analytic, audit, or personalization purposes. The API requires the fields as defined in the schema: actor_id (UUID), keyword (non-null search string from the UI), optionally filters (serialized JSON string) and search_context, and automatically assigns an ID and created_at timestamp. Creation is available only to authenticated users or system actors with proper role.","description":"This API operation logs a new search history event for the discussion board search history table. Required input fields are: 'actor_id' (UUID of guest/member session performing the search), 'keyword' (the search phrase used). Optional elements are 'filters' (JSON string representing advanced search parameters), and 'search_context' (UI or application context for the search, if applicable). The system auto-generates a unique ID and creation timestamp. Application logic should validate all input fields according to business rules and the schema, and immediately return the recorded entry including all non-sensitive values. Related endpoints: update (PUT), retrieve by ID (GET), list (PATCH), delete (DELETE).","summary":"Log a new discussion board search history entry (discussion_board_search_histories).","parameters":[],"requestBody":{"description":"Information for the new search history record.","typeName":"IDiscussionBoardSearchHistory.ICreate"},"responseBody":{"description":"The created search history entry.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories","method":"post"},{"specification":"This operation updates an existing search history entry by its UUID, letting authorized users correct or annotate search event metadata. Updatable fields are 'keyword' (search phrase), 'filters' (advanced search criteria as JSON string), and 'search_context' (UI context). The schema does not permit update of the actor or original creation date, nor does it record soft/hard delete status. The endpoint strictly rejects references to fields or logic not present in the schema.","description":"This API updates one or more properties on a previously logged discussion board search history record, referenced by UUID. Permitted changes per schema: update 'keyword' (search phrase), modify 'filters' (serialized JSON of additional criteria), or set a new 'search_context' (UI/UX context string). The operation never allows change to the immutable 'actor_id' (who performed the search) or 'created_at' (timestamp of logging). Attempts to update fields outside the schema or manage deletion/audit status are forbidden and return validation errors. If the record does not exist, a 404 is returned. The endpoint returns the updated search history object as defined by schema. Related endpoints: create (POST), retrieve (GET), list (PATCH), delete (DELETE).","summary":"Update an existing discussion board search history record by ID (discussion_board_search_histories).","parameters":[{"name":"id","description":"UUID identifier for entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable search history fields: keyword, filters, search_context.","typeName":"IDiscussionBoardSearchHistory.IUpdate"},"responseBody":{"description":"The updated search history entry.","typeName":"IDiscussionBoardSearchHistory"},"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories/{id}","method":"put"},{"specification":"This operation deletes a search history entry from the discussion board by its UUID. The 'discussion_board_search_histories' schema does not include a soft-delete or 'deleted_at' field, so deletion is performed as a hard delete: the record is permanently removed from the database. Only administrators may perform this action.","description":"This API endpoint permanently deletes a search history record from the discussion board by its UUID. The backing schema lacks a soft-delete marker (such as 'deleted_at'), so the record is fully and irreversibly removed from the system (hard delete) upon request. If the record is not found, a 404 error is returned; otherwise, a successful deletion response is provided. The operation cannot be reversed, and deleted data is not recoverable. Attempts to reference non-existent or soft delete fields, or to partially remove data, will fail schema validation. This endpoint is intended strictly for administrative maintenance or compliance purposes.","summary":"Hard delete a discussion board search history by ID (discussion_board_search_histories).","parameters":[{"name":"id","description":"UUID identifier of the search history entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"path":"/discussionBoard/searchHistories/{id}","method":"delete"}],"components":{"schemas":{"IDiscussionBoardChannel.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"Filter by channel code. Should match the 'code' field on discussion_board_channels. Example: 'eco'."},"name":{"type":"string","description":"Filter by channel name. Should match the 'name' field on discussion_board_channels. Partial match is typically supported."},"description":{"type":"string","description":"Filter by channel description. Partial match search on 'description' column."},"created_at_from":{"type":"string","format":"date-time","description":"Return channels created after this timestamp (inclusive, UTC ISO 8601). Enables time-based filtering."},"created_at_to":{"type":"string","format":"date-time","description":"Return channels created before this timestamp (inclusive, UTC ISO 8601). Enables time-based filtering."},"updated_at_from":{"type":"string","format":"date-time","description":"Return channels updated after this timestamp (inclusive, UTC ISO 8601). Enables filter on last update time."},"updated_at_to":{"type":"string","format":"date-time","description":"Return channels updated before this timestamp (inclusive, UTC ISO 8601). Enables upper bound filtering."},"include_deleted":{"type":"boolean","description":"If true, include soft-deleted records (deleted_at is not null)."},"sort":{"type":"string","description":"Sort field (e.g., 'created_at', 'updated_at', 'name'). Direction can be specified as 'asc' or 'desc', e.g., 'created_at:desc'."},"page":{"type":"integer","description":"Page number for pagination. Defaults to 1.","minimum":1},"limit":{"type":"integer","description":"Records per page. Defaults to 100. Use for pagination.","minimum":1}},"description":"Request body for listing/filtering channels. Supports filtering by code, name, description, time ranges, including soft-deleted records, sorting, and pagination.\n\nAll fields correspond directly to atomic fields in the discussion_board_channels table. Does not include inline objects or references to foreign tables.\n\nMulti-paragraph description:\nThis object enables clients and admins to list, search, and filter discussion board channels in a structured, paginated way. It directly relates to features described in the requirements analysis around channel discovery, moderation, and admin control. Supports flexible UI querying by code, name, and soft-deletion state. Pagination and date-range parameters enable efficient handling of large channel sets in the admin console.","required":[]},"IPageDiscussionBoardChannel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardChannel"}}},"required":["pagination","data"],"description":"Paginated container for lists of discussion board channels.\n\nConforms to the IPage<T> pattern, where T is IDiscussionBoardChannel. Used in all paginated channel API results. Each page includes pagination metadata (current page, record counts) and an array of channel objects.\n\nDescription references requirements for audit-friendly, large-scale management of board structure and aligns with best practices for API pagination."},"IDiscussionBoardChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique channel identifier as a UUID string. Atomic and non-derived, used for referencing channels in all relations and APIs.\n\nThis field guarantees referential integrity and supports audit trails by uniquely identifying each channel entity."},"code":{"type":"string","description":"Unique channel code for addressing, navigation, and internal routing. Required and unique across all channels. Examples: 'pol', 'eco'. Enforced in database by unique constraint.\n\nThis property is used for clean URLs, cross-feature consistency, and admin selection interfaces."},"name":{"type":"string","description":"Human-friendly full channel name, used for selection, lists, and admin UI. Atomic and required. Example: 'Politics', 'Economics'.\n\nNot repeated or derived elsewhere; ensures normalization and clarity in content display."},"description":{"oneOf":[{"type":"string","description":"Channel description for display, discoverability, and search. Nullable atomic value, never repeated in other records. Example: 'Discussion of global economic issues.'\n\nSupports search UI, filtering, and summary views."},{"type":"null","description":"Channel description for display, discoverability, and search. Nullable atomic value, never repeated in other records. Example: 'Discussion of global economic issues.'\n\nSupports search UI, filtering, and summary views."}],"description":"Channel description for display, discoverability, and search. Nullable atomic value, never repeated in other records. Example: 'Discussion of global economic issues.'\n\nSupports search UI, filtering, and summary views."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp. UTC ISO 8601 datetime when the channel was created. Used for audit/compliance.\n\nField is set by the server on insert and never changes. Useful for sort/filter and analytics."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp. UTC ISO 8601. Reflects most recent admin or mod change to the channel entity.\n\nUsed for moderation history and change tracking."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp. Null if active, non-null if channel is soft-deleted (hidden, but recoverable).\n\nEnables compliance with audit/reversibility/non-destructive deletion requirements."},{"type":"null","format":"date-time","description":"Soft deletion timestamp. Null if active, non-null if channel is soft-deleted (hidden, but recoverable).\n\nEnables compliance with audit/reversibility/non-destructive deletion requirements."}],"description":"Soft deletion timestamp. Null if active, non-null if channel is soft-deleted (hidden, but recoverable).\n\nEnables compliance with audit/reversibility/non-destructive deletion requirements."}},"required":["id","code","name","created_at","updated_at"],"description":"Discussion Board Channel Entity.\n\nRepresents the top-level partition of the discussion board, e.g. 'Politics', 'Economics'. Implements features and business rules for channel-based organization, as documented in the requirements analysis. All fields are atomic, normalized, and strictly derived from the discussion_board_channels table.\n\nMultiple paragraphs:\nCore to organizing the forum, channels allow admins/moderators to divvy up content logically and manage access controls or promotional campaigns at the channel level. This type is used throughout channel management interfaces, in system audit logs, site config, and links all related sections and subforums.\n\nFull referential documentation of all fields is provided in the property descriptions, referencing original Prisma schema comments."},"IDiscussionBoardChannel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Required. New channel code, unique. Example: 'eco'."},"name":{"type":"string","description":"Required. Human-readable channel name. Example: 'Economics'."},"description":{"oneOf":[{"type":"string","description":"Optional. Channel description for search/discovery. Example: 'Discussion of global economic issues.'"},{"type":"null","description":"Optional. Channel description for search/discovery. Example: 'Discussion of global economic issues.'"}],"description":"Optional. Channel description for search/discovery. Example: 'Discussion of global economic issues.'"}},"required":["code","name"],"description":"Payload for creating a new channel entity.\n\nAll fields must conform to database constraints described in schema. Code must be unique per table rules, and name is required for user interface display. Description is optional and null indicates no channel description.\n\nThis object exactly matches the atomic, non-derived creation rules for top-level channels described in requirements analysis section 3 and original Prisma schema comments."},"IDiscussionBoardChannel.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"If present, updates the channel code. Must be unique; see schema for constraints."},"name":{"type":"string","description":"If present, sets a new human-friendly name for the channel."},"description":{"oneOf":[{"type":"string","description":"Optional update for channel's description. Null to unset."},{"type":"null","description":"Optional update for channel's description. Null to unset."}],"description":"Optional update for channel's description. Null to unset."}},"description":"Update payload for channel. Can change code, name, or description as allowed by schema. Partial/patch updates are permitted; all provided fields must map to atomic columns in the discussion_board_channels table.\n\nAttribute constraints as per creation rules apply (e.g., code uniqueness, non-null for code/name unless patch semantics permit).\n\nReferences creation/update flows in requirements, and business/validation requirements from original schema.","required":[]},"IDiscussionBoardSection.IRequest":{"type":"object","properties":{"discussion_board_channel_id":{"type":"string","format":"uuid","description":"Filter by parent channel (UUID). Required for channel-scoped section listing or hierarchy queries."},"code":{"type":"string","description":"Filter by unique section code within a channel. Example: 'markets'."},"name":{"type":"string","description":"Filter by section name. Partial match supported for search UIs."},"description":{"type":"string","description":"Search by section description. Enables full-text, partial, and filter-style queries."},"created_at_from":{"type":"string","format":"date-time","description":"Return sections created after this ISO datetime, inclusive."},"created_at_to":{"type":"string","format":"date-time","description":"Return sections created before this ISO datetime, inclusive."},"updated_at_from":{"type":"string","format":"date-time","description":"Return sections updated after this ISO datetime, inclusive."},"updated_at_to":{"type":"string","format":"date-time","description":"Return sections updated before this ISO datetime, inclusive."},"include_deleted":{"type":"boolean","description":"If true, soft-deleted sections (deleted_at != null) are included in search results."},"sort":{"type":"string","description":"Sort field (e.g., 'created_at', 'updated_at', 'name'), optionally with direction: 'created_at:desc'."},"page":{"type":"integer","description":"Page number for pagination. One-based. Defaults to 1.","minimum":1},"limit":{"type":"integer","description":"Records per page. Defaults to 100 for large boards.","minimum":1}},"description":"Request parameters for listing/filtering board sections. All properties map directly to base fields of the discussion_board_sections table.\n\nEnables admin/moderator UIs to query and manage sub-channel partitions, supporting all requirements for advanced search, dynamic content navigation, moderation, and admin review.","required":[]},"IPageDiscussionBoardSection":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSection"}}},"required":["pagination","data"],"description":"Paginated result object returning one page of section entities per board.\n\nImplements the IPage<T> wrapper for type-safe client/server interaction. Used throughout admin, moderation, and frontend interfaces for scalable board management and reporting."},"IDiscussionBoardSection":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this section. UUID style per standard board entity design."},"discussion_board_channel_id":{"type":"string","format":"uuid","description":"UUID foreign key: points to the parent channel entity. Required for all section relations and for enforcing hierarchy rules."},"code":{"type":"string","description":"Unique code within channel, used for routing and admin. See original schema comment for uniqueness scope."},"name":{"type":"string","description":"Descriptive section label for UI selection, admin listings, and search."},"description":{"oneOf":[{"type":"string","description":"Section description for display and discoverability. Optional and atomic."},{"type":"null","description":"Section description for display and discoverability. Optional and atomic."}],"description":"Section description for display and discoverability. Optional and atomic."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this section/chart entry. ISO 8601, UTC."},"updated_at":{"type":"string","format":"date-time","description":"Last update ISO 8601 timestamp. Used for audit and admin tracking."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp for moderation and compliance. Null means section is active; non-null means soft deleted."},{"type":"null","format":"date-time","description":"Soft-deletion timestamp for moderation and compliance. Null means section is active; non-null means soft deleted."}],"description":"Soft-deletion timestamp for moderation and compliance. Null means section is active; non-null means soft deleted."}},"required":["id","discussion_board_channel_id","code","name","created_at","updated_at"],"description":"Discussion Board Section Entity.\n\nProvides second-level forum partitioning within a channel as documented in the requirements analysis. All properties map directly to 1:1 database fields, and all relationships (parent channel) are expressed via foreign key.\n\nMultiple paragraph description formalizes section as child of channel, atomic, audit-ready, and fully aligned to the requirements around section management and operation. All property descriptions are referenced/derived from Prisma DB table, and 3NF normalization applies."},"IDiscussionBoardSection.ICreate":{"type":"object","properties":{"discussion_board_channel_id":{"type":"string","format":"uuid","description":"UUID of the parent channel this section will belong to. Must reference a valid discussion_board_channels entry (foreign key constraint)."},"code":{"type":"string","description":"Unique code for section within this channel. Example: 'markets'. Unique per channel for clean routing and admin configuration."},"name":{"type":"string","description":"Human-readable section name. Required for both admin and user UI navigation."},"description":{"oneOf":[{"type":"string","description":"Optional: Section description for search and admin reference."},{"type":"null","description":"Optional: Section description for search and admin reference."}],"description":"Optional: Section description for search and admin reference."}},"required":["discussion_board_channel_id","code","name"],"description":"Payload for section creation. Directly reflects the schema for discussion_board_sections table.\n\nAll required properties are atomic and needed for section insertion. Description is optional. This creation contract enforces referential integrity and aligns with both application and data layer requirements."},"IDiscussionBoardSection.IUpdate":{"type":"object","properties":{"discussion_board_channel_id":{"type":"string","format":"uuid","description":"Optionally update the parent channel for this section. Must be a valid UUID or null if no change."},"code":{"type":"string","description":"Update to code (unique within channel). Respects uniqueness constraint at channel level."},"name":{"type":"string","description":"Update to display name. Must remain unique within channel if applicable."},"description":{"oneOf":[{"type":"string","description":"Update description, or null to unset."},{"type":"null","description":"Update description, or null to unset."}],"description":"Update description, or null to unset."}},"description":"Update payload for board section entity. References atomic update of individual database columns.\n\nEnforces all channel and section uniqueness constraints, referential, and normalization requirements as per table specification. Required fields/primary key are resolved by path for update operations.","required":[]},"IDiscussionBoardConfiguration.IRequest":{"type":"object","properties":{"key":{"type":"string","description":"Filter by configuration key. Unique config setting identifier."},"value":{"type":"string","description":"Filter by configuration value (string or JSON, exact match or pattern depending on implementation)."},"created_at_from":{"type":"string","format":"date-time","description":"Created at lower bound filter (ISO 8601)."},"created_at_to":{"type":"string","format":"date-time","description":"Created at upper bound filter (ISO 8601)."},"updated_at_from":{"type":"string","format":"date-time","description":"Updated at lower bound."},"updated_at_to":{"type":"string","format":"date-time","description":"Updated at upper bound."},"sort":{"type":"string","description":"Sort field (e.g., 'created_at', 'updated_at', 'key'), optional direction (asc/desc) e.g., 'key:asc'."},"page":{"type":"integer","description":"Page number for pagination, 1-based.","minimum":1},"limit":{"type":"integer","description":"Records per page, default 100.","minimum":1}},"description":"Request object for listing and filtering configuration settings. Parameters support admin search and management of platform-level key/value pairs, referencing requirements around centralized configuration management, audit, and compliance.","required":[]},"IPageDiscussionBoardConfiguration":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardConfiguration"}}},"required":["pagination","data"],"description":"Paginated structure for configuration records, matching IPage<T> pattern where T=IDiscussionBoardConfiguration. Enables efficient admin-side review, sorting, and retrieval of potentially large key/value setting sets."},"IDiscussionBoardConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자(UUID).\n\n이 설정 레코드의 기본 키로, 시스템 내에서 각 환경설정 값을 유일하게 식별합니다. 관리, 감사, 추적 등 모든 연계 로직에서 참조됩니다. 예시: \"45006c7c-1142-4cdc-8276-e27accf0414d\"."},"key":{"type":"string","description":"설정 키(고유 문자열).\n\n환경설정 키로, 플랫폼 전역의 설정을 참조할 때 사용됩니다. 예: 'max_post_length', 'allow_guest_voting'.\n\nDB 고유 제약 조건이 있으므로 값이 중복될 수 없습니다."},"value":{"type":"string","description":"설정 값(문자열 또는 JSON 직렬화 문자열).\n\n각 환경설정의 실제 값이며, 단일 문자열로 저장할 수 있는 모든 데이터(숫자, 부울, JSON 직렬화 등)를 지원합니다. 예: '10000', '{\"enable\":true}'."},"description":{"oneOf":[{"type":"string","description":"설정 설명(선택적).\n\n이 설정이 무엇을 의미하고, 어떤 기능 제어 역할을 하는지 설명합니다. 관리자의 이해를 돕고, 대시보드 등에서 표시됩니다. 예: '게시글 최대 작성 가능 글자수 제한'."},{"type":"null","description":"설정 설명(선택적).\n\n이 설정이 무엇을 의미하고, 어떤 기능 제어 역할을 하는지 설명합니다. 관리자의 이해를 돕고, 대시보드 등에서 표시됩니다. 예: '게시글 최대 작성 가능 글자수 제한'."}],"description":"설정 설명(선택적).\n\n이 설정이 무엇을 의미하고, 어떤 기능 제어 역할을 하는지 설명합니다. 관리자의 이해를 돕고, 대시보드 등에서 표시됩니다. 예: '게시글 최대 작성 가능 글자수 제한'."},"created_at":{"type":"string","format":"date-time","description":"생성 타임스탬프(UTC ISO 8601).\n\n이 설정이 생성된 시점을 나타내며, 감사 추적 및 관리자 조회에 사용됩니다."},"updated_at":{"type":"string","format":"date-time","description":"최종 수정 타임스탬프(UTC ISO 8601).\n\n이 설정이 마지막으로 갱신된 시점을 기록합니다."}},"required":["id","key","value","created_at","updated_at"],"description":"설정 키-값 레코드 (discussion_board_configurations 테이블).\n\n전역 플랫폼 기능의 설정 및 동작을 동적으로 제어하기 위한 엔티티로, 게시판 동작과 안전성, 기능 확장성을 확보합니다. 키는 고유하며, 각 설정값은 atomic 데이터로 저장됩니다. 관리에서 수정·추적 및 설명이 가능하며, 관리자 전용 대시보드 및 API와 연동됩니다."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"현재 페이지 번호입니다. 전체 페이지 수 내에서 1 이상의 값을 가집니다."},"limit":{"type":"integer","format":"uint32","description":"페이지별 최대 데이터 개수. 기본값은 100이며, 1 이상 허용."},"records":{"type":"integer","format":"uint32","description":"전체 레코드 수. 필터 조건에 따라 동적으로 결정됩니다."},"pages":{"type":"integer","format":"uint32","description":"전체 페이지 수. records/limit 계산치로 전체 네비게이션에 사용."}},"required":["current","limit","records","pages"],"description":"페이지네이션 정보 타입이며, IPage<T> 각 페이지에 결합되어 반환되는 구조입니다.\n\ncurrent, limit, records, pages로 구성되어 전체 페이징 상태를 표현합니다."},"IDiscussionBoardConfiguration.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"환경설정 키(고유, 필수).\n\n플랫폼 기능 제어에 쓰일 유일 식별자로 사용되어야 하며, 예시는 'max_post_length', 'default_language' 등입니다."},"value":{"type":"string","description":"설정 값(필수).\n\n각 설정의 실제 값이며, 단일 문자열 또는 JSON 직렬화 문자열 가능합니다. 예: '2000', '{\"enable\": true}'."},"description":{"oneOf":[{"type":"string","description":"설정 항목의 관리자용 설명. 선택 입력 가능.\n\n이 설정이 무엇을 제어하는지, 핵심 용도와 관련 정책을 서술합니다. 관리자 UI 및 API 문서에서 활용됩니다."},{"type":"null","description":"설정 항목의 관리자용 설명. 선택 입력 가능.\n\n이 설정이 무엇을 제어하는지, 핵심 용도와 관련 정책을 서술합니다. 관리자 UI 및 API 문서에서 활용됩니다."}],"description":"설정 항목의 관리자용 설명. 선택 입력 가능.\n\n이 설정이 무엇을 제어하는지, 핵심 용도와 관련 정책을 서술합니다. 관리자 UI 및 API 문서에서 활용됩니다."}},"required":["key","value"],"description":"설정 키-값 생성 요청 데이터.\n\n새로운 환경설정 항목을 생성할 때 클라이언트가 보내는 요청 구조입니다. 키의 유일성과 값의 atomic 저장‧호환성이 핵심입니다."},"IDiscussionBoardConfiguration.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"변경할 설정 값(필수).\n\n수정할 환경설정의 값입니다. 예: 새로운 글자 제한, 정책 스위치 등."},"description":{"oneOf":[{"type":"string","description":"설정 항목의 관리자용 설명(선택)."},{"type":"null","description":"설정 항목의 관리자용 설명(선택)."}],"description":"설정 항목의 관리자용 설명(선택)."}},"required":["value"],"description":"환경설정 값/설명 수정 요청 구조.\n\n기존 설정에 대해 값(value) 및 관리자용 설명(description)만 수정할 수 있습니다."},"IPageDiscussionBoardGuest.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32","description":"페이지 번호(1-base). 기본값은 1입니다."},{"type":"null","format":"int32","description":"페이지 번호(1-base). 기본값은 1입니다."}],"description":"페이지 번호(1-base). 기본값은 1입니다."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"페이지별 레코드 제한(기본값: 100)."},{"type":"null","format":"int32","description":"페이지별 레코드 제한(기본값: 100)."}],"description":"페이지별 레코드 제한(기본값: 100)."},"session_token":{"oneOf":[{"type":"string","description":"조회할 세션 토큰 값. 특정 게스트 세션만 필터링할 때 사용."},{"type":"null","description":"조회할 세션 토큰 값. 특정 게스트 세션만 필터링할 때 사용."}],"description":"조회할 세션 토큰 값. 특정 게스트 세션만 필터링할 때 사용."},"ip_address":{"oneOf":[{"type":"string","description":"IP 주소 필터(선택). 지정된 IP의 세션만 반환."},{"type":"null","description":"IP 주소 필터(선택). 지정된 IP의 세션만 반환."}],"description":"IP 주소 필터(선택). 지정된 IP의 세션만 반환."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"조회 시작 시각(UTC ISO8601, 선택)."},{"type":"null","format":"date-time","description":"조회 시작 시각(UTC ISO8601, 선택)."}],"description":"조회 시작 시각(UTC ISO8601, 선택)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"조회 종료 시각(UTC ISO8601, 선택)."},{"type":"null","format":"date-time","description":"조회 종료 시각(UTC ISO8601, 선택)."}],"description":"조회 종료 시각(UTC ISO8601, 선택)."}},"description":"게스트 세션 목록 요청 (검색, 페이징, 필터 구조).\n\n특정 조건/범위의 비회원 접속기록 페이징, 분석, 감사 등을 위해 사용됩니다.","required":[]},"IPageDiscussionBoardGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardGuest"},"description":"요청 조건에 부합하는 discussion_board_guests 레코드 배열.\n\n각 레코드는 개별 게스트(비회원) 세션의 상세 정보이며, 식별자, 세션 토큰, IP, UserAgent, 타임스탬프 등 포함."}},"required":["pagination","data"],"description":"게스트 세션 엔티티의 페이지네이션 컨테이너.\n\n검색 조건에 따른 guest 세션 목록(배열)과 페이징 정보를 담는 표준 구조입니다."},"IDiscussionBoardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"기본 키. 고유 식별자(UUID)로써 게스트 세션을 시스템 내에서 유일하게 식별합니다."},"session_token":{"type":"string","description":"세션 토큰(고유).\n\n익명 접속자를 추적 및 감사용으로 식별하는 문자열. 예: 'guest_ae892ded9b5e2da4'"},"ip_address":{"type":"string","description":"IP 주소(문자열).\n\n접속한 게스트의 원본 IP로, 보안·감사·관리에서 사용됩니다. 예: '203.0.113.42'. 규정에 따라 익명화 적용될 수 있음."},"user_agent":{"oneOf":[{"type":"string","description":"사용자 에이전트 문자열(선택).\n\n브라우저/디바이스 구분 목적으로 저장. 예: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0)...'"},{"type":"null","description":"사용자 에이전트 문자열(선택).\n\n브라우저/디바이스 구분 목적으로 저장. 예: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0)...'"}],"description":"사용자 에이전트 문자열(선택).\n\n브라우저/디바이스 구분 목적으로 저장. 예: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:91.0)...'"},"created_at":{"type":"string","format":"date-time","description":"세션 생성 시각(UTC ISO 8601)."},"expires_at":{"type":"string","format":"date-time","description":"세션 유효 만료 시각(UTC ISO 8601)."}},"required":["id","session_token","ip_address","created_at","expires_at"],"description":"게스트 세션 정보 엔티티(discussion_board_guests 테이블).\n\n비회원 사용자의 각 세션 상태를 추적하며, 접속 감사, 악용 방지, 익명 사용 분석 등에 활용됩니다. 세션 토큰, IP, 만료 기한을 포함하는 것이 특징입니다."},"IDiscussionBoardGuest.ICreate":{"type":"object","properties":{"session_token":{"type":"string","description":"신규 세션 토큰(고유).\n\n서버/클라이언트가 발급한 게스트 세션 추적 문자열. 고유 값이어야 하며, 예시는 'guest_93fa10e8c9552da9' 등입니다."},"ip_address":{"type":"string","description":"게스트 접속 IP 주소(필수).\n\n실제 접속지 정보로, 추적과 감시, 악용 방지를 위함입니다."},"user_agent":{"oneOf":[{"type":"string","description":"사용자 에이전트 문자열(선택).\n\n디바이스/브라우저 구분 목적. 없으면 null 입력."},{"type":"null","description":"사용자 에이전트 문자열(선택).\n\n디바이스/브라우저 구분 목적. 없으면 null 입력."}],"description":"사용자 에이전트 문자열(선택).\n\n디바이스/브라우저 구분 목적. 없으면 null 입력."},"created_at":{"type":"string","format":"date-time","description":"세션 시작 시각(UTC)."},"expires_at":{"type":"string","format":"date-time","description":"세션 만료 예정 시각(UTC)."}},"required":["session_token","ip_address","created_at","expires_at"],"description":"게스트 세션 신규 생성 요청 구조.\n\n비회원 접속 기록을 남길 때 반드시 발급할 세션 정보 구조체입니다."},"IDiscussionBoardGuest.IUpdate":{"type":"object","properties":{"session_token":{"type":"string","description":"업데이트할 세션 토큰."},"ip_address":{"type":"string","description":"변경할 IP 주소."},"user_agent":{"oneOf":[{"type":"string","description":"에이전트 새 값(없으면 null 입력)."},{"type":"null","description":"에이전트 새 값(없으면 null 입력)."}],"description":"에이전트 새 값(없으면 null 입력)."},"expires_at":{"type":"string","format":"date-time","description":"만료일 갱신(UTC)."}},"description":"게스트 세션 수정 요청 구조.\n\n비회원 세션의 IP, 토큰, 에이전트, 만료일 정보 갱신용 타입.","required":[]},"IPageDiscussionBoardMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32","description":"페이지 번호(기본 1)."},{"type":"null","format":"int32","description":"페이지 번호(기본 1)."}],"description":"페이지 번호(기본 1)."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"페이지당 레코드 수(기본 100)."},{"type":"null","format":"int32","description":"페이지당 레코드 수(기본 100)."}],"description":"페이지당 레코드 수(기본 100)."},"username":{"oneOf":[{"type":"string","description":"검색용 사용자 이름(선택)."},{"type":"null","description":"검색용 사용자 이름(선택)."}],"description":"검색용 사용자 이름(선택)."},"email":{"oneOf":[{"type":"string","description":"이메일 검색(선택)."},{"type":"null","description":"이메일 검색(선택)."}],"description":"이메일 검색(선택)."},"display_name":{"oneOf":[{"type":"string","description":"디스플레이 네임 부분검색(선택)."},{"type":"null","description":"디스플레이 네임 부분검색(선택)."}],"description":"디스플레이 네임 부분검색(선택)."},"is_active":{"oneOf":[{"type":"boolean","description":"활성/비활성 필터(선택)."},{"type":"null","description":"활성/비활성 필터(선택)."}],"description":"활성/비활성 필터(선택)."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"등록일 시작 (ISO 8601, 선택)."},{"type":"null","format":"date-time","description":"등록일 시작 (ISO 8601, 선택)."}],"description":"등록일 시작 (ISO 8601, 선택)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"등록일 끝 (ISO 8601, 선택)."},{"type":"null","format":"date-time","description":"등록일 끝 (ISO 8601, 선택)."}],"description":"등록일 끝 (ISO 8601, 선택)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete 상태 필터(선택, null: active만, not null: 삭제)"},{"type":"null","format":"date-time","description":"Soft-delete 상태 필터(선택, null: active만, not null: 삭제)"}],"description":"Soft-delete 상태 필터(선택, null: active만, not null: 삭제)"}},"description":"회원(사용자) 목록 조회/검색 요청 구조.\n\npagination, 조건검색, soft-delete 상태 구분까지 지원합니다.","required":[]},"IPageDiscussionBoardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMember"},"description":"member 레코드 배열(각 사용자의 상세 정보 포함)"}},"required":["pagination","data"],"description":"회원 목록 페이지네이션 컨테이너.\n\n검색 등으로 조회된 사용자(회원) 엔티티 목록과 페이징 데이터를 담는 표준 구조입니다."},"IDiscussionBoardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"기본 키(UUID). 회원의 전역 고유 식별자입니다. 시스템 내 일관된 참조 또는 관계 연결에 사용됩니다."},"username":{"type":"string","description":"회원 고유 사용자명.\n\n게시판 내 식별 및 검색, 알람 및 인증 등 다양한 기능의 기본 키워드이자 프로필 정보입니다."},"email":{"type":"string","description":"회원 이메일 주소(고유).\n\n알림 발송, 비밀번호 복구, 인증 절차 절대값. 중복 허용 불가."},"hashed_password":{"type":"string","description":"비밀번호 해시(실제 패스워드는 저장‧전송 X).\n\n내부 인증 인터페이스에서만 활용."},"display_name":{"type":"string","description":"프로필 표시용 이름.\n\nUI에서 노출되는 닉네임 용도. 본명, 별명, 가명 가능."},"profile_image_url":{"oneOf":[{"type":"string","description":"프로필 이미지의 URL(선택값).\n\n커뮤니티 활동이력에서 UI/UX 표시용 채널로 활용합니다."},{"type":"null","description":"프로필 이미지의 URL(선택값).\n\n커뮤니티 활동이력에서 UI/UX 표시용 채널로 활용합니다."}],"description":"프로필 이미지의 URL(선택값).\n\n커뮤니티 활동이력에서 UI/UX 표시용 채널로 활용합니다."},"is_active":{"type":"boolean","description":"계정 활성화 상태(로그인 가능여부).\n\n활성: true(로그인/활동 가능), 비활성: false(정지, 영구 탈퇴 등)."},"created_at":{"type":"string","format":"date-time","description":"회원 등록일, UTC ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"회원 정보 최종 갱신일(UTC ISO 8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"탈퇴/삭제 Soft-Delete 일시(삭제 안 됨= null)"},{"type":"null","format":"date-time","description":"탈퇴/삭제 Soft-Delete 일시(삭제 안 됨= null)"}],"description":"탈퇴/삭제 Soft-Delete 일시(삭제 안 됨= null)"}},"required":["id","username","email","hashed_password","display_name","is_active","created_at","updated_at"],"description":"회원(유저/계정) 정보 엔티티(discussion_board_members 테이블).\n\n정규 회원의 고유 식별명, 이메일, 해시 패스워드, 닉네임, 프로필 이미지, 활성상태, 가입/갱신일, Soft Delete 기반 탈퇴 일시를 갖습니다. 게시글, 댓글, 알림 등 다양한 보드 내 관계 중심역할입니다."},"IDiscussionBoardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"회원 고유 사용자명(필수).\n\n회원 가입, 인증, 알림, 식별자 등 전 범위에서 고유, 중복불가로 사용됩니다."},"email":{"type":"string","description":"이메일 주소(필수).\n\n알림, 인증에 반드시 사용되며, 중복 허용 불가. 형식: RFC 5322 준수 이메일."},"hashed_password":{"type":"string","description":"비밀번호 해시(필수).\n\n실제 비밀번호 원문이 절대 노출/저장되지 않으며, 반드시 해시 후 저장."},"display_name":{"type":"string","description":"프로필용 표시 이름(필수).\n\n닉네임, 가명, UI/UX에서 보여지는 값."},"profile_image_url":{"oneOf":[{"type":"string","description":"프로필 이미지 URL(선택).\n\n없으면 null 지정."},{"type":"null","description":"프로필 이미지 URL(선택).\n\n없으면 null 지정."}],"description":"프로필 이미지 URL(선택).\n\n없으면 null 지정."},"is_active":{"type":"boolean","description":"계정 활성화 플래그(필수).\n\n바로 활성화= true, 가입 직후 대기 또는 비활성시 false."}},"required":["username","email","hashed_password","display_name","is_active"],"description":"회원 계정 신규 생성 요청(회원 가입).\n\n중복 검사/유효성 검사 완료된 요청에 대해 회원계정이 실제로 생성될 때 사용하는 스키마입니다."},"IDiscussionBoardMember.IUpdate":{"type":"object","properties":{"username":{"type":"string","description":"The member's unique public username. Used for profile URL, notification, and search. Must be unique. Referenced from discussion_board_members.username in the Prisma schema. Example: \"democracyFan_21\".\n\nMust reflect update intent; changing this affects how the member is identified platform-wide."},"email":{"type":"string","description":"The member's email address for system notifications, password recovery, and authentication. Must be unique per member. Referenced from discussion_board_members.email in Prisma schema. Example: \"jane.doe@email.com\".\n\nChanges require authentication and have security implications. Refer to business rules for email validation and use."},"hashed_password":{"type":"string","description":"Hashed password storage for the member. Directly referenced from discussion_board_members.hashed_password in Prisma. Password must be securely handled—never raw in UI.\n\nUpdates require secure handling, validations, and may trigger audit logs."},"display_name":{"type":"string","description":"User-chosen display name (nickname) for UI and community presence. From discussion_board_members.display_name in Prisma schema. Example: \"Jane D.\".\n\nThis property can be updated to change visible name without affecting login/identity."},"profile_image_url":{"oneOf":[{"type":"string","description":"Optional URI for the member's profile image. Supports both image upload (url to CDN) and null (no image). From discussion_board_members.profile_image_url in Prisma (nullable). Example: \"https://cdn.site.com/profiles/member-42.jpg\"."},{"type":"null","description":"Optional URI for the member's profile image. Supports both image upload (url to CDN) and null (no image). From discussion_board_members.profile_image_url in Prisma (nullable). Example: \"https://cdn.site.com/profiles/member-42.jpg\"."}],"description":"Optional URI for the member's profile image. Supports both image upload (url to CDN) and null (no image). From discussion_board_members.profile_image_url in Prisma (nullable). Example: \"https://cdn.site.com/profiles/member-42.jpg\"."},"is_active":{"type":"boolean","description":"Whether the member account is active. Used for suspending or re-enabling accounts. Referenced from discussion_board_members.is_active in Prisma schema. Set to false for banned/deactivated users."}},"required":["username","email","display_name","is_active"],"description":"Payload for updating a discussion board member account. Includes all updatable fields as per discussion_board_members schema. hashed_password can be updated for password resets; profile_image_url is optional. Each property is mapped directly to database columns."},"IModeratorSearchRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator assignment. Sourced from discussion_board_moderators.id in Prisma schema."},"member_id":{"type":"string","format":"uuid","description":"ID of the member assigned as moderator. Links to discussion_board_moderators.member_id. Relates to member PK in main member table."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when moderator role was assigned. Used for searching within assignment timeframes (ISO8601)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp when moderator role was revoked. null means current/active moderator."},{"type":"null","format":"date-time","description":"Nullable timestamp when moderator role was revoked. null means current/active moderator."}],"description":"Nullable timestamp when moderator role was revoked. null means current/active moderator."}},"required":[],"description":"Request payload for searching moderator roles/assignments. Fields correspond to discussion_board_moderators table for advanced query by ID, member, assignment period, or revocation state."},"IPageDiscussionBoardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerator"},"description":"Array of moderator role assignments matching query/search. Each record as per discussion_board_moderators schema."}},"required":["pagination","data"],"description":"Paginated result for moderator assignments. Combines standard page metadata with array of IDiscussionBoardModerator entities for admin/moderator UI or analytics."},"IDiscussionBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the moderator assignment entity. Referenced from discussion_board_moderators.id."},"member_id":{"type":"string","format":"uuid","description":"ID of the board member promoted to moderator. FK to discussion_board_members.id."},"assigned_at":{"type":"string","format":"date-time","description":"Date/time moderator role was assigned. For audit trail, onboarding tracking."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp of moderator role revocation. null if still active. Used for revocation and compliance workflows."},{"type":"null","format":"date-time","description":"Nullable timestamp of moderator role revocation. null if still active. Used for revocation and compliance workflows."}],"description":"Nullable timestamp of moderator role revocation. null if still active. Used for revocation and compliance workflows."}},"required":["id","member_id","assigned_at"],"description":"Single moderator assignment entity. All properties directly mapped to fields in discussion_board_moderators model. Used for searching, assigning, revoking, and describing moderator permissions."},"IModeratorCreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of the member being promoted to moderator (FK to members table). Matches discussion_board_moderators.member_id in Prisma. Must reference existing and valid user."},"assigned_at":{"type":"string","format":"date-time","description":"Datetime when moderator role is assigned. Usually set to now; can be provided for migration/backdating."}},"required":["member_id"],"description":"Request payload for assigning moderator role to a member. Establishes moderator status. assigned_at is usually set server-side, but may be supplied for migration/audit."},"IModeratorUpdate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"(Optional) Updated member assignment for moderator role, only for migration or admin override. FK to discussion_board_members.id."},"assigned_at":{"type":"string","format":"date-time","description":"(Optional) New assignment timestamp for moderator role, typically for auditing or migration."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) New revocation timestamp (null for activate, datetime for revoke). Used for deactivating moderator role."},{"type":"null","format":"date-time","description":"(Optional) New revocation timestamp (null for activate, datetime for revoke). Used for deactivating moderator role."}],"description":"(Optional) New revocation timestamp (null for activate, datetime for revoke). Used for deactivating moderator role."}},"required":[],"description":"Used to update critical fields of a moderator assignment: member_id (for migration/fix), assigned_at (for audit), revoked_at (for role deactivation/restore). All mapped to discussion_board_moderators model fields."},"IAdministratorSearchRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the administrator assignment. Links to discussion_board_administrators.id in Prisma schema."},"member_id":{"type":"string","format":"uuid","description":"ID of the member holding admin role assignment. Links to member PK."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when admin privileges were granted. Used for filtering on admin role onboarding (ISO8601)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp when admin rights were revoked. null if currently admin; used for compliance tracking."},{"type":"null","format":"date-time","description":"Nullable timestamp when admin rights were revoked. null if currently admin; used for compliance tracking."}],"description":"Nullable timestamp when admin rights were revoked. null if currently admin; used for compliance tracking."}},"required":[],"description":"Request body for searching/filtering administrator assignments using only schema-defined fields in discussion_board_administrators."},"IPageDiscussionBoardAdministrator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAdministrator"},"description":"List of admin assignments in current page. Each as per discussion_board_administrators schema."}},"required":["pagination","data"],"description":"Paginated result format for admin role assignments, combining standard pagination data with array of administrator assignment objects."},"IDiscussionBoardAdministrator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for this administrator role assignment. Referenced from discussion_board_administrators.id."},"member_id":{"type":"string","format":"uuid","description":"ID of the member assigned as administrator (FK to members table)."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp of administrator role assignment. tracked for audit and onboarding."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datestamp when administration privileges were revoked, or null if still active (soft revocation pattern)."},{"type":"null","format":"date-time","description":"Datestamp when administration privileges were revoked, or null if still active (soft revocation pattern)."}],"description":"Datestamp when administration privileges were revoked, or null if still active (soft revocation pattern)."}},"required":["id","member_id","assigned_at"],"description":"Admin assignment record; captures member, audit, and revocation data as in discussion_board_administrators."},"IAdministratorCreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of the member being escalated to administrator. (FK to member PK, required per assignment)."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp of admin role assignment (optional, usually set by server)."}},"required":["member_id"],"description":"Payload for creating/assigning admin privileges to a member. assigned_at is optional (for migration), typically set on insert."},"IAdministratorUpdate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"(Optional) Member ID for admin assignment (generally for error correction/migration only)."},"assigned_at":{"type":"string","format":"date-time","description":"(Optional) New assignment timestamp in ISO8601 (for audit/migration)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) When to revoke admin rights. null for restoration, datetime for revocation."},{"type":"null","format":"date-time","description":"(Optional) When to revoke admin rights. null for restoration, datetime for revocation."}],"description":"(Optional) When to revoke admin rights. null for restoration, datetime for revocation."}},"required":[],"description":"Updates administrator assignment. Supports fixing member link, adjusting assignment timestamp, or revoking/undoing admin rights using revoked_at. Directly mapped to schema fields."},"IThreadSearchRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"(Optional) Thread unique id (discussion_board_threads.id). Useful for single-thread query."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"ID of the thread creator. search/filter by author. Prisma schema: discussion_board_threads.discussion_board_member_id."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"ID of the associated category. Filter by topic group. Prisma: discussion_board_threads.discussion_board_category_id."},"title":{"type":"string","description":"Full thread title (for full match). For advanced search, may implement GIN index full-text search. Primavera: discussion_board_threads.title."},"body":{"type":"string","description":"Thread body initial content. Used for search/filtering full text if relevant. Prisma: discussion_board_threads.body."},"is_pinned":{"type":"boolean","description":"Filter by pin status (Featured/Top). Prisma: discussion_board_threads.is_pinned."},"is_closed":{"type":"boolean","description":"Restrict search to closed/resolved threads. Prisma: discussion_board_threads.is_closed."},"created_at":{"type":"string","format":"date-time","description":"Search for threads created at a certain time (ISO8601). Prisma: discussion_board_threads.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Search by last modified date (ISO8601). Prisma: discussion_board_threads.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable field for soft delete detection (only included if requesting deleted data). Prisma: discussion_board_threads.deleted_at."},{"type":"null","format":"date-time","description":"Nullable field for soft delete detection (only included if requesting deleted data). Prisma: discussion_board_threads.deleted_at."}],"description":"Nullable field for soft delete detection (only included if requesting deleted data). Prisma: discussion_board_threads.deleted_at."}},"required":[],"description":"Search or filter payload for retrieving threads. All fields reference Prisma schema columns in discussion_board_threads. Used for admin/member/UX filtering (search by title, author, date, pin, closure, etc)."},"IPageDiscussionBoardThread":{"type":"object","description":"A paginated result set of discussion threads within the board. \n\nThis schema facilitates navigation of large datasets by providing threads in pages, compliant with common API best practices. \n\nIncludes pagination metadata and a list of `IDiscussionBoardThread` objects. Directly references the discussion threads entity described in the requirements and Prisma schema, ensuring complete traceability and consistency.\n\nPagination information enables clients to render navigation controls, implement infinite scroll, or perform results slicing as needed.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardThread"},"description":"A list of discussion board thread entities for the current result page.\n\nEach entity follows the comprehensive structure defined in `IDiscussionBoardThread`, strictly in line with the Prisma schema for `discussion_board_threads`."}},"required":["pagination","data"]},"IDiscussionBoardThread":{"type":"object","description":"Represents a discussion thread—the top-level discussion entity for the platform.\n\nThis model fully references the `discussion_board_threads` Prisma schema and domain requirements. It incorporates all columns with rich, multi-paragraph descriptions to guide API clients and integrators.\n\nServes as the foundational data structure for discussion lists and details. Properties include metadata, moderation, access, and content presentation fields.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key — Unique thread identifier, defined as a UUID. Used for referencing the thread throughout the application and between related tables.\n\nReferences the `id` column in the `discussion_board_threads` Prisma model. Enables precise cross-entity relationship management and guaranteed uniqueness."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Foreign key—References the creator's member account (`discussion_board_members.id`). Required for author identity, permissions enforcement, analytics, and business operations.\n\nThis is required by the schema for all threads and is critical for establishing thread authorship and producer auditing."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Foreign key—References the topic category for the thread (`discussion_board_categories.id`).\n\nEnables advanced filtering, discovery, and content categorization for both end users and moderators. Used throughout the UI for organizing discussion lists."},"title":{"type":"string","description":"Thread title—A required, human-readable subject or summary of the discussion, optimized for display and indexing.\n\nDirectly maps to the `title` field in the schema. Used for inline thread navigation, search, and semantic analysis."},"body":{"type":"string","description":"Thread body—The main initial content for the thread. Used for context, indexing, and launching discussions. \n\nDefined as non-nullable in the schema. Provides opening material and guides participants in the thread's scope."},"is_pinned":{"type":"boolean","description":"Boolean flag—Indicates whether this thread is pinned ('sticky') to the top of the thread list for special prominence, usually by moderator action. \n\nDirectly references the `is_pinned` column in the schema."},"is_closed":{"type":"boolean","description":"Boolean flag—Marks the thread as closed to new posts or comments. Managed by moderators and administrators for compliance, off-topic handling, or archival. \n\nReferenced directly from the schema's `is_closed` field."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp—Precise UTC indication of when the thread was created. \n\nUsed in timestamp sorting, thread lifecycle analysis, and compliance audit. Defined per the `created_at` field in the schema."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp—Indicates the most recent metadata modification. \n\nFacilitates UI freshness, edit history, and concurrency management. Bound to the `updated_at` schema column."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp—`null` if the thread is active, or an ISO timestamp of soft-deletion for moderation/audit reversibility. \n\nImplements requirements for reversible content management and regulatory compliance. Sourced from schema's `deleted_at` property."},{"type":"null"}],"description":"Soft delete timestamp—`null` if the thread is active, or an ISO timestamp of soft-deletion for moderation/audit reversibility. \n\nImplements requirements for reversible content management and regulatory compliance. Sourced from schema's `deleted_at` property."}},"required":["id","discussion_board_member_id","discussion_board_category_id","title","body","is_pinned","is_closed","created_at","updated_at"]},"IDiscussionBoardThread.ICreate":{"type":"object","description":"Request body for creating a new discussion board thread. All properties are strictly defined in the Prisma schema for `discussion_board_threads`.\n\nThis type is used when a client wishes to create a new discussion, providing all necessary details except for fields handled exclusively by the system (e.g., `id`, and possibly `created_at` which may be auto-filled by the backend).\n\nIt ensures required linkage to the member (author) and category, along with opening content, pin/close status, and editability indicators. Every property is mapped 1:1 to the schema with thorough description for client-side validation and user-facing interfaces.","properties":{"discussion_board_member_id":{"type":"string","format":"uuid","description":"Foreign key referencing the thread creator (`discussion_board_members.id`).\n\nRequired for thread attribution, moderation, reputation, and notification logic."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Foreign key referencing the category under which this thread is created (`discussion_board_categories.id`).\n\nEssential for thread placement, filtering, and content discovery."},"title":{"type":"string","description":"Thread title. Required and must be unique within the category as enforced by schema constraints.\n\nGuides search, navigation, and UI displays."},"body":{"type":"string","description":"Opening post or main description for the thread. Non-nullable per schema."},"is_pinned":{"type":"boolean","description":"True if thread should initially be pinned (requires elevated client permissions).\n\nUsually false for standard creation but is schema-required."},"is_closed":{"type":"boolean","description":"Indicates whether the thread should start as closed to new comments (reserved for moderators/admin/automated workflows). \n\nRequired to satisfy model completeness and audit compliance."}},"required":["discussion_board_member_id","discussion_board_category_id","title","body","is_pinned","is_closed"]},"IDiscussionBoardThread.IUpdate":{"type":"object","description":"Request body for updating an existing discussion thread. All updatable fields present in the `discussion_board_threads` schema are included, with flexibility for partial edits.\n\nEnables modification of title, body, pin/close status, or category association. System-managed fields (like `id`, `created_at`) are excluded by convention. All property types and business constraints are directly referenced from the Prisma schema.\n\nUsed for advanced admin and member editing workflows, ensuring strong type safety and comprehensive validation.","properties":{"title":{"type":"string","description":"The updated thread title. Must be unique within category as per schema constraints."},"body":{"type":"string","description":"The updated thread body; replaces main thread content."},"is_pinned":{"type":"boolean","description":"Whether the thread is currently pinned to display more prominently."},"is_closed":{"type":"boolean","description":"Whether the thread is currently open to contribution or commenting."},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Update the thread's parent category if required."}},"required":[]},"IDiscussionBoardPost.IRequest":{"type":"object","description":"Request object for searching, filtering, or paginating discussion board posts.\n\nProvides query parameters for advanced search, sorting, or paging. All fields reference columns in the `discussion_board_posts` schema, supporting precise and efficient results navigation. Used extensively in the board interface, moderation tools, analytics, and mobile applications.","properties":{"discussion_board_thread_id":{"type":"string","format":"uuid","description":"Thread ID by which to filter posts. Restricts results to those linked with the specified discussion thread.\n\nMaps to `discussion_board_thread_id` column in `discussion_board_posts`."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Member ID by which to filter results. Only posts created by this user are fetched.\n\nReferences `discussion_board_member_id`."},"is_edited":{"type":"boolean","description":"Filter by edit status: true for edited, false for original/never edited."},"created_at_from":{"type":"string","format":"date-time","description":"Start range (inclusive) for created_at, restricting result to posts created on/after this date.\n\nUseful for audit, trend analysis, and temporal browses."},"created_at_to":{"type":"string","format":"date-time","description":"End range (inclusive) for created_at, filtering for posts created on/before this date."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter by soft deletion status for moderation views or audit purposes. If provided as null, only non-deleted posts are included."},{"type":"null","format":"date-time","description":"Filter by soft deletion status for moderation views or audit purposes. If provided as null, only non-deleted posts are included."}],"description":"Filter by soft deletion status for moderation views or audit purposes. If provided as null, only non-deleted posts are included."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination page number to fetch."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Maximum number of results per page."}},"required":[]},"IPageIDiscussionBoardPost":{"type":"object","description":"A paginated result set of discussion board posts.\n\nThis schema follows a common API pattern for presenting large datasets page by page, supporting infinite scroll, desktop UIs, and audit tools. Results are always structured as arrays of post objects per page, with associated pagination info for UI/logic support. Relies on strong cross-schema references to ensure data consistency and reliability.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPost"},"description":"A list of posts (per-thread or multi-thread search)."}},"required":["pagination","data"]},"IDiscussionBoardPost":{"type":"object","description":"Represents a single post within a discussion thread.\n\nObjects of this type match the full set of attributes described in the `discussion_board_posts` schema. Used in the creation, editing, display, audit, and moderation of individual contributions to a thread.\n\nSchema covers relationships to threads, post authorship, content edit-tracking, creation/update timestamps, and moderation (soft delete) state for compliance and reversibility.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key—unique identifier for this post."},"discussion_board_thread_id":{"type":"string","format":"uuid","description":"Foreign key referencing the thread this post belongs to (`discussion_board_threads.id`).\n\nEssential for data retrieval, history, and implicit thread filtering."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Foreign key referencing the member who authored the post.\n\nProvides identity, permissions, and audit traceability."},"body":{"type":"string","description":"Main content/body text of the post.\n\nCannot be null; captures user's contribution or argument."},"is_edited":{"type":"boolean","description":"Edit state flag. Set to true if the post content has been updated since creation. Used in audit logs and UI indicators."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the post was created. UTC/ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last update (edit) of the post content. UTC/ISO 8601."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, the post is soft-deleted for moderation or audit compliance. null means post is visible to the public."},{"type":"null"}],"description":"If set, the post is soft-deleted for moderation or audit compliance. null means post is visible to the public."}},"required":["id","discussion_board_thread_id","discussion_board_member_id","body","is_edited","created_at","updated_at"]},"IDiscussionBoardPost.ICreate":{"type":"object","description":"Request body for creating a new post within a thread.\n\nAll required attributes are enforced by the schema. Some fields (such as timestamps and soft delete status) are set by the backend system on record creation. Used by clients to contribute new content or add replies to existing threads.","properties":{"discussion_board_thread_id":{"type":"string","format":"uuid","description":"References the parent thread for this post."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Member creating this post."},"body":{"type":"string","description":"Body/content of the post."},"is_edited":{"type":"boolean","description":"Edit flag. For creation, typically false (no edits yet)."}},"required":["discussion_board_thread_id","discussion_board_member_id","body","is_edited"]},"IDiscussionBoardPost.IUpdate":{"type":"object","description":"Request body for updating a post's content. Provides fields defined as updatable in the corresponding `discussion_board_posts` schema.\n\nThis facilitates support for editing post text, modifying edit tracking, or (optionally) re-associating post to another thread/member if permitted by business logic. Designed for advanced moderation and UX edit flows. Requires strong type checks and business policy enforcement at the application layer.","properties":{"body":{"type":"string","description":"The new or updated post body."},"is_edited":{"type":"boolean","description":"Set to true if post has been modified (required for edit-tracking in UI/audit log)."}},"required":[]},"IDiscussionBoardComment.IRequest":{"type":"object","description":"Request object for listing, searching, or filtering comments on posts. Supports nested, threaded discussion models, collaborative editing, and deep content drilldown workflows.\n\nAll filter fields correspond to columns in `discussion_board_comments`. This schema enables fine-grained search (by post/comment/member/timestamp/state), vital for moderation dashboards and advanced analytics workflows.","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Post ID by which to filter comments. Required for listing all comments attached to a post."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Parent comment ID for filtering replies or specific threads in a nested discussion."},{"type":"null"}],"description":"Parent comment ID for filtering replies or specific threads in a nested discussion."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Member/user ID; fetches only comments authored by this user."},"is_edited":{"type":"boolean","description":"Filter by comments that have been edited (vs. initial-only originals)."},"created_at_from":{"type":"string","format":"date-time","description":"Start datetime for comment creation window, for filtering."},"created_at_to":{"type":"string","format":"date-time","description":"End datetime for comment creation window."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for comment deletion state (null for active, ISO 8601 timestamp for soft-deleted)."},{"type":"null","format":"date-time","description":"Filter for comment deletion state (null for active, ISO 8601 timestamp for soft-deleted)."}],"description":"Filter for comment deletion state (null for active, ISO 8601 timestamp for soft-deleted)."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Page number for paginated listing."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Maximum number of results per page."}},"required":[]},"IPageIDiscussionBoardComment":{"type":"object","description":"Paginated result set for comments. Used where listing or searching comments returns more than one entity.\n\nFollows consistent pagination schema for performance and usability. Each cell in 'data' array is a complete `IDiscussionBoardComment` object, referencing its parent post/comment/member as required. Used for moderation, analytics, and UX-driven listing workflows.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardComment"},"description":"The list of comments for the result page, as per the `IDiscussionBoardComment` structure."}},"required":["pagination","data"]},"IDiscussionBoardComment":{"type":"object","description":"A single comment entity, representing feedback, replies, or deep/nested engagement on a post. Strictly matches the detailed `discussion_board_comments` schema, including all present fields and relationships.\n\nSupports use cases from single-entity read to bulk moderation, UX display, and audit tracing.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the comment entity. Globally unique."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"Foreign key referencing the post this comment belongs to."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Parent comment ID for threading; null indicates a root-level comment."},{"type":"null"}],"description":"Parent comment ID for threading; null indicates a root-level comment."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"Author/member ID for the commenter."},"body":{"type":"string","description":"Main text body of the comment. Non-null per schema."},"is_edited":{"type":"boolean","description":"Edit tracking flag: true if the comment has been updated since creation."},"created_at":{"type":"string","format":"date-time","description":"Comment creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp, set on edit or moderated change."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp—for compliance, audit, and reversibility. null for visible comments."},{"type":"null"}],"description":"Soft delete timestamp—for compliance, audit, and reversibility. null for visible comments."}},"required":["id","discussion_board_post_id","discussion_board_member_id","body","is_edited","created_at","updated_at"]},"IDiscussionBoardComment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"The UUID of the post to which this comment will be attached. This property references {@link discussion_board_posts.id} and is required. This matches the requirement for nested commentary and threaded discussions, enabling users to respond directly to particular posts. See the Prisma schema for details of foreign key enforcement and nullability."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the parent comment if this is a nested (threaded) comment, or null if this is a top-level comment on the post. This enables deep discussion threads as required by the platform's model. If supplied, must reference an existing discussion_board_comments.id, otherwise null. See the Prisma schema for details of recursive/nested design."},{"type":"null","format":"uuid","description":"The UUID of the parent comment if this is a nested (threaded) comment, or null if this is a top-level comment on the post. This enables deep discussion threads as required by the platform's model. If supplied, must reference an existing discussion_board_comments.id, otherwise null. See the Prisma schema for details of recursive/nested design."}],"description":"The UUID of the parent comment if this is a nested (threaded) comment, or null if this is a top-level comment on the post. This enables deep discussion threads as required by the platform's model. If supplied, must reference an existing discussion_board_comments.id, otherwise null. See the Prisma schema for details of recursive/nested design."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"The UUID of the member authoring the comment, referencing {@link discussion_board_members.id}. This satisfies the need for traceability, authorship, and subsequent notifications and moderation. Required for all comments."},"body":{"type":"string","description":"The text of the comment, as stored in the 'body' field of the Prisma schema. Implements F03, F08 (commenting and moderation requirement) and supports thread discussions. Cannot be null; must be a string with user-generated content."},"is_edited":{"type":"boolean","description":"Flag indicating whether the comment content has ever been edited after its creation. Implements auditing and user transparency in comment revision workflows. On creation, this field should be set to false."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) of when the comment is created. Used for audit, sorting, and history tracking as per requirements. Set automatically on creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to this comment, required for moderation auditing and sort ordering. Should be set to created_at upon creation."}},"required":["discussion_board_post_id","discussion_board_member_id","body","is_edited","created_at","updated_at"],"description":"Request body for creating a new comment on a discussion board post. Aligns with comment creation requirements in the documentation and matches the Prisma schema. Enables both root-level and nested comment creation, includes author/member tracking, timestamps, and edit state. All properties strictly correspond to actual columns in the 'discussion_board_comments' table."},"IDiscussionBoardComment.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"The updated text of the comment. As defined in the 'body' field of the Prisma schema, this property supports editing workflows and moderation-driven rewrites. (Requirement F03, F08)."},"is_edited":{"type":"boolean","description":"Flag indicating whether this comment has been edited. If true, the comment will be marked as modified, used for audit trails and client transparency."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) If moving this comment to become a reply under a different parent comment node, supply the new parent_id (UUID). If left null, the comment is a top-level reply. Enables threaded/nested replies per schema design."},{"type":"null","format":"uuid","description":"(Optional) If moving this comment to become a reply under a different parent comment node, supply the new parent_id (UUID). If left null, the comment is a top-level reply. Enables threaded/nested replies per schema design."}],"description":"(Optional) If moving this comment to become a reply under a different parent comment node, supply the new parent_id (UUID). If left null, the comment is a top-level reply. Enables threaded/nested replies per schema design."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) of this last update. Must always be provided to support audit and moderation traceability as described in system requirements."}},"required":["updated_at"],"description":"Update payload for an existing discussion board comment. Enables editing comment text, changing the parent for nesting, or flagging as edited. All properties map directly to fields in the Prisma schema for comments. Does not permit author/member change. All fields are optional except updated_at, which is required for audit and moderation workflow compliance."},"IDiscussionBoardAttachment.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for attachments associated with a specific post. References {@link discussion_board_posts.id}. If null, this filter is ignored."},{"type":"null","format":"uuid","description":"Filter for attachments associated with a specific post. References {@link discussion_board_posts.id}. If null, this filter is ignored."}],"description":"Filter for attachments associated with a specific post. References {@link discussion_board_posts.id}. If null, this filter is ignored."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for attachments linked to a specific comment. References {@link discussion_board_comments.id}. Nullable; ignored if null."},{"type":"null","format":"uuid","description":"Filter for attachments linked to a specific comment. References {@link discussion_board_comments.id}. Nullable; ignored if null."}],"description":"Filter for attachments linked to a specific comment. References {@link discussion_board_comments.id}. Nullable; ignored if null."},"discussion_board_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for attachments uploaded by a particular member. References {@link discussion_board_members.id}. Can be null to ignore filter."},{"type":"null","format":"uuid","description":"Filter for attachments uploaded by a particular member. References {@link discussion_board_members.id}. Can be null to ignore filter."}],"description":"Filter for attachments uploaded by a particular member. References {@link discussion_board_members.id}. Can be null to ignore filter."},"file_name":{"oneOf":[{"type":"string","description":"Attachment file name to filter by. Supports exact or partial (case-insensitive) match for improved search UX. Null disables this filter."},{"type":"null","description":"Attachment file name to filter by. Supports exact or partial (case-insensitive) match for improved search UX. Null disables this filter."}],"description":"Attachment file name to filter by. Supports exact or partial (case-insensitive) match for improved search UX. Null disables this filter."},"content_type":{"oneOf":[{"type":"string","description":"Attachment MIME type to filter (e.g., 'application/pdf', 'image/png'). Null disables filter."},{"type":"null","description":"Attachment MIME type to filter (e.g., 'application/pdf', 'image/png'). Null disables filter."}],"description":"Attachment MIME type to filter (e.g., 'application/pdf', 'image/png'). Null disables filter."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Begin range for created_at timestamp search (inclusive). Enables filtering for files uploaded after this timestamp. Null disables this bound."},{"type":"null","format":"date-time","description":"Begin range for created_at timestamp search (inclusive). Enables filtering for files uploaded after this timestamp. Null disables this bound."}],"description":"Begin range for created_at timestamp search (inclusive). Enables filtering for files uploaded after this timestamp. Null disables this bound."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End range for created_at timestamp search (inclusive). Enables searching for attachments uploaded on or before this time. Null disables."},{"type":"null","format":"date-time","description":"End range for created_at timestamp search (inclusive). Enables searching for attachments uploaded on or before this time. Null disables."}],"description":"End range for created_at timestamp search (inclusive). Enables searching for attachments uploaded on or before this time. Null disables."},"page":{"oneOf":[{"type":"integer","format":"int32","description":"Page number for pagination purposes (>=1), per standard IPage.IRequest. Null means first page/default."},{"type":"null","format":"int32","description":"Page number for pagination purposes (>=1), per standard IPage.IRequest. Null means first page/default."}],"description":"Page number for pagination purposes (>=1), per standard IPage.IRequest. Null means first page/default."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Records per page (pagination). See IPage.IRequest documentation for default/max/min."},{"type":"null","format":"int32","description":"Records per page (pagination). See IPage.IRequest documentation for default/max/min."}],"description":"Records per page (pagination). See IPage.IRequest documentation for default/max/min."},"sort_by":{"oneOf":[{"type":"string","description":"Field to sort results by (e.g., 'created_at', 'file_name', per schema). Null disables custom sort."},{"type":"null","description":"Field to sort results by (e.g., 'created_at', 'file_name', per schema). Null disables custom sort."}],"description":"Field to sort results by (e.g., 'created_at', 'file_name', per schema). Null disables custom sort."},"sort_dir":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc' for sorting order, null for default direction."},{"const":"desc","description":"Sort direction: 'asc' or 'desc' for sorting order, null for default direction."},{"type":"null","enum":["asc","desc",null],"description":"Sort direction: 'asc' or 'desc' for sorting order, null for default direction."}],"description":"Sort direction: 'asc' or 'desc' for sorting order, null for default direction."}},"description":"Request type for listing/searching attachments on the board. Supports extensive filtering by file/post/comment/uploader, plus pagination/sorting controls. Aligns with standard 'IPage.IRequest' variant plus attachment-specific filters. All properties must strictly map to columns in the 'discussion_board_attachments' schema or paging interface.","required":[]},"IPageIDiscussionBoardAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAttachment"},"description":"Array of attachment objects returned in this result page. Each conforms to the 'IDiscussionBoardAttachment' schema with full detail, as required by audit, moderation, and client display."}},"required":["pagination","data"],"description":"Paginated results for listings/searches of discussion board attachments. Includes pagination information and an array of schema-conforming attachment objects. Used throughout file/attachment browsing and administration workflow interfaces."},"IDiscussionBoardAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the attachment, uniquely identifying it in the system. As defined in 'discussion_board_attachments.id'. Required for all updates, lookups, or deletes."},"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing the post that owns this attachment—may be null if belonging instead to a comment. As per 'discussion_board_attachments.discussion_board_post_id'. Enforces business rules for one-parent-only attachments."},{"type":"null","format":"uuid","description":"UUID referencing the post that owns this attachment—may be null if belonging instead to a comment. As per 'discussion_board_attachments.discussion_board_post_id'. Enforces business rules for one-parent-only attachments."}],"description":"UUID referencing the post that owns this attachment—may be null if belonging instead to a comment. As per 'discussion_board_attachments.discussion_board_post_id'. Enforces business rules for one-parent-only attachments."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing the comment that owns this attachment—may be null if belonging to a post. Pattern and business rules identical to 'discussion_board_post_id'."},{"type":"null","format":"uuid","description":"UUID referencing the comment that owns this attachment—may be null if belonging to a post. Pattern and business rules identical to 'discussion_board_post_id'."}],"description":"UUID referencing the comment that owns this attachment—may be null if belonging to a post. Pattern and business rules identical to 'discussion_board_post_id'."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"UUID of the member who uploaded the attachment, matching 'discussion_board_members.id'. Required for traceability and audit."},"file_name":{"type":"string","description":"Original file name supplied by user on upload. Schema: 'file_name' column in 'discussion_board_attachments'. String only; max length per underlying schema."},"file_uri":{"type":"string","description":"URI/URL of actual file storage location (e.g., S3, CDN). Schema field: 'file_uri'. Used for download/preview by clients. Length constrained in DB (max 80000 chars)."},"content_type":{"type":"string","description":"MIME type/format of the file (e.g., 'application/pdf', 'image/png'). Column: 'content_type'. Used for content type negotiation and client preview."},"content_hash":{"type":"string","description":"Unique file checksum (SHA-256 or equivalent) for deduplication and integrity. Enforced as unique in Prisma schema: 'content_hash'. All uploads must provide a calculated digest."},"created_at":{"type":"string","format":"date-time","description":"Timestamp recording when this attachment was uploaded. Maps to 'created_at' in schema. Used for audit and file management."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of soft deletion, or null if active. Present as 'deleted_at' column in schema. Set if file is hidden from user listings or under appeal; null if not deleted. Enforces reversibility and audit per requirements."},{"type":"null","format":"date-time","description":"Timestamp of soft deletion, or null if active. Present as 'deleted_at' column in schema. Set if file is hidden from user listings or under appeal; null if not deleted. Enforces reversibility and audit per requirements."}],"description":"Timestamp of soft deletion, or null if active. Present as 'deleted_at' column in schema. Set if file is hidden from user listings or under appeal; null if not deleted. Enforces reversibility and audit per requirements."}},"required":["id","discussion_board_member_id","file_name","file_uri","content_type","content_hash","created_at"],"description":"Schema description for a discussion board attachment object, referencing fields exactly as defined in the 'discussion_board_attachments' table. Used throughout the API for upload, display, and file management features. The schema enforces uniqueness, traceability, and reversible (soft) deletion handling as described in the requirements. All usage and references must comply with file policy documentation."},"IDiscussionBoardAttachment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the post to attach this file to. Must be null if attached to a comment instead. Refer to attachment business rule: always linked to only one parent (post or comment, never both)."},{"type":"null","format":"uuid","description":"UUID of the post to attach this file to. Must be null if attached to a comment instead. Refer to attachment business rule: always linked to only one parent (post or comment, never both)."}],"description":"UUID of the post to attach this file to. Must be null if attached to a comment instead. Refer to attachment business rule: always linked to only one parent (post or comment, never both)."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment to attach this file to. Must be null if attached to a post instead."},{"type":"null","format":"uuid","description":"UUID of the comment to attach this file to. Must be null if attached to a post instead."}],"description":"UUID of the comment to attach this file to. Must be null if attached to a post instead."},"discussion_board_member_id":{"type":"string","format":"uuid","description":"UUID of the user uploading this attachment, required for attribution, moderation, and policy enforcement."},"file_name":{"type":"string","description":"Original user-supplied file name, used for display and download. String, required."},"file_uri":{"type":"string","description":"Permanent URI or URL for the stored file (S3, CDN, etc). Required for download and preview."},"content_type":{"type":"string","description":"MIME type of the file. Must be provided to ensure compliance and client usage. (E.g., 'application/pdf')."},"content_hash":{"type":"string","description":"Calculated SHA-256 (or similar) hash of the file contents, used for deduplication and integrity."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when file was uploaded (UTC, ISO 8601). Set on registration."}},"required":["discussion_board_member_id","file_name","file_uri","content_type","content_hash","created_at"],"description":"Request body schema for creating an attachment in the discussion board. New attachments must always be associated with exactly one parent (either post or comment, not both or neither). Includes all metadata to enable secure, auditable, and recoverable file management as per requirements and schema. No additional business logic enforced at the schema layer; refer to application for enforcement details."},"IDiscussionBoardAttachment.IUpdate":{"type":"object","properties":{"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the file is being moved to a different post, provide the new post UUID (or null if moving to a comment). See business rules about parent object consistency."},{"type":"null","format":"uuid","description":"If the file is being moved to a different post, provide the new post UUID (or null if moving to a comment). See business rules about parent object consistency."}],"description":"If the file is being moved to a different post, provide the new post UUID (or null if moving to a comment). See business rules about parent object consistency."},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the file is being associated with a comment (or changing parent from post to comment), supply the comment UUID (or null if detaching from comment)."},{"type":"null","format":"uuid","description":"If the file is being associated with a comment (or changing parent from post to comment), supply the comment UUID (or null if detaching from comment)."}],"description":"If the file is being associated with a comment (or changing parent from post to comment), supply the comment UUID (or null if detaching from comment)."},"file_name":{"type":"string","description":"Update the attachment's file name (original file name as displayed to users)."},"file_uri":{"type":"string","description":"Update the file's permanent URI if migrated or replaced."},"content_type":{"type":"string","description":"Update the MIME type (e.g., upon file conversion by user or moderation process)."},"content_hash":{"type":"string","description":"Replace the file hash if the actual content of the file changes (rare, and only in moderation workflows)."}},"description":"Update payload for an attachment record. Supports changes to file name/parent/content/meta. Actual permission checks, deduplication, and integrity rules enforced at the application layer. The update can only affect schema-defined fields: discussion_board_post_id, discussion_board_comment_id, file_name, file_uri, content_type, content_hash.","required":[]},"IDiscussionBoardReport.IRequest":{"type":"object","properties":{"reporter_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for reports submitted by a specific member. UUID of the reporter. Set null to disable this filter."},{"type":"null","format":"uuid","description":"Filter for reports submitted by a specific member. UUID of the reporter. Set null to disable this filter."}],"description":"Filter for reports submitted by a specific member. UUID of the reporter. Set null to disable this filter."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for reports that have been or are being handled by a specific moderator. Match UUID for the reviewing moderator or set null to ignore."},{"type":"null","format":"uuid","description":"Filter for reports that have been or are being handled by a specific moderator. Match UUID for the reviewing moderator or set null to ignore."}],"description":"Filter for reports that have been or are being handled by a specific moderator. Match UUID for the reviewing moderator or set null to ignore."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Limit to reports targeting a particular thread. Filter by thread UUID or null to ignore."},{"type":"null","format":"uuid","description":"Limit to reports targeting a particular thread. Filter by thread UUID or null to ignore."}],"description":"Limit to reports targeting a particular thread. Filter by thread UUID or null to ignore."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Show only reports about a specific post by UUID (nullable for no filter)."},{"type":"null","format":"uuid","description":"Show only reports about a specific post by UUID (nullable for no filter)."}],"description":"Show only reports about a specific post by UUID (nullable for no filter)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Show only reports about a specific comment by UUID (nullable for no filter)."},{"type":"null","format":"uuid","description":"Show only reports about a specific comment by UUID (nullable for no filter)."}],"description":"Show only reports about a specific comment by UUID (nullable for no filter)."},"status":{"oneOf":[{"type":"string","description":"Restrict to reports by workflow status. Status values must match moderation workflow/canonical enum; examples: 'pending','under_review','resolved','dismissed'. Null disables filter."},{"type":"null","description":"Restrict to reports by workflow status. Status values must match moderation workflow/canonical enum; examples: 'pending','under_review','resolved','dismissed'. Null disables filter."}],"description":"Restrict to reports by workflow status. Status values must match moderation workflow/canonical enum; examples: 'pending','under_review','resolved','dismissed'. Null disables filter."},"reason":{"oneOf":[{"type":"string","description":"Match only reports with a given textual reason for reporting (freeform, case-insensitive, partial allowed)."},{"type":"null","description":"Match only reports with a given textual reason for reporting (freeform, case-insensitive, partial allowed)."}],"description":"Match only reports with a given textual reason for reporting (freeform, case-insensitive, partial allowed)."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Begin range for created_at timestamp search (inclusive). Enables filtering for reports filed after this time. Null disables bound."},{"type":"null","format":"date-time","description":"Begin range for created_at timestamp search (inclusive). Enables filtering for reports filed after this time. Null disables bound."}],"description":"Begin range for created_at timestamp search (inclusive). Enables filtering for reports filed after this time. Null disables bound."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End range for created_at timestamp search (inclusive). Enables searching for reports filed on or before this time. Null disables."},{"type":"null","format":"date-time","description":"End range for created_at timestamp search (inclusive). Enables searching for reports filed on or before this time. Null disables."}],"description":"End range for created_at timestamp search (inclusive). Enables searching for reports filed on or before this time. Null disables."},"page":{"oneOf":[{"type":"integer","format":"int32","description":"Request page number (pagination)."},{"type":"null","format":"int32","description":"Request page number (pagination)."}],"description":"Request page number (pagination)."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Request page size/limit for pagination."},{"type":"null","format":"int32","description":"Request page size/limit for pagination."}],"description":"Request page size/limit for pagination."}},"description":"Request schema for listing/searching moderation reports. Permits filtering by all core fields for effective audit, triage, and operational dashboards. Ensures only actual Prisma schema columns are referenced.","required":[]},"IPageIDiscussionBoardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReport"},"description":"Paginated array of report objects as per moderation workflows. Schema-conforming to support compliance, triage, and analytics."}},"required":["pagination","data"],"description":"Paginated moderation report list. Used in compliance, triage views, and for audit/analytics purposes. Integrates pagination information and an array of schema-conforming moderation reports."},"IDiscussionBoardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key ID for the report record. Required in all output and update operations."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member UUID who filed the report, per 'reporter_member_id' field in Prisms schema. Used for tracing accountability."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Nullable moderator assignment for the report. Set to UUID if assigned, else null. Links to moderation workflows and audit trail."},{"type":"null","format":"uuid","description":"Nullable moderator assignment for the report. Set to UUID if assigned, else null. Links to moderation workflows and audit trail."}],"description":"Nullable moderator assignment for the report. Set to UUID if assigned, else null. Links to moderation workflows and audit trail."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of thread being reported, if applicable (else null). Used for context/audit."},{"type":"null","format":"uuid","description":"UUID of thread being reported, if applicable (else null). Used for context/audit."}],"description":"UUID of thread being reported, if applicable (else null). Used for context/audit."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of post being reported, if applicable (else null)."},{"type":"null","format":"uuid","description":"UUID of post being reported, if applicable (else null)."}],"description":"UUID of post being reported, if applicable (else null)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of comment being reported, if applicable (else null)."},{"type":"null","format":"uuid","description":"UUID of comment being reported, if applicable (else null)."}],"description":"UUID of comment being reported, if applicable (else null)."},"reason":{"type":"string","description":"Textual reason for reporting. Required in all report records. Sourced from 'reason' field in schema."},"status":{"type":"string","description":"Status of the report workflow. Examples: 'pending','under_review','resolved','dismissed'. See moderation state machine."},"created_at":{"type":"string","format":"date-time","description":"Report creation timestamp. Audit and triage use, ISO 8601."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of resolution/closure (if applicable), null if not resolved."},{"type":"null","format":"date-time","description":"Timestamp of resolution/closure (if applicable), null if not resolved."}],"description":"Timestamp of resolution/closure (if applicable), null if not resolved."},"resolution_notes":{"oneOf":[{"type":"string","description":"Free-form moderator notes upon resolving the report. Null if not set."},{"type":"null","description":"Free-form moderator notes upon resolving the report. Null if not set."}],"description":"Free-form moderator notes upon resolving the report. Null if not set."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp if report is soft-deleted, null if active. Enforces reversibility and data retention compliance."},{"type":"null","format":"date-time","description":"Timestamp if report is soft-deleted, null if active. Enforces reversibility and data retention compliance."}],"description":"Timestamp if report is soft-deleted, null if active. Enforces reversibility and data retention compliance."}},"required":["id","reporter_member_id","reason","status","created_at"],"description":"Moderation report object as stored in 'discussion_board_reports', matching exactly to schema. Includes full audit, moderation linkage, and soft/hard delete compliance. Does not invent non-schema columns; used in moderation, compliance, and content workflow."},"IDiscussionBoardReport.ICreate":{"type":"object","properties":{"reporter_member_id":{"type":"string","format":"uuid","description":"UUID of the member submitting the report. Required for traceability, compliance, and subsequent moderation."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Assigned moderator for the report, null for unassigned."},{"type":"null","format":"uuid","description":"(Optional) Assigned moderator for the report, null for unassigned."}],"description":"(Optional) Assigned moderator for the report, null for unassigned."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the reported thread (set if reporting a thread, else null as only one non-null content PK is allowed)."},{"type":"null","format":"uuid","description":"UUID of the reported thread (set if reporting a thread, else null as only one non-null content PK is allowed)."}],"description":"UUID of the reported thread (set if reporting a thread, else null as only one non-null content PK is allowed)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the reported post (set if reporting a post, else null)."},{"type":"null","format":"uuid","description":"UUID of the reported post (set if reporting a post, else null)."}],"description":"UUID of the reported post (set if reporting a post, else null)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the reported comment (set if reporting a comment, else null)."},{"type":"null","format":"uuid","description":"UUID of the reported comment (set if reporting a comment, else null)."}],"description":"UUID of the reported comment (set if reporting a comment, else null)."},"reason":{"type":"string","description":"Reason the content is being reported. String, required, for audit, compliance, and triage."},"status":{"type":"string","description":"Initial status, must be a valid workflow state. Examples: 'pending', 'under_review', 'resolved', 'dismissed'. Must match agreed values for the moderation state machine."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when report was created, for audit and analytics."}},"required":["reporter_member_id","reason","status","created_at"],"description":"Schema for creating a moderation report entry, matching the Prisma schema. Requires reporter, reason, status, timestamp; content reference (thread/post/comment) must have at least one set. Actual workflow validation/enforcement done at application level."},"IDiscussionBoardReport.IUpdate":{"type":"object","properties":{"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update assigned moderator for workflow triage. Null to unassign or leave unchanged."},{"type":"null","format":"uuid","description":"Update assigned moderator for workflow triage. Null to unassign or leave unchanged."}],"description":"Update assigned moderator for workflow triage. Null to unassign or leave unchanged."},"status":{"type":"string","description":"Update report workflow status (e.g., 'pending', 'resolved'). Must match application state rules."},"resolution_notes":{"oneOf":[{"type":"string","description":"Optional: Add or revise moderator notes visible for audit/compliance."},{"type":"null","description":"Optional: Add or revise moderator notes visible for audit/compliance."}],"description":"Optional: Add or revise moderator notes visible for audit/compliance."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set resolution timestamp (if closing or resolving the report). Null if still open or pending."},{"type":"null","format":"date-time","description":"Set resolution timestamp (if closing or resolving the report). Null if still open or pending."}],"description":"Set resolution timestamp (if closing or resolving the report). Null if still open or pending."}},"description":"Permits updating core workflow fields of an existing moderation report. Does not allow changing reporter/content relationships or scheduling deletion; only modifies fields allowed in the schema and business rules for moderation triage/completion.","required":[]},"discussion_board_IDiscussionBoardModerationLog.IRequest":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator who performed the moderation action. Used for filtering logs by moderator. \n\nCorresponds to the moderator_id column of discussion_board_moderation_logs as in the Prisma schema. Required for tracing, analytics, and moderator activity breakdown."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the thread affected by this moderation action (nullable).\n\nCorresponds to thread_id column of discussion_board_moderation_logs in the Prisma schema. Enables filtering logs to those affecting a specific thread. Null allows searching for moderation logs not tied to a specific thread."},{"type":"null","format":"uuid","description":"ID of the thread affected by this moderation action (nullable).\n\nCorresponds to thread_id column of discussion_board_moderation_logs in the Prisma schema. Enables filtering logs to those affecting a specific thread. Null allows searching for moderation logs not tied to a specific thread."}],"description":"ID of the thread affected by this moderation action (nullable).\n\nCorresponds to thread_id column of discussion_board_moderation_logs in the Prisma schema. Enables filtering logs to those affecting a specific thread. Null allows searching for moderation logs not tied to a specific thread."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the post affected by this moderation action (nullable).\n\nCorresponds to post_id column of the discussion_board_moderation_logs table. Useful for filtering logs to actions on specific posts, such as edits, hides, or deletes."},{"type":"null","format":"uuid","description":"ID of the post affected by this moderation action (nullable).\n\nCorresponds to post_id column of the discussion_board_moderation_logs table. Useful for filtering logs to actions on specific posts, such as edits, hides, or deletes."}],"description":"ID of the post affected by this moderation action (nullable).\n\nCorresponds to post_id column of the discussion_board_moderation_logs table. Useful for filtering logs to actions on specific posts, such as edits, hides, or deletes."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of comment affected by this moderation action (nullable).\n\nThis matches the comment_id column and enables filtering logs on moderation actions for specific comments."},{"type":"null","format":"uuid","description":"ID of comment affected by this moderation action (nullable).\n\nThis matches the comment_id column and enables filtering logs on moderation actions for specific comments."}],"description":"ID of comment affected by this moderation action (nullable).\n\nThis matches the comment_id column and enables filtering logs on moderation actions for specific comments."},"action":{"type":"string","description":"Type of moderation action taken (e.g., 'hide', 'edit', 'delete').\n\nThis property is used for searching/filtering for certain types of events in moderation logs (see action column in discussion_board_moderation_logs)."},"created_at_from":{"type":"string","format":"date-time","description":"Lower bound (inclusive) on log creation timestamp for search/filtering. Should be in ISO 8601 format. Used for temporal filtering of moderation logs. Not present in the raw schema; provided as a logical query parameter."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound (inclusive) on log creation timestamp for search/filtering (ISO 8601). Used for temporal filtering of moderation logs. Not present in the raw schema; provided as a logical query parameter."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Standard pagination information for limiting and offsetting results."}},"description":"Request type for listing, searching, or filtering moderation logs in the discussion board platform.\n\nAggregates all filterable schema fields from the discussion_board_moderation_logs table: moderator_id, thread_id, post_id, comment_id, action, and supports date-time range filtering.","required":[]},"discussion_board_IPageIDiscussionBoardModerationLog":{"description":"Paginated container for moderation logs.\n\nContains page information and an array of moderation log records from the discussion_board_moderation_logs table. Follows the IPage standard type for paginated responses."},"discussion_board_IDiscussionBoardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for the moderation log event.\n\nReference: id column of discussion_board_moderation_logs."},"moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator who performed this moderation action. Foreign key to moderator.\n\nReference: moderator_id in Prisma. Required for accountability, auditing, and moderation UI breakdown."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"The thread targeted by this moderation action, if any (nullable).\n\nReference: thread_id column. Enables linking moderation events to specific threads. May be null if action is not thread-specific."},{"type":"null","format":"uuid","description":"The thread targeted by this moderation action, if any (nullable).\n\nReference: thread_id column. Enables linking moderation events to specific threads. May be null if action is not thread-specific."}],"description":"The thread targeted by this moderation action, if any (nullable).\n\nReference: thread_id column. Enables linking moderation events to specific threads. May be null if action is not thread-specific."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post targeted by this moderation action, if any (nullable).\n\nReference: post_id column. Allows linking moderation events to a specific post."},{"type":"null","format":"uuid","description":"Post targeted by this moderation action, if any (nullable).\n\nReference: post_id column. Allows linking moderation events to a specific post."}],"description":"Post targeted by this moderation action, if any (nullable).\n\nReference: post_id column. Allows linking moderation events to a specific post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment targeted by this moderation action, if any (nullable).\n\nReference: comment_id column. For actions targeting comments."},{"type":"null","format":"uuid","description":"Comment targeted by this moderation action, if any (nullable).\n\nReference: comment_id column. For actions targeting comments."}],"description":"Comment targeted by this moderation action, if any (nullable).\n\nReference: comment_id column. For actions targeting comments."},"action":{"type":"string","description":"String indicating the moderation action (e.g., 'hide', 'edit', 'warn', 'delete').\n\nReference: action column. Required. Used for event analysis, audit, and reporting."},"action_reason":{"oneOf":[{"type":"string","description":"Free-form moderator-provided rationale for the moderation action, if provided.\n\nReference: action_reason (nullable). Enables transparency, audit, and review."},{"type":"null","description":"Free-form moderator-provided rationale for the moderation action, if provided.\n\nReference: action_reason (nullable). Enables transparency, audit, and review."}],"description":"Free-form moderator-provided rationale for the moderation action, if provided.\n\nReference: action_reason (nullable). Enables transparency, audit, and review."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this moderation action/event was performed.\n\nReference: created_at column of discussion_board_moderation_logs. Used for sorting and querying."}},"required":["id","moderator_id","action","created_at"],"description":"Entity model for a single moderation log record in the discussion board system.\n\nDirectly references the discussion_board_moderation_logs table in schema. Includes all properties for auditing, compliance, and moderation analysis."},"discussion_board_IDiscussionBoardModerationLog.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"Foreign key to discussion_board_moderators.id. The moderator performing the action."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the thread targeted by the moderation event, if any."},{"type":"null","format":"uuid","description":"ID of the thread targeted by the moderation event, if any."}],"description":"ID of the thread targeted by the moderation event, if any."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the post targeted by the moderation event, if any."},{"type":"null","format":"uuid","description":"ID of the post targeted by the moderation event, if any."}],"description":"ID of the post targeted by the moderation event, if any."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the comment targeted by the event, if any."},{"type":"null","format":"uuid","description":"ID of the comment targeted by the event, if any."}],"description":"ID of the comment targeted by the event, if any."},"action":{"type":"string","description":"Type of moderation action taken (e.g., 'hide', 'edit', 'delete')."},"action_reason":{"oneOf":[{"type":"string","description":"Moderator-provided rationale for the action taken (nullable for optional rationale/commentary)."},{"type":"null","description":"Moderator-provided rationale for the action taken (nullable for optional rationale/commentary)."}],"description":"Moderator-provided rationale for the action taken (nullable for optional rationale/commentary)."}},"required":["moderator_id","action"],"description":"Request body to create a moderation log event. References discussion_board_moderation_logs.\n\nRequired: moderator_id, action. Optional: thread_id, post_id, comment_id, action_reason."},"discussion_board_IDiscussionBoardModerationLog.IUpdate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"The moderator performing the action."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread targeted by the action, if changed."},{"type":"null","format":"uuid","description":"Thread targeted by the action, if changed."}],"description":"Thread targeted by the action, if changed."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Post targeted, if changed."},{"type":"null","format":"uuid","description":"Post targeted, if changed."}],"description":"Post targeted, if changed."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Comment targeted, if changed."},{"type":"null","format":"uuid","description":"Comment targeted, if changed."}],"description":"Comment targeted, if changed."},"action":{"type":"string","description":"Type of moderation action."},"action_reason":{"oneOf":[{"type":"string","description":"Updated rationale or moderation justification."},{"type":"null","description":"Updated rationale or moderation justification."}],"description":"Updated rationale or moderation justification."}},"description":"Request body for updating (PUT) a moderation log event. Updates permitted schema fields. All properties are optional for PATCH/PUT, with the system updating only supplied fields referencing discussion_board_moderation_logs.","required":[]},"discussion_board_IDiscussionBoardWarning.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of the member warned (warned member).\n\nFor filtering/searching warning records by the warned user."},"moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator who issued this warning.\n\nFor filtering/search by moderator."},"warning_type":{"type":"string","description":"String category/type of warning (e.g., 'spam', 'harassment').\n\nUsed to find/aggregate warnings by category."},"created_at_from":{"type":"string","format":"date-time","description":"Earliest creation timestamp to filter warnings (inclusive).\n\nISO 8601. Not stored on the database row."},"created_at_to":{"type":"string","format":"date-time","description":"Latest creation timestamp to filter warnings (inclusive).\n\nISO 8601. Not stored on the database row."},"expires_at":{"type":"string","format":"date-time","description":"Expiration time of warnings, for filtering active/expired statuses."},"deleted_at":{"type":"string","format":"date-time","description":"Soft delete timestamp to include/exclude soft-deleted warning records in search."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination/query options for warnings search."}},"description":"Request/Query type for listing, filtering, or searching board user warning records.\n\nIncludes all discussion_board_warnings properties plus semantic query control (date ranges, pagination, etc).","required":[]},"discussion_board_IPageIDiscussionBoardWarning":{"description":"Paginated container for board warning records.\n\nContains page info and array of board warning record entities. Used for warning search/listing results (see discussion_board_warnings)."},"discussion_board_IDiscussionBoardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the warning record (UUID).\n\nCorresponds to id in discussion_board_warnings schema."},"member_id":{"type":"string","format":"uuid","description":"The warned member's ID (UUID).\n\nReferences member_id column in schema."},"moderator_id":{"type":"string","format":"uuid","description":"The ID of the moderator who issued the warning (UUID)."},"warning_type":{"type":"string","description":"Type/category of the warning (string, e.g., 'harassment', 'spam')."},"message":{"type":"string","description":"Moderator's message or rationale presented with the warning (visible to member/audit, full text)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when warning was issued. ISO 8601."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, when warning expires; null for indefinite/permanent."},{"type":"null","format":"date-time","description":"If set, when warning expires; null for indefinite/permanent."}],"description":"If set, when warning expires; null for indefinite/permanent."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft delete (null if active, set if lifted/hidden) as per discussion_board_warnings."},{"type":"null","format":"date-time","description":"Timestamp for soft delete (null if active, set if lifted/hidden) as per discussion_board_warnings."}],"description":"Timestamp for soft delete (null if active, set if lifted/hidden) as per discussion_board_warnings."}},"required":["id","member_id","moderator_id","warning_type","message","created_at"],"description":"Entity for a single warning issued to a discussion board member (see discussion_board_warnings).\n\nContains audit, user, content, and moderation relationships as defined in the schema; full traceability."},"discussion_board_IDiscussionBoardWarning.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of warned user. Required."},"moderator_id":{"type":"string","format":"uuid","description":"ID of moderator issuing the warning. Required."},"warning_type":{"type":"string","description":"Warning's category (e.g., 'abuse', 'off-topic'). Required."},"message":{"type":"string","description":"Moderator's message/rationale. Required."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiration of warning. Null for permanent."},{"type":"null","format":"date-time","description":"Expiration of warning. Null for permanent."}],"description":"Expiration of warning. Null for permanent."}},"required":["member_id","moderator_id","warning_type","message"],"description":"Create data for warning records (discussion_board_warnings).\n\nRequires all fields except id and deleted_at (which are handled automatically); expires_at is optional."},"discussion_board_IDiscussionBoardWarning.IUpdate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Warned member (may allow reassignment in exceptional cases)."},"moderator_id":{"type":"string","format":"uuid","description":"Moderator updating warning."},"warning_type":{"type":"string","description":"Category/type of warning."},"message":{"type":"string","description":"Full rationale/message."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiration or null for permanent."},{"type":"null","format":"date-time","description":"Expiration or null for permanent."}],"description":"Expiration or null for permanent."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete/removal timestamp."},{"type":"null","format":"date-time","description":"Soft delete/removal timestamp."}],"description":"Soft delete/removal timestamp."}},"description":"Update data for warning records (discussion_board_warnings). Editable properties: all except id and created_at.","required":[]},"discussion_board_IDiscussionBoardBan.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"ID of banned member.\n\nSupported for filter/search by banned user in the bans list."},"moderator_id":{"type":"string","format":"uuid","description":"ID of moderator who performed the ban.\n\nSupported for finding bans enacted by specific moderators."},"ban_reason":{"type":"string","description":"String reason for ban.\n\nE.g., 'repeat violations', 'harassment', for aggregation/reporting."},"permanent":{"type":"boolean","description":"Boolean filter for whether the ban is permanent or temporary."},"created_at_from":{"type":"string","format":"date-time","description":"Lower time bound for ban creation timestamp (inclusive, for filtering)."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound for ban creation date (inclusive)."},"expires_at":{"type":"string","format":"date-time","description":"Filter for banned-until timestamp."},"deleted_at":{"type":"string","format":"date-time","description":"Filter for soft-deleted bans if included."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination and batching configuration."}},"description":"Request/search query type for ban records (discussion_board_bans). For listing, filtering, searching, auditing of ban events in discussion board; includes all properties for advanced search by moderator, time, reason, status, and pagination.","required":[]},"discussion_board_IPageIDiscussionBoardBan":{"description":"Paginated container for ban records (discussion_board_bans).\n\nContains batch/pagination info and array of ban record entries."},"IDiscussionBoardModerationLog.IRequest":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"Filters the moderation logs to actions taken by a specific moderator. Must be a valid UUID string corresponding to a moderator's unique id in the system.\n\nThis enables audit trails for individual moderator activities."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters logs to only those associated with a specific discussion thread. Accepts thread UUID or null to ignore this filter.\n\nSupports investigations or history review on particular threads."},{"type":"null"}],"description":"Filters logs to only those associated with a specific discussion thread. Accepts thread UUID or null to ignore this filter.\n\nSupports investigations or history review on particular threads."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters logs to only those related to a particular post. Accepts the UUID of a discussion_board_post or null if not filtering posts.\n\nUseful for auditing actions on a single post."},{"type":"null"}],"description":"Filters logs to only those related to a particular post. Accepts the UUID of a discussion_board_post or null if not filtering posts.\n\nUseful for auditing actions on a single post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filters logs by comment. Accepts UUID or null.\n\nFacilitates deep drilldowns into comment-level moderation activity."},{"type":"null"}],"description":"Filters logs by comment. Accepts UUID or null.\n\nFacilitates deep drilldowns into comment-level moderation activity."},"action":{"type":"string","description":"Filters by action performed (e.g., 'hide', 'delete', 'warn', 'edit').\n\nMatches the 'action' property used in moderation logs, for workflow or analytics purposes."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for creation datetime filter (inclusive). ISO 8601 with time zone (e.g., 2025-07-01T00:00:00Z)."},{"type":"null"}],"description":"Lower bound for creation datetime filter (inclusive). ISO 8601 with time zone (e.g., 2025-07-01T00:00:00Z)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for creation datetime filter (inclusive). ISO 8601 with time zone (e.g., 2025-07-23T23:59:59Z)."},{"type":"null"}],"description":"Upper bound for creation datetime filter (inclusive). ISO 8601 with time zone (e.g., 2025-07-23T23:59:59Z)."},"page":{"type":"integer","minimum":1,"description":"Page number to retrieve for paginated results.\n\nDefaults to 1 if omitted."},"limit":{"type":"integer","minimum":1,"description":"How many records to return per page (for pagination). Default and maximum values determined by system policy."}},"description":"Request object for searching and paginating moderation log entries. Fields allow for rich filtering and audit workflow as required in discussion_board_moderation_logs table. All properties mirror fields or query needs described in system requirements analysis and schema comments.\n\nContains parameters for moderator, content target, action type, and time bounds; fully supports paginated result sets. Used by administrative and moderator interfaces for audit, sorting, and workflow management.","required":[]},"IPageIDiscussionBoardModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationLog"},"description":"Array of moderation log records matching the query/page request."}},"required":["pagination","data"],"description":"Paginated container type for moderation logs result sets. Implements the IPage generic documented in the system for listing entities. Used by administrative/moderator UIs to support paginated viewing of large audit trails.\n\nIncludes full moderation log entities (see IDiscussionBoardModerationLog) and pagination information for scalable navigation."},"IDiscussionBoardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the moderation log record, used for referencing, updates, and detailed lookup. Generated as a UUID string. Required per base schema."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who performed the action. References discussion_board_moderators.id.\n\nEnables traceability and compliance review for all moderation events."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID reference to the affected thread (if action was on a thread). Nullable for actions on posts, comments, or global moderation events. Required for proper audit but can be null for non-thread actions."},{"type":"null"}],"description":"UUID reference to the affected thread (if action was on a thread). Nullable for actions on posts, comments, or global moderation events. Required for proper audit but can be null for non-thread actions."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID reference to the affected post, if action directly targeted a post. Nullable for other types of events.\n\nUsed for pinpoint audit of post-level actions."},{"type":"null"}],"description":"UUID reference to the affected post, if action directly targeted a post. Nullable for other types of events.\n\nUsed for pinpoint audit of post-level actions."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID reference to the affected comment, if relevant. Nullable for actions not involving comments.\n\nSupports moderation specificity at the comment granularity."},{"type":"null"}],"description":"UUID reference to the affected comment, if relevant. Nullable for actions not involving comments.\n\nSupports moderation specificity at the comment granularity."},"action":{"type":"string","description":"Type of action performed (e.g., 'hide', 'delete', 'warn', 'edit'). Required for state tracking and compliance modeling.\n\nExclusively stores atomic event labels for each moderation activity."},"action_reason":{"oneOf":[{"type":"string","description":"Optional field for the moderator's justification for the action taken. Enables transparency and supports complex audit requirements. Free text. Nullable if action reason not provided."},{"type":"null"}],"description":"Optional field for the moderator's justification for the action taken. Enables transparency and supports complex audit requirements. Free text. Nullable if action reason not provided."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the moderation event occurred. Used for time-based queries, analytics, and compliance timelines. Required for every log record."}},"required":["id","moderator_id","action","created_at"],"description":"Entity type representing a single moderation log event. Aligns strictly with the discussion_board_moderation_logs table in schema. Each record is immutable and fully auditable as part of the moderation trail.\n\nIncludes foreign keys to moderator and relevant content object (thread, post, comment as applicable), a textual label for the moderation action, rationale, and a timestamp. Serves as the atomic unit for all moderation/audit analytics and history."},"IDiscussionBoardModerationLog.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator initiating the moderation event. Required for authorizing/moderation compliance."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target thread's UUID (nullable if not on thread)."},{"type":"null"}],"description":"Target thread's UUID (nullable if not on thread)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target post's UUID (nullable if not on a post)."},{"type":"null"}],"description":"Target post's UUID (nullable if not on a post)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target comment's UUID (nullable if not on a comment)."},{"type":"null"}],"description":"Target comment's UUID (nullable if not on a comment)."},"action":{"type":"string","description":"Type of moderation action as free text (permitted values: 'hide', 'delete', 'warn', 'edit', or other platform-defined actions)."},"action_reason":{"oneOf":[{"type":"string","description":"Optional moderator-issued rationale for this action. Enables transparency and audit compliance."},{"type":"null"}],"description":"Optional moderator-issued rationale for this action. Enables transparency and audit compliance."}},"required":["moderator_id","action"],"description":"Payload for creating a new moderation log event, as stored in discussion_board_moderation_logs. Used in POST operations for audit trail creation. Any relevant content references must be provided in the appropriate key fields, actions should match platform convention. All documentation aligns with Prisma schema and requirements analysis for moderation compliance."},"IDiscussionBoardModerationLog.IUpdate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator responsible for the log event. May be edited in error correction or reassignment scenarios."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID identifying target thread (nullable if not involving a thread)."},{"type":"null"}],"description":"UUID identifying target thread (nullable if not involving a thread)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing post involved; nullable for other targets."},{"type":"null"}],"description":"UUID referencing post involved; nullable for other targets."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing specific comment involved; nullable if not relevant."},{"type":"null"}],"description":"UUID referencing specific comment involved; nullable if not relevant."},"action":{"type":"string","description":"Type of action in log, e.g., 'delete', 'hide', 'warn', 'edit', per system-defined values."},"action_reason":{"oneOf":[{"type":"string","description":"Optional free-text rationale for the action. Transparent audit and compliance reasons may be attached."},{"type":"null"}],"description":"Optional free-text rationale for the action. Transparent audit and compliance reasons may be attached."}},"required":["moderator_id","action"],"description":"Update payload for moderation log record. Used for correcting or annotating log entries as permitted by the business process. Only fields present in the discussion_board_moderation_logs schema are allowed. All updates are consistent with audit trail integrity and historical review requirements."},"IDiscussionBoardWarning.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Filter results to warnings belonging to a specific member account (UUID string).\n\nEnables review of warnings for a particular user, supporting member management and audit."},"moderator_id":{"type":"string","format":"uuid","description":"Filter by moderator who issued the warning (UUID of moderator).\n\nPermits analytics or compliance review of moderation patterns."},"warning_type":{"type":"string","description":"Filter for type/category of warning (e.g., 'spam', 'harassment').\n\nSupports infraction analytics or type-based workflows."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for warning issue date (inclusive). Timestamp, ISO 8601 format."},{"type":"null"}],"description":"Lower bound for warning issue date (inclusive). Timestamp, ISO 8601 format."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for warning issue date (inclusive). Timestamp, ISO 8601 format."},{"type":"null"}],"description":"Upper bound for warning issue date (inclusive). Timestamp, ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter by deleted (soft-deleted) warnings, supports audit trails and moderation workflow; nullable to include all records."},{"type":"null"}],"description":"Filter by deleted (soft-deleted) warnings, supports audit trails and moderation workflow; nullable to include all records."},"page":{"type":"integer","minimum":1,"description":"Page number to retrieve in paginated results. Defaults to 1."},"limit":{"type":"integer","minimum":1,"description":"How many warning records to return in a single page (pagination parameter). System policy may cap."}},"description":"Search/filter request object for warnings issued to members. Maps directly to the audit and moderation management features documented in requirements, and to the structure of the discussion_board_warnings table.\n\nSupports compliance review, member behavior analytics, and moderation workflow for infractions. All filter fields correspond to searchable schema columns with appropriate types.","required":[]},"IPageIDiscussionBoardWarning":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardWarning"},"description":"Array of warning records for the query page."}},"required":["pagination","data"],"description":"Paginated result set for discussion board warnings. Implements the generic IPage container for paging through warning audit trails and moderation lists. Returned data array always consists of IDiscussionBoardWarning entities matching query."},"IDiscussionBoardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the warning entity (UUID). Used for referencing in workflows and audit analytics."},"member_id":{"type":"string","format":"uuid","description":"UUID referencing the member warned in this record, foreign key to discussion_board_members.id."},"moderator_id":{"type":"string","format":"uuid","description":"UUID referencing moderator who issued the warning (foreign key to discussion_board_moderators.id).\n\nEssential for compliance, audit trail, and accountability."},"warning_type":{"type":"string","description":"Warning type (e.g., 'spam', 'harassment'). Used for infraction categorization, escalation analytics, and workflow automation.\n\nPermitted values documented at the business-level policy."},"message":{"type":"string","description":"Human-readable moderator message to member. Provides rationale, evidence, or instruction. Free-text and required."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when warning was issued. Key for time-based analytics, escalation, and compliance/time-limited warnings."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable expiration timestamp for the warning (if temporary). If null, the warning is permanent until removed."},{"type":"null"}],"description":"Nullable expiration timestamp for the warning (if temporary). If null, the warning is permanent until removed."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp; set to hide or lift the warning while retaining audit history. Null if warning is active/present."},{"type":"null"}],"description":"Soft-delete timestamp; set to hide or lift the warning while retaining audit history. Null if warning is active/present."}},"required":["id","member_id","moderator_id","warning_type","message","created_at"],"description":"Entity representing a warning issued to a board member per moderation policy. Implements all requirements for auditability, escalation tracking, and compliance reversibility.\n\nWarning details cover target (member), issuing moderator, infraction type, message, timestamp, expiration semantics, and soft delete flag (supporting reversible removal). All documentation derived from requirements analysis and strict table schema."},"IDiscussionBoardWarning.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"UUID of target member receiving the warning. Required for all warning creation actions."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator issuing warning. Ensures compliance and trace auditability."},"warning_type":{"type":"string","description":"Atomic label for infraction type (e.g., 'harassment', 'spam').\n\nRequired for analytics and enforcement escalation."},"message":{"type":"string","description":"Human-facing message to the member from the moderator. Free text explaining rationale, evidence, or next step. Required."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional expiration timestamp (if warning is not permanent)."},{"type":"null"}],"description":"Optional expiration timestamp (if warning is not permanent)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional, used to immediately set a warning as deleted/lifted at creation (rare). Null for standard creation."},{"type":"null"}],"description":"Optional, used to immediately set a warning as deleted/lifted at creation (rare). Null for standard creation."}},"required":["member_id","moderator_id","warning_type","message"],"description":"Payload for POSTing a new warning. Required fields enforce business logic and compliance with moderation policy. Expiry and soft delete fields provided for administrative workflows per audit policy."},"IDiscussionBoardWarning.IUpdate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"UUID of member warned. Not updatable in practice except for administrative error correction."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator associated with warning; updatable for error correction/compliance."},"warning_type":{"type":"string","description":"Type/category of warning. Permits analytics or escalation workflows."},"message":{"type":"string","description":"Modification/correction of moderator-to-member message. Permitted for administrative corrections only."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Updated (or nullified) expiration for temporary warning."},{"type":"null"}],"description":"Updated (or nullified) expiration for temporary warning."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set/lift soft delete of warning; null means active, timestamp means removed/hidden as per audit/compliance."},{"type":"null"}],"description":"Set/lift soft delete of warning; null means active, timestamp means removed/hidden as per audit/compliance."}},"description":"Editable warning entity update for moderation workflows. Only schema properties permitted, all fields vetted for audit, error-repair, or soft delete behavior.\n\nBusiness logic must respect non-editability of creation timestamp and PK, and restrict soft delete changes to authorized roles only.","required":[]},"IDiscussionBoardBan.IRequest":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Target banned member (UUID string from discussion_board_members).\n\nSupports filtering on a specific user's ban record(s)."},"moderator_id":{"type":"string","format":"uuid","description":"Moderator who issued the ban (references discussion_board_moderators).\n\nSupports compliance review of moderator activity."},"permanent":{"type":"boolean","description":"Filter to permanent (true) or temporary (false) bans.\n\nFacilitates review of enforcement patterns."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Earliest creation timestamp for ban inclusion (inclusive). ISO 8601 with time zone."},{"type":"null"}],"description":"Earliest creation timestamp for ban inclusion (inclusive). ISO 8601 with time zone."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Latest creation timestamp for ban inclusion (inclusive). ISO 8601 with time zone."},{"type":"null"}],"description":"Latest creation timestamp for ban inclusion (inclusive). ISO 8601 with time zone."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter bans by expiry timestamp. Useful for reviewing active, expired or soon-to-expire bans."},{"type":"null"}],"description":"Filter bans by expiry timestamp. Useful for reviewing active, expired or soon-to-expire bans."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Show only bans that have been lifted (soft-deleted), active (null), or all (null param)."},{"type":"null"}],"description":"Show only bans that have been lifted (soft-deleted), active (null), or all (null param)."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results, default 1."},"limit":{"type":"integer","minimum":1,"description":"Records per page (system default and maximum constraints apply)."}},"description":"Request object for querying/discovering ban records in the discussion_board_bans table. Enables advanced searching, auditing and workflow support for moderation and compliance. All filter parameters mapped precisely to schema fields or usage documented in requirements.","required":[]},"IPageIDiscussionBoardBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardBan"},"description":"Array of ban records for a query result page."}},"required":["pagination","data"],"description":"Paginated result page for ban record queries in the discussion board system. Follows IPage container format documented in system standard. Data always array of IDiscussionBoardBan type, aligned to query and audit needs."},"IDiscussionBoardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for a ban record in the discussion board system. References the primary key from the discussion_board_bans table in the database.\n\nA UUID string, this value is immutable and serves as the central reference for ban modification, audit, or removal workflows throughout the moderation lifecycle."},"member_id":{"type":"string","format":"uuid","description":"The unique identifier of the member who has been banned. Foreign key to the discussion_board_members.id column. Atomic and required per row, enables tracing of bans to member accounts directly.\n\nThis value is critical for enforcing restrictions on the targeted user and supports business logic for participation controls, escalation, and unbanning workflows."},"moderator_id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator who enacted the ban. Foreign key to discussion_board_moderators.id. Required for administrative audit and accountability purposes.\n\nLinks ban records with responsible moderators according to compliance and audit trail requirements, ensuring full traceability of disciplinary actions."},"ban_reason":{"type":"string","description":"Textual explanation for the ban. Stored as a single, non-null string, this represents the rationale for the ban and is surfaced in moderation/audit UIs.\n\nFulfills business requirements for documenting infraction category or context (e.g., spam, harassment, repeated ToS violations)."},"permanent":{"type":"boolean","description":"Indicates whether the ban is permanent. True when the ban has no expiration and is designed to restrict the user indefinitely, false if there is an expiration defined."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601 format) when the ban was created. Set at creation, immutable for audit and compliance purposes."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp indicating when a temporary ban will be lifted. Null for permanent bans, otherwise stores an ISO date/time. Used for both enforcement automation and audit workflows."},{"type":"null","format":"date-time","description":"Nullable timestamp indicating when a temporary ban will be lifted. Null for permanent bans, otherwise stores an ISO date/time. Used for both enforcement automation and audit workflows."}],"description":"Nullable timestamp indicating when a temporary ban will be lifted. Null for permanent bans, otherwise stores an ISO date/time. Used for both enforcement automation and audit workflows."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for soft deletion (lifting the ban or removing from active records). Set to null if record is active, otherwise populated during ban reversal. Required for audit and undo workflows."},{"type":"null","format":"date-time","description":"Nullable timestamp for soft deletion (lifting the ban or removing from active records). Set to null if record is active, otherwise populated during ban reversal. Required for audit and undo workflows."}],"description":"Nullable timestamp for soft deletion (lifting the ban or removing from active records). Set to null if record is active, otherwise populated during ban reversal. Required for audit and undo workflows."}},"required":["id","member_id","moderator_id","ban_reason","permanent","created_at"],"description":"A record representing a disciplinary ban placed on a member of the board. Each ban is atomic, fully auditable, and references responsible parties directly. Serves as the enforcement artifact for exclusion from board participation activities. See the discussion_board_bans table in the Prisma schema for complete definition. Supports soft deletion (reversibility and audit compliance) via deleted_at."},"IDiscussionBoardBan.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the member being banned. Must reference an active record in discussion_board_members."},"moderator_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the moderator imposing the ban. References a valid moderator."},"ban_reason":{"type":"string","description":"Reason for the ban (e.g., 'abuse', 'spam/advertising', 'policy violation'). Required for all new bans."},"permanent":{"type":"boolean","description":"Whether the ban is permanent (true) or will automatically expire (false)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiration timestamp for temporary ban (mandatory when permanent=false). May be null for permanent bans."},{"type":"null","format":"date-time","description":"Expiration timestamp for temporary ban (mandatory when permanent=false). May be null for permanent bans."}],"description":"Expiration timestamp for temporary ban (mandatory when permanent=false). May be null for permanent bans."}},"required":["member_id","moderator_id","ban_reason","permanent"],"description":"Object describing the request body for creating a ban in the board system (see discussion_board_bans Prisma schema). Completely aligns with business rules around audit, accountability, and reversibility. Supports both permanent and temporary bans."},"IDiscussionBoardBan.IUpdate":{"type":"object","properties":{"ban_reason":{"type":"string","description":"The updated rationale or description for the ban, if changed after creation. Aligned with compliance and infraction management."},"permanent":{"type":"boolean","description":"Flag indicating whether the ban is permanent. May be toggled to convert a temporary ban to indefinite, or vice versa."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Updated expiration date for temporary bans. Null if the updated ban is now permanent."},{"type":"null","format":"date-time","description":"Updated expiration date for temporary bans. Null if the updated ban is now permanent."}],"description":"Updated expiration date for temporary bans. Null if the updated ban is now permanent."}},"required":[],"description":"Object describing a partial or complete update to an existing ban (see discussion_board_bans Prisma schema). Only mutable fields—ban_reason, permanent, and expires_at—are represented. Enables moderation teams to adjust timing, infraction description, or permanent/temporary status. Mutability is strictly limited to business rules around ban reversal and escalation."},"INotification.IRequest":{"type":"object","properties":{"recipient_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filtering for notifications sent to this member (foreign key to members). Null means no filter or all."},{"type":"null","format":"uuid","description":"Optional filtering for notifications sent to this member (foreign key to members). Null means no filter or all."}],"description":"Optional filtering for notifications sent to this member (foreign key to members). Null means no filter or all."},"type":{"oneOf":[{"type":"string","description":"Notification type/category to filter (e.g., 'reply', 'mention', 'moderation', etc.). Null for all types."},{"type":"null","description":"Notification type/category to filter (e.g., 'reply', 'mention', 'moderation', etc.). Null for all types."}],"description":"Notification type/category to filter (e.g., 'reply', 'mention', 'moderation', etc.). Null for all types."},"read":{"oneOf":[{"type":"boolean","description":"Filter by read/unread notifications. Null for any read status."},{"type":"null","description":"Filter by read/unread notifications. Null for any read status."}],"description":"Filter by read/unread notifications. Null for any read status."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional delivery timestamp filter. Null for any delivery status."},{"type":"null","format":"date-time","description":"Optional delivery timestamp filter. Null for any delivery status."}],"description":"Optional delivery timestamp filter. Null for any delivery status."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional filter for notifications created at this time (or after/before, per API use). Null to ignore."},{"type":"null","format":"date-time","description":"Optional filter for notifications created at this time (or after/before, per API use). Null to ignore."}],"description":"Optional filter for notifications created at this time (or after/before, per API use). Null to ignore."},"page":{"oneOf":[{"type":"integer","description":"Optional pagination page number. Null for default."},{"type":"null","description":"Optional pagination page number. Null for default."}],"description":"Optional pagination page number. Null for default."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of results per page. Null to use default."},{"type":"null","description":"Maximum number of results per page. Null to use default."}],"description":"Maximum number of results per page. Null to use default."}},"required":[],"description":"Request body schema for listing, searching, or filtering notification records (see discussion_board_notifications Prisma schema). Supports flexible filter/sort/pagination for members/admins. All filter values are nullable to indicate 'no filter' when desired."},"IPageINotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotification"},"description":"Array of notification objects matching filters/pagination."}},"required":["pagination","data"],"description":"A container for paginated results of notifications, following the generalized IPage<T> interface semantics. Includes a pagination info object and a data array with notification objects."},"INotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the notification record (from discussion_board_notifications.id). Immutable."},"recipient_member_id":{"type":"string","format":"uuid","description":"The member targeted by the notification (recipient). Foreign key to discussion_board_members.id."},"trigger_actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Nullable foreign key to discussion_board_members.id representing the member who triggered the notification. Null for system events."},{"type":"null","format":"uuid","description":"Nullable foreign key to discussion_board_members.id representing the member who triggered the notification. Null for system events."}],"description":"Nullable foreign key to discussion_board_members.id representing the member who triggered the notification. Null for system events."},"type":{"type":"string","description":"The type/category of the notification (e.g., 'reply', 'mention', 'moderation', 'subscription'). Defines UX behavior and grouping."},"content_preview":{"oneOf":[{"type":"string","description":"Optional textual excerpt or short preview of the triggering event, such as post/comment snippet or action summary."},{"type":"null","description":"Optional textual excerpt or short preview of the triggering event, such as post/comment snippet or action summary."}],"description":"Optional textual excerpt or short preview of the triggering event, such as post/comment snippet or action summary."},"url":{"type":"string","description":"A URL for navigating to the content/resource associated with this notification (e.g., thread, post, moderation event). Used for in-app linking."},"read":{"type":"boolean","description":"Boolean indicating if the notification has been opened/read by the recipient member. Used for UI state and notification badges."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp when in-app or email notification was delivered. Null if not yet delivered."},{"type":"null","format":"date-time","description":"Nullable timestamp when in-app or email notification was delivered. Null if not yet delivered."}],"description":"Nullable timestamp when in-app or email notification was delivered. Null if not yet delivered."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was generated (atomic, non-derived)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for soft delete of notification (compliance/audit). Null for active notifications."},{"type":"null","format":"date-time","description":"Nullable timestamp for soft delete of notification (compliance/audit). Null for active notifications."}],"description":"Nullable timestamp for soft delete of notification (compliance/audit). Null for active notifications."}},"required":["id","recipient_member_id","type","url","read","created_at"],"description":"Represents a notification event record as per the discussion_board_notifications table in the schema. Includes recipient, type, trigger actor (nullable), payload links/preview, delivery/read state, and audit fields. Supports regulatory soft deletion and role-based access."},"INotification.ICreate":{"type":"object","properties":{"recipient_member_id":{"type":"string","format":"uuid","description":"UUID of the member to receive the notification. Required, foreign key to members."},"trigger_actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the member whose action triggered this notification. Null for system or broadcast events."},{"type":"null","format":"uuid","description":"UUID of the member whose action triggered this notification. Null for system or broadcast events."}],"description":"UUID of the member whose action triggered this notification. Null for system or broadcast events."},"type":{"type":"string","description":"The notification type/category (e.g., 'reply', 'mention', 'moderation', etc.)."},"content_preview":{"oneOf":[{"type":"string","description":"Short preview, excerpt, or message to display in notification center (optional)."},{"type":"null","description":"Short preview, excerpt, or message to display in notification center (optional)."}],"description":"Short preview, excerpt, or message to display in notification center (optional)."},"url":{"type":"string","description":"Link/uri to associated resource or event for fast navigation (required, must be a valid URL)."},"read":{"type":"boolean","description":"Initial read status, usually false upon creation."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for when notification was delivered to user (in-app/email); may be set at creation or later."},{"type":"null","format":"date-time","description":"Nullable timestamp for when notification was delivered to user (in-app/email); may be set at creation or later."}],"description":"Nullable timestamp for when notification was delivered to user (in-app/email); may be set at creation or later."}},"required":["recipient_member_id","type","url","read"],"description":"Notification creation request body object. Aligns fields exactly with discussion_board_notifications schema. Required fields: recipient, type, URL, read status; others are optional (for event context or audit)."},"INotification.IUpdate":{"type":"object","properties":{"trigger_actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) To update the triggering user for the notification (rare except for event corrections)."},{"type":"null","format":"uuid","description":"(Optional) To update the triggering user for the notification (rare except for event corrections)."}],"description":"(Optional) To update the triggering user for the notification (rare except for event corrections)."},"type":{"type":"string","description":"(Optional) Change the notification type/category."},"content_preview":{"oneOf":[{"type":"string","description":"(Optional) Update the message/preview/excerpt for this notification."},{"type":"null","description":"(Optional) Update the message/preview/excerpt for this notification."}],"description":"(Optional) Update the message/preview/excerpt for this notification."},"url":{"type":"string","description":"(Optional) Change the link/URL associated with this notification."},"read":{"type":"boolean","description":"Set or change read state (main purpose of most notification updates)."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) Update/patch the moment notification is delivered via in-app/email."},{"type":"null","format":"date-time","description":"(Optional) Update/patch the moment notification is delivered via in-app/email."}],"description":"(Optional) Update/patch the moment notification is delivered via in-app/email."}},"required":[],"description":"Partial/full update object for notifications. All fields are optional patches to existing record (INotification). Main use is marking notifications as read/delivered, correcting previews, links, or types."},"ISubscription.IRequest":{"type":"object","properties":{"member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter to query subscriptions for a particular member. Null to search all."},{"type":"null","format":"uuid","description":"Optional filter to query subscriptions for a particular member. Null to search all."}],"description":"Optional filter to query subscriptions for a particular member. Null to search all."},"target_type":{"oneOf":[{"type":"string","description":"Filter for subscriptions by type of followed resource (e.g., 'thread', 'section', 'tag'). Null means any/all types."},{"type":"null","description":"Filter for subscriptions by type of followed resource (e.g., 'thread', 'section', 'tag'). Null means any/all types."}],"description":"Filter for subscriptions by type of followed resource (e.g., 'thread', 'section', 'tag'). Null means any/all types."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter for subscriptions targeting a particular resource. Null for all resources."},{"type":"null","format":"uuid","description":"Optional filter for subscriptions targeting a particular resource. Null for all resources."}],"description":"Optional filter for subscriptions targeting a particular resource. Null for all resources."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime filter to only include subscriptions created after/before this timestamp. Null to ignore."},{"type":"null","format":"date-time","description":"Datetime filter to only include subscriptions created after/before this timestamp. Null to ignore."}],"description":"Datetime filter to only include subscriptions created after/before this timestamp. Null to ignore."},"page":{"oneOf":[{"type":"integer","description":"Requested page number for paginated responses (optional, null for default)."},{"type":"null","description":"Requested page number for paginated responses (optional, null for default)."}],"description":"Requested page number for paginated responses (optional, null for default)."},"limit":{"oneOf":[{"type":"integer","description":"Maximum count of results per page (optional, null to use system default)."},{"type":"null","description":"Maximum count of results per page (optional, null to use system default)."}],"description":"Maximum count of results per page (optional, null to use system default)."}},"required":[],"description":"Request body object for searching/filtering/paginating notification subscriptions. All filters are optional and strictly follow the discussion_board_subscriptions schema."},"IPageISubscription":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISubscription"},"description":"Array of subscription entities."}},"required":["pagination","data"],"description":"Paginated response structure for notification subscriptions as per IPage<T> semantics. Follows generic board API conventions for batch retrieval."},"ISubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the subscription entity (discussion_board_subscriptions.id). Primary key for API lookups, audits, or editing/removal."},"member_id":{"type":"string","format":"uuid","description":"Foreign key to the subscribing member (discussion_board_members.id). Member who will receive notifications about target events/changes."},"target_type":{"type":"string","description":"Type/category of resource being followed (e.g., 'thread', 'section', 'tag'). Used to model polymorphic subscriptions and drive dynamic notification workflows."},"target_id":{"type":"string","format":"uuid","description":"UUID identifier for the specific resource being followed (distinct table per target_type, not enforced at schema level). Maintains referential integrity for notification routing/audit."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of subscription creation (board policies enforce uniqueness over (member, target_type, target_id))."}},"required":["id","member_id","target_type","target_id","created_at"],"description":"Entity for resource subscription on the board. Each entry indicates a member's subscription to a thread/section/tag/etc. Used to drive personalized notification flows for updates to followed resources. See discussion_board_subscriptions Prisma schema."},"ISubscription.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"The UUID of the member subscribing to a resource (FK to members). Required for subscription creation."},"target_type":{"type":"string","description":"Target resource type/category (e.g., 'thread', 'section', 'tag'). String, must match business-allowed values."},"target_id":{"type":"string","format":"uuid","description":"UUID identifier for concrete resource (FK semantics not enforced in schema, but required for business rules)."}},"required":["member_id","target_type","target_id"],"description":"Request body for subscription creation to board resources. Follows discussion_board_subscriptions schema, uniquely binding a member to a targeted resource (thread/section/tag/etc)."},"ISubscription.IUpdate":{"type":"object","properties":{"target_type":{"type":"string","description":"The type of resource this subscription references (e.g., 'thread', 'section', 'tag').\n\nThis string must match exactly a known value as used in discussion_board_subscriptions.target_type. Used to identify the type of content the member is subscribing to.\n\nCorresponds to the 'target_type' column in the Prisma schema."},"target_id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) of the target resource being followed (thread, section, tag, etc.).\n\nReferences the 'target_id' field in discussion_board_subscriptions. Must correspond to a valid UUID for a followable resource."}},"required":["target_type","target_id"],"description":"Update object for a board subscription.\n\nThis type allows for updating the type and resource target of a subscription, as defined in discussion_board_subscriptions. All properties must directly correspond to schema columns."},"IDiscussionBoardMention.IRequest":{"type":"object","properties":{"mentioned_member_id":{"type":"string","format":"uuid","description":"UUID of the member being mentioned. Optional: filter search for only mentions of this user.\n\nReferences the schema's 'mentioned_member_id' column."},"actor_member_id":{"type":"string","format":"uuid","description":"UUID of the member who created the mention. Optional: used to filter mentions authored by a user.\n\nReferences 'actor_member_id' in the schema."},"content_type":{"type":"string","description":"Type of content where the mention occurred (e.g., 'post','comment','thread'). Optional: restrict query to certain mention types.\n\nReferences the content_type column."},"content_id":{"type":"string","format":"uuid","description":"UUID of the resource where mention occurred. Optional: restricts search to a specific content target.\n\nMaps to content_id."},"created_at":{"type":"string","format":"date-time","description":"Search or filter by creation timestamp. Optional."},"page":{"type":"integer","format":"int32","description":"Page number (optional, for pagination)."},"limit":{"type":"integer","format":"int32","description":"Maximum records per page (optional, for pagination)."}},"required":[],"description":"Request object for searching/listing mentions.\n\nAll fields filter query according to schema columns in discussion_board_mentions. No field is required; supplying none returns unfiltered list."},"IPageIDiscussionBoardMention":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for results (current page, total, etc.)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMention"},"description":"Array of mention objects returned in the query."}},"required":["pagination","data"],"description":"A paginated result set of IDiscussionBoardMention entities.\n\nThis standard type is used for any search/list patch returning mention objects, in line with IPage<T> conventions."},"IDiscussionBoardMention":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the mention event (UUID).\n\nEquals 'id' column in discussion_board_mentions."},"mentioned_member_id":{"type":"string","format":"uuid","description":"UUID of the member who was mentioned. Required.\n\nReferences 'mentioned_member_id' in schema."},"actor_member_id":{"type":"string","format":"uuid","description":"UUID of the member who created the mention event. Required.\n\nReferences 'actor_member_id' in schema."},"content_type":{"type":"string","description":"Type of content where the mention happened (e.g., 'thread', 'post', 'comment'). Required.\n\nMaps directly to 'content_type' in Prisma schema."},"content_id":{"type":"string","format":"uuid","description":"UUID of the resource where mention was made. Required.\n\nReferences 'content_id' schema column."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this mention event was recorded (ISO 8601 UTC).\n\nEquals 'created_at' in schema."}},"required":["id","mentioned_member_id","actor_member_id","content_type","content_id","created_at"],"description":"A mention entity as stored in discussion_board_mentions.\n\nRepresents the event of a member being mentioned in a piece of content (thread, post, or comment). All fields correspond exactly to schema columns, supporting notification and audit requirements."},"IDiscussionBoardMention.ICreate":{"type":"object","properties":{"mentioned_member_id":{"type":"string","format":"uuid","description":"UUID of the member to be mentioned. Required.\n\nEquals 'mentioned_member_id' column."},"actor_member_id":{"type":"string","format":"uuid","description":"UUID of the member authoring the mention (the one who creates this reference event). Required.\n\nEquals 'actor_member_id' column."},"content_type":{"type":"string","description":"Type of content where the mention occurs, such as 'thread', 'post', or 'comment'. Required.\n\nEquals 'content_type' column."},"content_id":{"type":"string","format":"uuid","description":"UUID of the resource where the mention is being made. Required.\n\nEquals 'content_id' column."}},"required":["mentioned_member_id","actor_member_id","content_type","content_id"],"description":"Input object for creating a mention.\n\nEvery property matches a column in the discussion_board_mentions schema. Used when inserting new mention events (e.g., on content creation or edit that includes an @-mention in text)."},"IDiscussionBoardMention.IUpdate":{"type":"object","properties":{"mentioned_member_id":{"type":"string","format":"uuid","description":"(Required) The UUID of the member mentioned. Must correspond to a valid member.\n\nReferences the schema column."},"actor_member_id":{"type":"string","format":"uuid","description":"(Required) The UUID of the member performing/creating the mention event.\n\nReferences the schema column."},"content_type":{"type":"string","description":"(Required) The type of content where the mention occurred (e.g., 'thread', 'post', 'comment').\n\nReferences discussion_board_mentions.content_type."},"content_id":{"type":"string","format":"uuid","description":"(Required) UUID of the referenced content (thread, post, or comment).\n\nReferences the schema column."}},"required":["mentioned_member_id","actor_member_id","content_type","content_id"],"description":"Update object for replacing a mention. All fields must be provided (full replacement via PUT). Every property must match the schema exactly."},"IDiscussionBoardVoteType.IRequest":{"type":"object","properties":{"name":{"type":"string","description":"Text filter or exact search for vote type display name.\n\nMaps to discussion_board_vote_types.name column."},"code":{"type":"string","description":"Filter for the unique code of the vote type (e.g., 'upvote', 'downvote').\n\nMaps to vote_types.code; must match for search."},"description":{"type":"string","description":"Optional: filter vote type list by substring or presence in the description field.\n\nMaps to vote_types.description."},"page":{"type":"integer","format":"int32","description":"Pagination: which page of results (1-based, optional)."},"limit":{"type":"integer","format":"int32","description":"Number of results to return per page (optional)."}},"required":[],"description":"Search, filter, or paginate request for discussion_board_vote_types. No required field; supply any combination for advanced query."},"IPageIDiscussionBoardVoteType":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVoteType"}}},"required":["pagination","data"],"description":"Paginated result set for vote types. Used for advanced PATCH-based search and listing workflows."},"IDiscussionBoardVoteType":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for the vote type. Required.\n\nCorresponds to discussion_board_vote_types.id."},"code":{"type":"string","description":"Programmatic code for the vote type (e.g., 'upvote', 'downvote'). Unique per type.\n\nFrom vote_types.code column."},"name":{"type":"string","description":"Human-friendly display name for vote type (e.g., 'Upvote').\n\nFrom vote_types.name column."},"description":{"oneOf":[{"type":"string","description":"Nullable descriptive string explaining the vote type purpose.\n\nFrom vote_types.description column."},{"type":"null"}],"description":"Nullable descriptive string explaining the vote type purpose.\n\nFrom vote_types.description column."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of creation (ISO 8601 UTC, corresponds to created_at schema column)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (ISO 8601 UTC, corresponds to updated_at schema column)."}},"required":["id","code","name","created_at","updated_at"],"description":"A board voting type entity (e.g., 'upvote', 'downvote').\n\nAll properties must map directly to columns in discussion_board_vote_types. Used for extensible voting mechanisms."},"IDiscussionBoardVoteType.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique programmatic code for the vote type (required).\n\nFrom vote_types.code. Must not duplicate an existing type."},"name":{"type":"string","description":"Display name for the vote type (required).\n\nFrom vote_types.name."},"description":{"oneOf":[{"type":"string","description":"Optional explanation of what the vote type means or when it is used.\n\nFrom vote_types.description."},{"type":"null"}],"description":"Optional explanation of what the vote type means or when it is used.\n\nFrom vote_types.description."}},"required":["code","name"],"description":"Input payload for creating a new vote type. Only fields present in the schema are supported."},"IDiscussionBoardVoteType.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"(Required) The unique code for this vote type.\n\nFrom vote_types.code (must remain unique)."},"name":{"type":"string","description":"(Required) The human-readable display name for this vote type.\n\nFrom vote_types.name."},"description":{"oneOf":[{"type":"string","description":"(Optional) Human-readable explanation for the vote type purpose.\n\nFrom vote_types.description."},{"type":"null"}],"description":"(Optional) Human-readable explanation for the vote type purpose.\n\nFrom vote_types.description."}},"required":["code","name"],"description":"Object for full update (PUT) of vote type. All properties required except optional description. Mirrors schema, updating only actual columns defined."},"IDiscussionBoardVote.IRequest":{"type":"object","properties":{"voter_id":{"type":"string","format":"uuid","description":"UUID of the member who cast the vote (optional filter).\n\nCorresponds to discussion_board_votes.voter_id."},"vote_type_id":{"type":"string","format":"uuid","description":"UUID reference to the type of the vote (e.g., upvote, downvote). Optional filter.\n\nCorresponds to discussion_board_votes.vote_type_id."},"thread_id":{"type":"string","format":"uuid","description":"Return votes for a specific thread (optional). UUID.\n\nFrom vote's thread_id schema column."},"post_id":{"type":"string","format":"uuid","description":"Return votes for a specific post (optional). UUID.\n\nFrom vote's post_id schema column."},"comment_id":{"type":"string","format":"uuid","description":"Return votes for a specific comment (optional). UUID.\n\nFrom vote's comment_id schema column."},"created_at":{"type":"string","format":"date-time","description":"Optional filter: timestamp when vote was cast. ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Optional filter: timestamp of last vote update. ISO 8601."},"page":{"type":"integer","format":"int32","description":"Pagination: result page number (optional)."},"limit":{"type":"integer","format":"int32","description":"Maximum results per page (optional)."}},"required":[],"description":"Filter/search parameter object for board vote search. All fields map to discussion_board_votes schema columns. No required field; supply any combination for advanced queries."},"IPageIDiscussionBoardVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the page of discussion board votes. Documents the current page, limit, record count, and page count in accordance with IPage documentation and platform-wide pagination standards."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVote"},"description":"The list of discussion board votes on this page. Each object is a complete discussion board vote entity as defined in the IDiscussionBoardVote schema."}},"required":["pagination","data"],"description":"A paginated set of discussion board votes. Provides both page metadata and an array of discussion board vote objects returned by a search/filter. This type references the underlying IDiscussionBoardVote entity and pagination schema. Used for displaying or transmitting large vote datasets efficiently with UI navigation."},"IDiscussionBoardVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for this vote. Directly references the id field of discussion_board_votes table."},"voter_id":{"type":"string","format":"uuid","description":"The ID of the member who cast the vote. Links to discussion_board_members.id."},"vote_type_id":{"type":"string","format":"uuid","description":"References the vote type for this vote (e.g., upvote, downvote). Links to discussion_board_vote_types.id. Only valid values for types stored in that table."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the vote targets a thread, this is the UUID of that thread (nullable; one of thread_id, post_id, or comment_id must be non-null)."},{"type":"null","format":"uuid","description":"If the vote targets a thread, this is the UUID of that thread (nullable; one of thread_id, post_id, or comment_id must be non-null)."}],"description":"If the vote targets a thread, this is the UUID of that thread (nullable; one of thread_id, post_id, or comment_id must be non-null)."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the vote targets a post, post UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If the vote targets a post, post UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."}],"description":"If the vote targets a post, post UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the vote targets a comment, comment UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If the vote targets a comment, comment UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."}],"description":"If the vote targets a comment, comment UUID. Nullable; only one of thread_id, post_id, or comment_id should be set."},"created_at":{"type":"string","format":"date-time","description":"Timestamp at which this vote was created (ISO 8601 UTC format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this vote was last updated (ISO 8601 UTC format)."}},"required":["id","voter_id","vote_type_id","created_at","updated_at"],"description":"Discussion board vote entity. Each record represents a single voting action (e.g., upvote, downvote) by a member on a thread, post, or comment. Based on discussion_board_votes in the DB. Includes references to the type, actor, and target content, as well as creation and last update timestamps. Exactly matches the DB schema and is used for vote retrieval, list, analytics, and API documentation."},"IDiscussionBoardVote.ICreate":{"type":"object","properties":{"voter_id":{"type":"string","format":"uuid","description":"The member's UUID who is casting the vote. Foreign key to discussion_board_members.id."},"vote_type_id":{"type":"string","format":"uuid","description":"Specifies which type of vote this is (e.g., upvote or downvote). Foreign key to discussion_board_vote_types.id. Must be a valid type id."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the thread being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},{"type":"null","format":"uuid","description":"UUID of the thread being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."}],"description":"UUID of the thread being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the post being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},{"type":"null","format":"uuid","description":"UUID of the post being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."}],"description":"UUID of the post being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."},{"type":"null","format":"uuid","description":"UUID of the comment being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."}],"description":"UUID of the comment being voted on (nullable). Only one of thread_id, post_id, or comment_id should be provided."}},"required":["voter_id","vote_type_id"],"description":"Request body schema for creating a new vote in the discussion board system. Must provide voter_id and vote_type_id, and exactly one of thread_id, post_id, or comment_id (all nullable). References to content must be valid and exist. Used by endpoint to process member voting actions."},"IDiscussionBoardVote.IUpdate":{"type":"object","properties":{"vote_type_id":{"type":"string","format":"uuid","description":"Specifies the updated vote type for this vote (e.g., changing from upvote to downvote). Foreign key to discussion_board_vote_types.id. Must be a valid type id."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"If updating the target thread for a vote, the new thread UUID here (nullable); only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If updating the target thread for a vote, the new thread UUID here (nullable); only one of thread_id, post_id, or comment_id should be set."}],"description":"If updating the target thread for a vote, the new thread UUID here (nullable); only one of thread_id, post_id, or comment_id should be set."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If updating the post a vote applies to, the new post UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If updating the post a vote applies to, the new post UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."}],"description":"If updating the post a vote applies to, the new post UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If updating the comment a vote applies to, the new comment UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."},{"type":"null","format":"uuid","description":"If updating the comment a vote applies to, the new comment UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."}],"description":"If updating the comment a vote applies to, the new comment UUID here (nullable). Only one of thread_id, post_id, or comment_id should be set."}},"required":["vote_type_id"],"description":"Request body for updating an existing vote entity. Only vote_type_id (required) and at most one of the content target ids (thread_id, post_id, comment_id) are accepted. This schema supports corrections to a user's vote (type or target)."},"IEmpty":{"type":"object","properties":{},"description":"An empty object used when no response body is required (e.g., for hard delete endpoints).","required":[]},"IDiscussionBoardTag.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid","description":"The unique identifier for the tag, used for filtering by a specific tag UUID."},{"type":"null","format":"uuid","description":"The unique identifier for the tag, used for filtering by a specific tag UUID."}],"description":"The unique identifier for the tag, used for filtering by a specific tag UUID."},"name":{"oneOf":[{"type":"string","description":"Exact or partial tag name for filtering. Supports full-text and case-insensitive search."},{"type":"null","description":"Exact or partial tag name for filtering. Supports full-text and case-insensitive search."}],"description":"Exact or partial tag name for filtering. Supports full-text and case-insensitive search."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter to tags created at or after this time (ISO 8601 UTC)."},{"type":"null","format":"date-time","description":"Filter to tags created at or after this time (ISO 8601 UTC)."}],"description":"Filter to tags created at or after this time (ISO 8601 UTC)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter to tags created at or before this time (ISO 8601 UTC)."},{"type":"null","format":"date-time","description":"Filter to tags created at or before this time (ISO 8601 UTC)."}],"description":"Filter to tags created at or before this time (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for soft-deleted tags (specify deleted_at for inclusion/exclusion logic)."},{"type":"null","format":"date-time","description":"Filter for soft-deleted tags (specify deleted_at for inclusion/exclusion logic)."}],"description":"Filter for soft-deleted tags (specify deleted_at for inclusion/exclusion logic)."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: the page number, 1-based. Null for first page."},{"type":"null","minimum":1,"description":"Pagination: the page number, 1-based. Null for first page."}],"description":"Pagination: the page number, 1-based. Null for first page."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: maximum number of items per page. Null or omitted for default value."},{"type":"null","minimum":1,"description":"Pagination: maximum number of items per page. Null or omitted for default value."}],"description":"Pagination: maximum number of items per page. Null or omitted for default value."},"sort_field":{"oneOf":[{"type":"string","description":"Field name to sort by (e.g., name, created_at, etc)."},{"type":"null","description":"Field name to sort by (e.g., name, created_at, etc)."}],"description":"Field name to sort by (e.g., name, created_at, etc)."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction: asc (ascending) or desc (descending)."},{"const":"desc","description":"Sort direction: asc (ascending) or desc (descending)."},{"type":"null","enum":["asc","desc"],"description":"Sort direction: asc (ascending) or desc (descending)."}],"description":"Sort direction: asc (ascending) or desc (descending)."}},"description":"Request schema for searching, filtering, and paginating discussion board tags. Only references schema-present fields. Supports filtering by id, name, creation times, deletion status, with paging and sort controls for efficient API queries.","required":[]},"IPageIDiscussionBoardTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata describing page, limit, record, and pages for this tag results page."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTag"},"description":"Array of tag entities matching the query criteria, as defined in the IDiscussionBoardTag schema."}},"required":["pagination","data"],"description":"Paginated results set for discussion board tags. Contains page info and actual tag entities, supporting UI page transitions and API efficiency."},"IDiscussionBoardTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for this tag. Primary key of discussion_board_tags."},"name":{"type":"string","description":"Human-readable tag label, unique per board. Used for filtering/discovery, e.g., 'inflation'."},"description":{"oneOf":[{"type":"string","description":"Optional description of tag purpose (nullable). E.g., 'Discussion about macroeconomic inflation.'"},{"type":"null","description":"Optional description of tag purpose (nullable). E.g., 'Discussion about macroeconomic inflation.'"}],"description":"Optional description of tag purpose (nullable). E.g., 'Discussion about macroeconomic inflation.'"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the tag was created (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"When the tag was last updated (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp; if set, tag is deleted but not removed. Null otherwise."},{"type":"null","format":"date-time","description":"Soft delete timestamp; if set, tag is deleted but not removed. Null otherwise."}],"description":"Soft delete timestamp; if set, tag is deleted but not removed. Null otherwise."}},"required":["id","name","created_at","updated_at"],"description":"Discussion board tag entity. Each record represents a content label (e.g., 'inflation', 'macroeconomics') enabling flexible categorization and discovery. Maps to discussion_board_tags in DB and includes unique tag name, description, and audit timestamps including support for soft deletion."},"IDiscussionBoardTag.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"The label for the new tag. Must be unique and non-null as per schema."},"description":{"oneOf":[{"type":"string","description":"Optional explanatory description for the new tag. If null or omitted, the tag has no description."},{"type":"null","description":"Optional explanatory description for the new tag. If null or omitted, the tag has no description."}],"description":"Optional explanatory description for the new tag. If null or omitted, the tag has no description."}},"required":["name"],"description":"Request body for creating a new tag. Accepts name (required, unique, string) and optional description (nullable string). Used by tag management APIs per discussion_board_tags schema."},"IDiscussionBoardTag.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"New/updated tag label, must be unique and non-null."},"description":{"oneOf":[{"type":"string","description":"New or updated description for the tag (nullable)."},{"type":"null","description":"New or updated description for the tag (nullable)."}],"description":"New or updated description for the tag (nullable)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft delete or restoration; set to now to delete, null to restore/activate."},{"type":"null","format":"date-time","description":"Timestamp for soft delete or restoration; set to now to delete, null to restore/activate."}],"description":"Timestamp for soft delete or restoration; set to now to delete, null to restore/activate."}},"description":"Request body for updating a tag, supporting change of label, description, and soft-delete status. Only includes schema-matching fields. Used for admin/moderation of tag entities.","required":[]},"IDiscussionBoardCategory.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional category UUID for filtering specific categories."},{"type":"null","format":"uuid","description":"Optional category UUID for filtering specific categories."}],"description":"Optional category UUID for filtering specific categories."},"name":{"oneOf":[{"type":"string","description":"Filter to categories whose name matches value (exact or partial case-insensitive string match)."},{"type":"null","description":"Filter to categories whose name matches value (exact or partial case-insensitive string match)."}],"description":"Filter to categories whose name matches value (exact or partial case-insensitive string match)."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for categories created after or at this time (ISO 8601 UTC)."},{"type":"null","format":"date-time","description":"Filter for categories created after or at this time (ISO 8601 UTC)."}],"description":"Filter for categories created after or at this time (ISO 8601 UTC)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter for categories created before or at this time (ISO 8601 UTC)."},{"type":"null","format":"date-time","description":"Filter for categories created before or at this time (ISO 8601 UTC)."}],"description":"Filter for categories created before or at this time (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp; if specified, filters for soft-deleted categories."},{"type":"null","format":"date-time","description":"Soft delete timestamp; if specified, filters for soft-deleted categories."}],"description":"Soft delete timestamp; if specified, filters for soft-deleted categories."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination - the results page to return, starting at 1."},{"type":"null","minimum":1,"description":"Pagination - the results page to return, starting at 1."}],"description":"Pagination - the results page to return, starting at 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Number of categories to return per page."},{"type":"null","minimum":1,"description":"Number of categories to return per page."}],"description":"Number of categories to return per page."},"sort_field":{"oneOf":[{"type":"string","description":"Which field to sort by (e.g., name, created_at)."},{"type":"null","description":"Which field to sort by (e.g., name, created_at)."}],"description":"Which field to sort by (e.g., name, created_at)."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending, 'desc' for descending. Defaults to system's default if not set."},{"const":"desc","description":"Sort direction: 'asc' for ascending, 'desc' for descending. Defaults to system's default if not set."},{"type":"null","enum":["asc","desc"],"description":"Sort direction: 'asc' for ascending, 'desc' for descending. Defaults to system's default if not set."}],"description":"Sort direction: 'asc' for ascending, 'desc' for descending. Defaults to system's default if not set."}},"description":"Request body for searching/filtering discussion board categories. Supports all schema fields as filters, paging, and sort options. Used in category management and browsing APIs.","required":[]},"IPageIDiscussionBoardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for this page of categories. Based on platform-wide page structure."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategory"},"description":"The array of actual discussion board category entities on this page, matching search/filter parameters."}},"required":["pagination","data"],"description":"Paginated result object for category listings. Contains both page metadata and the array of category entities matching filter."},"IDiscussionBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자입니다. 각 토론 게시판 카테고리 레코드를 고유하게 식별합니다. Prisma schema discussion_board_categories.id 컬럼을 참고하세요.\n\n카테고리 관리, 게시글 분류 등에 사용되며, UUID 형식의 문자열입니다."},"name":{"type":"string","description":"카테고리명입니다. UI 및 관리에서 사용자에게 보여질 때 사용됩니다. Prisma schema discussion_board_categories.name 컬럼을 참고하세요.\n\n사이트에 등록된 다른 카테고리들과 중복되지 않으며, 보통 '정치', '경제' 등과 같은 라벨로 사용됩니다."},"description":{"oneOf":[{"type":"string","description":"카테고리 설명입니다. 제공 시, 유저 및 관리자가 카테고리 용도와 범위를 쉽게 이해할 수 있도록 도와줍니다. Prisma schema discussion_board_categories.description 컬럼을 참고.\n\nUI 툴팁/상세정보, 관리자가 카테고리 의미 파악 등에 활용됩니다. 없는 경우 null입니다."},{"type":"null"}],"description":"카테고리 설명입니다. 제공 시, 유저 및 관리자가 카테고리 용도와 범위를 쉽게 이해할 수 있도록 도와줍니다. Prisma schema discussion_board_categories.description 컬럼을 참고.\n\nUI 툴팁/상세정보, 관리자가 카테고리 의미 파악 등에 활용됩니다. 없는 경우 null입니다."},"created_at":{"type":"string","format":"date-time","description":"카테고리 생성 일시입니다. Prisma schema discussion_board_categories.created_at 컬럼을 참고.\n\n관리 도구, 감사로그, 생성순 정렬 등에 사용됩니다. ISO 8601 형식(예시: 2024-07-22T14:17:31.291Z)입니다."},"updated_at":{"type":"string","format":"date-time","description":"카테고리 최종 수정 일시입니다. Prisma schema discussion_board_categories.updated_at 컬럼을 참고.\n\n카테고리 정보가 변경된 시점 추적 및 이력 관리에 활용됩니다."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"카테고리 소프트 삭제(삭제 플래그) 일시입니다. Prisma schema discussion_board_categories.deleted_at 컬럼 참조.\n\nnull이면 정상 데이터, 값이 있으면 삭제 상태(기본적으로 UI에서 숨김 처리). 복구/감사 목적 등으로 활용됩니다."},{"type":"null"}],"description":"카테고리 소프트 삭제(삭제 플래그) 일시입니다. Prisma schema discussion_board_categories.deleted_at 컬럼 참조.\n\nnull이면 정상 데이터, 값이 있으면 삭제 상태(기본적으로 UI에서 숨김 처리). 복구/감사 목적 등으로 활용됩니다."}},"required":["id","name","created_at","updated_at"],"description":"토론 게시판의 카테고리 엔터티이며, 게시글 분류 및 탐색 시 반드시 참조됩니다.\n\nPrisma schema discussion_board_categories 테이블과 1:1로 매핑되며, 각 필드는 해당 스키마의 컬럼을 정확히 반영합니다. 카테고리는 게시판 내의 대표적 분류 구조를 담당하며, 사용자, 게시글, 관리 인터페이스 등 다양한 곳에서 활용됩니다. 작성 시 중복 예방, 설명 관리, 삭제 이력 보존 등 다양한 비즈니스 요구사항을 충족시킵니다."},"IDiscussionBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"생성할 카테고리의 이름(라벨)입니다. Prisma discussion_board_categories.name 컬럼과 동일합니다.\n\n다른 카테고리명과 중복될 수 없으며, UI 및 관리에서 사용자를 위한 분류라벨로 사용됩니다(예: '정치', '법과 정책')."},"description":{"oneOf":[{"type":"string","description":"카테고리 설명입니다. Prisma discussion_board_categories.description 컬럼 기반.\n\n디자인 목적 또는 관리 인터페이스에서 의미전달을 위해 선택적으로 입력됩니다. 없는 경우 null로 처리합니다."},{"type":"null"}],"description":"카테고리 설명입니다. Prisma discussion_board_categories.description 컬럼 기반.\n\n디자인 목적 또는 관리 인터페이스에서 의미전달을 위해 선택적으로 입력됩니다. 없는 경우 null로 처리합니다."}},"required":["name"],"description":"새로운 토론 게시판 카테고리를 생성하기 위한 입력 스키마입니다.\n\nPrisma discussion_board_categories 테이블의 name, description 컬럼을 받아 카테고리 등록에 사용합니다. name 필드는 고유하게 관리되어야 하며, description은 선택적입니다."},"IDiscussionBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"수정할 카테고리의 이름입니다. Prisma discussion_board_categories.name 컬럼에 반영됩니다.\n\n기존 카테고리와의 중복을 허용하지 않습니다."},"description":{"oneOf":[{"type":"string","description":"수정할 카테고리 설명입니다. Prisma discussion_board_categories.description 컬럼에 반영.\n\n설명을 첨부하지 않을 경우 null 전달도 허용합니다."},{"type":"null"}],"description":"수정할 카테고리 설명입니다. Prisma discussion_board_categories.description 컬럼에 반영.\n\n설명을 첨부하지 않을 경우 null 전달도 허용합니다."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"카테고리 소프트 삭제/복구 명령 시 사용하는 삭제 일시입니다. Prisma schema discussion_board_categories.deleted_at 컬럼 참조.\n\n삭제 처리 시 현재 시간(ISO 8601)을 입력하고, 복구 시 null로 재설정합니다."},{"type":"null"}],"description":"카테고리 소프트 삭제/복구 명령 시 사용하는 삭제 일시입니다. Prisma schema discussion_board_categories.deleted_at 컬럼 참조.\n\n삭제 처리 시 현재 시간(ISO 8601)을 입력하고, 복구 시 null로 재설정합니다."}},"description":"토론 게시판 카테고리 수정 요청을 위한 입력 스키마이며, 이름, 설명, 소프트 삭제/복구 여부를 반영합니다.\n\nPrisma discussion_board_categories 테이블의 컬럼을 기반으로 하며, name과 description 수정, deleted_at(소프트 삭제/복구) 관리 용으로 활용합니다.","required":[]},"IDiscussionBoardSearchHistory.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"검색을 실행한 주체의 식별자(게스트, 멤버 등). Prisma discussion_board_search_histories.actor_id 컬럼 참조.\n\n레코드 소유권/권한 체크, 사용자별 히스토리 제공시 활용함."},"keyword":{"type":"string","description":"검색어/키워드. Prisma discussion_board_search_histories.keyword 컬럼과 동일.\n\n검색 수행 시 입력한 텍스트로, 검색 기록 소팅/필터 등에 사용."},"filters":{"oneOf":[{"type":"string","description":"구조적/고급 검색 필터를 직렬화한 문자열(JSON 등). Prisma schema discussion_board_search_histories.filters 컬럼 참조.\n\n예시: '{\"tags\":[\"경제\"],\"기간\":\"2025-07\"}' 등. 미사용 시 null입니다."},{"type":"null"}],"description":"구조적/고급 검색 필터를 직렬화한 문자열(JSON 등). Prisma schema discussion_board_search_histories.filters 컬럼 참조.\n\n예시: '{\"tags\":[\"경제\"],\"기간\":\"2025-07\"}' 등. 미사용 시 null입니다."},"search_context":{"oneOf":[{"type":"string","description":"검색이 수행된 위치/컨텍스트. Prisma schema discussion_board_search_histories.search_context 컬럼(예: thread_list, homepage 등).\n\n검색 UI 위치 분석, 화면별 통계 등에 활용됩니다."},{"type":"null"}],"description":"검색이 수행된 위치/컨텍스트. Prisma schema discussion_board_search_histories.search_context 컬럼(예: thread_list, homepage 등).\n\n검색 UI 위치 분석, 화면별 통계 등에 활용됩니다."},"created_at":{"type":"string","format":"date-time","description":"검색 수행 시각. Prisma schema discussion_board_search_histories.created_at와 매핑됨.\n\n기록 정렬, 통계, 행위 분석 등에 필요합니다."}},"description":"토론 게시판 내 검색 이력 조회 시 사용할 필터/페이징/정렬용 입력 스키마입니다.\n\n각 속성은 Prisma discussion_board_search_histories 컬럼에 기반하며, 주로 대량 검색 이력 조회 및 분석, 관리자 감사 등에 활용합니다.","required":[]},"IPageIDiscussionBoardSearchHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보를 담으며, 페이징 조회 시 현재 페이지 등 기록.\n\nIPage.IPagination 타입 구조를 참조."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSearchHistory"},"description":"현재 페이지에 해당하는 검색 이력 레코드 배열.\n\n각 요소는 IDiscussionBoardSearchHistory 타입으로 반영."}},"required":["pagination","data"],"description":"검색 이력 조회의 페이지네이션 컨테이너이며, 데이터 배열과 페이지 정보가 결합된 구조입니다.\n\nIPage<T> 공식 규약을 따르며, data는 검색 이력 객체의 배열, pagination은 페이징 정보입니다."},"IDiscussionBoardSearchHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"각 검색 이력 레코드의 고유 식별자(UUID). Prisma discussion_board_search_histories.id 참조.\n\n검색 이력의 고유성을 보장하며, 검색 이력 상세조회/수정 등에 활용합니다."},"actor_id":{"type":"string","format":"uuid","description":"검색을 실행한 주체(게스트, 멤버, 관리자 등)의 식별자. Prisma discussion_board_search_histories.actor_id 컬럼 기반.\n\n로그 추적, 검색 분석, 사용자별 히스토리 제공 등에 활용."},"keyword":{"type":"string","description":"입력한 검색어(키워드). Prisma discussion_board_search_histories.keyword 컬럼 기반.\n\n필수 입력값으로, 검색어 기록 및 추천 엔진 등에 활용."},"filters":{"oneOf":[{"type":"string","description":"직렬화된 검색 필터(옵션). Prisma discussion_board_search_histories.filters 컬럼 기반.\n\n사용 예시: 태그, 날짜, 정렬 등 고급 옵션의 JSON 문자열. 없으면 null."},{"type":"null"}],"description":"직렬화된 검색 필터(옵션). Prisma discussion_board_search_histories.filters 컬럼 기반.\n\n사용 예시: 태그, 날짜, 정렬 등 고급 옵션의 JSON 문자열. 없으면 null."},"search_context":{"oneOf":[{"type":"string","description":"검색 실행 UI 컨텍스트. Prisma discussion_board_search_histories.search_context 기반.\n\n검색이 실행된 위치(예: thread_list, homepage 등)의 기록. 없는 경우 null."},{"type":"null"}],"description":"검색 실행 UI 컨텍스트. Prisma discussion_board_search_histories.search_context 기반.\n\n검색이 실행된 위치(예: thread_list, homepage 등)의 기록. 없는 경우 null."},"created_at":{"type":"string","format":"date-time","description":"검색 실행 시각. Prisma discussion_board_search_histories.created_at 컬럼 기반.\n\n감사, 행동 분석, 순차 정렬 등에 사용."}},"required":["id","actor_id","keyword","created_at"],"description":"토론 게시판에서 실행된 검색 이력 레코드의 메인 타입입니다.\n\n각 속성은 discussion_board_search_histories 테이블의 컬럼과 1:1 매핑되며, 이력관리를 위한 감사, 추천, 사용자별 검색 분석 등에 폭넓게 활용됩니다."},"IDiscussionBoardSearchHistory.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"검색을 수행한 주체의 ID(UUID); 게스트, 멤버 등. Prisma search_histories.actor_id 컬럼과 동일.\n\n로그추적/권한체크/사용자 추천 등에 필요."},"keyword":{"type":"string","description":"입력한 검색 텍스트(필수). Prisma search_histories.keyword 컬럼 참조.\n\n검색 실행 시 입력값 그대로 저장."},"filters":{"oneOf":[{"type":"string","description":"JSON 등으로 직렬화된 고급검색 필터. Prisma search_histories.filters 컬럼 기반.\n\n없으면 null, 예: {\"tags\":[],\"기간\":\"2025-07\"}."},{"type":"null"}],"description":"JSON 등으로 직렬화된 고급검색 필터. Prisma search_histories.filters 컬럼 기반.\n\n없으면 null, 예: {\"tags\":[],\"기간\":\"2025-07\"}."},"search_context":{"oneOf":[{"type":"string","description":"검색 수행 위치/화면 등을 알려주는 컨텍스트 문자열. Prisma search_histories.search_context 컬럼 참조.\n\n메인화면, 상세화면, 관리자 등 구분하며 null 허용."},{"type":"null"}],"description":"검색 수행 위치/화면 등을 알려주는 컨텍스트 문자열. Prisma search_histories.search_context 컬럼 참조.\n\n메인화면, 상세화면, 관리자 등 구분하며 null 허용."}},"required":["actor_id","keyword"],"description":"토론 게시판 검색 이력 등록 시 제출하는 요청 스키마입니다.\n\n필수 필드(router, 게스트/멤버 id, 검색어)를 요구하며, 고급 필터 및 컨텍스트는 선택사항입니다."},"IDiscussionBoardSearchHistory.IUpdate":{"type":"object","properties":{"keyword":{"type":"string","description":"수정하려는 검색어 텍스트. Prisma search_histories.keyword 컬럼에 반영.\n\n검색어 정정 및 재분류 목적 등으로 사용."},"filters":{"oneOf":[{"type":"string","description":"수정될 고급검색 옵션(JSON 직렬화). Prisma search_histories.filters 컬럼 기반.\n\nnull 지정 가능, 기존 필터 제외하고 단순검색만 남기고 싶을 때 등."},{"type":"null"}],"description":"수정될 고급검색 옵션(JSON 직렬화). Prisma search_histories.filters 컬럼 기반.\n\nnull 지정 가능, 기존 필터 제외하고 단순검색만 남기고 싶을 때 등."},"search_context":{"oneOf":[{"type":"string","description":"검색을 수행한 컨텍스트의 변경값. Prisma search_histories.search_context 컬럼 기준.\n\n검색 위치 변경 등 용도로 사용, null 입력시 기존 값 삭제."},{"type":"null"}],"description":"검색을 수행한 컨텍스트의 변경값. Prisma search_histories.search_context 컬럼 기준.\n\n검색 위치 변경 등 용도로 사용, null 입력시 기존 값 삭제."}},"description":"토론 게시판 검색 이력의 수정용 입력 타입.\n\n검색어, 고급검색 필터, context 등의 값 수정에 사용하며, actor_id 또는 created_at 등 기본 정보는 불변입니다.","required":[]}},"authorization":[{"name":"guest","description":"Unauthenticated user who can browse public discussion topics and view threads, but cannot post or interact."},{"name":"member","description":"Registered user who can participate in discussions, create posts, comment, and vote on content."},{"name":"moderator","description":"User with elevated privileges to manage content, oversee discussions, moderate posts and comments, and enforce community guidelines."},{"name":"administrator","description":"User with full system control, including user management, site settings, moderator oversight, and policy enforcement."}]}},"created_at":"2025-07-23T06:52:12.803Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":1229389,"input":{"total":1138065,"cached":3840},"output":{"total":91324,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1229389,"input":{"total":1138065,"cached":3840},"output":{"total":91324,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1229389,"input":{"total":1138065,"cached":3840},"output":{"total":91324,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1229389,"input":{"total":1138065,"cached":3840},"output":{"total":91324,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}}]