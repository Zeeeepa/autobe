[{"event":{"type":"interfaceStart","created_at":"2025-07-28T08:29:47.758Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceEndpoints","endpoints":[{"path":"/discussion_board/configurations","method":"patch"},{"path":"/discussion_board/configurations/{id}","method":"get"},{"path":"/admin/discussion_board/configurations","method":"post"},{"path":"/admin/discussion_board/configurations/{id}","method":"put"},{"path":"/admin/discussion_board/configurations/{id}","method":"delete"},{"path":"/discussion_board/categories","method":"patch"},{"path":"/discussion_board/categories/{id}","method":"get"},{"path":"/admin/discussion_board/categories","method":"post"},{"path":"/admin/discussion_board/categories/{id}","method":"put"},{"path":"/admin/discussion_board/categories/{id}","method":"delete"},{"path":"/admin/discussion_board/categoryPermissions","method":"post"},{"path":"/admin/discussion_board/categoryPermissions","method":"patch"},{"path":"/admin/discussion_board/categoryPermissions/{id}","method":"get"},{"path":"/admin/discussion_board/categoryPermissions/{id}","method":"put"},{"path":"/admin/discussion_board/categoryPermissions/{id}","method":"delete"},{"path":"/discussion_board/userProfiles","method":"patch"},{"path":"/discussion_board/userProfiles/{id}","method":"get"},{"path":"/admin/discussion_board/userProfiles","method":"post"},{"path":"/admin/discussion_board/userProfiles/{id}","method":"put"},{"path":"/admin/discussion_board/userProfiles/{id}","method":"delete"},{"path":"/admin/discussion_board/admins","method":"post"},{"path":"/admin/discussion_board/admins","method":"patch"},{"path":"/admin/discussion_board/admins/{id}","method":"get"},{"path":"/admin/discussion_board/admins/{id}","method":"put"},{"path":"/admin/discussion_board/admins/{id}","method":"delete"},{"path":"/admin/discussion_board/moderators","method":"post"},{"path":"/admin/discussion_board/moderators","method":"patch"},{"path":"/admin/discussion_board/moderators/{id}","method":"get"},{"path":"/admin/discussion_board/moderators/{id}","method":"put"},{"path":"/admin/discussion_board/moderators/{id}","method":"delete"},{"path":"/discussion_board/members","method":"patch"},{"path":"/discussion_board/members/{id}","method":"get"},{"path":"/admin/discussion_board/members","method":"post"},{"path":"/admin/discussion_board/members/{id}","method":"put"},{"path":"/admin/discussion_board/members/{id}","method":"delete"},{"path":"/discussion_board/guests","method":"patch"},{"path":"/discussion_board/guests/{id}","method":"get"},{"path":"/my/discussion_board/guests","method":"post"},{"path":"/my/discussion_board/guests/{id}","method":"delete"},{"path":"/admin/discussion_board/roleChanges","method":"post"},{"path":"/admin/discussion_board/roleChanges","method":"patch"},{"path":"/admin/discussion_board/roleChanges/{id}","method":"get"},{"path":"/discussion_board/topics","method":"patch"},{"path":"/discussion_board/topics/{id}","method":"get"},{"path":"/my/discussion_board/topics","method":"post"},{"path":"/my/discussion_board/topics/{id}","method":"put"},{"path":"/my/discussion_board/topics/{id}","method":"delete"},{"path":"/discussion_board/topicSnapshots","method":"patch"},{"path":"/discussion_board/topicSnapshots/{id}","method":"get"},{"path":"/discussion_board/topicSubscriptions","method":"patch"},{"path":"/discussion_board/topicSubscriptions/{id}","method":"get"},{"path":"/my/discussion_board/topicSubscriptions","method":"post"},{"path":"/my/discussion_board/topicSubscriptions/{id}","method":"put"},{"path":"/my/discussion_board/topicSubscriptions/{id}","method":"delete"},{"path":"/discussion_board/posts","method":"patch"},{"path":"/discussion_board/posts/{id}","method":"get"},{"path":"/my/discussion_board/posts","method":"post"},{"path":"/my/discussion_board/posts/{id}","method":"put"},{"path":"/my/discussion_board/posts/{id}","method":"delete"},{"path":"/discussion_board/postSnapshots","method":"patch"},{"path":"/discussion_board/postSnapshots/{id}","method":"get"},{"path":"/discussion_board/comments","method":"patch"},{"path":"/discussion_board/comments/{id}","method":"get"},{"path":"/my/discussion_board/comments","method":"post"},{"path":"/my/discussion_board/comments/{id}","method":"put"},{"path":"/my/discussion_board/comments/{id}","method":"delete"},{"path":"/discussion_board/postAttachments","method":"patch"},{"path":"/discussion_board/postAttachments/{id}","method":"get"},{"path":"/my/discussion_board/postAttachments","method":"post"},{"path":"/my/discussion_board/postAttachments/{id}","method":"put"},{"path":"/my/discussion_board/postAttachments/{id}","method":"delete"},{"path":"/discussion_board/postLikes","method":"patch"},{"path":"/discussion_board/postLikes/{id}","method":"get"},{"path":"/my/discussion_board/postLikes","method":"post"},{"path":"/my/discussion_board/postLikes/{id}","method":"put"},{"path":"/my/discussion_board/postLikes/{id}","method":"delete"},{"path":"/discussion_board/reports","method":"patch"},{"path":"/discussion_board/reports/{id}","method":"get"},{"path":"/my/discussion_board/reports","method":"post"},{"path":"/admin/discussion_board/reports/{id}","method":"put"},{"path":"/admin/discussion_board/reports/{id}","method":"delete"},{"path":"/discussion_board/reportReasons","method":"patch"},{"path":"/discussion_board/reportReasons/{id}","method":"get"},{"path":"/admin/discussion_board/reportReasons","method":"post"},{"path":"/admin/discussion_board/reportReasons/{id}","method":"put"},{"path":"/admin/discussion_board/reportReasons/{id}","method":"delete"},{"path":"/admin/discussion_board/reportActions","method":"post"},{"path":"/admin/discussion_board/reportActions","method":"patch"},{"path":"/admin/discussion_board/reportActions/{id}","method":"get"},{"path":"/admin/discussion_board/moderationLogs","method":"post"},{"path":"/admin/discussion_board/moderationLogs","method":"patch"},{"path":"/admin/discussion_board/moderationLogs/{id}","method":"get"},{"path":"/admin/discussion_board/flaggedContent","method":"post"},{"path":"/admin/discussion_board/flaggedContent","method":"patch"},{"path":"/admin/discussion_board/flaggedContent/{id}","method":"get"},{"path":"/discussion_board/notifications","method":"patch"},{"path":"/discussion_board/notifications/{id}","method":"get"},{"path":"/my/discussion_board/notifications","method":"post"},{"path":"/my/discussion_board/notifications/{id}","method":"put"},{"path":"/my/discussion_board/notifications/{id}","method":"delete"},{"path":"/my/discussion_board/userNotificationSettings","method":"post"},{"path":"/my/discussion_board/userNotificationSettings","method":"patch"},{"path":"/my/discussion_board/userNotificationSettings/{id}","method":"get"},{"path":"/my/discussion_board/userNotificationSettings/{id}","method":"put"},{"path":"/my/discussion_board/userNotificationSettings/{id}","method":"delete"},{"path":"/admin/discussion_board/auditTrails","method":"post"},{"path":"/admin/discussion_board/auditTrails","method":"patch"},{"path":"/admin/discussion_board/auditTrails/{id}","method":"get"},{"path":"/admin/discussion_board/actionHistories","method":"post"},{"path":"/admin/discussion_board/actionHistories","method":"patch"},{"path":"/admin/discussion_board/actionHistories/{id}","method":"get"}],"created_at":"2025-07-28T08:29:47.759Z","step":0},"tokenUsage":{"facade":{"aggregate":{"total":35852,"input":{"total":34146,"cached":0},"output":{"total":1706,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":35852,"input":{"total":34146,"cached":0},"output":{"total":1706,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":35852,"input":{"total":34146,"cached":0},"output":{"total":1706,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":35852,"input":{"total":34146,"cached":0},"output":{"total":1706,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new action history record for audit/behavior analytics in the discussion board. This operation allows an admin to log a user-level action, such as a moderation intervention, user behavior, or significant non-sensitive contribution event. It supports platform transparency and enables future analytics of moderator/admin/member activity. This endpoint must use only the fields defined in the 'discussion_board_action_histories' table (such as id, actor_id, action_type, target_table, target_id, summary, occurred_at), and MUST NOT reference non-existent fields. Each action must be atomic and linked to the user profile and the affected entity.","description":"This API operation allows an administrator to record a new action history entry within the discussion board system. The purpose is to create a chronological, user-level log representing non-sensitive actions, supporting analytics, usability tracking, and dispute resolution. The payload must only reference fields present in the Prisma schema: id (auto-generated), actor_id (user profile ID of initiator), action_type (nature of user action, e.g., 'post_created'), target_table (the logical DB entity affected), target_id (UUID of the target record), summary (optional brief text), and occurred_at (timestamp).\n\nSecurity: Only admin users are permitted to call this endpoint. The operation must not permit fields not listed in the Prisma schema—DO NOT reference or invent properties such as deleted_at or updated_by. If a request is missing a required field, the API must reject the request.\n\nBusiness logic: Each action must be atomic (one entry per real-world event) and auditable, supporting later analysis. This endpoint is part of a comprehensive logging and analytics suite for system administrators. No soft or hard delete applies to this entity. Related endpoints include PATCH for search and GET for details.","summary":"Create a discussion_board_action_histories entry (admin only).","parameters":[],"requestBody":{"description":"Information required to create a new action history record. All fields must exist in the Prisma schema.","typeName":"Idiscussion_board_action_histories.ICreate"},"responseBody":{"description":"Action history record as created, matching the Prisma schema fields.","typeName":"Idiscussion_board_action_histories"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/actionHistories","method":"post"},{"specification":"Search or filter the action histories in the discussion board for analytics, compliance, or moderation traceability. The endpoint provides paginated, filterable access to the discussion_board_action_histories entity. Query parameters and body structure must only use fields found in the 'discussion_board_action_histories' schema, such as actor_id, action_type, target_table, target_id, summary, occurred_at. No references to non-existent fields like deleted_at or updated_by are permitted. This operation supports the operational needs of admins to monitor usage and investigate incidents. Only admin role is authorized.","description":"This API operation enables administrators to retrieve a filtered, optionally paginated list of user action histories for the discussion board. It is used to audit user contributions, moderator actions, and system behavior for compliance and analytics. Supported query parameters and filters must include only those present in the 'discussion_board_action_histories' table schema, such as actor_id (user profile responsible), action_type (e.g., 'report_submitted'), target_table (affected business object), target_id (UUID), summary (optional text), and occurred_at (timestamp range). No reference to deleted_at or similar fields should occur.\n\nThe list result may be paginated and sorted based on schema fields. Only users with the admin role may invoke this operation. This endpoint supports analytic dashboards, compliance inquiries, and dispute investigation scenarios. It complements the POST (create action log) and GET (details) endpoints for this entity.","summary":"List or search discussion_board_action_histories (admin only).","parameters":[],"requestBody":{"description":"Search and pagination filter for action history records. Only fields present in the Prisma schema may be used in the filter.","typeName":"Idiscussion_board_action_histories.IRequest"},"responseBody":{"description":"Paginated/filtered list of action history records matching criteria.","typeName":"IPageIdiscussion_board_action_histories"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/actionHistories","method":"patch"},{"specification":"Retrieve the detailed information for a single action history record for audit or compliance purposes. The endpoint returns only the fields existing on the 'discussion_board_action_histories' table. The resource is uniquely identified by its id. Only administrators can access this endpoint for full system audit traceability.","description":"This API operation allows an administrator to fetch detailed information about a specific action history entry, identified by its unique id. All fields in the response must exist within the Prisma schema for 'discussion_board_action_histories', such as id, actor_id, action_type, target_table, target_id, summary, and occurred_at. No additional or derived fields are permitted in the result.\n\nThe endpoint is authorized for admin users only, fulfilling the need for traceable system actions and incident investigation. This operation strictly forbids referencing non-existent schema fields (such as deleted_at or created_by). If the id does not exist, a suitable error is returned. This detail endpoint should be used in conjunction with the list/search (PATCH) and creation (POST) endpoints.","summary":"Retrieve details for a discussion_board_action_histories entry (admin only).","parameters":[{"name":"id","description":"ID of the action history entry to retrieve (must be a UUID as per Prisma schema PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the action history record as stored in the database.","typeName":"Idiscussion_board_action_histories"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/actionHistories/{id}","method":"get"}],"completed":3,"total":111,"step":0,"created_at":"2025-07-28T08:30:24.966Z"},"tokenUsage":{"facade":{"aggregate":{"total":74912,"input":{"total":71975,"cached":0},"output":{"total":2937,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":74912,"input":{"total":71975,"cached":0},"output":{"total":2937,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":74912,"input":{"total":71975,"cached":0},"output":{"total":2937,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":74912,"input":{"total":71975,"cached":0},"output":{"total":2937,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Get a single notification by its ID from the discussion_board_notifications table. The ID must correspond to a valid notification (UUID). Response will include all available fields for a notification: id, recipient_user_id, type, content, is_read, delivered_at, and optionally read_at. This endpoint enables users or system roles to fetch all details of a specific notification for auditing or display purposes.","description":"This API operation retrieves a single notification by its unique ID from the discussion_board_notifications table. The notification contains information about the recipient_user_id (who received it), notification type (such as 'new_reply', 'report_update', or 'moderator_action'), the notification content (message body), read status (is_read), when it was delivered (delivered_at), and, if applicable, when it was read (read_at).\n\nOnly fields that exist in the Prisma schema are returned. If the ID does not exist, an appropriate 404 or error response should be returned. No fields like 'deleted_at' or 'created_by' are present or referenced, per schema. This function is typically used by users viewing an individual notification or by staff for audit purposes.","summary":"Retrieve a notification by ID from discussion_board_notifications table.","parameters":[{"name":"id","description":"ID of the notification to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification details as stored in discussion_board_notifications table.","typeName":"IDiscussionBoardNotification"},"authorizationRole":null,"name":"at","path":"/discussion_board/notifications/{id}","method":"get"},{"specification":"Create a new notification entry for the authenticated user in the discussion_board_notifications table. Required properties: recipient_user_id (UUID of the authenticated user or member), notification type, content, delivered_at, and is_read flag. Optional: read_at may be null. Used when the system or other users send notifications to members.","description":"This API operation allows an authenticated user (themselves) or the system to create a new notification in the discussion_board_notifications table. Every notification must have a recipient_user_id corresponding to the member/role, a type (such as 'new_reply', 'report_update'), content (message string), and delivered_at timestamp. The is_read flag indicates whether the notification has been seen by the user at the time of creation (typically false on create). Optionally, read_at may be null until the notification is marked as read. No fields like 'created_by', 'deleted_at', or 'updated_by' are included, per schema. If the record is created successfully, the full notification record is returned.","summary":"Create a new notification for the authenticated user in discussion_board_notifications.","parameters":[],"requestBody":{"description":"Notification creation info following discussion_board_notifications schema.","typeName":"IDiscussionBoardNotification.ICreate"},"responseBody":{"description":"New notification record as stored in discussion_board_notifications table.","typeName":"IDiscussionBoardNotification"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/notifications","method":"post"},{"specification":"Update an existing notification entry for the authenticated user in the discussion_board_notifications table. Allows updating only permissible fields such as is_read status and optionally read_at (timestamp). The ID must correspond to an existing notification for the user.","description":"This API operation lets an authenticated user update select fields of their own notification, as recorded in the discussion_board_notifications table. Updatable fields are is_read (mark as read/unread) and optionally read_at timestamp. Only allowed fields which exist in the schema can be changed. No fields like 'deleted_at', 'updated_by' are present or handled. Attempting to update non-existent or unauthorized notifications should yield an error. Returns the updated notification record.","summary":"Update a notification for the authenticated user.","parameters":[{"name":"id","description":"ID of the notification to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update (primarily is_read and read_at) following schema.","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"The updated notification record.","typeName":"IDiscussionBoardNotification"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/notifications/{id}","method":"put"},{"specification":"Delete a notification by ID for the authenticated user from the discussion_board_notifications table. As there is no soft delete indicator for notifications, this operation performs a hard delete (permanently removes the record).","description":"This API operation deletes a notification for the authenticated user by its ID from the discussion_board_notifications table. Because there is no is_deleted or deleted_at field in the notification schema, the operation removes the record permanently (hard delete). Attempting to delete a notification that does not exist or does not belong to the authenticated user should result in an error or 404 response. The operation should confirm successful deletion or indicate failure appropriately.","summary":"Permanently delete a notification for the authenticated user.","parameters":[{"name":"id","description":"ID of the notification to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/notifications/{id}","method":"delete"},{"specification":"Create notification settings for the authenticated user in the discussion_board_user_notification_settings table. Required fields include user_id (UUID of authenticated member), settings flags for receive_email_notifications, receive_push_notifications, and mute_types (optional string or null).","description":"This endpoint allows an authenticated user to create a notification settings record in the discussion_board_user_notification_settings table. The settings allow the user to specify if they wish to receive email notifications, push notifications, and which notification types to mute using a comma-separated list (or null for no mutes). Each user has only one notification settings record; attempting to create more than one must be prevented according to the unique constraint on user_id. No fields like 'deleted_at', 'created_by' exist. Successful requests return the saved settings.","summary":"Create notification settings for the authenticated user.","parameters":[],"requestBody":{"description":"Notification setting creation info following schema.","typeName":"IDiscussionBoardUserNotificationSettings.ICreate"},"responseBody":{"description":"Created notification settings record.","typeName":"IDiscussionBoardUserNotificationSettings"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/userNotificationSettings","method":"post"},{"specification":"Retrieve and search authenticated user's notification settings (typically only one record, by user_id) from the discussion_board_user_notification_settings table. Search supports filtering by receive_email_notifications, receive_push_notifications, and mute_types as required.","description":"This API operation retrieves (with optional filtering/search) the notification settings entry for the authenticated user from the discussion_board_user_notification_settings table. The response includes user_id (referencing the user's member record) and settings fields: receive_email_notifications, receive_push_notifications, and mute_types (nullable). As each user can have only one settings record, the result is either one or none. No fields like 'deleted_at' exist. Returns the settings, or empty if not configured yet.","summary":"Get current notification settings for the authenticated user.","parameters":[],"requestBody":{"description":"Optional search/filter fields for notification settings.","typeName":"IDiscussionBoardUserNotificationSettings.IRequest"},"responseBody":{"description":"User's notification settings record or empty if not set.","typeName":"IDiscussionBoardUserNotificationSettings"},"authorizationRole":"member","name":"index","path":"/my/discussion_board/userNotificationSettings","method":"patch"},{"specification":"Get a specific notification settings record by its ID (UUID) from the discussion_board_user_notification_settings table for the authenticated user. Returns all fields from the corresponding schema.","description":"This endpoint retrieves a user's notification settings by ID (UUID) from the discussion_board_user_notification_settings table. The record contains user_id, receive_email_notifications, receive_push_notifications, and mute_types. If the ID does not exist or does not belong to the authenticated user, a 404 or error is returned. Only fields present in the schema are referenced—no 'deleted' or 'created_by'.","summary":"Retrieve notification settings by ID for the authenticated user.","parameters":[{"name":"id","description":"ID of the notification settings record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The notification settings record for the given ID.","typeName":"IDiscussionBoardUserNotificationSettings"},"authorizationRole":"member","name":"at","path":"/my/discussion_board/userNotificationSettings/{id}","method":"get"},{"specification":"Update (edit) a notification settings record for the authenticated user by ID in the discussion_board_user_notification_settings table. Allows changing notification preferences, including receive_email_notifications, receive_push_notifications, and mute_types (nullable string). The ID must reference a valid record for the active user.","description":"This API operation updates the notification settings for the authenticated user in the discussion_board_user_notification_settings table. Editable fields include receive_email_notifications, receive_push_notifications, and mute_types. There is no field for is_deleted—update simply replaces the values for the specified fields as per the schema. Only one settings record exists per user (enforced by the schema). Attempting to update a non-existent or unauthorized record yields an error. Success returns the updated record.","summary":"Update notification settings for the authenticated user by ID.","parameters":[{"name":"id","description":"ID of the notification settings record to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update following schema (settings preferences).","typeName":"IDiscussionBoardUserNotificationSettings.IUpdate"},"responseBody":{"description":"The updated notification settings record.","typeName":"IDiscussionBoardUserNotificationSettings"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/userNotificationSettings/{id}","method":"put"},{"specification":"Delete a notification settings record for the authenticated user by ID from the discussion_board_user_notification_settings table. As there is no soft delete field, deletion is permanent (hard delete).","description":"This endpoint deletes a notification settings record for the authenticated user in the discussion_board_user_notification_settings table by its ID. With no soft delete field, the operation removes the record permanently (hard delete). Will error if the ID does not exist or does not belong to the active user. Confirmation or error is returned, as appropriate.","summary":"Delete user's notification settings record by ID (hard delete, permanent).","parameters":[{"name":"id","description":"ID of the notification settings record to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/userNotificationSettings/{id}","method":"delete"},{"specification":"Create a new audit trail log entry in the discussion_board_audit_trails table. Required: actor_id, action_type, target_table, target_id, details (optional), and created_at (timestamp). This endpoint should only be accessible by admin for security, auditing, and compliance purposes.","description":"This API operation allows an admin to create a new audit trail log entry in the discussion_board_audit_trails table. Each entry records which user performed the action (actor_id), what kind of action (action_type), which table/entity the action affected (target_table), the unique ID of the affected record (target_id), optional details field (context description), and the timestamp of creation (created_at). There are no soft/hard delete fields—entries are immutable by schema. This endpoint enforces traceable and auditable change logging for key system events by admin.","summary":"Admin: create an audit trail entry in discussion_board_audit_trails.","parameters":[],"requestBody":{"description":"Information to create audit trail log per schema.","typeName":"IDiscussionBoardAuditTrail.ICreate"},"responseBody":{"description":"Created audit trail entry.","typeName":"IDiscussionBoardAuditTrail"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/auditTrails","method":"post"},{"specification":"Retrieve (with optional search/filter) multiple audit trail log entries from the discussion_board_audit_trails table, accessible only to admin role. Supports pagination, filtering, and ordering as needed for reviewing system actions and user accountability logs.","description":"This API operation allows admin users to list, search, and filter audit trail entries from the discussion_board_audit_trails table. Filters may include actor_id, action_type, target_table, target_id, date ranges, and details string. The response includes all available columns: id, actor_id, action_type, target_table, target_id, details, created_at. There are no soft/hard delete or status fields. If pagination is implemented, the request uses the appropriate fields per schema. This audits, reviews, or investigates activities for security/compliance.","summary":"Admin: search and list audit trail log entries.","parameters":[],"requestBody":{"description":"Query/search parameters for audit trail records.","typeName":"IDiscussionBoardAuditTrail.IRequest"},"responseBody":{"description":"List of audit trail entries matching the search parameters.","typeName":"IPageIDiscussionBoardAuditTrail"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/auditTrails","method":"patch"},{"specification":"Get a single audit trail entry by its ID from the discussion_board_audit_trails table. Admin-only. Returns full details as stored in schema. No soft/hard delete fields are present—record is immutable and always returned if it exists.","description":"This API operation allows an admin to view a single audit trail entry by its unique ID, per record in the discussion_board_audit_trails table. Provides all fields: id, actor_id, action_type, target_table, target_id, details, created_at. No fields like deleted_at or created_by exist per Prisma schema—it strictly matches schema contents. If record does not exist, returns 404 or error.","summary":"Admin: retrieve audit trail entry by ID.","parameters":[{"name":"id","description":"ID of the audit trail record to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single audit trail entry with all fields.","typeName":"IDiscussionBoardAuditTrail"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/auditTrails/{id}","method":"get"}],"completed":15,"total":111,"step":0,"created_at":"2025-07-28T08:30:28.041Z"},"tokenUsage":{"facade":{"aggregate":{"total":116016,"input":{"total":110029,"cached":0},"output":{"total":5987,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":116016,"input":{"total":110029,"cached":0},"output":{"total":5987,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":116016,"input":{"total":110029,"cached":0},"output":{"total":5987,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":116016,"input":{"total":110029,"cached":0},"output":{"total":5987,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Retrieve a single category permission record for the discussion board by its unique identifier. This operation is for administrative use, allowing admins to fetch permissions related to a specific category role mapping. The discussion_board_category_permissions table includes id, category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report, and created_at fields. The admin accesses this endpoint to inspect or audit the role-level permissions for a given category. Only fields present in the schema are returned.","description":"This API operation retrieves a specific category permission entry from the discussion_board_category_permissions table using its unique id. It is intended for use by admin users to audit or review which permissions (can_view, can_create_topic, can_reply, can_like, can_report) are associated with a given role for a specific category. This endpoint directly maps to a single row retrieval by primary key (id). There is no soft deletion or ownership field in the schema; the operation simply returns the current state of the permission set. Administrators may use this operation in conjunction with audit or permission management workflows to verify role-control configuration. Requesting this endpoint will return all actual columns for the entry: id, category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report, and created_at. Errors will be returned if the id is not found.","summary":"Admin retrieves a category permission by id from discussion_board_category_permissions table.","parameters":[{"name":"id","description":"Unique identifier of the category permission to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Category permission entry for the specified id.","typeName":"IDiscussionBoardCategoryPermission"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/categoryPermissions/{id}","method":"get"},{"specification":"Update a category permission record for the discussion board by its unique identifier as an admin. This endpoint allows modification of the permission flags for a role within a specific category. The discussion_board_category_permissions table contains fields: id, category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report, created_at. Only admin users are authorized. The operation requires a request body containing the updated values for allowed fields, referencing only existing columns. No soft delete or ownership logic applies. All business logic must correspond exactly to the schema.","description":"Allows an admin to update an existing category permission record in the discussion_board_category_permissions table, identified by its id. The endpoint expects a request body with updated values for one or more of the following fields: category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report. The operation will not reference or update any fields not present in the schema. It is an admin-only operation, ensuring appropriate authorization. Input validation must verify UUIDs for id and category_id, plus only permit changes to defined fields. This operation is a full update according to the schema, with error returned if the id does not exist.","summary":"Admin updates a category permission record by id in discussion_board_category_permissions table.","parameters":[{"name":"id","description":"Unique identifier of the category permission to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the category permission record. Only schema-defined fields are accepted.","typeName":"IDiscussionBoardCategoryPermission.IUpdate"},"responseBody":{"description":"Updated category permission entry.","typeName":"IDiscussionBoardCategoryPermission"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/categoryPermissions/{id}","method":"put"},{"specification":"Delete a category permission record for the discussion board by its unique identifier as an admin. The discussion_board_category_permissions entity does NOT have a soft delete flag or deleted_at—this will be a hard delete operation. All data will be permanently removed from the table upon successful completion. Only admin users are authorized to perform this action. The operation simply accesses the id as primary key, verifies existence, and removes the record.","description":"This admin-only endpoint performs a hard delete of a category permission record from the discussion_board_category_permissions table. Since there is no soft delete field present in the Prisma schema, invoking this endpoint will permanently remove the category permission entry identified by the given id. This operation is used for permission management when an admin needs to eliminate obsolete or incorrect permission mappings. Attempting to delete a record that does not exist returns an error. No cascading deletes are done beyond the schema-defined logic.","summary":"Admin permanently deletes a category permission record by id (hard delete).","parameters":[{"name":"id","description":"Unique identifier of the category permission to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/categoryPermissions/{id}","method":"delete"},{"specification":"Get a filtered, paginated list of user profiles in the discussion board. The discussion_board_user_profiles table contains id, email, display_name, registered_at, is_active. This is a search endpoint for admins and other authorized staff, supporting pagination, search by display_name/email, filtering by is_active. No soft delete logic—records are only filtered by provided search and status criteria.","description":"This API operation returns a paginated list of user profiles from the discussion_board_user_profiles table. The returned fields include id, email, display_name, registered_at, is_active, corresponding exactly to the schema. Clients can apply filters (such as is_active), search by display_name or email (using partial match), and specify pagination/sorting parameters. The endpoint allows audit, moderation, or operational review of user profiles by admin or permitted users. There are no references to deletion fields; only schema-defined fields are included in the query and response. Related logic includes listing active/inactive users, searching by keyword, and handling large user bases through pagination.","summary":"Paginated/filterable list of user profiles from discussion_board_user_profiles.","parameters":[],"requestBody":{"description":"Filter, search, and pagination settings to retrieve user profiles.","typeName":"IPageDiscussionBoardUserProfiles.IRequest"},"responseBody":{"description":"Paginated list of user profiles matching the filter/search conditions.","typeName":"IPageDiscussionBoardUserProfiles"},"authorizationRole":null,"name":"index","path":"/discussion_board/userProfiles","method":"patch"},{"specification":"Fetch a single user profile by its unique identifier from discussion_board_user_profiles. The entity includes id, email, display_name, registered_at, is_active fields. Only these fields will be described or returned. There is no soft delete field. Ownership and access control depending on system design.","description":"Retrieves one user profile record by id from the discussion_board_user_profiles table. Returned fields strictly match the schema: id, email, display_name, registered_at, is_active. There are no ownership or soft delete mechanics to describe per schema. Errors are thrown if the user profile is not found. This operation may be used by admins or authenticated users to retrieve user profile details; access control will depend on who is authorized. This is strictly a single-resource retrieval and supports standard id-based lookups.","summary":"Fetch a user profile by id from discussion_board_user_profiles.","parameters":[{"name":"id","description":"Unique identifier of the user profile to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single user profile by id.","typeName":"IDiscussionBoardUserProfile"},"authorizationRole":null,"name":"at","path":"/discussion_board/userProfiles/{id}","method":"get"},{"specification":"Create a new user profile in the discussion board as an admin. The discussion_board_user_profiles table fields are: id, email, display_name, registered_at, is_active. This operation requires all necessary fields except those set by default/generation logic. The POST body must only contain values present in the schema. Only admins are allowed to perform creation via this endpoint. No soft delete logic or ownership—just creation of new profile entries.","description":"Creates a new user profile in the discussion_board_user_profiles table. Admins must provide all required fields (except id, if database-generated). The fields are: email, display_name, registered_at, is_active, matching the schema exactly. The endpoint validates inputs and inserts the user profile record, returning the created entry. No business logic involves any field not present in schema. This operation is for bootstrap, staff registration, or admin user management purposes. Access is restricted to admin users only.","summary":"Admin creates a user profile in discussion_board_user_profiles.","parameters":[],"requestBody":{"description":"Information to create the new user profile.","typeName":"IDiscussionBoardUserProfile.ICreate"},"responseBody":{"description":"The new user profile entry.","typeName":"IDiscussionBoardUserProfile"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/userProfiles","method":"post"},{"specification":"Update a user profile by its id as an admin. Fields as per schema: email, display_name, registered_at, is_active. The discussion_board_user_profiles entity has no soft delete logic. PUT operation fully updates allowed fields. Only admin can invoke this endpoint. Input and output match schema fields only.","description":"This endpoint allows an admin to update a user profile identified by id in discussion_board_user_profiles. The request body must contain only values for allowed fields: email, display_name, registered_at, is_active. No soft delete logic or extra fields permitted. Admin users utilize this operation for user management, data correction, or status activation/inactivation. The operation validates input, updates existing record, and returns the updated user profile. Error produced if id does not exist. Endpoint is strictly for admin user control use cases.","summary":"Admin updates a user profile by id in discussion_board_user_profiles table.","parameters":[{"name":"id","description":"Unique identifier of the user profile to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the user profile record. Only schema-defined fields are accepted.","typeName":"IDiscussionBoardUserProfile.IUpdate"},"responseBody":{"description":"Updated user profile entry.","typeName":"IDiscussionBoardUserProfile"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/userProfiles/{id}","method":"put"},{"specification":"Delete a user profile by id as an admin. There is no soft delete mechanism for discussion_board_user_profiles; operation is a hard delete. All fields should be referenced as present in the schema. Upon delete, the user is permanently removed from the table assuming no other row-level constraints. Only admin can perform this operation, usually for user management clean-up or compliance.","description":"This API operation allows an admin to permanently delete a user profile from discussion_board_user_profiles by id, performing a hard delete since no soft delete flags exist in the schema. All references, such as user activity, should be handled according to foreign key behavior or application business rules. This endpoint is for admin user management, such as removing obsolete, duplicate, or violating user entities. Errors are thrown if the id is not found. Only schema-defined fields are consulted in all checks and responses.","summary":"Admin permanently deletes a user profile record by id (hard delete).","parameters":[{"name":"id","description":"Unique identifier of the user profile to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/userProfiles/{id}","method":"delete"},{"specification":"Create a new admin assignment for a user profile. The discussion_board_admins table includes fields: id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. The POST body must match the schema and only use present fields. This operation requires referencing an existing user profile id and details of who assigns admin. Only admin users are permitted to perform this operation. Creation results in a new row mapping the user as admin with timestamps, but does not alter any absent fields.","description":"This API operation creates a new admin assignment by adding a row to the discussion_board_admins table. Admins must specify the discussion_board_user_profile_id, assigned_at, and assigned_by_user_profile_id. The revoked_at field is set null for an active assignment. The endpoint validates the referenced user profile, checks authorization, inserts the row, and returns the created admin assignment per the schema. Errors are thrown for invalid input or constraint violations. Use this for promoting a user to admin, with full audit trail.","summary":"Assign admin role to a user profile by creating a discussion_board_admins record (admin-only).","parameters":[],"requestBody":{"description":"Admin assignment data: user profile id, assigner, assigned_at.","typeName":"IDiscussionBoardAdmin.ICreate"},"responseBody":{"description":"The new admin assignment entry.","typeName":"IDiscussionBoardAdmin"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/admins","method":"post"},{"specification":"Return a paginated list of current admin assignments for the discussion board. The discussion_board_admins entity is used for tracking admin assignment history and active admin roles. All fields in the schema are part of the result. Filters, search, and pagination can be specified in the request body. The endpoint is for admin user management and audit, restricted to admin users only.","description":"This API operation returns a paginated list of admin assignments from the discussion_board_admins table. Fields returned include: id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. Supports filtering by assigned_at, is active/revoked (via revoked_at nullness), and searching by user identifiers. Pagination controls, sorting, and filters are provided in the request body. Only admins can invoke this operation. Used for periodic role audits, current admin listings, and management purposes.","summary":"Paginated list of admin assignments from discussion_board_admins (admin-only).","parameters":[],"requestBody":{"description":"Filter/search/pagination parameter settings for admin assignments list.","typeName":"IPageDiscussionBoardAdmins.IRequest"},"responseBody":{"description":"Paginated result set of admin assignments.","typeName":"IPageDiscussionBoardAdmins"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/admins","method":"patch"},{"specification":"Retrieve a single admin assignment by id. The discussion_board_admins schema includes id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. Fetches exactly one row by primary key. Access is restricted to admin users for management, audit, or review workflows. Only fields actually in the schema are documented or returned.","description":"Gets the full details for one admin assignment entry from discussion_board_admins, identified by id. Returned fields are id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. Use cases include role audit, admin promotion/revocation review, or validating admin mapping. No fields outside the schema are referenced. Admins can use this endpoint to inspect an individual admin assignment row. Errors are returned if the id does not exist.","summary":"Fetch a single admin assignment by id (admin-only) from discussion_board_admins.","parameters":[{"name":"id","description":"Unique identifier of the admin assignment record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details for the queried admin assignment record.","typeName":"IDiscussionBoardAdmin"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/admins/{id}","method":"get"},{"specification":"Update an admin assignment by its id. The discussion_board_admins entity holds id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. Only admins are able to update. PUT operation allows full update of present fields. Request body must correspond to schema. The endpoint validates input, updates the existing row, and returns the updated admin assignment.","description":"Updates an admin assignment in the discussion_board_admins table, addressed by id. Only schema-defined fields—discussion_board_user_profile_id, assigned_at, revoked_at, and assigned_by_user_profile_id—are permitted in request body. Used by admins to correct, revoke, or change the assigned_by or timestamp information. Upon success, the operation returns the fully updated database row. Only admins have permission.","summary":"Update an admin assignment by id in discussion_board_admins (admin-only).","parameters":[{"name":"id","description":"Unique identifier of the admin assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the admin assignment. Only values present in the schema allowed.","typeName":"IDiscussionBoardAdmin.IUpdate"},"responseBody":{"description":"Resulting admin assignment after update.","typeName":"IDiscussionBoardAdmin"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/admins/{id}","method":"put"}],"completed":27,"total":111,"step":0,"created_at":"2025-07-28T08:30:42.115Z"},"tokenUsage":{"facade":{"aggregate":{"total":157620,"input":{"total":148072,"cached":0},"output":{"total":9548,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":157620,"input":{"total":148072,"cached":0},"output":{"total":9548,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":157620,"input":{"total":148072,"cached":0},"output":{"total":9548,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":157620,"input":{"total":148072,"cached":0},"output":{"total":9548,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"This endpoint retrieves a list of discussion board configurations with search, pagination, and sorting functionality. It is based on the discussion_board_configurations Prisma table, which stores system-level global settings, feature toggles, and policy enforcement such as max attachment size, maintenance mode, and welcome messages. The endpoint returns atomic details of each configuration (id, key, value, description, created_at, updated_at), supporting 3NF and operational transparency. Cross-referenced in service initialization and system UIs for settings review. Sensitive modification requires admin endpoint usage. No direct relations, as configs are system-wide and not user-specific.\nThis operation supports optional search queries (key or description), pagination (page number/size), and sorting (created_at, key, etc.), to enable efficient management even with large numbers of configuration flags. Returned data is never mutated here (read-only list). No authentication required unless sensitive settings are to be exposed, in which case a stricter endpoint may be used.\nOn error, returns a standard error object with message and reason for failure (e.g., bad page range). If no configs exist, returns an empty data array.","description":"This operation retrieves a paginated, filterable list of all configuration entries in the discussion_board_configurations table. Each configuration contains an id (UUID), key (string), value (string), description (optional string), and timestamps (created_at, updated_at). Authorization is not required unless accessing sensitive fields; in that case, use the admin-prefixed endpoint. The configuration key is unique. This endpoint should be used for operational audits, UI display, and runtime checks (non-mutating read access). No user-related ownership or deletion logic applies, as these are system records. If available, search parameters can filter by key or description using full text. Sorting and pagination parameters—such as page/size, sort_field—should be supported if provided in the request body. Returns an array of objects with full configuration details.\nIf the database contains no records, an empty array is returned. Errors or invalid queries result in a descriptive message. Does not expose any privileged mutations or sensitive raw values unless role-based control is applied elsewhere.","summary":"Retrieve a paginated, searchable list of discussion_board_configurations (system/global settings).","parameters":[],"requestBody":{"description":"Optional parameters for configuration list search, pagination, and sorting.","typeName":"IDiscussionBoardConfiguration.IRequest"},"responseBody":{"description":"Paginated list of configuration entries, each with id, key, value, optional description, and timestamps.","typeName":"IPageDiscussionBoardConfiguration"},"authorizationRole":null,"name":"index","path":"/discussion_board/configurations","method":"patch"},{"specification":"This endpoint retrieves a single configuration record from the discussion_board_configurations table by its unique id. This table holds all global, system-wide settings as atomic records. The endpoint supports viewing of the configuration’s id, key, value, description, created_at, and updated_at. Used for system audits, UIs, and operational reviews. No modifications are performed. No authentication is required for general usage; sensitive configs should require privilege. No related entities; configuration is system-only.\nIf the entry does not exist, returns a 404 error. Never exposes mutation logic; read-only retrieval only.","description":"This operation retrieves the details of a single discussion_board_configurations record based on a provided id. The record includes UUID id, config key (string), value (string), description (nullable string), and timestamps (created_at, updated_at). As this is a read-only operation, no user-specific ownership or mutation fields exist. This is typically used for system admin UX, runtime checks, and operational display. If no entry with the given id exists, returns a 404. No soft/hard delete logic applies as configurations are never deleted directly, only edited or superseded.","summary":"Retrieve individual discussion_board_configurations record by id.","parameters":[{"name":"id","description":"The configuration's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Configuration object with id, key, value, description, and timestamps.","typeName":"IDiscussionBoardConfiguration"},"authorizationRole":null,"name":"at","path":"/discussion_board/configurations/{id}","method":"get"},{"specification":"This admin-only endpoint creates a new configuration entry in the discussion_board_configurations table. It supports the system admin's ability to add new global settings (such as feature toggles, system messages, maintenance mode) at runtime. Each entry has a unique UUID id, string key (unique), string value, optional description (for admin context), and records timestamps for creation/update. Only admin users may access this endpoint.\nThe request body must include key and value; description is optional. The system enforces unique key constraint. On success, the new configuration object is returned. On violation (e.g., duplicate key), returns an error with reason.\nThis table is for core platform configuration—records are atomic and unlinked to users. Creation events should be logged for audit. No deletion; only admins may supersede or edit values.","description":"This admin endpoint creates a new configuration in the discussion_board_configurations table. Required fields are key (unique string), value (string), and created_at/updated_at timestamps (stored automatically). An optional description (string) can be supplied. On duplicate key, returns an error. Only system admin roles may perform this operation. The entry is immediately available for runtime use. The operation is atomic and does not permit batch creation. Audit trail of configuration creation is recommended. No delete operation; configurations are permanent but editable.","summary":"Create a new configuration entry in discussion_board_configurations (admin only).","parameters":[],"requestBody":{"description":"Configuration details to create: key, value (required), description (optional).","typeName":"IDiscussionBoardConfiguration.ICreate"},"responseBody":{"description":"The newly created configuration object.","typeName":"IDiscussionBoardConfiguration"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/configurations","method":"post"},{"specification":"This admin-only endpoint updates an existing configuration (by id) in the discussion_board_configurations table. Only the value and description can be updated; the key is immutable to ensure referential integrity of config-related logic. Requires admin privileges; changes trigger setting the updated_at timestamp for traceability. Used to enable or disable features, adjust system policies, or change UI messages at runtime.\nOn success, returns the updated configuration. If the id does not exist, returns a 404. Updates are strictly atomic; batch updates are not supported. Modification events should be logged for auditing. No delete endpoint exists for configs; only mutation is permitted.","description":"This admin operation updates the value and/or description of a configuration entry in the discussion_board_configurations table. Only value (string) and description (optional string) may be changed—key remains immutable. Requires id (UUID) path parameter and IDiscussionBoardConfiguration.IUpdate request body with new values. Admin privilege is required. The change sets updated_at to the current timestamp. On invalid id, returns 404. Supports configuration maintenance, feature toggling, and runtime policy updates. Entries are never deleted; modifications are fully audit-trailed. No ownership or delete/soft delete logic applies.","summary":"Update value/description of configuration entry by id (admin).","parameters":[{"name":"id","description":"Configuration's unique UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to change: value (required), description (optional).","typeName":"IDiscussionBoardConfiguration.IUpdate"},"responseBody":{"description":"Updated configuration object.","typeName":"IDiscussionBoardConfiguration"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/configurations/{id}","method":"put"},{"specification":"This admin-only endpoint deletes (hard delete) a configuration record from the discussion_board_configurations table by id. There are NO soft-delete fields such as deleted_at in the table; as such, this operation permanently removes the key and its value from the system. Only admins are authorized. Used for obsolete or erroneous config cleanups. Cascade effects must be managed at the application level (e.g., when removing a flag no longer in use).\nOn success, returns 204 No Content. If id does not exist, responds 404. Successful delete should trigger an audit log entry. Use with caution, as configs are global and uniquely identified by key.","description":"This admin operation permanently deletes (hard delete) a discussion_board_configurations record by id. Because the table has no soft-deletion fields (e.g., deleted_at or is_deleted), the row is irretrievably removed from the database. Only admin roles can invoke this. Intended for obsolete/invalid configuration cleanup. If the provided id doesn't exist, 404 error is returned. Deletion actions must be logged for compliance. Deleting a configuration may impact system operations; ensure safe usage. No response body is returned upon success.","summary":"Hard delete configuration entry by id (admin only).","parameters":[{"name":"id","description":"UUID of configuration to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/configurations/{id}","method":"delete"},{"specification":"This endpoint provides a paginated, searchable list of discussion board categories for client-side category discovery, selection, and UI display. Based on the discussion_board_categories Prisma table, which stores id, code, name, description, sort order, is_active, and timestamps for each category. Used for creating topics, filtering/browsing, and showing available discussion areas. 3NF is retained by keeping categories distinct from topics or posts. Categories are not user-specific and are globally managed. No authentication required. Exposed for all users, but creation/modification requires admin endpoint. May support search on name or description (partial string). No mutation allowed. Sortable by sort_order or updated_at.\nErrors return a standard error object. If no categories exist, returns an empty list.","description":"This operation returns a paginated and optionally filtered list of discussion_board_categories entries. Each returned object includes id, code (string, unique), name, description (optional), sort_order (int), is_active (boolean), and timestamps. Used for UI category pickers and front-end discovery. Supports query parameters (page/size, search, sort) if provided in request body IDiscussionBoardCategory.IRequest. This operation does not mutate data and has no authentication requirements. Data is always read-only; use admin endpoint for mutations. If the table is empty, the returned data array is also empty. Errors result in descriptive messages. Categories have no soft or hard delete fields; inactive categories are indicated by is_active = false.","summary":"List/search categories with optional pagination (public/unauth).","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for category listing.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated list of category objects with id, code, name, description, sort_order, is_active, and timestamps.","typeName":"IPageDiscussionBoardCategory"},"authorizationRole":null,"name":"index","path":"/discussion_board/categories","method":"patch"},{"specification":"This endpoint retrieves the details of a specific discussion board category by its id. Based on the discussion_board_categories Prisma table, which describes each category with id, code, name, optional description, sort order, is_active, and timestamps. Used by client UIs, for category info retrieval prior to use or for displaying full metadata. No mutations are performed. Categories are managed globally by admins. No authentication is needed for general access. Invalid or missing id returns 404. No soft delete or ownership logic applies to this entity.\nNo related objects returned, but client can fetch topics or permissions if needed via other endpoints.","description":"This operation fetches a single category record (discussion_board_categories) using an id path parameter. Returns id (UUID), code (unique string), name, description (string or null), sort_order (int), is_active (bool), and created_at/updated_at. Used for pre-populating UI or reviewing category metadata. Purely read-only operation, with no authorization required. If no record is found for the provided id, 404 error is returned. Category deletion is not supported; disabling is via is_active flag.","summary":"Retrieve details for individual discussion_board_categories entry by id (public).","parameters":[{"name":"id","description":"Unique category UUID (id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The category object: id, code, name, description, sort_order, is_active, created/updated timestamps.","typeName":"IDiscussionBoardCategory"},"authorizationRole":null,"name":"at","path":"/discussion_board/categories/{id}","method":"get"},{"specification":"This admin-only endpoint creates a new category in the discussion_board_categories table, supporting addition of subject domains (e.g., Politics, Economics) for organizing topics. Body must include code (unique string), name, optional description, sort_order (int), and is_active (bool). Creation sets created_at/updated_at. Only accessible by admin role. Code uniqueness enforced at DB level. Returns the newly created category object. On duplicate code or validation error, returns reason for failure. No user/ownership concept as categories are system objects. Audit logging recommended.","description":"This admin operation adds a new category entry to discussion_board_categories. Requires code (unique string for category), name (string), optional description, sort_order (int display position), and is_active (true/false). Timestamps are set automatically. Only system/admin users are authorized. The new category appears instantly for UI/topic assignment. If code is duplicated or validation fails, the error is returned. No deletion (only disabling via is_active). Result includes all fields. No owner/soft-delete field exists.","summary":"Create new category in discussion_board_categories (admin only).","parameters":[],"requestBody":{"description":"Category information for creation: code, name, description, sort_order, is_active.","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"The newly created discussion_board_categories object.","typeName":"IDiscussionBoardCategory"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/categories","method":"post"},{"specification":"This admin-only endpoint updates an existing category (by id) in the discussion_board_categories table. Permits updating name, description, sort_order, and is_active; code is immutable. Returns the updated category object. Only admin users may invoke. Used by system managers to adjust UI order, activate/deactivate, or migrate category names. updated_at is set automatically. If the id is invalid, 404 returned. No batch operation or soft delete; only is_active is toggled for disabling. Changes are logged for audit/compliance.","description":"This admin operation updates a single category's display name, description (can be null), sort_order (int), or is_active (bool) in the discussion_board_categories table. The code field is immutable for referential integrity. Requires id in path, and IDiscussionBoardCategory.IUpdate request body with changed fields. Admin authorization is required. updated_at is set to current time. If id is invalid, error 404. Operation is atomic, and change should be audit-logged. No deletion endpoints exist for categories.","summary":"Update a category's details by id (admin only).","parameters":[{"name":"id","description":"UUID of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable fields: name, description, sort_order, is_active (code is immutable).","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"The updated discussion_board_categories object.","typeName":"IDiscussionBoardCategory"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/categories/{id}","method":"put"},{"specification":"This admin-only endpoint deletes (hard delete) a category from the discussion_board_categories table by id. There are NO soft delete fields such as deleted_at or is_deleted in the schema; so this is a permanent removal. Intended for system-level cleanup. Deletes cascade to all related category_permissions and topics (cascade settings as per schema). Only admin may invoke. On success, 204 returned. On invalid id, 404. Deletion actions should be audit-logged. Use is_active for disabling rather than deletion, unless truly obsolete.","description":"This operation irreversibly deletes a discussion_board_categories record by id. No soft delete logic exists; this is a true hard-delete. Related entities (category_permissions, topics) are deleted by cascade. Only system admin users may call this API. Returns HTTP 204 No Content on success. If id not found, error 404. Resulting schema removes all traces of the category from the system. Deletion is best used for obsolete/miscreated categories; otherwise use is_active for hiding from UI. No response body on success.","summary":"Hard delete a category entry by id (admin only).","parameters":[{"name":"id","description":"UUID of the category entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/categories/{id}","method":"delete"},{"specification":"This admin-only endpoint creates a new set of permissions for a discussion board category (per role), as tracked in discussion_board_category_permissions. Used for assigning or updating role-based permissions (can_view, can_create_topic, can_reply, can_like, can_report) to a given category. Requires category_id (UUID), role_name (string: admin/moderator/member/guest), and individual boolean flags as input. Ensures that (category_id, role_name) is unique. Only callable by admins. On duplicate, returns error. Creates the record and returns the new permission row; audit logging required. Used for RBAC configuration, aligning with requirements doc for permission matrix.","description":"This admin operation creates a new row in discussion_board_category_permissions, representing a per-category/role permission set. Requires category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report—all fields required (booleans as programmatic flags). Used to define or extend RBAC per category basis. Enforced unique on (category_id, role_name). Admin-only, as assignment/adjustment affects all UI/permission gating. If duplicate, returns error. On success, the new row is returned with all fields and created_at.","summary":"Create per-role permission set for a category (admin only).","parameters":[],"requestBody":{"description":"Full permission set to assign: category_id, role_name, and all boolean flags.","typeName":"IDiscussionBoardCategoryPermission.ICreate"},"responseBody":{"description":"The newly created category permission entry.","typeName":"IDiscussionBoardCategoryPermission"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/categoryPermissions","method":"post"},{"specification":"This admin-only endpoint returns a paginated (optionally filtered) list of all discussion_board_category_permissions entries—used for reviewing, searching, and managing category-level access control. Underpins role-based API and UI visibility, as defined in the requirements document. Returns all columns: id (UUID), category_id (UUID), role_name (string), can_view, can_create_topic, can_reply, can_like, can_report (booleans), created_at (timestamp). No user-specific fields. Searchable on role/category via request body. Used for admin RBAC reviews and audits. No authentication for lookup, but only admins may call. No deletion/mutation at this endpoint (see update for mutation). Errors yield clear message.","description":"This operation lists all existing discussion_board_category_permissions records (with search/filter, pagination, and sorting support via request object). Each entry includes the full RBAC configuration for a (category_id, role_name) pair: all permission booleans, id, and creation timestamp. Intended for admin permission review, audit, and configuration UIs. Only admins authorized. Returns paginated data structure; empty if none found. No modification or delete at this endpoint.","summary":"List/search all category permission sets with pagination (admin only).","parameters":[],"requestBody":{"description":"Optional filters for category and/or role, plus pagination settings.","typeName":"IDiscussionBoardCategoryPermission.IRequest"},"responseBody":{"description":"Paginated result: each item is a full permission row with all columns as per table schema.","typeName":"IPageDiscussionBoardCategoryPermission"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/categoryPermissions","method":"patch"}],"completed":39,"total":111,"step":0,"created_at":"2025-07-28T08:30:48.545Z"},"tokenUsage":{"facade":{"aggregate":{"total":200015,"input":{"total":186102,"cached":0},"output":{"total":13913,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":200015,"input":{"total":186102,"cached":0},"output":{"total":13913,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":200015,"input":{"total":186102,"cached":0},"output":{"total":13913,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":200015,"input":{"total":186102,"cached":0},"output":{"total":13913,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Fetch information about a specific guest session in the discussion board system. This operation retrieves a guest session's details using its unique identifier (UUID) as defined in the discussion_board_guests model. The endpoint enables systems to track or audit guest browsing events, important for analytics and platform personalization. Only fields defined in the Prisma schema are used: id, session_id, created_at. The endpoint does not return or reference any non-existent fields such as deleted_at or updated_by.","description":"This endpoint allows the retrieval of an individual guest session using the provided guest 'id' (UUID). As per the discussion_board_guests schema, each guest represents an unauthenticated user or session. Only the fields actually present in the schema will be included, specifically: id (primary key), session_id (unique session identifier), and created_at (session creation timestamp). There are no soft-delete or owner-tracking fields; all information is returned as stored. This endpoint is useful for tracing anonymous access events for analytics or privacy compliance. Only session owners or privileged roles should have access to individual guest records, as guests themselves may not have authenticated identity. No fields not present in the schema (e.g., updated_by, deleted_at) are referenced. Productized for analytics, not for business content display.","summary":"Retrieve a specific guest session from discussion_board_guests by ID (UUID).","parameters":[{"name":"id","description":"Unique identifier for the guest session (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Guest session details object corresponding to the provided id.","typeName":"IDiscussionBoardGuest"},"authorizationRole":null,"name":"at","path":"/discussion_board/guests/{id}","method":"get"},{"specification":"Create a new guest session for an unauthenticated user in the discussion board. The operation allows the system to generate and track a guest entry by recording session_id (unique), and created_at timestamp. Only the fields present in the discussion_board_guests Prisma model are processed; owner, deletion, and update tracking fields are not supported. This endpoint is executed without user authentication as guests are not registered users.","description":"Use this endpoint to create a new guest entry in the discussion_board_guests table when an anonymous or unauthenticated user accesses the board. The request must provide a unique session_id and, optionally, an explicit created_at timestamp (otherwise set to now). Only actual schema fields are accepted (id, session_id, created_at). No soft-delete or lifecycle fields exist, so deletion must be performed via hard removal if required. This action is open to unauthenticated access, making it suitable for creating analytic sessions for first-time visitors. No fields outside the schema are supported.","summary":"Create a new guest session record in discussion_board_guests (anonymous access).","parameters":[],"requestBody":{"description":"Information needed to create a new guest session (session_id, created_at).","typeName":"IDiscussionBoardGuest.ICreate"},"responseBody":{"description":"Details of the created guest session record.","typeName":"IDiscussionBoardGuest"},"authorizationRole":null,"name":"create","path":"/my/discussion_board/guests","method":"post"},{"specification":"Delete an existing guest record by ID, permanently removing it from the discussion_board_guests table. This operation performs a hard delete, as there are no soft delete or lifecycle fields in the schema. Only the unique identifier (UUID) is required. Ownership verification may be handled at the application level to ensure only the creator/session-owner can delete their guest record.","description":"This endpoint removes a guest session record from the discussion_board_guests table by its id (UUID). The action is a hard delete, as there is no is_deleted, deleted_at, or similar soft delete mechanism in the guest table schema. After deletion, the corresponding guest session can no longer be tracked for analytics or personalized UI. Authorization should be enforced so that only the session owner can remove their session, or by privileged service accounts for cleanup. Strictly limited to the fields present: deletion is by id only. No auditing or retention fields are present in the Prisma schema for this entity.","summary":"Permanently delete a guest session from discussion_board_guests by its ID.","parameters":[{"name":"id","description":"Unique identifier for the guest session (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":null,"name":"erase","path":"/my/discussion_board/guests/{id}","method":"delete"},{"specification":"Create a new role assignment or revocation event in the discussion_board_role_changes table. This endpoint supports admins in updating user roles (assign/revoke admin, moderator, member, or guest), fully audited as per business requirements. Each change record specifies the affected user, actor, role_type, action_type, and timestamp. Only fields in the Prisma schema are referenced; no non-existent tracking fields are used. Admin access required.","description":"Admins use this endpoint to log role changes within the board. Each POST creates an atomic event recording changes such as assigning or revoking roles (admin, moderator, member, guest). Required fields: target_user_profile_id (who the change affects), performed_by_user_profile_id (who performed the change), role_type (role being changed), action_type (\"assigned\"/\"revoked\"), and timestamp (when the change happened). All changes are tracked for compliance and audit purposes; only roles/fields present in the schema are referenced. There are no deleted_at/updated_by fields in this table. This operation is only available to users with admin privileges.","summary":"Admin creates a new role change event (assign/revoke a user role).","parameters":[],"requestBody":{"description":"Details required to create a new role assignment or revocation event.","typeName":"IDiscussionBoardRoleChange.ICreate"},"responseBody":{"description":"Role change event record as stored in the role_changes table.","typeName":"IDiscussionBoardRoleChange"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/roleChanges","method":"post"},{"specification":"Retrieve a list of role change events for audit, search, or analytics within the discussion_board_role_changes table. Accessible only by admin users, this operation supports filtering and pagination by role_type, action_type, time range, or user. Response includes only fields present in the schema: id, target_user_profile_id, performed_by_user_profile_id, role_type, action_type, and timestamp. No non-existent fields are referenced.","description":"This endpoint allows admin users to fetch a paginated/searchable list of all role change events in the system, supporting audit and compliance. Only actual schema fields are included (id, target_user_profile_id, performed_by_user_profile_id, role_type, action_type, timestamp), as per discussion_board_role_changes definition. Filtering, searching, and pagination are implemented as request body parameters. There are no deleted_at, updated_by, or other fields not in the schema. List access is restricted to admin role only for privacy and security.","summary":"Retrieve a paginated and filterable list of role change events (admin access).","parameters":[],"requestBody":{"description":"Query/filter parameters for searching role change events (role_type, action_type, user, date range).","typeName":"IDiscussionBoardRoleChange.IRequest"},"responseBody":{"description":"Paginated result set of role change events.","typeName":"IPageIDiscussionBoardRoleChange"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/roleChanges","method":"patch"},{"specification":"Fetch a specific role change event record by its unique id from the discussion_board_role_changes table. This endpoint is admin-restricted. Only the defined schema fields are referenced, and no deleted_at, updated_by, or similar lifecycle fields are accessed.","description":"Use this endpoint to retrieve an individual role change event by its id (UUID), as stored in the discussion_board_role_changes schema. Only the actual fields defined in Prisma are included: id, target_user_profile_id, performed_by_user_profile_id, role_type, action_type, and timestamp. No references to non-existent fields. The operation is only accessible to admin users for audit, review, or compliance investigation.","summary":"Retrieve a specific role change event (by ID) as an admin.","parameters":[{"name":"id","description":"Unique identifier of the role change event (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Role change event detail object.","typeName":"IDiscussionBoardRoleChange"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/roleChanges/{id}","method":"get"},{"specification":"Returns a list of topics in the discussion_board_topics table, supporting advanced search, filtering by category, status, or title, and pagination. This covers both public and authenticated searches, but no private information is involved. Only defined schema fields are queried. Uses PATCH method to allow complex search/filter body. No soft delete fields exist; closed/pinned state tracked by available status fields.","description":"Clients may list/search all topics using this endpoint. Only actual database fields are included: id, discussion_board_category_id, created_by_member_id, last_edited_by_member_id (nullable), title, description, status, pinned_at (nullable), closed_at (nullable), created_at, updated_at. Filtering/searching may include keywords, category, or status, with pagination parameters. Closed or pinned topics are reflected by their status and timestamp fields; no deleted_at or soft delete mechanism is present. This endpoint does not leak restricted data and follows board-wide visibility settings. No non-existent fields are referenced.","summary":"List/search/filter all topics in discussion_board_topics (with pagination).","parameters":[],"requestBody":{"description":"Parameters for searching/filtering topics (keywords, status, category, pagination).","typeName":"IDiscussionBoardTopic.IRequest"},"responseBody":{"description":"Paginated list of topics matching the search/filter criteria.","typeName":"IPageIDiscussionBoardTopic"},"authorizationRole":null,"name":"index","path":"/discussion_board/topics","method":"patch"},{"specification":"Retrieve a specific topic thread's complete detail from the discussion_board_topics table. Returns all fields as per schema: id, discussion_board_category_id, created_by_member_id, last_edited_by_member_id (nullable), title, description, status, pinned_at, closed_at, created_at, updated_at. This supports thread viewing for all users. Only actual schema fields are exposed; no extraneous fields or non-existent attributes are referenced.","description":"This endpoint provides complete information on a single discussion topic thread, located by its id (UUID). All actual fields from the discussion_board_topics model are included: id, discussion_board_category_id, created_by_member_id, last_edited_by_member_id (nullable), title, description, status, pinned_at (nullable), closed_at (nullable), created_at, updated_at. The endpoint explicitly avoids referencing any schema fields not present, such as deleted_at, owner, or extra audit columns. This endpoint forms the basis for threading and content display in the board application.","summary":"Fetch full detail of a specific discussion topic thread by ID.","parameters":[{"name":"id","description":"Unique identifier of the topic to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single topic detail object with all fields as defined in the schema.","typeName":"IDiscussionBoardTopic"},"authorizationRole":null,"name":"at","path":"/discussion_board/topics/{id}","method":"get"},{"specification":"Create a new topic thread under the authenticated user's (member) identity in discussion_board_topics. Allows members to post new topics in a category, specifying title, description, status, and timestamps, plus references to category and creating member. Only fields present in the Prisma schema are included. There are no deleted_at or owner-tracking columns beyond member identity.","description":"A member uses this endpoint to create a new discussion topic. All required fields in the request must exist in the Prisma schema: discussion_board_category_id (category id), created_by_member_id (the current member's id), title, description, status (open/closed/pinned as string), and optional fields such as pinned_at and closed_at, as required. No hidden or system fields are accepted. The system will set created_at/updated_at appropriately. Outcome is a topic owned by the authenticated member, with all schema fields populated. Soft delete not supported (no deleted_at field); deletion is hard delete via another endpoint.","summary":"Create a new topic as the current (authenticated) member.","parameters":[],"requestBody":{"description":"Information to create a new topic (fields as defined in discussion_board_topics).","typeName":"IDiscussionBoardTopic.ICreate"},"responseBody":{"description":"Created topic detail, with ids and timestamps.","typeName":"IDiscussionBoardTopic"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/topics","method":"post"},{"specification":"Update an existing topic created by the authenticated (current) member, identified by topic id. The operation allows modifying actual fields present in the schema: title, description, status, optional pinned_at/closed_at, and updates last_edited_by_member_id. No soft delete columns exist. Only the member who created the topic can perform this action.","description":"A member uses this endpoint to edit their own topic. Allowed update fields: title, description, status, pinned_at, closed_at, last_edited_by_member_id, and updated_at. The endpoint implements authorization to restrict access to resource ownership. No fields are referenced outside the schema. Topic history and audit are maintained by associating updates with last_edited_by_member_id and updated_at timestamps. No deleted_at or soft delete mechanism. Only topic owners may edit their records via this endpoint. If further role-based permissions are required, moderation/admin endpoints should be used.","summary":"Update the current member's own topic by id (authorized, owner only).","parameters":[{"name":"id","description":"Unique identifier for the topic (UUID) owned by the current member.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the owned topic (title, description, status, etc).","typeName":"IDiscussionBoardTopic.IUpdate"},"responseBody":{"description":"Updated topic object after the changes.","typeName":"IDiscussionBoardTopic"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/topics/{id}","method":"put"},{"specification":"Delete an owned topic by its unique id for the current (authenticated) member. As the discussion_board_topics table does not include a soft delete field, removal is hard delete (permanent). Only topic creators/owners may delete their topics. Authorization and resource ownership are enforced.","description":"This endpoint permanently removes a topic by its id, provided the authenticated member is the creator/owner. The discussion_board_topics schema does not have soft delete fields (e.g., deleted_at, is_deleted), so deletion is permanent (hard delete). If recovery/version/history is needed, it should be handled via topic_snapshots not present in this operation. No schema fields outside of id are used for deletion. Only topic owners may access this endpoint; role escalation/moderation is not provided on this route.","summary":"Hard delete the current member's own topic (permanent removal, owner only).","parameters":[{"name":"id","description":"Unique identifier for the topic to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/topics/{id}","method":"delete"},{"specification":"List/search recent topic snapshots (audit/history) in the discussion_board_topic_snapshots table. Supports review of topic version history, audit trails, and rollback comparison. Returned fields are as in the schema: id, discussion_board_topic_id, edited_by_member_id, title, description, status, pinned_at, closed_at, created_at. Only real schema fields are referenced. No soft/hard delete, as snapshots are immutable. Allows pagination, keyword filtering, and sorting.","description":"This endpoint fetches a paginated list of topic snapshots, each representing a version of a topic thread at a moment in time. Each snapshot object holds all fields as defined in the discussion_board_topic_snapshots model: id, discussion_board_topic_id, edited_by_member_id, title, description, status, pinned_at, closed_at, created_at. Filtering can be performed by topic, editor, or time range as supported by the request body. Snapshots are for audit recovery, review, or moderator purposes; there are no soft/hard delete fields. No references to schema columns not defined in Prisma.","summary":"Fetch a paginated list of topic snapshots (audit history).","parameters":[],"requestBody":{"description":"Parameters for searching/filtering topic snapshots (topic id, editor, time range, pagination).","typeName":"IDiscussionBoardTopicSnapshot.IRequest"},"responseBody":{"description":"Paginated result set of topic snapshots matching the filter/search criteria.","typeName":"IPageIDiscussionBoardTopicSnapshot"},"authorizationRole":null,"name":"index","path":"/discussion_board/topicSnapshots","method":"patch"}],"completed":51,"total":111,"step":0,"created_at":"2025-07-28T08:30:49.736Z"},"tokenUsage":{"facade":{"aggregate":{"total":241677,"input":{"total":224138,"cached":3840},"output":{"total":17539,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":241677,"input":{"total":224138,"cached":3840},"output":{"total":17539,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":241677,"input":{"total":224138,"cached":3840},"output":{"total":17539,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":241677,"input":{"total":224138,"cached":3840},"output":{"total":17539,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Retrieve a specific topic snapshot by its unique identifier from the discussion_board_topic_snapshots table. The endpoint allows any authorized user to view the historical state of a discussion board topic at a given revision point, addressing full traceability and rollback requirements. All fields returned must match those defined in the discussion_board_topic_snapshots schema: id, discussion_board_topic_id, edited_by_member_id, title, description, status, pinned_at, closed_at, created_at. Access control should ensure that only viewers with sufficient rights (e.g., those with view permissions on the corresponding topic/category) can access this resource. No fields outside the schema may be referenced. Error responses must account for invalid IDs and permission denials.","description":"This operation returns the complete details of a single topic snapshot from the discussion_board_topic_snapshots entity, as referenced in the system's audit/versioning requirement. The response includes the exact state of a topic (title, description, status, etc.) at a historical edit point. All data returned directly reflect the columns of the discussion_board_topic_snapshots model, with no additional computed values or external attributes. Retrieves only the row matching the provided id, or returns an error if the id does not exist. There are no related entities or additional lookups performed beyond the schema-specified fields. The endpoint is integral for audit trails, rollback, and moderation review. Access is strictly controlled by user role and category permission. Only valid UUIDs are accepted as path parameters, and only readable columns may be exposed in the response.","summary":"Get a single topic snapshot by ID from discussion_board_topic_snapshots.","parameters":[{"name":"id","description":"Unique identifier for the topic snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the requested topic snapshot.","typeName":"IDiscussionBoardTopicSnapshot"},"authorizationRole":null,"name":"at","path":"/discussion_board/topicSnapshots/{id}","method":"get"},{"specification":"Retrieve a paginated list of topic subscriptions from the discussion_board_topic_subscriptions entity, supporting advanced querying with filters such as topic ID, member ID, and subscription status. This allows system or admin users to audit or analyze topic following patterns. Fields must be limited to those defined in the schema: id, discussion_board_topic_id, member_id, subscribed_at, unsubscribed_at. Supports pagination and filtering per typical search endpoints; no extra business logic may be assumed. Access control is determined by system-level privilege (e.g., admin or moderator role for global queries).","description":"This endpoint returns a paginated list of topic subscription records from discussion_board_topic_subscriptions, matching any provided filters such as topic ID or member ID. All fields in the response are limited to those existing in the database schema. The operation allows for administrative review of which members are following which topics and when they subscribed or unsubscribed. The search criteria and pagination parameters must match the request body definition. No computed or joined data may be returned. Authorization and filtering are handled according to the access control model and business rules defined for subscription visibility.","summary":"List topic subscriptions with optional filtering from discussion_board_topic_subscriptions.","parameters":[],"requestBody":{"description":"Criteria and pagination for listing topic subscriptions.","typeName":"IDiscussionBoardTopicSubscription.IRequest"},"responseBody":{"description":"Paginated topic subscription list.","typeName":"IPageIDiscussionBoardTopicSubscription"},"authorizationRole":null,"name":"index","path":"/discussion_board/topicSubscriptions","method":"patch"},{"specification":"Retrieve a single topic subscription by its unique ID from the discussion_board_topic_subscriptions schema. Allows authorized actors to view the details of an individual topic subscription, including which topic is being followed, the member following, and subscription/unsubscription timestamps. Only schema-defined fields may be included in the response: id, discussion_board_topic_id, member_id, subscribed_at, unsubscribed_at.","description":"Fetch complete details for a specific topic subscription identified by its ID from the discussion_board_topic_subscriptions table. The endpoint outputs only the database fields defined in the schema, with no reference to non-existent or computed properties. Returns a 404 error if the subscription is not found. Permission checks restrict access to actors allowed to audit or view subscription connections. Typical use-case is for audits, troubleshooting notification delivery, or admin dashboard population.","summary":"Get a topic subscription by ID from discussion_board_topic_subscriptions.","parameters":[{"name":"id","description":"Unique identifier for the topic subscription to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full topic subscription details as defined in schema.","typeName":"IDiscussionBoardTopicSubscription"},"authorizationRole":null,"name":"at","path":"/discussion_board/topicSubscriptions/{id}","method":"get"},{"specification":"Create a new topic subscription, associating the currently authenticated member with a specific topic in discussion_board_topic_subscriptions. All fields for creation must exist in the schema: discussion_board_topic_id, member_id (implicitly the authenticated user), and subscription timestamp (set by the system). Returns the new subscription details. No additional fields may be referenced. Soft or hard duplicate prevention and business validation is required per business rules, but only fields in schema may be persisted.","description":"Allows a member (or privileged user) to subscribe themselves to a discussion topic, resulting in a new row in discussion_board_topic_subscriptions. The request body includes the target topic's ID; the subscribing member is inferred from session/auth context. On success, returns all persisted fields: id, discussion_board_topic_id, member_id, subscribed_at, unsubscribed_at (null). This enables users to receive notifications for future topic activity. The operation must ensure that duplicate subscriptions are rejected or handled according to business rules. No properties not defined in the table may be accepted or persisted.","summary":"Subscribe current member to a topic (create subscription).","parameters":[],"requestBody":{"description":"New topic subscription details (topic ID is required).","typeName":"IDiscussionBoardTopicSubscription.ICreate"},"responseBody":{"description":"Subscription row created in database.","typeName":"IDiscussionBoardTopicSubscription"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/topicSubscriptions","method":"post"},{"specification":"Update an existing topic subscription by ID. Supports changes permitted by business logic (e.g., resubscribing, marking as unsubscribed) for the authenticated user (must own the subscription). Fields updated must exist in the discussion_board_topic_subscriptions schema: discussion_board_topic_id, member_id, subscribed_at, unsubscribed_at. No unauthorized modifications of other users' subscriptions are permitted. Only explicitly updatable fields per schema and business logic can be changed by the user.","description":"This endpoint allows a member to update their own topic subscription, typically to resubscribe (clear unsubscribed_at) or unsubscribe (set unsubscribed_at). It ensures that the authenticated user owns the subscription being modified. All modifications are limited strictly to schema-defined fields—no additional or computed fields are permitted in input or output. Returns the updated subscription row or appropriate error if not permitted.","summary":"Update own topic subscription by ID (resubscribe or unsubscribe).","parameters":[{"name":"id","description":"Unique identifier for the subscription to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the topic subscription (e.g., unsubscribed_at for unsubscribing).","typeName":"IDiscussionBoardTopicSubscription.IUpdate"},"responseBody":{"description":"Updated topic subscription data after modification.","typeName":"IDiscussionBoardTopicSubscription"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/topicSubscriptions/{id}","method":"put"},{"specification":"Delete (hard remove) a topic subscription by ID for the currently authenticated member. The discussion_board_topic_subscriptions schema does not include any soft deletion indicator, so the row is permanently removed from the table. Only the owner of the subscription may invoke this action. All referenced fields must be schema-defined.","description":"Deletes a topic subscription from the discussion_board_topic_subscriptions table, permanently removing the row identified by the provided ID. The delete is hard (not soft), as there is no is_deleted or deleted_at column present in the schema. The requesting member must own the subscription to perform this operation. Returns confirmation of deletion or error if not permitted. No fields outside the schema may be accessed or exposed.","summary":"Delete own topic subscription by ID (hard delete).","parameters":[{"name":"id","description":"Unique identifier for the topic subscription to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of permanent deletion (no row remains).","typeName":"IVoidResponse"},"authorizationRole":"member","name":"erase","path":"/my/discussion_board/topicSubscriptions/{id}","method":"delete"},{"specification":"Retrieve a paginated list of posts from the discussion_board_posts entity. Allows for advanced searching by topic, author, is_deleted, creation date, or full text search on 'body'. Only fields present in the schema are available for filtering or response: id, discussion_board_topic_id, author_member_id, title, body, is_deleted, created_at, updated_at. Supports auditing, content discovery, and moderation. Access is determined by the system's board-wide permission structure.","description":"Returns a list of posts with advanced filtering and searching, useful for moderation, search, or timeline views. The output is paginated and only exposes the schema's columns—no extra/computed values. This operation enables comprehensive listing for auditing or user feed construction. Request and response fields strictly follow the definition of the discussion_board_posts model, with no reference to external or virtual attributes. Authorization is handled according to the board's RBAC model.","summary":"List and search posts with optional filtering/pagination.","parameters":[],"requestBody":{"description":"Filter and pagination parameters for fetching post list.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated post data result set.","typeName":"IPageIDiscussionBoardPost"},"authorizationRole":null,"name":"index","path":"/discussion_board/posts","method":"patch"},{"specification":"Get full details for a specific post by its ID from discussion_board_posts. All columns in the schema are included in the response: id, discussion_board_topic_id, author_member_id, title, body, is_deleted, created_at, updated_at. No derived or external data may be shown. Accessible to users with view rights per topic/category policies.","description":"Fetches a single post’s full attributes using its unique ID. The output strictly includes only the fields available in the discussion_board_posts schema. Used in detail views and moderation. Returns 404 if the post is not found. Soft-deleted posts (where is_deleted is true) may be excluded for unauthorized viewers per business logic.","summary":"Get post by ID from discussion_board_posts.","parameters":[{"name":"id","description":"Unique identifier for the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete post details for the specified ID.","typeName":"IDiscussionBoardPost"},"authorizationRole":null,"name":"at","path":"/discussion_board/posts/{id}","method":"get"},{"specification":"Create a new post as the currently authenticated member in the discussion_board_posts entity. All fields present in the model must be captured at creation: discussion_board_topic_id, author_member_id (inferred from auth), title (optional), body, is_deleted (defaulted false), created_at, and updated_at. Attachments and likes are handled in separate operations. The operation must enforce schema-based constraints (e.g., string lengths, topic association) and error on any extra field.","description":"Allows a member to author and submit a new post (topic or reply), recorded as a row in the discussion_board_posts table. Only properties in the model (topic association, author, body, optional title, etc.) are captured. Upon success, returns the persisted row. All permission and field value constraints are enforced per the schema, with no acceptance or return of non-schema attributes. Business logic for defaulting is_deleted to false must be followed. Attachments and further interactions are separate operations.","summary":"Create a new post as member (discussion_board_posts).","parameters":[],"requestBody":{"description":"Fields for creating a post (topic association, body, etc).","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"Created post record with all schema fields populated.","typeName":"IDiscussionBoardPost"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/posts","method":"post"},{"specification":"Update a post by ID as the authenticated member. This can include editing the content, marking as soft deleted, or updating the title. Only the author of the post is allowed to use this endpoint; updates are limited to fields present in the discussion_board_posts schema: title, body, is_deleted, updated_at. Per schema, is_deleted is a soft deletion flag; setting it true will hide the post rather than remove it. No other user may edit another's post through this path.","description":"Lets a member update one of their own posts (change title, update body, or soft delete). Only schema-specified properties can be edited or returned. Soft deletion is achieved by setting is_deleted to true; the row remains in the database. Attachments, likes, and comments require separate operations. Ownership and field type/constraint checks are strictly enforced. Non-authors cannot update other users’ posts through this route.","summary":"Update own post (edit or soft delete) in discussion_board_posts.","parameters":[{"name":"id","description":"Unique identifier for the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the post (title, body, is_deleted).","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"Updated post row after changes, all schema fields included.","typeName":"IDiscussionBoardPost"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/posts/{id}","method":"put"},{"specification":"Soft delete a post by ID for the authenticated member—the post's is_deleted flag will be set true, as per discussion_board_posts schema. This is NOT a hard delete (row is retained); instead, is_deleted indicates the post should be hidden for most views. Only the post owner can invoke this endpoint. Action is audited.","description":"Sets is_deleted=true for the specified post in the discussion_board_posts table. This is a soft delete: the post remains in the database but is excluded from normal queries unless specifically requested. Only the owner/member may perform the deletion. There is no deleted_at field; no physical removal occurs. Attachments, likes, and comments are unaffected. Returns confirmation that the soft delete was successful, exposing only fields as defined in schema. Attempts to delete a post not owned by the caller are rejected with a permission error.","summary":"Soft delete own post by ID (mark is_deleted=true).","parameters":[{"name":"id","description":"Unique identifier for the post to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation and updated post record post-soft delete (is_deleted=true).","typeName":"IDiscussionBoardPost"},"authorizationRole":"member","name":"erase","path":"/my/discussion_board/posts/{id}","method":"delete"},{"specification":"Retrieve a filtered, paginated list of post snapshots from the discussion_board_post_snapshots schema, for audit, rollback, or moderation review. Filtering supports available schema fields (discussion_board_post_id, author_member_id, created_at) per system requirements. Only fields in the entity may be referenced: id, discussion_board_post_id, author_member_id, snapshot_body, edit_reason, created_at. Business logic must not introduce additional fields or computed columns.","description":"Returns a list of post snapshots (edit history) from discussion_board_post_snapshots, matching provided filters (e.g., by post ID or author). Response strictly limited to schema-defined fields. Used by moderators/admins for review, rollback, or history viewing. Pagination and complex queries are permitted in the request body, but only schema fields may be included. Results cannot include any joined data or non-existent fields.","summary":"List/edit-history of post snapshots (discussion_board_post_snapshots).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination details for fetching post snapshots.","typeName":"IDiscussionBoardPostSnapshot.IRequest"},"responseBody":{"description":"Paginated list of post snapshots (audit/history records).","typeName":"IPageIDiscussionBoardPostSnapshot"},"authorizationRole":null,"name":"index","path":"/discussion_board/postSnapshots","method":"patch"}],"completed":63,"total":111,"step":0,"created_at":"2025-07-28T08:30:49.888Z"},"tokenUsage":{"facade":{"aggregate":{"total":283217,"input":{"total":262166,"cached":3840},"output":{"total":21051,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":283217,"input":{"total":262166,"cached":3840},"output":{"total":21051,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":283217,"input":{"total":262166,"cached":3840},"output":{"total":21051,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":283217,"input":{"total":262166,"cached":3840},"output":{"total":21051,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Retrieves a single discussion board post snapshot identified by its unique id. This corresponds to reading a historical version of a post, as defined in the discussion_board_post_snapshots table. Only fields present in the actual schema should be used. The endpoint is crucial for reviewing edit history or rollback by moderators/admins. This operation directly supports transparency and audit requirements outlined in the requirements documentation. The id parameter must match an existing snapshot's id (UUID).","description":"This operation fetches a single record from the discussion_board_post_snapshots table, identified by its id. Fields that will be returned are: id, discussion_board_post_id, author_member_id, snapshot_body, edit_reason, and created_at. This allows moderators, admins, or the post author to review the content of the post at a specific point in its revision history, along with who edited it and the stated reason, if any. It is a read-only operation and does not allow for mutation or deletion of snapshot data. This endpoint supports the platform's compliance, audit, and rollback features by exposing the immutable audit trail of post edits. No business logic should reference any field that is not defined in the actual Prisma schema; only the documented fields are included in behavior, validation, and return types.","summary":"Fetch a specific post snapshot by id (discussion_board_post_snapshots table).","parameters":[{"name":"id","description":"Unique identifier of the discussion board post snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post snapshot details from the discussion_board_post_snapshots table.","typeName":"IDiscussionBoardPostSnapshot"},"authorizationRole":null,"name":"at","path":"/discussion_board/postSnapshots/{id}","method":"get"},{"specification":"Search and filter discussion board comments across all posts. This endpoint implements complex comment retrieval logic, optionally including pagination, searching, or filtering, according to properties exposed in the discussion_board_comments table. Only schema-defined fields are processed, and no non-existent fields (such as 'deleted_at') are referenced in logic or queries.","description":"Retrieves a paginated list of comments from the discussion_board_comments table. Supports complex queries such as text search on the 'body' field, filtering by discussion_board_post_id or author_member_id, and filtering on is_deleted, created_at, or updated_at. Ensures that only actual schema fields are considered for search, sorting, and filtering. Results may be consumed by admins, moderators, or public threads (depending on permission). No non-existent or inferred columns are referenced or returned. The requestBody defines allowed search filters only for real schema fields. Used in moderation views, thread rendering, or comment search by end-users.","summary":"List/comments with search, filter, or pagination (discussion_board_comments table).","parameters":[],"requestBody":{"description":"Comment search/filter criteria for discussion_board_comments table fields only.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated result of discussion_board_comments records.","typeName":"IPageDiscussionBoardComment"},"authorizationRole":null,"name":"index","path":"/discussion_board/comments","method":"patch"},{"specification":"Retrieves a specific discussion board comment by its unique id. Intended for reading a comment's details including thread nesting, author, timestamps, and soft-deletion status. Aligns with the structure of the discussion_board_comments table. Only schema-defined fields and direct relationships are referenced.","description":"Fetches a single comment from the discussion_board_comments table using its id (UUID). Returns id, discussion_board_post_id, author_member_id, parent_id (for threading), body, is_deleted, created_at, and updated_at. Exposes the full thread position and author identity for contextual display or moderator review. Does not leak or reference any field that is not present in the schema. Supports both general thread reading and moderation capabilities, while enforcing that all logic references only actual table columns.","summary":"Retrieve a specific comment by id (discussion_board_comments table).","parameters":[{"name":"id","description":"Unique identifier of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Discussion board comment details for the specified id.","typeName":"IDiscussionBoardComment"},"authorizationRole":null,"name":"at","path":"/discussion_board/comments/{id}","method":"get"},{"specification":"Creates a new comment by the authenticated user on a discussion board post, as per the discussion_board_comments table. Strictly enforces creation logic referencing only schema fields. Suitable for members, moderators, or admins who can comment, and ensures compliance with RBAC and permission checks (handled at controller/service).","description":"Adds a new comment under a post by creating a record in the discussion_board_comments table. Accepted fields are: discussion_board_post_id (target post), author_member_id (auto-resolved from authenticated user), parent_id (for threaded/nested comments, optional), body (comment text), and is_deleted (should be set false on creation). Fields such as created_at and updated_at are set by the system. The operation creates only allowed fields as per the schema and does not invent any fields not present in the model. Used for replying to posts or other comments; logic assumes permissions already validated upstream.","summary":"Create a new comment as the authenticated user (discussion_board_comments table).","parameters":[],"requestBody":{"description":"New comment creation data (must only contain fields from schema).","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Created comment entity record.","typeName":"IDiscussionBoardComment"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/comments","method":"post"},{"specification":"Updates an existing comment owned by the authenticated user (membership validated), in the discussion_board_comments table. Accepts only updatable fields present in the schema for comments. No fields are referenced other than those defined in the schema. RBAC ensures only self-owned comments are updatable via this endpoint.","description":"Applies an update to a comment in the discussion_board_comments table owned by the current authenticated user. Allows update only to fields body (comment text) and possibly is_deleted (if supporting soft-deletion for authors, via edit). Other fields such as id, author_member_id, or created_at are immutable and will not be updated. The parent_id may also be updatable if supported by the system logic, but must exist in the schema. The update does not touch unlisted or unrelated fields, and all validation is strictly schema-based. Authorization ensures only the comment's author performs this mutation.","summary":"Update own comment (discussion_board_comments table).","parameters":[{"name":"id","description":"Unique identifier of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields of the comment allowed to be updated. Only schema-defined fields accepted.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated discussion board comment entity.","typeName":"IDiscussionBoardComment"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/comments/{id}","method":"put"},{"specification":"(Hard Delete) Removes an existing comment owned by the authenticated user. As there is no 'deleted_at' or 'deleted_by' field in the Prisma schema, this operation HARD DELETES the comment, permanently removing it from the database table. It will not perform a soft delete. Only schema confirmation is used for logic and description.","description":"Deletes a comment from the discussion_board_comments table by its id, but only if the comment is owned by the authenticated user and RBAC rules validate ownership. As there is no support for soft-deletion (no deleted_at, is_deleted editable on delete), this operation physically removes the row and all related records (via cascades if defined). The action is irreversible. All business logic is restricted to fields and behaviors actually present in the schema. Used for user-requested comment deletion in compliance with system hard-deletion rules.","summary":"Hard-delete own comment (discussion_board_comments table, no soft delete).","parameters":[{"name":"id","description":"Unique identifier of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/comments/{id}","method":"delete"},{"specification":"Lists or searches post attachments in the discussion_board_post_attachments table. The search, filtering, and sorting can only be based on schema-defined fields such as discussion_board_post_id, uploader_member_id, file_name, mime_type, is_deleted, created_at, etc. All filtering, logic, and results adhere strictly to real schema fields.","description":"Retrieves a paginated/sorted list of post attachments from the discussion_board_post_attachments table, supporting filters like post id, uploader, file type, name, or soft-deletion status. Supports complex search via requestBody criteria referencing only schema fields; does not reference or rely on any non-existent or 'virtual' columns. Useful for moderators/admins searching attachments for moderation, or for user file management. Exposes only valid business logic for file records as per the Prisma schema.","summary":"List/search post attachments (discussion_board_post_attachments table).","parameters":[],"requestBody":{"description":"Attachment search/filter criteria, only for schema fields.","typeName":"IDiscussionBoardPostAttachment.IRequest"},"responseBody":{"description":"Paginated list of discussion_board_post_attachments records.","typeName":"IPageDiscussionBoardPostAttachment"},"authorizationRole":null,"name":"index","path":"/discussion_board/postAttachments","method":"patch"},{"specification":"Retrieves a specific post attachment by id from the discussion_board_post_attachments table. The id must match an actual schema field. Only documented fields are retrieved in the response. This operation may be used for download or details view in both user and moderator contexts.","description":"Fetches a post attachment record with all its fields by id, including id, discussion_board_post_id, uploader_member_id, file_uri, file_name, file_size, mime_type, is_deleted, and created_at. Because is_deleted is implemented in the schema, this enables both soft-deleted and normal records to be queried and displayed for audit/history. No non-existent field is referenced or exposed. Suitable for moderators, attachment audits, or user download actions. Business logic and validation only reference schema-documented columns.","summary":"Retrieve a specific post attachment by id (discussion_board_post_attachments table).","parameters":[{"name":"id","description":"Unique identifier of the post attachment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post attachment metadata.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRole":null,"name":"at","path":"/discussion_board/postAttachments/{id}","method":"get"},{"specification":"Creates a new post attachment by the authenticated user and stores the file metadata in the discussion_board_post_attachments table. Accepts only creation fields defined in the schema. The endpoint ensures permission enforcement, storage quota, and validation strictly according to schema.","description":"Uploads and registers a new attachment for a post as the logged-in user. Accepted input fields are: discussion_board_post_id (target post), uploader_member_id (derived from current user), file_uri (storage URI of attachment), file_name (display label), file_size (bytes), mime_type, is_deleted (should be set false on creation), and created_at (system-generated). Input must reference only fields present in the Prisma schema. The operation does NOT use or invent any fields unauthorised by schema definition. Used by members, moderators, or admins to add files/images/media to discussion board posts. RBAC and validation are handled upstream.","summary":"Create a new post attachment as the authenticated user (discussion_board_post_attachments table).","parameters":[],"requestBody":{"description":"Schema-compliant metadata for the new post attachment upload.","typeName":"IDiscussionBoardPostAttachment.ICreate"},"responseBody":{"description":"The created post attachment metadata record.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/postAttachments","method":"post"},{"specification":"Updates an existing post attachment belonging to the authenticated user. Only updatable fields present in discussion_board_post_attachments are allowed for update. Ensures all update logic references strictly the schema's allowed fields. The endpoint is protected so that only the owning member can update their attachment.","description":"Updates one or more fields in a post attachment owned by the authenticated member (controlled via RBAC at the controller/service level). Only fields as defined in the schema are allowed for updates, e.g., file_name, mime_type, is_deleted. Fields such as id, discussion_board_post_id, uploader_member_id, and created_at are immutable and not modifiable. Supports updating file metadata or soft-declaration of deletion for own files. Operation is strictly limited to schema-defined fields. Used for user-driven file management or soft-removal request.","summary":"Update own post attachment (discussion_board_post_attachments table).","parameters":[{"name":"id","description":"Unique identifier of the post attachment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Schema-compliant update data; only allowed fields are modifiable.","typeName":"IDiscussionBoardPostAttachment.IUpdate"},"responseBody":{"description":"Updated post attachment metadata record.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/postAttachments/{id}","method":"put"},{"specification":"Deletes (soft-delete) an attachment owned by the authenticated user, using the is_deleted field defined in the discussion_board_post_attachments table. Because the schema contains is_deleted but no deleted_at, deletion action sets is_deleted to true without removing the physical record (soft delete). Only references actual fields in the schema. Hard deletion (physical row removal) is not supported by schema.","description":"Marks an attachment as deleted by setting is_deleted field to true, if (and only if) the file attachment is owned by the requesting authenticated user. All other data remains, and the record is NOT physically removed. This allows for audit/logging of file deletions and supports moderation requirements for viewing removed files. This is only possible because is_deleted exists in the schema. No field outside the schema is referenced or modified during the delete action. Used for user-requested removal of previously uploaded files, matching business logic requirements for soft deletion and auditability.","summary":"Soft-delete own post attachment (discussion_board_post_attachments table, uses is_deleted).","parameters":[{"name":"id","description":"Unique identifier of the post attachment to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/postAttachments/{id}","method":"delete"},{"specification":"Lists or searches post likes (upvotes/downvotes) according to the discussion_board_post_likes table. Supports pagination, filtering, and search capabilities only for actual schema fields. Fields supported are discussion_board_post_id, author_member_id, is_like, and created_at. Strictly avoids referencing non-existing properties. Intended for analytics, audit, or per-post feedback summaries.","description":"Retrieves a list or paginated view of records from the discussion_board_post_likes table, supporting query by post, user, like/dislike flag, and timestamp. Front-end clients or backend analytics modules may use this endpoint to present engagement data, per-user voting records, or general statistics. Input and output strictly reference allowed schema properties; no hidden or virtual field logic is present. Security and access handled in controller/service layer according to RBAC and platform policies.","summary":"List/search post like records (discussion_board_post_likes table).","parameters":[],"requestBody":{"description":"Pagination and filter/search criteria for post likes (allowed schema fields only).","typeName":"IDiscussionBoardPostLike.IRequest"},"responseBody":{"description":"Paginated list of post like records matching criteria.","typeName":"IPageDiscussionBoardPostLike"},"authorizationRole":null,"name":"index","path":"/discussion_board/postLikes","method":"patch"}],"completed":75,"total":111,"step":0,"created_at":"2025-07-28T08:30:56.937Z"},"tokenUsage":{"facade":{"aggregate":{"total":324641,"input":{"total":300194,"cached":3840},"output":{"total":24447,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":324641,"input":{"total":300194,"cached":3840},"output":{"total":24447,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":324641,"input":{"total":300194,"cached":3840},"output":{"total":24447,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":324641,"input":{"total":300194,"cached":3840},"output":{"total":24447,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Retrieve a specific discussion board post like/dislike entry by unique ID. This operation fetches a single record from the discussion_board_post_likes table by its primary key (id). All fields in the response (id, discussion_board_post_id, author_member_id, is_like, created_at) must directly correspond to the schema. No additional fields (e.g., deleted_at, created_by) are available. This operation is read-only and should not reveal information about the member unless permissions are met. Use for audit, UI feedback, or moderation purposes.","description":"This operation returns the details of a single post like/dislike as stored in the discussion_board_post_likes table. Each like/dislike is uniquely identified by its UUID primary key. The returned object includes the ID, the post being liked/disliked, the author member ID, a boolean indicating whether it is a like (true) or dislike (false), and the timestamp it was created. Only the fields defined in the schema (id, discussion_board_post_id, author_member_id, is_like, created_at) are included in the response. This endpoint enables clients or moderation systems to display, audit, or validate individual feedback actions given by users. If the like/dislike with the provided ID does not exist, an appropriate error is returned. Permissions may restrict which users can access this data (e.g., only likes/dislikes on accessible posts).","summary":"Fetch a single post like/dislike record from discussion_board_post_likes by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) for the post like/dislike record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single discussion_board_post_likes entity with its fields (id, discussion_board_post_id, author_member_id, is_like, created_at).","typeName":"IDiscussionBoardPostLike"},"authorizationRole":null,"name":"at","path":"/discussion_board/postLikes/{id}","method":"get"},{"specification":"Create a like or dislike entry for a post for the authenticated user. This endpoint inserts a new record into discussion_board_post_likes, recording whether the user liked or disliked a given post. It requires the post's ID, the user's member ID (resolved from authentication context), the is_like boolean indicating like/dislike, and strictly adheres to the schema (no deleted_at/created_by fields).","description":"Creates a like or dislike entry for a post on behalf of the currently authenticated member. The request body specifies the ID of the target post, the boolean is_like flag (true for like, false for dislike), and the system infers the acting user's member ID from authentication. Only these fields are required; others are filled by the backend as per schema. If the user has already liked/disliked the post, this may return an error (unique constraint: post+user). The response includes the full created entity (id, discussion_board_post_id, author_member_id, is_like, created_at). No deleted_at/created_by fields are included or supported.","summary":"Create a like/dislike record on a post for the current user (discussion_board_post_likes)","parameters":[],"requestBody":{"description":"Details for creating a post like/dislike entry (post ID, is_like flag).","typeName":"IDiscussionBoardPostLike.ICreate"},"responseBody":{"description":"The created post like/dislike record as stored in discussion_board_post_likes.","typeName":"IDiscussionBoardPostLike"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/postLikes","method":"post"},{"specification":"Update an existing post like/dislike entry for the authenticated user. This operation allows the user to modify their like/dislike (e.g., switch from like to dislike) on a given post, identified by the record's id. It updates the is_like field and updates the created_at if needed (per schema), with no support for deleted_at or similar fields.","description":"Enables a member to update the type (like/dislike) for a post they have previously reacted to by targeting the record's unique ID. The request body includes the updated is_like boolean, and the backend ensures ownership via authentication. According to the schema, only the is_like flag can be changed; no other fields like deleted_at/created_by can be referenced. An error is returned if the provided ID does not belong to the currently authenticated member. Response returns the updated like/dislike entry with all its schema fields (id, discussion_board_post_id, author_member_id, is_like, created_at). Audit logs should be maintained via the action_histories table.","summary":"Update an existing post like/dislike record for the current user (discussion_board_post_likes).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the like/dislike record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for a post like/dislike entry (is_like only).","typeName":"IDiscussionBoardPostLike.IUpdate"},"responseBody":{"description":"The updated post like/dislike entry as stored in discussion_board_post_likes.","typeName":"IDiscussionBoardPostLike"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/postLikes/{id}","method":"put"},{"specification":"Delete a post like/dislike record for the authenticated user, performing a hard delete. The discussion_board_post_likes table does NOT contain a soft-delete field, so the entry is permanently removed by this operation. The deletion is only allowed if the like/dislike belongs to the acting user (ownership enforced via authentication).","description":"Removes an existing like/dislike record from discussion_board_post_likes for the current member user. Since there is no soft-deletion field (e.g., is_deleted or deleted_at) in the schema, this action immediately and irreversibly deletes the row. Users can only delete their own like/dislike entries (authorization enforced). If the record does not belong to the user or does not exist, an appropriate error is returned. This endpoint should be audited using the action_histories or audit_trails table as appropriate.","summary":"Delete a post like/dislike record performed by the current member (hard delete from discussion_board_post_likes).","parameters":[{"name":"id","description":"Unique identifier (UUID) for the post like/dislike record to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/postLikes/{id}","method":"delete"},{"specification":"Searches for and returns a paginated list of reports submitted to moderation in discussion_board_reports. This operation supports advanced querying, filtering by status (resolved), reporter, reported entity, reason, etc., for both user and moderator/admin roles. Returns summary details for each report, with fields listed as per the schema. No deleted_at/created_by fields are referenced; filtering is by available columns (e.g., resolved, created_at, reported_entity_type, etc.). Results can be paginated and sorted.","description":"Allows clients to search and retrieve reports made regarding inappropriate or rule-violating content on the board. Reports may be filtered by reporter (reporter_id), resolution status (resolved), reported_entity_type (post, comment, user), report reason, or timestamp ranges as per schema fields. The returned data contains summary info for each report (id, reporter_id, reason_id, reported_entity_id, reported_entity_type, description, created_at, resolved) adhering strictly to available schema columns. There are no fields such as deleted_at or created_by in this table. Pagination and sorting options should be present in the request body for large datasets.","summary":"Search and paginate over reports in discussion_board_reports with supported filters.","parameters":[],"requestBody":{"description":"Search/filter parameters for reports list: e.g. resolved status, reported_entity_type, reporter_id, reason_id, created_at paging.","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated result of discussion_board_reports entities as summary objects.","typeName":"IPageIDiscussionBoardReport"},"authorizationRole":null,"name":"index","path":"/discussion_board/reports","method":"patch"},{"specification":"Retrieves a single report record from discussion_board_reports by its primary key id. Only schema fields are returned: id, reporter_id, reason_id, reported_entity_id, reported_entity_type, description, created_at, resolved. No additional metadata or fields are present even for moderation purposes.","description":"Returns details of a specific report referencing inappropriate or problematic content. The report is identified by its UUID primary key. The returned object includes all available schema fields (id, reporter_id, reason_id, reported_entity_id, reported_entity_type, description, created_at, resolved). No soft-deletion field or extra audit metadata is available in this table. This endpoint is typically used for detailed moderation UI or audit workflows, and errors if the provided ID does not exist.","summary":"Get a single report's detail from discussion_board_reports by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) for the report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single discussion_board_reports entity by its fields.","typeName":"IDiscussionBoardReport"},"authorizationRole":null,"name":"at","path":"/discussion_board/reports/{id}","method":"get"},{"specification":"Enables a member to file a new content report in discussion_board_reports. The request body requires valid reporter, reason, entity id/type, and optional description. Only the fields present in the schema may be used. Records are created with resolved=false and are visible for moderation review. No deleted_at or similar audit fields are present.","description":"Allows an authenticated member to submit a new report about inappropriate or rule-violating content (post, comment, user, etc.), filling in the required fields: reporter_id (from the authenticated user), reason_id (from standardized reasons), reported_entity_id (UUID of the entity), reported_entity_type (string classification), and optional description. The timestamp is set by the backend. All other schema-defined fields are filled and returned. Reports start as unresolved (resolved=false). Only schema-approved columns are utilized; deleted_at or similar are NOT present.","summary":"Submit a new report (content flag) as a member (creates discussion_board_reports row).","parameters":[],"requestBody":{"description":"Details of the report to create—reason_id, reported_entity_id, reported_entity_type, optional description.","typeName":"IDiscussionBoardReport.ICreate"},"responseBody":{"description":"The created report object as per discussion_board_reports table.","typeName":"IDiscussionBoardReport"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/reports","method":"post"},{"specification":"Allows an admin to update report resolution status or details in discussion_board_reports. The only mutable schema field is resolved (boolean); description can also be updated. This operation is to close reports, update reason text or mark as processed. No deleted_at or created_by fields exist.","description":"Permits an admin user to update a report's status or information, typically to resolve it or add notes/details. Only the fields 'resolved' and 'description' according to schema may be modified – all updates must match allowed schema properties. This is used during moderation flows to mark a report as closed (resolved=true), to enter additional moderation explanation, etc. Actions here are auditable via moderation logs. If a non-existent report id is supplied, or the admin lacks permission, an error is returned. Other schema fields are not affected or changeable.","summary":"Update (resolve/annotate) an existing report record as admin (discussion_board_reports).","parameters":[{"name":"id","description":"Unique identifier (UUID) for the report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for a report: resolved status, optional description.","typeName":"IDiscussionBoardReport.IUpdate"},"responseBody":{"description":"The updated report entry from discussion_board_reports.","typeName":"IDiscussionBoardReport"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/reports/{id}","method":"put"},{"specification":"Deletes a report from the discussion_board_reports table by its ID as an admin. This is a hard delete as no soft-deletion field exists in the schema. This operation permanently removes the reported entity—only for use by authorized admins and fully auditable via logs.","description":"Allows a system admin to irreversibly delete a report entry from the moderation table. The operation targets a report by its unique UUID and removes the row from the database. No soft-deletion or recovery is possible, as the schema does not provide a deleted_at, is_deleted, or similar field. This action is logged to the system's audit or moderation trail per accountability guidelines. If the ID does not exist or is not allowed for the acting user, an error is raised.","summary":"Hard delete a report entity from discussion_board_reports as admin.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the report to be permanently deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/reports/{id}","method":"delete"},{"specification":"Provides a paginated, filterable list over report reasons from discussion_board_report_reasons. Clients may filter by active status and/or partial matches on reason_text. No additional fields are returned; only schema-defined fields may be used.","description":"Enables clients to search and enumerate the standardized reasons users can select when reporting content. Filters supported include reason_text (substring search for e.g. 'spam'), active status (include/exclude inactive reasons), and created_at pagination or sorting. Result entries adhere strictly to the schema: id, reason_text, active, created_at. Used in both user-facing reporting UI and moderation analytics or configuration panels. No fields such as deleted_at or created_by exist in this table.","summary":"Search and paginate report reasons in discussion_board_report_reasons.","parameters":[],"requestBody":{"description":"Supported filter parameters (e.g., active status, reason_text partial match, created_at sorting/paging).","typeName":"IDiscussionBoardReportReason.IRequest"},"responseBody":{"description":"Paginated list of report reasons as defined in discussion_board_report_reasons.","typeName":"IPageIDiscussionBoardReportReason"},"authorizationRole":null,"name":"index","path":"/discussion_board/reportReasons","method":"patch"},{"specification":"Fetches a single discussion_board_report_reasons entry by its unique ID. Returns all schema-defined fields: id, reason_text, active, and created_at. No additional fields are provided (e.g., deleted_at, created_by).","description":"Returns the details for a specific report reason, used in report submission and moderation analytics. The returned object contains all designated schema fields for discussion_board_report_reasons: id (UUID), reason_text (label describing the reason), active (boolean status indicating if selectable), and created_at (timestamp for creation of the reason entry). No soft-deletion data or metadata about creation is available; only exact schema fields are present.","summary":"Get a single report reason entry from discussion_board_report_reasons by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) for the report reason to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single report reason entity object as per schema definition.","typeName":"IDiscussionBoardReportReason"},"authorizationRole":null,"name":"at","path":"/discussion_board/reportReasons/{id}","method":"get"},{"specification":"Creates a new standardized report reason in discussion_board_report_reasons as an admin configuration operation. The request defines the reason_text (e.g., 'Spam'), whether it is active, and the backend sets ID/created_at. No other fields (e.g., deleted_at, created_by) are present. Only admin users are authorized to perform this API call.","description":"Permits a system admin to add a new reportable reason to the standardized set selectable during report submission. The request body defines reason_text (string, e.g., 'Harassment') and whether it is active (boolean); backend assigns UUID and timestamps. Schema is strictly enforced, so only id, reason_text, active, and created_at are present. No additional tracking fields (deleted_at, created_by, etc.) exist. Response returns the full record of the new reason as defined in schema.","summary":"Admin creates a new report reason to be used in discussion_board_report_reasons.","parameters":[],"requestBody":{"description":"Fields to create a new report reason entry (reason_text, active status).","typeName":"IDiscussionBoardReportReason.ICreate"},"responseBody":{"description":"The created report reason entity from discussion_board_report_reasons.","typeName":"IDiscussionBoardReportReason"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/reportReasons","method":"post"}],"completed":87,"total":111,"step":0,"created_at":"2025-07-28T08:31:10.922Z"},"tokenUsage":{"facade":{"aggregate":{"total":366280,"input":{"total":338229,"cached":3840},"output":{"total":28051,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":366280,"input":{"total":338229,"cached":3840},"output":{"total":28051,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":366280,"input":{"total":338229,"cached":3840},"output":{"total":28051,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":366280,"input":{"total":338229,"cached":3840},"output":{"total":28051,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Updates an existing report reason in the discussion_board_report_reasons table. This operation allows administrators to modify the reason_text, active status, or other allowed fields for report reasons that are used by users to classify the type of report they submit about content (such as 'Spam', 'Harassment', etc). It can be used for rewording reasons, toggling their active status, or correcting descriptions, but strictly references only fields present in the schema. It must NOT reference any fields not existing in the Prisma schema. This operation is for system administrators only, allowing no changes to ID or historical audit linkage. The entity has no soft delete field; thus, this is a direct update.","description":"This endpoint enables administrators to update specific fields (reason_text and active) of an existing discussion_board_report_reasons entity. The API only permits modification of fields that exist in the schema—namely, reason_text, active, and optionally updates created_at if necessary, as well as other allowed properties. There is no soft-delete mechanism for reasons; removal or disabling must use the 'active' field. All updates are tracked for audit via action logs, and attempts to update immutable fields or non-existent properties will result in an error. This maintains schema normalization and supports moderator analytics (such as updating reason explanations based on new moderation needs).","summary":"Update a report reason (discussion_board_report_reasons) record by ID as an admin.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the report reason to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated values for the report reason. Only fields that exist in the Prisma schema may be specified.","typeName":"IDiscussionBoardReportReason.IUpdate"},"responseBody":{"description":"Returns the updated report reason object, reflecting the new values (reason_text, active, created_at).","typeName":"IDiscussionBoardReportReason"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/reportReasons/{id}","method":"put"},{"specification":"Permanently deletes a report reason from the discussion_board_report_reasons table. This operation removes the record based on its id and is intended for administrator use only. Since the entity discussion_board_report_reasons does not have a soft-delete flag (such as is_deleted or deleted_at), deletion irreversibly removes the report reason, subject to referential integrity (the reason must not be in active use by discussion_board_reports).","description":"This API endpoint allows administrators to perform a hard delete of a report reason from the discussion_board_report_reasons table, using the unique identifier (id). As there is no soft deletion, this permanently removes the entry, and attempts to delete a report reason currently in use by existing reports will result in an integrity exception. The operation is fully auditable via logs, and no user-facing fields other than id are required. Use with care, as deletion is irreversible and may affect moderation analytics/history.","summary":"Delete a report reason (discussion_board_report_reasons) by ID as an admin (hard delete).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the report reason to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/reportReasons/{id}","method":"delete"},{"specification":"Creates a new admin or moderator action on a report (discussion_board_report_actions table). This endpoint is used by administrators to log when an action such as removing content, warning a user, or resolving a report occurs as part of the moderation workflow. Only fields present in the schema may be referenced—admin_id, moderator_id, report_id, action_type, action_notes, and created_at.","description":"This admin endpoint allows administrators to create a new record in discussion_board_report_actions, tracking an action (such as content removal, warnings, etc.) associated with moderation reports. Required fields include report_id, action_type, and optionally admin_id or moderator_id (one or both may be set depending on actor). action_notes and created_at can be provided as needed. No omitted or fake fields are permitted; all relationship pointers and audit fields must match the schema.","summary":"Create a new report action (discussion_board_report_actions) as admin.","parameters":[],"requestBody":{"description":"The report action to create. Only schema fields (admin_id, moderator_id, report_id, action_type, action_notes, created_at) are permitted.","typeName":"IDiscussionBoardReportAction.ICreate"},"responseBody":{"description":"The created report action instance, including all schema-defined fields.","typeName":"IDiscussionBoardReportAction"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/reportActions","method":"post"},{"specification":"Search/filter discussion_board_report_actions (admin moderation actions on reports), with pagination, search, and sort options, returning a list of report action objects. Only schema fields can be employed in querying or filtering—do not reference any extra or virtual fields.","description":"This endpoint allows administrators to search and list report actions (discussion_board_report_actions), supporting pagination (offset/limit), sorting (by action_type, created_at, etc.), and filtering by schema fields (admin_id, moderator_id, report_id, etc.). Results are strictly limited to fields present in the schema. Used for moderator and admin dashboards to audit and review moderation actions taken on reports.","summary":"List/search report actions (discussion_board_report_actions) as admin with pagination and filters.","parameters":[],"requestBody":{"description":"Filter and search parameters for report actions; all keys must correspond to fields in discussion_board_report_actions, such as action_type or report_id.","typeName":"IDiscussionBoardReportAction.IRequest"},"responseBody":{"description":"Paginated result set of report actions, each being a report action object defined in the schema.","typeName":"IPageIDiscussionBoardReportAction"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/reportActions","method":"patch"},{"specification":"Retrieve details for a single report action (discussion_board_report_actions), identified by its id. This admin-only endpoint returns all schema fields for the given report action, providing detailed audit/logging and moderation review. It must restrict output to fields that exist in the database entity.","description":"This endpoint gets a specific report action (discussion_board_report_actions) by unique ID for admin users. Returned data includes only schema-defined properties (admin_id, moderator_id, report_id, action_type, action_notes, created_at). Used for compliance, dispute review, and auditing moderation workflows.","summary":"Retrieve single report action (discussion_board_report_actions) by ID as admin.","parameters":[{"name":"id","description":"The unique identifier (UUID) for the report action to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single report action object with all schema fields.","typeName":"IDiscussionBoardReportAction"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/reportActions/{id}","method":"get"},{"specification":"Creates a moderation log entry (discussion_board_moderation_logs table) to permanently record significant admin or moderator actions for compliance and audit. Only schema fields are referenced—report_id, admin_id, moderator_id, log_type, details, created_at. Used exclusively by admin role.","description":"This endpoint allows admins to create an immutable moderation log entry. Required fields are log_type, admin_id or moderator_id (at least one of them), and optional report_id and details. created_at is set automatically or can be provided for precise sequencing. No fake or non-schema fields are permitted. This supports compliance requirements, post-hoc reviews, and appeals tracing.","summary":"Create a moderation log entry (discussion_board_moderation_logs) as admin.","parameters":[],"requestBody":{"description":"The moderation log entry to create. Must align exactly with schema fields, such as log_type, admin_id, moderator_id, details, report_id, and created_at.","typeName":"IDiscussionBoardModerationLog.ICreate"},"responseBody":{"description":"The created moderation log entry, containing all schema-defined fields.","typeName":"IDiscussionBoardModerationLog"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/moderationLogs","method":"post"},{"specification":"Search and list moderation log entries (discussion_board_moderation_logs) for auditing, compliance, and transparency. This patch operation enables admins to search by any field present in the schema—log_type, report_id, admin_id, moderator_id, details, created_at, etc.—and includes pagination and sorting per standard list patterns.","description":"This admin endpoint allows searching, paginating, and sorting moderation log records strictly by fields defined in the discussion_board_moderation_logs schema. Used in compliance dashboards, appeals tracing, and system audits. It supports offset/limit, filter by log_type or actor, and sorts by created_at, etc. Non-defined/virtual fields are not allowed. Each result in the response is a moderation log object conforming to the schema.","summary":"List/search moderation logs (discussion_board_moderation_logs) as admin with pagination, filtering, and sorting.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for moderation logs; only schema-defined keys allowed, such as log_type, admin_id, created_at, etc.","typeName":"IDiscussionBoardModerationLog.IRequest"},"responseBody":{"description":"Paginated result set of moderation logs (schema-defined objects).","typeName":"IPageIDiscussionBoardModerationLog"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/moderationLogs","method":"patch"},{"specification":"Retrieves full details for a single moderation log entry using its unique identifier (id) for audit/compliance. The data returned is strictly limited to fields present in the discussion_board_moderation_logs table.","description":"This operation enables admin users to view a single moderation log entry (discussion_board_moderation_logs) by id, returning all schema-compliant fields such as log_type, admin_id, moderator_id, details, created_at, and any linked report_id. Used for detailed auditing and compliance checks. Any referenced fields not present in schema are not returned.","summary":"Get moderation log entry (discussion_board_moderation_logs) by ID as admin.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the moderation log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The moderation log entry object (all schema fields populated).","typeName":"IDiscussionBoardModerationLog"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/moderationLogs/{id}","method":"get"},{"specification":"Creates a flagged content record (discussion_board_flagged_content table) for moderation teams to track items automatically or manually flagged for review. Fields include flagged_by_admin_id, flagged_by_moderator_id, flagged_entity_id, flagged_entity_type, flag_type, reason, cleared, and created_at. Admin use only.","description":"This admin endpoint allows the creation of a flagged content record solely using fields permitted by schema: flagged_by_admin_id, flagged_by_moderator_id, flagged_entity_id, flagged_entity_type, flag_type, reason, cleared, created_at. No soft delete or non-existent fields are used. Used for monitoring items that require extra attention before a formal report is submitted. This operation supports manual and automated moderation workflows.","summary":"Create a flagged content record (discussion_board_flagged_content) as admin.","parameters":[],"requestBody":{"description":"The flagged content data to record for moderation tracking; every key corresponds to a schema field.","typeName":"IDiscussionBoardFlaggedContent.ICreate"},"responseBody":{"description":"The flagged content record representing the item flagged for review.","typeName":"IDiscussionBoardFlaggedContent"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/flaggedContent","method":"post"},{"specification":"Retrieves a paginated, filterable list of flagged content records (discussion_board_flagged_content) for admin review. Supports filtering and sorting using only fields defined in schema, such as flagged_entity_type, cleared, created_at, flagged_by_admin_id, flagged_by_moderator_id, etc.","description":"This endpoint is used by admins to list, filter, and sort flagged contents awaiting moderation. Standard pagination (offset/limit), filter by any allowable fields (such as flagged_entity_type, cleared, flagged_by_admin_id, flagged_by_moderator_id), and sorts are provided. Returns a paginated set of flagged content records, all fields confined to those defined in the table. Used for moderation dashboards and compliance monitoring.","summary":"List/search flagged content (discussion_board_flagged_content) as admin, with pagination and filters.","parameters":[],"requestBody":{"description":"Search/filter and pagination parameters, strictly matching schema keys only.","typeName":"IDiscussionBoardFlaggedContent.IRequest"},"responseBody":{"description":"Paginated flagged content records (all schema fields).","typeName":"IPageIDiscussionBoardFlaggedContent"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/flaggedContent","method":"patch"},{"specification":"Retrieves a single flagged content record (discussion_board_flagged_content) by its unique id for admin inspection. Output strictly follows field definitions from the database model.","description":"Get a specific flagged content entity (discussion_board_flagged_content) by id for admin review. The response provides all defined schema fields; non-schema properties are never included.","summary":"Retrieve flagged content (discussion_board_flagged_content) by ID as admin.","parameters":[{"name":"id","description":"The UUID of the flagged content record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The flagged content entity matching the id (all schema fields).","typeName":"IDiscussionBoardFlaggedContent"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/flaggedContent/{id}","method":"get"},{"specification":"Returns a paginated, filterable list of notifications (discussion_board_notifications) for the authenticated user (member, moderator, or admin). Allows filtering and sorting only by fields present in the schema (such as is_read, delivered_at, read_at, type, and content); no field outside of the schema may be used.","description":"This operation provides the authenticated user with their notification inbox. It supports searching/filtering by is_read status, notification type, content keywords, delivered_at, or read_at. Pagination and sorting are available. Returned fields include only those actual columns on the discussion_board_notifications table. The endpoint is public in path, but requires user authentication to ensure only the correct user's notifications are visible.","summary":"Get a paginated/filterable list of notifications (discussion_board_notifications) for the authenticated user.","parameters":[],"requestBody":{"description":"Search and pagination criteria; all keys must align with schema columns, e.g., is_read, type, delivered_at, etc.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated notification objects, strictly using table-defined fields.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRole":"member","name":"index","path":"/discussion_board/notifications","method":"patch"}],"completed":99,"total":111,"step":0,"created_at":"2025-07-28T08:31:11.146Z"},"tokenUsage":{"facade":{"aggregate":{"total":460066,"input":{"total":425533,"cached":3840},"output":{"total":34533,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":460066,"input":{"total":425533,"cached":3840},"output":{"total":34533,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":460066,"input":{"total":425533,"cached":3840},"output":{"total":34533,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":460066,"input":{"total":425533,"cached":3840},"output":{"total":34533,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Deletes a specific administrator assignment from the discussion_board_admins table. This operation permanently removes the admin role from the associated user (field: discussion_board_user_profile_id) based on the unique id. There is no soft-delete field; deletion is permanent. This helps in demoting users from admin status and is typically only allowed for super-admin operations. The operation does NOT affect the user profile or other roles—only the admin assignment entry is removed from the table. All action and audit trails referencing this admin assignment will remain, as per database normalization and audit requirements. This aligns strictly with the actual Prisma schema: no deleted_at or similar fields exist.","description":"This API endpoint permanently removes an administrator assignment from the discussion_board_admins table by the provided id. There is no soft delete; the row is fully removed. The endpoint should only be accessible by users with administrative authority. It does not alter the underlying user profile or revoke other roles—a user can still have other roles (such as member or moderator) if those assignments exist. All administrative actions must be auditable per platform requirements. Related logs and references remain intact. Deletion cannot be undone, as there is no deleted_at field in the schema.","summary":"Permanently delete an administrator assignment from the discussion_board_admins table (hard delete; no soft delete fields).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the admin assignment to delete from discussion_board_admins.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/admins/{id}","method":"delete"},{"specification":"Creates a new moderator assignment for a user in the discussion_board_moderators table. Requires the discussion_board_user_profile_id and assigned_by_user_profile_id fields as per schema. It stores the assignment's creation time (assigned_at). The operation must enforce that a user profile can only have a single active moderator assignment. This endpoint is for admin (or higher authority) use and relates directly to role elevation in discussion board RBAC workflows. Confirm that moderator assignments are auditable and can be revoked (revoked_at), but revoked_at is null at creation.","description":"This API endpoint creates a new moderator assignment for the specified user profile. The admin specifies the user to be granted moderator status using discussion_board_user_profile_id. The assigned_at field records the timestamp of assignment, and assigned_by_user_profile_id identifies who made the assignment. Each user can only be a moderator once (unique per profile). Upon creation, the assignment is active (revoked_at null). The operation must comply with auditability and admin-only access controls. No additional fields are referenced; only those present in the schema are supported.","summary":"Assign moderator role to a user by creating a new entry in discussion_board_moderators.","parameters":[],"requestBody":{"description":"Information necessary to create a new moderator assignment, including user profile ID and the assigning admin's user profile ID.","typeName":"IDiscussionBoardModerator.ICreate"},"responseBody":{"description":"Details of the created moderator assignment.","typeName":"IDiscussionBoardModerator"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/moderators","method":"post"},{"specification":"Retrieves a list or search of moderator assignments from the discussion_board_moderators table. Each record includes the assigned user profile, assignment status, and related audit fields as per the schema. Querying allows for filtering by assignment status (revoked_at null = active), assignment times, and assigned_by_user_profile_id. The endpoint is designed for admin operational views, supporting role and moderation audits. It returns only actual fields in the schema and supports search by indexed fields.","description":"This API endpoint provides a paginated or filtered list of all moderator role assignments. Results include each moderator's unique id, associated discussion_board_user_profile_id, assigned_at timestamp, optional revoked_at, and who performed the assignment. Allows for filtering by active or revoked status. No sensitive user details outside assignment information are exposed. Access is restricted to admin users for RBAC compliance.","summary":"List and search moderator assignments in discussion_board_moderators, filtered as needed for admin operations.","parameters":[],"requestBody":{"description":"Parameters to filter and page through moderator role assignments. Filters use schema fields only.","typeName":"IDiscussionBoardModerator.IRequest"},"responseBody":{"description":"A paginated list of moderator assignments, with all relevant schema fields included.","typeName":"IPageIDiscussionBoardModerator"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/moderators","method":"patch"},{"specification":"Retrieves details for a specific discussion_board_moderators row, as referenced by its id. Returns all fields: unique id, discussion_board_user_profile_id, assigned_at, revoked_at (nullable), and assigned_by_user_profile_id. Supports admin review, audit, and detailed RBAC operations. No fields outside schema are referenced.","description":"Fetches complete details for a single moderator assignment, including unique id, linked user profile ID, assignment timestamp, optional revocation timestamp for role history, and the ID of the assigning admin. Access should require admin privileges for RBAC integrity. The endpoint supports viewing moderator audit information and role change workflow reviews.","summary":"Get full information about a specific moderator assignment.","parameters":[{"name":"id","description":"Unique identifier (UUID) for the moderator assignment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment details as per discussion_board_moderators schema.","typeName":"IDiscussionBoardModerator"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/moderators/{id}","method":"get"},{"specification":"Updates a specific discussion_board_moderators row, identified by unique id. All fields in the schema may be updated except for id. Particularly, revoked_at may be set (demoting moderator), or audit fields may be adjusted as per business logic. Only the actual schema fields can be modified.","description":"This endpoint lets an admin update moderator assignment details for a specific moderator. It allows setting the revoked_at timestamp to deactivate moderator privileges, as well as updating assignment information. Only fields in the schema (discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id) are valid. No non-schema fields are referenced or used. Requires admin privileges as per RBAC, and all actions must be auditable.","summary":"Update moderator assignment information by id.","parameters":[{"name":"id","description":"Moderator assignment's unique id to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for moderator assignment, strictly limited to those in the Prisma schema.","typeName":"IDiscussionBoardModerator.IUpdate"},"responseBody":{"description":"Updated moderator assignment details reflecting schema constraints.","typeName":"IDiscussionBoardModerator"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/moderators/{id}","method":"put"},{"specification":"Permanently deletes a moderator assignment from the discussion_board_moderators table, as identified by unique id. No soft delete fields exist in the table, so the operation is destructive—removing the assignment entirely. Other role assignments or the user profile are not affected. RBAC and audit rules apply; only admins should perform this operation. Related logs, reports, and references remain unaffected by this delete.","description":"This API endpoint permanently removes a moderator assignment entry (the moderator role) from the table via hard delete. There is no soft-delete: deleted_at or is_deleted fields do not exist in discussion_board_moderators schema. Use case is for fully removing moderator permissions from a user (demotion or termination of moderator privileges), not deleting the user itself. All related audit records persist. Only admins may invoke this operation for security and compliance.","summary":"Hard delete a moderator role assignment from discussion_board_moderators (no soft delete).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the moderator assignment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/moderators/{id}","method":"delete"},{"specification":"Retrieves a paginated/searchable list of member assignments from discussion_board_members. Supports filters on joined_at, left_at, and user profile linkage. Each record includes role membership (active if left_at is null), linking to the discussion_board_user_profile_id, and auditing join/left times. Returns only schema fields. Designed for general membership roster, audit, or user search views. No personal information beyond schema is included.","description":"This API returns a paginated/searchable list of all membership assignments in the discussion board. Each result includes the unique id, discussion_board_user_profile_id, joined_at, and optionally left_at (active if null). This endpoint is intended for membership audits, user management, or listing current/past members. No other user profile or private data is included beyond defined schema fields. Publicly or authenticated-accessible as per platform policy. Role assignment history can be inferred from join/leave times. Allows filtered searching by joined_at and left_at.","summary":"List/search member assignment records from discussion_board_members.","parameters":[],"requestBody":{"description":"Query parameters for searching/filtering member assignments by schema fields.","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated list of member assignment entries (past and present), schema fields only.","typeName":"IPageIDiscussionBoardMember"},"authorizationRole":"member","name":"index","path":"/discussion_board/members","method":"patch"},{"specification":"Fetches details for a single member assignment from the discussion_board_members table. Returns all fields: unique id, linked user profile id, joined_at, and left_at (nullable). This operation enables review of a member's board participation history and current status. There are no soft-delete or audit fields outside schema. Authenticated member-level or above required to access.","description":"Retrieves detailed information about a specific member's discussion board assignment by id. Returned fields: id, discussion_board_user_profile_id, joined_at, and left_at. The endpoint supports user audit, membership verification, and RBAC assignment review. Access may require user authentication, depending on platform policy. Only actual schema fields are referenced or exposed—no extraneous user or membership information is included.","summary":"Get details for a specific discussion_board_members entry by id.","parameters":[{"name":"id","description":"Unique UUID of the discussion_board_members row to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Membership assignment record with full schema details.","typeName":"IDiscussionBoardMember"},"authorizationRole":"member","name":"at","path":"/discussion_board/members/{id}","method":"get"},{"specification":"Creates a new membership assignment in discussion_board_members. The required fields are discussion_board_user_profile_id and joined_at. left_at is not set at creation, indicating active membership. This operation only creates a new assignment; does not create user profile or grant additional roles. For admin onboarding or membership grant workflow. All fields must correspond to schema definitions and normalization: no non-schema fields permitted.","description":"Creates a new membership row assigning a user profile to board member status. input: discussion_board_user_profile_id (link to the user profile), joined_at timestamp. On creation, left_at is not set, indicating current/active membership. The endpoint does not handle user profile creation or other roles—only assignment as a member. Requires admin authority as per RBAC and audit policies. No extra data outside schema may be stored or referenced.","summary":"Assign a user profile as a board member by creating a discussion_board_members row.","parameters":[],"requestBody":{"description":"Information for new member assignment (user profile ID, join time).","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"Created member assignment record, with all schema fields populated.","typeName":"IDiscussionBoardMember"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/members","method":"post"},{"specification":"Updates an existing member assignment in the discussion_board_members table, referenced by unique id. Updatable fields include joined_at and left_at (e.g., marking a member as left with a non-null left_at). The operation only affects schema fields. Used for admin-triggered updates (membership withdrawal, corrections, etc.).","description":"Allows admin users to update join or leave times for a given member assignment, setting left_at to indicate inactive membership. Also allows correction to joined_at if necessary. The update is strictly limited to schema-defined fields; no user profile or extra business data may be modified indirectly. All operations are fully auditable and must follow RBAC constraints for admin-level actions.","summary":"Update member assignment join/leave status in discussion_board_members by id.","parameters":[{"name":"id","description":"Unique UUID for the member assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable fields for discussion_board_members: joined_at and left_at.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"Updated member assignment reflecting any join/leave changes.","typeName":"IDiscussionBoardMember"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/members/{id}","method":"put"},{"specification":"Removes a membership assignment from the discussion_board_members table by unique id. No is_deleted or deleted_at fields exist, so this is a hard delete. The operation is irreversible and only permitted for admin users. It does not affect associated user profiles, roles, or data outside the row being deleted. All action and audit trails referencing this member assignment persist for accountability. No schema fields outside those present are referenced or modified in this process.","description":"Permanently deletes a member assignment entry based on provided id. There is no soft delete as the schema does not provide such fields—entry is completely removed and cannot be restored. Only admins may use this endpoint. Other role assignments or user profile attributes are not altered; only the member role assignment is deleted.","summary":"Permanently delete a discussion_board_members row (hard delete, irreversible).","parameters":[{"name":"id","description":"Unique id (UUID) for the discussion_board_members entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/members/{id}","method":"delete"},{"specification":"Provides paginated/searchable access to guest session records in discussion_board_guests. Each entry includes id, session_id (unique), and created_at. No personal, user profile, or business data exists; only guest session tracking for analytics and monitoring. No soft delete or status tracking fields exist. Endpoint intended for system audit, analytics, or compliance views as per requirements. Exposes only actual fields from schema.","description":"This endpoint returns a paginated or filtered list of guest session records. Each record includes the session's unique id (UUID), session_id string (unique), and created_at timestamp. Used for monitoring guest activity and system analytics. Only schema fields are included. Pagination or filtering may use created_at or session_id as parameters. Role or authentication requirements are as per system policy.","summary":"List/download guest session records from discussion_board_guests.","parameters":[],"requestBody":{"description":"Parameters for paginated/filtered search of guest session records (created_at, session_id).","typeName":"IDiscussionBoardGuest.IRequest"},"responseBody":{"description":"Paginated guest session records as per schema definitions.","typeName":"IPageIDiscussionBoardGuest"},"authorizationRole":"admin","name":"index","path":"/discussion_board/guests","method":"patch"}],"completed":111,"total":111,"step":0,"created_at":"2025-07-28T08:33:09.707Z"},"tokenUsage":{"facade":{"aggregate":{"total":554193,"input":{"total":512998,"cached":3840},"output":{"total":41195,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":554193,"input":{"total":512998,"cached":3840},"output":{"total":41195,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":554193,"input":{"total":512998,"cached":3840},"output":{"total":41195,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":554193,"input":{"total":512998,"cached":3840},"output":{"total":41195,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardTopicSnapshot.IRequest":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Discussion topic ID to filter snapshots by. This is the ID of the parent topic whose version history or edits are being audited."},"edited_by_member_id":{"type":"string","format":"uuid","description":"Filter snapshots by the editing member's ID (editor who performed the change). Used for audit/reviewing edits by a specific individual."},"created_from":{"type":"string","format":"date-time","description":"ISO8601 datetime: Includes snapshots created from (inclusive) this date/time forward."},"created_to":{"type":"string","format":"date-time","description":"ISO8601 datetime: Includes snapshots created until (inclusive) this date/time."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results. Starts at 1."},"limit":{"type":"integer","minimum":1,"description":"Number of results per page. Used for pagination controls."}},"description":"Request structure for listing or searching topic snapshots. Allows filtering version history by topic, editor, and creation time window. Pagination controls included for large audit histories.","required":[]},"IPageIDiscussionBoardTopicSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTopicSnapshot"},"description":"A list of topic snapshot objects for the current page of results."}},"required":["pagination","data"],"description":"Paginated result set for topic snapshots. Includes page metadata (pagination) and data array of snapshot objects, each representing the state of a topic at a given edit point."},"IDiscussionBoardTopicSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID of the topic snapshot (primary key)."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"UUID of the parent topic this snapshot belongs to. Used for back-referencing audit/version history."},"edited_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member who made the edit, producing this snapshot."},"title":{"type":"string","description":"Topic title as it was at the time of this snapshot."},"description":{"type":"string","description":"Topic description content as of snapshot creation."},"status":{"type":"string","description":"Status of the topic at snapshot time. Examples: 'open', 'closed', 'pinned'."},"pinned_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the topic was pinned, as recorded in this snapshot. Null if not pinned at this revision."},{"type":"null","format":"date-time","description":"When the topic was pinned, as recorded in this snapshot. Null if not pinned at this revision."}],"description":"When the topic was pinned, as recorded in this snapshot. Null if not pinned at this revision."},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for topic closure, from this revision. Null if still open."},{"type":"null","format":"date-time","description":"Timestamp for topic closure, from this revision. Null if still open."}],"description":"Timestamp for topic closure, from this revision. Null if still open."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the snapshot was created (when the edit took place)."}},"required":["id","discussion_board_topic_id","edited_by_member_id","title","description","status","created_at"],"description":"A snapshot object representing the state of a topic at a single edit/version point. Used to audit and trace all content changes and moderation actions."},"IDiscussionBoardTopicSubscription.IRequest":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Target topic ID to filter subscriptions for. Finds all subscriptions to a given topic."},"member_id":{"type":"string","format":"uuid","description":"Member user ID to filter by. Returns subscriptions held by a given member."},"subscribed_from":{"type":"string","format":"date-time","description":"ISO8601 datetime: include subscriptions created after/on this point."},"subscribed_to":{"type":"string","format":"date-time","description":"ISO8601 datetime: include subscriptions created before/on this point."},"active_only":{"type":"boolean","description":"If true, only include subscriptions where unsubscribed_at is null (still subscribed)."},"page":{"type":"integer","minimum":1,"description":"Page number (for paginated results, starts from 1)."},"limit":{"type":"integer","minimum":1,"description":"Results per page for pagination."}},"description":"Request body for listing/filtering topic subscriptions. Supports searching by topic, member, and time window. Pagination and active/subscribed status filter included.","required":[]},"IPageIDiscussionBoardTopicSubscription":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTopicSubscription"},"description":"A list of topic subscription objects for the current page."}},"required":["pagination","data"],"description":"Paginated result of topic subscription entities, including page info and array of result items."},"IDiscussionBoardTopicSubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the topic subscription record (primary key)."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"UUID of the topic being followed."},"member_id":{"type":"string","format":"uuid","description":"UUID of the subscribing member (user who is following the topic)."},"subscribed_at":{"type":"string","format":"date-time","description":"When the subscription was started (ISO8601 datetime)."},"unsubscribed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable; when the member unsubscribed. Null if still subscribed."},{"type":"null","format":"date-time","description":"Nullable; when the member unsubscribed. Null if still subscribed."}],"description":"Nullable; when the member unsubscribed. Null if still subscribed."}},"required":["id","discussion_board_topic_id","member_id","subscribed_at"],"description":"Topic subscription record representing a user following a topic for notifications. Includes audit information for subscription/unsubscription times."},"IDiscussionBoardTopicSubscription.ICreate":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Target topic's UUID to subscribe to."}},"required":["discussion_board_topic_id"],"description":"Request for subscribing (following) a topic. The subscribing member is identified by the authentication context—not provided in this body."},"IDiscussionBoardTopicSubscription.IUpdate":{"type":"object","properties":{"subscribed_at":{"type":"string","format":"date-time","description":"Date of (re-)subscription (if resubscribing manually)."},"unsubscribed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set to the unsubscription timestamp to unsubscribe. Set to null to resubscribe."},{"type":"null","format":"date-time","description":"Set to the unsubscription timestamp to unsubscribe. Set to null to resubscribe."}],"description":"Set to the unsubscription timestamp to unsubscribe. Set to null to resubscribe."}},"description":"Request for updating topic subscription, e.g., for unsubscribing or resubscribing. Only subscription and unsubscription dates are mutable.","required":[]},"IVoidResponse":{"type":"object","properties":{},"description":"Empty response object (no content, operation was successful).","required":[]},"IDiscussionBoardPost.IRequest":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Filter posts by parent topic."},"author_member_id":{"type":"string","format":"uuid","description":"Filter posts by specific author/member."},"body_keyword":{"type":"string","description":"Text or keyword to search for within post body content."},"is_deleted":{"type":"boolean","description":"If true/false, filter by deletion status (soft delete flag)."},"created_from":{"type":"string","format":"date-time","description":"Include posts created after/on this datetime."},"created_to":{"type":"string","format":"date-time","description":"Include posts created before/on this datetime."},"page":{"type":"integer","minimum":1,"description":"Page number (start from 1)."},"limit":{"type":"integer","minimum":1,"description":"Number of posts per page."}},"description":"Request for searching, filtering, or paginating posts. Can filter on topic, author, full text, deletion state, and creation range. Pagination controls included.","required":[]},"IPageIDiscussionBoardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPost"},"description":"Array of paginated post result objects."}},"required":["pagination","data"],"description":"Paginated result set of post records. Contains paging metadata and data (posts for the current page)."},"IDiscussionBoardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for the post (primary key in posts table)."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"UUID of the parent topic this post belongs to."},"author_member_id":{"type":"string","format":"uuid","description":"UUID of the member who authored the post."},"title":{"oneOf":[{"type":"string","description":"Post title (optional for replies, present if this is a thread-opening post)."},{"type":"null","description":"Post title (optional for replies, present if this is a thread-opening post)."}],"description":"Post title (optional for replies, present if this is a thread-opening post)."},"body":{"type":"string","description":"Post content (may include rich text markup, required on all posts)."},"is_deleted":{"type":"boolean","description":"Soft deletion state: true if post is hidden/moderated/deleted, false if visible."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of post creation (ISO8601)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the post's last update (including edits)."}},"required":["id","discussion_board_topic_id","author_member_id","body","is_deleted","created_at","updated_at"],"description":"Represents a post or reply in a discussion topic, including author, parent topic, content, and metadata such as title, soft deletion status, and audit timestamps."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":1,"description":"Current page number (starting at 1)."},"limit":{"type":"integer","minimum":1,"description":"Number of records per page, pagination limit."},"records":{"type":"integer","minimum":0,"description":"Total records in the database for this query."},"pages":{"type":"integer","minimum":0,"description":"Total number of result pages for this query."}},"required":["current","limit","records","pages"],"description":"Standard pagination information for paginated API responses: current page index, page size, result counts, and total page count."}}},"completed":12,"total":119,"step":0,"created_at":"2025-07-28T08:33:37.143Z"},"tokenUsage":{"facade":{"aggregate":{"total":620203,"input":{"total":576821,"cached":3840},"output":{"total":43382,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":620203,"input":{"total":576821,"cached":3840},"output":{"total":43382,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":620203,"input":{"total":576821,"cached":3840},"output":{"total":43382,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":620203,"input":{"total":576821,"cached":3840},"output":{"total":43382,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardAdmin.IUpdate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"Updates the linked user profile's UUID (referencing discussion_board_user_profiles.id) for this admin assignment. Used to correct relationships if needed.\n\nOriginal Prisma: Links this admin record to a specific user profile."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the admin role was assigned. Used for historical tracking and sorting.\n\nOriginal Prisma: Marked when a user becomes admin."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, the timestamp when admin status was revoked; otherwise null for currently active admins.\n\nOriginal Prisma: Marks the end of admin tenure. Null = active admin."},{"type":"null","format":"date-time","description":"If set, the timestamp when admin status was revoked; otherwise null for currently active admins.\n\nOriginal Prisma: Marks the end of admin tenure. Null = active admin."}],"description":"If set, the timestamp when admin status was revoked; otherwise null for currently active admins.\n\nOriginal Prisma: Marks the end of admin tenure. Null = active admin."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile who granted admin status. Used for auditing and change tracking.\n\nOriginal Prisma: Links to the actor performing the assignment."}},"required":["discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Structure for updating fields of an admin assignment. Used for admin role correction, revocation, or timestamp updates. Reflects normalization, auditability, and no password/security fields."},"IDiscussionBoardModerator.ICreate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile receiving moderator privileges. Must exist as foreign key to discussion_board_user_profiles.\n\nOriginal Prisma: Links moderator to user."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when moderator role is granted."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the assigning admin or moderator. Used for auditing role assignments."}},"required":["discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Used to assign moderator privileges to a user profile. Fully auditable and in line with role management requirements. No sensitive or password fields present."},"IDiscussionBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator assignment.\n\nOriginal Prisma: Primary key."},"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile assigned as moderator.\n\nOriginal Prisma: Foreign key to user profile."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when moderator status was granted.\n\nOriginal Prisma: Role assignment audit."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when moderator privileges were revoked (null if still active).\n\nOriginal Prisma: Null means actively moderator."},{"type":"null","format":"date-time","description":"Timestamp when moderator privileges were revoked (null if still active).\n\nOriginal Prisma: Null means actively moderator."}],"description":"Timestamp when moderator privileges were revoked (null if still active).\n\nOriginal Prisma: Null means actively moderator."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user who assigned the moderator role.\n\nOriginal Prisma: Assignment actor identity."}},"required":["id","discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Data structure representing a moderator assignment entry. Contains full audit trail fields and links to both the moderator and the assigning actor."},"IDiscussionBoardModerator.IRequest":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"Filter by assigned user profile's UUID.\n\nOriginal Prisma: FK to user profiles."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"Filter assignments by the actor who assigned the moderator (admin or higher moderator).\n\nOriginal Prisma: FK to assigning member."},"assigned_at_start":{"type":"string","format":"date-time","description":"List moderator assignments starting from this date/time (inclusive).\n\nCustom filter, not in DB directly."},"assigned_at_end":{"type":"string","format":"date-time","description":"Filter assignments up to this end date/time (inclusive).\n\nCustom filter."},"is_active":{"type":"boolean","description":"If true, only include currently active moderator assignments (revoked_at == null).\n\nCustom logic."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination of search results."},"limit":{"type":"integer","minimum":1,"description":"Number of items per page."}},"description":"Filter/search and pagination parameters for querying moderator assignments, supporting all RBAC role management audit requirements. Includes foreign keys and date ranges as search filters.","required":[]},"IPageIDiscussionBoardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerator"}}},"required":["pagination","data"],"description":"A paginated list of moderator assignments, each being an IDiscussionBoardModerator record. Returns full metadata as per RBAC and role management requirements."},"IDiscussionBoardModerator.IUpdate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile assigned as moderator; correct for reassignment."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp of moderator assignment; supports correcting/retro-fit audit."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp marking moderator role as revoked (or null if retained)."},{"type":"null","format":"date-time","description":"Timestamp marking moderator role as revoked (or null if retained)."}],"description":"Timestamp marking moderator role as revoked (or null if retained)."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the assigning admin. For audit trails and corrections."}},"required":["discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Provides fields required to update a moderator assignment (such as revocation, reassignments, or timestamp corrections). Sensitive security fields are excluded; strictly role management."},"IDiscussionBoardMember.IRequest":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"Filter by assigned user's profile ID.\n\nOriginal Prisma: FK to user profile."},"joined_at_start":{"type":"string","format":"date-time","description":"Return members joined after or at this timestamp (inclusive).\n\nCustom filter."},"joined_at_end":{"type":"string","format":"date-time","description":"Return members joined at or before this timestamp (inclusive).\n\nCustom filter."},"is_active":{"type":"boolean","description":"If true, only return members with left_at==null (present, not left).\n\nCustom logic."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"description":"Number of items per page."}},"description":"Request object for searching/filtering board membership by user ID, join timeframe, and current status. Used for listing current/past members. Supports pagination.","required":[]},"IPageIDiscussionBoardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMember"}}},"required":["pagination","data"],"description":"Paginated response type for board member records. Each 'data' entry is a discussion_board_members entity."},"IDiscussionBoardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID primary key for the membership record.\n\nOriginal Prisma: Uniquely identifies the member assignment."},"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"Foreign key to the user profile record this membership refers to.\n\nOriginal Prisma: Links member entity to user."},"joined_at":{"type":"string","format":"date-time","description":"The timestamp when the user became a board member.\n\nOriginal Prisma: Join date for audit/history."},"left_at":{"oneOf":[{"type":"string","format":"date-time","description":"If present, timestamp when the user left membership (null if still active).\n\nOriginal Prisma: Null = active, else indicates exit date."},{"type":"null","format":"date-time","description":"If present, timestamp when the user left membership (null if still active).\n\nOriginal Prisma: Null = active, else indicates exit date."}],"description":"If present, timestamp when the user left membership (null if still active).\n\nOriginal Prisma: Null = active, else indicates exit date."}},"required":["id","discussion_board_user_profile_id","joined_at"],"description":"Board member assignment record. Tracks start and optional exit of board participation with full relational audit."},"IDiscussionBoardMember.ICreate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile to assign as a member. Must exist and be unique in this table.\n\nOriginal Prisma: Foreign key to user profile."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp of member join (set when activated).\n\nOriginal Prisma: Membership assignment date/time."}},"required":["discussion_board_user_profile_id","joined_at"],"description":"Object for creating a new board member assignment. Used in admin onboarding or join events. Fully audit-compliant."},"IDiscussionBoardMember.IUpdate":{"type":"object","properties":{"joined_at":{"type":"string","format":"date-time","description":"Change/correct the timestamp for when the user became a member. Useful for audit or migration."},"left_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of exit from membership (null means active); useful for revoking membership."},{"type":"null","format":"date-time","description":"Timestamp of exit from membership (null means active); useful for revoking membership."}],"description":"Timestamp of exit from membership (null means active); useful for revoking membership."}},"required":["joined_at"],"description":"Admin-supplied changes to join/leave times for membership assignment. No ownership or security-related data."},"IDiscussionBoardGuest.IRequest":{"type":"object","properties":{"session_id":{"type":"string","description":"Filter by guest session unique identifier (can be for analytics/session search).\n\nOriginal Prisma: session_id field."},"created_at_start":{"type":"string","format":"date-time","description":"Start timestamp (inclusive) for guest session creation filter."},"created_at_end":{"type":"string","format":"date-time","description":"End timestamp (inclusive) for guest session creation filter."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated queries."},"limit":{"type":"integer","minimum":1,"description":"Items per page."}},"description":"Request/filter object for guest session entity queries. Used for auditing, analytics, or compliance. Provides pagination support.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":1,"description":"Current page number in pagination context."},"limit":{"type":"integer","minimum":1,"default":100,"description":"Limit of records per page."},"records":{"type":"integer","minimum":0,"description":"Total number of records found for this query."},"pages":{"type":"integer","minimum":1,"description":"Total number of available pages for the records."}},"required":["current","limit","records","pages"],"description":"Pagination information for paged record responses."}}},"completed":24,"total":119,"step":0,"created_at":"2025-07-28T08:33:44.381Z"},"tokenUsage":{"facade":{"aggregate":{"total":686588,"input":{"total":640642,"cached":3840},"output":{"total":45946,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":686588,"input":{"total":640642,"cached":3840},"output":{"total":45946,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":686588,"input":{"total":640642,"cached":3840},"output":{"total":45946,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":686588,"input":{"total":640642,"cached":3840},"output":{"total":45946,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardCategoryPermission.IRequest":{"type":"object","properties":{"category_id":{"type":"string","format":"uuid","description":"Unique category ID for filtering. Optional. Reference: discussion_board_category_permissions.category_id."},"role_name":{"type":"string","description":"Role name to filter by (admin, moderator, member, guest). Optional. Reference: discussion_board_category_permissions.role_name."},"can_view":{"type":"boolean","description":"Whether to filter for permissions granting view access. Optional. Reference: discussion_board_category_permissions.can_view."},"can_create_topic":{"type":"boolean","description":"Whether to filter for topic creation permission. Optional. Reference: discussion_board_category_permissions.can_create_topic."},"can_reply":{"type":"boolean","description":"Whether to filter for reply permission. Optional. Reference: discussion_board_category_permissions.can_reply."},"can_like":{"type":"boolean","description":"Whether to filter for like/dislike permission. Optional. Reference: discussion_board_category_permissions.can_like."},"can_report":{"type":"boolean","description":"Whether to filter for permission to report content. Optional. Reference: discussion_board_category_permissions.can_report."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: page number (1-based). Optional."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: page size (max records per page). Optional."}},"description":"Request body for searching, paginating, or filtering discussion_board_category_permissions records. All properties reference fields in discussion_board_category_permissions. Used to construct RBAC and audit queries. Supports partial, multi-field, and paginated requests.","required":[]},"IPageDiscussionBoardCategoryPermission":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata: current, limit, total records, total pages."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategoryPermission"},"description":"Paginated result set of discussion board category permission entries."}},"required":["pagination","data"],"description":"Paginated result set for discussion_board_category_permissions queries. Contains pagination object and result data array."},"IDiscussionBoardCategoryPermission.IUpdate":{"type":"object","properties":{"category_id":{"type":"string","format":"uuid","description":"New category ID to associate the permission with. Optional update. Reference: discussion_board_category_permissions.category_id."},"role_name":{"type":"string","description":"New role name (admin, moderator, member, guest) for permission. Optional update. Reference: discussion_board_category_permissions.role_name."},"can_view":{"type":"boolean","description":"Permission value to allow viewing the category. Optional update."},"can_create_topic":{"type":"boolean","description":"Permission value to allow topic creation. Optional update."},"can_reply":{"type":"boolean","description":"Permission value to allow replying in the category. Optional update."},"can_like":{"type":"boolean","description":"Permission value to allow like/dislike. Optional update."},"can_report":{"type":"boolean","description":"Permission value to allow reporting content. Optional update."}},"description":"Request body for updating a category permission record in discussion_board_category_permissions. All properties are optional and directly map to columns in the schema.","required":[]},"IPageDiscussionBoardUserProfiles.IRequest":{"type":"object","properties":{"display_name":{"type":"string","description":"Filter user profiles by partial display_name (case-insensitive search). Reference: discussion_board_user_profiles.display_name."},"email":{"type":"string","format":"email","description":"Filter user profiles by exact or partial email. Reference: discussion_board_user_profiles.email."},"is_active":{"type":"boolean","description":"Filter by active/inactive profile status. Reference: discussion_board_user_profiles.is_active."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: page number (1-based). Optional."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: max number of records per page. Optional."}},"description":"Request body for listing, searching, or filtering member profiles with pagination in discussion_board_user_profiles. All properties map to schema fields.","required":[]},"IPageDiscussionBoardUserProfiles":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination data for the result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardUserProfile"},"description":"Array of user profile objects matching the filter/search parameters."}},"required":["pagination","data"],"description":"Paginated user profile result for discussion_board_user_profiles index operations. Contains pagination info and array of results."},"IDiscussionBoardUserProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key, unique user profile ID. Reference: discussion_board_user_profiles.id."},"email":{"type":"string","format":"email","description":"User's unique email address. Used for identification and registration/login. Reference: discussion_board_user_profiles.email."},"display_name":{"type":"string","description":"User's chosen display name. Shown in UI, may differ from email. Reference: discussion_board_user_profiles.display_name."},"registered_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601) when the profile was registered. Reference: discussion_board_user_profiles.registered_at."},"is_active":{"type":"boolean","description":"Profile active status. True if enabled, false if blocked or removed. Reference: discussion_board_user_profiles.is_active."}},"required":["id","email","display_name","registered_at","is_active"],"description":"User profile entity containing authentication/identity attributes. Maps directly to discussion_board_user_profiles. Sensitive or credential data is not present."},"IDiscussionBoardUserProfile.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for new user profile. Must be unique. Reference: discussion_board_user_profiles.email."},"display_name":{"type":"string","description":"Display name for the new user profile. Reference: discussion_board_user_profiles.display_name."},"registered_at":{"type":"string","format":"date-time","description":"Timestamp of profile registration (system-generated if not provided). Reference: discussion_board_user_profiles.registered_at."},"is_active":{"type":"boolean","description":"Whether the profile is enabled/active after creation. Reference: discussion_board_user_profiles.is_active."}},"required":["email","display_name","is_active"],"description":"Request body for creating a user profile admin-side. All properties map to columns in discussion_board_user_profiles. registered_at may be omitted for defaulting to now."},"IDiscussionBoardUserProfile.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"New email address for updating the user profile. Optional. Reference: discussion_board_user_profiles.email."},"display_name":{"type":"string","description":"New display name for the profile. Optional. Reference: discussion_board_user_profiles.display_name."},"registered_at":{"type":"string","format":"date-time","description":"New registration timestamp if correcting. Optional. Reference: discussion_board_user_profiles.registered_at."},"is_active":{"type":"boolean","description":"Toggle for active/inactive profile status. Optional. Reference: discussion_board_user_profiles.is_active."}},"description":"Request body for updating a user profile entity in discussion_board_user_profiles. All properties optional and map directly to schema columns.","required":[]},"IDiscussionBoardAdmin.ICreate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of user profile being assigned admin. Required. Reference: discussion_board_admins.discussion_board_user_profile_id."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp for when admin rights are assigned. Required. Reference: discussion_board_admins.assigned_at."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the admin who performs the assignment. Required. Reference: discussion_board_admins.assigned_by_user_profile_id."}},"required":["discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Request body for creating an admin assignment in discussion_board_admins. All fields directly map to the schema columns and enable audit-compliant, traceable role elevation."},"IDiscussionBoardAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique admin assignment identifier. Reference: discussion_board_admins.id."},"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID linking admin assignment to user profile. Reference: discussion_board_admins.discussion_board_user_profile_id."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when admin was assigned. Reference: discussion_board_admins.assigned_at."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp admin rights revoked, or null if active. Reference: discussion_board_admins.revoked_at."},{"type":"null"}],"description":"Timestamp admin rights revoked, or null if active. Reference: discussion_board_admins.revoked_at."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the admin who assigned this role. Reference: discussion_board_admins.assigned_by_user_profile_id."}},"required":["id","discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Admin assignment entity mapping one user to active/revoked admin rights. Maps to discussion_board_admins. Only role assignment and audit fields present."},"IPageDiscussionBoardAdmins.IRequest":{"type":"object","properties":{"assigned_at_from":{"type":"string","format":"date-time","description":"Earliest datetime for assignment search. Reference: discussion_board_admins.assigned_at."},"assigned_at_to":{"type":"string","format":"date-time","description":"Latest datetime for assignment search. Reference: discussion_board_admins.assigned_at."},"revoked_at":{"type":"string","format":"date-time","description":"Timestamp for filtering by revocation (nullable). Reference: discussion_board_admins.revoked_at."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"Filter admin assignments by assigning admin. Reference: discussion_board_admins.assigned_by_user_profile_id."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: page number (1-based). Optional."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: max records per page. Optional."}},"description":"Request body for listing or filtering admin assignments with search parameters and pagination. All fields map to discussion_board_admins schema. For audit and management use.","required":[]},"IPageDiscussionBoardAdmins":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination data for returned result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAdmin"},"description":"Admin assignment records for the current page."}},"required":["pagination","data"],"description":"Paginated list result for admin assignments from discussion_board_admins. Used for audit/admin management."},"IDiscussionBoardCategoryPermission":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique category permission row identifier. Reference: discussion_board_category_permissions.id."},"category_id":{"type":"string","format":"uuid","description":"UUID of the category for this permission. Reference: discussion_board_category_permissions.category_id."},"role_name":{"type":"string","description":"Role name the permission applies to (admin, moderator, member, guest). Reference: discussion_board_category_permissions.role_name."},"can_view":{"type":"boolean","description":"Whether role can view category. Reference: discussion_board_category_permissions.can_view."},"can_create_topic":{"type":"boolean","description":"Whether role can create topic in category. Reference: discussion_board_category_permissions.can_create_topic."},"can_reply":{"type":"boolean","description":"Whether role can reply in category. Reference: discussion_board_category_permissions.can_reply."},"can_like":{"type":"boolean","description":"Whether role can like/dislike in category. Reference: discussion_board_category_permissions.can_like."},"can_report":{"type":"boolean","description":"Whether role can report content in category. Reference: discussion_board_category_permissions.can_report."},"created_at":{"type":"string","format":"date-time","description":"Date/time the permission was assigned. Reference: discussion_board_category_permissions.created_at."}},"required":["id","category_id","role_name","can_view","can_create_topic","can_reply","can_like","can_report","created_at"],"description":"Entity describing a set of permissions for a board role and category. All fields map 1:1 to discussion_board_category_permissions schema."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number of the result set."},"limit":{"type":"integer","format":"uint32","description":"Maximum records per page."},"records":{"type":"integer","format":"uint32","description":"Total number of records matching search/query."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages (ceil(records/limit))."}},"required":["current","limit","records","pages"],"description":"Standard interface describing pagination metadata for paginated result sets."}}},"completed":36,"total":119,"step":0,"created_at":"2025-07-28T08:33:45.507Z"},"tokenUsage":{"facade":{"aggregate":{"total":753571,"input":{"total":704465,"cached":3840},"output":{"total":49106,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":753571,"input":{"total":704465,"cached":3840},"output":{"total":49106,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":753571,"input":{"total":704465,"cached":3840},"output":{"total":49106,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":753571,"input":{"total":704465,"cached":3840},"output":{"total":49106,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardUserNotificationSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this notification settings record.\n\nReferences the discussion_board_user_notification_settings table's `id` column, a UUID that uniquely distinguishes each user's notification settings entry."},"user_id":{"type":"string","format":"uuid","description":"The user's UUID this settings record applies to.\n\nReferences the `user_id` column in discussion_board_user_notification_settings, linking to the discussion_board_members table. Ensures each user only has one settings record."},"receive_email_notifications":{"type":"boolean","description":"Whether or not the user will receive notifications by email.\n\nMaps to the `receive_email_notifications` boolean in Prisma schema. True means email notifications are enabled; false disables them. Core for user notification preferences."},"receive_push_notifications":{"type":"boolean","description":"Controls if the user receives push/mobile notifications.\n\nDirect mapping to `receive_push_notifications` in the schema. True enables push notifications; false disables them."},"mute_types":{"oneOf":[{"type":"string","description":"Comma-separated notification type list to mute (if any).\n\nMaps to the `mute_types` nullable field in the schema. Example: 'like,report_mention'. If null, the user mutes no notification types."},{"type":"null","description":"Comma-separated notification type list to mute (if any).\n\nMaps to the `mute_types` nullable field in the schema. Example: 'like,report_mention'. If null, the user mutes no notification types."}],"description":"Comma-separated notification type list to mute (if any).\n\nMaps to the `mute_types` nullable field in the schema. Example: 'like,report_mention'. If null, the user mutes no notification types."}},"required":["id","user_id","receive_email_notifications","receive_push_notifications"],"description":"Discussion Board User Notification Settings entity, tracking each user's per-channel notification preferences.\n\nReferences discussion_board_user_notification_settings Prisma table with settings for email, push notifications, and notification-type mutes. This record is uniquely mapped to a user."},"IDiscussionBoardUserNotificationSettings.IRequest":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Target user to search for; filters settings for a given user ID.\n\nReferences the `user_id` column. If omitted, defaults to current authenticated user in typical usage."},"receive_email_notifications":{"type":"boolean","description":"Optional filter by email notification ON/OFF."},"receive_push_notifications":{"type":"boolean","description":"Optional filter by push notification ON/OFF."},"mute_types":{"type":"string","description":"Optional substring or exact match filter for mute_types (comma separated)."}},"description":"Request/query type for searching notification settings. Accepts any combination of filters on user ID, email/push notification flags, or mute type keywords.","required":[]},"IDiscussionBoardUserNotificationSettings.IUpdate":{"type":"object","properties":{"receive_email_notifications":{"type":"boolean","description":"(Required) Whether the user wants email notifications.\n\nMaps to schema."},"receive_push_notifications":{"type":"boolean","description":"(Required) Whether the user wants push notifications.\n\nMaps to schema."},"mute_types":{"oneOf":[{"type":"string","description":"Comma-separated muted notification types to set (nullable).\n\nMaps to schema. Example: 'like,moderation'. Null clears mutes."},{"type":"null","description":"Comma-separated muted notification types to set (nullable).\n\nMaps to schema. Example: 'like,moderation'. Null clears mutes."}],"description":"Comma-separated muted notification types to set (nullable).\n\nMaps to schema. Example: 'like,moderation'. Null clears mutes."}},"required":["receive_email_notifications","receive_push_notifications"],"description":"Payload for updating notification channel flags and muted types for a user."},"IDiscussionBoardAuditTrail.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"User profile ID who performed the action.\n\nReferences `actor_id` column, must match a valid user in discussion_board_user_profiles."},"action_type":{"type":"string","description":"Action type for the audit trail log (e.g., 'create', 'update', 'delete', 'moderation', 'login').\n\nFree string (matches domain event names)."},"target_table":{"type":"string","description":"Entity/table affected by the action (e.g., 'discussion_board_posts').\n\nMatches the `target_table` string in schema."},"target_id":{"type":"string","format":"uuid","description":"UUID primary key of record/row affected by the action.\n\nMatches `target_id` in schema."},"details":{"oneOf":[{"type":"string","description":"Optional extra context - free text about the action (pre/post state, rationales, summaries).\n\nReferences the nullable `details` column."},{"type":"null","description":"Optional extra context - free text about the action (pre/post state, rationales, summaries).\n\nReferences the nullable `details` column."}],"description":"Optional extra context - free text about the action (pre/post state, rationales, summaries).\n\nReferences the nullable `details` column."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the audit record was created (ISO8601 UTC, e.g. '2025-07-28T07:52:36.294Z').\n\nThis maps to the Prisma DateTime field for `created_at`."}},"required":["actor_id","action_type","target_table","target_id","created_at"],"description":"Audit trail creation payload. Used to log a new system action for traceability. All properties directly map to columns from the audit log schema."},"IDiscussionBoardAuditTrail":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique UUID for this audit log entry.\n\nPrimary key in discussion_board_audit_trails."},"actor_id":{"type":"string","format":"uuid","description":"UUID of user who performed the action.\n\nRequired by discussion_board_audit_trails."},"action_type":{"type":"string","description":"Nature of the action (per schema column); describes 'create', 'update', 'delete', 'login', etc."},"target_table":{"type":"string","description":"The table/entity this action targeted (as string, e.g. 'discussion_board_posts').\n\nMatches schema."},"target_id":{"type":"string","format":"uuid","description":"The UUID ID of the entity acted upon (matches schema column)."},"details":{"oneOf":[{"type":"string","description":"Free-text details for this action (nullable, may explain context/change)."},{"type":"null","description":"Free-text details for this action (nullable, may explain context/change)."}],"description":"Free-text details for this action (nullable, may explain context/change)."},"created_at":{"type":"string","format":"date-time","description":"UTC timestamp for when the audit entry was created (ISO 8601 format)."}},"required":["id","actor_id","action_type","target_table","target_id","created_at"],"description":"Full audit log entity for a single system or user-level action, as persisted in the audit trail. Encompasses all columns per schema."},"IDiscussionBoardAuditTrail.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"Filter: only records by this user (actor_id column); optional."},"action_type":{"type":"string","description":"Filter by event type string ('create','moderation', etc); optional."},"target_table":{"type":"string","description":"Filter by business/table entity name; optional."},"target_id":{"type":"string","format":"uuid","description":"Filter: restrict to actions on entity with this id; optional."},"details":{"type":"string","description":"Full text contains-search for this context field (optional)."},"created_at_start":{"type":"string","format":"date-time","description":"Filter: start timestamp for when audit records were created (ISO 8601, UTC). Optional."},"created_at_end":{"type":"string","format":"date-time","description":"Filter: end timestamp for audit creation time (optional, ISO 8601)."}},"description":"Request payload for paginated/search/filter queries on audit logs. Maps directly to filterable columns or search fields on audit table.","required":[]},"IPageIDiscussionBoardAuditTrail":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAuditTrail"},"description":"List of audit log entries for this page."}},"required":["pagination","data"],"description":"Paginated result set for audit trail log queries. Contains page info and array of audit trail objects."},"Idiscussion_board_action_histories.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"User profile UUID who performed the action history event.\n\nMaps to schema."},"action_type":{"type":"string","description":"Nature of user/system event (matches 'action_type' column); e.g., 'post_created', 'report_submitted'."},"target_table":{"type":"string","description":"Table/entity where the action occurred (schema: target_table; e.g., 'discussion_board_posts')."},"target_id":{"type":"string","format":"uuid","description":"UUID for entity affected by action (target_id schema field)."},"summary":{"oneOf":[{"type":"string","description":"Optional, succinct summary/context for this action (schema: summary column, nullable)."},{"type":"null","description":"Optional, succinct summary/context for this action (schema: summary column, nullable)."}],"description":"Optional, succinct summary/context for this action (schema: summary column, nullable)."},"occurred_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp for when the action occurred (matches occurred_at column; UTC recommended)."}},"required":["actor_id","action_type","target_table","target_id","occurred_at"],"description":"Payload to create a new action history log, mapping directly to the action_histories schema."},"Idiscussion_board_action_histories":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this action history record (id column schema).\n\nUniquely identifies the user/system event."},"actor_id":{"type":"string","format":"uuid","description":"User profile id who caused this event. References discussion_board_user_profiles."},"action_type":{"type":"string","description":"Event type (schema: action_type; e.g., 'post_created')."},"target_table":{"type":"string","description":"Table/entity referenced by the action (schema: target_table)."},"target_id":{"type":"string","format":"uuid","description":"UUID of record/entity affected by this action."},"summary":{"oneOf":[{"type":"string","description":"Short summary for analytics/reporting (schema: summary, nullable)."},{"type":"null","description":"Short summary for analytics/reporting (schema: summary, nullable)."}],"description":"Short summary for analytics/reporting (schema: summary, nullable)."},"occurred_at":{"type":"string","format":"date-time","description":"Timestamp of occurrence; schema: occurred_at (UTC, ISO8601 string)."}},"required":["id","actor_id","action_type","target_table","target_id","occurred_at"],"description":"Full action history object representing a single user or system event within the board (all schema columns mapped)."},"Idiscussion_board_action_histories.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"Optional: Only return action histories for given user profile (actor_id schema)."},"action_type":{"type":"string","description":"Optional: Filter results by action type string (schema: action_type)."},"target_table":{"type":"string","description":"Optional: Restrict to given table/entity name (target_table schema)."},"target_id":{"type":"string","format":"uuid","description":"Optional: Only display actions affecting entity with this UUID (target_id schema)."},"summary":{"type":"string","description":"Optional: Full text filter for summary phrase (summary schema field)."},"occurred_at_start":{"type":"string","format":"date-time","description":"Filter: minimum occurred_at timestamp to include (ISO8601)."},"occurred_at_end":{"type":"string","format":"date-time","description":"Filter: maximum occurred_at timestamp to include (ISO8601)."}},"description":"Request query type for searching, filtering, or paginating board action histories.\n\nAll properties are optional and map 1:1 to schema columns that support filter/search.","required":[]},"IPageIdiscussion_board_action_histories":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussion_board_action_histories"},"description":"Action history records for requested page/query.\n\nReferences array of action history entities."}},"required":["pagination","data"],"description":"Paginated result set/container for action history log search (page info + list of actions for this page)."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number (1-based indexing). Indicates which page of results is being returned."},"limit":{"type":"integer","format":"uint32","default":100,"description":"Records per page being returned. Default: 100."},"records":{"type":"integer","format":"uint32","description":"Total records available for the query."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages in result set."}},"required":["current","limit","records","pages"],"description":"Page metadata for paginated result sets. Used across all paginated API responses."}}},"completed":47,"total":119,"step":0,"created_at":"2025-07-28T08:33:53.363Z"},"tokenUsage":{"facade":{"aggregate":{"total":820008,"input":{"total":768292,"cached":3840},"output":{"total":51716,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":820008,"input":{"total":768292,"cached":3840},"output":{"total":51716,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":820008,"input":{"total":768292,"cached":3840},"output":{"total":51716,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":820008,"input":{"total":768292,"cached":3840},"output":{"total":51716,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionBoardGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for this subset of guest session results. Complies with IPage standard container, following platform conventions for paginated data.\n\nReferences: 'IPage.IPagination' definition, enables caller to determine total session cardinality and available navigation."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardGuest"},"description":"The actual array of guest session records on this page. Each entry is a guest session entity following the schema for IDiscussionBoardGuest.\n\n3NF and business logic: This is distinct from registered user/member entities, containing only guest analytics and session meta."}},"required":["pagination","data"],"description":"Paginated container for guest session entity results, following IPage data structure contract.\n\nEach result page includes page info and an array of guest session (unauthenticated user) records. Used for analytics or compliance, not for author identity. Does not include personally identifiable information (PII) or business content. Maps directly to the output of search on discussion_board_guests.\n\nReferences original platform analytics and compliance requirements (system-wide guest session tracking)."},"IDiscussionBoardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID primary key – uniquely identifies the guest session entity in the system.\n\nPrisma: discussion_board_guests.id\nThis is atomic, system-generated, and immutable."},"session_id":{"type":"string","description":"Session identifier string for guest analytics (not an email, not a login credential).\n\nPrisma: discussion_board_guests.session_id\nFunctions as the external session key for tying together analytics data. Must be unique."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp recording creation time for this guest session entry. Used for lifecycle, reporting, and compliance auditing.\n\nPrisma: discussion_board_guests.created_at"}},"required":["id","session_id","created_at"],"description":"Represents a single guest/unauthenticated user session for compliance, analytics, or ephemeral personalization use cases.\n\nDoes NOT represent a business user, member, or actor with data modification rights. 3NF: This table does not contain authentication/user profile info, only session tracking.\n\nReferences guest session, analytics, and privacy policies from requirements and DB design."},"IDiscussionBoardGuest.ICreate":{"type":"object","properties":{"session_id":{"type":"string","description":"Session identifier for this guest (see discussion_board_guests.session_id). Must be unique and securely generated. Used for platform analytics and UI personalization.\n\nDerived from system session logic or analytics process, not user input for authentication."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this guest entry is created. May be set by client or server; if not provided, defaults to 'now'.\n\nReferences: discussion_board_guests.created_at"}},"required":["session_id","created_at"],"description":"Required payload to create a new guest session entry.\n\nClients or systems should provide session_id (generated securely, not a username or email), and created_at (timestamp of session establishment).\n\nReferences guest analytics, privacy requirements, and system audit/compliance logic from requirements documentation."},"IDiscussionBoardRoleChange.ICreate":{"type":"object","properties":{"target_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile affected by the role change. Must correspond to the id of an existing discussion_board_user_profiles record.\n\nReferences: discussion_board_role_changes.target_user_profile_id. Used for RBAC, audit trail, and compliance."},"performed_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile executing the role change (admin/moderator).\n\nPrisma: discussion_board_role_changes.performed_by_user_profile_id\nEnsures system can audit 'who changed what', required by platform compliance and transparency."},"role_type":{"oneOf":[{"const":"admin","description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"},{"const":"moderator","description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"},{"const":"member","description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"},{"const":"guest","description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"}],"description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"},"action_type":{"oneOf":[{"const":"assigned","description":"Action being recorded: either 'assigned' (role granted) or 'revoked' (role removed). Enforced by schema enum.\n\nReferences: discussion_board_role_changes.action_type, required by role audit/compliance."},{"const":"revoked","description":"Action being recorded: either 'assigned' (role granted) or 'revoked' (role removed). Enforced by schema enum.\n\nReferences: discussion_board_role_changes.action_type, required by role audit/compliance."}],"description":"Action being recorded: either 'assigned' (role granted) or 'revoked' (role removed). Enforced by schema enum.\n\nReferences: discussion_board_role_changes.action_type, required by role audit/compliance."},"timestamp":{"type":"string","format":"date-time","description":"ISO-8601 timestamp at which the role change occurred. Used for compliance, audit, and role history/review policies.\n\nPrisma: discussion_board_role_changes.timestamp"}},"required":["target_user_profile_id","performed_by_user_profile_id","role_type","action_type","timestamp"],"description":"Payload for recording a role assignment/revocation event, as per auditing and RBAC control policies.\n\nEach record links the affected user (target), actor (assigner/remover), the type of role, the change action (assign/revoke), and the exact time. Follows 3NF and platform traceability requirements. Only allowed role/action values permitted.\n\nDirectly maps to requirements for security, moderation, and user management workflow traceability."},"IDiscussionBoardRoleChange":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key; UUID that uniquely identifies this role change event.\n\nPrisma: discussion_board_role_changes.id."},"target_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile whose role is being changed. 3NF: strictly atomic.\n\nPrisma: discussion_board_role_changes.target_user_profile_id"},"performed_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile (admin/moderator) who performed this change. Maintains compliance and traceability.\n\nPrisma: discussion_board_role_changes.performed_by_user_profile_id."},"role_type":{"oneOf":[{"const":"admin","description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"},{"const":"moderator","description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"},{"const":"member","description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"},{"const":"guest","description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"}],"description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"},"action_type":{"oneOf":[{"const":"assigned","description":"Type of role change action, either 'assigned' (grant) or 'revoked' (remove).\n\nPrisma: discussion_board_role_changes.action_type"},{"const":"revoked","description":"Type of role change action, either 'assigned' (grant) or 'revoked' (remove).\n\nPrisma: discussion_board_role_changes.action_type"}],"description":"Type of role change action, either 'assigned' (grant) or 'revoked' (remove).\n\nPrisma: discussion_board_role_changes.action_type"},"timestamp":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of the role change event. For audit and compliance trail.\n\nPrisma: discussion_board_role_changes.timestamp."}},"required":["id","target_user_profile_id","performed_by_user_profile_id","role_type","action_type","timestamp"],"description":"Single instance of a role assignment or revocation event.\n\nMaintains complete platform audit for role changes, as mandated by compliance requirements. All fields reference the original table column commentary.\n\nNo non-enum role or action types permitted."},"IDiscussionBoardRoleChange.IRequest":{"type":"object","properties":{"role_type":{"oneOf":[{"const":"admin","description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"},{"const":"moderator","description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"},{"const":"member","description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"},{"const":"guest","description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"}],"description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"},"action_type":{"oneOf":[{"const":"assigned","description":"Filter: Restricts search to a specific change action (assigned or revoked).\n\nReferences: discussion_board_role_changes.action_type"},{"const":"revoked","description":"Filter: Restricts search to a specific change action (assigned or revoked).\n\nReferences: discussion_board_role_changes.action_type"}],"description":"Filter: Restricts search to a specific change action (assigned or revoked).\n\nReferences: discussion_board_role_changes.action_type"},"target_user_profile_id":{"type":"string","format":"uuid","description":"Filter: Search for changes affecting a particular user (by profile UUID). Optional field.\n\nReferences: discussion_board_role_changes.target_user_profile_id"},"performed_by_user_profile_id":{"type":"string","format":"uuid","description":"Filter: Return only changes performed by this admin/moderator profile (UUID).\n\nReferences: discussion_board_role_changes.performed_by_user_profile_id"},"timestamp_from":{"type":"string","format":"date-time","description":"Filter: Restrict results to events after (or at) a particular UTC timestamp. Optional.\n\nNon-schema: Used as a search window for compliance or audit dashboards."},"timestamp_to":{"type":"string","format":"date-time","description":"Filter: Restrict results to events before (or at) a particular UTC timestamp. Optional.\n\nNon-schema: Used as a search window for audit analytics."},"page":{"type":"integer","format":"uint32","description":"Page number (for pagination requests). Defaults to 1 if absent."},"limit":{"type":"integer","format":"uint32","description":"How many results per page. Optional; capped by server – default is 100."}},"required":[],"description":"Request object for filtering/searching role change events. All fields optional; valid queries may combine multiple filters for targeted search.\n\nThis request complies with IPage IRequest contract and platform filter/search conventions.\n\nReferences original audit/search requirements and Prisma schema field commentary."},"IPageIDiscussionBoardRoleChange":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Information about pagination of this results set (page, limit, total, etc.)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardRoleChange"},"description":"Array of role change event objects, each fully typed as IDiscussionBoardRoleChange."}},"required":["pagination","data"],"description":"Paginated results for role change event queries.\n\nContainer type for lists of IDiscussionBoardRoleChange values, supporting full admin audits, RBAC/role dashboards, and compliance investigation, as defined in requirements. Each data[] is a full historic event instance. Maps to IPage<T> pattern for consistency."},"IDiscussionBoardTopic.IRequest":{"type":"object","properties":{"keywords":{"type":"string","description":"Search keywords for topic title/description. Optional; uses full text index.\n\nReferences: discussion_board_topics.title (gin_trgm_ops), discussion_board_topics.description (gin_trgm_ops)"},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Filter: Only return topics belonging to this category (UUID).\n\nReferences: discussion_board_topics.discussion_board_category_id"},"status":{"type":"string","description":"Filter: Only return topics matching a particular status value (case-sensitive string).\n\nReferences: discussion_board_topics.status. No hardcoded enums, see business logic for allowed values."},"pinned":{"type":"boolean","description":"Filter: Only return topics pinned (true) or unpinned (false). Non-schema logic; inferred from 'pinned_at' being set."},"closed":{"type":"boolean","description":"Filter: Only return topics closed (true) or open (false). Non-schema logic; inferred from 'closed_at' being set."},"page":{"type":"integer","format":"uint32","description":"Pagination: page number (starts at 1)."},"limit":{"type":"integer","format":"uint32","description":"Pagination: number of items per page. Default is 100, capped by system."}},"required":[],"description":"Request object for searching/filtering topic thread records. Complies with IPage filtering convention and supports efficient server-side search.\n\nAll properties are optional; combining multiple filter keys narrows the scope of the search. Does not create or mutate topics. Strictly references search-only use cases as described in requirements and schema commentary."},"IPageIDiscussionBoardTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging info for this result subset – page number, limit, total record count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTopic"},"description":"The array of data items returned for this result page. Each entry is a discussion topic entity (IDiscussionBoardTopic)."}},"required":["pagination","data"],"description":"Paginated result set/response for a topic search. Follows IPage<T> convention for platform-wide consistency.\n\nSupports client-side rendering and admin dashboards for topic lists (with filter, sort, and navigation controls per requirements). Data array always contains fully normalized topic entities."},"IDiscussionBoardTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this topic (UUID).\n\nPrisma: discussion_board_topics.id"},"discussion_board_category_id":{"type":"string","format":"uuid","description":"UUID of the category to which this topic belongs.\n\nPrisma: discussion_board_topics.discussion_board_category_id"},"created_by_member_id":{"type":"string","format":"uuid","description":"UUID of member who created this topic. 3NF: strictly atomic link.\n\nPrisma: discussion_board_topics.created_by_member_id"},"last_edited_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of member who last edited this topic. Nullable: may be null if never edited after creation.\n\nPrisma: discussion_board_topics.last_edited_by_member_id"},{"type":"null"}],"description":"UUID of member who last edited this topic. Nullable: may be null if never edited after creation.\n\nPrisma: discussion_board_topics.last_edited_by_member_id"},"title":{"type":"string","description":"Human-readable, unique topic title.\n\nPrisma: discussion_board_topics.title. Used for subject/agenda summary and search."},"description":{"type":"string","description":"Detailed description or contents of initial post/agenda for this topic.\n\nPrisma: discussion_board_topics.description. May contain rich text, but stored as string."},"status":{"type":"string","description":"Status string, such as 'open', 'closed', or 'pinned'.\n\nPrisma: discussion_board_topics.status. Concrete allowed values are managed at business layer."},"pinned_at":{"oneOf":[{"type":"string","format":"date-time","description":"If topic is pinned, this is the timestamp of pinning, else null.\n\nPrisma: discussion_board_topics.pinned_at"},{"type":"null"}],"description":"If topic is pinned, this is the timestamp of pinning, else null.\n\nPrisma: discussion_board_topics.pinned_at"},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"If closed, timestamp of closure. Null if still open.\n\nPrisma: discussion_board_topics.closed_at"},{"type":"null"}],"description":"If closed, timestamp of closure. Null if still open.\n\nPrisma: discussion_board_topics.closed_at"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601). For ordering and audit/compliance.\n\nPrisma: discussion_board_topics.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp, for ordering and version control.\n\nPrisma: discussion_board_topics.updated_at"}},"required":["id","discussion_board_category_id","created_by_member_id","title","description","status","created_at","updated_at"],"description":"Represents a topic/discussion thread entity, as per platform requirements and schema documentation.\n\nTopic thread entity contains unique id, links to category and author, workflow status (open, closed, or pinned), all with full versioned timestamp tracking. Does NOT contain actual post content or business records, only thread-level meta. Follows all normalization and audit trail requirements."},"IDiscussionBoardTopic.ICreate":{"type":"object","properties":{"discussion_board_category_id":{"type":"string","format":"uuid","description":"UUID of category where this topic is being created. Must match existing discussion_board_categories.id.\n\nCreation assigns this topic to the category, as required by organization/feature requirements."},"title":{"type":"string","description":"Title for the new topic. Must be globally unique in this category (business logic), per DB constraint and UI behavior.\n\nUser supplied; descriptive of the agenda or subject."},"description":{"type":"string","description":"Initial agenda or summary for the topic (may be rich text). 3NF: not duplicated in posts or replies.\n\nUser supplied."},"status":{"type":"string","description":"Status of topic at creation, one of allowed values (typically 'open', 'closed', or 'pinned'). String, validated by business logic.\n\nRequired by Prisma: discussion_board_topics.status"},"pinned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for when topic is pinned (if at creation). If absent, should be null.\n\nBusiness logic: can be set by admin, moderator, or auto rule."},{"type":"null","format":"date-time","description":"Timestamp for when topic is pinned (if at creation). If absent, should be null.\n\nBusiness logic: can be set by admin, moderator, or auto rule."}],"description":"Timestamp for when topic is pinned (if at creation). If absent, should be null.\n\nBusiness logic: can be set by admin, moderator, or auto rule."},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for when topic is closed, if immediate/known at creation. Null if topic starts open."},{"type":"null","format":"date-time","description":"Timestamp for when topic is closed, if immediate/known at creation. Null if topic starts open."}],"description":"Timestamp for when topic is closed, if immediate/known at creation. Null if topic starts open."}},"required":["discussion_board_category_id","title","description","status"],"description":"Payload to create a new discussion thread/topic. Only business logic-allowed fields are settable at create.\n\nAuthor/member id (owner) is set at controller/service (not accepted in create body), per security guidance – not client-supplied.\n\nFollows platform content submission policies and normalization best practices."},"IDiscussionBoardTopic.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"New title for this topic; must comply with uniqueness and naming conventions, per business logic."},"description":{"type":"string","description":"New description/agenda body for the topic (if being edited)."},"status":{"type":"string","description":"New status value for the topic (open/closed/pinned) per business rules."},"pinned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update timestamp for when topic was pinned/unpinned (set to date-time or null to clear)."},{"type":"null","format":"date-time","description":"Update timestamp for when topic was pinned/unpinned (set to date-time or null to clear)."}],"description":"Update timestamp for when topic was pinned/unpinned (set to date-time or null to clear)."},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for closing this topic, or null to re-open."},{"type":"null","format":"date-time","description":"Timestamp for closing this topic, or null to re-open."}],"description":"Timestamp for closing this topic, or null to re-open."}},"required":[],"description":"Payload for updating/editing a discussion topic by the owner. All updatable fields are optional; updating uses only fields present.\n\nOwnership and permission validated at controller/service (author, not client-supplied). No security role/id supplied in body."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number (starts from 1).\n\nFrom standard IPage contract."},"limit":{"type":"integer","format":"uint32","description":"Number of items per page (default 100).\n\nFrom IPage contract."},"records":{"type":"integer","format":"uint32","description":"Total records across all pages."},"pages":{"type":"integer","format":"uint32","description":"Total pages (records/limit, ceiling division)."}},"required":["current","limit","records","pages"],"description":"Standard pagination metadata for IPage container types.\n\nApplies to all paged results across discussion board APIs, per IPage interface."}}},"completed":59,"total":119,"step":0,"created_at":"2025-07-28T08:33:58.471Z"},"tokenUsage":{"facade":{"aggregate":{"total":887830,"input":{"total":832115,"cached":3840},"output":{"total":55715,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":887830,"input":{"total":832115,"cached":3840},"output":{"total":55715,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":887830,"input":{"total":832115,"cached":3840},"output":{"total":55715,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":887830,"input":{"total":832115,"cached":3840},"output":{"total":55715,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardConfiguration.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"요청된 페이지 번호입니다. 기본값은 1입니다."},{"type":"null","description":"요청된 페이지 번호입니다. 기본값은 1입니다."}],"description":"요청된 페이지 번호입니다. 기본값은 1입니다."},"limit":{"oneOf":[{"type":"integer","description":"페이지당 반환될 레코드 수입니다. 기본값은 100입니다."},{"type":"null","description":"페이지당 반환될 레코드 수입니다. 기본값은 100입니다."}],"description":"페이지당 반환될 레코드 수입니다. 기본값은 100입니다."},"search":{"oneOf":[{"type":"string","description":"구성 key나 설명 필드에서 부분 검색을 위한 문자열입니다. 전체 설정 중에서 일부를 검색할 때 사용됩니다."},{"type":"null","description":"구성 key나 설명 필드에서 부분 검색을 위한 문자열입니다. 전체 설정 중에서 일부를 검색할 때 사용됩니다."}],"description":"구성 key나 설명 필드에서 부분 검색을 위한 문자열입니다. 전체 설정 중에서 일부를 검색할 때 사용됩니다."},"sort_field":{"oneOf":[{"type":"string","description":"정렬 기준이 되는 필드명입니다. 예: 'created_at', 'key'. 기본값은 'created_at'입니다."},{"type":"null","description":"정렬 기준이 되는 필드명입니다. 예: 'created_at', 'key'. 기본값은 'created_at'입니다."}],"description":"정렬 기준이 되는 필드명입니다. 예: 'created_at', 'key'. 기본값은 'created_at'입니다."},"sort_order":{"oneOf":[{"const":"asc","description":"정렬 방향을 지정합니다. 'asc'는 오름차순, 'desc'는 내림차순입니다. 기본값은 'desc'입니다."},{"const":"desc","description":"정렬 방향을 지정합니다. 'asc'는 오름차순, 'desc'는 내림차순입니다. 기본값은 'desc'입니다."},{"type":"null","enum":["asc","desc"],"description":"정렬 방향을 지정합니다. 'asc'는 오름차순, 'desc'는 내림차순입니다. 기본값은 'desc'입니다."}],"description":"정렬 방향을 지정합니다. 'asc'는 오름차순, 'desc'는 내림차순입니다. 기본값은 'desc'입니다."}},"description":"시스템/글로벌 설정(disccusion_board_configurations) 목록 요청 시 검색/페이징/정렬 조건을 전달하는 객체입니다.\n\n이 구조체는 운영 화면, 관리자 UI, 시스템 초기화시 조건부 조회 등에 사용되며, key나 설명으로의 부분 검색, 갯수 지정(page/limit), 정렬 기준(필드/방향)을 다양하게 조합해 활용합니다. 모든 필드는 선택 사항이며, 값을 지정하지 않으면 기본 동작으로 대치됩니다.\n\n참고: Prisma discussion_board_configurations 테이블의 시스템 설정 row 조회 조건이며, 비밀번호나 민감정보는 포함하지 않습니다.","required":[]},"IPageDiscussionBoardConfiguration":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardConfiguration"}}},"required":["pagination","data"],"description":"구성 엔트리(시스템/글로벌 설정) 목록 응답 표준. \n\npagination에는 페이지 정보가, data에는 각 설정의 상세 정보 배열이 담겨 반환됩니다. \n\nPrisma discussion_board_configurations 테이블 데이터를 페이지네이션 규격에 맞게 제공합니다.\n\n각 항목은 IDiscussionBoardConfiguration 타입에 해당하며, 검색 결과가 없을 경우 data는 빈 배열입니다."},"IDiscussionBoardConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"설정 엔트리 고유 식별자(UUID).\n\nPrisma discussion_board_configurations의 id 컬럼과 일치합니다."},"key":{"type":"string","description":"글로벌/시스템 설정명(키).\n\n예시: 'max_attachment_size', 'site_maintenance_mode', 'topic_creation_enabled'. 각 환경 내에서 유일합니다.\n\nPrisma discussion_board_configurations의 key 컬럼 설명을 참조하세요."},"value":{"type":"string","description":"구성 값(문자열).\n\n실제 설정의 값으로, 수치(문자열 변환), true/false 등 다양한 타입이 가능함. 예시: '10240', 'true', 'Welcome!'\n\nPrisma discussion_board_configurations의 value 컬럼."},"description":{"oneOf":[{"type":"string","description":"설정 항목에 대한 설명/코멘트. UI 및 관리용.\n\n예시: '첨부파일 최대 크기(바이트).', '공지로 띄우는 메시지'. 값 미지정(Null) 가능.\n\nPrisma discussion_board_configurations의 description 컬럼 설명 참고."},{"type":"null","description":"설정 항목에 대한 설명/코멘트. UI 및 관리용.\n\n예시: '첨부파일 최대 크기(바이트).', '공지로 띄우는 메시지'. 값 미지정(Null) 가능.\n\nPrisma discussion_board_configurations의 description 컬럼 설명 참고."}],"description":"설정 항목에 대한 설명/코멘트. UI 및 관리용.\n\n예시: '첨부파일 최대 크기(바이트).', '공지로 띄우는 메시지'. 값 미지정(Null) 가능.\n\nPrisma discussion_board_configurations의 description 컬럼 설명 참고."},"created_at":{"type":"string","format":"date-time","description":"구성 엔트리 생성 시각(ISO8601).\n\nPrisma discussion_board_configurations의 created_at 컬럼."},"updated_at":{"type":"string","format":"date-time","description":"마지막 업데이트 시각(ISO8601).\n\nPrisma discussion_board_configurations의 updated_at 컬럼."}},"required":["id","key","value","created_at","updated_at"],"description":"시스템 전역 설정 엔트리 객체, discussion_board_configurations 테이블 1row에 해당.\n\n각 설정은 id(고유값), key(설정/기능명), value(설정값), description(선택설명), 생성/수정타임스탬프 필드로 구성됨.\n\n설명은 상위 수준의 운영/관리 목적, 시스템 제어/UX에 활용. 민감 정보는 절대 포함하지 않음."},"IDiscussionBoardConfiguration.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"신규로 등록할 설정 키(이름).\n\n반드시 유일해야 하며, 예: 'max_attachment_size', 'is_site_open'과 같이 시스템 내 특정 기능/정책명으로 사용됨."},"value":{"type":"string","description":"설정 값(문자열, 불리언/숫자 등 변환 저장).\n\n운영시 다양한 값이 될 수 있음(예: '65536', 'true', 'Welcome to the board!')."},"description":{"oneOf":[{"type":"string","description":"설정 설명(선택). 해당 설정의 의미 또는 주석. 운영자 화면 및 문서화에 도움을 줍니다."},{"type":"null","description":"설정 설명(선택). 해당 설정의 의미 또는 주석. 운영자 화면 및 문서화에 도움을 줍니다."}],"description":"설정 설명(선택). 해당 설정의 의미 또는 주석. 운영자 화면 및 문서화에 도움을 줍니다."}},"required":["key","value"],"description":"시스템 설정 신규 생성 요청 형식. Prisma discussion_board_configurations에 row 추가시 사용.\n\n'key'와 'value' 두 필드는 필수이며, description은 선택입니다. key의 유일성은 Table 제약조건에 의해 강제됩니다. 민감정보 저장은 불가."},"IDiscussionBoardConfiguration.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"변경할 구성 값(문자열). Prisma discussion_board_configurations의 value 컬럼. 기존 값과 같은 타입(숫자,불리언,문자열 등)으로 변환하여 저장해야 함."},"description":{"oneOf":[{"type":"string","description":"설명/비고. 설정 주석, 추가 설명을 위한 필드(Null 허용)."},{"type":"null","description":"설명/비고. 설정 주석, 추가 설명을 위한 필드(Null 허용)."}],"description":"설명/비고. 설정 주석, 추가 설명을 위한 필드(Null 허용)."}},"required":["value"],"description":"구성 엔트리의 값/설명 수정 요청 객체. Prisma discussion_board_configurations 수정에 사용.\n\nkey, id 등은 수정할 수 없으며 오직 value와 description만 변경 가능합니다. value는 반드시 설정된 데이터 규격에 맞아야 하며, description은 선택 사항입니다."},"IDiscussionBoardCategory.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"요청 페이지 번호(기본 1)."},{"type":"null","description":"요청 페이지 번호(기본 1)."}],"description":"요청 페이지 번호(기본 1)."},"limit":{"oneOf":[{"type":"integer","description":"페이지당 데이터 수(기본 100)"},{"type":"null","description":"페이지당 데이터 수(기본 100)"}],"description":"페이지당 데이터 수(기본 100)"},"search":{"oneOf":[{"type":"string","description":"카테고리명, 설명에 대한 부분 문자열 검색용"},{"type":"null","description":"카테고리명, 설명에 대한 부분 문자열 검색용"}],"description":"카테고리명, 설명에 대한 부분 문자열 검색용"},"sort_field":{"oneOf":[{"type":"string","description":"정렬 기준 필드(기본 sort_order, 선택: name 등)"},{"type":"null","description":"정렬 기준 필드(기본 sort_order, 선택: name 등)"}],"description":"정렬 기준 필드(기본 sort_order, 선택: name 등)"},"sort_order":{"oneOf":[{"const":"asc","description":"정렬 방향('asc': 오름차순, 'desc': 내림차순) 기본 desc"},{"const":"desc","description":"정렬 방향('asc': 오름차순, 'desc': 내림차순) 기본 desc"},{"type":"null","enum":["asc","desc"],"description":"정렬 방향('asc': 오름차순, 'desc': 내림차순) 기본 desc"}],"description":"정렬 방향('asc': 오름차순, 'desc': 내림차순) 기본 desc"}},"description":"카테고리 목록 검색/필터링/정렬 요청 객체. Prisma discussion_board_categories를 기반으로 클라이언트 UI, 검색, 정렬에 활용됨.\n\n선택적으로 page/limit 검색, 카테고리명/설명 검색, 정렬(필드/방향)이 가능하도록 설계됨.\n\n불필요한 민감정보나 비밀번호, 권한 정보는 포함하지 않음(순수 카테고리 검색/조회 목적).","required":[]},"IPageDiscussionBoardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategory"}}},"required":["pagination","data"],"description":"카테고리 엔티티 목록 응답 표준. \n\npagination 필드에는 페이지 정보, data 필드는 카테고리 상세 배열 반환."},"IDiscussionBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"카테고리 고유 식별자(UUID). Prisma discussion_board_categories의 id 컬럼."},"code":{"type":"string","description":"카테고리 코드(식별자, 시스템상 유일, 검색/URL/권한체계 등 참조)."},"name":{"type":"string","description":"카테고리 표시 이름(UI/UX 노출용 공식명)."},"description":{"oneOf":[{"type":"string","description":"카테고리 설명, 규칙/가이드 등 UI 안내. Null 허용."},{"type":"null","description":"카테고리 설명, 규칙/가이드 등 UI 안내. Null 허용."}],"description":"카테고리 설명, 규칙/가이드 등 UI 안내. Null 허용."},"sort_order":{"type":"integer","description":"카테고리 정렬 우선순위(작을수록 위, 1=최상단)."},"is_active":{"type":"boolean","description":"활성화/비활성(삭제대신 숨김시 False)"},"created_at":{"type":"string","format":"date-time","description":"카테고리 생성시각(ISO8601)"},"updated_at":{"type":"string","format":"date-time","description":"수정시각(ISO8601)"}},"required":["id","code","name","sort_order","is_active","created_at","updated_at"],"description":"카테고리 엔티티 객체, Prisma discussion_board_categories 1row에 해당. 각 카테고리 식별 및 UI/운영 제어에 활용.\n\n비밀번호, 소유자 등 민감정보는 포함하지 않음."},"IDiscussionBoardCategory.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"신규 카테고리 코드(식별자). 시스템 및 클라이언트, URL에서 참조하며 반드시 유일해야 함."},"name":{"type":"string","description":"카테고리명(UI/UX 공식표시 사용)."},"description":{"oneOf":[{"type":"string","description":"카테고리 상세설명(옵션/null 허용)."},{"type":"null","description":"카테고리 상세설명(옵션/null 허용)."}],"description":"카테고리 상세설명(옵션/null 허용)."},"sort_order":{"type":"integer","description":"정렬 순위(1=최상단, 숫자가 작을수록 먼저 나옴)"},"is_active":{"type":"boolean","description":"활성여부. true면 사용, false면 UI/API에서 숨김/비활성"}},"required":["code","name","sort_order","is_active"],"description":"카테고리 신규 생성 요청 스키마. 코드, 이름, 정렬순위, 활성여부 필수. description은 선택."},"IDiscussionBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"수정할 카테고리 표시 이름."},"description":{"oneOf":[{"type":"string","description":"설명(필드 null 허용, 기존값 미변경시 null로 두면 됨)."},{"type":"null","description":"설명(필드 null 허용, 기존값 미변경시 null로 두면 됨)."}],"description":"설명(필드 null 허용, 기존값 미변경시 null로 두면 됨)."},"sort_order":{"type":"integer","description":"수정할 정렬 순위."},"is_active":{"type":"boolean","description":"활성/비활성 플래그 값."}},"required":["name","sort_order","is_active"],"description":"카테고리 엔티티 수정 요청 객체. 이름/설명/정렬순위/활성여부 중 일부 또는 전체 업데이트에 사용. Null은 그 필드의 미변경/삭제 처리로 적용될 수 있음."},"IDiscussionBoardCategoryPermission.ICreate":{"type":"object","properties":{"category_id":{"type":"string","format":"uuid","description":"권한설정이 적용될 카테고리의 id(uuid)."},"role_name":{"oneOf":[{"const":"admin","description":"배정할 역할명(admin/moderator/member/guest 중 하나)."},{"const":"moderator","description":"배정할 역할명(admin/moderator/member/guest 중 하나)."},{"const":"member","description":"배정할 역할명(admin/moderator/member/guest 중 하나)."},{"const":"guest","description":"배정할 역할명(admin/moderator/member/guest 중 하나)."}],"description":"배정할 역할명(admin/moderator/member/guest 중 하나)."},"can_view":{"type":"boolean","description":"해당 롤이 이 카테고리를 볼 수 있는지 여부."},"can_create_topic":{"type":"boolean","description":"해당 롤이 이 카테고리에 토픽(글)을 새로 작성 가능 여부."},"can_reply":{"type":"boolean","description":"해당 롤이 토픽 댓글(답글) 작성권한."},"can_like":{"type":"boolean","description":"해당 롤이 이 카테고리 내 글이나 댓글에 좋아요/싫어요 등 반응을 남길 수 있는지."},"can_report":{"type":"boolean","description":"해당 롤이 이 카테고리에서 신고(컨텐츠 플래그)할 수 있는 권한."}},"required":["category_id","role_name","can_view","can_create_topic","can_reply","can_like","can_report"],"description":"카테고리-롤별 권한설정 신규 등록 요청 객체. Prisma discussion_board_category_permissions에 row 추가시 사용.\n\n각 필드는 모두 필수이며, (카테고리id, 역할명)의 조합은 유일하게 동작함.\n\n민감 정보/권한승계 등은 포함하지 않음(운영자 전용 엔드포인트용)."},"IDiscussionBoardCategoryPermission":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"카테고리 권한설정 row 고유값. Prisma discussion_board_category_permissions의 id 컬럼."},"category_id":{"type":"string","format":"uuid","description":"적용 카테고리 id(UUID)."},"role_name":{"oneOf":[{"const":"admin","description":"권한 부여된 역할(admin, moderator, member, guest 중 하나)."},{"const":"moderator","description":"권한 부여된 역할(admin, moderator, member, guest 중 하나)."},{"const":"member","description":"권한 부여된 역할(admin, moderator, member, guest 중 하나)."},{"const":"guest","description":"권한 부여된 역할(admin, moderator, member, guest 중 하나)."}],"description":"권한 부여된 역할(admin, moderator, member, guest 중 하나)."},"can_view":{"type":"boolean","description":"이 롤의 카테고리 보기(접근권한) 가능 여부."},"can_create_topic":{"type":"boolean","description":"이 롤의 카테고리 신규 토픽 작성권한."},"can_reply":{"type":"boolean","description":"이 롤의 댓글(답글) 작성권한."},"can_like":{"type":"boolean","description":"이 롤의 좋아요/싫어요 등 반응기능 허용 여부."},"can_report":{"type":"boolean","description":"이 롤의 신고(플래그)기능 사용 가능 여부."},"created_at":{"type":"string","format":"date-time","description":"설정 생성일자(등록시각, ISO8601)"}},"required":["id","category_id","role_name","can_view","can_create_topic","can_reply","can_like","can_report","created_at"],"description":"카테고리 권한설정 엔티티 객체. Prisma discussion_board_category_permissions 1row에 해당.\n\n카테고리별, 역할별로 view/create/reply/like/report 권한을 판별하는데 사용됨.\n\n민감정보, 사용자 ID 등은 직접 포함하지 않는다."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"현재 페이지 번호(1-base)."},"limit":{"type":"integer","description":"페이지당 데이터 제한 수. 기본값 100."},"records":{"type":"integer","description":"전체 결과 레코드 수."},"pages":{"type":"integer","description":"전체 페이지 수. records/limit값과 ceiling 적용."}},"required":["current","limit","records","pages"],"description":"페이지네이션 정보. 전체 레코드, 현재/총 페이지, 한 페이지당 갯수 등 포함."}}},"completed":71,"total":119,"step":0,"created_at":"2025-07-28T08:33:58.643Z"},"tokenUsage":{"facade":{"aggregate":{"total":954992,"input":{"total":895932,"cached":3840},"output":{"total":59060,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":954992,"input":{"total":895932,"cached":3840},"output":{"total":59060,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":954992,"input":{"total":895932,"cached":3840},"output":{"total":59060,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":954992,"input":{"total":895932,"cached":3840},"output":{"total":59060,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardPostAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자입니다. 이 첨부파일에 대한 UUID로, 데이터베이스의 기본 키 역할을 하며, 검색, 업데이트 또는 참조 시 사용됩니다.\n\nPrisma 스키마의 discussion_board_post_attachments.id 칼럼을 참조합니다."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"첨부파일이 연결된 포스트의 UUID입니다. 이 값은 discussion_board_posts 테이블의 id를 참조하여 첨부파일과 포스트 간의 연관 관계를 명확히 합니다.\n\nPrisma discussion_board_post_attachments.discussion_board_post_id 칼럼 설명과 연결됩니다."},"uploader_member_id":{"type":"string","format":"uuid","description":"이 파일 첨부를 업로드한 회원의 UUID입니다. 이것은 업로더의 멤버십 식별자와 연결되며, 소유권, 감사, 관리 기능을 지원합니다.\n\nPrisma discussion_board_post_attachments.uploader_member_id 칼럼 설명 참조."},"file_uri":{"type":"string","maxLength":80000,"description":"첨부파일이 저장된 위치의 URI(파일 경로, CDN URL, 객체 저장소 등)입니다. 예: https://cdn.site.com/files/file123.pdf\n\nPrisma discussion_board_post_attachments.file_uri 칼럼과 일치."},"file_name":{"type":"string","description":"사용자에게 표시되는 첨부파일 이름입니다. 이는 사용자 친화적인 라벨로, 실제 파일명과 다를 수 있습니다.\n\nPrisma 스키마의 file_name 칼럼 참고."},"file_size":{"type":"integer","description":"첨부파일의 크기(단위: 바이트)입니다. 업로드 제한, 진단, 표시 목적에 사용됩니다. 예시: 204800(200KB)\n\nPrisma discussion_board_post_attachments.file_size 칼럼."},"mime_type":{"type":"string","description":"파일의 MIME 타입입니다. 예시: application/pdf, image/png 등. 파일 렌더링과 필터링에 꼭 필요합니다.\n\nPrisma discussion_board_post_attachments.mime_type 칼럼."},"is_deleted":{"type":"boolean","description":"이 첨부파일의 소프트 삭제 여부를 나타냅니다. true이면 UI나 기본 조회에서 제외합니다. 비즈니스 감사 및 실제 삭제/복구 정책 적용 시 사용됩니다.\n\nPrisma discussion_board_post_attachments.is_deleted 칼럼 참조."},"created_at":{"type":"string","format":"date-time","description":"첨부파일 레코드가 생성된 타임스탬프입니다. 감사, 정렬, 관리 용도로 활용됩니다.\n\nPrisma file의 created_at 칼럼 설명과 일치."}},"required":["id","discussion_board_post_id","uploader_member_id","file_uri","file_name","file_size","mime_type","is_deleted","created_at"],"description":"게시글 첨부파일 엔터티 객체입니다. 첨부파일의 메타데이터와 업로더, 실제 파일 위치, 파일명, 파일 타입, 업로드 일자, 논리적 삭제 여부 등을 포함합니다.\n\nPrisma discussion_board_post_attachments 테이블 구조 및 자세한 칼럼 주석을 기반으로 하며, 모든 필수 정보를 포괄합니다."},"IDiscussionBoardPostAttachment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"이 첨부파일이 연결될 포스트의 UUID입니다. UI/서버상에서 반드시 존재하는 게시글의 id여야만 하며, 외래키 참조 무결성을 만족해야 합니다.\n\nPrisma discussion_board_post_attachments.discussion_board_post_id 칼럼 참고."},"file_uri":{"type":"string","maxLength":80000,"description":"저장된 첨부파일의 실제 위치(URI)입니다. 업로드 완료 후 파일 서버/스토리지의 경로를 입력해야 하며, 보통 시스템 또는 미들웨어에서 생성됨.\n\nPrisma file_uri 필드 기준."},"file_name":{"type":"string","description":"UI/사용자에게 보이는 파일명입니다. 업로드 시, 사용자가 직접 명명하거나 브라우저/OS에서 추출된 이름이 될 수 있음.\n\nPrisma 스키마 file_name 설명."},"file_size":{"type":"integer","description":"첨부파일 크기(바이트 단위)입니다. 업로드 정책 및 제한/감사에 사용.\n\nPrisma의 file_size 칼럼 기반."},"mime_type":{"type":"string","description":"첨부파일의 MIME 타입. 서버 또는 클라이언트가 자동 판별하는 경우도 있음. 예시: image/png, application/pdf 등 사용 권장.\n\nPrisma 스키마 mime_type column 참조."}},"required":["discussion_board_post_id","file_uri","file_name","file_size","mime_type"],"description":"게시글에 첨부파일을 업로드/등록할 때 사용되는 생성용 타입입니다. 업로더(본인 인증)는 컨트롤러 인증 정보에서 추출하며, 클라이언트에서는 직접 업로더를 지정하지 않습니다.\n\nRBAC상의 보안 원칙과 Prisma discussion_board_post_attachments 모델 주석에 따라, 업로더 식별자는 별도 서버 인증 컨텍스트에서 가져와야 하므로 요청 타입에는 포함되지 않습니다."},"IDiscussionBoardPostAttachment.IUpdate":{"type":"object","properties":{"file_name":{"type":"string","description":"수정할 경우 새 이름을 입력합니다. 사용자 편의성 및 파일명 정정 지원용."},"mime_type":{"type":"string","description":"첨부파일 MIME 타입을 변경 시 입력합니다. 일반적으론 변경 필요 없음."},"is_deleted":{"type":"boolean","description":"첨부파일의 소프트 삭제 여부를 나타냅니다. 삭제 처리 시 true로 전달합니다.\n\ndeleted_at과 같은 하드삭제 칼럼이 없으므로, 실제로 삭제하고자 할 경우 true로 세팅만 하고 파일은 남겨 둡니다."}},"required":[],"description":"첨부파일의 부분 정보 수정(메타데이터 편집, 소프트 삭제 등)에 사용하는 객체입니다. 파일 실제 데이터의 업데이트는 지원하지 않으며, 오직 파일명/타입/논리적 삭제 플래그만 변경 가능합니다.\n\nPrisma discussion_board_post_attachments 모델 구조 및 보안 정책을 반영합니다."},"IDiscussionBoardPostLike.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"조회/필터링할 게시글의 UUID입니다. 이 필드를 이용해 특정 게시글에 대한 좋아요/싫어요 기록만 조회할 수 있음."},"author_member_id":{"type":"string","format":"uuid","description":"특정 회원이 남긴 좋아요/싫어요 데이터를 필터링할 때 사용."},"is_like":{"type":"boolean","description":"좋아요(true) 또는 싫어요(false) 필터링에 사용."},"created_at_from":{"type":"string","format":"date-time","description":"이 시점 이후에 생성된 좋아요/싫어요만 검색. 기간 조건에 활용."},"created_at_to":{"type":"string","format":"date-time","description":"이 시점 이전에 생성된 좋아요/싫어요만 포함. 기간 조건."},"page":{"type":"integer","description":"페이지 번호. 1부터 시작."},"limit":{"type":"integer","description":"페이지당 반환 객체 수. 기본값 100(권장값)"}},"required":[],"description":"게시글 좋아요/싫어요 검색 및 필터링, 페이징에 사용하는 쿼리 파라미터 객체입니다. 페이징(페이지/개수), 기간 필터, 다양한 조합의 검색이 가능합니다.\n\nPrisma discussion_board_post_likes 관련 비즈니스 요구 및 데이터 기준."},"IPageDiscussionBoardPostLike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPostLike"},"description":"실제 페이지에 포함된 좋아요/싫어요 각 엔티티 배열"}},"required":["pagination","data"],"description":"좋아요/싫어요 페이징 결과 컨테이너 객체. 페이지 정보와 실제 리스트 데이터가 포함됨.\n\nIPage<T> Type 기반. pagination은 전체 개수/페이지 번호/페이지별 개수 등 포함."},"IDiscussionBoardPostLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"엔티티 고유 식별자. UUID. discussion_board_post_likes.id 필드를 나타냄."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"좋아요/싫어요가 속한 게시글의 UUID 참조값입니다.\n\nPrisma discussion_board_post_likes.discussion_board_post_id 칼럼."},"author_member_id":{"type":"string","format":"uuid","description":"좋아요/싫어요 남긴 회원의 UUID 식별자.\n\nPrisma discussion_board_post_likes.author_member_id 칼럼."},"is_like":{"type":"boolean","description":"true=좋아요(Upvote), false=싫어요(Downvote) 구분 값.\n\nPrisma is_like 데이터와 일치하게 반환."},"created_at":{"type":"string","format":"date-time","description":"좋아요/싫어요 생성 시각. audit 및 통계에 사용."}},"required":["id","discussion_board_post_id","author_member_id","is_like","created_at"],"description":"게시글의 좋아요(혹은 싫어요) 한 건을 표준화한 엔터티 객체. \n\nPrisma discussion_board_post_likes 모든 실 칼럼을 상세 문서화합니다. 보안상 패스워드 등 민감 정보는 포함되지 않습니다."},"IDiscussionBoardPostLike.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"좋아요 혹은 싫어요 대상이 되는 게시글의 UUID입니다."},"is_like":{"type":"boolean","description":"좋아요(true) 또는 싫어요(false) 여부."}},"required":["discussion_board_post_id","is_like"],"description":"좋아요/싫어요(Upvote/Downvote) 액션 등록 요청 타입. 게시글 id와 평가 값만을 받으며, 실제 actor(member)는 인증 컨텍스트에서 자동 주입됩니다.\n\nPrisma 보안 설명에 따라, actor_member_id를 클라이언트가 입력하지 않음에 유의."},"IDiscussionBoardPostLike.IUpdate":{"type":"object","properties":{"is_like":{"type":"boolean","description":"좋아요/싫어요 상태를 전환할 때 사용하는 값."}},"required":["is_like"],"description":"기존 좋아요/싫어요 값(is_like)만을 업데이트합니다. 나머지 필드는 변경 불가.\n\nPrisma discussion_board_post_likes 모델 정책 기준."},"IDiscussionBoardReport.IRequest":{"type":"object","properties":{"resolved":{"type":"boolean","description":"해결 여부로 보고서를 필터링하는 데 사용합니다.\n\n예: resolved=true이면 완료된(처리가 끝난) 신고만, false이면 아직 미처리된 신고만 반환."},"reporter_id":{"type":"string","format":"uuid","description":"신고를 제출한 회원의 UUID로서, 특정 사용자가 제출한 신고만 필터링할 수 있습니다."},"reason_id":{"type":"string","format":"uuid","description":"신고 사유 id(사전 정의)로 필터할 때 사용합니다."},"reported_entity_id":{"type":"string","format":"uuid","description":"신고된 대상(게시글, 댓글 등)의 UUID."},"reported_entity_type":{"type":"string","description":"신고의 대상 유형(예: post, comment, user 등).\n\n비즈니스 정책에 따라 허용되는 문자열만 입력 권장. Enum으로 관리되면 enum schema로 분리 필요."},"created_at_from":{"type":"string","format":"date-time","description":"조회 시작 시각(이후 시점만 반환)"},"created_at_to":{"type":"string","format":"date-time","description":"조회 종료 시각(이전만 결과 포함)"},"page":{"type":"integer","description":"페이지 번호(기본 1)"},"limit":{"type":"integer","description":"페이지 당 반환 엔티티 수(기본 100)"}},"required":[],"description":"신고(Report) 리스트/검색/통계/페이징에 사용하는 요청 파라미터 객체입니다. 다양한 조건(해결상태, 작성자, 사유, 신고대상, 생성일)을 복합 제공.\n\ndiscussion_board_reports 테이블 실 구조와 활용 시나리오를 문서화함."},"IPageIDiscussionBoardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReport"},"description":"신고(Report) 실 데이터 배열"}},"required":["pagination","data"],"description":"신고(Report) 페이징 결과 컨테이너. 페이지 정보와 실제 엔티티 배열이 포함됨.\n\nIPage 표준 구조에 기반함."},"IDiscussionBoardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 신고 식별자(UUID). discussion_board_reports.id 컬럼이며, 모든 신고 트래킹의 기본값."},"reporter_id":{"type":"string","format":"uuid","description":"신고한 회원의 고유 UUID 식별자. Prisma reporter_id 컬럼에 해당. 신고 생성 시 인증된 회원만 가능합니다."},"reason_id":{"type":"string","format":"uuid","description":"사전 정의된 신고 사유의 UUID. discussion_board_report_reasons.id와 1:N 참조 관계.\n\n실제 사유(텍스트)는 별도 테이블에서 관리되므로 이 값만 저장됩니다."},"reported_entity_id":{"type":"string","format":"uuid","description":"신고된 대상 Entity의 UUID입니다. 게시글, 댓글, 사용자 등 대상 종류에 맞는 UUID가 저장됨."},"reported_entity_type":{"type":"string","description":"신고 대상 유형(예: post, comment, user 등). 정확한 Enum 값 혹은 도메인 별로 허용된 값만 사용합니다."},"description":{"oneOf":[{"type":"string","description":"신고자가 남긴 부가 설명(선택). 문제 설명, 추가 사유 등. null일 수 있습니다.\n\nPrisma discussion_board_reports.description 칼럼과 일치."},{"type":"null","description":"신고자가 남긴 부가 설명(선택). 문제 설명, 추가 사유 등. null일 수 있습니다.\n\nPrisma discussion_board_reports.description 칼럼과 일치."}],"description":"신고자가 남긴 부가 설명(선택). 문제 설명, 추가 사유 등. null일 수 있습니다.\n\nPrisma discussion_board_reports.description 칼럼과 일치."},"created_at":{"type":"string","format":"date-time","description":"신고가 제출된 시각. 감사, 통계, 필터링 등에 활용."},"resolved":{"type":"boolean","description":"해결/처리 여부 플래그. true == 완료, false == 미처리.\n\ndiscussion_board_reports.resolved 플래그."}},"required":["id","reporter_id","reason_id","reported_entity_id","reported_entity_type","created_at","resolved"],"description":"신고(Report) 엔터티 객체. 신고의 상세 내역, 사유, 대상, 처리상태를 모두 포함하여, Prisma discussion_board_reports 설계 및 비즈니스 흐름과 100% 일치.\n\n비밀번호, 토큰, 내부 시스템값 등 민감정보 미포함."},"IDiscussionBoardReport.ICreate":{"type":"object","properties":{"reason_id":{"type":"string","format":"uuid","description":"신고 사유(프리셋) UUID입니다. 보고서 생성 시 필수."},"reported_entity_id":{"type":"string","format":"uuid","description":"신고할 대상 Entity(게시글/댓글 등)의 UUID."},"reported_entity_type":{"type":"string","description":"신고대상의 유형. 예: post, comment, user.\n\n서버에서 허용된 값만 허용하는 것이 바람직합니다."},"description":{"oneOf":[{"type":"string","description":"추가 설명, 문제 상황 설명 등. null 허용."},{"type":"null","description":"추가 설명, 문제 상황 설명 등. null 허용."}],"description":"추가 설명, 문제 상황 설명 등. null 허용."}},"required":["reason_id","reported_entity_id","reported_entity_type"],"description":"신고(Report) 생성/등록 요청 객체 타입. reporter_id는 인증된 사용자 컨텍스트에서 자동 수집합니다.\n\n비밀번호, 토큰, 특수 시스템 값등은 절대 노출하거나 입력받지 않습니다. Prisma discussion_board_reports 생성 요구와 일치."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"현재 페이지 번호 (1부터 시작)"},"limit":{"type":"integer","description":"페이지당 데이터 수 (기본 100)"},"records":{"type":"integer","description":"데이터베이스 내 전체 레코드 총합"},"pages":{"type":"integer","description":"전체 페이지수 (records/limit로 계산)"}},"required":["current","limit","records","pages"],"description":"페이지네이션 정보를 담는 표준 구조체. 전체 데이터 양, 현재 페이지, 페이지당 개수, 전체 페이지 수 등 포함.\nIPage<T> 컨테이너에서 공통적으로 사용."}}},"completed":83,"total":119,"step":0,"created_at":"2025-07-28T08:34:03.114Z"},"tokenUsage":{"facade":{"aggregate":{"total":1022596,"input":{"total":959757,"cached":3840},"output":{"total":62839,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1022596,"input":{"total":959757,"cached":3840},"output":{"total":62839,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1022596,"input":{"total":959757,"cached":3840},"output":{"total":62839,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1022596,"input":{"total":959757,"cached":3840},"output":{"total":62839,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardPost.ICreate":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"The UUID of the topic this post belongs to. Required when creating a new post.\n\nCorresponds to the `discussion_board_topic_id` column in `discussion_board_posts` Prisma schema. Its value links this post to a parent discussion thread. Only valid topic IDs may be supplied."},"title":{"oneOf":[{"type":"string","description":"Optional post title. Used primarily for main topic posts. May be null for replies.\n\nMatches the `title` column in the schema: string or null/optional. Serves as a subject or summary for the post. When used as a reply, this may be omitted."},{"type":"null","description":"Optional post title. Used primarily for main topic posts. May be null for replies.\n\nMatches the `title` column in the schema: string or null/optional. Serves as a subject or summary for the post. When used as a reply, this may be omitted."}],"description":"Optional post title. Used primarily for main topic posts. May be null for replies.\n\nMatches the `title` column in the schema: string or null/optional. Serves as a subject or summary for the post. When used as a reply, this may be omitted."},"body":{"type":"string","description":"The main content of the post. Required and must not be empty. Accepts rich text and formatting.\n\nDirect mapping of the `body` column in `discussion_board_posts`. Holds all author-generated text. Field is required for every post/reply."}},"required":["discussion_board_topic_id","body"],"description":"Create-type for a post in the discussion board. Intended for member-authored new posts or replies.\n\nDerived from the `discussion_board_posts` table. Only editable fields for post creation are included. Author ID is never supplied by clients for security; it is sourced from authentication context."},"IDiscussionBoardPost.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string","description":"Optional new/updated title for the post. May be null if the post is a reply.\n\nDirect mapping to the post's `title`. Used for renaming/changing subject lines. Optional for updates."},{"type":"null","description":"Optional new/updated title for the post. May be null if the post is a reply.\n\nDirect mapping to the post's `title`. Used for renaming/changing subject lines. Optional for updates."}],"description":"Optional new/updated title for the post. May be null if the post is a reply.\n\nDirect mapping to the post's `title`. Used for renaming/changing subject lines. Optional for updates."},"body":{"oneOf":[{"type":"string","description":"Updated post content (rich text/markdown accepted if supported). May be null if updating only the title.\n\nMaps to `body` in the Prisma schema. Does not permit full deletion of content; soft deletion is via `is_deleted` flag."},{"type":"null","description":"Updated post content (rich text/markdown accepted if supported). May be null if updating only the title.\n\nMaps to `body` in the Prisma schema. Does not permit full deletion of content; soft deletion is via `is_deleted` flag."}],"description":"Updated post content (rich text/markdown accepted if supported). May be null if updating only the title.\n\nMaps to `body` in the Prisma schema. Does not permit full deletion of content; soft deletion is via `is_deleted` flag."},"is_deleted":{"type":"boolean","description":"Set `true` to soft-delete the post (hides from most views, keeps in DB for audit). Must be explicitly set to perform a soft delete.\n\nMatches the `is_deleted` column in the schema. Set via moderation or by the post's owner to remove public visibility."}},"required":[],"description":"Update-type for posts in the discussion board. All fields are optional. Only properties editable by owners are listed. Author and topic references are not included for security reasons."},"IDiscussionBoardPostSnapshot.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Filter snapshots by post ID. Optional.\n\nCorresponds to `discussion_board_post_id` in snapshots. Restrict returned history to a single post."},"author_member_id":{"type":"string","format":"uuid","description":"Optional filter by editing member (UUID).\n\nMaps to `author_member_id` in post snapshots. Requester may filter for their edits or those of a moderator."},"created_at__start":{"type":"string","format":"date-time","description":"Optional filter to return only snapshots created after this timestamp."},"created_at__end":{"type":"string","format":"date-time","description":"Optional filter to return only snapshots created before this timestamp."},"page":{"oneOf":[{"type":"integer","description":"Zero-based page number for paginated requests. Null returns first page. Defaults handled according to paging system."},{"type":"null","description":"Zero-based page number for paginated requests. Null returns first page. Defaults handled according to paging system."}],"description":"Zero-based page number for paginated requests. Null returns first page. Defaults handled according to paging system."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of results to return per page. Null or omitted uses system default (e.g. 100)."},{"type":"null","description":"Maximum number of results to return per page. Null or omitted uses system default (e.g. 100)."}],"description":"Maximum number of results to return per page. Null or omitted uses system default (e.g. 100)."}},"required":[],"description":"Request filter for listing/searching discussion board post snapshots.\n\nMapped directly to the `discussion_board_post_snapshots` table. All fields are optional (filter/sort only). Enables paginated, filtered audit/history lookup."},"IPageIDiscussionBoardPostSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPostSnapshot"},"description":"Array of post snapshot records matching query/filter"}},"required":["pagination","data"],"description":"Paginated result for post snapshot search on the discussion board.\n\nThis aligns with the platform's IPage<T> contract, specialized for post snapshot results."},"IDiscussionBoardPostSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique snapshot identifier (UUID) for this post revision. Atomic primary key.\n\nMatches `id` in `discussion_board_post_snapshots`. Immutable and required."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"ID of the parent post this snapshot belongs to. Foreign key to posts table.\n\nMaps to `discussion_board_post_id` in schema. Enables full version tracking."},"author_member_id":{"type":"string","format":"uuid","description":"UUID of the member who made the revision. Points to discussion_board_members.\n\nReferences `author_member_id` in the schema. Immutable once snapshot is created."},"snapshot_body":{"type":"string","description":"Full content of the post at this point in revision history. Required field.\n\nDirect from `snapshot_body` in the schema. Used for rollback/comparison/history."},"edit_reason":{"oneOf":[{"type":"string","description":"Optional human-readable explanation for why the edit was made.\n\nField comes from `edit_reason` in the schema. Example: 'Fixed typo', 'Removed personal info'."},{"type":"null","description":"Optional human-readable explanation for why the edit was made.\n\nField comes from `edit_reason` in the schema. Example: 'Fixed typo', 'Removed personal info'."}],"description":"Optional human-readable explanation for why the edit was made.\n\nField comes from `edit_reason` in the schema. Example: 'Fixed typo', 'Removed personal info'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this snapshot version was created.\n\nFrom `created_at` column. Used in sorting audit history."}},"required":["id","discussion_board_post_id","author_member_id","snapshot_body","created_at"],"description":"Represents a single version of a discussion board post for edit history/audit. Based on the `discussion_board_post_snapshots` record.\n\nImmutable, append-only for compliance/audit transparency."},"IDiscussionBoardComment.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Optional filter. Only return comments attached to this post (UUID).\n\nMatches `discussion_board_post_id` on comments."},"author_member_id":{"type":"string","format":"uuid","description":"Optional filter. Only return comments by a given member.\n\nMaps to `author_member_id`. Useful for self-history, moderator audits, etc."},"is_deleted":{"type":"boolean","description":"Optional filter. When present, limits results to deleted/non-deleted comments.\n\nField comes from `is_deleted` column."},"created_at__start":{"type":"string","format":"date-time","description":"Return only comments created after this timestamp (inclusive)."},"created_at__end":{"type":"string","format":"date-time","description":"Return only comments created before this timestamp (inclusive)."},"page":{"oneOf":[{"type":"integer","description":"Zero-based page index for paginated queries. Null returns first page. Defaults handled by API."},{"type":"null","description":"Zero-based page index for paginated queries. Null returns first page. Defaults handled by API."}],"description":"Zero-based page index for paginated queries. Null returns first page. Defaults handled by API."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of records per page. If null, system applies a default (e.g. 100)."},{"type":"null","description":"Maximum number of records per page. If null, system applies a default (e.g. 100)."}],"description":"Maximum number of records per page. If null, system applies a default (e.g. 100)."}},"required":[],"description":"Discussion board comment search/filter object. All fields optional.\n\nMapped to `discussion_board_comments` for threaded comment search and pagination."},"IPageDiscussionBoardComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardComment"},"description":"Array of matching comments found in the paginated query."}},"required":["pagination","data"],"description":"Paginated response for list/search of comments on the discussion board.\n\nConforms to IPage<Comment> convention as used across board platform."},"IDiscussionBoardComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique comment identifier (UUID). Primary key.\n\nFrom `id` column in comments model."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"The post this comment is associated with. Foreign key to posts.\n\nDirect from `discussion_board_post_id`."},"author_member_id":{"type":"string","format":"uuid","description":"ID of member who authored this comment.\n\nReferences `author_member_id`. Never set by client; resolved from authentication context."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of parent comment (if a reply/threaded). Null if root comment.\n\nFrom `parent_id` field. Enables nesting/threading logic in board threads."},{"type":"null","format":"uuid","description":"UUID of parent comment (if a reply/threaded). Null if root comment.\n\nFrom `parent_id` field. Enables nesting/threading logic in board threads."}],"description":"UUID of parent comment (if a reply/threaded). Null if root comment.\n\nFrom `parent_id` field. Enables nesting/threading logic in board threads."},"body":{"type":"string","description":"Full comment body text (plain or rich content). Required.\n\nMatches `body` field. Holds user-written text content."},"is_deleted":{"type":"boolean","description":"Soft delete flag. True if comment was removed for moderation or by user. Kept for audit.\n\nFrom `is_deleted` field."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for comment creation. ISO8601/UTC.\n\nDirect from `created_at`."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for latest comment edit/update. ISO8601/UTC.\n\nFrom `updated_at`."}},"required":["id","discussion_board_post_id","author_member_id","body","is_deleted","created_at","updated_at"],"description":"Represents a comment on any board post. Based on the `discussion_board_comments` schema.\n\nIncludes thread/nesting info. Mutable only by author or moderator; deletions are soft by `is_deleted`."},"IDiscussionBoardComment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"UUID of the post being commented on. Must be provided and valid.\n\nCorresponds to `discussion_board_post_id`. Required for all new comments."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of parent comment (if replying/threading). Null for root comments.\n\nFrom `parent_id` schema column. Enables replies to replies. Optional."},{"type":"null","format":"uuid","description":"UUID of parent comment (if replying/threading). Null for root comments.\n\nFrom `parent_id` schema column. Enables replies to replies. Optional."}],"description":"UUID of parent comment (if replying/threading). Null for root comments.\n\nFrom `parent_id` schema column. Enables replies to replies. Optional."},"body":{"type":"string","description":"Text of the comment. Required. Should meet platform's content and format guidelines.\n\nDirectly mapped from `body` field on comment entity."}},"required":["discussion_board_post_id","body"],"description":"Create-type for discussion board comments. Used to insert new comments, root or reply.\n\nMatches required fields for inserts on the `discussion_board_comments` schema. Author and ownership set from authentication."},"IDiscussionBoardComment.IUpdate":{"type":"object","properties":{"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Updated parent comment. Useful to move in thread tree or undelete a reply. Nullable.\n\nFrom `parent_id` schema."},{"type":"null","format":"uuid","description":"(Optional) Updated parent comment. Useful to move in thread tree or undelete a reply. Nullable.\n\nFrom `parent_id` schema."}],"description":"(Optional) Updated parent comment. Useful to move in thread tree or undelete a reply. Nullable.\n\nFrom `parent_id` schema."},"body":{"oneOf":[{"type":"string","description":"(Optional) New comment content text (plain or formatted). Null if only thread/soft-delete update."},{"type":"null","description":"(Optional) New comment content text (plain or formatted). Null if only thread/soft-delete update."}],"description":"(Optional) New comment content text (plain or formatted). Null if only thread/soft-delete update."},"is_deleted":{"type":"boolean","description":"(Optional) Set true to soft-delete the comment. Ownership and control enforced at API/controller. Mutations must comply with audit."}},"required":[],"description":"Edit-type object for updating an existing comment on the discussion board (must be owned by the user or moderator).\n\nOnly updatable fields from the `discussion_board_comments` table included. None are required, allowing targeted/partial updates."},"IDiscussionBoardPostAttachment.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Filter attachments by associated post ID. Optional.\n\nColumn `discussion_board_post_id` on attachments. Restricts search to a single post."},"uploader_member_id":{"type":"string","format":"uuid","description":"Optional filter on uploader (by member id).\n\nMaps to `uploader_member_id` column. For self/history audit or moderation review."},"is_deleted":{"type":"boolean","description":"(Optional) Limit results to attachments with or without soft deletion set.\n\nFrom `is_deleted` field on discussion_board_post_attachments."},"mime_type":{"type":"string","description":"Optional filter. Only results with this MIME type (exact match).\n\nMatches `mime_type` field, e.g. 'image/png', 'application/pdf'."},"file_name__contains":{"type":"string","description":"Optional substring/search filter for partial filename matches. Not exact.\n\nClient-side/case-insensitive searches common; maps to `file_name` column."},"created_at__start":{"type":"string","format":"date-time","description":"Return only attachments created after the specified time (inclusive)."},"created_at__end":{"type":"string","format":"date-time","description":"Return only attachments created before this time (inclusive)."},"page":{"oneOf":[{"type":"integer","description":"Page for pagination (zero-based). Null uses first/default page."},{"type":"null","description":"Page for pagination (zero-based). Null uses first/default page."}],"description":"Page for pagination (zero-based). Null uses first/default page."},"limit":{"oneOf":[{"type":"integer","description":"Maximum results per page. If null, system applies page size default."},{"type":"null","description":"Maximum results per page. If null, system applies page size default."}],"description":"Maximum results per page. If null, system applies page size default."}},"required":[],"description":"File attachment search/filter request for the discussion_board_post_attachments entity.\n\nAll fields optional; filters and pagination tool."},"IPageDiscussionBoardPostAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPostAttachment"},"description":"List of matching post attachments (with metadata)."}},"required":["pagination","data"],"description":"Paginated result for file attachment searches on board posts.\n\nFollows global IPage<T> pattern with attachment type."},"IDiscussionBoardPostAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID for the file attachment record. Primary key.\n\nFrom `id` in discussion_board_post_attachments."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"YYYY of post the attachment is linked to. FK.\n\nMaps to the `discussion_board_post_id` field."},"uploader_member_id":{"type":"string","format":"uuid","description":"UUID of the member who uploaded this file.\n\nFrom `uploader_member_id`. Never set by client; always controlled by server."},"file_uri":{"type":"string","description":"Permanent URI/location of the attachment file in storage/CDN.\n\nSet in `file_uri` (URL or storage path). Required and globally unique per record."},"file_name":{"type":"string","description":"File/display name as shown to users. E.g., 'report.pdf'.\n\nFrom `file_name` in schema."},"file_size":{"type":"integer","description":"File byte size for attachment (e.g., 204800 for 200KB).\n\nDirectly from `file_size` integer field."},"mime_type":{"type":"string","description":"Mime type of the file such as 'application/pdf', 'image/jpeg'.\n\nMaps to `mime_type` field. Required for rendering and moderation."},"is_deleted":{"type":"boolean","description":"Soft-deletion flag. Indicates if attachment is hidden from normal viewing (true = removed; still in DB for audit).\n\nFrom `is_deleted` field."},"created_at":{"type":"string","format":"date-time","description":"UTC/ISO timestamp for when file was uploaded.\n\nFrom `created_at` column."}},"required":["id","discussion_board_post_id","uploader_member_id","file_uri","file_name","file_size","mime_type","is_deleted","created_at"],"description":"Full metadata for a persisted board post file attachment.\n\nObject returns complete details, including audit/deletion state, storage location, and member provenance."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number, zero-based.","example":1},"limit":{"type":"integer","description":"Max results per page (may default to 100).","example":30},"records":{"type":"integer","description":"Total records found in search.","example":205},"pages":{"type":"integer","description":"Total number of pages in result set.","example":7}},"required":["current","limit","records","pages"],"description":"Pagination metadata information describing a paginated result set as per IPage<T> contract."}}},"completed":95,"total":119,"step":0,"created_at":"2025-07-28T08:34:04.653Z"},"tokenUsage":{"facade":{"aggregate":{"total":1089924,"input":{"total":1023579,"cached":3840},"output":{"total":66345,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1089924,"input":{"total":1023579,"cached":3840},"output":{"total":66345,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1089924,"input":{"total":1023579,"cached":3840},"output":{"total":66345,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1089924,"input":{"total":1023579,"cached":3840},"output":{"total":66345,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardReport.IUpdate":{"type":"object","properties":{"resolved":{"type":"boolean","description":"Resolved status of the report.\n\nCorresponds to `resolved` in discussion_board_reports. Set to `true` if the report has been processed and closed by moderation; otherwise `false`. Changing this field updates the moderation status as viewed in the report workflow. Must be included if moderation action occurs.\n\nRefer to the Prisma table for additional requirements."},"description":{"oneOf":[{"type":"string","description":"Optional moderation note or details about the resolution of the report.\n\nReferences the `description` field in discussion_board_reports. Used for audit, investigation, or clarity in the moderation process. Can be null if not provided or not necessary in the administrative context."},{"type":"null","description":"Optional moderation note or details about the resolution of the report.\n\nReferences the `description` field in discussion_board_reports. Used for audit, investigation, or clarity in the moderation process. Can be null if not provided or not necessary in the administrative context."}],"description":"Optional moderation note or details about the resolution of the report.\n\nReferences the `description` field in discussion_board_reports. Used for audit, investigation, or clarity in the moderation process. Can be null if not provided or not necessary in the administrative context."}},"required":["resolved"],"description":"Update payload for resolving or annotating a report entity in the discussion board system.\n\nReferences the moderation workflow described in requirements analysis and the discussion_board_reports Prisma model."},"IDiscussionBoardReportReason.IRequest":{"type":"object","properties":{"reason_text":{"oneOf":[{"type":"string","description":"Substring match for report reason label/text.\n\nUsed to filter report reasons by keyword. References the `reason_text` column in discussion_board_report_reasons. Can be null to disable filter."},{"type":"null","description":"Substring match for report reason label/text.\n\nUsed to filter report reasons by keyword. References the `reason_text` column in discussion_board_report_reasons. Can be null to disable filter."}],"description":"Substring match for report reason label/text.\n\nUsed to filter report reasons by keyword. References the `reason_text` column in discussion_board_report_reasons. Can be null to disable filter."},"active":{"oneOf":[{"type":"boolean","description":"Filter for active status (true/false).\n\nReferences the `active` column in discussion_board_report_reasons. Set to true to retrieve only currently selectable reasons."},{"type":"null","description":"Filter for active status (true/false).\n\nReferences the `active` column in discussion_board_report_reasons. Set to true to retrieve only currently selectable reasons."}],"description":"Filter for active status (true/false).\n\nReferences the `active` column in discussion_board_report_reasons. Set to true to retrieve only currently selectable reasons."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (uint32). Defaults to 1 if not specified."},{"type":"null","description":"Page number for pagination (uint32). Defaults to 1 if not specified."}],"description":"Page number for pagination (uint32). Defaults to 1 if not specified."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of records per page (uint32). Defaults to 100."},{"type":"null","description":"Maximum number of records per page (uint32). Defaults to 100."}],"description":"Maximum number of records per page (uint32). Defaults to 100."}},"description":"Request object for searching and paginating report reason records in the discussion_board_report_reasons table.\n\nEnables filtering by text, status, and paging according to UI/business requirements.","required":[]},"IPageIDiscussionBoardReportReason":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReportReason"},"description":"Array of report reason objects meeting search/filter criteria."}},"required":["pagination","data"],"description":"Paginated result set for report reason search/list endpoints.\n\nArray contains IDiscussionBoardReportReason items per requirement for list UI or analytics."},"IDiscussionBoardReportReason":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the report reason.\n\nFrom discussion_board_report_reasons.id. Used for database reference and API operations."},"reason_text":{"type":"string","description":"Human-readable reason label (e.g. 'Spam', 'Harassment').\n\nFrom discussion_board_report_reasons.reason_text. Displayed in report forms and moderation panels."},"active":{"type":"boolean","description":"If true, reason is currently offered to reporting users.\n\nReferences `active` in discussion_board_report_reasons. False if deprecated or system-disabled."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this reason was added to the set of selectable reasons.\n\nReferences `created_at` in discussion_board_report_reasons."}},"required":["id","reason_text","active","created_at"],"description":"Represents a standardized report reason used across the board for reporting inappropriate content.\n\nReferences the discussion_board_report_reasons table and requirements on moderation reason management."},"IDiscussionBoardReportReason.ICreate":{"type":"object","properties":{"reason_text":{"type":"string","description":"Label of the report reason (e.g. 'Harassment', 'Spam').\n\nMust be provided by admin during creation, corresponds to discussion_board_report_reasons.reason_text. Will be unique across reasons."},"active":{"type":"boolean","description":"Set to true if this reason should be immediately offered in report forms.\n\nReferences the `active` column during creation."}},"required":["reason_text","active"],"description":"Request object for creating a new report reason in the moderation/reporting system.\n\nReferences the discussion_board_report_reasons Prisma table."},"IDiscussionBoardReportReason.IUpdate":{"type":"object","properties":{"reason_text":{"oneOf":[{"type":"string","description":"New (possibly updated) label for this standardized report reason.\n\nReferences discussion_board_report_reasons.reason_text. Can be set to null to leave unchanged."},{"type":"null","description":"New (possibly updated) label for this standardized report reason.\n\nReferences discussion_board_report_reasons.reason_text. Can be set to null to leave unchanged."}],"description":"New (possibly updated) label for this standardized report reason.\n\nReferences discussion_board_report_reasons.reason_text. Can be set to null to leave unchanged."},"active":{"oneOf":[{"type":"boolean","description":"New active state for this report reason.\n\nReferences discussion_board_report_reasons.active. Null means no update; otherwise sets whether this reason is currently selectable."},{"type":"null","description":"New active state for this report reason.\n\nReferences discussion_board_report_reasons.active. Null means no update; otherwise sets whether this reason is currently selectable."}],"description":"New active state for this report reason.\n\nReferences discussion_board_report_reasons.active. Null means no update; otherwise sets whether this reason is currently selectable."}},"description":"Update object for report reason records in the moderation system.\n\nReferences the discussion_board_report_reasons Prisma table. Allows updating label or enabling/disabling the reason for user reports.","required":[]},"IDiscussionBoardReportAction.ICreate":{"type":"object","properties":{"report_id":{"type":"string","format":"uuid","description":"Identifies the report on which the action is taken.\n\nReferences discussion_board_report_actions.report_id and is required for traceability."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's ID if performed by admin, else null.\n\nReferences discussion_board_report_actions.admin_id. Populated when operated by an admin."},{"type":"null","format":"uuid","description":"Admin actor's ID if performed by admin, else null.\n\nReferences discussion_board_report_actions.admin_id. Populated when operated by an admin."}],"description":"Admin actor's ID if performed by admin, else null.\n\nReferences discussion_board_report_actions.admin_id. Populated when operated by an admin."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's ID if the action is performed by a moderator, else null.\n\nReferences discussion_board_report_actions.moderator_id. Populated when the action is from moderator."},{"type":"null","format":"uuid","description":"Moderator actor's ID if the action is performed by a moderator, else null.\n\nReferences discussion_board_report_actions.moderator_id. Populated when the action is from moderator."}],"description":"Moderator actor's ID if the action is performed by a moderator, else null.\n\nReferences discussion_board_report_actions.moderator_id. Populated when the action is from moderator."},"action_type":{"type":"string","description":"Type of moderation action (e.g., 'remove_content', 'warn_user', etc).\n\nThis is an atomic event identifier and must align with the moderation workflow and policies. References discussion_board_report_actions.action_type."},"action_notes":{"oneOf":[{"type":"string","description":"Optional notes/details from moderator/admin about context, appeal result, etc.\n\nReferences discussion_board_report_actions.action_notes. May be null if not applicable."},{"type":"null","description":"Optional notes/details from moderator/admin about context, appeal result, etc.\n\nReferences discussion_board_report_actions.action_notes. May be null if not applicable."}],"description":"Optional notes/details from moderator/admin about context, appeal result, etc.\n\nReferences discussion_board_report_actions.action_notes. May be null if not applicable."}},"required":["report_id","action_type"],"description":"Creation payload for logging a moderation action (admin/moderator) on a user report.\n\nCorresponds to discussion_board_report_actions schema; ensures RBAC and audit requirements are met."},"IDiscussionBoardReportAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this report action record.\n\nUnique identifier for each moderation action (from discussion_board_report_actions.id)."},"report_id":{"type":"string","format":"uuid","description":"Identifies the moderation report on which this action is logged.\n\nReferences discussion_board_report_actions.report_id."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of admin who performed the action (nullable).\n\nReferences discussion_board_report_actions.admin_id."},{"type":"null","format":"uuid","description":"ID of admin who performed the action (nullable).\n\nReferences discussion_board_report_actions.admin_id."}],"description":"ID of admin who performed the action (nullable).\n\nReferences discussion_board_report_actions.admin_id."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of moderator who performed the action (nullable).\n\nReferences discussion_board_report_actions.moderator_id."},{"type":"null","format":"uuid","description":"ID of moderator who performed the action (nullable).\n\nReferences discussion_board_report_actions.moderator_id."}],"description":"ID of moderator who performed the action (nullable).\n\nReferences discussion_board_report_actions.moderator_id."},"action_type":{"type":"string","description":"Atomic operation type, e.g. 'close_report', 'warn_user', etc.\n\nDirect mapping from discussion_board_report_actions.action_type."},"action_notes":{"oneOf":[{"type":"string","description":"Moderator/admin explanation/details, if provided.\n\nCorresponds to discussion_board_report_actions.action_notes. May be null."},{"type":"null","description":"Moderator/admin explanation/details, if provided.\n\nCorresponds to discussion_board_report_actions.action_notes. May be null."}],"description":"Moderator/admin explanation/details, if provided.\n\nCorresponds to discussion_board_report_actions.action_notes. May be null."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the action occurred (for audit and chain-of-custody).\n\nReferences discussion_board_report_actions.created_at."}},"required":["id","report_id","action_type","created_at"],"description":"Represents an atomic action performed on a flagged report in the moderation system.\n\nBased strictly on the discussion_board_report_actions Prisma table."},"IDiscussionBoardReportAction.IRequest":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by report being acted upon.\n\nEnables filtering moderation actions for a specific flagged report. Null means ignore filter."},{"type":"null","format":"uuid","description":"Optional filter by report being acted upon.\n\nEnables filtering moderation actions for a specific flagged report. Null means ignore filter."}],"description":"Optional filter by report being acted upon.\n\nEnables filtering moderation actions for a specific flagged report. Null means ignore filter."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by admin actor's ID.\n\nUsed to audit actions performed by a given admin."},{"type":"null","format":"uuid","description":"Optional filter by admin actor's ID.\n\nUsed to audit actions performed by a given admin."}],"description":"Optional filter by admin actor's ID.\n\nUsed to audit actions performed by a given admin."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by moderator actor's ID.\n\nUsed to audit actions performed by a given moderator."},{"type":"null","format":"uuid","description":"Optional filter by moderator actor's ID.\n\nUsed to audit actions performed by a given moderator."}],"description":"Optional filter by moderator actor's ID.\n\nUsed to audit actions performed by a given moderator."},"action_type":{"oneOf":[{"type":"string","description":"Optional filter for action event type (e.g. 'warn_user', 'close_report')."},{"type":"null","description":"Optional filter for action event type (e.g. 'warn_user', 'close_report')."}],"description":"Optional filter for action event type (e.g. 'warn_user', 'close_report')."},"page":{"oneOf":[{"type":"integer","description":"Results page number for pagination (uint32)."},{"type":"null","description":"Results page number for pagination (uint32)."}],"description":"Results page number for pagination (uint32)."},"limit":{"oneOf":[{"type":"integer","description":"Records per page for pagination (uint32)."},{"type":"null","description":"Records per page for pagination (uint32)."}],"description":"Records per page for pagination (uint32)."}},"description":"Request schema for listing/searching moderation/report actions in the discussion_board_report_actions table.\n\nSupports audit, moderation review, and dashboard analytics with advanced search.","required":[]},"IPageIDiscussionBoardReportAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReportAction"},"description":"Paginated result set of moderation actions (list of report action entries)."}},"required":["pagination","data"],"description":"Paginated moderation actions (report actions) list for admin/moderator dashboards or logs.\n\nConforms to the IPage<T> standard."},"IDiscussionBoardModerationLog.ICreate":{"type":"object","properties":{"log_type":{"type":"string","description":"Type/category of action being logged (e.g. 'block_user', 'remove_content', etc).\n\nDefines logic for later analytics and compliance review. Corresponds to discussion_board_moderation_logs.log_type in schema."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor ID if logged by admin, null if not applicable.\n\nDirectly matches discussion_board_moderation_logs.admin_id; nullable because some logs may be moderator-driven."},{"type":"null","format":"uuid","description":"Admin actor ID if logged by admin, null if not applicable.\n\nDirectly matches discussion_board_moderation_logs.admin_id; nullable because some logs may be moderator-driven."}],"description":"Admin actor ID if logged by admin, null if not applicable.\n\nDirectly matches discussion_board_moderation_logs.admin_id; nullable because some logs may be moderator-driven."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor ID if log pertains to a moderator.\n\nMay be null if log is only admin related, matching discussion_board_moderation_logs.moderator_id."},{"type":"null","format":"uuid","description":"Moderator actor ID if log pertains to a moderator.\n\nMay be null if log is only admin related, matching discussion_board_moderation_logs.moderator_id."}],"description":"Moderator actor ID if log pertains to a moderator.\n\nMay be null if log is only admin related, matching discussion_board_moderation_logs.moderator_id."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"If related to a particular moderation report, this is the reference ID; otherwise null.\n\nSchema: discussion_board_moderation_logs.report_id."},{"type":"null","format":"uuid","description":"If related to a particular moderation report, this is the reference ID; otherwise null.\n\nSchema: discussion_board_moderation_logs.report_id."}],"description":"If related to a particular moderation report, this is the reference ID; otherwise null.\n\nSchema: discussion_board_moderation_logs.report_id."},"details":{"oneOf":[{"type":"string","description":"Elaborative explanation, reasoning, or notes for this moderation log entry.\n\nSchema: discussion_board_moderation_logs.details. Can be null for non-noted events."},{"type":"null","description":"Elaborative explanation, reasoning, or notes for this moderation log entry.\n\nSchema: discussion_board_moderation_logs.details. Can be null for non-noted events."}],"description":"Elaborative explanation, reasoning, or notes for this moderation log entry.\n\nSchema: discussion_board_moderation_logs.details. Can be null for non-noted events."}},"required":["log_type"],"description":"Payload schema for creating a moderation log record in the discussion board system.\n\nAligns strictly with the discussion_board_moderation_logs table requirements."},"IDiscussionBoardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for moderation log (unique log event identifier).\n\nMatching discussion_board_moderation_logs.id in the database."},"log_type":{"type":"string","description":"Nature/category of action logged (e.g. 'block_user', 'remove_content').\n\nFrom discussion_board_moderation_logs.log_type."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.admin_id."},{"type":"null","format":"uuid","description":"Admin actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.admin_id."}],"description":"Admin actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.admin_id."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.moderator_id."},{"type":"null","format":"uuid","description":"Moderator actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.moderator_id."}],"description":"Moderator actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.moderator_id."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this log relates to a moderation report, report's unique ID. Null otherwise.\n\nReferences discussion_board_moderation_logs.report_id."},{"type":"null","format":"uuid","description":"If this log relates to a moderation report, report's unique ID. Null otherwise.\n\nReferences discussion_board_moderation_logs.report_id."}],"description":"If this log relates to a moderation report, report's unique ID. Null otherwise.\n\nReferences discussion_board_moderation_logs.report_id."},"details":{"oneOf":[{"type":"string","description":"Additional text details to communicate moderator intent, rationale, or further context (nullable).\n\nFrom discussion_board_moderation_logs.details."},{"type":"null","description":"Additional text details to communicate moderator intent, rationale, or further context (nullable).\n\nFrom discussion_board_moderation_logs.details."}],"description":"Additional text details to communicate moderator intent, rationale, or further context (nullable).\n\nFrom discussion_board_moderation_logs.details."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of moderation log creation (ISO8601).\n\nStored as discussion_board_moderation_logs.created_at."}},"required":["id","log_type","created_at"],"description":"Full record and metadata for a single moderation log entry.\n\nRepresents an immutable audit/compliance trail in the discussion_board_moderation_logs system."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Limitation of records per a page.\n\n@default 100"},"records":{"type":"integer","description":"Total records in the database."},"pages":{"type":"integer","description":"Total pages.\n\nEqual to records / limit with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information for pagination response objects."}}},"completed":107,"total":119,"step":0,"created_at":"2025-07-28T08:34:10.512Z"},"tokenUsage":{"facade":{"aggregate":{"total":1156557,"input":{"total":1087411,"cached":3840},"output":{"total":69146,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1156557,"input":{"total":1087411,"cached":3840},"output":{"total":69146,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1156557,"input":{"total":1087411,"cached":3840},"output":{"total":69146,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1156557,"input":{"total":1087411,"cached":3840},"output":{"total":69146,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionBoardModerationLog.IRequest":{"type":"object","properties":{"log_type":{"type":"string","description":"The nature or type of the moderation action being logged (e.g., 'block_user', 'remove_content', 'restore_content', 'escalate'). This categorizes the moderation event for analytics, compliance auditing, and traceability. Must directly match code values used in the discussion_board_moderation_logs entity. Supports business requirements for classification and search.\n\nRefer to the discussion_board_moderation_logs Prisma model for allowed values."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this log entry relates to a report, this is the UUID of the associated report (discussion_board_reports.id). Nullable: null if not associated with a report. Enables cross-referencing between moderation logs and report records for full auditability.\n\nSee the Prisma schema for discussion_board_moderation_logs."},{"type":"null","format":"uuid","description":"If this log entry relates to a report, this is the UUID of the associated report (discussion_board_reports.id). Nullable: null if not associated with a report. Enables cross-referencing between moderation logs and report records for full auditability.\n\nSee the Prisma schema for discussion_board_moderation_logs."}],"description":"If this log entry relates to a report, this is the UUID of the associated report (discussion_board_reports.id). Nullable: null if not associated with a report. Enables cross-referencing between moderation logs and report records for full auditability.\n\nSee the Prisma schema for discussion_board_moderation_logs."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the admin who performed the moderation action (discussion_board_admins.id). Nullable if performed by a moderator. Required for linking moderation log to a privileged actor; critical for traceability and legal review.\n\nThis must match an admin assignment entry."},{"type":"null","format":"uuid","description":"The UUID of the admin who performed the moderation action (discussion_board_admins.id). Nullable if performed by a moderator. Required for linking moderation log to a privileged actor; critical for traceability and legal review.\n\nThis must match an admin assignment entry."}],"description":"The UUID of the admin who performed the moderation action (discussion_board_admins.id). Nullable if performed by a moderator. Required for linking moderation log to a privileged actor; critical for traceability and legal review.\n\nThis must match an admin assignment entry."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the moderator who performed the moderation action (discussion_board_moderators.id). Nullable if performed by an admin. Required for proper audit of actor responsibility.\n\nConforms to the discussion_board_moderators entity in Prisma model."},{"type":"null","format":"uuid","description":"The UUID of the moderator who performed the moderation action (discussion_board_moderators.id). Nullable if performed by an admin. Required for proper audit of actor responsibility.\n\nConforms to the discussion_board_moderators entity in Prisma model."}],"description":"The UUID of the moderator who performed the moderation action (discussion_board_moderators.id). Nullable if performed by an admin. Required for proper audit of actor responsibility.\n\nConforms to the discussion_board_moderators entity in Prisma model."},"details":{"oneOf":[{"type":"string","description":"Optional detailed notes about the action. Provides rationale, context, or explanation for the moderation event (e.g., 'User was blocked for repeat harassment.'). Non-required and nullable for straightforward actions without additional remarks.\n\nMaps to 'details' field in discussion_board_moderation_logs."},{"type":"null","description":"Optional detailed notes about the action. Provides rationale, context, or explanation for the moderation event (e.g., 'User was blocked for repeat harassment.'). Non-required and nullable for straightforward actions without additional remarks.\n\nMaps to 'details' field in discussion_board_moderation_logs."}],"description":"Optional detailed notes about the action. Provides rationale, context, or explanation for the moderation event (e.g., 'User was blocked for repeat harassment.'). Non-required and nullable for straightforward actions without additional remarks.\n\nMaps to 'details' field in discussion_board_moderation_logs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the moderation log entry was created. Should be in ISO 8601 date-time format. Critical for ordering, search, and compliance requirements. Must be generated server-side or provided as part of the log creation.\n\nField from discussion_board_moderation_logs model."}},"required":["log_type","created_at"],"description":"Search/filter request parameters for listing discussion_board_moderation_logs. Used by admin endpoints for reviewing moderation events. Contains only properties defined in the Prisma schema, and designed to allow filtered, sorted, or paged log queries.\n\nReference: discussion_board_moderation_logs Prisma comments for guidance on log_type values and field usage."},"IPageIDiscussionBoardModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationLog"}}},"required":["pagination","data"],"description":"A paginated result set containing an array of discussion board moderation log entries. Used for admin moderation review UIs and reporting tools.\n\nThe 'pagination' object provides details on page number, size, record count, and page totals. Data rows match the entity as documented in the discussion_board_moderation_logs schema."},"IDiscussionBoardFlaggedContent.ICreate":{"type":"object","properties":{"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the admin responsible for flagging this content for moderation. Must be a valid admin identity (nullable if flagged by moderator or automatically). Used for audit trail and compliance tracking.\n\nRefer to 'flagged_by_admin_id' in discussion_board_flagged_content."},{"type":"null","format":"uuid","description":"The UUID of the admin responsible for flagging this content for moderation. Must be a valid admin identity (nullable if flagged by moderator or automatically). Used for audit trail and compliance tracking.\n\nRefer to 'flagged_by_admin_id' in discussion_board_flagged_content."}],"description":"The UUID of the admin responsible for flagging this content for moderation. Must be a valid admin identity (nullable if flagged by moderator or automatically). Used for audit trail and compliance tracking.\n\nRefer to 'flagged_by_admin_id' in discussion_board_flagged_content."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the moderator who flagged the content, if applicable. Nullable if flagged by admin or system automation. Checks moderator authority and audit trail for manual flags by moderators.\n\nRefer to 'flagged_by_moderator_id' in discussion_board_flagged_content."},{"type":"null","format":"uuid","description":"The UUID of the moderator who flagged the content, if applicable. Nullable if flagged by admin or system automation. Checks moderator authority and audit trail for manual flags by moderators.\n\nRefer to 'flagged_by_moderator_id' in discussion_board_flagged_content."}],"description":"The UUID of the moderator who flagged the content, if applicable. Nullable if flagged by admin or system automation. Checks moderator authority and audit trail for manual flags by moderators.\n\nRefer to 'flagged_by_moderator_id' in discussion_board_flagged_content."},"flagged_entity_id":{"type":"string","format":"uuid","description":"The UUID of the content entity being flagged (such as post, comment, or user). Must directly reference a legitimate entity. Required for all flag actions to support traceability and moderation workflows.\n\nReference: discussion_board_flagged_content Prisma schema."},"flagged_entity_type":{"type":"string","description":"The type/category of the content being flagged (e.g., 'post', 'comment', 'user', etc). Maps the flag to content domain for business and moderation logic. Required and must match code values used in the schema.\n\nSee discussion_board_flagged_content Prisma definition."},"flag_type":{"type":"string","description":"Nature or reason for the flag (e.g., 'auto', 'manual', 'duplicate', 'filter'). Used for analytics, workflow branching, and audit requirements. Must match flag business codes as used in the schema.\n\nRefer to the discussion_board_flagged_content flag_type column documentation."},"reason":{"oneOf":[{"type":"string","description":"Optional field giving details on why the flag was triggered (e.g., matched keyword, user input, system rationale). May be null for auto-flags or non-detailed entries. Required if business logic enforces certain reasons for manual flags.\n\nReference: discussion_board_flagged_content.schema."},{"type":"null","description":"Optional field giving details on why the flag was triggered (e.g., matched keyword, user input, system rationale). May be null for auto-flags or non-detailed entries. Required if business logic enforces certain reasons for manual flags.\n\nReference: discussion_board_flagged_content.schema."}],"description":"Optional field giving details on why the flag was triggered (e.g., matched keyword, user input, system rationale). May be null for auto-flags or non-detailed entries. Required if business logic enforces certain reasons for manual flags.\n\nReference: discussion_board_flagged_content.schema."},"cleared":{"type":"boolean","description":"Indicates whether this flagged content has been cleared (true) or is pending review (false). Required for moderation workflow management and analytics. Must be accurately maintained by moderation process.\n\nSee Prisma schema flag for 'cleared'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the flagged content record was created. Required for ordering, SLA reporting, and compliance. Should be set by the backend or supplied explicitly.\n\nRefer to created_at in the Prisma model."}},"required":["flagged_entity_id","flagged_entity_type","flag_type","cleared","created_at"],"description":"Creation request payload for discussion_board_flagged_content. Used by admin to record a new moderation-relevant flag on a piece of content. Includes full context for the flagging event (what, who, when, and why).\n\nComplies with schema requirements for auditability and traceable moderation flows."},"IDiscussionBoardFlaggedContent":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for each flagged content record. Generated by the database. Required for referencing, auditing, and traceability of moderation events.\n\nMaps to the 'id' column in the discussion_board_flagged_content schema."},"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of admin who flagged the content, if applicable. Null if not flagged by admin. Provides auditing and compliance context for privilege-level flagging.\n\nSee 'flagged_by_admin_id' in discussion_board_flagged_content."},{"type":"null","format":"uuid","description":"UUID of admin who flagged the content, if applicable. Null if not flagged by admin. Provides auditing and compliance context for privilege-level flagging.\n\nSee 'flagged_by_admin_id' in discussion_board_flagged_content."}],"description":"UUID of admin who flagged the content, if applicable. Null if not flagged by admin. Provides auditing and compliance context for privilege-level flagging.\n\nSee 'flagged_by_admin_id' in discussion_board_flagged_content."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID for the moderator responsible for the flag, or null if flagged by another actor. Ensures traceability and proper authorization for moderator-led flagging events.\n\nRefers to discussion_board_flagged_content.moderator_id."},{"type":"null","format":"uuid","description":"UUID for the moderator responsible for the flag, or null if flagged by another actor. Ensures traceability and proper authorization for moderator-led flagging events.\n\nRefers to discussion_board_flagged_content.moderator_id."}],"description":"UUID for the moderator responsible for the flag, or null if flagged by another actor. Ensures traceability and proper authorization for moderator-led flagging events.\n\nRefers to discussion_board_flagged_content.moderator_id."},"flagged_entity_id":{"type":"string","format":"uuid","description":"The unique identifier for the flagged content entity (post, comment, user, etc). Central for linking this moderation event to specific objects within the discussion board.\n\nRefer to 'flagged_entity_id' in discussion_board_flagged_content."},"flagged_entity_type":{"type":"string","description":"Content type/category for this flag record (e.g., 'post', 'comment', 'user'). Illustrates the origin domain of the flagged entity for reporting and workflow purposes.\n\nSee 'flagged_entity_type' field for semantic code values."},"flag_type":{"type":"string","description":"Explains the nature or mechanism of the flag, such as 'auto', 'manual', etc. Used for workflow and analytic processing by the moderation team.\n\nMatches flag_type in the discussion_board_flagged_content schema."},"reason":{"oneOf":[{"type":"string","description":"Additional contextual detail for the flag event (e.g., rule triggered, user input, machine analysis). Nullable and optional for some flag types. Supports moderation review and appeals processes.\n\nRefer to 'reason' in the schema for further constraints and business logic."},{"type":"null","description":"Additional contextual detail for the flag event (e.g., rule triggered, user input, machine analysis). Nullable and optional for some flag types. Supports moderation review and appeals processes.\n\nRefer to 'reason' in the schema for further constraints and business logic."}],"description":"Additional contextual detail for the flag event (e.g., rule triggered, user input, machine analysis). Nullable and optional for some flag types. Supports moderation review and appeals processes.\n\nRefer to 'reason' in the schema for further constraints and business logic."},"cleared":{"type":"boolean","description":"Indicates whether the flagged event has been reviewed/cleared (true) or still requires moderator/admin review (false). Workflow and dashboard logic rely on this field for routing items. Must be updated as cases are processed.\n\nSee 'cleared' in discussion_board_flagged_content."},"created_at":{"type":"string","format":"date-time","description":"The ISO 8601 timestamp when this flagged content was registered by the system. Used for chronological ordering and SLA validation within moderation operations.\n\nMaps directly to 'created_at' in the model."}},"required":["id","flagged_entity_id","flagged_entity_type","flag_type","cleared","created_at"],"description":"Full detail of a flagged content record used for moderation management. Encapsulates audit trail, source/actor references, and moderation domain semantics.\n\nComplies strictly with discussion_board_flagged_content field documentation."},"IDiscussionBoardFlaggedContent.IRequest":{"type":"object","properties":{"flagged_entity_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID for filtering to a particular object under moderation. Null for no filtering. This supports targeted review of flagged items based on the flagged content entity."},{"type":"null","format":"uuid","description":"UUID for filtering to a particular object under moderation. Null for no filtering. This supports targeted review of flagged items based on the flagged content entity."}],"description":"UUID for filtering to a particular object under moderation. Null for no filtering. This supports targeted review of flagged items based on the flagged content entity."},"flagged_entity_type":{"oneOf":[{"type":"string","description":"Allows filtering flag records by specific content category ('post', 'comment', 'user', etc). Null disables this filter."},{"type":"null","description":"Allows filtering flag records by specific content category ('post', 'comment', 'user', etc). Null disables this filter."}],"description":"Allows filtering flag records by specific content category ('post', 'comment', 'user', etc). Null disables this filter."},"flag_type":{"oneOf":[{"type":"string","description":"Optionally filter on type of flag event. May be null if not set. Enables review and analytics by cause ('auto', 'manual', etc)."},{"type":"null","description":"Optionally filter on type of flag event. May be null if not set. Enables review and analytics by cause ('auto', 'manual', etc)."}],"description":"Optionally filter on type of flag event. May be null if not set. Enables review and analytics by cause ('auto', 'manual', etc)."},"cleared":{"oneOf":[{"type":"boolean","description":"Boolean (or null) to filter only cleared/only uncleared, etc. SLA metrics and workflow reporting may rely on this filter."},{"type":"null","description":"Boolean (or null) to filter only cleared/only uncleared, etc. SLA metrics and workflow reporting may rely on this filter."}],"description":"Boolean (or null) to filter only cleared/only uncleared, etc. SLA metrics and workflow reporting may rely on this filter."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 timestamp or null for no filter. Enables time windowed queries on flagged moderation actions."},{"type":"null","format":"date-time","description":"ISO 8601 timestamp or null for no filter. Enables time windowed queries on flagged moderation actions."}],"description":"ISO 8601 timestamp or null for no filter. Enables time windowed queries on flagged moderation actions."},"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Use to restrict search results to flags by a specific admin actor, if needed."},{"type":"null","format":"uuid","description":"Use to restrict search results to flags by a specific admin actor, if needed."}],"description":"Use to restrict search results to flags by a specific admin actor, if needed."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Use for filtering all content flagged by a specific moderator (if applicable). May be null or unset."},{"type":"null","format":"uuid","description":"Use for filtering all content flagged by a specific moderator (if applicable). May be null or unset."}],"description":"Use for filtering all content flagged by a specific moderator (if applicable). May be null or unset."}},"description":"Request parameters for searching/filtering flagged content moderation records. All specific fields align with columns in discussion_board_flagged_content.","required":[]},"IPageIDiscussionBoardFlaggedContent":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardFlaggedContent"}}},"required":["pagination","data"],"description":"A paginated list of flagged content moderation records, as per schema. Combines page info with an array of flagged content records."},"IDiscussionBoardNotification.IRequest":{"type":"object","properties":{"is_read":{"oneOf":[{"type":"boolean","description":"Optional boolean or null for filtering by notification read status. Allows user to view only unread notifications if desired."},{"type":"null","description":"Optional boolean or null for filtering by notification read status. Allows user to view only unread notifications if desired."}],"description":"Optional boolean or null for filtering by notification read status. Allows user to view only unread notifications if desired."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter notifications delivered after this timestamp (inclusive). Allows for paging or fetching recent notifications."},{"type":"null","format":"date-time","description":"Filter notifications delivered after this timestamp (inclusive). Allows for paging or fetching recent notifications."}],"description":"Filter notifications delivered after this timestamp (inclusive). Allows for paging or fetching recent notifications."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter notifications read after this timestamp. Useful for archiving or inbox maintenance features."},{"type":"null","format":"date-time","description":"Filter notifications read after this timestamp. Useful for archiving or inbox maintenance features."}],"description":"Filter notifications read after this timestamp. Useful for archiving or inbox maintenance features."},"type":{"oneOf":[{"type":"string","description":"Filter on notification type codes ('new_reply', 'report_update', etc). Enables UI to support tabbed or custom displays for notification categories."},{"type":"null","description":"Filter on notification type codes ('new_reply', 'report_update', etc). Enables UI to support tabbed or custom displays for notification categories."}],"description":"Filter on notification type codes ('new_reply', 'report_update', etc). Enables UI to support tabbed or custom displays for notification categories."},"content":{"oneOf":[{"type":"string","description":"Filter/search within the notification content string for keyword search and advanced usability."},{"type":"null","description":"Filter/search within the notification content string for keyword search and advanced usability."}],"description":"Filter/search within the notification content string for keyword search and advanced usability."}},"description":"Request parameters for searching/filtering the notification inbox for the active user. All fields are schema-mapped to the discussion_board_notifications entity, and may be combined for advanced query control.","required":[]},"IPageIDiscussionBoardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardNotification"}}},"required":["pagination","data"],"description":"Paginated response for a user's system/activity notification inbox. Contains full message details for each notification visible to the user."},"IDiscussionBoardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the notification record. Generated by database at time of creation."},"recipient_user_id":{"type":"string","format":"uuid","description":"UUID of the recipient user (discussion_board_members/admins/moderators). Identifies for whom the notification is intended."},"type":{"type":"string","description":"Code value for notification category (e.g., 'new_reply', 'system_announcement'). Used for routing and user control of delivery types."},"content":{"type":"string","description":"Human-readable notification body/content for end user display. Must be concise but sufficient for notification context."},"is_read":{"type":"boolean","description":"Boolean flag indicating whether user has marked notification as read."},"delivered_at":{"type":"string","format":"date-time","description":"Timestamp when notification was made available to user (delivered, not necessarily seen)."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp (ISO 8601) for when notification was read. Null if unread."},{"type":"null","format":"date-time","description":"Nullable timestamp (ISO 8601) for when notification was read. Null if unread."}],"description":"Nullable timestamp (ISO 8601) for when notification was read. Null if unread."}},"required":["id","recipient_user_id","type","content","is_read","delivered_at"],"description":"A single notification object as stored in discussion_board_notifications, for inbox and notification center UIs. Includes details required for rendering and response state. 'read_at' is nullable if unread."},"IDiscussionBoardNotification.ICreate":{"type":"object","properties":{"recipient_user_id":{"type":"string","format":"uuid","description":"UUID of the intended recipient (a member/admin/moderator ID). Establishes notification targeting per system rules."},"type":{"type":"string","description":"Notification type code/category (e.g., 'new_reply', 'report_update', 'system_announcement'). Only code values used in the schema are permitted."},"content":{"type":"string","description":"Notification content text (user-readable). Must concisely describe the event, action, or message required for user attention."},"is_read":{"type":"boolean","description":"Boolean representing read/unread status upon creation. Normally false, but may be true in rare cases (e.g., if created as already seen due to triggering action by user themselves)."},"delivered_at":{"type":"string","format":"date-time","description":"Datetime notification entry is delivered for consumption. ISO 8601 required; UTC or board-local time as business rules dictate."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for when notification was read. Null if not read or deliberately inserted as unread."},{"type":"null","format":"date-time","description":"Nullable timestamp for when notification was read. Null if not read or deliberately inserted as unread."}],"description":"Nullable timestamp for when notification was read. Null if not read or deliberately inserted as unread."}},"required":["recipient_user_id","type","content","is_read","delivered_at"],"description":"Notification creation body for authenticated user or system delivery. Used for generating new inbox notifications for users with specific content and category codes. Compliant with schema constraints re: code types and format requirements."},"IDiscussionBoardNotification.IUpdate":{"type":"object","properties":{"is_read":{"type":"boolean","description":"Whether the notification is now read (true) or unread (false). Changes trigger inbox or UI behavior. Must be updated as soon as user opens/reads notification UI."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for when notification was read. Set if and only if is_read becomes true."},{"type":"null","format":"date-time","description":"Nullable timestamp for when notification was read. Set if and only if is_read becomes true."}],"description":"Nullable timestamp for when notification was read. Set if and only if is_read becomes true."}},"required":["is_read"],"description":"Patch/update body for notification status and optional read timestamp. Permits marking as read/unread in inbox. Business logic determines when to update read_at."},"IDiscussionBoardUserNotificationSettings.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"UUID of the member to whom this settings record applies. There must be only one notification settings record per user id (enforced by unique constraint)."},"receive_email_notifications":{"type":"boolean","description":"Whether to deliver notifications to user's email address. Enables bulk/muted email settings board-wide."},"receive_push_notifications":{"type":"boolean","description":"Whether to send push notifications to user's devices. Controls mobile/desktop notification behavior."},"mute_types":{"oneOf":[{"type":"string","description":"Comma-separated string of notification type codes to mute for this user (e.g., 'like,report_mention'), or null if user does not mute any. Delivers granular control over notification types."},{"type":"null","description":"Comma-separated string of notification type codes to mute for this user (e.g., 'like,report_mention'), or null if user does not mute any. Delivers granular control over notification types."}],"description":"Comma-separated string of notification type codes to mute for this user (e.g., 'like,report_mention'), or null if user does not mute any. Delivers granular control over notification types."}},"required":["user_id","receive_email_notifications","receive_push_notifications"],"description":"Settings creation schema for user-level notification preferences. Used in onboarding or settings UI to initialize notification preferences for a member."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"The number of the current page being viewed, zero-based."},"limit":{"type":"integer","format":"uint32","description":"The maximum number of records to return per page requested. Used for pagination controls; default is 100 if not set explicitly."},"records":{"type":"integer","format":"uint32","description":"Total number of records matching current filter/search set, independent of pagination."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages available given record count and page size limit. Allows client/UI to display full navigation."}},"required":["current","limit","records","pages"],"description":"Standardized pagination information for result sets. Used in all IPage<...> containers in this API specification."}}},"completed":119,"total":119,"step":0,"created_at":"2025-07-28T08:34:18.684Z"},"tokenUsage":{"facade":{"aggregate":{"total":1224238,"input":{"total":1151246,"cached":3840},"output":{"total":72992,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1224238,"input":{"total":1151246,"cached":3840},"output":{"total":72992,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1224238,"input":{"total":1151246,"cached":3840},"output":{"total":72992,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1224238,"input":{"total":1151246,"cached":3840},"output":{"total":72992,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComplete","document":{"operations":[{"specification":"This endpoint retrieves a list of discussion board configurations with search, pagination, and sorting functionality. It is based on the discussion_board_configurations Prisma table, which stores system-level global settings, feature toggles, and policy enforcement such as max attachment size, maintenance mode, and welcome messages. The endpoint returns atomic details of each configuration (id, key, value, description, created_at, updated_at), supporting 3NF and operational transparency. Cross-referenced in service initialization and system UIs for settings review. Sensitive modification requires admin endpoint usage. No direct relations, as configs are system-wide and not user-specific.\nThis operation supports optional search queries (key or description), pagination (page number/size), and sorting (created_at, key, etc.), to enable efficient management even with large numbers of configuration flags. Returned data is never mutated here (read-only list). No authentication required unless sensitive settings are to be exposed, in which case a stricter endpoint may be used.\nOn error, returns a standard error object with message and reason for failure (e.g., bad page range). If no configs exist, returns an empty data array.","description":"This operation retrieves a paginated, filterable list of all configuration entries in the discussion_board_configurations table. Each configuration contains an id (UUID), key (string), value (string), description (optional string), and timestamps (created_at, updated_at). Authorization is not required unless accessing sensitive fields; in that case, use the admin-prefixed endpoint. The configuration key is unique. This endpoint should be used for operational audits, UI display, and runtime checks (non-mutating read access). No user-related ownership or deletion logic applies, as these are system records. If available, search parameters can filter by key or description using full text. Sorting and pagination parameters—such as page/size, sort_field—should be supported if provided in the request body. Returns an array of objects with full configuration details.\nIf the database contains no records, an empty array is returned. Errors or invalid queries result in a descriptive message. Does not expose any privileged mutations or sensitive raw values unless role-based control is applied elsewhere.","summary":"Retrieve a paginated, searchable list of discussion_board_configurations (system/global settings).","parameters":[],"requestBody":{"description":"Optional parameters for configuration list search, pagination, and sorting.","typeName":"IDiscussionBoardConfiguration.IRequest"},"responseBody":{"description":"Paginated list of configuration entries, each with id, key, value, optional description, and timestamps.","typeName":"IPageDiscussionBoardConfiguration"},"authorizationRole":null,"name":"index","path":"/discussion_board/configurations","method":"patch"},{"specification":"This endpoint retrieves a single configuration record from the discussion_board_configurations table by its unique id. This table holds all global, system-wide settings as atomic records. The endpoint supports viewing of the configuration’s id, key, value, description, created_at, and updated_at. Used for system audits, UIs, and operational reviews. No modifications are performed. No authentication is required for general usage; sensitive configs should require privilege. No related entities; configuration is system-only.\nIf the entry does not exist, returns a 404 error. Never exposes mutation logic; read-only retrieval only.","description":"This operation retrieves the details of a single discussion_board_configurations record based on a provided id. The record includes UUID id, config key (string), value (string), description (nullable string), and timestamps (created_at, updated_at). As this is a read-only operation, no user-specific ownership or mutation fields exist. This is typically used for system admin UX, runtime checks, and operational display. If no entry with the given id exists, returns a 404. No soft/hard delete logic applies as configurations are never deleted directly, only edited or superseded.","summary":"Retrieve individual discussion_board_configurations record by id.","parameters":[{"name":"id","description":"The configuration's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Configuration object with id, key, value, description, and timestamps.","typeName":"IDiscussionBoardConfiguration"},"authorizationRole":null,"name":"at","path":"/discussion_board/configurations/{id}","method":"get"},{"specification":"This admin-only endpoint creates a new configuration entry in the discussion_board_configurations table. It supports the system admin's ability to add new global settings (such as feature toggles, system messages, maintenance mode) at runtime. Each entry has a unique UUID id, string key (unique), string value, optional description (for admin context), and records timestamps for creation/update. Only admin users may access this endpoint.\nThe request body must include key and value; description is optional. The system enforces unique key constraint. On success, the new configuration object is returned. On violation (e.g., duplicate key), returns an error with reason.\nThis table is for core platform configuration—records are atomic and unlinked to users. Creation events should be logged for audit. No deletion; only admins may supersede or edit values.","description":"This admin endpoint creates a new configuration in the discussion_board_configurations table. Required fields are key (unique string), value (string), and created_at/updated_at timestamps (stored automatically). An optional description (string) can be supplied. On duplicate key, returns an error. Only system admin roles may perform this operation. The entry is immediately available for runtime use. The operation is atomic and does not permit batch creation. Audit trail of configuration creation is recommended. No delete operation; configurations are permanent but editable.","summary":"Create a new configuration entry in discussion_board_configurations (admin only).","parameters":[],"requestBody":{"description":"Configuration details to create: key, value (required), description (optional).","typeName":"IDiscussionBoardConfiguration.ICreate"},"responseBody":{"description":"The newly created configuration object.","typeName":"IDiscussionBoardConfiguration"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/configurations","method":"post"},{"specification":"This admin-only endpoint updates an existing configuration (by id) in the discussion_board_configurations table. Only the value and description can be updated; the key is immutable to ensure referential integrity of config-related logic. Requires admin privileges; changes trigger setting the updated_at timestamp for traceability. Used to enable or disable features, adjust system policies, or change UI messages at runtime.\nOn success, returns the updated configuration. If the id does not exist, returns a 404. Updates are strictly atomic; batch updates are not supported. Modification events should be logged for auditing. No delete endpoint exists for configs; only mutation is permitted.","description":"This admin operation updates the value and/or description of a configuration entry in the discussion_board_configurations table. Only value (string) and description (optional string) may be changed—key remains immutable. Requires id (UUID) path parameter and IDiscussionBoardConfiguration.IUpdate request body with new values. Admin privilege is required. The change sets updated_at to the current timestamp. On invalid id, returns 404. Supports configuration maintenance, feature toggling, and runtime policy updates. Entries are never deleted; modifications are fully audit-trailed. No ownership or delete/soft delete logic applies.","summary":"Update value/description of configuration entry by id (admin).","parameters":[{"name":"id","description":"Configuration's unique UUID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to change: value (required), description (optional).","typeName":"IDiscussionBoardConfiguration.IUpdate"},"responseBody":{"description":"Updated configuration object.","typeName":"IDiscussionBoardConfiguration"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/configurations/{id}","method":"put"},{"specification":"This admin-only endpoint deletes (hard delete) a configuration record from the discussion_board_configurations table by id. There are NO soft-delete fields such as deleted_at in the table; as such, this operation permanently removes the key and its value from the system. Only admins are authorized. Used for obsolete or erroneous config cleanups. Cascade effects must be managed at the application level (e.g., when removing a flag no longer in use).\nOn success, returns 204 No Content. If id does not exist, responds 404. Successful delete should trigger an audit log entry. Use with caution, as configs are global and uniquely identified by key.","description":"This admin operation permanently deletes (hard delete) a discussion_board_configurations record by id. Because the table has no soft-deletion fields (e.g., deleted_at or is_deleted), the row is irretrievably removed from the database. Only admin roles can invoke this. Intended for obsolete/invalid configuration cleanup. If the provided id doesn't exist, 404 error is returned. Deletion actions must be logged for compliance. Deleting a configuration may impact system operations; ensure safe usage. No response body is returned upon success.","summary":"Hard delete configuration entry by id (admin only).","parameters":[{"name":"id","description":"UUID of configuration to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/configurations/{id}","method":"delete"},{"specification":"This endpoint provides a paginated, searchable list of discussion board categories for client-side category discovery, selection, and UI display. Based on the discussion_board_categories Prisma table, which stores id, code, name, description, sort order, is_active, and timestamps for each category. Used for creating topics, filtering/browsing, and showing available discussion areas. 3NF is retained by keeping categories distinct from topics or posts. Categories are not user-specific and are globally managed. No authentication required. Exposed for all users, but creation/modification requires admin endpoint. May support search on name or description (partial string). No mutation allowed. Sortable by sort_order or updated_at.\nErrors return a standard error object. If no categories exist, returns an empty list.","description":"This operation returns a paginated and optionally filtered list of discussion_board_categories entries. Each returned object includes id, code (string, unique), name, description (optional), sort_order (int), is_active (boolean), and timestamps. Used for UI category pickers and front-end discovery. Supports query parameters (page/size, search, sort) if provided in request body IDiscussionBoardCategory.IRequest. This operation does not mutate data and has no authentication requirements. Data is always read-only; use admin endpoint for mutations. If the table is empty, the returned data array is also empty. Errors result in descriptive messages. Categories have no soft or hard delete fields; inactive categories are indicated by is_active = false.","summary":"List/search categories with optional pagination (public/unauth).","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for category listing.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated list of category objects with id, code, name, description, sort_order, is_active, and timestamps.","typeName":"IPageDiscussionBoardCategory"},"authorizationRole":null,"name":"index","path":"/discussion_board/categories","method":"patch"},{"specification":"This endpoint retrieves the details of a specific discussion board category by its id. Based on the discussion_board_categories Prisma table, which describes each category with id, code, name, optional description, sort order, is_active, and timestamps. Used by client UIs, for category info retrieval prior to use or for displaying full metadata. No mutations are performed. Categories are managed globally by admins. No authentication is needed for general access. Invalid or missing id returns 404. No soft delete or ownership logic applies to this entity.\nNo related objects returned, but client can fetch topics or permissions if needed via other endpoints.","description":"This operation fetches a single category record (discussion_board_categories) using an id path parameter. Returns id (UUID), code (unique string), name, description (string or null), sort_order (int), is_active (bool), and created_at/updated_at. Used for pre-populating UI or reviewing category metadata. Purely read-only operation, with no authorization required. If no record is found for the provided id, 404 error is returned. Category deletion is not supported; disabling is via is_active flag.","summary":"Retrieve details for individual discussion_board_categories entry by id (public).","parameters":[{"name":"id","description":"Unique category UUID (id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The category object: id, code, name, description, sort_order, is_active, created/updated timestamps.","typeName":"IDiscussionBoardCategory"},"authorizationRole":null,"name":"at","path":"/discussion_board/categories/{id}","method":"get"},{"specification":"This admin-only endpoint creates a new category in the discussion_board_categories table, supporting addition of subject domains (e.g., Politics, Economics) for organizing topics. Body must include code (unique string), name, optional description, sort_order (int), and is_active (bool). Creation sets created_at/updated_at. Only accessible by admin role. Code uniqueness enforced at DB level. Returns the newly created category object. On duplicate code or validation error, returns reason for failure. No user/ownership concept as categories are system objects. Audit logging recommended.","description":"This admin operation adds a new category entry to discussion_board_categories. Requires code (unique string for category), name (string), optional description, sort_order (int display position), and is_active (true/false). Timestamps are set automatically. Only system/admin users are authorized. The new category appears instantly for UI/topic assignment. If code is duplicated or validation fails, the error is returned. No deletion (only disabling via is_active). Result includes all fields. No owner/soft-delete field exists.","summary":"Create new category in discussion_board_categories (admin only).","parameters":[],"requestBody":{"description":"Category information for creation: code, name, description, sort_order, is_active.","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"The newly created discussion_board_categories object.","typeName":"IDiscussionBoardCategory"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/categories","method":"post"},{"specification":"This admin-only endpoint updates an existing category (by id) in the discussion_board_categories table. Permits updating name, description, sort_order, and is_active; code is immutable. Returns the updated category object. Only admin users may invoke. Used by system managers to adjust UI order, activate/deactivate, or migrate category names. updated_at is set automatically. If the id is invalid, 404 returned. No batch operation or soft delete; only is_active is toggled for disabling. Changes are logged for audit/compliance.","description":"This admin operation updates a single category's display name, description (can be null), sort_order (int), or is_active (bool) in the discussion_board_categories table. The code field is immutable for referential integrity. Requires id in path, and IDiscussionBoardCategory.IUpdate request body with changed fields. Admin authorization is required. updated_at is set to current time. If id is invalid, error 404. Operation is atomic, and change should be audit-logged. No deletion endpoints exist for categories.","summary":"Update a category's details by id (admin only).","parameters":[{"name":"id","description":"UUID of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable fields: name, description, sort_order, is_active (code is immutable).","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"The updated discussion_board_categories object.","typeName":"IDiscussionBoardCategory"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/categories/{id}","method":"put"},{"specification":"This admin-only endpoint deletes (hard delete) a category from the discussion_board_categories table by id. There are NO soft delete fields such as deleted_at or is_deleted in the schema; so this is a permanent removal. Intended for system-level cleanup. Deletes cascade to all related category_permissions and topics (cascade settings as per schema). Only admin may invoke. On success, 204 returned. On invalid id, 404. Deletion actions should be audit-logged. Use is_active for disabling rather than deletion, unless truly obsolete.","description":"This operation irreversibly deletes a discussion_board_categories record by id. No soft delete logic exists; this is a true hard-delete. Related entities (category_permissions, topics) are deleted by cascade. Only system admin users may call this API. Returns HTTP 204 No Content on success. If id not found, error 404. Resulting schema removes all traces of the category from the system. Deletion is best used for obsolete/miscreated categories; otherwise use is_active for hiding from UI. No response body on success.","summary":"Hard delete a category entry by id (admin only).","parameters":[{"name":"id","description":"UUID of the category entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/categories/{id}","method":"delete"},{"specification":"This admin-only endpoint creates a new set of permissions for a discussion board category (per role), as tracked in discussion_board_category_permissions. Used for assigning or updating role-based permissions (can_view, can_create_topic, can_reply, can_like, can_report) to a given category. Requires category_id (UUID), role_name (string: admin/moderator/member/guest), and individual boolean flags as input. Ensures that (category_id, role_name) is unique. Only callable by admins. On duplicate, returns error. Creates the record and returns the new permission row; audit logging required. Used for RBAC configuration, aligning with requirements doc for permission matrix.","description":"This admin operation creates a new row in discussion_board_category_permissions, representing a per-category/role permission set. Requires category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report—all fields required (booleans as programmatic flags). Used to define or extend RBAC per category basis. Enforced unique on (category_id, role_name). Admin-only, as assignment/adjustment affects all UI/permission gating. If duplicate, returns error. On success, the new row is returned with all fields and created_at.","summary":"Create per-role permission set for a category (admin only).","parameters":[],"requestBody":{"description":"Full permission set to assign: category_id, role_name, and all boolean flags.","typeName":"IDiscussionBoardCategoryPermission.ICreate"},"responseBody":{"description":"The newly created category permission entry.","typeName":"IDiscussionBoardCategoryPermission"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/categoryPermissions","method":"post"},{"specification":"This admin-only endpoint returns a paginated (optionally filtered) list of all discussion_board_category_permissions entries—used for reviewing, searching, and managing category-level access control. Underpins role-based API and UI visibility, as defined in the requirements document. Returns all columns: id (UUID), category_id (UUID), role_name (string), can_view, can_create_topic, can_reply, can_like, can_report (booleans), created_at (timestamp). No user-specific fields. Searchable on role/category via request body. Used for admin RBAC reviews and audits. No authentication for lookup, but only admins may call. No deletion/mutation at this endpoint (see update for mutation). Errors yield clear message.","description":"This operation lists all existing discussion_board_category_permissions records (with search/filter, pagination, and sorting support via request object). Each entry includes the full RBAC configuration for a (category_id, role_name) pair: all permission booleans, id, and creation timestamp. Intended for admin permission review, audit, and configuration UIs. Only admins authorized. Returns paginated data structure; empty if none found. No modification or delete at this endpoint.","summary":"List/search all category permission sets with pagination (admin only).","parameters":[],"requestBody":{"description":"Optional filters for category and/or role, plus pagination settings.","typeName":"IDiscussionBoardCategoryPermission.IRequest"},"responseBody":{"description":"Paginated result: each item is a full permission row with all columns as per table schema.","typeName":"IPageDiscussionBoardCategoryPermission"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/categoryPermissions","method":"patch"},{"specification":"Retrieve a single category permission record for the discussion board by its unique identifier. This operation is for administrative use, allowing admins to fetch permissions related to a specific category role mapping. The discussion_board_category_permissions table includes id, category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report, and created_at fields. The admin accesses this endpoint to inspect or audit the role-level permissions for a given category. Only fields present in the schema are returned.","description":"This API operation retrieves a specific category permission entry from the discussion_board_category_permissions table using its unique id. It is intended for use by admin users to audit or review which permissions (can_view, can_create_topic, can_reply, can_like, can_report) are associated with a given role for a specific category. This endpoint directly maps to a single row retrieval by primary key (id). There is no soft deletion or ownership field in the schema; the operation simply returns the current state of the permission set. Administrators may use this operation in conjunction with audit or permission management workflows to verify role-control configuration. Requesting this endpoint will return all actual columns for the entry: id, category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report, and created_at. Errors will be returned if the id is not found.","summary":"Admin retrieves a category permission by id from discussion_board_category_permissions table.","parameters":[{"name":"id","description":"Unique identifier of the category permission to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Category permission entry for the specified id.","typeName":"IDiscussionBoardCategoryPermission"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/categoryPermissions/{id}","method":"get"},{"specification":"Update a category permission record for the discussion board by its unique identifier as an admin. This endpoint allows modification of the permission flags for a role within a specific category. The discussion_board_category_permissions table contains fields: id, category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report, created_at. Only admin users are authorized. The operation requires a request body containing the updated values for allowed fields, referencing only existing columns. No soft delete or ownership logic applies. All business logic must correspond exactly to the schema.","description":"Allows an admin to update an existing category permission record in the discussion_board_category_permissions table, identified by its id. The endpoint expects a request body with updated values for one or more of the following fields: category_id, role_name, can_view, can_create_topic, can_reply, can_like, can_report. The operation will not reference or update any fields not present in the schema. It is an admin-only operation, ensuring appropriate authorization. Input validation must verify UUIDs for id and category_id, plus only permit changes to defined fields. This operation is a full update according to the schema, with error returned if the id does not exist.","summary":"Admin updates a category permission record by id in discussion_board_category_permissions table.","parameters":[{"name":"id","description":"Unique identifier of the category permission to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the category permission record. Only schema-defined fields are accepted.","typeName":"IDiscussionBoardCategoryPermission.IUpdate"},"responseBody":{"description":"Updated category permission entry.","typeName":"IDiscussionBoardCategoryPermission"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/categoryPermissions/{id}","method":"put"},{"specification":"Delete a category permission record for the discussion board by its unique identifier as an admin. The discussion_board_category_permissions entity does NOT have a soft delete flag or deleted_at—this will be a hard delete operation. All data will be permanently removed from the table upon successful completion. Only admin users are authorized to perform this action. The operation simply accesses the id as primary key, verifies existence, and removes the record.","description":"This admin-only endpoint performs a hard delete of a category permission record from the discussion_board_category_permissions table. Since there is no soft delete field present in the Prisma schema, invoking this endpoint will permanently remove the category permission entry identified by the given id. This operation is used for permission management when an admin needs to eliminate obsolete or incorrect permission mappings. Attempting to delete a record that does not exist returns an error. No cascading deletes are done beyond the schema-defined logic.","summary":"Admin permanently deletes a category permission record by id (hard delete).","parameters":[{"name":"id","description":"Unique identifier of the category permission to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/categoryPermissions/{id}","method":"delete"},{"specification":"Get a filtered, paginated list of user profiles in the discussion board. The discussion_board_user_profiles table contains id, email, display_name, registered_at, is_active. This is a search endpoint for admins and other authorized staff, supporting pagination, search by display_name/email, filtering by is_active. No soft delete logic—records are only filtered by provided search and status criteria.","description":"This API operation returns a paginated list of user profiles from the discussion_board_user_profiles table. The returned fields include id, email, display_name, registered_at, is_active, corresponding exactly to the schema. Clients can apply filters (such as is_active), search by display_name or email (using partial match), and specify pagination/sorting parameters. The endpoint allows audit, moderation, or operational review of user profiles by admin or permitted users. There are no references to deletion fields; only schema-defined fields are included in the query and response. Related logic includes listing active/inactive users, searching by keyword, and handling large user bases through pagination.","summary":"Paginated/filterable list of user profiles from discussion_board_user_profiles.","parameters":[],"requestBody":{"description":"Filter, search, and pagination settings to retrieve user profiles.","typeName":"IPageDiscussionBoardUserProfiles.IRequest"},"responseBody":{"description":"Paginated list of user profiles matching the filter/search conditions.","typeName":"IPageDiscussionBoardUserProfiles"},"authorizationRole":null,"name":"index","path":"/discussion_board/userProfiles","method":"patch"},{"specification":"Fetch a single user profile by its unique identifier from discussion_board_user_profiles. The entity includes id, email, display_name, registered_at, is_active fields. Only these fields will be described or returned. There is no soft delete field. Ownership and access control depending on system design.","description":"Retrieves one user profile record by id from the discussion_board_user_profiles table. Returned fields strictly match the schema: id, email, display_name, registered_at, is_active. There are no ownership or soft delete mechanics to describe per schema. Errors are thrown if the user profile is not found. This operation may be used by admins or authenticated users to retrieve user profile details; access control will depend on who is authorized. This is strictly a single-resource retrieval and supports standard id-based lookups.","summary":"Fetch a user profile by id from discussion_board_user_profiles.","parameters":[{"name":"id","description":"Unique identifier of the user profile to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single user profile by id.","typeName":"IDiscussionBoardUserProfile"},"authorizationRole":null,"name":"at","path":"/discussion_board/userProfiles/{id}","method":"get"},{"specification":"Create a new user profile in the discussion board as an admin. The discussion_board_user_profiles table fields are: id, email, display_name, registered_at, is_active. This operation requires all necessary fields except those set by default/generation logic. The POST body must only contain values present in the schema. Only admins are allowed to perform creation via this endpoint. No soft delete logic or ownership—just creation of new profile entries.","description":"Creates a new user profile in the discussion_board_user_profiles table. Admins must provide all required fields (except id, if database-generated). The fields are: email, display_name, registered_at, is_active, matching the schema exactly. The endpoint validates inputs and inserts the user profile record, returning the created entry. No business logic involves any field not present in schema. This operation is for bootstrap, staff registration, or admin user management purposes. Access is restricted to admin users only.","summary":"Admin creates a user profile in discussion_board_user_profiles.","parameters":[],"requestBody":{"description":"Information to create the new user profile.","typeName":"IDiscussionBoardUserProfile.ICreate"},"responseBody":{"description":"The new user profile entry.","typeName":"IDiscussionBoardUserProfile"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/userProfiles","method":"post"},{"specification":"Update a user profile by its id as an admin. Fields as per schema: email, display_name, registered_at, is_active. The discussion_board_user_profiles entity has no soft delete logic. PUT operation fully updates allowed fields. Only admin can invoke this endpoint. Input and output match schema fields only.","description":"This endpoint allows an admin to update a user profile identified by id in discussion_board_user_profiles. The request body must contain only values for allowed fields: email, display_name, registered_at, is_active. No soft delete logic or extra fields permitted. Admin users utilize this operation for user management, data correction, or status activation/inactivation. The operation validates input, updates existing record, and returns the updated user profile. Error produced if id does not exist. Endpoint is strictly for admin user control use cases.","summary":"Admin updates a user profile by id in discussion_board_user_profiles table.","parameters":[{"name":"id","description":"Unique identifier of the user profile to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the user profile record. Only schema-defined fields are accepted.","typeName":"IDiscussionBoardUserProfile.IUpdate"},"responseBody":{"description":"Updated user profile entry.","typeName":"IDiscussionBoardUserProfile"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/userProfiles/{id}","method":"put"},{"specification":"Delete a user profile by id as an admin. There is no soft delete mechanism for discussion_board_user_profiles; operation is a hard delete. All fields should be referenced as present in the schema. Upon delete, the user is permanently removed from the table assuming no other row-level constraints. Only admin can perform this operation, usually for user management clean-up or compliance.","description":"This API operation allows an admin to permanently delete a user profile from discussion_board_user_profiles by id, performing a hard delete since no soft delete flags exist in the schema. All references, such as user activity, should be handled according to foreign key behavior or application business rules. This endpoint is for admin user management, such as removing obsolete, duplicate, or violating user entities. Errors are thrown if the id is not found. Only schema-defined fields are consulted in all checks and responses.","summary":"Admin permanently deletes a user profile record by id (hard delete).","parameters":[{"name":"id","description":"Unique identifier of the user profile to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/userProfiles/{id}","method":"delete"},{"specification":"Create a new admin assignment for a user profile. The discussion_board_admins table includes fields: id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. The POST body must match the schema and only use present fields. This operation requires referencing an existing user profile id and details of who assigns admin. Only admin users are permitted to perform this operation. Creation results in a new row mapping the user as admin with timestamps, but does not alter any absent fields.","description":"This API operation creates a new admin assignment by adding a row to the discussion_board_admins table. Admins must specify the discussion_board_user_profile_id, assigned_at, and assigned_by_user_profile_id. The revoked_at field is set null for an active assignment. The endpoint validates the referenced user profile, checks authorization, inserts the row, and returns the created admin assignment per the schema. Errors are thrown for invalid input or constraint violations. Use this for promoting a user to admin, with full audit trail.","summary":"Assign admin role to a user profile by creating a discussion_board_admins record (admin-only).","parameters":[],"requestBody":{"description":"Admin assignment data: user profile id, assigner, assigned_at.","typeName":"IDiscussionBoardAdmin.ICreate"},"responseBody":{"description":"The new admin assignment entry.","typeName":"IDiscussionBoardAdmin"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/admins","method":"post"},{"specification":"Return a paginated list of current admin assignments for the discussion board. The discussion_board_admins entity is used for tracking admin assignment history and active admin roles. All fields in the schema are part of the result. Filters, search, and pagination can be specified in the request body. The endpoint is for admin user management and audit, restricted to admin users only.","description":"This API operation returns a paginated list of admin assignments from the discussion_board_admins table. Fields returned include: id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. Supports filtering by assigned_at, is active/revoked (via revoked_at nullness), and searching by user identifiers. Pagination controls, sorting, and filters are provided in the request body. Only admins can invoke this operation. Used for periodic role audits, current admin listings, and management purposes.","summary":"Paginated list of admin assignments from discussion_board_admins (admin-only).","parameters":[],"requestBody":{"description":"Filter/search/pagination parameter settings for admin assignments list.","typeName":"IPageDiscussionBoardAdmins.IRequest"},"responseBody":{"description":"Paginated result set of admin assignments.","typeName":"IPageDiscussionBoardAdmins"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/admins","method":"patch"},{"specification":"Retrieve a single admin assignment by id. The discussion_board_admins schema includes id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. Fetches exactly one row by primary key. Access is restricted to admin users for management, audit, or review workflows. Only fields actually in the schema are documented or returned.","description":"Gets the full details for one admin assignment entry from discussion_board_admins, identified by id. Returned fields are id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. Use cases include role audit, admin promotion/revocation review, or validating admin mapping. No fields outside the schema are referenced. Admins can use this endpoint to inspect an individual admin assignment row. Errors are returned if the id does not exist.","summary":"Fetch a single admin assignment by id (admin-only) from discussion_board_admins.","parameters":[{"name":"id","description":"Unique identifier of the admin assignment record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details for the queried admin assignment record.","typeName":"IDiscussionBoardAdmin"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/admins/{id}","method":"get"},{"specification":"Update an admin assignment by its id. The discussion_board_admins entity holds id, discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id. Only admins are able to update. PUT operation allows full update of present fields. Request body must correspond to schema. The endpoint validates input, updates the existing row, and returns the updated admin assignment.","description":"Updates an admin assignment in the discussion_board_admins table, addressed by id. Only schema-defined fields—discussion_board_user_profile_id, assigned_at, revoked_at, and assigned_by_user_profile_id—are permitted in request body. Used by admins to correct, revoke, or change the assigned_by or timestamp information. Upon success, the operation returns the fully updated database row. Only admins have permission.","summary":"Update an admin assignment by id in discussion_board_admins (admin-only).","parameters":[{"name":"id","description":"Unique identifier of the admin assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the admin assignment. Only values present in the schema allowed.","typeName":"IDiscussionBoardAdmin.IUpdate"},"responseBody":{"description":"Resulting admin assignment after update.","typeName":"IDiscussionBoardAdmin"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/admins/{id}","method":"put"},{"specification":"Deletes a specific administrator assignment from the discussion_board_admins table. This operation permanently removes the admin role from the associated user (field: discussion_board_user_profile_id) based on the unique id. There is no soft-delete field; deletion is permanent. This helps in demoting users from admin status and is typically only allowed for super-admin operations. The operation does NOT affect the user profile or other roles—only the admin assignment entry is removed from the table. All action and audit trails referencing this admin assignment will remain, as per database normalization and audit requirements. This aligns strictly with the actual Prisma schema: no deleted_at or similar fields exist.","description":"This API endpoint permanently removes an administrator assignment from the discussion_board_admins table by the provided id. There is no soft delete; the row is fully removed. The endpoint should only be accessible by users with administrative authority. It does not alter the underlying user profile or revoke other roles—a user can still have other roles (such as member or moderator) if those assignments exist. All administrative actions must be auditable per platform requirements. Related logs and references remain intact. Deletion cannot be undone, as there is no deleted_at field in the schema.","summary":"Permanently delete an administrator assignment from the discussion_board_admins table (hard delete; no soft delete fields).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the admin assignment to delete from discussion_board_admins.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/admins/{id}","method":"delete"},{"specification":"Creates a new moderator assignment for a user in the discussion_board_moderators table. Requires the discussion_board_user_profile_id and assigned_by_user_profile_id fields as per schema. It stores the assignment's creation time (assigned_at). The operation must enforce that a user profile can only have a single active moderator assignment. This endpoint is for admin (or higher authority) use and relates directly to role elevation in discussion board RBAC workflows. Confirm that moderator assignments are auditable and can be revoked (revoked_at), but revoked_at is null at creation.","description":"This API endpoint creates a new moderator assignment for the specified user profile. The admin specifies the user to be granted moderator status using discussion_board_user_profile_id. The assigned_at field records the timestamp of assignment, and assigned_by_user_profile_id identifies who made the assignment. Each user can only be a moderator once (unique per profile). Upon creation, the assignment is active (revoked_at null). The operation must comply with auditability and admin-only access controls. No additional fields are referenced; only those present in the schema are supported.","summary":"Assign moderator role to a user by creating a new entry in discussion_board_moderators.","parameters":[],"requestBody":{"description":"Information necessary to create a new moderator assignment, including user profile ID and the assigning admin's user profile ID.","typeName":"IDiscussionBoardModerator.ICreate"},"responseBody":{"description":"Details of the created moderator assignment.","typeName":"IDiscussionBoardModerator"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/moderators","method":"post"},{"specification":"Retrieves a list or search of moderator assignments from the discussion_board_moderators table. Each record includes the assigned user profile, assignment status, and related audit fields as per the schema. Querying allows for filtering by assignment status (revoked_at null = active), assignment times, and assigned_by_user_profile_id. The endpoint is designed for admin operational views, supporting role and moderation audits. It returns only actual fields in the schema and supports search by indexed fields.","description":"This API endpoint provides a paginated or filtered list of all moderator role assignments. Results include each moderator's unique id, associated discussion_board_user_profile_id, assigned_at timestamp, optional revoked_at, and who performed the assignment. Allows for filtering by active or revoked status. No sensitive user details outside assignment information are exposed. Access is restricted to admin users for RBAC compliance.","summary":"List and search moderator assignments in discussion_board_moderators, filtered as needed for admin operations.","parameters":[],"requestBody":{"description":"Parameters to filter and page through moderator role assignments. Filters use schema fields only.","typeName":"IDiscussionBoardModerator.IRequest"},"responseBody":{"description":"A paginated list of moderator assignments, with all relevant schema fields included.","typeName":"IPageIDiscussionBoardModerator"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/moderators","method":"patch"},{"specification":"Retrieves details for a specific discussion_board_moderators row, as referenced by its id. Returns all fields: unique id, discussion_board_user_profile_id, assigned_at, revoked_at (nullable), and assigned_by_user_profile_id. Supports admin review, audit, and detailed RBAC operations. No fields outside schema are referenced.","description":"Fetches complete details for a single moderator assignment, including unique id, linked user profile ID, assignment timestamp, optional revocation timestamp for role history, and the ID of the assigning admin. Access should require admin privileges for RBAC integrity. The endpoint supports viewing moderator audit information and role change workflow reviews.","summary":"Get full information about a specific moderator assignment.","parameters":[{"name":"id","description":"Unique identifier (UUID) for the moderator assignment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment details as per discussion_board_moderators schema.","typeName":"IDiscussionBoardModerator"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/moderators/{id}","method":"get"},{"specification":"Updates a specific discussion_board_moderators row, identified by unique id. All fields in the schema may be updated except for id. Particularly, revoked_at may be set (demoting moderator), or audit fields may be adjusted as per business logic. Only the actual schema fields can be modified.","description":"This endpoint lets an admin update moderator assignment details for a specific moderator. It allows setting the revoked_at timestamp to deactivate moderator privileges, as well as updating assignment information. Only fields in the schema (discussion_board_user_profile_id, assigned_at, revoked_at, assigned_by_user_profile_id) are valid. No non-schema fields are referenced or used. Requires admin privileges as per RBAC, and all actions must be auditable.","summary":"Update moderator assignment information by id.","parameters":[{"name":"id","description":"Moderator assignment's unique id to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for moderator assignment, strictly limited to those in the Prisma schema.","typeName":"IDiscussionBoardModerator.IUpdate"},"responseBody":{"description":"Updated moderator assignment details reflecting schema constraints.","typeName":"IDiscussionBoardModerator"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/moderators/{id}","method":"put"},{"specification":"Permanently deletes a moderator assignment from the discussion_board_moderators table, as identified by unique id. No soft delete fields exist in the table, so the operation is destructive—removing the assignment entirely. Other role assignments or the user profile are not affected. RBAC and audit rules apply; only admins should perform this operation. Related logs, reports, and references remain unaffected by this delete.","description":"This API endpoint permanently removes a moderator assignment entry (the moderator role) from the table via hard delete. There is no soft-delete: deleted_at or is_deleted fields do not exist in discussion_board_moderators schema. Use case is for fully removing moderator permissions from a user (demotion or termination of moderator privileges), not deleting the user itself. All related audit records persist. Only admins may invoke this operation for security and compliance.","summary":"Hard delete a moderator role assignment from discussion_board_moderators (no soft delete).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the moderator assignment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/moderators/{id}","method":"delete"},{"specification":"Retrieves a paginated/searchable list of member assignments from discussion_board_members. Supports filters on joined_at, left_at, and user profile linkage. Each record includes role membership (active if left_at is null), linking to the discussion_board_user_profile_id, and auditing join/left times. Returns only schema fields. Designed for general membership roster, audit, or user search views. No personal information beyond schema is included.","description":"This API returns a paginated/searchable list of all membership assignments in the discussion board. Each result includes the unique id, discussion_board_user_profile_id, joined_at, and optionally left_at (active if null). This endpoint is intended for membership audits, user management, or listing current/past members. No other user profile or private data is included beyond defined schema fields. Publicly or authenticated-accessible as per platform policy. Role assignment history can be inferred from join/leave times. Allows filtered searching by joined_at and left_at.","summary":"List/search member assignment records from discussion_board_members.","parameters":[],"requestBody":{"description":"Query parameters for searching/filtering member assignments by schema fields.","typeName":"IDiscussionBoardMember.IRequest"},"responseBody":{"description":"Paginated list of member assignment entries (past and present), schema fields only.","typeName":"IPageIDiscussionBoardMember"},"authorizationRole":"member","name":"index","path":"/discussion_board/members","method":"patch"},{"specification":"Fetches details for a single member assignment from the discussion_board_members table. Returns all fields: unique id, linked user profile id, joined_at, and left_at (nullable). This operation enables review of a member's board participation history and current status. There are no soft-delete or audit fields outside schema. Authenticated member-level or above required to access.","description":"Retrieves detailed information about a specific member's discussion board assignment by id. Returned fields: id, discussion_board_user_profile_id, joined_at, and left_at. The endpoint supports user audit, membership verification, and RBAC assignment review. Access may require user authentication, depending on platform policy. Only actual schema fields are referenced or exposed—no extraneous user or membership information is included.","summary":"Get details for a specific discussion_board_members entry by id.","parameters":[{"name":"id","description":"Unique UUID of the discussion_board_members row to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Membership assignment record with full schema details.","typeName":"IDiscussionBoardMember"},"authorizationRole":"member","name":"at","path":"/discussion_board/members/{id}","method":"get"},{"specification":"Creates a new membership assignment in discussion_board_members. The required fields are discussion_board_user_profile_id and joined_at. left_at is not set at creation, indicating active membership. This operation only creates a new assignment; does not create user profile or grant additional roles. For admin onboarding or membership grant workflow. All fields must correspond to schema definitions and normalization: no non-schema fields permitted.","description":"Creates a new membership row assigning a user profile to board member status. input: discussion_board_user_profile_id (link to the user profile), joined_at timestamp. On creation, left_at is not set, indicating current/active membership. The endpoint does not handle user profile creation or other roles—only assignment as a member. Requires admin authority as per RBAC and audit policies. No extra data outside schema may be stored or referenced.","summary":"Assign a user profile as a board member by creating a discussion_board_members row.","parameters":[],"requestBody":{"description":"Information for new member assignment (user profile ID, join time).","typeName":"IDiscussionBoardMember.ICreate"},"responseBody":{"description":"Created member assignment record, with all schema fields populated.","typeName":"IDiscussionBoardMember"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/members","method":"post"},{"specification":"Updates an existing member assignment in the discussion_board_members table, referenced by unique id. Updatable fields include joined_at and left_at (e.g., marking a member as left with a non-null left_at). The operation only affects schema fields. Used for admin-triggered updates (membership withdrawal, corrections, etc.).","description":"Allows admin users to update join or leave times for a given member assignment, setting left_at to indicate inactive membership. Also allows correction to joined_at if necessary. The update is strictly limited to schema-defined fields; no user profile or extra business data may be modified indirectly. All operations are fully auditable and must follow RBAC constraints for admin-level actions.","summary":"Update member assignment join/leave status in discussion_board_members by id.","parameters":[{"name":"id","description":"Unique UUID for the member assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable fields for discussion_board_members: joined_at and left_at.","typeName":"IDiscussionBoardMember.IUpdate"},"responseBody":{"description":"Updated member assignment reflecting any join/leave changes.","typeName":"IDiscussionBoardMember"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/members/{id}","method":"put"},{"specification":"Removes a membership assignment from the discussion_board_members table by unique id. No is_deleted or deleted_at fields exist, so this is a hard delete. The operation is irreversible and only permitted for admin users. It does not affect associated user profiles, roles, or data outside the row being deleted. All action and audit trails referencing this member assignment persist for accountability. No schema fields outside those present are referenced or modified in this process.","description":"Permanently deletes a member assignment entry based on provided id. There is no soft delete as the schema does not provide such fields—entry is completely removed and cannot be restored. Only admins may use this endpoint. Other role assignments or user profile attributes are not altered; only the member role assignment is deleted.","summary":"Permanently delete a discussion_board_members row (hard delete, irreversible).","parameters":[{"name":"id","description":"Unique id (UUID) for the discussion_board_members entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/members/{id}","method":"delete"},{"specification":"Provides paginated/searchable access to guest session records in discussion_board_guests. Each entry includes id, session_id (unique), and created_at. No personal, user profile, or business data exists; only guest session tracking for analytics and monitoring. No soft delete or status tracking fields exist. Endpoint intended for system audit, analytics, or compliance views as per requirements. Exposes only actual fields from schema.","description":"This endpoint returns a paginated or filtered list of guest session records. Each record includes the session's unique id (UUID), session_id string (unique), and created_at timestamp. Used for monitoring guest activity and system analytics. Only schema fields are included. Pagination or filtering may use created_at or session_id as parameters. Role or authentication requirements are as per system policy.","summary":"List/download guest session records from discussion_board_guests.","parameters":[],"requestBody":{"description":"Parameters for paginated/filtered search of guest session records (created_at, session_id).","typeName":"IDiscussionBoardGuest.IRequest"},"responseBody":{"description":"Paginated guest session records as per schema definitions.","typeName":"IPageIDiscussionBoardGuest"},"authorizationRole":"admin","name":"index","path":"/discussion_board/guests","method":"patch"},{"specification":"Fetch information about a specific guest session in the discussion board system. This operation retrieves a guest session's details using its unique identifier (UUID) as defined in the discussion_board_guests model. The endpoint enables systems to track or audit guest browsing events, important for analytics and platform personalization. Only fields defined in the Prisma schema are used: id, session_id, created_at. The endpoint does not return or reference any non-existent fields such as deleted_at or updated_by.","description":"This endpoint allows the retrieval of an individual guest session using the provided guest 'id' (UUID). As per the discussion_board_guests schema, each guest represents an unauthenticated user or session. Only the fields actually present in the schema will be included, specifically: id (primary key), session_id (unique session identifier), and created_at (session creation timestamp). There are no soft-delete or owner-tracking fields; all information is returned as stored. This endpoint is useful for tracing anonymous access events for analytics or privacy compliance. Only session owners or privileged roles should have access to individual guest records, as guests themselves may not have authenticated identity. No fields not present in the schema (e.g., updated_by, deleted_at) are referenced. Productized for analytics, not for business content display.","summary":"Retrieve a specific guest session from discussion_board_guests by ID (UUID).","parameters":[{"name":"id","description":"Unique identifier for the guest session (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Guest session details object corresponding to the provided id.","typeName":"IDiscussionBoardGuest"},"authorizationRole":null,"name":"at","path":"/discussion_board/guests/{id}","method":"get"},{"specification":"Create a new guest session for an unauthenticated user in the discussion board. The operation allows the system to generate and track a guest entry by recording session_id (unique), and created_at timestamp. Only the fields present in the discussion_board_guests Prisma model are processed; owner, deletion, and update tracking fields are not supported. This endpoint is executed without user authentication as guests are not registered users.","description":"Use this endpoint to create a new guest entry in the discussion_board_guests table when an anonymous or unauthenticated user accesses the board. The request must provide a unique session_id and, optionally, an explicit created_at timestamp (otherwise set to now). Only actual schema fields are accepted (id, session_id, created_at). No soft-delete or lifecycle fields exist, so deletion must be performed via hard removal if required. This action is open to unauthenticated access, making it suitable for creating analytic sessions for first-time visitors. No fields outside the schema are supported.","summary":"Create a new guest session record in discussion_board_guests (anonymous access).","parameters":[],"requestBody":{"description":"Information needed to create a new guest session (session_id, created_at).","typeName":"IDiscussionBoardGuest.ICreate"},"responseBody":{"description":"Details of the created guest session record.","typeName":"IDiscussionBoardGuest"},"authorizationRole":null,"name":"create","path":"/my/discussion_board/guests","method":"post"},{"specification":"Delete an existing guest record by ID, permanently removing it from the discussion_board_guests table. This operation performs a hard delete, as there are no soft delete or lifecycle fields in the schema. Only the unique identifier (UUID) is required. Ownership verification may be handled at the application level to ensure only the creator/session-owner can delete their guest record.","description":"This endpoint removes a guest session record from the discussion_board_guests table by its id (UUID). The action is a hard delete, as there is no is_deleted, deleted_at, or similar soft delete mechanism in the guest table schema. After deletion, the corresponding guest session can no longer be tracked for analytics or personalized UI. Authorization should be enforced so that only the session owner can remove their session, or by privileged service accounts for cleanup. Strictly limited to the fields present: deletion is by id only. No auditing or retention fields are present in the Prisma schema for this entity.","summary":"Permanently delete a guest session from discussion_board_guests by its ID.","parameters":[{"name":"id","description":"Unique identifier for the guest session (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":null,"name":"erase","path":"/my/discussion_board/guests/{id}","method":"delete"},{"specification":"Create a new role assignment or revocation event in the discussion_board_role_changes table. This endpoint supports admins in updating user roles (assign/revoke admin, moderator, member, or guest), fully audited as per business requirements. Each change record specifies the affected user, actor, role_type, action_type, and timestamp. Only fields in the Prisma schema are referenced; no non-existent tracking fields are used. Admin access required.","description":"Admins use this endpoint to log role changes within the board. Each POST creates an atomic event recording changes such as assigning or revoking roles (admin, moderator, member, guest). Required fields: target_user_profile_id (who the change affects), performed_by_user_profile_id (who performed the change), role_type (role being changed), action_type (\"assigned\"/\"revoked\"), and timestamp (when the change happened). All changes are tracked for compliance and audit purposes; only roles/fields present in the schema are referenced. There are no deleted_at/updated_by fields in this table. This operation is only available to users with admin privileges.","summary":"Admin creates a new role change event (assign/revoke a user role).","parameters":[],"requestBody":{"description":"Details required to create a new role assignment or revocation event.","typeName":"IDiscussionBoardRoleChange.ICreate"},"responseBody":{"description":"Role change event record as stored in the role_changes table.","typeName":"IDiscussionBoardRoleChange"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/roleChanges","method":"post"},{"specification":"Retrieve a list of role change events for audit, search, or analytics within the discussion_board_role_changes table. Accessible only by admin users, this operation supports filtering and pagination by role_type, action_type, time range, or user. Response includes only fields present in the schema: id, target_user_profile_id, performed_by_user_profile_id, role_type, action_type, and timestamp. No non-existent fields are referenced.","description":"This endpoint allows admin users to fetch a paginated/searchable list of all role change events in the system, supporting audit and compliance. Only actual schema fields are included (id, target_user_profile_id, performed_by_user_profile_id, role_type, action_type, timestamp), as per discussion_board_role_changes definition. Filtering, searching, and pagination are implemented as request body parameters. There are no deleted_at, updated_by, or other fields not in the schema. List access is restricted to admin role only for privacy and security.","summary":"Retrieve a paginated and filterable list of role change events (admin access).","parameters":[],"requestBody":{"description":"Query/filter parameters for searching role change events (role_type, action_type, user, date range).","typeName":"IDiscussionBoardRoleChange.IRequest"},"responseBody":{"description":"Paginated result set of role change events.","typeName":"IPageIDiscussionBoardRoleChange"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/roleChanges","method":"patch"},{"specification":"Fetch a specific role change event record by its unique id from the discussion_board_role_changes table. This endpoint is admin-restricted. Only the defined schema fields are referenced, and no deleted_at, updated_by, or similar lifecycle fields are accessed.","description":"Use this endpoint to retrieve an individual role change event by its id (UUID), as stored in the discussion_board_role_changes schema. Only the actual fields defined in Prisma are included: id, target_user_profile_id, performed_by_user_profile_id, role_type, action_type, and timestamp. No references to non-existent fields. The operation is only accessible to admin users for audit, review, or compliance investigation.","summary":"Retrieve a specific role change event (by ID) as an admin.","parameters":[{"name":"id","description":"Unique identifier of the role change event (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Role change event detail object.","typeName":"IDiscussionBoardRoleChange"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/roleChanges/{id}","method":"get"},{"specification":"Returns a list of topics in the discussion_board_topics table, supporting advanced search, filtering by category, status, or title, and pagination. This covers both public and authenticated searches, but no private information is involved. Only defined schema fields are queried. Uses PATCH method to allow complex search/filter body. No soft delete fields exist; closed/pinned state tracked by available status fields.","description":"Clients may list/search all topics using this endpoint. Only actual database fields are included: id, discussion_board_category_id, created_by_member_id, last_edited_by_member_id (nullable), title, description, status, pinned_at (nullable), closed_at (nullable), created_at, updated_at. Filtering/searching may include keywords, category, or status, with pagination parameters. Closed or pinned topics are reflected by their status and timestamp fields; no deleted_at or soft delete mechanism is present. This endpoint does not leak restricted data and follows board-wide visibility settings. No non-existent fields are referenced.","summary":"List/search/filter all topics in discussion_board_topics (with pagination).","parameters":[],"requestBody":{"description":"Parameters for searching/filtering topics (keywords, status, category, pagination).","typeName":"IDiscussionBoardTopic.IRequest"},"responseBody":{"description":"Paginated list of topics matching the search/filter criteria.","typeName":"IPageIDiscussionBoardTopic"},"authorizationRole":null,"name":"index","path":"/discussion_board/topics","method":"patch"},{"specification":"Retrieve a specific topic thread's complete detail from the discussion_board_topics table. Returns all fields as per schema: id, discussion_board_category_id, created_by_member_id, last_edited_by_member_id (nullable), title, description, status, pinned_at, closed_at, created_at, updated_at. This supports thread viewing for all users. Only actual schema fields are exposed; no extraneous fields or non-existent attributes are referenced.","description":"This endpoint provides complete information on a single discussion topic thread, located by its id (UUID). All actual fields from the discussion_board_topics model are included: id, discussion_board_category_id, created_by_member_id, last_edited_by_member_id (nullable), title, description, status, pinned_at (nullable), closed_at (nullable), created_at, updated_at. The endpoint explicitly avoids referencing any schema fields not present, such as deleted_at, owner, or extra audit columns. This endpoint forms the basis for threading and content display in the board application.","summary":"Fetch full detail of a specific discussion topic thread by ID.","parameters":[{"name":"id","description":"Unique identifier of the topic to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single topic detail object with all fields as defined in the schema.","typeName":"IDiscussionBoardTopic"},"authorizationRole":null,"name":"at","path":"/discussion_board/topics/{id}","method":"get"},{"specification":"Create a new topic thread under the authenticated user's (member) identity in discussion_board_topics. Allows members to post new topics in a category, specifying title, description, status, and timestamps, plus references to category and creating member. Only fields present in the Prisma schema are included. There are no deleted_at or owner-tracking columns beyond member identity.","description":"A member uses this endpoint to create a new discussion topic. All required fields in the request must exist in the Prisma schema: discussion_board_category_id (category id), created_by_member_id (the current member's id), title, description, status (open/closed/pinned as string), and optional fields such as pinned_at and closed_at, as required. No hidden or system fields are accepted. The system will set created_at/updated_at appropriately. Outcome is a topic owned by the authenticated member, with all schema fields populated. Soft delete not supported (no deleted_at field); deletion is hard delete via another endpoint.","summary":"Create a new topic as the current (authenticated) member.","parameters":[],"requestBody":{"description":"Information to create a new topic (fields as defined in discussion_board_topics).","typeName":"IDiscussionBoardTopic.ICreate"},"responseBody":{"description":"Created topic detail, with ids and timestamps.","typeName":"IDiscussionBoardTopic"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/topics","method":"post"},{"specification":"Update an existing topic created by the authenticated (current) member, identified by topic id. The operation allows modifying actual fields present in the schema: title, description, status, optional pinned_at/closed_at, and updates last_edited_by_member_id. No soft delete columns exist. Only the member who created the topic can perform this action.","description":"A member uses this endpoint to edit their own topic. Allowed update fields: title, description, status, pinned_at, closed_at, last_edited_by_member_id, and updated_at. The endpoint implements authorization to restrict access to resource ownership. No fields are referenced outside the schema. Topic history and audit are maintained by associating updates with last_edited_by_member_id and updated_at timestamps. No deleted_at or soft delete mechanism. Only topic owners may edit their records via this endpoint. If further role-based permissions are required, moderation/admin endpoints should be used.","summary":"Update the current member's own topic by id (authorized, owner only).","parameters":[{"name":"id","description":"Unique identifier for the topic (UUID) owned by the current member.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the owned topic (title, description, status, etc).","typeName":"IDiscussionBoardTopic.IUpdate"},"responseBody":{"description":"Updated topic object after the changes.","typeName":"IDiscussionBoardTopic"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/topics/{id}","method":"put"},{"specification":"Delete an owned topic by its unique id for the current (authenticated) member. As the discussion_board_topics table does not include a soft delete field, removal is hard delete (permanent). Only topic creators/owners may delete their topics. Authorization and resource ownership are enforced.","description":"This endpoint permanently removes a topic by its id, provided the authenticated member is the creator/owner. The discussion_board_topics schema does not have soft delete fields (e.g., deleted_at, is_deleted), so deletion is permanent (hard delete). If recovery/version/history is needed, it should be handled via topic_snapshots not present in this operation. No schema fields outside of id are used for deletion. Only topic owners may access this endpoint; role escalation/moderation is not provided on this route.","summary":"Hard delete the current member's own topic (permanent removal, owner only).","parameters":[{"name":"id","description":"Unique identifier for the topic to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/topics/{id}","method":"delete"},{"specification":"List/search recent topic snapshots (audit/history) in the discussion_board_topic_snapshots table. Supports review of topic version history, audit trails, and rollback comparison. Returned fields are as in the schema: id, discussion_board_topic_id, edited_by_member_id, title, description, status, pinned_at, closed_at, created_at. Only real schema fields are referenced. No soft/hard delete, as snapshots are immutable. Allows pagination, keyword filtering, and sorting.","description":"This endpoint fetches a paginated list of topic snapshots, each representing a version of a topic thread at a moment in time. Each snapshot object holds all fields as defined in the discussion_board_topic_snapshots model: id, discussion_board_topic_id, edited_by_member_id, title, description, status, pinned_at, closed_at, created_at. Filtering can be performed by topic, editor, or time range as supported by the request body. Snapshots are for audit recovery, review, or moderator purposes; there are no soft/hard delete fields. No references to schema columns not defined in Prisma.","summary":"Fetch a paginated list of topic snapshots (audit history).","parameters":[],"requestBody":{"description":"Parameters for searching/filtering topic snapshots (topic id, editor, time range, pagination).","typeName":"IDiscussionBoardTopicSnapshot.IRequest"},"responseBody":{"description":"Paginated result set of topic snapshots matching the filter/search criteria.","typeName":"IPageIDiscussionBoardTopicSnapshot"},"authorizationRole":null,"name":"index","path":"/discussion_board/topicSnapshots","method":"patch"},{"specification":"Retrieve a specific topic snapshot by its unique identifier from the discussion_board_topic_snapshots table. The endpoint allows any authorized user to view the historical state of a discussion board topic at a given revision point, addressing full traceability and rollback requirements. All fields returned must match those defined in the discussion_board_topic_snapshots schema: id, discussion_board_topic_id, edited_by_member_id, title, description, status, pinned_at, closed_at, created_at. Access control should ensure that only viewers with sufficient rights (e.g., those with view permissions on the corresponding topic/category) can access this resource. No fields outside the schema may be referenced. Error responses must account for invalid IDs and permission denials.","description":"This operation returns the complete details of a single topic snapshot from the discussion_board_topic_snapshots entity, as referenced in the system's audit/versioning requirement. The response includes the exact state of a topic (title, description, status, etc.) at a historical edit point. All data returned directly reflect the columns of the discussion_board_topic_snapshots model, with no additional computed values or external attributes. Retrieves only the row matching the provided id, or returns an error if the id does not exist. There are no related entities or additional lookups performed beyond the schema-specified fields. The endpoint is integral for audit trails, rollback, and moderation review. Access is strictly controlled by user role and category permission. Only valid UUIDs are accepted as path parameters, and only readable columns may be exposed in the response.","summary":"Get a single topic snapshot by ID from discussion_board_topic_snapshots.","parameters":[{"name":"id","description":"Unique identifier for the topic snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the requested topic snapshot.","typeName":"IDiscussionBoardTopicSnapshot"},"authorizationRole":null,"name":"at","path":"/discussion_board/topicSnapshots/{id}","method":"get"},{"specification":"Retrieve a paginated list of topic subscriptions from the discussion_board_topic_subscriptions entity, supporting advanced querying with filters such as topic ID, member ID, and subscription status. This allows system or admin users to audit or analyze topic following patterns. Fields must be limited to those defined in the schema: id, discussion_board_topic_id, member_id, subscribed_at, unsubscribed_at. Supports pagination and filtering per typical search endpoints; no extra business logic may be assumed. Access control is determined by system-level privilege (e.g., admin or moderator role for global queries).","description":"This endpoint returns a paginated list of topic subscription records from discussion_board_topic_subscriptions, matching any provided filters such as topic ID or member ID. All fields in the response are limited to those existing in the database schema. The operation allows for administrative review of which members are following which topics and when they subscribed or unsubscribed. The search criteria and pagination parameters must match the request body definition. No computed or joined data may be returned. Authorization and filtering are handled according to the access control model and business rules defined for subscription visibility.","summary":"List topic subscriptions with optional filtering from discussion_board_topic_subscriptions.","parameters":[],"requestBody":{"description":"Criteria and pagination for listing topic subscriptions.","typeName":"IDiscussionBoardTopicSubscription.IRequest"},"responseBody":{"description":"Paginated topic subscription list.","typeName":"IPageIDiscussionBoardTopicSubscription"},"authorizationRole":null,"name":"index","path":"/discussion_board/topicSubscriptions","method":"patch"},{"specification":"Retrieve a single topic subscription by its unique ID from the discussion_board_topic_subscriptions schema. Allows authorized actors to view the details of an individual topic subscription, including which topic is being followed, the member following, and subscription/unsubscription timestamps. Only schema-defined fields may be included in the response: id, discussion_board_topic_id, member_id, subscribed_at, unsubscribed_at.","description":"Fetch complete details for a specific topic subscription identified by its ID from the discussion_board_topic_subscriptions table. The endpoint outputs only the database fields defined in the schema, with no reference to non-existent or computed properties. Returns a 404 error if the subscription is not found. Permission checks restrict access to actors allowed to audit or view subscription connections. Typical use-case is for audits, troubleshooting notification delivery, or admin dashboard population.","summary":"Get a topic subscription by ID from discussion_board_topic_subscriptions.","parameters":[{"name":"id","description":"Unique identifier for the topic subscription to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full topic subscription details as defined in schema.","typeName":"IDiscussionBoardTopicSubscription"},"authorizationRole":null,"name":"at","path":"/discussion_board/topicSubscriptions/{id}","method":"get"},{"specification":"Create a new topic subscription, associating the currently authenticated member with a specific topic in discussion_board_topic_subscriptions. All fields for creation must exist in the schema: discussion_board_topic_id, member_id (implicitly the authenticated user), and subscription timestamp (set by the system). Returns the new subscription details. No additional fields may be referenced. Soft or hard duplicate prevention and business validation is required per business rules, but only fields in schema may be persisted.","description":"Allows a member (or privileged user) to subscribe themselves to a discussion topic, resulting in a new row in discussion_board_topic_subscriptions. The request body includes the target topic's ID; the subscribing member is inferred from session/auth context. On success, returns all persisted fields: id, discussion_board_topic_id, member_id, subscribed_at, unsubscribed_at (null). This enables users to receive notifications for future topic activity. The operation must ensure that duplicate subscriptions are rejected or handled according to business rules. No properties not defined in the table may be accepted or persisted.","summary":"Subscribe current member to a topic (create subscription).","parameters":[],"requestBody":{"description":"New topic subscription details (topic ID is required).","typeName":"IDiscussionBoardTopicSubscription.ICreate"},"responseBody":{"description":"Subscription row created in database.","typeName":"IDiscussionBoardTopicSubscription"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/topicSubscriptions","method":"post"},{"specification":"Update an existing topic subscription by ID. Supports changes permitted by business logic (e.g., resubscribing, marking as unsubscribed) for the authenticated user (must own the subscription). Fields updated must exist in the discussion_board_topic_subscriptions schema: discussion_board_topic_id, member_id, subscribed_at, unsubscribed_at. No unauthorized modifications of other users' subscriptions are permitted. Only explicitly updatable fields per schema and business logic can be changed by the user.","description":"This endpoint allows a member to update their own topic subscription, typically to resubscribe (clear unsubscribed_at) or unsubscribe (set unsubscribed_at). It ensures that the authenticated user owns the subscription being modified. All modifications are limited strictly to schema-defined fields—no additional or computed fields are permitted in input or output. Returns the updated subscription row or appropriate error if not permitted.","summary":"Update own topic subscription by ID (resubscribe or unsubscribe).","parameters":[{"name":"id","description":"Unique identifier for the subscription to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the topic subscription (e.g., unsubscribed_at for unsubscribing).","typeName":"IDiscussionBoardTopicSubscription.IUpdate"},"responseBody":{"description":"Updated topic subscription data after modification.","typeName":"IDiscussionBoardTopicSubscription"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/topicSubscriptions/{id}","method":"put"},{"specification":"Delete (hard remove) a topic subscription by ID for the currently authenticated member. The discussion_board_topic_subscriptions schema does not include any soft deletion indicator, so the row is permanently removed from the table. Only the owner of the subscription may invoke this action. All referenced fields must be schema-defined.","description":"Deletes a topic subscription from the discussion_board_topic_subscriptions table, permanently removing the row identified by the provided ID. The delete is hard (not soft), as there is no is_deleted or deleted_at column present in the schema. The requesting member must own the subscription to perform this operation. Returns confirmation of deletion or error if not permitted. No fields outside the schema may be accessed or exposed.","summary":"Delete own topic subscription by ID (hard delete).","parameters":[{"name":"id","description":"Unique identifier for the topic subscription to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of permanent deletion (no row remains).","typeName":"IVoidResponse"},"authorizationRole":"member","name":"erase","path":"/my/discussion_board/topicSubscriptions/{id}","method":"delete"},{"specification":"Retrieve a paginated list of posts from the discussion_board_posts entity. Allows for advanced searching by topic, author, is_deleted, creation date, or full text search on 'body'. Only fields present in the schema are available for filtering or response: id, discussion_board_topic_id, author_member_id, title, body, is_deleted, created_at, updated_at. Supports auditing, content discovery, and moderation. Access is determined by the system's board-wide permission structure.","description":"Returns a list of posts with advanced filtering and searching, useful for moderation, search, or timeline views. The output is paginated and only exposes the schema's columns—no extra/computed values. This operation enables comprehensive listing for auditing or user feed construction. Request and response fields strictly follow the definition of the discussion_board_posts model, with no reference to external or virtual attributes. Authorization is handled according to the board's RBAC model.","summary":"List and search posts with optional filtering/pagination.","parameters":[],"requestBody":{"description":"Filter and pagination parameters for fetching post list.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated post data result set.","typeName":"IPageIDiscussionBoardPost"},"authorizationRole":null,"name":"index","path":"/discussion_board/posts","method":"patch"},{"specification":"Get full details for a specific post by its ID from discussion_board_posts. All columns in the schema are included in the response: id, discussion_board_topic_id, author_member_id, title, body, is_deleted, created_at, updated_at. No derived or external data may be shown. Accessible to users with view rights per topic/category policies.","description":"Fetches a single post’s full attributes using its unique ID. The output strictly includes only the fields available in the discussion_board_posts schema. Used in detail views and moderation. Returns 404 if the post is not found. Soft-deleted posts (where is_deleted is true) may be excluded for unauthorized viewers per business logic.","summary":"Get post by ID from discussion_board_posts.","parameters":[{"name":"id","description":"Unique identifier for the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete post details for the specified ID.","typeName":"IDiscussionBoardPost"},"authorizationRole":null,"name":"at","path":"/discussion_board/posts/{id}","method":"get"},{"specification":"Create a new post as the currently authenticated member in the discussion_board_posts entity. All fields present in the model must be captured at creation: discussion_board_topic_id, author_member_id (inferred from auth), title (optional), body, is_deleted (defaulted false), created_at, and updated_at. Attachments and likes are handled in separate operations. The operation must enforce schema-based constraints (e.g., string lengths, topic association) and error on any extra field.","description":"Allows a member to author and submit a new post (topic or reply), recorded as a row in the discussion_board_posts table. Only properties in the model (topic association, author, body, optional title, etc.) are captured. Upon success, returns the persisted row. All permission and field value constraints are enforced per the schema, with no acceptance or return of non-schema attributes. Business logic for defaulting is_deleted to false must be followed. Attachments and further interactions are separate operations.","summary":"Create a new post as member (discussion_board_posts).","parameters":[],"requestBody":{"description":"Fields for creating a post (topic association, body, etc).","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"Created post record with all schema fields populated.","typeName":"IDiscussionBoardPost"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/posts","method":"post"},{"specification":"Update a post by ID as the authenticated member. This can include editing the content, marking as soft deleted, or updating the title. Only the author of the post is allowed to use this endpoint; updates are limited to fields present in the discussion_board_posts schema: title, body, is_deleted, updated_at. Per schema, is_deleted is a soft deletion flag; setting it true will hide the post rather than remove it. No other user may edit another's post through this path.","description":"Lets a member update one of their own posts (change title, update body, or soft delete). Only schema-specified properties can be edited or returned. Soft deletion is achieved by setting is_deleted to true; the row remains in the database. Attachments, likes, and comments require separate operations. Ownership and field type/constraint checks are strictly enforced. Non-authors cannot update other users’ posts through this route.","summary":"Update own post (edit or soft delete) in discussion_board_posts.","parameters":[{"name":"id","description":"Unique identifier for the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the post (title, body, is_deleted).","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"Updated post row after changes, all schema fields included.","typeName":"IDiscussionBoardPost"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/posts/{id}","method":"put"},{"specification":"Soft delete a post by ID for the authenticated member—the post's is_deleted flag will be set true, as per discussion_board_posts schema. This is NOT a hard delete (row is retained); instead, is_deleted indicates the post should be hidden for most views. Only the post owner can invoke this endpoint. Action is audited.","description":"Sets is_deleted=true for the specified post in the discussion_board_posts table. This is a soft delete: the post remains in the database but is excluded from normal queries unless specifically requested. Only the owner/member may perform the deletion. There is no deleted_at field; no physical removal occurs. Attachments, likes, and comments are unaffected. Returns confirmation that the soft delete was successful, exposing only fields as defined in schema. Attempts to delete a post not owned by the caller are rejected with a permission error.","summary":"Soft delete own post by ID (mark is_deleted=true).","parameters":[{"name":"id","description":"Unique identifier for the post to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation and updated post record post-soft delete (is_deleted=true).","typeName":"IDiscussionBoardPost"},"authorizationRole":"member","name":"erase","path":"/my/discussion_board/posts/{id}","method":"delete"},{"specification":"Retrieve a filtered, paginated list of post snapshots from the discussion_board_post_snapshots schema, for audit, rollback, or moderation review. Filtering supports available schema fields (discussion_board_post_id, author_member_id, created_at) per system requirements. Only fields in the entity may be referenced: id, discussion_board_post_id, author_member_id, snapshot_body, edit_reason, created_at. Business logic must not introduce additional fields or computed columns.","description":"Returns a list of post snapshots (edit history) from discussion_board_post_snapshots, matching provided filters (e.g., by post ID or author). Response strictly limited to schema-defined fields. Used by moderators/admins for review, rollback, or history viewing. Pagination and complex queries are permitted in the request body, but only schema fields may be included. Results cannot include any joined data or non-existent fields.","summary":"List/edit-history of post snapshots (discussion_board_post_snapshots).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination details for fetching post snapshots.","typeName":"IDiscussionBoardPostSnapshot.IRequest"},"responseBody":{"description":"Paginated list of post snapshots (audit/history records).","typeName":"IPageIDiscussionBoardPostSnapshot"},"authorizationRole":null,"name":"index","path":"/discussion_board/postSnapshots","method":"patch"},{"specification":"Retrieves a single discussion board post snapshot identified by its unique id. This corresponds to reading a historical version of a post, as defined in the discussion_board_post_snapshots table. Only fields present in the actual schema should be used. The endpoint is crucial for reviewing edit history or rollback by moderators/admins. This operation directly supports transparency and audit requirements outlined in the requirements documentation. The id parameter must match an existing snapshot's id (UUID).","description":"This operation fetches a single record from the discussion_board_post_snapshots table, identified by its id. Fields that will be returned are: id, discussion_board_post_id, author_member_id, snapshot_body, edit_reason, and created_at. This allows moderators, admins, or the post author to review the content of the post at a specific point in its revision history, along with who edited it and the stated reason, if any. It is a read-only operation and does not allow for mutation or deletion of snapshot data. This endpoint supports the platform's compliance, audit, and rollback features by exposing the immutable audit trail of post edits. No business logic should reference any field that is not defined in the actual Prisma schema; only the documented fields are included in behavior, validation, and return types.","summary":"Fetch a specific post snapshot by id (discussion_board_post_snapshots table).","parameters":[{"name":"id","description":"Unique identifier of the discussion board post snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Post snapshot details from the discussion_board_post_snapshots table.","typeName":"IDiscussionBoardPostSnapshot"},"authorizationRole":null,"name":"at","path":"/discussion_board/postSnapshots/{id}","method":"get"},{"specification":"Search and filter discussion board comments across all posts. This endpoint implements complex comment retrieval logic, optionally including pagination, searching, or filtering, according to properties exposed in the discussion_board_comments table. Only schema-defined fields are processed, and no non-existent fields (such as 'deleted_at') are referenced in logic or queries.","description":"Retrieves a paginated list of comments from the discussion_board_comments table. Supports complex queries such as text search on the 'body' field, filtering by discussion_board_post_id or author_member_id, and filtering on is_deleted, created_at, or updated_at. Ensures that only actual schema fields are considered for search, sorting, and filtering. Results may be consumed by admins, moderators, or public threads (depending on permission). No non-existent or inferred columns are referenced or returned. The requestBody defines allowed search filters only for real schema fields. Used in moderation views, thread rendering, or comment search by end-users.","summary":"List/comments with search, filter, or pagination (discussion_board_comments table).","parameters":[],"requestBody":{"description":"Comment search/filter criteria for discussion_board_comments table fields only.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated result of discussion_board_comments records.","typeName":"IPageDiscussionBoardComment"},"authorizationRole":null,"name":"index","path":"/discussion_board/comments","method":"patch"},{"specification":"Retrieves a specific discussion board comment by its unique id. Intended for reading a comment's details including thread nesting, author, timestamps, and soft-deletion status. Aligns with the structure of the discussion_board_comments table. Only schema-defined fields and direct relationships are referenced.","description":"Fetches a single comment from the discussion_board_comments table using its id (UUID). Returns id, discussion_board_post_id, author_member_id, parent_id (for threading), body, is_deleted, created_at, and updated_at. Exposes the full thread position and author identity for contextual display or moderator review. Does not leak or reference any field that is not present in the schema. Supports both general thread reading and moderation capabilities, while enforcing that all logic references only actual table columns.","summary":"Retrieve a specific comment by id (discussion_board_comments table).","parameters":[{"name":"id","description":"Unique identifier of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Discussion board comment details for the specified id.","typeName":"IDiscussionBoardComment"},"authorizationRole":null,"name":"at","path":"/discussion_board/comments/{id}","method":"get"},{"specification":"Creates a new comment by the authenticated user on a discussion board post, as per the discussion_board_comments table. Strictly enforces creation logic referencing only schema fields. Suitable for members, moderators, or admins who can comment, and ensures compliance with RBAC and permission checks (handled at controller/service).","description":"Adds a new comment under a post by creating a record in the discussion_board_comments table. Accepted fields are: discussion_board_post_id (target post), author_member_id (auto-resolved from authenticated user), parent_id (for threaded/nested comments, optional), body (comment text), and is_deleted (should be set false on creation). Fields such as created_at and updated_at are set by the system. The operation creates only allowed fields as per the schema and does not invent any fields not present in the model. Used for replying to posts or other comments; logic assumes permissions already validated upstream.","summary":"Create a new comment as the authenticated user (discussion_board_comments table).","parameters":[],"requestBody":{"description":"New comment creation data (must only contain fields from schema).","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Created comment entity record.","typeName":"IDiscussionBoardComment"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/comments","method":"post"},{"specification":"Updates an existing comment owned by the authenticated user (membership validated), in the discussion_board_comments table. Accepts only updatable fields present in the schema for comments. No fields are referenced other than those defined in the schema. RBAC ensures only self-owned comments are updatable via this endpoint.","description":"Applies an update to a comment in the discussion_board_comments table owned by the current authenticated user. Allows update only to fields body (comment text) and possibly is_deleted (if supporting soft-deletion for authors, via edit). Other fields such as id, author_member_id, or created_at are immutable and will not be updated. The parent_id may also be updatable if supported by the system logic, but must exist in the schema. The update does not touch unlisted or unrelated fields, and all validation is strictly schema-based. Authorization ensures only the comment's author performs this mutation.","summary":"Update own comment (discussion_board_comments table).","parameters":[{"name":"id","description":"Unique identifier of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields of the comment allowed to be updated. Only schema-defined fields accepted.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated discussion board comment entity.","typeName":"IDiscussionBoardComment"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/comments/{id}","method":"put"},{"specification":"(Hard Delete) Removes an existing comment owned by the authenticated user. As there is no 'deleted_at' or 'deleted_by' field in the Prisma schema, this operation HARD DELETES the comment, permanently removing it from the database table. It will not perform a soft delete. Only schema confirmation is used for logic and description.","description":"Deletes a comment from the discussion_board_comments table by its id, but only if the comment is owned by the authenticated user and RBAC rules validate ownership. As there is no support for soft-deletion (no deleted_at, is_deleted editable on delete), this operation physically removes the row and all related records (via cascades if defined). The action is irreversible. All business logic is restricted to fields and behaviors actually present in the schema. Used for user-requested comment deletion in compliance with system hard-deletion rules.","summary":"Hard-delete own comment (discussion_board_comments table, no soft delete).","parameters":[{"name":"id","description":"Unique identifier of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/comments/{id}","method":"delete"},{"specification":"Lists or searches post attachments in the discussion_board_post_attachments table. The search, filtering, and sorting can only be based on schema-defined fields such as discussion_board_post_id, uploader_member_id, file_name, mime_type, is_deleted, created_at, etc. All filtering, logic, and results adhere strictly to real schema fields.","description":"Retrieves a paginated/sorted list of post attachments from the discussion_board_post_attachments table, supporting filters like post id, uploader, file type, name, or soft-deletion status. Supports complex search via requestBody criteria referencing only schema fields; does not reference or rely on any non-existent or 'virtual' columns. Useful for moderators/admins searching attachments for moderation, or for user file management. Exposes only valid business logic for file records as per the Prisma schema.","summary":"List/search post attachments (discussion_board_post_attachments table).","parameters":[],"requestBody":{"description":"Attachment search/filter criteria, only for schema fields.","typeName":"IDiscussionBoardPostAttachment.IRequest"},"responseBody":{"description":"Paginated list of discussion_board_post_attachments records.","typeName":"IPageDiscussionBoardPostAttachment"},"authorizationRole":null,"name":"index","path":"/discussion_board/postAttachments","method":"patch"},{"specification":"Retrieves a specific post attachment by id from the discussion_board_post_attachments table. The id must match an actual schema field. Only documented fields are retrieved in the response. This operation may be used for download or details view in both user and moderator contexts.","description":"Fetches a post attachment record with all its fields by id, including id, discussion_board_post_id, uploader_member_id, file_uri, file_name, file_size, mime_type, is_deleted, and created_at. Because is_deleted is implemented in the schema, this enables both soft-deleted and normal records to be queried and displayed for audit/history. No non-existent field is referenced or exposed. Suitable for moderators, attachment audits, or user download actions. Business logic and validation only reference schema-documented columns.","summary":"Retrieve a specific post attachment by id (discussion_board_post_attachments table).","parameters":[{"name":"id","description":"Unique identifier of the post attachment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post attachment metadata.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRole":null,"name":"at","path":"/discussion_board/postAttachments/{id}","method":"get"},{"specification":"Creates a new post attachment by the authenticated user and stores the file metadata in the discussion_board_post_attachments table. Accepts only creation fields defined in the schema. The endpoint ensures permission enforcement, storage quota, and validation strictly according to schema.","description":"Uploads and registers a new attachment for a post as the logged-in user. Accepted input fields are: discussion_board_post_id (target post), uploader_member_id (derived from current user), file_uri (storage URI of attachment), file_name (display label), file_size (bytes), mime_type, is_deleted (should be set false on creation), and created_at (system-generated). Input must reference only fields present in the Prisma schema. The operation does NOT use or invent any fields unauthorised by schema definition. Used by members, moderators, or admins to add files/images/media to discussion board posts. RBAC and validation are handled upstream.","summary":"Create a new post attachment as the authenticated user (discussion_board_post_attachments table).","parameters":[],"requestBody":{"description":"Schema-compliant metadata for the new post attachment upload.","typeName":"IDiscussionBoardPostAttachment.ICreate"},"responseBody":{"description":"The created post attachment metadata record.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/postAttachments","method":"post"},{"specification":"Updates an existing post attachment belonging to the authenticated user. Only updatable fields present in discussion_board_post_attachments are allowed for update. Ensures all update logic references strictly the schema's allowed fields. The endpoint is protected so that only the owning member can update their attachment.","description":"Updates one or more fields in a post attachment owned by the authenticated member (controlled via RBAC at the controller/service level). Only fields as defined in the schema are allowed for updates, e.g., file_name, mime_type, is_deleted. Fields such as id, discussion_board_post_id, uploader_member_id, and created_at are immutable and not modifiable. Supports updating file metadata or soft-declaration of deletion for own files. Operation is strictly limited to schema-defined fields. Used for user-driven file management or soft-removal request.","summary":"Update own post attachment (discussion_board_post_attachments table).","parameters":[{"name":"id","description":"Unique identifier of the post attachment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Schema-compliant update data; only allowed fields are modifiable.","typeName":"IDiscussionBoardPostAttachment.IUpdate"},"responseBody":{"description":"Updated post attachment metadata record.","typeName":"IDiscussionBoardPostAttachment"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/postAttachments/{id}","method":"put"},{"specification":"Deletes (soft-delete) an attachment owned by the authenticated user, using the is_deleted field defined in the discussion_board_post_attachments table. Because the schema contains is_deleted but no deleted_at, deletion action sets is_deleted to true without removing the physical record (soft delete). Only references actual fields in the schema. Hard deletion (physical row removal) is not supported by schema.","description":"Marks an attachment as deleted by setting is_deleted field to true, if (and only if) the file attachment is owned by the requesting authenticated user. All other data remains, and the record is NOT physically removed. This allows for audit/logging of file deletions and supports moderation requirements for viewing removed files. This is only possible because is_deleted exists in the schema. No field outside the schema is referenced or modified during the delete action. Used for user-requested removal of previously uploaded files, matching business logic requirements for soft deletion and auditability.","summary":"Soft-delete own post attachment (discussion_board_post_attachments table, uses is_deleted).","parameters":[{"name":"id","description":"Unique identifier of the post attachment to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/postAttachments/{id}","method":"delete"},{"specification":"Lists or searches post likes (upvotes/downvotes) according to the discussion_board_post_likes table. Supports pagination, filtering, and search capabilities only for actual schema fields. Fields supported are discussion_board_post_id, author_member_id, is_like, and created_at. Strictly avoids referencing non-existing properties. Intended for analytics, audit, or per-post feedback summaries.","description":"Retrieves a list or paginated view of records from the discussion_board_post_likes table, supporting query by post, user, like/dislike flag, and timestamp. Front-end clients or backend analytics modules may use this endpoint to present engagement data, per-user voting records, or general statistics. Input and output strictly reference allowed schema properties; no hidden or virtual field logic is present. Security and access handled in controller/service layer according to RBAC and platform policies.","summary":"List/search post like records (discussion_board_post_likes table).","parameters":[],"requestBody":{"description":"Pagination and filter/search criteria for post likes (allowed schema fields only).","typeName":"IDiscussionBoardPostLike.IRequest"},"responseBody":{"description":"Paginated list of post like records matching criteria.","typeName":"IPageDiscussionBoardPostLike"},"authorizationRole":null,"name":"index","path":"/discussion_board/postLikes","method":"patch"},{"specification":"Retrieve a specific discussion board post like/dislike entry by unique ID. This operation fetches a single record from the discussion_board_post_likes table by its primary key (id). All fields in the response (id, discussion_board_post_id, author_member_id, is_like, created_at) must directly correspond to the schema. No additional fields (e.g., deleted_at, created_by) are available. This operation is read-only and should not reveal information about the member unless permissions are met. Use for audit, UI feedback, or moderation purposes.","description":"This operation returns the details of a single post like/dislike as stored in the discussion_board_post_likes table. Each like/dislike is uniquely identified by its UUID primary key. The returned object includes the ID, the post being liked/disliked, the author member ID, a boolean indicating whether it is a like (true) or dislike (false), and the timestamp it was created. Only the fields defined in the schema (id, discussion_board_post_id, author_member_id, is_like, created_at) are included in the response. This endpoint enables clients or moderation systems to display, audit, or validate individual feedback actions given by users. If the like/dislike with the provided ID does not exist, an appropriate error is returned. Permissions may restrict which users can access this data (e.g., only likes/dislikes on accessible posts).","summary":"Fetch a single post like/dislike record from discussion_board_post_likes by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) for the post like/dislike record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single discussion_board_post_likes entity with its fields (id, discussion_board_post_id, author_member_id, is_like, created_at).","typeName":"IDiscussionBoardPostLike"},"authorizationRole":null,"name":"at","path":"/discussion_board/postLikes/{id}","method":"get"},{"specification":"Create a like or dislike entry for a post for the authenticated user. This endpoint inserts a new record into discussion_board_post_likes, recording whether the user liked or disliked a given post. It requires the post's ID, the user's member ID (resolved from authentication context), the is_like boolean indicating like/dislike, and strictly adheres to the schema (no deleted_at/created_by fields).","description":"Creates a like or dislike entry for a post on behalf of the currently authenticated member. The request body specifies the ID of the target post, the boolean is_like flag (true for like, false for dislike), and the system infers the acting user's member ID from authentication. Only these fields are required; others are filled by the backend as per schema. If the user has already liked/disliked the post, this may return an error (unique constraint: post+user). The response includes the full created entity (id, discussion_board_post_id, author_member_id, is_like, created_at). No deleted_at/created_by fields are included or supported.","summary":"Create a like/dislike record on a post for the current user (discussion_board_post_likes)","parameters":[],"requestBody":{"description":"Details for creating a post like/dislike entry (post ID, is_like flag).","typeName":"IDiscussionBoardPostLike.ICreate"},"responseBody":{"description":"The created post like/dislike record as stored in discussion_board_post_likes.","typeName":"IDiscussionBoardPostLike"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/postLikes","method":"post"},{"specification":"Update an existing post like/dislike entry for the authenticated user. This operation allows the user to modify their like/dislike (e.g., switch from like to dislike) on a given post, identified by the record's id. It updates the is_like field and updates the created_at if needed (per schema), with no support for deleted_at or similar fields.","description":"Enables a member to update the type (like/dislike) for a post they have previously reacted to by targeting the record's unique ID. The request body includes the updated is_like boolean, and the backend ensures ownership via authentication. According to the schema, only the is_like flag can be changed; no other fields like deleted_at/created_by can be referenced. An error is returned if the provided ID does not belong to the currently authenticated member. Response returns the updated like/dislike entry with all its schema fields (id, discussion_board_post_id, author_member_id, is_like, created_at). Audit logs should be maintained via the action_histories table.","summary":"Update an existing post like/dislike record for the current user (discussion_board_post_likes).","parameters":[{"name":"id","description":"Unique identifier (UUID) of the like/dislike record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for a post like/dislike entry (is_like only).","typeName":"IDiscussionBoardPostLike.IUpdate"},"responseBody":{"description":"The updated post like/dislike entry as stored in discussion_board_post_likes.","typeName":"IDiscussionBoardPostLike"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/postLikes/{id}","method":"put"},{"specification":"Delete a post like/dislike record for the authenticated user, performing a hard delete. The discussion_board_post_likes table does NOT contain a soft-delete field, so the entry is permanently removed by this operation. The deletion is only allowed if the like/dislike belongs to the acting user (ownership enforced via authentication).","description":"Removes an existing like/dislike record from discussion_board_post_likes for the current member user. Since there is no soft-deletion field (e.g., is_deleted or deleted_at) in the schema, this action immediately and irreversibly deletes the row. Users can only delete their own like/dislike entries (authorization enforced). If the record does not belong to the user or does not exist, an appropriate error is returned. This endpoint should be audited using the action_histories or audit_trails table as appropriate.","summary":"Delete a post like/dislike record performed by the current member (hard delete from discussion_board_post_likes).","parameters":[{"name":"id","description":"Unique identifier (UUID) for the post like/dislike record to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/postLikes/{id}","method":"delete"},{"specification":"Searches for and returns a paginated list of reports submitted to moderation in discussion_board_reports. This operation supports advanced querying, filtering by status (resolved), reporter, reported entity, reason, etc., for both user and moderator/admin roles. Returns summary details for each report, with fields listed as per the schema. No deleted_at/created_by fields are referenced; filtering is by available columns (e.g., resolved, created_at, reported_entity_type, etc.). Results can be paginated and sorted.","description":"Allows clients to search and retrieve reports made regarding inappropriate or rule-violating content on the board. Reports may be filtered by reporter (reporter_id), resolution status (resolved), reported_entity_type (post, comment, user), report reason, or timestamp ranges as per schema fields. The returned data contains summary info for each report (id, reporter_id, reason_id, reported_entity_id, reported_entity_type, description, created_at, resolved) adhering strictly to available schema columns. There are no fields such as deleted_at or created_by in this table. Pagination and sorting options should be present in the request body for large datasets.","summary":"Search and paginate over reports in discussion_board_reports with supported filters.","parameters":[],"requestBody":{"description":"Search/filter parameters for reports list: e.g. resolved status, reported_entity_type, reporter_id, reason_id, created_at paging.","typeName":"IDiscussionBoardReport.IRequest"},"responseBody":{"description":"Paginated result of discussion_board_reports entities as summary objects.","typeName":"IPageIDiscussionBoardReport"},"authorizationRole":null,"name":"index","path":"/discussion_board/reports","method":"patch"},{"specification":"Retrieves a single report record from discussion_board_reports by its primary key id. Only schema fields are returned: id, reporter_id, reason_id, reported_entity_id, reported_entity_type, description, created_at, resolved. No additional metadata or fields are present even for moderation purposes.","description":"Returns details of a specific report referencing inappropriate or problematic content. The report is identified by its UUID primary key. The returned object includes all available schema fields (id, reporter_id, reason_id, reported_entity_id, reported_entity_type, description, created_at, resolved). No soft-deletion field or extra audit metadata is available in this table. This endpoint is typically used for detailed moderation UI or audit workflows, and errors if the provided ID does not exist.","summary":"Get a single report's detail from discussion_board_reports by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) for the report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single discussion_board_reports entity by its fields.","typeName":"IDiscussionBoardReport"},"authorizationRole":null,"name":"at","path":"/discussion_board/reports/{id}","method":"get"},{"specification":"Enables a member to file a new content report in discussion_board_reports. The request body requires valid reporter, reason, entity id/type, and optional description. Only the fields present in the schema may be used. Records are created with resolved=false and are visible for moderation review. No deleted_at or similar audit fields are present.","description":"Allows an authenticated member to submit a new report about inappropriate or rule-violating content (post, comment, user, etc.), filling in the required fields: reporter_id (from the authenticated user), reason_id (from standardized reasons), reported_entity_id (UUID of the entity), reported_entity_type (string classification), and optional description. The timestamp is set by the backend. All other schema-defined fields are filled and returned. Reports start as unresolved (resolved=false). Only schema-approved columns are utilized; deleted_at or similar are NOT present.","summary":"Submit a new report (content flag) as a member (creates discussion_board_reports row).","parameters":[],"requestBody":{"description":"Details of the report to create—reason_id, reported_entity_id, reported_entity_type, optional description.","typeName":"IDiscussionBoardReport.ICreate"},"responseBody":{"description":"The created report object as per discussion_board_reports table.","typeName":"IDiscussionBoardReport"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/reports","method":"post"},{"specification":"Allows an admin to update report resolution status or details in discussion_board_reports. The only mutable schema field is resolved (boolean); description can also be updated. This operation is to close reports, update reason text or mark as processed. No deleted_at or created_by fields exist.","description":"Permits an admin user to update a report's status or information, typically to resolve it or add notes/details. Only the fields 'resolved' and 'description' according to schema may be modified – all updates must match allowed schema properties. This is used during moderation flows to mark a report as closed (resolved=true), to enter additional moderation explanation, etc. Actions here are auditable via moderation logs. If a non-existent report id is supplied, or the admin lacks permission, an error is returned. Other schema fields are not affected or changeable.","summary":"Update (resolve/annotate) an existing report record as admin (discussion_board_reports).","parameters":[{"name":"id","description":"Unique identifier (UUID) for the report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for a report: resolved status, optional description.","typeName":"IDiscussionBoardReport.IUpdate"},"responseBody":{"description":"The updated report entry from discussion_board_reports.","typeName":"IDiscussionBoardReport"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/reports/{id}","method":"put"},{"specification":"Deletes a report from the discussion_board_reports table by its ID as an admin. This is a hard delete as no soft-deletion field exists in the schema. This operation permanently removes the reported entity—only for use by authorized admins and fully auditable via logs.","description":"Allows a system admin to irreversibly delete a report entry from the moderation table. The operation targets a report by its unique UUID and removes the row from the database. No soft-deletion or recovery is possible, as the schema does not provide a deleted_at, is_deleted, or similar field. This action is logged to the system's audit or moderation trail per accountability guidelines. If the ID does not exist or is not allowed for the acting user, an error is raised.","summary":"Hard delete a report entity from discussion_board_reports as admin.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the report to be permanently deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/reports/{id}","method":"delete"},{"specification":"Provides a paginated, filterable list over report reasons from discussion_board_report_reasons. Clients may filter by active status and/or partial matches on reason_text. No additional fields are returned; only schema-defined fields may be used.","description":"Enables clients to search and enumerate the standardized reasons users can select when reporting content. Filters supported include reason_text (substring search for e.g. 'spam'), active status (include/exclude inactive reasons), and created_at pagination or sorting. Result entries adhere strictly to the schema: id, reason_text, active, created_at. Used in both user-facing reporting UI and moderation analytics or configuration panels. No fields such as deleted_at or created_by exist in this table.","summary":"Search and paginate report reasons in discussion_board_report_reasons.","parameters":[],"requestBody":{"description":"Supported filter parameters (e.g., active status, reason_text partial match, created_at sorting/paging).","typeName":"IDiscussionBoardReportReason.IRequest"},"responseBody":{"description":"Paginated list of report reasons as defined in discussion_board_report_reasons.","typeName":"IPageIDiscussionBoardReportReason"},"authorizationRole":null,"name":"index","path":"/discussion_board/reportReasons","method":"patch"},{"specification":"Fetches a single discussion_board_report_reasons entry by its unique ID. Returns all schema-defined fields: id, reason_text, active, and created_at. No additional fields are provided (e.g., deleted_at, created_by).","description":"Returns the details for a specific report reason, used in report submission and moderation analytics. The returned object contains all designated schema fields for discussion_board_report_reasons: id (UUID), reason_text (label describing the reason), active (boolean status indicating if selectable), and created_at (timestamp for creation of the reason entry). No soft-deletion data or metadata about creation is available; only exact schema fields are present.","summary":"Get a single report reason entry from discussion_board_report_reasons by ID.","parameters":[{"name":"id","description":"Unique identifier (UUID) for the report reason to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single report reason entity object as per schema definition.","typeName":"IDiscussionBoardReportReason"},"authorizationRole":null,"name":"at","path":"/discussion_board/reportReasons/{id}","method":"get"},{"specification":"Creates a new standardized report reason in discussion_board_report_reasons as an admin configuration operation. The request defines the reason_text (e.g., 'Spam'), whether it is active, and the backend sets ID/created_at. No other fields (e.g., deleted_at, created_by) are present. Only admin users are authorized to perform this API call.","description":"Permits a system admin to add a new reportable reason to the standardized set selectable during report submission. The request body defines reason_text (string, e.g., 'Harassment') and whether it is active (boolean); backend assigns UUID and timestamps. Schema is strictly enforced, so only id, reason_text, active, and created_at are present. No additional tracking fields (deleted_at, created_by, etc.) exist. Response returns the full record of the new reason as defined in schema.","summary":"Admin creates a new report reason to be used in discussion_board_report_reasons.","parameters":[],"requestBody":{"description":"Fields to create a new report reason entry (reason_text, active status).","typeName":"IDiscussionBoardReportReason.ICreate"},"responseBody":{"description":"The created report reason entity from discussion_board_report_reasons.","typeName":"IDiscussionBoardReportReason"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/reportReasons","method":"post"},{"specification":"Updates an existing report reason in the discussion_board_report_reasons table. This operation allows administrators to modify the reason_text, active status, or other allowed fields for report reasons that are used by users to classify the type of report they submit about content (such as 'Spam', 'Harassment', etc). It can be used for rewording reasons, toggling their active status, or correcting descriptions, but strictly references only fields present in the schema. It must NOT reference any fields not existing in the Prisma schema. This operation is for system administrators only, allowing no changes to ID or historical audit linkage. The entity has no soft delete field; thus, this is a direct update.","description":"This endpoint enables administrators to update specific fields (reason_text and active) of an existing discussion_board_report_reasons entity. The API only permits modification of fields that exist in the schema—namely, reason_text, active, and optionally updates created_at if necessary, as well as other allowed properties. There is no soft-delete mechanism for reasons; removal or disabling must use the 'active' field. All updates are tracked for audit via action logs, and attempts to update immutable fields or non-existent properties will result in an error. This maintains schema normalization and supports moderator analytics (such as updating reason explanations based on new moderation needs).","summary":"Update a report reason (discussion_board_report_reasons) record by ID as an admin.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the report reason to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated values for the report reason. Only fields that exist in the Prisma schema may be specified.","typeName":"IDiscussionBoardReportReason.IUpdate"},"responseBody":{"description":"Returns the updated report reason object, reflecting the new values (reason_text, active, created_at).","typeName":"IDiscussionBoardReportReason"},"authorizationRole":"admin","name":"update","path":"/admin/discussion_board/reportReasons/{id}","method":"put"},{"specification":"Permanently deletes a report reason from the discussion_board_report_reasons table. This operation removes the record based on its id and is intended for administrator use only. Since the entity discussion_board_report_reasons does not have a soft-delete flag (such as is_deleted or deleted_at), deletion irreversibly removes the report reason, subject to referential integrity (the reason must not be in active use by discussion_board_reports).","description":"This API endpoint allows administrators to perform a hard delete of a report reason from the discussion_board_report_reasons table, using the unique identifier (id). As there is no soft deletion, this permanently removes the entry, and attempts to delete a report reason currently in use by existing reports will result in an integrity exception. The operation is fully auditable via logs, and no user-facing fields other than id are required. Use with care, as deletion is irreversible and may affect moderation analytics/history.","summary":"Delete a report reason (discussion_board_report_reasons) by ID as an admin (hard delete).","parameters":[{"name":"id","description":"The unique identifier (UUID) of the report reason to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/admin/discussion_board/reportReasons/{id}","method":"delete"},{"specification":"Creates a new admin or moderator action on a report (discussion_board_report_actions table). This endpoint is used by administrators to log when an action such as removing content, warning a user, or resolving a report occurs as part of the moderation workflow. Only fields present in the schema may be referenced—admin_id, moderator_id, report_id, action_type, action_notes, and created_at.","description":"This admin endpoint allows administrators to create a new record in discussion_board_report_actions, tracking an action (such as content removal, warnings, etc.) associated with moderation reports. Required fields include report_id, action_type, and optionally admin_id or moderator_id (one or both may be set depending on actor). action_notes and created_at can be provided as needed. No omitted or fake fields are permitted; all relationship pointers and audit fields must match the schema.","summary":"Create a new report action (discussion_board_report_actions) as admin.","parameters":[],"requestBody":{"description":"The report action to create. Only schema fields (admin_id, moderator_id, report_id, action_type, action_notes, created_at) are permitted.","typeName":"IDiscussionBoardReportAction.ICreate"},"responseBody":{"description":"The created report action instance, including all schema-defined fields.","typeName":"IDiscussionBoardReportAction"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/reportActions","method":"post"},{"specification":"Search/filter discussion_board_report_actions (admin moderation actions on reports), with pagination, search, and sort options, returning a list of report action objects. Only schema fields can be employed in querying or filtering—do not reference any extra or virtual fields.","description":"This endpoint allows administrators to search and list report actions (discussion_board_report_actions), supporting pagination (offset/limit), sorting (by action_type, created_at, etc.), and filtering by schema fields (admin_id, moderator_id, report_id, etc.). Results are strictly limited to fields present in the schema. Used for moderator and admin dashboards to audit and review moderation actions taken on reports.","summary":"List/search report actions (discussion_board_report_actions) as admin with pagination and filters.","parameters":[],"requestBody":{"description":"Filter and search parameters for report actions; all keys must correspond to fields in discussion_board_report_actions, such as action_type or report_id.","typeName":"IDiscussionBoardReportAction.IRequest"},"responseBody":{"description":"Paginated result set of report actions, each being a report action object defined in the schema.","typeName":"IPageIDiscussionBoardReportAction"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/reportActions","method":"patch"},{"specification":"Retrieve details for a single report action (discussion_board_report_actions), identified by its id. This admin-only endpoint returns all schema fields for the given report action, providing detailed audit/logging and moderation review. It must restrict output to fields that exist in the database entity.","description":"This endpoint gets a specific report action (discussion_board_report_actions) by unique ID for admin users. Returned data includes only schema-defined properties (admin_id, moderator_id, report_id, action_type, action_notes, created_at). Used for compliance, dispute review, and auditing moderation workflows.","summary":"Retrieve single report action (discussion_board_report_actions) by ID as admin.","parameters":[{"name":"id","description":"The unique identifier (UUID) for the report action to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single report action object with all schema fields.","typeName":"IDiscussionBoardReportAction"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/reportActions/{id}","method":"get"},{"specification":"Creates a moderation log entry (discussion_board_moderation_logs table) to permanently record significant admin or moderator actions for compliance and audit. Only schema fields are referenced—report_id, admin_id, moderator_id, log_type, details, created_at. Used exclusively by admin role.","description":"This endpoint allows admins to create an immutable moderation log entry. Required fields are log_type, admin_id or moderator_id (at least one of them), and optional report_id and details. created_at is set automatically or can be provided for precise sequencing. No fake or non-schema fields are permitted. This supports compliance requirements, post-hoc reviews, and appeals tracing.","summary":"Create a moderation log entry (discussion_board_moderation_logs) as admin.","parameters":[],"requestBody":{"description":"The moderation log entry to create. Must align exactly with schema fields, such as log_type, admin_id, moderator_id, details, report_id, and created_at.","typeName":"IDiscussionBoardModerationLog.ICreate"},"responseBody":{"description":"The created moderation log entry, containing all schema-defined fields.","typeName":"IDiscussionBoardModerationLog"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/moderationLogs","method":"post"},{"specification":"Search and list moderation log entries (discussion_board_moderation_logs) for auditing, compliance, and transparency. This patch operation enables admins to search by any field present in the schema—log_type, report_id, admin_id, moderator_id, details, created_at, etc.—and includes pagination and sorting per standard list patterns.","description":"This admin endpoint allows searching, paginating, and sorting moderation log records strictly by fields defined in the discussion_board_moderation_logs schema. Used in compliance dashboards, appeals tracing, and system audits. It supports offset/limit, filter by log_type or actor, and sorts by created_at, etc. Non-defined/virtual fields are not allowed. Each result in the response is a moderation log object conforming to the schema.","summary":"List/search moderation logs (discussion_board_moderation_logs) as admin with pagination, filtering, and sorting.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination parameters for moderation logs; only schema-defined keys allowed, such as log_type, admin_id, created_at, etc.","typeName":"IDiscussionBoardModerationLog.IRequest"},"responseBody":{"description":"Paginated result set of moderation logs (schema-defined objects).","typeName":"IPageIDiscussionBoardModerationLog"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/moderationLogs","method":"patch"},{"specification":"Retrieves full details for a single moderation log entry using its unique identifier (id) for audit/compliance. The data returned is strictly limited to fields present in the discussion_board_moderation_logs table.","description":"This operation enables admin users to view a single moderation log entry (discussion_board_moderation_logs) by id, returning all schema-compliant fields such as log_type, admin_id, moderator_id, details, created_at, and any linked report_id. Used for detailed auditing and compliance checks. Any referenced fields not present in schema are not returned.","summary":"Get moderation log entry (discussion_board_moderation_logs) by ID as admin.","parameters":[{"name":"id","description":"The unique identifier (UUID) of the moderation log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The moderation log entry object (all schema fields populated).","typeName":"IDiscussionBoardModerationLog"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/moderationLogs/{id}","method":"get"},{"specification":"Creates a flagged content record (discussion_board_flagged_content table) for moderation teams to track items automatically or manually flagged for review. Fields include flagged_by_admin_id, flagged_by_moderator_id, flagged_entity_id, flagged_entity_type, flag_type, reason, cleared, and created_at. Admin use only.","description":"This admin endpoint allows the creation of a flagged content record solely using fields permitted by schema: flagged_by_admin_id, flagged_by_moderator_id, flagged_entity_id, flagged_entity_type, flag_type, reason, cleared, created_at. No soft delete or non-existent fields are used. Used for monitoring items that require extra attention before a formal report is submitted. This operation supports manual and automated moderation workflows.","summary":"Create a flagged content record (discussion_board_flagged_content) as admin.","parameters":[],"requestBody":{"description":"The flagged content data to record for moderation tracking; every key corresponds to a schema field.","typeName":"IDiscussionBoardFlaggedContent.ICreate"},"responseBody":{"description":"The flagged content record representing the item flagged for review.","typeName":"IDiscussionBoardFlaggedContent"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/flaggedContent","method":"post"},{"specification":"Retrieves a paginated, filterable list of flagged content records (discussion_board_flagged_content) for admin review. Supports filtering and sorting using only fields defined in schema, such as flagged_entity_type, cleared, created_at, flagged_by_admin_id, flagged_by_moderator_id, etc.","description":"This endpoint is used by admins to list, filter, and sort flagged contents awaiting moderation. Standard pagination (offset/limit), filter by any allowable fields (such as flagged_entity_type, cleared, flagged_by_admin_id, flagged_by_moderator_id), and sorts are provided. Returns a paginated set of flagged content records, all fields confined to those defined in the table. Used for moderation dashboards and compliance monitoring.","summary":"List/search flagged content (discussion_board_flagged_content) as admin, with pagination and filters.","parameters":[],"requestBody":{"description":"Search/filter and pagination parameters, strictly matching schema keys only.","typeName":"IDiscussionBoardFlaggedContent.IRequest"},"responseBody":{"description":"Paginated flagged content records (all schema fields).","typeName":"IPageIDiscussionBoardFlaggedContent"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/flaggedContent","method":"patch"},{"specification":"Retrieves a single flagged content record (discussion_board_flagged_content) by its unique id for admin inspection. Output strictly follows field definitions from the database model.","description":"Get a specific flagged content entity (discussion_board_flagged_content) by id for admin review. The response provides all defined schema fields; non-schema properties are never included.","summary":"Retrieve flagged content (discussion_board_flagged_content) by ID as admin.","parameters":[{"name":"id","description":"The UUID of the flagged content record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The flagged content entity matching the id (all schema fields).","typeName":"IDiscussionBoardFlaggedContent"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/flaggedContent/{id}","method":"get"},{"specification":"Returns a paginated, filterable list of notifications (discussion_board_notifications) for the authenticated user (member, moderator, or admin). Allows filtering and sorting only by fields present in the schema (such as is_read, delivered_at, read_at, type, and content); no field outside of the schema may be used.","description":"This operation provides the authenticated user with their notification inbox. It supports searching/filtering by is_read status, notification type, content keywords, delivered_at, or read_at. Pagination and sorting are available. Returned fields include only those actual columns on the discussion_board_notifications table. The endpoint is public in path, but requires user authentication to ensure only the correct user's notifications are visible.","summary":"Get a paginated/filterable list of notifications (discussion_board_notifications) for the authenticated user.","parameters":[],"requestBody":{"description":"Search and pagination criteria; all keys must align with schema columns, e.g., is_read, type, delivered_at, etc.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated notification objects, strictly using table-defined fields.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRole":"member","name":"index","path":"/discussion_board/notifications","method":"patch"},{"specification":"Get a single notification by its ID from the discussion_board_notifications table. The ID must correspond to a valid notification (UUID). Response will include all available fields for a notification: id, recipient_user_id, type, content, is_read, delivered_at, and optionally read_at. This endpoint enables users or system roles to fetch all details of a specific notification for auditing or display purposes.","description":"This API operation retrieves a single notification by its unique ID from the discussion_board_notifications table. The notification contains information about the recipient_user_id (who received it), notification type (such as 'new_reply', 'report_update', or 'moderator_action'), the notification content (message body), read status (is_read), when it was delivered (delivered_at), and, if applicable, when it was read (read_at).\n\nOnly fields that exist in the Prisma schema are returned. If the ID does not exist, an appropriate 404 or error response should be returned. No fields like 'deleted_at' or 'created_by' are present or referenced, per schema. This function is typically used by users viewing an individual notification or by staff for audit purposes.","summary":"Retrieve a notification by ID from discussion_board_notifications table.","parameters":[{"name":"id","description":"ID of the notification to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification details as stored in discussion_board_notifications table.","typeName":"IDiscussionBoardNotification"},"authorizationRole":null,"name":"at","path":"/discussion_board/notifications/{id}","method":"get"},{"specification":"Create a new notification entry for the authenticated user in the discussion_board_notifications table. Required properties: recipient_user_id (UUID of the authenticated user or member), notification type, content, delivered_at, and is_read flag. Optional: read_at may be null. Used when the system or other users send notifications to members.","description":"This API operation allows an authenticated user (themselves) or the system to create a new notification in the discussion_board_notifications table. Every notification must have a recipient_user_id corresponding to the member/role, a type (such as 'new_reply', 'report_update'), content (message string), and delivered_at timestamp. The is_read flag indicates whether the notification has been seen by the user at the time of creation (typically false on create). Optionally, read_at may be null until the notification is marked as read. No fields like 'created_by', 'deleted_at', or 'updated_by' are included, per schema. If the record is created successfully, the full notification record is returned.","summary":"Create a new notification for the authenticated user in discussion_board_notifications.","parameters":[],"requestBody":{"description":"Notification creation info following discussion_board_notifications schema.","typeName":"IDiscussionBoardNotification.ICreate"},"responseBody":{"description":"New notification record as stored in discussion_board_notifications table.","typeName":"IDiscussionBoardNotification"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/notifications","method":"post"},{"specification":"Update an existing notification entry for the authenticated user in the discussion_board_notifications table. Allows updating only permissible fields such as is_read status and optionally read_at (timestamp). The ID must correspond to an existing notification for the user.","description":"This API operation lets an authenticated user update select fields of their own notification, as recorded in the discussion_board_notifications table. Updatable fields are is_read (mark as read/unread) and optionally read_at timestamp. Only allowed fields which exist in the schema can be changed. No fields like 'deleted_at', 'updated_by' are present or handled. Attempting to update non-existent or unauthorized notifications should yield an error. Returns the updated notification record.","summary":"Update a notification for the authenticated user.","parameters":[{"name":"id","description":"ID of the notification to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update (primarily is_read and read_at) following schema.","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"The updated notification record.","typeName":"IDiscussionBoardNotification"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/notifications/{id}","method":"put"},{"specification":"Delete a notification by ID for the authenticated user from the discussion_board_notifications table. As there is no soft delete indicator for notifications, this operation performs a hard delete (permanently removes the record).","description":"This API operation deletes a notification for the authenticated user by its ID from the discussion_board_notifications table. Because there is no is_deleted or deleted_at field in the notification schema, the operation removes the record permanently (hard delete). Attempting to delete a notification that does not exist or does not belong to the authenticated user should result in an error or 404 response. The operation should confirm successful deletion or indicate failure appropriately.","summary":"Permanently delete a notification for the authenticated user.","parameters":[{"name":"id","description":"ID of the notification to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/notifications/{id}","method":"delete"},{"specification":"Create notification settings for the authenticated user in the discussion_board_user_notification_settings table. Required fields include user_id (UUID of authenticated member), settings flags for receive_email_notifications, receive_push_notifications, and mute_types (optional string or null).","description":"This endpoint allows an authenticated user to create a notification settings record in the discussion_board_user_notification_settings table. The settings allow the user to specify if they wish to receive email notifications, push notifications, and which notification types to mute using a comma-separated list (or null for no mutes). Each user has only one notification settings record; attempting to create more than one must be prevented according to the unique constraint on user_id. No fields like 'deleted_at', 'created_by' exist. Successful requests return the saved settings.","summary":"Create notification settings for the authenticated user.","parameters":[],"requestBody":{"description":"Notification setting creation info following schema.","typeName":"IDiscussionBoardUserNotificationSettings.ICreate"},"responseBody":{"description":"Created notification settings record.","typeName":"IDiscussionBoardUserNotificationSettings"},"authorizationRole":"member","name":"create","path":"/my/discussion_board/userNotificationSettings","method":"post"},{"specification":"Retrieve and search authenticated user's notification settings (typically only one record, by user_id) from the discussion_board_user_notification_settings table. Search supports filtering by receive_email_notifications, receive_push_notifications, and mute_types as required.","description":"This API operation retrieves (with optional filtering/search) the notification settings entry for the authenticated user from the discussion_board_user_notification_settings table. The response includes user_id (referencing the user's member record) and settings fields: receive_email_notifications, receive_push_notifications, and mute_types (nullable). As each user can have only one settings record, the result is either one or none. No fields like 'deleted_at' exist. Returns the settings, or empty if not configured yet.","summary":"Get current notification settings for the authenticated user.","parameters":[],"requestBody":{"description":"Optional search/filter fields for notification settings.","typeName":"IDiscussionBoardUserNotificationSettings.IRequest"},"responseBody":{"description":"User's notification settings record or empty if not set.","typeName":"IDiscussionBoardUserNotificationSettings"},"authorizationRole":"member","name":"index","path":"/my/discussion_board/userNotificationSettings","method":"patch"},{"specification":"Get a specific notification settings record by its ID (UUID) from the discussion_board_user_notification_settings table for the authenticated user. Returns all fields from the corresponding schema.","description":"This endpoint retrieves a user's notification settings by ID (UUID) from the discussion_board_user_notification_settings table. The record contains user_id, receive_email_notifications, receive_push_notifications, and mute_types. If the ID does not exist or does not belong to the authenticated user, a 404 or error is returned. Only fields present in the schema are referenced—no 'deleted' or 'created_by'.","summary":"Retrieve notification settings by ID for the authenticated user.","parameters":[{"name":"id","description":"ID of the notification settings record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The notification settings record for the given ID.","typeName":"IDiscussionBoardUserNotificationSettings"},"authorizationRole":"member","name":"at","path":"/my/discussion_board/userNotificationSettings/{id}","method":"get"},{"specification":"Update (edit) a notification settings record for the authenticated user by ID in the discussion_board_user_notification_settings table. Allows changing notification preferences, including receive_email_notifications, receive_push_notifications, and mute_types (nullable string). The ID must reference a valid record for the active user.","description":"This API operation updates the notification settings for the authenticated user in the discussion_board_user_notification_settings table. Editable fields include receive_email_notifications, receive_push_notifications, and mute_types. There is no field for is_deleted—update simply replaces the values for the specified fields as per the schema. Only one settings record exists per user (enforced by the schema). Attempting to update a non-existent or unauthorized record yields an error. Success returns the updated record.","summary":"Update notification settings for the authenticated user by ID.","parameters":[{"name":"id","description":"ID of the notification settings record to update (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update following schema (settings preferences).","typeName":"IDiscussionBoardUserNotificationSettings.IUpdate"},"responseBody":{"description":"The updated notification settings record.","typeName":"IDiscussionBoardUserNotificationSettings"},"authorizationRole":"member","name":"update","path":"/my/discussion_board/userNotificationSettings/{id}","method":"put"},{"specification":"Delete a notification settings record for the authenticated user by ID from the discussion_board_user_notification_settings table. As there is no soft delete field, deletion is permanent (hard delete).","description":"This endpoint deletes a notification settings record for the authenticated user in the discussion_board_user_notification_settings table by its ID. With no soft delete field, the operation removes the record permanently (hard delete). Will error if the ID does not exist or does not belong to the active user. Confirmation or error is returned, as appropriate.","summary":"Delete user's notification settings record by ID (hard delete, permanent).","parameters":[{"name":"id","description":"ID of the notification settings record to delete (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/discussion_board/userNotificationSettings/{id}","method":"delete"},{"specification":"Create a new audit trail log entry in the discussion_board_audit_trails table. Required: actor_id, action_type, target_table, target_id, details (optional), and created_at (timestamp). This endpoint should only be accessible by admin for security, auditing, and compliance purposes.","description":"This API operation allows an admin to create a new audit trail log entry in the discussion_board_audit_trails table. Each entry records which user performed the action (actor_id), what kind of action (action_type), which table/entity the action affected (target_table), the unique ID of the affected record (target_id), optional details field (context description), and the timestamp of creation (created_at). There are no soft/hard delete fields—entries are immutable by schema. This endpoint enforces traceable and auditable change logging for key system events by admin.","summary":"Admin: create an audit trail entry in discussion_board_audit_trails.","parameters":[],"requestBody":{"description":"Information to create audit trail log per schema.","typeName":"IDiscussionBoardAuditTrail.ICreate"},"responseBody":{"description":"Created audit trail entry.","typeName":"IDiscussionBoardAuditTrail"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/auditTrails","method":"post"},{"specification":"Retrieve (with optional search/filter) multiple audit trail log entries from the discussion_board_audit_trails table, accessible only to admin role. Supports pagination, filtering, and ordering as needed for reviewing system actions and user accountability logs.","description":"This API operation allows admin users to list, search, and filter audit trail entries from the discussion_board_audit_trails table. Filters may include actor_id, action_type, target_table, target_id, date ranges, and details string. The response includes all available columns: id, actor_id, action_type, target_table, target_id, details, created_at. There are no soft/hard delete or status fields. If pagination is implemented, the request uses the appropriate fields per schema. This audits, reviews, or investigates activities for security/compliance.","summary":"Admin: search and list audit trail log entries.","parameters":[],"requestBody":{"description":"Query/search parameters for audit trail records.","typeName":"IDiscussionBoardAuditTrail.IRequest"},"responseBody":{"description":"List of audit trail entries matching the search parameters.","typeName":"IPageIDiscussionBoardAuditTrail"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/auditTrails","method":"patch"},{"specification":"Get a single audit trail entry by its ID from the discussion_board_audit_trails table. Admin-only. Returns full details as stored in schema. No soft/hard delete fields are present—record is immutable and always returned if it exists.","description":"This API operation allows an admin to view a single audit trail entry by its unique ID, per record in the discussion_board_audit_trails table. Provides all fields: id, actor_id, action_type, target_table, target_id, details, created_at. No fields like deleted_at or created_by exist per Prisma schema—it strictly matches schema contents. If record does not exist, returns 404 or error.","summary":"Admin: retrieve audit trail entry by ID.","parameters":[{"name":"id","description":"ID of the audit trail record to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single audit trail entry with all fields.","typeName":"IDiscussionBoardAuditTrail"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/auditTrails/{id}","method":"get"},{"specification":"Create a new action history record for audit/behavior analytics in the discussion board. This operation allows an admin to log a user-level action, such as a moderation intervention, user behavior, or significant non-sensitive contribution event. It supports platform transparency and enables future analytics of moderator/admin/member activity. This endpoint must use only the fields defined in the 'discussion_board_action_histories' table (such as id, actor_id, action_type, target_table, target_id, summary, occurred_at), and MUST NOT reference non-existent fields. Each action must be atomic and linked to the user profile and the affected entity.","description":"This API operation allows an administrator to record a new action history entry within the discussion board system. The purpose is to create a chronological, user-level log representing non-sensitive actions, supporting analytics, usability tracking, and dispute resolution. The payload must only reference fields present in the Prisma schema: id (auto-generated), actor_id (user profile ID of initiator), action_type (nature of user action, e.g., 'post_created'), target_table (the logical DB entity affected), target_id (UUID of the target record), summary (optional brief text), and occurred_at (timestamp).\n\nSecurity: Only admin users are permitted to call this endpoint. The operation must not permit fields not listed in the Prisma schema—DO NOT reference or invent properties such as deleted_at or updated_by. If a request is missing a required field, the API must reject the request.\n\nBusiness logic: Each action must be atomic (one entry per real-world event) and auditable, supporting later analysis. This endpoint is part of a comprehensive logging and analytics suite for system administrators. No soft or hard delete applies to this entity. Related endpoints include PATCH for search and GET for details.","summary":"Create a discussion_board_action_histories entry (admin only).","parameters":[],"requestBody":{"description":"Information required to create a new action history record. All fields must exist in the Prisma schema.","typeName":"Idiscussion_board_action_histories.ICreate"},"responseBody":{"description":"Action history record as created, matching the Prisma schema fields.","typeName":"Idiscussion_board_action_histories"},"authorizationRole":"admin","name":"create","path":"/admin/discussion_board/actionHistories","method":"post"},{"specification":"Search or filter the action histories in the discussion board for analytics, compliance, or moderation traceability. The endpoint provides paginated, filterable access to the discussion_board_action_histories entity. Query parameters and body structure must only use fields found in the 'discussion_board_action_histories' schema, such as actor_id, action_type, target_table, target_id, summary, occurred_at. No references to non-existent fields like deleted_at or updated_by are permitted. This operation supports the operational needs of admins to monitor usage and investigate incidents. Only admin role is authorized.","description":"This API operation enables administrators to retrieve a filtered, optionally paginated list of user action histories for the discussion board. It is used to audit user contributions, moderator actions, and system behavior for compliance and analytics. Supported query parameters and filters must include only those present in the 'discussion_board_action_histories' table schema, such as actor_id (user profile responsible), action_type (e.g., 'report_submitted'), target_table (affected business object), target_id (UUID), summary (optional text), and occurred_at (timestamp range). No reference to deleted_at or similar fields should occur.\n\nThe list result may be paginated and sorted based on schema fields. Only users with the admin role may invoke this operation. This endpoint supports analytic dashboards, compliance inquiries, and dispute investigation scenarios. It complements the POST (create action log) and GET (details) endpoints for this entity.","summary":"List or search discussion_board_action_histories (admin only).","parameters":[],"requestBody":{"description":"Search and pagination filter for action history records. Only fields present in the Prisma schema may be used in the filter.","typeName":"Idiscussion_board_action_histories.IRequest"},"responseBody":{"description":"Paginated/filtered list of action history records matching criteria.","typeName":"IPageIdiscussion_board_action_histories"},"authorizationRole":"admin","name":"index","path":"/admin/discussion_board/actionHistories","method":"patch"},{"specification":"Retrieve the detailed information for a single action history record for audit or compliance purposes. The endpoint returns only the fields existing on the 'discussion_board_action_histories' table. The resource is uniquely identified by its id. Only administrators can access this endpoint for full system audit traceability.","description":"This API operation allows an administrator to fetch detailed information about a specific action history entry, identified by its unique id. All fields in the response must exist within the Prisma schema for 'discussion_board_action_histories', such as id, actor_id, action_type, target_table, target_id, summary, and occurred_at. No additional or derived fields are permitted in the result.\n\nThe endpoint is authorized for admin users only, fulfilling the need for traceable system actions and incident investigation. This operation strictly forbids referencing non-existent schema fields (such as deleted_at or created_by). If the id does not exist, a suitable error is returned. This detail endpoint should be used in conjunction with the list/search (PATCH) and creation (POST) endpoints.","summary":"Retrieve details for a discussion_board_action_histories entry (admin only).","parameters":[{"name":"id","description":"ID of the action history entry to retrieve (must be a UUID as per Prisma schema PK).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the action history record as stored in the database.","typeName":"Idiscussion_board_action_histories"},"authorizationRole":"admin","name":"at","path":"/admin/discussion_board/actionHistories/{id}","method":"get"}],"components":{"schemas":{"IDiscussionBoardConfiguration.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"요청된 페이지 번호입니다. 기본값은 1입니다."},{"type":"null","description":"요청된 페이지 번호입니다. 기본값은 1입니다."}],"description":"요청된 페이지 번호입니다. 기본값은 1입니다."},"limit":{"oneOf":[{"type":"integer","description":"페이지당 반환될 레코드 수입니다. 기본값은 100입니다."},{"type":"null","description":"페이지당 반환될 레코드 수입니다. 기본값은 100입니다."}],"description":"페이지당 반환될 레코드 수입니다. 기본값은 100입니다."},"search":{"oneOf":[{"type":"string","description":"구성 key나 설명 필드에서 부분 검색을 위한 문자열입니다. 전체 설정 중에서 일부를 검색할 때 사용됩니다."},{"type":"null","description":"구성 key나 설명 필드에서 부분 검색을 위한 문자열입니다. 전체 설정 중에서 일부를 검색할 때 사용됩니다."}],"description":"구성 key나 설명 필드에서 부분 검색을 위한 문자열입니다. 전체 설정 중에서 일부를 검색할 때 사용됩니다."},"sort_field":{"oneOf":[{"type":"string","description":"정렬 기준이 되는 필드명입니다. 예: 'created_at', 'key'. 기본값은 'created_at'입니다."},{"type":"null","description":"정렬 기준이 되는 필드명입니다. 예: 'created_at', 'key'. 기본값은 'created_at'입니다."}],"description":"정렬 기준이 되는 필드명입니다. 예: 'created_at', 'key'. 기본값은 'created_at'입니다."},"sort_order":{"oneOf":[{"const":"asc","description":"정렬 방향을 지정합니다. 'asc'는 오름차순, 'desc'는 내림차순입니다. 기본값은 'desc'입니다."},{"const":"desc","description":"정렬 방향을 지정합니다. 'asc'는 오름차순, 'desc'는 내림차순입니다. 기본값은 'desc'입니다."},{"type":"null","enum":["asc","desc"],"description":"정렬 방향을 지정합니다. 'asc'는 오름차순, 'desc'는 내림차순입니다. 기본값은 'desc'입니다."}],"description":"정렬 방향을 지정합니다. 'asc'는 오름차순, 'desc'는 내림차순입니다. 기본값은 'desc'입니다."}},"description":"시스템/글로벌 설정(disccusion_board_configurations) 목록 요청 시 검색/페이징/정렬 조건을 전달하는 객체입니다.\n\n이 구조체는 운영 화면, 관리자 UI, 시스템 초기화시 조건부 조회 등에 사용되며, key나 설명으로의 부분 검색, 갯수 지정(page/limit), 정렬 기준(필드/방향)을 다양하게 조합해 활용합니다. 모든 필드는 선택 사항이며, 값을 지정하지 않으면 기본 동작으로 대치됩니다.\n\n참고: Prisma discussion_board_configurations 테이블의 시스템 설정 row 조회 조건이며, 비밀번호나 민감정보는 포함하지 않습니다.","required":[]},"IPageDiscussionBoardConfiguration":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardConfiguration"}}},"required":["pagination","data"],"description":"구성 엔트리(시스템/글로벌 설정) 목록 응답 표준. \n\npagination에는 페이지 정보가, data에는 각 설정의 상세 정보 배열이 담겨 반환됩니다. \n\nPrisma discussion_board_configurations 테이블 데이터를 페이지네이션 규격에 맞게 제공합니다.\n\n각 항목은 IDiscussionBoardConfiguration 타입에 해당하며, 검색 결과가 없을 경우 data는 빈 배열입니다."},"IDiscussionBoardConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"설정 엔트리 고유 식별자(UUID).\n\nPrisma discussion_board_configurations의 id 컬럼과 일치합니다."},"key":{"type":"string","description":"글로벌/시스템 설정명(키).\n\n예시: 'max_attachment_size', 'site_maintenance_mode', 'topic_creation_enabled'. 각 환경 내에서 유일합니다.\n\nPrisma discussion_board_configurations의 key 컬럼 설명을 참조하세요."},"value":{"type":"string","description":"구성 값(문자열).\n\n실제 설정의 값으로, 수치(문자열 변환), true/false 등 다양한 타입이 가능함. 예시: '10240', 'true', 'Welcome!'\n\nPrisma discussion_board_configurations의 value 컬럼."},"description":{"oneOf":[{"type":"string","description":"설정 항목에 대한 설명/코멘트. UI 및 관리용.\n\n예시: '첨부파일 최대 크기(바이트).', '공지로 띄우는 메시지'. 값 미지정(Null) 가능.\n\nPrisma discussion_board_configurations의 description 컬럼 설명 참고."},{"type":"null","description":"설정 항목에 대한 설명/코멘트. UI 및 관리용.\n\n예시: '첨부파일 최대 크기(바이트).', '공지로 띄우는 메시지'. 값 미지정(Null) 가능.\n\nPrisma discussion_board_configurations의 description 컬럼 설명 참고."}],"description":"설정 항목에 대한 설명/코멘트. UI 및 관리용.\n\n예시: '첨부파일 최대 크기(바이트).', '공지로 띄우는 메시지'. 값 미지정(Null) 가능.\n\nPrisma discussion_board_configurations의 description 컬럼 설명 참고."},"created_at":{"type":"string","format":"date-time","description":"구성 엔트리 생성 시각(ISO8601).\n\nPrisma discussion_board_configurations의 created_at 컬럼."},"updated_at":{"type":"string","format":"date-time","description":"마지막 업데이트 시각(ISO8601).\n\nPrisma discussion_board_configurations의 updated_at 컬럼."}},"required":["id","key","value","created_at","updated_at"],"description":"시스템 전역 설정 엔트리 객체, discussion_board_configurations 테이블 1row에 해당.\n\n각 설정은 id(고유값), key(설정/기능명), value(설정값), description(선택설명), 생성/수정타임스탬프 필드로 구성됨.\n\n설명은 상위 수준의 운영/관리 목적, 시스템 제어/UX에 활용. 민감 정보는 절대 포함하지 않음."},"IDiscussionBoardConfiguration.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"신규로 등록할 설정 키(이름).\n\n반드시 유일해야 하며, 예: 'max_attachment_size', 'is_site_open'과 같이 시스템 내 특정 기능/정책명으로 사용됨."},"value":{"type":"string","description":"설정 값(문자열, 불리언/숫자 등 변환 저장).\n\n운영시 다양한 값이 될 수 있음(예: '65536', 'true', 'Welcome to the board!')."},"description":{"oneOf":[{"type":"string","description":"설정 설명(선택). 해당 설정의 의미 또는 주석. 운영자 화면 및 문서화에 도움을 줍니다."},{"type":"null","description":"설정 설명(선택). 해당 설정의 의미 또는 주석. 운영자 화면 및 문서화에 도움을 줍니다."}],"description":"설정 설명(선택). 해당 설정의 의미 또는 주석. 운영자 화면 및 문서화에 도움을 줍니다."}},"required":["key","value"],"description":"시스템 설정 신규 생성 요청 형식. Prisma discussion_board_configurations에 row 추가시 사용.\n\n'key'와 'value' 두 필드는 필수이며, description은 선택입니다. key의 유일성은 Table 제약조건에 의해 강제됩니다. 민감정보 저장은 불가."},"IDiscussionBoardConfiguration.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"변경할 구성 값(문자열). Prisma discussion_board_configurations의 value 컬럼. 기존 값과 같은 타입(숫자,불리언,문자열 등)으로 변환하여 저장해야 함."},"description":{"oneOf":[{"type":"string","description":"설명/비고. 설정 주석, 추가 설명을 위한 필드(Null 허용)."},{"type":"null","description":"설명/비고. 설정 주석, 추가 설명을 위한 필드(Null 허용)."}],"description":"설명/비고. 설정 주석, 추가 설명을 위한 필드(Null 허용)."}},"required":["value"],"description":"구성 엔트리의 값/설명 수정 요청 객체. Prisma discussion_board_configurations 수정에 사용.\n\nkey, id 등은 수정할 수 없으며 오직 value와 description만 변경 가능합니다. value는 반드시 설정된 데이터 규격에 맞아야 하며, description은 선택 사항입니다."},"IDiscussionBoardCategory.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"요청 페이지 번호(기본 1)."},{"type":"null","description":"요청 페이지 번호(기본 1)."}],"description":"요청 페이지 번호(기본 1)."},"limit":{"oneOf":[{"type":"integer","description":"페이지당 데이터 수(기본 100)"},{"type":"null","description":"페이지당 데이터 수(기본 100)"}],"description":"페이지당 데이터 수(기본 100)"},"search":{"oneOf":[{"type":"string","description":"카테고리명, 설명에 대한 부분 문자열 검색용"},{"type":"null","description":"카테고리명, 설명에 대한 부분 문자열 검색용"}],"description":"카테고리명, 설명에 대한 부분 문자열 검색용"},"sort_field":{"oneOf":[{"type":"string","description":"정렬 기준 필드(기본 sort_order, 선택: name 등)"},{"type":"null","description":"정렬 기준 필드(기본 sort_order, 선택: name 등)"}],"description":"정렬 기준 필드(기본 sort_order, 선택: name 등)"},"sort_order":{"oneOf":[{"const":"asc","description":"정렬 방향('asc': 오름차순, 'desc': 내림차순) 기본 desc"},{"const":"desc","description":"정렬 방향('asc': 오름차순, 'desc': 내림차순) 기본 desc"},{"type":"null","enum":["asc","desc"],"description":"정렬 방향('asc': 오름차순, 'desc': 내림차순) 기본 desc"}],"description":"정렬 방향('asc': 오름차순, 'desc': 내림차순) 기본 desc"}},"description":"카테고리 목록 검색/필터링/정렬 요청 객체. Prisma discussion_board_categories를 기반으로 클라이언트 UI, 검색, 정렬에 활용됨.\n\n선택적으로 page/limit 검색, 카테고리명/설명 검색, 정렬(필드/방향)이 가능하도록 설계됨.\n\n불필요한 민감정보나 비밀번호, 권한 정보는 포함하지 않음(순수 카테고리 검색/조회 목적).","required":[]},"IPageDiscussionBoardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategory"}}},"required":["pagination","data"],"description":"카테고리 엔티티 목록 응답 표준. \n\npagination 필드에는 페이지 정보, data 필드는 카테고리 상세 배열 반환."},"IDiscussionBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"카테고리 고유 식별자(UUID). Prisma discussion_board_categories의 id 컬럼."},"code":{"type":"string","description":"카테고리 코드(식별자, 시스템상 유일, 검색/URL/권한체계 등 참조)."},"name":{"type":"string","description":"카테고리 표시 이름(UI/UX 노출용 공식명)."},"description":{"oneOf":[{"type":"string","description":"카테고리 설명, 규칙/가이드 등 UI 안내. Null 허용."},{"type":"null","description":"카테고리 설명, 규칙/가이드 등 UI 안내. Null 허용."}],"description":"카테고리 설명, 규칙/가이드 등 UI 안내. Null 허용."},"sort_order":{"type":"integer","description":"카테고리 정렬 우선순위(작을수록 위, 1=최상단)."},"is_active":{"type":"boolean","description":"활성화/비활성(삭제대신 숨김시 False)"},"created_at":{"type":"string","format":"date-time","description":"카테고리 생성시각(ISO8601)"},"updated_at":{"type":"string","format":"date-time","description":"수정시각(ISO8601)"}},"required":["id","code","name","sort_order","is_active","created_at","updated_at"],"description":"카테고리 엔티티 객체, Prisma discussion_board_categories 1row에 해당. 각 카테고리 식별 및 UI/운영 제어에 활용.\n\n비밀번호, 소유자 등 민감정보는 포함하지 않음."},"IDiscussionBoardCategory.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"신규 카테고리 코드(식별자). 시스템 및 클라이언트, URL에서 참조하며 반드시 유일해야 함."},"name":{"type":"string","description":"카테고리명(UI/UX 공식표시 사용)."},"description":{"oneOf":[{"type":"string","description":"카테고리 상세설명(옵션/null 허용)."},{"type":"null","description":"카테고리 상세설명(옵션/null 허용)."}],"description":"카테고리 상세설명(옵션/null 허용)."},"sort_order":{"type":"integer","description":"정렬 순위(1=최상단, 숫자가 작을수록 먼저 나옴)"},"is_active":{"type":"boolean","description":"활성여부. true면 사용, false면 UI/API에서 숨김/비활성"}},"required":["code","name","sort_order","is_active"],"description":"카테고리 신규 생성 요청 스키마. 코드, 이름, 정렬순위, 활성여부 필수. description은 선택."},"IDiscussionBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"수정할 카테고리 표시 이름."},"description":{"oneOf":[{"type":"string","description":"설명(필드 null 허용, 기존값 미변경시 null로 두면 됨)."},{"type":"null","description":"설명(필드 null 허용, 기존값 미변경시 null로 두면 됨)."}],"description":"설명(필드 null 허용, 기존값 미변경시 null로 두면 됨)."},"sort_order":{"type":"integer","description":"수정할 정렬 순위."},"is_active":{"type":"boolean","description":"활성/비활성 플래그 값."}},"required":["name","sort_order","is_active"],"description":"카테고리 엔티티 수정 요청 객체. 이름/설명/정렬순위/활성여부 중 일부 또는 전체 업데이트에 사용. Null은 그 필드의 미변경/삭제 처리로 적용될 수 있음."},"IDiscussionBoardCategoryPermission.ICreate":{"type":"object","properties":{"category_id":{"type":"string","format":"uuid","description":"권한설정이 적용될 카테고리의 id(uuid)."},"role_name":{"oneOf":[{"const":"admin","description":"배정할 역할명(admin/moderator/member/guest 중 하나)."},{"const":"moderator","description":"배정할 역할명(admin/moderator/member/guest 중 하나)."},{"const":"member","description":"배정할 역할명(admin/moderator/member/guest 중 하나)."},{"const":"guest","description":"배정할 역할명(admin/moderator/member/guest 중 하나)."}],"description":"배정할 역할명(admin/moderator/member/guest 중 하나)."},"can_view":{"type":"boolean","description":"해당 롤이 이 카테고리를 볼 수 있는지 여부."},"can_create_topic":{"type":"boolean","description":"해당 롤이 이 카테고리에 토픽(글)을 새로 작성 가능 여부."},"can_reply":{"type":"boolean","description":"해당 롤이 토픽 댓글(답글) 작성권한."},"can_like":{"type":"boolean","description":"해당 롤이 이 카테고리 내 글이나 댓글에 좋아요/싫어요 등 반응을 남길 수 있는지."},"can_report":{"type":"boolean","description":"해당 롤이 이 카테고리에서 신고(컨텐츠 플래그)할 수 있는 권한."}},"required":["category_id","role_name","can_view","can_create_topic","can_reply","can_like","can_report"],"description":"카테고리-롤별 권한설정 신규 등록 요청 객체. Prisma discussion_board_category_permissions에 row 추가시 사용.\n\n각 필드는 모두 필수이며, (카테고리id, 역할명)의 조합은 유일하게 동작함.\n\n민감 정보/권한승계 등은 포함하지 않음(운영자 전용 엔드포인트용)."},"IDiscussionBoardCategoryPermission":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique category permission row identifier. Reference: discussion_board_category_permissions.id."},"category_id":{"type":"string","format":"uuid","description":"UUID of the category for this permission. Reference: discussion_board_category_permissions.category_id."},"role_name":{"type":"string","description":"Role name the permission applies to (admin, moderator, member, guest). Reference: discussion_board_category_permissions.role_name."},"can_view":{"type":"boolean","description":"Whether role can view category. Reference: discussion_board_category_permissions.can_view."},"can_create_topic":{"type":"boolean","description":"Whether role can create topic in category. Reference: discussion_board_category_permissions.can_create_topic."},"can_reply":{"type":"boolean","description":"Whether role can reply in category. Reference: discussion_board_category_permissions.can_reply."},"can_like":{"type":"boolean","description":"Whether role can like/dislike in category. Reference: discussion_board_category_permissions.can_like."},"can_report":{"type":"boolean","description":"Whether role can report content in category. Reference: discussion_board_category_permissions.can_report."},"created_at":{"type":"string","format":"date-time","description":"Date/time the permission was assigned. Reference: discussion_board_category_permissions.created_at."}},"required":["id","category_id","role_name","can_view","can_create_topic","can_reply","can_like","can_report","created_at"],"description":"Entity describing a set of permissions for a board role and category. All fields map 1:1 to discussion_board_category_permissions schema."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number (1-based indexing). Indicates which page of results is being returned."},"limit":{"type":"integer","format":"uint32","default":100,"description":"Records per page being returned. Default: 100."},"records":{"type":"integer","format":"uint32","description":"Total records available for the query."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages in result set."}},"required":["current","limit","records","pages"],"description":"Page metadata for paginated result sets. Used across all paginated API responses."},"IDiscussionBoardCategoryPermission.IRequest":{"type":"object","properties":{"category_id":{"type":"string","format":"uuid","description":"Unique category ID for filtering. Optional. Reference: discussion_board_category_permissions.category_id."},"role_name":{"type":"string","description":"Role name to filter by (admin, moderator, member, guest). Optional. Reference: discussion_board_category_permissions.role_name."},"can_view":{"type":"boolean","description":"Whether to filter for permissions granting view access. Optional. Reference: discussion_board_category_permissions.can_view."},"can_create_topic":{"type":"boolean","description":"Whether to filter for topic creation permission. Optional. Reference: discussion_board_category_permissions.can_create_topic."},"can_reply":{"type":"boolean","description":"Whether to filter for reply permission. Optional. Reference: discussion_board_category_permissions.can_reply."},"can_like":{"type":"boolean","description":"Whether to filter for like/dislike permission. Optional. Reference: discussion_board_category_permissions.can_like."},"can_report":{"type":"boolean","description":"Whether to filter for permission to report content. Optional. Reference: discussion_board_category_permissions.can_report."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: page number (1-based). Optional."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: page size (max records per page). Optional."}},"description":"Request body for searching, paginating, or filtering discussion_board_category_permissions records. All properties reference fields in discussion_board_category_permissions. Used to construct RBAC and audit queries. Supports partial, multi-field, and paginated requests.","required":[]},"IPageDiscussionBoardCategoryPermission":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata: current, limit, total records, total pages."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategoryPermission"},"description":"Paginated result set of discussion board category permission entries."}},"required":["pagination","data"],"description":"Paginated result set for discussion_board_category_permissions queries. Contains pagination object and result data array."},"IDiscussionBoardCategoryPermission.IUpdate":{"type":"object","properties":{"category_id":{"type":"string","format":"uuid","description":"New category ID to associate the permission with. Optional update. Reference: discussion_board_category_permissions.category_id."},"role_name":{"type":"string","description":"New role name (admin, moderator, member, guest) for permission. Optional update. Reference: discussion_board_category_permissions.role_name."},"can_view":{"type":"boolean","description":"Permission value to allow viewing the category. Optional update."},"can_create_topic":{"type":"boolean","description":"Permission value to allow topic creation. Optional update."},"can_reply":{"type":"boolean","description":"Permission value to allow replying in the category. Optional update."},"can_like":{"type":"boolean","description":"Permission value to allow like/dislike. Optional update."},"can_report":{"type":"boolean","description":"Permission value to allow reporting content. Optional update."}},"description":"Request body for updating a category permission record in discussion_board_category_permissions. All properties are optional and directly map to columns in the schema.","required":[]},"IPageDiscussionBoardUserProfiles.IRequest":{"type":"object","properties":{"display_name":{"type":"string","description":"Filter user profiles by partial display_name (case-insensitive search). Reference: discussion_board_user_profiles.display_name."},"email":{"type":"string","format":"email","description":"Filter user profiles by exact or partial email. Reference: discussion_board_user_profiles.email."},"is_active":{"type":"boolean","description":"Filter by active/inactive profile status. Reference: discussion_board_user_profiles.is_active."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: page number (1-based). Optional."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: max number of records per page. Optional."}},"description":"Request body for listing, searching, or filtering member profiles with pagination in discussion_board_user_profiles. All properties map to schema fields.","required":[]},"IPageDiscussionBoardUserProfiles":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination data for the result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardUserProfile"},"description":"Array of user profile objects matching the filter/search parameters."}},"required":["pagination","data"],"description":"Paginated user profile result for discussion_board_user_profiles index operations. Contains pagination info and array of results."},"IDiscussionBoardUserProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key, unique user profile ID. Reference: discussion_board_user_profiles.id."},"email":{"type":"string","format":"email","description":"User's unique email address. Used for identification and registration/login. Reference: discussion_board_user_profiles.email."},"display_name":{"type":"string","description":"User's chosen display name. Shown in UI, may differ from email. Reference: discussion_board_user_profiles.display_name."},"registered_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601) when the profile was registered. Reference: discussion_board_user_profiles.registered_at."},"is_active":{"type":"boolean","description":"Profile active status. True if enabled, false if blocked or removed. Reference: discussion_board_user_profiles.is_active."}},"required":["id","email","display_name","registered_at","is_active"],"description":"User profile entity containing authentication/identity attributes. Maps directly to discussion_board_user_profiles. Sensitive or credential data is not present."},"IDiscussionBoardUserProfile.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for new user profile. Must be unique. Reference: discussion_board_user_profiles.email."},"display_name":{"type":"string","description":"Display name for the new user profile. Reference: discussion_board_user_profiles.display_name."},"registered_at":{"type":"string","format":"date-time","description":"Timestamp of profile registration (system-generated if not provided). Reference: discussion_board_user_profiles.registered_at."},"is_active":{"type":"boolean","description":"Whether the profile is enabled/active after creation. Reference: discussion_board_user_profiles.is_active."}},"required":["email","display_name","is_active"],"description":"Request body for creating a user profile admin-side. All properties map to columns in discussion_board_user_profiles. registered_at may be omitted for defaulting to now."},"IDiscussionBoardUserProfile.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"New email address for updating the user profile. Optional. Reference: discussion_board_user_profiles.email."},"display_name":{"type":"string","description":"New display name for the profile. Optional. Reference: discussion_board_user_profiles.display_name."},"registered_at":{"type":"string","format":"date-time","description":"New registration timestamp if correcting. Optional. Reference: discussion_board_user_profiles.registered_at."},"is_active":{"type":"boolean","description":"Toggle for active/inactive profile status. Optional. Reference: discussion_board_user_profiles.is_active."}},"description":"Request body for updating a user profile entity in discussion_board_user_profiles. All properties optional and map directly to schema columns.","required":[]},"IDiscussionBoardAdmin.ICreate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of user profile being assigned admin. Required. Reference: discussion_board_admins.discussion_board_user_profile_id."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp for when admin rights are assigned. Required. Reference: discussion_board_admins.assigned_at."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the admin who performs the assignment. Required. Reference: discussion_board_admins.assigned_by_user_profile_id."}},"required":["discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Request body for creating an admin assignment in discussion_board_admins. All fields directly map to the schema columns and enable audit-compliant, traceable role elevation."},"IDiscussionBoardAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique admin assignment identifier. Reference: discussion_board_admins.id."},"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID linking admin assignment to user profile. Reference: discussion_board_admins.discussion_board_user_profile_id."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when admin was assigned. Reference: discussion_board_admins.assigned_at."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp admin rights revoked, or null if active. Reference: discussion_board_admins.revoked_at."},{"type":"null"}],"description":"Timestamp admin rights revoked, or null if active. Reference: discussion_board_admins.revoked_at."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the admin who assigned this role. Reference: discussion_board_admins.assigned_by_user_profile_id."}},"required":["id","discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Admin assignment entity mapping one user to active/revoked admin rights. Maps to discussion_board_admins. Only role assignment and audit fields present."},"IPageDiscussionBoardAdmins.IRequest":{"type":"object","properties":{"assigned_at_from":{"type":"string","format":"date-time","description":"Earliest datetime for assignment search. Reference: discussion_board_admins.assigned_at."},"assigned_at_to":{"type":"string","format":"date-time","description":"Latest datetime for assignment search. Reference: discussion_board_admins.assigned_at."},"revoked_at":{"type":"string","format":"date-time","description":"Timestamp for filtering by revocation (nullable). Reference: discussion_board_admins.revoked_at."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"Filter admin assignments by assigning admin. Reference: discussion_board_admins.assigned_by_user_profile_id."},"page":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: page number (1-based). Optional."},"limit":{"type":"integer","format":"uint32","minimum":1,"description":"Pagination: max records per page. Optional."}},"description":"Request body for listing or filtering admin assignments with search parameters and pagination. All fields map to discussion_board_admins schema. For audit and management use.","required":[]},"IPageDiscussionBoardAdmins":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination data for returned result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAdmin"},"description":"Admin assignment records for the current page."}},"required":["pagination","data"],"description":"Paginated list result for admin assignments from discussion_board_admins. Used for audit/admin management."},"IDiscussionBoardAdmin.IUpdate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"Updates the linked user profile's UUID (referencing discussion_board_user_profiles.id) for this admin assignment. Used to correct relationships if needed.\n\nOriginal Prisma: Links this admin record to a specific user profile."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the admin role was assigned. Used for historical tracking and sorting.\n\nOriginal Prisma: Marked when a user becomes admin."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, the timestamp when admin status was revoked; otherwise null for currently active admins.\n\nOriginal Prisma: Marks the end of admin tenure. Null = active admin."},{"type":"null","format":"date-time","description":"If set, the timestamp when admin status was revoked; otherwise null for currently active admins.\n\nOriginal Prisma: Marks the end of admin tenure. Null = active admin."}],"description":"If set, the timestamp when admin status was revoked; otherwise null for currently active admins.\n\nOriginal Prisma: Marks the end of admin tenure. Null = active admin."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile who granted admin status. Used for auditing and change tracking.\n\nOriginal Prisma: Links to the actor performing the assignment."}},"required":["discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Structure for updating fields of an admin assignment. Used for admin role correction, revocation, or timestamp updates. Reflects normalization, auditability, and no password/security fields."},"IDiscussionBoardModerator.ICreate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile receiving moderator privileges. Must exist as foreign key to discussion_board_user_profiles.\n\nOriginal Prisma: Links moderator to user."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when moderator role is granted."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the assigning admin or moderator. Used for auditing role assignments."}},"required":["discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Used to assign moderator privileges to a user profile. Fully auditable and in line with role management requirements. No sensitive or password fields present."},"IDiscussionBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderator assignment.\n\nOriginal Prisma: Primary key."},"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile assigned as moderator.\n\nOriginal Prisma: Foreign key to user profile."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when moderator status was granted.\n\nOriginal Prisma: Role assignment audit."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when moderator privileges were revoked (null if still active).\n\nOriginal Prisma: Null means actively moderator."},{"type":"null","format":"date-time","description":"Timestamp when moderator privileges were revoked (null if still active).\n\nOriginal Prisma: Null means actively moderator."}],"description":"Timestamp when moderator privileges were revoked (null if still active).\n\nOriginal Prisma: Null means actively moderator."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user who assigned the moderator role.\n\nOriginal Prisma: Assignment actor identity."}},"required":["id","discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Data structure representing a moderator assignment entry. Contains full audit trail fields and links to both the moderator and the assigning actor."},"IDiscussionBoardModerator.IRequest":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"Filter by assigned user profile's UUID.\n\nOriginal Prisma: FK to user profiles."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"Filter assignments by the actor who assigned the moderator (admin or higher moderator).\n\nOriginal Prisma: FK to assigning member."},"assigned_at_start":{"type":"string","format":"date-time","description":"List moderator assignments starting from this date/time (inclusive).\n\nCustom filter, not in DB directly."},"assigned_at_end":{"type":"string","format":"date-time","description":"Filter assignments up to this end date/time (inclusive).\n\nCustom filter."},"is_active":{"type":"boolean","description":"If true, only include currently active moderator assignments (revoked_at == null).\n\nCustom logic."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination of search results."},"limit":{"type":"integer","minimum":1,"description":"Number of items per page."}},"description":"Filter/search and pagination parameters for querying moderator assignments, supporting all RBAC role management audit requirements. Includes foreign keys and date ranges as search filters.","required":[]},"IPageIDiscussionBoardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerator"}}},"required":["pagination","data"],"description":"A paginated list of moderator assignments, each being an IDiscussionBoardModerator record. Returns full metadata as per RBAC and role management requirements."},"IDiscussionBoardModerator.IUpdate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile assigned as moderator; correct for reassignment."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp of moderator assignment; supports correcting/retro-fit audit."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp marking moderator role as revoked (or null if retained)."},{"type":"null","format":"date-time","description":"Timestamp marking moderator role as revoked (or null if retained)."}],"description":"Timestamp marking moderator role as revoked (or null if retained)."},"assigned_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the assigning admin. For audit trails and corrections."}},"required":["discussion_board_user_profile_id","assigned_at","assigned_by_user_profile_id"],"description":"Provides fields required to update a moderator assignment (such as revocation, reassignments, or timestamp corrections). Sensitive security fields are excluded; strictly role management."},"IDiscussionBoardMember.IRequest":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"Filter by assigned user's profile ID.\n\nOriginal Prisma: FK to user profile."},"joined_at_start":{"type":"string","format":"date-time","description":"Return members joined after or at this timestamp (inclusive).\n\nCustom filter."},"joined_at_end":{"type":"string","format":"date-time","description":"Return members joined at or before this timestamp (inclusive).\n\nCustom filter."},"is_active":{"type":"boolean","description":"If true, only return members with left_at==null (present, not left).\n\nCustom logic."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination."},"limit":{"type":"integer","minimum":1,"description":"Number of items per page."}},"description":"Request object for searching/filtering board membership by user ID, join timeframe, and current status. Used for listing current/past members. Supports pagination.","required":[]},"IPageIDiscussionBoardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardMember"}}},"required":["pagination","data"],"description":"Paginated response type for board member records. Each 'data' entry is a discussion_board_members entity."},"IDiscussionBoardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID primary key for the membership record.\n\nOriginal Prisma: Uniquely identifies the member assignment."},"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"Foreign key to the user profile record this membership refers to.\n\nOriginal Prisma: Links member entity to user."},"joined_at":{"type":"string","format":"date-time","description":"The timestamp when the user became a board member.\n\nOriginal Prisma: Join date for audit/history."},"left_at":{"oneOf":[{"type":"string","format":"date-time","description":"If present, timestamp when the user left membership (null if still active).\n\nOriginal Prisma: Null = active, else indicates exit date."},{"type":"null","format":"date-time","description":"If present, timestamp when the user left membership (null if still active).\n\nOriginal Prisma: Null = active, else indicates exit date."}],"description":"If present, timestamp when the user left membership (null if still active).\n\nOriginal Prisma: Null = active, else indicates exit date."}},"required":["id","discussion_board_user_profile_id","joined_at"],"description":"Board member assignment record. Tracks start and optional exit of board participation with full relational audit."},"IDiscussionBoardMember.ICreate":{"type":"object","properties":{"discussion_board_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile to assign as a member. Must exist and be unique in this table.\n\nOriginal Prisma: Foreign key to user profile."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp of member join (set when activated).\n\nOriginal Prisma: Membership assignment date/time."}},"required":["discussion_board_user_profile_id","joined_at"],"description":"Object for creating a new board member assignment. Used in admin onboarding or join events. Fully audit-compliant."},"IDiscussionBoardMember.IUpdate":{"type":"object","properties":{"joined_at":{"type":"string","format":"date-time","description":"Change/correct the timestamp for when the user became a member. Useful for audit or migration."},"left_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of exit from membership (null means active); useful for revoking membership."},{"type":"null","format":"date-time","description":"Timestamp of exit from membership (null means active); useful for revoking membership."}],"description":"Timestamp of exit from membership (null means active); useful for revoking membership."}},"required":["joined_at"],"description":"Admin-supplied changes to join/leave times for membership assignment. No ownership or security-related data."},"IDiscussionBoardGuest.IRequest":{"type":"object","properties":{"session_id":{"type":"string","description":"Filter by guest session unique identifier (can be for analytics/session search).\n\nOriginal Prisma: session_id field."},"created_at_start":{"type":"string","format":"date-time","description":"Start timestamp (inclusive) for guest session creation filter."},"created_at_end":{"type":"string","format":"date-time","description":"End timestamp (inclusive) for guest session creation filter."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated queries."},"limit":{"type":"integer","minimum":1,"description":"Items per page."}},"description":"Request/filter object for guest session entity queries. Used for auditing, analytics, or compliance. Provides pagination support.","required":[]},"IPageIDiscussionBoardGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for this subset of guest session results. Complies with IPage standard container, following platform conventions for paginated data.\n\nReferences: 'IPage.IPagination' definition, enables caller to determine total session cardinality and available navigation."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardGuest"},"description":"The actual array of guest session records on this page. Each entry is a guest session entity following the schema for IDiscussionBoardGuest.\n\n3NF and business logic: This is distinct from registered user/member entities, containing only guest analytics and session meta."}},"required":["pagination","data"],"description":"Paginated container for guest session entity results, following IPage data structure contract.\n\nEach result page includes page info and an array of guest session (unauthenticated user) records. Used for analytics or compliance, not for author identity. Does not include personally identifiable information (PII) or business content. Maps directly to the output of search on discussion_board_guests.\n\nReferences original platform analytics and compliance requirements (system-wide guest session tracking)."},"IDiscussionBoardGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID primary key – uniquely identifies the guest session entity in the system.\n\nPrisma: discussion_board_guests.id\nThis is atomic, system-generated, and immutable."},"session_id":{"type":"string","description":"Session identifier string for guest analytics (not an email, not a login credential).\n\nPrisma: discussion_board_guests.session_id\nFunctions as the external session key for tying together analytics data. Must be unique."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp recording creation time for this guest session entry. Used for lifecycle, reporting, and compliance auditing.\n\nPrisma: discussion_board_guests.created_at"}},"required":["id","session_id","created_at"],"description":"Represents a single guest/unauthenticated user session for compliance, analytics, or ephemeral personalization use cases.\n\nDoes NOT represent a business user, member, or actor with data modification rights. 3NF: This table does not contain authentication/user profile info, only session tracking.\n\nReferences guest session, analytics, and privacy policies from requirements and DB design."},"IDiscussionBoardGuest.ICreate":{"type":"object","properties":{"session_id":{"type":"string","description":"Session identifier for this guest (see discussion_board_guests.session_id). Must be unique and securely generated. Used for platform analytics and UI personalization.\n\nDerived from system session logic or analytics process, not user input for authentication."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this guest entry is created. May be set by client or server; if not provided, defaults to 'now'.\n\nReferences: discussion_board_guests.created_at"}},"required":["session_id","created_at"],"description":"Required payload to create a new guest session entry.\n\nClients or systems should provide session_id (generated securely, not a username or email), and created_at (timestamp of session establishment).\n\nReferences guest analytics, privacy requirements, and system audit/compliance logic from requirements documentation."},"IDiscussionBoardRoleChange.ICreate":{"type":"object","properties":{"target_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile affected by the role change. Must correspond to the id of an existing discussion_board_user_profiles record.\n\nReferences: discussion_board_role_changes.target_user_profile_id. Used for RBAC, audit trail, and compliance."},"performed_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile executing the role change (admin/moderator).\n\nPrisma: discussion_board_role_changes.performed_by_user_profile_id\nEnsures system can audit 'who changed what', required by platform compliance and transparency."},"role_type":{"oneOf":[{"const":"admin","description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"},{"const":"moderator","description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"},{"const":"member","description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"},{"const":"guest","description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"}],"description":"Role which is being changed: one of 'admin', 'moderator', 'member', or 'guest'.\n\nEnforced by allowed values in schema: cannot be other types.\nReferences: discussion_board_role_changes.role_type"},"action_type":{"oneOf":[{"const":"assigned","description":"Action being recorded: either 'assigned' (role granted) or 'revoked' (role removed). Enforced by schema enum.\n\nReferences: discussion_board_role_changes.action_type, required by role audit/compliance."},{"const":"revoked","description":"Action being recorded: either 'assigned' (role granted) or 'revoked' (role removed). Enforced by schema enum.\n\nReferences: discussion_board_role_changes.action_type, required by role audit/compliance."}],"description":"Action being recorded: either 'assigned' (role granted) or 'revoked' (role removed). Enforced by schema enum.\n\nReferences: discussion_board_role_changes.action_type, required by role audit/compliance."},"timestamp":{"type":"string","format":"date-time","description":"ISO-8601 timestamp at which the role change occurred. Used for compliance, audit, and role history/review policies.\n\nPrisma: discussion_board_role_changes.timestamp"}},"required":["target_user_profile_id","performed_by_user_profile_id","role_type","action_type","timestamp"],"description":"Payload for recording a role assignment/revocation event, as per auditing and RBAC control policies.\n\nEach record links the affected user (target), actor (assigner/remover), the type of role, the change action (assign/revoke), and the exact time. Follows 3NF and platform traceability requirements. Only allowed role/action values permitted.\n\nDirectly maps to requirements for security, moderation, and user management workflow traceability."},"IDiscussionBoardRoleChange":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key; UUID that uniquely identifies this role change event.\n\nPrisma: discussion_board_role_changes.id."},"target_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile whose role is being changed. 3NF: strictly atomic.\n\nPrisma: discussion_board_role_changes.target_user_profile_id"},"performed_by_user_profile_id":{"type":"string","format":"uuid","description":"UUID of the user profile (admin/moderator) who performed this change. Maintains compliance and traceability.\n\nPrisma: discussion_board_role_changes.performed_by_user_profile_id."},"role_type":{"oneOf":[{"const":"admin","description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"},{"const":"moderator","description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"},{"const":"member","description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"},{"const":"guest","description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"}],"description":"Role assigned or revoked: allowed values are 'admin', 'moderator', 'member', 'guest'. Hard enforced by schema.\n\nPrisma: discussion_board_role_changes.role_type"},"action_type":{"oneOf":[{"const":"assigned","description":"Type of role change action, either 'assigned' (grant) or 'revoked' (remove).\n\nPrisma: discussion_board_role_changes.action_type"},{"const":"revoked","description":"Type of role change action, either 'assigned' (grant) or 'revoked' (remove).\n\nPrisma: discussion_board_role_changes.action_type"}],"description":"Type of role change action, either 'assigned' (grant) or 'revoked' (remove).\n\nPrisma: discussion_board_role_changes.action_type"},"timestamp":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of the role change event. For audit and compliance trail.\n\nPrisma: discussion_board_role_changes.timestamp."}},"required":["id","target_user_profile_id","performed_by_user_profile_id","role_type","action_type","timestamp"],"description":"Single instance of a role assignment or revocation event.\n\nMaintains complete platform audit for role changes, as mandated by compliance requirements. All fields reference the original table column commentary.\n\nNo non-enum role or action types permitted."},"IDiscussionBoardRoleChange.IRequest":{"type":"object","properties":{"role_type":{"oneOf":[{"const":"admin","description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"},{"const":"moderator","description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"},{"const":"member","description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"},{"const":"guest","description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"}],"description":"Filter: Restricts search to a specific role type. Optional, but if present must be a valid enum value.\n\nReferences: discussion_board_role_changes.role_type"},"action_type":{"oneOf":[{"const":"assigned","description":"Filter: Restricts search to a specific change action (assigned or revoked).\n\nReferences: discussion_board_role_changes.action_type"},{"const":"revoked","description":"Filter: Restricts search to a specific change action (assigned or revoked).\n\nReferences: discussion_board_role_changes.action_type"}],"description":"Filter: Restricts search to a specific change action (assigned or revoked).\n\nReferences: discussion_board_role_changes.action_type"},"target_user_profile_id":{"type":"string","format":"uuid","description":"Filter: Search for changes affecting a particular user (by profile UUID). Optional field.\n\nReferences: discussion_board_role_changes.target_user_profile_id"},"performed_by_user_profile_id":{"type":"string","format":"uuid","description":"Filter: Return only changes performed by this admin/moderator profile (UUID).\n\nReferences: discussion_board_role_changes.performed_by_user_profile_id"},"timestamp_from":{"type":"string","format":"date-time","description":"Filter: Restrict results to events after (or at) a particular UTC timestamp. Optional.\n\nNon-schema: Used as a search window for compliance or audit dashboards."},"timestamp_to":{"type":"string","format":"date-time","description":"Filter: Restrict results to events before (or at) a particular UTC timestamp. Optional.\n\nNon-schema: Used as a search window for audit analytics."},"page":{"type":"integer","format":"uint32","description":"Page number (for pagination requests). Defaults to 1 if absent."},"limit":{"type":"integer","format":"uint32","description":"How many results per page. Optional; capped by server – default is 100."}},"required":[],"description":"Request object for filtering/searching role change events. All fields optional; valid queries may combine multiple filters for targeted search.\n\nThis request complies with IPage IRequest contract and platform filter/search conventions.\n\nReferences original audit/search requirements and Prisma schema field commentary."},"IPageIDiscussionBoardRoleChange":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Information about pagination of this results set (page, limit, total, etc.)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardRoleChange"},"description":"Array of role change event objects, each fully typed as IDiscussionBoardRoleChange."}},"required":["pagination","data"],"description":"Paginated results for role change event queries.\n\nContainer type for lists of IDiscussionBoardRoleChange values, supporting full admin audits, RBAC/role dashboards, and compliance investigation, as defined in requirements. Each data[] is a full historic event instance. Maps to IPage<T> pattern for consistency."},"IDiscussionBoardTopic.IRequest":{"type":"object","properties":{"keywords":{"type":"string","description":"Search keywords for topic title/description. Optional; uses full text index.\n\nReferences: discussion_board_topics.title (gin_trgm_ops), discussion_board_topics.description (gin_trgm_ops)"},"discussion_board_category_id":{"type":"string","format":"uuid","description":"Filter: Only return topics belonging to this category (UUID).\n\nReferences: discussion_board_topics.discussion_board_category_id"},"status":{"type":"string","description":"Filter: Only return topics matching a particular status value (case-sensitive string).\n\nReferences: discussion_board_topics.status. No hardcoded enums, see business logic for allowed values."},"pinned":{"type":"boolean","description":"Filter: Only return topics pinned (true) or unpinned (false). Non-schema logic; inferred from 'pinned_at' being set."},"closed":{"type":"boolean","description":"Filter: Only return topics closed (true) or open (false). Non-schema logic; inferred from 'closed_at' being set."},"page":{"type":"integer","format":"uint32","description":"Pagination: page number (starts at 1)."},"limit":{"type":"integer","format":"uint32","description":"Pagination: number of items per page. Default is 100, capped by system."}},"required":[],"description":"Request object for searching/filtering topic thread records. Complies with IPage filtering convention and supports efficient server-side search.\n\nAll properties are optional; combining multiple filter keys narrows the scope of the search. Does not create or mutate topics. Strictly references search-only use cases as described in requirements and schema commentary."},"IPageIDiscussionBoardTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging info for this result subset – page number, limit, total record count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTopic"},"description":"The array of data items returned for this result page. Each entry is a discussion topic entity (IDiscussionBoardTopic)."}},"required":["pagination","data"],"description":"Paginated result set/response for a topic search. Follows IPage<T> convention for platform-wide consistency.\n\nSupports client-side rendering and admin dashboards for topic lists (with filter, sort, and navigation controls per requirements). Data array always contains fully normalized topic entities."},"IDiscussionBoardTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this topic (UUID).\n\nPrisma: discussion_board_topics.id"},"discussion_board_category_id":{"type":"string","format":"uuid","description":"UUID of the category to which this topic belongs.\n\nPrisma: discussion_board_topics.discussion_board_category_id"},"created_by_member_id":{"type":"string","format":"uuid","description":"UUID of member who created this topic. 3NF: strictly atomic link.\n\nPrisma: discussion_board_topics.created_by_member_id"},"last_edited_by_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of member who last edited this topic. Nullable: may be null if never edited after creation.\n\nPrisma: discussion_board_topics.last_edited_by_member_id"},{"type":"null"}],"description":"UUID of member who last edited this topic. Nullable: may be null if never edited after creation.\n\nPrisma: discussion_board_topics.last_edited_by_member_id"},"title":{"type":"string","description":"Human-readable, unique topic title.\n\nPrisma: discussion_board_topics.title. Used for subject/agenda summary and search."},"description":{"type":"string","description":"Detailed description or contents of initial post/agenda for this topic.\n\nPrisma: discussion_board_topics.description. May contain rich text, but stored as string."},"status":{"type":"string","description":"Status string, such as 'open', 'closed', or 'pinned'.\n\nPrisma: discussion_board_topics.status. Concrete allowed values are managed at business layer."},"pinned_at":{"oneOf":[{"type":"string","format":"date-time","description":"If topic is pinned, this is the timestamp of pinning, else null.\n\nPrisma: discussion_board_topics.pinned_at"},{"type":"null"}],"description":"If topic is pinned, this is the timestamp of pinning, else null.\n\nPrisma: discussion_board_topics.pinned_at"},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"If closed, timestamp of closure. Null if still open.\n\nPrisma: discussion_board_topics.closed_at"},{"type":"null"}],"description":"If closed, timestamp of closure. Null if still open.\n\nPrisma: discussion_board_topics.closed_at"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601). For ordering and audit/compliance.\n\nPrisma: discussion_board_topics.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp, for ordering and version control.\n\nPrisma: discussion_board_topics.updated_at"}},"required":["id","discussion_board_category_id","created_by_member_id","title","description","status","created_at","updated_at"],"description":"Represents a topic/discussion thread entity, as per platform requirements and schema documentation.\n\nTopic thread entity contains unique id, links to category and author, workflow status (open, closed, or pinned), all with full versioned timestamp tracking. Does NOT contain actual post content or business records, only thread-level meta. Follows all normalization and audit trail requirements."},"IDiscussionBoardTopic.ICreate":{"type":"object","properties":{"discussion_board_category_id":{"type":"string","format":"uuid","description":"UUID of category where this topic is being created. Must match existing discussion_board_categories.id.\n\nCreation assigns this topic to the category, as required by organization/feature requirements."},"title":{"type":"string","description":"Title for the new topic. Must be globally unique in this category (business logic), per DB constraint and UI behavior.\n\nUser supplied; descriptive of the agenda or subject."},"description":{"type":"string","description":"Initial agenda or summary for the topic (may be rich text). 3NF: not duplicated in posts or replies.\n\nUser supplied."},"status":{"type":"string","description":"Status of topic at creation, one of allowed values (typically 'open', 'closed', or 'pinned'). String, validated by business logic.\n\nRequired by Prisma: discussion_board_topics.status"},"pinned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for when topic is pinned (if at creation). If absent, should be null.\n\nBusiness logic: can be set by admin, moderator, or auto rule."},{"type":"null","format":"date-time","description":"Timestamp for when topic is pinned (if at creation). If absent, should be null.\n\nBusiness logic: can be set by admin, moderator, or auto rule."}],"description":"Timestamp for when topic is pinned (if at creation). If absent, should be null.\n\nBusiness logic: can be set by admin, moderator, or auto rule."},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for when topic is closed, if immediate/known at creation. Null if topic starts open."},{"type":"null","format":"date-time","description":"Timestamp for when topic is closed, if immediate/known at creation. Null if topic starts open."}],"description":"Timestamp for when topic is closed, if immediate/known at creation. Null if topic starts open."}},"required":["discussion_board_category_id","title","description","status"],"description":"Payload to create a new discussion thread/topic. Only business logic-allowed fields are settable at create.\n\nAuthor/member id (owner) is set at controller/service (not accepted in create body), per security guidance – not client-supplied.\n\nFollows platform content submission policies and normalization best practices."},"IDiscussionBoardTopic.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"New title for this topic; must comply with uniqueness and naming conventions, per business logic."},"description":{"type":"string","description":"New description/agenda body for the topic (if being edited)."},"status":{"type":"string","description":"New status value for the topic (open/closed/pinned) per business rules."},"pinned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update timestamp for when topic was pinned/unpinned (set to date-time or null to clear)."},{"type":"null","format":"date-time","description":"Update timestamp for when topic was pinned/unpinned (set to date-time or null to clear)."}],"description":"Update timestamp for when topic was pinned/unpinned (set to date-time or null to clear)."},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for closing this topic, or null to re-open."},{"type":"null","format":"date-time","description":"Timestamp for closing this topic, or null to re-open."}],"description":"Timestamp for closing this topic, or null to re-open."}},"required":[],"description":"Payload for updating/editing a discussion topic by the owner. All updatable fields are optional; updating uses only fields present.\n\nOwnership and permission validated at controller/service (author, not client-supplied). No security role/id supplied in body."},"IDiscussionBoardTopicSnapshot.IRequest":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Discussion topic ID to filter snapshots by. This is the ID of the parent topic whose version history or edits are being audited."},"edited_by_member_id":{"type":"string","format":"uuid","description":"Filter snapshots by the editing member's ID (editor who performed the change). Used for audit/reviewing edits by a specific individual."},"created_from":{"type":"string","format":"date-time","description":"ISO8601 datetime: Includes snapshots created from (inclusive) this date/time forward."},"created_to":{"type":"string","format":"date-time","description":"ISO8601 datetime: Includes snapshots created until (inclusive) this date/time."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results. Starts at 1."},"limit":{"type":"integer","minimum":1,"description":"Number of results per page. Used for pagination controls."}},"description":"Request structure for listing or searching topic snapshots. Allows filtering version history by topic, editor, and creation time window. Pagination controls included for large audit histories.","required":[]},"IPageIDiscussionBoardTopicSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTopicSnapshot"},"description":"A list of topic snapshot objects for the current page of results."}},"required":["pagination","data"],"description":"Paginated result set for topic snapshots. Includes page metadata (pagination) and data array of snapshot objects, each representing the state of a topic at a given edit point."},"IDiscussionBoardTopicSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID of the topic snapshot (primary key)."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"UUID of the parent topic this snapshot belongs to. Used for back-referencing audit/version history."},"edited_by_member_id":{"type":"string","format":"uuid","description":"UUID of the member who made the edit, producing this snapshot."},"title":{"type":"string","description":"Topic title as it was at the time of this snapshot."},"description":{"type":"string","description":"Topic description content as of snapshot creation."},"status":{"type":"string","description":"Status of the topic at snapshot time. Examples: 'open', 'closed', 'pinned'."},"pinned_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the topic was pinned, as recorded in this snapshot. Null if not pinned at this revision."},{"type":"null","format":"date-time","description":"When the topic was pinned, as recorded in this snapshot. Null if not pinned at this revision."}],"description":"When the topic was pinned, as recorded in this snapshot. Null if not pinned at this revision."},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for topic closure, from this revision. Null if still open."},{"type":"null","format":"date-time","description":"Timestamp for topic closure, from this revision. Null if still open."}],"description":"Timestamp for topic closure, from this revision. Null if still open."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the snapshot was created (when the edit took place)."}},"required":["id","discussion_board_topic_id","edited_by_member_id","title","description","status","created_at"],"description":"A snapshot object representing the state of a topic at a single edit/version point. Used to audit and trace all content changes and moderation actions."},"IDiscussionBoardTopicSubscription.IRequest":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Target topic ID to filter subscriptions for. Finds all subscriptions to a given topic."},"member_id":{"type":"string","format":"uuid","description":"Member user ID to filter by. Returns subscriptions held by a given member."},"subscribed_from":{"type":"string","format":"date-time","description":"ISO8601 datetime: include subscriptions created after/on this point."},"subscribed_to":{"type":"string","format":"date-time","description":"ISO8601 datetime: include subscriptions created before/on this point."},"active_only":{"type":"boolean","description":"If true, only include subscriptions where unsubscribed_at is null (still subscribed)."},"page":{"type":"integer","minimum":1,"description":"Page number (for paginated results, starts from 1)."},"limit":{"type":"integer","minimum":1,"description":"Results per page for pagination."}},"description":"Request body for listing/filtering topic subscriptions. Supports searching by topic, member, and time window. Pagination and active/subscribed status filter included.","required":[]},"IPageIDiscussionBoardTopicSubscription":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTopicSubscription"},"description":"A list of topic subscription objects for the current page."}},"required":["pagination","data"],"description":"Paginated result of topic subscription entities, including page info and array of result items."},"IDiscussionBoardTopicSubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the topic subscription record (primary key)."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"UUID of the topic being followed."},"member_id":{"type":"string","format":"uuid","description":"UUID of the subscribing member (user who is following the topic)."},"subscribed_at":{"type":"string","format":"date-time","description":"When the subscription was started (ISO8601 datetime)."},"unsubscribed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable; when the member unsubscribed. Null if still subscribed."},{"type":"null","format":"date-time","description":"Nullable; when the member unsubscribed. Null if still subscribed."}],"description":"Nullable; when the member unsubscribed. Null if still subscribed."}},"required":["id","discussion_board_topic_id","member_id","subscribed_at"],"description":"Topic subscription record representing a user following a topic for notifications. Includes audit information for subscription/unsubscription times."},"IDiscussionBoardTopicSubscription.ICreate":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Target topic's UUID to subscribe to."}},"required":["discussion_board_topic_id"],"description":"Request for subscribing (following) a topic. The subscribing member is identified by the authentication context—not provided in this body."},"IDiscussionBoardTopicSubscription.IUpdate":{"type":"object","properties":{"subscribed_at":{"type":"string","format":"date-time","description":"Date of (re-)subscription (if resubscribing manually)."},"unsubscribed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set to the unsubscription timestamp to unsubscribe. Set to null to resubscribe."},{"type":"null","format":"date-time","description":"Set to the unsubscription timestamp to unsubscribe. Set to null to resubscribe."}],"description":"Set to the unsubscription timestamp to unsubscribe. Set to null to resubscribe."}},"description":"Request for updating topic subscription, e.g., for unsubscribing or resubscribing. Only subscription and unsubscription dates are mutable.","required":[]},"IVoidResponse":{"type":"object","properties":{},"description":"Empty response object (no content, operation was successful).","required":[]},"IDiscussionBoardPost.IRequest":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"Filter posts by parent topic."},"author_member_id":{"type":"string","format":"uuid","description":"Filter posts by specific author/member."},"body_keyword":{"type":"string","description":"Text or keyword to search for within post body content."},"is_deleted":{"type":"boolean","description":"If true/false, filter by deletion status (soft delete flag)."},"created_from":{"type":"string","format":"date-time","description":"Include posts created after/on this datetime."},"created_to":{"type":"string","format":"date-time","description":"Include posts created before/on this datetime."},"page":{"type":"integer","minimum":1,"description":"Page number (start from 1)."},"limit":{"type":"integer","minimum":1,"description":"Number of posts per page."}},"description":"Request for searching, filtering, or paginating posts. Can filter on topic, author, full text, deletion state, and creation range. Pagination controls included.","required":[]},"IPageIDiscussionBoardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPost"},"description":"Array of paginated post result objects."}},"required":["pagination","data"],"description":"Paginated result set of post records. Contains paging metadata and data (posts for the current page)."},"IDiscussionBoardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for the post (primary key in posts table)."},"discussion_board_topic_id":{"type":"string","format":"uuid","description":"UUID of the parent topic this post belongs to."},"author_member_id":{"type":"string","format":"uuid","description":"UUID of the member who authored the post."},"title":{"oneOf":[{"type":"string","description":"Post title (optional for replies, present if this is a thread-opening post)."},{"type":"null","description":"Post title (optional for replies, present if this is a thread-opening post)."}],"description":"Post title (optional for replies, present if this is a thread-opening post)."},"body":{"type":"string","description":"Post content (may include rich text markup, required on all posts)."},"is_deleted":{"type":"boolean","description":"Soft deletion state: true if post is hidden/moderated/deleted, false if visible."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of post creation (ISO8601)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the post's last update (including edits)."}},"required":["id","discussion_board_topic_id","author_member_id","body","is_deleted","created_at","updated_at"],"description":"Represents a post or reply in a discussion topic, including author, parent topic, content, and metadata such as title, soft deletion status, and audit timestamps."},"IDiscussionBoardPost.ICreate":{"type":"object","properties":{"discussion_board_topic_id":{"type":"string","format":"uuid","description":"The UUID of the topic this post belongs to. Required when creating a new post.\n\nCorresponds to the `discussion_board_topic_id` column in `discussion_board_posts` Prisma schema. Its value links this post to a parent discussion thread. Only valid topic IDs may be supplied."},"title":{"oneOf":[{"type":"string","description":"Optional post title. Used primarily for main topic posts. May be null for replies.\n\nMatches the `title` column in the schema: string or null/optional. Serves as a subject or summary for the post. When used as a reply, this may be omitted."},{"type":"null","description":"Optional post title. Used primarily for main topic posts. May be null for replies.\n\nMatches the `title` column in the schema: string or null/optional. Serves as a subject or summary for the post. When used as a reply, this may be omitted."}],"description":"Optional post title. Used primarily for main topic posts. May be null for replies.\n\nMatches the `title` column in the schema: string or null/optional. Serves as a subject or summary for the post. When used as a reply, this may be omitted."},"body":{"type":"string","description":"The main content of the post. Required and must not be empty. Accepts rich text and formatting.\n\nDirect mapping of the `body` column in `discussion_board_posts`. Holds all author-generated text. Field is required for every post/reply."}},"required":["discussion_board_topic_id","body"],"description":"Create-type for a post in the discussion board. Intended for member-authored new posts or replies.\n\nDerived from the `discussion_board_posts` table. Only editable fields for post creation are included. Author ID is never supplied by clients for security; it is sourced from authentication context."},"IDiscussionBoardPost.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string","description":"Optional new/updated title for the post. May be null if the post is a reply.\n\nDirect mapping to the post's `title`. Used for renaming/changing subject lines. Optional for updates."},{"type":"null","description":"Optional new/updated title for the post. May be null if the post is a reply.\n\nDirect mapping to the post's `title`. Used for renaming/changing subject lines. Optional for updates."}],"description":"Optional new/updated title for the post. May be null if the post is a reply.\n\nDirect mapping to the post's `title`. Used for renaming/changing subject lines. Optional for updates."},"body":{"oneOf":[{"type":"string","description":"Updated post content (rich text/markdown accepted if supported). May be null if updating only the title.\n\nMaps to `body` in the Prisma schema. Does not permit full deletion of content; soft deletion is via `is_deleted` flag."},{"type":"null","description":"Updated post content (rich text/markdown accepted if supported). May be null if updating only the title.\n\nMaps to `body` in the Prisma schema. Does not permit full deletion of content; soft deletion is via `is_deleted` flag."}],"description":"Updated post content (rich text/markdown accepted if supported). May be null if updating only the title.\n\nMaps to `body` in the Prisma schema. Does not permit full deletion of content; soft deletion is via `is_deleted` flag."},"is_deleted":{"type":"boolean","description":"Set `true` to soft-delete the post (hides from most views, keeps in DB for audit). Must be explicitly set to perform a soft delete.\n\nMatches the `is_deleted` column in the schema. Set via moderation or by the post's owner to remove public visibility."}},"required":[],"description":"Update-type for posts in the discussion board. All fields are optional. Only properties editable by owners are listed. Author and topic references are not included for security reasons."},"IDiscussionBoardPostSnapshot.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Filter snapshots by post ID. Optional.\n\nCorresponds to `discussion_board_post_id` in snapshots. Restrict returned history to a single post."},"author_member_id":{"type":"string","format":"uuid","description":"Optional filter by editing member (UUID).\n\nMaps to `author_member_id` in post snapshots. Requester may filter for their edits or those of a moderator."},"created_at__start":{"type":"string","format":"date-time","description":"Optional filter to return only snapshots created after this timestamp."},"created_at__end":{"type":"string","format":"date-time","description":"Optional filter to return only snapshots created before this timestamp."},"page":{"oneOf":[{"type":"integer","description":"Zero-based page number for paginated requests. Null returns first page. Defaults handled according to paging system."},{"type":"null","description":"Zero-based page number for paginated requests. Null returns first page. Defaults handled according to paging system."}],"description":"Zero-based page number for paginated requests. Null returns first page. Defaults handled according to paging system."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of results to return per page. Null or omitted uses system default (e.g. 100)."},{"type":"null","description":"Maximum number of results to return per page. Null or omitted uses system default (e.g. 100)."}],"description":"Maximum number of results to return per page. Null or omitted uses system default (e.g. 100)."}},"required":[],"description":"Request filter for listing/searching discussion board post snapshots.\n\nMapped directly to the `discussion_board_post_snapshots` table. All fields are optional (filter/sort only). Enables paginated, filtered audit/history lookup."},"IPageIDiscussionBoardPostSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPostSnapshot"},"description":"Array of post snapshot records matching query/filter"}},"required":["pagination","data"],"description":"Paginated result for post snapshot search on the discussion board.\n\nThis aligns with the platform's IPage<T> contract, specialized for post snapshot results."},"IDiscussionBoardPostSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique snapshot identifier (UUID) for this post revision. Atomic primary key.\n\nMatches `id` in `discussion_board_post_snapshots`. Immutable and required."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"ID of the parent post this snapshot belongs to. Foreign key to posts table.\n\nMaps to `discussion_board_post_id` in schema. Enables full version tracking."},"author_member_id":{"type":"string","format":"uuid","description":"UUID of the member who made the revision. Points to discussion_board_members.\n\nReferences `author_member_id` in the schema. Immutable once snapshot is created."},"snapshot_body":{"type":"string","description":"Full content of the post at this point in revision history. Required field.\n\nDirect from `snapshot_body` in the schema. Used for rollback/comparison/history."},"edit_reason":{"oneOf":[{"type":"string","description":"Optional human-readable explanation for why the edit was made.\n\nField comes from `edit_reason` in the schema. Example: 'Fixed typo', 'Removed personal info'."},{"type":"null","description":"Optional human-readable explanation for why the edit was made.\n\nField comes from `edit_reason` in the schema. Example: 'Fixed typo', 'Removed personal info'."}],"description":"Optional human-readable explanation for why the edit was made.\n\nField comes from `edit_reason` in the schema. Example: 'Fixed typo', 'Removed personal info'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this snapshot version was created.\n\nFrom `created_at` column. Used in sorting audit history."}},"required":["id","discussion_board_post_id","author_member_id","snapshot_body","created_at"],"description":"Represents a single version of a discussion board post for edit history/audit. Based on the `discussion_board_post_snapshots` record.\n\nImmutable, append-only for compliance/audit transparency."},"IDiscussionBoardComment.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Optional filter. Only return comments attached to this post (UUID).\n\nMatches `discussion_board_post_id` on comments."},"author_member_id":{"type":"string","format":"uuid","description":"Optional filter. Only return comments by a given member.\n\nMaps to `author_member_id`. Useful for self-history, moderator audits, etc."},"is_deleted":{"type":"boolean","description":"Optional filter. When present, limits results to deleted/non-deleted comments.\n\nField comes from `is_deleted` column."},"created_at__start":{"type":"string","format":"date-time","description":"Return only comments created after this timestamp (inclusive)."},"created_at__end":{"type":"string","format":"date-time","description":"Return only comments created before this timestamp (inclusive)."},"page":{"oneOf":[{"type":"integer","description":"Zero-based page index for paginated queries. Null returns first page. Defaults handled by API."},{"type":"null","description":"Zero-based page index for paginated queries. Null returns first page. Defaults handled by API."}],"description":"Zero-based page index for paginated queries. Null returns first page. Defaults handled by API."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of records per page. If null, system applies a default (e.g. 100)."},{"type":"null","description":"Maximum number of records per page. If null, system applies a default (e.g. 100)."}],"description":"Maximum number of records per page. If null, system applies a default (e.g. 100)."}},"required":[],"description":"Discussion board comment search/filter object. All fields optional.\n\nMapped to `discussion_board_comments` for threaded comment search and pagination."},"IPageDiscussionBoardComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardComment"},"description":"Array of matching comments found in the paginated query."}},"required":["pagination","data"],"description":"Paginated response for list/search of comments on the discussion board.\n\nConforms to IPage<Comment> convention as used across board platform."},"IDiscussionBoardComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique comment identifier (UUID). Primary key.\n\nFrom `id` column in comments model."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"The post this comment is associated with. Foreign key to posts.\n\nDirect from `discussion_board_post_id`."},"author_member_id":{"type":"string","format":"uuid","description":"ID of member who authored this comment.\n\nReferences `author_member_id`. Never set by client; resolved from authentication context."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of parent comment (if a reply/threaded). Null if root comment.\n\nFrom `parent_id` field. Enables nesting/threading logic in board threads."},{"type":"null","format":"uuid","description":"UUID of parent comment (if a reply/threaded). Null if root comment.\n\nFrom `parent_id` field. Enables nesting/threading logic in board threads."}],"description":"UUID of parent comment (if a reply/threaded). Null if root comment.\n\nFrom `parent_id` field. Enables nesting/threading logic in board threads."},"body":{"type":"string","description":"Full comment body text (plain or rich content). Required.\n\nMatches `body` field. Holds user-written text content."},"is_deleted":{"type":"boolean","description":"Soft delete flag. True if comment was removed for moderation or by user. Kept for audit.\n\nFrom `is_deleted` field."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for comment creation. ISO8601/UTC.\n\nDirect from `created_at`."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for latest comment edit/update. ISO8601/UTC.\n\nFrom `updated_at`."}},"required":["id","discussion_board_post_id","author_member_id","body","is_deleted","created_at","updated_at"],"description":"Represents a comment on any board post. Based on the `discussion_board_comments` schema.\n\nIncludes thread/nesting info. Mutable only by author or moderator; deletions are soft by `is_deleted`."},"IDiscussionBoardComment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"UUID of the post being commented on. Must be provided and valid.\n\nCorresponds to `discussion_board_post_id`. Required for all new comments."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of parent comment (if replying/threading). Null for root comments.\n\nFrom `parent_id` schema column. Enables replies to replies. Optional."},{"type":"null","format":"uuid","description":"UUID of parent comment (if replying/threading). Null for root comments.\n\nFrom `parent_id` schema column. Enables replies to replies. Optional."}],"description":"UUID of parent comment (if replying/threading). Null for root comments.\n\nFrom `parent_id` schema column. Enables replies to replies. Optional."},"body":{"type":"string","description":"Text of the comment. Required. Should meet platform's content and format guidelines.\n\nDirectly mapped from `body` field on comment entity."}},"required":["discussion_board_post_id","body"],"description":"Create-type for discussion board comments. Used to insert new comments, root or reply.\n\nMatches required fields for inserts on the `discussion_board_comments` schema. Author and ownership set from authentication."},"IDiscussionBoardComment.IUpdate":{"type":"object","properties":{"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Updated parent comment. Useful to move in thread tree or undelete a reply. Nullable.\n\nFrom `parent_id` schema."},{"type":"null","format":"uuid","description":"(Optional) Updated parent comment. Useful to move in thread tree or undelete a reply. Nullable.\n\nFrom `parent_id` schema."}],"description":"(Optional) Updated parent comment. Useful to move in thread tree or undelete a reply. Nullable.\n\nFrom `parent_id` schema."},"body":{"oneOf":[{"type":"string","description":"(Optional) New comment content text (plain or formatted). Null if only thread/soft-delete update."},{"type":"null","description":"(Optional) New comment content text (plain or formatted). Null if only thread/soft-delete update."}],"description":"(Optional) New comment content text (plain or formatted). Null if only thread/soft-delete update."},"is_deleted":{"type":"boolean","description":"(Optional) Set true to soft-delete the comment. Ownership and control enforced at API/controller. Mutations must comply with audit."}},"required":[],"description":"Edit-type object for updating an existing comment on the discussion board (must be owned by the user or moderator).\n\nOnly updatable fields from the `discussion_board_comments` table included. None are required, allowing targeted/partial updates."},"IDiscussionBoardPostAttachment.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"Filter attachments by associated post ID. Optional.\n\nColumn `discussion_board_post_id` on attachments. Restricts search to a single post."},"uploader_member_id":{"type":"string","format":"uuid","description":"Optional filter on uploader (by member id).\n\nMaps to `uploader_member_id` column. For self/history audit or moderation review."},"is_deleted":{"type":"boolean","description":"(Optional) Limit results to attachments with or without soft deletion set.\n\nFrom `is_deleted` field on discussion_board_post_attachments."},"mime_type":{"type":"string","description":"Optional filter. Only results with this MIME type (exact match).\n\nMatches `mime_type` field, e.g. 'image/png', 'application/pdf'."},"file_name__contains":{"type":"string","description":"Optional substring/search filter for partial filename matches. Not exact.\n\nClient-side/case-insensitive searches common; maps to `file_name` column."},"created_at__start":{"type":"string","format":"date-time","description":"Return only attachments created after the specified time (inclusive)."},"created_at__end":{"type":"string","format":"date-time","description":"Return only attachments created before this time (inclusive)."},"page":{"oneOf":[{"type":"integer","description":"Page for pagination (zero-based). Null uses first/default page."},{"type":"null","description":"Page for pagination (zero-based). Null uses first/default page."}],"description":"Page for pagination (zero-based). Null uses first/default page."},"limit":{"oneOf":[{"type":"integer","description":"Maximum results per page. If null, system applies page size default."},{"type":"null","description":"Maximum results per page. If null, system applies page size default."}],"description":"Maximum results per page. If null, system applies page size default."}},"required":[],"description":"File attachment search/filter request for the discussion_board_post_attachments entity.\n\nAll fields optional; filters and pagination tool."},"IPageDiscussionBoardPostAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPostAttachment"},"description":"List of matching post attachments (with metadata)."}},"required":["pagination","data"],"description":"Paginated result for file attachment searches on board posts.\n\nFollows global IPage<T> pattern with attachment type."},"IDiscussionBoardPostAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 식별자입니다. 이 첨부파일에 대한 UUID로, 데이터베이스의 기본 키 역할을 하며, 검색, 업데이트 또는 참조 시 사용됩니다.\n\nPrisma 스키마의 discussion_board_post_attachments.id 칼럼을 참조합니다."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"첨부파일이 연결된 포스트의 UUID입니다. 이 값은 discussion_board_posts 테이블의 id를 참조하여 첨부파일과 포스트 간의 연관 관계를 명확히 합니다.\n\nPrisma discussion_board_post_attachments.discussion_board_post_id 칼럼 설명과 연결됩니다."},"uploader_member_id":{"type":"string","format":"uuid","description":"이 파일 첨부를 업로드한 회원의 UUID입니다. 이것은 업로더의 멤버십 식별자와 연결되며, 소유권, 감사, 관리 기능을 지원합니다.\n\nPrisma discussion_board_post_attachments.uploader_member_id 칼럼 설명 참조."},"file_uri":{"type":"string","maxLength":80000,"description":"첨부파일이 저장된 위치의 URI(파일 경로, CDN URL, 객체 저장소 등)입니다. 예: https://cdn.site.com/files/file123.pdf\n\nPrisma discussion_board_post_attachments.file_uri 칼럼과 일치."},"file_name":{"type":"string","description":"사용자에게 표시되는 첨부파일 이름입니다. 이는 사용자 친화적인 라벨로, 실제 파일명과 다를 수 있습니다.\n\nPrisma 스키마의 file_name 칼럼 참고."},"file_size":{"type":"integer","description":"첨부파일의 크기(단위: 바이트)입니다. 업로드 제한, 진단, 표시 목적에 사용됩니다. 예시: 204800(200KB)\n\nPrisma discussion_board_post_attachments.file_size 칼럼."},"mime_type":{"type":"string","description":"파일의 MIME 타입입니다. 예시: application/pdf, image/png 등. 파일 렌더링과 필터링에 꼭 필요합니다.\n\nPrisma discussion_board_post_attachments.mime_type 칼럼."},"is_deleted":{"type":"boolean","description":"이 첨부파일의 소프트 삭제 여부를 나타냅니다. true이면 UI나 기본 조회에서 제외합니다. 비즈니스 감사 및 실제 삭제/복구 정책 적용 시 사용됩니다.\n\nPrisma discussion_board_post_attachments.is_deleted 칼럼 참조."},"created_at":{"type":"string","format":"date-time","description":"첨부파일 레코드가 생성된 타임스탬프입니다. 감사, 정렬, 관리 용도로 활용됩니다.\n\nPrisma file의 created_at 칼럼 설명과 일치."}},"required":["id","discussion_board_post_id","uploader_member_id","file_uri","file_name","file_size","mime_type","is_deleted","created_at"],"description":"게시글 첨부파일 엔터티 객체입니다. 첨부파일의 메타데이터와 업로더, 실제 파일 위치, 파일명, 파일 타입, 업로드 일자, 논리적 삭제 여부 등을 포함합니다.\n\nPrisma discussion_board_post_attachments 테이블 구조 및 자세한 칼럼 주석을 기반으로 하며, 모든 필수 정보를 포괄합니다."},"IDiscussionBoardPostAttachment.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"이 첨부파일이 연결될 포스트의 UUID입니다. UI/서버상에서 반드시 존재하는 게시글의 id여야만 하며, 외래키 참조 무결성을 만족해야 합니다.\n\nPrisma discussion_board_post_attachments.discussion_board_post_id 칼럼 참고."},"file_uri":{"type":"string","maxLength":80000,"description":"저장된 첨부파일의 실제 위치(URI)입니다. 업로드 완료 후 파일 서버/스토리지의 경로를 입력해야 하며, 보통 시스템 또는 미들웨어에서 생성됨.\n\nPrisma file_uri 필드 기준."},"file_name":{"type":"string","description":"UI/사용자에게 보이는 파일명입니다. 업로드 시, 사용자가 직접 명명하거나 브라우저/OS에서 추출된 이름이 될 수 있음.\n\nPrisma 스키마 file_name 설명."},"file_size":{"type":"integer","description":"첨부파일 크기(바이트 단위)입니다. 업로드 정책 및 제한/감사에 사용.\n\nPrisma의 file_size 칼럼 기반."},"mime_type":{"type":"string","description":"첨부파일의 MIME 타입. 서버 또는 클라이언트가 자동 판별하는 경우도 있음. 예시: image/png, application/pdf 등 사용 권장.\n\nPrisma 스키마 mime_type column 참조."}},"required":["discussion_board_post_id","file_uri","file_name","file_size","mime_type"],"description":"게시글에 첨부파일을 업로드/등록할 때 사용되는 생성용 타입입니다. 업로더(본인 인증)는 컨트롤러 인증 정보에서 추출하며, 클라이언트에서는 직접 업로더를 지정하지 않습니다.\n\nRBAC상의 보안 원칙과 Prisma discussion_board_post_attachments 모델 주석에 따라, 업로더 식별자는 별도 서버 인증 컨텍스트에서 가져와야 하므로 요청 타입에는 포함되지 않습니다."},"IDiscussionBoardPostAttachment.IUpdate":{"type":"object","properties":{"file_name":{"type":"string","description":"수정할 경우 새 이름을 입력합니다. 사용자 편의성 및 파일명 정정 지원용."},"mime_type":{"type":"string","description":"첨부파일 MIME 타입을 변경 시 입력합니다. 일반적으론 변경 필요 없음."},"is_deleted":{"type":"boolean","description":"첨부파일의 소프트 삭제 여부를 나타냅니다. 삭제 처리 시 true로 전달합니다.\n\ndeleted_at과 같은 하드삭제 칼럼이 없으므로, 실제로 삭제하고자 할 경우 true로 세팅만 하고 파일은 남겨 둡니다."}},"required":[],"description":"첨부파일의 부분 정보 수정(메타데이터 편집, 소프트 삭제 등)에 사용하는 객체입니다. 파일 실제 데이터의 업데이트는 지원하지 않으며, 오직 파일명/타입/논리적 삭제 플래그만 변경 가능합니다.\n\nPrisma discussion_board_post_attachments 모델 구조 및 보안 정책을 반영합니다."},"IDiscussionBoardPostLike.IRequest":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"조회/필터링할 게시글의 UUID입니다. 이 필드를 이용해 특정 게시글에 대한 좋아요/싫어요 기록만 조회할 수 있음."},"author_member_id":{"type":"string","format":"uuid","description":"특정 회원이 남긴 좋아요/싫어요 데이터를 필터링할 때 사용."},"is_like":{"type":"boolean","description":"좋아요(true) 또는 싫어요(false) 필터링에 사용."},"created_at_from":{"type":"string","format":"date-time","description":"이 시점 이후에 생성된 좋아요/싫어요만 검색. 기간 조건에 활용."},"created_at_to":{"type":"string","format":"date-time","description":"이 시점 이전에 생성된 좋아요/싫어요만 포함. 기간 조건."},"page":{"type":"integer","description":"페이지 번호. 1부터 시작."},"limit":{"type":"integer","description":"페이지당 반환 객체 수. 기본값 100(권장값)"}},"required":[],"description":"게시글 좋아요/싫어요 검색 및 필터링, 페이징에 사용하는 쿼리 파라미터 객체입니다. 페이징(페이지/개수), 기간 필터, 다양한 조합의 검색이 가능합니다.\n\nPrisma discussion_board_post_likes 관련 비즈니스 요구 및 데이터 기준."},"IPageDiscussionBoardPostLike":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPostLike"},"description":"실제 페이지에 포함된 좋아요/싫어요 각 엔티티 배열"}},"required":["pagination","data"],"description":"좋아요/싫어요 페이징 결과 컨테이너 객체. 페이지 정보와 실제 리스트 데이터가 포함됨.\n\nIPage<T> Type 기반. pagination은 전체 개수/페이지 번호/페이지별 개수 등 포함."},"IDiscussionBoardPostLike":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"엔티티 고유 식별자. UUID. discussion_board_post_likes.id 필드를 나타냄."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"좋아요/싫어요가 속한 게시글의 UUID 참조값입니다.\n\nPrisma discussion_board_post_likes.discussion_board_post_id 칼럼."},"author_member_id":{"type":"string","format":"uuid","description":"좋아요/싫어요 남긴 회원의 UUID 식별자.\n\nPrisma discussion_board_post_likes.author_member_id 칼럼."},"is_like":{"type":"boolean","description":"true=좋아요(Upvote), false=싫어요(Downvote) 구분 값.\n\nPrisma is_like 데이터와 일치하게 반환."},"created_at":{"type":"string","format":"date-time","description":"좋아요/싫어요 생성 시각. audit 및 통계에 사용."}},"required":["id","discussion_board_post_id","author_member_id","is_like","created_at"],"description":"게시글의 좋아요(혹은 싫어요) 한 건을 표준화한 엔터티 객체. \n\nPrisma discussion_board_post_likes 모든 실 칼럼을 상세 문서화합니다. 보안상 패스워드 등 민감 정보는 포함되지 않습니다."},"IDiscussionBoardPostLike.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"좋아요 혹은 싫어요 대상이 되는 게시글의 UUID입니다."},"is_like":{"type":"boolean","description":"좋아요(true) 또는 싫어요(false) 여부."}},"required":["discussion_board_post_id","is_like"],"description":"좋아요/싫어요(Upvote/Downvote) 액션 등록 요청 타입. 게시글 id와 평가 값만을 받으며, 실제 actor(member)는 인증 컨텍스트에서 자동 주입됩니다.\n\nPrisma 보안 설명에 따라, actor_member_id를 클라이언트가 입력하지 않음에 유의."},"IDiscussionBoardPostLike.IUpdate":{"type":"object","properties":{"is_like":{"type":"boolean","description":"좋아요/싫어요 상태를 전환할 때 사용하는 값."}},"required":["is_like"],"description":"기존 좋아요/싫어요 값(is_like)만을 업데이트합니다. 나머지 필드는 변경 불가.\n\nPrisma discussion_board_post_likes 모델 정책 기준."},"IDiscussionBoardReport.IRequest":{"type":"object","properties":{"resolved":{"type":"boolean","description":"해결 여부로 보고서를 필터링하는 데 사용합니다.\n\n예: resolved=true이면 완료된(처리가 끝난) 신고만, false이면 아직 미처리된 신고만 반환."},"reporter_id":{"type":"string","format":"uuid","description":"신고를 제출한 회원의 UUID로서, 특정 사용자가 제출한 신고만 필터링할 수 있습니다."},"reason_id":{"type":"string","format":"uuid","description":"신고 사유 id(사전 정의)로 필터할 때 사용합니다."},"reported_entity_id":{"type":"string","format":"uuid","description":"신고된 대상(게시글, 댓글 등)의 UUID."},"reported_entity_type":{"type":"string","description":"신고의 대상 유형(예: post, comment, user 등).\n\n비즈니스 정책에 따라 허용되는 문자열만 입력 권장. Enum으로 관리되면 enum schema로 분리 필요."},"created_at_from":{"type":"string","format":"date-time","description":"조회 시작 시각(이후 시점만 반환)"},"created_at_to":{"type":"string","format":"date-time","description":"조회 종료 시각(이전만 결과 포함)"},"page":{"type":"integer","description":"페이지 번호(기본 1)"},"limit":{"type":"integer","description":"페이지 당 반환 엔티티 수(기본 100)"}},"required":[],"description":"신고(Report) 리스트/검색/통계/페이징에 사용하는 요청 파라미터 객체입니다. 다양한 조건(해결상태, 작성자, 사유, 신고대상, 생성일)을 복합 제공.\n\ndiscussion_board_reports 테이블 실 구조와 활용 시나리오를 문서화함."},"IPageIDiscussionBoardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReport"},"description":"신고(Report) 실 데이터 배열"}},"required":["pagination","data"],"description":"신고(Report) 페이징 결과 컨테이너. 페이지 정보와 실제 엔티티 배열이 포함됨.\n\nIPage 표준 구조에 기반함."},"IDiscussionBoardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"고유 신고 식별자(UUID). discussion_board_reports.id 컬럼이며, 모든 신고 트래킹의 기본값."},"reporter_id":{"type":"string","format":"uuid","description":"신고한 회원의 고유 UUID 식별자. Prisma reporter_id 컬럼에 해당. 신고 생성 시 인증된 회원만 가능합니다."},"reason_id":{"type":"string","format":"uuid","description":"사전 정의된 신고 사유의 UUID. discussion_board_report_reasons.id와 1:N 참조 관계.\n\n실제 사유(텍스트)는 별도 테이블에서 관리되므로 이 값만 저장됩니다."},"reported_entity_id":{"type":"string","format":"uuid","description":"신고된 대상 Entity의 UUID입니다. 게시글, 댓글, 사용자 등 대상 종류에 맞는 UUID가 저장됨."},"reported_entity_type":{"type":"string","description":"신고 대상 유형(예: post, comment, user 등). 정확한 Enum 값 혹은 도메인 별로 허용된 값만 사용합니다."},"description":{"oneOf":[{"type":"string","description":"신고자가 남긴 부가 설명(선택). 문제 설명, 추가 사유 등. null일 수 있습니다.\n\nPrisma discussion_board_reports.description 칼럼과 일치."},{"type":"null","description":"신고자가 남긴 부가 설명(선택). 문제 설명, 추가 사유 등. null일 수 있습니다.\n\nPrisma discussion_board_reports.description 칼럼과 일치."}],"description":"신고자가 남긴 부가 설명(선택). 문제 설명, 추가 사유 등. null일 수 있습니다.\n\nPrisma discussion_board_reports.description 칼럼과 일치."},"created_at":{"type":"string","format":"date-time","description":"신고가 제출된 시각. 감사, 통계, 필터링 등에 활용."},"resolved":{"type":"boolean","description":"해결/처리 여부 플래그. true == 완료, false == 미처리.\n\ndiscussion_board_reports.resolved 플래그."}},"required":["id","reporter_id","reason_id","reported_entity_id","reported_entity_type","created_at","resolved"],"description":"신고(Report) 엔터티 객체. 신고의 상세 내역, 사유, 대상, 처리상태를 모두 포함하여, Prisma discussion_board_reports 설계 및 비즈니스 흐름과 100% 일치.\n\n비밀번호, 토큰, 내부 시스템값 등 민감정보 미포함."},"IDiscussionBoardReport.ICreate":{"type":"object","properties":{"reason_id":{"type":"string","format":"uuid","description":"신고 사유(프리셋) UUID입니다. 보고서 생성 시 필수."},"reported_entity_id":{"type":"string","format":"uuid","description":"신고할 대상 Entity(게시글/댓글 등)의 UUID."},"reported_entity_type":{"type":"string","description":"신고대상의 유형. 예: post, comment, user.\n\n서버에서 허용된 값만 허용하는 것이 바람직합니다."},"description":{"oneOf":[{"type":"string","description":"추가 설명, 문제 상황 설명 등. null 허용."},{"type":"null","description":"추가 설명, 문제 상황 설명 등. null 허용."}],"description":"추가 설명, 문제 상황 설명 등. null 허용."}},"required":["reason_id","reported_entity_id","reported_entity_type"],"description":"신고(Report) 생성/등록 요청 객체 타입. reporter_id는 인증된 사용자 컨텍스트에서 자동 수집합니다.\n\n비밀번호, 토큰, 특수 시스템 값등은 절대 노출하거나 입력받지 않습니다. Prisma discussion_board_reports 생성 요구와 일치."},"IDiscussionBoardReport.IUpdate":{"type":"object","properties":{"resolved":{"type":"boolean","description":"Resolved status of the report.\n\nCorresponds to `resolved` in discussion_board_reports. Set to `true` if the report has been processed and closed by moderation; otherwise `false`. Changing this field updates the moderation status as viewed in the report workflow. Must be included if moderation action occurs.\n\nRefer to the Prisma table for additional requirements."},"description":{"oneOf":[{"type":"string","description":"Optional moderation note or details about the resolution of the report.\n\nReferences the `description` field in discussion_board_reports. Used for audit, investigation, or clarity in the moderation process. Can be null if not provided or not necessary in the administrative context."},{"type":"null","description":"Optional moderation note or details about the resolution of the report.\n\nReferences the `description` field in discussion_board_reports. Used for audit, investigation, or clarity in the moderation process. Can be null if not provided or not necessary in the administrative context."}],"description":"Optional moderation note or details about the resolution of the report.\n\nReferences the `description` field in discussion_board_reports. Used for audit, investigation, or clarity in the moderation process. Can be null if not provided or not necessary in the administrative context."}},"required":["resolved"],"description":"Update payload for resolving or annotating a report entity in the discussion board system.\n\nReferences the moderation workflow described in requirements analysis and the discussion_board_reports Prisma model."},"IDiscussionBoardReportReason.IRequest":{"type":"object","properties":{"reason_text":{"oneOf":[{"type":"string","description":"Substring match for report reason label/text.\n\nUsed to filter report reasons by keyword. References the `reason_text` column in discussion_board_report_reasons. Can be null to disable filter."},{"type":"null","description":"Substring match for report reason label/text.\n\nUsed to filter report reasons by keyword. References the `reason_text` column in discussion_board_report_reasons. Can be null to disable filter."}],"description":"Substring match for report reason label/text.\n\nUsed to filter report reasons by keyword. References the `reason_text` column in discussion_board_report_reasons. Can be null to disable filter."},"active":{"oneOf":[{"type":"boolean","description":"Filter for active status (true/false).\n\nReferences the `active` column in discussion_board_report_reasons. Set to true to retrieve only currently selectable reasons."},{"type":"null","description":"Filter for active status (true/false).\n\nReferences the `active` column in discussion_board_report_reasons. Set to true to retrieve only currently selectable reasons."}],"description":"Filter for active status (true/false).\n\nReferences the `active` column in discussion_board_report_reasons. Set to true to retrieve only currently selectable reasons."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (uint32). Defaults to 1 if not specified."},{"type":"null","description":"Page number for pagination (uint32). Defaults to 1 if not specified."}],"description":"Page number for pagination (uint32). Defaults to 1 if not specified."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of records per page (uint32). Defaults to 100."},{"type":"null","description":"Maximum number of records per page (uint32). Defaults to 100."}],"description":"Maximum number of records per page (uint32). Defaults to 100."}},"description":"Request object for searching and paginating report reason records in the discussion_board_report_reasons table.\n\nEnables filtering by text, status, and paging according to UI/business requirements.","required":[]},"IPageIDiscussionBoardReportReason":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReportReason"},"description":"Array of report reason objects meeting search/filter criteria."}},"required":["pagination","data"],"description":"Paginated result set for report reason search/list endpoints.\n\nArray contains IDiscussionBoardReportReason items per requirement for list UI or analytics."},"IDiscussionBoardReportReason":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the report reason.\n\nFrom discussion_board_report_reasons.id. Used for database reference and API operations."},"reason_text":{"type":"string","description":"Human-readable reason label (e.g. 'Spam', 'Harassment').\n\nFrom discussion_board_report_reasons.reason_text. Displayed in report forms and moderation panels."},"active":{"type":"boolean","description":"If true, reason is currently offered to reporting users.\n\nReferences `active` in discussion_board_report_reasons. False if deprecated or system-disabled."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this reason was added to the set of selectable reasons.\n\nReferences `created_at` in discussion_board_report_reasons."}},"required":["id","reason_text","active","created_at"],"description":"Represents a standardized report reason used across the board for reporting inappropriate content.\n\nReferences the discussion_board_report_reasons table and requirements on moderation reason management."},"IDiscussionBoardReportReason.ICreate":{"type":"object","properties":{"reason_text":{"type":"string","description":"Label of the report reason (e.g. 'Harassment', 'Spam').\n\nMust be provided by admin during creation, corresponds to discussion_board_report_reasons.reason_text. Will be unique across reasons."},"active":{"type":"boolean","description":"Set to true if this reason should be immediately offered in report forms.\n\nReferences the `active` column during creation."}},"required":["reason_text","active"],"description":"Request object for creating a new report reason in the moderation/reporting system.\n\nReferences the discussion_board_report_reasons Prisma table."},"IDiscussionBoardReportReason.IUpdate":{"type":"object","properties":{"reason_text":{"oneOf":[{"type":"string","description":"New (possibly updated) label for this standardized report reason.\n\nReferences discussion_board_report_reasons.reason_text. Can be set to null to leave unchanged."},{"type":"null","description":"New (possibly updated) label for this standardized report reason.\n\nReferences discussion_board_report_reasons.reason_text. Can be set to null to leave unchanged."}],"description":"New (possibly updated) label for this standardized report reason.\n\nReferences discussion_board_report_reasons.reason_text. Can be set to null to leave unchanged."},"active":{"oneOf":[{"type":"boolean","description":"New active state for this report reason.\n\nReferences discussion_board_report_reasons.active. Null means no update; otherwise sets whether this reason is currently selectable."},{"type":"null","description":"New active state for this report reason.\n\nReferences discussion_board_report_reasons.active. Null means no update; otherwise sets whether this reason is currently selectable."}],"description":"New active state for this report reason.\n\nReferences discussion_board_report_reasons.active. Null means no update; otherwise sets whether this reason is currently selectable."}},"description":"Update object for report reason records in the moderation system.\n\nReferences the discussion_board_report_reasons Prisma table. Allows updating label or enabling/disabling the reason for user reports.","required":[]},"IDiscussionBoardReportAction.ICreate":{"type":"object","properties":{"report_id":{"type":"string","format":"uuid","description":"Identifies the report on which the action is taken.\n\nReferences discussion_board_report_actions.report_id and is required for traceability."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's ID if performed by admin, else null.\n\nReferences discussion_board_report_actions.admin_id. Populated when operated by an admin."},{"type":"null","format":"uuid","description":"Admin actor's ID if performed by admin, else null.\n\nReferences discussion_board_report_actions.admin_id. Populated when operated by an admin."}],"description":"Admin actor's ID if performed by admin, else null.\n\nReferences discussion_board_report_actions.admin_id. Populated when operated by an admin."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's ID if the action is performed by a moderator, else null.\n\nReferences discussion_board_report_actions.moderator_id. Populated when the action is from moderator."},{"type":"null","format":"uuid","description":"Moderator actor's ID if the action is performed by a moderator, else null.\n\nReferences discussion_board_report_actions.moderator_id. Populated when the action is from moderator."}],"description":"Moderator actor's ID if the action is performed by a moderator, else null.\n\nReferences discussion_board_report_actions.moderator_id. Populated when the action is from moderator."},"action_type":{"type":"string","description":"Type of moderation action (e.g., 'remove_content', 'warn_user', etc).\n\nThis is an atomic event identifier and must align with the moderation workflow and policies. References discussion_board_report_actions.action_type."},"action_notes":{"oneOf":[{"type":"string","description":"Optional notes/details from moderator/admin about context, appeal result, etc.\n\nReferences discussion_board_report_actions.action_notes. May be null if not applicable."},{"type":"null","description":"Optional notes/details from moderator/admin about context, appeal result, etc.\n\nReferences discussion_board_report_actions.action_notes. May be null if not applicable."}],"description":"Optional notes/details from moderator/admin about context, appeal result, etc.\n\nReferences discussion_board_report_actions.action_notes. May be null if not applicable."}},"required":["report_id","action_type"],"description":"Creation payload for logging a moderation action (admin/moderator) on a user report.\n\nCorresponds to discussion_board_report_actions schema; ensures RBAC and audit requirements are met."},"IDiscussionBoardReportAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this report action record.\n\nUnique identifier for each moderation action (from discussion_board_report_actions.id)."},"report_id":{"type":"string","format":"uuid","description":"Identifies the moderation report on which this action is logged.\n\nReferences discussion_board_report_actions.report_id."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of admin who performed the action (nullable).\n\nReferences discussion_board_report_actions.admin_id."},{"type":"null","format":"uuid","description":"ID of admin who performed the action (nullable).\n\nReferences discussion_board_report_actions.admin_id."}],"description":"ID of admin who performed the action (nullable).\n\nReferences discussion_board_report_actions.admin_id."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of moderator who performed the action (nullable).\n\nReferences discussion_board_report_actions.moderator_id."},{"type":"null","format":"uuid","description":"ID of moderator who performed the action (nullable).\n\nReferences discussion_board_report_actions.moderator_id."}],"description":"ID of moderator who performed the action (nullable).\n\nReferences discussion_board_report_actions.moderator_id."},"action_type":{"type":"string","description":"Atomic operation type, e.g. 'close_report', 'warn_user', etc.\n\nDirect mapping from discussion_board_report_actions.action_type."},"action_notes":{"oneOf":[{"type":"string","description":"Moderator/admin explanation/details, if provided.\n\nCorresponds to discussion_board_report_actions.action_notes. May be null."},{"type":"null","description":"Moderator/admin explanation/details, if provided.\n\nCorresponds to discussion_board_report_actions.action_notes. May be null."}],"description":"Moderator/admin explanation/details, if provided.\n\nCorresponds to discussion_board_report_actions.action_notes. May be null."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the action occurred (for audit and chain-of-custody).\n\nReferences discussion_board_report_actions.created_at."}},"required":["id","report_id","action_type","created_at"],"description":"Represents an atomic action performed on a flagged report in the moderation system.\n\nBased strictly on the discussion_board_report_actions Prisma table."},"IDiscussionBoardReportAction.IRequest":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by report being acted upon.\n\nEnables filtering moderation actions for a specific flagged report. Null means ignore filter."},{"type":"null","format":"uuid","description":"Optional filter by report being acted upon.\n\nEnables filtering moderation actions for a specific flagged report. Null means ignore filter."}],"description":"Optional filter by report being acted upon.\n\nEnables filtering moderation actions for a specific flagged report. Null means ignore filter."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by admin actor's ID.\n\nUsed to audit actions performed by a given admin."},{"type":"null","format":"uuid","description":"Optional filter by admin actor's ID.\n\nUsed to audit actions performed by a given admin."}],"description":"Optional filter by admin actor's ID.\n\nUsed to audit actions performed by a given admin."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by moderator actor's ID.\n\nUsed to audit actions performed by a given moderator."},{"type":"null","format":"uuid","description":"Optional filter by moderator actor's ID.\n\nUsed to audit actions performed by a given moderator."}],"description":"Optional filter by moderator actor's ID.\n\nUsed to audit actions performed by a given moderator."},"action_type":{"oneOf":[{"type":"string","description":"Optional filter for action event type (e.g. 'warn_user', 'close_report')."},{"type":"null","description":"Optional filter for action event type (e.g. 'warn_user', 'close_report')."}],"description":"Optional filter for action event type (e.g. 'warn_user', 'close_report')."},"page":{"oneOf":[{"type":"integer","description":"Results page number for pagination (uint32)."},{"type":"null","description":"Results page number for pagination (uint32)."}],"description":"Results page number for pagination (uint32)."},"limit":{"oneOf":[{"type":"integer","description":"Records per page for pagination (uint32)."},{"type":"null","description":"Records per page for pagination (uint32)."}],"description":"Records per page for pagination (uint32)."}},"description":"Request schema for listing/searching moderation/report actions in the discussion_board_report_actions table.\n\nSupports audit, moderation review, and dashboard analytics with advanced search.","required":[]},"IPageIDiscussionBoardReportAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardReportAction"},"description":"Paginated result set of moderation actions (list of report action entries)."}},"required":["pagination","data"],"description":"Paginated moderation actions (report actions) list for admin/moderator dashboards or logs.\n\nConforms to the IPage<T> standard."},"IDiscussionBoardModerationLog.ICreate":{"type":"object","properties":{"log_type":{"type":"string","description":"Type/category of action being logged (e.g. 'block_user', 'remove_content', etc).\n\nDefines logic for later analytics and compliance review. Corresponds to discussion_board_moderation_logs.log_type in schema."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor ID if logged by admin, null if not applicable.\n\nDirectly matches discussion_board_moderation_logs.admin_id; nullable because some logs may be moderator-driven."},{"type":"null","format":"uuid","description":"Admin actor ID if logged by admin, null if not applicable.\n\nDirectly matches discussion_board_moderation_logs.admin_id; nullable because some logs may be moderator-driven."}],"description":"Admin actor ID if logged by admin, null if not applicable.\n\nDirectly matches discussion_board_moderation_logs.admin_id; nullable because some logs may be moderator-driven."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor ID if log pertains to a moderator.\n\nMay be null if log is only admin related, matching discussion_board_moderation_logs.moderator_id."},{"type":"null","format":"uuid","description":"Moderator actor ID if log pertains to a moderator.\n\nMay be null if log is only admin related, matching discussion_board_moderation_logs.moderator_id."}],"description":"Moderator actor ID if log pertains to a moderator.\n\nMay be null if log is only admin related, matching discussion_board_moderation_logs.moderator_id."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"If related to a particular moderation report, this is the reference ID; otherwise null.\n\nSchema: discussion_board_moderation_logs.report_id."},{"type":"null","format":"uuid","description":"If related to a particular moderation report, this is the reference ID; otherwise null.\n\nSchema: discussion_board_moderation_logs.report_id."}],"description":"If related to a particular moderation report, this is the reference ID; otherwise null.\n\nSchema: discussion_board_moderation_logs.report_id."},"details":{"oneOf":[{"type":"string","description":"Elaborative explanation, reasoning, or notes for this moderation log entry.\n\nSchema: discussion_board_moderation_logs.details. Can be null for non-noted events."},{"type":"null","description":"Elaborative explanation, reasoning, or notes for this moderation log entry.\n\nSchema: discussion_board_moderation_logs.details. Can be null for non-noted events."}],"description":"Elaborative explanation, reasoning, or notes for this moderation log entry.\n\nSchema: discussion_board_moderation_logs.details. Can be null for non-noted events."}},"required":["log_type"],"description":"Payload schema for creating a moderation log record in the discussion board system.\n\nAligns strictly with the discussion_board_moderation_logs table requirements."},"IDiscussionBoardModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for moderation log (unique log event identifier).\n\nMatching discussion_board_moderation_logs.id in the database."},"log_type":{"type":"string","description":"Nature/category of action logged (e.g. 'block_user', 'remove_content').\n\nFrom discussion_board_moderation_logs.log_type."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Admin actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.admin_id."},{"type":"null","format":"uuid","description":"Admin actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.admin_id."}],"description":"Admin actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.admin_id."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.moderator_id."},{"type":"null","format":"uuid","description":"Moderator actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.moderator_id."}],"description":"Moderator actor's ID for the logged event (nullable).\n\nCorresponds to discussion_board_moderation_logs.moderator_id."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this log relates to a moderation report, report's unique ID. Null otherwise.\n\nReferences discussion_board_moderation_logs.report_id."},{"type":"null","format":"uuid","description":"If this log relates to a moderation report, report's unique ID. Null otherwise.\n\nReferences discussion_board_moderation_logs.report_id."}],"description":"If this log relates to a moderation report, report's unique ID. Null otherwise.\n\nReferences discussion_board_moderation_logs.report_id."},"details":{"oneOf":[{"type":"string","description":"Additional text details to communicate moderator intent, rationale, or further context (nullable).\n\nFrom discussion_board_moderation_logs.details."},{"type":"null","description":"Additional text details to communicate moderator intent, rationale, or further context (nullable).\n\nFrom discussion_board_moderation_logs.details."}],"description":"Additional text details to communicate moderator intent, rationale, or further context (nullable).\n\nFrom discussion_board_moderation_logs.details."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of moderation log creation (ISO8601).\n\nStored as discussion_board_moderation_logs.created_at."}},"required":["id","log_type","created_at"],"description":"Full record and metadata for a single moderation log entry.\n\nRepresents an immutable audit/compliance trail in the discussion_board_moderation_logs system."},"IDiscussionBoardModerationLog.IRequest":{"type":"object","properties":{"log_type":{"type":"string","description":"The nature or type of the moderation action being logged (e.g., 'block_user', 'remove_content', 'restore_content', 'escalate'). This categorizes the moderation event for analytics, compliance auditing, and traceability. Must directly match code values used in the discussion_board_moderation_logs entity. Supports business requirements for classification and search.\n\nRefer to the discussion_board_moderation_logs Prisma model for allowed values."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this log entry relates to a report, this is the UUID of the associated report (discussion_board_reports.id). Nullable: null if not associated with a report. Enables cross-referencing between moderation logs and report records for full auditability.\n\nSee the Prisma schema for discussion_board_moderation_logs."},{"type":"null","format":"uuid","description":"If this log entry relates to a report, this is the UUID of the associated report (discussion_board_reports.id). Nullable: null if not associated with a report. Enables cross-referencing between moderation logs and report records for full auditability.\n\nSee the Prisma schema for discussion_board_moderation_logs."}],"description":"If this log entry relates to a report, this is the UUID of the associated report (discussion_board_reports.id). Nullable: null if not associated with a report. Enables cross-referencing between moderation logs and report records for full auditability.\n\nSee the Prisma schema for discussion_board_moderation_logs."},"admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the admin who performed the moderation action (discussion_board_admins.id). Nullable if performed by a moderator. Required for linking moderation log to a privileged actor; critical for traceability and legal review.\n\nThis must match an admin assignment entry."},{"type":"null","format":"uuid","description":"The UUID of the admin who performed the moderation action (discussion_board_admins.id). Nullable if performed by a moderator. Required for linking moderation log to a privileged actor; critical for traceability and legal review.\n\nThis must match an admin assignment entry."}],"description":"The UUID of the admin who performed the moderation action (discussion_board_admins.id). Nullable if performed by a moderator. Required for linking moderation log to a privileged actor; critical for traceability and legal review.\n\nThis must match an admin assignment entry."},"moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the moderator who performed the moderation action (discussion_board_moderators.id). Nullable if performed by an admin. Required for proper audit of actor responsibility.\n\nConforms to the discussion_board_moderators entity in Prisma model."},{"type":"null","format":"uuid","description":"The UUID of the moderator who performed the moderation action (discussion_board_moderators.id). Nullable if performed by an admin. Required for proper audit of actor responsibility.\n\nConforms to the discussion_board_moderators entity in Prisma model."}],"description":"The UUID of the moderator who performed the moderation action (discussion_board_moderators.id). Nullable if performed by an admin. Required for proper audit of actor responsibility.\n\nConforms to the discussion_board_moderators entity in Prisma model."},"details":{"oneOf":[{"type":"string","description":"Optional detailed notes about the action. Provides rationale, context, or explanation for the moderation event (e.g., 'User was blocked for repeat harassment.'). Non-required and nullable for straightforward actions without additional remarks.\n\nMaps to 'details' field in discussion_board_moderation_logs."},{"type":"null","description":"Optional detailed notes about the action. Provides rationale, context, or explanation for the moderation event (e.g., 'User was blocked for repeat harassment.'). Non-required and nullable for straightforward actions without additional remarks.\n\nMaps to 'details' field in discussion_board_moderation_logs."}],"description":"Optional detailed notes about the action. Provides rationale, context, or explanation for the moderation event (e.g., 'User was blocked for repeat harassment.'). Non-required and nullable for straightforward actions without additional remarks.\n\nMaps to 'details' field in discussion_board_moderation_logs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the moderation log entry was created. Should be in ISO 8601 date-time format. Critical for ordering, search, and compliance requirements. Must be generated server-side or provided as part of the log creation.\n\nField from discussion_board_moderation_logs model."}},"required":["log_type","created_at"],"description":"Search/filter request parameters for listing discussion_board_moderation_logs. Used by admin endpoints for reviewing moderation events. Contains only properties defined in the Prisma schema, and designed to allow filtered, sorted, or paged log queries.\n\nReference: discussion_board_moderation_logs Prisma comments for guidance on log_type values and field usage."},"IPageIDiscussionBoardModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationLog"}}},"required":["pagination","data"],"description":"A paginated result set containing an array of discussion board moderation log entries. Used for admin moderation review UIs and reporting tools.\n\nThe 'pagination' object provides details on page number, size, record count, and page totals. Data rows match the entity as documented in the discussion_board_moderation_logs schema."},"IDiscussionBoardFlaggedContent.ICreate":{"type":"object","properties":{"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the admin responsible for flagging this content for moderation. Must be a valid admin identity (nullable if flagged by moderator or automatically). Used for audit trail and compliance tracking.\n\nRefer to 'flagged_by_admin_id' in discussion_board_flagged_content."},{"type":"null","format":"uuid","description":"The UUID of the admin responsible for flagging this content for moderation. Must be a valid admin identity (nullable if flagged by moderator or automatically). Used for audit trail and compliance tracking.\n\nRefer to 'flagged_by_admin_id' in discussion_board_flagged_content."}],"description":"The UUID of the admin responsible for flagging this content for moderation. Must be a valid admin identity (nullable if flagged by moderator or automatically). Used for audit trail and compliance tracking.\n\nRefer to 'flagged_by_admin_id' in discussion_board_flagged_content."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the moderator who flagged the content, if applicable. Nullable if flagged by admin or system automation. Checks moderator authority and audit trail for manual flags by moderators.\n\nRefer to 'flagged_by_moderator_id' in discussion_board_flagged_content."},{"type":"null","format":"uuid","description":"The UUID of the moderator who flagged the content, if applicable. Nullable if flagged by admin or system automation. Checks moderator authority and audit trail for manual flags by moderators.\n\nRefer to 'flagged_by_moderator_id' in discussion_board_flagged_content."}],"description":"The UUID of the moderator who flagged the content, if applicable. Nullable if flagged by admin or system automation. Checks moderator authority and audit trail for manual flags by moderators.\n\nRefer to 'flagged_by_moderator_id' in discussion_board_flagged_content."},"flagged_entity_id":{"type":"string","format":"uuid","description":"The UUID of the content entity being flagged (such as post, comment, or user). Must directly reference a legitimate entity. Required for all flag actions to support traceability and moderation workflows.\n\nReference: discussion_board_flagged_content Prisma schema."},"flagged_entity_type":{"type":"string","description":"The type/category of the content being flagged (e.g., 'post', 'comment', 'user', etc). Maps the flag to content domain for business and moderation logic. Required and must match code values used in the schema.\n\nSee discussion_board_flagged_content Prisma definition."},"flag_type":{"type":"string","description":"Nature or reason for the flag (e.g., 'auto', 'manual', 'duplicate', 'filter'). Used for analytics, workflow branching, and audit requirements. Must match flag business codes as used in the schema.\n\nRefer to the discussion_board_flagged_content flag_type column documentation."},"reason":{"oneOf":[{"type":"string","description":"Optional field giving details on why the flag was triggered (e.g., matched keyword, user input, system rationale). May be null for auto-flags or non-detailed entries. Required if business logic enforces certain reasons for manual flags.\n\nReference: discussion_board_flagged_content.schema."},{"type":"null","description":"Optional field giving details on why the flag was triggered (e.g., matched keyword, user input, system rationale). May be null for auto-flags or non-detailed entries. Required if business logic enforces certain reasons for manual flags.\n\nReference: discussion_board_flagged_content.schema."}],"description":"Optional field giving details on why the flag was triggered (e.g., matched keyword, user input, system rationale). May be null for auto-flags or non-detailed entries. Required if business logic enforces certain reasons for manual flags.\n\nReference: discussion_board_flagged_content.schema."},"cleared":{"type":"boolean","description":"Indicates whether this flagged content has been cleared (true) or is pending review (false). Required for moderation workflow management and analytics. Must be accurately maintained by moderation process.\n\nSee Prisma schema flag for 'cleared'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the flagged content record was created. Required for ordering, SLA reporting, and compliance. Should be set by the backend or supplied explicitly.\n\nRefer to created_at in the Prisma model."}},"required":["flagged_entity_id","flagged_entity_type","flag_type","cleared","created_at"],"description":"Creation request payload for discussion_board_flagged_content. Used by admin to record a new moderation-relevant flag on a piece of content. Includes full context for the flagging event (what, who, when, and why).\n\nComplies with schema requirements for auditability and traceable moderation flows."},"IDiscussionBoardFlaggedContent":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for each flagged content record. Generated by the database. Required for referencing, auditing, and traceability of moderation events.\n\nMaps to the 'id' column in the discussion_board_flagged_content schema."},"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of admin who flagged the content, if applicable. Null if not flagged by admin. Provides auditing and compliance context for privilege-level flagging.\n\nSee 'flagged_by_admin_id' in discussion_board_flagged_content."},{"type":"null","format":"uuid","description":"UUID of admin who flagged the content, if applicable. Null if not flagged by admin. Provides auditing and compliance context for privilege-level flagging.\n\nSee 'flagged_by_admin_id' in discussion_board_flagged_content."}],"description":"UUID of admin who flagged the content, if applicable. Null if not flagged by admin. Provides auditing and compliance context for privilege-level flagging.\n\nSee 'flagged_by_admin_id' in discussion_board_flagged_content."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID for the moderator responsible for the flag, or null if flagged by another actor. Ensures traceability and proper authorization for moderator-led flagging events.\n\nRefers to discussion_board_flagged_content.moderator_id."},{"type":"null","format":"uuid","description":"UUID for the moderator responsible for the flag, or null if flagged by another actor. Ensures traceability and proper authorization for moderator-led flagging events.\n\nRefers to discussion_board_flagged_content.moderator_id."}],"description":"UUID for the moderator responsible for the flag, or null if flagged by another actor. Ensures traceability and proper authorization for moderator-led flagging events.\n\nRefers to discussion_board_flagged_content.moderator_id."},"flagged_entity_id":{"type":"string","format":"uuid","description":"The unique identifier for the flagged content entity (post, comment, user, etc). Central for linking this moderation event to specific objects within the discussion board.\n\nRefer to 'flagged_entity_id' in discussion_board_flagged_content."},"flagged_entity_type":{"type":"string","description":"Content type/category for this flag record (e.g., 'post', 'comment', 'user'). Illustrates the origin domain of the flagged entity for reporting and workflow purposes.\n\nSee 'flagged_entity_type' field for semantic code values."},"flag_type":{"type":"string","description":"Explains the nature or mechanism of the flag, such as 'auto', 'manual', etc. Used for workflow and analytic processing by the moderation team.\n\nMatches flag_type in the discussion_board_flagged_content schema."},"reason":{"oneOf":[{"type":"string","description":"Additional contextual detail for the flag event (e.g., rule triggered, user input, machine analysis). Nullable and optional for some flag types. Supports moderation review and appeals processes.\n\nRefer to 'reason' in the schema for further constraints and business logic."},{"type":"null","description":"Additional contextual detail for the flag event (e.g., rule triggered, user input, machine analysis). Nullable and optional for some flag types. Supports moderation review and appeals processes.\n\nRefer to 'reason' in the schema for further constraints and business logic."}],"description":"Additional contextual detail for the flag event (e.g., rule triggered, user input, machine analysis). Nullable and optional for some flag types. Supports moderation review and appeals processes.\n\nRefer to 'reason' in the schema for further constraints and business logic."},"cleared":{"type":"boolean","description":"Indicates whether the flagged event has been reviewed/cleared (true) or still requires moderator/admin review (false). Workflow and dashboard logic rely on this field for routing items. Must be updated as cases are processed.\n\nSee 'cleared' in discussion_board_flagged_content."},"created_at":{"type":"string","format":"date-time","description":"The ISO 8601 timestamp when this flagged content was registered by the system. Used for chronological ordering and SLA validation within moderation operations.\n\nMaps directly to 'created_at' in the model."}},"required":["id","flagged_entity_id","flagged_entity_type","flag_type","cleared","created_at"],"description":"Full detail of a flagged content record used for moderation management. Encapsulates audit trail, source/actor references, and moderation domain semantics.\n\nComplies strictly with discussion_board_flagged_content field documentation."},"IDiscussionBoardFlaggedContent.IRequest":{"type":"object","properties":{"flagged_entity_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID for filtering to a particular object under moderation. Null for no filtering. This supports targeted review of flagged items based on the flagged content entity."},{"type":"null","format":"uuid","description":"UUID for filtering to a particular object under moderation. Null for no filtering. This supports targeted review of flagged items based on the flagged content entity."}],"description":"UUID for filtering to a particular object under moderation. Null for no filtering. This supports targeted review of flagged items based on the flagged content entity."},"flagged_entity_type":{"oneOf":[{"type":"string","description":"Allows filtering flag records by specific content category ('post', 'comment', 'user', etc). Null disables this filter."},{"type":"null","description":"Allows filtering flag records by specific content category ('post', 'comment', 'user', etc). Null disables this filter."}],"description":"Allows filtering flag records by specific content category ('post', 'comment', 'user', etc). Null disables this filter."},"flag_type":{"oneOf":[{"type":"string","description":"Optionally filter on type of flag event. May be null if not set. Enables review and analytics by cause ('auto', 'manual', etc)."},{"type":"null","description":"Optionally filter on type of flag event. May be null if not set. Enables review and analytics by cause ('auto', 'manual', etc)."}],"description":"Optionally filter on type of flag event. May be null if not set. Enables review and analytics by cause ('auto', 'manual', etc)."},"cleared":{"oneOf":[{"type":"boolean","description":"Boolean (or null) to filter only cleared/only uncleared, etc. SLA metrics and workflow reporting may rely on this filter."},{"type":"null","description":"Boolean (or null) to filter only cleared/only uncleared, etc. SLA metrics and workflow reporting may rely on this filter."}],"description":"Boolean (or null) to filter only cleared/only uncleared, etc. SLA metrics and workflow reporting may rely on this filter."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 timestamp or null for no filter. Enables time windowed queries on flagged moderation actions."},{"type":"null","format":"date-time","description":"ISO 8601 timestamp or null for no filter. Enables time windowed queries on flagged moderation actions."}],"description":"ISO 8601 timestamp or null for no filter. Enables time windowed queries on flagged moderation actions."},"flagged_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Use to restrict search results to flags by a specific admin actor, if needed."},{"type":"null","format":"uuid","description":"Use to restrict search results to flags by a specific admin actor, if needed."}],"description":"Use to restrict search results to flags by a specific admin actor, if needed."},"flagged_by_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Use for filtering all content flagged by a specific moderator (if applicable). May be null or unset."},{"type":"null","format":"uuid","description":"Use for filtering all content flagged by a specific moderator (if applicable). May be null or unset."}],"description":"Use for filtering all content flagged by a specific moderator (if applicable). May be null or unset."}},"description":"Request parameters for searching/filtering flagged content moderation records. All specific fields align with columns in discussion_board_flagged_content.","required":[]},"IPageIDiscussionBoardFlaggedContent":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardFlaggedContent"}}},"required":["pagination","data"],"description":"A paginated list of flagged content moderation records, as per schema. Combines page info with an array of flagged content records."},"IDiscussionBoardNotification.IRequest":{"type":"object","properties":{"is_read":{"oneOf":[{"type":"boolean","description":"Optional boolean or null for filtering by notification read status. Allows user to view only unread notifications if desired."},{"type":"null","description":"Optional boolean or null for filtering by notification read status. Allows user to view only unread notifications if desired."}],"description":"Optional boolean or null for filtering by notification read status. Allows user to view only unread notifications if desired."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter notifications delivered after this timestamp (inclusive). Allows for paging or fetching recent notifications."},{"type":"null","format":"date-time","description":"Filter notifications delivered after this timestamp (inclusive). Allows for paging or fetching recent notifications."}],"description":"Filter notifications delivered after this timestamp (inclusive). Allows for paging or fetching recent notifications."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Filter notifications read after this timestamp. Useful for archiving or inbox maintenance features."},{"type":"null","format":"date-time","description":"Filter notifications read after this timestamp. Useful for archiving or inbox maintenance features."}],"description":"Filter notifications read after this timestamp. Useful for archiving or inbox maintenance features."},"type":{"oneOf":[{"type":"string","description":"Filter on notification type codes ('new_reply', 'report_update', etc). Enables UI to support tabbed or custom displays for notification categories."},{"type":"null","description":"Filter on notification type codes ('new_reply', 'report_update', etc). Enables UI to support tabbed or custom displays for notification categories."}],"description":"Filter on notification type codes ('new_reply', 'report_update', etc). Enables UI to support tabbed or custom displays for notification categories."},"content":{"oneOf":[{"type":"string","description":"Filter/search within the notification content string for keyword search and advanced usability."},{"type":"null","description":"Filter/search within the notification content string for keyword search and advanced usability."}],"description":"Filter/search within the notification content string for keyword search and advanced usability."}},"description":"Request parameters for searching/filtering the notification inbox for the active user. All fields are schema-mapped to the discussion_board_notifications entity, and may be combined for advanced query control.","required":[]},"IPageIDiscussionBoardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardNotification"}}},"required":["pagination","data"],"description":"Paginated response for a user's system/activity notification inbox. Contains full message details for each notification visible to the user."},"IDiscussionBoardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the notification record. Generated by database at time of creation."},"recipient_user_id":{"type":"string","format":"uuid","description":"UUID of the recipient user (discussion_board_members/admins/moderators). Identifies for whom the notification is intended."},"type":{"type":"string","description":"Code value for notification category (e.g., 'new_reply', 'system_announcement'). Used for routing and user control of delivery types."},"content":{"type":"string","description":"Human-readable notification body/content for end user display. Must be concise but sufficient for notification context."},"is_read":{"type":"boolean","description":"Boolean flag indicating whether user has marked notification as read."},"delivered_at":{"type":"string","format":"date-time","description":"Timestamp when notification was made available to user (delivered, not necessarily seen)."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp (ISO 8601) for when notification was read. Null if unread."},{"type":"null","format":"date-time","description":"Nullable timestamp (ISO 8601) for when notification was read. Null if unread."}],"description":"Nullable timestamp (ISO 8601) for when notification was read. Null if unread."}},"required":["id","recipient_user_id","type","content","is_read","delivered_at"],"description":"A single notification object as stored in discussion_board_notifications, for inbox and notification center UIs. Includes details required for rendering and response state. 'read_at' is nullable if unread."},"IDiscussionBoardNotification.ICreate":{"type":"object","properties":{"recipient_user_id":{"type":"string","format":"uuid","description":"UUID of the intended recipient (a member/admin/moderator ID). Establishes notification targeting per system rules."},"type":{"type":"string","description":"Notification type code/category (e.g., 'new_reply', 'report_update', 'system_announcement'). Only code values used in the schema are permitted."},"content":{"type":"string","description":"Notification content text (user-readable). Must concisely describe the event, action, or message required for user attention."},"is_read":{"type":"boolean","description":"Boolean representing read/unread status upon creation. Normally false, but may be true in rare cases (e.g., if created as already seen due to triggering action by user themselves)."},"delivered_at":{"type":"string","format":"date-time","description":"Datetime notification entry is delivered for consumption. ISO 8601 required; UTC or board-local time as business rules dictate."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for when notification was read. Null if not read or deliberately inserted as unread."},{"type":"null","format":"date-time","description":"Nullable timestamp for when notification was read. Null if not read or deliberately inserted as unread."}],"description":"Nullable timestamp for when notification was read. Null if not read or deliberately inserted as unread."}},"required":["recipient_user_id","type","content","is_read","delivered_at"],"description":"Notification creation body for authenticated user or system delivery. Used for generating new inbox notifications for users with specific content and category codes. Compliant with schema constraints re: code types and format requirements."},"IDiscussionBoardNotification.IUpdate":{"type":"object","properties":{"is_read":{"type":"boolean","description":"Whether the notification is now read (true) or unread (false). Changes trigger inbox or UI behavior. Must be updated as soon as user opens/reads notification UI."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for when notification was read. Set if and only if is_read becomes true."},{"type":"null","format":"date-time","description":"Nullable timestamp for when notification was read. Set if and only if is_read becomes true."}],"description":"Nullable timestamp for when notification was read. Set if and only if is_read becomes true."}},"required":["is_read"],"description":"Patch/update body for notification status and optional read timestamp. Permits marking as read/unread in inbox. Business logic determines when to update read_at."},"IDiscussionBoardUserNotificationSettings.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"UUID of the member to whom this settings record applies. There must be only one notification settings record per user id (enforced by unique constraint)."},"receive_email_notifications":{"type":"boolean","description":"Whether to deliver notifications to user's email address. Enables bulk/muted email settings board-wide."},"receive_push_notifications":{"type":"boolean","description":"Whether to send push notifications to user's devices. Controls mobile/desktop notification behavior."},"mute_types":{"oneOf":[{"type":"string","description":"Comma-separated string of notification type codes to mute for this user (e.g., 'like,report_mention'), or null if user does not mute any. Delivers granular control over notification types."},{"type":"null","description":"Comma-separated string of notification type codes to mute for this user (e.g., 'like,report_mention'), or null if user does not mute any. Delivers granular control over notification types."}],"description":"Comma-separated string of notification type codes to mute for this user (e.g., 'like,report_mention'), or null if user does not mute any. Delivers granular control over notification types."}},"required":["user_id","receive_email_notifications","receive_push_notifications"],"description":"Settings creation schema for user-level notification preferences. Used in onboarding or settings UI to initialize notification preferences for a member."},"IDiscussionBoardUserNotificationSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this notification settings record.\n\nReferences the discussion_board_user_notification_settings table's `id` column, a UUID that uniquely distinguishes each user's notification settings entry."},"user_id":{"type":"string","format":"uuid","description":"The user's UUID this settings record applies to.\n\nReferences the `user_id` column in discussion_board_user_notification_settings, linking to the discussion_board_members table. Ensures each user only has one settings record."},"receive_email_notifications":{"type":"boolean","description":"Whether or not the user will receive notifications by email.\n\nMaps to the `receive_email_notifications` boolean in Prisma schema. True means email notifications are enabled; false disables them. Core for user notification preferences."},"receive_push_notifications":{"type":"boolean","description":"Controls if the user receives push/mobile notifications.\n\nDirect mapping to `receive_push_notifications` in the schema. True enables push notifications; false disables them."},"mute_types":{"oneOf":[{"type":"string","description":"Comma-separated notification type list to mute (if any).\n\nMaps to the `mute_types` nullable field in the schema. Example: 'like,report_mention'. If null, the user mutes no notification types."},{"type":"null","description":"Comma-separated notification type list to mute (if any).\n\nMaps to the `mute_types` nullable field in the schema. Example: 'like,report_mention'. If null, the user mutes no notification types."}],"description":"Comma-separated notification type list to mute (if any).\n\nMaps to the `mute_types` nullable field in the schema. Example: 'like,report_mention'. If null, the user mutes no notification types."}},"required":["id","user_id","receive_email_notifications","receive_push_notifications"],"description":"Discussion Board User Notification Settings entity, tracking each user's per-channel notification preferences.\n\nReferences discussion_board_user_notification_settings Prisma table with settings for email, push notifications, and notification-type mutes. This record is uniquely mapped to a user."},"IDiscussionBoardUserNotificationSettings.IRequest":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Target user to search for; filters settings for a given user ID.\n\nReferences the `user_id` column. If omitted, defaults to current authenticated user in typical usage."},"receive_email_notifications":{"type":"boolean","description":"Optional filter by email notification ON/OFF."},"receive_push_notifications":{"type":"boolean","description":"Optional filter by push notification ON/OFF."},"mute_types":{"type":"string","description":"Optional substring or exact match filter for mute_types (comma separated)."}},"description":"Request/query type for searching notification settings. Accepts any combination of filters on user ID, email/push notification flags, or mute type keywords.","required":[]},"IDiscussionBoardUserNotificationSettings.IUpdate":{"type":"object","properties":{"receive_email_notifications":{"type":"boolean","description":"(Required) Whether the user wants email notifications.\n\nMaps to schema."},"receive_push_notifications":{"type":"boolean","description":"(Required) Whether the user wants push notifications.\n\nMaps to schema."},"mute_types":{"oneOf":[{"type":"string","description":"Comma-separated muted notification types to set (nullable).\n\nMaps to schema. Example: 'like,moderation'. Null clears mutes."},{"type":"null","description":"Comma-separated muted notification types to set (nullable).\n\nMaps to schema. Example: 'like,moderation'. Null clears mutes."}],"description":"Comma-separated muted notification types to set (nullable).\n\nMaps to schema. Example: 'like,moderation'. Null clears mutes."}},"required":["receive_email_notifications","receive_push_notifications"],"description":"Payload for updating notification channel flags and muted types for a user."},"IDiscussionBoardAuditTrail.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"User profile ID who performed the action.\n\nReferences `actor_id` column, must match a valid user in discussion_board_user_profiles."},"action_type":{"type":"string","description":"Action type for the audit trail log (e.g., 'create', 'update', 'delete', 'moderation', 'login').\n\nFree string (matches domain event names)."},"target_table":{"type":"string","description":"Entity/table affected by the action (e.g., 'discussion_board_posts').\n\nMatches the `target_table` string in schema."},"target_id":{"type":"string","format":"uuid","description":"UUID primary key of record/row affected by the action.\n\nMatches `target_id` in schema."},"details":{"oneOf":[{"type":"string","description":"Optional extra context - free text about the action (pre/post state, rationales, summaries).\n\nReferences the nullable `details` column."},{"type":"null","description":"Optional extra context - free text about the action (pre/post state, rationales, summaries).\n\nReferences the nullable `details` column."}],"description":"Optional extra context - free text about the action (pre/post state, rationales, summaries).\n\nReferences the nullable `details` column."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the audit record was created (ISO8601 UTC, e.g. '2025-07-28T07:52:36.294Z').\n\nThis maps to the Prisma DateTime field for `created_at`."}},"required":["actor_id","action_type","target_table","target_id","created_at"],"description":"Audit trail creation payload. Used to log a new system action for traceability. All properties directly map to columns from the audit log schema."},"IDiscussionBoardAuditTrail":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique UUID for this audit log entry.\n\nPrimary key in discussion_board_audit_trails."},"actor_id":{"type":"string","format":"uuid","description":"UUID of user who performed the action.\n\nRequired by discussion_board_audit_trails."},"action_type":{"type":"string","description":"Nature of the action (per schema column); describes 'create', 'update', 'delete', 'login', etc."},"target_table":{"type":"string","description":"The table/entity this action targeted (as string, e.g. 'discussion_board_posts').\n\nMatches schema."},"target_id":{"type":"string","format":"uuid","description":"The UUID ID of the entity acted upon (matches schema column)."},"details":{"oneOf":[{"type":"string","description":"Free-text details for this action (nullable, may explain context/change)."},{"type":"null","description":"Free-text details for this action (nullable, may explain context/change)."}],"description":"Free-text details for this action (nullable, may explain context/change)."},"created_at":{"type":"string","format":"date-time","description":"UTC timestamp for when the audit entry was created (ISO 8601 format)."}},"required":["id","actor_id","action_type","target_table","target_id","created_at"],"description":"Full audit log entity for a single system or user-level action, as persisted in the audit trail. Encompasses all columns per schema."},"IDiscussionBoardAuditTrail.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"Filter: only records by this user (actor_id column); optional."},"action_type":{"type":"string","description":"Filter by event type string ('create','moderation', etc); optional."},"target_table":{"type":"string","description":"Filter by business/table entity name; optional."},"target_id":{"type":"string","format":"uuid","description":"Filter: restrict to actions on entity with this id; optional."},"details":{"type":"string","description":"Full text contains-search for this context field (optional)."},"created_at_start":{"type":"string","format":"date-time","description":"Filter: start timestamp for when audit records were created (ISO 8601, UTC). Optional."},"created_at_end":{"type":"string","format":"date-time","description":"Filter: end timestamp for audit creation time (optional, ISO 8601)."}},"description":"Request payload for paginated/search/filter queries on audit logs. Maps directly to filterable columns or search fields on audit table.","required":[]},"IPageIDiscussionBoardAuditTrail":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAuditTrail"},"description":"List of audit log entries for this page."}},"required":["pagination","data"],"description":"Paginated result set for audit trail log queries. Contains page info and array of audit trail objects."},"Idiscussion_board_action_histories.ICreate":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"User profile UUID who performed the action history event.\n\nMaps to schema."},"action_type":{"type":"string","description":"Nature of user/system event (matches 'action_type' column); e.g., 'post_created', 'report_submitted'."},"target_table":{"type":"string","description":"Table/entity where the action occurred (schema: target_table; e.g., 'discussion_board_posts')."},"target_id":{"type":"string","format":"uuid","description":"UUID for entity affected by action (target_id schema field)."},"summary":{"oneOf":[{"type":"string","description":"Optional, succinct summary/context for this action (schema: summary column, nullable)."},{"type":"null","description":"Optional, succinct summary/context for this action (schema: summary column, nullable)."}],"description":"Optional, succinct summary/context for this action (schema: summary column, nullable)."},"occurred_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp for when the action occurred (matches occurred_at column; UTC recommended)."}},"required":["actor_id","action_type","target_table","target_id","occurred_at"],"description":"Payload to create a new action history log, mapping directly to the action_histories schema."},"Idiscussion_board_action_histories":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this action history record (id column schema).\n\nUniquely identifies the user/system event."},"actor_id":{"type":"string","format":"uuid","description":"User profile id who caused this event. References discussion_board_user_profiles."},"action_type":{"type":"string","description":"Event type (schema: action_type; e.g., 'post_created')."},"target_table":{"type":"string","description":"Table/entity referenced by the action (schema: target_table)."},"target_id":{"type":"string","format":"uuid","description":"UUID of record/entity affected by this action."},"summary":{"oneOf":[{"type":"string","description":"Short summary for analytics/reporting (schema: summary, nullable)."},{"type":"null","description":"Short summary for analytics/reporting (schema: summary, nullable)."}],"description":"Short summary for analytics/reporting (schema: summary, nullable)."},"occurred_at":{"type":"string","format":"date-time","description":"Timestamp of occurrence; schema: occurred_at (UTC, ISO8601 string)."}},"required":["id","actor_id","action_type","target_table","target_id","occurred_at"],"description":"Full action history object representing a single user or system event within the board (all schema columns mapped)."},"Idiscussion_board_action_histories.IRequest":{"type":"object","properties":{"actor_id":{"type":"string","format":"uuid","description":"Optional: Only return action histories for given user profile (actor_id schema)."},"action_type":{"type":"string","description":"Optional: Filter results by action type string (schema: action_type)."},"target_table":{"type":"string","description":"Optional: Restrict to given table/entity name (target_table schema)."},"target_id":{"type":"string","format":"uuid","description":"Optional: Only display actions affecting entity with this UUID (target_id schema)."},"summary":{"type":"string","description":"Optional: Full text filter for summary phrase (summary schema field)."},"occurred_at_start":{"type":"string","format":"date-time","description":"Filter: minimum occurred_at timestamp to include (ISO8601)."},"occurred_at_end":{"type":"string","format":"date-time","description":"Filter: maximum occurred_at timestamp to include (ISO8601)."}},"description":"Request query type for searching, filtering, or paginating board action histories.\n\nAll properties are optional and map 1:1 to schema columns that support filter/search.","required":[]},"IPageIdiscussion_board_action_histories":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussion_board_action_histories"},"description":"Action history records for requested page/query.\n\nReferences array of action history entities."}},"required":["pagination","data"],"description":"Paginated result set/container for action history log search (page info + list of actions for this page)."}},"authorization":[{"name":"admin","description":"Responsible for managing the platform, moderating content, handling reports, managing users, and configuring system settings. Has the highest level of privileges."},{"name":"moderator","description":"Assists admins in moderating the discussion board. Can edit or remove posts, resolve disputes, and manage flagged content. Cannot access system settings."},{"name":"member","description":"Registered user who can create topics, post replies, like or dislike posts, and report inappropriate content. Has standard participation privileges."},{"name":"guest","description":"Unauthenticated user who can browse public discussions and topics but cannot participate or post. Has read-only access."}]}},"created_at":"2025-07-28T08:29:47.758Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":1224238,"input":{"total":1151246,"cached":3840},"output":{"total":72992,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1224238,"input":{"total":1151246,"cached":3840},"output":{"total":72992,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1224238,"input":{"total":1151246,"cached":3840},"output":{"total":72992,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1224238,"input":{"total":1151246,"cached":3840},"output":{"total":72992,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}}]