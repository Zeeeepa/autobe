[{"event":{"type":"interfaceStart","created_at":"2025-07-25T05:13:01.287Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceEndpoints","endpoints":[{"path":"/discussionboard/members","method":"post"},{"path":"/discussionboard/members","method":"patch"},{"path":"/discussionboard/members/{id}","method":"get"},{"path":"/discussionboard/members/{id}","method":"put"},{"path":"/discussionboard/members/{id}","method":"delete"},{"path":"/my/discussionboard/member/profiles","method":"patch"},{"path":"/my/discussionboard/member/profiles/{id}","method":"put"},{"path":"/my/discussionboard/member/preferences","method":"patch"},{"path":"/my/discussionboard/member/preferences/{id}","method":"put"},{"path":"/discussionboard/moderators","method":"post"},{"path":"/discussionboard/moderators","method":"patch"},{"path":"/discussionboard/moderators/{id}","method":"get"},{"path":"/discussionboard/moderators/{id}","method":"put"},{"path":"/discussionboard/moderators/{id}","method":"delete"},{"path":"/discussionboard/admins","method":"post"},{"path":"/discussionboard/admins","method":"patch"},{"path":"/discussionboard/admins/{id}","method":"get"},{"path":"/discussionboard/admins/{id}","method":"put"},{"path":"/discussionboard/admins/{id}","method":"delete"},{"path":"/discussionboard/channels","method":"post"},{"path":"/discussionboard/channels","method":"patch"},{"path":"/discussionboard/channels/{id}","method":"get"},{"path":"/discussionboard/channels/{id}","method":"put"},{"path":"/discussionboard/channels/{id}","method":"delete"},{"path":"/discussionboard/sections","method":"post"},{"path":"/discussionboard/sections","method":"patch"},{"path":"/discussionboard/sections/{id}","method":"get"},{"path":"/discussionboard/sections/{id}","method":"put"},{"path":"/discussionboard/sections/{id}","method":"delete"},{"path":"/discussionboard/configurations","method":"post"},{"path":"/discussionboard/configurations","method":"patch"},{"path":"/discussionboard/configurations/{id}","method":"get"},{"path":"/discussionboard/configurations/{id}","method":"put"},{"path":"/discussionboard/configurations/{id}","method":"delete"},{"path":"/discussionboard/notifications","method":"post"},{"path":"/discussionboard/notifications","method":"patch"},{"path":"/discussionboard/notifications/{id}","method":"get"},{"path":"/discussionboard/notifications/{id}","method":"put"},{"path":"/discussionboard/notifications/{id}","method":"delete"},{"path":"/discussionboard/settings","method":"post"},{"path":"/discussionboard/settings","method":"patch"},{"path":"/discussionboard/settings/{id}","method":"get"},{"path":"/discussionboard/settings/{id}","method":"put"},{"path":"/discussionboard/settings/{id}","method":"delete"},{"path":"/discussionboard/boards","method":"post"},{"path":"/discussionboard/boards","method":"patch"},{"path":"/discussionboard/boards/{id}","method":"get"},{"path":"/discussionboard/boards/{id}","method":"put"},{"path":"/discussionboard/boards/{id}","method":"delete"},{"path":"/discussionboard/boardCategories","method":"post"},{"path":"/discussionboard/boardCategories","method":"patch"},{"path":"/discussionboard/boardCategories/{id}","method":"get"},{"path":"/discussionboard/boardCategories/{id}","method":"put"},{"path":"/discussionboard/boardCategories/{id}","method":"delete"},{"path":"/discussionboard/boardSettings","method":"post"},{"path":"/discussionboard/boardSettings","method":"patch"},{"path":"/discussionboard/boardSettings/{id}","method":"get"},{"path":"/discussionboard/boardSettings/{id}","method":"put"},{"path":"/discussionboard/boardSettings/{id}","method":"delete"},{"path":"/discussionboard/boardModerators","method":"post"},{"path":"/discussionboard/boardModerators","method":"patch"},{"path":"/discussionboard/boardModerators/{id}","method":"get"},{"path":"/discussionboard/boardModerators/{id}","method":"put"},{"path":"/discussionboard/boardModerators/{id}","method":"delete"},{"path":"/discussionboard/threads","method":"post"},{"path":"/discussionboard/threads","method":"patch"},{"path":"/discussionboard/threads/{id}","method":"get"},{"path":"/discussionboard/threads/{id}","method":"put"},{"path":"/discussionboard/threads/{id}","method":"delete"},{"path":"/discussionboard/threadSnapshots","method":"post"},{"path":"/discussionboard/threadSnapshots","method":"patch"},{"path":"/discussionboard/threadSnapshots/{id}","method":"get"},{"path":"/discussionboard/threadSnapshots/{id}","method":"put"},{"path":"/discussionboard/threadSnapshots/{id}","method":"delete"},{"path":"/discussionboard/threadTags","method":"post"},{"path":"/discussionboard/threadTags","method":"patch"},{"path":"/discussionboard/threadTags/{id}","method":"get"},{"path":"/discussionboard/threadTags/{id}","method":"put"},{"path":"/discussionboard/threadTags/{id}","method":"delete"},{"path":"/discussionboard/posts","method":"post"},{"path":"/discussionboard/posts","method":"patch"},{"path":"/discussionboard/posts/{id}","method":"get"},{"path":"/discussionboard/posts/{id}","method":"put"},{"path":"/discussionboard/posts/{id}","method":"delete"},{"path":"/discussionboard/postSnapshots","method":"post"},{"path":"/discussionboard/postSnapshots","method":"patch"},{"path":"/discussionboard/postSnapshots/{id}","method":"get"},{"path":"/discussionboard/postSnapshots/{id}","method":"put"},{"path":"/discussionboard/postSnapshots/{id}","method":"delete"},{"path":"/discussionboard/postVotes","method":"post"},{"path":"/discussionboard/postVotes","method":"patch"},{"path":"/discussionboard/postVotes/{id}","method":"get"},{"path":"/discussionboard/postVotes/{id}","method":"put"},{"path":"/discussionboard/postVotes/{id}","method":"delete"},{"path":"/discussionboard/postReports","method":"post"},{"path":"/discussionboard/postReports","method":"patch"},{"path":"/discussionboard/postReports/{id}","method":"get"},{"path":"/discussionboard/postReports/{id}","method":"put"},{"path":"/discussionboard/postReports/{id}","method":"delete"},{"path":"/discussionboard/postReferences","method":"post"},{"path":"/discussionboard/postReferences","method":"patch"},{"path":"/discussionboard/postReferences/{id}","method":"get"},{"path":"/discussionboard/postReferences/{id}","method":"put"},{"path":"/discussionboard/postReferences/{id}","method":"delete"},{"path":"/discussionboard/comments","method":"post"},{"path":"/discussionboard/comments","method":"patch"},{"path":"/discussionboard/comments/{id}","method":"get"},{"path":"/discussionboard/comments/{id}","method":"put"},{"path":"/discussionboard/comments/{id}","method":"delete"},{"path":"/discussionboard/commentSnapshots","method":"post"},{"path":"/discussionboard/commentSnapshots","method":"patch"},{"path":"/discussionboard/commentSnapshots/{id}","method":"get"},{"path":"/discussionboard/commentSnapshots/{id}","method":"put"},{"path":"/discussionboard/commentSnapshots/{id}","method":"delete"},{"path":"/discussionboard/commentVotes","method":"post"},{"path":"/discussionboard/commentVotes","method":"patch"},{"path":"/discussionboard/commentVotes/{id}","method":"get"},{"path":"/discussionboard/commentVotes/{id}","method":"put"},{"path":"/discussionboard/commentVotes/{id}","method":"delete"},{"path":"/discussionboard/commentReports","method":"post"},{"path":"/discussionboard/commentReports","method":"patch"},{"path":"/discussionboard/commentReports/{id}","method":"get"},{"path":"/discussionboard/commentReports/{id}","method":"put"},{"path":"/discussionboard/commentReports/{id}","method":"delete"},{"path":"/discussionboard/reports","method":"post"},{"path":"/discussionboard/reports","method":"patch"},{"path":"/discussionboard/reports/{id}","method":"get"},{"path":"/discussionboard/reports/{id}","method":"put"},{"path":"/discussionboard/reports/{id}","method":"delete"},{"path":"/discussionboard/reportTypes","method":"post"},{"path":"/discussionboard/reportTypes","method":"patch"},{"path":"/discussionboard/reportTypes/{id}","method":"get"},{"path":"/discussionboard/reportTypes/{id}","method":"put"},{"path":"/discussionboard/reportTypes/{id}","method":"delete"},{"path":"/discussionboard/moderationActions","method":"post"},{"path":"/discussionboard/moderationActions","method":"patch"},{"path":"/discussionboard/moderationActions/{id}","method":"get"},{"path":"/discussionboard/moderationActions/{id}","method":"put"},{"path":"/discussionboard/moderationActions/{id}","method":"delete"},{"path":"/discussionboard/bans","method":"post"},{"path":"/discussionboard/bans","method":"patch"},{"path":"/discussionboard/bans/{id}","method":"get"},{"path":"/discussionboard/bans/{id}","method":"put"},{"path":"/discussionboard/bans/{id}","method":"delete"},{"path":"/discussionboard/warnings","method":"post"},{"path":"/discussionboard/warnings","method":"patch"},{"path":"/discussionboard/warnings/{id}","method":"get"},{"path":"/discussionboard/warnings/{id}","method":"put"},{"path":"/discussionboard/warnings/{id}","method":"delete"},{"path":"/discussionboard/engagementMetrics","method":"patch"},{"path":"/discussionboard/engagementMetrics/{id}","method":"get"},{"path":"/discussionboard/activityLogs","method":"patch"},{"path":"/discussionboard/activityLogs/{id}","method":"get"},{"path":"/discussionboard/trendingTopics","method":"patch"},{"path":"/discussionboard/trendingTopics/{id}","method":"get"},{"path":"/discussionboard/notificationTemplates","method":"post"},{"path":"/discussionboard/notificationTemplates","method":"patch"},{"path":"/discussionboard/notificationTemplates/{id}","method":"get"},{"path":"/discussionboard/notificationTemplates/{id}","method":"put"},{"path":"/discussionboard/notificationTemplates/{id}","method":"delete"},{"path":"/discussionboard/notificationPreferences","method":"post"},{"path":"/discussionboard/notificationPreferences","method":"patch"},{"path":"/discussionboard/notificationPreferences/{id}","method":"get"},{"path":"/discussionboard/notificationPreferences/{id}","method":"put"},{"path":"/discussionboard/notificationPreferences/{id}","method":"delete"},{"path":"/discussionboard/privacyPolicies","method":"post"},{"path":"/discussionboard/privacyPolicies","method":"patch"},{"path":"/discussionboard/privacyPolicies/{id}","method":"get"},{"path":"/discussionboard/privacyPolicies/{id}","method":"put"},{"path":"/discussionboard/privacyPolicies/{id}","method":"delete"},{"path":"/discussionboard/dataErasureRequests","method":"post"},{"path":"/discussionboard/dataErasureRequests","method":"patch"},{"path":"/discussionboard/dataErasureRequests/{id}","method":"get"},{"path":"/discussionboard/dataErasureRequests/{id}","method":"put"},{"path":"/discussionboard/dataErasureRequests/{id}","method":"delete"}],"created_at":"2025-07-25T05:13:01.287Z","step":0},"tokenUsage":{"facade":{"aggregate":{"total":43908,"input":{"total":41425,"cached":0},"output":{"total":2483,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":43908,"input":{"total":41425,"cached":0},"output":{"total":2483,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":43908,"input":{"total":41425,"cached":0},"output":{"total":2483,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":43908,"input":{"total":41425,"cached":0},"output":{"total":2483,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements deletion (soft deletion) of a single comment identified by its unique id. Uses the 'deleted_at' field in the discussionboard_comments model to mark the comment as deleted without removing it from the database. Does not affect comments without a 'deleted_at' field. Cascades deletion to associated elements (e.g., snapshots, votes, reports) using Prisma onDelete/CASCADE where applicable. Only fields that exist in the schema are used.","description":"This endpoint enables the soft deletion of a discussionboard_comments entity by updating the 'deleted_at' field to the current timestamp. This approach allows restoration of the comment for audit and moderation purposes. The operation requires the comment's unique id as a path parameter. No fields besides those in the schema are referenced. If the comment is already deleted, the operation does nothing or returns a suitable message. All cascading deletions conform to onDelete/CASCADE relations in the Prisma schema.","summary":"Soft deletes a comment identified by id using the 'deleted_at' field (discussionboard_comments table).","parameters":[{"name":"id","description":"Unique identifier of the comment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/discussionboard/comments/{id}","method":"delete"},{"specification":"Creates a new discussionboard_comment_snapshots record. This records an immutable version of a comment's content and metadata, for version history, rollback, and moderation audit. Only fields in the schema are used; no calculated or extraneous properties appear in the request or response.","description":"This endpoint creates a new snapshot for a specified comment, capturing the content and metadata as required by moderation, rollback, and audit workflows. Only the fields defined in the discussionboard_comment_snapshots model may be set/used. Required fields: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, snapshot_created_at. No references to fields outside the schema are made. The endpoint may be used by members when editing their comments, or by moderators/admins for moderation purposes.","summary":"Creates a new comment snapshot (discussionboard_comment_snapshots table).","parameters":[],"requestBody":{"description":"Information required to create a comment snapshot","typeName":"IDiscussionboardCommentSnapshot.ICreate"},"responseBody":{"description":"The created comment snapshot entity","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRole":"member","name":"create","path":"/discussionboard/commentSnapshots","method":"post"},{"specification":"Retrieves a paginated, searchable list of discussionboard_comment_snapshots. This enables audit, moderation, or chronological review of all comment snapshots. Supports filtering, pagination, and sorting via request body. Only schema fields are referenced.","description":"This endpoint fetches a list of comment snapshots fulfilling search, filter, or pagination criteria. All request and response properties correspond exactly to fields in the discussionboard_comment_snapshots table. Example use cases include moderation review, displaying edit history to users, or compliance auditing. No fields are referenced that do not exist in the schema. Pagination and sorting logic rely on request body spec.","summary":"Retrieves a paginated/searchable list of comment snapshots (discussionboard_comment_snapshots table).","parameters":[],"requestBody":{"description":"Search and pagination parameters for comment snapshots","typeName":"IDiscussionboardCommentSnapshot.IRequest"},"responseBody":{"description":"Paginated list of comment snapshots","typeName":"IPageIDiscussionboardCommentSnapshot"},"authorizationRole":"member","name":"index","path":"/discussionboard/commentSnapshots","method":"patch"},{"specification":"Retrieves a single discussionboard_comment_snapshots entity by its unique id. This operation is typically used to fetch a versioned comment for review, rollback, or audit purposes. The id must refer to an existing snapshot.","description":"This endpoint returns the details for one comment snapshot, identified by id. The response includes only fields defined in the discussionboard_comment_snapshots table: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, snapshot_created_at. No extraneous fields or non-schema data are exposed. Used by members, moderators, or admins to view comment edit history.","summary":"Fetches a comment snapshot by id (discussionboard_comment_snapshots table).","parameters":[{"name":"id","description":"Unique identifier for the comment snapshot entity","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment snapshot entity","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRole":"member","name":"at","path":"/discussionboard/commentSnapshots/{id}","method":"get"},{"specification":"Updates an existing discussionboard_comment_snapshots entity, identified by id. Permits updating mutable fields as allowed by the schema. Immutable properties (such as version or snapshot_created_at) may not be changed if schema/business rules prohibit. Only references to schema-defined fields; all updates validated against the actual schema.","description":"This endpoint allows updates to schema-allowed fields for a comment snapshot by id. Commonly used in error correction or administrative rectification workflows. Only editable fields in the discussionboard_comment_snapshots schema are modifiable. Returns the updated comment snapshot or an error if fields are immutable per schema or if the id does not exist. No extraneous or non-schema properties can be used. Fails if attempted on immutable fields per schema/business logic.","summary":"Updates a comment snapshot entity by id (discussionboard_comment_snapshots table).","parameters":[{"name":"id","description":"Unique identifier for the comment snapshot entity to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the comment snapshot","typeName":"IDiscussionboardCommentSnapshot.IUpdate"},"responseBody":{"description":"The updated comment snapshot entity","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRole":"member","name":"update","path":"/discussionboard/commentSnapshots/{id}","method":"put"},{"specification":"Deletes a single comment snapshot by unique id. The discussionboard_comment_snapshots entity has no soft delete field, so this operation performs a hard delete, permanently removing the record from the database. No other fields beyond those in the schema are referenced.","description":"This endpoint deletes a comment snapshot entity by id, performing a permanent removal since no soft delete field is present in the discussionboard_comment_snapshots table. Used by members, moderators, or admins for removing erroneous or obsolete snapshot records. Operation is irreversible. No reference to fields outside the schema. Returns status or confirmation.","summary":"Permanently deletes a comment snapshot by id (hard delete, discussionboard_comment_snapshots table).","parameters":[{"name":"id","description":"Unique identifier for the comment snapshot entity to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/discussionboard/commentSnapshots/{id}","method":"delete"},{"specification":"Creates a new vote on a comment, stored as discussionboard_comment_votes entity. Only fields in the schema are allowed (discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at). Used to upvote, downvote, or change vote on comments. No extraneous or non-schema fields.","description":"This endpoint creates a new vote for a comment. Request must specify required fields exactly matching those in the discussionboard_comment_votes schema. Typically used by members to upvote or downvote a comment; also supports changing/removing votes. If the same member has already voted on this comment, a unique constraint violation will occur. No references to non-schema fields are made.","summary":"Creates a new comment vote (discussionboard_comment_votes table).","parameters":[],"requestBody":{"description":"Creates a new comment vote with required fields","typeName":"IDiscussionboardCommentVote.ICreate"},"responseBody":{"description":"Newly created comment vote entity","typeName":"IDiscussionboardCommentVote"},"authorizationRole":"member","name":"create","path":"/discussionboard/commentVotes","method":"post"},{"specification":"Retrieves paginated, searchable list of comment vote records (discussionboard_comment_votes). Allows filtering, search, and pagination with request body. Every field in request/response maps exactly to the schema. Useful for analytics and audit workflows.","description":"This endpoint returns a list of comment vote records that match the provided search, filter, or pagination parameters. All parameters correspond to fields in the discussionboard_comment_votes table. Typical use cases: reviewing vote history for moderation, generating analytics, user personal vote history. Only schema-defined properties may be used or returned.","summary":"Fetches a paginated/searchable list of comment votes (discussionboard_comment_votes table).","parameters":[],"requestBody":{"description":"Search and pagination rules for comment votes","typeName":"IDiscussionboardCommentVote.IRequest"},"responseBody":{"description":"Paginated list of comment votes","typeName":"IPageIDiscussionboardCommentVote"},"authorizationRole":"member","name":"index","path":"/discussionboard/commentVotes","method":"patch"},{"specification":"Fetches a single comment vote by its id from the discussionboard_comment_votes table. Returns all schema-defined fields for this entity. Does not reference fields not present in the model.","description":"This endpoint returns details for a comment vote specified by id. All properties in the response correspond 1:1 to fields in the discussionboard_comment_votes table: id, discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at. Intended for use by members, moderators, or administrators for audit, personal vote review, or analytics. No extraneous or non-schema properties are used.","summary":"Fetches a comment vote record by id (discussionboard_comment_votes table).","parameters":[{"name":"id","description":"Unique identifier for the comment vote entity","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment vote entity with all schema-defined fields","typeName":"IDiscussionboardCommentVote"},"authorizationRole":"member","name":"at","path":"/discussionboard/commentVotes/{id}","method":"get"},{"specification":"Updates an existing comment vote in the discussionboard_comment_votes table, specified by id. Allows updating only schema-permitted fields. All parameter/response mapping is strictly to schema; immutable fields are not updatable. Only schema-defined fields are referenced; update fails if attempted on immutable/non-existent fields.","description":"This endpoint enables allowed updates to a comment vote record by id. Editable fields are limited to those non-immutable in the discussionboard_comment_votes schema (likely only vote_type and updated_at, per version control). Typically used by members to change their vote. No reference to non-schema fields. Returns the updated entity or error if not found or update not permitted.","summary":"Updates a comment vote by id (discussionboard_comment_votes table).","parameters":[{"name":"id","description":"Unique identifier for the comment vote entity to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the comment vote record","typeName":"IDiscussionboardCommentVote.IUpdate"},"responseBody":{"description":"Updated comment vote entity","typeName":"IDiscussionboardCommentVote"},"authorizationRole":"member","name":"update","path":"/discussionboard/commentVotes/{id}","method":"put"},{"specification":"Deletes a comment vote entity from the discussionboard_comment_votes table by unique id. No soft delete field present; hard delete only. Irreversible removal; only fields defined in the schema are referenced.","description":"This endpoint deletes one comment vote record matching the id, permanently removing it from the database. No soft-delete or archived status possible since the schema lacks a soft delete field. Only schema fields referenced. Operation cannot be undone. Intended for user-requested vote removal, moderation cleanup, or error correction.","summary":"Permanently deletes a comment vote record by id (hard delete, discussionboard_comment_votes table).","parameters":[{"name":"id","description":"Unique identifier for the comment vote entity to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/discussionboard/commentVotes/{id}","method":"delete"},{"specification":"Creates a new report for a comment, storing the entity as discussionboard_comment_reports. Only supports fields in the schema: discussionboard_comment_id, discussionboard_member_id, discussionboard_report_type_id, reason, created_at. There is a unique constraint on (comment_id, member_id, report_type_id). No extraneous or non-schema fields permitted. Used for user reporting inappropriate, abusive, or spam comments; triggers moderation workflow.","description":"This endpoint enables a member to file a report against a specific comment for a reason. All fields required by the discussionboard_comment_reports schema must be included, with exact matches to existing fields. On duplicate (unique constraint violation), an error is returned. Typical use: report abuse, spam, or other infractions for moderation review. All references and logic strictly follow the schema and business requirements; no invented fields or behaviors.","summary":"Creates a new comment report (discussionboard_comment_reports table).","parameters":[],"requestBody":{"description":"Information for reporting a comment","typeName":"IDiscussionboardCommentReport.ICreate"},"responseBody":{"description":"Newly created comment report entity","typeName":"IDiscussionboardCommentReport"},"authorizationRole":"member","name":"create","path":"/discussionboard/commentReports","method":"post"}],"completed":12,"total":175,"step":0,"created_at":"2025-07-25T05:14:12.618Z"},"tokenUsage":{"facade":{"aggregate":{"total":92040,"input":{"total":86724,"cached":0},"output":{"total":5316,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":92040,"input":{"total":86724,"cached":0},"output":{"total":5316,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":92040,"input":{"total":86724,"cached":0},"output":{"total":5316,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":92040,"input":{"total":86724,"cached":0},"output":{"total":5316,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new section within the discussion board platform. This operation adds a section record in the 'discussionboard_sections' table, adhering strictly to the model definition in the Prisma schema. Each section requires the parent channel ID, a unique section code, a display name, an optional description, position, active status, and audit timestamps. The section is always linked to a parent channel and supports both UI ordering and archiving (via the 'active' boolean field). The API input and resulting object must not reference any fields that do not exist in the schema. Audit fields such as 'created_at' and 'updated_at' are written by the system, not by the user input. Only existing fields should be handled.","description":"This endpoint creates a new section entity within the discussion board system.\n\nAll core fields must be provided: 'discussionboard_channel_id' (foreign key to channels), unique 'code', 'name' (string), optional 'description', UI 'position' (integer for navigation order), and 'active' (boolean flag for soft-archiving/enablement). System audit fields 'created_at' and 'updated_at' are handled automatically by the implementation. Section records support navigation hierarchy and permission scoping for boards/posts in the forum structure. No non-schema fields should be referenced. Only schema-defined parameters are supported. Returns the created section including all schema fields. Error is returned if any required field or uniqueness constraint fails. If the referenced channel does not exist, a foreign key error should be returned. No unrelated or missing fields should be referenced in either body or response.","summary":"Creates a new discussionboard_sections record in the system.","parameters":[],"requestBody":{"description":"Information required to create a discussionboard_sections record.","typeName":"IDiscussionboardSection.ICreate"},"responseBody":{"description":"The created section record with all schema fields populated.","typeName":"IDiscussionboardSection"},"authorizationRole":"admin","name":"create","path":"/discussionboard/sections","method":"post"},{"specification":"Search or filter sections within the discussion board. Operation retrieves a paginated and filtered list of section records from the 'discussionboard_sections' table as described in the Prisma schema, supporting advanced UI navigation, admin dashboards, or moderation tools. Supports searching by section name, code, channel association, and active status, including ordering by position and pagination for scalable navigation. Only the schema-defined fields may be referenced; non-existent fields must not be handled. Request body must allow specifying filter, search, and pagination parameters as allowed, and output should include only objects defined in the schema.","description":"This operation provides advanced retrieval and search of discussion board sections.\n\nThe endpoint supports filtering by fields such as name (with substring or trgm-op search support), code, parent channel (discussionboard_channel_id), and active status. It returns a paginated array of section objects conforming strictly to the Prisma schema. Requires proper index usage for efficient search and ordering (via 'position' or UI priority).\n\nRequest takes pagination (offset, limit), optional filters (name/code/active), and sort order. Returns a paginated list of section records as defined in the schema. Never returns any fields that do not exist (such as deleted_at, unless present in schema). Expected error for invalid filter or unknown parent channel. Uses only schema-allowed fields.","summary":"List, filter, and search discussionboard_sections records.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination information for section retrieval.","typeName":"IDiscussionboardSection.IRequest"},"responseBody":{"description":"Paginated list of section records conforming to schema specification.","typeName":"IPageIDiscussionboardSection"},"authorizationRole":"admin","name":"index","path":"/discussionboard/sections","method":"patch"},{"specification":"Retrieve a specific section record by its unique ID from the 'discussionboard_sections' table, as defined in the Prisma schema. Supports reading all main fields for navigation, section management, or admin configuration. Must not reference or expose any fields not defined in the schema. The returned section will include the ID, linked channel ID, code, name, optional description, position, active status, created_at, and updated_at. If the section does not exist (i.e., primary key lookup fails), a not found error must be returned.","description":"Fetches a single section entity from the discussion board by using its unique ID as a path parameter. The returned object includes all fields specified in the Prisma schema: id, discussionboard_channel_id, code, name, description (nullable), position, active flag, created_at, and updated_at. This operation does not support lookup by fields outside the schema, nor does it expose or handle extra attributes. Returns 404 if the ID is not found.","summary":"Get details of a discussionboard_sections record by ID.","parameters":[{"name":"id","description":"Target section's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed info for the specified section record. Only schema-defined fields.","typeName":"IDiscussionboardSection"},"authorizationRole":"admin","name":"at","path":"/discussionboard/sections/{id}","method":"get"},{"specification":"Update the data for a specific section of the discussion board by its unique ID, corresponding to a record in the 'discussionboard_sections' table. This enables changing section name, code, description, parent channel, UI position, or activation status as specified. All updatable fields must exist in the schema. Operation references no fields that are not included in the schema. Audit timestamps may be automatically updated by the service logic. Returns the updated section or error if constraints or references are invalid.","description":"Updates a section in the discussion board by its unique ID using only fields from the schema. Updatable fields include discussionboard_channel_id, name, code, description (optional), position, and active. System-managed fields (created_at, updated_at) are updated as needed by the backend. No fields outside the Prisma schema may be updated or referenced. Errors may include unknown section ID, foreign key violation, or uniqueness constraint errors on code/parent/channel.","summary":"Update a discussionboard_sections record by its ID.","parameters":[{"name":"id","description":"Target section's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the section. Only updatable schema fields are allowed.","typeName":"IDiscussionboardSection.IUpdate"},"responseBody":{"description":"The updated section record conforming to the schema.","typeName":"IDiscussionboardSection"},"authorizationRole":"admin","name":"update","path":"/discussionboard/sections/{id}","method":"put"},{"specification":"Delete a section record from the 'discussionboard_sections' table by its unique ID. Since there are no soft delete fields in the schema for this model, this operation will perform a permanent, irreversible deletion (hard delete). The ID path parameter must exactly match the primary key in the table. Returns 204 on success, or a not found error if the section does not exist. Operation must not reference nonexistent fields, perform auditing via fields not in schema, or use conditional soft-delete logic.","description":"Deletes a specific section record from the discussion board by its unique ID. This is a hard delete—once executed, the record is permanently removed since there is no deleted_at or is_deleted field in the schema. Action is irreversible. Returns no body on success and 204 status. Returns 404 if the section with the specified ID does not exist. Uses only fields in the schema for all logic and error reporting.","summary":"Delete (hard) a discussionboard_sections record by its ID.","parameters":[{"name":"id","description":"Target section's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/sections/{id}","method":"delete"},{"specification":"Create a new configuration setting by inserting a record into the 'discussionboard_configurations' table. Only recognizes and processes fields existing in the schema: id (generated), key (string, unique), value (string, nullable), optional description, created_at, and updated_at timestamps. Used for inserting system-wide feature flags, thresholds, and configuration options. If key already exists, must return uniqueness or duplication error. Never reference fields outside the schema.","description":"Adds a new system-wide configuration record for the discussion board application, using the schema-defined fields. Input must contain a unique 'key', a 'value' (which may be null), and optional 'description'. 'id', 'created_at', and 'updated_at' are system-managed. Operation must not introduce or expect other fields. Key uniqueness must be enforced, and on conflict an appropriate error message returned. Returns the full record populated with all schema fields on success.","summary":"Creates a new discussionboard_configurations record.","parameters":[],"requestBody":{"description":"Information required to create a configuration.","typeName":"IDiscussionboardConfiguration.ICreate"},"responseBody":{"description":"The created configuration setting, per schema definition.","typeName":"IDiscussionboardConfiguration"},"authorizationRole":"admin","name":"create","path":"/discussionboard/configurations","method":"post"},{"specification":"List or filter all configuration settings by querying 'discussionboard_configurations' as specified in the schema. Supports pagination and optional filtering by key and description. Only allows referencing fields expressly present in the configuration schema. Supports admin dashboard or developer interface needs. Output and body must not mention or manipulate fields outside of the schema. Returns paginated results of configuration records on success.","description":"Retrieves a list of configuration settings, filtered or searched by parameters such as key (unique string), description, or other schema fields. Only schema-defined fields may be included for filtering and in the returned objects. Supports paginated results for scalable admin/developer use. Fails with 400 error for invalid filters or out-of-range pagination. Never includes fields not present in the schema.","summary":"List and filter discussionboard_configurations records.","parameters":[],"requestBody":{"description":"Request body with filtering, search, or pagination info.","typeName":"IDiscussionboardConfiguration.IRequest"},"responseBody":{"description":"Paginated configuration records matching schema definition.","typeName":"IPageIDiscussionboardConfiguration"},"authorizationRole":"admin","name":"index","path":"/discussionboard/configurations","method":"patch"},{"specification":"Retrieve a specific configuration record in the 'discussionboard_configurations' table by its unique ID as defined by the schema. Exposes only valid schema fields such as id, key, value (nullable), description (nullable), created_at, and updated_at. Used for configuration lookups and system auditing. Returns 404 if no record found for ID. References no out-of-schema fields.","description":"Fetches a configuration entry by its unique ID (UUID). Only fields present in the Prisma schema are exposed: id, key, value, description, created_at, updated_at. 404 error is returned if the entry is not found. Fields not in the schema (such as deleted_at or custom auditing) are never returned or referenced.","summary":"Get a configuration record from discussionboard_configurations by ID.","parameters":[{"name":"id","description":"Target configuration's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The configuration record as defined in the schema.","typeName":"IDiscussionboardConfiguration"},"authorizationRole":"admin","name":"at","path":"/discussionboard/configurations/{id}","method":"get"},{"specification":"Update a configuration entry in the 'discussionboard_configurations' table by its unique ID. Only schema-defined fields may be modified: key, value, description. System-managed fields like id, created_at, updated_at are set/updated as part of implementation/top-level logic only. All updates enforce uniqueness and field-level validation on the specified fields. Uniqueness constraint is enforced on key. Never refers to or updates nonexistent fields.","description":"Updates the fields (key, value, description) of the configuration record by its ID as per the schema. The primary key (id) identifies the configuration row. Updates may not set id, created_at directly. If another configuration already uses the target key, a unique constraint error is returned. Only accepts or returns fields present in the schema. 404 error if record with specified ID is not found.","summary":"Update a configuration in discussionboard_configurations by its ID.","parameters":[{"name":"id","description":"Target configuration's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the configuration. Only updatable schema fields permitted.","typeName":"IDiscussionboardConfiguration.IUpdate"},"responseBody":{"description":"Updated configuration record in schema format.","typeName":"IDiscussionboardConfiguration"},"authorizationRole":"admin","name":"update","path":"/discussionboard/configurations/{id}","method":"put"},{"specification":"Delete a specific configuration record from the 'discussionboard_configurations' table using its unique ID. Since there are no soft delete fields in this model, deletion is permanent (hard delete); data is fully removed. Returns 204 on success, 404 if record not found. Only references and deletes schema fields. No logic is performed on non-existent properties, and audit traces are not supported unless schema fields provide it.","description":"Deletes the configuration entry with the given ID from the discussionboard_configurations table. This is a hard delete, since the schema does not have deletion markers or soft delete fields. Once deleted, the entry cannot be restored. Returns 204 with no body on success. 404 error if record has already been removed or does not exist. Never checks, uses, or reports fields not present in the schema.","summary":"Permanently delete a configuration by ID (hard delete).","parameters":[{"name":"id","description":"Target configuration's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/configurations/{id}","method":"delete"},{"specification":"Create a notification event/log record in the discussion board by inserting into the 'discussionboard_notifications' table as specified in the Prisma schema. Only fields present in the schema (id is generated, target_id (nullable), type, title, body (nullable), delivered, created_at, delivered_at (nullable)) are supported. Used for logging and dispatching system/app notifications. Returns the full schema-compliant record on success. Foreign key constraints and type validations must be enforced; unreferenced/undeclared fields are never included in body/output.","description":"Adds a system notification log entry for delivery record, audit, and alerting. App input must specify: target_id (optional, nullable UUID for recipient/channel), type (string event type), title (short description), body (optional, nullable), and delivered (boolean status). created_at and delivered_at are system-managed timestamps, and id is auto-generated. All validation, uniqueness, and FK constraints follow the table schema. No fields outside schema definition are processed. On error (invalid reference, missing required value), validation error is returned. No unrelated or unsolicited fields are included in body/response.","summary":"Create a discussionboard_notifications log/entry.","parameters":[],"requestBody":{"description":"Fields required to create a notification event/log record.","typeName":"IDiscussionboardNotification.ICreate"},"responseBody":{"description":"The created notification record, conforming to schema fields.","typeName":"IDiscussionboardNotification"},"authorizationRole":"admin","name":"create","path":"/discussionboard/notifications","method":"post"},{"specification":"List and search notification event records in the 'discussionboard_notifications' table, supporting filtering and pagination per fields in the schema. Supports searching (by type, title, delivered), filtering (target_id), and paginated sorting. Returns only fields defined in the schema in paginated result objects. No fields outside the schema are handled, and no secondary auditing logic is applied unless reflected in the schema. 400 or validation error is returned for invalid filters or queries.","description":"Retrieves a paginated and optionally filtered list of notification event records from the database. Can be filtered by type (string event type), target_id (channel/member), delivered status (boolean), or searched by title (with trgm-op search). Supports pagination and ordering as defined by indexes in the schema. Only schema-defined fields are allowed in both the request payload and the response. No references to non-existent fields; returns paged results. Error returned if filters/requests do not match any record or are ill-formed.","summary":"List/search discussionboard_notifications event records.","parameters":[],"requestBody":{"description":"Filtering and pagination for notification records, with only schema-allowed fields.","typeName":"IDiscussionboardNotification.IRequest"},"responseBody":{"description":"Paginated list of notification records as defined in schema.","typeName":"IPageIDiscussionboardNotification"},"authorizationRole":"admin","name":"index","path":"/discussionboard/notifications","method":"patch"}],"completed":24,"total":175,"step":0,"created_at":"2025-07-25T05:14:17.884Z"},"tokenUsage":{"facade":{"aggregate":{"total":140907,"input":{"total":132022,"cached":0},"output":{"total":8885,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":140907,"input":{"total":132022,"cached":0},"output":{"total":8885,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":140907,"input":{"total":132022,"cached":0},"output":{"total":8885,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":140907,"input":{"total":132022,"cached":0},"output":{"total":8885,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Search and retrieve a paginated list of notification templates for the discussion board system. This operation allows admin, moderator, or authorized personnel to filter and browse all available templates using flexible criteria. Templates are the reusable messages for notification delivery such as emails, in-app alerts, or push notifications. Filtering can be performed on fields like code, name, is_active, created_at, updated_at, or subject. Because this is a collection endpoint, it should support relevant search parameters and pagination for browsing large numbers of templates. Only fields ACTUALLY defined on the 'discussionboard_notification_templates' table can be referenced: id, code, name, description, subject, body, is_active, created_at, updated_at. No fields outside these (e.g., deleted_at) exist and must not be referenced.","description":"This API lists notification templates stored in the notification message template master table (discussionboard_notification_templates). Each template contains attributes essential for system notification delivery, including its unique code, display name (name), subject, and body. Descriptions, is_active status, and timestamps (created_at, updated_at) are included only as defined in the schema. \n\nThe operation enables advanced search by code, name, is_active, subject, or creation/update period, facilitating discovery or review by admins and moderators. It does NOT reference or return any field not present in the schema (e.g., no soft/hard delete indicator, no creator/editor tracking, no attachment support). Pagination and sorting parameters should be supported for scalable browsing.\n\nRelevant use cases include admin browsing all templates, moderating notification content, performing audits on notification communications, and reviewing template versions before editing. Errors are returned for invalid queries or insufficient permissions. The database table does not support soft delete or restore, so only actual templates are listed - deleted ones (if any) are not available.","summary":"Search and paginate discussionboard_notification_templates (notification template master) table","parameters":[],"requestBody":{"description":"Patch-style search/filter request for notification templates, including sorting and pagination.","typeName":"IDiscussionboardNotificationTemplate.IRequest"},"responseBody":{"description":"A paginated and filtered list of notification templates matching search criteria.","typeName":"IPageDiscussionboardNotificationTemplate"},"authorizationRole":"admin","name":"index","path":"/discussionboard/notificationTemplates","method":"patch"},{"specification":"Retrieve a specific notification template from the discussionboard_notification_templates table by its unique id. Only fields present in the schema are included in the output: id, code, name, description, subject, body, is_active, created_at, updated_at. Does not reference non-existent fields (like deleted_at).","description":"This API retrieves the details of a notification template identified by id from the discussionboard_notification_templates table. Returns code, name, description, subject, body, is_active, and creation/update timestamps. If the template with the given id does not exist, an error is returned. Does not reference or require any field outside the schema such as soft deletes or historical state. Admin-level access required.","summary":"Get single notification template by id (discussionboard_notification_templates table)","parameters":[{"name":"id","description":"The template's unique identifier (UUID) in the discussionboard_notification_templates table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All fields for the specified notification template.","typeName":"IDiscussionboardNotificationTemplate"},"authorizationRole":"admin","name":"at","path":"/discussionboard/notificationTemplates/{id}","method":"get"},{"specification":"Update a notification template stored in the discussionboard_notification_templates table. All updates must be restricted to fields present in the schema: code, name, description, subject, body, is_active, updated_at. The id is taken from the path. Only authorized users (admin) may update templates. No support for resurrect/delete fields as none exist in the schema.","description":"Updates a notification template in the notification template master table by id. Accepts updates to code, name, description, subject, body, is_active, and updates the updated_at timestamp. The operation will ignore unsupported fields not present in the schema. Only an admin may perform this action. If the template by id does not exist, an error is returned.","summary":"Update fields of notification template by id (discussionboard_notification_templates table)","parameters":[{"name":"id","description":"UUID identifier of the notification template to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the notification template (all must exist in the table schema).","typeName":"IDiscussionboardNotificationTemplate.IUpdate"},"responseBody":{"description":"The updated notification template.","typeName":"IDiscussionboardNotificationTemplate"},"authorizationRole":"admin","name":"update","path":"/discussionboard/notificationTemplates/{id}","method":"put"},{"specification":"Delete a notification template from the discussionboard_notification_templates table. \nThe schema has no soft delete field, so this is a hard delete. The operation will remove the row from the database permanently. This must be restricted to admin role only. Only the path-provided id is required; there are no other identifying or supporting fields for deletion in the schema.","description":"Permanently deletes a notification template identified by id from the discussionboard_notification_templates table.\nThis is a hard delete because the table does not have a soft-delete field (such as deleted_at or is_deleted). All fields and business logic must be based on the actual fields in the Prisma schema. Only authorized admins can perform this action. If the template does not exist, an error is returned. No restore or trash bin operation is supported as per schema.","summary":"Hard delete notification template by id (discussionboard_notification_templates table)","parameters":[{"name":"id","description":"UUID of the notification template to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion (boolean or status message).","typeName":"IBoolResult"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/notificationTemplates/{id}","method":"delete"},{"specification":"Create a new notification preference setting for a member, tied to specific templates/channels. All writable fields must be those in the discussionboard_notification_preferences table: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, updated_at. \nNo other fields exist. Member must be authenticated; admin/mod may have access for other members; strict field checking.","description":"Creates a notification template/channel preference for a board member, as stored in the discussionboard_notification_preferences table. Supports preferences per template code per channel (email, inapp, browser push), as well as required creation/update timestamps. The request must only reference fields defined in the table. No soft delete or trashing is supported. Returns the created preference entry or validation errors if a duplicate or invalid data is supplied. Admins can create for any member; members can create their own.","summary":"Create a notification preference for a member (discussionboard_notification_preferences)","parameters":[],"requestBody":{"description":"Details for new notification preference (field values as per schema).","typeName":"IDiscussionboardNotificationPreference.ICreate"},"responseBody":{"description":"The new notification preference record created in the DB.","typeName":"IDiscussionboardNotificationPreference"},"authorizationRole":"admin","name":"create","path":"/discussionboard/notificationPreferences","method":"post"},{"specification":"List and search notification preferences in the discussionboard_notification_preferences table. Admins, or members for their own records, can filter using code, member id, channel enables, and timestamps. Only schema-existing fields may be included: id, discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, updated_at. Results are paginated and support flexible filtering based on actual fields. No support for deleted records or restore because no such field exists in schema.","description":"This operation queries and pages through notification preference records (discussionboard_notification_preferences) by arbitrary search criteria. Supported filters include id, member id (discussionboard_member_id), template code, channel enablement (email_enabled, inapp_enabled, browser_enabled), and created/updated time ranges. Only actual fields in the schema are eligible for search/matching. Output is paginated to support frontend browsing and analytics use cases. Soft/hard delete is not referenced at all since not present in schema.","summary":"Paginate/search notification preferences in discussionboard_notification_preferences table","parameters":[],"requestBody":{"description":"Filter and pagination info for notification preferences (fields must be schema-correct).","typeName":"IDiscussionboardNotificationPreference.IRequest"},"responseBody":{"description":"Paginated list of notification preference records matching criteria.","typeName":"IPageDiscussionboardNotificationPreference"},"authorizationRole":"admin","name":"index","path":"/discussionboard/notificationPreferences","method":"patch"},{"specification":"Get a specific notification preference record from the discussionboard_notification_preferences table, sourced by unique id. Only fields from schema are returned: id, discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, updated_at. No delete or history fields exist in the schema, so none are returned or checked.","description":"This API fetches all fields for a specific notification preference by its unique id from the discussionboard_notification_preferences table. Returns all columns described in the schema; if no such id is found, an error is returned. The API never references non-existent fields such as deleted_at, historical modifications, or audit trails not present in the actual schema. Permissions restrict to admin, mod, or matching member (for their own record).","summary":"Get a single notification preference by id (discussionboard_notification_preferences table)","parameters":[{"name":"id","description":"UUID identity of the notification preference row to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All field values for the requested notification preference.","typeName":"IDiscussionboardNotificationPreference"},"authorizationRole":"admin","name":"at","path":"/discussionboard/notificationPreferences/{id}","method":"get"},{"specification":"Update a notification preference row in the discussionboard_notification_preferences table by its id. Only actual schema fields may be updated: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, updated_at. Admins can edit for any member; members their own. The operation does not support soft/hard delete or restore. The path contains the id.","description":"This operation updates (PUT) a notification preference record, identified by id, by setting new values for any writable field present in the schema. Permissible target fields: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, updated_at. Attempts to update non-existent fields will be ignored and lead to validation errors. If id is invalid or not found, an error is returned. Admins have platform-level access; members may update their own preferences only.","summary":"Update a notification preference row by id (discussionboard_notification_preferences table)","parameters":[{"name":"id","description":"The notification preference's unique UUID in the DB.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for notification preference. Must match table schema exactly.","typeName":"IDiscussionboardNotificationPreference.IUpdate"},"responseBody":{"description":"All fields from the updated notification preference row.","typeName":"IDiscussionboardNotificationPreference"},"authorizationRole":"admin","name":"update","path":"/discussionboard/notificationPreferences/{id}","method":"put"},{"specification":"Delete a notification preference row by unique id from the discussionboard_notification_preferences table. The schema does NOT include deleted_at or is_deleted fields, so this is a hard delete. Only admins or matching members can delete their own preferences. No restore/undelete feature is available.","description":"Permanently deletes a notification preference identified by id from the notification preference table in the database. Removal is immediate and irreversible. As no soft-delete logic exists in the schema, this is a true hard delete. Records deleted via this endpoint cannot be recovered later. Returns a confirmation or boolean result. Admins have system access; members their own.","summary":"Hard delete a notification preference row by id (discussionboard_notification_preferences table)","parameters":[{"name":"id","description":"UUID of the notification preference entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of successful hard delete (boolean/status).","typeName":"IBoolResult"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/notificationPreferences/{id}","method":"delete"},{"specification":"Create a new privacy policy record in the discussionboard_privacy_policies table. All relevant fields defined in the schema are required: version, effective_date, title, content. created_at and updated_at may be set by DB logic. The API does not and cannot reference deleted, creator, or modifier fields as these are not present. Only admins are authorized to set privacy policy contents.","description":"Creates a new privacy policy row in the database containing all required attributes: policy version, effective_date for compliance, title, and full text content of the policy. No deleted or audit-trail fields except for created_at/updated_at, which may be set implicitly. Input must exactly match what is defined in the schema—no surplus fields allowed. Returns the new privacy policy entry with all details set.","summary":"Create a privacy policy (discussionboard_privacy_policies table)","parameters":[],"requestBody":{"description":"All information about the privacy policy (schema-based only).","typeName":"IDiscussionboardPrivacyPolicy.ICreate"},"responseBody":{"description":"The new privacy policy record just created.","typeName":"IDiscussionboardPrivacyPolicy"},"authorizationRole":"admin","name":"create","path":"/discussionboard/privacyPolicies","method":"post"},{"specification":"Query and page through privacy policy entries in the discussionboard_privacy_policies table. Filtering and sorting may be performed on version, effective_date, title, content, created_at, or updated_at, as those are all actual schema fields. Return values include only actual columns. No delete/restore functionality exists, so no such logic is permissible. Suitable for policy display and audit compliance dashboards.","description":"This operation paginates and searches privacy policy records from the privacy policy master table. Filtering and sort operations are allowed only on columns in the schema (version, effective_date, title, content, created_at, updated_at). The result is paginated to support high volume audits and policy history queries. No fields for deletion or row hiding are supported in the schema, so no policy record can be soft/hard deleted using this endpoint.","summary":"Search, filter, and paginate privacy policy records (discussionboard_privacy_policies table)","parameters":[],"requestBody":{"description":"Filter and pagination instructions for privacy policies (all fields based on schema).","typeName":"IDiscussionboardPrivacyPolicy.IRequest"},"responseBody":{"description":"Paginated/filtered results matching privacy policy query.","typeName":"IPageDiscussionboardPrivacyPolicy"},"authorizationRole":"admin","name":"index","path":"/discussionboard/privacyPolicies","method":"patch"},{"specification":"Fetch a single privacy policy from the discussionboard_privacy_policies table by its unique id (UUID). The response includes all schema-present fields for the policy: id, version, effective_date, title, content, created_at, updated_at. No delete or audit/restore logic fields are present in the schema, so cannot be referenced. Admin authentication is required.","description":"Retrieves the full privacy policy information for the given id (UUID), returning all first-class fields in the schema. This is used for compliance review, end-user access to policy text, or admin management. If no such id is found, an error is returned. Only strictly schema-defined fields are valid for either query or output. Admin-only API.","summary":"Get one privacy policy details by id (discussionboard_privacy_policies table)","parameters":[{"name":"id","description":"UUID of the privacy policy to retrieve (used as path parameter).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All fields of the privacy policy row matching id.","typeName":"IDiscussionboardPrivacyPolicy"},"authorizationRole":"admin","name":"at","path":"/discussionboard/privacyPolicies/{id}","method":"get"}],"completed":36,"total":175,"step":0,"created_at":"2025-07-25T05:14:18.333Z"},"tokenUsage":{"facade":{"aggregate":{"total":189660,"input":{"total":177331,"cached":0},"output":{"total":12329,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":189660,"input":{"total":177331,"cached":0},"output":{"total":12329,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":189660,"input":{"total":177331,"cached":0},"output":{"total":12329,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":189660,"input":{"total":177331,"cached":0},"output":{"total":12329,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Update an existing Thread Snapshot identified by its unique ID. The discussionboard_thread_snapshots model represents the versioning and audit trail for edits to forum discussion threads. Each snapshot stores the title, optional body, optional reason for the edit, the actor_id of the editor (member/moderator), and a created_at timestamp.\n\nThis operation allows updating the details (title, body, reason, and optionally the actor_id) of an existing thread snapshot, but only those fields present in the schema (id, thread_id, actor_id, title, body, reason, created_at). It will not touch any fields not in the schema or reference system fields absent from the schema, such as deleted_at or audit records external to this entity.\n\nOnly administrators or the original actor may update snapshots for forensic/audit corrections. No soft/hard delete fields exist in this model, so modification is limited strictly to the supported atomic values.\n\nAttempting to update fields not defined in the Prisma schema will result in validation errors. Related operations include snapshot creation (POST), retrieval (GET), and deletion (DELETE).","description":"This API operation updates a thread snapshot in the discussionboard_thread_snapshots table by its unique ID. All modifications are strictly limited to fields actually defined in the schema: title (required), body (optional), reason (optional), and actor_id (optional). There are no deleted_at or soft delete fields. The created_at timestamp is not modifiable via this endpoint; it is assigned on creation. Only authorized users (admin/original actor) may perform updates. The endpoint returns the complete updated snapshot. If the snapshot does not exist, a 404 error is returned.","summary":"Update a thread snapshot (discussionboard_thread_snapshots) by ID. Only schema-defined fields are updatable.","parameters":[{"name":"id","description":"Unique identifier of the thread snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated thread snapshot information (fields: title, optional body, optional reason, optional actor_id). Must match schema exactly.","typeName":"IDiscussionboardThreadSnapshot.IUpdate"},"responseBody":{"description":"The updated thread snapshot, fully reflecting the changes.","typeName":"IDiscussionboardThreadSnapshot"},"authorizationRole":"admin","name":"update","path":"/discussionboard/threadSnapshots/{id}","method":"put"},{"specification":"Delete an existing Thread Snapshot identified by its unique ID. The discussionboard_thread_snapshots model stores version/audit history of forum thread edits; each snapshot is immutable after creation. This entity does not contain soft delete fields (no deleted_at, is_deleted, or similar indicator).\n\nAccording to the Prisma schema, DELETE performs a hard delete, permanently removing the snapshot from the database. This operation cannot be undone and will remove the audit/version record. Deletion should be restricted to high-privilege roles (such as admin) and used only in rare, justified circumstances. System-level auditing should track all deletions in an external log.\n\nAttempts to delete non-existent IDs return a 404 error. No partial deletion or soft-delete logic is possible since the schema does not support it.","description":"This API operation deletes a thread snapshot from the discussionboard_thread_snapshots table by its unique ID. Since the model lacks any soft delete capability in the schema, this is a hard delete: the snapshot record is removed from the database permanently. Auditing should be handled externally, as the deletion itself is not tracked within the model. Only admins should be authorized to use this function. Returns 204 No Content on success; returns 404 if the snapshot is not found.","summary":"Hard delete a thread snapshot by ID (discussionboard_thread_snapshots); permanent removal as no soft-delete present.","parameters":[{"name":"id","description":"Unique identifier of the thread snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/threadSnapshots/{id}","method":"delete"},{"specification":"Create a new thread tag assignment in the discussionboard_thread_tags table. This model provides the M:N relationship linking tags to threads for discoverability and content organization. Required fields: thread_id (UUID) and assigned_at (timestamp). Optional fields: removed_at (timestamp, null when tag is active).\n\nThis endpoint allows all authenticated users to tag a thread by creating a new tag assignment. Only fields defined in the schema (id, thread_id, assigned_at, removed_at) are permitted. Business logic such as time uniqueness or duplicate prevention must be enforced in service logic.\n\nThe operation does not reference any non-existent schema fields. Success returns the created tag assignment record. Related endpoints allow listing, updating, or deleting tag assignments.","description":"This API operation creates a new thread tag assignment in the discussionboard_thread_tags table. It requires a thread_id and assigned_at timestamp, and may optionally include removed_at if the tag is immediately inactive. No extraneous or derived fields are accepted; only the schema-defined fields are allowed. All authenticated members can use this endpoint to add tag relationships. The operation returns the created thread tag assignment.","summary":"Create a thread tag assignment (discussionboard_thread_tags) with required and optional fields per schema.","parameters":[],"requestBody":{"description":"Thread tag assignment data: thread_id and assigned_at (required), optional removed_at.","typeName":"IDiscussionboardThreadTag.ICreate"},"responseBody":{"description":"Created thread tag assignment record.","typeName":"IDiscussionboardThreadTag"},"authorizationRole":"member","name":"create","path":"/discussionboard/threadTags","method":"post"},{"specification":"Retrieve a list of thread tag assignments from the discussionboard_thread_tags table. This represents the M:N relationship between threads and tags. Filtering, pagination, and search are supported through fields present in the schema (id, thread_id, assigned_at, removed_at).\n\nAll query parameters and filters must align strictly with the schema definition; no derived or system fields are referenced. The response returns a paginated list of tag assignment records accessible to authorized members and moderators.","description":"This API operation retrieves a paginated list of thread tag assignments from the discussionboard_thread_tags table. Filtering and searching are possible using the actual schema fields (id, thread_id, assigned_at, removed_at). No soft or hard delete logic is included, as deletion is handled by removing records. Pagination metadata (total, page, perPage, etc.) is provided in the standard page envelope. All readers must be authenticated.","summary":"List and search thread tag assignments (discussionboard_thread_tags) with pagination and filtering by schema fields.","parameters":[],"requestBody":{"description":"Request body includes pagination and search parameters for the tag assignment list, based only on schema fields.","typeName":"IPageIDiscussionboardThreadTag.IRequest"},"responseBody":{"description":"Paginated list of thread tag assignments, following page envelope structure.","typeName":"IPageIDiscussionboardThreadTag"},"authorizationRole":"member","name":"index","path":"/discussionboard/threadTags","method":"patch"},{"specification":"Retrieve a specific thread tag assignment by its unique ID from the discussionboard_thread_tags table. Each record links a thread and a tag for organization and search. Only fields defined within the model (id, thread_id, assigned_at, removed_at) are included.\n\nIf the tag assignment exists, it is returned in detail. If it is missing, a 404 is returned. No soft delete or derived state is present, so absent records indicate non-existent or deleted tag assignment.","description":"This API operation fetches the details of a specific thread tag assignment identified by its unique ID. Only fields in the schema are returned (id, thread_id, assigned_at, removed_at). If the assignment does not exist, a 404 is returned. There is no deleted_at or soft delete capability; removed relationships are deleted from the DB.","summary":"Get a thread tag assignment by ID from discussionboard_thread_tags (no soft/hard delete distinction).","parameters":[{"name":"id","description":"Unique identifier of the thread tag assignment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested thread tag assignment or 404 if missing.","typeName":"IDiscussionboardThreadTag"},"authorizationRole":"member","name":"at","path":"/discussionboard/threadTags/{id}","method":"get"},{"specification":"Update an existing thread tag assignment in the discussionboard_thread_tags table, identified by its unique ID. This entity models the many-to-many relationship between threads and tags. Updatable fields per schema are thread_id, assigned_at, removed_at. The operation updates only the specified tag assignment record and does not reference or modify non-existent schema fields.\n\nOnly moderators or system processes should access this update function, typically for correcting assignments or restoring historical tagging in audit scenarios. Returns the updated tag assignment; if the record does not exist, returns 404.","description":"This API operation updates a thread tag assignment by ID, limited to fields in the model (thread_id, assigned_at, removed_at). No other fields are supported; there is no deleted_at, system, or derived field capability. Only members with at least moderator role can perform updates. Returns the full updated record, or 404 if not found.","summary":"Update a thread tag assignment (discussionboard_thread_tags) by unique ID.","parameters":[{"name":"id","description":"Unique identifier of the thread tag assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated thread tag assignment data: thread_id, assigned_at, optional removed_at, per schema.","typeName":"IDiscussionboardThreadTag.IUpdate"},"responseBody":{"description":"Updated thread tag assignment record.","typeName":"IDiscussionboardThreadTag"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/threadTags/{id}","method":"put"},{"specification":"Delete an existing thread tag assignment by its unique ID from the discussionboard_thread_tags table. This entity models the M:N assignment between threads and tags. The schema does not support soft delete; deletion removes the association record permanently (hard delete).\n\nOnly moderators or admins may delete tag assignments, for example to clean up miscategorized relationships or under moderation requirements. Attempts to delete non-existent tag assignments return 404. No extraneous audit/deletion fields are present in this model.","description":"This API operation deletes a thread tag assignment identified by its unique ID. The Prisma schema has no deleted_at or is_deleted fields, so this action is a hard delete: the record is removed from the discussionboard_thread_tags table. Only authorized moderators or admins may perform deletion. No partial deletion or soft delete mechanism exists for this model.","summary":"Hard delete a thread tag assignment by ID (discussionboard_thread_tags); record is permanently removed.","parameters":[{"name":"id","description":"Unique identifier of the thread tag assignment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/threadTags/{id}","method":"delete"},{"specification":"Create a new post in the discussionboard_posts table. This model represents user-posted discussion content within a thread and board. Required fields are discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, and updated_at. The is_deleted field supports soft-deletion logic in accordance with post lifecycle and moderation requirements.\n\nThis endpoint accepts only those fields explicitly defined in the schema. No non-existent or derived fields are processed. Success results in the newly created post, with all schema fields populated. The is_deleted field is false for initial creation.","description":"This API operation creates a new post in the discussionboard_posts table by accepting the required and optional schema-defined fields. Only discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, and updated_at are processed. No fields outside the Prisma schema are referenced. The created post is returned with all details filled.","summary":"Create a discussionboard post (discussionboard_posts) with required fields only.","parameters":[],"requestBody":{"description":"New post data (discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, updated_at).","typeName":"IDiscussionboardPost.ICreate"},"responseBody":{"description":"Created post record, fully filled as per schema.","typeName":"IDiscussionboardPost"},"authorizationRole":"member","name":"create","path":"/discussionboard/posts","method":"post"},{"specification":"Retrieve a paginated list of posts from the discussionboard_posts table. Each record is a member-posted contribution to a thread. List/indexing supports search, filtering, and pagination based on schema fields (id, discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, updated_at).\n\nSoft deletion is implemented via the is_deleted field: index queries may include/exclude deleted posts based on this field. No hard delete indicator or additional audit fields are present. The response returns a paginated page envelope following standard list conventions.","description":"This API operation lists posts from the discussionboard_posts table using supplied pagination, filtering, and search criteria. Indexing is strictly based on existing fields (id, discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, updated_at). Use the is_deleted flag to filter for only active or deleted posts as needed. The response is a paginated envelope of post records. No other schema fields are supported.","summary":"List and search discussionboard posts (discussionboard_posts) using search, pagination, and the is_deleted flag.","parameters":[],"requestBody":{"description":"Request body with pagination/search arguments using only schema-supported filters (id, discussionboard_thread_id, is_deleted, etc.).","typeName":"IPageIDiscussionboardPost.IRequest"},"responseBody":{"description":"Paginated result envelope of post records as per the schema.","typeName":"IPageIDiscussionboardPost"},"authorizationRole":"member","name":"index","path":"/discussionboard/posts","method":"patch"},{"specification":"Retrieve a single post from the discussionboard_posts table by its unique ID. Each post is a member-created contribution to a thread and board. This endpoint returns the full details of the post, including soft deletion state (is_deleted) and all present schema fields. No extraneous/derived fields are present.\n\nIf the post does not exist, a 404 is returned. Soft delete actions are only indicated by the is_deleted flag; the record is always present if found. No deleted_at or hard delete status is in the model.","description":"This API operation retrieves a single post from the discussionboard_posts table, identified by its unique ID. Fields returned include id, discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, and updated_at, all as present in the schema. If the post is not found, a 404 is returned. There is no deleted_at or hard deletion marker in the model.","summary":"Get a discussionboard post by its unique ID from discussionboard_posts, including soft deletion state.","parameters":[{"name":"id","description":"Unique identifier of the post to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post record as per schema, or 404 if not found.","typeName":"IDiscussionboardPost"},"authorizationRole":"member","name":"at","path":"/discussionboard/posts/{id}","method":"get"},{"specification":"Update an existing post in the discussionboard_posts table by its unique ID. This model represents forum post content with fields for thread, author, board, title, body, is_deleted (for soft delete), created_at, and updated_at. Only these schema fields are mutable.\n\nThe endpoint allows members to update their own posts, and moderators/admins to edit any post. Only fields present in the model can be changed. Soft delete may be performed by setting is_deleted to true. If the post does not exist, a 404 is returned. No hard delete or deleted_at logic exists in the model.","description":"This API operation updates a post identified by its ID in the discussionboard_posts table. All mutable fields are limited to schema-defined fields (discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, updated_at). is_deleted may be used to soft-delete. No non-schema fields can be provided or returned. Returns the updated post or 404 if not found.","summary":"Update a discussionboard post (discussionboard_posts) by ID, including soft deletion through is_deleted field.","parameters":[{"name":"id","description":"Unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post update information (only schema fields are allowed; is_deleted enables soft delete).","typeName":"IDiscussionboardPost.IUpdate"},"responseBody":{"description":"Updated post record per schema definition.","typeName":"IDiscussionboardPost"},"authorizationRole":"member","name":"update","path":"/discussionboard/posts/{id}","method":"put"},{"specification":"Delete a post from the discussionboard_posts table by its unique ID. The existence of the is_deleted field in this model means that DELETE does not immediately hard-remove the post; instead, it performs a soft delete by setting is_deleted to true. The record remains in the database for audit/history.\n\nThis operation is allowed to members (for their own posts) and moderators/admins (for any post). Only the is_deleted flag is changed; no record is removed from the DB. Attempting to delete a non-existent post returns a 404. Actions modifying any fields not present in the schema will result in error.","description":"This API operation performs a soft delete on a discussionboard post by setting the is_deleted field to true. The DELETE does not hard-remove the record; instead, the post remains in the database, consistent with audit and content retention requirements. If the post is not found, returns 404. No other non-schema fields are supported. This endpoint may be used by members for their own posts, and moderators/admins for any post.","summary":"Soft delete a discussionboard post by setting is_deleted=true (no physical removal from the database).","parameters":[{"name":"id","description":"Unique identifier of the post to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/discussionboard/posts/{id}","method":"delete"}],"completed":48,"total":175,"step":0,"created_at":"2025-07-25T05:14:23.300Z"},"tokenUsage":{"facade":{"aggregate":{"total":238895,"input":{"total":222628,"cached":0},"output":{"total":16267,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":238895,"input":{"total":222628,"cached":0},"output":{"total":16267,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":238895,"input":{"total":222628,"cached":0},"output":{"total":16267,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":238895,"input":{"total":222628,"cached":0},"output":{"total":16267,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Update an existing moderator assignment by ID, allowing modification of any mod assignment field that exists in the discussionboard_moderators table. Only fields present in the schema can be updated (e.g., expires_at, revoked_at). Do not reference non-existent fields. Ensure auditability and permission enforcement as described. Associated with Prisma table: discussionboard_moderators.","description":"This operation updates an existing moderator assignment in the discussionboard_moderators table based on the provided moderator assignment ID. The moderator assignment includes information such as the member_id, assigned_by_admin_id, assigned_at, expires_at, and revoked_at. The update is used for extending, revoking, or altering the status or duration of a moderator's assignment. \n\nSecurity is paramount: Only admins can update moderator assignments. The operation enforces permissions to ensure that only authorized system admins perform this action.\n\nSpecial attention is paid to fields like expires_at (which dictates temporary moderator permissions) and revoked_at (used for deactivation or removal without hard deletion).\n\nIf the moderator assignment is not found, or if insufficient permission is detected, a meaningful error is returned. Only update valid fields defined in the schema; never introduce or reference fields not present in the Prisma table.\n\nRelated endpoints: Moderator creation (POST), assignment (PATCH), and removal (DELETE, which sets revoked_at).\n\nThis operation directly relates to the discussionboard_moderators table and does not affect the associated member's primary record, except via the moderator assignment linkage.","summary":"Update moderator assignment in discussionboard_moderators by ID.","parameters":[{"name":"id","description":"Target moderator assignment's ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for moderator assignment. Only fields that exist in the schema (expires_at, revoked_at, etc.) can be updated.","typeName":"IDiscussionboardModerator.IUpdate"},"responseBody":{"description":"Updated moderator assignment information.","typeName":"IDiscussionboardModerator"},"authorizationRole":"admin","name":"update","path":"/discussionboard/moderators/{id}","method":"put"},{"specification":"Remove (revoke) a moderator assignment by ID in discussionboard_moderators. Supports soft-revocation through setting revoked_at and does not physically delete the record (hard delete). Only fields present in the schema are referenced. Associated with Prisma table: discussionboard_moderators.","description":"This operation revokes (removes) a moderator assignment by its ID in the discussionboard_moderators table. Revocation is accomplished by setting the revoked_at timestamp, thereby deactivating moderator privileges for the affected user, rather than deleting the record from the database. \n\nThis procedure guarantees compliance with audit trail and security requirements—no actual deletion occurs, and the assignment remains for historical reference.\n\nOnly administrators have permission to invoke this operation. If the moderator assignment does not exist, or if unauthorized actors attempt the operation, a clear error is provided.\n\nThis method affects only the assignment record in discussionboard_moderators and does not physically impact related member records in discussionboard_members. No fields outside of those defined in the schema are referenced or updated.\n\nRelated endpoints: Moderator assignment creation (POST), assignment update (PUT), and moderator information query (GET).\n\nIf the assignment has already been revoked, this operation is idempotent and returns the current (previously revoked) state.","summary":"Soft-revoke moderator assignment (set revoked_at) by ID in discussionboard_moderators.","parameters":[{"name":"id","description":"Target moderator assignment's ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Revoked moderator assignment with updated revoked_at field.","typeName":"IDiscussionboardModerator"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/moderators/{id}","method":"delete"},{"specification":"Create a new administrator assignment in discussionboard_admins. Only referenced fields from the schema can be utilized—primarily member_id, assigned_by_admin_id, and assigned_at, and optionally revoked_at. Associated with Prisma table: discussionboard_admins.","description":"This operation creates a new administrator assignment in the discussionboard_admins table. It links the assignment to an existing member (using member_id) and records which admin performed the assignment (assigned_by_admin_id) and the timestamp (assigned_at). The new admin assignment enables the target member to access admin-level privileges within the discussion board platform.\n\nStrict permission enforcement ensures that only authorized administrators can create new admin assignments. If required fields are missing or the referenced member does not exist, an error is returned. No fields outside those in the schema are referenced in the assignment creation process.\n\nThis operation does not affect the associated member's primary record except by conferring admin status via the admin assignment. If an admin assignment for the target member already exists and is active, the system must prevent duplicate entries per the unique constraint defined in the schema (1:1 mapping of member to admin assignment).\n\nRelated endpoints: Admin revocation (DELETE), admin update (PUT), admin detail (GET).","summary":"Create administrator assignment in discussionboard_admins.","parameters":[],"requestBody":{"description":"Creation data for admin assignment, referencing schema fields only (member_id, assigned_by_admin_id, assigned_at, optionally revoked_at).","typeName":"IDiscussionboardAdmin.ICreate"},"responseBody":{"description":"Created administrator assignment information.","typeName":"IDiscussionboardAdmin"},"authorizationRole":"admin","name":"create","path":"/discussionboard/admins","method":"post"},{"specification":"List administrator assignments with filtering/pagination/search support. Returns administrator assignments referencing only fields present in the discussionboard_admins table. This is a privileged operation only accessible to admins. Associated with Prisma table: discussionboard_admins.","description":"This operation lists administrator assignments from the discussionboard_admins table, supporting filters such as member_id, assigned_by_admin_id, assigned_at, revoked_at, and any other legitimate fields defined in the schema. Pagination, sorting, and advanced searching capabilities are supported as per platform-wide API conventions.\n\nSecurity is strictly enforced; only users with admin privileges may access this listing. No fields or business logic beyond what exists in the schema are available.\n\nThis operation enables system administrators to audit, review, and analyze which members have or have had admin assignments over time. Deactivated assignments (where revoked_at is not null) are distinguishable by the presence of a revocation timestamp.\n\nRelated operations: Admin assignment creation (POST), detail (GET), update (PUT), revocation (DELETE).","summary":"List admin assignments in discussionboard_admins with filters/pagination.","parameters":[],"requestBody":{"description":"Query parameters for admin assignment listing and filtering; only fields from the schema (member_id, assigned_by_admin_id, assigned_at, revoked_at, etc.) are permitted.","typeName":"IDiscussionboardAdmin.IRequest"},"responseBody":{"description":"Paginated administrator assignment listing.","typeName":"IPageIDiscussionboardAdmin"},"authorizationRole":"admin","name":"index","path":"/discussionboard/admins","method":"patch"},{"specification":"Get an administrator assignment by ID in discussionboard_admins. Only schema-defined fields are returned (such as member_id, assigned_by_admin_id, assigned_at, revoked_at, etc.) Associated with Prisma table: discussionboard_admins.","description":"This operation retrieves an administrator assignment by ID from the discussionboard_admins table. All information returned is restricted to fields defined in the schema, including member_id, assigned_by_admin_id, assigned_at, and revoked_at. If the administrator assignment record does not exist for the given ID, the operation returns an informative error.\n\nStrict access control ensures only authorized admin users may retrieve such assignment details for audit, compliance, or platform management purposes. This does not impact or modify any aspect of the admin assignment; it is a read-only operation.\n\nRelated endpoints: Admin assignment list (PATCH), update (PUT), creation (POST), and removal (DELETE).\n\nAll valid schema-defined fields are eligible for return, and fields not present are strictly excluded from responses or documentation.","summary":"Get administrator assignment by ID in discussionboard_admins.","parameters":[{"name":"id","description":"Administrator assignment ID to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator assignment information matching given ID.","typeName":"IDiscussionboardAdmin"},"authorizationRole":"admin","name":"at","path":"/discussionboard/admins/{id}","method":"get"},{"specification":"Update an administrator assignment by ID, modifying any field defined in the discussionboard_admins schema (e.g., revoked_at to revoke, etc.). Only updatable fields present in the schema may be changed. Associated with Prisma table: discussionboard_admins.","description":"This operation updates an administrator assignment by its ID in the discussionboard_admins table. Permitted changes include any writable fields present in the schema, such as revoked_at, as well as any custom assignment fields. Updates to the assignment reflect changes such as revoking admin status (setting revoked_at), updating assignment metadata, or correcting audit data.\n\nOnly administrators have permission to perform this update. If the assignment has been revoked (revoked_at is not null), the assignment is considered inactive but still present for audit/compliance. Attempted updates of non-existent or non-updatable fields, or non-existent assignments, result in errors.\n\nRelated endpoints: assignment creation (POST), detail (GET), list (PATCH), and deletion (DELETE, which sets revoked_at).\n\nNo fields outside those included in the schema may be referenced or used in this operation's documentation, descriptions, or implementation.","summary":"Update administrator assignment by ID in discussionboard_admins.","parameters":[{"name":"id","description":"Target administrator assignment's ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for administrator assignment; fields must exist in the schema (e.g., revoked_at).","typeName":"IDiscussionboardAdmin.IUpdate"},"responseBody":{"description":"Updated administrator assignment data.","typeName":"IDiscussionboardAdmin"},"authorizationRole":"admin","name":"update","path":"/discussionboard/admins/{id}","method":"put"},{"specification":"Remove (revoke) an administrator assignment by ID in discussionboard_admins. Removal is soft: record is not physically deleted, but revoked_at is set. No other non-existent fields are referenced. Associated with Prisma table: discussionboard_admins.","description":"This operation soft-revokes (removes) an administrator assignment by its ID in the discussionboard_admins table. Revocation proceeds by setting revoked_at to the current timestamp, thereby ending admin privileges for the relevant member while retaining the record for audit/history. Physical (hard) deletion is not performed—the assignment is simply deactivated.\n\nPermissions are strictly enforced; only existing admins can execute revocation. The operation is idempotent—the revoked status is set if not already present, otherwise the unchanged record is returned.\n\nNo fields not present in the schema are used in this operation. The affected member's main entry in discussionboard_members is not physically altered.\n\nRelated endpoints: assignment creation (POST), detail (GET), list (PATCH), and update (PUT).\n\nError handling: If the assignment does not exist, or the user lacks permission, proper feedback is given.","summary":"Soft-revoke administrator assignment (set revoked_at) by ID in discussionboard_admins.","parameters":[{"name":"id","description":"Administrator assignment ID to revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator assignment record with updated revoked_at field.","typeName":"IDiscussionboardAdmin"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/admins/{id}","method":"delete"},{"specification":"Create a new discussionboard_channels (forum channel) entity as a top-level organizational unit, strictly referencing only fields present in the Prisma schema (code, name, description, position, active, etc.). Associated with Prisma table: discussionboard_channels.","description":"This operation creates a new channel entry in the discussionboard_channels table, which functions as a high-level organizational partition for forum content. All fields referenced (such as code, name, description, position, and active) are directly present in the schema and must be validated according to field constraints (e.g., unique code, name, etc.).\n\nAdministrators are responsible for adding new channels, and only authorized roles may invoke this operation. Duplicate codes or names (in violation of unique constraints) return an error. No non-existent or derived fields are referenced in the operation.\n\nRelated endpoints: channel list (PATCH), detail (GET), update (PUT), removal (DELETE).","summary":"Create a new channel in discussionboard_channels.","parameters":[],"requestBody":{"description":"Channel creation data (code, name, description, position, and active), referencing only schema fields.","typeName":"IDiscussionboardChannel.ICreate"},"responseBody":{"description":"Created channel entity data.","typeName":"IDiscussionboardChannel"},"authorizationRole":"admin","name":"create","path":"/discussionboard/channels","method":"post"},{"specification":"List all discussionboard_channels entities, supporting pagination, filtering, and searching according to platform conventions. Only returns fields from the schema (code, name, description, position, active, etc.). Associated with Prisma table: discussionboard_channels.","description":"This operation lists channels (categories) in the discussionboard_channels table, supporting filter and pagination parameters for all legitimate schema-defined fields (e.g., code, name, active, position). Only fields defined in the schema are returned. This endpoint enables system administrators to view all channels available for organizing boards.\n\nThis operation does not return or use non-existent or derived fields.\n\nRelated endpoints: channel creation (POST), detail (GET), update (PUT), and removal (DELETE).","summary":"List channels in discussionboard_channels with filtering and pagination.","parameters":[],"requestBody":{"description":"Optional filter/search parameters for channels, referencing only schema fields (e.g., code, name, active, position).","typeName":"IDiscussionboardChannel.IRequest"},"responseBody":{"description":"Paginated channel listing.","typeName":"IPageIDiscussionboardChannel"},"authorizationRole":"admin","name":"index","path":"/discussionboard/channels","method":"patch"},{"specification":"Get a discussionboard_channels entity by ID. All fields returned must exist in the schema (code, name, description, position, active, etc.). Associated with Prisma table: discussionboard_channels.","description":"This operation retrieves a channel by its ID from the discussionboard_channels table. Only schema-defined fields such as code, name, description, position, active, and their values are returned. If the specified channel does not exist, a not found error is returned. Only administrators are permitted to access this operation for audit, configuration, or management.\n\nNo fields outside of those in the schema may be referenced, returned, or used. This endpoint does not affect any related boards, sections, or user permissions—read-only and strictly focused on the channel entity.\n\nRelated endpoints: channel list (PATCH), creation (POST), update (PUT), removal (DELETE).","summary":"Get channel by ID from discussionboard_channels.","parameters":[{"name":"id","description":"The unique ID of the channel to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Channel entity data for the requested ID.","typeName":"IDiscussionboardChannel"},"authorizationRole":"admin","name":"at","path":"/discussionboard/channels/{id}","method":"get"},{"specification":"Update an existing channel (discussionboard_channels) by ID, allowing modification of any field present in the schema (such as code, name, description, position, active, etc.). Only schema-referenced fields may be changed. Associated with Prisma table: discussionboard_channels.","description":"This operation updates an existing channel entry in the discussionboard_channels table by its ID, permitting changes to any of the fields present in the schema. Common updates include renaming the channel, changing its code, updating the description, position, or the active status. Administrators performing this update must respect all unique constraints (such as unique code or name); attempts to violate these constraints return errors. No fields that are not in the schema may be referenced or updated.\n\nOnly administrators are permitted to perform updates. If a channel with the specified ID does not exist, a not found error is returned.\n\nRelated endpoints: channel creation (POST), detail (GET), list (PATCH), and removal (DELETE).","summary":"Update channel by ID in discussionboard_channels.","parameters":[{"name":"id","description":"Channel ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the channel (code, name, description, position, active, etc.); only schema fields may be updated.","typeName":"IDiscussionboardChannel.IUpdate"},"responseBody":{"description":"Updated channel entity data.","typeName":"IDiscussionboardChannel"},"authorizationRole":"admin","name":"update","path":"/discussionboard/channels/{id}","method":"put"},{"specification":"Delete a channel from discussionboard_channels by ID via hard delete, as no soft delete field (e.g., deleted_at, is_deleted) is present in the schema. This operation physically removes the record. Associated with Prisma table: discussionboard_channels.","description":"This operation removes a channel record from the discussionboard_channels table by its ID, performing a hard delete (permanent removal from the database). The table does not support soft deletion, so the method physically deletes the record and all related foreign keys that cascade on delete according to schema constraints.\n\nOnly administrators have permission to delete channels. If the specified channel does not exist, or if deletion would violate a foreign key constraint, an appropriate error is returned. No non-existent or derived fields may be referenced in documentation or implementation.\n\nRelated endpoints: channel creation (POST), detail (GET), update (PUT), list (PATCH).","summary":"Hard delete channel by ID in discussionboard_channels (physical deletion, no soft delete in schema).","parameters":[{"name":"id","description":"The unique ID of the channel to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/channels/{id}","method":"delete"}],"completed":60,"total":175,"step":0,"created_at":"2025-07-25T05:14:24.351Z"},"tokenUsage":{"facade":{"aggregate":{"total":288094,"input":{"total":267932,"cached":0},"output":{"total":20162,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":288094,"input":{"total":267932,"cached":0},"output":{"total":20162,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":288094,"input":{"total":267932,"cached":0},"output":{"total":20162,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":288094,"input":{"total":267932,"cached":0},"output":{"total":20162,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new post snapshot. This operation creates an immutable record of a post's version at a specific moment. It requires linking to the parent post via discussionboard_post_id, an editor_member_id reference (nullable for system edits), and the snapshot fields: title, body, and taken_at timestamp. This operation is crucial for versioning and audit, supporting rollback and transparency for post edits. According to schema, all required fields must exist, and no extraneous audit fields such as created_by or updated_by are used. No soft delete exists for this entity; snapshots are always append-only records.","description":"This endpoint allows creation of a new post snapshot (discussionboard_post_snapshots). The snapshot captures the state of a post at a particular moment, recording the title, body, and editor_member_id (who performed the edit or system if null), and the taken_at timestamp for audit. Once created, each snapshot acts as an immutable historical record. This fulfills content auditability, rollback, and moderation features required by the system. As per schema, there is no soft delete or update operation for this entity. Relationship to the original post is established via discussionboard_post_id, and all properties referenced here are verified to exist in the Prisma schema. This operation is restricted to authenticated members, moderators, or admins with appropriate privileges when creating historical snapshots. Error handling includes validation of referenced post and editor existence. No fields like deleted_at or created_by are present in the schema for this model, so none are referenced.","summary":"Create a post snapshot record in discussionboard_post_snapshots.","parameters":[],"requestBody":{"description":"Information required to create a post snapshot. Must include discussionboard_post_id, editor_member_id (nullable), title, body, and taken_at timestamp.","typeName":"IPostSnapshot.ICreate"},"responseBody":{"description":"The created post snapshot object.","typeName":"IPostSnapshot"},"authorizationRole":"member","name":"create","path":"/discussionboard/postSnapshots","method":"post"},{"specification":"List and search post snapshots (discussionboard_post_snapshots). Enables paginated and filtered retrieval of post version history for a specific post or by various search criteria. Typical use cases include versioning audit display, moderation review, and restore/rollback workflows. Supported request parameters are restricted to fields defined in the schema – filter by discussionboard_post_id, editor_member_id, title, body, or taken_at. Soft delete is not available for snapshots, so only existing rows are returned. Pagination and sorting should be implemented at service/controller level if required. The operation does not require a request body for basic listing, but for advanced search, a proper filter object referring to actual schema fields is supplied. Error handling includes validation of referenced post and relevant IDs.","description":"This endpoint enables searching and listing post snapshot records for historical review and audit trails. Results can be filtered by properties like discussionboard_post_id (for one post), editor_member_id, taken_at, and snapshot title. Supports pagination and sorting if needed by frontend. Use cases include audit log display, moderation review, member self-service viewing of edit history, and admin investigations. All referenced properties exist in the schema, and there are no audit fields like deleted_at, created_by, etc. This operation is authorization-guarded—members see their own edit history, moderators/admins may search more broadly. Only currently existing snapshots are returned, as the schema does not support snapshot soft delete.","summary":"Paginate and search post snapshot records (discussionboard_post_snapshots).","parameters":[],"requestBody":{"description":"Request parameters for searching and paginating post snapshots, filtered by existing schema fields (e.g., by post id, editor, timestamp, etc).","typeName":"IPostSnapshot.IRequest"},"responseBody":{"description":"Paginated result set of post snapshot records.","typeName":"IPageIPostSnapshot"},"authorizationRole":"member","name":"index","path":"/discussionboard/postSnapshots","method":"patch"},{"specification":"Retrieve a single post snapshot record from discussionboard_post_snapshots by its unique id. This operation supports version rollback, moderator review, and edit audit functions. The field id refers to the snapshot's primary key (UUID). No soft-delete or hidden states exist for this entity; all fields returned are directly from schema and never reference non-existent audit columns. Operation restricted to authorized members/moderators/admins. Error handling for non-existent id returns a 404.","description":"This endpoint retrieves a specific post snapshot entity using its unique id. All properties in the response correspond directly to the schema: discussionboard_post_id, editor_member_id (nullable), title, body, taken_at. Used for displaying historical post version, supporting moderator investigation, or enabling restoration workflows. Soft-delete is not supported for snapshots, so the operation either returns the record or a not found error. There are no created_by, updated_by, or deleted_at fields. Proper role-based authentication is enforced to prevent exposing edit history inappropriately.","summary":"Get a specific post snapshot (by id) from discussionboard_post_snapshots.","parameters":[{"name":"id","description":"The unique id of the post snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed post snapshot object (all fields from schema).","typeName":"IPostSnapshot"},"authorizationRole":"member","name":"at","path":"/discussionboard/postSnapshots/{id}","method":"get"},{"specification":"Update an existing post snapshot in discussionboard_post_snapshots by id. This operation is for correcting audit errors, resolving moderation escalations, or remedying historical inaccuracies. Only updatable fields from the schema are modifiable: title, body, and taken_at. The id must correspond to the snapshot's primary key (UUID). As per strict audit compliance, most edits should be logged – in normal site flow, snapshots are usually append-only, but for admin override this operation is provided. The schema contains no extra audit fields. Soft delete does not exist for this entity, so the update affects existing record in place.","description":"This endpoint updates a post snapshot entity by its unique id. Updatable properties are limited to actual schema fields: title, body, taken_at, and editor_member_id (nullable). Used in rare moderation/admin scenarios for correcting audit history or factual errors. Routine site editing must create new snapshot records instead; this operation is strictly role-limited. There are no created_by or deleted_at fields, so none are referenced. Error cases include not found id, or forbidden edit by insufficient role. Authorization is enforced (usually admin-only access).","summary":"Update a specific post snapshot in discussionboard_post_snapshots (admin/mod only).","parameters":[{"name":"id","description":"The unique id of the post snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the post snapshot (limited to title, body, taken_at, editor_member_id).","typeName":"IPostSnapshot.IUpdate"},"responseBody":{"description":"The updated post snapshot record.","typeName":"IPostSnapshot"},"authorizationRole":"admin","name":"update","path":"/discussionboard/postSnapshots/{id}","method":"put"},{"specification":"Delete a post snapshot from discussionboard_post_snapshots by id. This operation irreversibly removes the snapshot from the database. The schema does not have a soft delete or deleted_at field, so this operation performs a hard delete. Typical use is rare, reserved for admin cleanup or compliance with data retention policies (e.g., GDPR, error removal). Primary key id identifies the snapshot to delete. No extra fields are referenced in the operation or description. Authorization required (admin only).","description":"This operation deletes a post snapshot by unique id, permanently removing it from the discussionboard_post_snapshots table. Since the schema lacks a soft deletion mechanism, deletion is hard and immediate—no deleted_at or is_deleted field exists. Used mainly for admin or legal compliance workflows. Returns success on deletion or 404 if not found. Only authorized admins can use this operation, and audit trails should be managed elsewhere (outside snapshot itself).","summary":"Hard-delete a post snapshot record in discussionboard_post_snapshots by id (ADMIN ONLY).","parameters":[{"name":"id","description":"The unique id of the post snapshot to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/postSnapshots/{id}","method":"delete"},{"specification":"Create a post vote record (discussionboard_post_votes). Members use this to cast an upvote, downvote, or retract vote on a specific post. Each record must reference an existing post (discussionboard_post_id), voting member (discussionboard_member_id), the vote_type (integer: 1=upvote, -1=downvote, 0=neutral/remove), and creation timestamp. Each (discussionboard_post_id, discussionboard_member_id) pair is unique (one vote per member per post). There are no audit fields; deletion is hard (not soft).","description":"This endpoint registers a vote by a member on a post. The request must include discussionboard_post_id, discussionboard_member_id, vote_type (1 or -1 or 0), and created_at. The association is unique per (post, member), supporting upvotes, downvotes, or vote retraction (0). Schema fields are strictly followed—no extra audit fields are referenced. There is no deleted_at; to remove a vote, set vote_type to 0 or delete the record. Authorization required: only authenticated members can vote.","summary":"Create a new post vote (upvote/downvote) record in discussionboard_post_votes.","parameters":[],"requestBody":{"description":"The data required to register a new post vote (must reference post and member, include vote_type, and timestamp).","typeName":"IPostVote.ICreate"},"responseBody":{"description":"The created post vote object.","typeName":"IPostVote"},"authorizationRole":"member","name":"create","path":"/discussionboard/postVotes","method":"post"},{"specification":"List and search post vote records (discussionboard_post_votes). This supports analytic, moderation, or profile display use cases allowing queries by post, member, or vote_type. Supported filters are only those in the schema: discussionboard_post_id, discussionboard_member_id, vote_type, created_at. Supports pagination and advanced search on actual fields only. There is no soft delete column for this entity; results always reflect current, non-deleted rows. Returns a paginated list of votes.","description":"This endpoint returns a list of post votes filtered by allowed criteria such as post id, member id, vote_type (1=upvote, -1=downvote, 0=neutral), and creation date. Used for analytics, profile summaries, or moderation review of post voting patterns. Only fields present in the schema are referenced. As there is no soft delete, results include all current votes. Authorization required for sensitive queries (moderators/admins), but members can view their own votes. Pagination and sorting implemented at controller/service level.","summary":"Search and paginate post votes in discussionboard_post_votes.","parameters":[],"requestBody":{"description":"Search parameters for post votes (only fields in schema: post id, member id, vote_type, created_at).","typeName":"IPostVote.IRequest"},"responseBody":{"description":"Paginated set of post votes meeting search criteria.","typeName":"IPageIPostVote"},"authorizationRole":"member","name":"index","path":"/discussionboard/postVotes","method":"patch"},{"specification":"Get a single post vote record from discussionboard_post_votes by id. The operation retrieves all fields in the schema for that record: discussionboard_post_id, discussionboard_member_id, vote_type, and created_at. Each id is the primary key for the vote record (UUID). There is no soft delete logic; if the record exists it is returned, else 404. Used for audit, moderation, or member profile display. Returns all valid fields per schema with no extraneous audit columns.","description":"This endpoint fetches a specific post vote by id, returning all present fields including discussionboard_post_id, discussionboard_member_id, vote_type, and created_at. Used for profile activity, moderation, or analytic review. Soft delete is not supported, so only live votes are accessible. No extraneous or virtual fields (e.g., deleted_at) are included. Proper authentication is enforced: only the vote owner, moderators, or admins can access vote records for integrity and privacy.","summary":"Fetch a single post vote record by id (discussionboard_post_votes).","parameters":[{"name":"id","description":"The unique id of the post vote to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The post vote record for given id.","typeName":"IPostVote"},"authorizationRole":"member","name":"at","path":"/discussionboard/postVotes/{id}","method":"get"},{"specification":"Update an existing post vote record in discussionboard_post_votes by id. Only fields updatable according to schema (vote_type, created_at) can be modified. Used for correcting vote errors, moderation interventions, or audit compliance. The id must be a UUID matching the vote record. Routine users typically change votes by casting again; this operation is mainly for admin or system use. No soft delete; all updates are in-place. Only schema fields are referenced. Authorization required.","description":"This endpoint updates a post vote in discussionboard_post_votes by its unique id. Allowed fields: vote_type and created_at, which must match the field types in the schema. Used by moderators/admins for correcting or reviewing mistaken votes, or in rare audit workflows. Soft delete is not supported, so all changes persist in the main vote record. Only schema fields are used. Authentication and authorization require admin or moderator privileges, not available to regular members.","summary":"Update a post vote record by id (admin/moderator only).","parameters":[{"name":"id","description":"The unique id of the post vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated post vote data (vote_type and created_at only).","typeName":"IPostVote.IUpdate"},"responseBody":{"description":"The updated post vote record.","typeName":"IPostVote"},"authorizationRole":"admin","name":"update","path":"/discussionboard/postVotes/{id}","method":"put"},{"specification":"Delete a post vote record from discussionboard_post_votes by id. This entity has no soft delete mechanism; deletion is hard—row is permanently removed from the database. Used only for moderator/admin actions, vote clean-up, or error correction. Primary key id identifies the vote to delete. No audit or deleted_at fields referenced. Authorization enforced by role.","description":"This endpoint deletes a post vote record identified by id, for example due to moderation review, error, or duplicate vote removal. Hard delete: record is irreversibly removed from the database as no soft-delete schema exists. Only admin/moderator may execute. All referenced fields must exist in the schema and no implicit fields are referenced or returned. Ensures data consistency for post voting records.","summary":"Hard-delete a post vote from discussionboard_post_votes by id (ADMIN/MOD only).","parameters":[{"name":"id","description":"The unique id of the post vote to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/postVotes/{id}","method":"delete"},{"specification":"Create a post report record (discussionboard_post_reports). Members use this endpoint to report a post for issues such as spam, abuse, or policy violation. Required fields: discussionboard_post_id, reporter_member_id, report_type_id (refers to allowed types), optional freeform description, and creation timestamp. All references must be valid UUIDs. One report per member per post per type enforced by unique constraint. Soft delete does not exist; all records are permanent. Authorization required so only authenticated members can file reports.","description":"This endpoint registers a report against a post by an authenticated member on the discussionboard_post_reports table. Fields: discussionboard_post_id, reporter_member_id, report_type_id, description (nullable), and created_at. Used to enable community moderation, audit, and compliance as per business rules. No soft delete mechanism exists for this table—reports are permanent unless hard deleted (admin only).","summary":"Create a report against a post (discussionboard_post_reports).","parameters":[],"requestBody":{"description":"Report details (post id, reporter id, report type id, optional description, created_at).","typeName":"IPostReport.ICreate"},"responseBody":{"description":"The created post report record.","typeName":"IPostReport"},"authorizationRole":"member","name":"create","path":"/discussionboard/postReports","method":"post"},{"specification":"Search and list post report records (discussionboard_post_reports) for moderation, audit, or analytics. Filters allowed: discussionboard_post_id, reporter_member_id, report_type_id, and created_at. Returns paginated results. No soft delete; only current records visible. All referenced fields must exist in schema. Authorization required; members see own submitted reports, moderators/admins see all.","description":"This endpoint supports searching and listing post report records with optional filters by post id, reporter member id, report type id, and created_at. Use cases: moderator review queues, user activity/complaint records, analytics reporting. Results are paginated, all fields are strictly from model, and there is no soft deletion; deletions are hard only (admin/mod only).","summary":"List and filter post reports (discussionboard_post_reports).","parameters":[],"requestBody":{"description":"Filter/search parameters: post id, reporter id, report type, created_at (all from schema).","typeName":"IPostReport.IRequest"},"responseBody":{"description":"Paginated list of post report records matching filters.","typeName":"IPageIPostReport"},"authorizationRole":"member","name":"index","path":"/discussionboard/postReports","method":"patch"}],"completed":72,"total":175,"step":0,"created_at":"2025-07-25T05:14:26.736Z"},"tokenUsage":{"facade":{"aggregate":{"total":337182,"input":{"total":313230,"cached":0},"output":{"total":23952,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":337182,"input":{"total":313230,"cached":0},"output":{"total":23952,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":337182,"input":{"total":313230,"cached":0},"output":{"total":23952,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":337182,"input":{"total":313230,"cached":0},"output":{"total":23952,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"DELETE /discussionboard/boards/{id} removes a board from the system. The discussionboard_boards table does not have any soft delete fields such as deleted_at or is_deleted. Therefore, this operation performs a hard delete, permanently removing the board record from the database. All related data referencing this board must be handled appropriately according to foreign key constraints and onDelete behavior defined in the schema (e.g., related threads and posts are set to CASCADE), and audit trails must be managed separately. Attempts to delete a non-existent id result in an error.","description":"This API operation allows for the permanent, hard deletion of a specific board from the discussionboard_boards table.\n\nThe endpoint directly deletes the row corresponding to the provided id. There are no soft deletion columns (such as deleted_at or is_deleted) present in the schema, so the board will be physically removed from the database. As a result, all references to this board in related entities (such as threads, posts, settings, and engagement metrics) will be affected according to their foreign key constraints (typically cascade delete or restrict). This operation is irreversible, and clients must ensure backup or audit coverage if required by compliance policies.\n\nIf an invalid or non-existent id is supplied, an appropriate error will be returned. Authorization logic should require admin or moderator privileges to execute this delete operation, in line with the platform's business rules for governance and auditability.","summary":"Permanently delete a board (discussionboard_boards) by id. Performs hard delete because no soft delete fields exist.","parameters":[{"name":"id","description":"UUID of the board to delete from discussionboard_boards.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/boards/{id}","method":"delete"},{"specification":"POST /discussionboard/boardCategories creates a new board category in the discussionboard_board_categories table. This operation requires a JSON object in the request body specifying the fields: name (string), code (string), optional description (string), and position (integer). All fields are validated against business rules: name/code must be unique, code is used for programmatic references, and position determines the category order. The endpoint returns the created category data upon success.","description":"This endpoint enables the creation of a new board category in the discussionboard_board_categories table.\n\nClients must supply a valid request body with all required fields (name, code, position), with the option to include a description. The name and code must be unique within the table, as enforced by the schema's unique constraints. The position field controls the order of categories in UI displays. A successful operation returns the created category's data. Attempts to create a category with duplicate name or code will result in an error. Admin authorization is required for category management tasks, according to platform business rules.","summary":"Create a new board category (discussionboard_board_categories).","parameters":[],"requestBody":{"description":"New category data for discussionboard_board_categories.","typeName":"IDiscussionboardBoardCategory.ICreate"},"responseBody":{"description":"Created category entity.","typeName":"IDiscussionboardBoardCategory"},"authorizationRole":"admin","name":"create","path":"/discussionboard/boardCategories","method":"post"},{"specification":"PATCH /discussionboard/boardCategories retrieves a filtered or paginated list of board categories from the discussionboard_board_categories table. The operation supports search parameters (e.g., by name, code, position, description) and pagination settings supplied in the request body. It returns a paginated response with a list of matching categories.","description":"This API operation allows clients to retrieve a list of board categories from the discussionboard_board_categories table. Query parameters can be used to filter based on the category name, code, position, or description fields, as defined in the schema. Pagination settings (such as page number and size) should be supported in the request body to efficiently browse through categories. The operation returns a page object containing a list of matching category entities and pagination metadata. Proper admin authorization may be required to view or manage categories, as per business rules.","summary":"Search/filter and paginate board categories (discussionboard_board_categories).","parameters":[],"requestBody":{"description":"Search and pagination data for board category list.","typeName":"IDiscussionboardBoardCategory.IRequest"},"responseBody":{"description":"Paginated list of board categories.","typeName":"IPageIDiscussionboardBoardCategory"},"authorizationRole":"admin","name":"index","path":"/discussionboard/boardCategories","method":"patch"},{"specification":"GET /discussionboard/boardCategories/{id} retrieves a single board category record by its id (UUID) from the discussionboard_board_categories table. Only fields present in the schema (id, name, code, description, position, created_at) are included in the response. If the category is not found, an appropriate error is returned.","description":"This API retrieves a single board category from the discussionboard_board_categories table by its unique identifier (id).\n\nIt returns all relevant details for the category: id, name, code, description, position, and created_at, as defined in the schema. If the specified id does not match any record, a not found error is returned. Admin or authorized user permissions are generally required for this endpoint, according to the business logic outlined in the platform's moderation and admin rules. This endpoint is primarily used in admin or configuration panels.","summary":"Retrieve a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"UUID of the board category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The requested board category entity.","typeName":"IDiscussionboardBoardCategory"},"authorizationRole":"admin","name":"at","path":"/discussionboard/boardCategories/{id}","method":"get"},{"specification":"PUT /discussionboard/boardCategories/{id} updates the details of a specific board category in the discussionboard_board_categories table by id. Clients must supply the fields to update (name, code, description, position) in the request body, following validation for unique constraints and business rules. The operation returns the updated category entity on success.","description":"This operation allows you to update the properties of an existing board category (discussionboard_board_categories) record.\n\nThe request requires a valid id as a path parameter and a request body containing one or more fields to be updated. All fields must match the types defined in the schema, and changes to name or code must not conflict with existing unique constraints. Only present schema fields (name, code, description, position) can be updated. The updated entity is returned upon success. Invalid ids or conflicting unique fields result in appropriate errors. Admin privileges or similar authorization is required, as per business rules.","summary":"Update a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"UUID of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for board category.","typeName":"IDiscussionboardBoardCategory.IUpdate"},"responseBody":{"description":"The updated board category entity.","typeName":"IDiscussionboardBoardCategory"},"authorizationRole":"admin","name":"update","path":"/discussionboard/boardCategories/{id}","method":"put"},{"specification":"DELETE /discussionboard/boardCategories/{id} removes a board category from the discussionboard_board_categories table. There are no soft delete or status fields; thus, this endpoint permanently deletes the record. Foreign key constraints must be respected, and the operation is irreversible. Only authorized users (e.g., admin) may execute this operation.","description":"This API endpoint performs a hard delete of the specified board category (discussionboard_board_categories) record.\n\nThe table lacks fields for soft deletion (e.g., deleted_at or is_deleted), so the deletion is permanent. Any boards referencing this category must comply with the resulting foreign key constraint (usually restrict or cascade behavior is set in schema). Once deleted, all category data is removed and cannot be restored. The system may log this operation for compliance and audit. Authorization (such as admin privileges) is required, and errors are returned if the id does not exist.","summary":"Permanently delete a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"UUID of the board category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/boardCategories/{id}","method":"delete"},{"specification":"POST /discussionboard/boardSettings creates a new board settings record in the discussionboard_board_settings table. Request body must supply: discussionboard_board_id (UUID of target board), is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads. All fields are validated as per schema. Uniqueness of discussionboard_board_id is enforced. The endpoint returns the created entity data.","description":"This endpoint enables administrators to create a new settings record for a specified board in discussionboard_board_settings.\n\nRequest is a JSON object with each required field matching the types in the schema: discussionboard_board_id (UUID), is_locked (bool), require_approval_for_posting (bool), max_posts_per_hour (integer), allow_anonymous_viewing (bool), allow_file_uploads (bool). The uniqueness of discussionboard_board_id (one settings record per board) is enforced by the schema. Attempts to create a duplicate settings entry return an error. The created entity, as stored, is returned upon success. Authorization check for admin is required, to ensure only privileged users can modify board settings.","summary":"Create a board settings record (discussionboard_board_settings).","parameters":[],"requestBody":{"description":"Board settings data to create the record.","typeName":"IDiscussionboardBoardSetting.ICreate"},"responseBody":{"description":"Created settings entity.","typeName":"IDiscussionboardBoardSetting"},"authorizationRole":"admin","name":"create","path":"/discussionboard/boardSettings","method":"post"},{"specification":"PATCH /discussionboard/boardSettings fetches and paginates all settings records from the discussionboard_board_settings table, with support for query parameters such as discussionboard_board_id, is_locked, allow_anonymous_viewing, or other schema-defined fields. The request body provides filter and pagination parameters. Returns paginated results.","description":"This endpoint retrieves a filtered and paginated list of board settings records from the discussionboard_board_settings table. Request body may include parameters to filter results (e.g., by board id or other settings fields) and pagination controls (such as page number and size). The returned response is a standard page object containing the matched settings records and pagination info. Only existing schema fields can be used for filtering and response. Access to settings data may be restricted to admin or other authorized users according to platform policy.","summary":"List/filter, paginate board settings (discussionboard_board_settings).","parameters":[],"requestBody":{"description":"Filtering and pagination query for board settings.","typeName":"IDiscussionboardBoardSetting.IRequest"},"responseBody":{"description":"Paginated list of board settings.","typeName":"IPageIDiscussionboardBoardSetting"},"authorizationRole":"admin","name":"index","path":"/discussionboard/boardSettings","method":"patch"},{"specification":"GET /discussionboard/boardSettings/{id} returns a single board settings entity from discussionboard_board_settings by id (UUID), returning all fields defined in the schema. If the given id doesn't exist, a not found error is returned. Only authorized users should access this endpoint.","description":"Fetch a single board settings entity from the discussionboard_board_settings table given its id.\n\nReturns all fields for the settings: id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at as per schema. If the id doesn't match any stored entity, a not found error is produced. Access is restricted following business rules (typically to admins). Most commonly used in admin or moderator configuration views.","summary":"Get a board settings record (discussionboard_board_settings) by id.","parameters":[{"name":"id","description":"UUID of the board settings record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A board settings entity by id.","typeName":"IDiscussionboardBoardSetting"},"authorizationRole":"admin","name":"at","path":"/discussionboard/boardSettings/{id}","method":"get"},{"specification":"PUT /discussionboard/boardSettings/{id} updates an existing board settings record in discussionboard_board_settings. The path parameter is the entity's id. The request body provides one or more fields—only schema-defined properties may be updated. All foreign key constraints and uniqueness (per-board) are enforced. The updated entity is returned upon success.","description":"This endpoint updates the defined board settings (discussionboard_board_settings) record as specified by id.\n\nRequest requires path param 'id' and a body object with updatable schema fields: discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads. Only fields present in the schema can be updated. Uniqueness and foreign key constraints are enforced. The full, updated entity is returned after a successful update. Authorization (e.g., admin role) is required. Errors for invalid id or business rule violation.","summary":"Update board settings (discussionboard_board_settings) by id.","parameters":[{"name":"id","description":"UUID of settings entity to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the settings entity.","typeName":"IDiscussionboardBoardSetting.IUpdate"},"responseBody":{"description":"Updated settings entity.","typeName":"IDiscussionboardBoardSetting"},"authorizationRole":"admin","name":"update","path":"/discussionboard/boardSettings/{id}","method":"put"},{"specification":"DELETE /discussionboard/boardSettings/{id} permanently removes a board settings record from discussionboard_board_settings. The schema does not support soft delete or status fields. On success, the entity is removed irreversibly from the table. Only authorized users (admin or similar) should perform this action. Attempts to delete a non-existent id result in an error.","description":"This API permanently deletes a single board settings record from the discussionboard_board_settings table.\n\nNo soft delete or status fields are present; this endpoint fully removes the entity from storage. Any references (e.g., from boards) relying on this settings entity will need to respect foreign key constraints, as enforced by the schema. The operation is irreversible. Authorization (e.g., admin) is required. A not found error is returned when the id is invalid or missing.","summary":"Hard delete a settings record (discussionboard_board_settings) by id.","parameters":[{"name":"id","description":"UUID of settings record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/boardSettings/{id}","method":"delete"},{"specification":"POST /discussionboard/boardModerators adds a new moderator assignment for a board into the discussionboard_board_moderators table. The request body must provide discussionboard_board_id (UUID), discussionboard_moderator_id (UUID), is_primary (boolean), and joined_at (DateTime). All constraints—including one moderator per board and uniqueness—are validated. The created entity is returned upon success. Only admin or authorized users may assign moderators.","description":"This operation assigns a moderator to a board by creating a new entry in the discussionboard_board_moderators table.\n\nClients must provide a request body with all required fields (discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at), matching the schema. The uniqueness constraint (one row per moderator/board combo) is enforced. Any constraints on moderator eligibility or assignment frequency are checked. The newly created entity is returned. Only admin or authorized users may assign moderators to boards in accordance with platform requirements. Duplicate assignments result in an error.","summary":"Assign/add a moderator to a board (discussionboard_board_moderators).","parameters":[],"requestBody":{"description":"Moderator assignment data for the board moderator entity.","typeName":"IDiscussionboardBoardModerator.ICreate"},"responseBody":{"description":"The created board moderator assignment entity.","typeName":"IDiscussionboardBoardModerator"},"authorizationRole":"admin","name":"create","path":"/discussionboard/boardModerators","method":"post"}],"completed":84,"total":175,"step":0,"created_at":"2025-07-25T05:14:30.200Z"},"tokenUsage":{"facade":{"aggregate":{"total":386009,"input":{"total":358542,"cached":0},"output":{"total":27467,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":386009,"input":{"total":358542,"cached":0},"output":{"total":27467,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":386009,"input":{"total":358542,"cached":0},"output":{"total":27467,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":386009,"input":{"total":358542,"cached":0},"output":{"total":27467,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Update a report type in the discussionboard_report_types table. Only fields actually present in the schema may be referenced: code (unique), display_name, description, active, and created_at. Do not reference non-existent fields. The operation updates details such as the code, display name, description, or active status for a specific report type identified by its ID. This is typically done by an admin user to change the available types of reports users can submit for moderation (e.g., adding or deactivating a type such as 'abuse', 'spam', etc.). Audit and compliance rely on the presence of code and display_name fields. The operation must fail if the given id does not correspond to an existing report type. No soft delete field is present: this operation cannot be used for deletion, but can set 'active' to false to deactivate a report type.","description":"This API updates the details of an existing report type in the discussionboard_report_types table. Only the fields code, display_name, description, and active (indicating if selectable) can be modified as these are present in the schema. This endpoint allows administrative users to edit the classification and visibility of moderation report types available to members for reporting content (e.g., abusing, misinformation). The report type is uniquely identified by its ID. The updating user must ensure that the code remains unique and display_name is clear. No non-existent fields may be referenced. Changes to the report type affect what options users see when reporting. The created_at timestamp is not editable.\n\nSecurity: Only admin privileges should be allowed to perform this operation. Changes must be audit logged for compliance.\n\nValidation: Fail if id not found or new code is not unique.\n\nRelated endpoints: DELETE on the same resource for permanent removal, PATCH/POST for adding or listing report types.","summary":"Update a report type (discussionboard_report_types table) by id.","parameters":[{"name":"id","description":"The unique identifier of the report type to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new fields for updating the report type. Only code, display_name, description, and active may be changed.","typeName":"IDiscussionboardReportType.IUpdate"},"responseBody":{"description":"The updated report type resource after modification.","typeName":"IDiscussionboardReportType"},"authorizationRole":"admin","name":"update","path":"/discussionboard/reportTypes/{id}","method":"put"},{"specification":"Permanently delete a report type from the discussionboard_report_types table. The schema does NOT include a soft delete field, so this deletes the record fully and irreversibly from the database. This operation is reserved strictly for administrative users, and should only be performed if the report type is no longer needed for the platform. Audit log entries should be created as per compliance requirements, since removal is destructive. The operation targets a single report type identified by its unique ID.","description":"This endpoint deletes a report type resource from the discussionboard_report_types table by its ID, performing a hard delete since no soft delete column exists. Only admins can call this endpoint. Upon deletion, the report type will be completely removed and will not appear in reporting options going forward. Any attempt to delete a non-existent id must result in a suitable error message. Audit/compliance logs should record who deleted the type and when. Deletion may fail if other records with a foreign key reference this type unless cascading is enabled in the database schema.\n\nThis action is irreversible and must be used with caution. All fields referenced must exist in the schema. No soft deletion is available for this entity.\n\nRelated endpoints: PUT (for updating report type), PATCH/POST (for listing/creating report types).","summary":"Permanently delete a report type by id (discussionboard_report_types table).","parameters":[{"name":"id","description":"The unique identifier of the report type to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/reportTypes/{id}","method":"delete"},{"specification":"Create a new moderation action in the discussionboard_moderation_actions table. All referenced fields must exist in the schema: report_id (nullable), acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at. This is typically called when a moderator or admin takes an action in response to a user report or proactive review. The acting_moderator_id must reference a valid moderator, and report_id is nullable if the action is not triggered by a report. The endpoint records the type of moderation activity (e.g., 'warn', 'delete', 'edit'), the object moderated, rationale for the action, and the actor. Returns the full moderation action resource after creation.","description":"This API endpoint allows creation of a new moderation action entry in the discussionboard_moderation_actions table. Moderation actions record interventions by moderators and admins, such as content deletion, user banning, warning issuance, or editing posts/comments. The caller must provide acting_moderator_id (identifying the moderator/admin who performed the action), target_object_id (the object being moderated), target_object_type (e.g., 'post', 'comment'), action_type (type of action, such as 'delete' or 'warn'), rationale (the justification for the action), and actioned_at (timestamp). The optional report_id can be provided if the action is in response to a user report; otherwise, it may be null. No non-schema fields may be referenced. On success, the created moderation action is returned.\n\nSecurity: Only authenticated moderators or admins may perform moderation actions.\n\nValidation: actor, target, and (optional) report references must correspond to existing records where applicable.\n\nRelated endpoints: PATCH for searching moderation actions, GET/PUT/DELETE on an action by id.","summary":"Create a new moderation action (discussionboard_moderation_actions table).","parameters":[],"requestBody":{"description":"The moderation action details to create. All fields must exist in schema: report_id (nullable), acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at.","typeName":"IDiscussionboardModerationAction.ICreate"},"responseBody":{"description":"The moderation action resource after creation.","typeName":"IDiscussionboardModerationAction"},"authorizationRole":"moderator","name":"create","path":"/discussionboard/moderationActions","method":"post"},{"specification":"Search and list moderation actions from the discussionboard_moderation_actions table, possibly with filters such as acting_moderator_id, target_object_type, action_type, and date ranges. All referenced fields must exist in the schema. The result should be paginated and can include search/sort parameters based on query data. This endpoint is typically used by moderators and admins to review historic moderation activities for compliance and audit review.","description":"This endpoint returns a paginated list of moderation actions from the discussionboard_moderation_actions table. Optional filters can include acting moderator, action type, target object type, and date ranges, all of which directly map to schema fields: acting_moderator_id, target_object_type, action_type, actioned_at, and possibly report_id. The data returned provides insight into moderation history for purposes such as transparency, compliance, and workflow review. Sorting and pagination parameters can be included in the request body.\n\nSecurity: Only accessible to moderators and admins for audit purposes.\n\nValidation: Filters must only reference fields that exist in schema.\n\nRelated endpoints: POST (creation), GET/PUT/DELETE by id (detail/update/removal).","summary":"List/search moderation actions (discussionboard_moderation_actions table).","parameters":[],"requestBody":{"description":"Search parameters for listing moderation actions. Only schema fields acting_moderator_id, target_object_type, action_type, actioned_at, and report_id may be referenced.","typeName":"IDiscussionboardModerationAction.IRequest"},"responseBody":{"description":"Paginated moderation action search result set.","typeName":"IPageIDiscussionboardModerationAction"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/moderationActions","method":"patch"},{"specification":"Get a single moderation action by its id from the discussionboard_moderation_actions table. Only fields present in the schema may be referenced (acting_moderator_id, target_object_id, target_object_type, action_type, rationale, actioned_at, report_id). Returns the moderation action record for audit, workflow, or review purposes. If the id does not exist, return a not found error. Only authorized moderators or admins can access this endpoint.","description":"Retrieves a specific moderation action resource, as identified by its unique id, from the discussionboard_moderation_actions table. Exposes only fields that exist in the schema. This endpoint is used for transparency, audit trails, workflow reviews, and appeals processes. If the resource is not found, an error is returned. Only accessible to authenticated moderators or admins.\n\nRelated endpoints: PUT (for updating), DELETE (for removal), PATCH/POST (for searching/creating).","summary":"Get detailed info for a moderation action by id (discussionboard_moderation_actions table).","parameters":[{"name":"id","description":"The unique identifier of the moderation action to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The moderation action resource.","typeName":"IDiscussionboardModerationAction"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/moderationActions/{id}","method":"get"},{"specification":"Update an existing moderation action record in the discussionboard_moderation_actions table by id. All referenced fields must exist in schema: acting_moderator_id, target_object_id, target_object_type, action_type, rationale, actioned_at, and report_id (nullable). This may be used to correct errors, supplement rationale, or modify action details for compliance or appeals processing. Only authorized moderators or admins are allowed to update actions. Returns the modified moderation action resource.","description":"Updates the details of a specific moderation action in the discussionboard_moderation_actions table, identified by its id. Only schema-defined fields may be referenced: acting_moderator_id, target_object_id, target_object_type, action_type, rationale, report_id (nullable), and actioned_at. This may be called to correct or supplement an action for workflow, audit, or compliance purposes. Must return not found if resource does not exist, and only accept changes to actual schema fields. Security: Restricted to authenticated moderators or admins. All updates should be logged for audit.\n\nRelated endpoints: GET (details), DELETE (removal), PATCH/POST (search/creation).","summary":"Update a moderation action by id (discussionboard_moderation_actions table).","parameters":[{"name":"id","description":"The unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new moderation action fields to set. Update only schema fields: acting_moderator_id, target_object_id, target_object_type, action_type, rationale, report_id (nullable), and actioned_at.","typeName":"IDiscussionboardModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action resource.","typeName":"IDiscussionboardModerationAction"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/moderationActions/{id}","method":"put"},{"specification":"Permanently delete a moderation action record from the discussionboard_moderation_actions table. The schema has no soft delete field, so this operation fully erases the record from the database. This action should be performed only by authorized moderators or admins and is irreversible. Audit log entries should track the actor, time, and rationale for deletion. The action targets a single moderation action identified by id.","description":"Deletes a specific moderation action resource from the discussionboard_moderation_actions table, by unique id. As no soft delete functionality exists in schema, this action permanently removes the record. This should be used with caution for compliance or error correction purposes. If references elsewhere rely on this action, referential integrity must be checked at the DB level. Only authenticated moderators or admins may call this endpoint. Not found errors are returned for missing id. Audit logging should capture the deletion.\n\nRelated endpoints: GET/PUT (details, updates), PATCH/POST (list, create moderation actions).","summary":"Permanently delete a moderation action by id (discussionboard_moderation_actions table).","parameters":[{"name":"id","description":"The unique identifier of the moderation action to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/moderationActions/{id}","method":"delete"},{"specification":"Create a new ban record in the discussionboard_bans table. All referenced fields must exist in schema: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). This is typically used to implement a ban or suspension as a result of moderation workflows. The entity supports both temporary and permanent bans.","description":"This API endpoint creates a new ban record in the discussionboard_bans table, used for enforcing member bans or suspensions. All referenced fields are present in schema: banned_member_id (the user being banned), acting_moderator_id (the moderator/admin performing the ban), report_id (nullable; can be set if ban is triggered by a report), reason, ban_type (such as 'temporary' or 'permanent'), banned_at (ban start date), and expires_at (end date, if temporary; nullable for permanent bans). Only authenticated moderators or admins may impose bans. Upon creation, the new ban is returned.\n\nAudit: All bans should be logged with rationale for compliance.\n\nValidation: References must correspond to valid records where applicable. Related endpoints are PATCH (for searching bans), GET/PUT/DELETE by id (to update/view/remove bans).","summary":"Create a new member ban (discussionboard_bans table).","parameters":[],"requestBody":{"description":"New ban details for creation. All fields must exist in schema: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable).","typeName":"IDiscussionboardBan.ICreate"},"responseBody":{"description":"The new ban resource after creation.","typeName":"IDiscussionboardBan"},"authorizationRole":"moderator","name":"create","path":"/discussionboard/bans","method":"post"},{"specification":"Search/list bans from the discussionboard_bans table, supporting optional filtering based on schema fields: banned_member_id, acting_moderator_id, report_id, ban_type, banned_at, expires_at, and reason. Returns a paginated set of ban records matching the query. Only authorized moderators or admins can use this endpoint, primarily for moderation audit and ban management workflows.","description":"Lists bans from the discussionboard_bans table, supporting optional filters for banned_member_id, acting_moderator_id, report_id, ban_type, banned_at, expires_at, and reason, all of which are fields defined in the schema. The operation returns a paginated list result for use in ban management, audit review, and appeals processing. Filtering and sort/pagination parameters are supported via the request body. Only accessible to moderators/admins for compliance and operational oversight.","summary":"Search/list bans (discussionboard_bans table).","parameters":[],"requestBody":{"description":"Search and pagination parameters. Only schema fields banned_member_id, acting_moderator_id, report_id, ban_type, banned_at, expires_at, and reason may be referenced.","typeName":"IDiscussionboardBan.IRequest"},"responseBody":{"description":"Paginated ban result set.","typeName":"IPageIDiscussionboardBan"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/bans","method":"patch"},{"specification":"Retrieve a ban record by id from the discussionboard_bans table. Only schema fields can be referenced: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). Returns full ban details for appeals, review, or appeal management. Not found is returned for missing id. This endpoint is for authenticated moderators or admins.","description":"Fetch the details of a specific ban record by id in the discussionboard_bans table. References only the fields present in schema: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). Returns the ban resource for use in compliance review, audit, appeal management, or workflow automation. Access is restricted to moderators/admins. Not found errors are returned for missing id values.\n\nRelated endpoints: PUT (update), DELETE (remove), PATCH/POST (list/create bans).","summary":"Retrieve ban details by id (discussionboard_bans table).","parameters":[{"name":"id","description":"The unique identifier of the ban record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The ban record resource.","typeName":"IDiscussionboardBan"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/bans/{id}","method":"get"},{"specification":"Update an existing ban record in the discussionboard_bans table by id. All fields must exist in the schema: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). This endpoint is used for appeals processing, workflow corrections, or compliance updates by moderators/admins. The updated resource is returned. Returns error if record is not found.","description":"Update the details of a specific ban record by id in the discussionboard_bans table (identified by id parameter). Only schema-defined fields may be referenced: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). May be used in result of an appeal, error correction, or administrative workflow. Returns the updated ban resource, or a not found error if id is invalid. Only accessible to moderators or admins.","summary":"Update a ban record by id (discussionboard_bans table).","parameters":[{"name":"id","description":"The unique identifier of the ban record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new details to set in the ban record. Only schema fields defined for discussionboard_bans may be updated.","typeName":"IDiscussionboardBan.IUpdate"},"responseBody":{"description":"The updated ban resource after modification.","typeName":"IDiscussionboardBan"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/bans/{id}","method":"put"},{"specification":"Permanently delete a ban record from the discussionboard_bans table. No soft delete field exists in schema, so this is a hard delete and irreversibly removes the record. Can only be performed by authorized moderators or admins. The operation targets a single ban by id, and should return not found if record does not exist. Deletion actions should be audit logged for compliance.","description":"Delete an individual ban record from the discussionboard_bans table by its id. The schema does not provide a soft delete mechanism, so this delete operation is irreversible. This action must be performed by an authenticated moderator or admin, and responsibly logged for compliance. The operation must handle not found errors as appropriate, and only delete if no referential integrity issues prevent the operation. Related endpoints are GET/PUT (for retrieval and update), PATCH/POST (for search and creation).","summary":"Permanently delete a ban by id (discussionboard_bans table).","parameters":[{"name":"id","description":"The unique identifier of the ban record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/bans/{id}","method":"delete"}],"completed":96,"total":175,"step":0,"created_at":"2025-07-25T05:14:33.101Z"},"tokenUsage":{"facade":{"aggregate":{"total":435577,"input":{"total":403854,"cached":0},"output":{"total":31723,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":435577,"input":{"total":403854,"cached":0},"output":{"total":31723,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":435577,"input":{"total":403854,"cached":0},"output":{"total":31723,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":435577,"input":{"total":403854,"cached":0},"output":{"total":31723,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a warning record for a member. This operation allows a moderator or admin to issue an official warning to a member, recording the warning event in the 'discussionboard_warnings' table. Each warning record contains: a unique warning ID, the warned member's ID (warned_member_id), the acting moderator or admin's ID (acting_moderator_id), an optional originating report ID (report_id), a reason string, and the timestamp the warning was applied (warned_at). All fields referenced must exist in the schema. There are no soft delete or update-by-authorization fields; only the entities and relationships in the actual schema are referenced. This endpoint is critical for moderation workflows and audit trails.","description":"This endpoint facilitates the issuance of warnings to members on the political/economic discussion board. According to the schema, a warning contains the warned_member_id (the member receiving the warning), acting_moderator_id (the moderator/admin issuing the warning), an optional report_id (referencing the report that triggered the warning), a reason string (explaining the violation or risk), and warned_at (timestamp when the warning was recorded). When a moderator or admin issues a warning, an atomic record is created, complying with moderation escalation business logic (three warnings can lead to a ban as per requirements). The operation enforces audit trail and compliance, and is used in escalation reviews or appeals. It does not support soft delete—warnings, once created, remain as audit artifacts. The only modifiable properties are as defined in the Prisma schema, and only those are accepted in the request body. Cross-table relationships (e.g., acting_moderator_id references moderators/admins) are strictly guaranteed by database-level foreign keys as modeled. Only the fields in the schema are handled here; no extra fields (like created_by, updated_by) are referenced.","summary":"Create a warning record for a member in discussionboard_warnings (moderation escalation/audit trail).","parameters":[],"requestBody":{"description":"Information for creating a new member warning record.","typeName":"IDiscussionboardWarning.ICreate"},"responseBody":{"description":"The newly created warning record.","typeName":"IDiscussionboardWarning"},"authorizationRole":"moderator","name":"create","path":"/discussionboard/warnings","method":"post"},{"specification":"Fetch a paginated and filterable list of warning records from the 'discussionboard_warnings' table. This operation supports searching, sorting, and pagination on fields that exist in the schema—such as warned_member_id, acting_moderator_id, warned_at, report_id, and reason. The endpoint is intended for moderation and admin review dashboards, compliance analytics, and audit history queries. All filters and sorting parameters MUST be on actual schema fields. No fields outside the schema (such as deleted_at or updated_by) are referenced. The response includes a list of warning objects and pagination metadata.","description":"This endpoint provides a means for moderators or admins to search, filter, and review the list of issued warnings on the platform for moderation history, escalation tracking, or compliance auditing. Queryable fields include warned_member_id (who was warned), acting_moderator_id (who issued the warning), report_id (report that led to the warning, if any), reason (violation or issue justifying the warning), and warned_at (timestamp warning was recorded). Supports standard pagination and sorting as per business rules for audit history review. Only schema-defined properties are available for querying or display—no custom or derived fields. No soft or hard delete logic applies: all warnings remain permanently as immutable audit records. Dependencies/relations are resolved according to the relationships modeled in the Prisma schema.","summary":"List/search warnings in discussionboard_warnings (with filter/sort by schema fields only).","parameters":[],"requestBody":{"description":"Search/filter/sort parameters for querying warnings.","typeName":"IDiscussionboardWarning.IRequest"},"responseBody":{"description":"A paginated list of warning records and pagination metadata.","typeName":"IPageIDiscussionboardWarning"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/warnings","method":"patch"},{"specification":"Retrieve details of a single warning record by its unique ID (discussionboard_warnings.id). Returns all properties of the warning according to the schema: id, warned_member_id, acting_moderator_id, report_id, reason, and warned_at. Does not reference any non-existent or derived fields. The result is used in moderation escalation audits and warning appeals workflows.","description":"This endpoint enables moderators or admins to fetch the complete details of an individual warning issued to a member. The warning's unique id (from discussionboard_warnings.id) is required as a path parameter. The returned object includes: id, warned_member_id, acting_moderator_id, report_id (nullable), reason, and warned_at—exactly as modeled in the Prisma schema. This operation supports audit trail verification, investigation of specific disciplinary actions, or as part of ban/appeals workflows. It enforces strict adherence to the schema (no extra or missing fields), supporting consistent moderation tracking.","summary":"Get a single warning by id from discussionboard_warnings.","parameters":[{"name":"id","description":"Unique warning record id (discussionboard_warnings.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The warning record with given id or not found error.","typeName":"IDiscussionboardWarning"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/warnings/{id}","method":"get"},{"specification":"Update a warning record by id. Supports updating fields allowed by schema in discussionboard_warnings: report_id, reason, acting_moderator_id, warned_member_id, and warned_at. Field-level update permissions must comply with business logic, such as only allowing changes by authorized personnel, and only on fields that are not immutable in the context of escalations/audit. No soft delete, updated_by, or similar fields exist. The modification does not physically remove the record; rather, it updates the schema-defined fields as requested.","description":"This endpoint allows a moderator or admin to modify an existing warning's fields, as permitted by escalation business logic. Allowed fields are warned_member_id (member who was warned), acting_moderator_id (issuer), report_id (moderation report reference), reason (violation detail), and warned_at (warning timestamp), all of which exist in the schema and are updatable according to system policy. No other fields may be updated (e.g., there are no 'soft delete' or 'updated_by' fields). All modifications are strictly limited to schema-defined columns and require appropriate authorization. This operation is primarily for correcting or annotating audit history in case of workflow errors or user appeals.","summary":"Update (patch) a warning record by id in discussionboard_warnings (permitted fields only).","parameters":[{"name":"id","description":"Unique warning record id (discussionboard_warnings.id) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Patch information for the warning record (only fields defined in schema).","typeName":"IDiscussionboardWarning.IUpdate"},"responseBody":{"description":"The updated warning record reflecting requested changes.","typeName":"IDiscussionboardWarning"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/warnings/{id}","method":"put"},{"specification":"Delete a warning by id from the discussionboard_warnings table. There is no soft deletion field—once deleted, the record is permanently removed from the database. Use ONLY for compliance with expungement requests or administrative error correction. The operation requires appropriate authorization and confirms deletion via a status or returns not found if the id does not exist. Only schema-defined fields are referenced.","description":"This endpoint deletes a warning record by its unique id (discussionboard_warnings.id). There is NO soft delete mechanism present in the schema: this operation performs a hard delete, permanently removing the record from the database to meet situations such as administrative error correction or compliance with legal erasure requirements. Only authorized personnel should perform this action, and the operation will return a success status or error if the record does not exist. No audit/history is retained in this record after deletion—ensure this complies with business escalation and audit guidelines.","summary":"Delete (hard delete) a warning by id from discussionboard_warnings (no soft delete field exists).","parameters":[{"name":"id","description":"Unique warning record id (discussionboard_warnings.id) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion (success or not found error).","typeName":"IDeleteConfirmation"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/warnings/{id}","method":"delete"},{"specification":"List/search engagement metrics records for the discussion board. Operates on the discussionboard_engagement_metrics table, supporting filtering, sorting, and pagination by actual schema fields: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count. For use in analytics dashboards and admin/moderator reviews. Only schema fields are referenced; no derived or soft/hard-delete logic exists.","description":"This endpoint returns a paginated, filterable list of engagement metrics, drawing from the discussionboard_engagement_metrics table. Query supports searching or filtering by discussionboard_member_id (user), discussionboard_board_id (board), engagement_date (time window for metric aggregation), and basic statistics like posts_created_count, comments_created_count, and votes_cast_count. No fields outside the schema are referenced. Suitable for analytics dashboards, reporting DAU/WAU, engagement heatmaps, and cohort analysis as stated in requirements. No delete/update logic applies to these records as per schema; each record is atomic for audit/metrics.","summary":"List/search engagement metrics from discussionboard_engagement_metrics (analytics dashboard/backoffice).","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for retrieving engagement metrics.","typeName":"IDiscussionboardEngagementMetric.IRequest"},"responseBody":{"description":"Paginated metrics data and metadata for analytics dashboard.","typeName":"IPageIDiscussionboardEngagementMetric"},"authorizationRole":"admin","name":"index","path":"/discussionboard/engagementMetrics","method":"patch"},{"specification":"Retrieve a specific engagement metric record by id. Operates on the discussionboard_engagement_metrics table, returning all atomic metric fields as modeled in the Prisma schema: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count. No non-schema or soft delete fields exist. For use in analytics dashboards and reporting tools.","description":"Fetch detailed information on a single engagement metric entry by its unique id from the discussionboard_engagement_metrics table. The returned record includes: id (unique UUID), discussionboard_member_id (user who engaged), discussionboard_board_id (board engaged on), engagement_date (date of activity measured), posts_created_count, comments_created_count, and votes_cast_count (as raw integers). Only schema-defined properties are returned. For use in building analytics dashboards, verifying metrics, or analyzing user trends. No deletion or update occurs from this endpoint; it is strictly for retrieval.","summary":"Get one engagement metric by id from discussionboard_engagement_metrics.","parameters":[{"name":"id","description":"Unique engagement metric id (discussionboard_engagement_metrics.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The engagement metric record with given id.","typeName":"IDiscussionboardEngagementMetric"},"authorizationRole":"admin","name":"at","path":"/discussionboard/engagementMetrics/{id}","method":"get"},{"specification":"List/search activity log records for platform events. Operates on the discussionboard_activity_logs table, with support for filtering, pagination, and sorting by actual schema fields (id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata). The resulting list is used for analytics, anomaly detection, rare journey tracking, and audit workflows. Only schema properties are queried; no soft/hard delete, status fields, or extra info outside the model.","description":"This endpoint enables administrators or analysts to retrieve paginated and filterable event records from the discussionboard_activity_logs table. Query parameters match schema fields: discussionboard_member_id (which member acted), discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id (if applicable), event_timestamp (time/date filter), event_type (type of action performed), and event_metadata (JSON info). Used in dashboards to monitor login/logout, post/comment actions, user visits, bans, role changes. All records are raw, atomic events—never aggregates or derived. No delete, status, or soft/hard-remove logic applies. Only schema fields are filterable and returned.","summary":"Search/list activity logs from discussionboard_activity_logs (system activity/audit/analytics).","parameters":[],"requestBody":{"description":"Filter, pagination, and sorting information for activity log retrieval.","typeName":"IDiscussionboardActivityLog.IRequest"},"responseBody":{"description":"Paginated activity logs with event details and metadata.","typeName":"IPageIDiscussionboardActivityLog"},"authorizationRole":"admin","name":"index","path":"/discussionboard/activityLogs","method":"patch"},{"specification":"Get a single activity log record by id. Looks up the activity log in discussionboard_activity_logs, returning id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, and event_metadata. No soft/hard delete or extra fields are referenced. For use in audit review or analysis workflows.","description":"This endpoint provides administrators or analysts with the ability to retrieve a full record of a particular activity log event by its unique id, as stored in discussionboard_activity_logs. The API returns: id, discussionboard_member_id (nullable), discussionboard_board_id (nullable), discussionboard_thread_id (nullable), discussionboard_post_id (nullable), discussionboard_comment_id (nullable), event_timestamp, event_type, and event_metadata (stringified JSON)—all directly corresponding to schema fields. For use in system activity review/audit, or when reconstructing user journeys or incident trails according to analytics and compliance requirements. No status or deletion logic is present in this record.","summary":"Retrieve one activity log by id from discussionboard_activity_logs.","parameters":[{"name":"id","description":"Unique log record id (discussionboard_activity_logs.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event information for the requested activity log record.","typeName":"IDiscussionboardActivityLog"},"authorizationRole":"admin","name":"at","path":"/discussionboard/activityLogs/{id}","method":"get"},{"specification":"List/search trending topic records for the discussion board, based on the discussionboard_trending_topics table. Supports filtering, pagination, and sorting on schema fields: id, discussionboard_thread_id, discussionboard_board_id, ranking_period_date, trending_score. Used in analytics dashboards, trending topic visualizations, and moderation support. No non-schema or delete/status fields included in request or response.","description":"This endpoint allows administrators and analytics dashboards to retrieve a paginated, filterable list of trending topics (threads) on the discussion board. Filter criteria and sort options are available for: discussionboard_thread_id (topic), discussionboard_board_id (board), ranking_period_date (date/time rank calculated), and trending_score (quantitative score driving the ranking). The results reflect atomic rows in the discussionboard_trending_topics table, strictly as modeled. No delete/status fields or derived values are included. Perfect for daily/periodic trend analysis, homepage highlights, or moderator alerting to surging discussions.","summary":"List/search trending topics (threads) from discussionboard_trending_topics.","parameters":[],"requestBody":{"description":"Filter, pagination, and search options for trending topics.","typeName":"IDiscussionboardTrendingTopic.IRequest"},"responseBody":{"description":"Paginated trending topics data and analytics metadata.","typeName":"IPageIDiscussionboardTrendingTopic"},"authorizationRole":"admin","name":"index","path":"/discussionboard/trendingTopics","method":"patch"},{"specification":"Get a specific trending topic record from the discussionboard_trending_topics table by id. Returns id, discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score. Used for trending panel analytics and trend source review. No soft/hard-delete, extra status, or derived fields are referenced.","description":"Retrieve details of a particular trending topic record by its unique id. Returns all fields modeled in the discussionboard_trending_topics schema: id (UUID), discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score (float). This endpoint enables verification of trending calculation, homepage highlight panel, or analytics source investigation. Returns only atomic, schema-defined fields.","summary":"Get one trending topic record by id from discussionboard_trending_topics.","parameters":[{"name":"id","description":"Unique trending topic record id (discussionboard_trending_topics.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The trending topic record information.","typeName":"IDiscussionboardTrendingTopic"},"authorizationRole":"admin","name":"at","path":"/discussionboard/trendingTopics/{id}","method":"get"},{"specification":"Create a new notification template in discussionboard_notification_templates. The request must include schema fields: code (unique short identifier), name (template title), description (optional, string), subject (subject line of the message), body (full template string), is_active (enable/disable), created_at (timestamp of creation), and updated_at (timestamp of last modification). For use in managing notification content and audit tracking. There are no soft delete or update-by-authorization fields. All properties are enforced by the schema.","description":"This endpoint allows system administrators to add a new notification template, which is used to standardize notification messages (email, in-app, browser) in the discussion board system. Each template requires a code (unique short identifier for programmatic reference), name (displayed to admins/users), optional description (further detail), subject (for email/browser notification headers), body (message template, possibly including placeholders), is_active (enables/disables use), and audit fields for creation/update timestamps per schema. Only fields explicitly modeled in the Prisma schema are accepted. Templates are referenced by the notification engine and can be managed for compliance, i18n, or business logic changes. No extra fields outside the notification template schema are accepted; all properties are enforced per schema.","summary":"Create a notification template in discussionboard_notification_templates (used for system messages).","parameters":[],"requestBody":{"description":"Information required to create a notification template (all schema fields).","typeName":"IDiscussionboardNotificationTemplate.ICreate"},"responseBody":{"description":"Created notification template object.","typeName":"IDiscussionboardNotificationTemplate"},"authorizationRole":"admin","name":"create","path":"/discussionboard/notificationTemplates","method":"post"}],"completed":108,"total":175,"step":0,"created_at":"2025-07-25T05:14:39.348Z"},"tokenUsage":{"facade":{"aggregate":{"total":484909,"input":{"total":449159,"cached":0},"output":{"total":35750,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":484909,"input":{"total":449159,"cached":0},"output":{"total":35750,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":484909,"input":{"total":449159,"cached":0},"output":{"total":35750,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":484909,"input":{"total":449159,"cached":0},"output":{"total":35750,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Implements list/search operation for discussionboard_board_moderators entity. Allows searching, filtering, and paginating moderator-board assignment records. Each record links a moderator to a board, including fields such as id (PK), discussionboard_board_id, discussionboard_moderator_id, is_primary, and joined_at. No non-existent or redundant fields are present. Used by admins/moderators to audit moderator assignments and by the UI to list board moderators for a given board.","description":"This endpoint retrieves a paginated list of board-moderator assignment records. Each record contains the unique id of the link, the associated board id, the assigned moderator id, a Boolean indicating if this moderator is primary, and the joined_at timestamp. Search and filter parameters may be used to find assignments by moderator, board, or primary status. Soft delete is not supported: records are only present if actively assigned. All fields referenced here come directly from the schema. The endpoint supports pagination and search for large datasets. Related endpoints: GET for details of a single assignment, PUT/DELETE for update/removal of a specific assignment.","summary":"Search/list discussionboard_board_moderators (board-moderator links) with supported filters. Prisma table: discussionboard_board_moderators.","parameters":[],"requestBody":{"description":"Search/filter and pagination parameters for querying discussionboard_board_moderators. Structure based on index/search request conventions.","typeName":"IDiscussionboardBoardModerators.IRequest"},"responseBody":{"description":"Paginated list of board-moderator assignment links.","typeName":"IPageIDiscussionboardBoardModerators"},"authorizationRole":"admin","name":"index","path":"/discussionboard/boardModerators","method":"patch"},{"specification":"Retrieves detail for a single board-moderator assignment in discussionboard_board_moderators. Each record is uniquely identified by its id. This includes all atomic fields from the schema (id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at). Only present assignments are returned.","description":"Fetches a specific board-moderator assignment by its id. Returns all fields from the schema for that record: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Useful for editing or viewing assignment metadata. If the record does not exist, returns a not found error. Only schema-defined fields are included; no soft-delete or redundant data is present.","summary":"Get details for a specific board-moderator assignment (discussionboard_board_moderators) by id. Prisma table: discussionboard_board_moderators.","parameters":[{"name":"id","description":"Unique identifier of the board-moderator link to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Board-moderator assignment data for the requested id.","typeName":"IDiscussionboardBoardModerators"},"authorizationRole":"admin","name":"at","path":"/discussionboard/boardModerators/{id}","method":"get"},{"specification":"Updates a board-moderator assignment record in discussionboard_board_moderators by id. Allows updating fields such as is_primary or joined_at. Only fields present in the schema are supported. Does not support creation; creation is via POST elsewhere. Returns the updated record.","description":"Updates an existing board-moderator assignment, referenced by its id. Allows modifying schema fields such as is_primary or joined_at. Only updates atomic fields defined in the schema. Attempting to update non-existent fields or supply additional data will be rejected. On success, returns the updated assignment. Not found returns an error. Related endpoints: GET to fetch original, DELETE for removal.","summary":"Update a specific board-moderator assignment (discussionboard_board_moderators) by id. Prisma table: discussionboard_board_moderators.","parameters":[{"name":"id","description":"Unique id of the board-moderator assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the board-moderator link, matching schema definitions.","typeName":"IDiscussionboardBoardModerators.IUpdate"},"responseBody":{"description":"The updated board-moderator assignment record.","typeName":"IDiscussionboardBoardModerators"},"authorizationRole":"admin","name":"update","path":"/discussionboard/boardModerators/{id}","method":"put"},{"specification":"Deletes a board-moderator assignment from discussionboard_board_moderators by id. This is a hard delete according to the schema, which has no soft delete fields. The record will be permanently removed from the system. Returns success if deletion occurs, or not found if already deleted/non-existent.","description":"Removes a board-moderator assignment by id through hard deletion (permanent removal). As the schema does not contain soft-delete fields like deleted_at or is_deleted, this operation will fully remove the record. Ensures referential integrity with related board and moderator records. Suitable for post-cleanup or moderator reassignment workflows. Only schema-defined fields are allowed; no additional status is recorded. Related: PATCH (list), GET (detail), PUT (update) endpoints.","summary":"Hard delete a board-moderator assignment (discussionboard_board_moderators) by id. Prisma table: discussionboard_board_moderators.","parameters":[{"name":"id","description":"Id of the board-moderator link to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of successful deletion.","typeName":"ISuccessResponse"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/boardModerators/{id}","method":"delete"},{"specification":"Creates a new discussion thread in the discussionboard_threads entity. Thread must include schema-required fields: board_id, author_member_id, title, and may include body. created_at and updated_at are set on creation. Soft delete timestamp may be null on creation. Returns full record.","description":"Creates a discussion thread. Schema fields required: id (server-generated), board_id, author_member_id, title. Optional: body. created_at and updated_at are set automatically. deleted_at is null initially. Relationship: board must exist; author must be a valid member. Only schema fields are referenced. Returns the created thread record including all atomic fields. Related: PATCH (search), GET/PUT/DELETE for lifecycle management.","summary":"Create a new discussion thread (discussionboard_threads). Prisma table: discussionboard_threads.","parameters":[],"requestBody":{"description":"Data to create a new thread, matching required schema fields.","typeName":"IDiscussionboardThreads.ICreate"},"responseBody":{"description":"Created thread record with all database fields populated.","typeName":"IDiscussionboardThreads"},"authorizationRole":"member","name":"create","path":"/discussionboard/threads","method":"post"},{"specification":"Performs a list/search for discussionboard_threads, returning threads matching criteria and paginated. Returns only thread fields in the schema: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Designed for board browsing, filtering, and UI lists. No non-existent fields or aggregates.","description":"Retrieves a list of threads with support for filtering by board, author, time, and pagination. Returns paginated thread records containing schema-defined fields: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Only these fields are present, as per schema. Soft delete field deleted_at is included: records with this field set are considered deleted but kept for audit. This endpoint is useful for boards and member activity feeds. Related: POST to create threads; GET for individual threads.","summary":"List/search threads (discussionboard_threads) with pagination and filters. Prisma table: discussionboard_threads.","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for thread retrieval.","typeName":"IDiscussionboardThreads.IRequest"},"responseBody":{"description":"Paginated list of threads matching search criteria.","typeName":"IPageIDiscussionboardThreads"},"authorizationRole":"member","name":"index","path":"/discussionboard/threads","method":"patch"},{"specification":"Retrieves a single thread from discussionboard_threads by id. Returns all fields from schema: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Does not reference any fields not in the schema. Not found returns error. Used for thread detail pages.","description":"Obtains details of a specific thread, uniquely identified by its id. The response includes all thread fields in the schema: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Soft delete field deleted_at indicates if the thread is deleted (retained for audit). No extraneous or non-schema fields are present. This endpoint underpins thread detail pages and admin or member thread review UX. Related endpoints: PATCH (list), PUT (edit), DELETE (soft remove).","summary":"Get details of a specific thread (discussionboard_threads) by id. Prisma table: discussionboard_threads.","parameters":[{"name":"id","description":"Unique thread id (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Thread data for the requested id.","typeName":"IDiscussionboardThreads"},"authorizationRole":"member","name":"at","path":"/discussionboard/threads/{id}","method":"get"},{"specification":"Updates a thread in discussionboard_threads by id. Allows editing only schema-defined fields: title, body, possibly board_id (for move), or author_member_id (reassignment). Does not alter created_at/updated_at directly—server updates updated_at. Only schema fields are modifiable. Returns updated record including soft delete field deleted_at if present.","description":"Edits an existing thread identified by id. Allows changes to atomic schema fields title, body, and possibly reassigning board or author (rare; for admin/mod workflows). Does not manipulate created_at/updated_at directly; updated_at is handled by the system. Soft delete field deleted_at is present in the record. Returns the updated thread or error if not found. Related: PATCH (list), GET for detail, DELETE to soft-delete (set deleted_at).","summary":"Update a thread (discussionboard_threads) by id. Prisma table: discussionboard_threads.","parameters":[{"name":"id","description":"Thread id (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the thread. All must map to schema fields.","typeName":"IDiscussionboardThreads.IUpdate"},"responseBody":{"description":"Updated thread record.","typeName":"IDiscussionboardThreads"},"authorizationRole":"member","name":"update","path":"/discussionboard/threads/{id}","method":"put"},{"specification":"Soft deletes a thread from discussionboard_threads by id. The schema includes the deleted_at field for soft deletion. This operation sets deleted_at to the current timestamp, marking the thread as deleted but retaining row for audit and recovery. No hard delete is performed. All business logic and error handling reference only schema fields.","description":"Marks a thread as deleted by setting its deleted_at field to the current timestamp. This acts as a soft delete: the thread remains in the database for compliance, audit, and recovery, but is treated as deleted in application logic. No hard deletion or destruction of the row occurs. Returns confirmation of soft deletion. Related endpoints: PATCH/GET for non-/soft-deleted threads, PUT for restoration/edit.","summary":"Soft delete a thread (discussionboard_threads) by id by setting deleted_at. Prisma table: discussionboard_threads.","parameters":[{"name":"id","description":"Thread id (UUID) to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of successful soft deletion (deleted_at set).","typeName":"ISuccessResponse"},"authorizationRole":"member","name":"erase","path":"/discussionboard/threads/{id}","method":"delete"},{"specification":"Creates a thread snapshot in discussionboard_thread_snapshots. Each snapshot records a version of a thread's fields. Required fields: thread_id, actor_id (nullable), title, body, reason (nullable), created_at. No non-existent fields allowed. Used by moderation/versioning functionality to record pre- and post-edit states.","description":"Creates a new immutable thread snapshot, associated with a thread and (optionally) the actor creating the snapshot (member id or system). Requires: thread_id, optional actor_id, title at version, optionally body and reason. Sets created_at to current time. Returned record includes all schema fields for the snapshot. Used for rollback, moderation, and timeline audit. Related: PATCH (list), GET (by id) for version review.","summary":"Create a thread snapshot (discussionboard_thread_snapshots). Prisma table: discussionboard_thread_snapshots.","parameters":[],"requestBody":{"description":"Snapshot creation fields, strictly matching schema. No non-existent fields.","typeName":"IDiscussionboardThreadSnapshots.ICreate"},"responseBody":{"description":"Created thread snapshot record, with all snapshot fields.","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRole":"member","name":"create","path":"/discussionboard/threadSnapshots","method":"post"},{"specification":"Lists and paginates thread snapshot records from discussionboard_thread_snapshots. Returns all schema fields for each snapshot. Filtering by thread_id and actor_id supported. Used by admins, moderators, or users for review/version history UIs.","description":"Retrieves a paginated list of thread snapshots with filtering and search. Each snapshot record includes id, thread_id, optional actor_id, title and body at that version, reason, and created_at. No additional/non-schema fields. Useful in version history pages and audits. Related: GET for single snapshot, POST to create snapshots during edit/audit.","summary":"List/search thread snapshots (discussionboard_thread_snapshots) with pagination. Prisma table: discussionboard_thread_snapshots.","parameters":[],"requestBody":{"description":"Search/query/pagination parameters for thread snapshots. Structured as per index convention.","typeName":"IDiscussionboardThreadSnapshots.IRequest"},"responseBody":{"description":"Paginated list of thread snapshot records.","typeName":"IPageIDiscussionboardThreadSnapshots"},"authorizationRole":"member","name":"index","path":"/discussionboard/threadSnapshots","method":"patch"},{"specification":"Retrieves a single thread snapshot from discussionboard_thread_snapshots by id. Returns all atomic schema fields: id, thread_id, actor_id, title, body, reason, created_at. Only schema fields; no non-existent or extraneous data. Used for version diffing, rollback, or moderation audits.","description":"Fetches a thread snapshot record by id, including all schema fields: id, thread_id, optional actor_id (nullable), title, optional body (nullable), optional reason, and created_at timestamp. Perfect for viewing a specific version in moderation, audit, or rollback use cases. Related endpoints: PATCH (list), POST (create new snapshot).","summary":"Get a specific thread snapshot (discussionboard_thread_snapshots) by id. Prisma table: discussionboard_thread_snapshots.","parameters":[{"name":"id","description":"Unique id of the thread snapshot record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Thread snapshot record with full schema fields for requested id.","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRole":"member","name":"at","path":"/discussionboard/threadSnapshots/{id}","method":"get"}],"completed":120,"total":175,"step":0,"created_at":"2025-07-25T05:14:40.077Z"},"tokenUsage":{"facade":{"aggregate":{"total":593350,"input":{"total":551056,"cached":0},"output":{"total":42294,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":593350,"input":{"total":551056,"cached":0},"output":{"total":42294,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":593350,"input":{"total":551056,"cached":0},"output":{"total":42294,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":593350,"input":{"total":551056,"cached":0},"output":{"total":42294,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Update an existing privacy policy by ID. This operation modifies the fields of a stored privacy policy, allowing administrators to revise the version, effective date, title, or content. Each policy has atomic fields: id (UUID), version (string), effective_date (DateTime), title (string), content (string), created_at (DateTime), and updated_at (DateTime). Because the schema does not contain any deleted_at or is_deleted field, update is limited to in-place changes and cannot perform soft-restore or soft-delete logic. Only fields present in the schema can be referenced.","description":"This endpoint allows administrators to update a privacy policy's details using its unique identifier. The API supports modifications to core fields including the policy's 'version' (which is a unique string for each policy version), 'effective_date' (indicating when the policy becomes active), 'title' and 'content' (which are the main legal text). The update also permits changing auxiliary audit fields like 'created_at' and 'updated_at', if required for system consistency, but does not allow any archiving or soft-delete since 'deleted_at' is not present in this schema. All updates are permanent and immediately reflected in system audit and user-facing retrievals. Attempting to refer to fields not present in the Prisma schema will be rejected. Only an admin user should have access to this endpoint, and all update events should be logged for compliance.","summary":"Update an existing privacy policy. (Entity: discussionboard_privacy_policies)","parameters":[{"name":"id","description":"The ID of the privacy policy to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating the privacy policy.","typeName":"Idiscussionboard_privacy_policies.IUpdate"},"responseBody":{"description":"The updated privacy policy.","typeName":"Idiscussionboard_privacy_policies"},"authorizationRole":"admin","name":"update","path":"/discussionboard/privacyPolicies/{id}","method":"put"},{"specification":"Delete a privacy policy by ID. This operation removes a privacy policy record from the discussionboard_privacy_policies table. No soft-delete or logical delete is possible, as there are no deleted_at or is_deleted fields in the schema. Deletion is permanent and unrecoverable. The primary key is 'id', and the schema also contains fields for version, effective_date, title, content, created_at, and updated_at. Only fields present in the schema can be referenced or used as criteria.","description":"This endpoint enables an admin to permanently remove a privacy policy identified by its unique 'id'. The deletion performs a hard delete because the schema defines no soft-delete (like deleted_at or is_deleted), making this action irreversible and removing the record entirely from the database. This is intended for rare administrative actions, such as removing obsolete or mistakenly published legal documents. Attempting to refer to fields or soft-delete logic not present in the schema will result in an error. Only administrators have permissions for this action. Deletion events must be recorded for compliance and audit purposes.","summary":"Delete a privacy policy (hard delete). (Entity: discussionboard_privacy_policies)","parameters":[{"name":"id","description":"The ID of the privacy policy to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/privacyPolicies/{id}","method":"delete"},{"specification":"Create a new data erasure request. This operation allows a platform member to submit a request to be forgotten, as required by privacy law and compliance. The discussionboard_data_erasure_requests table holds id (UUID), discussionboard_member_id (UUID), status (string), requested_at (DateTime), reviewed_at (DateTime or null), completed_at (DateTime or null), and admin_remark (string or null). Requests will reference only fields in the schema. No deleted_at or is_deleted present, so status transitions are managed only through the status field.","description":"This endpoint enables a platform member to initiate a data erasure request. When called, a new record is created in the discussionboard_data_erasure_requests table, storing the member's id (discussionboard_member_id), the status (initially 'pending' or equivalent), the timestamp of request (requested_at), and optionally the review and completion timestamps if available. The request may include or omit admin remarks and will be routed for subsequent moderator/admin processing. Only schema-defined fields can be passed. Field presence and state transitions (e.g., reviewing, completing, denying) are managed through the 'status' string and audit timestamps, not a deleted_at field.","summary":"Create a new data erasure request. (Entity: discussionboard_data_erasure_requests)","parameters":[],"requestBody":{"description":"Parameters for new data erasure request.","typeName":"Idiscussionboard_data_erasure_requests.ICreate"},"responseBody":{"description":"Created data erasure request record.","typeName":"Idiscussionboard_data_erasure_requests"},"authorizationRole":"member","name":"create","path":"/discussionboard/dataErasureRequests","method":"post"},{"specification":"Retrieve a filtered list of data erasure requests using complex search, filtering, and pagination logic. This endpoint uses information in the request body to control search criteria and supports returning paginated response objects. The discussionboard_data_erasure_requests table columns are id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, and admin_remark. No deleted_at or is_deleted fields exist.","description":"This endpoint provides admin or moderator users the ability to retrieve and search through data erasure requests in the platform. Using the request body, callers can specify search filters, sort options, and pagination controls to explore requests by status, member ID, date ranges, etc. Only fields defined in the schema can be used as filter criteria or returned in results. The endpoint returns a paginated list (usually with total counts and results) of erasure request objects, each with atomic fields as defined. No soft-delete or archival logic is present, so all listed requests are from the active records table.","summary":"List/search data erasure requests (paged, filtered). (Entity: discussionboard_data_erasure_requests)","parameters":[],"requestBody":{"description":"Search and pagination criteria for data erasure request listing.","typeName":"Idiscussionboard_data_erasure_requests.IRequest"},"responseBody":{"description":"Paginated list of data erasure requests.","typeName":"IPageIdiscussionboard_data_erasure_requests"},"authorizationRole":"admin","name":"index","path":"/discussionboard/dataErasureRequests","method":"patch"},{"specification":"Get details for a single data erasure request by its ID. This operation retrieves all atomic fields defined in the schema: id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, and admin_remark. No deleted_at or is_deleted fields are present; record is returned as-is. Only callable by users with proper admin privileges.","description":"This endpoint retrieves the detailed information for a specific data erasure request using its primary key ID. The full record is returned, including the member identifier, current status, timestamps for request, review, and completion, and any admin remarks. As the schema does not use soft deletion, requests are always returned if they exist, with no filtering on deleted_at or similar fields. Only fields present in the database schema are included in the resource representation. Accessible only to admin users for privacy and compliance reasons.","summary":"Retrieve single data erasure request by ID. (Entity: discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"ID of the data erasure request to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full data erasure request record.","typeName":"Idiscussionboard_data_erasure_requests"},"authorizationRole":"admin","name":"at","path":"/discussionboard/dataErasureRequests/{id}","method":"get"},{"specification":"Update an existing data erasure request by ID. This operation updates any atomic field defined in the schema: discussionboard_member_id (UUID), status (string), requested_at (DateTime), reviewed_at (DateTime or null), completed_at (DateTime or null), admin_remark (string or null). No soft delete fields are present, so update cannot be used to archive; all changes are immediate and permanent.","description":"This endpoint allows admins to update an existing data erasure request. The update can set the status string (e.g., to 'approved', 'denied', 'completed'), manage timestamps for review and completion, or supply/update an admin_remark explaining the decision. Because there are no soft delete or archival fields, all updates are reflected directly in the table, and deleted_at or similar cannot be referenced. Each field supplied in the request body must exist in the schema. All changes are permanent and fully auditable, with field-level transitions ideally logged for compliance.","summary":"Update an existing data erasure request by ID. (Entity: discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"ID of the data erasure request to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated field values for the erasure request.","typeName":"Idiscussionboard_data_erasure_requests.IUpdate"},"responseBody":{"description":"Updated data erasure request record.","typeName":"Idiscussionboard_data_erasure_requests"},"authorizationRole":"admin","name":"update","path":"/discussionboard/dataErasureRequests/{id}","method":"put"},{"specification":"Delete a data erasure request record by ID. This will hard delete the row from the table since no deleted_at or is_deleted field exists. The schema fields: id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, admin_remark. This operation is intended for admin-only use and should be logged for proper audit and compliance tracking. The resource is unrecoverable after deletion.","description":"This endpoint enables an admin to permanently remove a data erasure request from the platform by supplying its ID. Since the schema does not support soft delete, the operation removes the record entirely, making the action irreversible. This action should be performed rarely and only by admins, usually to clean up erroneous or obsolete requests. Only fields present in the schema are referenced, and no soft-delete logic is possible or supported.","summary":"Delete a data erasure request (hard delete). (Entity: discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"ID of the data erasure request to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/dataErasureRequests/{id}","method":"delete"}],"completed":127,"total":175,"step":0,"created_at":"2025-07-25T05:14:42.301Z"},"tokenUsage":{"facade":{"aggregate":{"total":698491,"input":{"total":651667,"cached":0},"output":{"total":46824,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":698491,"input":{"total":651667,"cached":0},"output":{"total":46824,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":698491,"input":{"total":651667,"cached":0},"output":{"total":46824,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":698491,"input":{"total":651667,"cached":0},"output":{"total":46824,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Retrieves a specific post report by its unique identifier from the `discussionboard_post_reports` table. The operation returns detailed information about the report, which includes the post being reported, the reporting member, the report type, any descriptive context, and the timestamp when the report was created. This is essential for moderators and system admins to view the full content of a user-generated report for moderation or auditing actions. All fields used in the response exist in the Prisma schema, such as `id`, `discussionboard_post_id`, `reporter_member_id`, `report_type_id`, `description`, and `created_at`. No non-existent fields are referenced; only actual schema fields are included. Returns null if the report does not exist or has been deleted.","description":"This endpoint fetches a full report record from the `discussionboard_post_reports` table by its `id` primary key. All data—such as the post's UUID, reporting member's UUID, report reason, type, and timestamp—align directly with the table's columns. No references to forbidden or non-existent schema properties are made (e.g., there is NO deleted_at or updated_by in this table or response). The endpoint is intended for moderators or administrators to review a user's report for further action. If the report is not found, the endpoint returns null, strictly in line with soft/hard delete behavior as defined by the schema (the table currently does not support soft deletion; deleted reports are permanently removed).","summary":"Retrieve a post report by ID from `discussionboard_post_reports` table. Only actual schema fields are referenced.","parameters":[{"name":"id","description":"Unique identifier for the post report to retrieve. Must match the UUID format defined in the schema as the primary key.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns the post report record with all defined schema fields, or null if not found.","typeName":"IPostReport"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/postReports/{id}","method":"get"},{"specification":"Updates an existing post report in the `discussionboard_post_reports` table using the provided `id`. Only fields present in the Prisma schema may be updated: `discussionboard_post_id`, `reporter_member_id`, `report_type_id`, and `description`. The `created_at` timestamp is immutable and not updated via this endpoint. This endpoint is for moderators/admins to correct or edit report metadata (such as report type or descriptive context) in accordance with system business rules. No fields outside the existing schema are referenced in the operation description, parameters, or data specification.","description":"This endpoint allows moderation or administrative roles to update specific properties of a post report, strictly limiting modifiable fields to those defined by the schema: post id, report type, reporter, and description. Lifecycle fields like `created_at` are NOT updated, per schema rules. No unauthorized or non-existent attributes (like deleted_at or created_by) are referenced. Update actions are auditable, and all information comes directly from the schema's columns.","summary":"Update an existing post report in `discussionboard_post_reports`; only actual schema fields may be updated.","parameters":[{"name":"id","description":"Unique identifier for the post report to update. Must match the UUID format defined in the schema as the primary key.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields of a post report, restricted to those defined in the schema.","typeName":"IPostReport.IUpdate"},"responseBody":{"description":"Returns the updated post report entity on success, reflecting only schema-allowed modifications.","typeName":"IPostReport"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/postReports/{id}","method":"put"},{"specification":"Deletes a specific post report from the `discussionboard_post_reports` table. Since the schema does not feature a soft-delete field (like `deleted_at` or `is_deleted`), this operation performs a hard delete—permanently removing the report record. This irreversible action is intended for moderator or admin roles and requires strict audit logging. No properties outside the schema are used or referenced.","description":"Deletes a post report by its primary key, using hard delete logic because the table does not define any soft deletion columns. This means the record will be removed outright from the database, with no reversible or recoverable status. The endpoint must be used carefully, following system moderation and audit guidelines, as deleted reports cannot be restored. No references to non-existent attributes such as 'soft delete' or 'deleted_at' are included.","summary":"Hard deletes a post report from `discussionboard_post_reports` because soft delete fields do not exist.","parameters":[{"name":"id","description":"The UUID of the post report to permanently delete. This must directly match the primary key in the table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns null on success, indicating permanent removal. If not found, has no effect.","typeName":"null"},"authorizationRole":"moderator","name":"erase","path":"/discussionboard/postReports/{id}","method":"delete"},{"specification":"Creates a new post reference in the `discussionboard_post_references` table. All input data must correspond to existing table fields: `source_post_id` (required), `target_post_id` (optional), `target_thread_id` (optional), and `reference_type` (required, string). The `id` is generated by the system, not supplied by the client. No invented or missing attributes are referenced. This operation is for establishing a cross-reference between posts or from a post to a thread, as defined by the schema/requirements.","description":"This endpoint creates a new entry in `discussionboard_post_references`, requiring only properties that exist in the schema (source post id, optional target post/thread, type). No references to non-existent or extra fields are permitted. Used by members creating or citing posts/threads across the board, this endpoint underpins citation and content linking functionality in the platform. All foreign keys and required fields strictly match the schema field definitions.","summary":"Create a new post reference in `discussionboard_post_references`, using only real schema properties.","parameters":[],"requestBody":{"description":"Post reference creation object; only schema columns are accepted (source post id, target post/thread id, reference_type).","typeName":"IPostReference.ICreate"},"responseBody":{"description":"Returns the newly created post reference object, fully matching all schema-defined fields.","typeName":"IPostReference"},"authorizationRole":"member","name":"create","path":"/discussionboard/postReferences","method":"post"},{"specification":"Retrieves a list of post references from the `discussionboard_post_references` table. The operation supports pagination, filtering, and searching on strictly schema-defined columns (e.g., `source_post_id`, `reference_type`, `target_post_id`, `target_thread_id`). No non-existent or derived fields are referenced. Returns a paginated list with each object strictly matching the schema record shape. Useful for querying where certain posts are cited or referenced in the discussion board system.","description":"Fetches and filters a list of post reference objects using only columns present in the `discussionboard_post_references` schema. Pagination and search are performed based solely on existing fields. No attributes like deleted_at, last_edited, or admin_notes are referenced or returned, as they do not exist on the model. The operation is suitable for analytics, citation listings, or bulk queries about content relationships, all while preventing external field leakage.","summary":"Retrieve a paginated, filtered list of post references using only schema-defined fields.","parameters":[],"requestBody":{"description":"Request parameters for post reference listing; ONLY schema columns are permitted for filtering/sorting (e.g., by source_post_id, reference_type).","typeName":"IPostReference.IRequest"},"responseBody":{"description":"Paginated response object containing a list of post references that strictly match schema records.","typeName":"IPageIPostReference"},"authorizationRole":"member","name":"index","path":"/discussionboard/postReferences","method":"patch"},{"specification":"Retrieves a specific post reference from the `discussionboard_post_references` table using the record's UUID. The response includes only fields defined in the schema: `id`, `source_post_id`, `target_post_id`, `target_thread_id`, `reference_type`. System- or moderation-related metadata not defined in the schema (such as deleted_by, admin_notes, or soft delete flags) are NEVER referenced, in strict compliance with schema compliance rules.","description":"Fetches a single post reference entity by its primary key, returning a full object only using directly represented table columns. If no matching record is found, a null is returned. This operation respects hard/soft delete rules as strictly determined by the schema—the table does NOT have soft delete columns, so if the reference is deleted, it is removed outright. No extra attributes or system fields are returned or referenced.","summary":"Get a single post reference by ID, returning only actual schema fields.","parameters":[{"name":"id","description":"The UUID of the post reference to fetch. Must match an existing primary key value.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns the post reference record or null if not found, always containing only fields present in the schema.","typeName":"IPostReference"},"authorizationRole":"member","name":"at","path":"/discussionboard/postReferences/{id}","method":"get"},{"specification":"Updates an existing post reference in the `discussionboard_post_references` table. Only modifiable properties defined in the schema can be updated (e.g., `source_post_id`, `target_post_id`, `target_thread_id`, `reference_type`). There are no lifecycle fields like created_at or deleted_at on this model, so those are NOT updatable and not referenced in this operation. This endpoint is for correcting or modifying references as required, such as changing the citation target or reference type. All input and output fields MUST directly correspond to the schema.","description":"Allows editing any updatable attribute from the `discussionboard_post_references` schema based strictly on table columns: source post, target post, target thread, and type. No system, meta, or non-existent columns are mentioned. All modification is constrained to actual schema, and audit trails are handled at the application level, not exposed in this object or operation.","summary":"Update a post reference entry using only fields defined in schema; meta/lifecycle properties do not exist and are not referenced.","parameters":[{"name":"id","description":"The primary key UUID of the post reference to update, as in the schema definition.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable properties for a post reference, restricted to those defined in the schema table.","typeName":"IPostReference.IUpdate"},"responseBody":{"description":"Returns the updated post reference record, strictly adhering to schema-defined field names and values.","typeName":"IPostReference"},"authorizationRole":"member","name":"update","path":"/discussionboard/postReferences/{id}","method":"put"},{"specification":"Deletes a specific post reference from the `discussionboard_post_references` table. The schema does NOT define any soft delete fields (such as deleted_at or is_deleted), so this operation will perform a hard, irreversible deletion of the entry. This should be used with caution, as it permanently removes the cross-reference between posts/threads and cannot be undone. The response is null on success, with no remaining reference data retrievable. No invented or forbidden fields are referenced in this operation.","description":"This endpoint permanently removes a post reference by its UUID, strictly via hard delete logic. The table does not provide soft delete fields. This process eliminates the relationship from the system, and the record cannot be restored by 'undelete'. No audit, system, or meta properties not in schema are included in the process or documentation.","summary":"Hard delete of a post reference, as the table has no soft delete fields.","parameters":[{"name":"id","description":"Unique identifier of the post reference to delete, matching UUID format as required by the schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns null on successful, hard deletion. If the reference does not exist, returns null as well.","typeName":"null"},"authorizationRole":"member","name":"erase","path":"/discussionboard/postReferences/{id}","method":"delete"},{"specification":"Creates a new comment record in the `discussionboard_comments` table. All required input properties—`discussionboard_post_id`, `discussionboard_member_id`, `body`—must be provided, with optional support for nested replies (`parent_id`). Other properties (created_at, updated_at) are set and tracked by the system/database, not by user input. The resulting object strictly matches the schema fields, and no non-existent or extra fields are referenced in the operation. This endpoint enables members to reply to posts or other comments, supporting threaded discussion functionality.","description":"This operation allows a member to post a new comment under a post or another comment (replies) by specifying all required real schema attributes. The request/response body and all documentation JSON reference only properties that actually exist in `discussionboard_comments`. Fields like deleted_at or admin_notes are not referenced in client input, in line with strict schema compliance.","summary":"Create a new comment on a post or as a reply, using only required and permitted schema columns.","parameters":[],"requestBody":{"description":"Schema-conformant comment creation request object, strictly limited to known table columns—post, member, body, optional parent_id.","typeName":"IComment.ICreate"},"responseBody":{"description":"Returns the full comment object as stored, including all schema fields, after creation.","typeName":"IComment"},"authorizationRole":"member","name":"create","path":"/discussionboard/comments","method":"post"},{"specification":"Retrieves a paginated and filterable list of comments from the `discussionboard_comments` table. Filtering and searching can only apply to fields that exist in the schema (e.g., by `discussionboard_post_id`, `discussionboard_member_id`, date fields, body text). Search does NOT reference or rely on any deleted_at-like field—despite `deleted_at` existing, it is only used for cascade/soft delete workflow internally, and is not a filter in this public API. This endpoint aligns with business rules for member access to discussion threads and comment activity.","description":"This endpoint fetches comments from the table, applying any filters or search parameters only to defined columns (parent comment, post, member, content, timestamps). Although a `deleted_at` field does exist, it is not exposed or directly filtered upon here; only actual table fields are available as request/response data. Pagination controls are supported (offset/limit), and response shape is entirely schema-driven, containing no invented or forbidden fields.","summary":"List and search comments by schema fields, only present table columns may be used or exposed.","parameters":[],"requestBody":{"description":"Request object for paginated comment listing, supporting filters/search by known schema fields only.","typeName":"IComment.IRequest"},"responseBody":{"description":"Paginated list of comment objects conforming strictly to schema record structure.","typeName":"IPageIComment"},"authorizationRole":"member","name":"index","path":"/discussionboard/comments","method":"patch"},{"specification":"Retrieves a single comment record from the `discussionboard_comments` table by its UUID. Returns the full comment object, as persisted, using only columns and data types which are declared in the table schema. If the specified comment does not exist or has been deleted (soft delete indicated by the non-null `deleted_at` field), response is null. Fields not found in the schema or soft delete flags unrelated to this field are NOT referenced anywhere in the request or response data.","description":"Fetches a comment entity by the primary key, returning all matching fields as per schema documentation. If a comment has been soft deleted (`deleted_at` is not null), the endpoint returns null. Fields such as updated_by, deleted_by, or audit metadata are not referenced or returned (do not exist in schema). This operation is for members viewing individual comments or enabling moderation review.","summary":"Get a single comment record by ID, with only real database fields included.","parameters":[{"name":"id","description":"UUID of the comment to find, must correspond to the schema-defined primary key.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The single comment object if found and not soft deleted; null if not found or deleted_at is set.","typeName":"IComment"},"authorizationRole":"member","name":"at","path":"/discussionboard/comments/{id}","method":"get"},{"specification":"Updates an existing comment in the `discussionboard_comments` table. Only mutable fields which are defined in the schema can be changed via this endpoint: `body`, and optionally, setting `parent_id` (for replies/rethreading). The `created_at` and `discussionboard_member_id` are immutable and unaffected. The optional `updated_at` field is automatically updated to the current system time by the backend. The operation must NOT reference any non-existent columns (such as deleted_by or moderator_notes); only schema fields are used. The endpoint is intended primarily for users to correct or edit their own comments, respecting audit and business rules.","description":"Allows permitted users (typically, comment authors or moderators) to modify the content (body) or hierarchy (parent_id) of an existing comment, strictly using real schema fields. `updated_at` is system managed. The endpoint does not expose or reference forbidden fields. If the update includes soft deletion (by setting `deleted_at`), that logic must respect audit policies, but only the schema's fields may be changed. Returns the updated object on success, null if the target was deleted (deleted_at).","summary":"Update comment content or hierarchy, strictly using fields in schema; no extra properties referenced.","parameters":[{"name":"id","description":"Primary key UUID of the comment to update, following the schema's ID field.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for a comment, strictly limited to those existing in `discussionboard_comments`.","typeName":"IComment.IUpdate"},"responseBody":{"description":"Updated comment record with all changes applied. Returns null if comment was deleted or not found.","typeName":"IComment"},"authorizationRole":"member","name":"update","path":"/discussionboard/comments/{id}","method":"put"}],"completed":139,"total":175,"step":0,"created_at":"2025-07-25T05:14:55.378Z"},"tokenUsage":{"facade":{"aggregate":{"total":747675,"input":{"total":696965,"cached":0},"output":{"total":50710,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":747675,"input":{"total":696965,"cached":0},"output":{"total":50710,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":747675,"input":{"total":696965,"cached":0},"output":{"total":50710,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":747675,"input":{"total":696965,"cached":0},"output":{"total":50710,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Create a new discussion board member. This operation is tightly based on the fields defined in the 'discussionboard_members' Prisma schema model, enabling user registration for the platform. The only fields which will be accepted are those declared in the schema: id (auto/generated), username, email, hashed_password, role, is_active, created_at, updated_at, and (optional) deleted_at. The API request requires all necessary user credentials and registration details. No non-existent fields will be mentioned in the operation. The endpoint only uses explicit Prisma schema fields and will not use or reference any deleted_at field processing as creation only writes user details per the schema. Role assignment must be one of: 'member', 'moderator', or 'admin', as the value stored in the role field. The operation MUST check uniqueness of username and email per schema constraints. Created_at and updated_at are set to the current timestamp; deleted_at must not be set at creation. Do not reference fields such as updated_by, created_by, or similar as they are absent. Returns summary of created member.","description":"This endpoint allows creation of a new member in the discussion board system by POSTing the required user credentials. It validates required fields such as username, email, hashed_password, role, and is_active, all following comments from the Prisma discussionboard_members table. The user cannot supply id, created_at, or updated_at—these are automatically set by the backend. Username and email are enforced as unique, with constraints checked against the backing database. The operation ignores and does not reference any fields not present in the schema, including deleted_at at creation time. The response is a summary of the newly registered user, omitting sensitive fields where required (such as hashed_password). If username or email already exists, the operation will fail. Role assignments must be validated to match the enum values used for 'role' in the schema. No operations are performed on related tables at creation. Errors are handled per validation failure or constraint violation.","summary":"Create a new member in the discussionboard_members table for user registration.","parameters":[],"requestBody":{"description":"Details for creating a new discussion board member. Includes username, email, hashed_password, role, is_active.","typeName":"IDiscussionboardMember.ICreate"},"responseBody":{"description":"Created member summary including only schema-defined fields, omitting sensitive values as needed.","typeName":"IDiscussionboardMember"},"authorizationRole":"member","name":"create","path":"/discussionboard/members","method":"post"},{"specification":"Search and filter discussionboard_members records using complex criteria. This operation maps tightly to the fields actually defined in the Prisma model and does not reference deleted_at, created_by, updated_by, or similar unless they are present in the actual schema. Supports advanced search, filtering, and pagination on username, email, role, is_active, and time range fields (created_at, updated_at). Returns only records that match valid Prisma schema fields, never referencing or requiring missing fields. Filtering on role may use options 'member', 'moderator', 'admin' as stored in the role column. Pagination and sorting may leverage created_at/updated_at per the Prisma schema comments. The endpoint never references fields or business logic that is absent from the schema.","description":"This endpoint allows for patch-style (body-based) advanced filter/search of member records as per the discussionboard_members schema. Filters may be supplied for username, email, role assignment, is_active, or date ranges for created_at and updated_at. All queried/filtered fields are guaranteed to exist in the underlying schema, and no non-existent fields are accepted or referenced (e.g., deleted_at, created_by, updated_by). Pagination can be requested via request body parameters. Only those fields present in the Prisma schema may be requested or returned. Sort and search options are fully aligned with the fields available in the table.","summary":"Filter/search members from discussionboard_members table with valid criteria only.","parameters":[],"requestBody":{"description":"Filter criteria for searching members. Only accepts valid schema fields such as username, email, role, is_active, created_at, updated_at.","typeName":"IDiscussionboardMember.IRequest"},"responseBody":{"description":"Paginated and filtered list of members matching provided criteria. Schema fields only.","typeName":"IPageIDiscussionboardMember"},"authorizationRole":"admin","name":"index","path":"/discussionboard/members","method":"patch"},{"specification":"Retrieve a specific member's details by id using only valid fields as defined in the Prisma discussionboard_members schema. The id parameter must be a valid UUID matching the primary key field (id) in the table. No reference is made to non-existent fields (e.g., updated_by, deleted_by), and only schema-defined properties are included in the response, with sensitive or internal values omitted as appropriate (e.g., hashed_password).","description":"This endpoint retrieves a single member record by its unique id, verifying that the id is a valid UUID as per the discussionboard_members schema. Only fields that exist in the schema and are appropriate for external exposure (excluding sensitive or internal fields such as hashed_password) are returned. No soft-delete or extra fields are referenced if they do not exist in the schema. Errors are returned if the id is not found or is invalid. All field-level logic aligns with actual schema column definitions.","summary":"Retrieve one member from the discussionboard_members table by id, using only schema fields.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the discussionboard member to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Member details matching the id, using only valid schema fields (sensitive data omitted as necessary).","typeName":"IDiscussionboardMember"},"authorizationRole":"admin","name":"at","path":"/discussionboard/members/{id}","method":"get"},{"specification":"Update a specific discussionboard member record by id. Uses only fields present in the discussionboard_members Prisma schema table. The id parameter is the primary key and must be a valid UUID. Request body contains only fields present in the schema—username, email, role, is_active, hashed_password, updated_at—and does not reference any non-existent fields. created_at is not updatable per normal audit practices. Updates that conflict with the unique constraints on username or email will fail. Any reference to non-existent columns such as deleted_at, updated_by is prohibited. Returns the updated record summary, excluding or masking sensitive fields as required (e.g., never returning plaintext passwords).","description":"This endpoint updates a member record with the specified id using data in the request body that matches only fields present in the Prisma schema (e.g., username, email, role, is_active, hashed_password, updated_at). It does not accept any properties or attempt updates on columns that do not exist in the schema. Uniqueness constraints for username and email still apply for update operations. The operation never references deleted_at unless it exists as a defined field. Returns the updated member summary after applying changes. If unique field violations occur (username, email), returns an error. Id must reference an existing active record, matching by id column as UUID.","summary":"Update a member in discussionboard_members by id, only with valid schema-defined properties.","parameters":[{"name":"id","description":"Unique identifier (UUID) of member to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the member, using only allowed fields defined in the schema (excluding non-existent fields).","typeName":"IDiscussionboardMember.IUpdate"},"responseBody":{"description":"Updated member summary as stored in the schema, excluding sensitive fields as necessary.","typeName":"IDiscussionboardMember"},"authorizationRole":"admin","name":"update","path":"/discussionboard/members/{id}","method":"put"},{"specification":"Delete a member record by id. This operation is mapped directly to the Prisma schema for discussionboard_members. The schema provides a deleted_at field (nullable); this will be set to the current timestamp on a logical (soft) delete. If the field does not exist, the operation would perform a hard delete, but here deleted_at is present, so this is a soft delete by setting deleted_at and not removing the row. No reference to non-existent columns is made. The id parameter is a UUID and must match the member's primary key. Returns status information for the soft delete action. No sensitive fields are included in the response, and logic closely follows schema comments regarding soft delete behavior.","description":"Soft-deletes a member record by setting the deleted_at field to the current timestamp. This operation aligns with the discussionboard_members schema, which defines a nullable deleted_at column specifically for audit and soft deletion use cases. This avoids physically removing records, instead making them inactive/hidden while retaining them for compliance or audit needs. The endpoint does not reference any fields not in the schema, and audit trail or compliance logging is recommended in actual service logic. Returns status/success for the operation. If the id does not exist or is already logically deleted, an error is returned. No sensitive or non-schema fields are returned.","summary":"Soft-delete a member in discussionboard_members by updating the deleted_at column.","parameters":[{"name":"id","description":"UUID of member to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Soft deletion confirmation/status for the member account—does not expose sensitive user fields.","typeName":"IDiscussionboardMember.ISoftDeleteResponse"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/members/{id}","method":"delete"},{"specification":"Allow the authenticated user to search their own member profile records. The API works only with fields defined in the discussionboard_member_profiles Prisma schema. Supports search, filtering, and sort by fields such as display_name, bio, avatar_url, location, website_url as per schema, linked by the user's member_id. No extraneous or non-schema fields are referenced. Does not allow mutation, just query (PATCH is used for advanced search with body input).","description":"Returns an array of the authenticated user's own profile records by searching for values present in discussionboard_member_profiles. Permitted search filters include display_name, bio, avatar_url, location, and website_url. Only works for fields that directly exist in the schema. No external, non-referenced, or non-schema properties are referenced in either request or response. member_id is always derived from the authenticated user's session context and not specified by the caller. Returns matching profile records in secure, paged format.","summary":"Search the authenticated user's member profiles from discussionboard_member_profiles.","parameters":[],"requestBody":{"description":"Filter/search criteria for user profile records. Fields must exist in the member_profiles schema.","typeName":"IDiscussionboardMemberProfile.IRequest"},"responseBody":{"description":"Paginated list of the authenticated user's profile records matching criteria.","typeName":"IPageIDiscussionboardMemberProfile"},"authorizationRole":"member","name":"index","path":"/my/discussionboard/member/profiles","method":"patch"},{"specification":"Update the authenticated user's own member profile by profile id. Only schema fields (display_name, bio, avatar_url, location, website_url) may be updated. The id path parameter is the unique profile id as UUID. Updates only those fields present in the discussionboard_member_profiles schema and does not reference any fields not present. member_id must correspond to the authenticated user and is not updatable. Response includes updated profile fields only, with sensitive data filtered as per schema comments and privacy requirements.","description":"Updates the member profile for the authenticated user by profile id. Only the allowed schema fields (display_name, bio, avatar_url, location, website_url) may be changed; other fields cannot be updated. Profile id must be a valid UUID. member_id is not modified. No references to fields not present in the schema, such as created_by or audit fields, are allowed. Returns the updated profile after applying changes. Fails if the profile id does not exist or does not belong to the authenticated user. All field logic strictly follows schema-defined columns.","summary":"Update the authenticated user's member profile in discussionboard_member_profiles by id.","parameters":[{"name":"id","description":"UUID of the profile to update (must belong to authenticated user).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the user profile (schema fields only).","typeName":"IDiscussionboardMemberProfile.IUpdate"},"responseBody":{"description":"Updated member profile record after applied changes.","typeName":"IDiscussionboardMemberProfile"},"authorizationRole":"member","name":"update","path":"/my/discussionboard/member/profiles/{id}","method":"put"},{"specification":"Authenticated user may search their own notification and settings preferences using fields in the discussionboard_member_preferences Prisma schema. This operation supports complex search/filter/lookup by any schema field present (e.g., receive_email_notifications, receive_push_notifications, preferred_language, dark_mode_enabled). Only fields that exist in the schema are referenced. No mutations, only secure retrieval. The user context is derived from authentication; member_id is resolved backend. Does not expose or reference unlisted fields or business logic.","description":"Returns the authenticated user's notification and UI preferences by searching for discussionboard_member_preferences that match provided filters. Valid filters are those present in the schema: receive_email_notifications, receive_push_notifications, preferred_language, dark_mode_enabled. No other fields are referenced or used. Responds with a paginated array of the user's relevant preferences, using only schema-validated data.","summary":"Search or list authenticated user's own notification/preferences from discussionboard_member_preferences.","parameters":[],"requestBody":{"description":"Search parameters for preferences (fields must be defined in the member_preferences schema).","typeName":"IDiscussionboardMemberPreference.IRequest"},"responseBody":{"description":"Paginated matching preferences for the authenticated user.","typeName":"IPageIDiscussionboardMemberPreference"},"authorizationRole":"member","name":"index","path":"/my/discussionboard/member/preferences","method":"patch"},{"specification":"Update the authenticated user's own notification/settings preferences by record id. Input fields must be those defined in the discussionboard_member_preferences schema (receive_email_notifications, receive_push_notifications, preferred_language, dark_mode_enabled). The id parameter references the preference record as UUID. member_id cannot be modified and is derived from authentication session. Returns updated record, using only schema-allowed fields. No non-existent properties or side effects.","description":"Updates the authenticated user's notification and UI settings for the given preference record id. Only the schema-defined fields may be updated. member_id is always provided by authentication context and cannot be changed. No fields not present in the schema may be referenced. Returns the modified record after successful update, with sensitive/internal fields omitted. Errors are triggered if id does not exist, or does not belong to the user. Data security and privacy are enforced per the schema documentation.","summary":"Update authenticated user's notification/preferences in discussionboard_member_preferences by id.","parameters":[{"name":"id","description":"UUID of the preference record to update (must belong to authenticated user).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for notification/preferences (schema-permitted fields only).","typeName":"IDiscussionboardMemberPreference.IUpdate"},"responseBody":{"description":"Updated notification/preferences record for the user.","typeName":"IDiscussionboardMemberPreference"},"authorizationRole":"member","name":"update","path":"/my/discussionboard/member/preferences/{id}","method":"put"},{"specification":"Create a new moderator assignment record using fields present in the discussionboard_moderators Prisma schema. The POST request must provide member_id (UUID), assigned_by_admin_id (UUID), assigned_at (timestamp), and (optionally) expires_at and revoked_at. This operation strictly follows the schema: id is auto-generated; all business logic and relationships required are covered by member_id and assigned_by_admin_id columns. The response summarizes the created moderator assignment, and no non-existent fields are referenced. Only a 'member' who is not already a moderator may be promoted. auditor and time tracking per schema fields. Returns all assignment details stored in the schema.","description":"This endpoint creates a new moderator role assignment for a member using POST, requiring valid UUIDs for member_id and assigned_by_admin_id. assigned_at is set to the current time, and optional expires_at or revoked_at may be supplied in the appropriate format (both nullable as per schema). member_id must match an existing user, and uniqueness is enforced via a unique constraint. The operation uses only valid schema fields with no additional or missing references. Returns the full moderator assignment record as stored. Errors if member is already a moderator or values are invalid.","summary":"Assign a user as a moderator—create discussionboard_moderators record.","parameters":[],"requestBody":{"description":"Moderator assignment details for a member (including required and optional fields as per schema).","typeName":"IDiscussionboardModerator.ICreate"},"responseBody":{"description":"Created moderator assignment record.","typeName":"IDiscussionboardModerator"},"authorizationRole":"admin","name":"create","path":"/discussionboard/moderators","method":"post"},{"specification":"Search moderator assignment records in discussionboard_moderators using PATCH body style and the fields specified in the schema. Permitted filters are member_id, assigned_by_admin_id, assigned_at, expires_at, revoked_at. Only schema fields are referenced or used; uniqueness on member_id is enforced. Pagination and sorting supported on assigned_at fields only as present in schema documentation. Sensitive or non-existent fields may not be referenced. The PATCH method is used for advanced searches via request body parameters matching allowed schema fields.","description":"Allows searching or filtering of moderator assignments using advanced criteria in the request body, matching only those fields found in the schema. Filtering, sorting, and pagination may be performed on member_id, assigned_by_admin_id, assigned_at, expires_at, and revoked_at. No non-schema columns may be queried or referenced. Returns all matching results in a paginated format, using only schema-defined fields. Errors if invalid filters or fields are supplied. Only active assignments are listed unless filters expand to include revoked_at.","summary":"Search moderator assignments using allowed fields in discussionboard_moderators.","parameters":[],"requestBody":{"description":"Optional search/filter criteria based on schema fields (member_id, assigned_at, etc.).","typeName":"IDiscussionboardModerator.IRequest"},"responseBody":{"description":"Paginated moderator assignment records matching criteria.","typeName":"IPageIDiscussionboardModerator"},"authorizationRole":"admin","name":"index","path":"/discussionboard/moderators","method":"patch"},{"specification":"Retrieve moderator assignment details by id, using only fields in the discussionboard_moderators schema. The id is required as UUID. Returns all schema-defined properties except null-sensitive or internal values as indicated in schema comments. No references to non-existent fields are made. Record must exist and match the id; uniqueness on member_id is still enforced. Returns null or error if not found.","description":"This endpoint gets a moderator assignment record for the given id, returning member_id, assigned_by_admin_id, assigned_at, expires_at, revoked_at, and id, as provided by the Prisma schema. No non-existent, derived, or denormalized fields are returned. Returns an error if the id is not found or is invalid. Business logic validates id and uniqueness as in the schema. Only valid schema fields are output.","summary":"Get moderator assignment record from discussionboard_moderators by id.","parameters":[{"name":"id","description":"UUID of moderator assignment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment record retrieved by id, schema fields only.","typeName":"IDiscussionboardModerator"},"authorizationRole":"admin","name":"at","path":"/discussionboard/moderators/{id}","method":"get"}],"completed":151,"total":175,"step":0,"created_at":"2025-07-25T05:15:22.613Z"},"tokenUsage":{"facade":{"aggregate":{"total":858958,"input":{"total":799946,"cached":0},"output":{"total":59012,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":858958,"input":{"total":799946,"cached":0},"output":{"total":59012,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":858958,"input":{"total":799946,"cached":0},"output":{"total":59012,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":858958,"input":{"total":799946,"cached":0},"output":{"total":59012,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"This operation retrieves a paginated, filterable, and sortable list of comment report records in the discussion board moderation system, as defined by the discussionboard_comment_reports table. Each comment report records a single instance of a member formally reporting a comment for a certain reason and is referenced by moderators and admins in the moderation process. This endpoint supports advanced queries, including searching by member, comment, report type, and time, helping moderators discover recent or high-priority issues for review. It is vital for monitoring patterns of abuse, assessing member participation in moderation, and providing audit trails per compliance requirements. No fields outside those explicitly documented in the Prisma schema are referenced. The results include all persisted atomic attributes for each comment report.","description":"Retrieves a list of all comment report records located in the discussionboard_comment_reports table for the moderation domain of the discussion board system.\n\nThis operation supports advanced searching, filtering, and pagination capabilities, including options to filter by discussionboard_comment_id (the comment targeted by the report), discussionboard_member_id (the reporting member), discussionboard_report_type_id (the report category), created_at (date/time of report), and the reason (freeform text explanation supplied by the reporter). All retrieved records are strictly atomic, matching the column-level documentation in the Prisma schema, and no fields are omitted or fabricated.\n\nSecurity and user permissions are determined by the user's role with access typically restricted to moderators and admins, as outlined in business rules and the Roles & Permissions Matrix. Results must be paginated to avoid excessive load or leaking large volumes of moderation-related data, and error handling must follow platform audit and compliance requirements.","summary":"Retrieve a paginated, filterable list of discussionboard_comment_reports (comment moderation/reporting records).","parameters":[],"requestBody":{"description":"Search, filter, and pagination instructions for retrieving comment report records from the discussionboard_comment_reports table.","typeName":"IDiscussionboardCommentReport.IRequest"},"responseBody":{"description":"A paginated set of comment report records from the discussionboard_comment_reports table, accompanied by pagination metadata and filters used.","typeName":"IPageIDiscussionboardCommentReport"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/commentReports","method":"patch"},{"specification":"This operation retrieves a single comment report record for moderation or audit, using its unique identifier. The comment report, located in discussionboard_comment_reports, is atomic: it records which comment was reported, by which member, for which report type, the textual reason, and exactly when. Data fidelity is strictly enforced by returning only schema-defined columns. The endpoint assists moderators/admins in reviewing the details of a specific moderation report for comment content, including contextual data for decisions or escalation.","description":"Fetch details of a single comment report record from the discussionboard_comment_reports table, identified by its id (UUID primary key).\n\nReturns the full schema-defined content of the record, including the unique id, discussionboard_comment_id referencing the targeted comment, discussionboard_member_id for the reporting member, discussionboard_report_type_id for report category, reason (textual explanation), and created_at timestamp. No extra fields nor derived content are returned, only atomic columns present in the table.\n\nAccess restricted to moderators and admins. Handles not Found cases per audit requirements; denies access when unauthorized. Strictly references only direct Prisma schema fields.","summary":"Retrieve the full details of a single comment moderation/reporting record (discussionboard_comment_reports) by UUID id.","parameters":[{"name":"id","description":"Unique UUID identifier of the comment report record (discussionboard_comment_reports.id) to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single comment report record from the discussionboard_comment_reports table, expressed in atomic column format.","typeName":"IDiscussionboardCommentReport"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/commentReports/{id}","method":"get"},{"specification":"This operation updates (edits) an existing comment report record in the discussionboard_comment_reports table. A comment report records a user-stated rationale for reporting a comment and is referenced in moderation workflows. This endpoint allows authorized staff (typically moderators/admins) to change allowed fields—most likely for correcting a report reason (rationale) or reassigning it to another report type if incorrectly classified. All field edits are directly mapped to table columns and must not reference any fields not present in the Prisma schema. Any edit is logged for audit compliance.","description":"Update allowed mutable fields on a comment report record in the discussionboard_comment_reports moderation table. Typical usage is to amend/correct the report's rationale (reason) or adjust the report type classification, supporting moderation workflows where reporter intent or categorization was mistaken.\n\nRequest body must specify the id (UUID PK) and new values for mutable fields, strictly as permitted by the Prisma schema (e.g., reason, discussionboard_report_type_id), and cannot edit immutable columns (created_at, etc). Operation is restricted to users with moderator/admin privileges. On success, returns the updated record; errors on not found/unauthorized or forbidden field change attempts. All changes are audited.","summary":"Update permitted fields (e.g., reason, report type) for a single comment report record in discussionboard_comment_reports.","parameters":[{"name":"id","description":"Unique UUID identifier of the comment report record (discussionboard_comment_reports.id) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update (e.g., reason, report type id) in the comment report.","typeName":"IDiscussionboardCommentReport.IUpdate"},"responseBody":{"description":"The updated comment report record after permitted changes.","typeName":"IDiscussionboardCommentReport"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/commentReports/{id}","method":"put"},{"specification":"This operation deletes a comment report record from the discussionboard_comment_reports table. The entity contains no soft deletion or deleted_at fields; thus, this is a hard delete, permanently removing the report from the database. Per audit/compliance requirements, only authorized moderators/admins can invoke this endpoint, and all such deletions must be logged. Attempting to delete a non-existing record or when unauthorized will produce an appropriate error or access denial.","description":"Delete a comment report record from the discussionboard_comment_reports table, directly referenced by its id (UUID primary key). As the schema defines no soft deletion (no deleted_at or similar column), this operation executes a hard delete, permanently erasing the row.\n\nOnly accessible to users with moderator/admin privileges. Deletions are logged for audit trail and compliance. Errors reported if the report is not found, or if access is denied, with strict field referencing as per schema.","summary":"Hard delete a comment moderation report record (discussionboard_comment_reports) by UUID id (no soft delete possible).","parameters":[{"name":"id","description":"UUID primary key of the comment report record to delete (discussionboard_comment_reports.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/commentReports/{id}","method":"delete"},{"specification":"This operation creates a new generalized moderation report record in the discussionboard_reports table. A report records a member's request for intervention regarding an object they believe violates platform policy (targeting posts, comments, or users). The endpoint accepts all required atomic fields only (see schema), enforcing member authentication, audit, and referencing only table columns (no fabricated fields). On success, the new incident/report is persisted with exact schema fidelity and returned; validations and compliance (e.g., one-per-object/member/type) enforced by database constraints and business rules.","description":"Create a new moderation report record in the discussionboard_reports table, assigning it to the reporting member, specifying the report type, and indicating the object and type being reported (post, comment, or member).\n\nThe request must provide all required fields as per the Prisma schema: discussionboard_report_type_id (report type), reporting_member_id (who reports), target_object_id (UUID), target_object_type (string), optional report_description (further explanation), and reported_at (timestamp). No fields outside the schema are recorded. Request is denied if constraints (unique per-object/member/type, etc) are violated or unauthorized access is attempted. On success, the record is returned with all direct schema columns set.","summary":"Create a new moderation report record (discussionboard_reports) regarding a content object or user.","parameters":[],"requestBody":{"description":"New report details (required as per schema) for discussionboard_reports table entry.","typeName":"IDiscussionboardReport.ICreate"},"responseBody":{"description":"The newly created moderation report record from discussionboard_reports table.","typeName":"IDiscussionboardReport"},"authorizationRole":"member","name":"create","path":"/discussionboard/reports","method":"post"},{"specification":"This operation retrieves a paginated, filterable, and sortable list of general moderation reports from the discussionboard_reports table. Each record is an atomic instance of a member reporting a post, comment, or member, in accordance with moderation and escalation flows. Endpoints support searching, filtering, and ordering by any schema column—especially by target type, member, report type, report date, and reason. No data is returned except direct schema columns. Results are paginated for performance and security.","description":"Retrieve a paginated list of moderation report records from the discussionboard_reports table, with support for searching, filtering, and sorting by direct schema columns such as reporting_member_id, report type, target_object_id (UUID), target_object_type (string), reported_at (date/time), and report_description (optional text explanation).\n\nOnly direct schema fields are returned; no denormalized or calculated information is present. Access typically restricted to moderators/admins, as dictated by platform security model, and all requests/audits are logged for compliance. Pagination is enforced to avoid excessive data volume and maintain privacy/security. Filtering is applied using only permissible schema-based fields. No off-schema attributes referenced.","summary":"Retrieve a paginated, filterable list of general moderation report records (discussionboard_reports).","parameters":[],"requestBody":{"description":"Search, filter, and pagination settings for retrieval from discussionboard_reports table.","typeName":"IDiscussionboardReport.IRequest"},"responseBody":{"description":"A paginated set of general moderation report records from the discussionboard_reports table, including pagination and filter metadata.","typeName":"IPageIDiscussionboardReport"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/reports","method":"patch"},{"specification":"This operation retrieves the atomic detail for a single moderation report record by UUID id from the discussionboard_reports table. The data returned is strictly composed of direct schema-based columns: report id, report type id, reporting member id, target object id/type, report description, and reported_at. Used by moderation workflow for review, escalation, or audit logging. Not Found or access errors are clearly handled per security and compliance rules.","description":"Fetch the schema-defined details of a single general moderation report record from discussionboard_reports table, referenced by its UUID id (primary key).\n\nReturns all atomic table columns: id, discussionboard_report_type_id (reason), reporting_member_id (the reporting member), target_object_id (UUID), target_object_type (entity class as string), report_description (optional), reported_at (timestamp). No other or derived information is returned. Typical access restricted to moderators/admins. Not found and permission errors are handled per compliance and audit. Only fields present in schema are referenced.","summary":"Retrieve detailed information for a single moderation report record in discussionboard_reports by id.","parameters":[{"name":"id","description":"UUID primary key from discussionboard_reports.id for the report to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single general moderation report record in atomic table column form.","typeName":"IDiscussionboardReport"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/reports/{id}","method":"get"},{"specification":"This operation updates mutable fields of a single moderation report record in the discussionboard_reports table. Edits may include changes to the report_description (user's detailed explanation), or reassignment of report type if allowed in business logic. Only fields present in the schema are updateable; immutable fields (like reported_at or PK) are not changeable. Operation is available only to authorized moderation/admin roles, with all updates logged for audit/compliance. Changes must follow strict schema mapping—no off-schema fields may be referenced.","description":"Update editable schema fields on a moderation report record (discussionboard_reports), such as report_description or report type. This allows corrections due to user clarification, moderator review, or workflow requirements.\n\nThe input must specify the id (UUID PK) to amend, and the updated field values. No changes are permitted to immutable columns. Changes are logged, and unauthorized access or not found conditions are handled in compliance with platform audit rules.","summary":"Edit modifiable columns (e.g., report_description, report type) for a single moderation report in discussionboard_reports.","parameters":[{"name":"id","description":"UUID identifier for the report to update (discussionboard_reports.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and updated values (must map directly to schema columns) for the moderation report record.","typeName":"IDiscussionboardReport.IUpdate"},"responseBody":{"description":"The updated moderation report record after edit.","typeName":"IDiscussionboardReport"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/reports/{id}","method":"put"},{"specification":"This operation deletes a single report record in the discussionboard_reports table, referenced by id. The Prisma schema for discussionboard_reports does not provide any soft delete or deleted_at column. Thus, the operation performs a hard delete: it permanently removes the report from the database with no recoverability. All deletions must be invoked by users with moderation or admin role privileges, and such actions are logged for audit and compliance per business requirements.","description":"Permanently remove a moderation report record from the discussionboard_reports table, identified by its unique id (UUID PK).\n\nAs no soft deletion or deleted_at field is present in the schema, this action deletes the record outright. This endpoint is normally restricted to users with 'moderator' or 'admin' roles, and such actions must be logged per compliance rules. Returns success or appropriate error if record not found or unauthorized. All responses strictly reference schema-defined fields.","summary":"Delete (hard delete) a single discussionboard_reports record by id (no soft delete possible).","parameters":[{"name":"id","description":"Unique UUID identifier of the report record to remove (discussionboard_reports.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/reports/{id}","method":"delete"},{"specification":"This operation creates a new report type entry in the discussionboard_report_types table, the registry of valid moderation report categories (e.g., 'spam', 'abuse', etc). Report types have atomic, schema-defined columns: code, display_name, description (optional), active status (boolean), and created_at. Data provided must map strictly to the table columns. On creation, a new type is immediately available for user or moderator reporting workflows using this category. Access restricted to admins.","description":"Create a new report type record in the discussionboard_report_types table, specifying a unique code (short string), user-visible display_name, optional description, active status flag, and created_at timestamp (all per direct schema documentation). \n\nThis enables new, altered, or disabled moderation categories. Only actual columns from the schema are permitted; on success, returns the newly created row. Operation is restricted to users with admin role, to prevent untrusted expansion of reportable types. Errors follow uniqueness or constraint violations documented in schema.","summary":"Create a new moderation report type record (discussionboard_report_types) for categorizing reports.","parameters":[],"requestBody":{"description":"Report type details (code, display_name, optional description, active status) for creation.","typeName":"IDiscussionboardReportType.ICreate"},"responseBody":{"description":"The new moderation report type record as persisted in the discussionboard_report_types table.","typeName":"IDiscussionboardReportType"},"authorizationRole":"admin","name":"create","path":"/discussionboard/reportTypes","method":"post"},{"specification":"This operation returns a paginated, filterable, and sortable list of all moderation report type records in the discussionboard_report_types table. Each entry includes atomic attributes: id, code, display_name, description (optional), active status, created_at. Searching and sorting are based on these columns only. The endpoint supports admin configuration, analytics, and moderation dashboard browsing of current and historic moderation reason categories. Output and searching is strictly limited to schema fields—no derived, hidden, or opaque values are returned.","description":"Fetch a paginated list of moderation report type records from the discussionboard_report_types table, supporting search and filter on schema properties: code (string, unique), display_name (user label), description (optional), active status flag, creation timestamp (created_at).\n\nAll fields map directly to those in the Prisma schema with no hidden or derived data. Paging metadata is included to support UI and dashboard use cases, and all security and privacy rules as outlined in the requirements must be enforced. Typical use by admins and/or moderation staff. Errors for access or search violations per business logic.","summary":"Retrieve a paginated, filterable list of moderation report types (discussionboard_report_types).","parameters":[],"requestBody":{"description":"Pagination, search, and filter query for report types from discussionboard_report_types table.","typeName":"IDiscussionboardReportType.IRequest"},"responseBody":{"description":"A paginated set of moderation report type records and paging metadata.","typeName":"IPageIDiscussionboardReportType"},"authorizationRole":"admin","name":"index","path":"/discussionboard/reportTypes","method":"patch"},{"specification":"This operation retrieves an individual moderation report type record from the discussionboard_report_types table, referenced by its UUID identifier. The returned data is atomic (one row, all columns) and used for configuration, moderation dashboard context, or analytics research. Returned fields are strictly limited to those directly mapped in the schema: id, code, display_name, description, active flag, created_at, etc. Only actual columns returned—no hidden, derived, or virtual properties are included.","description":"Retrieve details for a single moderation report type record from discussionboard_report_types, referenced by its primary key (UUID id). Returns all atomic properties as mapped in the schema: id, code, display_name, description (optional), active (boolean), created_at, etc. No non-schema fields are returned.\n\nUsed for review, analytics, and moderation dashboard workflows. Access is typically limited to admin or privileged moderation roles, as per platform security rules. Handles errors for not found or unauthorized situations in strict accordance with compliance/audit protocols.","summary":"Retrieve full details of a single moderation report type entry (discussionboard_report_types) by id.","parameters":[{"name":"id","description":"UUID identifier of the moderation report type to fetch (discussionboard_report_types.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single moderation report type record in schema-atomic column format.","typeName":"IDiscussionboardReportType"},"authorizationRole":"admin","name":"at","path":"/discussionboard/reportTypes/{id}","method":"get"}],"completed":163,"total":175,"step":0,"created_at":"2025-07-25T05:15:35.638Z"},"tokenUsage":{"facade":{"aggregate":{"total":908397,"input":{"total":845246,"cached":0},"output":{"total":63151,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":908397,"input":{"total":845246,"cached":0},"output":{"total":63151,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":908397,"input":{"total":845246,"cached":0},"output":{"total":63151,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":908397,"input":{"total":845246,"cached":0},"output":{"total":63151,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceOperations","operations":[{"specification":"Retrieve a specific notification log record by its primary key (id) from the discussionboard_notifications table. This operation enables clients to fetch detailed information about a single notification delivered to a user or other entity for debugging, compliance, or user-facing notification review. The notification object contains fields such as id, target_id, type, title, body, delivered, created_at, delivered_at, all of which are required to be returned as per the actual schema. This operation is designed for use in notification delivery logs, system audits, or per-user notification panels. Authentication is typically required, and access should only be granted based on proper authorization (e.g., owner or administrator/moderator views, depending on system design). Returns 404 if the notification does not exist.","description":"This endpoint retrieves a single notification log record from the discussionboard_notifications table based solely on the provided notification id. Each notification record contains the following fields: id (UUID primary key), target_id (nullable UUID recipient reference), type (event type: string), title (summary), body (nullable string content), delivered (boolean delivery flag), created_at (notification creation timestamp), and delivered_at (nullable delivered timestamp).\n\nThis endpoint is often used in user notification panels, admin or moderator audit interfaces, or for debugging notification delivery status. It provides a complete view of the notification, including which entity it was sent to (if known), delivery status and timestamps. Permission enforcement is handled in upper application layers: typically, members may access their own records, while administrators/moderators may audit notifications system-wide.\n\nThe operation will return 404 if the record is not found. No business logic beyond fetching and authorization is performed; does not mark as read, trigger delivery, or modify any state.","summary":"Fetch a single notification log by id from discussionboard_notifications.","parameters":[{"name":"id","description":"Unique notification log id (UUID) to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete notification log record for the given id.","typeName":"Idiscussionboard_notifications"},"authorizationRole":"admin","name":"at","path":"/discussionboard/notifications/{id}","method":"get"},{"specification":"Update the delivered status or content of a specific notification log record in the discussionboard_notifications table by id. This operation allows clients to mark a notification as delivered, update its title, body, or other fields, or perform status post-processing as required by admin/mod panel or system jobs. Only updatable fields defined in the actual schema (title, body, delivered, delivered_at, etc.) can be changed. The ID is mandatory. Authorization and audit trail must be enforced via upper-level logic, as this operation permits modification of audit/compliance-related records. Attempts to update a non-existent record should return 404.","description":"This endpoint updates a notification log record in the discussionboard_notifications table, identified by its primary key (id). Allowable updates include: title, body, delivered (status), and delivered_at timestamp. Fields such as id, created_at cannot be modified. This operation supports flows such as marking notifications as delivered, editing content for administrative correction, or updating titles for improved clarity/auditing.\n\nAuthorization is required: only permitted users (e.g., system jobs, admins, or notification owners if business rules permit) may perform updates. All attempted changes should be reflected in audit logs for compliance.\n\nReturns the updated notification record on success; returns 404 if the record does not exist.","summary":"Update notification log record by id in discussionboard_notifications.","parameters":[{"name":"id","description":"Unique notification log id (UUID) to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the notification log (title, body, delivered, delivered_at).","typeName":"Idiscussionboard_notifications.IUpdate"},"responseBody":{"description":"Updated notification log record for the given id.","typeName":"Idiscussionboard_notifications"},"authorizationRole":"admin","name":"update","path":"/discussionboard/notifications/{id}","method":"put"},{"specification":"Delete a notification log record from the discussionboard_notifications table by its primary key (id). This action performs a hard delete, as the schema does not include a soft-delete field (e.g., is_deleted or deleted_at). Deletion is permanent and unrecoverable, removing the log from the audit/compliance record. Only authorized users (e.g., system admin, superuser, or explicit owner where relevant) can perform this operation, which must be strictly logged for compliance. This operation is used for compliance data cleanup, e.g., to expunge obsolete or invalid notification logs.","description":"This endpoint deletes a unique notification log entry from the discussionboard_notifications table, identified by id (UUID). As there are no soft delete fields in the schema, the operation will permanently remove the specified record from the database. This is a critical, non-recoverable action intended only for system administrators, compliance operations, or programmatic data lifecycle management where retention is no longer required or allowed.\n\nAppropriate authorization (usually admin/superuser) must be enforced. All deletions should be audit-logged elsewhere. The operation returns 204 No Content on success, or 404 if the record does not exist.","summary":"Permanently delete a notification log record from discussionboard_notifications by id.","parameters":[{"name":"id","description":"Unique notification log id (UUID) to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/notifications/{id}","method":"delete"},{"specification":"Create a new discussionboard_settings record in the per-feature/area settings table. This operation allows system administrators or authorized roles to define feature-specific settings, such as toggles or options that apply to a given entity or scope (channel, section, feature_flag, etc.). Fields are provided in the request body and must include scope_type, key, value (optional), and related metadata (description, timestamps). This operation supports extensible platform configuration without schema changes, powering runtime feature flags, moderation policies, or localized settings.","description":"This endpoint creates a new row in the discussionboard_settings table to establish or update scoped system settings (such as feature toggles, board/section/channel-level options, or per-feature controls). Required input fields include scope_type (e.g., 'channel', 'section', 'feature_flag'), key (what the setting controls), and other configuration fields. Optionally, scope_id, value, and description may also be included. Timestamps (created_at, updated_at) are managed by the service layer per audit policies.\n\nThis API is reserved for authorized users (typically admin or superuser roles) as settings can control critical application logic and user experience. Only internal platform actors should access it directly. On success, returns the complete record as created. Returns 400 for validation failure.","summary":"Create a new setting in discussionboard_settings table.","parameters":[],"requestBody":{"description":"Setting creation fields for discussionboard_settings.","typeName":"Idiscussionboard_settings.ICreate"},"responseBody":{"description":"Successfully created discussionboard_settings record.","typeName":"Idiscussionboard_settings"},"authorizationRole":"admin","name":"create","path":"/discussionboard/settings","method":"post"},{"specification":"Retrieve a paginated/searchable list of settings from the discussionboard_settings table. This operation supports system administration, diagnostics, and operational analysis where viewing active feature toggles or area-specific options is required. Query by filters such as scope_type, key, allow advanced search via request body, and support pagination fields (limit, offset). Results include all fields from the settings schema. Commonly used in settings dashboards or platform configuration review tools.","description":"This endpoint provides a paginated and filterable search interface for records in the discussionboard_settings table. Filters may include scope_type (channel, section, feature_flag), key, and optionally partial matches on value or description. Supports advanced querying via request body for operational dashboards and admin tools. Results include all non-sensitive setting fields: id, scope_type, scope_id, key, value, description, created_at, updated_at.\n\nSupports pagination (limit, offset) and sorting parameters as defined in the admin dashboard or backend logic. This interface is restricted to authorized users, typically administrators or superusers, given the potential impact of settings changes.\n\nReturns a paginated list (page info + data array) of matching settings records per platform best practice.","summary":"Search or paginate discussionboard_settings table records.","parameters":[],"requestBody":{"description":"Query and pagination parameters for discussionboard_settings list retrieval.","typeName":"Idiscussionboard_settings.IRequest"},"responseBody":{"description":"Paginated settings records and metadata.","typeName":"IPageIdiscussionboard_settings"},"authorizationRole":"admin","name":"index","path":"/discussionboard/settings","method":"patch"},{"specification":"Retrieve a single settings record from the discussionboard_settings table by its primary key (id). This operation fetches all details for a given setting, enabling admin users or configuration dashboards to display full information, including scope, key, value, and metadata. Used in operational dashboards, audit tools, or admin panels when managing feature flags, rule toggles, or per-entity configuration.","description":"This endpoint returns the complete data for a settings record from the discussionboard_settings table, based on its unique id (UUID). Returned fields are: id, scope_id (nullable), scope_type, key, value (nullable), description (nullable), created_at, and updated_at. This operation is essential for admin systems to inspect, detail, or potentially update a configuration for a specific feature, channel, section, or entity.\n\nTypically restricted to authorized users (administrators/superusers) given its platform-wide impact. Returns 404 if the record does not exist.","summary":"Fetch a single settings record by id from discussionboard_settings.","parameters":[{"name":"id","description":"Unique settings record id (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single discussionboard_settings record for the requested id.","typeName":"Idiscussionboard_settings"},"authorizationRole":"admin","name":"at","path":"/discussionboard/settings/{id}","method":"get"},{"specification":"Update an existing settings record in discussionboard_settings by its unique id. This operation allows authorized actors (typically administrators) to modify settings for features, channels, or sections. Updatable fields include value, description, and potentially key, scope_type, scope_id. Created_at and id fields are immutable. All changes must comply with audit trails and business policy enforcement. This operation is commonly used in admin dashboard flows or as part of platform operation modifications.","description":"This endpoint updates a row in the discussionboard_settings table identified by its id (UUID). Allows changing setting fields such as value (toggle, string, limit), description, key, scope_id, scope_type. Ensures atomic update of mutable fields while maintaining a complete compliance and audit record (created_at and id are immutable). Used by admin systems to enable, disable, or modify feature flags or scoped options for runtime flexibility.\n\nOnly administrators or explicitly authorized roles can use this endpoint. Returns 404 if the settings record does not exist. The updated record is returned on success.","summary":"Update a settings record in discussionboard_settings table by id.","parameters":[{"name":"id","description":"Unique settings row id (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data fields to update for the selected discussionboard_settings record.","typeName":"Idiscussionboard_settings.IUpdate"},"responseBody":{"description":"Updated discussionboard_settings record as stored after change.","typeName":"Idiscussionboard_settings"},"authorizationRole":"admin","name":"update","path":"/discussionboard/settings/{id}","method":"put"},{"specification":"Delete a discussionboard_settings record from the table by its unique id. This is a hard-delete, as the schema does not define any soft-delete field (such as is_deleted or deleted_at). The operation is reserved for administrators and compliance system jobs that require permanent removal of obsolete or erroneous settings. Once deleted, the settings row is unrecoverable and will immediately stop affecting platform state. Deletions must be thoroughly audit-logged for compliance and traceability.","description":"This endpoint permanently removes a record from the discussionboard_settings table, using its id (UUID) as the primary key. Because the schema has no soft-delete field, the operation fully deletes the configuration setting and all related business impact is immediate. Intended only for system administrators and compliance/cleanup flows where platform configuration is being pruned or obsolete flags eliminated.\n\nReturns 204 No Content if successful; 404 if the row does not exist. All deletions should be recorded in audit/compliance logs.","summary":"Permanently delete a settings record from discussionboard_settings by id.","parameters":[{"name":"id","description":"Unique settings record id (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/settings/{id}","method":"delete"},{"specification":"Create a new board entry in the discussionboard_boards table, representing a single discussion board topic/category. This operation allows administrators or authorized actors to define a new board with required attributes (category reference, section reference, name, code, is_active, is_visible, created_at/updated_at handled in the service layer). Only fields that actually exist in the schema (discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible) may be set. Client must supply attribute values in the correct schema structure. Admin-only for platform organization and moderation.","description":"This endpoint creates a new board record in the discussionboard_boards table according to the provided input. Required input: discussionboard_board_category_id (UUID), discussionboard_section_id (UUID), name (string), and code (unique string for programmatic access/routing). Optionally: description (string), is_active (boolean), and is_visible (boolean). Timestamps are managed internally. This creates a new topic area for organizing threads and posts per admin/business rules.\n\nOnly authorized users (typically admin/superuser roles) can call this API due to its broad impact on platform content organization. Returns the complete board record as created if successful; returns 400 for input validation errors.","summary":"Create a new discussion board in discussionboard_boards.","parameters":[],"requestBody":{"description":"Board creation parameters as per schema.","typeName":"Idiscussionboard_boards.ICreate"},"responseBody":{"description":"The newly created discussionboard_boards record.","typeName":"Idiscussionboard_boards"},"authorizationRole":"admin","name":"create","path":"/discussionboard/boards","method":"post"},{"specification":"Get a searchable and paginated list of discussionboard_boards records from the table. This operation is commonly accessed from admin dashboards, navigation panels, or admin user list views, enabling search, filter and sort on attributes like category, section, code, name, is_active, is_visible, etc. Results include all standard board entity fields present in the schema. It is designed for administrative, analytics, or navigation builder interfaces. Typical query/pagination parameters are received via request body.","description":"This endpoint retrieves a paginated, optionally filtered list of board records from the discussionboard_boards table. Filters may include code, category, section, activity/visibility flags, and partial search on name/description fields. Implements best-practice admin and UI listing/search workflows for boards. The returned objects include: id, discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, updated_at.\n\nPagination, filtering, and sorting are supported via flexible request body parameters (limit, offset, query strings, ordering, etc.). Only authorized users (admin/moderator) may access this endpoint for management of boards and navigation layout.","summary":"Paginate and search discussion boards from discussionboard_boards.","parameters":[],"requestBody":{"description":"Request parameters for searching and paginating boards list.","typeName":"Idiscussionboard_boards.IRequest"},"responseBody":{"description":"Paginated result list of discussion board records and metadata.","typeName":"IPageIdiscussionboard_boards"},"authorizationRole":"admin","name":"index","path":"/discussionboard/boards","method":"patch"},{"specification":"Retrieve a specific board record from the discussionboard_boards table by id. Enables admin dashboards, moderation panels, or advanced navigation editors to fetch all field values for a board, matching the schema. Returns board detail including: id, category/section references, name, code, description (optional), is_active, is_visible, created_at, and updated_at. This is a read-only operation; no modification is performed. Returns 404 if not found.","description":"This endpoint fetches a single board record from the discussionboard_boards table by its unique id (UUID). The response includes all major fields: id, discussionboard_board_category_id, discussionboard_section_id, name, code, description (nullable), is_active, is_visible, created_at, updated_at. Used by admin or moderator dashboard features or navigation builders to inspect board configuration and metadata.\n\nReturns a full board entity or 404 if no such board exists. No side effects, pure read operation only.","summary":"Retrieve board details by id from discussionboard_boards.","parameters":[{"name":"id","description":"Unique board id (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discussion board record for specified id.","typeName":"Idiscussionboard_boards"},"authorizationRole":"admin","name":"at","path":"/discussionboard/boards/{id}","method":"get"},{"specification":"Update an existing board entity in discussionboard_boards by its unique id. Permits modification of represented fields only (discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, updated_at). Created_at and id are immutable. Service must update updated_at timestamp. This endpoint supports admin-only flows for maintaining platform structure: moving boards between categories, editing names/codes, activating/archiving boards, or changing visibility. Authorization must ensure only appropriate privileged users can call.","description":"This endpoint updates a record in the discussionboard_boards table with given id. The request body can modify: discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, and is_visible. Only mutable fields as per schema are permitted. On success, the updated board record is returned; if not found, 404 is returned.\n\nTypically used by platform admins and superusers to manage layout, navigation, or organizational metadata for discussion boards.","summary":"Update a discussion board in discussionboard_boards by id.","parameters":[{"name":"id","description":"Unique discussion board id (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updateable fields for the discussion board entity.","typeName":"Idiscussionboard_boards.IUpdate"},"responseBody":{"description":"Updated discussion board record for the specified id.","typeName":"Idiscussionboard_boards"},"authorizationRole":"admin","name":"update","path":"/discussionboard/boards/{id}","method":"put"}],"completed":175,"total":175,"step":0,"created_at":"2025-07-25T05:15:51.504Z"},"tokenUsage":{"facade":{"aggregate":{"total":1082462,"input":{"total":1007068,"cached":0},"output":{"total":75394,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1082462,"input":{"total":1007068,"cached":0},"output":{"total":75394,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1082462,"input":{"total":1007068,"cached":0},"output":{"total":75394,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1082462,"input":{"total":1007068,"cached":0},"output":{"total":75394,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardCommentSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Comment snapshot unique identifier.\n\nReferences the primary key of the snapshot entity from the Prisma schema. Used for retrieving or referencing this snapshot version in audit and moderation workflows."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"ID of the parent comment this snapshot is versioning.\n\nActs as a foreign key to the discussionboard_comments table, enforcing normalized snapshot history in the system design."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the user who authored the comment at the time of this snapshot.\n\nThis field allows for historical authorship tracking and supports accurate audit trail reporting when comments are edited or transferred."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"ID of the post under which this comment (snapshot) is associated.\n\nSupports context linking even if post/comment relationships evolve over time."},"body":{"type":"string","description":"Immutable historical copy of the comment body at this version.\n\nStores the full comment content for rollback, moderation review, and audit. Preserves original wording even if edited later."},"version":{"type":"integer","description":"Snapshot version number assigned per comment (monotonically increasing per edit event).\n\nAllows for traceable edit history, recovery, and version sequencing. Based on strict normalization rules in DB design."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Timestamp when this snapshot was created.\n\nUsed for ordered audit, rollback recovery, and regulatory forensics."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_post_id","body","version","snapshot_created_at"],"description":"Comment Snapshot entity representing an immutable, versioned record of a comment at a point in time.\n\nDefined per the discussionboard_comment_snapshots Prisma schema model, supporting rollback, edit history, and audit trails in discussion moderation workflows."},"IDiscussionboardCommentSnapshot.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Parent comment's ID, to filter snapshots belonging to a given comment."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member ID for filtering snapshots by author at the time of version creation."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Post's ID, allowing filtration of versions for snapshots relating to a specific post."},"version":{"type":"integer","description":"Version number to filter for a specific edit version."},"snapshot_created_at_from":{"type":"string","format":"date-time","description":"Filter lower bound for snapshot creation datetime."},"snapshot_created_at_to":{"type":"string","format":"date-time","description":"Filter upper bound for snapshot creation datetime."}},"required":[],"description":"Request type for searching/filtering comment snapshot records in the discussionboard_comment_snapshots table.\n\nAllows flexible filtering by comment, author, post, version, or created at window, as per API and UI needs."},"IPageIDiscussionboardCommentSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentSnapshot"}}},"required":["pagination","data"],"description":"Paginated result container for comment snapshot records.\n\nWraps a list of snapshots with standard pagination metadata, suitable for advanced UI browses and audits."},"IDiscussionboardCommentSnapshot.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Revised version of the comment body for the updated snapshot.\n\nContent must comply with community guidelines and moderation rules."},"version":{"type":"integer","description":"Manually set or corrected version number for rare admin/appeal workflows only."}},"required":[],"description":"Update type for modifying allowed mutable fields in a comment snapshot record.\n\nTypically only body and, rarely, version may change. For admin/appeal or audit-correction workflows, not user-level edits."},"IDiscussionboardCommentVote.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"ID of the comment being voted on."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Voting member's ID, referencing the actor of this upvote/downvote."},"vote_type":{"type":"string","description":"Vote value ('up', 'down', or other domain-defined string values)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the vote was cast."}},"required":["discussionboard_comment_id","discussionboard_member_id","vote_type","created_at"],"description":"Create type for registering a comment vote in the discussionboard_comment_votes table.\n\nIncludes all required atomic columns as per schema, supporting voting interactions and analytics workflows."},"IDiscussionboardCommentVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Comment vote entity's unique primary key per schema."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"ID of the comment this vote applies to."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member casting the vote."},"vote_type":{"type":"string","description":"The type/direction of the vote (domain value)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of vote creation for analytics/audit."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for when the vote record was last updated, e.g., vote toggles."},{"type":"null"}],"description":"Nullable timestamp for when the vote record was last updated, e.g., vote toggles."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","vote_type","created_at"],"description":"Comment Vote entity corresponding to a normalized voting record per comment per member.\n\nMatches the discussionboard_comment_votes Prisma schema for capturing and reviewing upvote/downvote actions."},"IDiscussionboardCommentVote.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter by comment ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter by member ID who voted."},"vote_type":{"type":"string","description":"Filter by direction/type of vote."},"created_at_from":{"type":"string","format":"date-time","description":"Lower datetime bound for creation filter."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound for vote creation."}},"required":[],"description":"Search/filter request object for bulk comment votes queries.\n\nSupports filtering on comment, voting member, type, and time range."},"IPageIDiscussionboardCommentVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentVote"}}},"required":["pagination","data"],"description":"Paginated container for lists of comment votes.\n\nIncludes pagination meta and array of comment vote rows for analytics and admin tooling."},"IDiscussionboardCommentVote.IUpdate":{"type":"object","properties":{"vote_type":{"type":"string","description":"Updated vote value (e.g., 'up', 'down', 'none' to remove vote)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of vote update (e.g., change or retraction)."}},"required":[],"description":"Update structure for editing a comment vote record.\n\nFields may include vote_type and updated_at for toggling/updating."},"IDiscussionboardCommentReport.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment's UUID being reported."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Reporting member's UUID (actor)."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Type/category of the report (references discussionboard_report_types)."},"reason":{"type":"string","description":"Human-readable explanation of the report (required)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of report creation."}},"required":["discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason","created_at"],"description":"Type for submitting a new comment report according to schema normalization rules.\n\nAll fields required for audit, moderation workflow, and compliance logging."},"IDiscussionboardCommentReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the comment report record."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment's UUID as per report."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Reporting member's UUID."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Type/category of report filed (foreign key)."},"reason":{"type":"string","description":"Report explanation supplied by member."},"created_at":{"type":"string","format":"date-time","description":"Datetime of report creation (audit field)."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason","created_at"],"description":"Comment Report entity, atomic event documenting a moderation report against a comment.\n\nDirectly matches the Prisma table and moderation workflow for audit/review use."},"IDiscussionboardCommentReport.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter by target comment ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter by reporter member UUID."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Filter by report type/category."},"created_at_from":{"type":"string","format":"date-time","description":"Report creation lower datetime bound."},"created_at_to":{"type":"string","format":"date-time","description":"Report creation upper datetime bound."},"reason":{"type":"string","description":"Search by substring or keyword in the reason/explanation text."}},"required":[],"description":"Search/filter request for comment reports, to support moderation queue and analytics tools.\n\nEnables efficient review/filtering by moderators/admins based on atomic report columns."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Number of records per page."},"records":{"type":"integer","description":"Total record count in the database."},"pages":{"type":"integer","description":"Total number of pages available."}},"required":["current","limit","records","pages"],"description":"Pagination metadata for paginated responses.\n\nStandard structure for current page, page size, total records, and page count."}}},"completed":12,"total":191,"step":0,"created_at":"2025-07-25T05:16:20.309Z"},"tokenUsage":{"facade":{"aggregate":{"total":1177962,"input":{"total":1100251,"cached":0},"output":{"total":77711,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1177962,"input":{"total":1100251,"cached":0},"output":{"total":77711,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1177962,"input":{"total":1100251,"cached":0},"output":{"total":77711,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1177962,"input":{"total":1100251,"cached":0},"output":{"total":77711,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardThreadTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for each thread tag assignment.\n\nThis field is a UUID as mandated by the Prisma schema and is used to guarantee uniqueness and referential integrity for each tagging event."},"thread_id":{"type":"string","format":"uuid","description":"Thread reference. Points to the thread this tag assignment is linked to as per database normalization.\n\nMust match a valid thread's UUID from the discussionboard_threads table."},"assigned_at":{"type":"string","format":"date-time","description":"Assignment timestamp, indicating when the tag was applied to the thread. Facilitates time-based analytics and moderation workflows.\n\nMust be an ISO 8601 timestamp."},"removed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Removal timestamp. If set, represents the point in time when this tag assignment was removed from the thread. Null if tag is still assigned.\n\nNullable for audit and historical reference."},{"type":"null","format":"date-time","description":"Removal timestamp. If set, represents the point in time when this tag assignment was removed from the thread. Null if tag is still assigned.\n\nNullable for audit and historical reference."}],"description":"Removal timestamp. If set, represents the point in time when this tag assignment was removed from the thread. Null if tag is still assigned.\n\nNullable for audit and historical reference."}},"required":["id","thread_id","assigned_at"],"description":"Thread Tag Assignment entity representing the M:N relationship between threads and tags for discoverability and content organization.\n\nEvery instance of this entity records a single assignment or removal event of a tag to a given thread and supports robust audit capabilities. All fields align strictly with the discussionboard_thread_tags table in the Prisma schema."},"IPageIDiscussionboardThreadTag.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number, defaults to 1 if not specified."},{"type":"null","description":"Page number, defaults to 1 if not specified."}],"description":"Page number, defaults to 1 if not specified."},"limit":{"oneOf":[{"type":"integer","description":"Number of records per page, defaults to 100 if not specified."},{"type":"null","description":"Number of records per page, defaults to 100 if not specified."}],"description":"Number of records per page, defaults to 100 if not specified."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally filter by thread UUID."},{"type":"null","format":"uuid","description":"Optionally filter by thread UUID."}],"description":"Optionally filter by thread UUID."},"assigned_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of assignment timestamp range for filtering."},{"type":"null","format":"date-time","description":"Start of assignment timestamp range for filtering."}],"description":"Start of assignment timestamp range for filtering."},"assigned_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of assignment timestamp range for filtering."},{"type":"null","format":"date-time","description":"End of assignment timestamp range for filtering."}],"description":"End of assignment timestamp range for filtering."}},"description":"Request parameters for paginating and searching thread tag assignments.\n\nSupports filters for thread ID and assignment timestamps, as well as standard pagination controls.","required":[]},"IPageIDiscussionboardThreadTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreadTag"},"description":"Array of thread tag assignment records as defined by IDiscussionboardThreadTag."}},"required":["pagination","data"],"description":"A paginated result object for thread tag assignments, following IPage envelope conventions."},"IDiscussionboardThreadTag.IUpdate":{"type":"object","properties":{"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread reference UUID. Can be updated if re-tagging is allowed. Nullable if not provided."},{"type":"null","format":"uuid","description":"Thread reference UUID. Can be updated if re-tagging is allowed. Nullable if not provided."}],"description":"Thread reference UUID. Can be updated if re-tagging is allowed. Nullable if not provided."},"assigned_at":{"oneOf":[{"type":"string","format":"date-time","description":"The updated assignment timestamp for this record, or null to leave unchanged."},{"type":"null","format":"date-time","description":"The updated assignment timestamp for this record, or null to leave unchanged."}],"description":"The updated assignment timestamp for this record, or null to leave unchanged."},"removed_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, represents the timestamp when the tag was removed. Null for still-active assignments."},{"type":"null","format":"date-time","description":"If set, represents the timestamp when the tag was removed. Null for still-active assignments."}],"description":"If set, represents the timestamp when the tag was removed. Null for still-active assignments."}},"description":"Fields for updating a thread tag assignment. All properties are optional except for the record identifier in API path.\n\nOnly schema-defined fields may be altered.","required":[]},"IDiscussionboardPost.ICreate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Associated thread's UUID. Links the post to the thread for content grouping."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the author member creating the post."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of the board where this post is being made. Enforced for topic classification."},"title":{"type":"string","description":"The title or headline for the post, for clarity and discoverability."},"body":{"type":"string","description":"Main post content. Contains full text of the discussion or analysis."},"is_deleted":{"type":"boolean","description":"Soft-deletion flag. Must be false upon creation. Used for audit and moderation retention."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this post (usually set by backend at record insertion)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when post was last updated (equal to created_at on insert)."}},"required":["discussionboard_thread_id","discussionboard_member_id","discussionboard_board_id","title","body","is_deleted","created_at","updated_at"],"description":"Request body for creating a new discussion post as per the normalized schema.\n\nAll required fields match the atomic columns of discussionboard_posts with no extra fields permitted."},"IDiscussionboardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique post identifier (primary key)."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"UUID of the parent thread to which this post belongs."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who authored this post."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of the board where this post appears."},"title":{"type":"string","description":"Headline/title of the post, for UI and search."},"body":{"type":"string","description":"The main text content for the discussion post."},"is_deleted":{"type":"boolean","description":"Boolean soft-delete flag. True means the post is logically deleted but retained for audit."},"created_at":{"type":"string","format":"date-time","description":"When this post was first created."},"updated_at":{"type":"string","format":"date-time","description":"Last time this post was updated."}},"required":["id","discussionboard_thread_id","discussionboard_member_id","discussionboard_board_id","title","body","is_deleted","created_at","updated_at"],"description":"A discussion board post object as returned from the back end, containing only schema-defined columns.\n\nOmitted properties have no presence in the underlying table. All values are fully atomic and non-derived."},"IPageIDiscussionboardPost.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for results, 1-based. Null for default (1)."},{"type":"null","description":"Page number for results, 1-based. Null for default (1)."}],"description":"Page number for results, 1-based. Null for default (1)."},"limit":{"oneOf":[{"type":"integer","description":"Max number of records per page. Null/restores to default."},{"type":"null","description":"Max number of records per page. Null/restores to default."}],"description":"Max number of records per page. Null/restores to default."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally filter to only posts in the specified thread (UUID)."},{"type":"null","format":"uuid","description":"Optionally filter to only posts in the specified thread (UUID)."}],"description":"Optionally filter to only posts in the specified thread (UUID)."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter to posts authored by this member UUID."},{"type":"null","format":"uuid","description":"Filter to posts authored by this member UUID."}],"description":"Filter to posts authored by this member UUID."},"is_deleted":{"oneOf":[{"type":"boolean","description":"Filter soft-deleted (true), active (false), or all (null)."},{"type":"null","description":"Filter soft-deleted (true), active (false), or all (null)."}],"description":"Filter soft-deleted (true), active (false), or all (null)."},"title_query":{"oneOf":[{"type":"string","description":"Optional partial match filter for post titles (UI fulltext/trgm search)."},{"type":"null","description":"Optional partial match filter for post titles (UI fulltext/trgm search)."}],"description":"Optional partial match filter for post titles (UI fulltext/trgm search)."}},"description":"Request body for searching and paginating post objects as defined.\n\nAllows filtering by thread, member, is_deleted, or using title substrings.","required":[]},"IPageIDiscussionboardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPost"},"description":"List of post records in the result set."}},"required":["pagination","data"],"description":"Paginated wrapper for discussion board post retrieval results."},"IDiscussionboardPost.IUpdate":{"type":"object","properties":{"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread reference UUID. To move this post to another thread; null leaves thread unchanged."},{"type":"null","format":"uuid","description":"Thread reference UUID. To move this post to another thread; null leaves thread unchanged."}],"description":"Thread reference UUID. To move this post to another thread; null leaves thread unchanged."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board reference UUID. If changing boards; null for no change."},{"type":"null","format":"uuid","description":"Board reference UUID. If changing boards; null for no change."}],"description":"Board reference UUID. If changing boards; null for no change."},"title":{"oneOf":[{"type":"string","description":"Update for post title; null leaves unchanged."},{"type":"null","description":"Update for post title; null leaves unchanged."}],"description":"Update for post title; null leaves unchanged."},"body":{"oneOf":[{"type":"string","description":"Update for post body text."},{"type":"null","description":"Update for post body text."}],"description":"Update for post body text."},"is_deleted":{"oneOf":[{"type":"boolean","description":"If true sets soft-delete flag; false or null for not deleted."},{"type":"null","description":"If true sets soft-delete flag; false or null for not deleted."}],"description":"If true sets soft-delete flag; false or null for not deleted."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Explicit timestamp for update. Usually set to now."},{"type":"null","format":"date-time","description":"Explicit timestamp for update. Usually set to now."}],"description":"Explicit timestamp for update. Usually set to now."}},"description":"Update operation object for discussion board posts. All values optional, only schema fields accepted. Omitted if null.","required":[]},"IPostSnapshot.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Primary key of the post from which the snapshot is being taken."},"editor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the member making the edit (nullable for system edits/deleted members)."},{"type":"null","format":"uuid","description":"UUID of the member making the edit (nullable for system edits/deleted members)."}],"description":"UUID of the member making the edit (nullable for system edits/deleted members)."},"title":{"type":"string","description":"Snapshot of the title at time of edit/version save."},"body":{"type":"string","description":"Snapshot of the post body at edit/version save."},"taken_at":{"type":"string","format":"date-time","description":"The timestamp when this snapshot is recorded."}},"required":["discussionboard_post_id","title","body","taken_at"],"description":"Object for creating a new post snapshot as per the audit/versioning policy.\n\nCaptures all relevant fields. 'editor_member_id' is optional (nullable)."},"IPostSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for this post snapshot."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"ID of post being snapshotted."},"editor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Editor/author at time of snapshot creation (nullable for system edits/erased author)."},{"type":"null","format":"uuid","description":"Editor/author at time of snapshot creation (nullable for system edits/erased author)."}],"description":"Editor/author at time of snapshot creation (nullable for system edits/erased author)."},"title":{"type":"string","description":"Post title at the version stored in this snapshot."},"body":{"type":"string","description":"Body content at point of snapshot capture."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp when the version was created."}},"required":["id","discussionboard_post_id","title","body","taken_at"],"description":"A historic point-in-time snapshot of a discussion post, capturing edit/version/audit circumstances. Follows precise atomic structure as per the schema."},"IPostSnapshot.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for results (pagination). Default: 1."},{"type":"null","description":"Page number for results (pagination). Default: 1."}],"description":"Page number for results (pagination). Default: 1."},"limit":{"oneOf":[{"type":"integer","description":"Max results per page. Default per API."},{"type":"null","description":"Max results per page. Default per API."}],"description":"Max results per page. Default per API."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally limit to snapshots for a single post."},{"type":"null","format":"uuid","description":"Optionally limit to snapshots for a single post."}],"description":"Optionally limit to snapshots for a single post."},"editor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally limit to edits by a single editor/member."},{"type":"null","format":"uuid","description":"Optionally limit to edits by a single editor/member."}],"description":"Optionally limit to edits by a single editor/member."},"taken_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Range filter: earliest (inclusive) version timestamp."},{"type":"null","format":"date-time","description":"Range filter: earliest (inclusive) version timestamp."}],"description":"Range filter: earliest (inclusive) version timestamp."},"taken_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Range filter: latest (inclusive) version timestamp."},{"type":"null","format":"date-time","description":"Range filter: latest (inclusive) version timestamp."}],"description":"Range filter: latest (inclusive) version timestamp."}},"description":"Request object for listing and searching post snapshots. Supports pagination and filtering by post, editor, or version date.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number, starting from 1."},"limit":{"type":"integer","description":"Maximum records per page."},"records":{"type":"integer","description":"Total available records in database."},"pages":{"type":"integer","description":"Total pages available for record set."}},"required":["current","limit","records","pages"],"description":"Pagination metadata for page-based API responses. Follows IPage envelope pattern."}}},"completed":35,"total":191,"step":0,"created_at":"2025-07-25T05:16:30.697Z"},"tokenUsage":{"facade":{"aggregate":{"total":1369997,"input":{"total":1286605,"cached":0},"output":{"total":83392,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1369997,"input":{"total":1286605,"cached":0},"output":{"total":83392,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1369997,"input":{"total":1286605,"cached":0},"output":{"total":83392,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1369997,"input":{"total":1286605,"cached":0},"output":{"total":83392,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"null":{"type":"object","properties":{},"description":"Represents an empty object or lack of content in a response or request body. Used in endpoints where no body is required or the response is explicitly empty.","required":[]},"IPostReference.ICreate":{"type":"object","properties":{"source_post_id":{"type":"string","format":"uuid","description":"The UUID of the post that is creating the reference. Required for establishing the source side of the relationship in the post reference table."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the referenced (target) post. If referencing a thread instead, this can be null. This field is optional; used for direct post-to-post references."},{"type":"null","format":"uuid","description":"The UUID of the referenced (target) post. If referencing a thread instead, this can be null. This field is optional; used for direct post-to-post references."}],"description":"The UUID of the referenced (target) post. If referencing a thread instead, this can be null. This field is optional; used for direct post-to-post references."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the referenced (target) thread. Null when only referencing a post. Used to reference an entire thread from a post when appropriate."},{"type":"null","format":"uuid","description":"The UUID of the referenced (target) thread. Null when only referencing a post. Used to reference an entire thread from a post when appropriate."}],"description":"The UUID of the referenced (target) thread. Null when only referencing a post. Used to reference an entire thread from a post when appropriate."},"reference_type":{"type":"string","description":"A string indicating the type of reference (e.g., 'post', 'thread', 'comment'). This informs the system of the relationship's nature. Always required."}},"required":["source_post_id","reference_type"],"description":"Schema for creating a new entry in the post reference table. Used for establishing a cross-reference between posts or between a post and a thread. All references must correspond to actual other posts or threads."},"IPostReference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The primary key UUID of the post reference record. Unique identifier for the reference relationship."},"source_post_id":{"type":"string","format":"uuid","description":"The UUID of the source post (the referencing side) in the discussion board. Corresponds directly to the source_post_id column in the schema."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the target post being referenced. Null when referencing a thread. Optional field depending on the reference type."},{"type":"null","format":"uuid","description":"The UUID of the target post being referenced. Null when referencing a thread. Optional field depending on the reference type."}],"description":"The UUID of the target post being referenced. Null when referencing a thread. Optional field depending on the reference type."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the target thread being referenced. Null when referencing a post. Optional, used for references to threads."},{"type":"null","format":"uuid","description":"The UUID of the target thread being referenced. Null when referencing a post. Optional, used for references to threads."}],"description":"The UUID of the target thread being referenced. Null when referencing a post. Optional, used for references to threads."},"reference_type":{"type":"string","description":"Indicates the type of reference made by the source post. Ex: 'post', 'thread', 'comment'. Directly stored in the reference_type column."}},"required":["id","source_post_id","reference_type"],"description":"A cross-reference entity between posts (and/or threads) within the discussion board. Allows tracking citations, mentions, or related content. All fields are persisted in the post references table, with unique ID and either post or thread target set. Used in citation linking and navigation."},"IPostReference.IRequest":{"type":"object","properties":{"source_post_id":{"type":"string","format":"uuid","description":"Optional UUID filter to find references by source post."},"target_post_id":{"type":"string","format":"uuid","description":"Optional UUID filter for references targeting this post."},"target_thread_id":{"type":"string","format":"uuid","description":"Optional UUID filter for references targeting this thread."},"reference_type":{"type":"string","description":"Type filter to restrict results to references of a specific type ('post', 'thread', etc.)."}},"description":"Request body schema for filtering or searching post references. Used for paginated and parameterized listing of cross-reference records from source or target post/thread.","required":[]},"IPageIPostReference":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostReference"},"description":"Array of post reference records returned for the current page."}},"required":["pagination","data"],"description":"Paginated container for a list of PostReference entities, following the standard IPage<T> interface. Includes pagination info and an array of post reference objects."},"IPostReference.IUpdate":{"type":"object","properties":{"source_post_id":{"type":"string","format":"uuid","description":"(Optional) Update the source post reference if changing the referencing post."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Update to another referenced post's UUID; can be null if referencing a thread."},{"type":"null","format":"uuid","description":"(Optional) Update to another referenced post's UUID; can be null if referencing a thread."}],"description":"(Optional) Update to another referenced post's UUID; can be null if referencing a thread."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Update to another referenced thread's UUID; can be null if only referencing a post."},{"type":"null","format":"uuid","description":"(Optional) Update to another referenced thread's UUID; can be null if only referencing a post."}],"description":"(Optional) Update to another referenced thread's UUID; can be null if only referencing a post."},"reference_type":{"type":"string","description":"(Optional) Update the type of reference relationship."}},"description":"Schema for updating fields in a post reference record. Used by moderators or system processes for correcting or altering content relationships and citations.","required":[]},"IComment.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post to which this comment is being added. Required to associate comment with its parent post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member creating the comment. Must match an existing member record and is required for authorship tracking."},"body":{"type":"string","description":"The main textual content of the comment. Non-nullable and required for all comments."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Allows this comment to be a reply to another comment. Supply parent comment's UUID. Null for top-level comments."},{"type":"null","format":"uuid","description":"Allows this comment to be a reply to another comment. Supply parent comment's UUID. Null for top-level comments."}],"description":"Allows this comment to be a reply to another comment. Supply parent comment's UUID. Null for top-level comments."}},"required":["discussionboard_post_id","discussionboard_member_id","body"],"description":"Request payload for creating a new comment on a post or as a reply to another comment. All provided fields must match schema types; parent_id is optional for replies."},"IComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the comment record. Unique per comment."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post this comment belongs to."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who authored the comment."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the comment is a reply, this is the UUID of the parent comment; null for top-level comments."},{"type":"null","format":"uuid","description":"If the comment is a reply, this is the UUID of the parent comment; null for top-level comments."}],"description":"If the comment is a reply, this is the UUID of the parent comment; null for top-level comments."},"body":{"type":"string","description":"The content of the comment at its creation or most recent edit."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was first created, in ISO 8601 format."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for the latest comment update (edit). Null if the comment hasn't been edited."},{"type":"null","format":"date-time","description":"Timestamp for the latest comment update (edit). Null if the comment hasn't been edited."}],"description":"Timestamp for the latest comment update (edit). Null if the comment hasn't been edited."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable. Soft-deletion marker; when not null, the comment is considered deleted. Used for moderation/audit workflows."},{"type":"null","format":"date-time","description":"Nullable. Soft-deletion marker; when not null, the comment is considered deleted. Used for moderation/audit workflows."}],"description":"Nullable. Soft-deletion marker; when not null, the comment is considered deleted. Used for moderation/audit workflows."}},"required":["id","discussionboard_post_id","discussionboard_member_id","body","created_at"],"description":"A comment entity under a post. Contains author, posting, and hierarchy info. Soft-deleted comments are captured by non-null deleted_at. Timestamp fields audit lifecycle and allow moderation tracking."},"IComment.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Filter for comments of a particular post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter for comments authored by a specific member."},"parent_id":{"type":"string","format":"uuid","description":"Filter for replies to a specific comment."},"body":{"type":"string","description":"Textual search for comment content, supports partial matches."},"created_at_from":{"type":"string","format":"date-time","description":"Lower bound for creation date filtering (ISO 8601)."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound for creation date filtering (ISO 8601)."}},"description":"Request body for advanced searching/filtering of comments. Supports filtering by parent post, member, parent comment, content, and creation date range.","required":[]},"IPageIComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IComment"},"description":"Array of comment records for the current page."}},"required":["pagination","data"],"description":"Standard paginated result wrapper for comment entities. Includes pagination info and array of comments as per IPage<T> interface."},"IComment.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Updates the comment content; new textual value replaces the old one."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Change the parent comment, for moving or rethreading; null for top-level."},{"type":"null","format":"uuid","description":"(Optional) Change the parent comment, for moving or rethreading; null for top-level."}],"description":"(Optional) Change the parent comment, for moving or rethreading; null for top-level."}},"description":"Schema for modifying existing comment records. Permits updates to comment body and reply threading parent; used for member edits or moderation adjustments.","required":[]},"IDiscussionboardCommentSnapshot.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"UUID of the comment for which this snapshot is created. Must reference an existing comment record."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member whose version of the comment is being recorded (author at time of snapshot)."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the parent post at the time of this snapshot. For audit and context."},"body":{"type":"string","description":"Snapshot of the comment's body content at the time of this version."},"version":{"type":"integer","description":"Monotonic version number for snapshots of the same comment. Increments per edit/version event."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Timestamp when this comment snapshot was created."}},"required":["discussionboard_comment_id","discussionboard_member_id","discussionboard_post_id","body","version","snapshot_created_at"],"description":"Payload for creating a new comment snapshot record. Stores immutable point-in-time version of a user's comment for rollback, audit, and moderation review."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Limit of records per page, default is 100."},"records":{"type":"integer","description":"Total records available."},"pages":{"type":"integer","description":"Total number of pages available."}},"required":["current","limit","records","pages"],"description":"Page information object for paginated query responses, per IPage<T> convention."}}},"completed":47,"total":191,"step":0,"created_at":"2025-07-25T05:16:32.439Z"},"tokenUsage":{"facade":{"aggregate":{"total":1465394,"input":{"total":1379748,"cached":0},"output":{"total":85646,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1465394,"input":{"total":1379748,"cached":0},"output":{"total":85646,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1465394,"input":{"total":1379748,"cached":0},"output":{"total":85646,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1465394,"input":{"total":1379748,"cached":0},"output":{"total":85646,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardBoardSetting.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board reference for this settings row's ID. Each board has exactly one associated settings record; enforced via unique index (1:1). This UUID points to the discussionboard_boards table and ensures settings are strictly board-scoped.\n\nReferenced from 'discussionboard_board_settings' in the Boards domain. Example: '9323dc7d-550f-4fbc-b254-9e89d2794217'."},"is_locked":{"type":"boolean","description":"Boolean flag indicating whether the board is currently read-only (locked down for maintenance or moderation). Implements moderation/admin lockdown logic. 3NF: atomic flag per board. Example: false."},"require_approval_for_posting":{"type":"boolean","description":"Indicates if new threads/posts require moderator/admin approval before publishing. Implements requirements for strict moderation boards. Example: true."},"max_posts_per_hour":{"type":"integer","description":"Max allowed new posts per user per hour for rate limiting and anti-spam. Example: 10."},"allow_anonymous_viewing":{"type":"boolean","description":"If true, this board can be browsed by non-members (logged-out users). Controls accessibility and anonymous content consumption policies."},"allow_file_uploads":{"type":"boolean","description":"Indicates whether users may attach/upload files in this board. Supports extended board configuration and compliance workflows."}},"required":["discussionboard_board_id","is_locked","require_approval_for_posting","max_posts_per_hour","allow_anonymous_viewing","allow_file_uploads"],"description":"Schema for creating a new discussion board's settings record. All fields are required, correspond directly to the discussionboard_board_settings Prisma schema columns, and follow atomic, 3NF rules. This type supports board-specific configuration, feature toggling, and moderation control as described in business rules."},"IDiscussionboardBoardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the board settings record. Primary key for each row in discussionboard_board_settings."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"The board's UUID this settings entry configures, as defined in Boards domain. Each board has exactly one such record."},"is_locked":{"type":"boolean","description":"Whether this board is read-only and locked due to moderation or system maintenance. True means locked, false means unlocked."},"require_approval_for_posting":{"type":"boolean","description":"If true, new threads/posts in this board require moderator/admin approval before publication, supporting high-moderation workflows."},"max_posts_per_hour":{"type":"integer","description":"Anti-spam setting for maximum allowed posts per user per hour. 0 or null implies no restriction."},"allow_anonymous_viewing":{"type":"boolean","description":"If true, allows non-members to browse this board. Controls anonymous viewing permissions and discoverability settings for public content."},"allow_file_uploads":{"type":"boolean","description":"Enables file attachments on posts within this board. True enables uploads, false disables."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this board settings record was created, for audit trail and historical analysis."},"updated_at":{"type":"string","format":"date-time","description":"When this settings record was last updated, supporting audit and forensics."}},"required":["id","discussionboard_board_id","is_locked","require_approval_for_posting","max_posts_per_hour","allow_anonymous_viewing","allow_file_uploads","created_at","updated_at"],"description":"Complete schema for a discussionboard board settings record. Contains all atomic config options for a board, as described by Prisma schema and business requirements. Fields include locks, moderation approval flags, posting limits, and feature toggles. Used for GET/PUT/response operations."},"IDiscussionboardBoardSetting.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter by the board's UUID for settings retrieval. References discussionboard_boards.id."},"is_locked":{"type":"boolean","description":"Optionally filter results by locked/unlocked board setting."},"require_approval_for_posting":{"type":"boolean","description":"Optionally filter by moderation approval requirement flag."},"max_posts_per_hour":{"type":"integer","description":"Optionally filter boards by maximum posts per hour setting."},"allow_anonymous_viewing":{"type":"boolean","description":"Whether to filter by the anonymous viewing capability."},"allow_file_uploads":{"type":"boolean","description":"Filter settings records by file upload permission."},"page":{"type":"integer","description":"Pagination: Which page of results to retrieve (1-based index)."},"limit":{"type":"integer","description":"Pagination: How many records per page to fetch."}},"description":"Request/filter options for finding or searching board settings records. Maps directly to column filters and pagination parameters for admin dashboard or integration API.","required":[]},"IPageIDiscussionboardBoardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardSetting"},"description":"Array of discussionboard board settings records returned for the given page and search/query parameters."}},"required":["pagination","data"],"description":"Paginated response object containing discussionboard board settings records and standard page metadata. Used for PATCH-style advanced index/search operations. The data array always contains fully populated board settings objects."},"IDiscussionboardBoardSetting.IUpdate":{"type":"object","properties":{"is_locked":{"type":"boolean","description":"Set the board as locked/unlocked (read-only) per moderation or maintenance workflows."},"require_approval_for_posting":{"type":"boolean","description":"Enable or disable requirement for moderator/admin approval on new threads or posts."},"max_posts_per_hour":{"type":"integer","description":"Change the rate limit for posts per user per hour."},"allow_anonymous_viewing":{"type":"boolean","description":"Set whether non-members can view this board."},"allow_file_uploads":{"type":"boolean","description":"Enable or disable file upload attachments for the board."}},"description":"Update schema for discussionboard_board_settings. All properties are optional and map directly to updatable config columns for PATCH/PUT operations. Does not include 'id', 'discussionboard_board_id', 'created_at', or 'updated_at' fields as these are immutable or handled by system.","required":[]},"IDiscussionboardBoardModerator.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"The unique identifier for the discussion board to which this moderator will be assigned. Must be an existing board within the platform."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"The unique identifier of the moderator being assigned to the board. Must reference a current moderator as per the discussionboard_moderators table."},"is_primary":{"type":"boolean","description":"Whether this moderator is a primary (head/lead) moderator for the board. True means lead, false for additional moderators."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the moderator was added to the board. Used for audit trails and assignment history."}},"required":["discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Payload for adding a moderator to a board, strictly corresponding to columns in discussionboard_board_moderators table. Used in POST endpoint; all fields are required for assignment creation. Uniqueness constraints (one per moderator/board pair) enforced by schema constraints."},"IDiscussionboardBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for board-moderator assignment record."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of the managed board, referencing discussionboard_boards."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"UUID of the assigned moderator, referencing discussionboard_moderators table."},"is_primary":{"type":"boolean","description":"Designates whether the moderator is the lead/primary moderator for this board."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp for when the moderator was assigned to this board."}},"required":["id","discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Schema for a complete board-moderator assignment object in the discussionboard_board_moderators table. Used for display, edit, detail, and audit purposes."},"IDiscussionboardBoardModerators.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Search or filter board-moderator assignments for a given board ID."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"Search/filter assignments by moderator's UUID reference."},"is_primary":{"type":"boolean","description":"Filter assignments by lead/primary moderator flag."},"joined_at":{"type":"string","format":"date-time","description":"Filter assignments by join/assignment timestamp."},"page":{"type":"integer","description":"Pagination parameter for current page number."},"limit":{"type":"integer","description":"Pagination: Number of results per page."}},"description":"Advanced search/query request for the board-moderator assignments. Used for admin dashboards or mod audit systems.","required":[]},"IPageIDiscussionboardBoardModerators":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardModerators"},"description":"Paginated data for board-moderator assignment objects."}},"required":["pagination","data"],"description":"Paginated envelope for board-moderator assignments, returned by PATCH-style list/search endpoints."},"IDiscussionboardBoardModerators":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the assignment record in board-moderators M:N table."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board UUID for which this moderator is assigned."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"Moderator UUID as assigned to the board."},"is_primary":{"type":"boolean","description":"Flag for whether this moderator is the board's lead/primary moderator."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp for when the moderator joined/was assigned to the board."}},"required":["id","discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Board-moderator assignment entity with atomic, schema-mandated fields. Used in paginated responses and audit records."},"IDiscussionboardBoardModerators.IUpdate":{"type":"object","properties":{"is_primary":{"type":"boolean","description":"Set/modify the primary/lead-mod flag for this assignment."},"joined_at":{"type":"string","format":"date-time","description":"Update the assigned/joined timestamp if required for audit/history/tracking."}},"description":"Request body for PATCH/PUT updates of board-moderator assignment entities in the discussionboard_board_moderators table. Allows updating modifiable assignment flags, but not PK or relational IDs.","required":[]},"ISuccessResponse":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates if the operation completed successfully. True for OK, false otherwise."},"message":{"type":"string","description":"Optional textual status/confirmation or error information returned by the operation."}},"required":["success"],"description":"Standard API operation result object indicating success status and optional explanatory message for the request."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Number of records per page, used for pagination. Default is usually 100."},"records":{"type":"integer","format":"uint32","description":"Total number of records available."},"pages":{"type":"integer","format":"uint32","description":"Total number of result pages."}},"required":["current","limit","records","pages"],"description":"Metadata for paginated query results, providing client navigation and record metrics for pagination UI/logic."}}},"completed":59,"total":191,"step":0,"created_at":"2025-07-25T05:16:34.884Z"},"tokenUsage":{"facade":{"aggregate":{"total":1561199,"input":{"total":1472930,"cached":0},"output":{"total":88269,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1561199,"input":{"total":1472930,"cached":0},"output":{"total":88269,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1561199,"input":{"total":1472930,"cached":0},"output":{"total":88269,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1561199,"input":{"total":1472930,"cached":0},"output":{"total":88269,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardChannel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique channel code for reference in API/config/logic. Example: 'pol', 'econ'. Channel codes must be unique, short, and facilitate lookup or automation as described in the Prisma schema for 'discussionboard_channels'.\n\nReferenced in UI and logic for organization and navigation. Must be provided explicitly at creation."},"name":{"type":"string","description":"Channel name for display and navigation. Example: 'Politics'. Human-readable label, not derived. Used in forum navigation and UI labeling per schema comments. Required for creation."},"description":{"oneOf":[{"type":"string","description":"Expanded channel explanation for user-facing UI and accessibility.\n\nOptional, can give context to UI or help clarify a channel's specific purpose. May be set to null. Matches Prisma column description."},{"type":"null","description":"Expanded channel explanation for user-facing UI and accessibility.\n\nOptional, can give context to UI or help clarify a channel's specific purpose. May be set to null. Matches Prisma column description."}],"description":"Expanded channel explanation for user-facing UI and accessibility.\n\nOptional, can give context to UI or help clarify a channel's specific purpose. May be set to null. Matches Prisma column description."},"position":{"type":"integer","description":"Channel order in UI or navigation. Used for manual arrangement of channels in administrator UI. Defined as atomic (not calculated), per Prisma schema field comment."},"active":{"type":"boolean","description":"Is channel active/visible? Enables archiving/soft delete logic as per requirements. Not derived, atomic per schema."}},"required":["code","name","position","active"],"description":"Channel creation request for the discussionboard_channels entity.\n\nBased on the Prisma model comments: used to organize top-level discussion boards (such as 'Politics', 'Economics'). Requires unique code, label, optional description, order/position, and active flag. No extraneous properties allowed."},"IDiscussionboardChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique channel row identifier, as defined in the Prisma schema for 'discussionboard_channels'.\n\nRequired for entity retrieval, linking, and audit."},"code":{"type":"string","description":"Unique channel code for reference in API/config/logic. Must be unique and non-null as per schema. Used for programmatic lookup and organization."},"name":{"type":"string","description":"Human-readable channel name label for navigation and display."},"description":{"oneOf":[{"type":"string","description":"Optional expanded channel explanation, used for accessibility and UI tooltips."},{"type":"null","description":"Optional expanded channel explanation, used for accessibility and UI tooltips."}],"description":"Optional expanded channel explanation, used for accessibility and UI tooltips."},"position":{"type":"integer","description":"UI/manual ordering integer for channels. Lower values generally appear first; not computed."},"active":{"type":"boolean","description":"Indicates if this channel is currently active/visible for new content. Implements archiving and soft-delete logic (not deletion)."},"created_at":{"type":"string","format":"date-time","description":"Channel creation timestamp for audit, order, and compliance logging. ISO 8601 UTC timestamp from Prisma schema."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp for channel entity. Supports audit and change tracking. Also ISO 8601 UTC."}},"required":["id","code","name","position","active","created_at","updated_at"],"description":"A channel in the forum platform (e.g., 'Politics', 'Economics'). Represents a top-level partition/container for organizing boards and sections, as defined in the Prisma schema 'discussionboard_channels'. Fully describes all atomic fields and audit info. No additional fields present."},"IDiscussionboardChannel.IRequest":{"type":"object","properties":{"code":{"oneOf":[{"type":"string","description":"Filter/search by channel code (partial/substring supported). Optional; null means no filter applied."},{"type":"null","description":"Filter/search by channel code (partial/substring supported). Optional; null means no filter applied."}],"description":"Filter/search by channel code (partial/substring supported). Optional; null means no filter applied."},"name":{"oneOf":[{"type":"string","description":"Filter/search by channel name (partial/substring supported). Optional; null means not used."},{"type":"null","description":"Filter/search by channel name (partial/substring supported). Optional; null means not used."}],"description":"Filter/search by channel name (partial/substring supported). Optional; null means not used."},"active":{"oneOf":[{"type":"boolean","description":"Filter/search by active status (true/false/null)."},{"type":"null","description":"Filter/search by active status (true/false/null)."}],"description":"Filter/search by active status (true/false/null)."},"position":{"oneOf":[{"type":"integer","description":"Filter/search channels by UI/manual position (optional)."},{"type":"null","description":"Filter/search channels by UI/manual position (optional)."}],"description":"Filter/search channels by UI/manual position (optional)."},"limit":{"oneOf":[{"type":"integer","description":"Page limit for pagination (optional, default may be 100 if not provided as in IPage.IRequest)."},{"type":"null","description":"Page limit for pagination (optional, default may be 100 if not provided as in IPage.IRequest)."}],"description":"Page limit for pagination (optional, default may be 100 if not provided as in IPage.IRequest)."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (optional, as defined in IPage.IRequest)."},{"type":"null","description":"Page number for pagination (optional, as defined in IPage.IRequest)."}],"description":"Page number for pagination (optional, as defined in IPage.IRequest)."}},"description":"Request query for searching, filtering, or paginating the discussionboard_channels entity.\n\nMaps directly to the fields in the Prisma schema. Optional properties for search allow advanced admin UI/dashboard filtering on code, name, active, and UI position.","required":[]},"IPageIDiscussionboardChannel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardChannel"},"description":"List of channel objects as results for the current page."}},"required":["pagination","data"],"description":"Paginated response for channel record search on discussionboard_channels entity. Uses IPage envelope with channel record array (per IPage<T> and schema requirements)."},"IDiscussionboardChannel.IUpdate":{"type":"object","properties":{"code":{"oneOf":[{"type":"string","description":"Unique channel code for API/config reference. Updatable; must remain unique per Prisma schema; can be set to null to not update."},{"type":"null","description":"Unique channel code for API/config reference. Updatable; must remain unique per Prisma schema; can be set to null to not update."}],"description":"Unique channel code for API/config reference. Updatable; must remain unique per Prisma schema; can be set to null to not update."},"name":{"oneOf":[{"type":"string","description":"Human readable channel name for display. Optional (null means not updated)."},{"type":"null","description":"Human readable channel name for display. Optional (null means not updated)."}],"description":"Human readable channel name for display. Optional (null means not updated)."},"description":{"oneOf":[{"type":"string","description":"Optional expanded explanation for this channel. May update or set to null (clear description)."},{"type":"null","description":"Optional expanded explanation for this channel. May update or set to null (clear description)."}],"description":"Optional expanded explanation for this channel. May update or set to null (clear description)."},"position":{"oneOf":[{"type":"integer","description":"UI order integer, allows updating manual navigation sequence. Null means no update."},{"type":"null","description":"UI order integer, allows updating manual navigation sequence. Null means no update."}],"description":"UI order integer, allows updating manual navigation sequence. Null means no update."},"active":{"oneOf":[{"type":"boolean","description":"Flag for activation/archiving. Null means not updated."},{"type":"null","description":"Flag for activation/archiving. Null means not updated."}],"description":"Flag for activation/archiving. Null means not updated."}},"description":"Patch object for updating a channel in the discussionboard_channels table. All properties optional except at least one must be present. Each field strictly matches schema columns.","required":[]},"IDiscussionboardSection.ICreate":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"FK to discussionboard_channels.id. Each section must belong to a channel. Required, validated as UUID. Matches relational modeling in ERD and Prisma schema for discussionboard_sections."},"code":{"type":"string","description":"Unique code for API/config reference. E.g., 'asia', 'us', 'policy'. Must be unique within channel; supports navigation, lookup, automation. Not duplicated or denormalized."},"name":{"type":"string","description":"Section name for UI. E.g., 'Asia & Pacific Policy'. Human readable label; not derived."},"description":{"oneOf":[{"type":"string","description":"Optional section explanation or summary, supporting contextual browsing/accessibility. Nullable."},{"type":"null","description":"Optional section explanation or summary, supporting contextual browsing/accessibility. Nullable."}],"description":"Optional section explanation or summary, supporting contextual browsing/accessibility. Nullable."},"position":{"type":"integer","description":"Order for UI/manual section navigation (atomic/not computed)."},"active":{"type":"boolean","description":"Enables/disables section for archiving/soft-delete logic; not derived."}},"required":["discussionboard_channel_id","code","name","position","active"],"description":"Section creation request object. Creates a new partition under a specific channel as described in the Prisma schema for discussionboard_sections. Each section is defined by its parent channel, unique code, name, position, and active status. Optional description."},"IDiscussionboardSection":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique primary key for the section row as modeled in Prisma."},"discussionboard_channel_id":{"type":"string","format":"uuid","description":"FK to parent's channel id; required for navigation hierarchy."},"code":{"type":"string","description":"Unique section code for programmatic lookup/routing; enforced unique per channel."},"name":{"type":"string","description":"Human readable label for navigation and UI display."},"description":{"oneOf":[{"type":"string","description":"Optional longer explanation or summary; supports accessibility."},{"type":"null","description":"Optional longer explanation or summary; supports accessibility."}],"description":"Optional longer explanation or summary; supports accessibility."},"position":{"type":"integer","description":"Manual ordering value for navigation/UI. Lower values are higher priority."},"active":{"type":"boolean","description":"Whether section is visible/enabled routing/archiving. Per business logic maps to soft-archiving or navigation hiding."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when section was created; used for compliance/audit."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update."}},"required":["id","discussionboard_channel_id","code","name","position","active","created_at","updated_at"],"description":"A section within a channel, forming the second level of forum hierarchy (Channel→Section→Board). Maps to topics/subcategories in navigation and organization. All required and atomic fields per the Prisma schema and ERD for discussionboard_sections."},"IDiscussionboardSection.IRequest":{"type":"object","properties":{"discussionboard_channel_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by parent channel id (optional). UUID format; if null, no filter."},{"type":"null","format":"uuid","description":"Filter by parent channel id (optional). UUID format; if null, no filter."}],"description":"Filter by parent channel id (optional). UUID format; if null, no filter."},"code":{"oneOf":[{"type":"string","description":"Filter by code (optional; partial match supported)."},{"type":"null","description":"Filter by code (optional; partial match supported)."}],"description":"Filter by code (optional; partial match supported)."},"name":{"oneOf":[{"type":"string","description":"Filter by section name (partial match)."},{"type":"null","description":"Filter by section name (partial match)."}],"description":"Filter by section name (partial match)."},"active":{"oneOf":[{"type":"boolean","description":"Filter by section enabled/archive status."},{"type":"null","description":"Filter by section enabled/archive status."}],"description":"Filter by section enabled/archive status."},"position":{"oneOf":[{"type":"integer","description":"Filter by UI manual position (optional)."},{"type":"null","description":"Filter by UI manual position (optional)."}],"description":"Filter by UI manual position (optional)."},"limit":{"oneOf":[{"type":"integer","description":"Number of results per page (optional)."},{"type":"null","description":"Number of results per page (optional)."}],"description":"Number of results per page (optional)."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (optional)."},{"type":"null","description":"Page number for pagination (optional)."}],"description":"Page number for pagination (optional)."}},"description":"Search/filter object for querying or paginating discussionboard_sections records, as in admin or navigation UI. All properties optional, mapped directly to schema fields for flexible queries.","required":[]},"IPageIDiscussionboardSection":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSection"},"description":"List of section objects as included in this page."}},"required":["pagination","data"],"description":"Envelope for paginated lists of section records from discussionboard_sections. Used for admin UIs and dashboards per IPage<T> pattern."},"IDiscussionboardSection.IUpdate":{"type":"object","properties":{"discussionboard_channel_id":{"oneOf":[{"type":"string","format":"uuid","description":"Allows moving section to a different channel. Null = no change."},{"type":"null","format":"uuid","description":"Allows moving section to a different channel. Null = no change."}],"description":"Allows moving section to a different channel. Null = no change."},"code":{"oneOf":[{"type":"string","description":"May patch section code for programmatic lookup/routing (unique constraint in channel enforced)."},{"type":"null","description":"May patch section code for programmatic lookup/routing (unique constraint in channel enforced)."}],"description":"May patch section code for programmatic lookup/routing (unique constraint in channel enforced)."},"name":{"oneOf":[{"type":"string","description":"Patch label for navigation and user display. Null = no update."},{"type":"null","description":"Patch label for navigation and user display. Null = no update."}],"description":"Patch label for navigation and user display. Null = no update."},"description":{"oneOf":[{"type":"string","description":"Patch expanded description/summary; may set to null for erase."},{"type":"null","description":"Patch expanded description/summary; may set to null for erase."}],"description":"Patch expanded description/summary; may set to null for erase."},"position":{"oneOf":[{"type":"integer","description":"Patch section UI/manual navigation order."},{"type":"null","description":"Patch section UI/manual navigation order."}],"description":"Patch section UI/manual navigation order."},"active":{"oneOf":[{"type":"boolean","description":"Patch activation (soft archive/restore per business rules)."},{"type":"null","description":"Patch activation (soft archive/restore per business rules)."}],"description":"Patch activation (soft archive/restore per business rules)."}},"description":"Patch/update object for discussionboard_sections row. At least one property must be present; all directly mapped to schema fields.","required":[]},"IDiscussionboardConfiguration.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Configuration key for this setting. Required and unique per schema; example: 'max_post_per_hour'. Used for admin lookup and automation."},"value":{"oneOf":[{"type":"string","description":"String value for this config entry (null allowed for unset/optional). All values stored as string, conversion happens at app layer."},{"type":"null","description":"String value for this config entry (null allowed for unset/optional). All values stored as string, conversion happens at app layer."}],"description":"String value for this config entry (null allowed for unset/optional). All values stored as string, conversion happens at app layer."},"description":{"oneOf":[{"type":"string","description":"Optional human description for admin/support. For UI tooltips, dashboard, etc."},{"type":"null","description":"Optional human description for admin/support. For UI tooltips, dashboard, etc."}],"description":"Optional human description for admin/support. For UI tooltips, dashboard, etc."}},"required":["key"],"description":"New configuration creation request. Strictly matches fields in the Prisma schema for discussionboard_configurations. Must supply unique key (string). Value and description optional."},"IDiscussionboardConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the configuration item. Globally unique per row."},"key":{"type":"string","description":"Config key (unique). Used for programmatic lookup by admin/dev code."},"value":{"oneOf":[{"type":"string","description":"Config value (string or null). Converted in application/service layer (never as number/bool in DB)."},{"type":"null","description":"Config value (string or null). Converted in application/service layer (never as number/bool in DB)."}],"description":"Config value (string or null). Converted in application/service layer (never as number/bool in DB)."},"description":{"oneOf":[{"type":"string","description":"Optional admin/descriptive note."},{"type":"null","description":"Optional admin/descriptive note."}],"description":"Optional admin/descriptive note."},"created_at":{"type":"string","format":"date-time","description":"When the config item was created (audit trail)."},"updated_at":{"type":"string","format":"date-time","description":"When the config item was last modified (audit trail)."}},"required":["id","key","created_at","updated_at"],"description":"A global or system-level configuration row in discussionboard_configurations table. Used for feature flags, thresholds, runtime toggles, and platform configuration. Both key and unique id distinguish rows, all fields documented in the Prisma schema."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number in result set (1-indexed)."},"limit":{"type":"integer","description":"Max records per page (default 100 if not provided)."},"records":{"type":"integer","description":"Total matching records across all pages (for pagination UX)."},"pages":{"type":"integer","description":"Total number of pages (e.g., ceil(records/limit))."}},"required":["current","limit","records","pages"],"description":"Standard pagination metadata for IPage API envelope. Used throughout API as per IPage<T> pattern."}}},"completed":71,"total":191,"step":0,"created_at":"2025-07-25T05:16:36.152Z"},"tokenUsage":{"facade":{"aggregate":{"total":1657220,"input":{"total":1566101,"cached":0},"output":{"total":91119,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1657220,"input":{"total":1566101,"cached":0},"output":{"total":91119,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1657220,"input":{"total":1566101,"cached":0},"output":{"total":91119,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1657220,"input":{"total":1566101,"cached":0},"output":{"total":91119,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIdiscussionboard_settings":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the current page of settings results.\n\nDefines the current page number, record limit, total count, and the total number of pages, referencing audit and UI navigation requirements from the business logic."},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_settings"},"description":"Array of discussionboard_settings records returned for the current page in the result set.\n\nEach entry adheres to the 'Idiscussionboard_settings' type, containing feature/area-specific configuration details, as described in the Prisma schema."}},"required":["pagination","data"],"description":"Paginated container for discussionboard_settings records, designed for admin or developer dashboard interfaces in the discussion board system.\n\nIncludes structured pagination information and a set of settings records, with all properties and requirements directly aligned with the database and business requirements."},"Idiscussionboard_settings.IUpdate":{"type":"object","properties":{"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"The entity or area identifier for which this setting applies. Nullable for global context as per schema. Must reference an existing entity if set; otherwise, leave null.\n\nReferences the 'scope_id' field from Prisma and is typically used for channel, section, or feature-level scoping."},{"type":"null","format":"uuid","description":"The entity or area identifier for which this setting applies. Nullable for global context as per schema. Must reference an existing entity if set; otherwise, leave null.\n\nReferences the 'scope_id' field from Prisma and is typically used for channel, section, or feature-level scoping."}],"description":"The entity or area identifier for which this setting applies. Nullable for global context as per schema. Must reference an existing entity if set; otherwise, leave null.\n\nReferences the 'scope_id' field from Prisma and is typically used for channel, section, or feature-level scoping."},"scope_type":{"type":"string","description":"Type of scope the setting refers to (e.g., 'channel', 'section', 'feature_flag'). Required string value for proper settings matching and context-specific configuration."},"key":{"type":"string","description":"Name of the setting key this record controls (e.g., 'moderation_policy', 'max_post_per_hour'). Used for precise config and UI lookups, must be unique per (scope_type, scope_id, key) tuple."},"value":{"oneOf":[{"type":"string","description":"The actual value or toggle for the given key/setting (can be nullable for unset/optional fields)."},{"type":"null","description":"The actual value or toggle for the given key/setting (can be nullable for unset/optional fields)."}],"description":"The actual value or toggle for the given key/setting (can be nullable for unset/optional fields)."},"description":{"oneOf":[{"type":"string","description":"Description/notes for admin clarity and audit trail, optional as per schema."},{"type":"null","description":"Description/notes for admin clarity and audit trail, optional as per schema."}],"description":"Description/notes for admin clarity and audit trail, optional as per schema."}},"required":["scope_type","key"],"description":"Request body for updating a discussionboard_settings record.\n\nMaps to the corresponding updatable columns from the Prisma schema. Only fields defined in the underlying table can be updated, and any combination is allowed so long as unique constraints and foreign keys are respected."},"Idiscussionboard_boards.ICreate":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Reference to the category (discussionboard_board_categories.id) under which this board will be created. Must reference an existing category for navigation grouping and organization. Required."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Reference to the section (discussionboard_sections.id) this board will belong to. Required, must be a valid, existing section in the hierarchy."},"name":{"type":"string","description":"Human-readable board name to display in UI navigation. Required; must not duplicate existing board names."},"code":{"type":"string","description":"Unique, programmatic code identifying the board (used in routing and internal lookups). Must be unique per schema. Required."},"description":{"oneOf":[{"type":"string","description":"Optional textual description for hover tooltips, previews, or UI panels; may be null according to schema."},{"type":"null","description":"Optional textual description for hover tooltips, previews, or UI panels; may be null according to schema."}],"description":"Optional textual description for hover tooltips, previews, or UI panels; may be null according to schema."},"is_active":{"type":"boolean","description":"Indicates whether the board is currently active and can receive new threads/posts. Must be set on board creation."},"is_visible":{"type":"boolean","description":"Defines whether the board appears in public-facing navigation or is hidden for staff/private boards. Required; ensures proper visibility per business logic."}},"required":["discussionboard_board_category_id","discussionboard_section_id","name","code","is_active","is_visible"],"description":"Request structure for creating a new discussionboard_boards entity (forum board).\n\nAll fields are directly mapped to the schema for atomic board creation. Categories and sections must be defined in the system and referenced via UUID. Business rules enforce unique code and correct assignment within forum structure."},"Idiscussionboard_boards":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the board record (primary key in discussionboard_boards schema)."},"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"UUID foreign key referencing the board's category, per schema."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"UUID foreign key referencing the section in which the board resides, per schema."},"name":{"type":"string","description":"Board name for UI display and search."},"code":{"type":"string","description":"Unique code for routing/programmatic referencing (unique per schema constraints)."},"description":{"oneOf":[{"type":"string","description":"Optional detailed description for UI tooltips, previews, or management interfaces."},{"type":"null","description":"Optional detailed description for UI tooltips, previews, or management interfaces."}],"description":"Optional detailed description for UI tooltips, previews, or management interfaces."},"is_active":{"type":"boolean","description":"True if board is currently accepting threads/posts; false if archived or disabled."},"is_visible":{"type":"boolean","description":"True if board is visible to users, false if hidden for private/staff boards, per schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of board creation (ISO 8601, as written by system for audit trail)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to board metadata/structure (ISO 8601)."}},"required":["id","discussionboard_board_category_id","discussionboard_section_id","name","code","is_active","is_visible","created_at","updated_at"],"description":"Board entity resource for discussion boards, matching all columns in the discussionboard_boards table from Prisma schema and business requirements.\n\nContains full metadata required for navigation, moderation, and platform configuration. All foreign key references (category, section) must correspond to actual entities in their respective domains."},"Idiscussionboard_boards.IRequest":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Filter boards by their assigned category (discussionboard_board_category_id). Must be a valid category UUID."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Filter boards belonging to a specific section. Must be a valid section UUID."},"name":{"type":"string","description":"Search or filter by board name (supports substring or trigram matching for quick lookups)."},"code":{"type":"string","description":"Search or filter by programmatic code (case-sensitive/exact match for lookup scenarios)."},"is_active":{"type":"boolean","description":"Filter for boards currently marked active (true) or inactive (false). Optional."},"is_visible":{"type":"boolean","description":"Filter for boards that are visible (true) or hidden (false). Optional."},"created_at":{"type":"string","format":"date-time","description":"Optionally filter for boards created at a specific time or time range (use operator logic in client as required)."},"updated_at":{"type":"string","format":"date-time","description":"Optionally filter for boards last updated at a specific time or time range."}},"description":"Request filter type for querying or paginating boards in the discussionboard_boards table.\n\nIncludes all queryable fields derived directly from the Prisma schema, supporting admin interfaces, dashboards, and API-based retrieval. Filters are typically optional and can be combined for advanced search. Date/time filters may use extended operator formats (not specified by JSON schema—configure at API layer as needed).","required":[]},"IPageIdiscussionboard_boards":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the current board query result (page, limit, total, etc.), supporting scalable board listing."},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_boards"},"description":"Array of board entity records for the current page in the result set, fully matching schema definition."}},"required":["pagination","data"],"description":"Paginated result type for board table queries in discussionboard_boards.\n\nBundles pagination details and the currently returned boards as a page, supporting admin or moderation listing workflows."},"Idiscussionboard_boards.IUpdate":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Reference to the new category for the board (if being changed). Must reference a valid category UUID or be omitted for no change."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Reference to the section to which the board is being reassigned, if changing. Must reference a valid section UUID."},"name":{"type":"string","description":"Update name label for board in navigation or listings."},"code":{"type":"string","description":"Update programmatic code (must remain unique per schema constraint)."},"description":{"oneOf":[{"type":"string","description":"Update short/long description, or remove by setting to null."},{"type":"null","description":"Update short/long description, or remove by setting to null."}],"description":"Update short/long description, or remove by setting to null."},"is_active":{"type":"boolean","description":"Set board to active/inactive (archive toggle for admin workflows)."},"is_visible":{"type":"boolean","description":"Set board to user-visible or hidden (staff/private)."}},"description":"Request body for updating a board record in the discussionboard_boards table.\n\nAll fields are mapped to updatable Prisma schema columns. Any subset of these fields can be included depending on the update scenario; only actual fields listed here can be updated.","required":[]},"IDiscussionboardBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Human-readable category name for organization/navigation (must be unique per schema). Required."},"code":{"type":"string","description":"Unique code for programmatic referencing, must be unique for category lookup/routing. Required."},"description":{"oneOf":[{"type":"string","description":"Short description for admin/mod UI tooltips, navigation, or preview. Optional per schema."},{"type":"null","description":"Short description for admin/mod UI tooltips, navigation, or preview. Optional per schema."}],"description":"Short description for admin/mod UI tooltips, navigation, or preview. Optional per schema."},"position":{"type":"integer","description":"Manual ordering integer for UI navigation; used for sorting categories in admin panels."}},"required":["name","code","position"],"description":"Request type for creating a new board category entity in discussionboard_board_categories table.\n\nAll properties required by business and Prisma schema for category creation. Unique constraints on name and code must be respected by implementation."},"IDiscussionboardBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the board category record (primary key, UUID)."},"name":{"type":"string","description":"Human-readable name of the category as stored for display, search, or admin config."},"code":{"type":"string","description":"Unique programmatic code for the category, as referenced in routing, UI, and API."},"description":{"oneOf":[{"type":"string","description":"Short category description for admin panels, tooltips, or end user preview (nullable per schema)."},{"type":"null","description":"Short category description for admin panels, tooltips, or end user preview (nullable per schema)."}],"description":"Short category description for admin panels, tooltips, or end user preview (nullable per schema)."},"position":{"type":"integer","description":"Ordering integer for navigation or display purposes. Admin assignable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of category creation, set by system for audit/ordering."}},"required":["id","name","code","position","created_at"],"description":"Board category entity resource, matching all columns in the discussionboard_board_categories table from Prisma schema.\n\nContains full metadata required for category navigation and assignment in the discussion board structure."},"IDiscussionboardBoardCategory.IRequest":{"type":"object","properties":{"name":{"type":"string","description":"Optional filter by human-readable name; supports partial/trgm matching for admin search."},"code":{"type":"string","description":"Optional filter by category code for precise lookup."},"description":{"type":"string","description":"Optional filter by description content (search for UI, admin references)."},"position":{"type":"integer","description":"Request filtering/sorting by navigation order integer."},"created_at":{"type":"string","format":"date-time","description":"Request filtering or sorting by creation timestamp."}},"description":"Request body for listing/filtering/searching board categories in the discussionboard_board_categories table. Includes all queryable fields allowed by the schema for UI/admin dashboards.","required":[]},"IPageIDiscussionboardBoardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination details: current page, limit, total count, total pages, as required for scalable admin/category browsing."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardCategory"},"description":"List of category entities for the current page, each matching the board category resource schema."}},"required":["pagination","data"],"description":"Paginated list envelope for board category table searches in discussionboard_board_categories.\n\nUsed by admin dashboards, configuration panels, or navigation editors for scalable retrieval of board category objects."},"IDiscussionboardBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Human-readable category name for display and navigation (must remain unique if changed, per schema uniqueness constraint)."},"code":{"type":"string","description":"Programmatic code for category lookup/routing (optional update, must remain unique)."},"description":{"oneOf":[{"type":"string","description":"Update short description for the category (may be set to null to remove)."},{"type":"null","description":"Update short description for the category (may be set to null to remove)."}],"description":"Update short description for the category (may be set to null to remove)."},"position":{"type":"integer","description":"Ordering integer for this category, used in navigation/UID display, admin configurable."}},"description":"Update type for board category entity (discussionboard_board_categories table).\n\nAll updatable properties are exactly as defined in the schema. Fields omitted from the request remain unchanged; only fields listed here are mutable via this API.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Pagination limit (number of records per page)."},"records":{"type":"integer","description":"Total records count for the query."},"pages":{"type":"integer","description":"Total pages in result set."}},"required":["current","limit","records","pages"],"description":"Pagination metadata for page-wrapped API results in the discussion board system API.\n\nIndicates progress and chunk structure of paginated data for any IPage<T> envelope and is referenced by all list/paginate result types above."},"Idiscussionboard_settings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the settings record."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"Entity/context for the setting (nullable - may represent channel, section, or feature scope, as per application logic)."},{"type":"null","format":"uuid","description":"Entity/context for the setting (nullable - may represent channel, section, or feature scope, as per application logic)."}],"description":"Entity/context for the setting (nullable - may represent channel, section, or feature scope, as per application logic)."},"scope_type":{"type":"string","description":"Type indicator for the context/scope to which the setting applies (e.g., 'channel', 'section', 'feature_flag')."},"key":{"type":"string","description":"Key string for the setting (identifies the setting for application/component logic)."},"value":{"oneOf":[{"type":"string","description":"Value assigned to this setting (can be null to represent unset/optional)."},{"type":"null","description":"Value assigned to this setting (can be null to represent unset/optional)."}],"description":"Value assigned to this setting (can be null to represent unset/optional)."},"description":{"oneOf":[{"type":"string","description":"Optional description or note for this setting item."},{"type":"null","description":"Optional description or note for this setting item."}],"description":"Optional description or note for this setting item."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when record was created (for audit/compliance)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update, for compliance and business rule tracking."}},"required":["id","scope_type","key","created_at","updated_at"],"description":"Single record/resource for configuration settings, area, or feature toggles within the discussion board system.\n\nContains referenced context/scope info, setting key/value, and audit metadata."}}},"completed":83,"total":191,"step":0,"created_at":"2025-07-25T05:16:37.176Z"},"tokenUsage":{"facade":{"aggregate":{"total":1753738,"input":{"total":1659284,"cached":0},"output":{"total":94454,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1753738,"input":{"total":1659284,"cached":0},"output":{"total":94454,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1753738,"input":{"total":1659284,"cached":0},"output":{"total":94454,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1753738,"input":{"total":1659284,"cached":0},"output":{"total":94454,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"사용자의 로그인 및 표시용 고유 아이디입니다. Prisma discussionboard_members 테이블의 username 컬럼을 반영합니다.\n\n회원 가입 및 인증 절차에서 필수적으로 사용되며, 다른 프로필나 권한 테이블과 중복되지 않도록 보장됩니다. 예시: 'civicUser42'."},"email":{"type":"string","format":"email","description":"회원의 고유 이메일 주소로, 인증 및 알림 기능 등 다양한 서비스에 이용됩니다. Prisma discussionboard_members.email 컬럼 설명을 반영합니다.\n\nDB 내 유일값으로 효력이 유지되며, 이메일 인증, 비밀번호 재설정 등에 활용됩니다. 예시: 'user@email.com'."},"hashed_password":{"type":"string","description":"안전한 로그인 처리를 위해 암호화된 비밀번호 해시값을 저장하는 필드입니다. 문제 시 절대 평문을 저장하지 않으며, 직접 반환되는 일도 없습니다.\n\nPrisma discussionboard_members의 hashed_password 컬럼에 대응하며, 로그인 시 인증에서만 내부적으로 활용됩니다."},"role":{"oneOf":[{"const":"member","description":"회원의 권한을 지정합니다. Prisma discussionboard_members.role 컬럼에 해당하며, 'member', 'moderator', 'admin' 세 가지 값만 허용합니다.\n\n회원 등록 시 역할이 반드시 지정되어야 하며, 이후 운영 내 권한 분기 및 인가 처리가 모두 이 값을 기준으로 이루어집니다."},{"const":"moderator","description":"회원의 권한을 지정합니다. Prisma discussionboard_members.role 컬럼에 해당하며, 'member', 'moderator', 'admin' 세 가지 값만 허용합니다.\n\n회원 등록 시 역할이 반드시 지정되어야 하며, 이후 운영 내 권한 분기 및 인가 처리가 모두 이 값을 기준으로 이루어집니다."},{"const":"admin","description":"회원의 권한을 지정합니다. Prisma discussionboard_members.role 컬럼에 해당하며, 'member', 'moderator', 'admin' 세 가지 값만 허용합니다.\n\n회원 등록 시 역할이 반드시 지정되어야 하며, 이후 운영 내 권한 분기 및 인가 처리가 모두 이 값을 기준으로 이루어집니다."}],"description":"회원의 권한을 지정합니다. Prisma discussionboard_members.role 컬럼에 해당하며, 'member', 'moderator', 'admin' 세 가지 값만 허용합니다.\n\n회원 등록 시 역할이 반드시 지정되어야 하며, 이후 운영 내 권한 분기 및 인가 처리가 모두 이 값을 기준으로 이루어집니다."},"is_active":{"type":"boolean","description":"계정의 활성/비활성 상태를 나타냅니다. Prisma discussionboard_members.is_active 컬럼을 반영하며, false로 설정되면 게시판 접근 및 활동이 제한됩니다.\n\n회원 가입(등록) 시 true/false를 할당합니다."}},"required":["username","email","hashed_password","role","is_active"],"description":"회원 가입(등록) 요청 시 사용하는 데이터 타입입니다. Prisma discussionboard_members 테이블 스키마와 컬럼 주석을 기반으로 설계되었습니다.\n\nID, 가입일시 등의 자동 생성 필드는 사용자가 직접 제공하지 않으며, 보안상 password의 해시만 입력받습니다. 이메일, 아이디 중복은 데이터베이스 수준에서 제한됩니다.\n"},"IDiscussionboardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"회원 고유 식별자(PK).\n\nPrisma discussionboard_members.id 컬럼으로, 모든 내부조인 및 외부 참조의 기준이 되는 값입니다."},"username":{"type":"string","description":"회원의 로그인/표시용 아이디. Prisma discussionboard_members.username 컬럼.\n\n모든 회원의 고유 아이디를 보장합니다."},"email":{"type":"string","format":"email","description":"회원의 인증 및 연락용 이메일 주소. Prisma discussionboard_members.email 컬럼.\n\n고유값이며 비밀번호 재설정 등에서 활용합니다."},"role":{"oneOf":[{"const":"member","description":"회원의 권한(일반/운영자/관리자) 구분. Prisma discussionboard_members.role 컬럼.\n\n서비스 접근, 인가 처리를 좌우합니다."},{"const":"moderator","description":"회원의 권한(일반/운영자/관리자) 구분. Prisma discussionboard_members.role 컬럼.\n\n서비스 접근, 인가 처리를 좌우합니다."},{"const":"admin","description":"회원의 권한(일반/운영자/관리자) 구분. Prisma discussionboard_members.role 컬럼.\n\n서비스 접근, 인가 처리를 좌우합니다."}],"description":"회원의 권한(일반/운영자/관리자) 구분. Prisma discussionboard_members.role 컬럼.\n\n서비스 접근, 인가 처리를 좌우합니다."},"is_active":{"type":"boolean","description":"계정 활성화 플래그. Prisma discussionboard_members.is_active 컬럼.\n\n운영자/관리 기능으로 계정 블록 상태 등 표현."},"created_at":{"type":"string","format":"date-time","description":"계정 생성(가입) 일시. Prisma discussionboard_members.created_at 컬럼.\n\n운영 감사, 신규 회원 집계 등에 사용됩니다."},"updated_at":{"type":"string","format":"date-time","description":"회원 정보 마지막 변경 시각. Prisma discussionboard_members.updated_at.\n\n프로필 수정, 권한 변경 등 변경감사 트래킹용."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"소프트 삭제/탈퇴 시각. Prisma discussionboard_members.deleted_at 컬럼.\n\n탈퇴 대기/준삭제자 구분과 복구 이력 용도."},{"type":"null"}],"description":"소프트 삭제/탈퇴 시각. Prisma discussionboard_members.deleted_at 컬럼.\n\n탈퇴 대기/준삭제자 구분과 복구 이력 용도."}},"required":["id","username","email","role","is_active","created_at","updated_at"],"description":"회원 엔터티의 전체 데이터 구조입니다. Prisma discussionboard_members 테이블의 모든 컬럼 정의 및 주석을 반영하여 작성되었습니다.\n\npassword/hash 등 내부 보안정보는 절대 응답에 포함하지 않으며, 회원의 권한, 활성상태, 가입/수정/탈퇴 관련 일시가 포함됩니다.\n"},"IDiscussionboardMember.IRequest":{"type":"object","properties":{"username":{"type":"string","description":"검색/필터 대상 아이디. 부분검색 지원과 중복체크, 대량 검색용 필드입니다. Prisma discussionboard_members.username 컬럼기반."},"email":{"type":"string","format":"email","description":"이메일 기준 필터. Prisma discussionboard_members.email 컬럼과 일치해야 합니다."},"role":{"oneOf":[{"const":"member","description":"권한 기반 필터링. Prisma discussionboard_members.role 컬럼 참고."},{"const":"moderator","description":"권한 기반 필터링. Prisma discussionboard_members.role 컬럼 참고."},{"const":"admin","description":"권한 기반 필터링. Prisma discussionboard_members.role 컬럼 참고."}],"description":"권한 기반 필터링. Prisma discussionboard_members.role 컬럼 참고."},"is_active":{"type":"boolean","description":"활성/비활성 회원 필터링. Prisma discussionboard_members.is_active 컬럼."},"created_at_from":{"type":"string","format":"date-time","description":"가입일 기준 하한(ISO8601). Prisma discussionboard_members.created_at."},"created_at_to":{"type":"string","format":"date-time","description":"가입일 기준 상한(ISO8601). Prisma discussionboard_members.created_at."},"updated_at_from":{"type":"string","format":"date-time","description":"정보 변경일 기준 하한(ISO8601)"},"updated_at_to":{"type":"string","format":"date-time","description":"정보 변경일 기준 상한(ISO8601)"},"pagination":{"$ref":"#/components/schemas/IPage.IRequest"}},"description":"회원 목록/검색/필터 요청 시 사용하는 데이터 타입입니다. Prisma discussionboard_members 테이블, 컬럼 설명, 그리고 목록/검색/페이징 비즈니스 흐름에 맞게 작성되었습니다.","required":[]},"IPageIDiscussionboardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMember"}}},"required":["pagination","data"],"description":"회원 목록 페이징 응답 컨테이너 타입입니다. standard IPage 구조에 회원 리스트를 포함합니다."},"IDiscussionboardMember.IUpdate":{"type":"object","properties":{"username":{"type":"string","description":"회원 아이디(변경 시)."},"email":{"type":"string","format":"email","description":"이메일 주소(변경 시 가능)."},"role":{"oneOf":[{"const":"member","description":"권한 등급 변경시. 'member', 'moderator', 'admin' 셋 중 하나."},{"const":"moderator","description":"권한 등급 변경시. 'member', 'moderator', 'admin' 셋 중 하나."},{"const":"admin","description":"권한 등급 변경시. 'member', 'moderator', 'admin' 셋 중 하나."}],"description":"권한 등급 변경시. 'member', 'moderator', 'admin' 셋 중 하나."},"is_active":{"type":"boolean","description":"계정 활성화/비활성화 변경."},"hashed_password":{"type":"string","description":"비밀번호 변경시, 해시값만 허용."}},"description":"회원 정보 업데이트 요청 타입입니다. Prisma discussionboard_members 컬럼 구성을 100% 반영합니다. ID/created_at/updated_at/deleted_at 값은 수정 불가.","required":[]},"IDiscussionboardMember.ISoftDeleteResponse":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"삭제 요청된 회원의 ID"},"deleted_at":{"type":"string","format":"date-time","description":"삭제(탈퇴) 처리 일시"}},"required":["id","deleted_at"],"description":"회원 소프트 삭제(탈퇴) 성공 시 응답 객체(Soft delete: deleted_at 필드 설정됨)."},"IDiscussionboardMemberProfile.IRequest":{"type":"object","properties":{"display_name":{"type":"string","description":"회원 고유 프로필 닉네임. Prisma discussionboard_member_profiles.display_name 참조."},"bio":{"type":"string","description":"한 줄 소개, 메시지, 이력 등 자유 서술란."},"avatar_url":{"type":"string","description":"프로필 이미지 URL (최대 8만자)."},"location":{"type":"string","description":"지역, 도시, 국가 등 자유 텍스트."},"website_url":{"type":"string","description":"본인 홈페이지, 소셜 링크 등(URL)."},"pagination":{"$ref":"#/components/schemas/IPage.IRequest"}},"description":"회원 프로필 검색/조회용 요청 타입. Prisma discussionboard_member_profiles 구조를 100% 반영.","required":[]},"IPageIDiscussionboardMemberProfile":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMemberProfile"}}},"required":["pagination","data"],"description":"회원 프로필 리스트 페이징 응답 컨테이너."},"IDiscussionboardMemberProfile.IUpdate":{"type":"object","properties":{"display_name":{"type":"string","description":"프로필 닉네임 수정값 (필수 필드)."},"bio":{"type":"string","description":"한 줄 소개 수정 (선택 가능)."},"avatar_url":{"type":"string","description":"프로필 이미지 URL(수정값)."},"location":{"type":"string","description":"위치 텍스트 변경."},"website_url":{"type":"string","description":"웹사이트 URL 수정."}},"description":"회원 프로필 업데이트 요청 객체. Prisma discussionboard_member_profiles 테이블 정의 준수.","required":[]},"IDiscussionboardMemberProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"프로필 고유 식별자(PK)."},"member_id":{"type":"string","format":"uuid","description":"프로필이 연결된 회원 ID(FK)."},"display_name":{"type":"string","description":"회원의 공개 닉네임."},"bio":{"type":"string","description":"회원의 자기소개, 경력 등 짧은 메모(선택)."},"avatar_url":{"type":"string","description":"프로필 이미지(아바타) URL(선택, 최대 8만자)."},"location":{"type":"string","description":"지역, 국가, 거주지 등(선택)."},"website_url":{"type":"string","description":"개인 홈페이지, SNS 등 외부 링크(선택, 최대 8만자)."}},"required":["id","member_id","display_name"],"description":"회원 프로필 엔터티. Prisma discussionboard_member_profiles 컬럼, 주석 내용 100% 반영. 보안정보(이메일/비번 등)는 포함하지 않음."},"IDiscussionboardMemberPreference.IRequest":{"type":"object","properties":{"receive_email_notifications":{"type":"boolean","description":"이메일 알림 사용 여부(선호도)."},"receive_push_notifications":{"type":"boolean","description":"푸시알림 허용(선호도)."},"preferred_language":{"type":"string","description":"사용자 선호 언어 코드(예: 'en', 'ko')."},"dark_mode_enabled":{"type":"boolean","description":"다크모드 사용여부(테마설정)."},"pagination":{"$ref":"#/components/schemas/IPage.IRequest"}},"description":"회원 알림/환경설정 프로필 검색 요청 포맷. Prisma discussionboard_member_preferences 컬럼 100% 반영.","required":[]},"IPageIDiscussionboardMemberPreference":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMemberPreference"}}},"required":["pagination","data"],"description":"회원 알림 및 환경설정 선호도 목록 페이징 응답 컨테이너."},"IDiscussionboardMemberPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"환경설정 고유 식별자(PK). Prisma discussionboard_member_preferences.id."},"member_id":{"type":"string","format":"uuid","description":"해당 환경설정의 소유 회원 ID(FK)."},"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"이메일 알림 사용여부(선택 null 허용). Prisma discussionboard_member_preferences.receive_email_notifications."},{"type":"null"}],"description":"이메일 알림 사용여부(선택 null 허용). Prisma discussionboard_member_preferences.receive_email_notifications."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"푸시 알림 허용여부(선택 null 허용)."},{"type":"null"}],"description":"푸시 알림 허용여부(선택 null 허용)."},"preferred_language":{"oneOf":[{"type":"string","description":"선호 언어 코드(선택 null 허용, 예:'en')."},{"type":"null"}],"description":"선호 언어 코드(선택 null 허용, 예:'en')."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"다크모드 활성화 여부(선택 null 허용)."},{"type":"null"}],"description":"다크모드 활성화 여부(선택 null 허용)."}},"required":["id","member_id"],"description":"회원 알림/환경설정 엔터티 전체 페이로드. Prisma discussionboard_member_preferences 테이블 및 컬럼 설명에 따름."},"IPage.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"페이지 번호. 1부터 시작. null 허용. 기본값 1.","minimum":1},{"type":"null","description":"페이지 번호. 1부터 시작. null 허용. 기본값 1.","minimum":1}],"description":"페이지 번호. 1부터 시작. null 허용. 기본값 1."},"limit":{"oneOf":[{"type":"integer","description":"1페이지당 레코드 제한(최대값은 서비스 정책 기준). null 허용, 기본값 100.","minimum":1},{"type":"null","description":"1페이지당 레코드 제한(최대값은 서비스 정책 기준). null 허용, 기본값 100.","minimum":1}],"description":"1페이지당 레코드 제한(최대값은 서비스 정책 기준). null 허용, 기본값 100."}},"description":"페이징/목록 요청 시 공통 구조. IPage.IRequest 타입. page, limit만 사용.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":1,"description":"현재 페이지 번호(uint32)"},"limit":{"type":"integer","minimum":1,"description":"페이지당 레코드 제한수(uint32, default 100)"},"records":{"type":"integer","minimum":0,"description":"전체 레코드(총 데이터 수)"},"pages":{"type":"integer","minimum":1,"description":"전체 페이지수(총 레코드/limit, 소수올림)"}},"required":["current","limit","records","pages"],"description":"페이징 정보 컨테이너. 목록 응답에서 사용되는 기본 구조체."}}},"completed":106,"total":191,"step":0,"created_at":"2025-07-25T05:16:44.074Z"},"tokenUsage":{"facade":{"aggregate":{"total":1946080,"input":{"total":1845639,"cached":0},"output":{"total":100441,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1946080,"input":{"total":1845639,"cached":0},"output":{"total":100441,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":1946080,"input":{"total":1845639,"cached":0},"output":{"total":100441,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":1946080,"input":{"total":1845639,"cached":0},"output":{"total":100441,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIPostSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information.\n\nProvides metadata about the current page, total records, page limits, and total pages, following standard discussionboard paging conventions. Supports scalable navigation and administrative review of snapshot version history."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostSnapshot"},"description":"List of Post Snapshot records.\n\nContains the actual post snapshot objects, each of which represents a historical version of a post, including editor, version moment, and snapshot content per the snapshot schema."}},"required":["pagination","data"],"description":"Paginated result set for Post Snapshot records from the discussion board. Used for audit, rollback, and historical review functionality supporting compliance and advanced moderation workflows. Data is complete for each snapshot, and pagination enables efficient browsing through large version histories."},"IPostSnapshot.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Snapshot of the post's title at the current version. Referencing the 'title' column in the discussionboard_post_snapshots schema, this property captures the post's heading as edited for rollback/compliance purposes."},"body":{"type":"string","description":"Snapshot of the post's body content at this version. Matches the 'body' column in the post_snapshots table, for supporting moderation rollback and historical versioning."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp at which the snapshot was recorded, ISO 8601 format.\n\nThis field follows the 'taken_at' column in discussionboard_post_snapshots, denoting exactly when the snapshot was created for auditing and history tracking."},"editor_member_id":{"type":"string","format":"uuid","description":"UUID of the member who edited the post at this version, nullable for system intervention.\n\nThis property is tied to the 'editor_member_id' column in discussionboard_post_snapshots, and indicates who performed the edit, supporting accountability, moderation, and audit trail.\n\nNever give this property in response types if it refers to sensitive/impersonation data."}},"required":["title","body","taken_at"],"description":"Object for updating a Post Snapshot record, reflecting only mutable fields defined in the discussionboard_post_snapshots schema. Used for correcting audit errors, resolving moderation escalations, or rare admin operations. Only the directly schema-defined fields are modifiable; the post snapshot is generally considered immutable for typical user workflows."},"IPostVote.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID referencing the post being voted on.\n\nImplements the 'discussionboard_post_id' column in the discussionboard_post_votes schema. Required for associating the vote with the correct post and auditing the voting flow."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID referencing the member who casts the vote.\n\nMapped to 'discussionboard_member_id' in the post_votes model, identifies the voter for permissions, uniqueness checks (one vote per member per post), and audit traceability."},"vote_type":{"oneOf":[{"const":-1,"description":"The type of vote cast: 1 for upvote, -1 for downvote, 0 for neutral/removal.\n\nDirectly aligns with the 'vote_type' column (integer) in the discussionboard_post_votes schema, controlling post popularity and engagement analytics."},{"const":0,"description":"The type of vote cast: 1 for upvote, -1 for downvote, 0 for neutral/removal.\n\nDirectly aligns with the 'vote_type' column (integer) in the discussionboard_post_votes schema, controlling post popularity and engagement analytics."},{"const":1,"description":"The type of vote cast: 1 for upvote, -1 for downvote, 0 for neutral/removal.\n\nDirectly aligns with the 'vote_type' column (integer) in the discussionboard_post_votes schema, controlling post popularity and engagement analytics."}],"description":"The type of vote cast: 1 for upvote, -1 for downvote, 0 for neutral/removal.\n\nDirectly aligns with the 'vote_type' column (integer) in the discussionboard_post_votes schema, controlling post popularity and engagement analytics."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the vote was cast. Maps to 'created_at' column for audit, temporal analytics, and rate-limiting enforcement."}},"required":["discussionboard_post_id","discussionboard_member_id","vote_type","created_at"],"description":"Object required to create a new Post Vote record, referencing only properties in the discussionboard_post_votes Prisma schema. Used when a member submits an upvote, downvote, or neutralizes/removes their vote for a post. Submission must comply with the one-vote-per-member-per-post rule, and all fields are audit-critical for engagement monitoring."},"IPostVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post vote record. Uniquely identifies this vote in the discussionboard_post_votes table."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID referencing the post being voted on, as in the 'discussionboard_post_id' schema column. Essential for mapping votes to their respective content items."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID referencing the member who made the vote, matching the 'discussionboard_member_id' schema property. Used in enforcing unique voting, audit, rate limiting."},"vote_type":{"oneOf":[{"const":-1,"description":"Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. Follows 'vote_type' column."},{"const":0,"description":"Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. Follows 'vote_type' column."},{"const":1,"description":"Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. Follows 'vote_type' column."}],"description":"Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. Follows 'vote_type' column."},"created_at":{"type":"string","format":"date-time","description":"When the vote was created/cast. Matches 'created_at' column, supports time series/analytics."}},"required":["id","discussionboard_post_id","discussionboard_member_id","vote_type","created_at"],"description":"A record representing a single member's upvote, downvote, or neutralization/removal for a post. Covers all schema-present columns and is essential for post engagement tracking, member interaction review, and anti-abuse mechanisms. Never contains derived, sensitive, or non-schema fields."},"IPostVote.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Optional filter: target post UUID. Returns votes for this post.\n\nMaps to the 'discussionboard_post_id' column of the post_votes table, enabling analytic or moderation queries for a post's engagement."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optional filter: member UUID. Returns votes made by this member, for profile history or moderation.\n\nRefers to 'discussionboard_member_id' in the schema."},"vote_type":{"oneOf":[{"const":-1,"description":"Optional filter: specifies which type of votes to return (upvote, downvote, or neutral). Used for reviewing only positive/negative feedback, or neutralizations."},{"const":0,"description":"Optional filter: specifies which type of votes to return (upvote, downvote, or neutral). Used for reviewing only positive/negative feedback, or neutralizations."},{"const":1,"description":"Optional filter: specifies which type of votes to return (upvote, downvote, or neutral). Used for reviewing only positive/negative feedback, or neutralizations."}],"description":"Optional filter: specifies which type of votes to return (upvote, downvote, or neutral). Used for reviewing only positive/negative feedback, or neutralizations."},"created_at":{"type":"string","format":"date-time","description":"Optional filter: when the vote was cast. Allows time-based analysis in analytic dashboards."}},"description":"Request type for searching, filtering, or paginating post vote records. Accepts only fields that exist in the discussionboard_post_votes Prisma schema for secure and type-safe queries.","required":[]},"IPageIPostVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Metadata about the current page, total records, page count, and limit, supporting navigation through large vote records as per standard paging conventions for scalable retrievals."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostVote"},"description":"List of post vote records for this page. Each item is a schema-complete description of an individual member's vote on a specific post, audit-ready for administrative or moderator analysis."}},"required":["pagination","data"],"description":"Paginated result envelope for a list of Post Vote records, providing page navigation details and an array of schema-accurate vote objects for profile, moderation, or analytics use cases."},"IPostVote.IUpdate":{"type":"object","properties":{"vote_type":{"oneOf":[{"const":-1,"description":"The updated vote value for this record: 1 (upvote), -1 (downvote), or 0 (neutral).\n\nFollows the 'vote_type' column in post_votes schema. Used by admin/moderator to correct voting actions, handle abuse, or recover from user error."},{"const":0,"description":"The updated vote value for this record: 1 (upvote), -1 (downvote), or 0 (neutral).\n\nFollows the 'vote_type' column in post_votes schema. Used by admin/moderator to correct voting actions, handle abuse, or recover from user error."},{"const":1,"description":"The updated vote value for this record: 1 (upvote), -1 (downvote), or 0 (neutral).\n\nFollows the 'vote_type' column in post_votes schema. Used by admin/moderator to correct voting actions, handle abuse, or recover from user error."}],"description":"The updated vote value for this record: 1 (upvote), -1 (downvote), or 0 (neutral).\n\nFollows the 'vote_type' column in post_votes schema. Used by admin/moderator to correct voting actions, handle abuse, or recover from user error."},"created_at":{"type":"string","format":"date-time","description":"The updated timestamp for when the vote was cast (optional, for correcting audit/compliance issues).\n\nCorresponds to the 'created_at' column. Generally modified only by admins/mods."}},"description":"Object used to update a member's vote on a post, only for fields present in the post_votes schema. Allows fixing vote_type due to moderation or error; rarely modified except in compliance scenarios.","required":[]},"IPostReport.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post being reported as problematic for moderation workflows.\n\nImplements the 'discussionboard_post_id' column in the post_reports Prisma table. Required for linking the report to the correct post entity."},"reporter_member_id":{"type":"string","format":"uuid","description":"UUID of the member filing the report. Follows 'reporter_member_id' column in schema, securing audit trail and enforcing moderation flow rules."},"report_type_id":{"type":"string","format":"uuid","description":"UUID referencing the reason or category for report (e.g., spam, abuse, misinformation).\n\nMaps to the 'report_type_id' schema column, which is a foreign key to the list of allowed report types, enabling analytic breakdown and reporting workflow dispatch."},"description":{"type":"string","description":"Optional reporter-supplied context or descriptive explanation for the report. Nullable in schema.\n\nMatches the 'description' column; supports nuanced case handling and moderation transparency."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was created, as in 'created_at' column. Holds the date/time for reporting, required for audit, compliance, and sequencing moderation reviews."}},"required":["discussionboard_post_id","reporter_member_id","report_type_id","created_at"],"description":"Object for creating a new post report record, as stored in the discussionboard_post_reports table. Each field is tied directly to the schema documentation and is critical for ensuring tracing, reporting, and compliance in the moderation workflow. Reports inappropriate, abusive, or spam content on a post for investigation by moderators or admin."},"IPostReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post report record in the discussionboard_post_reports table. Unique identifier for this individual report."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID referencing the reported post. Required for mapping the report within the moderation workflow."},"reporter_member_id":{"type":"string","format":"uuid","description":"UUID representing the member who filed this report, as in 'reporter_member_id' column. Needed for moderation/audit transparency."},"report_type_id":{"type":"string","format":"uuid","description":"UUID reference to the report reason/category ('report_type_id' column), tied to a valid moderation report type."},"description":{"type":"string","description":"Nullable string: the explanation or context for the report. As in 'description' column. May be empty if report is by quick-action/report button."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp, ISO 8601, matching 'created_at' column. Required for audit, compliance, and report reviews."}},"required":["id","discussionboard_post_id","reporter_member_id","report_type_id","created_at"],"description":"Atomic record of a member-submitted report against a post, stored in the discussionboard_post_reports schema. Directly supports content moderation, audit investigation, and anti-abuse policies. Contains all schema-defined fields and no sensitive or non-existent properties."},"IPostReport.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Optional filter to get reports for a specific post (UUID).\n\nUsed in moderator review queue or post-centric analytics."},"reporter_member_id":{"type":"string","format":"uuid","description":"Optional filter for all reports filed by a particular member.\n\nTied to 'reporter_member_id' column of the schema."},"report_type_id":{"type":"string","format":"uuid","description":"Optional filter by reason/category of report (as in 'report_type_id' column).\n\nMatches foreign key for type analytics and workflow split."},"created_at":{"type":"string","format":"date-time","description":"Optional filter for timestamp (ISO 8601) when the report was recorded.\n\nPermits analytic/temporal queries in moderation dashboards."}},"description":"Request type for searching, filtering, or paginating post report records by schema-supported columns. Used by moderator/admin for compliance, investigation, or workflow management of reported posts.","required":[]},"IPageIPostReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Metadata for the current page, supporting scaling through large report records as required by moderator/audit access."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostReport"},"description":"The collection of individual post report records for this page, each matching the schema precisely for audit, review, and workflow triage."}},"required":["pagination","data"],"description":"Paginated page envelope containing post report records for moderator/admin review. Supports scalable workflows, audit queries, compliance snapshots, and member appeal workflows, all by exposing only schema-present fields."},"IPostReport.IUpdate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Optional: update the reported post reference in rare workflows (e.g., admin correction or dispute resolution)."},"reporter_member_id":{"type":"string","format":"uuid","description":"Optional: update the reporting member reference if correcting administrative errors or transfer of responsibility."},"report_type_id":{"type":"string","format":"uuid","description":"Update the category of the report, e.g. if a moderator reclassifies the incident. See report_type_id in schema."},"description":{"type":"string","description":"Allows for editing the explanatory text/context, especially in response to appeals or moderator corrections."}},"description":"Object for updating allowed fields on a post report record. Only modifiable for rare moderation/audit corrections; general user workflows should treat all fields as immutable.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Limit of records per page.\n\n@default 100"},"records":{"type":"integer","description":"Total records in the database."},"pages":{"type":"integer","description":"Total pages available, equal to records/limit with ceiling."}},"required":["current","limit","records","pages"],"description":"Pagination metadata as required for paged list responses supporting consistent navigation and scaling in discussionboard API."},"IPostSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post snapshot entry in the discussionboard_post_snapshots table, used for retrieval, version audit, or rollback."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID referencing the parent post whose version this snapshot represents. Required in all version audit, rollback, and compliance queries."},"editor_member_id":{"type":"string","format":"uuid","description":"UUID for the member who made the edit, if available (nullable for system-generated). Used for accountability and audit trails. Null when snapshot is created by system/admin. DO NOT expose in cases where this could violate impersonation security policies."},"title":{"type":"string","description":"Snapshot of the post's title as persisted in this version. Atomic and immutable after creation."},"body":{"type":"string","description":"Textual content of the post at this snapshot version. Immutable, for rollback/review purposes."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp recording when the snapshot was taken.\n\nEnsures auditability and enables precise version comparisons/restorations."}},"required":["id","discussionboard_post_id","title","body","taken_at"],"description":"Represents a historical record of a post's content for audit, rollback, and compliance in the discussion board. Used in version history panels, moderator investigations, and disputed content appeals. All fields are first-class, schema-driven table columns; no sensitive or system-only data included."}}},"completed":118,"total":191,"step":0,"created_at":"2025-07-25T05:16:48.159Z"},"tokenUsage":{"facade":{"aggregate":{"total":2042667,"input":{"total":1938788,"cached":0},"output":{"total":103879,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2042667,"input":{"total":1938788,"cached":0},"output":{"total":103879,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2042667,"input":{"total":1938788,"cached":0},"output":{"total":103879,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2042667,"input":{"total":1938788,"cached":0},"output":{"total":103879,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardThreads.ICreate":{"type":"object","description":"Request schema for creating a new thread in the discussion board (discussionboard_threads table). This type represents the data required to initialize a thread, strictly derived from the Prisma schema and ERD.\n\nAll properties should be matched to the corresponding columns of the database table, ensuring database-level constraints and business rules. This type omits auto-generated and system-managed fields, and NEVER allows the client to specify actor/ownership fields not in the schema (such as created_by or author_id, unless specifically present). Ownership and timestamps should be system-resolved except where allowed by schema.\n\n- board_id: Board wherein the thread is posted.\n- author_member_id: The creator (must match authentication context, not from body in secure production use).\n- title: Thread title (must be unique per board, as per Prisma constraint).\n- body: Optional description/body content.","properties":{"board_id":{"type":"string","format":"uuid","description":"UUID referencing the parent board (discussionboard_boards.id). Required by schema, enables navigation and access constraint."},"author_member_id":{"type":"string","format":"uuid","description":"UUID referencing the member (discussionboard_members.id) who creates the thread. Foreign key—must exist in actors table. Ownership, for audit and moderation.\n\nNOTE: In production, this should ONLY be derived from the authentication context, not settable by the client directly, to prevent impersonation risks."},"title":{"type":"string","description":"Required thread title. Uniquely identifies the thread within a board (enforced by Prisma unique constraint on [board_id, title]). Used for thread navigation and display."},"body":{"oneOf":[{"type":"string","description":"Optional main thread body/content (nullable in schema). May be omitted if thread is a simple subject line. Used for first-post introduction or context, matched to ERD."},{"type":"null"}],"description":"Optional main thread body/content (nullable in schema). May be omitted if thread is a simple subject line. Used for first-post introduction or context, matched to ERD."}},"required":["board_id","author_member_id","title"]},"IDiscussionboardThreads":{"type":"object","description":"Full thread entity as stored in the discussionboard_threads table. Used for response bodies when retrieving full thread information. Derived strictly from the Prisma schema and ERD. Sensitive/internal fields (such as moderation or deleted_by data) are omitted unless present in the schema.\n\nThis type provides all properties available on a normal SELECT; these include linkage, timestamps, and soft deletion tracking if available. NEVER includes password or security fields.\n\nLinks to board (by id), author, and version tracking.\n\n- id: Thread UUID.\n- board_id: Reference to parent board.\n- author_member_id: Author (poster, member).\n- title/body: Core content fields.\n- created_at/updated_at: Timestamps.\n- deleted_at: Null unless soft-deleted.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for this thread entity."},"board_id":{"type":"string","format":"uuid","description":"Foreign key: which board this thread belongs to."},"author_member_id":{"type":"string","format":"uuid","description":"Foreign key: authoring member of this thread."},"title":{"type":"string","description":"The thread title—see schema and requirements for uniqueness and display rules."},"body":{"oneOf":[{"type":"string","description":"Optional body/description text for the thread subject (nullable in schema, may be empty for brief threads)."},{"type":"null"}],"description":"Optional body/description text for the thread subject (nullable in schema, may be empty for brief threads)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this thread was created (ISO 8601 format). Field used for creation ordering, audit, and timeline view."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent edit to this thread. Used for ordering, audit, and UX 'edited' marker."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable soft delete marker. Set if thread is deleted (moved to deleted state, not removed from DB). Null if live. Field for moderation, audit, or restore."},{"type":"null"}],"description":"Nullable soft delete marker. Set if thread is deleted (moved to deleted state, not removed from DB). Null if live. Field for moderation, audit, or restore."}},"required":["id","board_id","author_member_id","title","created_at","updated_at"]},"IDiscussionboardThreads.IRequest":{"type":"object","description":"Thread search/filter/pagination request object. Used in PATCH endpoints to find/filter/list threads in the discussionboard_threads table per business requirements.\n\nProperties provide advanced filtering options: e.g. search by board, author, time window, deletion status. Pagination fields may refer to platform's IPage.IRequest contract.\n\n- board_id: Filter by parent board.\n- author_member_id: Filter by author.\n- title: Text search (exact/partial).\n- created_at_from/created_at_to: Time range boundaries.\n- deleted: Boolean toggle to include/exclude soft-deleted records.\n- page/limit: Pagination controls.","properties":{"board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: limit to threads within this board."},{"type":"null"}],"description":"Optional: limit to threads within this board."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: filter threads by author id (actor/member)."},{"type":"null"}],"description":"Optional: filter threads by author id (actor/member)."},"title":{"oneOf":[{"type":"string","description":"Optional: Filter by exact or partial match on thread title."},{"type":"null"}],"description":"Optional: Filter by exact or partial match on thread title."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: lower bound (inclusive) for creation timestamp."},{"type":"null"}],"description":"Optional: lower bound (inclusive) for creation timestamp."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: upper bound (inclusive) for creation timestamp."},{"type":"null"}],"description":"Optional: upper bound (inclusive) for creation timestamp."},"deleted":{"oneOf":[{"type":"boolean","description":"When true, only soft-deleted threads are listed. When false, only non-deleted threads. When omitted/null, both are included."},{"type":"null"}],"description":"When true, only soft-deleted threads are listed. When false, only non-deleted threads. When omitted/null, both are included."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: Page number (1-based)."},{"type":"null"}],"description":"Pagination: Page number (1-based)."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: Max records per page."},{"type":"null"}],"description":"Pagination: Max records per page."}},"required":[]},"IPageIDiscussionboardThreads":{"type":"object","description":"A paginated result type of thread entities (IPage<IDiscussionboardThreads>). Standard list view with result array and pagination metadata as in platform IPage contract.\n\n- pagination: Object containing page, limit, total record count, total pages.\n- data: Array of thread records for the selected page/filters.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","description":"Array of thread objects for this page.","items":{"$ref":"#/components/schemas/IDiscussionboardThreads"}}},"required":["pagination","data"]},"IDiscussionboardThreads.IUpdate":{"type":"object","description":"Patch/update schema for a thread entity in the discussionboard_threads table.\n\nApplicable to PUT/patch endpoints. Only schema-defined fields are included; system or audit fields are not present except as required. For security, client cannot update ownership or audit trail fields directly (e.g., cannot change author_member_id unless allowed by business logic).\n\n- title: Updated thread title.\n- body: Updated/overwritten thread body/description.","properties":{"title":{"oneOf":[{"type":"string","description":"(Optional) New/edited title for the thread."},{"type":"null"}],"description":"(Optional) New/edited title for the thread."},"body":{"oneOf":[{"type":"string","description":"(Optional) Updated thread main content, can be set to null or overwritten."},{"type":"null"}],"description":"(Optional) Updated thread main content, can be set to null or overwritten."}},"required":[]},"IDiscussionboardThreadSnapshots.ICreate":{"type":"object","description":"Schema for posting a new thread snapshot in the discussionboard_thread_snapshots table.\n\nRecords a version of the thread's state at a given point. Used during edit, moderation, or rollback workflows. Only schema columns: thread_id, actor_id, title, optional body, optional reason.","properties":{"thread_id":{"type":"string","format":"uuid","description":"UUID of thread being snapshotted (discussionboard_threads.id)."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: UUID of actor (member causing this version). May be system/null if auto-edit."},{"type":"null"}],"description":"Optional: UUID of actor (member causing this version). May be system/null if auto-edit."},"title":{"type":"string","description":"Snapshot of thread title at version point."},"body":{"oneOf":[{"type":"string","description":"Optional thread body at time of snapshot."},{"type":"null"}],"description":"Optional thread body at time of snapshot."},"reason":{"oneOf":[{"type":"string","description":"Optional moderator/user reason for this snapshot (e.g., edit, rule violation, rollback note)."},{"type":"null"}],"description":"Optional moderator/user reason for this snapshot (e.g., edit, rule violation, rollback note)."}},"required":["thread_id","title"]},"IDiscussionboardThreadSnapshots":{"type":"object","description":"Represents a versioned record of a thread's state (discussionboard_thread_snapshots table).\n\nContains all recorded fields: id, thread_id, actor_id (nullable), title, body (nullable), reason (nullable), created_at.","properties":{"id":{"type":"string","format":"uuid","description":"Unique id for this snapshot."},"thread_id":{"type":"string","format":"uuid","description":"Id of thread being snapshotted."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Null/system or actor for this snapshot, if recorded."},{"type":"null"}],"description":"Null/system or actor for this snapshot, if recorded."},"title":{"type":"string","description":"Thread title at this version."},"body":{"oneOf":[{"type":"string","description":"Thread body at this version."},{"type":"null"}],"description":"Thread body at this version."},"reason":{"oneOf":[{"type":"string","description":"Versioning reason/moderation note/audit field."},{"type":"null"}],"description":"Versioning reason/moderation note/audit field."},"created_at":{"type":"string","format":"date-time","description":"Timestamp this snapshot was created."}},"required":["id","thread_id","title","created_at"]},"IDiscussionboardThreadSnapshots.IRequest":{"type":"object","description":"Request schema for listing/searching thread snapshots (discussionboard_thread_snapshots). Used to filter/audit version history.\n\nProvides filtering/searching by thread, actor, time, and support for pagination.\n- thread_id: Filter by target thread.\n- actor_id: Filter by editing actor.\n- created_at_from/to: Time range narrowing.\n- page/limit: Pagination.","properties":{"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: limit to snapshots for this thread."},{"type":"null"}],"description":"Optional: limit to snapshots for this thread."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: limit to snapshots created by this actor."},{"type":"null"}],"description":"Optional: limit to snapshots created by this actor."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: filter snapshots after this date/time."},{"type":"null"}],"description":"Optional: filter snapshots after this date/time."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: filter snapshots before this date/time."},{"type":"null"}],"description":"Optional: filter snapshots before this date/time."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: page number."},{"type":"null"}],"description":"Pagination: page number."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: max per page."},{"type":"null"}],"description":"Pagination: max per page."}},"required":[]},"IPageIDiscussionboardThreadSnapshots":{"type":"object","description":"Paginated envelope of thread snapshot records (IPage<IDiscussionboardThreadSnapshots>). Standard IPage structure: pagination meta + record list.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreadSnapshots"}}},"required":["pagination","data"]},"IDiscussionboardThreadSnapshot.IUpdate":{"type":"object","description":"Update schema for editing a thread snapshot record. Only updatable schema fields are referenced.\n\nMay only permit updates to nullable fields (body, reason); id/thread_id/title are typically immutable for audit compliance.\n- body: Corrected/updated version text.\n- reason: Clarified/more detailed rationale for versioning.\n\nNote: Edits may be locked in production deployments for audit trust.","properties":{"body":{"oneOf":[{"type":"string","description":"(Optional) Overwrite/correct thread body at this snapshot version."},{"type":"null"}],"description":"(Optional) Overwrite/correct thread body at this snapshot version."},"reason":{"oneOf":[{"type":"string","description":"(Optional) Correction/annotation for version edit reason."},{"type":"null"}],"description":"(Optional) Correction/annotation for version edit reason."}},"required":[]},"IDiscussionboardThreadSnapshot":{"type":"object","description":"Minimal view for a single thread snapshot—for pure audit or retrieval purposes (IDiscussionboardThreadSnapshots, non-list form). Matches details from the main table.\n\n- id: Unique record.\n- thread_id: Parent thread.\n- actor_id: Editor (nullable/system).\n- title/body/reason: Main fields.\n- created_at: Snapshot timestamp.","properties":{"id":{"type":"string","format":"uuid"},"thread_id":{"type":"string","format":"uuid"},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}]},"title":{"type":"string"},"body":{"oneOf":[{"type":"string"},{"type":"null"}]},"reason":{"oneOf":[{"type":"string"},{"type":"null"}]},"created_at":{"type":"string","format":"date-time"}},"required":["id","thread_id","title","created_at"]},"IDiscussionboardThreadTag.ICreate":{"type":"object","description":"Request schema for associating a tag with a thread (discussionboard_thread_tags).\n\nEstablishes the M:N relation between a thread and a tag. Only referenced schema fields are present: thread_id and assigned_at are required; removed_at is optional/null for active.\n\n- thread_id: Target thread (UUID).\n- assigned_at: Time of tag assignment.\n- removed_at: When tag was removed; null if active.","properties":{"thread_id":{"type":"string","format":"uuid","description":"UUID of target thread (discussionboard_threads.id)."},"assigned_at":{"type":"string","format":"date-time","description":"When the tag was assigned to the thread (audit/history field)."},"removed_at":{"oneOf":[{"type":"string","format":"date-time","description":"When (if) the tag was later removed from this thread. Null if still active."},{"type":"null"}],"description":"When (if) the tag was later removed from this thread. Null if still active."}},"required":["thread_id","assigned_at"]},"IPage.IPagination":{"type":"object","description":"Page information for paginated results.\n\nFollows IPage.IPagination standard from Samchon @autobe API documentation.\n\n- current: Current page number.\n- limit: Limitation of records per page (default 100).\n- records: Total number of records in the database (across all pages).\n- pages: Total number of pages (records/limit, ceiling).","properties":{"current":{"type":"integer","description":"Current page number (uint32 type, starts at 1). Always required."},"limit":{"type":"integer","description":"Max records per page (uint32 type)."},"records":{"type":"integer","description":"Total records in database (uint32 type)."},"pages":{"type":"integer","description":"Total pages (records/limit, ceiling)."}},"required":["current","limit","records","pages"]}}},"completed":130,"total":191,"step":0,"created_at":"2025-07-25T05:16:52.719Z"},"tokenUsage":{"facade":{"aggregate":{"total":2138935,"input":{"total":2031966,"cached":0},"output":{"total":106969,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2138935,"input":{"total":2031966,"cached":0},"output":{"total":106969,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2138935,"input":{"total":2031966,"cached":0},"output":{"total":106969,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2138935,"input":{"total":2031966,"cached":0},"output":{"total":106969,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardMemberPreference.IUpdate":{"type":"object","properties":{"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"이 설정은 사용자가 이메일 알림을 받고자 하는지 결정합니다. 해당 값은 null이 될 수 있으며, 사용자가 기본값을 따르기로 선택했음을 나타냅니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_email_notifications 컬럼에 기반합니다. 사용자는 UI 또는 API를 통해 알림을 개별적으로 활성화 혹은 비활성화 할 수 있으며, null 값은 시스템의 기본 정책에게 위임함을 의미합니다."},{"type":"null","description":"이 설정은 사용자가 이메일 알림을 받고자 하는지 결정합니다. 해당 값은 null이 될 수 있으며, 사용자가 기본값을 따르기로 선택했음을 나타냅니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_email_notifications 컬럼에 기반합니다. 사용자는 UI 또는 API를 통해 알림을 개별적으로 활성화 혹은 비활성화 할 수 있으며, null 값은 시스템의 기본 정책에게 위임함을 의미합니다."}],"description":"이 설정은 사용자가 이메일 알림을 받고자 하는지 결정합니다. 해당 값은 null이 될 수 있으며, 사용자가 기본값을 따르기로 선택했음을 나타냅니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_email_notifications 컬럼에 기반합니다. 사용자는 UI 또는 API를 통해 알림을 개별적으로 활성화 혹은 비활성화 할 수 있으며, null 값은 시스템의 기본 정책에게 위임함을 의미합니다."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"사용자가 푸시 알림(브라우저/모바일)을 수신할지 선택합니다. null 값도 허용되며, 특별한 설정이 없을 경우 플랫폼의 일반 기본값이 적용됩니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_push_notifications 컬럼과 매핑되며, 사용자는 본인 선호도에 따라 값을 조절할 수 있습니다."},{"type":"null","description":"사용자가 푸시 알림(브라우저/모바일)을 수신할지 선택합니다. null 값도 허용되며, 특별한 설정이 없을 경우 플랫폼의 일반 기본값이 적용됩니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_push_notifications 컬럼과 매핑되며, 사용자는 본인 선호도에 따라 값을 조절할 수 있습니다."}],"description":"사용자가 푸시 알림(브라우저/모바일)을 수신할지 선택합니다. null 값도 허용되며, 특별한 설정이 없을 경우 플랫폼의 일반 기본값이 적용됩니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_push_notifications 컬럼과 매핑되며, 사용자는 본인 선호도에 따라 값을 조절할 수 있습니다."},"preferred_language":{"oneOf":[{"type":"string","description":"사용자의 선호 언어(예: 'en', 'ko')를 지정합니다. 이 필드는 null이 될 수 있고, null이면 시스템 전체 기본 로케일이 사용자에게 적용됩니다. 언어 코드는 ISO 표준에 부합해야 합니다.\n\ndiscussionboard_member_preferences의 preferred_language 컬럼에 직접 매핑됩니다. 언어 현지화/로컬라이징 기능에 필수적입니다."},{"type":"null","description":"사용자의 선호 언어(예: 'en', 'ko')를 지정합니다. 이 필드는 null이 될 수 있고, null이면 시스템 전체 기본 로케일이 사용자에게 적용됩니다. 언어 코드는 ISO 표준에 부합해야 합니다.\n\ndiscussionboard_member_preferences의 preferred_language 컬럼에 직접 매핑됩니다. 언어 현지화/로컬라이징 기능에 필수적입니다."}],"description":"사용자의 선호 언어(예: 'en', 'ko')를 지정합니다. 이 필드는 null이 될 수 있고, null이면 시스템 전체 기본 로케일이 사용자에게 적용됩니다. 언어 코드는 ISO 표준에 부합해야 합니다.\n\ndiscussionboard_member_preferences의 preferred_language 컬럼에 직접 매핑됩니다. 언어 현지화/로컬라이징 기능에 필수적입니다."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"다크 모드 UI 사용 여부를 정의합니다. true로 설정 시 어두운 테마가 활성화 됩니다.\n\nPrisma discussionboard_member_preferences의 dark_mode_enabled 컬럼에 기반하며, null 값은 자동/기본 테마를 의미합니다."},{"type":"null","description":"다크 모드 UI 사용 여부를 정의합니다. true로 설정 시 어두운 테마가 활성화 됩니다.\n\nPrisma discussionboard_member_preferences의 dark_mode_enabled 컬럼에 기반하며, null 값은 자동/기본 테마를 의미합니다."}],"description":"다크 모드 UI 사용 여부를 정의합니다. true로 설정 시 어두운 테마가 활성화 됩니다.\n\nPrisma discussionboard_member_preferences의 dark_mode_enabled 컬럼에 기반하며, null 값은 자동/기본 테마를 의미합니다."}},"description":"사용자 알림 및 UI 환경설정 수정 API 요청에 사용되는 타입입니다. discussionboard_member_preferences 테이블의 각 컬럼과 대응합니다.\n\n각 필드는 사용자가 원하는 알림 방식(이메일, 푸시), UI 다크 모드 선호, 선호 언어 등과 직접적으로 연결되며, null 값은 해당 옵션을 시스템 기본값에 위임한다는 뜻입니다. 이 타입은 수정시 일부만 전달할 수 있어 모두 선택적입니다.","required":[]},"IDiscussionboardMemberPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"테이블 discussionboard_member_preferences의 PK로 사용되는 UUID 문자열입니다. 시스템 생성/관리 용도로만 읽기 전용입니다.\n\n알림/환경설정 레코드의 고유 식별자 역할을 하며, 클라이언트가 값을 지정하는 것이 아니라 서버가 자동 생성합니다."},"member_id":{"type":"string","format":"uuid","description":"이 환경설정이 속한 member({@link discussionboard_members.id})의 UUID입니다. 이 필드는 1:1 고유 매핑을 보장합니다.\n\n이 필드는 member-환경설정 데이터를 연결시키는 참조이고, 프로파일 관리나 알림 설정 변경 요청시 인증된 사용자가 소유해야 합니다."},"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"사용자가 이메일 알림을 받고 싶어하는지의 여부입니다. true이면 이메일 알림 활성, false이면 비활성, null은 플랫폼 기본 값 또는 시스템 정책을 따름을 의미합니다.\n\nPrisma discussionboard_member_preferences의 receive_email_notifications 컬럼에 일치합니다. UI에서는 체크박스 형태로 노출될 수 있습니다."},{"type":"null","description":"사용자가 이메일 알림을 받고 싶어하는지의 여부입니다. true이면 이메일 알림 활성, false이면 비활성, null은 플랫폼 기본 값 또는 시스템 정책을 따름을 의미합니다.\n\nPrisma discussionboard_member_preferences의 receive_email_notifications 컬럼에 일치합니다. UI에서는 체크박스 형태로 노출될 수 있습니다."}],"description":"사용자가 이메일 알림을 받고 싶어하는지의 여부입니다. true이면 이메일 알림 활성, false이면 비활성, null은 플랫폼 기본 값 또는 시스템 정책을 따름을 의미합니다.\n\nPrisma discussionboard_member_preferences의 receive_email_notifications 컬럼에 일치합니다. UI에서는 체크박스 형태로 노출될 수 있습니다."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"브라우저 또는 모바일 푸시 알림 수신 여부를 설정합니다. true/false 둘 다 가능하며, null값은 시스템의 기본을 따릅니다.\n\ndiscussionboard_member_preferences의 receive_push_notifications와 일치하며, 사용자가 원하지 않으면 false로 지정 가능합니다."},{"type":"null","description":"브라우저 또는 모바일 푸시 알림 수신 여부를 설정합니다. true/false 둘 다 가능하며, null값은 시스템의 기본을 따릅니다.\n\ndiscussionboard_member_preferences의 receive_push_notifications와 일치하며, 사용자가 원하지 않으면 false로 지정 가능합니다."}],"description":"브라우저 또는 모바일 푸시 알림 수신 여부를 설정합니다. true/false 둘 다 가능하며, null값은 시스템의 기본을 따릅니다.\n\ndiscussionboard_member_preferences의 receive_push_notifications와 일치하며, 사용자가 원하지 않으면 false로 지정 가능합니다."},"preferred_language":{"oneOf":[{"type":"string","description":"사용자 선호 언어 코드(예: 'en', 'ko' 등 ISO코드). null값이면 시스템 기본이 적용됩니다.\n\ndiscussionboard_member_preferences의 preferred_language와 직접 매핑됩니다. 로컬라이징/다국어 지원에 중요합니다."},{"type":"null","description":"사용자 선호 언어 코드(예: 'en', 'ko' 등 ISO코드). null값이면 시스템 기본이 적용됩니다.\n\ndiscussionboard_member_preferences의 preferred_language와 직접 매핑됩니다. 로컬라이징/다국어 지원에 중요합니다."}],"description":"사용자 선호 언어 코드(예: 'en', 'ko' 등 ISO코드). null값이면 시스템 기본이 적용됩니다.\n\ndiscussionboard_member_preferences의 preferred_language와 직접 매핑됩니다. 로컬라이징/다국어 지원에 중요합니다."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"다크 모드 UI 선호 여부(true/false/null). true로 설정할 경우 어두운 테마가 활성화됩니다.\n\nPrisma discussionboard_member_preferences dark_mode_enabled 컬럼에 기반하고, null은 시스템 테마를 적용함을 의미합니다."},{"type":"null","description":"다크 모드 UI 선호 여부(true/false/null). true로 설정할 경우 어두운 테마가 활성화됩니다.\n\nPrisma discussionboard_member_preferences dark_mode_enabled 컬럼에 기반하고, null은 시스템 테마를 적용함을 의미합니다."}],"description":"다크 모드 UI 선호 여부(true/false/null). true로 설정할 경우 어두운 테마가 활성화됩니다.\n\nPrisma discussionboard_member_preferences dark_mode_enabled 컬럼에 기반하고, null은 시스템 테마를 적용함을 의미합니다."}},"required":["id","member_id"],"description":"알림 및 UI 환경설정(프리퍼런스) 레코드의 전체 정보를 표현하는 타입. discussionboard_member_preferences 테이블의 각 컬럼 1:1 매핑.\n\n각 필드는 해당 사용자의 환경설정 상태(이메일/푸시 알림, 언어, 다크모드 등)를 나타내며, 일부는 null을 수용하여 시스템 기본값이나 '미설정' 의미를 지원합니다. 관리/상세 조회 응답에 사용됩니다."},"IDiscussionboardModerator.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Moderator로 할당되는 대상 discussionboard_members.id의 PK(UUID).\n\n해당 member는 이미 시스템 회원이어야 하며, 이미 moderator이면 중복 할당 불가(고유 제약조건)."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"이 moderator role을 할당한 admin의 discussionboard_admins.id (UUID).\n\n로그/audit trail용. self-assign 등은 없으며, 항상 기존 admin의 명시적 승인 필요."},"assigned_at":{"type":"string","format":"date-time","description":"Moderator 권한이 부여된 시점의 ISO 8601 형식 타임스탬프(예: 2025-07-24T11:15:00+09:00).\n\n기록/보안 준수 목적으로 실제 부여 시각을 남깁니다."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"임시 Moderator 권한 만료 일시(없으면 null, 즉 영구 할당).\n\n일시적 '게스트' moderator의 경우 페널티 만료 등 조건에서 활용. null이면 영구."},{"type":"null","format":"date-time","description":"임시 Moderator 권한 만료 일시(없으면 null, 즉 영구 할당).\n\n일시적 '게스트' moderator의 경우 페널티 만료 등 조건에서 활용. null이면 영구."}],"description":"임시 Moderator 권한 만료 일시(없으면 null, 즉 영구 할당).\n\n일시적 '게스트' moderator의 경우 페널티 만료 등 조건에서 활용. null이면 영구."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Moderator 권한이 회수(해제)된 일시. null => 현재 유효 상태.\n\n관리자가 권한 회수시 해당 시점을 기록, 감사 대응에 활용."},{"type":"null","format":"date-time","description":"Moderator 권한이 회수(해제)된 일시. null => 현재 유효 상태.\n\n관리자가 권한 회수시 해당 시점을 기록, 감사 대응에 활용."}],"description":"Moderator 권한이 회수(해제)된 일시. null => 현재 유효 상태.\n\n관리자가 권한 회수시 해당 시점을 기록, 감사 대응에 활용."}},"required":["member_id","assigned_by_admin_id","assigned_at"],"description":"Moderator(moderator 권한 부여) 레코드 생성/할당 요청용 타입. discussionboard_moderators의 컬럼과 매핑되며, member_id, assigned_by_admin_id, assigned_at은 필수이며, expires_at과 revoked_at은 선택(기본 null)입니다.\n\n일반적으로 admin 역할이 부여하며, member_id는 이미 시스템 회원이어야 합니다. 각 필드의 값과 동작은 정책 및 감사/관리 규칙을 따릅니다."},"IDiscussionboardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Moderator 할당 레코드의 PK(UUID). 시스템 어드민만 읽기/관리 가능.\n\n이 필드는 각 moderator role의 고유 식별자로, 관리 및 검색, 감사 로깅에 사용됩니다."},"member_id":{"type":"string","format":"uuid","description":"Moderator 할당 대상 discussionboard_members.id의 PK(UUID)."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Moderator role 부여자인 admin의 discussionboard_admins.id (UUID)."},"assigned_at":{"type":"string","format":"date-time","description":"Moderator 권한 할당 시각(ISO8601, 타임존포함)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"임시 Moderator 종료 예정일(null이면 영구)."},{"type":"null","format":"date-time","description":"임시 Moderator 종료 예정일(null이면 영구)."}],"description":"임시 Moderator 종료 예정일(null이면 영구)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Moderator 권한 회수 일시. null이면 현직."},{"type":"null","format":"date-time","description":"Moderator 권한 회수 일시. null이면 현직."}],"description":"Moderator 권한 회수 일시. null이면 현직."}},"required":["id","member_id","assigned_by_admin_id","assigned_at"],"description":"Moderator(moderator 권한 임명) 레코드의 전체 정보. discussionboard_moderators 테이블 컬럼 1:1 매핑.\n\n각 필드는 Moderator로 지정된 유저, 임명자(Admin), 임명/만료/회수 시각 등 관리 감사 시나리오에 적합하게 설계. 응답 및 내부 권한 관리에서 전면 활용됨."},"IDiscussionboardModerator.IRequest":{"type":"object","properties":{"member_id":{"oneOf":[{"type":"string","format":"uuid","description":"moderator 검색시 member FK 필터용 (nullable)."},{"type":"null","format":"uuid","description":"moderator 검색시 member FK 필터용 (nullable)."}],"description":"moderator 검색시 member FK 필터용 (nullable)."},"assigned_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"지정자(Admin) 필터링에 사용 (nullable)."},{"type":"null","format":"uuid","description":"지정자(Admin) 필터링에 사용 (nullable)."}],"description":"지정자(Admin) 필터링에 사용 (nullable)."},"assigned_at":{"oneOf":[{"type":"string","format":"date-time","description":"지정 시점 범위 검색 등에서 사용 (nullable)."},{"type":"null","format":"date-time","description":"지정 시점 범위 검색 등에서 사용 (nullable)."}],"description":"지정 시점 범위 검색 등에서 사용 (nullable)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료(혹은 미래/과거) moderator 검색에 사용 (nullable)."},{"type":"null","format":"date-time","description":"만료(혹은 미래/과거) moderator 검색에 사용 (nullable)."}],"description":"만료(혹은 미래/과거) moderator 검색에 사용 (nullable)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"회수/비활성 moderator 상태 필터 (nullable)."},{"type":"null","format":"date-time","description":"회수/비활성 moderator 상태 필터 (nullable)."}],"description":"회수/비활성 moderator 상태 필터 (nullable)."}},"description":"Moderator 목록/검색/필터링을 위한 요청 타입. 지정자, 대상 멤버, 기간 등 다양한 컬럼(모두 선택적, null 허용) 필터링에 사용하며, discussionboard_moderators 테이블 필드와 직접 매핑됨.\n\n관리 대시보드, 자동 권한관리 등에서 고급 쿼리/필터 목적에 적합합니다.","required":[]},"IPageIDiscussionboardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerator"}}},"required":["pagination","data"],"description":"Moderator 엔티티(IPage<IEntity>)에 대한 페이징/목록 데이터 유형. 응답 구조의 표준이며, pagination메타 정보와 실제 회원 목록 배열을 제공합니다.\n\n관리자 대시보드/검색 결과 등 대량 조회시 사용됩니다."},"IDiscussionboardModerator.IUpdate":{"type":"object","properties":{"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료 날짜 변경. 임시 권한 연장/단축 또는 None → 영구 전환용."},{"type":"null","format":"date-time","description":"만료 날짜 변경. 임시 권한 연장/단축 또는 None → 영구 전환용."}],"description":"만료 날짜 변경. 임시 권한 연장/단축 또는 None → 영구 전환용."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Moderator 해제 일시(현재 시점 혹은 과거값). 비활성화/권한 해제 시에 업데이트."},{"type":"null","format":"date-time","description":"Moderator 해제 일시(현재 시점 혹은 과거값). 비활성화/권한 해제 시에 업데이트."}],"description":"Moderator 해제 일시(현재 시점 혹은 과거값). 비활성화/권한 해제 시에 업데이트."}},"description":"Moderator Update 요청용 타입. 만료일/회수일만 수정 가능(정책상 일반적으로 임명자나 대상 변경 불가).\n\n관리자 권한으로 임시 권한 연장, 조기 해제 등에 활용됩니다.","required":[]},"IDiscussionboardAdmin.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Admin 권한 할당 대상 discussionboard_members.id (UUID PK).\n\n할당될 멤버는 이미 시스템 등록 회원이어야 하며, 중복 할당은 불가합니다."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"관리자 권한을 부여한 admin의 discussionboard_admins.id (UUID).\n\n자기 임명(bootstrap) 케이스 예외적으로 허용될 수 있으나, 원칙적으로 다른 existing admin이어야 합니다."},"assigned_at":{"type":"string","format":"date-time","description":"권한 할당 시각(ISO 8601, 타임존 포함). 관리자 관리감사 목적."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"관리자 권한 회수 시간. null은 현재 유효 관리자임을 의미."},{"type":"null","format":"date-time","description":"관리자 권한 회수 시간. null은 현재 유효 관리자임을 의미."}],"description":"관리자 권한 회수 시간. null은 현재 유효 관리자임을 의미."}},"required":["member_id","assigned_by_admin_id","assigned_at"],"description":"Admin 권한 할당 생성 요청 타입. discussionboard_admins 컬럼에 1:1 매핑.\n\n관리자 지정, 부여자 및 할당시각 필수. 회수시 revoked_at을 업데이트합니다."},"IDiscussionboardAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Admin role assignment 레코드 PK. 시스템이 자동 생성 및 관리. 감사 및 권한조회시 키로 사용."},"member_id":{"type":"string","format":"uuid","description":"Admin 지정 대상 discussionboard_members.id."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"할당(승인) admin의 discussionboard_admins.id."},"assigned_at":{"type":"string","format":"date-time","description":"Admin 권한이 할당된 시각입니다."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"관리자 권한 회수/해제 일시(null시 현재 유효 관리자로 간주)."},{"type":"null","format":"date-time","description":"관리자 권한 회수/해제 일시(null시 현재 유효 관리자로 간주)."}],"description":"관리자 권한 회수/해제 일시(null시 현재 유효 관리자로 간주)."}},"required":["id","member_id","assigned_by_admin_id","assigned_at"],"description":"discussionboard_admins 테이블 row 전체 정보. 보안, 감사, 관리 대시보드 결과용 엔터티 타입.\n\n각 필드는 이력/할당/회수 정보를 상세히 담으며, 정책적 review 및 감사 요구에 부합합니다."},"IDiscussionboardAdmin.IRequest":{"type":"object","properties":{"member_id":{"oneOf":[{"type":"string","format":"uuid","description":"관리자 지정 대상 회원 FK필터. nullable."},{"type":"null","format":"uuid","description":"관리자 지정 대상 회원 FK필터. nullable."}],"description":"관리자 지정 대상 회원 FK필터. nullable."},"assigned_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"부여 관리자 FK필터."},{"type":"null","format":"uuid","description":"부여 관리자 FK필터."}],"description":"부여 관리자 FK필터."},"assigned_at":{"oneOf":[{"type":"string","format":"date-time","description":"부여 시각 기간/포인트 필터링."},{"type":"null","format":"date-time","description":"부여 시각 기간/포인트 필터링."}],"description":"부여 시각 기간/포인트 필터링."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"회수 여부/비활성 필드 검색용."},{"type":"null","format":"date-time","description":"회수 여부/비활성 필드 검색용."}],"description":"회수 여부/비활성 필드 검색용."}},"description":"관리자(Admin) 리스트/검색/필터 요청에 사용하는 타입입니다. 모두 선택적이며 discussionboard_admins 의 각 컬럼 대응.\n\n정책 감사/관리 대시보드에 활용 가능합니다.","required":[]},"IPageIDiscussionboardAdmin":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAdmin"}}},"required":["pagination","data"],"description":"Admin 엔티티(IPage<IEntity>) 표준 페이지네이션/목록 응답 타입입니다. pagination 메타와 데이터 배열 포함.\n\n관리자 검색, 감사 대용량 조회 등 활용."},"IDiscussionboardAdmin.IUpdate":{"type":"object","properties":{"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"관리자 권한 회수(해제) 시점을 명시. 현재 시각 혹은 과거 일시로 입력\n\nnull에서 → 값으로 전환시 권한 효력 상실 의미이며, 해제시만 변경해야 함."},{"type":"null","format":"date-time","description":"관리자 권한 회수(해제) 시점을 명시. 현재 시각 혹은 과거 일시로 입력\n\nnull에서 → 값으로 전환시 권한 효력 상실 의미이며, 해제시만 변경해야 함."}],"description":"관리자 권한 회수(해제) 시점을 명시. 현재 시각 혹은 과거 일시로 입력\n\nnull에서 → 값으로 전환시 권한 효력 상실 의미이며, 해제시만 변경해야 함."}},"description":"Admin 권한 임명 레코드의 업데이트 요청에 사용되는 타입. 수정가능 컬럼은 revoked_at 하나입니다.\n\n해지 혹은 권한 비활성화 정책에 따라 revoked_at만 직접 업데이트합니다.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"int32","description":"현재 페이지 번호입니다. 1부터 시작하며, 요청에 사용된 page 파라미터와 일치합니다."},"limit":{"type":"integer","format":"int32","description":"페이지당 레코드 수 제한. 최대값(보통 100 등) 제약 적용가능. 기본값 100."},"records":{"type":"integer","format":"int32","description":"전체 레코드 수. 최대치 초과시 해당 페이지 이후는 존재하지 않음."},"pages":{"type":"integer","format":"int32","description":"총 페이지 수. 전체 records / limit 의 올림 결과로 계산됩니다."}},"required":["current","limit","records","pages"],"description":"페이지네이션 응답의 메타데이터 구조입니다.\n\n목록 API의 pagination 필드에서 공통적으로 사용되며, 현 페이지/한 페이지당 크기/전체 개수/총 페이지 수를 포함합니다."}}},"completed":142,"total":191,"step":0,"created_at":"2025-07-25T05:16:52.968Z"},"tokenUsage":{"facade":{"aggregate":{"total":2235742,"input":{"total":2125139,"cached":0},"output":{"total":110603,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2235742,"input":{"total":2125139,"cached":0},"output":{"total":110603,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2235742,"input":{"total":2125139,"cached":0},"output":{"total":110603,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2235742,"input":{"total":2125139,"cached":0},"output":{"total":110603,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IPageIDiscussionboardCommentReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination 정보를 포함합니다. 전체 결과셋에 대한 페이지네이션 정보를 제공합니다.\n\nPrisma discussionboard_comment_reports 테이블의 결과 목록 페이징 컨테이너.\n\n이 필드는 페이징 및 쿼리 결과 집합의 범위를 정의하는데 사용됩니다. \n\n페이지 번호, 한 페이지당 제한, 전체 레코드 수 등이 포함됩니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentReport"},"description":"discussionboard_comment_reports 엔티티의 배열입니다.\n\nComment 신고 레코드를 각 원소로 갖는 객체 배열로, 실제 필드 값은 Prisma discussionboard_comment_reports 스키마와 일치합니다.\n\n이 배열은 실제 각 신고 레코드의 모든 칼럼을 포함합니다. 모든 개별 필드는 Prisma 명세의 칼럼 주석을 참고하여 값이 제공됩니다."}},"required":["pagination","data"],"description":"comment 신고 레코드의 페이징된 결과 집합을 나타냅니다.\n\ndiscussionboard_comment_reports 테이블에서 쿼리된 결과와 페이지네이션 정보를 포함합니다.\n\n각 개별 신고는 신고 아이디, 신고자, 신고 유형, 신고 내용, 타임스탬프 등 모든 스키마 칼럼을 포함합니다.\n\n이 타입은 관리/감사용 리스트, 신고 대시보드, 혹은 API 검색 필터의 결과 등에서 사용됩니다."},"IDiscussionboardCommentReport.IUpdate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형을 명시하는 UUID. discussionboard_report_types 테이블 FK로서, 변경 시 신고의 분류를 업데이트합니다.\n\nPrisma discussionboard_comment_reports.report_type_id의 역할과 동일합니다."},"reason":{"type":"string","description":"신고 사유. 사용자가 입력하거나 수정하는 자유 양식 텍스트입니다. \n\ncomment가 어떤 이유로 신고되었는지를 서술하며, 예시는 '욕설', '스팸', '부적절한 발언' 등이 있습니다.\n\nPrisma 스키마의 reason 칼럼 기반입니다."}},"required":["discussionboard_report_type_id","reason"],"description":"comment report 엔티티 수정(패치) 요청용 DTO.\n\n수정 가능한 discussionboard_comment_reports 테이블 칼럼에 대응합니다.\n\n신고 유형(report_type_id) 또는 신고 사유(reason) 등 일부 필드가 업데이트 가능합니다.\n\n이 타입은 API를 통한 comment 신고 업데이트, 정정/수정 워크플로우, 관리 포털 용도로 사용됩니다."},"IDiscussionboardReport.ICreate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 이유 카테고리의 UUID. Prisma discussionboard_report_types.id를 참조합니다.\n\n사용 가능한 신고 유형(예: abuse, spam)은 report_types 마스터 테이블과 연동됩니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고를 제출한 회원 ID. discussionboard_members.id를 FK로서 반드시 존재해야 합니다.\n\n실제 인증된 사용자의 컨텍스트에서 획득되며, 직접 입력하는 것이 권장되지 않습니다."},"target_object_id":{"type":"string","format":"uuid","description":"신고의 대상이 되는 오브젝트의 UUID. post, comment, member 등 실제 타겟이 되는 row의 id를 입력합니다.\n\n타입 식별자는 아래의 target_object_type에 명시합니다.\n\n비즈니스적으로 단일 신고 건마다 target_object_id는 하나씩만 입력해야 합니다."},"target_object_type":{"type":"string","description":"신고 대상의 타입. 예: 'post', 'comment', 'member' 등.\n\nPrisma discussionboard_reports.target_object_type 칼럼의 business 분류와 일치합니다."},"report_description":{"oneOf":[{"type":"string","description":"신고 상세 설명/코멘트. 신고자가 보충적으로 입력하는 자유 텍스트입니다. 선택 입력이며 없으면 null.\n\n예: '욕설이 포함되어 있습니다.', '부적절한 프로필 사진이 있습니다.' 등."},{"type":"null","description":"신고 상세 설명/코멘트. 신고자가 보충적으로 입력하는 자유 텍스트입니다. 선택 입력이며 없으면 null.\n\n예: '욕설이 포함되어 있습니다.', '부적절한 프로필 사진이 있습니다.' 등."}],"description":"신고 상세 설명/코멘트. 신고자가 보충적으로 입력하는 자유 텍스트입니다. 선택 입력이며 없으면 null.\n\n예: '욕설이 포함되어 있습니다.', '부적절한 프로필 사진이 있습니다.' 등."},"reported_at":{"type":"string","format":"date-time","description":"신고 생성(등록) 시각. ISO 8601 문자열로 표시됨. 서버 혹은 클라이언트에서 할당해야 하며, 시스템 시간 정책을 따릅니다.\n\nPrisma discussionboard_reports.reported_at에 대응."}},"required":["discussionboard_report_type_id","reporting_member_id","target_object_id","target_object_type","reported_at"],"description":"discussionboard_reports 신규 신고 생성 API 요청객체 DTO.\n\n실제 신고 테이블에 필요한 모든 필수/선택 항목을 포함합니다.\n\n신고하려는 유형, 신고자 ID, 신고 대상, 상세설명, 신고 등록시간 등 스키마 기준 필드만 존재해야 합니다."},"IDiscussionboardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"신고 레코드의 고유 식별자(Primary Key). Prisma discussionboard_reports.id 칼럼과 일치합니다.\n\n조회, 수정, 감사 등 모든 워크플로우의 핵심 참조 포인트입니다."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형을 지정하는 UUID. Prisma discussionboard_report_types.id의 FK입니다.\n\n각 신고 유형(스팸, 욕설 등)별 고유 식별자입니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고를 제출한 회원의 UUID. discussionboard_members.id를 FK로 가집니다."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상(row)의 UUID. post, comment, member 등 다양한 객체가 신고 타겟이 될 수 있습니다. FK 혹은 Poly FK 패턴으로 사용합니다."},"target_object_type":{"type":"string","description":"신고 대상의 유형. 예: 'post', 'comment', 'member' 등(논리적 enum).\n\n프론트/백 오피스에선 이 값을 기반으로 오브젝트 조회, 정책 결정을 수행합니다."},"report_description":{"oneOf":[{"type":"string","description":"신고 이유의 상세설명. 사용자가 남긴 의견, 신고 사유, 참조 등입니다. 선택 입력으로 null일 수 있습니다.\n\nPrisma discussionboard_reports.report_description."},{"type":"null","description":"신고 이유의 상세설명. 사용자가 남긴 의견, 신고 사유, 참조 등입니다. 선택 입력으로 null일 수 있습니다.\n\nPrisma discussionboard_reports.report_description."}],"description":"신고 이유의 상세설명. 사용자가 남긴 의견, 신고 사유, 참조 등입니다. 선택 입력으로 null일 수 있습니다.\n\nPrisma discussionboard_reports.report_description."},"reported_at":{"type":"string","format":"date-time","description":"신고가 등록된 시간. ISO 8601 포맷의 datetime 문자열.\n\n신고 생성 시 서버가 할당하는 값입니다."}},"required":["id","discussionboard_report_type_id","reporting_member_id","target_object_id","target_object_type","reported_at"],"description":"discussionboard_reports 테이블의 레코드 원본을 완벽하게 반영하는 타입입니다.\n\n모든 신고 데이터의 단일 원자 단위(atomic record)를 표현하며, 실제 오브젝트 구조는 Prisma 스키마의 칼럼 주석과 일치합니다.\n\n관리 대시보드, 신고 접근·수정·감사 API에서 공통적으로 사용합니다."},"IDiscussionboardReport.IRequest":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형 필터링 조건. Prisma discussionboard_reports.discussionboard_report_type_id 기준으로 검색할 때 사용됩니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고 제출 회원의 ID로 검색(필터링)할 때 사용. FK: discussionboard_members.id"},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상 Object의 ID로 Filtering을 진행할 때 지정합니다."},"target_object_type":{"type":"string","description":"신고 대상 유형. 예: post/comment/member 등, 특정 클래스타입 필터링시 사용합니다."},"report_description":{"type":"string","description":"신고 상세 내용(서브키워드, 전문 포함)으로 부분 검색/필터에 사용합니다."},"reported_at":{"type":"string","format":"date-time","description":"신고 등록일(단일/범위) 조건으로 필터링할 때 사용됩니다. 시간 범위 검색에서 쌍(pair)으로 사용하기도 함."}},"description":"discussionboard_reports 레코드 조회요청에 사용되는 검색조건 DTO입니다.\n\n검색 및 필터 엔드포인트(PATCH)에서 사용되며, 각 필터 파라미터는 discussionboard_reports DB스키마의 칼럼과 일치해야 합니다.\n\n복합조건, 기간쿼리, 사용자 기반 검색 등에서 활용 가능합니다. 입력하지 않은 항목은 전체 결과로 매칭됩니다.","required":[]},"IPageIDiscussionboardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 메타데이터(현재 페이지, 전체 페이지, 총 데이터수 등). IPage 규격 참고."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardReport"},"description":"discussionboard_reports의 각 atomic record 객체 배열.\n\n신고 레코드 전체 목록을 반환하며, 각 원소는 discussionboard_reports의 모든 주요 칼럼 정보를 제공합니다."}},"required":["pagination","data"],"description":"discussionboard_reports 신고 레코드 페이징 컨테이너.\n\n검색 결과를 페이지 단위로 반환하는데 사용되며, pagination(메타데이터)와 신고 리스트(data)로 구성됩니다."},"IDiscussionboardReport.IUpdate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형 UUID. 변경 시 해당 신고의 분류가 갱신됩니다."},"report_description":{"oneOf":[{"type":"string","description":"신고 상세 설명(수정/편집 등). null일 수 있습니다."},{"type":"null","description":"신고 상세 설명(수정/편집 등). null일 수 있습니다."}],"description":"신고 상세 설명(수정/편집 등). null일 수 있습니다."}},"description":"discussionboard_reports 테이블의 레코드 수정에 사용되는 DTO입니다.\n\n신고 유형 혹은 상세 설명을 변경할 수 있습니다.\n\n필드 누락 시, 기존 값이 유지됩니다. Prisma discussionboard_reports 스키마 설명을 직접 참고하세요.","required":[]},"IDiscussionboardReportType.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형의 고유 코드(예: 'abuse', 'spam').\n\n프론트 및 백오피스에서 신고 분류를 식별할 때 사용.\n\nPrisma discussionboard_report_types.code 참조."},"display_name":{"type":"string","description":"UI/관리 영역에 표시되는 신고 유형명.\n\n사용자와 관리자에게 쉽게 인지될 수 있도록 명확하게 설정."},"description":{"oneOf":[{"type":"string","description":"신고 유형에 대한 관리자 설명/메모. 정책적 해설 또는 가이드로 사용. Null도 허용."},{"type":"null","description":"신고 유형에 대한 관리자 설명/메모. 정책적 해설 또는 가이드로 사용. Null도 허용."}],"description":"신고 유형에 대한 관리자 설명/메모. 정책적 해설 또는 가이드로 사용. Null도 허용."},"active":{"type":"boolean","description":"신고 유형의 현재 사용 여부(플랫폼에서 선택 가능한 상태면 true). 비/활성화 정책에 맞게 DB 저장."},"created_at":{"type":"string","format":"date-time","description":"신고 유형 레코드 생성 시각. ISO 8601 형식의 datetime 문자열로 자동배정이 권장됨."}},"required":["code","display_name","active","created_at"],"description":"신고 유형 추가용 API 요청 객체.\n\n신고 유형의 코드, 사용자 표시명, 설명, 활성화 여부 및 생성일자를 제공합니다.\n\n참고: Prisma discussionboard_report_types의 필드 및 로직 설명 참조."},"IDiscussionboardReportType":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"신고 유형 마스터의 고유 식별자. report_types 마스터 키로서 관리 및 참조 포인트.\n\nPrisma discussionboard_report_types.id와 일치."},"code":{"type":"string","description":"신고 유형 코드. 비즈니스 로직, 프론트엔드, 백오피스, 분류트리 등에 활용."},"display_name":{"type":"string","description":"신고 유형 UI표시명. 사용자가 쉽게 선택/식별할 수 있는 이름."},"description":{"oneOf":[{"type":"string","description":"신고 유형 상세설명/가이드. 관리자 주요 참고사항 등. Null 허용."},{"type":"null","description":"신고 유형 상세설명/가이드. 관리자 주요 참고사항 등. Null 허용."}],"description":"신고 유형 상세설명/가이드. 관리자 주요 참고사항 등. Null 허용."},"active":{"type":"boolean","description":"현재 신고 유형의 활성상태(사용 가능 여부). 플랫폼에서 정책적으로 선택을 허용하는지 여부.\n\nPrisma discussionboard_report_types.active 칼럼과 일치."},"created_at":{"type":"string","format":"date-time","description":"신고 유형 레코드 등록 일시. 관리/로그용."}},"required":["id","code","display_name","active","created_at"],"description":"신고 유형 마스터 테이블(discussionboard_report_types)의 원본 레코드 타입.\n\nPrisma에서 정의된 모든 필드 정보를 완비합니다.\n\n신고 유형 관리를 위한 표준 구조이며, 비즈니스 로직, 분류, 설정, 감사 등에서 공통 활용합니다."},"IDiscussionboardReportType.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형 코드 기준 검색 파라미터. 부분 일치 검색에 활용.\n\n예: 'spam', 'abuse' 등."},"display_name":{"type":"string","description":"UI표시명 기준 필터. Substring 검색 사용 가능."},"description":{"type":"string","description":"상세 설명 텍스트 기반 검색 조건."},"active":{"type":"boolean","description":"활성화/비활성화 여부 기준 검색 조건."},"created_at":{"type":"string","format":"date-time","description":"등록일/시각 기준 필터링(단일/범위/기간 등)."}},"description":"신고 유형 마스터(discussionboard_report_types)의 검색, 필터 API 요청 DTO.\n\n코드, 이름, 설명, 활성화 여부 및 생성일을 기준으로 다양한 인덱스 검색 및 리스트 필터링에 활용합니다.\n\n비즈니스 요구에 따라 부분/전체 일치 검색을 지원합니다.","required":[]},"IPageIDiscussionboardReportType":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보입니다. 전체 데이터셋에 대한 페이지 구성을 제공합니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardReportType"},"description":"신고 유형 엔티티 레코드 배열(각 항목이 atomic record)."}},"required":["pagination","data"],"description":"신고 유형 마스터 엔티티 검색 결과를 페이지네이션과 함께 감싸는 표준 리스팅 타입입니다.\n\n각 신고 유형 엔티티 및 전체 페이지 정보가 제공됩니다."},"IDiscussionboardReportType.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형 마스터의 고유 코드. 변경 시, 전체 신고 분류 체계에 반영됨.\n\n중복/충돌 관리 필요. Prisma discussionboard_report_types.code에 대응."},"display_name":{"type":"string","description":"UI/관리 표시명. 편집 시 사용자/관리자 구분 쉬운 값으로 설정해야 함."},"description":{"oneOf":[{"type":"string","description":"상세(관리자) 설명/가이드. Null 허용."},{"type":"null","description":"상세(관리자) 설명/가이드. Null 허용."}],"description":"상세(관리자) 설명/가이드. Null 허용."},"active":{"type":"boolean","description":"신고 유형 활성화 여부. 관리 정책에 따라 비활성화 시 사용 제한."}},"description":"신고 유형 마스터(discussionboard_report_types) 수정 요청 DTO.\n\n수정 가능한 칼럼: 코드, 표시명, 설명, active 상태 등. 누락 필드는 기존 값 유지.\n\n구체적 정책, 칼럼 제약, 예시는 Prisma 테이블 설명 참고 필요.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"현재 페이지 번호.\n\n기본값은 1."},"limit":{"type":"integer","format":"uint32","description":"한 페이지당 데이터 갯수(기본 100)."},"records":{"type":"integer","format":"uint32","description":"전체 레코드(데이터) 갯수."},"pages":{"type":"integer","format":"uint32","description":"전체 페이지 갯수(총건수/페이지당수, 올림)."}},"required":["current","limit","records","pages"],"description":"페이지네이션에 사용되는 표준 메타데이터입니다. 전체 검색 결과에서 현재 페이지, 제한, 전체 건수, 전체 페이지 수를 제공합니다."},"IDiscussionboardCommentReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"comment report의 고유 식별자(Primary Key). Prisma discussionboard_comment_reports.id.\n\n각 신고 레코드의 단일 식별 포인트입니다."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"신고 대상 comment의 UUID. discussionboard_comments.id FK로 관리됩니다."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"신고한 회원의 UUID. discussionboard_members.id FK입니다."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형의 UUID. discussionboard_report_types.id FK."},"reason":{"type":"string","description":"신고 사유 자유 기입 텍스트. 예: '테러', '욕설', '스팸' 등."},"created_at":{"type":"string","format":"date-time","description":"신고 레코드 생성시간. Prisma created_at 컬럼 기준 ISO8601 datetime입니다."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason","created_at"],"description":"discussionboard_comment_reports 테이블의 단일 신고 원본 레코드 객체입니다.\n\n모든 필드는 Prisma discussionboard_comment_reports 칼럼과 주석에 따라 정의되어 있습니다."}}},"completed":154,"total":191,"step":0,"created_at":"2025-07-25T05:16:58.229Z"},"tokenUsage":{"facade":{"aggregate":{"total":2332924,"input":{"total":2218319,"cached":0},"output":{"total":114605,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2332924,"input":{"total":2218319,"cached":0},"output":{"total":114605,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2332924,"input":{"total":2218319,"cached":0},"output":{"total":114605,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2332924,"input":{"total":2218319,"cached":0},"output":{"total":114605,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardTrendingTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for each trending topic record, referenced throughout the analytics/trending subsystems of the forum platform. Sourced from the discussionboard_trending_topics table, this field provides a single, atomic PK for each daily or periodic trending score. Never null or re-used.\n\n@see discussionboard_trending_topics.id"},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Foreign key reference to the thread judged trending (discussionboard_threads.id). This attribute fulfills the connection between analytics and user discussion content, supporting UI panels, notification engines, and audit trails.\n\n@see discussionboard_trending_topics.discussionboard_thread_id"},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key reference to the board (discussionboard_boards.id) under which the trending topic is computed and visualized. Enables board-level trending panels and analytics breakdowns for navigation purposes.\n\n@see discussionboard_trending_topics.discussionboard_board_id"},"ranking_period_date":{"type":"string","format":"date-time","description":"Date/time value representing the period for which the topic is trending (e.g., daily partition). Supports analytics roll-ups and enables accurate visualizations across dashboards.\n\n@see discussionboard_trending_topics.ranking_period_date"},"trending_score":{"type":"number","format":"double","description":"Quantitative value reflecting engagement weight, as calculated by analytics engine or background jobs, relative to a forum thread within the period. Used for ordering trending results and alerting moderation.\n\n@see discussionboard_trending_topics.trending_score"}},"required":["id","discussionboard_thread_id","discussionboard_board_id","ranking_period_date","trending_score"],"description":"Represents a single trending topic as calculated for analytics and trending panels. Sourced from the discussionboard_trending_topics Prisma table and referenced in the analytics and moderation dashboards. Contains quantitative and relational fields crucial for surfacing active forum subjects."},"IDiscussionboardNotificationTemplate.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique, short programmatic reference code for the notification template. This is used in notification jobs and must be globally unique and immutable.\n\n@see discussionboard_notification_templates.code"},"name":{"type":"string","description":"Human-readable title for the notification template, used for administrative panel labeling, review, and template configuration workflows.\n\n@see discussionboard_notification_templates.name"},"description":{"oneOf":[{"type":"string","description":"Long-form description for admins/moderators clarifying the purpose of the template, its context, and operational constraints. Optional.\n\n@see discussionboard_notification_templates.description"},{"type":"null"}],"description":"Long-form description for admins/moderators clarifying the purpose of the template, its context, and operational constraints. Optional.\n\n@see discussionboard_notification_templates.description"},"subject":{"type":"string","description":"Subject line for notification messages using this template. Required for all standard notification template creation.\n\n@see discussionboard_notification_templates.subject"},"body":{"type":"string","description":"The template body in full, including parameter placeholders. Not nullable.\n\n@see discussionboard_notification_templates.body"},"is_active":{"type":"boolean","description":"Determines template availability for notification triggering (enabled/disabled for API use; required as a direct field @see discussionboard_notification_templates.is_active)."}},"required":["code","name","subject","body","is_active"],"description":"Request body for creating a new notification message template. All major business and audit fields for template creation are present and values must conform to discussionboard_notification_templates Prisma schema."},"IDiscussionboardNotificationTemplate":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for this notification template record, serving as the primary key for template versioning, auditing, and referencing from delivery jobs and logs.\n\n@see discussionboard_notification_templates.id"},"code":{"type":"string","description":"Short, unique code for the template used for backend lookups, mapping downstream logic to the correct template record for rendering and notification dispatching.\n\n@see discussionboard_notification_templates.code"},"name":{"type":"string","description":"Human-friendly title for displaying notification templates in admin tools and analytics dashboards. Not nullable.\n\n@see discussionboard_notification_templates.name"},"description":{"oneOf":[{"type":"string","description":"Long-form (optional) explanation for admin reference, describing template's intent, scope, and usage notes for future support.\n\n@see discussionboard_notification_templates.description"},{"type":"null"}],"description":"Long-form (optional) explanation for admin reference, describing template's intent, scope, and usage notes for future support.\n\n@see discussionboard_notification_templates.description"},"subject":{"type":"string","description":"Actual subject line as rendered to users in emails or push notifications. Supports personalization markup as necessary.\n\n@see discussionboard_notification_templates.subject"},"body":{"type":"string","description":"Text or markup field containing the message body, possibly with template placeholders for personalization. Required as non-null.\n\n@see discussionboard_notification_templates.body"},"is_active":{"type":"boolean","description":"Flag determining whether this template is currently available for use in notifications. Admin/moderator toggles are provided via this field.\n\n@see discussionboard_notification_templates.is_active"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this notification template was created, for audit, timeline review, and compliance tracking.\n\n@see discussionboard_notification_templates.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the most recent modification to this template; supports support tooling and compliance review.\n\n@see discussionboard_notification_templates.updated_at"}},"required":["id","code","name","subject","body","is_active","created_at","updated_at"],"description":"Notification template entity containing all schema-compliant fields as stored in the discussionboard_notification_templates table. Used for display, auditing, and notification rendering workflows."},"IDiscussionboardNotificationTemplate.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Optional filter for searching by primary key. Narrows query to specific template record if provided."},"code":{"type":"string","description":"Optional. Allows filtering by unique template code for advanced/targeted queries."},"name":{"type":"string","description":"Allows searching or filtering results by human-friendly template name string."},"subject":{"type":"string","description":"Optionally filter or search for templates based on subject line substrings or fuzzy match."},"is_active":{"type":"boolean","description":"Enables filtering templates by their active state (true for currently enabled, false for disabled/inactive)."},"created_at_from":{"type":"string","format":"date-time","description":"Returns templates created after this timestamp for time-range queries."},"created_at_to":{"type":"string","format":"date-time","description":"Returns templates created before this timestamp for bounded-date queries."},"updated_at_from":{"type":"string","format":"date-time","description":"Filters templates updated after this time for change/recent edit review."},"updated_at_to":{"type":"string","format":"date-time","description":"Filters templates updated before this value for change window search."},"page":{"type":"integer","description":"Page number for paginated query (starting from 1)."},"limit":{"type":"integer","description":"Number of results per page for pagination."}},"required":[],"description":"Request type for paged or filtered notification template search, matching all key columns in the template schema. Used for admin/moderator dashboard and support tooling."},"IPageDiscussionboardNotificationTemplate":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the page response, including current page, per-page record count, total records, and pages."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotificationTemplate"},"description":"Array of notification template records for the page, each an atomic entity matching the notification template table schema."}},"required":["pagination","data"],"description":"Paginated wrapper object for notification template search/list responses as returned to admin/moderator dashboards for browsing."},"IDiscussionboardNotificationTemplate.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Updated unique code for the template. Optional, but if present must not violate code uniqueness constraint in the table."},"name":{"type":"string","description":"Updated human-friendly title for the template."},"description":{"oneOf":[{"type":"string","description":"Modified or replacement long-form template description text. Optional."},{"type":"null"}],"description":"Modified or replacement long-form template description text. Optional."},"subject":{"type":"string","description":"Updated subject line string for notification messages sent from this template."},"body":{"type":"string","description":"Updated template message body for notifications."},"is_active":{"type":"boolean","description":"Flag to set template visibility/enabled status in notification jobs."}},"required":[],"description":"Request type for updating attributes of a notification template in the admin panel. Only schema-allowed columns are present."},"IBoolResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the operation was successful (true) or not (false). Used for confirming deletion or other boolean-result actions."},"message":{"type":"string","description":"Optional, human-readable explanation for the result of an operation. Allows conveying status or error explanation as needed."}},"required":["success"],"description":"Simple result format for confirming/denying boolean actions (such as deletion of records)."},"IDiscussionboardNotificationPreference.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID reference to the member to which this notification preference record belongs. Must match an active user in the discussionboard_members table. Required for all creations."},"code":{"type":"string","description":"Notification template code identifying the type of notification this preference controls. Used for mapping multiple preferences per template/channel."},"email_enabled":{"type":"boolean","description":"Boolean for enabling/disabling email channel notifications for this template code and user."},"inapp_enabled":{"type":"boolean","description":"Boolean for enabling/disabling in-app (bell) notifications for this preference."},"browser_enabled":{"type":"boolean","description":"Boolean to enable/disable browser push for this template preference."}},"required":["discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled"],"description":"Notification preference creation request. Used for inserting a new row to discussionboard_notification_preferences for per-member/template/channel configuration."},"IDiscussionboardNotificationPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for the notification preference row. Serves as primary key for per-member/template/channel configuration and supports update/deletion and audit workflows."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID referencing the member this preference belongs to. Foreign key to discussionboard_members.id."},"code":{"type":"string","description":"Code for the notification template this preference applies to."},"email_enabled":{"type":"boolean","description":"Specifies whether email channel notifications should be sent using this template to the user."},"inapp_enabled":{"type":"boolean","description":"Specifies whether in-app/bell notifications are enabled for this template and user."},"browser_enabled":{"type":"boolean","description":"Specifies whether browser push notifications are enabled for this template and user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this notification preference record was created, for audit/compliance support."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last change of this notification preference record."}},"required":["id","discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled","created_at","updated_at"],"description":"Atomic entity describing a notification channel/template preference entry, as persisted in the notification preference table."},"IDiscussionboardNotificationPreference.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Optional: filter for searching by primary key if known."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter/search on the member id owning this preference (UUID of user)."},"code":{"type":"string","description":"Filter by template code for targeted search."},"email_enabled":{"type":"boolean","description":"Optionally filter by email enabled state."},"inapp_enabled":{"type":"boolean","description":"Optionally filter by in-app enabled state."},"browser_enabled":{"type":"boolean","description":"Optional filter to match records with this browser push state."},"created_at_from":{"type":"string","format":"date-time","description":"Returns rows with created_at >= this value for time-range search."},"created_at_to":{"type":"string","format":"date-time","description":"Returns rows with created_at <= this value for bounded queries."},"updated_at_from":{"type":"string","format":"date-time","description":"Filter for last update time greater than or equal to this timestamp."},"updated_at_to":{"type":"string","format":"date-time","description":"Filter for last update time less than or equal to this timestamp."},"page":{"type":"integer","description":"Requested page for pagination controls."},"limit":{"type":"integer","description":"Results per page for paging applications."}},"required":[],"description":"Notification preference search/filter request structure using all relevant fields from the table."},"IPageDiscussionboardNotificationPreference":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Metadata and controls for the page—current/total page, record count, etc."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotificationPreference"},"description":"Atomic notification preference records for the page. Each entry matches the persisted row structure and schema of notification preference."}},"required":["pagination","data"],"description":"Paginated response envelope for notification preference browse/search APIs."},"IDiscussionboardNotificationPreference.IUpdate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"The unique identifier for the member (user) whose notification/channel preference is being updated. This field links the notification preference record to the appropriate user entity (see Actors component). Set automatically when members update their own preferences; may be required/admin-editable for administrative updates.\n\nReferences the member's id in the 'discussionboard_members' table as a foreign key. Used for scoping this preference to a particular user. Always a UUID value."},"code":{"type":"string","description":"Notification Template Code. Specifies for which template or notification topic this preference applies (e.g., 'thread_reply', 'mention_alert'). Must correspond to a valid notification template code in the system.\n\nEnsures preferences are associated with specific system messages and supports granular per-template and per-channel controls. Follows normalized notification management as described in the main requirements and schema docs. Typically unique per (member_id, code) pair."},"email_enabled":{"type":"boolean","description":"True if email notifications for this template/code are enabled for this member; false if email should not be sent for this topic. Implements member-level custom delivery control: users may opt in or out of email for each notification scenario. Used to comply with privacy and anti-spam regulations."},"inapp_enabled":{"type":"boolean","description":"True if in-app/bell notifications are enabled for this code for this member; false otherwise. Allows members to suppress or enable UI notification pop-ups or notification center entries for specific templates. Implements fine-grained control and aligns with system notification behaviour."},"browser_enabled":{"type":"boolean","description":"True if browser push notifications should be used for this template/code. Gives the user full choice over using browser-based push notifications for the associated topic. Integral part of user experience customization."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this notification preference was created. Required for compliance and audit. Follows standard ISO 8601 date-time format as described in the schema."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the latest modification to this preference record. Updated automatically when member or admin changes preferences. Enforces audit/compliance as required by system policies.\n\nISO 8601 format."}},"required":["discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled","created_at","updated_at"],"description":"Request body or update object schema for updating a discussion board notification preference. This type describes the fields a member or admin is allowed to update on a notification preference record, supporting granular per-template/per-channel opt-in/opt-out of notification delivery channels (email, in-app, browser push).\n\nEach field is explained in context of notification routing as outlined in the requirements and schema documentation. All references are to system-internal ids and codes, following normalized notification and preference models. The business rules require that any updates to notification preferences pass the full set of schema validations (UUIDs, code structure, booleans). This component is integral to notification settings panels, privacy controls, and compliance dashboards for the discussion board platform."}}},"completed":155,"total":191,"step":0,"created_at":"2025-07-25T05:17:04.600Z"},"tokenUsage":{"facade":{"aggregate":{"total":2426813,"input":{"total":2311534,"cached":0},"output":{"total":115279,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2426813,"input":{"total":2311534,"cached":0},"output":{"total":115279,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2426813,"input":{"total":2311534,"cached":0},"output":{"total":115279,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2426813,"input":{"total":2311534,"cached":0},"output":{"total":115279,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardPrivacyPolicy.ICreate":{"type":"object","properties":{"version":{"type":"string","description":"Policy version identifier.\n\nA unique, structured identifier describing the version of the privacy policy (e.g., 'v2024.06'). Must be unique and is referenced in logs, consent, and audit trails. Required by the business for regulatory compliance and historical review."},"effective_date":{"type":"string","format":"date-time","description":"Effective start date for this policy version.\n\nMust be in ISO 8601 date-time format and represents the timestamp when this policy becomes active. Required for regulatory time-based traceability and determines which version is active when a user joins."},"title":{"type":"string","description":"Policy title/heading.\n\nA short, descriptive title for this version of the privacy policy (e.g., \"Discussion Board Privacy Statement - 2025 Update\"). Used to identify the policy in UI listings and legal documents."},"content":{"type":"string","description":"Full legal/privacy policy text.\n\nThe full authoritative text of the privacy and data protection policy as required by law and business rules. Displayed to users in legal/compliance interfaces, never truncated or summarized."}},"required":["version","effective_date","title","content"],"description":"Creation object for a new privacy policy version.\n\nAll fields are required to establish a legally binding and traceable policy entry. Each record is immutable and a new version is inserted when updating. This structure is compliant with business/legal audits."},"IDiscussionboardPrivacyPolicy":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key: Unique identifier for this privacy policy version.\n\nAuto-generated and used for system/DB reference."},"version":{"type":"string","description":"Policy version string (e.g., 'v2024.06').\n\nUniquely identifies each version for historical lookup, database audit, and user consent verification."},"effective_date":{"type":"string","format":"date-time","description":"Datetime this policy became effective (ISO 8601).\n\nUsed for time-based compliance, determining which policy covers a user at the time of their consent/account creation."},"title":{"type":"string","description":"Short heading/title for the privacy policy.\n\nDisplayable in UI and referenced in logs, user audit/history workflows."},"content":{"type":"string","description":"Full policy text.\n\nAuthoritative and complete legal description for data use, rights, retention, and other privacy matters."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this policy version (ISO 8601).\n\nDatabase/audit field for record keeping."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this record.\n\nAudit field for history/compliance; updates only on changes to this row."}},"required":["id","version","effective_date","title","content","created_at","updated_at"],"description":"Atomically represents a single privacy policy version.\n\nFields are referenced directly in privacy/legal screens, consent UIs, admin dashboards, and compliance data exports. Immutable except for admin updates."},"IDiscussionboardPrivacyPolicy.IRequest":{"type":"object","properties":{"version":{"type":"string","description":"Search or filter for a given policy version.\n\nFilters for exact matches to a version code/identifier (e.g., 'v2024.06')."},"effective_date":{"type":"string","format":"date-time","description":"Filter by effective date (e.g., show only policies effective after this date).\n\nISO 8601 format, supports range/bounds queries in admin UI."},"title":{"type":"string","description":"Filter by title substring, optionally with full-text or trigram search.\n\nUsed to narrow policy listings by semantic context or keywords."},"created_at":{"type":"string","format":"date-time","description":"Created at (for filtering or range search)\n\nISO 8601 date-time. Used in audit dashboards or when listing only recent policy updates."},"updated_at":{"type":"string","format":"date-time","description":"Updated at timestamp (range query/search)\n\nISO 8601 date-time, range/bound filter."}},"description":"Search/filter/pagination object for privacy policy admin pages and compliance exports.\n\nAll fields are optional and exactly match those present in the table for safe, compliant querying.","required":[]},"IPageDiscussionboardPrivacyPolicy":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPrivacyPolicy"},"description":"Page-wise array of privacy policy records."}},"required":["pagination","data"],"description":"Paginated response/result object for privacy policy records.\n\nUsed for admin dashboards, audit search, compliance/reporting. Follows system standard for paged collections."},"Idiscussionboard_privacy_policies.IUpdate":{"type":"object","properties":{"version":{"type":"string","description":"New version identifier, if updating.\n\nSupports correcting a version typo, or retroactively version-bumping for regulatory update (rare / admin-only field)."},"effective_date":{"type":"string","format":"date-time","description":"Update to the effective date (ISO 8601), typically for retroactive compliance or error correction."},"title":{"type":"string","description":"Optional update of policy title. Used only for minor corrections or rebranding."},"content":{"type":"string","description":"Replacement policy text (full). Use only when legally updating the text, not for minor clarifications."},"created_at":{"type":"string","format":"date-time","description":"Backdated creation timestamp, if correcting for compliance/history (rare; admin-only)."},"updated_at":{"type":"string","format":"date-time","description":"Sets the updated timestamp explicitly (normally system-managed; only for audit fix-ups)."}},"description":"Update information for privacy policy record.\n\nAll fields are optional and may be provided individually for patch/update scenarios. Intended for admin-level use with extreme care and full audit logging.","required":[]},"Idiscussionboard_privacy_policies":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key: Unique identifier for this privacy policy version.\n\nAuto-generated and used for system/DB reference."},"version":{"type":"string","description":"Policy version string (e.g., 'v2024.06').\n\nUniquely identifies each version for historical lookup, database audit, and user consent verification."},"effective_date":{"type":"string","format":"date-time","description":"Datetime this policy became effective (ISO 8601).\n\nUsed for time-based compliance, determining which policy covers a user at the time of their consent/account creation."},"title":{"type":"string","description":"Short heading/title for the privacy policy.\n\nDisplayable in UI and referenced in logs, user audit/history workflows."},"content":{"type":"string","description":"Full policy text.\n\nAuthoritative and complete legal description for data use, rights, retention, and other privacy matters."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this policy version (ISO 8601).\n\nDatabase/audit field for record keeping."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this record.\n\nAudit field for history/compliance; updates only on changes to this row."}},"required":["id","version","effective_date","title","content","created_at","updated_at"],"description":"Fully represents a privacy policy record with all required fields and descriptive details for audit, compliance, and UI/legal display."},"Idiscussionboard_data_erasure_requests.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member submitting the erasure request.\n\nForeign key to members table – ensures request links to identity for audit/compliance."},"status":{"type":"string","description":"Initial status string for the erasure request.\n\nExamples: 'pending', 'approved', 'denied', 'completed'\n\nMay be set by the initial submitter (typically 'pending') or by an admin if bootstrapping a migrated request."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when the erasure was requested.\n\nISO 8601, set to now unless re-importing or correcting audit history."},"admin_remark":{"oneOf":[{"type":"string","description":"Optional admin comment/remark.\n\nMay be set at creation (for admin-initiated requests) or null if not supplied by a member."},{"type":"null","description":"Optional admin comment/remark.\n\nMay be set at creation (for admin-initiated requests) or null if not supplied by a member."}],"description":"Optional admin comment/remark.\n\nMay be set at creation (for admin-initiated requests) or null if not supplied by a member."}},"required":["discussionboard_member_id","status","requested_at"],"description":"Input object for creating a data erasure request.\n\nCompliant with GDPR/CCPA and internal compliance: member, status, and timestamp required. Admin remark is optional."},"Idiscussionboard_data_erasure_requests":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key: unique identifier for this erasure request.\n\nUsed for tracking, audit, and compliance reporting."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"FK to discussionboard_members, identifying request owner.\n\nRequired for all audit, compliance, and data processing workflows."},"status":{"type":"string","description":"Current status string for the erasure request.\n\nAllowed values include: 'pending', 'approved', 'denied', 'completed', etc. State machine is enforced elsewhere; this field is atomic and always up-to-date for recordkeeping."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when request was submitted."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"When request was reviewed by admin/mod (nullable).\n\nRemains null if never reviewed; audit-compliant."},{"type":"null","format":"date-time","description":"When request was reviewed by admin/mod (nullable).\n\nRemains null if never reviewed; audit-compliant."}],"description":"When request was reviewed by admin/mod (nullable).\n\nRemains null if never reviewed; audit-compliant."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"When request processing was completed (approved/denied/fulfilled).\n\nNullable for incomplete/pending requests."},{"type":"null","format":"date-time","description":"When request processing was completed (approved/denied/fulfilled).\n\nNullable for incomplete/pending requests."}],"description":"When request processing was completed (approved/denied/fulfilled).\n\nNullable for incomplete/pending requests."},"admin_remark":{"oneOf":[{"type":"string","description":"Admin-provided note for audit trail, compliance explanation, or legal record. Nullable."},{"type":"null","description":"Admin-provided note for audit trail, compliance explanation, or legal record. Nullable."}],"description":"Admin-provided note for audit trail, compliance explanation, or legal record. Nullable."}},"required":["id","discussionboard_member_id","status","requested_at"],"description":"Atomic data record representing a single data erasure request.\n\nAll fields captured directly from DB, providing a full history for audit, compliance, dashboard/review, and deletion workflow progress tracking."},"Idiscussionboard_data_erasure_requests.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter to show only requests from a specific member.\n\nUse in member self-service dashboards/audits, or for admin querying of an individual user."},"status":{"type":"string","description":"Filter requests by status value (e.g., 'pending', 'approved', 'completed', etc.).\n\nValue must match those stored in the schema ("},"requested_at":{"type":"string","format":"date-time","description":"Optional filter by requested_at timestamp. Supports range filtering for audit export."},"reviewed_at":{"type":"string","format":"date-time","description":"Optional filter by review timestamp. Use in admin audit queries or workflow analysis."},"completed_at":{"type":"string","format":"date-time","description":"Optional filter for completed_at – show all completed within a range."}},"description":"Search/filter object for erasure requests table.\n\nAllows admin, mod, or analytics queries for dashboard, compliance, export, audit. All fields are optional and correspond directly to schema fields.","required":[]},"IPageIdiscussionboard_data_erasure_requests":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_data_erasure_requests"},"description":"Paginated erasure request records, matching query/filter."}},"required":["pagination","data"],"description":"Paginated page envelope for data erasure request result sets.\n\nStandard envelope includes page info, array of data records. Used for admin dashboard and regulatory export/audit."},"Idiscussionboard_data_erasure_requests.IUpdate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Update the associated member for the request (UUID).\n\nNot to be performed except on migration/errors; changing member identity has audit implications."},"status":{"type":"string","description":"New status value. Used when marking as approved, denied, completed, etc. Only settable to values allowed in backend transitions/state machine."},"requested_at":{"type":"string","format":"date-time","description":"Optional update to request timestamp. Only by admin for correction/fixup."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set/clear the reviewed timestamp for this request."},{"type":"null","format":"date-time","description":"Set/clear the reviewed timestamp for this request."}],"description":"Set/clear the reviewed timestamp for this request."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set/clear the completion timestamp, indicating processing is finished."},{"type":"null","format":"date-time","description":"Set/clear the completion timestamp, indicating processing is finished."}],"description":"Set/clear the completion timestamp, indicating processing is finished."},"admin_remark":{"oneOf":[{"type":"string","description":"Update the admin remark for this request."},{"type":"null","description":"Update the admin remark for this request."}],"description":"Update the admin remark for this request."}},"description":"Update/patch object for erasure request row.\n\nEnables admin dashboards or system processes to update workflow state, audit fields, remarks. All fields are optional, matching DB schema exactly.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Records per page (default 100)."},"records":{"type":"integer","format":"uint32","description":"Total records in the query."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages (records/limit ceiling)."}},"required":["current","limit","records","pages"],"description":"Pagination metadata structure for all paged API responses.\n\nDescribes paging state for client UI, admin dashboards, CSV exports, etc."}}},"completed":166,"total":191,"step":0,"created_at":"2025-07-25T05:17:13.255Z"},"tokenUsage":{"facade":{"aggregate":{"total":2629638,"input":{"total":2508490,"cached":0},"output":{"total":121148,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2629638,"input":{"total":2508490,"cached":0},"output":{"total":121148,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2629638,"input":{"total":2508490,"cached":0},"output":{"total":121148,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2629638,"input":{"total":2508490,"cached":0},"output":{"total":121148,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardModerationAction.ICreate":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the associated report that triggered this moderation action, or null if created independently. References the reporting incident that led to this moderation step (nullable according to Prisma schema)."},{"type":"null","format":"uuid","description":"ID of the associated report that triggered this moderation action, or null if created independently. References the reporting incident that led to this moderation step (nullable according to Prisma schema)."}],"description":"ID of the associated report that triggered this moderation action, or null if created independently. References the reporting incident that led to this moderation step (nullable according to Prisma schema)."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator or admin performing this action. Foreign key to either the moderator or admin assignment table."},"target_object_id":{"type":"string","format":"uuid","description":"UUID of the object being moderated (post, comment, member, board, etc.). This is the direct subject of the moderation action."},"target_object_type":{"type":"string","description":"Type/classification of the object being moderated. Examples: 'post', 'comment', 'member', 'board'. Provides polymorphic reference resolution in moderation workflows."},"action_type":{"type":"string","description":"Type of moderation action being performed. Examples include: 'warn', 'edit', 'delete', 'ban', 'lock', 'pin', etc. Used for audit, analytics, and role-appropriate workflows."},"rationale":{"type":"string","description":"Explanation or justification for why this action was taken. Critical for audit/compliance, escalation review, and appeals. May include member behavior, policy reference, or summarization of investigation."},"actioned_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was performed. Required for audit trails, SLA compliance, and chronological reporting."}},"required":["acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"Request body for creating a moderation action in the system. Content and constraints mapped strictly to the discussionboard_moderation_actions Prisma model. All foreign keys and timestamps follow schema documentation. Nullable report_id optionally associates this action to a prior user incident report. Conforms to role-based escalation workflows and compliance/audit rules described in requirements."},"IDiscussionboardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the moderation action record, unique identifier. Prisma table column: id."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the report that prompted the action, or null if this was a proactive or patrol action. Prisma column: report_id."},{"type":"null","format":"uuid","description":"ID of the report that prompted the action, or null if this was a proactive or patrol action. Prisma column: report_id."}],"description":"ID of the report that prompted the action, or null if this was a proactive or patrol action. Prisma column: report_id."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator/admin account that performed the action. Prisma column: acting_moderator_id."},"target_object_id":{"type":"string","format":"uuid","description":"UUID of the entity being moderated (such as post, comment, or user). Prisma column: target_object_id."},"target_object_type":{"type":"string","description":"Type/classification of the target object. Examples: 'post', 'comment', etc. Prisma column: target_object_type."},"action_type":{"type":"string","description":"Type of moderation action ('warn','edit','delete','ban','lock', etc.). Prisma column: action_type."},"rationale":{"type":"string","description":"Detailed rationale or explanation for this moderation action. For compliance, transparency, and appeals. Prisma column: rationale."},"actioned_at":{"type":"string","format":"date-time","description":"Timestamp when the action was taken. For timeline/audit use. Prisma column: actioned_at."}},"required":["id","acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"Represents a moderation action as stored in the database, in direct correspondence with the discussionboard_moderation_actions Prisma schema. Includes polymorphic linkage, audit trail, action metadata, and explanatory rationale per business rules."},"IDiscussionboardModerationAction.IRequest":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by report ID associated with moderation action (nullable, matches Prisma schema)."},{"type":"null","format":"uuid","description":"Filter by report ID associated with moderation action (nullable, matches Prisma schema)."}],"description":"Filter by report ID associated with moderation action (nullable, matches Prisma schema)."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Filter to only actions performed by this moderator/admin UUID."},"target_object_id":{"type":"string","format":"uuid","description":"Filter by the specific object moderated."},"target_object_type":{"type":"string","description":"Filter by the type/classification of object under moderation."},"action_type":{"type":"string","description":"Filter by type of moderation action, e.g., 'warn', 'edit', 'ban'."},"actioned_at_from":{"type":"string","format":"date-time","description":"Lower bound for moderation action date."},"actioned_at_to":{"type":"string","format":"date-time","description":"Upper bound for moderation action date."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination parameters (page, limit, etc.)."}},"required":[],"description":"Request object for filtering/searching moderation actions. Supports advanced filtering by fields defined in schema plus optional pagination envelope according to business needs. All filters strictly match schema columns to ensure query compliance."},"IPageIDiscussionboardModerationAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerationAction"},"description":"List of matching moderation action records for the provided query and pagination envelope."}},"required":["pagination","data"],"description":"Paginated result for moderation action search/list APIs. Data array contains moderation action records, paging metadata in standard format."},"IDiscussionboardModerationAction.IUpdate":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the associated report for this action (if any). Nullable per schema."},{"type":"null","format":"uuid","description":"Update the associated report for this action (if any). Nullable per schema."}],"description":"Update the associated report for this action (if any). Nullable per schema."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the account performing the update—typically for audit/audit correction workflows."},"target_object_id":{"type":"string","format":"uuid","description":"ID of the new or corrected object under moderation (admin workflows only)."},"target_object_type":{"type":"string","description":"(Optional) new or corrected classification for object if amending moderation record."},"action_type":{"type":"string","description":"(Optional) update to moderation action type. Only if justified by error or appeals logic."},"rationale":{"type":"string","description":"Corrected, supplemented or amended rationale for the action (required for audit fixes/appeals)."},"actioned_at":{"type":"string","format":"date-time","description":"(Optional) new/corrected time of moderation action, for audit consistency."}},"required":[],"description":"Request body to update a moderation action. All fields correspond 1:1 to possible changes in moderation record, as allowed in platform audit flows. Omitted fields are left unchanged. Update permission is strictly admin/moderator only, per requirements. Conforms strictly to actual schema fields—never invents non-existent properties."},"IDiscussionboardBan.ICreate":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"UUID of the member being banned. Foreign key to member account."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator/admin imposing the ban."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the report for which this ban was issued (nullable)."},{"type":"null","format":"uuid","description":"ID of the report for which this ban was issued (nullable)."}],"description":"ID of the report for which this ban was issued (nullable)."},"reason":{"type":"string","description":"Explanation for ban—summarizes the infraction and justification for audit/appeal. Required."},"ban_type":{"type":"string","description":"Type of ban, either 'temporary' or 'permanent'. Directly mapped from business rules."},"banned_at":{"type":"string","format":"date-time","description":"When the ban takes effect (ISO8601 UTC timestamp)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"If temporary: when the ban expires (nullable if permanent, as per schema)."},{"type":"null","format":"date-time","description":"If temporary: when the ban expires (nullable if permanent, as per schema)."}],"description":"If temporary: when the ban expires (nullable if permanent, as per schema)."}},"required":["banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Request to create a ban (or suspension) for a member. All schema-required fields per discussionboard_bans Prisma model. Bans may be temporary (expires_at set) or permanent (expires_at null). Only actors with moderation/admin roles may create. Rationale for audit, ban escalation, or appeals is mandatory."},"IDiscussionboardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for this ban record."},"banned_member_id":{"type":"string","format":"uuid","description":"ID of the member subjected to the ban."},"acting_moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator/admin issuing the ban."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the report incident for this ban, or null if initiated proactively."},{"type":"null","format":"uuid","description":"Reference to the report incident for this ban, or null if initiated proactively."}],"description":"Reference to the report incident for this ban, or null if initiated proactively."},"reason":{"type":"string","description":"Explanation provided for the ban, as shown in audit trail or appeals review."},"ban_type":{"type":"string","description":"Ban type: 'temporary' or 'permanent', according to escalation process."},"banned_at":{"type":"string","format":"date-time","description":"Timestamp when ban was imposed."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Ban expiry time, if temporary. Null for permanent bans."},{"type":"null","format":"date-time","description":"Ban expiry time, if temporary. Null for permanent bans."}],"description":"Ban expiry time, if temporary. Null for permanent bans."}},"required":["id","banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Represents a single ban or suspension as issued by moderation. All business logic and timelines correspond to business rule escalation and appeals process. Foreign keys maintained as per schema, reason and time envelope required for audit."},"IDiscussionboardBan.IRequest":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"Filter by the banned member UUID. For reviewing all bans against a user."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Filter by moderator/admin who imposed the ban."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by source report for this ban (nullable)."},{"type":"null","format":"uuid","description":"Filter by source report for this ban (nullable)."}],"description":"Filter by source report for this ban (nullable)."},"ban_type":{"type":"string","description":"Filter by ban type—'temporary' or 'permanent'."},"banned_at_from":{"type":"string","format":"date-time","description":"Earliest start for ban search window."},"banned_at_to":{"type":"string","format":"date-time","description":"Latest end for ban search window."},"expires_at_from":{"type":"string","format":"date-time","description":"Min expiry date for ban list, if any."},"expires_at_to":{"type":"string","format":"date-time","description":"Max expiry date for ban list, if any."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination"}},"required":[],"description":"Request/filter body for searching/listing bans in moderation workflow. All properties map strictly to ban schema for index/search methods. Non-existent properties never invented."},"IPageIDiscussionboardBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBan"},"description":"The array of ban records resulting from the ban query/filter envelope."}},"required":["pagination","data"],"description":"Paginated list of ban results for moderation audit/escalation workflows."},"IDiscussionboardBan.IUpdate":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"Update the member identifier for the ban (rare, use only in admin schema repairs)."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Update/override the moderator/admin responsible for this ban."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Link or update the source report for this ban. Nullable."},{"type":"null","format":"uuid","description":"Link or update the source report for this ban. Nullable."}],"description":"Link or update the source report for this ban. Nullable."},"reason":{"type":"string","description":"Update or amend the stated reason for this ban (for audit appeal corrections)."},"ban_type":{"type":"string","description":"Update ban type to 'temporary' or 'permanent' if correction needed for business escalation record."},"banned_at":{"type":"string","format":"date-time","description":"Correction/update of the ban issue timestamp."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update ban expiration to new time (permit extension or early end per appeals). Null for permanent bans."},{"type":"null","format":"date-time","description":"Update ban expiration to new time (permit extension or early end per appeals). Null for permanent bans."}],"description":"Update ban expiration to new time (permit extension or early end per appeals). Null for permanent bans."}},"required":[],"description":"Request for updating a ban record. All parameters must map to existing schema fields for ban entity. This may be used for admin audit corrections or appeals. No non-existent properties allowed."},"IDiscussionboardWarning.ICreate":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"UUID of the member to be warned. Must reference a real account."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator/admin issuing the warning."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report record that triggered this warning, or null if not tied to a report."},{"type":"null","format":"uuid","description":"Report record that triggered this warning, or null if not tied to a report."}],"description":"Report record that triggered this warning, or null if not tied to a report."},"reason":{"type":"string","description":"Short but complete explanation for the warning, documenting the infraction for compliance, appeals, and member notification."},"warned_at":{"type":"string","format":"date-time","description":"When the warning was assigned, as required by audit and escalation timelines."}},"required":["warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Request to create or issue a warning to member, we enforce all business rules for warning/ban escalation as per platform compliance requirements. All fields are mandatory except nullable report_id; only actors with mod/admin roles may create. No unsupported or non-schema properties permitted."},"IDiscussionboardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Warning record primary key identifier. This is a UUID uniquely identifying each warning event for audit and traceability according to the business rules and moderation escalation requirements from the Prisma schema.\n\nEnables linking to appeals, review panels, and enables rapid lookup for investigation. Refer to the column description in the schema: 'Primary Key for each warning record.'"},"warned_member_id":{"type":"string","format":"uuid","description":"The member's unique ID (UUID) who is receiving the warning. This property refers to the warning's subject, linking to the discussionboard_members entity for actor attribution and audit. Referenced in appeals, repeat-offender checks, and rights escalations. Prisma schema: 'Member who receives the warning.'"},"acting_moderator_id":{"type":"string","format":"uuid","description":"The moderator or admin's unique ID (UUID) who issues the warning. Used for compliance, audit, and business workflows (as in 'Moderator/admin issuing the warning' in the Prisma schema doc comment).\n\nReferential integrity ensures the issuer is trackable for the life of the warning, supporting full accountability in the escalation pipeline."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Nullable UUID referencing the underlying report incident or moderation record that led to this warning, if applicable. Enables chain-of-custody tracking in workflows. See: 'Report that caused the warning (nullable...)' Prisma schema."},{"type":"null"}],"description":"Nullable UUID referencing the underlying report incident or moderation record that led to this warning, if applicable. Enables chain-of-custody tracking in workflows. See: 'Report that caused the warning (nullable...)' Prisma schema."},"reason":{"type":"string","description":"Administrator- or moderator-supplied textual explanation of the warning. Describes the violation, risk reasoning, or observed behavior, for both audit and appeals. Required for transparency, as per the schema doc: 'Warning reason, descriptive text stating the violation or risk observed.'"},"warned_at":{"type":"string","format":"date-time","description":"ISO 8601/RFC3339 datetimestamp of when this warning was officially applied. Enforces single source of truth for timeline computation, audit, and escalation automation. Schema: 'Timestamp when warning was applied.'"}},"required":["id","warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Represents an issued warning in the discussion board system. Each record captures a single official warning to a member, referencing the subject member (warned_member_id), the issuing moderator or admin (acting_moderator_id), an optional report (report_id) that triggered the warning, the reason for the warning (reason), and the precise issue time (warned_at).\n\nThis schema is fully aligned with the @discussionboard_warnings Prisma model, which implements the warning step of the moderation and escalation pipeline. All fields are atomic (UUID/text/date) and enable audit trails, compliance with business rules, and tracking of moderation escalation or appeals. Mutable fields (such as reason or report_id) are updatable in line with appeals policies but serve as immutable audit once issued except in rare compliance-correction cases.\n\nThe existence of this record demonstrates the use of progressive discipline to enforce platform standards and enable downstream automation (e.g., three-warnings-to-ban escalation) as described in business requirements. Each record is persisted permanently (no soft delete), and all properties adhere strictly to the schema-derived definitions for integration, GDPR-compliance, and effective platform governance."}}},"completed":167,"total":191,"step":0,"created_at":"2025-07-25T05:17:14.772Z"},"tokenUsage":{"facade":{"aggregate":{"total":2723577,"input":{"total":2601712,"cached":0},"output":{"total":121865,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2723577,"input":{"total":2601712,"cached":0},"output":{"total":121865,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2723577,"input":{"total":2601712,"cached":0},"output":{"total":121865,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2723577,"input":{"total":2601712,"cached":0},"output":{"total":121865,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardConfiguration.IRequest":{"type":"object","properties":{"key":{"type":"string","description":"The configuration key to filter by, as defined in the discussionboard_configurations table. This is a string used to reference a specific configuration setting, such as 'max_post_per_hour'.\n\nAligns with the key property in the schema: unique per row, used for lookups, automation, or configuration management as described in the Prisma DB schema and business requirement documentation."},"value":{"oneOf":[{"type":"string","description":"The configuration value to filter for. It is always a string in the database for flexibility, but may be null (in order to match unset/optional values). For example: to search for configurations with value 'true', pass value='true'.\n\nAligns with the value field in the schema, which is nullable and always stored as a string; referenced in audit/compliance and admin filtering use cases."},{"type":"null","description":"The configuration value to filter for. It is always a string in the database for flexibility, but may be null (in order to match unset/optional values). For example: to search for configurations with value 'true', pass value='true'.\n\nAligns with the value field in the schema, which is nullable and always stored as a string; referenced in audit/compliance and admin filtering use cases."}],"description":"The configuration value to filter for. It is always a string in the database for flexibility, but may be null (in order to match unset/optional values). For example: to search for configurations with value 'true', pass value='true'.\n\nAligns with the value field in the schema, which is nullable and always stored as a string; referenced in audit/compliance and admin filtering use cases."},"description":{"oneOf":[{"type":"string","description":"An optional description filter for searching among configuration records, as stored in the discussionboard_configurations.description column. Use to find config rows with specific text in the admin panel or config list.\n\nDescription is a user-facing or admin note for a given configuration setting; aligns with platform management/clarification as in the schema and requirements documents."},{"type":"null","description":"An optional description filter for searching among configuration records, as stored in the discussionboard_configurations.description column. Use to find config rows with specific text in the admin panel or config list.\n\nDescription is a user-facing or admin note for a given configuration setting; aligns with platform management/clarification as in the schema and requirements documents."}],"description":"An optional description filter for searching among configuration records, as stored in the discussionboard_configurations.description column. Use to find config rows with specific text in the admin panel or config list.\n\nDescription is a user-facing or admin note for a given configuration setting; aligns with platform management/clarification as in the schema and requirements documents."}},"description":"Filter/search request schema for the discussionboard_configurations table.\n\nAllows admins (or privileged users) to specify filtering/searching fields based on key, value, or description. Supports business requirement for scalable management of runtime configurations without referencing fields outside the schema. Null values enable searching for unset/optional records.","required":[]},"IPageIDiscussionboardConfiguration":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardConfiguration"},"description":"Array of configuration record results matching the search/filter and pagination settings.\n\nEach item reflects an atomic row in the discussionboard_configurations table and contains only properties defined in the schema."}},"required":["pagination","data"],"description":"Paginated return structure for a filtered search of discussionboard_configurations.\n\nThis data structure is used to deliver results to dashboards, listing admin pages, or developer inspection tools, in compliance with audit and platform manageability requirements."},"IDiscussionboardConfiguration.IUpdate":{"type":"object","properties":{"key":{"type":"string","description":"The configuration key. Must match the constraints of the discussionboard_configurations.key column.\n\nWhen supplied in an update, may be used to set/rename the key for this configuration record (admin only). Uniqueness is enforced at database level as required by business logic."},"value":{"oneOf":[{"type":"string","description":"The updated configuration value (as a string or null for an unset option). Always follows the type of the schema value field (string, nullable)."},{"type":"null","description":"The updated configuration value (as a string or null for an unset option). Always follows the type of the schema value field (string, nullable)."}],"description":"The updated configuration value (as a string or null for an unset option). Always follows the type of the schema value field (string, nullable)."},"description":{"oneOf":[{"type":"string","description":"Optional admin-facing description to update on the configuration record. Allows clarification or audit note modification as managed in the discussionboard_configurations table."},{"type":"null","description":"Optional admin-facing description to update on the configuration record. Allows clarification or audit note modification as managed in the discussionboard_configurations table."}],"description":"Optional admin-facing description to update on the configuration record. Allows clarification or audit note modification as managed in the discussionboard_configurations table."}},"description":"Update payload for a discussionboard_configurations record.\n\nOnly fields present in the schema may be modified, supporting platform runtime reconfiguration, audit, or documentation needs. Used in admin update workflows or compliance edit screens.","required":[]},"IDiscussionboardNotification.ICreate":{"type":"object","properties":{"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"The entity or user that is the intended recipient of the notification, nullable for system-wide notifications. UUID as per discussionboard_notifications.target_id.\n\nAllows targeting individual users/entities, or unset for global notifications."},{"type":"null","format":"uuid","description":"The entity or user that is the intended recipient of the notification, nullable for system-wide notifications. UUID as per discussionboard_notifications.target_id.\n\nAllows targeting individual users/entities, or unset for global notifications."}],"description":"The entity or user that is the intended recipient of the notification, nullable for system-wide notifications. UUID as per discussionboard_notifications.target_id.\n\nAllows targeting individual users/entities, or unset for global notifications."},"type":{"type":"string","description":"Event type string (e.g., 'user_mention', 'system_announcement') indicating the kind of event that triggered this notification.\n\nReferenced by notification workflows and configures display/routing in notification UIs."},"title":{"type":"string","description":"Short summary or title for this notification event; human-readable, appears in UI and audit logs.\n\nMust not be null as per schema."},"body":{"oneOf":[{"type":"string","description":"Full message body for the notification. Optional per schema (nullable); may be null for minimal/status-only notifs."},{"type":"null","description":"Full message body for the notification. Optional per schema (nullable); may be null for minimal/status-only notifs."}],"description":"Full message body for the notification. Optional per schema (nullable); may be null for minimal/status-only notifs."},"delivered":{"type":"boolean","description":"Flag indicating whether delivery of the notification has been confirmed (true) or not (false). Fulfills audit/compliance columns."}},"required":["type","title","delivered"],"description":"Payload for creating a new notification log entry in discussionboard_notifications table.\n\nAllows system/admins to record a new notification with all required event details, in alignment with delivery workflows, audit trails, or notification dashboards."},"IDiscussionboardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The notification log's primary key UUID. Assigned by the system/database at creation. Used for direct referencing and audit queries."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."},{"type":"null","format":"uuid","description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."}],"description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."},"type":{"type":"string","description":"The type/category of the notification event (e.g., 'user_mention', 'system_announcement').\n\nUsed for workflow, filtering, or display in notifications panels."},"title":{"type":"string","description":"Short title/summary for the UI and audit logs, per schema specification."},"body":{"oneOf":[{"type":"string","description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."},{"type":"null","description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."}],"description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."},"delivered":{"type":"boolean","description":"Indicates if the notification has been delivered."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created, for audit/sync. Assigned by the system."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"If delivery confirmed, the actual timestamp; null otherwise."},{"type":"null","format":"date-time","description":"If delivery confirmed, the actual timestamp; null otherwise."}],"description":"If delivery confirmed, the actual timestamp; null otherwise."}},"required":["id","type","title","delivered","created_at"],"description":"Discussion board notification entity (audit log record).\n\nRepresents a single sent notification—including recipient, type, audit/compliance timestamps, and delivery flag. Fulfills requirements for system-wide/user notification traceability as described in platform and DB documentation."},"IDiscussionboardNotification.IRequest":{"type":"object","properties":{"type":{"type":"string","description":"Filter by notification type (string event type as used in the discussionboard_notifications.type column). e.g., 'user_mention', 'system_announcement', etc."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for notifications sent to this entity/user UUID. Aligns with discussionboard_notifications.target_id (nullable in schema)."},{"type":"null","format":"uuid","description":"Filter for notifications sent to this entity/user UUID. Aligns with discussionboard_notifications.target_id (nullable in schema)."}],"description":"Filter for notifications sent to this entity/user UUID. Aligns with discussionboard_notifications.target_id (nullable in schema)."},"delivered":{"type":"boolean","description":"Filter for notification delivery status: true for delivered, false for undelivered. Used for admin monitoring of notification workflows."},"title":{"type":"string","description":"Search/filter substring for notification title. Supports advanced query for notification dashboards using trgm-based search if configured in DB schema."}},"description":"Filter/search for notification log records in the discussionboard_notifications table.\n\nAllows platform administrators to filter by notification type, target recipient, delivery status, or partial title match for scalable audit and workflow monitoring. Only schema-supported fields are allowed.","required":[]},"IPageIDiscussionboardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotification"},"description":"Array of notification event records matching filter/search and pagination criteria."}},"required":["pagination","data"],"description":"Paginated response structure for notification search/list endpoints.\n\nUsed by admin dashboards, notification panels, or delivery audit tools. Complies with pagination best practices and audit traceability needs."},"Idiscussionboard_notifications":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The notification log's primary key UUID. Assigned by the system/database at creation. Used for direct referencing and audit queries."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."},{"type":"null","format":"uuid","description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."}],"description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."},"type":{"type":"string","description":"The type/category of the notification event (e.g., 'user_mention', 'system_announcement').\n\nUsed for workflow, filtering, or display in notifications panels."},"title":{"type":"string","description":"Short title/summary for the UI and audit logs, per schema specification."},"body":{"oneOf":[{"type":"string","description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."},{"type":"null","description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."}],"description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."},"delivered":{"type":"boolean","description":"Indicates if the notification has been delivered."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created, for audit/sync. Assigned by the system."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"If delivery confirmed, the actual timestamp; null otherwise."},{"type":"null","format":"date-time","description":"If delivery confirmed, the actual timestamp; null otherwise."}],"description":"If delivery confirmed, the actual timestamp; null otherwise."},"description":{"type":"string","description":"Discussion board notification entity (audit log record). Represents a single sent notification—including recipient, type, audit/compliance timestamps, and delivery flag. Fulfills requirements for system-wide/user notification traceability as described in platform and DB documentation."}},"required":["id","type","title","delivered","created_at","description"],"description":"Discussion board notification entity (audit log record).\n\nRepresents a single sent notification—including recipient, type, audit/compliance timestamps, and delivery flag. Fulfills requirements for system-wide/user notification traceability as described in platform and DB documentation."},"Idiscussionboard_notifications.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Updateable title for the notification log. Used for editing/annotating delivery audits or correcting UI-facing message summaries."},"body":{"oneOf":[{"type":"string","description":"Edit the message body (nullable per schema). Used for correcting/clarifying audit entries."},{"type":"null","description":"Edit the message body (nullable per schema). Used for correcting/clarifying audit entries."}],"description":"Edit the message body (nullable per schema). Used for correcting/clarifying audit entries."},"delivered":{"type":"boolean","description":"Modify delivery status of the notification; updated by system jobs or admin tools for compliance."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of delivery confirmation. Nullable per schema—for updating upon successful delivery acknowledgment."},{"type":"null","format":"date-time","description":"Timestamp of delivery confirmation. Nullable per schema—for updating upon successful delivery acknowledgment."}],"description":"Timestamp of delivery confirmation. Nullable per schema—for updating upon successful delivery acknowledgment."}},"description":"Update payload for a notification log record in discussionboard_notifications.\n\nEnables annotation, correction, or delivery-status workflow updates. Features only schema-permitted modifiable fields; supports audit, compliance, and UI integrity.","required":[]},"Idiscussionboard_settings.ICreate":{"type":"object","properties":{"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"Entity or area identifier for which the setting applies. Nullable for global context; aligns with discussionboard_settings.scope_id FK column as described in platform feature/settings documentation."},{"type":"null","format":"uuid","description":"Entity or area identifier for which the setting applies. Nullable for global context; aligns with discussionboard_settings.scope_id FK column as described in platform feature/settings documentation."}],"description":"Entity or area identifier for which the setting applies. Nullable for global context; aligns with discussionboard_settings.scope_id FK column as described in platform feature/settings documentation."},"scope_type":{"type":"string","description":"Scope type: identifies the context (e.g., 'channel', 'section', 'feature_flag'). Not an enum, normalized string as per schema."},"key":{"type":"string","description":"Unique setting key for the given scope/entity. Defines what the setting controls. Examples: 'moderation_policy', 'max_upload_size'. Must be unique in combination with scope_type and scope_id."},"value":{"oneOf":[{"type":"string","description":"Actual value of the setting (flag, configuration string, limit, etc). Nullable for unset/optional settings as in schema."},{"type":"null","description":"Actual value of the setting (flag, configuration string, limit, etc). Nullable for unset/optional settings as in schema."}],"description":"Actual value of the setting (flag, configuration string, limit, etc). Nullable for unset/optional settings as in schema."},"description":{"oneOf":[{"type":"string","description":"Optional human/admin-facing explanation for the setting (nullable, used for platform documentation and audit support)."},{"type":"null","description":"Optional human/admin-facing explanation for the setting (nullable, used for platform documentation and audit support)."}],"description":"Optional human/admin-facing explanation for the setting (nullable, used for platform documentation and audit support)."}},"required":["scope_type","key"],"description":"Payload for creating a per-feature/area setting record in discussionboard_settings table.\n\nAllows flexible creation of feature, entity, or channel/section-specific configuration flags. Used by privileged system actors for runtime managing of feature toggles, policies, or per-area adjustments. Only schema-supported fields are present."},"Idiscussionboard_settings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"System-assigned unique ID for settings record; primary key in discussionboard_settings table."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"Entity-specific or global scope UUID for the setting. Nullable for settings not tied to a specific entity. Aligns with schema FK."},{"type":"null","format":"uuid","description":"Entity-specific or global scope UUID for the setting. Nullable for settings not tied to a specific entity. Aligns with schema FK."}],"description":"Entity-specific or global scope UUID for the setting. Nullable for settings not tied to a specific entity. Aligns with schema FK."},"scope_type":{"type":"string","description":"Scope type (e.g., 'channel', 'section', 'feature_flag'). Normalized string defining subclass of setting context."},"key":{"type":"string","description":"Setting key for referencing the option. Example: 'moderation_policy'. Unique per scope. Fulfills atomic configuration requirement."},"value":{"oneOf":[{"type":"string","description":"Value string for the setting; allows flexible atomic config. Nullable (unset or optional)."},{"type":"null","description":"Value string for the setting; allows flexible atomic config. Nullable (unset or optional)."}],"description":"Value string for the setting; allows flexible atomic config. Nullable (unset or optional)."},"description":{"oneOf":[{"type":"string","description":"Human/admin-facing description of the setting. Optional (nullable). Used for UI tools/documentation."},{"type":"null","description":"Human/admin-facing description of the setting. Optional (nullable). Used for UI tools/documentation."}],"description":"Human/admin-facing description of the setting. Optional (nullable). Used for UI tools/documentation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of settings record creation, per schema/table audit field."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp; set on any mutation, used for audit traceability and UI last-modified display."}},"required":["id","scope_type","key","created_at","updated_at"],"description":"Discussion board per-feature/area settings entity.\n\nRepresents concrete toggle or configuration entries applied to particular features, channels, or entities. Supports runtime manageability, audit, and per-context override as described in platform and schema documentation."},"Idiscussionboard_settings.IRequest":{"type":"object","properties":{"scope_type":{"type":"string","description":"Filter for settings related to a specific context/scope (e.g., 'channel', 'section', 'feature_flag'). Normalized string, aligns with schema column."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter settings whose scope matches this UUID (nullable for global/unspecified). Maps to schema/table FK."},{"type":"null","format":"uuid","description":"Filter settings whose scope matches this UUID (nullable for global/unspecified). Maps to schema/table FK."}],"description":"Filter settings whose scope matches this UUID (nullable for global/unspecified). Maps to schema/table FK."},"key":{"type":"string","description":"Filter for a unique key within the specified scope. Example: 'moderation_policy'. Ensures only relevant settings are returned for the admin/feature query."},"value":{"oneOf":[{"type":"string","description":"Filter for settings with this value (string or null as per schema, e.g., 'true', '100', or null for unset)."},{"type":"null","description":"Filter for settings with this value (string or null as per schema, e.g., 'true', '100', or null for unset)."}],"description":"Filter for settings with this value (string or null as per schema, e.g., 'true', '100', or null for unset)."},"description":{"oneOf":[{"type":"string","description":"Optional filter by human-facing description string for setting."},{"type":"null","description":"Optional filter by human-facing description string for setting."}],"description":"Optional filter by human-facing description string for setting."}},"description":"Per-feature/area settings search/filter request.\n\nAll properties refer exclusively to fields in discussionboard_settings schema—enables operational dashboards, admin feature toggles interface, and bulk config review screens.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number (uint32, 0-based for pagination systems)."},"limit":{"type":"integer","description":"Number of records per page (uint32, default 100)."},"records":{"type":"integer","description":"Total number of records matching filter/search in DB or index."},"pages":{"type":"integer","description":"Total number of result pages (ceil(records/limit))."}},"required":["current","limit","records","pages"],"description":"Standard pagination information structure for API responses.\n\nContains meta-details for paginated requests, compliant with IPage<> containers in platform design."},"IDiscussionboardConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key as a string UUID. Uniquely identifies the configuration entry in the table. Auto-generated at creation; used for reference/audit."},"key":{"type":"string","description":"Unique string denoting this configuration item's key. Used for identification, queries, automation, and enforcement of uniqueness in system config management."},"value":{"oneOf":[{"type":"string","description":"Actual configuration value stored as a string (always string or null as per flexible system design). Used for toggling feature flags, runtime control, or admin configuration panels."},{"type":"null","description":"Actual configuration value stored as a string (always string or null as per flexible system design). Used for toggling feature flags, runtime control, or admin configuration panels."}],"description":"Actual configuration value stored as a string (always string or null as per flexible system design). Used for toggling feature flags, runtime control, or admin configuration panels."},"description":{"oneOf":[{"type":"string","description":"Optional admin/user-facing description for documentation—nullable per schema."},{"type":"null","description":"Optional admin/user-facing description for documentation—nullable per schema."}],"description":"Optional admin/user-facing description for documentation—nullable per schema."},"created_at":{"type":"string","format":"date-time","description":"Audit field: timestamp when the configuration entry was created."},"updated_at":{"type":"string","format":"date-time","description":"Audit field: timestamp of last modification for this config row."}},"required":["id","key","created_at","updated_at"],"description":"System configuration row for discussion board application.\n\nContains all atomic fields for a configuration option; used in admin dashboards, audit logs, and feature toggling in platform runtime."}}},"completed":179,"total":191,"step":0,"created_at":"2025-07-25T05:17:28.051Z"},"tokenUsage":{"facade":{"aggregate":{"total":2927686,"input":{"total":2799133,"cached":0},"output":{"total":128553,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2927686,"input":{"total":2799133,"cached":0},"output":{"total":128553,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":2927686,"input":{"total":2799133,"cached":0},"output":{"total":128553,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":2927686,"input":{"total":2799133,"cached":0},"output":{"total":128553,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComponents","components":{"schemas":{"IDiscussionboardWarning.IRequest":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the member to be warned. Must reference an existing member in the discussion board system. Used for associating the warning event with the correct actor as per moderation and escalation business rules."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the moderator or admin issuing the warning. Used for audit logging and compliance tracking. Must reference a valid moderator/admin."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report record (UUID) that caused this warning. Nullable if warning is preemptive or due to off-platform or accumulated evidence. Used to link the warning to the triggering moderation event for audit/compliance."},{"type":"null","format":"uuid","description":"Report record (UUID) that caused this warning. Nullable if warning is preemptive or due to off-platform or accumulated evidence. Used to link the warning to the triggering moderation event for audit/compliance."}],"description":"Report record (UUID) that caused this warning. Nullable if warning is preemptive or due to off-platform or accumulated evidence. Used to link the warning to the triggering moderation event for audit/compliance."},"reason":{"type":"string","description":"Textual explanation (required) for why the warning is being issued. Business rules require detailed description of the violation or risk observed so that escalation and appeal flows have the necessary context. Example: 'Repeated spam posting despite prior reminders.'"},"warned_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601 format) when the warning was applied. Used for time-series audit, escalation, and compliance tracking."}},"required":["warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Request body for searching/filtering warning records or creating a new warning in the platform. Fields strictly map to the Prisma schema columns. Used in audit/compliance and escalation review flows. Each property directly references a column in the database table—no virtual or derived fields present."},"IPageIDiscussionboardWarning":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardWarning"},"description":"List of warning records for the current page."}},"required":["pagination","data"],"description":"Paginated result wrapper for warning record queries. Implements platform-wide paging strategy for scalable moderation/audit UIs and backoffice analytics. Each page includes metadata (pagination info) and a list of warning objects as defined in the core model. The schema is used not just for UI, but also for APIs, exports, and cross-service batch integration."},"IDiscussionboardWarning.IUpdate":{"type":"object","properties":{"warned_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target member (UUID) for the warning. Only changed in rare remediation or audit error correction; otherwise, immutable after creation."},{"type":"null","format":"uuid","description":"Target member (UUID) for the warning. Only changed in rare remediation or audit error correction; otherwise, immutable after creation."}],"description":"Target member (UUID) for the warning. Only changed in rare remediation or audit error correction; otherwise, immutable after creation."},"acting_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator/admin actor (UUID) issuing or updating the warning. Editable if audit/appeals flow requires correction."},{"type":"null","format":"uuid","description":"Moderator/admin actor (UUID) issuing or updating the warning. Editable if audit/appeals flow requires correction."}],"description":"Moderator/admin actor (UUID) issuing or updating the warning. Editable if audit/appeals flow requires correction."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderation report (UUID) that triggered the warning. Nullable for preemptive admin disciplinary actions. Used for audit trail."},{"type":"null","format":"uuid","description":"Moderation report (UUID) that triggered the warning. Nullable for preemptive admin disciplinary actions. Used for audit trail."}],"description":"Moderation report (UUID) that triggered the warning. Nullable for preemptive admin disciplinary actions. Used for audit trail."},"reason":{"oneOf":[{"type":"string","description":"Updated textual explanation for the warning, reflecting new info or appeal reason after audit review."},{"type":"null","description":"Updated textual explanation for the warning, reflecting new info or appeal reason after audit review."}],"description":"Updated textual explanation for the warning, reflecting new info or appeal reason after audit review."},"warned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Edit of when the warning was issued (typically only in audit remapping or correction workflows)."},{"type":"null","format":"date-time","description":"Edit of when the warning was issued (typically only in audit remapping or correction workflows)."}],"description":"Edit of when the warning was issued (typically only in audit remapping or correction workflows)."}},"description":"Update type for warning entity. Allows partial updates/patches for appeals, audit corrections, or moderator/admin workflow error remediation. Only schema-present fields may be updated, and all properties are nullable to support PATCH-style update flows in APIs. No delete/restore support as warnings are always atomic and immutable until deleted. All properties map to audit trail requirements in compliance workflows.","required":[]},"IDeleteConfirmation":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates if the delete operation was confirmed successful."},"message":{"type":"string","description":"Optional explanatory message, e.g., reason for deletion result or details about audit/error handling."}},"required":["success"],"description":"Delete confirmation response returned when soft/hard delete operations are performed. Standardizes the platform's delete messaging format for consistent handling in all APIs, governance, and client error workflows."},"IDiscussionboardEngagementMetric.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target member's UUID for filtering engagement metrics. If null, the filter is not applied and all members are included. Used for DAU/WAU and individual engagement tracking analytics."},{"type":"null","format":"uuid","description":"Target member's UUID for filtering engagement metrics. If null, the filter is not applied and all members are included. Used for DAU/WAU and individual engagement tracking analytics."}],"description":"Target member's UUID for filtering engagement metrics. If null, the filter is not applied and all members are included. Used for DAU/WAU and individual engagement tracking analytics."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Restrict analytics to a specific board (UUID). Nullable for global metric queries. Used by admin analytics panels to break down activity by board."},{"type":"null","format":"uuid","description":"Restrict analytics to a specific board (UUID). Nullable for global metric queries. Used by admin analytics panels to break down activity by board."}],"description":"Restrict analytics to a specific board (UUID). Nullable for global metric queries. Used by admin analytics panels to break down activity by board."},"engagement_date_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter engagement metrics starting from this date (inclusive). Supports dashboard time range selection and heatmaps."},{"type":"null","format":"date-time","description":"Filter engagement metrics starting from this date (inclusive). Supports dashboard time range selection and heatmaps."}],"description":"Filter engagement metrics starting from this date (inclusive). Supports dashboard time range selection and heatmaps."},"engagement_date_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter engagement metrics up to this date (inclusive). Enables comparative/charts analysis over periods."},{"type":"null","format":"date-time","description":"Filter engagement metrics up to this date (inclusive). Enables comparative/charts analysis over periods."}],"description":"Filter engagement metrics up to this date (inclusive). Enables comparative/charts analysis over periods."}},"description":"Request shape for filtering/searching engagement metrics analytics. Every property directly maps to independently indexed columns in the analytics table, supporting slice-and-dice UI, heatmap queries, time-series, and cohort dashboards. Nulls allow for unconstrained (global) queries.","required":[]},"IPageIDiscussionboardEngagementMetric":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardEngagementMetric"},"description":"Engagement metrics records for the current page."}},"required":["pagination","data"],"description":"Paginated result container for analytics dashboard queries and bulk-export scenarios. The IPage wrapper allows for efficient front-end pagination, reporting, and export mechanisms. The core analytics metric properties can be further filtered by request shape."},"IDiscussionboardEngagementMetric":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the engagement metric record."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional member UUID for individual engagement. Null for anonymous or aggregate data."},{"type":"null","format":"uuid","description":"Optional member UUID for individual engagement. Null for anonymous or aggregate data."}],"description":"Optional member UUID for individual engagement. Null for anonymous or aggregate data."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board context for the engagement metric. Null if metric is board-agnostic."},{"type":"null","format":"uuid","description":"Board context for the engagement metric. Null if metric is board-agnostic."}],"description":"Board context for the engagement metric. Null if metric is board-agnostic."},"engagement_date":{"type":"string","format":"date-time","description":"Timestamp for the metrics aggregation bucket."},"posts_created_count":{"type":"integer","description":"Total posts created in this period for the metric row."},"comments_created_count":{"type":"integer","description":"Total comments created in this period for the metric row."},"votes_cast_count":{"type":"integer","description":"Total voting actions cast in this period for the metric row."}},"required":["id","engagement_date","posts_created_count","comments_created_count","votes_cast_count"],"description":"Atomic row representing engagement activity for a specific user or board in a specific time period; used to build analytics, trend charts, and cohort dashboards."},"IDiscussionboardActivityLog.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Search for activity logs from actions by a specific member (UUID). Null means all users."},{"type":"null","format":"uuid","description":"Search for activity logs from actions by a specific member (UUID). Null means all users."}],"description":"Search for activity logs from actions by a specific member (UUID). Null means all users."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Restrict logs to a specific board (UUID). Ideal for trending/board usage tracking."},{"type":"null","format":"uuid","description":"Restrict logs to a specific board (UUID). Ideal for trending/board usage tracking."}],"description":"Restrict logs to a specific board (UUID). Ideal for trending/board usage tracking."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter down to logs related to a certain thread id (UUID)."},{"type":"null","format":"uuid","description":"Filter down to logs related to a certain thread id (UUID)."}],"description":"Filter down to logs related to a certain thread id (UUID)."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Only logs about actions involving this post (UUID). Used for post-level audit review."},{"type":"null","format":"uuid","description":"Only logs about actions involving this post (UUID). Used for post-level audit review."}],"description":"Only logs about actions involving this post (UUID). Used for post-level audit review."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Limit activity logs to comments on this id (UUID)."},{"type":"null","format":"uuid","description":"Limit activity logs to comments on this id (UUID)."}],"description":"Limit activity logs to comments on this id (UUID)."},"event_type":{"oneOf":[{"type":"string","description":"Type of activity (e.g., 'login', 'post_create'). Null disables this filter."},{"type":"null","description":"Type of activity (e.g., 'login', 'post_create'). Null disables this filter."}],"description":"Type of activity (e.g., 'login', 'post_create'). Null disables this filter."},"event_timestamp_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start timestamp for activity log filtering."},{"type":"null","format":"date-time","description":"Start timestamp for activity log filtering."}],"description":"Start timestamp for activity log filtering."},"event_timestamp_to":{"oneOf":[{"type":"string","format":"date-time","description":"End (inclusive) timestamp for activity log filtering."},{"type":"null","format":"date-time","description":"End (inclusive) timestamp for activity log filtering."}],"description":"End (inclusive) timestamp for activity log filtering."}},"description":"Request schema for filtering/searching raw activity log events. Allows for fine-grained audit, analytics, anomaly detection, and event drill-down analysis per requirements documentation. Null fields expand to global search. All fields map to indexed columns.","required":[]},"IPageIDiscussionboardActivityLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardActivityLog"},"description":"Array of raw activity log events matching query for analytics, audit, or heatmap display."}},"required":["pagination","data"],"description":"Paginated result structure for efficient front-end consumption and high-volume analytics dashboard queries. Used in activity heatmaps, rare journey tracking, and anomaly investigation workflows."},"IDiscussionboardActivityLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique id for the activity log record. Each log represents a single user/system event."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Member context for the event. Nullable for anonymous/system-origin events."},{"type":"null","format":"uuid","description":"Member context for the event. Nullable for anonymous/system-origin events."}],"description":"Member context for the event. Nullable for anonymous/system-origin events."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional board context for the event (UUID)."},{"type":"null","format":"uuid","description":"Optional board context for the event (UUID)."}],"description":"Optional board context for the event (UUID)."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional thread context (UUID) for the log event."},{"type":"null","format":"uuid","description":"Optional thread context (UUID) for the log event."}],"description":"Optional thread context (UUID) for the log event."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional post context (UUID) for the log event."},{"type":"null","format":"uuid","description":"Optional post context (UUID) for the log event."}],"description":"Optional post context (UUID) for the log event."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional comment context (UUID) for the log event."},{"type":"null","format":"uuid","description":"Optional comment context (UUID) for the log event."}],"description":"Optional comment context (UUID) for the log event."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp for the event. Required for analytics, audit trail, and system time-series visualizations."},"event_type":{"type":"string","description":"Activity type/tag for the event (login, post_create, ban, etc.)."},"event_metadata":{"oneOf":[{"type":"string","description":"Arbitrary context JSON (stringified) for additional event metadata or payloads."},{"type":"null","description":"Arbitrary context JSON (stringified) for additional event metadata or payloads."}],"description":"Arbitrary context JSON (stringified) for additional event metadata or payloads."}},"required":["id","event_timestamp","event_type"],"description":"Single event row as stored in the normalized audit/event tracking table. Used for anomaly detection, rare journey trace, and compliance audits. Every property is directly linked to a schema column."},"IDiscussionboardTrendingTopic.IRequest":{"type":"object","properties":{"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Query for trending topic results for only this thread (UUID). Null = unconstrained."},{"type":"null","format":"uuid","description":"Query for trending topic results for only this thread (UUID). Null = unconstrained."}],"description":"Query for trending topic results for only this thread (UUID). Null = unconstrained."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter to a particular board's trending topics (UUID). Null disables constraint and yields aggregate."},{"type":"null","format":"uuid","description":"Filter to a particular board's trending topics (UUID). Null disables constraint and yields aggregate."}],"description":"Filter to a particular board's trending topics (UUID). Null disables constraint and yields aggregate."},"ranking_period_date_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for ranking period (inclusive) for trend querying (date/time, ISO8601)."},{"type":"null","format":"date-time","description":"Lower bound for ranking period (inclusive) for trend querying (date/time, ISO8601)."}],"description":"Lower bound for ranking period (inclusive) for trend querying (date/time, ISO8601)."},"ranking_period_date_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for ranking period."},{"type":"null","format":"date-time","description":"Upper bound for ranking period."}],"description":"Upper bound for ranking period."}},"description":"Request schema for paginated/filter search for trending topics by thread, board, or ranking period. Every property is schema-indexed to arbitrate analytics widgets/reports.","required":[]},"IPageIDiscussionboardTrendingTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardTrendingTopic"},"description":"Trend topic records for current page, as required by analytics dashboard UI."}},"required":["pagination","data"],"description":"Paginated trend topic analytics results as returned from trending_topcis table queries. Used for homepage highlights, analytic dashboards, and moderation workflow for hot topics."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number."},"limit":{"type":"integer","description":"Number of records per a page (default 100)."},"records":{"type":"integer","description":"Total records in the database matching the current query."},"pages":{"type":"integer","description":"Total pages for the given query/pagination, computed as records/limit, rounded up."}},"required":["current","limit","records","pages"],"description":"Pagination information object used in all paged result envelopes. Aids in data fetching, infinite scroll UX, analytics navigation, etc."},"IDiscussionboardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique id for the warning record. Serves as the primary key/audit trace for the escalation pipeline."},"warned_member_id":{"type":"string","format":"uuid","description":"UUID of the member to whom the warning applies. Links this warning to user identity and moderation/case history."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator/admin who issued the warning. Provides accidental/action tracing, supports appeals workflows, and is critical for audit logging."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Linked moderation report (if present) that caused the warning. Nullable for preemptive warnings or evidence-based moderation. Supports platform compliance and audit."},{"type":"null","format":"uuid","description":"Linked moderation report (if present) that caused the warning. Nullable for preemptive warnings or evidence-based moderation. Supports platform compliance and audit."}],"description":"Linked moderation report (if present) that caused the warning. Nullable for preemptive warnings or evidence-based moderation. Supports platform compliance and audit."},"reason":{"type":"string","description":"Detailed, user and audit-facing explanation for the warning being issued. Used in escalation, member case summary, and appeal discussions. Example: 'Multiple abusive comments across several threads.'"},"warned_at":{"type":"string","format":"date-time","description":"Date/time when the warning event occurred. Used as time anchor for escalation policy and audit trace."}},"required":["id","warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Atomic warning record for member moderation. All fields map directly to the warnings table in the DB. Used in policy escalation, audit, user notification, and appeals resolution."},"IDiscussionboardTrendingTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique primary key id for the trending topic analytics row."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"UUID of the thread regarded as trending. Required for homepage and analytics dashboards."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of the board under which the trending thread is tracked. Required for per-board trending analytics."},"ranking_period_date":{"type":"string","format":"date-time","description":"Date/time for the trending status/ranking; defines the aggregation window. Used as time axis in trend graphs and dashboards."},"trending_score":{"type":"number","description":"Quantitative score for analytics; calculated externally based on platform-specific engagement/activity."}},"required":["id","discussionboard_thread_id","discussionboard_board_id","ranking_period_date","trending_score"],"description":"Analytics row identifying a trending topic/thread for a time period. Used for homepage trending panels, alerting moderation to surges, and building trend time-series analytics."}}},"completed":191,"total":191,"step":0,"created_at":"2025-07-25T05:19:45.768Z"},"tokenUsage":{"facade":{"aggregate":{"total":3038268,"input":{"total":2892314,"cached":0},"output":{"total":145954,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":3038268,"input":{"total":2892314,"cached":0},"output":{"total":145954,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":3038268,"input":{"total":2892314,"cached":0},"output":{"total":145954,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":3038268,"input":{"total":2892314,"cached":0},"output":{"total":145954,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}},{"event":{"type":"interfaceComplete","document":{"operations":[{"specification":"Create a new discussion board member. This operation is tightly based on the fields defined in the 'discussionboard_members' Prisma schema model, enabling user registration for the platform. The only fields which will be accepted are those declared in the schema: id (auto/generated), username, email, hashed_password, role, is_active, created_at, updated_at, and (optional) deleted_at. The API request requires all necessary user credentials and registration details. No non-existent fields will be mentioned in the operation. The endpoint only uses explicit Prisma schema fields and will not use or reference any deleted_at field processing as creation only writes user details per the schema. Role assignment must be one of: 'member', 'moderator', or 'admin', as the value stored in the role field. The operation MUST check uniqueness of username and email per schema constraints. Created_at and updated_at are set to the current timestamp; deleted_at must not be set at creation. Do not reference fields such as updated_by, created_by, or similar as they are absent. Returns summary of created member.","description":"This endpoint allows creation of a new member in the discussion board system by POSTing the required user credentials. It validates required fields such as username, email, hashed_password, role, and is_active, all following comments from the Prisma discussionboard_members table. The user cannot supply id, created_at, or updated_at—these are automatically set by the backend. Username and email are enforced as unique, with constraints checked against the backing database. The operation ignores and does not reference any fields not present in the schema, including deleted_at at creation time. The response is a summary of the newly registered user, omitting sensitive fields where required (such as hashed_password). If username or email already exists, the operation will fail. Role assignments must be validated to match the enum values used for 'role' in the schema. No operations are performed on related tables at creation. Errors are handled per validation failure or constraint violation.","summary":"Create a new member in the discussionboard_members table for user registration.","parameters":[],"requestBody":{"description":"Details for creating a new discussion board member. Includes username, email, hashed_password, role, is_active.","typeName":"IDiscussionboardMember.ICreate"},"responseBody":{"description":"Created member summary including only schema-defined fields, omitting sensitive values as needed.","typeName":"IDiscussionboardMember"},"authorizationRole":"member","name":"create","path":"/discussionboard/members","method":"post"},{"specification":"Search and filter discussionboard_members records using complex criteria. This operation maps tightly to the fields actually defined in the Prisma model and does not reference deleted_at, created_by, updated_by, or similar unless they are present in the actual schema. Supports advanced search, filtering, and pagination on username, email, role, is_active, and time range fields (created_at, updated_at). Returns only records that match valid Prisma schema fields, never referencing or requiring missing fields. Filtering on role may use options 'member', 'moderator', 'admin' as stored in the role column. Pagination and sorting may leverage created_at/updated_at per the Prisma schema comments. The endpoint never references fields or business logic that is absent from the schema.","description":"This endpoint allows for patch-style (body-based) advanced filter/search of member records as per the discussionboard_members schema. Filters may be supplied for username, email, role assignment, is_active, or date ranges for created_at and updated_at. All queried/filtered fields are guaranteed to exist in the underlying schema, and no non-existent fields are accepted or referenced (e.g., deleted_at, created_by, updated_by). Pagination can be requested via request body parameters. Only those fields present in the Prisma schema may be requested or returned. Sort and search options are fully aligned with the fields available in the table.","summary":"Filter/search members from discussionboard_members table with valid criteria only.","parameters":[],"requestBody":{"description":"Filter criteria for searching members. Only accepts valid schema fields such as username, email, role, is_active, created_at, updated_at.","typeName":"IDiscussionboardMember.IRequest"},"responseBody":{"description":"Paginated and filtered list of members matching provided criteria. Schema fields only.","typeName":"IPageIDiscussionboardMember"},"authorizationRole":"admin","name":"index","path":"/discussionboard/members","method":"patch"},{"specification":"Retrieve a specific member's details by id using only valid fields as defined in the Prisma discussionboard_members schema. The id parameter must be a valid UUID matching the primary key field (id) in the table. No reference is made to non-existent fields (e.g., updated_by, deleted_by), and only schema-defined properties are included in the response, with sensitive or internal values omitted as appropriate (e.g., hashed_password).","description":"This endpoint retrieves a single member record by its unique id, verifying that the id is a valid UUID as per the discussionboard_members schema. Only fields that exist in the schema and are appropriate for external exposure (excluding sensitive or internal fields such as hashed_password) are returned. No soft-delete or extra fields are referenced if they do not exist in the schema. Errors are returned if the id is not found or is invalid. All field-level logic aligns with actual schema column definitions.","summary":"Retrieve one member from the discussionboard_members table by id, using only schema fields.","parameters":[{"name":"id","description":"Unique identifier (UUID) of the discussionboard member to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Member details matching the id, using only valid schema fields (sensitive data omitted as necessary).","typeName":"IDiscussionboardMember"},"authorizationRole":"admin","name":"at","path":"/discussionboard/members/{id}","method":"get"},{"specification":"Update a specific discussionboard member record by id. Uses only fields present in the discussionboard_members Prisma schema table. The id parameter is the primary key and must be a valid UUID. Request body contains only fields present in the schema—username, email, role, is_active, hashed_password, updated_at—and does not reference any non-existent fields. created_at is not updatable per normal audit practices. Updates that conflict with the unique constraints on username or email will fail. Any reference to non-existent columns such as deleted_at, updated_by is prohibited. Returns the updated record summary, excluding or masking sensitive fields as required (e.g., never returning plaintext passwords).","description":"This endpoint updates a member record with the specified id using data in the request body that matches only fields present in the Prisma schema (e.g., username, email, role, is_active, hashed_password, updated_at). It does not accept any properties or attempt updates on columns that do not exist in the schema. Uniqueness constraints for username and email still apply for update operations. The operation never references deleted_at unless it exists as a defined field. Returns the updated member summary after applying changes. If unique field violations occur (username, email), returns an error. Id must reference an existing active record, matching by id column as UUID.","summary":"Update a member in discussionboard_members by id, only with valid schema-defined properties.","parameters":[{"name":"id","description":"Unique identifier (UUID) of member to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the member, using only allowed fields defined in the schema (excluding non-existent fields).","typeName":"IDiscussionboardMember.IUpdate"},"responseBody":{"description":"Updated member summary as stored in the schema, excluding sensitive fields as necessary.","typeName":"IDiscussionboardMember"},"authorizationRole":"admin","name":"update","path":"/discussionboard/members/{id}","method":"put"},{"specification":"Delete a member record by id. This operation is mapped directly to the Prisma schema for discussionboard_members. The schema provides a deleted_at field (nullable); this will be set to the current timestamp on a logical (soft) delete. If the field does not exist, the operation would perform a hard delete, but here deleted_at is present, so this is a soft delete by setting deleted_at and not removing the row. No reference to non-existent columns is made. The id parameter is a UUID and must match the member's primary key. Returns status information for the soft delete action. No sensitive fields are included in the response, and logic closely follows schema comments regarding soft delete behavior.","description":"Soft-deletes a member record by setting the deleted_at field to the current timestamp. This operation aligns with the discussionboard_members schema, which defines a nullable deleted_at column specifically for audit and soft deletion use cases. This avoids physically removing records, instead making them inactive/hidden while retaining them for compliance or audit needs. The endpoint does not reference any fields not in the schema, and audit trail or compliance logging is recommended in actual service logic. Returns status/success for the operation. If the id does not exist or is already logically deleted, an error is returned. No sensitive or non-schema fields are returned.","summary":"Soft-delete a member in discussionboard_members by updating the deleted_at column.","parameters":[{"name":"id","description":"UUID of member to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Soft deletion confirmation/status for the member account—does not expose sensitive user fields.","typeName":"IDiscussionboardMember.ISoftDeleteResponse"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/members/{id}","method":"delete"},{"specification":"Allow the authenticated user to search their own member profile records. The API works only with fields defined in the discussionboard_member_profiles Prisma schema. Supports search, filtering, and sort by fields such as display_name, bio, avatar_url, location, website_url as per schema, linked by the user's member_id. No extraneous or non-schema fields are referenced. Does not allow mutation, just query (PATCH is used for advanced search with body input).","description":"Returns an array of the authenticated user's own profile records by searching for values present in discussionboard_member_profiles. Permitted search filters include display_name, bio, avatar_url, location, and website_url. Only works for fields that directly exist in the schema. No external, non-referenced, or non-schema properties are referenced in either request or response. member_id is always derived from the authenticated user's session context and not specified by the caller. Returns matching profile records in secure, paged format.","summary":"Search the authenticated user's member profiles from discussionboard_member_profiles.","parameters":[],"requestBody":{"description":"Filter/search criteria for user profile records. Fields must exist in the member_profiles schema.","typeName":"IDiscussionboardMemberProfile.IRequest"},"responseBody":{"description":"Paginated list of the authenticated user's profile records matching criteria.","typeName":"IPageIDiscussionboardMemberProfile"},"authorizationRole":"member","name":"index","path":"/my/discussionboard/member/profiles","method":"patch"},{"specification":"Update the authenticated user's own member profile by profile id. Only schema fields (display_name, bio, avatar_url, location, website_url) may be updated. The id path parameter is the unique profile id as UUID. Updates only those fields present in the discussionboard_member_profiles schema and does not reference any fields not present. member_id must correspond to the authenticated user and is not updatable. Response includes updated profile fields only, with sensitive data filtered as per schema comments and privacy requirements.","description":"Updates the member profile for the authenticated user by profile id. Only the allowed schema fields (display_name, bio, avatar_url, location, website_url) may be changed; other fields cannot be updated. Profile id must be a valid UUID. member_id is not modified. No references to fields not present in the schema, such as created_by or audit fields, are allowed. Returns the updated profile after applying changes. Fails if the profile id does not exist or does not belong to the authenticated user. All field logic strictly follows schema-defined columns.","summary":"Update the authenticated user's member profile in discussionboard_member_profiles by id.","parameters":[{"name":"id","description":"UUID of the profile to update (must belong to authenticated user).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the user profile (schema fields only).","typeName":"IDiscussionboardMemberProfile.IUpdate"},"responseBody":{"description":"Updated member profile record after applied changes.","typeName":"IDiscussionboardMemberProfile"},"authorizationRole":"member","name":"update","path":"/my/discussionboard/member/profiles/{id}","method":"put"},{"specification":"Authenticated user may search their own notification and settings preferences using fields in the discussionboard_member_preferences Prisma schema. This operation supports complex search/filter/lookup by any schema field present (e.g., receive_email_notifications, receive_push_notifications, preferred_language, dark_mode_enabled). Only fields that exist in the schema are referenced. No mutations, only secure retrieval. The user context is derived from authentication; member_id is resolved backend. Does not expose or reference unlisted fields or business logic.","description":"Returns the authenticated user's notification and UI preferences by searching for discussionboard_member_preferences that match provided filters. Valid filters are those present in the schema: receive_email_notifications, receive_push_notifications, preferred_language, dark_mode_enabled. No other fields are referenced or used. Responds with a paginated array of the user's relevant preferences, using only schema-validated data.","summary":"Search or list authenticated user's own notification/preferences from discussionboard_member_preferences.","parameters":[],"requestBody":{"description":"Search parameters for preferences (fields must be defined in the member_preferences schema).","typeName":"IDiscussionboardMemberPreference.IRequest"},"responseBody":{"description":"Paginated matching preferences for the authenticated user.","typeName":"IPageIDiscussionboardMemberPreference"},"authorizationRole":"member","name":"index","path":"/my/discussionboard/member/preferences","method":"patch"},{"specification":"Update the authenticated user's own notification/settings preferences by record id. Input fields must be those defined in the discussionboard_member_preferences schema (receive_email_notifications, receive_push_notifications, preferred_language, dark_mode_enabled). The id parameter references the preference record as UUID. member_id cannot be modified and is derived from authentication session. Returns updated record, using only schema-allowed fields. No non-existent properties or side effects.","description":"Updates the authenticated user's notification and UI settings for the given preference record id. Only the schema-defined fields may be updated. member_id is always provided by authentication context and cannot be changed. No fields not present in the schema may be referenced. Returns the modified record after successful update, with sensitive/internal fields omitted. Errors are triggered if id does not exist, or does not belong to the user. Data security and privacy are enforced per the schema documentation.","summary":"Update authenticated user's notification/preferences in discussionboard_member_preferences by id.","parameters":[{"name":"id","description":"UUID of the preference record to update (must belong to authenticated user).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for notification/preferences (schema-permitted fields only).","typeName":"IDiscussionboardMemberPreference.IUpdate"},"responseBody":{"description":"Updated notification/preferences record for the user.","typeName":"IDiscussionboardMemberPreference"},"authorizationRole":"member","name":"update","path":"/my/discussionboard/member/preferences/{id}","method":"put"},{"specification":"Create a new moderator assignment record using fields present in the discussionboard_moderators Prisma schema. The POST request must provide member_id (UUID), assigned_by_admin_id (UUID), assigned_at (timestamp), and (optionally) expires_at and revoked_at. This operation strictly follows the schema: id is auto-generated; all business logic and relationships required are covered by member_id and assigned_by_admin_id columns. The response summarizes the created moderator assignment, and no non-existent fields are referenced. Only a 'member' who is not already a moderator may be promoted. auditor and time tracking per schema fields. Returns all assignment details stored in the schema.","description":"This endpoint creates a new moderator role assignment for a member using POST, requiring valid UUIDs for member_id and assigned_by_admin_id. assigned_at is set to the current time, and optional expires_at or revoked_at may be supplied in the appropriate format (both nullable as per schema). member_id must match an existing user, and uniqueness is enforced via a unique constraint. The operation uses only valid schema fields with no additional or missing references. Returns the full moderator assignment record as stored. Errors if member is already a moderator or values are invalid.","summary":"Assign a user as a moderator—create discussionboard_moderators record.","parameters":[],"requestBody":{"description":"Moderator assignment details for a member (including required and optional fields as per schema).","typeName":"IDiscussionboardModerator.ICreate"},"responseBody":{"description":"Created moderator assignment record.","typeName":"IDiscussionboardModerator"},"authorizationRole":"admin","name":"create","path":"/discussionboard/moderators","method":"post"},{"specification":"Search moderator assignment records in discussionboard_moderators using PATCH body style and the fields specified in the schema. Permitted filters are member_id, assigned_by_admin_id, assigned_at, expires_at, revoked_at. Only schema fields are referenced or used; uniqueness on member_id is enforced. Pagination and sorting supported on assigned_at fields only as present in schema documentation. Sensitive or non-existent fields may not be referenced. The PATCH method is used for advanced searches via request body parameters matching allowed schema fields.","description":"Allows searching or filtering of moderator assignments using advanced criteria in the request body, matching only those fields found in the schema. Filtering, sorting, and pagination may be performed on member_id, assigned_by_admin_id, assigned_at, expires_at, and revoked_at. No non-schema columns may be queried or referenced. Returns all matching results in a paginated format, using only schema-defined fields. Errors if invalid filters or fields are supplied. Only active assignments are listed unless filters expand to include revoked_at.","summary":"Search moderator assignments using allowed fields in discussionboard_moderators.","parameters":[],"requestBody":{"description":"Optional search/filter criteria based on schema fields (member_id, assigned_at, etc.).","typeName":"IDiscussionboardModerator.IRequest"},"responseBody":{"description":"Paginated moderator assignment records matching criteria.","typeName":"IPageIDiscussionboardModerator"},"authorizationRole":"admin","name":"index","path":"/discussionboard/moderators","method":"patch"},{"specification":"Retrieve moderator assignment details by id, using only fields in the discussionboard_moderators schema. The id is required as UUID. Returns all schema-defined properties except null-sensitive or internal values as indicated in schema comments. No references to non-existent fields are made. Record must exist and match the id; uniqueness on member_id is still enforced. Returns null or error if not found.","description":"This endpoint gets a moderator assignment record for the given id, returning member_id, assigned_by_admin_id, assigned_at, expires_at, revoked_at, and id, as provided by the Prisma schema. No non-existent, derived, or denormalized fields are returned. Returns an error if the id is not found or is invalid. Business logic validates id and uniqueness as in the schema. Only valid schema fields are output.","summary":"Get moderator assignment record from discussionboard_moderators by id.","parameters":[{"name":"id","description":"UUID of moderator assignment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator assignment record retrieved by id, schema fields only.","typeName":"IDiscussionboardModerator"},"authorizationRole":"admin","name":"at","path":"/discussionboard/moderators/{id}","method":"get"},{"specification":"Update an existing moderator assignment by ID, allowing modification of any mod assignment field that exists in the discussionboard_moderators table. Only fields present in the schema can be updated (e.g., expires_at, revoked_at). Do not reference non-existent fields. Ensure auditability and permission enforcement as described. Associated with Prisma table: discussionboard_moderators.","description":"This operation updates an existing moderator assignment in the discussionboard_moderators table based on the provided moderator assignment ID. The moderator assignment includes information such as the member_id, assigned_by_admin_id, assigned_at, expires_at, and revoked_at. The update is used for extending, revoking, or altering the status or duration of a moderator's assignment. \n\nSecurity is paramount: Only admins can update moderator assignments. The operation enforces permissions to ensure that only authorized system admins perform this action.\n\nSpecial attention is paid to fields like expires_at (which dictates temporary moderator permissions) and revoked_at (used for deactivation or removal without hard deletion).\n\nIf the moderator assignment is not found, or if insufficient permission is detected, a meaningful error is returned. Only update valid fields defined in the schema; never introduce or reference fields not present in the Prisma table.\n\nRelated endpoints: Moderator creation (POST), assignment (PATCH), and removal (DELETE, which sets revoked_at).\n\nThis operation directly relates to the discussionboard_moderators table and does not affect the associated member's primary record, except via the moderator assignment linkage.","summary":"Update moderator assignment in discussionboard_moderators by ID.","parameters":[{"name":"id","description":"Target moderator assignment's ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for moderator assignment. Only fields that exist in the schema (expires_at, revoked_at, etc.) can be updated.","typeName":"IDiscussionboardModerator.IUpdate"},"responseBody":{"description":"Updated moderator assignment information.","typeName":"IDiscussionboardModerator"},"authorizationRole":"admin","name":"update","path":"/discussionboard/moderators/{id}","method":"put"},{"specification":"Remove (revoke) a moderator assignment by ID in discussionboard_moderators. Supports soft-revocation through setting revoked_at and does not physically delete the record (hard delete). Only fields present in the schema are referenced. Associated with Prisma table: discussionboard_moderators.","description":"This operation revokes (removes) a moderator assignment by its ID in the discussionboard_moderators table. Revocation is accomplished by setting the revoked_at timestamp, thereby deactivating moderator privileges for the affected user, rather than deleting the record from the database. \n\nThis procedure guarantees compliance with audit trail and security requirements—no actual deletion occurs, and the assignment remains for historical reference.\n\nOnly administrators have permission to invoke this operation. If the moderator assignment does not exist, or if unauthorized actors attempt the operation, a clear error is provided.\n\nThis method affects only the assignment record in discussionboard_moderators and does not physically impact related member records in discussionboard_members. No fields outside of those defined in the schema are referenced or updated.\n\nRelated endpoints: Moderator assignment creation (POST), assignment update (PUT), and moderator information query (GET).\n\nIf the assignment has already been revoked, this operation is idempotent and returns the current (previously revoked) state.","summary":"Soft-revoke moderator assignment (set revoked_at) by ID in discussionboard_moderators.","parameters":[{"name":"id","description":"Target moderator assignment's ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Revoked moderator assignment with updated revoked_at field.","typeName":"IDiscussionboardModerator"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/moderators/{id}","method":"delete"},{"specification":"Create a new administrator assignment in discussionboard_admins. Only referenced fields from the schema can be utilized—primarily member_id, assigned_by_admin_id, and assigned_at, and optionally revoked_at. Associated with Prisma table: discussionboard_admins.","description":"This operation creates a new administrator assignment in the discussionboard_admins table. It links the assignment to an existing member (using member_id) and records which admin performed the assignment (assigned_by_admin_id) and the timestamp (assigned_at). The new admin assignment enables the target member to access admin-level privileges within the discussion board platform.\n\nStrict permission enforcement ensures that only authorized administrators can create new admin assignments. If required fields are missing or the referenced member does not exist, an error is returned. No fields outside those in the schema are referenced in the assignment creation process.\n\nThis operation does not affect the associated member's primary record except by conferring admin status via the admin assignment. If an admin assignment for the target member already exists and is active, the system must prevent duplicate entries per the unique constraint defined in the schema (1:1 mapping of member to admin assignment).\n\nRelated endpoints: Admin revocation (DELETE), admin update (PUT), admin detail (GET).","summary":"Create administrator assignment in discussionboard_admins.","parameters":[],"requestBody":{"description":"Creation data for admin assignment, referencing schema fields only (member_id, assigned_by_admin_id, assigned_at, optionally revoked_at).","typeName":"IDiscussionboardAdmin.ICreate"},"responseBody":{"description":"Created administrator assignment information.","typeName":"IDiscussionboardAdmin"},"authorizationRole":"admin","name":"create","path":"/discussionboard/admins","method":"post"},{"specification":"List administrator assignments with filtering/pagination/search support. Returns administrator assignments referencing only fields present in the discussionboard_admins table. This is a privileged operation only accessible to admins. Associated with Prisma table: discussionboard_admins.","description":"This operation lists administrator assignments from the discussionboard_admins table, supporting filters such as member_id, assigned_by_admin_id, assigned_at, revoked_at, and any other legitimate fields defined in the schema. Pagination, sorting, and advanced searching capabilities are supported as per platform-wide API conventions.\n\nSecurity is strictly enforced; only users with admin privileges may access this listing. No fields or business logic beyond what exists in the schema are available.\n\nThis operation enables system administrators to audit, review, and analyze which members have or have had admin assignments over time. Deactivated assignments (where revoked_at is not null) are distinguishable by the presence of a revocation timestamp.\n\nRelated operations: Admin assignment creation (POST), detail (GET), update (PUT), revocation (DELETE).","summary":"List admin assignments in discussionboard_admins with filters/pagination.","parameters":[],"requestBody":{"description":"Query parameters for admin assignment listing and filtering; only fields from the schema (member_id, assigned_by_admin_id, assigned_at, revoked_at, etc.) are permitted.","typeName":"IDiscussionboardAdmin.IRequest"},"responseBody":{"description":"Paginated administrator assignment listing.","typeName":"IPageIDiscussionboardAdmin"},"authorizationRole":"admin","name":"index","path":"/discussionboard/admins","method":"patch"},{"specification":"Get an administrator assignment by ID in discussionboard_admins. Only schema-defined fields are returned (such as member_id, assigned_by_admin_id, assigned_at, revoked_at, etc.) Associated with Prisma table: discussionboard_admins.","description":"This operation retrieves an administrator assignment by ID from the discussionboard_admins table. All information returned is restricted to fields defined in the schema, including member_id, assigned_by_admin_id, assigned_at, and revoked_at. If the administrator assignment record does not exist for the given ID, the operation returns an informative error.\n\nStrict access control ensures only authorized admin users may retrieve such assignment details for audit, compliance, or platform management purposes. This does not impact or modify any aspect of the admin assignment; it is a read-only operation.\n\nRelated endpoints: Admin assignment list (PATCH), update (PUT), creation (POST), and removal (DELETE).\n\nAll valid schema-defined fields are eligible for return, and fields not present are strictly excluded from responses or documentation.","summary":"Get administrator assignment by ID in discussionboard_admins.","parameters":[{"name":"id","description":"Administrator assignment ID to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator assignment information matching given ID.","typeName":"IDiscussionboardAdmin"},"authorizationRole":"admin","name":"at","path":"/discussionboard/admins/{id}","method":"get"},{"specification":"Update an administrator assignment by ID, modifying any field defined in the discussionboard_admins schema (e.g., revoked_at to revoke, etc.). Only updatable fields present in the schema may be changed. Associated with Prisma table: discussionboard_admins.","description":"This operation updates an administrator assignment by its ID in the discussionboard_admins table. Permitted changes include any writable fields present in the schema, such as revoked_at, as well as any custom assignment fields. Updates to the assignment reflect changes such as revoking admin status (setting revoked_at), updating assignment metadata, or correcting audit data.\n\nOnly administrators have permission to perform this update. If the assignment has been revoked (revoked_at is not null), the assignment is considered inactive but still present for audit/compliance. Attempted updates of non-existent or non-updatable fields, or non-existent assignments, result in errors.\n\nRelated endpoints: assignment creation (POST), detail (GET), list (PATCH), and deletion (DELETE, which sets revoked_at).\n\nNo fields outside those included in the schema may be referenced or used in this operation's documentation, descriptions, or implementation.","summary":"Update administrator assignment by ID in discussionboard_admins.","parameters":[{"name":"id","description":"Target administrator assignment's ID.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for administrator assignment; fields must exist in the schema (e.g., revoked_at).","typeName":"IDiscussionboardAdmin.IUpdate"},"responseBody":{"description":"Updated administrator assignment data.","typeName":"IDiscussionboardAdmin"},"authorizationRole":"admin","name":"update","path":"/discussionboard/admins/{id}","method":"put"},{"specification":"Remove (revoke) an administrator assignment by ID in discussionboard_admins. Removal is soft: record is not physically deleted, but revoked_at is set. No other non-existent fields are referenced. Associated with Prisma table: discussionboard_admins.","description":"This operation soft-revokes (removes) an administrator assignment by its ID in the discussionboard_admins table. Revocation proceeds by setting revoked_at to the current timestamp, thereby ending admin privileges for the relevant member while retaining the record for audit/history. Physical (hard) deletion is not performed—the assignment is simply deactivated.\n\nPermissions are strictly enforced; only existing admins can execute revocation. The operation is idempotent—the revoked status is set if not already present, otherwise the unchanged record is returned.\n\nNo fields not present in the schema are used in this operation. The affected member's main entry in discussionboard_members is not physically altered.\n\nRelated endpoints: assignment creation (POST), detail (GET), list (PATCH), and update (PUT).\n\nError handling: If the assignment does not exist, or the user lacks permission, proper feedback is given.","summary":"Soft-revoke administrator assignment (set revoked_at) by ID in discussionboard_admins.","parameters":[{"name":"id","description":"Administrator assignment ID to revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator assignment record with updated revoked_at field.","typeName":"IDiscussionboardAdmin"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/admins/{id}","method":"delete"},{"specification":"Create a new discussionboard_channels (forum channel) entity as a top-level organizational unit, strictly referencing only fields present in the Prisma schema (code, name, description, position, active, etc.). Associated with Prisma table: discussionboard_channels.","description":"This operation creates a new channel entry in the discussionboard_channels table, which functions as a high-level organizational partition for forum content. All fields referenced (such as code, name, description, position, and active) are directly present in the schema and must be validated according to field constraints (e.g., unique code, name, etc.).\n\nAdministrators are responsible for adding new channels, and only authorized roles may invoke this operation. Duplicate codes or names (in violation of unique constraints) return an error. No non-existent or derived fields are referenced in the operation.\n\nRelated endpoints: channel list (PATCH), detail (GET), update (PUT), removal (DELETE).","summary":"Create a new channel in discussionboard_channels.","parameters":[],"requestBody":{"description":"Channel creation data (code, name, description, position, and active), referencing only schema fields.","typeName":"IDiscussionboardChannel.ICreate"},"responseBody":{"description":"Created channel entity data.","typeName":"IDiscussionboardChannel"},"authorizationRole":"admin","name":"create","path":"/discussionboard/channels","method":"post"},{"specification":"List all discussionboard_channels entities, supporting pagination, filtering, and searching according to platform conventions. Only returns fields from the schema (code, name, description, position, active, etc.). Associated with Prisma table: discussionboard_channels.","description":"This operation lists channels (categories) in the discussionboard_channels table, supporting filter and pagination parameters for all legitimate schema-defined fields (e.g., code, name, active, position). Only fields defined in the schema are returned. This endpoint enables system administrators to view all channels available for organizing boards.\n\nThis operation does not return or use non-existent or derived fields.\n\nRelated endpoints: channel creation (POST), detail (GET), update (PUT), and removal (DELETE).","summary":"List channels in discussionboard_channels with filtering and pagination.","parameters":[],"requestBody":{"description":"Optional filter/search parameters for channels, referencing only schema fields (e.g., code, name, active, position).","typeName":"IDiscussionboardChannel.IRequest"},"responseBody":{"description":"Paginated channel listing.","typeName":"IPageIDiscussionboardChannel"},"authorizationRole":"admin","name":"index","path":"/discussionboard/channels","method":"patch"},{"specification":"Get a discussionboard_channels entity by ID. All fields returned must exist in the schema (code, name, description, position, active, etc.). Associated with Prisma table: discussionboard_channels.","description":"This operation retrieves a channel by its ID from the discussionboard_channels table. Only schema-defined fields such as code, name, description, position, active, and their values are returned. If the specified channel does not exist, a not found error is returned. Only administrators are permitted to access this operation for audit, configuration, or management.\n\nNo fields outside of those in the schema may be referenced, returned, or used. This endpoint does not affect any related boards, sections, or user permissions—read-only and strictly focused on the channel entity.\n\nRelated endpoints: channel list (PATCH), creation (POST), update (PUT), removal (DELETE).","summary":"Get channel by ID from discussionboard_channels.","parameters":[{"name":"id","description":"The unique ID of the channel to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Channel entity data for the requested ID.","typeName":"IDiscussionboardChannel"},"authorizationRole":"admin","name":"at","path":"/discussionboard/channels/{id}","method":"get"},{"specification":"Update an existing channel (discussionboard_channels) by ID, allowing modification of any field present in the schema (such as code, name, description, position, active, etc.). Only schema-referenced fields may be changed. Associated with Prisma table: discussionboard_channels.","description":"This operation updates an existing channel entry in the discussionboard_channels table by its ID, permitting changes to any of the fields present in the schema. Common updates include renaming the channel, changing its code, updating the description, position, or the active status. Administrators performing this update must respect all unique constraints (such as unique code or name); attempts to violate these constraints return errors. No fields that are not in the schema may be referenced or updated.\n\nOnly administrators are permitted to perform updates. If a channel with the specified ID does not exist, a not found error is returned.\n\nRelated endpoints: channel creation (POST), detail (GET), list (PATCH), and removal (DELETE).","summary":"Update channel by ID in discussionboard_channels.","parameters":[{"name":"id","description":"Channel ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the channel (code, name, description, position, active, etc.); only schema fields may be updated.","typeName":"IDiscussionboardChannel.IUpdate"},"responseBody":{"description":"Updated channel entity data.","typeName":"IDiscussionboardChannel"},"authorizationRole":"admin","name":"update","path":"/discussionboard/channels/{id}","method":"put"},{"specification":"Delete a channel from discussionboard_channels by ID via hard delete, as no soft delete field (e.g., deleted_at, is_deleted) is present in the schema. This operation physically removes the record. Associated with Prisma table: discussionboard_channels.","description":"This operation removes a channel record from the discussionboard_channels table by its ID, performing a hard delete (permanent removal from the database). The table does not support soft deletion, so the method physically deletes the record and all related foreign keys that cascade on delete according to schema constraints.\n\nOnly administrators have permission to delete channels. If the specified channel does not exist, or if deletion would violate a foreign key constraint, an appropriate error is returned. No non-existent or derived fields may be referenced in documentation or implementation.\n\nRelated endpoints: channel creation (POST), detail (GET), update (PUT), list (PATCH).","summary":"Hard delete channel by ID in discussionboard_channels (physical deletion, no soft delete in schema).","parameters":[{"name":"id","description":"The unique ID of the channel to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/channels/{id}","method":"delete"},{"specification":"Create a new section within the discussion board platform. This operation adds a section record in the 'discussionboard_sections' table, adhering strictly to the model definition in the Prisma schema. Each section requires the parent channel ID, a unique section code, a display name, an optional description, position, active status, and audit timestamps. The section is always linked to a parent channel and supports both UI ordering and archiving (via the 'active' boolean field). The API input and resulting object must not reference any fields that do not exist in the schema. Audit fields such as 'created_at' and 'updated_at' are written by the system, not by the user input. Only existing fields should be handled.","description":"This endpoint creates a new section entity within the discussion board system.\n\nAll core fields must be provided: 'discussionboard_channel_id' (foreign key to channels), unique 'code', 'name' (string), optional 'description', UI 'position' (integer for navigation order), and 'active' (boolean flag for soft-archiving/enablement). System audit fields 'created_at' and 'updated_at' are handled automatically by the implementation. Section records support navigation hierarchy and permission scoping for boards/posts in the forum structure. No non-schema fields should be referenced. Only schema-defined parameters are supported. Returns the created section including all schema fields. Error is returned if any required field or uniqueness constraint fails. If the referenced channel does not exist, a foreign key error should be returned. No unrelated or missing fields should be referenced in either body or response.","summary":"Creates a new discussionboard_sections record in the system.","parameters":[],"requestBody":{"description":"Information required to create a discussionboard_sections record.","typeName":"IDiscussionboardSection.ICreate"},"responseBody":{"description":"The created section record with all schema fields populated.","typeName":"IDiscussionboardSection"},"authorizationRole":"admin","name":"create","path":"/discussionboard/sections","method":"post"},{"specification":"Search or filter sections within the discussion board. Operation retrieves a paginated and filtered list of section records from the 'discussionboard_sections' table as described in the Prisma schema, supporting advanced UI navigation, admin dashboards, or moderation tools. Supports searching by section name, code, channel association, and active status, including ordering by position and pagination for scalable navigation. Only the schema-defined fields may be referenced; non-existent fields must not be handled. Request body must allow specifying filter, search, and pagination parameters as allowed, and output should include only objects defined in the schema.","description":"This operation provides advanced retrieval and search of discussion board sections.\n\nThe endpoint supports filtering by fields such as name (with substring or trgm-op search support), code, parent channel (discussionboard_channel_id), and active status. It returns a paginated array of section objects conforming strictly to the Prisma schema. Requires proper index usage for efficient search and ordering (via 'position' or UI priority).\n\nRequest takes pagination (offset, limit), optional filters (name/code/active), and sort order. Returns a paginated list of section records as defined in the schema. Never returns any fields that do not exist (such as deleted_at, unless present in schema). Expected error for invalid filter or unknown parent channel. Uses only schema-allowed fields.","summary":"List, filter, and search discussionboard_sections records.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination information for section retrieval.","typeName":"IDiscussionboardSection.IRequest"},"responseBody":{"description":"Paginated list of section records conforming to schema specification.","typeName":"IPageIDiscussionboardSection"},"authorizationRole":"admin","name":"index","path":"/discussionboard/sections","method":"patch"},{"specification":"Retrieve a specific section record by its unique ID from the 'discussionboard_sections' table, as defined in the Prisma schema. Supports reading all main fields for navigation, section management, or admin configuration. Must not reference or expose any fields not defined in the schema. The returned section will include the ID, linked channel ID, code, name, optional description, position, active status, created_at, and updated_at. If the section does not exist (i.e., primary key lookup fails), a not found error must be returned.","description":"Fetches a single section entity from the discussion board by using its unique ID as a path parameter. The returned object includes all fields specified in the Prisma schema: id, discussionboard_channel_id, code, name, description (nullable), position, active flag, created_at, and updated_at. This operation does not support lookup by fields outside the schema, nor does it expose or handle extra attributes. Returns 404 if the ID is not found.","summary":"Get details of a discussionboard_sections record by ID.","parameters":[{"name":"id","description":"Target section's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed info for the specified section record. Only schema-defined fields.","typeName":"IDiscussionboardSection"},"authorizationRole":"admin","name":"at","path":"/discussionboard/sections/{id}","method":"get"},{"specification":"Update the data for a specific section of the discussion board by its unique ID, corresponding to a record in the 'discussionboard_sections' table. This enables changing section name, code, description, parent channel, UI position, or activation status as specified. All updatable fields must exist in the schema. Operation references no fields that are not included in the schema. Audit timestamps may be automatically updated by the service logic. Returns the updated section or error if constraints or references are invalid.","description":"Updates a section in the discussion board by its unique ID using only fields from the schema. Updatable fields include discussionboard_channel_id, name, code, description (optional), position, and active. System-managed fields (created_at, updated_at) are updated as needed by the backend. No fields outside the Prisma schema may be updated or referenced. Errors may include unknown section ID, foreign key violation, or uniqueness constraint errors on code/parent/channel.","summary":"Update a discussionboard_sections record by its ID.","parameters":[{"name":"id","description":"Target section's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the section. Only updatable schema fields are allowed.","typeName":"IDiscussionboardSection.IUpdate"},"responseBody":{"description":"The updated section record conforming to the schema.","typeName":"IDiscussionboardSection"},"authorizationRole":"admin","name":"update","path":"/discussionboard/sections/{id}","method":"put"},{"specification":"Delete a section record from the 'discussionboard_sections' table by its unique ID. Since there are no soft delete fields in the schema for this model, this operation will perform a permanent, irreversible deletion (hard delete). The ID path parameter must exactly match the primary key in the table. Returns 204 on success, or a not found error if the section does not exist. Operation must not reference nonexistent fields, perform auditing via fields not in schema, or use conditional soft-delete logic.","description":"Deletes a specific section record from the discussion board by its unique ID. This is a hard delete—once executed, the record is permanently removed since there is no deleted_at or is_deleted field in the schema. Action is irreversible. Returns no body on success and 204 status. Returns 404 if the section with the specified ID does not exist. Uses only fields in the schema for all logic and error reporting.","summary":"Delete (hard) a discussionboard_sections record by its ID.","parameters":[{"name":"id","description":"Target section's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/sections/{id}","method":"delete"},{"specification":"Create a new configuration setting by inserting a record into the 'discussionboard_configurations' table. Only recognizes and processes fields existing in the schema: id (generated), key (string, unique), value (string, nullable), optional description, created_at, and updated_at timestamps. Used for inserting system-wide feature flags, thresholds, and configuration options. If key already exists, must return uniqueness or duplication error. Never reference fields outside the schema.","description":"Adds a new system-wide configuration record for the discussion board application, using the schema-defined fields. Input must contain a unique 'key', a 'value' (which may be null), and optional 'description'. 'id', 'created_at', and 'updated_at' are system-managed. Operation must not introduce or expect other fields. Key uniqueness must be enforced, and on conflict an appropriate error message returned. Returns the full record populated with all schema fields on success.","summary":"Creates a new discussionboard_configurations record.","parameters":[],"requestBody":{"description":"Information required to create a configuration.","typeName":"IDiscussionboardConfiguration.ICreate"},"responseBody":{"description":"The created configuration setting, per schema definition.","typeName":"IDiscussionboardConfiguration"},"authorizationRole":"admin","name":"create","path":"/discussionboard/configurations","method":"post"},{"specification":"List or filter all configuration settings by querying 'discussionboard_configurations' as specified in the schema. Supports pagination and optional filtering by key and description. Only allows referencing fields expressly present in the configuration schema. Supports admin dashboard or developer interface needs. Output and body must not mention or manipulate fields outside of the schema. Returns paginated results of configuration records on success.","description":"Retrieves a list of configuration settings, filtered or searched by parameters such as key (unique string), description, or other schema fields. Only schema-defined fields may be included for filtering and in the returned objects. Supports paginated results for scalable admin/developer use. Fails with 400 error for invalid filters or out-of-range pagination. Never includes fields not present in the schema.","summary":"List and filter discussionboard_configurations records.","parameters":[],"requestBody":{"description":"Request body with filtering, search, or pagination info.","typeName":"IDiscussionboardConfiguration.IRequest"},"responseBody":{"description":"Paginated configuration records matching schema definition.","typeName":"IPageIDiscussionboardConfiguration"},"authorizationRole":"admin","name":"index","path":"/discussionboard/configurations","method":"patch"},{"specification":"Retrieve a specific configuration record in the 'discussionboard_configurations' table by its unique ID as defined by the schema. Exposes only valid schema fields such as id, key, value (nullable), description (nullable), created_at, and updated_at. Used for configuration lookups and system auditing. Returns 404 if no record found for ID. References no out-of-schema fields.","description":"Fetches a configuration entry by its unique ID (UUID). Only fields present in the Prisma schema are exposed: id, key, value, description, created_at, updated_at. 404 error is returned if the entry is not found. Fields not in the schema (such as deleted_at or custom auditing) are never returned or referenced.","summary":"Get a configuration record from discussionboard_configurations by ID.","parameters":[{"name":"id","description":"Target configuration's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The configuration record as defined in the schema.","typeName":"IDiscussionboardConfiguration"},"authorizationRole":"admin","name":"at","path":"/discussionboard/configurations/{id}","method":"get"},{"specification":"Update a configuration entry in the 'discussionboard_configurations' table by its unique ID. Only schema-defined fields may be modified: key, value, description. System-managed fields like id, created_at, updated_at are set/updated as part of implementation/top-level logic only. All updates enforce uniqueness and field-level validation on the specified fields. Uniqueness constraint is enforced on key. Never refers to or updates nonexistent fields.","description":"Updates the fields (key, value, description) of the configuration record by its ID as per the schema. The primary key (id) identifies the configuration row. Updates may not set id, created_at directly. If another configuration already uses the target key, a unique constraint error is returned. Only accepts or returns fields present in the schema. 404 error if record with specified ID is not found.","summary":"Update a configuration in discussionboard_configurations by its ID.","parameters":[{"name":"id","description":"Target configuration's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the configuration. Only updatable schema fields permitted.","typeName":"IDiscussionboardConfiguration.IUpdate"},"responseBody":{"description":"Updated configuration record in schema format.","typeName":"IDiscussionboardConfiguration"},"authorizationRole":"admin","name":"update","path":"/discussionboard/configurations/{id}","method":"put"},{"specification":"Delete a specific configuration record from the 'discussionboard_configurations' table using its unique ID. Since there are no soft delete fields in this model, deletion is permanent (hard delete); data is fully removed. Returns 204 on success, 404 if record not found. Only references and deletes schema fields. No logic is performed on non-existent properties, and audit traces are not supported unless schema fields provide it.","description":"Deletes the configuration entry with the given ID from the discussionboard_configurations table. This is a hard delete, since the schema does not have deletion markers or soft delete fields. Once deleted, the entry cannot be restored. Returns 204 with no body on success. 404 error if record has already been removed or does not exist. Never checks, uses, or reports fields not present in the schema.","summary":"Permanently delete a configuration by ID (hard delete).","parameters":[{"name":"id","description":"Target configuration's unique identifier.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/configurations/{id}","method":"delete"},{"specification":"Create a notification event/log record in the discussion board by inserting into the 'discussionboard_notifications' table as specified in the Prisma schema. Only fields present in the schema (id is generated, target_id (nullable), type, title, body (nullable), delivered, created_at, delivered_at (nullable)) are supported. Used for logging and dispatching system/app notifications. Returns the full schema-compliant record on success. Foreign key constraints and type validations must be enforced; unreferenced/undeclared fields are never included in body/output.","description":"Adds a system notification log entry for delivery record, audit, and alerting. App input must specify: target_id (optional, nullable UUID for recipient/channel), type (string event type), title (short description), body (optional, nullable), and delivered (boolean status). created_at and delivered_at are system-managed timestamps, and id is auto-generated. All validation, uniqueness, and FK constraints follow the table schema. No fields outside schema definition are processed. On error (invalid reference, missing required value), validation error is returned. No unrelated or unsolicited fields are included in body/response.","summary":"Create a discussionboard_notifications log/entry.","parameters":[],"requestBody":{"description":"Fields required to create a notification event/log record.","typeName":"IDiscussionboardNotification.ICreate"},"responseBody":{"description":"The created notification record, conforming to schema fields.","typeName":"IDiscussionboardNotification"},"authorizationRole":"admin","name":"create","path":"/discussionboard/notifications","method":"post"},{"specification":"List and search notification event records in the 'discussionboard_notifications' table, supporting filtering and pagination per fields in the schema. Supports searching (by type, title, delivered), filtering (target_id), and paginated sorting. Returns only fields defined in the schema in paginated result objects. No fields outside the schema are handled, and no secondary auditing logic is applied unless reflected in the schema. 400 or validation error is returned for invalid filters or queries.","description":"Retrieves a paginated and optionally filtered list of notification event records from the database. Can be filtered by type (string event type), target_id (channel/member), delivered status (boolean), or searched by title (with trgm-op search). Supports pagination and ordering as defined by indexes in the schema. Only schema-defined fields are allowed in both the request payload and the response. No references to non-existent fields; returns paged results. Error returned if filters/requests do not match any record or are ill-formed.","summary":"List/search discussionboard_notifications event records.","parameters":[],"requestBody":{"description":"Filtering and pagination for notification records, with only schema-allowed fields.","typeName":"IDiscussionboardNotification.IRequest"},"responseBody":{"description":"Paginated list of notification records as defined in schema.","typeName":"IPageIDiscussionboardNotification"},"authorizationRole":"admin","name":"index","path":"/discussionboard/notifications","method":"patch"},{"specification":"Retrieve a specific notification log record by its primary key (id) from the discussionboard_notifications table. This operation enables clients to fetch detailed information about a single notification delivered to a user or other entity for debugging, compliance, or user-facing notification review. The notification object contains fields such as id, target_id, type, title, body, delivered, created_at, delivered_at, all of which are required to be returned as per the actual schema. This operation is designed for use in notification delivery logs, system audits, or per-user notification panels. Authentication is typically required, and access should only be granted based on proper authorization (e.g., owner or administrator/moderator views, depending on system design). Returns 404 if the notification does not exist.","description":"This endpoint retrieves a single notification log record from the discussionboard_notifications table based solely on the provided notification id. Each notification record contains the following fields: id (UUID primary key), target_id (nullable UUID recipient reference), type (event type: string), title (summary), body (nullable string content), delivered (boolean delivery flag), created_at (notification creation timestamp), and delivered_at (nullable delivered timestamp).\n\nThis endpoint is often used in user notification panels, admin or moderator audit interfaces, or for debugging notification delivery status. It provides a complete view of the notification, including which entity it was sent to (if known), delivery status and timestamps. Permission enforcement is handled in upper application layers: typically, members may access their own records, while administrators/moderators may audit notifications system-wide.\n\nThe operation will return 404 if the record is not found. No business logic beyond fetching and authorization is performed; does not mark as read, trigger delivery, or modify any state.","summary":"Fetch a single notification log by id from discussionboard_notifications.","parameters":[{"name":"id","description":"Unique notification log id (UUID) to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete notification log record for the given id.","typeName":"Idiscussionboard_notifications"},"authorizationRole":"admin","name":"at","path":"/discussionboard/notifications/{id}","method":"get"},{"specification":"Update the delivered status or content of a specific notification log record in the discussionboard_notifications table by id. This operation allows clients to mark a notification as delivered, update its title, body, or other fields, or perform status post-processing as required by admin/mod panel or system jobs. Only updatable fields defined in the actual schema (title, body, delivered, delivered_at, etc.) can be changed. The ID is mandatory. Authorization and audit trail must be enforced via upper-level logic, as this operation permits modification of audit/compliance-related records. Attempts to update a non-existent record should return 404.","description":"This endpoint updates a notification log record in the discussionboard_notifications table, identified by its primary key (id). Allowable updates include: title, body, delivered (status), and delivered_at timestamp. Fields such as id, created_at cannot be modified. This operation supports flows such as marking notifications as delivered, editing content for administrative correction, or updating titles for improved clarity/auditing.\n\nAuthorization is required: only permitted users (e.g., system jobs, admins, or notification owners if business rules permit) may perform updates. All attempted changes should be reflected in audit logs for compliance.\n\nReturns the updated notification record on success; returns 404 if the record does not exist.","summary":"Update notification log record by id in discussionboard_notifications.","parameters":[{"name":"id","description":"Unique notification log id (UUID) to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the notification log (title, body, delivered, delivered_at).","typeName":"Idiscussionboard_notifications.IUpdate"},"responseBody":{"description":"Updated notification log record for the given id.","typeName":"Idiscussionboard_notifications"},"authorizationRole":"admin","name":"update","path":"/discussionboard/notifications/{id}","method":"put"},{"specification":"Delete a notification log record from the discussionboard_notifications table by its primary key (id). This action performs a hard delete, as the schema does not include a soft-delete field (e.g., is_deleted or deleted_at). Deletion is permanent and unrecoverable, removing the log from the audit/compliance record. Only authorized users (e.g., system admin, superuser, or explicit owner where relevant) can perform this operation, which must be strictly logged for compliance. This operation is used for compliance data cleanup, e.g., to expunge obsolete or invalid notification logs.","description":"This endpoint deletes a unique notification log entry from the discussionboard_notifications table, identified by id (UUID). As there are no soft delete fields in the schema, the operation will permanently remove the specified record from the database. This is a critical, non-recoverable action intended only for system administrators, compliance operations, or programmatic data lifecycle management where retention is no longer required or allowed.\n\nAppropriate authorization (usually admin/superuser) must be enforced. All deletions should be audit-logged elsewhere. The operation returns 204 No Content on success, or 404 if the record does not exist.","summary":"Permanently delete a notification log record from discussionboard_notifications by id.","parameters":[{"name":"id","description":"Unique notification log id (UUID) to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/notifications/{id}","method":"delete"},{"specification":"Create a new discussionboard_settings record in the per-feature/area settings table. This operation allows system administrators or authorized roles to define feature-specific settings, such as toggles or options that apply to a given entity or scope (channel, section, feature_flag, etc.). Fields are provided in the request body and must include scope_type, key, value (optional), and related metadata (description, timestamps). This operation supports extensible platform configuration without schema changes, powering runtime feature flags, moderation policies, or localized settings.","description":"This endpoint creates a new row in the discussionboard_settings table to establish or update scoped system settings (such as feature toggles, board/section/channel-level options, or per-feature controls). Required input fields include scope_type (e.g., 'channel', 'section', 'feature_flag'), key (what the setting controls), and other configuration fields. Optionally, scope_id, value, and description may also be included. Timestamps (created_at, updated_at) are managed by the service layer per audit policies.\n\nThis API is reserved for authorized users (typically admin or superuser roles) as settings can control critical application logic and user experience. Only internal platform actors should access it directly. On success, returns the complete record as created. Returns 400 for validation failure.","summary":"Create a new setting in discussionboard_settings table.","parameters":[],"requestBody":{"description":"Setting creation fields for discussionboard_settings.","typeName":"Idiscussionboard_settings.ICreate"},"responseBody":{"description":"Successfully created discussionboard_settings record.","typeName":"Idiscussionboard_settings"},"authorizationRole":"admin","name":"create","path":"/discussionboard/settings","method":"post"},{"specification":"Retrieve a paginated/searchable list of settings from the discussionboard_settings table. This operation supports system administration, diagnostics, and operational analysis where viewing active feature toggles or area-specific options is required. Query by filters such as scope_type, key, allow advanced search via request body, and support pagination fields (limit, offset). Results include all fields from the settings schema. Commonly used in settings dashboards or platform configuration review tools.","description":"This endpoint provides a paginated and filterable search interface for records in the discussionboard_settings table. Filters may include scope_type (channel, section, feature_flag), key, and optionally partial matches on value or description. Supports advanced querying via request body for operational dashboards and admin tools. Results include all non-sensitive setting fields: id, scope_type, scope_id, key, value, description, created_at, updated_at.\n\nSupports pagination (limit, offset) and sorting parameters as defined in the admin dashboard or backend logic. This interface is restricted to authorized users, typically administrators or superusers, given the potential impact of settings changes.\n\nReturns a paginated list (page info + data array) of matching settings records per platform best practice.","summary":"Search or paginate discussionboard_settings table records.","parameters":[],"requestBody":{"description":"Query and pagination parameters for discussionboard_settings list retrieval.","typeName":"Idiscussionboard_settings.IRequest"},"responseBody":{"description":"Paginated settings records and metadata.","typeName":"IPageIdiscussionboard_settings"},"authorizationRole":"admin","name":"index","path":"/discussionboard/settings","method":"patch"},{"specification":"Retrieve a single settings record from the discussionboard_settings table by its primary key (id). This operation fetches all details for a given setting, enabling admin users or configuration dashboards to display full information, including scope, key, value, and metadata. Used in operational dashboards, audit tools, or admin panels when managing feature flags, rule toggles, or per-entity configuration.","description":"This endpoint returns the complete data for a settings record from the discussionboard_settings table, based on its unique id (UUID). Returned fields are: id, scope_id (nullable), scope_type, key, value (nullable), description (nullable), created_at, and updated_at. This operation is essential for admin systems to inspect, detail, or potentially update a configuration for a specific feature, channel, section, or entity.\n\nTypically restricted to authorized users (administrators/superusers) given its platform-wide impact. Returns 404 if the record does not exist.","summary":"Fetch a single settings record by id from discussionboard_settings.","parameters":[{"name":"id","description":"Unique settings record id (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single discussionboard_settings record for the requested id.","typeName":"Idiscussionboard_settings"},"authorizationRole":"admin","name":"at","path":"/discussionboard/settings/{id}","method":"get"},{"specification":"Update an existing settings record in discussionboard_settings by its unique id. This operation allows authorized actors (typically administrators) to modify settings for features, channels, or sections. Updatable fields include value, description, and potentially key, scope_type, scope_id. Created_at and id fields are immutable. All changes must comply with audit trails and business policy enforcement. This operation is commonly used in admin dashboard flows or as part of platform operation modifications.","description":"This endpoint updates a row in the discussionboard_settings table identified by its id (UUID). Allows changing setting fields such as value (toggle, string, limit), description, key, scope_id, scope_type. Ensures atomic update of mutable fields while maintaining a complete compliance and audit record (created_at and id are immutable). Used by admin systems to enable, disable, or modify feature flags or scoped options for runtime flexibility.\n\nOnly administrators or explicitly authorized roles can use this endpoint. Returns 404 if the settings record does not exist. The updated record is returned on success.","summary":"Update a settings record in discussionboard_settings table by id.","parameters":[{"name":"id","description":"Unique settings row id (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data fields to update for the selected discussionboard_settings record.","typeName":"Idiscussionboard_settings.IUpdate"},"responseBody":{"description":"Updated discussionboard_settings record as stored after change.","typeName":"Idiscussionboard_settings"},"authorizationRole":"admin","name":"update","path":"/discussionboard/settings/{id}","method":"put"},{"specification":"Delete a discussionboard_settings record from the table by its unique id. This is a hard-delete, as the schema does not define any soft-delete field (such as is_deleted or deleted_at). The operation is reserved for administrators and compliance system jobs that require permanent removal of obsolete or erroneous settings. Once deleted, the settings row is unrecoverable and will immediately stop affecting platform state. Deletions must be thoroughly audit-logged for compliance and traceability.","description":"This endpoint permanently removes a record from the discussionboard_settings table, using its id (UUID) as the primary key. Because the schema has no soft-delete field, the operation fully deletes the configuration setting and all related business impact is immediate. Intended only for system administrators and compliance/cleanup flows where platform configuration is being pruned or obsolete flags eliminated.\n\nReturns 204 No Content if successful; 404 if the row does not exist. All deletions should be recorded in audit/compliance logs.","summary":"Permanently delete a settings record from discussionboard_settings by id.","parameters":[{"name":"id","description":"Unique settings record id (UUID) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/settings/{id}","method":"delete"},{"specification":"Create a new board entry in the discussionboard_boards table, representing a single discussion board topic/category. This operation allows administrators or authorized actors to define a new board with required attributes (category reference, section reference, name, code, is_active, is_visible, created_at/updated_at handled in the service layer). Only fields that actually exist in the schema (discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible) may be set. Client must supply attribute values in the correct schema structure. Admin-only for platform organization and moderation.","description":"This endpoint creates a new board record in the discussionboard_boards table according to the provided input. Required input: discussionboard_board_category_id (UUID), discussionboard_section_id (UUID), name (string), and code (unique string for programmatic access/routing). Optionally: description (string), is_active (boolean), and is_visible (boolean). Timestamps are managed internally. This creates a new topic area for organizing threads and posts per admin/business rules.\n\nOnly authorized users (typically admin/superuser roles) can call this API due to its broad impact on platform content organization. Returns the complete board record as created if successful; returns 400 for input validation errors.","summary":"Create a new discussion board in discussionboard_boards.","parameters":[],"requestBody":{"description":"Board creation parameters as per schema.","typeName":"Idiscussionboard_boards.ICreate"},"responseBody":{"description":"The newly created discussionboard_boards record.","typeName":"Idiscussionboard_boards"},"authorizationRole":"admin","name":"create","path":"/discussionboard/boards","method":"post"},{"specification":"Get a searchable and paginated list of discussionboard_boards records from the table. This operation is commonly accessed from admin dashboards, navigation panels, or admin user list views, enabling search, filter and sort on attributes like category, section, code, name, is_active, is_visible, etc. Results include all standard board entity fields present in the schema. It is designed for administrative, analytics, or navigation builder interfaces. Typical query/pagination parameters are received via request body.","description":"This endpoint retrieves a paginated, optionally filtered list of board records from the discussionboard_boards table. Filters may include code, category, section, activity/visibility flags, and partial search on name/description fields. Implements best-practice admin and UI listing/search workflows for boards. The returned objects include: id, discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, created_at, updated_at.\n\nPagination, filtering, and sorting are supported via flexible request body parameters (limit, offset, query strings, ordering, etc.). Only authorized users (admin/moderator) may access this endpoint for management of boards and navigation layout.","summary":"Paginate and search discussion boards from discussionboard_boards.","parameters":[],"requestBody":{"description":"Request parameters for searching and paginating boards list.","typeName":"Idiscussionboard_boards.IRequest"},"responseBody":{"description":"Paginated result list of discussion board records and metadata.","typeName":"IPageIdiscussionboard_boards"},"authorizationRole":"admin","name":"index","path":"/discussionboard/boards","method":"patch"},{"specification":"Retrieve a specific board record from the discussionboard_boards table by id. Enables admin dashboards, moderation panels, or advanced navigation editors to fetch all field values for a board, matching the schema. Returns board detail including: id, category/section references, name, code, description (optional), is_active, is_visible, created_at, and updated_at. This is a read-only operation; no modification is performed. Returns 404 if not found.","description":"This endpoint fetches a single board record from the discussionboard_boards table by its unique id (UUID). The response includes all major fields: id, discussionboard_board_category_id, discussionboard_section_id, name, code, description (nullable), is_active, is_visible, created_at, updated_at. Used by admin or moderator dashboard features or navigation builders to inspect board configuration and metadata.\n\nReturns a full board entity or 404 if no such board exists. No side effects, pure read operation only.","summary":"Retrieve board details by id from discussionboard_boards.","parameters":[{"name":"id","description":"Unique board id (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed discussion board record for specified id.","typeName":"Idiscussionboard_boards"},"authorizationRole":"admin","name":"at","path":"/discussionboard/boards/{id}","method":"get"},{"specification":"Update an existing board entity in discussionboard_boards by its unique id. Permits modification of represented fields only (discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, is_visible, updated_at). Created_at and id are immutable. Service must update updated_at timestamp. This endpoint supports admin-only flows for maintaining platform structure: moving boards between categories, editing names/codes, activating/archiving boards, or changing visibility. Authorization must ensure only appropriate privileged users can call.","description":"This endpoint updates a record in the discussionboard_boards table with given id. The request body can modify: discussionboard_board_category_id, discussionboard_section_id, name, code, description, is_active, and is_visible. Only mutable fields as per schema are permitted. On success, the updated board record is returned; if not found, 404 is returned.\n\nTypically used by platform admins and superusers to manage layout, navigation, or organizational metadata for discussion boards.","summary":"Update a discussion board in discussionboard_boards by id.","parameters":[{"name":"id","description":"Unique discussion board id (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updateable fields for the discussion board entity.","typeName":"Idiscussionboard_boards.IUpdate"},"responseBody":{"description":"Updated discussion board record for the specified id.","typeName":"Idiscussionboard_boards"},"authorizationRole":"admin","name":"update","path":"/discussionboard/boards/{id}","method":"put"},{"specification":"DELETE /discussionboard/boards/{id} removes a board from the system. The discussionboard_boards table does not have any soft delete fields such as deleted_at or is_deleted. Therefore, this operation performs a hard delete, permanently removing the board record from the database. All related data referencing this board must be handled appropriately according to foreign key constraints and onDelete behavior defined in the schema (e.g., related threads and posts are set to CASCADE), and audit trails must be managed separately. Attempts to delete a non-existent id result in an error.","description":"This API operation allows for the permanent, hard deletion of a specific board from the discussionboard_boards table.\n\nThe endpoint directly deletes the row corresponding to the provided id. There are no soft deletion columns (such as deleted_at or is_deleted) present in the schema, so the board will be physically removed from the database. As a result, all references to this board in related entities (such as threads, posts, settings, and engagement metrics) will be affected according to their foreign key constraints (typically cascade delete or restrict). This operation is irreversible, and clients must ensure backup or audit coverage if required by compliance policies.\n\nIf an invalid or non-existent id is supplied, an appropriate error will be returned. Authorization logic should require admin or moderator privileges to execute this delete operation, in line with the platform's business rules for governance and auditability.","summary":"Permanently delete a board (discussionboard_boards) by id. Performs hard delete because no soft delete fields exist.","parameters":[{"name":"id","description":"UUID of the board to delete from discussionboard_boards.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/boards/{id}","method":"delete"},{"specification":"POST /discussionboard/boardCategories creates a new board category in the discussionboard_board_categories table. This operation requires a JSON object in the request body specifying the fields: name (string), code (string), optional description (string), and position (integer). All fields are validated against business rules: name/code must be unique, code is used for programmatic references, and position determines the category order. The endpoint returns the created category data upon success.","description":"This endpoint enables the creation of a new board category in the discussionboard_board_categories table.\n\nClients must supply a valid request body with all required fields (name, code, position), with the option to include a description. The name and code must be unique within the table, as enforced by the schema's unique constraints. The position field controls the order of categories in UI displays. A successful operation returns the created category's data. Attempts to create a category with duplicate name or code will result in an error. Admin authorization is required for category management tasks, according to platform business rules.","summary":"Create a new board category (discussionboard_board_categories).","parameters":[],"requestBody":{"description":"New category data for discussionboard_board_categories.","typeName":"IDiscussionboardBoardCategory.ICreate"},"responseBody":{"description":"Created category entity.","typeName":"IDiscussionboardBoardCategory"},"authorizationRole":"admin","name":"create","path":"/discussionboard/boardCategories","method":"post"},{"specification":"PATCH /discussionboard/boardCategories retrieves a filtered or paginated list of board categories from the discussionboard_board_categories table. The operation supports search parameters (e.g., by name, code, position, description) and pagination settings supplied in the request body. It returns a paginated response with a list of matching categories.","description":"This API operation allows clients to retrieve a list of board categories from the discussionboard_board_categories table. Query parameters can be used to filter based on the category name, code, position, or description fields, as defined in the schema. Pagination settings (such as page number and size) should be supported in the request body to efficiently browse through categories. The operation returns a page object containing a list of matching category entities and pagination metadata. Proper admin authorization may be required to view or manage categories, as per business rules.","summary":"Search/filter and paginate board categories (discussionboard_board_categories).","parameters":[],"requestBody":{"description":"Search and pagination data for board category list.","typeName":"IDiscussionboardBoardCategory.IRequest"},"responseBody":{"description":"Paginated list of board categories.","typeName":"IPageIDiscussionboardBoardCategory"},"authorizationRole":"admin","name":"index","path":"/discussionboard/boardCategories","method":"patch"},{"specification":"GET /discussionboard/boardCategories/{id} retrieves a single board category record by its id (UUID) from the discussionboard_board_categories table. Only fields present in the schema (id, name, code, description, position, created_at) are included in the response. If the category is not found, an appropriate error is returned.","description":"This API retrieves a single board category from the discussionboard_board_categories table by its unique identifier (id).\n\nIt returns all relevant details for the category: id, name, code, description, position, and created_at, as defined in the schema. If the specified id does not match any record, a not found error is returned. Admin or authorized user permissions are generally required for this endpoint, according to the business logic outlined in the platform's moderation and admin rules. This endpoint is primarily used in admin or configuration panels.","summary":"Retrieve a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"UUID of the board category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The requested board category entity.","typeName":"IDiscussionboardBoardCategory"},"authorizationRole":"admin","name":"at","path":"/discussionboard/boardCategories/{id}","method":"get"},{"specification":"PUT /discussionboard/boardCategories/{id} updates the details of a specific board category in the discussionboard_board_categories table by id. Clients must supply the fields to update (name, code, description, position) in the request body, following validation for unique constraints and business rules. The operation returns the updated category entity on success.","description":"This operation allows you to update the properties of an existing board category (discussionboard_board_categories) record.\n\nThe request requires a valid id as a path parameter and a request body containing one or more fields to be updated. All fields must match the types defined in the schema, and changes to name or code must not conflict with existing unique constraints. Only present schema fields (name, code, description, position) can be updated. The updated entity is returned upon success. Invalid ids or conflicting unique fields result in appropriate errors. Admin privileges or similar authorization is required, as per business rules.","summary":"Update a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"UUID of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for board category.","typeName":"IDiscussionboardBoardCategory.IUpdate"},"responseBody":{"description":"The updated board category entity.","typeName":"IDiscussionboardBoardCategory"},"authorizationRole":"admin","name":"update","path":"/discussionboard/boardCategories/{id}","method":"put"},{"specification":"DELETE /discussionboard/boardCategories/{id} removes a board category from the discussionboard_board_categories table. There are no soft delete or status fields; thus, this endpoint permanently deletes the record. Foreign key constraints must be respected, and the operation is irreversible. Only authorized users (e.g., admin) may execute this operation.","description":"This API endpoint performs a hard delete of the specified board category (discussionboard_board_categories) record.\n\nThe table lacks fields for soft deletion (e.g., deleted_at or is_deleted), so the deletion is permanent. Any boards referencing this category must comply with the resulting foreign key constraint (usually restrict or cascade behavior is set in schema). Once deleted, all category data is removed and cannot be restored. The system may log this operation for compliance and audit. Authorization (such as admin privileges) is required, and errors are returned if the id does not exist.","summary":"Permanently delete a board category (discussionboard_board_categories) by id.","parameters":[{"name":"id","description":"UUID of the board category to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/boardCategories/{id}","method":"delete"},{"specification":"POST /discussionboard/boardSettings creates a new board settings record in the discussionboard_board_settings table. Request body must supply: discussionboard_board_id (UUID of target board), is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads. All fields are validated as per schema. Uniqueness of discussionboard_board_id is enforced. The endpoint returns the created entity data.","description":"This endpoint enables administrators to create a new settings record for a specified board in discussionboard_board_settings.\n\nRequest is a JSON object with each required field matching the types in the schema: discussionboard_board_id (UUID), is_locked (bool), require_approval_for_posting (bool), max_posts_per_hour (integer), allow_anonymous_viewing (bool), allow_file_uploads (bool). The uniqueness of discussionboard_board_id (one settings record per board) is enforced by the schema. Attempts to create a duplicate settings entry return an error. The created entity, as stored, is returned upon success. Authorization check for admin is required, to ensure only privileged users can modify board settings.","summary":"Create a board settings record (discussionboard_board_settings).","parameters":[],"requestBody":{"description":"Board settings data to create the record.","typeName":"IDiscussionboardBoardSetting.ICreate"},"responseBody":{"description":"Created settings entity.","typeName":"IDiscussionboardBoardSetting"},"authorizationRole":"admin","name":"create","path":"/discussionboard/boardSettings","method":"post"},{"specification":"PATCH /discussionboard/boardSettings fetches and paginates all settings records from the discussionboard_board_settings table, with support for query parameters such as discussionboard_board_id, is_locked, allow_anonymous_viewing, or other schema-defined fields. The request body provides filter and pagination parameters. Returns paginated results.","description":"This endpoint retrieves a filtered and paginated list of board settings records from the discussionboard_board_settings table. Request body may include parameters to filter results (e.g., by board id or other settings fields) and pagination controls (such as page number and size). The returned response is a standard page object containing the matched settings records and pagination info. Only existing schema fields can be used for filtering and response. Access to settings data may be restricted to admin or other authorized users according to platform policy.","summary":"List/filter, paginate board settings (discussionboard_board_settings).","parameters":[],"requestBody":{"description":"Filtering and pagination query for board settings.","typeName":"IDiscussionboardBoardSetting.IRequest"},"responseBody":{"description":"Paginated list of board settings.","typeName":"IPageIDiscussionboardBoardSetting"},"authorizationRole":"admin","name":"index","path":"/discussionboard/boardSettings","method":"patch"},{"specification":"GET /discussionboard/boardSettings/{id} returns a single board settings entity from discussionboard_board_settings by id (UUID), returning all fields defined in the schema. If the given id doesn't exist, a not found error is returned. Only authorized users should access this endpoint.","description":"Fetch a single board settings entity from the discussionboard_board_settings table given its id.\n\nReturns all fields for the settings: id, discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads, created_at, updated_at as per schema. If the id doesn't match any stored entity, a not found error is produced. Access is restricted following business rules (typically to admins). Most commonly used in admin or moderator configuration views.","summary":"Get a board settings record (discussionboard_board_settings) by id.","parameters":[{"name":"id","description":"UUID of the board settings record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A board settings entity by id.","typeName":"IDiscussionboardBoardSetting"},"authorizationRole":"admin","name":"at","path":"/discussionboard/boardSettings/{id}","method":"get"},{"specification":"PUT /discussionboard/boardSettings/{id} updates an existing board settings record in discussionboard_board_settings. The path parameter is the entity's id. The request body provides one or more fields—only schema-defined properties may be updated. All foreign key constraints and uniqueness (per-board) are enforced. The updated entity is returned upon success.","description":"This endpoint updates the defined board settings (discussionboard_board_settings) record as specified by id.\n\nRequest requires path param 'id' and a body object with updatable schema fields: discussionboard_board_id, is_locked, require_approval_for_posting, max_posts_per_hour, allow_anonymous_viewing, allow_file_uploads. Only fields present in the schema can be updated. Uniqueness and foreign key constraints are enforced. The full, updated entity is returned after a successful update. Authorization (e.g., admin role) is required. Errors for invalid id or business rule violation.","summary":"Update board settings (discussionboard_board_settings) by id.","parameters":[{"name":"id","description":"UUID of settings entity to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the settings entity.","typeName":"IDiscussionboardBoardSetting.IUpdate"},"responseBody":{"description":"Updated settings entity.","typeName":"IDiscussionboardBoardSetting"},"authorizationRole":"admin","name":"update","path":"/discussionboard/boardSettings/{id}","method":"put"},{"specification":"DELETE /discussionboard/boardSettings/{id} permanently removes a board settings record from discussionboard_board_settings. The schema does not support soft delete or status fields. On success, the entity is removed irreversibly from the table. Only authorized users (admin or similar) should perform this action. Attempts to delete a non-existent id result in an error.","description":"This API permanently deletes a single board settings record from the discussionboard_board_settings table.\n\nNo soft delete or status fields are present; this endpoint fully removes the entity from storage. Any references (e.g., from boards) relying on this settings entity will need to respect foreign key constraints, as enforced by the schema. The operation is irreversible. Authorization (e.g., admin) is required. A not found error is returned when the id is invalid or missing.","summary":"Hard delete a settings record (discussionboard_board_settings) by id.","parameters":[{"name":"id","description":"UUID of settings record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/boardSettings/{id}","method":"delete"},{"specification":"POST /discussionboard/boardModerators adds a new moderator assignment for a board into the discussionboard_board_moderators table. The request body must provide discussionboard_board_id (UUID), discussionboard_moderator_id (UUID), is_primary (boolean), and joined_at (DateTime). All constraints—including one moderator per board and uniqueness—are validated. The created entity is returned upon success. Only admin or authorized users may assign moderators.","description":"This operation assigns a moderator to a board by creating a new entry in the discussionboard_board_moderators table.\n\nClients must provide a request body with all required fields (discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at), matching the schema. The uniqueness constraint (one row per moderator/board combo) is enforced. Any constraints on moderator eligibility or assignment frequency are checked. The newly created entity is returned. Only admin or authorized users may assign moderators to boards in accordance with platform requirements. Duplicate assignments result in an error.","summary":"Assign/add a moderator to a board (discussionboard_board_moderators).","parameters":[],"requestBody":{"description":"Moderator assignment data for the board moderator entity.","typeName":"IDiscussionboardBoardModerator.ICreate"},"responseBody":{"description":"The created board moderator assignment entity.","typeName":"IDiscussionboardBoardModerator"},"authorizationRole":"admin","name":"create","path":"/discussionboard/boardModerators","method":"post"},{"specification":"Implements list/search operation for discussionboard_board_moderators entity. Allows searching, filtering, and paginating moderator-board assignment records. Each record links a moderator to a board, including fields such as id (PK), discussionboard_board_id, discussionboard_moderator_id, is_primary, and joined_at. No non-existent or redundant fields are present. Used by admins/moderators to audit moderator assignments and by the UI to list board moderators for a given board.","description":"This endpoint retrieves a paginated list of board-moderator assignment records. Each record contains the unique id of the link, the associated board id, the assigned moderator id, a Boolean indicating if this moderator is primary, and the joined_at timestamp. Search and filter parameters may be used to find assignments by moderator, board, or primary status. Soft delete is not supported: records are only present if actively assigned. All fields referenced here come directly from the schema. The endpoint supports pagination and search for large datasets. Related endpoints: GET for details of a single assignment, PUT/DELETE for update/removal of a specific assignment.","summary":"Search/list discussionboard_board_moderators (board-moderator links) with supported filters. Prisma table: discussionboard_board_moderators.","parameters":[],"requestBody":{"description":"Search/filter and pagination parameters for querying discussionboard_board_moderators. Structure based on index/search request conventions.","typeName":"IDiscussionboardBoardModerators.IRequest"},"responseBody":{"description":"Paginated list of board-moderator assignment links.","typeName":"IPageIDiscussionboardBoardModerators"},"authorizationRole":"admin","name":"index","path":"/discussionboard/boardModerators","method":"patch"},{"specification":"Retrieves detail for a single board-moderator assignment in discussionboard_board_moderators. Each record is uniquely identified by its id. This includes all atomic fields from the schema (id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at). Only present assignments are returned.","description":"Fetches a specific board-moderator assignment by its id. Returns all fields from the schema for that record: id, discussionboard_board_id, discussionboard_moderator_id, is_primary, joined_at. Useful for editing or viewing assignment metadata. If the record does not exist, returns a not found error. Only schema-defined fields are included; no soft-delete or redundant data is present.","summary":"Get details for a specific board-moderator assignment (discussionboard_board_moderators) by id. Prisma table: discussionboard_board_moderators.","parameters":[{"name":"id","description":"Unique identifier of the board-moderator link to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Board-moderator assignment data for the requested id.","typeName":"IDiscussionboardBoardModerators"},"authorizationRole":"admin","name":"at","path":"/discussionboard/boardModerators/{id}","method":"get"},{"specification":"Updates a board-moderator assignment record in discussionboard_board_moderators by id. Allows updating fields such as is_primary or joined_at. Only fields present in the schema are supported. Does not support creation; creation is via POST elsewhere. Returns the updated record.","description":"Updates an existing board-moderator assignment, referenced by its id. Allows modifying schema fields such as is_primary or joined_at. Only updates atomic fields defined in the schema. Attempting to update non-existent fields or supply additional data will be rejected. On success, returns the updated assignment. Not found returns an error. Related endpoints: GET to fetch original, DELETE for removal.","summary":"Update a specific board-moderator assignment (discussionboard_board_moderators) by id. Prisma table: discussionboard_board_moderators.","parameters":[{"name":"id","description":"Unique id of the board-moderator assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the board-moderator link, matching schema definitions.","typeName":"IDiscussionboardBoardModerators.IUpdate"},"responseBody":{"description":"The updated board-moderator assignment record.","typeName":"IDiscussionboardBoardModerators"},"authorizationRole":"admin","name":"update","path":"/discussionboard/boardModerators/{id}","method":"put"},{"specification":"Deletes a board-moderator assignment from discussionboard_board_moderators by id. This is a hard delete according to the schema, which has no soft delete fields. The record will be permanently removed from the system. Returns success if deletion occurs, or not found if already deleted/non-existent.","description":"Removes a board-moderator assignment by id through hard deletion (permanent removal). As the schema does not contain soft-delete fields like deleted_at or is_deleted, this operation will fully remove the record. Ensures referential integrity with related board and moderator records. Suitable for post-cleanup or moderator reassignment workflows. Only schema-defined fields are allowed; no additional status is recorded. Related: PATCH (list), GET (detail), PUT (update) endpoints.","summary":"Hard delete a board-moderator assignment (discussionboard_board_moderators) by id. Prisma table: discussionboard_board_moderators.","parameters":[{"name":"id","description":"Id of the board-moderator link to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of successful deletion.","typeName":"ISuccessResponse"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/boardModerators/{id}","method":"delete"},{"specification":"Creates a new discussion thread in the discussionboard_threads entity. Thread must include schema-required fields: board_id, author_member_id, title, and may include body. created_at and updated_at are set on creation. Soft delete timestamp may be null on creation. Returns full record.","description":"Creates a discussion thread. Schema fields required: id (server-generated), board_id, author_member_id, title. Optional: body. created_at and updated_at are set automatically. deleted_at is null initially. Relationship: board must exist; author must be a valid member. Only schema fields are referenced. Returns the created thread record including all atomic fields. Related: PATCH (search), GET/PUT/DELETE for lifecycle management.","summary":"Create a new discussion thread (discussionboard_threads). Prisma table: discussionboard_threads.","parameters":[],"requestBody":{"description":"Data to create a new thread, matching required schema fields.","typeName":"IDiscussionboardThreads.ICreate"},"responseBody":{"description":"Created thread record with all database fields populated.","typeName":"IDiscussionboardThreads"},"authorizationRole":"member","name":"create","path":"/discussionboard/threads","method":"post"},{"specification":"Performs a list/search for discussionboard_threads, returning threads matching criteria and paginated. Returns only thread fields in the schema: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Designed for board browsing, filtering, and UI lists. No non-existent fields or aggregates.","description":"Retrieves a list of threads with support for filtering by board, author, time, and pagination. Returns paginated thread records containing schema-defined fields: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Only these fields are present, as per schema. Soft delete field deleted_at is included: records with this field set are considered deleted but kept for audit. This endpoint is useful for boards and member activity feeds. Related: POST to create threads; GET for individual threads.","summary":"List/search threads (discussionboard_threads) with pagination and filters. Prisma table: discussionboard_threads.","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for thread retrieval.","typeName":"IDiscussionboardThreads.IRequest"},"responseBody":{"description":"Paginated list of threads matching search criteria.","typeName":"IPageIDiscussionboardThreads"},"authorizationRole":"member","name":"index","path":"/discussionboard/threads","method":"patch"},{"specification":"Retrieves a single thread from discussionboard_threads by id. Returns all fields from schema: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Does not reference any fields not in the schema. Not found returns error. Used for thread detail pages.","description":"Obtains details of a specific thread, uniquely identified by its id. The response includes all thread fields in the schema: id, board_id, author_member_id, title, body, created_at, updated_at, deleted_at. Soft delete field deleted_at indicates if the thread is deleted (retained for audit). No extraneous or non-schema fields are present. This endpoint underpins thread detail pages and admin or member thread review UX. Related endpoints: PATCH (list), PUT (edit), DELETE (soft remove).","summary":"Get details of a specific thread (discussionboard_threads) by id. Prisma table: discussionboard_threads.","parameters":[{"name":"id","description":"Unique thread id (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Thread data for the requested id.","typeName":"IDiscussionboardThreads"},"authorizationRole":"member","name":"at","path":"/discussionboard/threads/{id}","method":"get"},{"specification":"Updates a thread in discussionboard_threads by id. Allows editing only schema-defined fields: title, body, possibly board_id (for move), or author_member_id (reassignment). Does not alter created_at/updated_at directly—server updates updated_at. Only schema fields are modifiable. Returns updated record including soft delete field deleted_at if present.","description":"Edits an existing thread identified by id. Allows changes to atomic schema fields title, body, and possibly reassigning board or author (rare; for admin/mod workflows). Does not manipulate created_at/updated_at directly; updated_at is handled by the system. Soft delete field deleted_at is present in the record. Returns the updated thread or error if not found. Related: PATCH (list), GET for detail, DELETE to soft-delete (set deleted_at).","summary":"Update a thread (discussionboard_threads) by id. Prisma table: discussionboard_threads.","parameters":[{"name":"id","description":"Thread id (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the thread. All must map to schema fields.","typeName":"IDiscussionboardThreads.IUpdate"},"responseBody":{"description":"Updated thread record.","typeName":"IDiscussionboardThreads"},"authorizationRole":"member","name":"update","path":"/discussionboard/threads/{id}","method":"put"},{"specification":"Soft deletes a thread from discussionboard_threads by id. The schema includes the deleted_at field for soft deletion. This operation sets deleted_at to the current timestamp, marking the thread as deleted but retaining row for audit and recovery. No hard delete is performed. All business logic and error handling reference only schema fields.","description":"Marks a thread as deleted by setting its deleted_at field to the current timestamp. This acts as a soft delete: the thread remains in the database for compliance, audit, and recovery, but is treated as deleted in application logic. No hard deletion or destruction of the row occurs. Returns confirmation of soft deletion. Related endpoints: PATCH/GET for non-/soft-deleted threads, PUT for restoration/edit.","summary":"Soft delete a thread (discussionboard_threads) by id by setting deleted_at. Prisma table: discussionboard_threads.","parameters":[{"name":"id","description":"Thread id (UUID) to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of successful soft deletion (deleted_at set).","typeName":"ISuccessResponse"},"authorizationRole":"member","name":"erase","path":"/discussionboard/threads/{id}","method":"delete"},{"specification":"Creates a thread snapshot in discussionboard_thread_snapshots. Each snapshot records a version of a thread's fields. Required fields: thread_id, actor_id (nullable), title, body, reason (nullable), created_at. No non-existent fields allowed. Used by moderation/versioning functionality to record pre- and post-edit states.","description":"Creates a new immutable thread snapshot, associated with a thread and (optionally) the actor creating the snapshot (member id or system). Requires: thread_id, optional actor_id, title at version, optionally body and reason. Sets created_at to current time. Returned record includes all schema fields for the snapshot. Used for rollback, moderation, and timeline audit. Related: PATCH (list), GET (by id) for version review.","summary":"Create a thread snapshot (discussionboard_thread_snapshots). Prisma table: discussionboard_thread_snapshots.","parameters":[],"requestBody":{"description":"Snapshot creation fields, strictly matching schema. No non-existent fields.","typeName":"IDiscussionboardThreadSnapshots.ICreate"},"responseBody":{"description":"Created thread snapshot record, with all snapshot fields.","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRole":"member","name":"create","path":"/discussionboard/threadSnapshots","method":"post"},{"specification":"Lists and paginates thread snapshot records from discussionboard_thread_snapshots. Returns all schema fields for each snapshot. Filtering by thread_id and actor_id supported. Used by admins, moderators, or users for review/version history UIs.","description":"Retrieves a paginated list of thread snapshots with filtering and search. Each snapshot record includes id, thread_id, optional actor_id, title and body at that version, reason, and created_at. No additional/non-schema fields. Useful in version history pages and audits. Related: GET for single snapshot, POST to create snapshots during edit/audit.","summary":"List/search thread snapshots (discussionboard_thread_snapshots) with pagination. Prisma table: discussionboard_thread_snapshots.","parameters":[],"requestBody":{"description":"Search/query/pagination parameters for thread snapshots. Structured as per index convention.","typeName":"IDiscussionboardThreadSnapshots.IRequest"},"responseBody":{"description":"Paginated list of thread snapshot records.","typeName":"IPageIDiscussionboardThreadSnapshots"},"authorizationRole":"member","name":"index","path":"/discussionboard/threadSnapshots","method":"patch"},{"specification":"Retrieves a single thread snapshot from discussionboard_thread_snapshots by id. Returns all atomic schema fields: id, thread_id, actor_id, title, body, reason, created_at. Only schema fields; no non-existent or extraneous data. Used for version diffing, rollback, or moderation audits.","description":"Fetches a thread snapshot record by id, including all schema fields: id, thread_id, optional actor_id (nullable), title, optional body (nullable), optional reason, and created_at timestamp. Perfect for viewing a specific version in moderation, audit, or rollback use cases. Related endpoints: PATCH (list), POST (create new snapshot).","summary":"Get a specific thread snapshot (discussionboard_thread_snapshots) by id. Prisma table: discussionboard_thread_snapshots.","parameters":[{"name":"id","description":"Unique id of the thread snapshot record to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Thread snapshot record with full schema fields for requested id.","typeName":"IDiscussionboardThreadSnapshots"},"authorizationRole":"member","name":"at","path":"/discussionboard/threadSnapshots/{id}","method":"get"},{"specification":"Update an existing Thread Snapshot identified by its unique ID. The discussionboard_thread_snapshots model represents the versioning and audit trail for edits to forum discussion threads. Each snapshot stores the title, optional body, optional reason for the edit, the actor_id of the editor (member/moderator), and a created_at timestamp.\n\nThis operation allows updating the details (title, body, reason, and optionally the actor_id) of an existing thread snapshot, but only those fields present in the schema (id, thread_id, actor_id, title, body, reason, created_at). It will not touch any fields not in the schema or reference system fields absent from the schema, such as deleted_at or audit records external to this entity.\n\nOnly administrators or the original actor may update snapshots for forensic/audit corrections. No soft/hard delete fields exist in this model, so modification is limited strictly to the supported atomic values.\n\nAttempting to update fields not defined in the Prisma schema will result in validation errors. Related operations include snapshot creation (POST), retrieval (GET), and deletion (DELETE).","description":"This API operation updates a thread snapshot in the discussionboard_thread_snapshots table by its unique ID. All modifications are strictly limited to fields actually defined in the schema: title (required), body (optional), reason (optional), and actor_id (optional). There are no deleted_at or soft delete fields. The created_at timestamp is not modifiable via this endpoint; it is assigned on creation. Only authorized users (admin/original actor) may perform updates. The endpoint returns the complete updated snapshot. If the snapshot does not exist, a 404 error is returned.","summary":"Update a thread snapshot (discussionboard_thread_snapshots) by ID. Only schema-defined fields are updatable.","parameters":[{"name":"id","description":"Unique identifier of the thread snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated thread snapshot information (fields: title, optional body, optional reason, optional actor_id). Must match schema exactly.","typeName":"IDiscussionboardThreadSnapshot.IUpdate"},"responseBody":{"description":"The updated thread snapshot, fully reflecting the changes.","typeName":"IDiscussionboardThreadSnapshot"},"authorizationRole":"admin","name":"update","path":"/discussionboard/threadSnapshots/{id}","method":"put"},{"specification":"Delete an existing Thread Snapshot identified by its unique ID. The discussionboard_thread_snapshots model stores version/audit history of forum thread edits; each snapshot is immutable after creation. This entity does not contain soft delete fields (no deleted_at, is_deleted, or similar indicator).\n\nAccording to the Prisma schema, DELETE performs a hard delete, permanently removing the snapshot from the database. This operation cannot be undone and will remove the audit/version record. Deletion should be restricted to high-privilege roles (such as admin) and used only in rare, justified circumstances. System-level auditing should track all deletions in an external log.\n\nAttempts to delete non-existent IDs return a 404 error. No partial deletion or soft-delete logic is possible since the schema does not support it.","description":"This API operation deletes a thread snapshot from the discussionboard_thread_snapshots table by its unique ID. Since the model lacks any soft delete capability in the schema, this is a hard delete: the snapshot record is removed from the database permanently. Auditing should be handled externally, as the deletion itself is not tracked within the model. Only admins should be authorized to use this function. Returns 204 No Content on success; returns 404 if the snapshot is not found.","summary":"Hard delete a thread snapshot by ID (discussionboard_thread_snapshots); permanent removal as no soft-delete present.","parameters":[{"name":"id","description":"Unique identifier of the thread snapshot to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/threadSnapshots/{id}","method":"delete"},{"specification":"Create a new thread tag assignment in the discussionboard_thread_tags table. This model provides the M:N relationship linking tags to threads for discoverability and content organization. Required fields: thread_id (UUID) and assigned_at (timestamp). Optional fields: removed_at (timestamp, null when tag is active).\n\nThis endpoint allows all authenticated users to tag a thread by creating a new tag assignment. Only fields defined in the schema (id, thread_id, assigned_at, removed_at) are permitted. Business logic such as time uniqueness or duplicate prevention must be enforced in service logic.\n\nThe operation does not reference any non-existent schema fields. Success returns the created tag assignment record. Related endpoints allow listing, updating, or deleting tag assignments.","description":"This API operation creates a new thread tag assignment in the discussionboard_thread_tags table. It requires a thread_id and assigned_at timestamp, and may optionally include removed_at if the tag is immediately inactive. No extraneous or derived fields are accepted; only the schema-defined fields are allowed. All authenticated members can use this endpoint to add tag relationships. The operation returns the created thread tag assignment.","summary":"Create a thread tag assignment (discussionboard_thread_tags) with required and optional fields per schema.","parameters":[],"requestBody":{"description":"Thread tag assignment data: thread_id and assigned_at (required), optional removed_at.","typeName":"IDiscussionboardThreadTag.ICreate"},"responseBody":{"description":"Created thread tag assignment record.","typeName":"IDiscussionboardThreadTag"},"authorizationRole":"member","name":"create","path":"/discussionboard/threadTags","method":"post"},{"specification":"Retrieve a list of thread tag assignments from the discussionboard_thread_tags table. This represents the M:N relationship between threads and tags. Filtering, pagination, and search are supported through fields present in the schema (id, thread_id, assigned_at, removed_at).\n\nAll query parameters and filters must align strictly with the schema definition; no derived or system fields are referenced. The response returns a paginated list of tag assignment records accessible to authorized members and moderators.","description":"This API operation retrieves a paginated list of thread tag assignments from the discussionboard_thread_tags table. Filtering and searching are possible using the actual schema fields (id, thread_id, assigned_at, removed_at). No soft or hard delete logic is included, as deletion is handled by removing records. Pagination metadata (total, page, perPage, etc.) is provided in the standard page envelope. All readers must be authenticated.","summary":"List and search thread tag assignments (discussionboard_thread_tags) with pagination and filtering by schema fields.","parameters":[],"requestBody":{"description":"Request body includes pagination and search parameters for the tag assignment list, based only on schema fields.","typeName":"IPageIDiscussionboardThreadTag.IRequest"},"responseBody":{"description":"Paginated list of thread tag assignments, following page envelope structure.","typeName":"IPageIDiscussionboardThreadTag"},"authorizationRole":"member","name":"index","path":"/discussionboard/threadTags","method":"patch"},{"specification":"Retrieve a specific thread tag assignment by its unique ID from the discussionboard_thread_tags table. Each record links a thread and a tag for organization and search. Only fields defined within the model (id, thread_id, assigned_at, removed_at) are included.\n\nIf the tag assignment exists, it is returned in detail. If it is missing, a 404 is returned. No soft delete or derived state is present, so absent records indicate non-existent or deleted tag assignment.","description":"This API operation fetches the details of a specific thread tag assignment identified by its unique ID. Only fields in the schema are returned (id, thread_id, assigned_at, removed_at). If the assignment does not exist, a 404 is returned. There is no deleted_at or soft delete capability; removed relationships are deleted from the DB.","summary":"Get a thread tag assignment by ID from discussionboard_thread_tags (no soft/hard delete distinction).","parameters":[{"name":"id","description":"Unique identifier of the thread tag assignment to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested thread tag assignment or 404 if missing.","typeName":"IDiscussionboardThreadTag"},"authorizationRole":"member","name":"at","path":"/discussionboard/threadTags/{id}","method":"get"},{"specification":"Update an existing thread tag assignment in the discussionboard_thread_tags table, identified by its unique ID. This entity models the many-to-many relationship between threads and tags. Updatable fields per schema are thread_id, assigned_at, removed_at. The operation updates only the specified tag assignment record and does not reference or modify non-existent schema fields.\n\nOnly moderators or system processes should access this update function, typically for correcting assignments or restoring historical tagging in audit scenarios. Returns the updated tag assignment; if the record does not exist, returns 404.","description":"This API operation updates a thread tag assignment by ID, limited to fields in the model (thread_id, assigned_at, removed_at). No other fields are supported; there is no deleted_at, system, or derived field capability. Only members with at least moderator role can perform updates. Returns the full updated record, or 404 if not found.","summary":"Update a thread tag assignment (discussionboard_thread_tags) by unique ID.","parameters":[{"name":"id","description":"Unique identifier of the thread tag assignment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated thread tag assignment data: thread_id, assigned_at, optional removed_at, per schema.","typeName":"IDiscussionboardThreadTag.IUpdate"},"responseBody":{"description":"Updated thread tag assignment record.","typeName":"IDiscussionboardThreadTag"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/threadTags/{id}","method":"put"},{"specification":"Delete an existing thread tag assignment by its unique ID from the discussionboard_thread_tags table. This entity models the M:N assignment between threads and tags. The schema does not support soft delete; deletion removes the association record permanently (hard delete).\n\nOnly moderators or admins may delete tag assignments, for example to clean up miscategorized relationships or under moderation requirements. Attempts to delete non-existent tag assignments return 404. No extraneous audit/deletion fields are present in this model.","description":"This API operation deletes a thread tag assignment identified by its unique ID. The Prisma schema has no deleted_at or is_deleted fields, so this action is a hard delete: the record is removed from the discussionboard_thread_tags table. Only authorized moderators or admins may perform deletion. No partial deletion or soft delete mechanism exists for this model.","summary":"Hard delete a thread tag assignment by ID (discussionboard_thread_tags); record is permanently removed.","parameters":[{"name":"id","description":"Unique identifier of the thread tag assignment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/threadTags/{id}","method":"delete"},{"specification":"Create a new post in the discussionboard_posts table. This model represents user-posted discussion content within a thread and board. Required fields are discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, and updated_at. The is_deleted field supports soft-deletion logic in accordance with post lifecycle and moderation requirements.\n\nThis endpoint accepts only those fields explicitly defined in the schema. No non-existent or derived fields are processed. Success results in the newly created post, with all schema fields populated. The is_deleted field is false for initial creation.","description":"This API operation creates a new post in the discussionboard_posts table by accepting the required and optional schema-defined fields. Only discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, and updated_at are processed. No fields outside the Prisma schema are referenced. The created post is returned with all details filled.","summary":"Create a discussionboard post (discussionboard_posts) with required fields only.","parameters":[],"requestBody":{"description":"New post data (discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, updated_at).","typeName":"IDiscussionboardPost.ICreate"},"responseBody":{"description":"Created post record, fully filled as per schema.","typeName":"IDiscussionboardPost"},"authorizationRole":"member","name":"create","path":"/discussionboard/posts","method":"post"},{"specification":"Retrieve a paginated list of posts from the discussionboard_posts table. Each record is a member-posted contribution to a thread. List/indexing supports search, filtering, and pagination based on schema fields (id, discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, updated_at).\n\nSoft deletion is implemented via the is_deleted field: index queries may include/exclude deleted posts based on this field. No hard delete indicator or additional audit fields are present. The response returns a paginated page envelope following standard list conventions.","description":"This API operation lists posts from the discussionboard_posts table using supplied pagination, filtering, and search criteria. Indexing is strictly based on existing fields (id, discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, updated_at). Use the is_deleted flag to filter for only active or deleted posts as needed. The response is a paginated envelope of post records. No other schema fields are supported.","summary":"List and search discussionboard posts (discussionboard_posts) using search, pagination, and the is_deleted flag.","parameters":[],"requestBody":{"description":"Request body with pagination/search arguments using only schema-supported filters (id, discussionboard_thread_id, is_deleted, etc.).","typeName":"IPageIDiscussionboardPost.IRequest"},"responseBody":{"description":"Paginated result envelope of post records as per the schema.","typeName":"IPageIDiscussionboardPost"},"authorizationRole":"member","name":"index","path":"/discussionboard/posts","method":"patch"},{"specification":"Retrieve a single post from the discussionboard_posts table by its unique ID. Each post is a member-created contribution to a thread and board. This endpoint returns the full details of the post, including soft deletion state (is_deleted) and all present schema fields. No extraneous/derived fields are present.\n\nIf the post does not exist, a 404 is returned. Soft delete actions are only indicated by the is_deleted flag; the record is always present if found. No deleted_at or hard delete status is in the model.","description":"This API operation retrieves a single post from the discussionboard_posts table, identified by its unique ID. Fields returned include id, discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, and updated_at, all as present in the schema. If the post is not found, a 404 is returned. There is no deleted_at or hard deletion marker in the model.","summary":"Get a discussionboard post by its unique ID from discussionboard_posts, including soft deletion state.","parameters":[{"name":"id","description":"Unique identifier of the post to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post record as per schema, or 404 if not found.","typeName":"IDiscussionboardPost"},"authorizationRole":"member","name":"at","path":"/discussionboard/posts/{id}","method":"get"},{"specification":"Update an existing post in the discussionboard_posts table by its unique ID. This model represents forum post content with fields for thread, author, board, title, body, is_deleted (for soft delete), created_at, and updated_at. Only these schema fields are mutable.\n\nThe endpoint allows members to update their own posts, and moderators/admins to edit any post. Only fields present in the model can be changed. Soft delete may be performed by setting is_deleted to true. If the post does not exist, a 404 is returned. No hard delete or deleted_at logic exists in the model.","description":"This API operation updates a post identified by its ID in the discussionboard_posts table. All mutable fields are limited to schema-defined fields (discussionboard_thread_id, discussionboard_member_id, discussionboard_board_id, title, body, is_deleted, created_at, updated_at). is_deleted may be used to soft-delete. No non-schema fields can be provided or returned. Returns the updated post or 404 if not found.","summary":"Update a discussionboard post (discussionboard_posts) by ID, including soft deletion through is_deleted field.","parameters":[{"name":"id","description":"Unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Post update information (only schema fields are allowed; is_deleted enables soft delete).","typeName":"IDiscussionboardPost.IUpdate"},"responseBody":{"description":"Updated post record per schema definition.","typeName":"IDiscussionboardPost"},"authorizationRole":"member","name":"update","path":"/discussionboard/posts/{id}","method":"put"},{"specification":"Delete a post from the discussionboard_posts table by its unique ID. The existence of the is_deleted field in this model means that DELETE does not immediately hard-remove the post; instead, it performs a soft delete by setting is_deleted to true. The record remains in the database for audit/history.\n\nThis operation is allowed to members (for their own posts) and moderators/admins (for any post). Only the is_deleted flag is changed; no record is removed from the DB. Attempting to delete a non-existent post returns a 404. Actions modifying any fields not present in the schema will result in error.","description":"This API operation performs a soft delete on a discussionboard post by setting the is_deleted field to true. The DELETE does not hard-remove the record; instead, the post remains in the database, consistent with audit and content retention requirements. If the post is not found, returns 404. No other non-schema fields are supported. This endpoint may be used by members for their own posts, and moderators/admins for any post.","summary":"Soft delete a discussionboard post by setting is_deleted=true (no physical removal from the database).","parameters":[{"name":"id","description":"Unique identifier of the post to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/discussionboard/posts/{id}","method":"delete"},{"specification":"Create a new post snapshot. This operation creates an immutable record of a post's version at a specific moment. It requires linking to the parent post via discussionboard_post_id, an editor_member_id reference (nullable for system edits), and the snapshot fields: title, body, and taken_at timestamp. This operation is crucial for versioning and audit, supporting rollback and transparency for post edits. According to schema, all required fields must exist, and no extraneous audit fields such as created_by or updated_by are used. No soft delete exists for this entity; snapshots are always append-only records.","description":"This endpoint allows creation of a new post snapshot (discussionboard_post_snapshots). The snapshot captures the state of a post at a particular moment, recording the title, body, and editor_member_id (who performed the edit or system if null), and the taken_at timestamp for audit. Once created, each snapshot acts as an immutable historical record. This fulfills content auditability, rollback, and moderation features required by the system. As per schema, there is no soft delete or update operation for this entity. Relationship to the original post is established via discussionboard_post_id, and all properties referenced here are verified to exist in the Prisma schema. This operation is restricted to authenticated members, moderators, or admins with appropriate privileges when creating historical snapshots. Error handling includes validation of referenced post and editor existence. No fields like deleted_at or created_by are present in the schema for this model, so none are referenced.","summary":"Create a post snapshot record in discussionboard_post_snapshots.","parameters":[],"requestBody":{"description":"Information required to create a post snapshot. Must include discussionboard_post_id, editor_member_id (nullable), title, body, and taken_at timestamp.","typeName":"IPostSnapshot.ICreate"},"responseBody":{"description":"The created post snapshot object.","typeName":"IPostSnapshot"},"authorizationRole":"member","name":"create","path":"/discussionboard/postSnapshots","method":"post"},{"specification":"List and search post snapshots (discussionboard_post_snapshots). Enables paginated and filtered retrieval of post version history for a specific post or by various search criteria. Typical use cases include versioning audit display, moderation review, and restore/rollback workflows. Supported request parameters are restricted to fields defined in the schema – filter by discussionboard_post_id, editor_member_id, title, body, or taken_at. Soft delete is not available for snapshots, so only existing rows are returned. Pagination and sorting should be implemented at service/controller level if required. The operation does not require a request body for basic listing, but for advanced search, a proper filter object referring to actual schema fields is supplied. Error handling includes validation of referenced post and relevant IDs.","description":"This endpoint enables searching and listing post snapshot records for historical review and audit trails. Results can be filtered by properties like discussionboard_post_id (for one post), editor_member_id, taken_at, and snapshot title. Supports pagination and sorting if needed by frontend. Use cases include audit log display, moderation review, member self-service viewing of edit history, and admin investigations. All referenced properties exist in the schema, and there are no audit fields like deleted_at, created_by, etc. This operation is authorization-guarded—members see their own edit history, moderators/admins may search more broadly. Only currently existing snapshots are returned, as the schema does not support snapshot soft delete.","summary":"Paginate and search post snapshot records (discussionboard_post_snapshots).","parameters":[],"requestBody":{"description":"Request parameters for searching and paginating post snapshots, filtered by existing schema fields (e.g., by post id, editor, timestamp, etc).","typeName":"IPostSnapshot.IRequest"},"responseBody":{"description":"Paginated result set of post snapshot records.","typeName":"IPageIPostSnapshot"},"authorizationRole":"member","name":"index","path":"/discussionboard/postSnapshots","method":"patch"},{"specification":"Retrieve a single post snapshot record from discussionboard_post_snapshots by its unique id. This operation supports version rollback, moderator review, and edit audit functions. The field id refers to the snapshot's primary key (UUID). No soft-delete or hidden states exist for this entity; all fields returned are directly from schema and never reference non-existent audit columns. Operation restricted to authorized members/moderators/admins. Error handling for non-existent id returns a 404.","description":"This endpoint retrieves a specific post snapshot entity using its unique id. All properties in the response correspond directly to the schema: discussionboard_post_id, editor_member_id (nullable), title, body, taken_at. Used for displaying historical post version, supporting moderator investigation, or enabling restoration workflows. Soft-delete is not supported for snapshots, so the operation either returns the record or a not found error. There are no created_by, updated_by, or deleted_at fields. Proper role-based authentication is enforced to prevent exposing edit history inappropriately.","summary":"Get a specific post snapshot (by id) from discussionboard_post_snapshots.","parameters":[{"name":"id","description":"The unique id of the post snapshot to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed post snapshot object (all fields from schema).","typeName":"IPostSnapshot"},"authorizationRole":"member","name":"at","path":"/discussionboard/postSnapshots/{id}","method":"get"},{"specification":"Update an existing post snapshot in discussionboard_post_snapshots by id. This operation is for correcting audit errors, resolving moderation escalations, or remedying historical inaccuracies. Only updatable fields from the schema are modifiable: title, body, and taken_at. The id must correspond to the snapshot's primary key (UUID). As per strict audit compliance, most edits should be logged – in normal site flow, snapshots are usually append-only, but for admin override this operation is provided. The schema contains no extra audit fields. Soft delete does not exist for this entity, so the update affects existing record in place.","description":"This endpoint updates a post snapshot entity by its unique id. Updatable properties are limited to actual schema fields: title, body, taken_at, and editor_member_id (nullable). Used in rare moderation/admin scenarios for correcting audit history or factual errors. Routine site editing must create new snapshot records instead; this operation is strictly role-limited. There are no created_by or deleted_at fields, so none are referenced. Error cases include not found id, or forbidden edit by insufficient role. Authorization is enforced (usually admin-only access).","summary":"Update a specific post snapshot in discussionboard_post_snapshots (admin/mod only).","parameters":[{"name":"id","description":"The unique id of the post snapshot to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated fields for the post snapshot (limited to title, body, taken_at, editor_member_id).","typeName":"IPostSnapshot.IUpdate"},"responseBody":{"description":"The updated post snapshot record.","typeName":"IPostSnapshot"},"authorizationRole":"admin","name":"update","path":"/discussionboard/postSnapshots/{id}","method":"put"},{"specification":"Delete a post snapshot from discussionboard_post_snapshots by id. This operation irreversibly removes the snapshot from the database. The schema does not have a soft delete or deleted_at field, so this operation performs a hard delete. Typical use is rare, reserved for admin cleanup or compliance with data retention policies (e.g., GDPR, error removal). Primary key id identifies the snapshot to delete. No extra fields are referenced in the operation or description. Authorization required (admin only).","description":"This operation deletes a post snapshot by unique id, permanently removing it from the discussionboard_post_snapshots table. Since the schema lacks a soft deletion mechanism, deletion is hard and immediate—no deleted_at or is_deleted field exists. Used mainly for admin or legal compliance workflows. Returns success on deletion or 404 if not found. Only authorized admins can use this operation, and audit trails should be managed elsewhere (outside snapshot itself).","summary":"Hard-delete a post snapshot record in discussionboard_post_snapshots by id (ADMIN ONLY).","parameters":[{"name":"id","description":"The unique id of the post snapshot to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/postSnapshots/{id}","method":"delete"},{"specification":"Create a post vote record (discussionboard_post_votes). Members use this to cast an upvote, downvote, or retract vote on a specific post. Each record must reference an existing post (discussionboard_post_id), voting member (discussionboard_member_id), the vote_type (integer: 1=upvote, -1=downvote, 0=neutral/remove), and creation timestamp. Each (discussionboard_post_id, discussionboard_member_id) pair is unique (one vote per member per post). There are no audit fields; deletion is hard (not soft).","description":"This endpoint registers a vote by a member on a post. The request must include discussionboard_post_id, discussionboard_member_id, vote_type (1 or -1 or 0), and created_at. The association is unique per (post, member), supporting upvotes, downvotes, or vote retraction (0). Schema fields are strictly followed—no extra audit fields are referenced. There is no deleted_at; to remove a vote, set vote_type to 0 or delete the record. Authorization required: only authenticated members can vote.","summary":"Create a new post vote (upvote/downvote) record in discussionboard_post_votes.","parameters":[],"requestBody":{"description":"The data required to register a new post vote (must reference post and member, include vote_type, and timestamp).","typeName":"IPostVote.ICreate"},"responseBody":{"description":"The created post vote object.","typeName":"IPostVote"},"authorizationRole":"member","name":"create","path":"/discussionboard/postVotes","method":"post"},{"specification":"List and search post vote records (discussionboard_post_votes). This supports analytic, moderation, or profile display use cases allowing queries by post, member, or vote_type. Supported filters are only those in the schema: discussionboard_post_id, discussionboard_member_id, vote_type, created_at. Supports pagination and advanced search on actual fields only. There is no soft delete column for this entity; results always reflect current, non-deleted rows. Returns a paginated list of votes.","description":"This endpoint returns a list of post votes filtered by allowed criteria such as post id, member id, vote_type (1=upvote, -1=downvote, 0=neutral), and creation date. Used for analytics, profile summaries, or moderation review of post voting patterns. Only fields present in the schema are referenced. As there is no soft delete, results include all current votes. Authorization required for sensitive queries (moderators/admins), but members can view their own votes. Pagination and sorting implemented at controller/service level.","summary":"Search and paginate post votes in discussionboard_post_votes.","parameters":[],"requestBody":{"description":"Search parameters for post votes (only fields in schema: post id, member id, vote_type, created_at).","typeName":"IPostVote.IRequest"},"responseBody":{"description":"Paginated set of post votes meeting search criteria.","typeName":"IPageIPostVote"},"authorizationRole":"member","name":"index","path":"/discussionboard/postVotes","method":"patch"},{"specification":"Get a single post vote record from discussionboard_post_votes by id. The operation retrieves all fields in the schema for that record: discussionboard_post_id, discussionboard_member_id, vote_type, and created_at. Each id is the primary key for the vote record (UUID). There is no soft delete logic; if the record exists it is returned, else 404. Used for audit, moderation, or member profile display. Returns all valid fields per schema with no extraneous audit columns.","description":"This endpoint fetches a specific post vote by id, returning all present fields including discussionboard_post_id, discussionboard_member_id, vote_type, and created_at. Used for profile activity, moderation, or analytic review. Soft delete is not supported, so only live votes are accessible. No extraneous or virtual fields (e.g., deleted_at) are included. Proper authentication is enforced: only the vote owner, moderators, or admins can access vote records for integrity and privacy.","summary":"Fetch a single post vote record by id (discussionboard_post_votes).","parameters":[{"name":"id","description":"The unique id of the post vote to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The post vote record for given id.","typeName":"IPostVote"},"authorizationRole":"member","name":"at","path":"/discussionboard/postVotes/{id}","method":"get"},{"specification":"Update an existing post vote record in discussionboard_post_votes by id. Only fields updatable according to schema (vote_type, created_at) can be modified. Used for correcting vote errors, moderation interventions, or audit compliance. The id must be a UUID matching the vote record. Routine users typically change votes by casting again; this operation is mainly for admin or system use. No soft delete; all updates are in-place. Only schema fields are referenced. Authorization required.","description":"This endpoint updates a post vote in discussionboard_post_votes by its unique id. Allowed fields: vote_type and created_at, which must match the field types in the schema. Used by moderators/admins for correcting or reviewing mistaken votes, or in rare audit workflows. Soft delete is not supported, so all changes persist in the main vote record. Only schema fields are used. Authentication and authorization require admin or moderator privileges, not available to regular members.","summary":"Update a post vote record by id (admin/moderator only).","parameters":[{"name":"id","description":"The unique id of the post vote to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The updated post vote data (vote_type and created_at only).","typeName":"IPostVote.IUpdate"},"responseBody":{"description":"The updated post vote record.","typeName":"IPostVote"},"authorizationRole":"admin","name":"update","path":"/discussionboard/postVotes/{id}","method":"put"},{"specification":"Delete a post vote record from discussionboard_post_votes by id. This entity has no soft delete mechanism; deletion is hard—row is permanently removed from the database. Used only for moderator/admin actions, vote clean-up, or error correction. Primary key id identifies the vote to delete. No audit or deleted_at fields referenced. Authorization enforced by role.","description":"This endpoint deletes a post vote record identified by id, for example due to moderation review, error, or duplicate vote removal. Hard delete: record is irreversibly removed from the database as no soft-delete schema exists. Only admin/moderator may execute. All referenced fields must exist in the schema and no implicit fields are referenced or returned. Ensures data consistency for post voting records.","summary":"Hard-delete a post vote from discussionboard_post_votes by id (ADMIN/MOD only).","parameters":[{"name":"id","description":"The unique id of the post vote to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/postVotes/{id}","method":"delete"},{"specification":"Create a post report record (discussionboard_post_reports). Members use this endpoint to report a post for issues such as spam, abuse, or policy violation. Required fields: discussionboard_post_id, reporter_member_id, report_type_id (refers to allowed types), optional freeform description, and creation timestamp. All references must be valid UUIDs. One report per member per post per type enforced by unique constraint. Soft delete does not exist; all records are permanent. Authorization required so only authenticated members can file reports.","description":"This endpoint registers a report against a post by an authenticated member on the discussionboard_post_reports table. Fields: discussionboard_post_id, reporter_member_id, report_type_id, description (nullable), and created_at. Used to enable community moderation, audit, and compliance as per business rules. No soft delete mechanism exists for this table—reports are permanent unless hard deleted (admin only).","summary":"Create a report against a post (discussionboard_post_reports).","parameters":[],"requestBody":{"description":"Report details (post id, reporter id, report type id, optional description, created_at).","typeName":"IPostReport.ICreate"},"responseBody":{"description":"The created post report record.","typeName":"IPostReport"},"authorizationRole":"member","name":"create","path":"/discussionboard/postReports","method":"post"},{"specification":"Search and list post report records (discussionboard_post_reports) for moderation, audit, or analytics. Filters allowed: discussionboard_post_id, reporter_member_id, report_type_id, and created_at. Returns paginated results. No soft delete; only current records visible. All referenced fields must exist in schema. Authorization required; members see own submitted reports, moderators/admins see all.","description":"This endpoint supports searching and listing post report records with optional filters by post id, reporter member id, report type id, and created_at. Use cases: moderator review queues, user activity/complaint records, analytics reporting. Results are paginated, all fields are strictly from model, and there is no soft deletion; deletions are hard only (admin/mod only).","summary":"List and filter post reports (discussionboard_post_reports).","parameters":[],"requestBody":{"description":"Filter/search parameters: post id, reporter id, report type, created_at (all from schema).","typeName":"IPostReport.IRequest"},"responseBody":{"description":"Paginated list of post report records matching filters.","typeName":"IPageIPostReport"},"authorizationRole":"member","name":"index","path":"/discussionboard/postReports","method":"patch"},{"specification":"Retrieves a specific post report by its unique identifier from the `discussionboard_post_reports` table. The operation returns detailed information about the report, which includes the post being reported, the reporting member, the report type, any descriptive context, and the timestamp when the report was created. This is essential for moderators and system admins to view the full content of a user-generated report for moderation or auditing actions. All fields used in the response exist in the Prisma schema, such as `id`, `discussionboard_post_id`, `reporter_member_id`, `report_type_id`, `description`, and `created_at`. No non-existent fields are referenced; only actual schema fields are included. Returns null if the report does not exist or has been deleted.","description":"This endpoint fetches a full report record from the `discussionboard_post_reports` table by its `id` primary key. All data—such as the post's UUID, reporting member's UUID, report reason, type, and timestamp—align directly with the table's columns. No references to forbidden or non-existent schema properties are made (e.g., there is NO deleted_at or updated_by in this table or response). The endpoint is intended for moderators or administrators to review a user's report for further action. If the report is not found, the endpoint returns null, strictly in line with soft/hard delete behavior as defined by the schema (the table currently does not support soft deletion; deleted reports are permanently removed).","summary":"Retrieve a post report by ID from `discussionboard_post_reports` table. Only actual schema fields are referenced.","parameters":[{"name":"id","description":"Unique identifier for the post report to retrieve. Must match the UUID format defined in the schema as the primary key.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns the post report record with all defined schema fields, or null if not found.","typeName":"IPostReport"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/postReports/{id}","method":"get"},{"specification":"Updates an existing post report in the `discussionboard_post_reports` table using the provided `id`. Only fields present in the Prisma schema may be updated: `discussionboard_post_id`, `reporter_member_id`, `report_type_id`, and `description`. The `created_at` timestamp is immutable and not updated via this endpoint. This endpoint is for moderators/admins to correct or edit report metadata (such as report type or descriptive context) in accordance with system business rules. No fields outside the existing schema are referenced in the operation description, parameters, or data specification.","description":"This endpoint allows moderation or administrative roles to update specific properties of a post report, strictly limiting modifiable fields to those defined by the schema: post id, report type, reporter, and description. Lifecycle fields like `created_at` are NOT updated, per schema rules. No unauthorized or non-existent attributes (like deleted_at or created_by) are referenced. Update actions are auditable, and all information comes directly from the schema's columns.","summary":"Update an existing post report in `discussionboard_post_reports`; only actual schema fields may be updated.","parameters":[{"name":"id","description":"Unique identifier for the post report to update. Must match the UUID format defined in the schema as the primary key.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields of a post report, restricted to those defined in the schema.","typeName":"IPostReport.IUpdate"},"responseBody":{"description":"Returns the updated post report entity on success, reflecting only schema-allowed modifications.","typeName":"IPostReport"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/postReports/{id}","method":"put"},{"specification":"Deletes a specific post report from the `discussionboard_post_reports` table. Since the schema does not feature a soft-delete field (like `deleted_at` or `is_deleted`), this operation performs a hard delete—permanently removing the report record. This irreversible action is intended for moderator or admin roles and requires strict audit logging. No properties outside the schema are used or referenced.","description":"Deletes a post report by its primary key, using hard delete logic because the table does not define any soft deletion columns. This means the record will be removed outright from the database, with no reversible or recoverable status. The endpoint must be used carefully, following system moderation and audit guidelines, as deleted reports cannot be restored. No references to non-existent attributes such as 'soft delete' or 'deleted_at' are included.","summary":"Hard deletes a post report from `discussionboard_post_reports` because soft delete fields do not exist.","parameters":[{"name":"id","description":"The UUID of the post report to permanently delete. This must directly match the primary key in the table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns null on success, indicating permanent removal. If not found, has no effect.","typeName":"null"},"authorizationRole":"moderator","name":"erase","path":"/discussionboard/postReports/{id}","method":"delete"},{"specification":"Creates a new post reference in the `discussionboard_post_references` table. All input data must correspond to existing table fields: `source_post_id` (required), `target_post_id` (optional), `target_thread_id` (optional), and `reference_type` (required, string). The `id` is generated by the system, not supplied by the client. No invented or missing attributes are referenced. This operation is for establishing a cross-reference between posts or from a post to a thread, as defined by the schema/requirements.","description":"This endpoint creates a new entry in `discussionboard_post_references`, requiring only properties that exist in the schema (source post id, optional target post/thread, type). No references to non-existent or extra fields are permitted. Used by members creating or citing posts/threads across the board, this endpoint underpins citation and content linking functionality in the platform. All foreign keys and required fields strictly match the schema field definitions.","summary":"Create a new post reference in `discussionboard_post_references`, using only real schema properties.","parameters":[],"requestBody":{"description":"Post reference creation object; only schema columns are accepted (source post id, target post/thread id, reference_type).","typeName":"IPostReference.ICreate"},"responseBody":{"description":"Returns the newly created post reference object, fully matching all schema-defined fields.","typeName":"IPostReference"},"authorizationRole":"member","name":"create","path":"/discussionboard/postReferences","method":"post"},{"specification":"Retrieves a list of post references from the `discussionboard_post_references` table. The operation supports pagination, filtering, and searching on strictly schema-defined columns (e.g., `source_post_id`, `reference_type`, `target_post_id`, `target_thread_id`). No non-existent or derived fields are referenced. Returns a paginated list with each object strictly matching the schema record shape. Useful for querying where certain posts are cited or referenced in the discussion board system.","description":"Fetches and filters a list of post reference objects using only columns present in the `discussionboard_post_references` schema. Pagination and search are performed based solely on existing fields. No attributes like deleted_at, last_edited, or admin_notes are referenced or returned, as they do not exist on the model. The operation is suitable for analytics, citation listings, or bulk queries about content relationships, all while preventing external field leakage.","summary":"Retrieve a paginated, filtered list of post references using only schema-defined fields.","parameters":[],"requestBody":{"description":"Request parameters for post reference listing; ONLY schema columns are permitted for filtering/sorting (e.g., by source_post_id, reference_type).","typeName":"IPostReference.IRequest"},"responseBody":{"description":"Paginated response object containing a list of post references that strictly match schema records.","typeName":"IPageIPostReference"},"authorizationRole":"member","name":"index","path":"/discussionboard/postReferences","method":"patch"},{"specification":"Retrieves a specific post reference from the `discussionboard_post_references` table using the record's UUID. The response includes only fields defined in the schema: `id`, `source_post_id`, `target_post_id`, `target_thread_id`, `reference_type`. System- or moderation-related metadata not defined in the schema (such as deleted_by, admin_notes, or soft delete flags) are NEVER referenced, in strict compliance with schema compliance rules.","description":"Fetches a single post reference entity by its primary key, returning a full object only using directly represented table columns. If no matching record is found, a null is returned. This operation respects hard/soft delete rules as strictly determined by the schema—the table does NOT have soft delete columns, so if the reference is deleted, it is removed outright. No extra attributes or system fields are returned or referenced.","summary":"Get a single post reference by ID, returning only actual schema fields.","parameters":[{"name":"id","description":"The UUID of the post reference to fetch. Must match an existing primary key value.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns the post reference record or null if not found, always containing only fields present in the schema.","typeName":"IPostReference"},"authorizationRole":"member","name":"at","path":"/discussionboard/postReferences/{id}","method":"get"},{"specification":"Updates an existing post reference in the `discussionboard_post_references` table. Only modifiable properties defined in the schema can be updated (e.g., `source_post_id`, `target_post_id`, `target_thread_id`, `reference_type`). There are no lifecycle fields like created_at or deleted_at on this model, so those are NOT updatable and not referenced in this operation. This endpoint is for correcting or modifying references as required, such as changing the citation target or reference type. All input and output fields MUST directly correspond to the schema.","description":"Allows editing any updatable attribute from the `discussionboard_post_references` schema based strictly on table columns: source post, target post, target thread, and type. No system, meta, or non-existent columns are mentioned. All modification is constrained to actual schema, and audit trails are handled at the application level, not exposed in this object or operation.","summary":"Update a post reference entry using only fields defined in schema; meta/lifecycle properties do not exist and are not referenced.","parameters":[{"name":"id","description":"The primary key UUID of the post reference to update, as in the schema definition.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable properties for a post reference, restricted to those defined in the schema table.","typeName":"IPostReference.IUpdate"},"responseBody":{"description":"Returns the updated post reference record, strictly adhering to schema-defined field names and values.","typeName":"IPostReference"},"authorizationRole":"member","name":"update","path":"/discussionboard/postReferences/{id}","method":"put"},{"specification":"Deletes a specific post reference from the `discussionboard_post_references` table. The schema does NOT define any soft delete fields (such as deleted_at or is_deleted), so this operation will perform a hard, irreversible deletion of the entry. This should be used with caution, as it permanently removes the cross-reference between posts/threads and cannot be undone. The response is null on success, with no remaining reference data retrievable. No invented or forbidden fields are referenced in this operation.","description":"This endpoint permanently removes a post reference by its UUID, strictly via hard delete logic. The table does not provide soft delete fields. This process eliminates the relationship from the system, and the record cannot be restored by 'undelete'. No audit, system, or meta properties not in schema are included in the process or documentation.","summary":"Hard delete of a post reference, as the table has no soft delete fields.","parameters":[{"name":"id","description":"Unique identifier of the post reference to delete, matching UUID format as required by the schema.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Returns null on successful, hard deletion. If the reference does not exist, returns null as well.","typeName":"null"},"authorizationRole":"member","name":"erase","path":"/discussionboard/postReferences/{id}","method":"delete"},{"specification":"Creates a new comment record in the `discussionboard_comments` table. All required input properties—`discussionboard_post_id`, `discussionboard_member_id`, `body`—must be provided, with optional support for nested replies (`parent_id`). Other properties (created_at, updated_at) are set and tracked by the system/database, not by user input. The resulting object strictly matches the schema fields, and no non-existent or extra fields are referenced in the operation. This endpoint enables members to reply to posts or other comments, supporting threaded discussion functionality.","description":"This operation allows a member to post a new comment under a post or another comment (replies) by specifying all required real schema attributes. The request/response body and all documentation JSON reference only properties that actually exist in `discussionboard_comments`. Fields like deleted_at or admin_notes are not referenced in client input, in line with strict schema compliance.","summary":"Create a new comment on a post or as a reply, using only required and permitted schema columns.","parameters":[],"requestBody":{"description":"Schema-conformant comment creation request object, strictly limited to known table columns—post, member, body, optional parent_id.","typeName":"IComment.ICreate"},"responseBody":{"description":"Returns the full comment object as stored, including all schema fields, after creation.","typeName":"IComment"},"authorizationRole":"member","name":"create","path":"/discussionboard/comments","method":"post"},{"specification":"Retrieves a paginated and filterable list of comments from the `discussionboard_comments` table. Filtering and searching can only apply to fields that exist in the schema (e.g., by `discussionboard_post_id`, `discussionboard_member_id`, date fields, body text). Search does NOT reference or rely on any deleted_at-like field—despite `deleted_at` existing, it is only used for cascade/soft delete workflow internally, and is not a filter in this public API. This endpoint aligns with business rules for member access to discussion threads and comment activity.","description":"This endpoint fetches comments from the table, applying any filters or search parameters only to defined columns (parent comment, post, member, content, timestamps). Although a `deleted_at` field does exist, it is not exposed or directly filtered upon here; only actual table fields are available as request/response data. Pagination controls are supported (offset/limit), and response shape is entirely schema-driven, containing no invented or forbidden fields.","summary":"List and search comments by schema fields, only present table columns may be used or exposed.","parameters":[],"requestBody":{"description":"Request object for paginated comment listing, supporting filters/search by known schema fields only.","typeName":"IComment.IRequest"},"responseBody":{"description":"Paginated list of comment objects conforming strictly to schema record structure.","typeName":"IPageIComment"},"authorizationRole":"member","name":"index","path":"/discussionboard/comments","method":"patch"},{"specification":"Retrieves a single comment record from the `discussionboard_comments` table by its UUID. Returns the full comment object, as persisted, using only columns and data types which are declared in the table schema. If the specified comment does not exist or has been deleted (soft delete indicated by the non-null `deleted_at` field), response is null. Fields not found in the schema or soft delete flags unrelated to this field are NOT referenced anywhere in the request or response data.","description":"Fetches a comment entity by the primary key, returning all matching fields as per schema documentation. If a comment has been soft deleted (`deleted_at` is not null), the endpoint returns null. Fields such as updated_by, deleted_by, or audit metadata are not referenced or returned (do not exist in schema). This operation is for members viewing individual comments or enabling moderation review.","summary":"Get a single comment record by ID, with only real database fields included.","parameters":[{"name":"id","description":"UUID of the comment to find, must correspond to the schema-defined primary key.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The single comment object if found and not soft deleted; null if not found or deleted_at is set.","typeName":"IComment"},"authorizationRole":"member","name":"at","path":"/discussionboard/comments/{id}","method":"get"},{"specification":"Updates an existing comment in the `discussionboard_comments` table. Only mutable fields which are defined in the schema can be changed via this endpoint: `body`, and optionally, setting `parent_id` (for replies/rethreading). The `created_at` and `discussionboard_member_id` are immutable and unaffected. The optional `updated_at` field is automatically updated to the current system time by the backend. The operation must NOT reference any non-existent columns (such as deleted_by or moderator_notes); only schema fields are used. The endpoint is intended primarily for users to correct or edit their own comments, respecting audit and business rules.","description":"Allows permitted users (typically, comment authors or moderators) to modify the content (body) or hierarchy (parent_id) of an existing comment, strictly using real schema fields. `updated_at` is system managed. The endpoint does not expose or reference forbidden fields. If the update includes soft deletion (by setting `deleted_at`), that logic must respect audit policies, but only the schema's fields may be changed. Returns the updated object on success, null if the target was deleted (deleted_at).","summary":"Update comment content or hierarchy, strictly using fields in schema; no extra properties referenced.","parameters":[{"name":"id","description":"Primary key UUID of the comment to update, following the schema's ID field.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields for a comment, strictly limited to those existing in `discussionboard_comments`.","typeName":"IComment.IUpdate"},"responseBody":{"description":"Updated comment record with all changes applied. Returns null if comment was deleted or not found.","typeName":"IComment"},"authorizationRole":"member","name":"update","path":"/discussionboard/comments/{id}","method":"put"},{"specification":"Implements deletion (soft deletion) of a single comment identified by its unique id. Uses the 'deleted_at' field in the discussionboard_comments model to mark the comment as deleted without removing it from the database. Does not affect comments without a 'deleted_at' field. Cascades deletion to associated elements (e.g., snapshots, votes, reports) using Prisma onDelete/CASCADE where applicable. Only fields that exist in the schema are used.","description":"This endpoint enables the soft deletion of a discussionboard_comments entity by updating the 'deleted_at' field to the current timestamp. This approach allows restoration of the comment for audit and moderation purposes. The operation requires the comment's unique id as a path parameter. No fields besides those in the schema are referenced. If the comment is already deleted, the operation does nothing or returns a suitable message. All cascading deletions conform to onDelete/CASCADE relations in the Prisma schema.","summary":"Soft deletes a comment identified by id using the 'deleted_at' field (discussionboard_comments table).","parameters":[{"name":"id","description":"Unique identifier of the comment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/discussionboard/comments/{id}","method":"delete"},{"specification":"Creates a new discussionboard_comment_snapshots record. This records an immutable version of a comment's content and metadata, for version history, rollback, and moderation audit. Only fields in the schema are used; no calculated or extraneous properties appear in the request or response.","description":"This endpoint creates a new snapshot for a specified comment, capturing the content and metadata as required by moderation, rollback, and audit workflows. Only the fields defined in the discussionboard_comment_snapshots model may be set/used. Required fields: discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, snapshot_created_at. No references to fields outside the schema are made. The endpoint may be used by members when editing their comments, or by moderators/admins for moderation purposes.","summary":"Creates a new comment snapshot (discussionboard_comment_snapshots table).","parameters":[],"requestBody":{"description":"Information required to create a comment snapshot","typeName":"IDiscussionboardCommentSnapshot.ICreate"},"responseBody":{"description":"The created comment snapshot entity","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRole":"member","name":"create","path":"/discussionboard/commentSnapshots","method":"post"},{"specification":"Retrieves a paginated, searchable list of discussionboard_comment_snapshots. This enables audit, moderation, or chronological review of all comment snapshots. Supports filtering, pagination, and sorting via request body. Only schema fields are referenced.","description":"This endpoint fetches a list of comment snapshots fulfilling search, filter, or pagination criteria. All request and response properties correspond exactly to fields in the discussionboard_comment_snapshots table. Example use cases include moderation review, displaying edit history to users, or compliance auditing. No fields are referenced that do not exist in the schema. Pagination and sorting logic rely on request body spec.","summary":"Retrieves a paginated/searchable list of comment snapshots (discussionboard_comment_snapshots table).","parameters":[],"requestBody":{"description":"Search and pagination parameters for comment snapshots","typeName":"IDiscussionboardCommentSnapshot.IRequest"},"responseBody":{"description":"Paginated list of comment snapshots","typeName":"IPageIDiscussionboardCommentSnapshot"},"authorizationRole":"member","name":"index","path":"/discussionboard/commentSnapshots","method":"patch"},{"specification":"Retrieves a single discussionboard_comment_snapshots entity by its unique id. This operation is typically used to fetch a versioned comment for review, rollback, or audit purposes. The id must refer to an existing snapshot.","description":"This endpoint returns the details for one comment snapshot, identified by id. The response includes only fields defined in the discussionboard_comment_snapshots table: id, discussionboard_comment_id, discussionboard_member_id, discussionboard_post_id, body, version, snapshot_created_at. No extraneous fields or non-schema data are exposed. Used by members, moderators, or admins to view comment edit history.","summary":"Fetches a comment snapshot by id (discussionboard_comment_snapshots table).","parameters":[{"name":"id","description":"Unique identifier for the comment snapshot entity","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment snapshot entity","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRole":"member","name":"at","path":"/discussionboard/commentSnapshots/{id}","method":"get"},{"specification":"Updates an existing discussionboard_comment_snapshots entity, identified by id. Permits updating mutable fields as allowed by the schema. Immutable properties (such as version or snapshot_created_at) may not be changed if schema/business rules prohibit. Only references to schema-defined fields; all updates validated against the actual schema.","description":"This endpoint allows updates to schema-allowed fields for a comment snapshot by id. Commonly used in error correction or administrative rectification workflows. Only editable fields in the discussionboard_comment_snapshots schema are modifiable. Returns the updated comment snapshot or an error if fields are immutable per schema or if the id does not exist. No extraneous or non-schema properties can be used. Fails if attempted on immutable fields per schema/business logic.","summary":"Updates a comment snapshot entity by id (discussionboard_comment_snapshots table).","parameters":[{"name":"id","description":"Unique identifier for the comment snapshot entity to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the comment snapshot","typeName":"IDiscussionboardCommentSnapshot.IUpdate"},"responseBody":{"description":"The updated comment snapshot entity","typeName":"IDiscussionboardCommentSnapshot"},"authorizationRole":"member","name":"update","path":"/discussionboard/commentSnapshots/{id}","method":"put"},{"specification":"Deletes a single comment snapshot by unique id. The discussionboard_comment_snapshots entity has no soft delete field, so this operation performs a hard delete, permanently removing the record from the database. No other fields beyond those in the schema are referenced.","description":"This endpoint deletes a comment snapshot entity by id, performing a permanent removal since no soft delete field is present in the discussionboard_comment_snapshots table. Used by members, moderators, or admins for removing erroneous or obsolete snapshot records. Operation is irreversible. No reference to fields outside the schema. Returns status or confirmation.","summary":"Permanently deletes a comment snapshot by id (hard delete, discussionboard_comment_snapshots table).","parameters":[{"name":"id","description":"Unique identifier for the comment snapshot entity to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/discussionboard/commentSnapshots/{id}","method":"delete"},{"specification":"Creates a new vote on a comment, stored as discussionboard_comment_votes entity. Only fields in the schema are allowed (discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at). Used to upvote, downvote, or change vote on comments. No extraneous or non-schema fields.","description":"This endpoint creates a new vote for a comment. Request must specify required fields exactly matching those in the discussionboard_comment_votes schema. Typically used by members to upvote or downvote a comment; also supports changing/removing votes. If the same member has already voted on this comment, a unique constraint violation will occur. No references to non-schema fields are made.","summary":"Creates a new comment vote (discussionboard_comment_votes table).","parameters":[],"requestBody":{"description":"Creates a new comment vote with required fields","typeName":"IDiscussionboardCommentVote.ICreate"},"responseBody":{"description":"Newly created comment vote entity","typeName":"IDiscussionboardCommentVote"},"authorizationRole":"member","name":"create","path":"/discussionboard/commentVotes","method":"post"},{"specification":"Retrieves paginated, searchable list of comment vote records (discussionboard_comment_votes). Allows filtering, search, and pagination with request body. Every field in request/response maps exactly to the schema. Useful for analytics and audit workflows.","description":"This endpoint returns a list of comment vote records that match the provided search, filter, or pagination parameters. All parameters correspond to fields in the discussionboard_comment_votes table. Typical use cases: reviewing vote history for moderation, generating analytics, user personal vote history. Only schema-defined properties may be used or returned.","summary":"Fetches a paginated/searchable list of comment votes (discussionboard_comment_votes table).","parameters":[],"requestBody":{"description":"Search and pagination rules for comment votes","typeName":"IDiscussionboardCommentVote.IRequest"},"responseBody":{"description":"Paginated list of comment votes","typeName":"IPageIDiscussionboardCommentVote"},"authorizationRole":"member","name":"index","path":"/discussionboard/commentVotes","method":"patch"},{"specification":"Fetches a single comment vote by its id from the discussionboard_comment_votes table. Returns all schema-defined fields for this entity. Does not reference fields not present in the model.","description":"This endpoint returns details for a comment vote specified by id. All properties in the response correspond 1:1 to fields in the discussionboard_comment_votes table: id, discussionboard_comment_id, discussionboard_member_id, vote_type, created_at, updated_at. Intended for use by members, moderators, or administrators for audit, personal vote review, or analytics. No extraneous or non-schema properties are used.","summary":"Fetches a comment vote record by id (discussionboard_comment_votes table).","parameters":[{"name":"id","description":"Unique identifier for the comment vote entity","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment vote entity with all schema-defined fields","typeName":"IDiscussionboardCommentVote"},"authorizationRole":"member","name":"at","path":"/discussionboard/commentVotes/{id}","method":"get"},{"specification":"Updates an existing comment vote in the discussionboard_comment_votes table, specified by id. Allows updating only schema-permitted fields. All parameter/response mapping is strictly to schema; immutable fields are not updatable. Only schema-defined fields are referenced; update fails if attempted on immutable/non-existent fields.","description":"This endpoint enables allowed updates to a comment vote record by id. Editable fields are limited to those non-immutable in the discussionboard_comment_votes schema (likely only vote_type and updated_at, per version control). Typically used by members to change their vote. No reference to non-schema fields. Returns the updated entity or error if not found or update not permitted.","summary":"Updates a comment vote by id (discussionboard_comment_votes table).","parameters":[{"name":"id","description":"Unique identifier for the comment vote entity to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the comment vote record","typeName":"IDiscussionboardCommentVote.IUpdate"},"responseBody":{"description":"Updated comment vote entity","typeName":"IDiscussionboardCommentVote"},"authorizationRole":"member","name":"update","path":"/discussionboard/commentVotes/{id}","method":"put"},{"specification":"Deletes a comment vote entity from the discussionboard_comment_votes table by unique id. No soft delete field present; hard delete only. Irreversible removal; only fields defined in the schema are referenced.","description":"This endpoint deletes one comment vote record matching the id, permanently removing it from the database. No soft-delete or archived status possible since the schema lacks a soft delete field. Only schema fields referenced. Operation cannot be undone. Intended for user-requested vote removal, moderation cleanup, or error correction.","summary":"Permanently deletes a comment vote record by id (hard delete, discussionboard_comment_votes table).","parameters":[{"name":"id","description":"Unique identifier for the comment vote entity to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/discussionboard/commentVotes/{id}","method":"delete"},{"specification":"Creates a new report for a comment, storing the entity as discussionboard_comment_reports. Only supports fields in the schema: discussionboard_comment_id, discussionboard_member_id, discussionboard_report_type_id, reason, created_at. There is a unique constraint on (comment_id, member_id, report_type_id). No extraneous or non-schema fields permitted. Used for user reporting inappropriate, abusive, or spam comments; triggers moderation workflow.","description":"This endpoint enables a member to file a report against a specific comment for a reason. All fields required by the discussionboard_comment_reports schema must be included, with exact matches to existing fields. On duplicate (unique constraint violation), an error is returned. Typical use: report abuse, spam, or other infractions for moderation review. All references and logic strictly follow the schema and business requirements; no invented fields or behaviors.","summary":"Creates a new comment report (discussionboard_comment_reports table).","parameters":[],"requestBody":{"description":"Information for reporting a comment","typeName":"IDiscussionboardCommentReport.ICreate"},"responseBody":{"description":"Newly created comment report entity","typeName":"IDiscussionboardCommentReport"},"authorizationRole":"member","name":"create","path":"/discussionboard/commentReports","method":"post"},{"specification":"This operation retrieves a paginated, filterable, and sortable list of comment report records in the discussion board moderation system, as defined by the discussionboard_comment_reports table. Each comment report records a single instance of a member formally reporting a comment for a certain reason and is referenced by moderators and admins in the moderation process. This endpoint supports advanced queries, including searching by member, comment, report type, and time, helping moderators discover recent or high-priority issues for review. It is vital for monitoring patterns of abuse, assessing member participation in moderation, and providing audit trails per compliance requirements. No fields outside those explicitly documented in the Prisma schema are referenced. The results include all persisted atomic attributes for each comment report.","description":"Retrieves a list of all comment report records located in the discussionboard_comment_reports table for the moderation domain of the discussion board system.\n\nThis operation supports advanced searching, filtering, and pagination capabilities, including options to filter by discussionboard_comment_id (the comment targeted by the report), discussionboard_member_id (the reporting member), discussionboard_report_type_id (the report category), created_at (date/time of report), and the reason (freeform text explanation supplied by the reporter). All retrieved records are strictly atomic, matching the column-level documentation in the Prisma schema, and no fields are omitted or fabricated.\n\nSecurity and user permissions are determined by the user's role with access typically restricted to moderators and admins, as outlined in business rules and the Roles & Permissions Matrix. Results must be paginated to avoid excessive load or leaking large volumes of moderation-related data, and error handling must follow platform audit and compliance requirements.","summary":"Retrieve a paginated, filterable list of discussionboard_comment_reports (comment moderation/reporting records).","parameters":[],"requestBody":{"description":"Search, filter, and pagination instructions for retrieving comment report records from the discussionboard_comment_reports table.","typeName":"IDiscussionboardCommentReport.IRequest"},"responseBody":{"description":"A paginated set of comment report records from the discussionboard_comment_reports table, accompanied by pagination metadata and filters used.","typeName":"IPageIDiscussionboardCommentReport"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/commentReports","method":"patch"},{"specification":"This operation retrieves a single comment report record for moderation or audit, using its unique identifier. The comment report, located in discussionboard_comment_reports, is atomic: it records which comment was reported, by which member, for which report type, the textual reason, and exactly when. Data fidelity is strictly enforced by returning only schema-defined columns. The endpoint assists moderators/admins in reviewing the details of a specific moderation report for comment content, including contextual data for decisions or escalation.","description":"Fetch details of a single comment report record from the discussionboard_comment_reports table, identified by its id (UUID primary key).\n\nReturns the full schema-defined content of the record, including the unique id, discussionboard_comment_id referencing the targeted comment, discussionboard_member_id for the reporting member, discussionboard_report_type_id for report category, reason (textual explanation), and created_at timestamp. No extra fields nor derived content are returned, only atomic columns present in the table.\n\nAccess restricted to moderators and admins. Handles not Found cases per audit requirements; denies access when unauthorized. Strictly references only direct Prisma schema fields.","summary":"Retrieve the full details of a single comment moderation/reporting record (discussionboard_comment_reports) by UUID id.","parameters":[{"name":"id","description":"Unique UUID identifier of the comment report record (discussionboard_comment_reports.id) to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single comment report record from the discussionboard_comment_reports table, expressed in atomic column format.","typeName":"IDiscussionboardCommentReport"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/commentReports/{id}","method":"get"},{"specification":"This operation updates (edits) an existing comment report record in the discussionboard_comment_reports table. A comment report records a user-stated rationale for reporting a comment and is referenced in moderation workflows. This endpoint allows authorized staff (typically moderators/admins) to change allowed fields—most likely for correcting a report reason (rationale) or reassigning it to another report type if incorrectly classified. All field edits are directly mapped to table columns and must not reference any fields not present in the Prisma schema. Any edit is logged for audit compliance.","description":"Update allowed mutable fields on a comment report record in the discussionboard_comment_reports moderation table. Typical usage is to amend/correct the report's rationale (reason) or adjust the report type classification, supporting moderation workflows where reporter intent or categorization was mistaken.\n\nRequest body must specify the id (UUID PK) and new values for mutable fields, strictly as permitted by the Prisma schema (e.g., reason, discussionboard_report_type_id), and cannot edit immutable columns (created_at, etc). Operation is restricted to users with moderator/admin privileges. On success, returns the updated record; errors on not found/unauthorized or forbidden field change attempts. All changes are audited.","summary":"Update permitted fields (e.g., reason, report type) for a single comment report record in discussionboard_comment_reports.","parameters":[{"name":"id","description":"Unique UUID identifier of the comment report record (discussionboard_comment_reports.id) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update (e.g., reason, report type id) in the comment report.","typeName":"IDiscussionboardCommentReport.IUpdate"},"responseBody":{"description":"The updated comment report record after permitted changes.","typeName":"IDiscussionboardCommentReport"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/commentReports/{id}","method":"put"},{"specification":"This operation deletes a comment report record from the discussionboard_comment_reports table. The entity contains no soft deletion or deleted_at fields; thus, this is a hard delete, permanently removing the report from the database. Per audit/compliance requirements, only authorized moderators/admins can invoke this endpoint, and all such deletions must be logged. Attempting to delete a non-existing record or when unauthorized will produce an appropriate error or access denial.","description":"Delete a comment report record from the discussionboard_comment_reports table, directly referenced by its id (UUID primary key). As the schema defines no soft deletion (no deleted_at or similar column), this operation executes a hard delete, permanently erasing the row.\n\nOnly accessible to users with moderator/admin privileges. Deletions are logged for audit trail and compliance. Errors reported if the report is not found, or if access is denied, with strict field referencing as per schema.","summary":"Hard delete a comment moderation report record (discussionboard_comment_reports) by UUID id (no soft delete possible).","parameters":[{"name":"id","description":"UUID primary key of the comment report record to delete (discussionboard_comment_reports.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/commentReports/{id}","method":"delete"},{"specification":"This operation creates a new generalized moderation report record in the discussionboard_reports table. A report records a member's request for intervention regarding an object they believe violates platform policy (targeting posts, comments, or users). The endpoint accepts all required atomic fields only (see schema), enforcing member authentication, audit, and referencing only table columns (no fabricated fields). On success, the new incident/report is persisted with exact schema fidelity and returned; validations and compliance (e.g., one-per-object/member/type) enforced by database constraints and business rules.","description":"Create a new moderation report record in the discussionboard_reports table, assigning it to the reporting member, specifying the report type, and indicating the object and type being reported (post, comment, or member).\n\nThe request must provide all required fields as per the Prisma schema: discussionboard_report_type_id (report type), reporting_member_id (who reports), target_object_id (UUID), target_object_type (string), optional report_description (further explanation), and reported_at (timestamp). No fields outside the schema are recorded. Request is denied if constraints (unique per-object/member/type, etc) are violated or unauthorized access is attempted. On success, the record is returned with all direct schema columns set.","summary":"Create a new moderation report record (discussionboard_reports) regarding a content object or user.","parameters":[],"requestBody":{"description":"New report details (required as per schema) for discussionboard_reports table entry.","typeName":"IDiscussionboardReport.ICreate"},"responseBody":{"description":"The newly created moderation report record from discussionboard_reports table.","typeName":"IDiscussionboardReport"},"authorizationRole":"member","name":"create","path":"/discussionboard/reports","method":"post"},{"specification":"This operation retrieves a paginated, filterable, and sortable list of general moderation reports from the discussionboard_reports table. Each record is an atomic instance of a member reporting a post, comment, or member, in accordance with moderation and escalation flows. Endpoints support searching, filtering, and ordering by any schema column—especially by target type, member, report type, report date, and reason. No data is returned except direct schema columns. Results are paginated for performance and security.","description":"Retrieve a paginated list of moderation report records from the discussionboard_reports table, with support for searching, filtering, and sorting by direct schema columns such as reporting_member_id, report type, target_object_id (UUID), target_object_type (string), reported_at (date/time), and report_description (optional text explanation).\n\nOnly direct schema fields are returned; no denormalized or calculated information is present. Access typically restricted to moderators/admins, as dictated by platform security model, and all requests/audits are logged for compliance. Pagination is enforced to avoid excessive data volume and maintain privacy/security. Filtering is applied using only permissible schema-based fields. No off-schema attributes referenced.","summary":"Retrieve a paginated, filterable list of general moderation report records (discussionboard_reports).","parameters":[],"requestBody":{"description":"Search, filter, and pagination settings for retrieval from discussionboard_reports table.","typeName":"IDiscussionboardReport.IRequest"},"responseBody":{"description":"A paginated set of general moderation report records from the discussionboard_reports table, including pagination and filter metadata.","typeName":"IPageIDiscussionboardReport"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/reports","method":"patch"},{"specification":"This operation retrieves the atomic detail for a single moderation report record by UUID id from the discussionboard_reports table. The data returned is strictly composed of direct schema-based columns: report id, report type id, reporting member id, target object id/type, report description, and reported_at. Used by moderation workflow for review, escalation, or audit logging. Not Found or access errors are clearly handled per security and compliance rules.","description":"Fetch the schema-defined details of a single general moderation report record from discussionboard_reports table, referenced by its UUID id (primary key).\n\nReturns all atomic table columns: id, discussionboard_report_type_id (reason), reporting_member_id (the reporting member), target_object_id (UUID), target_object_type (entity class as string), report_description (optional), reported_at (timestamp). No other or derived information is returned. Typical access restricted to moderators/admins. Not found and permission errors are handled per compliance and audit. Only fields present in schema are referenced.","summary":"Retrieve detailed information for a single moderation report record in discussionboard_reports by id.","parameters":[{"name":"id","description":"UUID primary key from discussionboard_reports.id for the report to fetch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single general moderation report record in atomic table column form.","typeName":"IDiscussionboardReport"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/reports/{id}","method":"get"},{"specification":"This operation updates mutable fields of a single moderation report record in the discussionboard_reports table. Edits may include changes to the report_description (user's detailed explanation), or reassignment of report type if allowed in business logic. Only fields present in the schema are updateable; immutable fields (like reported_at or PK) are not changeable. Operation is available only to authorized moderation/admin roles, with all updates logged for audit/compliance. Changes must follow strict schema mapping—no off-schema fields may be referenced.","description":"Update editable schema fields on a moderation report record (discussionboard_reports), such as report_description or report type. This allows corrections due to user clarification, moderator review, or workflow requirements.\n\nThe input must specify the id (UUID PK) to amend, and the updated field values. No changes are permitted to immutable columns. Changes are logged, and unauthorized access or not found conditions are handled in compliance with platform audit rules.","summary":"Edit modifiable columns (e.g., report_description, report type) for a single moderation report in discussionboard_reports.","parameters":[{"name":"id","description":"UUID identifier for the report to update (discussionboard_reports.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and updated values (must map directly to schema columns) for the moderation report record.","typeName":"IDiscussionboardReport.IUpdate"},"responseBody":{"description":"The updated moderation report record after edit.","typeName":"IDiscussionboardReport"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/reports/{id}","method":"put"},{"specification":"This operation deletes a single report record in the discussionboard_reports table, referenced by id. The Prisma schema for discussionboard_reports does not provide any soft delete or deleted_at column. Thus, the operation performs a hard delete: it permanently removes the report from the database with no recoverability. All deletions must be invoked by users with moderation or admin role privileges, and such actions are logged for audit and compliance per business requirements.","description":"Permanently remove a moderation report record from the discussionboard_reports table, identified by its unique id (UUID PK).\n\nAs no soft deletion or deleted_at field is present in the schema, this action deletes the record outright. This endpoint is normally restricted to users with 'moderator' or 'admin' roles, and such actions must be logged per compliance rules. Returns success or appropriate error if record not found or unauthorized. All responses strictly reference schema-defined fields.","summary":"Delete (hard delete) a single discussionboard_reports record by id (no soft delete possible).","parameters":[{"name":"id","description":"Unique UUID identifier of the report record to remove (discussionboard_reports.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/reports/{id}","method":"delete"},{"specification":"This operation creates a new report type entry in the discussionboard_report_types table, the registry of valid moderation report categories (e.g., 'spam', 'abuse', etc). Report types have atomic, schema-defined columns: code, display_name, description (optional), active status (boolean), and created_at. Data provided must map strictly to the table columns. On creation, a new type is immediately available for user or moderator reporting workflows using this category. Access restricted to admins.","description":"Create a new report type record in the discussionboard_report_types table, specifying a unique code (short string), user-visible display_name, optional description, active status flag, and created_at timestamp (all per direct schema documentation). \n\nThis enables new, altered, or disabled moderation categories. Only actual columns from the schema are permitted; on success, returns the newly created row. Operation is restricted to users with admin role, to prevent untrusted expansion of reportable types. Errors follow uniqueness or constraint violations documented in schema.","summary":"Create a new moderation report type record (discussionboard_report_types) for categorizing reports.","parameters":[],"requestBody":{"description":"Report type details (code, display_name, optional description, active status) for creation.","typeName":"IDiscussionboardReportType.ICreate"},"responseBody":{"description":"The new moderation report type record as persisted in the discussionboard_report_types table.","typeName":"IDiscussionboardReportType"},"authorizationRole":"admin","name":"create","path":"/discussionboard/reportTypes","method":"post"},{"specification":"This operation returns a paginated, filterable, and sortable list of all moderation report type records in the discussionboard_report_types table. Each entry includes atomic attributes: id, code, display_name, description (optional), active status, created_at. Searching and sorting are based on these columns only. The endpoint supports admin configuration, analytics, and moderation dashboard browsing of current and historic moderation reason categories. Output and searching is strictly limited to schema fields—no derived, hidden, or opaque values are returned.","description":"Fetch a paginated list of moderation report type records from the discussionboard_report_types table, supporting search and filter on schema properties: code (string, unique), display_name (user label), description (optional), active status flag, creation timestamp (created_at).\n\nAll fields map directly to those in the Prisma schema with no hidden or derived data. Paging metadata is included to support UI and dashboard use cases, and all security and privacy rules as outlined in the requirements must be enforced. Typical use by admins and/or moderation staff. Errors for access or search violations per business logic.","summary":"Retrieve a paginated, filterable list of moderation report types (discussionboard_report_types).","parameters":[],"requestBody":{"description":"Pagination, search, and filter query for report types from discussionboard_report_types table.","typeName":"IDiscussionboardReportType.IRequest"},"responseBody":{"description":"A paginated set of moderation report type records and paging metadata.","typeName":"IPageIDiscussionboardReportType"},"authorizationRole":"admin","name":"index","path":"/discussionboard/reportTypes","method":"patch"},{"specification":"This operation retrieves an individual moderation report type record from the discussionboard_report_types table, referenced by its UUID identifier. The returned data is atomic (one row, all columns) and used for configuration, moderation dashboard context, or analytics research. Returned fields are strictly limited to those directly mapped in the schema: id, code, display_name, description, active flag, created_at, etc. Only actual columns returned—no hidden, derived, or virtual properties are included.","description":"Retrieve details for a single moderation report type record from discussionboard_report_types, referenced by its primary key (UUID id). Returns all atomic properties as mapped in the schema: id, code, display_name, description (optional), active (boolean), created_at, etc. No non-schema fields are returned.\n\nUsed for review, analytics, and moderation dashboard workflows. Access is typically limited to admin or privileged moderation roles, as per platform security rules. Handles errors for not found or unauthorized situations in strict accordance with compliance/audit protocols.","summary":"Retrieve full details of a single moderation report type entry (discussionboard_report_types) by id.","parameters":[{"name":"id","description":"UUID identifier of the moderation report type to fetch (discussionboard_report_types.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A single moderation report type record in schema-atomic column format.","typeName":"IDiscussionboardReportType"},"authorizationRole":"admin","name":"at","path":"/discussionboard/reportTypes/{id}","method":"get"},{"specification":"Update a report type in the discussionboard_report_types table. Only fields actually present in the schema may be referenced: code (unique), display_name, description, active, and created_at. Do not reference non-existent fields. The operation updates details such as the code, display name, description, or active status for a specific report type identified by its ID. This is typically done by an admin user to change the available types of reports users can submit for moderation (e.g., adding or deactivating a type such as 'abuse', 'spam', etc.). Audit and compliance rely on the presence of code and display_name fields. The operation must fail if the given id does not correspond to an existing report type. No soft delete field is present: this operation cannot be used for deletion, but can set 'active' to false to deactivate a report type.","description":"This API updates the details of an existing report type in the discussionboard_report_types table. Only the fields code, display_name, description, and active (indicating if selectable) can be modified as these are present in the schema. This endpoint allows administrative users to edit the classification and visibility of moderation report types available to members for reporting content (e.g., abusing, misinformation). The report type is uniquely identified by its ID. The updating user must ensure that the code remains unique and display_name is clear. No non-existent fields may be referenced. Changes to the report type affect what options users see when reporting. The created_at timestamp is not editable.\n\nSecurity: Only admin privileges should be allowed to perform this operation. Changes must be audit logged for compliance.\n\nValidation: Fail if id not found or new code is not unique.\n\nRelated endpoints: DELETE on the same resource for permanent removal, PATCH/POST for adding or listing report types.","summary":"Update a report type (discussionboard_report_types table) by id.","parameters":[{"name":"id","description":"The unique identifier of the report type to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new fields for updating the report type. Only code, display_name, description, and active may be changed.","typeName":"IDiscussionboardReportType.IUpdate"},"responseBody":{"description":"The updated report type resource after modification.","typeName":"IDiscussionboardReportType"},"authorizationRole":"admin","name":"update","path":"/discussionboard/reportTypes/{id}","method":"put"},{"specification":"Permanently delete a report type from the discussionboard_report_types table. The schema does NOT include a soft delete field, so this deletes the record fully and irreversibly from the database. This operation is reserved strictly for administrative users, and should only be performed if the report type is no longer needed for the platform. Audit log entries should be created as per compliance requirements, since removal is destructive. The operation targets a single report type identified by its unique ID.","description":"This endpoint deletes a report type resource from the discussionboard_report_types table by its ID, performing a hard delete since no soft delete column exists. Only admins can call this endpoint. Upon deletion, the report type will be completely removed and will not appear in reporting options going forward. Any attempt to delete a non-existent id must result in a suitable error message. Audit/compliance logs should record who deleted the type and when. Deletion may fail if other records with a foreign key reference this type unless cascading is enabled in the database schema.\n\nThis action is irreversible and must be used with caution. All fields referenced must exist in the schema. No soft deletion is available for this entity.\n\nRelated endpoints: PUT (for updating report type), PATCH/POST (for listing/creating report types).","summary":"Permanently delete a report type by id (discussionboard_report_types table).","parameters":[{"name":"id","description":"The unique identifier of the report type to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/reportTypes/{id}","method":"delete"},{"specification":"Create a new moderation action in the discussionboard_moderation_actions table. All referenced fields must exist in the schema: report_id (nullable), acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at. This is typically called when a moderator or admin takes an action in response to a user report or proactive review. The acting_moderator_id must reference a valid moderator, and report_id is nullable if the action is not triggered by a report. The endpoint records the type of moderation activity (e.g., 'warn', 'delete', 'edit'), the object moderated, rationale for the action, and the actor. Returns the full moderation action resource after creation.","description":"This API endpoint allows creation of a new moderation action entry in the discussionboard_moderation_actions table. Moderation actions record interventions by moderators and admins, such as content deletion, user banning, warning issuance, or editing posts/comments. The caller must provide acting_moderator_id (identifying the moderator/admin who performed the action), target_object_id (the object being moderated), target_object_type (e.g., 'post', 'comment'), action_type (type of action, such as 'delete' or 'warn'), rationale (the justification for the action), and actioned_at (timestamp). The optional report_id can be provided if the action is in response to a user report; otherwise, it may be null. No non-schema fields may be referenced. On success, the created moderation action is returned.\n\nSecurity: Only authenticated moderators or admins may perform moderation actions.\n\nValidation: actor, target, and (optional) report references must correspond to existing records where applicable.\n\nRelated endpoints: PATCH for searching moderation actions, GET/PUT/DELETE on an action by id.","summary":"Create a new moderation action (discussionboard_moderation_actions table).","parameters":[],"requestBody":{"description":"The moderation action details to create. All fields must exist in schema: report_id (nullable), acting_moderator_id, target_object_id, target_object_type, action_type, rationale, and actioned_at.","typeName":"IDiscussionboardModerationAction.ICreate"},"responseBody":{"description":"The moderation action resource after creation.","typeName":"IDiscussionboardModerationAction"},"authorizationRole":"moderator","name":"create","path":"/discussionboard/moderationActions","method":"post"},{"specification":"Search and list moderation actions from the discussionboard_moderation_actions table, possibly with filters such as acting_moderator_id, target_object_type, action_type, and date ranges. All referenced fields must exist in the schema. The result should be paginated and can include search/sort parameters based on query data. This endpoint is typically used by moderators and admins to review historic moderation activities for compliance and audit review.","description":"This endpoint returns a paginated list of moderation actions from the discussionboard_moderation_actions table. Optional filters can include acting moderator, action type, target object type, and date ranges, all of which directly map to schema fields: acting_moderator_id, target_object_type, action_type, actioned_at, and possibly report_id. The data returned provides insight into moderation history for purposes such as transparency, compliance, and workflow review. Sorting and pagination parameters can be included in the request body.\n\nSecurity: Only accessible to moderators and admins for audit purposes.\n\nValidation: Filters must only reference fields that exist in schema.\n\nRelated endpoints: POST (creation), GET/PUT/DELETE by id (detail/update/removal).","summary":"List/search moderation actions (discussionboard_moderation_actions table).","parameters":[],"requestBody":{"description":"Search parameters for listing moderation actions. Only schema fields acting_moderator_id, target_object_type, action_type, actioned_at, and report_id may be referenced.","typeName":"IDiscussionboardModerationAction.IRequest"},"responseBody":{"description":"Paginated moderation action search result set.","typeName":"IPageIDiscussionboardModerationAction"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/moderationActions","method":"patch"},{"specification":"Get a single moderation action by its id from the discussionboard_moderation_actions table. Only fields present in the schema may be referenced (acting_moderator_id, target_object_id, target_object_type, action_type, rationale, actioned_at, report_id). Returns the moderation action record for audit, workflow, or review purposes. If the id does not exist, return a not found error. Only authorized moderators or admins can access this endpoint.","description":"Retrieves a specific moderation action resource, as identified by its unique id, from the discussionboard_moderation_actions table. Exposes only fields that exist in the schema. This endpoint is used for transparency, audit trails, workflow reviews, and appeals processes. If the resource is not found, an error is returned. Only accessible to authenticated moderators or admins.\n\nRelated endpoints: PUT (for updating), DELETE (for removal), PATCH/POST (for searching/creating).","summary":"Get detailed info for a moderation action by id (discussionboard_moderation_actions table).","parameters":[{"name":"id","description":"The unique identifier of the moderation action to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The moderation action resource.","typeName":"IDiscussionboardModerationAction"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/moderationActions/{id}","method":"get"},{"specification":"Update an existing moderation action record in the discussionboard_moderation_actions table by id. All referenced fields must exist in schema: acting_moderator_id, target_object_id, target_object_type, action_type, rationale, actioned_at, and report_id (nullable). This may be used to correct errors, supplement rationale, or modify action details for compliance or appeals processing. Only authorized moderators or admins are allowed to update actions. Returns the modified moderation action resource.","description":"Updates the details of a specific moderation action in the discussionboard_moderation_actions table, identified by its id. Only schema-defined fields may be referenced: acting_moderator_id, target_object_id, target_object_type, action_type, rationale, report_id (nullable), and actioned_at. This may be called to correct or supplement an action for workflow, audit, or compliance purposes. Must return not found if resource does not exist, and only accept changes to actual schema fields. Security: Restricted to authenticated moderators or admins. All updates should be logged for audit.\n\nRelated endpoints: GET (details), DELETE (removal), PATCH/POST (search/creation).","summary":"Update a moderation action by id (discussionboard_moderation_actions table).","parameters":[{"name":"id","description":"The unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new moderation action fields to set. Update only schema fields: acting_moderator_id, target_object_id, target_object_type, action_type, rationale, report_id (nullable), and actioned_at.","typeName":"IDiscussionboardModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action resource.","typeName":"IDiscussionboardModerationAction"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/moderationActions/{id}","method":"put"},{"specification":"Permanently delete a moderation action record from the discussionboard_moderation_actions table. The schema has no soft delete field, so this operation fully erases the record from the database. This action should be performed only by authorized moderators or admins and is irreversible. Audit log entries should track the actor, time, and rationale for deletion. The action targets a single moderation action identified by id.","description":"Deletes a specific moderation action resource from the discussionboard_moderation_actions table, by unique id. As no soft delete functionality exists in schema, this action permanently removes the record. This should be used with caution for compliance or error correction purposes. If references elsewhere rely on this action, referential integrity must be checked at the DB level. Only authenticated moderators or admins may call this endpoint. Not found errors are returned for missing id. Audit logging should capture the deletion.\n\nRelated endpoints: GET/PUT (details, updates), PATCH/POST (list, create moderation actions).","summary":"Permanently delete a moderation action by id (discussionboard_moderation_actions table).","parameters":[{"name":"id","description":"The unique identifier of the moderation action to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/moderationActions/{id}","method":"delete"},{"specification":"Create a new ban record in the discussionboard_bans table. All referenced fields must exist in schema: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). This is typically used to implement a ban or suspension as a result of moderation workflows. The entity supports both temporary and permanent bans.","description":"This API endpoint creates a new ban record in the discussionboard_bans table, used for enforcing member bans or suspensions. All referenced fields are present in schema: banned_member_id (the user being banned), acting_moderator_id (the moderator/admin performing the ban), report_id (nullable; can be set if ban is triggered by a report), reason, ban_type (such as 'temporary' or 'permanent'), banned_at (ban start date), and expires_at (end date, if temporary; nullable for permanent bans). Only authenticated moderators or admins may impose bans. Upon creation, the new ban is returned.\n\nAudit: All bans should be logged with rationale for compliance.\n\nValidation: References must correspond to valid records where applicable. Related endpoints are PATCH (for searching bans), GET/PUT/DELETE by id (to update/view/remove bans).","summary":"Create a new member ban (discussionboard_bans table).","parameters":[],"requestBody":{"description":"New ban details for creation. All fields must exist in schema: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable).","typeName":"IDiscussionboardBan.ICreate"},"responseBody":{"description":"The new ban resource after creation.","typeName":"IDiscussionboardBan"},"authorizationRole":"moderator","name":"create","path":"/discussionboard/bans","method":"post"},{"specification":"Search/list bans from the discussionboard_bans table, supporting optional filtering based on schema fields: banned_member_id, acting_moderator_id, report_id, ban_type, banned_at, expires_at, and reason. Returns a paginated set of ban records matching the query. Only authorized moderators or admins can use this endpoint, primarily for moderation audit and ban management workflows.","description":"Lists bans from the discussionboard_bans table, supporting optional filters for banned_member_id, acting_moderator_id, report_id, ban_type, banned_at, expires_at, and reason, all of which are fields defined in the schema. The operation returns a paginated list result for use in ban management, audit review, and appeals processing. Filtering and sort/pagination parameters are supported via the request body. Only accessible to moderators/admins for compliance and operational oversight.","summary":"Search/list bans (discussionboard_bans table).","parameters":[],"requestBody":{"description":"Search and pagination parameters. Only schema fields banned_member_id, acting_moderator_id, report_id, ban_type, banned_at, expires_at, and reason may be referenced.","typeName":"IDiscussionboardBan.IRequest"},"responseBody":{"description":"Paginated ban result set.","typeName":"IPageIDiscussionboardBan"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/bans","method":"patch"},{"specification":"Retrieve a ban record by id from the discussionboard_bans table. Only schema fields can be referenced: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). Returns full ban details for appeals, review, or appeal management. Not found is returned for missing id. This endpoint is for authenticated moderators or admins.","description":"Fetch the details of a specific ban record by id in the discussionboard_bans table. References only the fields present in schema: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). Returns the ban resource for use in compliance review, audit, appeal management, or workflow automation. Access is restricted to moderators/admins. Not found errors are returned for missing id values.\n\nRelated endpoints: PUT (update), DELETE (remove), PATCH/POST (list/create bans).","summary":"Retrieve ban details by id (discussionboard_bans table).","parameters":[{"name":"id","description":"The unique identifier of the ban record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The ban record resource.","typeName":"IDiscussionboardBan"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/bans/{id}","method":"get"},{"specification":"Update an existing ban record in the discussionboard_bans table by id. All fields must exist in the schema: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). This endpoint is used for appeals processing, workflow corrections, or compliance updates by moderators/admins. The updated resource is returned. Returns error if record is not found.","description":"Update the details of a specific ban record by id in the discussionboard_bans table (identified by id parameter). Only schema-defined fields may be referenced: banned_member_id, acting_moderator_id, report_id (nullable), reason, ban_type, banned_at, expires_at (nullable). May be used in result of an appeal, error correction, or administrative workflow. Returns the updated ban resource, or a not found error if id is invalid. Only accessible to moderators or admins.","summary":"Update a ban record by id (discussionboard_bans table).","parameters":[{"name":"id","description":"The unique identifier of the ban record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new details to set in the ban record. Only schema fields defined for discussionboard_bans may be updated.","typeName":"IDiscussionboardBan.IUpdate"},"responseBody":{"description":"The updated ban resource after modification.","typeName":"IDiscussionboardBan"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/bans/{id}","method":"put"},{"specification":"Permanently delete a ban record from the discussionboard_bans table. No soft delete field exists in schema, so this is a hard delete and irreversibly removes the record. Can only be performed by authorized moderators or admins. The operation targets a single ban by id, and should return not found if record does not exist. Deletion actions should be audit logged for compliance.","description":"Delete an individual ban record from the discussionboard_bans table by its id. The schema does not provide a soft delete mechanism, so this delete operation is irreversible. This action must be performed by an authenticated moderator or admin, and responsibly logged for compliance. The operation must handle not found errors as appropriate, and only delete if no referential integrity issues prevent the operation. Related endpoints are GET/PUT (for retrieval and update), PATCH/POST (for search and creation).","summary":"Permanently delete a ban by id (discussionboard_bans table).","parameters":[{"name":"id","description":"The unique identifier of the ban record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","name":"erase","path":"/discussionboard/bans/{id}","method":"delete"},{"specification":"Create a warning record for a member. This operation allows a moderator or admin to issue an official warning to a member, recording the warning event in the 'discussionboard_warnings' table. Each warning record contains: a unique warning ID, the warned member's ID (warned_member_id), the acting moderator or admin's ID (acting_moderator_id), an optional originating report ID (report_id), a reason string, and the timestamp the warning was applied (warned_at). All fields referenced must exist in the schema. There are no soft delete or update-by-authorization fields; only the entities and relationships in the actual schema are referenced. This endpoint is critical for moderation workflows and audit trails.","description":"This endpoint facilitates the issuance of warnings to members on the political/economic discussion board. According to the schema, a warning contains the warned_member_id (the member receiving the warning), acting_moderator_id (the moderator/admin issuing the warning), an optional report_id (referencing the report that triggered the warning), a reason string (explaining the violation or risk), and warned_at (timestamp when the warning was recorded). When a moderator or admin issues a warning, an atomic record is created, complying with moderation escalation business logic (three warnings can lead to a ban as per requirements). The operation enforces audit trail and compliance, and is used in escalation reviews or appeals. It does not support soft delete—warnings, once created, remain as audit artifacts. The only modifiable properties are as defined in the Prisma schema, and only those are accepted in the request body. Cross-table relationships (e.g., acting_moderator_id references moderators/admins) are strictly guaranteed by database-level foreign keys as modeled. Only the fields in the schema are handled here; no extra fields (like created_by, updated_by) are referenced.","summary":"Create a warning record for a member in discussionboard_warnings (moderation escalation/audit trail).","parameters":[],"requestBody":{"description":"Information for creating a new member warning record.","typeName":"IDiscussionboardWarning.ICreate"},"responseBody":{"description":"The newly created warning record.","typeName":"IDiscussionboardWarning"},"authorizationRole":"moderator","name":"create","path":"/discussionboard/warnings","method":"post"},{"specification":"Fetch a paginated and filterable list of warning records from the 'discussionboard_warnings' table. This operation supports searching, sorting, and pagination on fields that exist in the schema—such as warned_member_id, acting_moderator_id, warned_at, report_id, and reason. The endpoint is intended for moderation and admin review dashboards, compliance analytics, and audit history queries. All filters and sorting parameters MUST be on actual schema fields. No fields outside the schema (such as deleted_at or updated_by) are referenced. The response includes a list of warning objects and pagination metadata.","description":"This endpoint provides a means for moderators or admins to search, filter, and review the list of issued warnings on the platform for moderation history, escalation tracking, or compliance auditing. Queryable fields include warned_member_id (who was warned), acting_moderator_id (who issued the warning), report_id (report that led to the warning, if any), reason (violation or issue justifying the warning), and warned_at (timestamp warning was recorded). Supports standard pagination and sorting as per business rules for audit history review. Only schema-defined properties are available for querying or display—no custom or derived fields. No soft or hard delete logic applies: all warnings remain permanently as immutable audit records. Dependencies/relations are resolved according to the relationships modeled in the Prisma schema.","summary":"List/search warnings in discussionboard_warnings (with filter/sort by schema fields only).","parameters":[],"requestBody":{"description":"Search/filter/sort parameters for querying warnings.","typeName":"IDiscussionboardWarning.IRequest"},"responseBody":{"description":"A paginated list of warning records and pagination metadata.","typeName":"IPageIDiscussionboardWarning"},"authorizationRole":"moderator","name":"index","path":"/discussionboard/warnings","method":"patch"},{"specification":"Retrieve details of a single warning record by its unique ID (discussionboard_warnings.id). Returns all properties of the warning according to the schema: id, warned_member_id, acting_moderator_id, report_id, reason, and warned_at. Does not reference any non-existent or derived fields. The result is used in moderation escalation audits and warning appeals workflows.","description":"This endpoint enables moderators or admins to fetch the complete details of an individual warning issued to a member. The warning's unique id (from discussionboard_warnings.id) is required as a path parameter. The returned object includes: id, warned_member_id, acting_moderator_id, report_id (nullable), reason, and warned_at—exactly as modeled in the Prisma schema. This operation supports audit trail verification, investigation of specific disciplinary actions, or as part of ban/appeals workflows. It enforces strict adherence to the schema (no extra or missing fields), supporting consistent moderation tracking.","summary":"Get a single warning by id from discussionboard_warnings.","parameters":[{"name":"id","description":"Unique warning record id (discussionboard_warnings.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The warning record with given id or not found error.","typeName":"IDiscussionboardWarning"},"authorizationRole":"moderator","name":"at","path":"/discussionboard/warnings/{id}","method":"get"},{"specification":"Update a warning record by id. Supports updating fields allowed by schema in discussionboard_warnings: report_id, reason, acting_moderator_id, warned_member_id, and warned_at. Field-level update permissions must comply with business logic, such as only allowing changes by authorized personnel, and only on fields that are not immutable in the context of escalations/audit. No soft delete, updated_by, or similar fields exist. The modification does not physically remove the record; rather, it updates the schema-defined fields as requested.","description":"This endpoint allows a moderator or admin to modify an existing warning's fields, as permitted by escalation business logic. Allowed fields are warned_member_id (member who was warned), acting_moderator_id (issuer), report_id (moderation report reference), reason (violation detail), and warned_at (warning timestamp), all of which exist in the schema and are updatable according to system policy. No other fields may be updated (e.g., there are no 'soft delete' or 'updated_by' fields). All modifications are strictly limited to schema-defined columns and require appropriate authorization. This operation is primarily for correcting or annotating audit history in case of workflow errors or user appeals.","summary":"Update (patch) a warning record by id in discussionboard_warnings (permitted fields only).","parameters":[{"name":"id","description":"Unique warning record id (discussionboard_warnings.id) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Patch information for the warning record (only fields defined in schema).","typeName":"IDiscussionboardWarning.IUpdate"},"responseBody":{"description":"The updated warning record reflecting requested changes.","typeName":"IDiscussionboardWarning"},"authorizationRole":"moderator","name":"update","path":"/discussionboard/warnings/{id}","method":"put"},{"specification":"Delete a warning by id from the discussionboard_warnings table. There is no soft deletion field—once deleted, the record is permanently removed from the database. Use ONLY for compliance with expungement requests or administrative error correction. The operation requires appropriate authorization and confirms deletion via a status or returns not found if the id does not exist. Only schema-defined fields are referenced.","description":"This endpoint deletes a warning record by its unique id (discussionboard_warnings.id). There is NO soft delete mechanism present in the schema: this operation performs a hard delete, permanently removing the record from the database to meet situations such as administrative error correction or compliance with legal erasure requirements. Only authorized personnel should perform this action, and the operation will return a success status or error if the record does not exist. No audit/history is retained in this record after deletion—ensure this complies with business escalation and audit guidelines.","summary":"Delete (hard delete) a warning by id from discussionboard_warnings (no soft delete field exists).","parameters":[{"name":"id","description":"Unique warning record id (discussionboard_warnings.id) to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion (success or not found error).","typeName":"IDeleteConfirmation"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/warnings/{id}","method":"delete"},{"specification":"List/search engagement metrics records for the discussion board. Operates on the discussionboard_engagement_metrics table, supporting filtering, sorting, and pagination by actual schema fields: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count. For use in analytics dashboards and admin/moderator reviews. Only schema fields are referenced; no derived or soft/hard-delete logic exists.","description":"This endpoint returns a paginated, filterable list of engagement metrics, drawing from the discussionboard_engagement_metrics table. Query supports searching or filtering by discussionboard_member_id (user), discussionboard_board_id (board), engagement_date (time window for metric aggregation), and basic statistics like posts_created_count, comments_created_count, and votes_cast_count. No fields outside the schema are referenced. Suitable for analytics dashboards, reporting DAU/WAU, engagement heatmaps, and cohort analysis as stated in requirements. No delete/update logic applies to these records as per schema; each record is atomic for audit/metrics.","summary":"List/search engagement metrics from discussionboard_engagement_metrics (analytics dashboard/backoffice).","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for retrieving engagement metrics.","typeName":"IDiscussionboardEngagementMetric.IRequest"},"responseBody":{"description":"Paginated metrics data and metadata for analytics dashboard.","typeName":"IPageIDiscussionboardEngagementMetric"},"authorizationRole":"admin","name":"index","path":"/discussionboard/engagementMetrics","method":"patch"},{"specification":"Retrieve a specific engagement metric record by id. Operates on the discussionboard_engagement_metrics table, returning all atomic metric fields as modeled in the Prisma schema: id, discussionboard_member_id, discussionboard_board_id, engagement_date, posts_created_count, comments_created_count, votes_cast_count. No non-schema or soft delete fields exist. For use in analytics dashboards and reporting tools.","description":"Fetch detailed information on a single engagement metric entry by its unique id from the discussionboard_engagement_metrics table. The returned record includes: id (unique UUID), discussionboard_member_id (user who engaged), discussionboard_board_id (board engaged on), engagement_date (date of activity measured), posts_created_count, comments_created_count, and votes_cast_count (as raw integers). Only schema-defined properties are returned. For use in building analytics dashboards, verifying metrics, or analyzing user trends. No deletion or update occurs from this endpoint; it is strictly for retrieval.","summary":"Get one engagement metric by id from discussionboard_engagement_metrics.","parameters":[{"name":"id","description":"Unique engagement metric id (discussionboard_engagement_metrics.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The engagement metric record with given id.","typeName":"IDiscussionboardEngagementMetric"},"authorizationRole":"admin","name":"at","path":"/discussionboard/engagementMetrics/{id}","method":"get"},{"specification":"List/search activity log records for platform events. Operates on the discussionboard_activity_logs table, with support for filtering, pagination, and sorting by actual schema fields (id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, event_metadata). The resulting list is used for analytics, anomaly detection, rare journey tracking, and audit workflows. Only schema properties are queried; no soft/hard delete, status fields, or extra info outside the model.","description":"This endpoint enables administrators or analysts to retrieve paginated and filterable event records from the discussionboard_activity_logs table. Query parameters match schema fields: discussionboard_member_id (which member acted), discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id (if applicable), event_timestamp (time/date filter), event_type (type of action performed), and event_metadata (JSON info). Used in dashboards to monitor login/logout, post/comment actions, user visits, bans, role changes. All records are raw, atomic events—never aggregates or derived. No delete, status, or soft/hard-remove logic applies. Only schema fields are filterable and returned.","summary":"Search/list activity logs from discussionboard_activity_logs (system activity/audit/analytics).","parameters":[],"requestBody":{"description":"Filter, pagination, and sorting information for activity log retrieval.","typeName":"IDiscussionboardActivityLog.IRequest"},"responseBody":{"description":"Paginated activity logs with event details and metadata.","typeName":"IPageIDiscussionboardActivityLog"},"authorizationRole":"admin","name":"index","path":"/discussionboard/activityLogs","method":"patch"},{"specification":"Get a single activity log record by id. Looks up the activity log in discussionboard_activity_logs, returning id, discussionboard_member_id, discussionboard_board_id, discussionboard_thread_id, discussionboard_post_id, discussionboard_comment_id, event_timestamp, event_type, and event_metadata. No soft/hard delete or extra fields are referenced. For use in audit review or analysis workflows.","description":"This endpoint provides administrators or analysts with the ability to retrieve a full record of a particular activity log event by its unique id, as stored in discussionboard_activity_logs. The API returns: id, discussionboard_member_id (nullable), discussionboard_board_id (nullable), discussionboard_thread_id (nullable), discussionboard_post_id (nullable), discussionboard_comment_id (nullable), event_timestamp, event_type, and event_metadata (stringified JSON)—all directly corresponding to schema fields. For use in system activity review/audit, or when reconstructing user journeys or incident trails according to analytics and compliance requirements. No status or deletion logic is present in this record.","summary":"Retrieve one activity log by id from discussionboard_activity_logs.","parameters":[{"name":"id","description":"Unique log record id (discussionboard_activity_logs.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event information for the requested activity log record.","typeName":"IDiscussionboardActivityLog"},"authorizationRole":"admin","name":"at","path":"/discussionboard/activityLogs/{id}","method":"get"},{"specification":"List/search trending topic records for the discussion board, based on the discussionboard_trending_topics table. Supports filtering, pagination, and sorting on schema fields: id, discussionboard_thread_id, discussionboard_board_id, ranking_period_date, trending_score. Used in analytics dashboards, trending topic visualizations, and moderation support. No non-schema or delete/status fields included in request or response.","description":"This endpoint allows administrators and analytics dashboards to retrieve a paginated, filterable list of trending topics (threads) on the discussion board. Filter criteria and sort options are available for: discussionboard_thread_id (topic), discussionboard_board_id (board), ranking_period_date (date/time rank calculated), and trending_score (quantitative score driving the ranking). The results reflect atomic rows in the discussionboard_trending_topics table, strictly as modeled. No delete/status fields or derived values are included. Perfect for daily/periodic trend analysis, homepage highlights, or moderator alerting to surging discussions.","summary":"List/search trending topics (threads) from discussionboard_trending_topics.","parameters":[],"requestBody":{"description":"Filter, pagination, and search options for trending topics.","typeName":"IDiscussionboardTrendingTopic.IRequest"},"responseBody":{"description":"Paginated trending topics data and analytics metadata.","typeName":"IPageIDiscussionboardTrendingTopic"},"authorizationRole":"admin","name":"index","path":"/discussionboard/trendingTopics","method":"patch"},{"specification":"Get a specific trending topic record from the discussionboard_trending_topics table by id. Returns id, discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score. Used for trending panel analytics and trend source review. No soft/hard-delete, extra status, or derived fields are referenced.","description":"Retrieve details of a particular trending topic record by its unique id. Returns all fields modeled in the discussionboard_trending_topics schema: id (UUID), discussionboard_thread_id, discussionboard_board_id, ranking_period_date, and trending_score (float). This endpoint enables verification of trending calculation, homepage highlight panel, or analytics source investigation. Returns only atomic, schema-defined fields.","summary":"Get one trending topic record by id from discussionboard_trending_topics.","parameters":[{"name":"id","description":"Unique trending topic record id (discussionboard_trending_topics.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The trending topic record information.","typeName":"IDiscussionboardTrendingTopic"},"authorizationRole":"admin","name":"at","path":"/discussionboard/trendingTopics/{id}","method":"get"},{"specification":"Create a new notification template in discussionboard_notification_templates. The request must include schema fields: code (unique short identifier), name (template title), description (optional, string), subject (subject line of the message), body (full template string), is_active (enable/disable), created_at (timestamp of creation), and updated_at (timestamp of last modification). For use in managing notification content and audit tracking. There are no soft delete or update-by-authorization fields. All properties are enforced by the schema.","description":"This endpoint allows system administrators to add a new notification template, which is used to standardize notification messages (email, in-app, browser) in the discussion board system. Each template requires a code (unique short identifier for programmatic reference), name (displayed to admins/users), optional description (further detail), subject (for email/browser notification headers), body (message template, possibly including placeholders), is_active (enables/disables use), and audit fields for creation/update timestamps per schema. Only fields explicitly modeled in the Prisma schema are accepted. Templates are referenced by the notification engine and can be managed for compliance, i18n, or business logic changes. No extra fields outside the notification template schema are accepted; all properties are enforced per schema.","summary":"Create a notification template in discussionboard_notification_templates (used for system messages).","parameters":[],"requestBody":{"description":"Information required to create a notification template (all schema fields).","typeName":"IDiscussionboardNotificationTemplate.ICreate"},"responseBody":{"description":"Created notification template object.","typeName":"IDiscussionboardNotificationTemplate"},"authorizationRole":"admin","name":"create","path":"/discussionboard/notificationTemplates","method":"post"},{"specification":"Search and retrieve a paginated list of notification templates for the discussion board system. This operation allows admin, moderator, or authorized personnel to filter and browse all available templates using flexible criteria. Templates are the reusable messages for notification delivery such as emails, in-app alerts, or push notifications. Filtering can be performed on fields like code, name, is_active, created_at, updated_at, or subject. Because this is a collection endpoint, it should support relevant search parameters and pagination for browsing large numbers of templates. Only fields ACTUALLY defined on the 'discussionboard_notification_templates' table can be referenced: id, code, name, description, subject, body, is_active, created_at, updated_at. No fields outside these (e.g., deleted_at) exist and must not be referenced.","description":"This API lists notification templates stored in the notification message template master table (discussionboard_notification_templates). Each template contains attributes essential for system notification delivery, including its unique code, display name (name), subject, and body. Descriptions, is_active status, and timestamps (created_at, updated_at) are included only as defined in the schema. \n\nThe operation enables advanced search by code, name, is_active, subject, or creation/update period, facilitating discovery or review by admins and moderators. It does NOT reference or return any field not present in the schema (e.g., no soft/hard delete indicator, no creator/editor tracking, no attachment support). Pagination and sorting parameters should be supported for scalable browsing.\n\nRelevant use cases include admin browsing all templates, moderating notification content, performing audits on notification communications, and reviewing template versions before editing. Errors are returned for invalid queries or insufficient permissions. The database table does not support soft delete or restore, so only actual templates are listed - deleted ones (if any) are not available.","summary":"Search and paginate discussionboard_notification_templates (notification template master) table","parameters":[],"requestBody":{"description":"Patch-style search/filter request for notification templates, including sorting and pagination.","typeName":"IDiscussionboardNotificationTemplate.IRequest"},"responseBody":{"description":"A paginated and filtered list of notification templates matching search criteria.","typeName":"IPageDiscussionboardNotificationTemplate"},"authorizationRole":"admin","name":"index","path":"/discussionboard/notificationTemplates","method":"patch"},{"specification":"Retrieve a specific notification template from the discussionboard_notification_templates table by its unique id. Only fields present in the schema are included in the output: id, code, name, description, subject, body, is_active, created_at, updated_at. Does not reference non-existent fields (like deleted_at).","description":"This API retrieves the details of a notification template identified by id from the discussionboard_notification_templates table. Returns code, name, description, subject, body, is_active, and creation/update timestamps. If the template with the given id does not exist, an error is returned. Does not reference or require any field outside the schema such as soft deletes or historical state. Admin-level access required.","summary":"Get single notification template by id (discussionboard_notification_templates table)","parameters":[{"name":"id","description":"The template's unique identifier (UUID) in the discussionboard_notification_templates table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All fields for the specified notification template.","typeName":"IDiscussionboardNotificationTemplate"},"authorizationRole":"admin","name":"at","path":"/discussionboard/notificationTemplates/{id}","method":"get"},{"specification":"Update a notification template stored in the discussionboard_notification_templates table. All updates must be restricted to fields present in the schema: code, name, description, subject, body, is_active, updated_at. The id is taken from the path. Only authorized users (admin) may update templates. No support for resurrect/delete fields as none exist in the schema.","description":"Updates a notification template in the notification template master table by id. Accepts updates to code, name, description, subject, body, is_active, and updates the updated_at timestamp. The operation will ignore unsupported fields not present in the schema. Only an admin may perform this action. If the template by id does not exist, an error is returned.","summary":"Update fields of notification template by id (discussionboard_notification_templates table)","parameters":[{"name":"id","description":"UUID identifier of the notification template to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the notification template (all must exist in the table schema).","typeName":"IDiscussionboardNotificationTemplate.IUpdate"},"responseBody":{"description":"The updated notification template.","typeName":"IDiscussionboardNotificationTemplate"},"authorizationRole":"admin","name":"update","path":"/discussionboard/notificationTemplates/{id}","method":"put"},{"specification":"Delete a notification template from the discussionboard_notification_templates table. \nThe schema has no soft delete field, so this is a hard delete. The operation will remove the row from the database permanently. This must be restricted to admin role only. Only the path-provided id is required; there are no other identifying or supporting fields for deletion in the schema.","description":"Permanently deletes a notification template identified by id from the discussionboard_notification_templates table.\nThis is a hard delete because the table does not have a soft-delete field (such as deleted_at or is_deleted). All fields and business logic must be based on the actual fields in the Prisma schema. Only authorized admins can perform this action. If the template does not exist, an error is returned. No restore or trash bin operation is supported as per schema.","summary":"Hard delete notification template by id (discussionboard_notification_templates table)","parameters":[{"name":"id","description":"UUID of the notification template to permanently delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of deletion (boolean or status message).","typeName":"IBoolResult"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/notificationTemplates/{id}","method":"delete"},{"specification":"Create a new notification preference setting for a member, tied to specific templates/channels. All writable fields must be those in the discussionboard_notification_preferences table: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, updated_at. \nNo other fields exist. Member must be authenticated; admin/mod may have access for other members; strict field checking.","description":"Creates a notification template/channel preference for a board member, as stored in the discussionboard_notification_preferences table. Supports preferences per template code per channel (email, inapp, browser push), as well as required creation/update timestamps. The request must only reference fields defined in the table. No soft delete or trashing is supported. Returns the created preference entry or validation errors if a duplicate or invalid data is supplied. Admins can create for any member; members can create their own.","summary":"Create a notification preference for a member (discussionboard_notification_preferences)","parameters":[],"requestBody":{"description":"Details for new notification preference (field values as per schema).","typeName":"IDiscussionboardNotificationPreference.ICreate"},"responseBody":{"description":"The new notification preference record created in the DB.","typeName":"IDiscussionboardNotificationPreference"},"authorizationRole":"admin","name":"create","path":"/discussionboard/notificationPreferences","method":"post"},{"specification":"List and search notification preferences in the discussionboard_notification_preferences table. Admins, or members for their own records, can filter using code, member id, channel enables, and timestamps. Only schema-existing fields may be included: id, discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, updated_at. Results are paginated and support flexible filtering based on actual fields. No support for deleted records or restore because no such field exists in schema.","description":"This operation queries and pages through notification preference records (discussionboard_notification_preferences) by arbitrary search criteria. Supported filters include id, member id (discussionboard_member_id), template code, channel enablement (email_enabled, inapp_enabled, browser_enabled), and created/updated time ranges. Only actual fields in the schema are eligible for search/matching. Output is paginated to support frontend browsing and analytics use cases. Soft/hard delete is not referenced at all since not present in schema.","summary":"Paginate/search notification preferences in discussionboard_notification_preferences table","parameters":[],"requestBody":{"description":"Filter and pagination info for notification preferences (fields must be schema-correct).","typeName":"IDiscussionboardNotificationPreference.IRequest"},"responseBody":{"description":"Paginated list of notification preference records matching criteria.","typeName":"IPageDiscussionboardNotificationPreference"},"authorizationRole":"admin","name":"index","path":"/discussionboard/notificationPreferences","method":"patch"},{"specification":"Get a specific notification preference record from the discussionboard_notification_preferences table, sourced by unique id. Only fields from schema are returned: id, discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, created_at, updated_at. No delete or history fields exist in the schema, so none are returned or checked.","description":"This API fetches all fields for a specific notification preference by its unique id from the discussionboard_notification_preferences table. Returns all columns described in the schema; if no such id is found, an error is returned. The API never references non-existent fields such as deleted_at, historical modifications, or audit trails not present in the actual schema. Permissions restrict to admin, mod, or matching member (for their own record).","summary":"Get a single notification preference by id (discussionboard_notification_preferences table)","parameters":[{"name":"id","description":"UUID identity of the notification preference row to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All field values for the requested notification preference.","typeName":"IDiscussionboardNotificationPreference"},"authorizationRole":"admin","name":"at","path":"/discussionboard/notificationPreferences/{id}","method":"get"},{"specification":"Update a notification preference row in the discussionboard_notification_preferences table by its id. Only actual schema fields may be updated: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, updated_at. Admins can edit for any member; members their own. The operation does not support soft/hard delete or restore. The path contains the id.","description":"This operation updates (PUT) a notification preference record, identified by id, by setting new values for any writable field present in the schema. Permissible target fields: discussionboard_member_id, code, email_enabled, inapp_enabled, browser_enabled, updated_at. Attempts to update non-existent fields will be ignored and lead to validation errors. If id is invalid or not found, an error is returned. Admins have platform-level access; members may update their own preferences only.","summary":"Update a notification preference row by id (discussionboard_notification_preferences table)","parameters":[{"name":"id","description":"The notification preference's unique UUID in the DB.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for notification preference. Must match table schema exactly.","typeName":"IDiscussionboardNotificationPreference.IUpdate"},"responseBody":{"description":"All fields from the updated notification preference row.","typeName":"IDiscussionboardNotificationPreference"},"authorizationRole":"admin","name":"update","path":"/discussionboard/notificationPreferences/{id}","method":"put"},{"specification":"Delete a notification preference row by unique id from the discussionboard_notification_preferences table. The schema does NOT include deleted_at or is_deleted fields, so this is a hard delete. Only admins or matching members can delete their own preferences. No restore/undelete feature is available.","description":"Permanently deletes a notification preference identified by id from the notification preference table in the database. Removal is immediate and irreversible. As no soft-delete logic exists in the schema, this is a true hard delete. Records deleted via this endpoint cannot be recovered later. Returns a confirmation or boolean result. Admins have system access; members their own.","summary":"Hard delete a notification preference row by id (discussionboard_notification_preferences table)","parameters":[{"name":"id","description":"UUID of the notification preference entry to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of successful hard delete (boolean/status).","typeName":"IBoolResult"},"authorizationRole":"admin","name":"erase","path":"/discussionboard/notificationPreferences/{id}","method":"delete"},{"specification":"Create a new privacy policy record in the discussionboard_privacy_policies table. All relevant fields defined in the schema are required: version, effective_date, title, content. created_at and updated_at may be set by DB logic. The API does not and cannot reference deleted, creator, or modifier fields as these are not present. Only admins are authorized to set privacy policy contents.","description":"Creates a new privacy policy row in the database containing all required attributes: policy version, effective_date for compliance, title, and full text content of the policy. No deleted or audit-trail fields except for created_at/updated_at, which may be set implicitly. Input must exactly match what is defined in the schema—no surplus fields allowed. Returns the new privacy policy entry with all details set.","summary":"Create a privacy policy (discussionboard_privacy_policies table)","parameters":[],"requestBody":{"description":"All information about the privacy policy (schema-based only).","typeName":"IDiscussionboardPrivacyPolicy.ICreate"},"responseBody":{"description":"The new privacy policy record just created.","typeName":"IDiscussionboardPrivacyPolicy"},"authorizationRole":"admin","name":"create","path":"/discussionboard/privacyPolicies","method":"post"},{"specification":"Query and page through privacy policy entries in the discussionboard_privacy_policies table. Filtering and sorting may be performed on version, effective_date, title, content, created_at, or updated_at, as those are all actual schema fields. Return values include only actual columns. No delete/restore functionality exists, so no such logic is permissible. Suitable for policy display and audit compliance dashboards.","description":"This operation paginates and searches privacy policy records from the privacy policy master table. Filtering and sort operations are allowed only on columns in the schema (version, effective_date, title, content, created_at, updated_at). The result is paginated to support high volume audits and policy history queries. No fields for deletion or row hiding are supported in the schema, so no policy record can be soft/hard deleted using this endpoint.","summary":"Search, filter, and paginate privacy policy records (discussionboard_privacy_policies table)","parameters":[],"requestBody":{"description":"Filter and pagination instructions for privacy policies (all fields based on schema).","typeName":"IDiscussionboardPrivacyPolicy.IRequest"},"responseBody":{"description":"Paginated/filtered results matching privacy policy query.","typeName":"IPageDiscussionboardPrivacyPolicy"},"authorizationRole":"admin","name":"index","path":"/discussionboard/privacyPolicies","method":"patch"},{"specification":"Fetch a single privacy policy from the discussionboard_privacy_policies table by its unique id (UUID). The response includes all schema-present fields for the policy: id, version, effective_date, title, content, created_at, updated_at. No delete or audit/restore logic fields are present in the schema, so cannot be referenced. Admin authentication is required.","description":"Retrieves the full privacy policy information for the given id (UUID), returning all first-class fields in the schema. This is used for compliance review, end-user access to policy text, or admin management. If no such id is found, an error is returned. Only strictly schema-defined fields are valid for either query or output. Admin-only API.","summary":"Get one privacy policy details by id (discussionboard_privacy_policies table)","parameters":[{"name":"id","description":"UUID of the privacy policy to retrieve (used as path parameter).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All fields of the privacy policy row matching id.","typeName":"IDiscussionboardPrivacyPolicy"},"authorizationRole":"admin","name":"at","path":"/discussionboard/privacyPolicies/{id}","method":"get"},{"specification":"Update an existing privacy policy by ID. This operation modifies the fields of a stored privacy policy, allowing administrators to revise the version, effective date, title, or content. Each policy has atomic fields: id (UUID), version (string), effective_date (DateTime), title (string), content (string), created_at (DateTime), and updated_at (DateTime). Because the schema does not contain any deleted_at or is_deleted field, update is limited to in-place changes and cannot perform soft-restore or soft-delete logic. Only fields present in the schema can be referenced.","description":"This endpoint allows administrators to update a privacy policy's details using its unique identifier. The API supports modifications to core fields including the policy's 'version' (which is a unique string for each policy version), 'effective_date' (indicating when the policy becomes active), 'title' and 'content' (which are the main legal text). The update also permits changing auxiliary audit fields like 'created_at' and 'updated_at', if required for system consistency, but does not allow any archiving or soft-delete since 'deleted_at' is not present in this schema. All updates are permanent and immediately reflected in system audit and user-facing retrievals. Attempting to refer to fields not present in the Prisma schema will be rejected. Only an admin user should have access to this endpoint, and all update events should be logged for compliance.","summary":"Update an existing privacy policy. (Entity: discussionboard_privacy_policies)","parameters":[{"name":"id","description":"The ID of the privacy policy to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating the privacy policy.","typeName":"Idiscussionboard_privacy_policies.IUpdate"},"responseBody":{"description":"The updated privacy policy.","typeName":"Idiscussionboard_privacy_policies"},"authorizationRole":"admin","name":"update","path":"/discussionboard/privacyPolicies/{id}","method":"put"},{"specification":"Delete a privacy policy by ID. This operation removes a privacy policy record from the discussionboard_privacy_policies table. No soft-delete or logical delete is possible, as there are no deleted_at or is_deleted fields in the schema. Deletion is permanent and unrecoverable. The primary key is 'id', and the schema also contains fields for version, effective_date, title, content, created_at, and updated_at. Only fields present in the schema can be referenced or used as criteria.","description":"This endpoint enables an admin to permanently remove a privacy policy identified by its unique 'id'. The deletion performs a hard delete because the schema defines no soft-delete (like deleted_at or is_deleted), making this action irreversible and removing the record entirely from the database. This is intended for rare administrative actions, such as removing obsolete or mistakenly published legal documents. Attempting to refer to fields or soft-delete logic not present in the schema will result in an error. Only administrators have permissions for this action. Deletion events must be recorded for compliance and audit purposes.","summary":"Delete a privacy policy (hard delete). (Entity: discussionboard_privacy_policies)","parameters":[{"name":"id","description":"The ID of the privacy policy to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/privacyPolicies/{id}","method":"delete"},{"specification":"Create a new data erasure request. This operation allows a platform member to submit a request to be forgotten, as required by privacy law and compliance. The discussionboard_data_erasure_requests table holds id (UUID), discussionboard_member_id (UUID), status (string), requested_at (DateTime), reviewed_at (DateTime or null), completed_at (DateTime or null), and admin_remark (string or null). Requests will reference only fields in the schema. No deleted_at or is_deleted present, so status transitions are managed only through the status field.","description":"This endpoint enables a platform member to initiate a data erasure request. When called, a new record is created in the discussionboard_data_erasure_requests table, storing the member's id (discussionboard_member_id), the status (initially 'pending' or equivalent), the timestamp of request (requested_at), and optionally the review and completion timestamps if available. The request may include or omit admin remarks and will be routed for subsequent moderator/admin processing. Only schema-defined fields can be passed. Field presence and state transitions (e.g., reviewing, completing, denying) are managed through the 'status' string and audit timestamps, not a deleted_at field.","summary":"Create a new data erasure request. (Entity: discussionboard_data_erasure_requests)","parameters":[],"requestBody":{"description":"Parameters for new data erasure request.","typeName":"Idiscussionboard_data_erasure_requests.ICreate"},"responseBody":{"description":"Created data erasure request record.","typeName":"Idiscussionboard_data_erasure_requests"},"authorizationRole":"member","name":"create","path":"/discussionboard/dataErasureRequests","method":"post"},{"specification":"Retrieve a filtered list of data erasure requests using complex search, filtering, and pagination logic. This endpoint uses information in the request body to control search criteria and supports returning paginated response objects. The discussionboard_data_erasure_requests table columns are id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, and admin_remark. No deleted_at or is_deleted fields exist.","description":"This endpoint provides admin or moderator users the ability to retrieve and search through data erasure requests in the platform. Using the request body, callers can specify search filters, sort options, and pagination controls to explore requests by status, member ID, date ranges, etc. Only fields defined in the schema can be used as filter criteria or returned in results. The endpoint returns a paginated list (usually with total counts and results) of erasure request objects, each with atomic fields as defined. No soft-delete or archival logic is present, so all listed requests are from the active records table.","summary":"List/search data erasure requests (paged, filtered). (Entity: discussionboard_data_erasure_requests)","parameters":[],"requestBody":{"description":"Search and pagination criteria for data erasure request listing.","typeName":"Idiscussionboard_data_erasure_requests.IRequest"},"responseBody":{"description":"Paginated list of data erasure requests.","typeName":"IPageIdiscussionboard_data_erasure_requests"},"authorizationRole":"admin","name":"index","path":"/discussionboard/dataErasureRequests","method":"patch"},{"specification":"Get details for a single data erasure request by its ID. This operation retrieves all atomic fields defined in the schema: id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, and admin_remark. No deleted_at or is_deleted fields are present; record is returned as-is. Only callable by users with proper admin privileges.","description":"This endpoint retrieves the detailed information for a specific data erasure request using its primary key ID. The full record is returned, including the member identifier, current status, timestamps for request, review, and completion, and any admin remarks. As the schema does not use soft deletion, requests are always returned if they exist, with no filtering on deleted_at or similar fields. Only fields present in the database schema are included in the resource representation. Accessible only to admin users for privacy and compliance reasons.","summary":"Retrieve single data erasure request by ID. (Entity: discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"ID of the data erasure request to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full data erasure request record.","typeName":"Idiscussionboard_data_erasure_requests"},"authorizationRole":"admin","name":"at","path":"/discussionboard/dataErasureRequests/{id}","method":"get"},{"specification":"Update an existing data erasure request by ID. This operation updates any atomic field defined in the schema: discussionboard_member_id (UUID), status (string), requested_at (DateTime), reviewed_at (DateTime or null), completed_at (DateTime or null), admin_remark (string or null). No soft delete fields are present, so update cannot be used to archive; all changes are immediate and permanent.","description":"This endpoint allows admins to update an existing data erasure request. The update can set the status string (e.g., to 'approved', 'denied', 'completed'), manage timestamps for review and completion, or supply/update an admin_remark explaining the decision. Because there are no soft delete or archival fields, all updates are reflected directly in the table, and deleted_at or similar cannot be referenced. Each field supplied in the request body must exist in the schema. All changes are permanent and fully auditable, with field-level transitions ideally logged for compliance.","summary":"Update an existing data erasure request by ID. (Entity: discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"ID of the data erasure request to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated field values for the erasure request.","typeName":"Idiscussionboard_data_erasure_requests.IUpdate"},"responseBody":{"description":"Updated data erasure request record.","typeName":"Idiscussionboard_data_erasure_requests"},"authorizationRole":"admin","name":"update","path":"/discussionboard/dataErasureRequests/{id}","method":"put"},{"specification":"Delete a data erasure request record by ID. This will hard delete the row from the table since no deleted_at or is_deleted field exists. The schema fields: id, discussionboard_member_id, status, requested_at, reviewed_at, completed_at, admin_remark. This operation is intended for admin-only use and should be logged for proper audit and compliance tracking. The resource is unrecoverable after deletion.","description":"This endpoint enables an admin to permanently remove a data erasure request from the platform by supplying its ID. Since the schema does not support soft delete, the operation removes the record entirely, making the action irreversible. This action should be performed rarely and only by admins, usually to clean up erroneous or obsolete requests. Only fields present in the schema are referenced, and no soft-delete logic is possible or supported.","summary":"Delete a data erasure request (hard delete). (Entity: discussionboard_data_erasure_requests)","parameters":[{"name":"id","description":"ID of the data erasure request to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","name":"erase","path":"/discussionboard/dataErasureRequests/{id}","method":"delete"}],"components":{"schemas":{"IDiscussionboardMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"사용자의 로그인 및 표시용 고유 아이디입니다. Prisma discussionboard_members 테이블의 username 컬럼을 반영합니다.\n\n회원 가입 및 인증 절차에서 필수적으로 사용되며, 다른 프로필나 권한 테이블과 중복되지 않도록 보장됩니다. 예시: 'civicUser42'."},"email":{"type":"string","format":"email","description":"회원의 고유 이메일 주소로, 인증 및 알림 기능 등 다양한 서비스에 이용됩니다. Prisma discussionboard_members.email 컬럼 설명을 반영합니다.\n\nDB 내 유일값으로 효력이 유지되며, 이메일 인증, 비밀번호 재설정 등에 활용됩니다. 예시: 'user@email.com'."},"hashed_password":{"type":"string","description":"안전한 로그인 처리를 위해 암호화된 비밀번호 해시값을 저장하는 필드입니다. 문제 시 절대 평문을 저장하지 않으며, 직접 반환되는 일도 없습니다.\n\nPrisma discussionboard_members의 hashed_password 컬럼에 대응하며, 로그인 시 인증에서만 내부적으로 활용됩니다."},"role":{"oneOf":[{"const":"member","description":"회원의 권한을 지정합니다. Prisma discussionboard_members.role 컬럼에 해당하며, 'member', 'moderator', 'admin' 세 가지 값만 허용합니다.\n\n회원 등록 시 역할이 반드시 지정되어야 하며, 이후 운영 내 권한 분기 및 인가 처리가 모두 이 값을 기준으로 이루어집니다."},{"const":"moderator","description":"회원의 권한을 지정합니다. Prisma discussionboard_members.role 컬럼에 해당하며, 'member', 'moderator', 'admin' 세 가지 값만 허용합니다.\n\n회원 등록 시 역할이 반드시 지정되어야 하며, 이후 운영 내 권한 분기 및 인가 처리가 모두 이 값을 기준으로 이루어집니다."},{"const":"admin","description":"회원의 권한을 지정합니다. Prisma discussionboard_members.role 컬럼에 해당하며, 'member', 'moderator', 'admin' 세 가지 값만 허용합니다.\n\n회원 등록 시 역할이 반드시 지정되어야 하며, 이후 운영 내 권한 분기 및 인가 처리가 모두 이 값을 기준으로 이루어집니다."}],"description":"회원의 권한을 지정합니다. Prisma discussionboard_members.role 컬럼에 해당하며, 'member', 'moderator', 'admin' 세 가지 값만 허용합니다.\n\n회원 등록 시 역할이 반드시 지정되어야 하며, 이후 운영 내 권한 분기 및 인가 처리가 모두 이 값을 기준으로 이루어집니다."},"is_active":{"type":"boolean","description":"계정의 활성/비활성 상태를 나타냅니다. Prisma discussionboard_members.is_active 컬럼을 반영하며, false로 설정되면 게시판 접근 및 활동이 제한됩니다.\n\n회원 가입(등록) 시 true/false를 할당합니다."}},"required":["username","email","hashed_password","role","is_active"],"description":"회원 가입(등록) 요청 시 사용하는 데이터 타입입니다. Prisma discussionboard_members 테이블 스키마와 컬럼 주석을 기반으로 설계되었습니다.\n\nID, 가입일시 등의 자동 생성 필드는 사용자가 직접 제공하지 않으며, 보안상 password의 해시만 입력받습니다. 이메일, 아이디 중복은 데이터베이스 수준에서 제한됩니다.\n"},"IDiscussionboardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"회원 고유 식별자(PK).\n\nPrisma discussionboard_members.id 컬럼으로, 모든 내부조인 및 외부 참조의 기준이 되는 값입니다."},"username":{"type":"string","description":"회원의 로그인/표시용 아이디. Prisma discussionboard_members.username 컬럼.\n\n모든 회원의 고유 아이디를 보장합니다."},"email":{"type":"string","format":"email","description":"회원의 인증 및 연락용 이메일 주소. Prisma discussionboard_members.email 컬럼.\n\n고유값이며 비밀번호 재설정 등에서 활용합니다."},"role":{"oneOf":[{"const":"member","description":"회원의 권한(일반/운영자/관리자) 구분. Prisma discussionboard_members.role 컬럼.\n\n서비스 접근, 인가 처리를 좌우합니다."},{"const":"moderator","description":"회원의 권한(일반/운영자/관리자) 구분. Prisma discussionboard_members.role 컬럼.\n\n서비스 접근, 인가 처리를 좌우합니다."},{"const":"admin","description":"회원의 권한(일반/운영자/관리자) 구분. Prisma discussionboard_members.role 컬럼.\n\n서비스 접근, 인가 처리를 좌우합니다."}],"description":"회원의 권한(일반/운영자/관리자) 구분. Prisma discussionboard_members.role 컬럼.\n\n서비스 접근, 인가 처리를 좌우합니다."},"is_active":{"type":"boolean","description":"계정 활성화 플래그. Prisma discussionboard_members.is_active 컬럼.\n\n운영자/관리 기능으로 계정 블록 상태 등 표현."},"created_at":{"type":"string","format":"date-time","description":"계정 생성(가입) 일시. Prisma discussionboard_members.created_at 컬럼.\n\n운영 감사, 신규 회원 집계 등에 사용됩니다."},"updated_at":{"type":"string","format":"date-time","description":"회원 정보 마지막 변경 시각. Prisma discussionboard_members.updated_at.\n\n프로필 수정, 권한 변경 등 변경감사 트래킹용."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"소프트 삭제/탈퇴 시각. Prisma discussionboard_members.deleted_at 컬럼.\n\n탈퇴 대기/준삭제자 구분과 복구 이력 용도."},{"type":"null"}],"description":"소프트 삭제/탈퇴 시각. Prisma discussionboard_members.deleted_at 컬럼.\n\n탈퇴 대기/준삭제자 구분과 복구 이력 용도."}},"required":["id","username","email","role","is_active","created_at","updated_at"],"description":"회원 엔터티의 전체 데이터 구조입니다. Prisma discussionboard_members 테이블의 모든 컬럼 정의 및 주석을 반영하여 작성되었습니다.\n\npassword/hash 등 내부 보안정보는 절대 응답에 포함하지 않으며, 회원의 권한, 활성상태, 가입/수정/탈퇴 관련 일시가 포함됩니다.\n"},"IDiscussionboardMember.IRequest":{"type":"object","properties":{"username":{"type":"string","description":"검색/필터 대상 아이디. 부분검색 지원과 중복체크, 대량 검색용 필드입니다. Prisma discussionboard_members.username 컬럼기반."},"email":{"type":"string","format":"email","description":"이메일 기준 필터. Prisma discussionboard_members.email 컬럼과 일치해야 합니다."},"role":{"oneOf":[{"const":"member","description":"권한 기반 필터링. Prisma discussionboard_members.role 컬럼 참고."},{"const":"moderator","description":"권한 기반 필터링. Prisma discussionboard_members.role 컬럼 참고."},{"const":"admin","description":"권한 기반 필터링. Prisma discussionboard_members.role 컬럼 참고."}],"description":"권한 기반 필터링. Prisma discussionboard_members.role 컬럼 참고."},"is_active":{"type":"boolean","description":"활성/비활성 회원 필터링. Prisma discussionboard_members.is_active 컬럼."},"created_at_from":{"type":"string","format":"date-time","description":"가입일 기준 하한(ISO8601). Prisma discussionboard_members.created_at."},"created_at_to":{"type":"string","format":"date-time","description":"가입일 기준 상한(ISO8601). Prisma discussionboard_members.created_at."},"updated_at_from":{"type":"string","format":"date-time","description":"정보 변경일 기준 하한(ISO8601)"},"updated_at_to":{"type":"string","format":"date-time","description":"정보 변경일 기준 상한(ISO8601)"},"pagination":{"$ref":"#/components/schemas/IPage.IRequest"}},"description":"회원 목록/검색/필터 요청 시 사용하는 데이터 타입입니다. Prisma discussionboard_members 테이블, 컬럼 설명, 그리고 목록/검색/페이징 비즈니스 흐름에 맞게 작성되었습니다.","required":[]},"IPageIDiscussionboardMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMember"}}},"required":["pagination","data"],"description":"회원 목록 페이징 응답 컨테이너 타입입니다. standard IPage 구조에 회원 리스트를 포함합니다."},"IDiscussionboardMember.IUpdate":{"type":"object","properties":{"username":{"type":"string","description":"회원 아이디(변경 시)."},"email":{"type":"string","format":"email","description":"이메일 주소(변경 시 가능)."},"role":{"oneOf":[{"const":"member","description":"권한 등급 변경시. 'member', 'moderator', 'admin' 셋 중 하나."},{"const":"moderator","description":"권한 등급 변경시. 'member', 'moderator', 'admin' 셋 중 하나."},{"const":"admin","description":"권한 등급 변경시. 'member', 'moderator', 'admin' 셋 중 하나."}],"description":"권한 등급 변경시. 'member', 'moderator', 'admin' 셋 중 하나."},"is_active":{"type":"boolean","description":"계정 활성화/비활성화 변경."},"hashed_password":{"type":"string","description":"비밀번호 변경시, 해시값만 허용."}},"description":"회원 정보 업데이트 요청 타입입니다. Prisma discussionboard_members 컬럼 구성을 100% 반영합니다. ID/created_at/updated_at/deleted_at 값은 수정 불가.","required":[]},"IDiscussionboardMember.ISoftDeleteResponse":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"삭제 요청된 회원의 ID"},"deleted_at":{"type":"string","format":"date-time","description":"삭제(탈퇴) 처리 일시"}},"required":["id","deleted_at"],"description":"회원 소프트 삭제(탈퇴) 성공 시 응답 객체(Soft delete: deleted_at 필드 설정됨)."},"IDiscussionboardMemberProfile.IRequest":{"type":"object","properties":{"display_name":{"type":"string","description":"회원 고유 프로필 닉네임. Prisma discussionboard_member_profiles.display_name 참조."},"bio":{"type":"string","description":"한 줄 소개, 메시지, 이력 등 자유 서술란."},"avatar_url":{"type":"string","description":"프로필 이미지 URL (최대 8만자)."},"location":{"type":"string","description":"지역, 도시, 국가 등 자유 텍스트."},"website_url":{"type":"string","description":"본인 홈페이지, 소셜 링크 등(URL)."},"pagination":{"$ref":"#/components/schemas/IPage.IRequest"}},"description":"회원 프로필 검색/조회용 요청 타입. Prisma discussionboard_member_profiles 구조를 100% 반영.","required":[]},"IPageIDiscussionboardMemberProfile":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMemberProfile"}}},"required":["pagination","data"],"description":"회원 프로필 리스트 페이징 응답 컨테이너."},"IDiscussionboardMemberProfile.IUpdate":{"type":"object","properties":{"display_name":{"type":"string","description":"프로필 닉네임 수정값 (필수 필드)."},"bio":{"type":"string","description":"한 줄 소개 수정 (선택 가능)."},"avatar_url":{"type":"string","description":"프로필 이미지 URL(수정값)."},"location":{"type":"string","description":"위치 텍스트 변경."},"website_url":{"type":"string","description":"웹사이트 URL 수정."}},"description":"회원 프로필 업데이트 요청 객체. Prisma discussionboard_member_profiles 테이블 정의 준수.","required":[]},"IDiscussionboardMemberProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"프로필 고유 식별자(PK)."},"member_id":{"type":"string","format":"uuid","description":"프로필이 연결된 회원 ID(FK)."},"display_name":{"type":"string","description":"회원의 공개 닉네임."},"bio":{"type":"string","description":"회원의 자기소개, 경력 등 짧은 메모(선택)."},"avatar_url":{"type":"string","description":"프로필 이미지(아바타) URL(선택, 최대 8만자)."},"location":{"type":"string","description":"지역, 국가, 거주지 등(선택)."},"website_url":{"type":"string","description":"개인 홈페이지, SNS 등 외부 링크(선택, 최대 8만자)."}},"required":["id","member_id","display_name"],"description":"회원 프로필 엔터티. Prisma discussionboard_member_profiles 컬럼, 주석 내용 100% 반영. 보안정보(이메일/비번 등)는 포함하지 않음."},"IDiscussionboardMemberPreference.IRequest":{"type":"object","properties":{"receive_email_notifications":{"type":"boolean","description":"이메일 알림 사용 여부(선호도)."},"receive_push_notifications":{"type":"boolean","description":"푸시알림 허용(선호도)."},"preferred_language":{"type":"string","description":"사용자 선호 언어 코드(예: 'en', 'ko')."},"dark_mode_enabled":{"type":"boolean","description":"다크모드 사용여부(테마설정)."},"pagination":{"$ref":"#/components/schemas/IPage.IRequest"}},"description":"회원 알림/환경설정 프로필 검색 요청 포맷. Prisma discussionboard_member_preferences 컬럼 100% 반영.","required":[]},"IPageIDiscussionboardMemberPreference":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardMemberPreference"}}},"required":["pagination","data"],"description":"회원 알림 및 환경설정 선호도 목록 페이징 응답 컨테이너."},"IDiscussionboardMemberPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"테이블 discussionboard_member_preferences의 PK로 사용되는 UUID 문자열입니다. 시스템 생성/관리 용도로만 읽기 전용입니다.\n\n알림/환경설정 레코드의 고유 식별자 역할을 하며, 클라이언트가 값을 지정하는 것이 아니라 서버가 자동 생성합니다."},"member_id":{"type":"string","format":"uuid","description":"이 환경설정이 속한 member({@link discussionboard_members.id})의 UUID입니다. 이 필드는 1:1 고유 매핑을 보장합니다.\n\n이 필드는 member-환경설정 데이터를 연결시키는 참조이고, 프로파일 관리나 알림 설정 변경 요청시 인증된 사용자가 소유해야 합니다."},"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"사용자가 이메일 알림을 받고 싶어하는지의 여부입니다. true이면 이메일 알림 활성, false이면 비활성, null은 플랫폼 기본 값 또는 시스템 정책을 따름을 의미합니다.\n\nPrisma discussionboard_member_preferences의 receive_email_notifications 컬럼에 일치합니다. UI에서는 체크박스 형태로 노출될 수 있습니다."},{"type":"null","description":"사용자가 이메일 알림을 받고 싶어하는지의 여부입니다. true이면 이메일 알림 활성, false이면 비활성, null은 플랫폼 기본 값 또는 시스템 정책을 따름을 의미합니다.\n\nPrisma discussionboard_member_preferences의 receive_email_notifications 컬럼에 일치합니다. UI에서는 체크박스 형태로 노출될 수 있습니다."}],"description":"사용자가 이메일 알림을 받고 싶어하는지의 여부입니다. true이면 이메일 알림 활성, false이면 비활성, null은 플랫폼 기본 값 또는 시스템 정책을 따름을 의미합니다.\n\nPrisma discussionboard_member_preferences의 receive_email_notifications 컬럼에 일치합니다. UI에서는 체크박스 형태로 노출될 수 있습니다."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"브라우저 또는 모바일 푸시 알림 수신 여부를 설정합니다. true/false 둘 다 가능하며, null값은 시스템의 기본을 따릅니다.\n\ndiscussionboard_member_preferences의 receive_push_notifications와 일치하며, 사용자가 원하지 않으면 false로 지정 가능합니다."},{"type":"null","description":"브라우저 또는 모바일 푸시 알림 수신 여부를 설정합니다. true/false 둘 다 가능하며, null값은 시스템의 기본을 따릅니다.\n\ndiscussionboard_member_preferences의 receive_push_notifications와 일치하며, 사용자가 원하지 않으면 false로 지정 가능합니다."}],"description":"브라우저 또는 모바일 푸시 알림 수신 여부를 설정합니다. true/false 둘 다 가능하며, null값은 시스템의 기본을 따릅니다.\n\ndiscussionboard_member_preferences의 receive_push_notifications와 일치하며, 사용자가 원하지 않으면 false로 지정 가능합니다."},"preferred_language":{"oneOf":[{"type":"string","description":"사용자 선호 언어 코드(예: 'en', 'ko' 등 ISO코드). null값이면 시스템 기본이 적용됩니다.\n\ndiscussionboard_member_preferences의 preferred_language와 직접 매핑됩니다. 로컬라이징/다국어 지원에 중요합니다."},{"type":"null","description":"사용자 선호 언어 코드(예: 'en', 'ko' 등 ISO코드). null값이면 시스템 기본이 적용됩니다.\n\ndiscussionboard_member_preferences의 preferred_language와 직접 매핑됩니다. 로컬라이징/다국어 지원에 중요합니다."}],"description":"사용자 선호 언어 코드(예: 'en', 'ko' 등 ISO코드). null값이면 시스템 기본이 적용됩니다.\n\ndiscussionboard_member_preferences의 preferred_language와 직접 매핑됩니다. 로컬라이징/다국어 지원에 중요합니다."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"다크 모드 UI 선호 여부(true/false/null). true로 설정할 경우 어두운 테마가 활성화됩니다.\n\nPrisma discussionboard_member_preferences dark_mode_enabled 컬럼에 기반하고, null은 시스템 테마를 적용함을 의미합니다."},{"type":"null","description":"다크 모드 UI 선호 여부(true/false/null). true로 설정할 경우 어두운 테마가 활성화됩니다.\n\nPrisma discussionboard_member_preferences dark_mode_enabled 컬럼에 기반하고, null은 시스템 테마를 적용함을 의미합니다."}],"description":"다크 모드 UI 선호 여부(true/false/null). true로 설정할 경우 어두운 테마가 활성화됩니다.\n\nPrisma discussionboard_member_preferences dark_mode_enabled 컬럼에 기반하고, null은 시스템 테마를 적용함을 의미합니다."}},"required":["id","member_id"],"description":"알림 및 UI 환경설정(프리퍼런스) 레코드의 전체 정보를 표현하는 타입. discussionboard_member_preferences 테이블의 각 컬럼 1:1 매핑.\n\n각 필드는 해당 사용자의 환경설정 상태(이메일/푸시 알림, 언어, 다크모드 등)를 나타내며, 일부는 null을 수용하여 시스템 기본값이나 '미설정' 의미를 지원합니다. 관리/상세 조회 응답에 사용됩니다."},"IPage.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"페이지 번호. 1부터 시작. null 허용. 기본값 1.","minimum":1},{"type":"null","description":"페이지 번호. 1부터 시작. null 허용. 기본값 1.","minimum":1}],"description":"페이지 번호. 1부터 시작. null 허용. 기본값 1."},"limit":{"oneOf":[{"type":"integer","description":"1페이지당 레코드 제한(최대값은 서비스 정책 기준). null 허용, 기본값 100.","minimum":1},{"type":"null","description":"1페이지당 레코드 제한(최대값은 서비스 정책 기준). null 허용, 기본값 100.","minimum":1}],"description":"1페이지당 레코드 제한(최대값은 서비스 정책 기준). null 허용, 기본값 100."}},"description":"페이징/목록 요청 시 공통 구조. IPage.IRequest 타입. page, limit만 사용.","required":[]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","format":"uint32","description":"Current page number."},"limit":{"type":"integer","format":"uint32","description":"Records per page (default 100)."},"records":{"type":"integer","format":"uint32","description":"Total records in the query."},"pages":{"type":"integer","format":"uint32","description":"Total number of pages (records/limit ceiling)."}},"required":["current","limit","records","pages"],"description":"Pagination metadata structure for all paged API responses.\n\nDescribes paging state for client UI, admin dashboards, CSV exports, etc."},"IDiscussionboardMemberPreference.IUpdate":{"type":"object","properties":{"receive_email_notifications":{"oneOf":[{"type":"boolean","description":"이 설정은 사용자가 이메일 알림을 받고자 하는지 결정합니다. 해당 값은 null이 될 수 있으며, 사용자가 기본값을 따르기로 선택했음을 나타냅니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_email_notifications 컬럼에 기반합니다. 사용자는 UI 또는 API를 통해 알림을 개별적으로 활성화 혹은 비활성화 할 수 있으며, null 값은 시스템의 기본 정책에게 위임함을 의미합니다."},{"type":"null","description":"이 설정은 사용자가 이메일 알림을 받고자 하는지 결정합니다. 해당 값은 null이 될 수 있으며, 사용자가 기본값을 따르기로 선택했음을 나타냅니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_email_notifications 컬럼에 기반합니다. 사용자는 UI 또는 API를 통해 알림을 개별적으로 활성화 혹은 비활성화 할 수 있으며, null 값은 시스템의 기본 정책에게 위임함을 의미합니다."}],"description":"이 설정은 사용자가 이메일 알림을 받고자 하는지 결정합니다. 해당 값은 null이 될 수 있으며, 사용자가 기본값을 따르기로 선택했음을 나타냅니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_email_notifications 컬럼에 기반합니다. 사용자는 UI 또는 API를 통해 알림을 개별적으로 활성화 혹은 비활성화 할 수 있으며, null 값은 시스템의 기본 정책에게 위임함을 의미합니다."},"receive_push_notifications":{"oneOf":[{"type":"boolean","description":"사용자가 푸시 알림(브라우저/모바일)을 수신할지 선택합니다. null 값도 허용되며, 특별한 설정이 없을 경우 플랫폼의 일반 기본값이 적용됩니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_push_notifications 컬럼과 매핑되며, 사용자는 본인 선호도에 따라 값을 조절할 수 있습니다."},{"type":"null","description":"사용자가 푸시 알림(브라우저/모바일)을 수신할지 선택합니다. null 값도 허용되며, 특별한 설정이 없을 경우 플랫폼의 일반 기본값이 적용됩니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_push_notifications 컬럼과 매핑되며, 사용자는 본인 선호도에 따라 값을 조절할 수 있습니다."}],"description":"사용자가 푸시 알림(브라우저/모바일)을 수신할지 선택합니다. null 값도 허용되며, 특별한 설정이 없을 경우 플랫폼의 일반 기본값이 적용됩니다.\n\nPrisma discussionboard_member_preferences 테이블의 receive_push_notifications 컬럼과 매핑되며, 사용자는 본인 선호도에 따라 값을 조절할 수 있습니다."},"preferred_language":{"oneOf":[{"type":"string","description":"사용자의 선호 언어(예: 'en', 'ko')를 지정합니다. 이 필드는 null이 될 수 있고, null이면 시스템 전체 기본 로케일이 사용자에게 적용됩니다. 언어 코드는 ISO 표준에 부합해야 합니다.\n\ndiscussionboard_member_preferences의 preferred_language 컬럼에 직접 매핑됩니다. 언어 현지화/로컬라이징 기능에 필수적입니다."},{"type":"null","description":"사용자의 선호 언어(예: 'en', 'ko')를 지정합니다. 이 필드는 null이 될 수 있고, null이면 시스템 전체 기본 로케일이 사용자에게 적용됩니다. 언어 코드는 ISO 표준에 부합해야 합니다.\n\ndiscussionboard_member_preferences의 preferred_language 컬럼에 직접 매핑됩니다. 언어 현지화/로컬라이징 기능에 필수적입니다."}],"description":"사용자의 선호 언어(예: 'en', 'ko')를 지정합니다. 이 필드는 null이 될 수 있고, null이면 시스템 전체 기본 로케일이 사용자에게 적용됩니다. 언어 코드는 ISO 표준에 부합해야 합니다.\n\ndiscussionboard_member_preferences의 preferred_language 컬럼에 직접 매핑됩니다. 언어 현지화/로컬라이징 기능에 필수적입니다."},"dark_mode_enabled":{"oneOf":[{"type":"boolean","description":"다크 모드 UI 사용 여부를 정의합니다. true로 설정 시 어두운 테마가 활성화 됩니다.\n\nPrisma discussionboard_member_preferences의 dark_mode_enabled 컬럼에 기반하며, null 값은 자동/기본 테마를 의미합니다."},{"type":"null","description":"다크 모드 UI 사용 여부를 정의합니다. true로 설정 시 어두운 테마가 활성화 됩니다.\n\nPrisma discussionboard_member_preferences의 dark_mode_enabled 컬럼에 기반하며, null 값은 자동/기본 테마를 의미합니다."}],"description":"다크 모드 UI 사용 여부를 정의합니다. true로 설정 시 어두운 테마가 활성화 됩니다.\n\nPrisma discussionboard_member_preferences의 dark_mode_enabled 컬럼에 기반하며, null 값은 자동/기본 테마를 의미합니다."}},"description":"사용자 알림 및 UI 환경설정 수정 API 요청에 사용되는 타입입니다. discussionboard_member_preferences 테이블의 각 컬럼과 대응합니다.\n\n각 필드는 사용자가 원하는 알림 방식(이메일, 푸시), UI 다크 모드 선호, 선호 언어 등과 직접적으로 연결되며, null 값은 해당 옵션을 시스템 기본값에 위임한다는 뜻입니다. 이 타입은 수정시 일부만 전달할 수 있어 모두 선택적입니다.","required":[]},"IDiscussionboardModerator.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Moderator로 할당되는 대상 discussionboard_members.id의 PK(UUID).\n\n해당 member는 이미 시스템 회원이어야 하며, 이미 moderator이면 중복 할당 불가(고유 제약조건)."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"이 moderator role을 할당한 admin의 discussionboard_admins.id (UUID).\n\n로그/audit trail용. self-assign 등은 없으며, 항상 기존 admin의 명시적 승인 필요."},"assigned_at":{"type":"string","format":"date-time","description":"Moderator 권한이 부여된 시점의 ISO 8601 형식 타임스탬프(예: 2025-07-24T11:15:00+09:00).\n\n기록/보안 준수 목적으로 실제 부여 시각을 남깁니다."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"임시 Moderator 권한 만료 일시(없으면 null, 즉 영구 할당).\n\n일시적 '게스트' moderator의 경우 페널티 만료 등 조건에서 활용. null이면 영구."},{"type":"null","format":"date-time","description":"임시 Moderator 권한 만료 일시(없으면 null, 즉 영구 할당).\n\n일시적 '게스트' moderator의 경우 페널티 만료 등 조건에서 활용. null이면 영구."}],"description":"임시 Moderator 권한 만료 일시(없으면 null, 즉 영구 할당).\n\n일시적 '게스트' moderator의 경우 페널티 만료 등 조건에서 활용. null이면 영구."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Moderator 권한이 회수(해제)된 일시. null => 현재 유효 상태.\n\n관리자가 권한 회수시 해당 시점을 기록, 감사 대응에 활용."},{"type":"null","format":"date-time","description":"Moderator 권한이 회수(해제)된 일시. null => 현재 유효 상태.\n\n관리자가 권한 회수시 해당 시점을 기록, 감사 대응에 활용."}],"description":"Moderator 권한이 회수(해제)된 일시. null => 현재 유효 상태.\n\n관리자가 권한 회수시 해당 시점을 기록, 감사 대응에 활용."}},"required":["member_id","assigned_by_admin_id","assigned_at"],"description":"Moderator(moderator 권한 부여) 레코드 생성/할당 요청용 타입. discussionboard_moderators의 컬럼과 매핑되며, member_id, assigned_by_admin_id, assigned_at은 필수이며, expires_at과 revoked_at은 선택(기본 null)입니다.\n\n일반적으로 admin 역할이 부여하며, member_id는 이미 시스템 회원이어야 합니다. 각 필드의 값과 동작은 정책 및 감사/관리 규칙을 따릅니다."},"IDiscussionboardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Moderator 할당 레코드의 PK(UUID). 시스템 어드민만 읽기/관리 가능.\n\n이 필드는 각 moderator role의 고유 식별자로, 관리 및 검색, 감사 로깅에 사용됩니다."},"member_id":{"type":"string","format":"uuid","description":"Moderator 할당 대상 discussionboard_members.id의 PK(UUID)."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"Moderator role 부여자인 admin의 discussionboard_admins.id (UUID)."},"assigned_at":{"type":"string","format":"date-time","description":"Moderator 권한 할당 시각(ISO8601, 타임존포함)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"임시 Moderator 종료 예정일(null이면 영구)."},{"type":"null","format":"date-time","description":"임시 Moderator 종료 예정일(null이면 영구)."}],"description":"임시 Moderator 종료 예정일(null이면 영구)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Moderator 권한 회수 일시. null이면 현직."},{"type":"null","format":"date-time","description":"Moderator 권한 회수 일시. null이면 현직."}],"description":"Moderator 권한 회수 일시. null이면 현직."}},"required":["id","member_id","assigned_by_admin_id","assigned_at"],"description":"Moderator(moderator 권한 임명) 레코드의 전체 정보. discussionboard_moderators 테이블 컬럼 1:1 매핑.\n\n각 필드는 Moderator로 지정된 유저, 임명자(Admin), 임명/만료/회수 시각 등 관리 감사 시나리오에 적합하게 설계. 응답 및 내부 권한 관리에서 전면 활용됨."},"IDiscussionboardModerator.IRequest":{"type":"object","properties":{"member_id":{"oneOf":[{"type":"string","format":"uuid","description":"moderator 검색시 member FK 필터용 (nullable)."},{"type":"null","format":"uuid","description":"moderator 검색시 member FK 필터용 (nullable)."}],"description":"moderator 검색시 member FK 필터용 (nullable)."},"assigned_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"지정자(Admin) 필터링에 사용 (nullable)."},{"type":"null","format":"uuid","description":"지정자(Admin) 필터링에 사용 (nullable)."}],"description":"지정자(Admin) 필터링에 사용 (nullable)."},"assigned_at":{"oneOf":[{"type":"string","format":"date-time","description":"지정 시점 범위 검색 등에서 사용 (nullable)."},{"type":"null","format":"date-time","description":"지정 시점 범위 검색 등에서 사용 (nullable)."}],"description":"지정 시점 범위 검색 등에서 사용 (nullable)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료(혹은 미래/과거) moderator 검색에 사용 (nullable)."},{"type":"null","format":"date-time","description":"만료(혹은 미래/과거) moderator 검색에 사용 (nullable)."}],"description":"만료(혹은 미래/과거) moderator 검색에 사용 (nullable)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"회수/비활성 moderator 상태 필터 (nullable)."},{"type":"null","format":"date-time","description":"회수/비활성 moderator 상태 필터 (nullable)."}],"description":"회수/비활성 moderator 상태 필터 (nullable)."}},"description":"Moderator 목록/검색/필터링을 위한 요청 타입. 지정자, 대상 멤버, 기간 등 다양한 컬럼(모두 선택적, null 허용) 필터링에 사용하며, discussionboard_moderators 테이블 필드와 직접 매핑됨.\n\n관리 대시보드, 자동 권한관리 등에서 고급 쿼리/필터 목적에 적합합니다.","required":[]},"IPageIDiscussionboardModerator":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerator"}}},"required":["pagination","data"],"description":"Moderator 엔티티(IPage<IEntity>)에 대한 페이징/목록 데이터 유형. 응답 구조의 표준이며, pagination메타 정보와 실제 회원 목록 배열을 제공합니다.\n\n관리자 대시보드/검색 결과 등 대량 조회시 사용됩니다."},"IDiscussionboardModerator.IUpdate":{"type":"object","properties":{"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"만료 날짜 변경. 임시 권한 연장/단축 또는 None → 영구 전환용."},{"type":"null","format":"date-time","description":"만료 날짜 변경. 임시 권한 연장/단축 또는 None → 영구 전환용."}],"description":"만료 날짜 변경. 임시 권한 연장/단축 또는 None → 영구 전환용."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Moderator 해제 일시(현재 시점 혹은 과거값). 비활성화/권한 해제 시에 업데이트."},{"type":"null","format":"date-time","description":"Moderator 해제 일시(현재 시점 혹은 과거값). 비활성화/권한 해제 시에 업데이트."}],"description":"Moderator 해제 일시(현재 시점 혹은 과거값). 비활성화/권한 해제 시에 업데이트."}},"description":"Moderator Update 요청용 타입. 만료일/회수일만 수정 가능(정책상 일반적으로 임명자나 대상 변경 불가).\n\n관리자 권한으로 임시 권한 연장, 조기 해제 등에 활용됩니다.","required":[]},"IDiscussionboardAdmin.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Admin 권한 할당 대상 discussionboard_members.id (UUID PK).\n\n할당될 멤버는 이미 시스템 등록 회원이어야 하며, 중복 할당은 불가합니다."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"관리자 권한을 부여한 admin의 discussionboard_admins.id (UUID).\n\n자기 임명(bootstrap) 케이스 예외적으로 허용될 수 있으나, 원칙적으로 다른 existing admin이어야 합니다."},"assigned_at":{"type":"string","format":"date-time","description":"권한 할당 시각(ISO 8601, 타임존 포함). 관리자 관리감사 목적."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"관리자 권한 회수 시간. null은 현재 유효 관리자임을 의미."},{"type":"null","format":"date-time","description":"관리자 권한 회수 시간. null은 현재 유효 관리자임을 의미."}],"description":"관리자 권한 회수 시간. null은 현재 유효 관리자임을 의미."}},"required":["member_id","assigned_by_admin_id","assigned_at"],"description":"Admin 권한 할당 생성 요청 타입. discussionboard_admins 컬럼에 1:1 매핑.\n\n관리자 지정, 부여자 및 할당시각 필수. 회수시 revoked_at을 업데이트합니다."},"IDiscussionboardAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Admin role assignment 레코드 PK. 시스템이 자동 생성 및 관리. 감사 및 권한조회시 키로 사용."},"member_id":{"type":"string","format":"uuid","description":"Admin 지정 대상 discussionboard_members.id."},"assigned_by_admin_id":{"type":"string","format":"uuid","description":"할당(승인) admin의 discussionboard_admins.id."},"assigned_at":{"type":"string","format":"date-time","description":"Admin 권한이 할당된 시각입니다."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"관리자 권한 회수/해제 일시(null시 현재 유효 관리자로 간주)."},{"type":"null","format":"date-time","description":"관리자 권한 회수/해제 일시(null시 현재 유효 관리자로 간주)."}],"description":"관리자 권한 회수/해제 일시(null시 현재 유효 관리자로 간주)."}},"required":["id","member_id","assigned_by_admin_id","assigned_at"],"description":"discussionboard_admins 테이블 row 전체 정보. 보안, 감사, 관리 대시보드 결과용 엔터티 타입.\n\n각 필드는 이력/할당/회수 정보를 상세히 담으며, 정책적 review 및 감사 요구에 부합합니다."},"IDiscussionboardAdmin.IRequest":{"type":"object","properties":{"member_id":{"oneOf":[{"type":"string","format":"uuid","description":"관리자 지정 대상 회원 FK필터. nullable."},{"type":"null","format":"uuid","description":"관리자 지정 대상 회원 FK필터. nullable."}],"description":"관리자 지정 대상 회원 FK필터. nullable."},"assigned_by_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"부여 관리자 FK필터."},{"type":"null","format":"uuid","description":"부여 관리자 FK필터."}],"description":"부여 관리자 FK필터."},"assigned_at":{"oneOf":[{"type":"string","format":"date-time","description":"부여 시각 기간/포인트 필터링."},{"type":"null","format":"date-time","description":"부여 시각 기간/포인트 필터링."}],"description":"부여 시각 기간/포인트 필터링."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"회수 여부/비활성 필드 검색용."},{"type":"null","format":"date-time","description":"회수 여부/비활성 필드 검색용."}],"description":"회수 여부/비활성 필드 검색용."}},"description":"관리자(Admin) 리스트/검색/필터 요청에 사용하는 타입입니다. 모두 선택적이며 discussionboard_admins 의 각 컬럼 대응.\n\n정책 감사/관리 대시보드에 활용 가능합니다.","required":[]},"IPageIDiscussionboardAdmin":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardAdmin"}}},"required":["pagination","data"],"description":"Admin 엔티티(IPage<IEntity>) 표준 페이지네이션/목록 응답 타입입니다. pagination 메타와 데이터 배열 포함.\n\n관리자 검색, 감사 대용량 조회 등 활용."},"IDiscussionboardAdmin.IUpdate":{"type":"object","properties":{"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"관리자 권한 회수(해제) 시점을 명시. 현재 시각 혹은 과거 일시로 입력\n\nnull에서 → 값으로 전환시 권한 효력 상실 의미이며, 해제시만 변경해야 함."},{"type":"null","format":"date-time","description":"관리자 권한 회수(해제) 시점을 명시. 현재 시각 혹은 과거 일시로 입력\n\nnull에서 → 값으로 전환시 권한 효력 상실 의미이며, 해제시만 변경해야 함."}],"description":"관리자 권한 회수(해제) 시점을 명시. 현재 시각 혹은 과거 일시로 입력\n\nnull에서 → 값으로 전환시 권한 효력 상실 의미이며, 해제시만 변경해야 함."}},"description":"Admin 권한 임명 레코드의 업데이트 요청에 사용되는 타입. 수정가능 컬럼은 revoked_at 하나입니다.\n\n해지 혹은 권한 비활성화 정책에 따라 revoked_at만 직접 업데이트합니다.","required":[]},"IDiscussionboardChannel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique channel code for reference in API/config/logic. Example: 'pol', 'econ'. Channel codes must be unique, short, and facilitate lookup or automation as described in the Prisma schema for 'discussionboard_channels'.\n\nReferenced in UI and logic for organization and navigation. Must be provided explicitly at creation."},"name":{"type":"string","description":"Channel name for display and navigation. Example: 'Politics'. Human-readable label, not derived. Used in forum navigation and UI labeling per schema comments. Required for creation."},"description":{"oneOf":[{"type":"string","description":"Expanded channel explanation for user-facing UI and accessibility.\n\nOptional, can give context to UI or help clarify a channel's specific purpose. May be set to null. Matches Prisma column description."},{"type":"null","description":"Expanded channel explanation for user-facing UI and accessibility.\n\nOptional, can give context to UI or help clarify a channel's specific purpose. May be set to null. Matches Prisma column description."}],"description":"Expanded channel explanation for user-facing UI and accessibility.\n\nOptional, can give context to UI or help clarify a channel's specific purpose. May be set to null. Matches Prisma column description."},"position":{"type":"integer","description":"Channel order in UI or navigation. Used for manual arrangement of channels in administrator UI. Defined as atomic (not calculated), per Prisma schema field comment."},"active":{"type":"boolean","description":"Is channel active/visible? Enables archiving/soft delete logic as per requirements. Not derived, atomic per schema."}},"required":["code","name","position","active"],"description":"Channel creation request for the discussionboard_channels entity.\n\nBased on the Prisma model comments: used to organize top-level discussion boards (such as 'Politics', 'Economics'). Requires unique code, label, optional description, order/position, and active flag. No extraneous properties allowed."},"IDiscussionboardChannel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique channel row identifier, as defined in the Prisma schema for 'discussionboard_channels'.\n\nRequired for entity retrieval, linking, and audit."},"code":{"type":"string","description":"Unique channel code for reference in API/config/logic. Must be unique and non-null as per schema. Used for programmatic lookup and organization."},"name":{"type":"string","description":"Human-readable channel name label for navigation and display."},"description":{"oneOf":[{"type":"string","description":"Optional expanded channel explanation, used for accessibility and UI tooltips."},{"type":"null","description":"Optional expanded channel explanation, used for accessibility and UI tooltips."}],"description":"Optional expanded channel explanation, used for accessibility and UI tooltips."},"position":{"type":"integer","description":"UI/manual ordering integer for channels. Lower values generally appear first; not computed."},"active":{"type":"boolean","description":"Indicates if this channel is currently active/visible for new content. Implements archiving and soft-delete logic (not deletion)."},"created_at":{"type":"string","format":"date-time","description":"Channel creation timestamp for audit, order, and compliance logging. ISO 8601 UTC timestamp from Prisma schema."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp for channel entity. Supports audit and change tracking. Also ISO 8601 UTC."}},"required":["id","code","name","position","active","created_at","updated_at"],"description":"A channel in the forum platform (e.g., 'Politics', 'Economics'). Represents a top-level partition/container for organizing boards and sections, as defined in the Prisma schema 'discussionboard_channels'. Fully describes all atomic fields and audit info. No additional fields present."},"IDiscussionboardChannel.IRequest":{"type":"object","properties":{"code":{"oneOf":[{"type":"string","description":"Filter/search by channel code (partial/substring supported). Optional; null means no filter applied."},{"type":"null","description":"Filter/search by channel code (partial/substring supported). Optional; null means no filter applied."}],"description":"Filter/search by channel code (partial/substring supported). Optional; null means no filter applied."},"name":{"oneOf":[{"type":"string","description":"Filter/search by channel name (partial/substring supported). Optional; null means not used."},{"type":"null","description":"Filter/search by channel name (partial/substring supported). Optional; null means not used."}],"description":"Filter/search by channel name (partial/substring supported). Optional; null means not used."},"active":{"oneOf":[{"type":"boolean","description":"Filter/search by active status (true/false/null)."},{"type":"null","description":"Filter/search by active status (true/false/null)."}],"description":"Filter/search by active status (true/false/null)."},"position":{"oneOf":[{"type":"integer","description":"Filter/search channels by UI/manual position (optional)."},{"type":"null","description":"Filter/search channels by UI/manual position (optional)."}],"description":"Filter/search channels by UI/manual position (optional)."},"limit":{"oneOf":[{"type":"integer","description":"Page limit for pagination (optional, default may be 100 if not provided as in IPage.IRequest)."},{"type":"null","description":"Page limit for pagination (optional, default may be 100 if not provided as in IPage.IRequest)."}],"description":"Page limit for pagination (optional, default may be 100 if not provided as in IPage.IRequest)."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (optional, as defined in IPage.IRequest)."},{"type":"null","description":"Page number for pagination (optional, as defined in IPage.IRequest)."}],"description":"Page number for pagination (optional, as defined in IPage.IRequest)."}},"description":"Request query for searching, filtering, or paginating the discussionboard_channels entity.\n\nMaps directly to the fields in the Prisma schema. Optional properties for search allow advanced admin UI/dashboard filtering on code, name, active, and UI position.","required":[]},"IPageIDiscussionboardChannel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardChannel"},"description":"List of channel objects as results for the current page."}},"required":["pagination","data"],"description":"Paginated response for channel record search on discussionboard_channels entity. Uses IPage envelope with channel record array (per IPage<T> and schema requirements)."},"IDiscussionboardChannel.IUpdate":{"type":"object","properties":{"code":{"oneOf":[{"type":"string","description":"Unique channel code for API/config reference. Updatable; must remain unique per Prisma schema; can be set to null to not update."},{"type":"null","description":"Unique channel code for API/config reference. Updatable; must remain unique per Prisma schema; can be set to null to not update."}],"description":"Unique channel code for API/config reference. Updatable; must remain unique per Prisma schema; can be set to null to not update."},"name":{"oneOf":[{"type":"string","description":"Human readable channel name for display. Optional (null means not updated)."},{"type":"null","description":"Human readable channel name for display. Optional (null means not updated)."}],"description":"Human readable channel name for display. Optional (null means not updated)."},"description":{"oneOf":[{"type":"string","description":"Optional expanded explanation for this channel. May update or set to null (clear description)."},{"type":"null","description":"Optional expanded explanation for this channel. May update or set to null (clear description)."}],"description":"Optional expanded explanation for this channel. May update or set to null (clear description)."},"position":{"oneOf":[{"type":"integer","description":"UI order integer, allows updating manual navigation sequence. Null means no update."},{"type":"null","description":"UI order integer, allows updating manual navigation sequence. Null means no update."}],"description":"UI order integer, allows updating manual navigation sequence. Null means no update."},"active":{"oneOf":[{"type":"boolean","description":"Flag for activation/archiving. Null means not updated."},{"type":"null","description":"Flag for activation/archiving. Null means not updated."}],"description":"Flag for activation/archiving. Null means not updated."}},"description":"Patch object for updating a channel in the discussionboard_channels table. All properties optional except at least one must be present. Each field strictly matches schema columns.","required":[]},"IDiscussionboardSection.ICreate":{"type":"object","properties":{"discussionboard_channel_id":{"type":"string","format":"uuid","description":"FK to discussionboard_channels.id. Each section must belong to a channel. Required, validated as UUID. Matches relational modeling in ERD and Prisma schema for discussionboard_sections."},"code":{"type":"string","description":"Unique code for API/config reference. E.g., 'asia', 'us', 'policy'. Must be unique within channel; supports navigation, lookup, automation. Not duplicated or denormalized."},"name":{"type":"string","description":"Section name for UI. E.g., 'Asia & Pacific Policy'. Human readable label; not derived."},"description":{"oneOf":[{"type":"string","description":"Optional section explanation or summary, supporting contextual browsing/accessibility. Nullable."},{"type":"null","description":"Optional section explanation or summary, supporting contextual browsing/accessibility. Nullable."}],"description":"Optional section explanation or summary, supporting contextual browsing/accessibility. Nullable."},"position":{"type":"integer","description":"Order for UI/manual section navigation (atomic/not computed)."},"active":{"type":"boolean","description":"Enables/disables section for archiving/soft-delete logic; not derived."}},"required":["discussionboard_channel_id","code","name","position","active"],"description":"Section creation request object. Creates a new partition under a specific channel as described in the Prisma schema for discussionboard_sections. Each section is defined by its parent channel, unique code, name, position, and active status. Optional description."},"IDiscussionboardSection":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique primary key for the section row as modeled in Prisma."},"discussionboard_channel_id":{"type":"string","format":"uuid","description":"FK to parent's channel id; required for navigation hierarchy."},"code":{"type":"string","description":"Unique section code for programmatic lookup/routing; enforced unique per channel."},"name":{"type":"string","description":"Human readable label for navigation and UI display."},"description":{"oneOf":[{"type":"string","description":"Optional longer explanation or summary; supports accessibility."},{"type":"null","description":"Optional longer explanation or summary; supports accessibility."}],"description":"Optional longer explanation or summary; supports accessibility."},"position":{"type":"integer","description":"Manual ordering value for navigation/UI. Lower values are higher priority."},"active":{"type":"boolean","description":"Whether section is visible/enabled routing/archiving. Per business logic maps to soft-archiving or navigation hiding."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when section was created; used for compliance/audit."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update."}},"required":["id","discussionboard_channel_id","code","name","position","active","created_at","updated_at"],"description":"A section within a channel, forming the second level of forum hierarchy (Channel→Section→Board). Maps to topics/subcategories in navigation and organization. All required and atomic fields per the Prisma schema and ERD for discussionboard_sections."},"IDiscussionboardSection.IRequest":{"type":"object","properties":{"discussionboard_channel_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by parent channel id (optional). UUID format; if null, no filter."},{"type":"null","format":"uuid","description":"Filter by parent channel id (optional). UUID format; if null, no filter."}],"description":"Filter by parent channel id (optional). UUID format; if null, no filter."},"code":{"oneOf":[{"type":"string","description":"Filter by code (optional; partial match supported)."},{"type":"null","description":"Filter by code (optional; partial match supported)."}],"description":"Filter by code (optional; partial match supported)."},"name":{"oneOf":[{"type":"string","description":"Filter by section name (partial match)."},{"type":"null","description":"Filter by section name (partial match)."}],"description":"Filter by section name (partial match)."},"active":{"oneOf":[{"type":"boolean","description":"Filter by section enabled/archive status."},{"type":"null","description":"Filter by section enabled/archive status."}],"description":"Filter by section enabled/archive status."},"position":{"oneOf":[{"type":"integer","description":"Filter by UI manual position (optional)."},{"type":"null","description":"Filter by UI manual position (optional)."}],"description":"Filter by UI manual position (optional)."},"limit":{"oneOf":[{"type":"integer","description":"Number of results per page (optional)."},{"type":"null","description":"Number of results per page (optional)."}],"description":"Number of results per page (optional)."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (optional)."},{"type":"null","description":"Page number for pagination (optional)."}],"description":"Page number for pagination (optional)."}},"description":"Search/filter object for querying or paginating discussionboard_sections records, as in admin or navigation UI. All properties optional, mapped directly to schema fields for flexible queries.","required":[]},"IPageIDiscussionboardSection":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardSection"},"description":"List of section objects as included in this page."}},"required":["pagination","data"],"description":"Envelope for paginated lists of section records from discussionboard_sections. Used for admin UIs and dashboards per IPage<T> pattern."},"IDiscussionboardSection.IUpdate":{"type":"object","properties":{"discussionboard_channel_id":{"oneOf":[{"type":"string","format":"uuid","description":"Allows moving section to a different channel. Null = no change."},{"type":"null","format":"uuid","description":"Allows moving section to a different channel. Null = no change."}],"description":"Allows moving section to a different channel. Null = no change."},"code":{"oneOf":[{"type":"string","description":"May patch section code for programmatic lookup/routing (unique constraint in channel enforced)."},{"type":"null","description":"May patch section code for programmatic lookup/routing (unique constraint in channel enforced)."}],"description":"May patch section code for programmatic lookup/routing (unique constraint in channel enforced)."},"name":{"oneOf":[{"type":"string","description":"Patch label for navigation and user display. Null = no update."},{"type":"null","description":"Patch label for navigation and user display. Null = no update."}],"description":"Patch label for navigation and user display. Null = no update."},"description":{"oneOf":[{"type":"string","description":"Patch expanded description/summary; may set to null for erase."},{"type":"null","description":"Patch expanded description/summary; may set to null for erase."}],"description":"Patch expanded description/summary; may set to null for erase."},"position":{"oneOf":[{"type":"integer","description":"Patch section UI/manual navigation order."},{"type":"null","description":"Patch section UI/manual navigation order."}],"description":"Patch section UI/manual navigation order."},"active":{"oneOf":[{"type":"boolean","description":"Patch activation (soft archive/restore per business rules)."},{"type":"null","description":"Patch activation (soft archive/restore per business rules)."}],"description":"Patch activation (soft archive/restore per business rules)."}},"description":"Patch/update object for discussionboard_sections row. At least one property must be present; all directly mapped to schema fields.","required":[]},"IDiscussionboardConfiguration.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Configuration key for this setting. Required and unique per schema; example: 'max_post_per_hour'. Used for admin lookup and automation."},"value":{"oneOf":[{"type":"string","description":"String value for this config entry (null allowed for unset/optional). All values stored as string, conversion happens at app layer."},{"type":"null","description":"String value for this config entry (null allowed for unset/optional). All values stored as string, conversion happens at app layer."}],"description":"String value for this config entry (null allowed for unset/optional). All values stored as string, conversion happens at app layer."},"description":{"oneOf":[{"type":"string","description":"Optional human description for admin/support. For UI tooltips, dashboard, etc."},{"type":"null","description":"Optional human description for admin/support. For UI tooltips, dashboard, etc."}],"description":"Optional human description for admin/support. For UI tooltips, dashboard, etc."}},"required":["key"],"description":"New configuration creation request. Strictly matches fields in the Prisma schema for discussionboard_configurations. Must supply unique key (string). Value and description optional."},"IDiscussionboardConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key as a string UUID. Uniquely identifies the configuration entry in the table. Auto-generated at creation; used for reference/audit."},"key":{"type":"string","description":"Unique string denoting this configuration item's key. Used for identification, queries, automation, and enforcement of uniqueness in system config management."},"value":{"oneOf":[{"type":"string","description":"Actual configuration value stored as a string (always string or null as per flexible system design). Used for toggling feature flags, runtime control, or admin configuration panels."},{"type":"null","description":"Actual configuration value stored as a string (always string or null as per flexible system design). Used for toggling feature flags, runtime control, or admin configuration panels."}],"description":"Actual configuration value stored as a string (always string or null as per flexible system design). Used for toggling feature flags, runtime control, or admin configuration panels."},"description":{"oneOf":[{"type":"string","description":"Optional admin/user-facing description for documentation—nullable per schema."},{"type":"null","description":"Optional admin/user-facing description for documentation—nullable per schema."}],"description":"Optional admin/user-facing description for documentation—nullable per schema."},"created_at":{"type":"string","format":"date-time","description":"Audit field: timestamp when the configuration entry was created."},"updated_at":{"type":"string","format":"date-time","description":"Audit field: timestamp of last modification for this config row."}},"required":["id","key","created_at","updated_at"],"description":"System configuration row for discussion board application.\n\nContains all atomic fields for a configuration option; used in admin dashboards, audit logs, and feature toggling in platform runtime."},"IDiscussionboardConfiguration.IRequest":{"type":"object","properties":{"key":{"type":"string","description":"The configuration key to filter by, as defined in the discussionboard_configurations table. This is a string used to reference a specific configuration setting, such as 'max_post_per_hour'.\n\nAligns with the key property in the schema: unique per row, used for lookups, automation, or configuration management as described in the Prisma DB schema and business requirement documentation."},"value":{"oneOf":[{"type":"string","description":"The configuration value to filter for. It is always a string in the database for flexibility, but may be null (in order to match unset/optional values). For example: to search for configurations with value 'true', pass value='true'.\n\nAligns with the value field in the schema, which is nullable and always stored as a string; referenced in audit/compliance and admin filtering use cases."},{"type":"null","description":"The configuration value to filter for. It is always a string in the database for flexibility, but may be null (in order to match unset/optional values). For example: to search for configurations with value 'true', pass value='true'.\n\nAligns with the value field in the schema, which is nullable and always stored as a string; referenced in audit/compliance and admin filtering use cases."}],"description":"The configuration value to filter for. It is always a string in the database for flexibility, but may be null (in order to match unset/optional values). For example: to search for configurations with value 'true', pass value='true'.\n\nAligns with the value field in the schema, which is nullable and always stored as a string; referenced in audit/compliance and admin filtering use cases."},"description":{"oneOf":[{"type":"string","description":"An optional description filter for searching among configuration records, as stored in the discussionboard_configurations.description column. Use to find config rows with specific text in the admin panel or config list.\n\nDescription is a user-facing or admin note for a given configuration setting; aligns with platform management/clarification as in the schema and requirements documents."},{"type":"null","description":"An optional description filter for searching among configuration records, as stored in the discussionboard_configurations.description column. Use to find config rows with specific text in the admin panel or config list.\n\nDescription is a user-facing or admin note for a given configuration setting; aligns with platform management/clarification as in the schema and requirements documents."}],"description":"An optional description filter for searching among configuration records, as stored in the discussionboard_configurations.description column. Use to find config rows with specific text in the admin panel or config list.\n\nDescription is a user-facing or admin note for a given configuration setting; aligns with platform management/clarification as in the schema and requirements documents."}},"description":"Filter/search request schema for the discussionboard_configurations table.\n\nAllows admins (or privileged users) to specify filtering/searching fields based on key, value, or description. Supports business requirement for scalable management of runtime configurations without referencing fields outside the schema. Null values enable searching for unset/optional records.","required":[]},"IPageIDiscussionboardConfiguration":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardConfiguration"},"description":"Array of configuration record results matching the search/filter and pagination settings.\n\nEach item reflects an atomic row in the discussionboard_configurations table and contains only properties defined in the schema."}},"required":["pagination","data"],"description":"Paginated return structure for a filtered search of discussionboard_configurations.\n\nThis data structure is used to deliver results to dashboards, listing admin pages, or developer inspection tools, in compliance with audit and platform manageability requirements."},"IDiscussionboardConfiguration.IUpdate":{"type":"object","properties":{"key":{"type":"string","description":"The configuration key. Must match the constraints of the discussionboard_configurations.key column.\n\nWhen supplied in an update, may be used to set/rename the key for this configuration record (admin only). Uniqueness is enforced at database level as required by business logic."},"value":{"oneOf":[{"type":"string","description":"The updated configuration value (as a string or null for an unset option). Always follows the type of the schema value field (string, nullable)."},{"type":"null","description":"The updated configuration value (as a string or null for an unset option). Always follows the type of the schema value field (string, nullable)."}],"description":"The updated configuration value (as a string or null for an unset option). Always follows the type of the schema value field (string, nullable)."},"description":{"oneOf":[{"type":"string","description":"Optional admin-facing description to update on the configuration record. Allows clarification or audit note modification as managed in the discussionboard_configurations table."},{"type":"null","description":"Optional admin-facing description to update on the configuration record. Allows clarification or audit note modification as managed in the discussionboard_configurations table."}],"description":"Optional admin-facing description to update on the configuration record. Allows clarification or audit note modification as managed in the discussionboard_configurations table."}},"description":"Update payload for a discussionboard_configurations record.\n\nOnly fields present in the schema may be modified, supporting platform runtime reconfiguration, audit, or documentation needs. Used in admin update workflows or compliance edit screens.","required":[]},"IDiscussionboardNotification.ICreate":{"type":"object","properties":{"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"The entity or user that is the intended recipient of the notification, nullable for system-wide notifications. UUID as per discussionboard_notifications.target_id.\n\nAllows targeting individual users/entities, or unset for global notifications."},{"type":"null","format":"uuid","description":"The entity or user that is the intended recipient of the notification, nullable for system-wide notifications. UUID as per discussionboard_notifications.target_id.\n\nAllows targeting individual users/entities, or unset for global notifications."}],"description":"The entity or user that is the intended recipient of the notification, nullable for system-wide notifications. UUID as per discussionboard_notifications.target_id.\n\nAllows targeting individual users/entities, or unset for global notifications."},"type":{"type":"string","description":"Event type string (e.g., 'user_mention', 'system_announcement') indicating the kind of event that triggered this notification.\n\nReferenced by notification workflows and configures display/routing in notification UIs."},"title":{"type":"string","description":"Short summary or title for this notification event; human-readable, appears in UI and audit logs.\n\nMust not be null as per schema."},"body":{"oneOf":[{"type":"string","description":"Full message body for the notification. Optional per schema (nullable); may be null for minimal/status-only notifs."},{"type":"null","description":"Full message body for the notification. Optional per schema (nullable); may be null for minimal/status-only notifs."}],"description":"Full message body for the notification. Optional per schema (nullable); may be null for minimal/status-only notifs."},"delivered":{"type":"boolean","description":"Flag indicating whether delivery of the notification has been confirmed (true) or not (false). Fulfills audit/compliance columns."}},"required":["type","title","delivered"],"description":"Payload for creating a new notification log entry in discussionboard_notifications table.\n\nAllows system/admins to record a new notification with all required event details, in alignment with delivery workflows, audit trails, or notification dashboards."},"IDiscussionboardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The notification log's primary key UUID. Assigned by the system/database at creation. Used for direct referencing and audit queries."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."},{"type":"null","format":"uuid","description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."}],"description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."},"type":{"type":"string","description":"The type/category of the notification event (e.g., 'user_mention', 'system_announcement').\n\nUsed for workflow, filtering, or display in notifications panels."},"title":{"type":"string","description":"Short title/summary for the UI and audit logs, per schema specification."},"body":{"oneOf":[{"type":"string","description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."},{"type":"null","description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."}],"description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."},"delivered":{"type":"boolean","description":"Indicates if the notification has been delivered."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created, for audit/sync. Assigned by the system."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"If delivery confirmed, the actual timestamp; null otherwise."},{"type":"null","format":"date-time","description":"If delivery confirmed, the actual timestamp; null otherwise."}],"description":"If delivery confirmed, the actual timestamp; null otherwise."}},"required":["id","type","title","delivered","created_at"],"description":"Discussion board notification entity (audit log record).\n\nRepresents a single sent notification—including recipient, type, audit/compliance timestamps, and delivery flag. Fulfills requirements for system-wide/user notification traceability as described in platform and DB documentation."},"IDiscussionboardNotification.IRequest":{"type":"object","properties":{"type":{"type":"string","description":"Filter by notification type (string event type as used in the discussionboard_notifications.type column). e.g., 'user_mention', 'system_announcement', etc."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for notifications sent to this entity/user UUID. Aligns with discussionboard_notifications.target_id (nullable in schema)."},{"type":"null","format":"uuid","description":"Filter for notifications sent to this entity/user UUID. Aligns with discussionboard_notifications.target_id (nullable in schema)."}],"description":"Filter for notifications sent to this entity/user UUID. Aligns with discussionboard_notifications.target_id (nullable in schema)."},"delivered":{"type":"boolean","description":"Filter for notification delivery status: true for delivered, false for undelivered. Used for admin monitoring of notification workflows."},"title":{"type":"string","description":"Search/filter substring for notification title. Supports advanced query for notification dashboards using trgm-based search if configured in DB schema."}},"description":"Filter/search for notification log records in the discussionboard_notifications table.\n\nAllows platform administrators to filter by notification type, target recipient, delivery status, or partial title match for scalable audit and workflow monitoring. Only schema-supported fields are allowed.","required":[]},"IPageIDiscussionboardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotification"},"description":"Array of notification event records matching filter/search and pagination criteria."}},"required":["pagination","data"],"description":"Paginated response structure for notification search/list endpoints.\n\nUsed by admin dashboards, notification panels, or delivery audit tools. Complies with pagination best practices and audit traceability needs."},"Idiscussionboard_notifications":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The notification log's primary key UUID. Assigned by the system/database at creation. Used for direct referencing and audit queries."},"target_id":{"oneOf":[{"type":"string","format":"uuid","description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."},{"type":"null","format":"uuid","description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."}],"description":"Recipient entity/user UUID for personalized notifications. Nullable for system-wide or broadcast messages."},"type":{"type":"string","description":"The type/category of the notification event (e.g., 'user_mention', 'system_announcement').\n\nUsed for workflow, filtering, or display in notifications panels."},"title":{"type":"string","description":"Short title/summary for the UI and audit logs, per schema specification."},"body":{"oneOf":[{"type":"string","description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."},{"type":"null","description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."}],"description":"Full notification message. Used for display, audit trail, or compliance documentation. Nullable as per schema."},"delivered":{"type":"boolean","description":"Indicates if the notification has been delivered."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created, for audit/sync. Assigned by the system."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"If delivery confirmed, the actual timestamp; null otherwise."},{"type":"null","format":"date-time","description":"If delivery confirmed, the actual timestamp; null otherwise."}],"description":"If delivery confirmed, the actual timestamp; null otherwise."},"description":{"type":"string","description":"Discussion board notification entity (audit log record). Represents a single sent notification—including recipient, type, audit/compliance timestamps, and delivery flag. Fulfills requirements for system-wide/user notification traceability as described in platform and DB documentation."}},"required":["id","type","title","delivered","created_at","description"],"description":"Discussion board notification entity (audit log record).\n\nRepresents a single sent notification—including recipient, type, audit/compliance timestamps, and delivery flag. Fulfills requirements for system-wide/user notification traceability as described in platform and DB documentation."},"Idiscussionboard_notifications.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Updateable title for the notification log. Used for editing/annotating delivery audits or correcting UI-facing message summaries."},"body":{"oneOf":[{"type":"string","description":"Edit the message body (nullable per schema). Used for correcting/clarifying audit entries."},{"type":"null","description":"Edit the message body (nullable per schema). Used for correcting/clarifying audit entries."}],"description":"Edit the message body (nullable per schema). Used for correcting/clarifying audit entries."},"delivered":{"type":"boolean","description":"Modify delivery status of the notification; updated by system jobs or admin tools for compliance."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of delivery confirmation. Nullable per schema—for updating upon successful delivery acknowledgment."},{"type":"null","format":"date-time","description":"Timestamp of delivery confirmation. Nullable per schema—for updating upon successful delivery acknowledgment."}],"description":"Timestamp of delivery confirmation. Nullable per schema—for updating upon successful delivery acknowledgment."}},"description":"Update payload for a notification log record in discussionboard_notifications.\n\nEnables annotation, correction, or delivery-status workflow updates. Features only schema-permitted modifiable fields; supports audit, compliance, and UI integrity.","required":[]},"Idiscussionboard_settings.ICreate":{"type":"object","properties":{"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"Entity or area identifier for which the setting applies. Nullable for global context; aligns with discussionboard_settings.scope_id FK column as described in platform feature/settings documentation."},{"type":"null","format":"uuid","description":"Entity or area identifier for which the setting applies. Nullable for global context; aligns with discussionboard_settings.scope_id FK column as described in platform feature/settings documentation."}],"description":"Entity or area identifier for which the setting applies. Nullable for global context; aligns with discussionboard_settings.scope_id FK column as described in platform feature/settings documentation."},"scope_type":{"type":"string","description":"Scope type: identifies the context (e.g., 'channel', 'section', 'feature_flag'). Not an enum, normalized string as per schema."},"key":{"type":"string","description":"Unique setting key for the given scope/entity. Defines what the setting controls. Examples: 'moderation_policy', 'max_upload_size'. Must be unique in combination with scope_type and scope_id."},"value":{"oneOf":[{"type":"string","description":"Actual value of the setting (flag, configuration string, limit, etc). Nullable for unset/optional settings as in schema."},{"type":"null","description":"Actual value of the setting (flag, configuration string, limit, etc). Nullable for unset/optional settings as in schema."}],"description":"Actual value of the setting (flag, configuration string, limit, etc). Nullable for unset/optional settings as in schema."},"description":{"oneOf":[{"type":"string","description":"Optional human/admin-facing explanation for the setting (nullable, used for platform documentation and audit support)."},{"type":"null","description":"Optional human/admin-facing explanation for the setting (nullable, used for platform documentation and audit support)."}],"description":"Optional human/admin-facing explanation for the setting (nullable, used for platform documentation and audit support)."}},"required":["scope_type","key"],"description":"Payload for creating a per-feature/area setting record in discussionboard_settings table.\n\nAllows flexible creation of feature, entity, or channel/section-specific configuration flags. Used by privileged system actors for runtime managing of feature toggles, policies, or per-area adjustments. Only schema-supported fields are present."},"Idiscussionboard_settings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the settings record."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"Entity/context for the setting (nullable - may represent channel, section, or feature scope, as per application logic)."},{"type":"null","format":"uuid","description":"Entity/context for the setting (nullable - may represent channel, section, or feature scope, as per application logic)."}],"description":"Entity/context for the setting (nullable - may represent channel, section, or feature scope, as per application logic)."},"scope_type":{"type":"string","description":"Type indicator for the context/scope to which the setting applies (e.g., 'channel', 'section', 'feature_flag')."},"key":{"type":"string","description":"Key string for the setting (identifies the setting for application/component logic)."},"value":{"oneOf":[{"type":"string","description":"Value assigned to this setting (can be null to represent unset/optional)."},{"type":"null","description":"Value assigned to this setting (can be null to represent unset/optional)."}],"description":"Value assigned to this setting (can be null to represent unset/optional)."},"description":{"oneOf":[{"type":"string","description":"Optional description or note for this setting item."},{"type":"null","description":"Optional description or note for this setting item."}],"description":"Optional description or note for this setting item."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when record was created (for audit/compliance)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update, for compliance and business rule tracking."}},"required":["id","scope_type","key","created_at","updated_at"],"description":"Single record/resource for configuration settings, area, or feature toggles within the discussion board system.\n\nContains referenced context/scope info, setting key/value, and audit metadata."},"Idiscussionboard_settings.IRequest":{"type":"object","properties":{"scope_type":{"type":"string","description":"Filter for settings related to a specific context/scope (e.g., 'channel', 'section', 'feature_flag'). Normalized string, aligns with schema column."},"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter settings whose scope matches this UUID (nullable for global/unspecified). Maps to schema/table FK."},{"type":"null","format":"uuid","description":"Filter settings whose scope matches this UUID (nullable for global/unspecified). Maps to schema/table FK."}],"description":"Filter settings whose scope matches this UUID (nullable for global/unspecified). Maps to schema/table FK."},"key":{"type":"string","description":"Filter for a unique key within the specified scope. Example: 'moderation_policy'. Ensures only relevant settings are returned for the admin/feature query."},"value":{"oneOf":[{"type":"string","description":"Filter for settings with this value (string or null as per schema, e.g., 'true', '100', or null for unset)."},{"type":"null","description":"Filter for settings with this value (string or null as per schema, e.g., 'true', '100', or null for unset)."}],"description":"Filter for settings with this value (string or null as per schema, e.g., 'true', '100', or null for unset)."},"description":{"oneOf":[{"type":"string","description":"Optional filter by human-facing description string for setting."},{"type":"null","description":"Optional filter by human-facing description string for setting."}],"description":"Optional filter by human-facing description string for setting."}},"description":"Per-feature/area settings search/filter request.\n\nAll properties refer exclusively to fields in discussionboard_settings schema—enables operational dashboards, admin feature toggles interface, and bulk config review screens.","required":[]},"IPageIdiscussionboard_settings":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the current page of settings results.\n\nDefines the current page number, record limit, total count, and the total number of pages, referencing audit and UI navigation requirements from the business logic."},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_settings"},"description":"Array of discussionboard_settings records returned for the current page in the result set.\n\nEach entry adheres to the 'Idiscussionboard_settings' type, containing feature/area-specific configuration details, as described in the Prisma schema."}},"required":["pagination","data"],"description":"Paginated container for discussionboard_settings records, designed for admin or developer dashboard interfaces in the discussion board system.\n\nIncludes structured pagination information and a set of settings records, with all properties and requirements directly aligned with the database and business requirements."},"Idiscussionboard_settings.IUpdate":{"type":"object","properties":{"scope_id":{"oneOf":[{"type":"string","format":"uuid","description":"The entity or area identifier for which this setting applies. Nullable for global context as per schema. Must reference an existing entity if set; otherwise, leave null.\n\nReferences the 'scope_id' field from Prisma and is typically used for channel, section, or feature-level scoping."},{"type":"null","format":"uuid","description":"The entity or area identifier for which this setting applies. Nullable for global context as per schema. Must reference an existing entity if set; otherwise, leave null.\n\nReferences the 'scope_id' field from Prisma and is typically used for channel, section, or feature-level scoping."}],"description":"The entity or area identifier for which this setting applies. Nullable for global context as per schema. Must reference an existing entity if set; otherwise, leave null.\n\nReferences the 'scope_id' field from Prisma and is typically used for channel, section, or feature-level scoping."},"scope_type":{"type":"string","description":"Type of scope the setting refers to (e.g., 'channel', 'section', 'feature_flag'). Required string value for proper settings matching and context-specific configuration."},"key":{"type":"string","description":"Name of the setting key this record controls (e.g., 'moderation_policy', 'max_post_per_hour'). Used for precise config and UI lookups, must be unique per (scope_type, scope_id, key) tuple."},"value":{"oneOf":[{"type":"string","description":"The actual value or toggle for the given key/setting (can be nullable for unset/optional fields)."},{"type":"null","description":"The actual value or toggle for the given key/setting (can be nullable for unset/optional fields)."}],"description":"The actual value or toggle for the given key/setting (can be nullable for unset/optional fields)."},"description":{"oneOf":[{"type":"string","description":"Description/notes for admin clarity and audit trail, optional as per schema."},{"type":"null","description":"Description/notes for admin clarity and audit trail, optional as per schema."}],"description":"Description/notes for admin clarity and audit trail, optional as per schema."}},"required":["scope_type","key"],"description":"Request body for updating a discussionboard_settings record.\n\nMaps to the corresponding updatable columns from the Prisma schema. Only fields defined in the underlying table can be updated, and any combination is allowed so long as unique constraints and foreign keys are respected."},"Idiscussionboard_boards.ICreate":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Reference to the category (discussionboard_board_categories.id) under which this board will be created. Must reference an existing category for navigation grouping and organization. Required."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Reference to the section (discussionboard_sections.id) this board will belong to. Required, must be a valid, existing section in the hierarchy."},"name":{"type":"string","description":"Human-readable board name to display in UI navigation. Required; must not duplicate existing board names."},"code":{"type":"string","description":"Unique, programmatic code identifying the board (used in routing and internal lookups). Must be unique per schema. Required."},"description":{"oneOf":[{"type":"string","description":"Optional textual description for hover tooltips, previews, or UI panels; may be null according to schema."},{"type":"null","description":"Optional textual description for hover tooltips, previews, or UI panels; may be null according to schema."}],"description":"Optional textual description for hover tooltips, previews, or UI panels; may be null according to schema."},"is_active":{"type":"boolean","description":"Indicates whether the board is currently active and can receive new threads/posts. Must be set on board creation."},"is_visible":{"type":"boolean","description":"Defines whether the board appears in public-facing navigation or is hidden for staff/private boards. Required; ensures proper visibility per business logic."}},"required":["discussionboard_board_category_id","discussionboard_section_id","name","code","is_active","is_visible"],"description":"Request structure for creating a new discussionboard_boards entity (forum board).\n\nAll fields are directly mapped to the schema for atomic board creation. Categories and sections must be defined in the system and referenced via UUID. Business rules enforce unique code and correct assignment within forum structure."},"Idiscussionboard_boards":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the board record (primary key in discussionboard_boards schema)."},"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"UUID foreign key referencing the board's category, per schema."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"UUID foreign key referencing the section in which the board resides, per schema."},"name":{"type":"string","description":"Board name for UI display and search."},"code":{"type":"string","description":"Unique code for routing/programmatic referencing (unique per schema constraints)."},"description":{"oneOf":[{"type":"string","description":"Optional detailed description for UI tooltips, previews, or management interfaces."},{"type":"null","description":"Optional detailed description for UI tooltips, previews, or management interfaces."}],"description":"Optional detailed description for UI tooltips, previews, or management interfaces."},"is_active":{"type":"boolean","description":"True if board is currently accepting threads/posts; false if archived or disabled."},"is_visible":{"type":"boolean","description":"True if board is visible to users, false if hidden for private/staff boards, per schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of board creation (ISO 8601, as written by system for audit trail)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to board metadata/structure (ISO 8601)."}},"required":["id","discussionboard_board_category_id","discussionboard_section_id","name","code","is_active","is_visible","created_at","updated_at"],"description":"Board entity resource for discussion boards, matching all columns in the discussionboard_boards table from Prisma schema and business requirements.\n\nContains full metadata required for navigation, moderation, and platform configuration. All foreign key references (category, section) must correspond to actual entities in their respective domains."},"Idiscussionboard_boards.IRequest":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Filter boards by their assigned category (discussionboard_board_category_id). Must be a valid category UUID."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Filter boards belonging to a specific section. Must be a valid section UUID."},"name":{"type":"string","description":"Search or filter by board name (supports substring or trigram matching for quick lookups)."},"code":{"type":"string","description":"Search or filter by programmatic code (case-sensitive/exact match for lookup scenarios)."},"is_active":{"type":"boolean","description":"Filter for boards currently marked active (true) or inactive (false). Optional."},"is_visible":{"type":"boolean","description":"Filter for boards that are visible (true) or hidden (false). Optional."},"created_at":{"type":"string","format":"date-time","description":"Optionally filter for boards created at a specific time or time range (use operator logic in client as required)."},"updated_at":{"type":"string","format":"date-time","description":"Optionally filter for boards last updated at a specific time or time range."}},"description":"Request filter type for querying or paginating boards in the discussionboard_boards table.\n\nIncludes all queryable fields derived directly from the Prisma schema, supporting admin interfaces, dashboards, and API-based retrieval. Filters are typically optional and can be combined for advanced search. Date/time filters may use extended operator formats (not specified by JSON schema—configure at API layer as needed).","required":[]},"IPageIdiscussionboard_boards":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the current board query result (page, limit, total, etc.), supporting scalable board listing."},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_boards"},"description":"Array of board entity records for the current page in the result set, fully matching schema definition."}},"required":["pagination","data"],"description":"Paginated result type for board table queries in discussionboard_boards.\n\nBundles pagination details and the currently returned boards as a page, supporting admin or moderation listing workflows."},"Idiscussionboard_boards.IUpdate":{"type":"object","properties":{"discussionboard_board_category_id":{"type":"string","format":"uuid","description":"Reference to the new category for the board (if being changed). Must reference a valid category UUID or be omitted for no change."},"discussionboard_section_id":{"type":"string","format":"uuid","description":"Reference to the section to which the board is being reassigned, if changing. Must reference a valid section UUID."},"name":{"type":"string","description":"Update name label for board in navigation or listings."},"code":{"type":"string","description":"Update programmatic code (must remain unique per schema constraint)."},"description":{"oneOf":[{"type":"string","description":"Update short/long description, or remove by setting to null."},{"type":"null","description":"Update short/long description, or remove by setting to null."}],"description":"Update short/long description, or remove by setting to null."},"is_active":{"type":"boolean","description":"Set board to active/inactive (archive toggle for admin workflows)."},"is_visible":{"type":"boolean","description":"Set board to user-visible or hidden (staff/private)."}},"description":"Request body for updating a board record in the discussionboard_boards table.\n\nAll fields are mapped to updatable Prisma schema columns. Any subset of these fields can be included depending on the update scenario; only actual fields listed here can be updated.","required":[]},"IDiscussionboardBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Human-readable category name for organization/navigation (must be unique per schema). Required."},"code":{"type":"string","description":"Unique code for programmatic referencing, must be unique for category lookup/routing. Required."},"description":{"oneOf":[{"type":"string","description":"Short description for admin/mod UI tooltips, navigation, or preview. Optional per schema."},{"type":"null","description":"Short description for admin/mod UI tooltips, navigation, or preview. Optional per schema."}],"description":"Short description for admin/mod UI tooltips, navigation, or preview. Optional per schema."},"position":{"type":"integer","description":"Manual ordering integer for UI navigation; used for sorting categories in admin panels."}},"required":["name","code","position"],"description":"Request type for creating a new board category entity in discussionboard_board_categories table.\n\nAll properties required by business and Prisma schema for category creation. Unique constraints on name and code must be respected by implementation."},"IDiscussionboardBoardCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the board category record (primary key, UUID)."},"name":{"type":"string","description":"Human-readable name of the category as stored for display, search, or admin config."},"code":{"type":"string","description":"Unique programmatic code for the category, as referenced in routing, UI, and API."},"description":{"oneOf":[{"type":"string","description":"Short category description for admin panels, tooltips, or end user preview (nullable per schema)."},{"type":"null","description":"Short category description for admin panels, tooltips, or end user preview (nullable per schema)."}],"description":"Short category description for admin panels, tooltips, or end user preview (nullable per schema)."},"position":{"type":"integer","description":"Ordering integer for navigation or display purposes. Admin assignable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of category creation, set by system for audit/ordering."}},"required":["id","name","code","position","created_at"],"description":"Board category entity resource, matching all columns in the discussionboard_board_categories table from Prisma schema.\n\nContains full metadata required for category navigation and assignment in the discussion board structure."},"IDiscussionboardBoardCategory.IRequest":{"type":"object","properties":{"name":{"type":"string","description":"Optional filter by human-readable name; supports partial/trgm matching for admin search."},"code":{"type":"string","description":"Optional filter by category code for precise lookup."},"description":{"type":"string","description":"Optional filter by description content (search for UI, admin references)."},"position":{"type":"integer","description":"Request filtering/sorting by navigation order integer."},"created_at":{"type":"string","format":"date-time","description":"Request filtering or sorting by creation timestamp."}},"description":"Request body for listing/filtering/searching board categories in the discussionboard_board_categories table. Includes all queryable fields allowed by the schema for UI/admin dashboards.","required":[]},"IPageIDiscussionboardBoardCategory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination details: current page, limit, total count, total pages, as required for scalable admin/category browsing."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardCategory"},"description":"List of category entities for the current page, each matching the board category resource schema."}},"required":["pagination","data"],"description":"Paginated list envelope for board category table searches in discussionboard_board_categories.\n\nUsed by admin dashboards, configuration panels, or navigation editors for scalable retrieval of board category objects."},"IDiscussionboardBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Human-readable category name for display and navigation (must remain unique if changed, per schema uniqueness constraint)."},"code":{"type":"string","description":"Programmatic code for category lookup/routing (optional update, must remain unique)."},"description":{"oneOf":[{"type":"string","description":"Update short description for the category (may be set to null to remove)."},{"type":"null","description":"Update short description for the category (may be set to null to remove)."}],"description":"Update short description for the category (may be set to null to remove)."},"position":{"type":"integer","description":"Ordering integer for this category, used in navigation/UID display, admin configurable."}},"description":"Update type for board category entity (discussionboard_board_categories table).\n\nAll updatable properties are exactly as defined in the schema. Fields omitted from the request remain unchanged; only fields listed here are mutable via this API.","required":[]},"IDiscussionboardBoardSetting.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board reference for this settings row's ID. Each board has exactly one associated settings record; enforced via unique index (1:1). This UUID points to the discussionboard_boards table and ensures settings are strictly board-scoped.\n\nReferenced from 'discussionboard_board_settings' in the Boards domain. Example: '9323dc7d-550f-4fbc-b254-9e89d2794217'."},"is_locked":{"type":"boolean","description":"Boolean flag indicating whether the board is currently read-only (locked down for maintenance or moderation). Implements moderation/admin lockdown logic. 3NF: atomic flag per board. Example: false."},"require_approval_for_posting":{"type":"boolean","description":"Indicates if new threads/posts require moderator/admin approval before publishing. Implements requirements for strict moderation boards. Example: true."},"max_posts_per_hour":{"type":"integer","description":"Max allowed new posts per user per hour for rate limiting and anti-spam. Example: 10."},"allow_anonymous_viewing":{"type":"boolean","description":"If true, this board can be browsed by non-members (logged-out users). Controls accessibility and anonymous content consumption policies."},"allow_file_uploads":{"type":"boolean","description":"Indicates whether users may attach/upload files in this board. Supports extended board configuration and compliance workflows."}},"required":["discussionboard_board_id","is_locked","require_approval_for_posting","max_posts_per_hour","allow_anonymous_viewing","allow_file_uploads"],"description":"Schema for creating a new discussion board's settings record. All fields are required, correspond directly to the discussionboard_board_settings Prisma schema columns, and follow atomic, 3NF rules. This type supports board-specific configuration, feature toggling, and moderation control as described in business rules."},"IDiscussionboardBoardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the board settings record. Primary key for each row in discussionboard_board_settings."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"The board's UUID this settings entry configures, as defined in Boards domain. Each board has exactly one such record."},"is_locked":{"type":"boolean","description":"Whether this board is read-only and locked due to moderation or system maintenance. True means locked, false means unlocked."},"require_approval_for_posting":{"type":"boolean","description":"If true, new threads/posts in this board require moderator/admin approval before publication, supporting high-moderation workflows."},"max_posts_per_hour":{"type":"integer","description":"Anti-spam setting for maximum allowed posts per user per hour. 0 or null implies no restriction."},"allow_anonymous_viewing":{"type":"boolean","description":"If true, allows non-members to browse this board. Controls anonymous viewing permissions and discoverability settings for public content."},"allow_file_uploads":{"type":"boolean","description":"Enables file attachments on posts within this board. True enables uploads, false disables."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this board settings record was created, for audit trail and historical analysis."},"updated_at":{"type":"string","format":"date-time","description":"When this settings record was last updated, supporting audit and forensics."}},"required":["id","discussionboard_board_id","is_locked","require_approval_for_posting","max_posts_per_hour","allow_anonymous_viewing","allow_file_uploads","created_at","updated_at"],"description":"Complete schema for a discussionboard board settings record. Contains all atomic config options for a board, as described by Prisma schema and business requirements. Fields include locks, moderation approval flags, posting limits, and feature toggles. Used for GET/PUT/response operations."},"IDiscussionboardBoardSetting.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Filter by the board's UUID for settings retrieval. References discussionboard_boards.id."},"is_locked":{"type":"boolean","description":"Optionally filter results by locked/unlocked board setting."},"require_approval_for_posting":{"type":"boolean","description":"Optionally filter by moderation approval requirement flag."},"max_posts_per_hour":{"type":"integer","description":"Optionally filter boards by maximum posts per hour setting."},"allow_anonymous_viewing":{"type":"boolean","description":"Whether to filter by the anonymous viewing capability."},"allow_file_uploads":{"type":"boolean","description":"Filter settings records by file upload permission."},"page":{"type":"integer","description":"Pagination: Which page of results to retrieve (1-based index)."},"limit":{"type":"integer","description":"Pagination: How many records per page to fetch."}},"description":"Request/filter options for finding or searching board settings records. Maps directly to column filters and pagination parameters for admin dashboard or integration API.","required":[]},"IPageIDiscussionboardBoardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardSetting"},"description":"Array of discussionboard board settings records returned for the given page and search/query parameters."}},"required":["pagination","data"],"description":"Paginated response object containing discussionboard board settings records and standard page metadata. Used for PATCH-style advanced index/search operations. The data array always contains fully populated board settings objects."},"IDiscussionboardBoardSetting.IUpdate":{"type":"object","properties":{"is_locked":{"type":"boolean","description":"Set the board as locked/unlocked (read-only) per moderation or maintenance workflows."},"require_approval_for_posting":{"type":"boolean","description":"Enable or disable requirement for moderator/admin approval on new threads or posts."},"max_posts_per_hour":{"type":"integer","description":"Change the rate limit for posts per user per hour."},"allow_anonymous_viewing":{"type":"boolean","description":"Set whether non-members can view this board."},"allow_file_uploads":{"type":"boolean","description":"Enable or disable file upload attachments for the board."}},"description":"Update schema for discussionboard_board_settings. All properties are optional and map directly to updatable config columns for PATCH/PUT operations. Does not include 'id', 'discussionboard_board_id', 'created_at', or 'updated_at' fields as these are immutable or handled by system.","required":[]},"IDiscussionboardBoardModerator.ICreate":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"The unique identifier for the discussion board to which this moderator will be assigned. Must be an existing board within the platform."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"The unique identifier of the moderator being assigned to the board. Must reference a current moderator as per the discussionboard_moderators table."},"is_primary":{"type":"boolean","description":"Whether this moderator is a primary (head/lead) moderator for the board. True means lead, false for additional moderators."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the moderator was added to the board. Used for audit trails and assignment history."}},"required":["discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Payload for adding a moderator to a board, strictly corresponding to columns in discussionboard_board_moderators table. Used in POST endpoint; all fields are required for assignment creation. Uniqueness constraints (one per moderator/board pair) enforced by schema constraints."},"IDiscussionboardBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for board-moderator assignment record."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of the managed board, referencing discussionboard_boards."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"UUID of the assigned moderator, referencing discussionboard_moderators table."},"is_primary":{"type":"boolean","description":"Designates whether the moderator is the lead/primary moderator for this board."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp for when the moderator was assigned to this board."}},"required":["id","discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Schema for a complete board-moderator assignment object in the discussionboard_board_moderators table. Used for display, edit, detail, and audit purposes."},"IDiscussionboardBoardModerators.IRequest":{"type":"object","properties":{"discussionboard_board_id":{"type":"string","format":"uuid","description":"Search or filter board-moderator assignments for a given board ID."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"Search/filter assignments by moderator's UUID reference."},"is_primary":{"type":"boolean","description":"Filter assignments by lead/primary moderator flag."},"joined_at":{"type":"string","format":"date-time","description":"Filter assignments by join/assignment timestamp."},"page":{"type":"integer","description":"Pagination parameter for current page number."},"limit":{"type":"integer","description":"Pagination: Number of results per page."}},"description":"Advanced search/query request for the board-moderator assignments. Used for admin dashboards or mod audit systems.","required":[]},"IPageIDiscussionboardBoardModerators":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBoardModerators"},"description":"Paginated data for board-moderator assignment objects."}},"required":["pagination","data"],"description":"Paginated envelope for board-moderator assignments, returned by PATCH-style list/search endpoints."},"IDiscussionboardBoardModerators":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the assignment record in board-moderators M:N table."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Board UUID for which this moderator is assigned."},"discussionboard_moderator_id":{"type":"string","format":"uuid","description":"Moderator UUID as assigned to the board."},"is_primary":{"type":"boolean","description":"Flag for whether this moderator is the board's lead/primary moderator."},"joined_at":{"type":"string","format":"date-time","description":"Timestamp for when the moderator joined/was assigned to the board."}},"required":["id","discussionboard_board_id","discussionboard_moderator_id","is_primary","joined_at"],"description":"Board-moderator assignment entity with atomic, schema-mandated fields. Used in paginated responses and audit records."},"IDiscussionboardBoardModerators.IUpdate":{"type":"object","properties":{"is_primary":{"type":"boolean","description":"Set/modify the primary/lead-mod flag for this assignment."},"joined_at":{"type":"string","format":"date-time","description":"Update the assigned/joined timestamp if required for audit/history/tracking."}},"description":"Request body for PATCH/PUT updates of board-moderator assignment entities in the discussionboard_board_moderators table. Allows updating modifiable assignment flags, but not PK or relational IDs.","required":[]},"ISuccessResponse":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates if the operation completed successfully. True for OK, false otherwise."},"message":{"type":"string","description":"Optional textual status/confirmation or error information returned by the operation."}},"required":["success"],"description":"Standard API operation result object indicating success status and optional explanatory message for the request."},"IDiscussionboardThreads.ICreate":{"type":"object","description":"Request schema for creating a new thread in the discussion board (discussionboard_threads table). This type represents the data required to initialize a thread, strictly derived from the Prisma schema and ERD.\n\nAll properties should be matched to the corresponding columns of the database table, ensuring database-level constraints and business rules. This type omits auto-generated and system-managed fields, and NEVER allows the client to specify actor/ownership fields not in the schema (such as created_by or author_id, unless specifically present). Ownership and timestamps should be system-resolved except where allowed by schema.\n\n- board_id: Board wherein the thread is posted.\n- author_member_id: The creator (must match authentication context, not from body in secure production use).\n- title: Thread title (must be unique per board, as per Prisma constraint).\n- body: Optional description/body content.","properties":{"board_id":{"type":"string","format":"uuid","description":"UUID referencing the parent board (discussionboard_boards.id). Required by schema, enables navigation and access constraint."},"author_member_id":{"type":"string","format":"uuid","description":"UUID referencing the member (discussionboard_members.id) who creates the thread. Foreign key—must exist in actors table. Ownership, for audit and moderation.\n\nNOTE: In production, this should ONLY be derived from the authentication context, not settable by the client directly, to prevent impersonation risks."},"title":{"type":"string","description":"Required thread title. Uniquely identifies the thread within a board (enforced by Prisma unique constraint on [board_id, title]). Used for thread navigation and display."},"body":{"oneOf":[{"type":"string","description":"Optional main thread body/content (nullable in schema). May be omitted if thread is a simple subject line. Used for first-post introduction or context, matched to ERD."},{"type":"null"}],"description":"Optional main thread body/content (nullable in schema). May be omitted if thread is a simple subject line. Used for first-post introduction or context, matched to ERD."}},"required":["board_id","author_member_id","title"]},"IDiscussionboardThreads":{"type":"object","description":"Full thread entity as stored in the discussionboard_threads table. Used for response bodies when retrieving full thread information. Derived strictly from the Prisma schema and ERD. Sensitive/internal fields (such as moderation or deleted_by data) are omitted unless present in the schema.\n\nThis type provides all properties available on a normal SELECT; these include linkage, timestamps, and soft deletion tracking if available. NEVER includes password or security fields.\n\nLinks to board (by id), author, and version tracking.\n\n- id: Thread UUID.\n- board_id: Reference to parent board.\n- author_member_id: Author (poster, member).\n- title/body: Core content fields.\n- created_at/updated_at: Timestamps.\n- deleted_at: Null unless soft-deleted.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for this thread entity."},"board_id":{"type":"string","format":"uuid","description":"Foreign key: which board this thread belongs to."},"author_member_id":{"type":"string","format":"uuid","description":"Foreign key: authoring member of this thread."},"title":{"type":"string","description":"The thread title—see schema and requirements for uniqueness and display rules."},"body":{"oneOf":[{"type":"string","description":"Optional body/description text for the thread subject (nullable in schema, may be empty for brief threads)."},{"type":"null"}],"description":"Optional body/description text for the thread subject (nullable in schema, may be empty for brief threads)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this thread was created (ISO 8601 format). Field used for creation ordering, audit, and timeline view."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent edit to this thread. Used for ordering, audit, and UX 'edited' marker."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable soft delete marker. Set if thread is deleted (moved to deleted state, not removed from DB). Null if live. Field for moderation, audit, or restore."},{"type":"null"}],"description":"Nullable soft delete marker. Set if thread is deleted (moved to deleted state, not removed from DB). Null if live. Field for moderation, audit, or restore."}},"required":["id","board_id","author_member_id","title","created_at","updated_at"]},"IDiscussionboardThreads.IRequest":{"type":"object","description":"Thread search/filter/pagination request object. Used in PATCH endpoints to find/filter/list threads in the discussionboard_threads table per business requirements.\n\nProperties provide advanced filtering options: e.g. search by board, author, time window, deletion status. Pagination fields may refer to platform's IPage.IRequest contract.\n\n- board_id: Filter by parent board.\n- author_member_id: Filter by author.\n- title: Text search (exact/partial).\n- created_at_from/created_at_to: Time range boundaries.\n- deleted: Boolean toggle to include/exclude soft-deleted records.\n- page/limit: Pagination controls.","properties":{"board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: limit to threads within this board."},{"type":"null"}],"description":"Optional: limit to threads within this board."},"author_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: filter threads by author id (actor/member)."},{"type":"null"}],"description":"Optional: filter threads by author id (actor/member)."},"title":{"oneOf":[{"type":"string","description":"Optional: Filter by exact or partial match on thread title."},{"type":"null"}],"description":"Optional: Filter by exact or partial match on thread title."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: lower bound (inclusive) for creation timestamp."},{"type":"null"}],"description":"Optional: lower bound (inclusive) for creation timestamp."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: upper bound (inclusive) for creation timestamp."},{"type":"null"}],"description":"Optional: upper bound (inclusive) for creation timestamp."},"deleted":{"oneOf":[{"type":"boolean","description":"When true, only soft-deleted threads are listed. When false, only non-deleted threads. When omitted/null, both are included."},{"type":"null"}],"description":"When true, only soft-deleted threads are listed. When false, only non-deleted threads. When omitted/null, both are included."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: Page number (1-based)."},{"type":"null"}],"description":"Pagination: Page number (1-based)."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: Max records per page."},{"type":"null"}],"description":"Pagination: Max records per page."}},"required":[]},"IPageIDiscussionboardThreads":{"type":"object","description":"A paginated result type of thread entities (IPage<IDiscussionboardThreads>). Standard list view with result array and pagination metadata as in platform IPage contract.\n\n- pagination: Object containing page, limit, total record count, total pages.\n- data: Array of thread records for the selected page/filters.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","description":"Array of thread objects for this page.","items":{"$ref":"#/components/schemas/IDiscussionboardThreads"}}},"required":["pagination","data"]},"IDiscussionboardThreads.IUpdate":{"type":"object","description":"Patch/update schema for a thread entity in the discussionboard_threads table.\n\nApplicable to PUT/patch endpoints. Only schema-defined fields are included; system or audit fields are not present except as required. For security, client cannot update ownership or audit trail fields directly (e.g., cannot change author_member_id unless allowed by business logic).\n\n- title: Updated thread title.\n- body: Updated/overwritten thread body/description.","properties":{"title":{"oneOf":[{"type":"string","description":"(Optional) New/edited title for the thread."},{"type":"null"}],"description":"(Optional) New/edited title for the thread."},"body":{"oneOf":[{"type":"string","description":"(Optional) Updated thread main content, can be set to null or overwritten."},{"type":"null"}],"description":"(Optional) Updated thread main content, can be set to null or overwritten."}},"required":[]},"IDiscussionboardThreadSnapshots.ICreate":{"type":"object","description":"Schema for posting a new thread snapshot in the discussionboard_thread_snapshots table.\n\nRecords a version of the thread's state at a given point. Used during edit, moderation, or rollback workflows. Only schema columns: thread_id, actor_id, title, optional body, optional reason.","properties":{"thread_id":{"type":"string","format":"uuid","description":"UUID of thread being snapshotted (discussionboard_threads.id)."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: UUID of actor (member causing this version). May be system/null if auto-edit."},{"type":"null"}],"description":"Optional: UUID of actor (member causing this version). May be system/null if auto-edit."},"title":{"type":"string","description":"Snapshot of thread title at version point."},"body":{"oneOf":[{"type":"string","description":"Optional thread body at time of snapshot."},{"type":"null"}],"description":"Optional thread body at time of snapshot."},"reason":{"oneOf":[{"type":"string","description":"Optional moderator/user reason for this snapshot (e.g., edit, rule violation, rollback note)."},{"type":"null"}],"description":"Optional moderator/user reason for this snapshot (e.g., edit, rule violation, rollback note)."}},"required":["thread_id","title"]},"IDiscussionboardThreadSnapshots":{"type":"object","description":"Represents a versioned record of a thread's state (discussionboard_thread_snapshots table).\n\nContains all recorded fields: id, thread_id, actor_id (nullable), title, body (nullable), reason (nullable), created_at.","properties":{"id":{"type":"string","format":"uuid","description":"Unique id for this snapshot."},"thread_id":{"type":"string","format":"uuid","description":"Id of thread being snapshotted."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Null/system or actor for this snapshot, if recorded."},{"type":"null"}],"description":"Null/system or actor for this snapshot, if recorded."},"title":{"type":"string","description":"Thread title at this version."},"body":{"oneOf":[{"type":"string","description":"Thread body at this version."},{"type":"null"}],"description":"Thread body at this version."},"reason":{"oneOf":[{"type":"string","description":"Versioning reason/moderation note/audit field."},{"type":"null"}],"description":"Versioning reason/moderation note/audit field."},"created_at":{"type":"string","format":"date-time","description":"Timestamp this snapshot was created."}},"required":["id","thread_id","title","created_at"]},"IDiscussionboardThreadSnapshots.IRequest":{"type":"object","description":"Request schema for listing/searching thread snapshots (discussionboard_thread_snapshots). Used to filter/audit version history.\n\nProvides filtering/searching by thread, actor, time, and support for pagination.\n- thread_id: Filter by target thread.\n- actor_id: Filter by editing actor.\n- created_at_from/to: Time range narrowing.\n- page/limit: Pagination.","properties":{"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: limit to snapshots for this thread."},{"type":"null"}],"description":"Optional: limit to snapshots for this thread."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional: limit to snapshots created by this actor."},{"type":"null"}],"description":"Optional: limit to snapshots created by this actor."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: filter snapshots after this date/time."},{"type":"null"}],"description":"Optional: filter snapshots after this date/time."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Optional: filter snapshots before this date/time."},{"type":"null"}],"description":"Optional: filter snapshots before this date/time."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: page number."},{"type":"null"}],"description":"Pagination: page number."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Pagination: max per page."},{"type":"null"}],"description":"Pagination: max per page."}},"required":[]},"IPageIDiscussionboardThreadSnapshots":{"type":"object","description":"Paginated envelope of thread snapshot records (IPage<IDiscussionboardThreadSnapshots>). Standard IPage structure: pagination meta + record list.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreadSnapshots"}}},"required":["pagination","data"]},"IDiscussionboardThreadSnapshot.IUpdate":{"type":"object","description":"Update schema for editing a thread snapshot record. Only updatable schema fields are referenced.\n\nMay only permit updates to nullable fields (body, reason); id/thread_id/title are typically immutable for audit compliance.\n- body: Corrected/updated version text.\n- reason: Clarified/more detailed rationale for versioning.\n\nNote: Edits may be locked in production deployments for audit trust.","properties":{"body":{"oneOf":[{"type":"string","description":"(Optional) Overwrite/correct thread body at this snapshot version."},{"type":"null"}],"description":"(Optional) Overwrite/correct thread body at this snapshot version."},"reason":{"oneOf":[{"type":"string","description":"(Optional) Correction/annotation for version edit reason."},{"type":"null"}],"description":"(Optional) Correction/annotation for version edit reason."}},"required":[]},"IDiscussionboardThreadSnapshot":{"type":"object","description":"Minimal view for a single thread snapshot—for pure audit or retrieval purposes (IDiscussionboardThreadSnapshots, non-list form). Matches details from the main table.\n\n- id: Unique record.\n- thread_id: Parent thread.\n- actor_id: Editor (nullable/system).\n- title/body/reason: Main fields.\n- created_at: Snapshot timestamp.","properties":{"id":{"type":"string","format":"uuid"},"thread_id":{"type":"string","format":"uuid"},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}]},"title":{"type":"string"},"body":{"oneOf":[{"type":"string"},{"type":"null"}]},"reason":{"oneOf":[{"type":"string"},{"type":"null"}]},"created_at":{"type":"string","format":"date-time"}},"required":["id","thread_id","title","created_at"]},"IDiscussionboardThreadTag.ICreate":{"type":"object","description":"Request schema for associating a tag with a thread (discussionboard_thread_tags).\n\nEstablishes the M:N relation between a thread and a tag. Only referenced schema fields are present: thread_id and assigned_at are required; removed_at is optional/null for active.\n\n- thread_id: Target thread (UUID).\n- assigned_at: Time of tag assignment.\n- removed_at: When tag was removed; null if active.","properties":{"thread_id":{"type":"string","format":"uuid","description":"UUID of target thread (discussionboard_threads.id)."},"assigned_at":{"type":"string","format":"date-time","description":"When the tag was assigned to the thread (audit/history field)."},"removed_at":{"oneOf":[{"type":"string","format":"date-time","description":"When (if) the tag was later removed from this thread. Null if still active."},{"type":"null"}],"description":"When (if) the tag was later removed from this thread. Null if still active."}},"required":["thread_id","assigned_at"]},"IDiscussionboardThreadTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for each thread tag assignment.\n\nThis field is a UUID as mandated by the Prisma schema and is used to guarantee uniqueness and referential integrity for each tagging event."},"thread_id":{"type":"string","format":"uuid","description":"Thread reference. Points to the thread this tag assignment is linked to as per database normalization.\n\nMust match a valid thread's UUID from the discussionboard_threads table."},"assigned_at":{"type":"string","format":"date-time","description":"Assignment timestamp, indicating when the tag was applied to the thread. Facilitates time-based analytics and moderation workflows.\n\nMust be an ISO 8601 timestamp."},"removed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Removal timestamp. If set, represents the point in time when this tag assignment was removed from the thread. Null if tag is still assigned.\n\nNullable for audit and historical reference."},{"type":"null","format":"date-time","description":"Removal timestamp. If set, represents the point in time when this tag assignment was removed from the thread. Null if tag is still assigned.\n\nNullable for audit and historical reference."}],"description":"Removal timestamp. If set, represents the point in time when this tag assignment was removed from the thread. Null if tag is still assigned.\n\nNullable for audit and historical reference."}},"required":["id","thread_id","assigned_at"],"description":"Thread Tag Assignment entity representing the M:N relationship between threads and tags for discoverability and content organization.\n\nEvery instance of this entity records a single assignment or removal event of a tag to a given thread and supports robust audit capabilities. All fields align strictly with the discussionboard_thread_tags table in the Prisma schema."},"IPageIDiscussionboardThreadTag.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number, defaults to 1 if not specified."},{"type":"null","description":"Page number, defaults to 1 if not specified."}],"description":"Page number, defaults to 1 if not specified."},"limit":{"oneOf":[{"type":"integer","description":"Number of records per page, defaults to 100 if not specified."},{"type":"null","description":"Number of records per page, defaults to 100 if not specified."}],"description":"Number of records per page, defaults to 100 if not specified."},"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally filter by thread UUID."},{"type":"null","format":"uuid","description":"Optionally filter by thread UUID."}],"description":"Optionally filter by thread UUID."},"assigned_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of assignment timestamp range for filtering."},{"type":"null","format":"date-time","description":"Start of assignment timestamp range for filtering."}],"description":"Start of assignment timestamp range for filtering."},"assigned_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"End of assignment timestamp range for filtering."},{"type":"null","format":"date-time","description":"End of assignment timestamp range for filtering."}],"description":"End of assignment timestamp range for filtering."}},"description":"Request parameters for paginating and searching thread tag assignments.\n\nSupports filters for thread ID and assignment timestamps, as well as standard pagination controls.","required":[]},"IPageIDiscussionboardThreadTag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardThreadTag"},"description":"Array of thread tag assignment records as defined by IDiscussionboardThreadTag."}},"required":["pagination","data"],"description":"A paginated result object for thread tag assignments, following IPage envelope conventions."},"IDiscussionboardThreadTag.IUpdate":{"type":"object","properties":{"thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread reference UUID. Can be updated if re-tagging is allowed. Nullable if not provided."},{"type":"null","format":"uuid","description":"Thread reference UUID. Can be updated if re-tagging is allowed. Nullable if not provided."}],"description":"Thread reference UUID. Can be updated if re-tagging is allowed. Nullable if not provided."},"assigned_at":{"oneOf":[{"type":"string","format":"date-time","description":"The updated assignment timestamp for this record, or null to leave unchanged."},{"type":"null","format":"date-time","description":"The updated assignment timestamp for this record, or null to leave unchanged."}],"description":"The updated assignment timestamp for this record, or null to leave unchanged."},"removed_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, represents the timestamp when the tag was removed. Null for still-active assignments."},{"type":"null","format":"date-time","description":"If set, represents the timestamp when the tag was removed. Null for still-active assignments."}],"description":"If set, represents the timestamp when the tag was removed. Null for still-active assignments."}},"description":"Fields for updating a thread tag assignment. All properties are optional except for the record identifier in API path.\n\nOnly schema-defined fields may be altered.","required":[]},"IDiscussionboardPost.ICreate":{"type":"object","properties":{"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Associated thread's UUID. Links the post to the thread for content grouping."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the author member creating the post."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of the board where this post is being made. Enforced for topic classification."},"title":{"type":"string","description":"The title or headline for the post, for clarity and discoverability."},"body":{"type":"string","description":"Main post content. Contains full text of the discussion or analysis."},"is_deleted":{"type":"boolean","description":"Soft-deletion flag. Must be false upon creation. Used for audit and moderation retention."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this post (usually set by backend at record insertion)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when post was last updated (equal to created_at on insert)."}},"required":["discussionboard_thread_id","discussionboard_member_id","discussionboard_board_id","title","body","is_deleted","created_at","updated_at"],"description":"Request body for creating a new discussion post as per the normalized schema.\n\nAll required fields match the atomic columns of discussionboard_posts with no extra fields permitted."},"IDiscussionboardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique post identifier (primary key)."},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"UUID of the parent thread to which this post belongs."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who authored this post."},"discussionboard_board_id":{"type":"string","format":"uuid","description":"UUID of the board where this post appears."},"title":{"type":"string","description":"Headline/title of the post, for UI and search."},"body":{"type":"string","description":"The main text content for the discussion post."},"is_deleted":{"type":"boolean","description":"Boolean soft-delete flag. True means the post is logically deleted but retained for audit."},"created_at":{"type":"string","format":"date-time","description":"When this post was first created."},"updated_at":{"type":"string","format":"date-time","description":"Last time this post was updated."}},"required":["id","discussionboard_thread_id","discussionboard_member_id","discussionboard_board_id","title","body","is_deleted","created_at","updated_at"],"description":"A discussion board post object as returned from the back end, containing only schema-defined columns.\n\nOmitted properties have no presence in the underlying table. All values are fully atomic and non-derived."},"IPageIDiscussionboardPost.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for results, 1-based. Null for default (1)."},{"type":"null","description":"Page number for results, 1-based. Null for default (1)."}],"description":"Page number for results, 1-based. Null for default (1)."},"limit":{"oneOf":[{"type":"integer","description":"Max number of records per page. Null/restores to default."},{"type":"null","description":"Max number of records per page. Null/restores to default."}],"description":"Max number of records per page. Null/restores to default."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally filter to only posts in the specified thread (UUID)."},{"type":"null","format":"uuid","description":"Optionally filter to only posts in the specified thread (UUID)."}],"description":"Optionally filter to only posts in the specified thread (UUID)."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter to posts authored by this member UUID."},{"type":"null","format":"uuid","description":"Filter to posts authored by this member UUID."}],"description":"Filter to posts authored by this member UUID."},"is_deleted":{"oneOf":[{"type":"boolean","description":"Filter soft-deleted (true), active (false), or all (null)."},{"type":"null","description":"Filter soft-deleted (true), active (false), or all (null)."}],"description":"Filter soft-deleted (true), active (false), or all (null)."},"title_query":{"oneOf":[{"type":"string","description":"Optional partial match filter for post titles (UI fulltext/trgm search)."},{"type":"null","description":"Optional partial match filter for post titles (UI fulltext/trgm search)."}],"description":"Optional partial match filter for post titles (UI fulltext/trgm search)."}},"description":"Request body for searching and paginating post objects as defined.\n\nAllows filtering by thread, member, is_deleted, or using title substrings.","required":[]},"IPageIDiscussionboardPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPost"},"description":"List of post records in the result set."}},"required":["pagination","data"],"description":"Paginated wrapper for discussion board post retrieval results."},"IDiscussionboardPost.IUpdate":{"type":"object","properties":{"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Thread reference UUID. To move this post to another thread; null leaves thread unchanged."},{"type":"null","format":"uuid","description":"Thread reference UUID. To move this post to another thread; null leaves thread unchanged."}],"description":"Thread reference UUID. To move this post to another thread; null leaves thread unchanged."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board reference UUID. If changing boards; null for no change."},{"type":"null","format":"uuid","description":"Board reference UUID. If changing boards; null for no change."}],"description":"Board reference UUID. If changing boards; null for no change."},"title":{"oneOf":[{"type":"string","description":"Update for post title; null leaves unchanged."},{"type":"null","description":"Update for post title; null leaves unchanged."}],"description":"Update for post title; null leaves unchanged."},"body":{"oneOf":[{"type":"string","description":"Update for post body text."},{"type":"null","description":"Update for post body text."}],"description":"Update for post body text."},"is_deleted":{"oneOf":[{"type":"boolean","description":"If true sets soft-delete flag; false or null for not deleted."},{"type":"null","description":"If true sets soft-delete flag; false or null for not deleted."}],"description":"If true sets soft-delete flag; false or null for not deleted."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Explicit timestamp for update. Usually set to now."},{"type":"null","format":"date-time","description":"Explicit timestamp for update. Usually set to now."}],"description":"Explicit timestamp for update. Usually set to now."}},"description":"Update operation object for discussion board posts. All values optional, only schema fields accepted. Omitted if null.","required":[]},"IPostSnapshot.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Primary key of the post from which the snapshot is being taken."},"editor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the member making the edit (nullable for system edits/deleted members)."},{"type":"null","format":"uuid","description":"UUID of the member making the edit (nullable for system edits/deleted members)."}],"description":"UUID of the member making the edit (nullable for system edits/deleted members)."},"title":{"type":"string","description":"Snapshot of the title at time of edit/version save."},"body":{"type":"string","description":"Snapshot of the post body at edit/version save."},"taken_at":{"type":"string","format":"date-time","description":"The timestamp when this snapshot is recorded."}},"required":["discussionboard_post_id","title","body","taken_at"],"description":"Object for creating a new post snapshot as per the audit/versioning policy.\n\nCaptures all relevant fields. 'editor_member_id' is optional (nullable)."},"IPostSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post snapshot entry in the discussionboard_post_snapshots table, used for retrieval, version audit, or rollback."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID referencing the parent post whose version this snapshot represents. Required in all version audit, rollback, and compliance queries."},"editor_member_id":{"type":"string","format":"uuid","description":"UUID for the member who made the edit, if available (nullable for system-generated). Used for accountability and audit trails. Null when snapshot is created by system/admin. DO NOT expose in cases where this could violate impersonation security policies."},"title":{"type":"string","description":"Snapshot of the post's title as persisted in this version. Atomic and immutable after creation."},"body":{"type":"string","description":"Textual content of the post at this snapshot version. Immutable, for rollback/review purposes."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp recording when the snapshot was taken.\n\nEnsures auditability and enables precise version comparisons/restorations."}},"required":["id","discussionboard_post_id","title","body","taken_at"],"description":"Represents a historical record of a post's content for audit, rollback, and compliance in the discussion board. Used in version history panels, moderator investigations, and disputed content appeals. All fields are first-class, schema-driven table columns; no sensitive or system-only data included."},"IPostSnapshot.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for results (pagination). Default: 1."},{"type":"null","description":"Page number for results (pagination). Default: 1."}],"description":"Page number for results (pagination). Default: 1."},"limit":{"oneOf":[{"type":"integer","description":"Max results per page. Default per API."},{"type":"null","description":"Max results per page. Default per API."}],"description":"Max results per page. Default per API."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally limit to snapshots for a single post."},{"type":"null","format":"uuid","description":"Optionally limit to snapshots for a single post."}],"description":"Optionally limit to snapshots for a single post."},"editor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optionally limit to edits by a single editor/member."},{"type":"null","format":"uuid","description":"Optionally limit to edits by a single editor/member."}],"description":"Optionally limit to edits by a single editor/member."},"taken_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Range filter: earliest (inclusive) version timestamp."},{"type":"null","format":"date-time","description":"Range filter: earliest (inclusive) version timestamp."}],"description":"Range filter: earliest (inclusive) version timestamp."},"taken_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Range filter: latest (inclusive) version timestamp."},{"type":"null","format":"date-time","description":"Range filter: latest (inclusive) version timestamp."}],"description":"Range filter: latest (inclusive) version timestamp."}},"description":"Request object for listing and searching post snapshots. Supports pagination and filtering by post, editor, or version date.","required":[]},"IPageIPostSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information.\n\nProvides metadata about the current page, total records, page limits, and total pages, following standard discussionboard paging conventions. Supports scalable navigation and administrative review of snapshot version history."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostSnapshot"},"description":"List of Post Snapshot records.\n\nContains the actual post snapshot objects, each of which represents a historical version of a post, including editor, version moment, and snapshot content per the snapshot schema."}},"required":["pagination","data"],"description":"Paginated result set for Post Snapshot records from the discussion board. Used for audit, rollback, and historical review functionality supporting compliance and advanced moderation workflows. Data is complete for each snapshot, and pagination enables efficient browsing through large version histories."},"IPostSnapshot.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Snapshot of the post's title at the current version. Referencing the 'title' column in the discussionboard_post_snapshots schema, this property captures the post's heading as edited for rollback/compliance purposes."},"body":{"type":"string","description":"Snapshot of the post's body content at this version. Matches the 'body' column in the post_snapshots table, for supporting moderation rollback and historical versioning."},"taken_at":{"type":"string","format":"date-time","description":"Timestamp at which the snapshot was recorded, ISO 8601 format.\n\nThis field follows the 'taken_at' column in discussionboard_post_snapshots, denoting exactly when the snapshot was created for auditing and history tracking."},"editor_member_id":{"type":"string","format":"uuid","description":"UUID of the member who edited the post at this version, nullable for system intervention.\n\nThis property is tied to the 'editor_member_id' column in discussionboard_post_snapshots, and indicates who performed the edit, supporting accountability, moderation, and audit trail.\n\nNever give this property in response types if it refers to sensitive/impersonation data."}},"required":["title","body","taken_at"],"description":"Object for updating a Post Snapshot record, reflecting only mutable fields defined in the discussionboard_post_snapshots schema. Used for correcting audit errors, resolving moderation escalations, or rare admin operations. Only the directly schema-defined fields are modifiable; the post snapshot is generally considered immutable for typical user workflows."},"IPostVote.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID referencing the post being voted on.\n\nImplements the 'discussionboard_post_id' column in the discussionboard_post_votes schema. Required for associating the vote with the correct post and auditing the voting flow."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID referencing the member who casts the vote.\n\nMapped to 'discussionboard_member_id' in the post_votes model, identifies the voter for permissions, uniqueness checks (one vote per member per post), and audit traceability."},"vote_type":{"oneOf":[{"const":-1,"description":"The type of vote cast: 1 for upvote, -1 for downvote, 0 for neutral/removal.\n\nDirectly aligns with the 'vote_type' column (integer) in the discussionboard_post_votes schema, controlling post popularity and engagement analytics."},{"const":0,"description":"The type of vote cast: 1 for upvote, -1 for downvote, 0 for neutral/removal.\n\nDirectly aligns with the 'vote_type' column (integer) in the discussionboard_post_votes schema, controlling post popularity and engagement analytics."},{"const":1,"description":"The type of vote cast: 1 for upvote, -1 for downvote, 0 for neutral/removal.\n\nDirectly aligns with the 'vote_type' column (integer) in the discussionboard_post_votes schema, controlling post popularity and engagement analytics."}],"description":"The type of vote cast: 1 for upvote, -1 for downvote, 0 for neutral/removal.\n\nDirectly aligns with the 'vote_type' column (integer) in the discussionboard_post_votes schema, controlling post popularity and engagement analytics."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the vote was cast. Maps to 'created_at' column for audit, temporal analytics, and rate-limiting enforcement."}},"required":["discussionboard_post_id","discussionboard_member_id","vote_type","created_at"],"description":"Object required to create a new Post Vote record, referencing only properties in the discussionboard_post_votes Prisma schema. Used when a member submits an upvote, downvote, or neutralizes/removes their vote for a post. Submission must comply with the one-vote-per-member-per-post rule, and all fields are audit-critical for engagement monitoring."},"IPostVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post vote record. Uniquely identifies this vote in the discussionboard_post_votes table."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID referencing the post being voted on, as in the 'discussionboard_post_id' schema column. Essential for mapping votes to their respective content items."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID referencing the member who made the vote, matching the 'discussionboard_member_id' schema property. Used in enforcing unique voting, audit, rate limiting."},"vote_type":{"oneOf":[{"const":-1,"description":"Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. Follows 'vote_type' column."},{"const":0,"description":"Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. Follows 'vote_type' column."},{"const":1,"description":"Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. Follows 'vote_type' column."}],"description":"Vote value: 1 for upvote, -1 for downvote, 0 for neutral/removal. Follows 'vote_type' column."},"created_at":{"type":"string","format":"date-time","description":"When the vote was created/cast. Matches 'created_at' column, supports time series/analytics."}},"required":["id","discussionboard_post_id","discussionboard_member_id","vote_type","created_at"],"description":"A record representing a single member's upvote, downvote, or neutralization/removal for a post. Covers all schema-present columns and is essential for post engagement tracking, member interaction review, and anti-abuse mechanisms. Never contains derived, sensitive, or non-schema fields."},"IPostVote.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Optional filter: target post UUID. Returns votes for this post.\n\nMaps to the 'discussionboard_post_id' column of the post_votes table, enabling analytic or moderation queries for a post's engagement."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Optional filter: member UUID. Returns votes made by this member, for profile history or moderation.\n\nRefers to 'discussionboard_member_id' in the schema."},"vote_type":{"oneOf":[{"const":-1,"description":"Optional filter: specifies which type of votes to return (upvote, downvote, or neutral). Used for reviewing only positive/negative feedback, or neutralizations."},{"const":0,"description":"Optional filter: specifies which type of votes to return (upvote, downvote, or neutral). Used for reviewing only positive/negative feedback, or neutralizations."},{"const":1,"description":"Optional filter: specifies which type of votes to return (upvote, downvote, or neutral). Used for reviewing only positive/negative feedback, or neutralizations."}],"description":"Optional filter: specifies which type of votes to return (upvote, downvote, or neutral). Used for reviewing only positive/negative feedback, or neutralizations."},"created_at":{"type":"string","format":"date-time","description":"Optional filter: when the vote was cast. Allows time-based analysis in analytic dashboards."}},"description":"Request type for searching, filtering, or paginating post vote records. Accepts only fields that exist in the discussionboard_post_votes Prisma schema for secure and type-safe queries.","required":[]},"IPageIPostVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Metadata about the current page, total records, page count, and limit, supporting navigation through large vote records as per standard paging conventions for scalable retrievals."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostVote"},"description":"List of post vote records for this page. Each item is a schema-complete description of an individual member's vote on a specific post, audit-ready for administrative or moderator analysis."}},"required":["pagination","data"],"description":"Paginated result envelope for a list of Post Vote records, providing page navigation details and an array of schema-accurate vote objects for profile, moderation, or analytics use cases."},"IPostVote.IUpdate":{"type":"object","properties":{"vote_type":{"oneOf":[{"const":-1,"description":"The updated vote value for this record: 1 (upvote), -1 (downvote), or 0 (neutral).\n\nFollows the 'vote_type' column in post_votes schema. Used by admin/moderator to correct voting actions, handle abuse, or recover from user error."},{"const":0,"description":"The updated vote value for this record: 1 (upvote), -1 (downvote), or 0 (neutral).\n\nFollows the 'vote_type' column in post_votes schema. Used by admin/moderator to correct voting actions, handle abuse, or recover from user error."},{"const":1,"description":"The updated vote value for this record: 1 (upvote), -1 (downvote), or 0 (neutral).\n\nFollows the 'vote_type' column in post_votes schema. Used by admin/moderator to correct voting actions, handle abuse, or recover from user error."}],"description":"The updated vote value for this record: 1 (upvote), -1 (downvote), or 0 (neutral).\n\nFollows the 'vote_type' column in post_votes schema. Used by admin/moderator to correct voting actions, handle abuse, or recover from user error."},"created_at":{"type":"string","format":"date-time","description":"The updated timestamp for when the vote was cast (optional, for correcting audit/compliance issues).\n\nCorresponds to the 'created_at' column. Generally modified only by admins/mods."}},"description":"Object used to update a member's vote on a post, only for fields present in the post_votes schema. Allows fixing vote_type due to moderation or error; rarely modified except in compliance scenarios.","required":[]},"IPostReport.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post being reported as problematic for moderation workflows.\n\nImplements the 'discussionboard_post_id' column in the post_reports Prisma table. Required for linking the report to the correct post entity."},"reporter_member_id":{"type":"string","format":"uuid","description":"UUID of the member filing the report. Follows 'reporter_member_id' column in schema, securing audit trail and enforcing moderation flow rules."},"report_type_id":{"type":"string","format":"uuid","description":"UUID referencing the reason or category for report (e.g., spam, abuse, misinformation).\n\nMaps to the 'report_type_id' schema column, which is a foreign key to the list of allowed report types, enabling analytic breakdown and reporting workflow dispatch."},"description":{"type":"string","description":"Optional reporter-supplied context or descriptive explanation for the report. Nullable in schema.\n\nMatches the 'description' column; supports nuanced case handling and moderation transparency."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the report was created, as in 'created_at' column. Holds the date/time for reporting, required for audit, compliance, and sequencing moderation reviews."}},"required":["discussionboard_post_id","reporter_member_id","report_type_id","created_at"],"description":"Object for creating a new post report record, as stored in the discussionboard_post_reports table. Each field is tied directly to the schema documentation and is critical for ensuring tracing, reporting, and compliance in the moderation workflow. Reports inappropriate, abusive, or spam content on a post for investigation by moderators or admin."},"IPostReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post report record in the discussionboard_post_reports table. Unique identifier for this individual report."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID referencing the reported post. Required for mapping the report within the moderation workflow."},"reporter_member_id":{"type":"string","format":"uuid","description":"UUID representing the member who filed this report, as in 'reporter_member_id' column. Needed for moderation/audit transparency."},"report_type_id":{"type":"string","format":"uuid","description":"UUID reference to the report reason/category ('report_type_id' column), tied to a valid moderation report type."},"description":{"type":"string","description":"Nullable string: the explanation or context for the report. As in 'description' column. May be empty if report is by quick-action/report button."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp, ISO 8601, matching 'created_at' column. Required for audit, compliance, and report reviews."}},"required":["id","discussionboard_post_id","reporter_member_id","report_type_id","created_at"],"description":"Atomic record of a member-submitted report against a post, stored in the discussionboard_post_reports schema. Directly supports content moderation, audit investigation, and anti-abuse policies. Contains all schema-defined fields and no sensitive or non-existent properties."},"IPostReport.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Optional filter to get reports for a specific post (UUID).\n\nUsed in moderator review queue or post-centric analytics."},"reporter_member_id":{"type":"string","format":"uuid","description":"Optional filter for all reports filed by a particular member.\n\nTied to 'reporter_member_id' column of the schema."},"report_type_id":{"type":"string","format":"uuid","description":"Optional filter by reason/category of report (as in 'report_type_id' column).\n\nMatches foreign key for type analytics and workflow split."},"created_at":{"type":"string","format":"date-time","description":"Optional filter for timestamp (ISO 8601) when the report was recorded.\n\nPermits analytic/temporal queries in moderation dashboards."}},"description":"Request type for searching, filtering, or paginating post report records by schema-supported columns. Used by moderator/admin for compliance, investigation, or workflow management of reported posts.","required":[]},"IPageIPostReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Metadata for the current page, supporting scaling through large report records as required by moderator/audit access."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostReport"},"description":"The collection of individual post report records for this page, each matching the schema precisely for audit, review, and workflow triage."}},"required":["pagination","data"],"description":"Paginated page envelope containing post report records for moderator/admin review. Supports scalable workflows, audit queries, compliance snapshots, and member appeal workflows, all by exposing only schema-present fields."},"IPostReport.IUpdate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Optional: update the reported post reference in rare workflows (e.g., admin correction or dispute resolution)."},"reporter_member_id":{"type":"string","format":"uuid","description":"Optional: update the reporting member reference if correcting administrative errors or transfer of responsibility."},"report_type_id":{"type":"string","format":"uuid","description":"Update the category of the report, e.g. if a moderator reclassifies the incident. See report_type_id in schema."},"description":{"type":"string","description":"Allows for editing the explanatory text/context, especially in response to appeals or moderator corrections."}},"description":"Object for updating allowed fields on a post report record. Only modifiable for rare moderation/audit corrections; general user workflows should treat all fields as immutable.","required":[]},"null":{"type":"object","properties":{},"description":"Represents an empty object or lack of content in a response or request body. Used in endpoints where no body is required or the response is explicitly empty.","required":[]},"IPostReference.ICreate":{"type":"object","properties":{"source_post_id":{"type":"string","format":"uuid","description":"The UUID of the post that is creating the reference. Required for establishing the source side of the relationship in the post reference table."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the referenced (target) post. If referencing a thread instead, this can be null. This field is optional; used for direct post-to-post references."},{"type":"null","format":"uuid","description":"The UUID of the referenced (target) post. If referencing a thread instead, this can be null. This field is optional; used for direct post-to-post references."}],"description":"The UUID of the referenced (target) post. If referencing a thread instead, this can be null. This field is optional; used for direct post-to-post references."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the referenced (target) thread. Null when only referencing a post. Used to reference an entire thread from a post when appropriate."},{"type":"null","format":"uuid","description":"The UUID of the referenced (target) thread. Null when only referencing a post. Used to reference an entire thread from a post when appropriate."}],"description":"The UUID of the referenced (target) thread. Null when only referencing a post. Used to reference an entire thread from a post when appropriate."},"reference_type":{"type":"string","description":"A string indicating the type of reference (e.g., 'post', 'thread', 'comment'). This informs the system of the relationship's nature. Always required."}},"required":["source_post_id","reference_type"],"description":"Schema for creating a new entry in the post reference table. Used for establishing a cross-reference between posts or between a post and a thread. All references must correspond to actual other posts or threads."},"IPostReference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The primary key UUID of the post reference record. Unique identifier for the reference relationship."},"source_post_id":{"type":"string","format":"uuid","description":"The UUID of the source post (the referencing side) in the discussion board. Corresponds directly to the source_post_id column in the schema."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the target post being referenced. Null when referencing a thread. Optional field depending on the reference type."},{"type":"null","format":"uuid","description":"The UUID of the target post being referenced. Null when referencing a thread. Optional field depending on the reference type."}],"description":"The UUID of the target post being referenced. Null when referencing a thread. Optional field depending on the reference type."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"The UUID of the target thread being referenced. Null when referencing a post. Optional, used for references to threads."},{"type":"null","format":"uuid","description":"The UUID of the target thread being referenced. Null when referencing a post. Optional, used for references to threads."}],"description":"The UUID of the target thread being referenced. Null when referencing a post. Optional, used for references to threads."},"reference_type":{"type":"string","description":"Indicates the type of reference made by the source post. Ex: 'post', 'thread', 'comment'. Directly stored in the reference_type column."}},"required":["id","source_post_id","reference_type"],"description":"A cross-reference entity between posts (and/or threads) within the discussion board. Allows tracking citations, mentions, or related content. All fields are persisted in the post references table, with unique ID and either post or thread target set. Used in citation linking and navigation."},"IPostReference.IRequest":{"type":"object","properties":{"source_post_id":{"type":"string","format":"uuid","description":"Optional UUID filter to find references by source post."},"target_post_id":{"type":"string","format":"uuid","description":"Optional UUID filter for references targeting this post."},"target_thread_id":{"type":"string","format":"uuid","description":"Optional UUID filter for references targeting this thread."},"reference_type":{"type":"string","description":"Type filter to restrict results to references of a specific type ('post', 'thread', etc.)."}},"description":"Request body schema for filtering or searching post references. Used for paginated and parameterized listing of cross-reference records from source or target post/thread.","required":[]},"IPageIPostReference":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IPostReference"},"description":"Array of post reference records returned for the current page."}},"required":["pagination","data"],"description":"Paginated container for a list of PostReference entities, following the standard IPage<T> interface. Includes pagination info and an array of post reference objects."},"IPostReference.IUpdate":{"type":"object","properties":{"source_post_id":{"type":"string","format":"uuid","description":"(Optional) Update the source post reference if changing the referencing post."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Update to another referenced post's UUID; can be null if referencing a thread."},{"type":"null","format":"uuid","description":"(Optional) Update to another referenced post's UUID; can be null if referencing a thread."}],"description":"(Optional) Update to another referenced post's UUID; can be null if referencing a thread."},"target_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Update to another referenced thread's UUID; can be null if only referencing a post."},{"type":"null","format":"uuid","description":"(Optional) Update to another referenced thread's UUID; can be null if only referencing a post."}],"description":"(Optional) Update to another referenced thread's UUID; can be null if only referencing a post."},"reference_type":{"type":"string","description":"(Optional) Update the type of reference relationship."}},"description":"Schema for updating fields in a post reference record. Used by moderators or system processes for correcting or altering content relationships and citations.","required":[]},"IComment.ICreate":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post to which this comment is being added. Required to associate comment with its parent post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member creating the comment. Must match an existing member record and is required for authorship tracking."},"body":{"type":"string","description":"The main textual content of the comment. Non-nullable and required for all comments."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Allows this comment to be a reply to another comment. Supply parent comment's UUID. Null for top-level comments."},{"type":"null","format":"uuid","description":"Allows this comment to be a reply to another comment. Supply parent comment's UUID. Null for top-level comments."}],"description":"Allows this comment to be a reply to another comment. Supply parent comment's UUID. Null for top-level comments."}},"required":["discussionboard_post_id","discussionboard_member_id","body"],"description":"Request payload for creating a new comment on a post or as a reply to another comment. All provided fields must match schema types; parent_id is optional for replies."},"IComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the comment record. Unique per comment."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the post this comment belongs to."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member who authored the comment."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the comment is a reply, this is the UUID of the parent comment; null for top-level comments."},{"type":"null","format":"uuid","description":"If the comment is a reply, this is the UUID of the parent comment; null for top-level comments."}],"description":"If the comment is a reply, this is the UUID of the parent comment; null for top-level comments."},"body":{"type":"string","description":"The content of the comment at its creation or most recent edit."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was first created, in ISO 8601 format."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for the latest comment update (edit). Null if the comment hasn't been edited."},{"type":"null","format":"date-time","description":"Timestamp for the latest comment update (edit). Null if the comment hasn't been edited."}],"description":"Timestamp for the latest comment update (edit). Null if the comment hasn't been edited."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable. Soft-deletion marker; when not null, the comment is considered deleted. Used for moderation/audit workflows."},{"type":"null","format":"date-time","description":"Nullable. Soft-deletion marker; when not null, the comment is considered deleted. Used for moderation/audit workflows."}],"description":"Nullable. Soft-deletion marker; when not null, the comment is considered deleted. Used for moderation/audit workflows."}},"required":["id","discussionboard_post_id","discussionboard_member_id","body","created_at"],"description":"A comment entity under a post. Contains author, posting, and hierarchy info. Soft-deleted comments are captured by non-null deleted_at. Timestamp fields audit lifecycle and allow moderation tracking."},"IComment.IRequest":{"type":"object","properties":{"discussionboard_post_id":{"type":"string","format":"uuid","description":"Filter for comments of a particular post."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter for comments authored by a specific member."},"parent_id":{"type":"string","format":"uuid","description":"Filter for replies to a specific comment."},"body":{"type":"string","description":"Textual search for comment content, supports partial matches."},"created_at_from":{"type":"string","format":"date-time","description":"Lower bound for creation date filtering (ISO 8601)."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound for creation date filtering (ISO 8601)."}},"description":"Request body for advanced searching/filtering of comments. Supports filtering by parent post, member, parent comment, content, and creation date range.","required":[]},"IPageIComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IComment"},"description":"Array of comment records for the current page."}},"required":["pagination","data"],"description":"Standard paginated result wrapper for comment entities. Includes pagination info and array of comments as per IPage<T> interface."},"IComment.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Updates the comment content; new textual value replaces the old one."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Change the parent comment, for moving or rethreading; null for top-level."},{"type":"null","format":"uuid","description":"(Optional) Change the parent comment, for moving or rethreading; null for top-level."}],"description":"(Optional) Change the parent comment, for moving or rethreading; null for top-level."}},"description":"Schema for modifying existing comment records. Permits updates to comment body and reply threading parent; used for member edits or moderation adjustments.","required":[]},"IDiscussionboardCommentSnapshot.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"UUID of the comment for which this snapshot is created. Must reference an existing comment record."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID of the member whose version of the comment is being recorded (author at time of snapshot)."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"UUID of the parent post at the time of this snapshot. For audit and context."},"body":{"type":"string","description":"Snapshot of the comment's body content at the time of this version."},"version":{"type":"integer","description":"Monotonic version number for snapshots of the same comment. Increments per edit/version event."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Timestamp when this comment snapshot was created."}},"required":["discussionboard_comment_id","discussionboard_member_id","discussionboard_post_id","body","version","snapshot_created_at"],"description":"Payload for creating a new comment snapshot record. Stores immutable point-in-time version of a user's comment for rollback, audit, and moderation review."},"IDiscussionboardCommentSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Comment snapshot unique identifier.\n\nReferences the primary key of the snapshot entity from the Prisma schema. Used for retrieving or referencing this snapshot version in audit and moderation workflows."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"ID of the parent comment this snapshot is versioning.\n\nActs as a foreign key to the discussionboard_comments table, enforcing normalized snapshot history in the system design."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the user who authored the comment at the time of this snapshot.\n\nThis field allows for historical authorship tracking and supports accurate audit trail reporting when comments are edited or transferred."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"ID of the post under which this comment (snapshot) is associated.\n\nSupports context linking even if post/comment relationships evolve over time."},"body":{"type":"string","description":"Immutable historical copy of the comment body at this version.\n\nStores the full comment content for rollback, moderation review, and audit. Preserves original wording even if edited later."},"version":{"type":"integer","description":"Snapshot version number assigned per comment (monotonically increasing per edit event).\n\nAllows for traceable edit history, recovery, and version sequencing. Based on strict normalization rules in DB design."},"snapshot_created_at":{"type":"string","format":"date-time","description":"Timestamp when this snapshot was created.\n\nUsed for ordered audit, rollback recovery, and regulatory forensics."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_post_id","body","version","snapshot_created_at"],"description":"Comment Snapshot entity representing an immutable, versioned record of a comment at a point in time.\n\nDefined per the discussionboard_comment_snapshots Prisma schema model, supporting rollback, edit history, and audit trails in discussion moderation workflows."},"IDiscussionboardCommentSnapshot.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Parent comment's ID, to filter snapshots belonging to a given comment."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Member ID for filtering snapshots by author at the time of version creation."},"discussionboard_post_id":{"type":"string","format":"uuid","description":"Post's ID, allowing filtration of versions for snapshots relating to a specific post."},"version":{"type":"integer","description":"Version number to filter for a specific edit version."},"snapshot_created_at_from":{"type":"string","format":"date-time","description":"Filter lower bound for snapshot creation datetime."},"snapshot_created_at_to":{"type":"string","format":"date-time","description":"Filter upper bound for snapshot creation datetime."}},"required":[],"description":"Request type for searching/filtering comment snapshot records in the discussionboard_comment_snapshots table.\n\nAllows flexible filtering by comment, author, post, version, or created at window, as per API and UI needs."},"IPageIDiscussionboardCommentSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentSnapshot"}}},"required":["pagination","data"],"description":"Paginated result container for comment snapshot records.\n\nWraps a list of snapshots with standard pagination metadata, suitable for advanced UI browses and audits."},"IDiscussionboardCommentSnapshot.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Revised version of the comment body for the updated snapshot.\n\nContent must comply with community guidelines and moderation rules."},"version":{"type":"integer","description":"Manually set or corrected version number for rare admin/appeal workflows only."}},"required":[],"description":"Update type for modifying allowed mutable fields in a comment snapshot record.\n\nTypically only body and, rarely, version may change. For admin/appeal or audit-correction workflows, not user-level edits."},"IDiscussionboardCommentVote.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"ID of the comment being voted on."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Voting member's ID, referencing the actor of this upvote/downvote."},"vote_type":{"type":"string","description":"Vote value ('up', 'down', or other domain-defined string values)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the vote was cast."}},"required":["discussionboard_comment_id","discussionboard_member_id","vote_type","created_at"],"description":"Create type for registering a comment vote in the discussionboard_comment_votes table.\n\nIncludes all required atomic columns as per schema, supporting voting interactions and analytics workflows."},"IDiscussionboardCommentVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Comment vote entity's unique primary key per schema."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"ID of the comment this vote applies to."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member casting the vote."},"vote_type":{"type":"string","description":"The type/direction of the vote (domain value)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of vote creation for analytics/audit."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Nullable timestamp for when the vote record was last updated, e.g., vote toggles."},{"type":"null"}],"description":"Nullable timestamp for when the vote record was last updated, e.g., vote toggles."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","vote_type","created_at"],"description":"Comment Vote entity corresponding to a normalized voting record per comment per member.\n\nMatches the discussionboard_comment_votes Prisma schema for capturing and reviewing upvote/downvote actions."},"IDiscussionboardCommentVote.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter by comment ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter by member ID who voted."},"vote_type":{"type":"string","description":"Filter by direction/type of vote."},"created_at_from":{"type":"string","format":"date-time","description":"Lower datetime bound for creation filter."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound for vote creation."}},"required":[],"description":"Search/filter request object for bulk comment votes queries.\n\nSupports filtering on comment, voting member, type, and time range."},"IPageIDiscussionboardCommentVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentVote"}}},"required":["pagination","data"],"description":"Paginated container for lists of comment votes.\n\nIncludes pagination meta and array of comment vote rows for analytics and admin tooling."},"IDiscussionboardCommentVote.IUpdate":{"type":"object","properties":{"vote_type":{"type":"string","description":"Updated vote value (e.g., 'up', 'down', 'none' to remove vote)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of vote update (e.g., change or retraction)."}},"required":[],"description":"Update structure for editing a comment vote record.\n\nFields may include vote_type and updated_at for toggling/updating."},"IDiscussionboardCommentReport.ICreate":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Target comment's UUID being reported."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Reporting member's UUID (actor)."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Type/category of the report (references discussionboard_report_types)."},"reason":{"type":"string","description":"Human-readable explanation of the report (required)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of report creation."}},"required":["discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason","created_at"],"description":"Type for submitting a new comment report according to schema normalization rules.\n\nAll fields required for audit, moderation workflow, and compliance logging."},"IDiscussionboardCommentReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"comment report의 고유 식별자(Primary Key). Prisma discussionboard_comment_reports.id.\n\n각 신고 레코드의 단일 식별 포인트입니다."},"discussionboard_comment_id":{"type":"string","format":"uuid","description":"신고 대상 comment의 UUID. discussionboard_comments.id FK로 관리됩니다."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"신고한 회원의 UUID. discussionboard_members.id FK입니다."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형의 UUID. discussionboard_report_types.id FK."},"reason":{"type":"string","description":"신고 사유 자유 기입 텍스트. 예: '테러', '욕설', '스팸' 등."},"created_at":{"type":"string","format":"date-time","description":"신고 레코드 생성시간. Prisma created_at 컬럼 기준 ISO8601 datetime입니다."}},"required":["id","discussionboard_comment_id","discussionboard_member_id","discussionboard_report_type_id","reason","created_at"],"description":"discussionboard_comment_reports 테이블의 단일 신고 원본 레코드 객체입니다.\n\n모든 필드는 Prisma discussionboard_comment_reports 칼럼과 주석에 따라 정의되어 있습니다."},"IDiscussionboardCommentReport.IRequest":{"type":"object","properties":{"discussionboard_comment_id":{"type":"string","format":"uuid","description":"Filter by target comment ID."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter by reporter member UUID."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"Filter by report type/category."},"created_at_from":{"type":"string","format":"date-time","description":"Report creation lower datetime bound."},"created_at_to":{"type":"string","format":"date-time","description":"Report creation upper datetime bound."},"reason":{"type":"string","description":"Search by substring or keyword in the reason/explanation text."}},"required":[],"description":"Search/filter request for comment reports, to support moderation queue and analytics tools.\n\nEnables efficient review/filtering by moderators/admins based on atomic report columns."},"IPageIDiscussionboardCommentReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination 정보를 포함합니다. 전체 결과셋에 대한 페이지네이션 정보를 제공합니다.\n\nPrisma discussionboard_comment_reports 테이블의 결과 목록 페이징 컨테이너.\n\n이 필드는 페이징 및 쿼리 결과 집합의 범위를 정의하는데 사용됩니다. \n\n페이지 번호, 한 페이지당 제한, 전체 레코드 수 등이 포함됩니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardCommentReport"},"description":"discussionboard_comment_reports 엔티티의 배열입니다.\n\nComment 신고 레코드를 각 원소로 갖는 객체 배열로, 실제 필드 값은 Prisma discussionboard_comment_reports 스키마와 일치합니다.\n\n이 배열은 실제 각 신고 레코드의 모든 칼럼을 포함합니다. 모든 개별 필드는 Prisma 명세의 칼럼 주석을 참고하여 값이 제공됩니다."}},"required":["pagination","data"],"description":"comment 신고 레코드의 페이징된 결과 집합을 나타냅니다.\n\ndiscussionboard_comment_reports 테이블에서 쿼리된 결과와 페이지네이션 정보를 포함합니다.\n\n각 개별 신고는 신고 아이디, 신고자, 신고 유형, 신고 내용, 타임스탬프 등 모든 스키마 칼럼을 포함합니다.\n\n이 타입은 관리/감사용 리스트, 신고 대시보드, 혹은 API 검색 필터의 결과 등에서 사용됩니다."},"IDiscussionboardCommentReport.IUpdate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형을 명시하는 UUID. discussionboard_report_types 테이블 FK로서, 변경 시 신고의 분류를 업데이트합니다.\n\nPrisma discussionboard_comment_reports.report_type_id의 역할과 동일합니다."},"reason":{"type":"string","description":"신고 사유. 사용자가 입력하거나 수정하는 자유 양식 텍스트입니다. \n\ncomment가 어떤 이유로 신고되었는지를 서술하며, 예시는 '욕설', '스팸', '부적절한 발언' 등이 있습니다.\n\nPrisma 스키마의 reason 칼럼 기반입니다."}},"required":["discussionboard_report_type_id","reason"],"description":"comment report 엔티티 수정(패치) 요청용 DTO.\n\n수정 가능한 discussionboard_comment_reports 테이블 칼럼에 대응합니다.\n\n신고 유형(report_type_id) 또는 신고 사유(reason) 등 일부 필드가 업데이트 가능합니다.\n\n이 타입은 API를 통한 comment 신고 업데이트, 정정/수정 워크플로우, 관리 포털 용도로 사용됩니다."},"IDiscussionboardReport.ICreate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 이유 카테고리의 UUID. Prisma discussionboard_report_types.id를 참조합니다.\n\n사용 가능한 신고 유형(예: abuse, spam)은 report_types 마스터 테이블과 연동됩니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고를 제출한 회원 ID. discussionboard_members.id를 FK로서 반드시 존재해야 합니다.\n\n실제 인증된 사용자의 컨텍스트에서 획득되며, 직접 입력하는 것이 권장되지 않습니다."},"target_object_id":{"type":"string","format":"uuid","description":"신고의 대상이 되는 오브젝트의 UUID. post, comment, member 등 실제 타겟이 되는 row의 id를 입력합니다.\n\n타입 식별자는 아래의 target_object_type에 명시합니다.\n\n비즈니스적으로 단일 신고 건마다 target_object_id는 하나씩만 입력해야 합니다."},"target_object_type":{"type":"string","description":"신고 대상의 타입. 예: 'post', 'comment', 'member' 등.\n\nPrisma discussionboard_reports.target_object_type 칼럼의 business 분류와 일치합니다."},"report_description":{"oneOf":[{"type":"string","description":"신고 상세 설명/코멘트. 신고자가 보충적으로 입력하는 자유 텍스트입니다. 선택 입력이며 없으면 null.\n\n예: '욕설이 포함되어 있습니다.', '부적절한 프로필 사진이 있습니다.' 등."},{"type":"null","description":"신고 상세 설명/코멘트. 신고자가 보충적으로 입력하는 자유 텍스트입니다. 선택 입력이며 없으면 null.\n\n예: '욕설이 포함되어 있습니다.', '부적절한 프로필 사진이 있습니다.' 등."}],"description":"신고 상세 설명/코멘트. 신고자가 보충적으로 입력하는 자유 텍스트입니다. 선택 입력이며 없으면 null.\n\n예: '욕설이 포함되어 있습니다.', '부적절한 프로필 사진이 있습니다.' 등."},"reported_at":{"type":"string","format":"date-time","description":"신고 생성(등록) 시각. ISO 8601 문자열로 표시됨. 서버 혹은 클라이언트에서 할당해야 하며, 시스템 시간 정책을 따릅니다.\n\nPrisma discussionboard_reports.reported_at에 대응."}},"required":["discussionboard_report_type_id","reporting_member_id","target_object_id","target_object_type","reported_at"],"description":"discussionboard_reports 신규 신고 생성 API 요청객체 DTO.\n\n실제 신고 테이블에 필요한 모든 필수/선택 항목을 포함합니다.\n\n신고하려는 유형, 신고자 ID, 신고 대상, 상세설명, 신고 등록시간 등 스키마 기준 필드만 존재해야 합니다."},"IDiscussionboardReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"신고 레코드의 고유 식별자(Primary Key). Prisma discussionboard_reports.id 칼럼과 일치합니다.\n\n조회, 수정, 감사 등 모든 워크플로우의 핵심 참조 포인트입니다."},"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형을 지정하는 UUID. Prisma discussionboard_report_types.id의 FK입니다.\n\n각 신고 유형(스팸, 욕설 등)별 고유 식별자입니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고를 제출한 회원의 UUID. discussionboard_members.id를 FK로 가집니다."},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상(row)의 UUID. post, comment, member 등 다양한 객체가 신고 타겟이 될 수 있습니다. FK 혹은 Poly FK 패턴으로 사용합니다."},"target_object_type":{"type":"string","description":"신고 대상의 유형. 예: 'post', 'comment', 'member' 등(논리적 enum).\n\n프론트/백 오피스에선 이 값을 기반으로 오브젝트 조회, 정책 결정을 수행합니다."},"report_description":{"oneOf":[{"type":"string","description":"신고 이유의 상세설명. 사용자가 남긴 의견, 신고 사유, 참조 등입니다. 선택 입력으로 null일 수 있습니다.\n\nPrisma discussionboard_reports.report_description."},{"type":"null","description":"신고 이유의 상세설명. 사용자가 남긴 의견, 신고 사유, 참조 등입니다. 선택 입력으로 null일 수 있습니다.\n\nPrisma discussionboard_reports.report_description."}],"description":"신고 이유의 상세설명. 사용자가 남긴 의견, 신고 사유, 참조 등입니다. 선택 입력으로 null일 수 있습니다.\n\nPrisma discussionboard_reports.report_description."},"reported_at":{"type":"string","format":"date-time","description":"신고가 등록된 시간. ISO 8601 포맷의 datetime 문자열.\n\n신고 생성 시 서버가 할당하는 값입니다."}},"required":["id","discussionboard_report_type_id","reporting_member_id","target_object_id","target_object_type","reported_at"],"description":"discussionboard_reports 테이블의 레코드 원본을 완벽하게 반영하는 타입입니다.\n\n모든 신고 데이터의 단일 원자 단위(atomic record)를 표현하며, 실제 오브젝트 구조는 Prisma 스키마의 칼럼 주석과 일치합니다.\n\n관리 대시보드, 신고 접근·수정·감사 API에서 공통적으로 사용합니다."},"IDiscussionboardReport.IRequest":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형 필터링 조건. Prisma discussionboard_reports.discussionboard_report_type_id 기준으로 검색할 때 사용됩니다."},"reporting_member_id":{"type":"string","format":"uuid","description":"신고 제출 회원의 ID로 검색(필터링)할 때 사용. FK: discussionboard_members.id"},"target_object_id":{"type":"string","format":"uuid","description":"신고 대상 Object의 ID로 Filtering을 진행할 때 지정합니다."},"target_object_type":{"type":"string","description":"신고 대상 유형. 예: post/comment/member 등, 특정 클래스타입 필터링시 사용합니다."},"report_description":{"type":"string","description":"신고 상세 내용(서브키워드, 전문 포함)으로 부분 검색/필터에 사용합니다."},"reported_at":{"type":"string","format":"date-time","description":"신고 등록일(단일/범위) 조건으로 필터링할 때 사용됩니다. 시간 범위 검색에서 쌍(pair)으로 사용하기도 함."}},"description":"discussionboard_reports 레코드 조회요청에 사용되는 검색조건 DTO입니다.\n\n검색 및 필터 엔드포인트(PATCH)에서 사용되며, 각 필터 파라미터는 discussionboard_reports DB스키마의 칼럼과 일치해야 합니다.\n\n복합조건, 기간쿼리, 사용자 기반 검색 등에서 활용 가능합니다. 입력하지 않은 항목은 전체 결과로 매칭됩니다.","required":[]},"IPageIDiscussionboardReport":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 메타데이터(현재 페이지, 전체 페이지, 총 데이터수 등). IPage 규격 참고."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardReport"},"description":"discussionboard_reports의 각 atomic record 객체 배열.\n\n신고 레코드 전체 목록을 반환하며, 각 원소는 discussionboard_reports의 모든 주요 칼럼 정보를 제공합니다."}},"required":["pagination","data"],"description":"discussionboard_reports 신고 레코드 페이징 컨테이너.\n\n검색 결과를 페이지 단위로 반환하는데 사용되며, pagination(메타데이터)와 신고 리스트(data)로 구성됩니다."},"IDiscussionboardReport.IUpdate":{"type":"object","properties":{"discussionboard_report_type_id":{"type":"string","format":"uuid","description":"신고 유형 UUID. 변경 시 해당 신고의 분류가 갱신됩니다."},"report_description":{"oneOf":[{"type":"string","description":"신고 상세 설명(수정/편집 등). null일 수 있습니다."},{"type":"null","description":"신고 상세 설명(수정/편집 등). null일 수 있습니다."}],"description":"신고 상세 설명(수정/편집 등). null일 수 있습니다."}},"description":"discussionboard_reports 테이블의 레코드 수정에 사용되는 DTO입니다.\n\n신고 유형 혹은 상세 설명을 변경할 수 있습니다.\n\n필드 누락 시, 기존 값이 유지됩니다. Prisma discussionboard_reports 스키마 설명을 직접 참고하세요.","required":[]},"IDiscussionboardReportType.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형의 고유 코드(예: 'abuse', 'spam').\n\n프론트 및 백오피스에서 신고 분류를 식별할 때 사용.\n\nPrisma discussionboard_report_types.code 참조."},"display_name":{"type":"string","description":"UI/관리 영역에 표시되는 신고 유형명.\n\n사용자와 관리자에게 쉽게 인지될 수 있도록 명확하게 설정."},"description":{"oneOf":[{"type":"string","description":"신고 유형에 대한 관리자 설명/메모. 정책적 해설 또는 가이드로 사용. Null도 허용."},{"type":"null","description":"신고 유형에 대한 관리자 설명/메모. 정책적 해설 또는 가이드로 사용. Null도 허용."}],"description":"신고 유형에 대한 관리자 설명/메모. 정책적 해설 또는 가이드로 사용. Null도 허용."},"active":{"type":"boolean","description":"신고 유형의 현재 사용 여부(플랫폼에서 선택 가능한 상태면 true). 비/활성화 정책에 맞게 DB 저장."},"created_at":{"type":"string","format":"date-time","description":"신고 유형 레코드 생성 시각. ISO 8601 형식의 datetime 문자열로 자동배정이 권장됨."}},"required":["code","display_name","active","created_at"],"description":"신고 유형 추가용 API 요청 객체.\n\n신고 유형의 코드, 사용자 표시명, 설명, 활성화 여부 및 생성일자를 제공합니다.\n\n참고: Prisma discussionboard_report_types의 필드 및 로직 설명 참조."},"IDiscussionboardReportType":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"신고 유형 마스터의 고유 식별자. report_types 마스터 키로서 관리 및 참조 포인트.\n\nPrisma discussionboard_report_types.id와 일치."},"code":{"type":"string","description":"신고 유형 코드. 비즈니스 로직, 프론트엔드, 백오피스, 분류트리 등에 활용."},"display_name":{"type":"string","description":"신고 유형 UI표시명. 사용자가 쉽게 선택/식별할 수 있는 이름."},"description":{"oneOf":[{"type":"string","description":"신고 유형 상세설명/가이드. 관리자 주요 참고사항 등. Null 허용."},{"type":"null","description":"신고 유형 상세설명/가이드. 관리자 주요 참고사항 등. Null 허용."}],"description":"신고 유형 상세설명/가이드. 관리자 주요 참고사항 등. Null 허용."},"active":{"type":"boolean","description":"현재 신고 유형의 활성상태(사용 가능 여부). 플랫폼에서 정책적으로 선택을 허용하는지 여부.\n\nPrisma discussionboard_report_types.active 칼럼과 일치."},"created_at":{"type":"string","format":"date-time","description":"신고 유형 레코드 등록 일시. 관리/로그용."}},"required":["id","code","display_name","active","created_at"],"description":"신고 유형 마스터 테이블(discussionboard_report_types)의 원본 레코드 타입.\n\nPrisma에서 정의된 모든 필드 정보를 완비합니다.\n\n신고 유형 관리를 위한 표준 구조이며, 비즈니스 로직, 분류, 설정, 감사 등에서 공통 활용합니다."},"IDiscussionboardReportType.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형 코드 기준 검색 파라미터. 부분 일치 검색에 활용.\n\n예: 'spam', 'abuse' 등."},"display_name":{"type":"string","description":"UI표시명 기준 필터. Substring 검색 사용 가능."},"description":{"type":"string","description":"상세 설명 텍스트 기반 검색 조건."},"active":{"type":"boolean","description":"활성화/비활성화 여부 기준 검색 조건."},"created_at":{"type":"string","format":"date-time","description":"등록일/시각 기준 필터링(단일/범위/기간 등)."}},"description":"신고 유형 마스터(discussionboard_report_types)의 검색, 필터 API 요청 DTO.\n\n코드, 이름, 설명, 활성화 여부 및 생성일을 기준으로 다양한 인덱스 검색 및 리스트 필터링에 활용합니다.\n\n비즈니스 요구에 따라 부분/전체 일치 검색을 지원합니다.","required":[]},"IPageIDiscussionboardReportType":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"페이지네이션 정보입니다. 전체 데이터셋에 대한 페이지 구성을 제공합니다."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardReportType"},"description":"신고 유형 엔티티 레코드 배열(각 항목이 atomic record)."}},"required":["pagination","data"],"description":"신고 유형 마스터 엔티티 검색 결과를 페이지네이션과 함께 감싸는 표준 리스팅 타입입니다.\n\n각 신고 유형 엔티티 및 전체 페이지 정보가 제공됩니다."},"IDiscussionboardReportType.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"신고 유형 마스터의 고유 코드. 변경 시, 전체 신고 분류 체계에 반영됨.\n\n중복/충돌 관리 필요. Prisma discussionboard_report_types.code에 대응."},"display_name":{"type":"string","description":"UI/관리 표시명. 편집 시 사용자/관리자 구분 쉬운 값으로 설정해야 함."},"description":{"oneOf":[{"type":"string","description":"상세(관리자) 설명/가이드. Null 허용."},{"type":"null","description":"상세(관리자) 설명/가이드. Null 허용."}],"description":"상세(관리자) 설명/가이드. Null 허용."},"active":{"type":"boolean","description":"신고 유형 활성화 여부. 관리 정책에 따라 비활성화 시 사용 제한."}},"description":"신고 유형 마스터(discussionboard_report_types) 수정 요청 DTO.\n\n수정 가능한 칼럼: 코드, 표시명, 설명, active 상태 등. 누락 필드는 기존 값 유지.\n\n구체적 정책, 칼럼 제약, 예시는 Prisma 테이블 설명 참고 필요.","required":[]},"IDiscussionboardModerationAction.ICreate":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the associated report that triggered this moderation action, or null if created independently. References the reporting incident that led to this moderation step (nullable according to Prisma schema)."},{"type":"null","format":"uuid","description":"ID of the associated report that triggered this moderation action, or null if created independently. References the reporting incident that led to this moderation step (nullable according to Prisma schema)."}],"description":"ID of the associated report that triggered this moderation action, or null if created independently. References the reporting incident that led to this moderation step (nullable according to Prisma schema)."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator or admin performing this action. Foreign key to either the moderator or admin assignment table."},"target_object_id":{"type":"string","format":"uuid","description":"UUID of the object being moderated (post, comment, member, board, etc.). This is the direct subject of the moderation action."},"target_object_type":{"type":"string","description":"Type/classification of the object being moderated. Examples: 'post', 'comment', 'member', 'board'. Provides polymorphic reference resolution in moderation workflows."},"action_type":{"type":"string","description":"Type of moderation action being performed. Examples include: 'warn', 'edit', 'delete', 'ban', 'lock', 'pin', etc. Used for audit, analytics, and role-appropriate workflows."},"rationale":{"type":"string","description":"Explanation or justification for why this action was taken. Critical for audit/compliance, escalation review, and appeals. May include member behavior, policy reference, or summarization of investigation."},"actioned_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was performed. Required for audit trails, SLA compliance, and chronological reporting."}},"required":["acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"Request body for creating a moderation action in the system. Content and constraints mapped strictly to the discussionboard_moderation_actions Prisma model. All foreign keys and timestamps follow schema documentation. Nullable report_id optionally associates this action to a prior user incident report. Conforms to role-based escalation workflows and compliance/audit rules described in requirements."},"IDiscussionboardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the moderation action record, unique identifier. Prisma table column: id."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the report that prompted the action, or null if this was a proactive or patrol action. Prisma column: report_id."},{"type":"null","format":"uuid","description":"ID of the report that prompted the action, or null if this was a proactive or patrol action. Prisma column: report_id."}],"description":"ID of the report that prompted the action, or null if this was a proactive or patrol action. Prisma column: report_id."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator/admin account that performed the action. Prisma column: acting_moderator_id."},"target_object_id":{"type":"string","format":"uuid","description":"UUID of the entity being moderated (such as post, comment, or user). Prisma column: target_object_id."},"target_object_type":{"type":"string","description":"Type/classification of the target object. Examples: 'post', 'comment', etc. Prisma column: target_object_type."},"action_type":{"type":"string","description":"Type of moderation action ('warn','edit','delete','ban','lock', etc.). Prisma column: action_type."},"rationale":{"type":"string","description":"Detailed rationale or explanation for this moderation action. For compliance, transparency, and appeals. Prisma column: rationale."},"actioned_at":{"type":"string","format":"date-time","description":"Timestamp when the action was taken. For timeline/audit use. Prisma column: actioned_at."}},"required":["id","acting_moderator_id","target_object_id","target_object_type","action_type","rationale","actioned_at"],"description":"Represents a moderation action as stored in the database, in direct correspondence with the discussionboard_moderation_actions Prisma schema. Includes polymorphic linkage, audit trail, action metadata, and explanatory rationale per business rules."},"IDiscussionboardModerationAction.IRequest":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by report ID associated with moderation action (nullable, matches Prisma schema)."},{"type":"null","format":"uuid","description":"Filter by report ID associated with moderation action (nullable, matches Prisma schema)."}],"description":"Filter by report ID associated with moderation action (nullable, matches Prisma schema)."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Filter to only actions performed by this moderator/admin UUID."},"target_object_id":{"type":"string","format":"uuid","description":"Filter by the specific object moderated."},"target_object_type":{"type":"string","description":"Filter by the type/classification of object under moderation."},"action_type":{"type":"string","description":"Filter by type of moderation action, e.g., 'warn', 'edit', 'ban'."},"actioned_at_from":{"type":"string","format":"date-time","description":"Lower bound for moderation action date."},"actioned_at_to":{"type":"string","format":"date-time","description":"Upper bound for moderation action date."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination parameters (page, limit, etc.)."}},"required":[],"description":"Request object for filtering/searching moderation actions. Supports advanced filtering by fields defined in schema plus optional pagination envelope according to business needs. All filters strictly match schema columns to ensure query compliance."},"IPageIDiscussionboardModerationAction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardModerationAction"},"description":"List of matching moderation action records for the provided query and pagination envelope."}},"required":["pagination","data"],"description":"Paginated result for moderation action search/list APIs. Data array contains moderation action records, paging metadata in standard format."},"IDiscussionboardModerationAction.IUpdate":{"type":"object","properties":{"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Update the associated report for this action (if any). Nullable per schema."},{"type":"null","format":"uuid","description":"Update the associated report for this action (if any). Nullable per schema."}],"description":"Update the associated report for this action (if any). Nullable per schema."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the account performing the update—typically for audit/audit correction workflows."},"target_object_id":{"type":"string","format":"uuid","description":"ID of the new or corrected object under moderation (admin workflows only)."},"target_object_type":{"type":"string","description":"(Optional) new or corrected classification for object if amending moderation record."},"action_type":{"type":"string","description":"(Optional) update to moderation action type. Only if justified by error or appeals logic."},"rationale":{"type":"string","description":"Corrected, supplemented or amended rationale for the action (required for audit fixes/appeals)."},"actioned_at":{"type":"string","format":"date-time","description":"(Optional) new/corrected time of moderation action, for audit consistency."}},"required":[],"description":"Request body to update a moderation action. All fields correspond 1:1 to possible changes in moderation record, as allowed in platform audit flows. Omitted fields are left unchanged. Update permission is strictly admin/moderator only, per requirements. Conforms strictly to actual schema fields—never invents non-existent properties."},"IDiscussionboardBan.ICreate":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"UUID of the member being banned. Foreign key to member account."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator/admin imposing the ban."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the report for which this ban was issued (nullable)."},{"type":"null","format":"uuid","description":"ID of the report for which this ban was issued (nullable)."}],"description":"ID of the report for which this ban was issued (nullable)."},"reason":{"type":"string","description":"Explanation for ban—summarizes the infraction and justification for audit/appeal. Required."},"ban_type":{"type":"string","description":"Type of ban, either 'temporary' or 'permanent'. Directly mapped from business rules."},"banned_at":{"type":"string","format":"date-time","description":"When the ban takes effect (ISO8601 UTC timestamp)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"If temporary: when the ban expires (nullable if permanent, as per schema)."},{"type":"null","format":"date-time","description":"If temporary: when the ban expires (nullable if permanent, as per schema)."}],"description":"If temporary: when the ban expires (nullable if permanent, as per schema)."}},"required":["banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Request to create a ban (or suspension) for a member. All schema-required fields per discussionboard_bans Prisma model. Bans may be temporary (expires_at set) or permanent (expires_at null). Only actors with moderation/admin roles may create. Rationale for audit, ban escalation, or appeals is mandatory."},"IDiscussionboardBan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for this ban record."},"banned_member_id":{"type":"string","format":"uuid","description":"ID of the member subjected to the ban."},"acting_moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator/admin issuing the ban."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the report incident for this ban, or null if initiated proactively."},{"type":"null","format":"uuid","description":"Reference to the report incident for this ban, or null if initiated proactively."}],"description":"Reference to the report incident for this ban, or null if initiated proactively."},"reason":{"type":"string","description":"Explanation provided for the ban, as shown in audit trail or appeals review."},"ban_type":{"type":"string","description":"Ban type: 'temporary' or 'permanent', according to escalation process."},"banned_at":{"type":"string","format":"date-time","description":"Timestamp when ban was imposed."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Ban expiry time, if temporary. Null for permanent bans."},{"type":"null","format":"date-time","description":"Ban expiry time, if temporary. Null for permanent bans."}],"description":"Ban expiry time, if temporary. Null for permanent bans."}},"required":["id","banned_member_id","acting_moderator_id","reason","ban_type","banned_at"],"description":"Represents a single ban or suspension as issued by moderation. All business logic and timelines correspond to business rule escalation and appeals process. Foreign keys maintained as per schema, reason and time envelope required for audit."},"IDiscussionboardBan.IRequest":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"Filter by the banned member UUID. For reviewing all bans against a user."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Filter by moderator/admin who imposed the ban."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by source report for this ban (nullable)."},{"type":"null","format":"uuid","description":"Filter by source report for this ban (nullable)."}],"description":"Filter by source report for this ban (nullable)."},"ban_type":{"type":"string","description":"Filter by ban type—'temporary' or 'permanent'."},"banned_at_from":{"type":"string","format":"date-time","description":"Earliest start for ban search window."},"banned_at_to":{"type":"string","format":"date-time","description":"Latest end for ban search window."},"expires_at_from":{"type":"string","format":"date-time","description":"Min expiry date for ban list, if any."},"expires_at_to":{"type":"string","format":"date-time","description":"Max expiry date for ban list, if any."},"pagination":{"$ref":"#/components/schemas/IPage.IPagination"}},"required":[],"description":"Request/filter body for searching/listing bans in moderation workflow. All properties map strictly to ban schema for index/search methods. Non-existent properties never invented."},"IPageIDiscussionboardBan":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardBan"},"description":"The array of ban records resulting from the ban query/filter envelope."}},"required":["pagination","data"],"description":"Paginated list of ban results for moderation audit/escalation workflows."},"IDiscussionboardBan.IUpdate":{"type":"object","properties":{"banned_member_id":{"type":"string","format":"uuid","description":"Update the member identifier for the ban (rare, use only in admin schema repairs)."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Update/override the moderator/admin responsible for this ban."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Link or update the source report for this ban. Nullable."},{"type":"null","format":"uuid","description":"Link or update the source report for this ban. Nullable."}],"description":"Link or update the source report for this ban. Nullable."},"reason":{"type":"string","description":"Update or amend the stated reason for this ban (for audit appeal corrections)."},"ban_type":{"type":"string","description":"Update ban type to 'temporary' or 'permanent' if correction needed for business escalation record."},"banned_at":{"type":"string","format":"date-time","description":"Correction/update of the ban issue timestamp."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update ban expiration to new time (permit extension or early end per appeals). Null for permanent bans."},{"type":"null","format":"date-time","description":"Update ban expiration to new time (permit extension or early end per appeals). Null for permanent bans."}],"description":"Update ban expiration to new time (permit extension or early end per appeals). Null for permanent bans."}},"required":[],"description":"Request for updating a ban record. All parameters must map to existing schema fields for ban entity. This may be used for admin audit corrections or appeals. No non-existent properties allowed."},"IDiscussionboardWarning.ICreate":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"UUID of the member to be warned. Must reference a real account."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of moderator/admin issuing the warning."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report record that triggered this warning, or null if not tied to a report."},{"type":"null","format":"uuid","description":"Report record that triggered this warning, or null if not tied to a report."}],"description":"Report record that triggered this warning, or null if not tied to a report."},"reason":{"type":"string","description":"Short but complete explanation for the warning, documenting the infraction for compliance, appeals, and member notification."},"warned_at":{"type":"string","format":"date-time","description":"When the warning was assigned, as required by audit and escalation timelines."}},"required":["warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Request to create or issue a warning to member, we enforce all business rules for warning/ban escalation as per platform compliance requirements. All fields are mandatory except nullable report_id; only actors with mod/admin roles may create. No unsupported or non-schema properties permitted."},"IDiscussionboardWarning":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique id for the warning record. Serves as the primary key/audit trace for the escalation pipeline."},"warned_member_id":{"type":"string","format":"uuid","description":"UUID of the member to whom the warning applies. Links this warning to user identity and moderation/case history."},"acting_moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator/admin who issued the warning. Provides accidental/action tracing, supports appeals workflows, and is critical for audit logging."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Linked moderation report (if present) that caused the warning. Nullable for preemptive warnings or evidence-based moderation. Supports platform compliance and audit."},{"type":"null","format":"uuid","description":"Linked moderation report (if present) that caused the warning. Nullable for preemptive warnings or evidence-based moderation. Supports platform compliance and audit."}],"description":"Linked moderation report (if present) that caused the warning. Nullable for preemptive warnings or evidence-based moderation. Supports platform compliance and audit."},"reason":{"type":"string","description":"Detailed, user and audit-facing explanation for the warning being issued. Used in escalation, member case summary, and appeal discussions. Example: 'Multiple abusive comments across several threads.'"},"warned_at":{"type":"string","format":"date-time","description":"Date/time when the warning event occurred. Used as time anchor for escalation policy and audit trace."}},"required":["id","warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Atomic warning record for member moderation. All fields map directly to the warnings table in the DB. Used in policy escalation, audit, user notification, and appeals resolution."},"IDiscussionboardWarning.IRequest":{"type":"object","properties":{"warned_member_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the member to be warned. Must reference an existing member in the discussion board system. Used for associating the warning event with the correct actor as per moderation and escalation business rules."},"acting_moderator_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the moderator or admin issuing the warning. Used for audit logging and compliance tracking. Must reference a valid moderator/admin."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Report record (UUID) that caused this warning. Nullable if warning is preemptive or due to off-platform or accumulated evidence. Used to link the warning to the triggering moderation event for audit/compliance."},{"type":"null","format":"uuid","description":"Report record (UUID) that caused this warning. Nullable if warning is preemptive or due to off-platform or accumulated evidence. Used to link the warning to the triggering moderation event for audit/compliance."}],"description":"Report record (UUID) that caused this warning. Nullable if warning is preemptive or due to off-platform or accumulated evidence. Used to link the warning to the triggering moderation event for audit/compliance."},"reason":{"type":"string","description":"Textual explanation (required) for why the warning is being issued. Business rules require detailed description of the violation or risk observed so that escalation and appeal flows have the necessary context. Example: 'Repeated spam posting despite prior reminders.'"},"warned_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601 format) when the warning was applied. Used for time-series audit, escalation, and compliance tracking."}},"required":["warned_member_id","acting_moderator_id","reason","warned_at"],"description":"Request body for searching/filtering warning records or creating a new warning in the platform. Fields strictly map to the Prisma schema columns. Used in audit/compliance and escalation review flows. Each property directly references a column in the database table—no virtual or derived fields present."},"IPageIDiscussionboardWarning":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardWarning"},"description":"List of warning records for the current page."}},"required":["pagination","data"],"description":"Paginated result wrapper for warning record queries. Implements platform-wide paging strategy for scalable moderation/audit UIs and backoffice analytics. Each page includes metadata (pagination info) and a list of warning objects as defined in the core model. The schema is used not just for UI, but also for APIs, exports, and cross-service batch integration."},"IDiscussionboardWarning.IUpdate":{"type":"object","properties":{"warned_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target member (UUID) for the warning. Only changed in rare remediation or audit error correction; otherwise, immutable after creation."},{"type":"null","format":"uuid","description":"Target member (UUID) for the warning. Only changed in rare remediation or audit error correction; otherwise, immutable after creation."}],"description":"Target member (UUID) for the warning. Only changed in rare remediation or audit error correction; otherwise, immutable after creation."},"acting_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderator/admin actor (UUID) issuing or updating the warning. Editable if audit/appeals flow requires correction."},{"type":"null","format":"uuid","description":"Moderator/admin actor (UUID) issuing or updating the warning. Editable if audit/appeals flow requires correction."}],"description":"Moderator/admin actor (UUID) issuing or updating the warning. Editable if audit/appeals flow requires correction."},"report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Moderation report (UUID) that triggered the warning. Nullable for preemptive admin disciplinary actions. Used for audit trail."},{"type":"null","format":"uuid","description":"Moderation report (UUID) that triggered the warning. Nullable for preemptive admin disciplinary actions. Used for audit trail."}],"description":"Moderation report (UUID) that triggered the warning. Nullable for preemptive admin disciplinary actions. Used for audit trail."},"reason":{"oneOf":[{"type":"string","description":"Updated textual explanation for the warning, reflecting new info or appeal reason after audit review."},{"type":"null","description":"Updated textual explanation for the warning, reflecting new info or appeal reason after audit review."}],"description":"Updated textual explanation for the warning, reflecting new info or appeal reason after audit review."},"warned_at":{"oneOf":[{"type":"string","format":"date-time","description":"Edit of when the warning was issued (typically only in audit remapping or correction workflows)."},{"type":"null","format":"date-time","description":"Edit of when the warning was issued (typically only in audit remapping or correction workflows)."}],"description":"Edit of when the warning was issued (typically only in audit remapping or correction workflows)."}},"description":"Update type for warning entity. Allows partial updates/patches for appeals, audit corrections, or moderator/admin workflow error remediation. Only schema-present fields may be updated, and all properties are nullable to support PATCH-style update flows in APIs. No delete/restore support as warnings are always atomic and immutable until deleted. All properties map to audit trail requirements in compliance workflows.","required":[]},"IDeleteConfirmation":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates if the delete operation was confirmed successful."},"message":{"type":"string","description":"Optional explanatory message, e.g., reason for deletion result or details about audit/error handling."}},"required":["success"],"description":"Delete confirmation response returned when soft/hard delete operations are performed. Standardizes the platform's delete messaging format for consistent handling in all APIs, governance, and client error workflows."},"IDiscussionboardEngagementMetric.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target member's UUID for filtering engagement metrics. If null, the filter is not applied and all members are included. Used for DAU/WAU and individual engagement tracking analytics."},{"type":"null","format":"uuid","description":"Target member's UUID for filtering engagement metrics. If null, the filter is not applied and all members are included. Used for DAU/WAU and individual engagement tracking analytics."}],"description":"Target member's UUID for filtering engagement metrics. If null, the filter is not applied and all members are included. Used for DAU/WAU and individual engagement tracking analytics."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Restrict analytics to a specific board (UUID). Nullable for global metric queries. Used by admin analytics panels to break down activity by board."},{"type":"null","format":"uuid","description":"Restrict analytics to a specific board (UUID). Nullable for global metric queries. Used by admin analytics panels to break down activity by board."}],"description":"Restrict analytics to a specific board (UUID). Nullable for global metric queries. Used by admin analytics panels to break down activity by board."},"engagement_date_from":{"oneOf":[{"type":"string","format":"date-time","description":"Filter engagement metrics starting from this date (inclusive). Supports dashboard time range selection and heatmaps."},{"type":"null","format":"date-time","description":"Filter engagement metrics starting from this date (inclusive). Supports dashboard time range selection and heatmaps."}],"description":"Filter engagement metrics starting from this date (inclusive). Supports dashboard time range selection and heatmaps."},"engagement_date_to":{"oneOf":[{"type":"string","format":"date-time","description":"Filter engagement metrics up to this date (inclusive). Enables comparative/charts analysis over periods."},{"type":"null","format":"date-time","description":"Filter engagement metrics up to this date (inclusive). Enables comparative/charts analysis over periods."}],"description":"Filter engagement metrics up to this date (inclusive). Enables comparative/charts analysis over periods."}},"description":"Request shape for filtering/searching engagement metrics analytics. Every property directly maps to independently indexed columns in the analytics table, supporting slice-and-dice UI, heatmap queries, time-series, and cohort dashboards. Nulls allow for unconstrained (global) queries.","required":[]},"IPageIDiscussionboardEngagementMetric":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardEngagementMetric"},"description":"Engagement metrics records for the current page."}},"required":["pagination","data"],"description":"Paginated result container for analytics dashboard queries and bulk-export scenarios. The IPage wrapper allows for efficient front-end pagination, reporting, and export mechanisms. The core analytics metric properties can be further filtered by request shape."},"IDiscussionboardEngagementMetric":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the engagement metric record."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional member UUID for individual engagement. Null for anonymous or aggregate data."},{"type":"null","format":"uuid","description":"Optional member UUID for individual engagement. Null for anonymous or aggregate data."}],"description":"Optional member UUID for individual engagement. Null for anonymous or aggregate data."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board context for the engagement metric. Null if metric is board-agnostic."},{"type":"null","format":"uuid","description":"Board context for the engagement metric. Null if metric is board-agnostic."}],"description":"Board context for the engagement metric. Null if metric is board-agnostic."},"engagement_date":{"type":"string","format":"date-time","description":"Timestamp for the metrics aggregation bucket."},"posts_created_count":{"type":"integer","description":"Total posts created in this period for the metric row."},"comments_created_count":{"type":"integer","description":"Total comments created in this period for the metric row."},"votes_cast_count":{"type":"integer","description":"Total voting actions cast in this period for the metric row."}},"required":["id","engagement_date","posts_created_count","comments_created_count","votes_cast_count"],"description":"Atomic row representing engagement activity for a specific user or board in a specific time period; used to build analytics, trend charts, and cohort dashboards."},"IDiscussionboardActivityLog.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Search for activity logs from actions by a specific member (UUID). Null means all users."},{"type":"null","format":"uuid","description":"Search for activity logs from actions by a specific member (UUID). Null means all users."}],"description":"Search for activity logs from actions by a specific member (UUID). Null means all users."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Restrict logs to a specific board (UUID). Ideal for trending/board usage tracking."},{"type":"null","format":"uuid","description":"Restrict logs to a specific board (UUID). Ideal for trending/board usage tracking."}],"description":"Restrict logs to a specific board (UUID). Ideal for trending/board usage tracking."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter down to logs related to a certain thread id (UUID)."},{"type":"null","format":"uuid","description":"Filter down to logs related to a certain thread id (UUID)."}],"description":"Filter down to logs related to a certain thread id (UUID)."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Only logs about actions involving this post (UUID). Used for post-level audit review."},{"type":"null","format":"uuid","description":"Only logs about actions involving this post (UUID). Used for post-level audit review."}],"description":"Only logs about actions involving this post (UUID). Used for post-level audit review."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Limit activity logs to comments on this id (UUID)."},{"type":"null","format":"uuid","description":"Limit activity logs to comments on this id (UUID)."}],"description":"Limit activity logs to comments on this id (UUID)."},"event_type":{"oneOf":[{"type":"string","description":"Type of activity (e.g., 'login', 'post_create'). Null disables this filter."},{"type":"null","description":"Type of activity (e.g., 'login', 'post_create'). Null disables this filter."}],"description":"Type of activity (e.g., 'login', 'post_create'). Null disables this filter."},"event_timestamp_from":{"oneOf":[{"type":"string","format":"date-time","description":"Start timestamp for activity log filtering."},{"type":"null","format":"date-time","description":"Start timestamp for activity log filtering."}],"description":"Start timestamp for activity log filtering."},"event_timestamp_to":{"oneOf":[{"type":"string","format":"date-time","description":"End (inclusive) timestamp for activity log filtering."},{"type":"null","format":"date-time","description":"End (inclusive) timestamp for activity log filtering."}],"description":"End (inclusive) timestamp for activity log filtering."}},"description":"Request schema for filtering/searching raw activity log events. Allows for fine-grained audit, analytics, anomaly detection, and event drill-down analysis per requirements documentation. Null fields expand to global search. All fields map to indexed columns.","required":[]},"IPageIDiscussionboardActivityLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardActivityLog"},"description":"Array of raw activity log events matching query for analytics, audit, or heatmap display."}},"required":["pagination","data"],"description":"Paginated result structure for efficient front-end consumption and high-volume analytics dashboard queries. Used in activity heatmaps, rare journey tracking, and anomaly investigation workflows."},"IDiscussionboardActivityLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique id for the activity log record. Each log represents a single user/system event."},"discussionboard_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"Member context for the event. Nullable for anonymous/system-origin events."},{"type":"null","format":"uuid","description":"Member context for the event. Nullable for anonymous/system-origin events."}],"description":"Member context for the event. Nullable for anonymous/system-origin events."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional board context for the event (UUID)."},{"type":"null","format":"uuid","description":"Optional board context for the event (UUID)."}],"description":"Optional board context for the event (UUID)."},"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional thread context (UUID) for the log event."},{"type":"null","format":"uuid","description":"Optional thread context (UUID) for the log event."}],"description":"Optional thread context (UUID) for the log event."},"discussionboard_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional post context (UUID) for the log event."},{"type":"null","format":"uuid","description":"Optional post context (UUID) for the log event."}],"description":"Optional post context (UUID) for the log event."},"discussionboard_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional comment context (UUID) for the log event."},{"type":"null","format":"uuid","description":"Optional comment context (UUID) for the log event."}],"description":"Optional comment context (UUID) for the log event."},"event_timestamp":{"type":"string","format":"date-time","description":"Timestamp for the event. Required for analytics, audit trail, and system time-series visualizations."},"event_type":{"type":"string","description":"Activity type/tag for the event (login, post_create, ban, etc.)."},"event_metadata":{"oneOf":[{"type":"string","description":"Arbitrary context JSON (stringified) for additional event metadata or payloads."},{"type":"null","description":"Arbitrary context JSON (stringified) for additional event metadata or payloads."}],"description":"Arbitrary context JSON (stringified) for additional event metadata or payloads."}},"required":["id","event_timestamp","event_type"],"description":"Single event row as stored in the normalized audit/event tracking table. Used for anomaly detection, rare journey trace, and compliance audits. Every property is directly linked to a schema column."},"IDiscussionboardTrendingTopic.IRequest":{"type":"object","properties":{"discussionboard_thread_id":{"oneOf":[{"type":"string","format":"uuid","description":"Query for trending topic results for only this thread (UUID). Null = unconstrained."},{"type":"null","format":"uuid","description":"Query for trending topic results for only this thread (UUID). Null = unconstrained."}],"description":"Query for trending topic results for only this thread (UUID). Null = unconstrained."},"discussionboard_board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter to a particular board's trending topics (UUID). Null disables constraint and yields aggregate."},{"type":"null","format":"uuid","description":"Filter to a particular board's trending topics (UUID). Null disables constraint and yields aggregate."}],"description":"Filter to a particular board's trending topics (UUID). Null disables constraint and yields aggregate."},"ranking_period_date_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound for ranking period (inclusive) for trend querying (date/time, ISO8601)."},{"type":"null","format":"date-time","description":"Lower bound for ranking period (inclusive) for trend querying (date/time, ISO8601)."}],"description":"Lower bound for ranking period (inclusive) for trend querying (date/time, ISO8601)."},"ranking_period_date_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound for ranking period."},{"type":"null","format":"date-time","description":"Upper bound for ranking period."}],"description":"Upper bound for ranking period."}},"description":"Request schema for paginated/filter search for trending topics by thread, board, or ranking period. Every property is schema-indexed to arbitrate analytics widgets/reports.","required":[]},"IPageIDiscussionboardTrendingTopic":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardTrendingTopic"},"description":"Trend topic records for current page, as required by analytics dashboard UI."}},"required":["pagination","data"],"description":"Paginated trend topic analytics results as returned from trending_topcis table queries. Used for homepage highlights, analytic dashboards, and moderation workflow for hot topics."},"IDiscussionboardTrendingTopic":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for each trending topic record, referenced throughout the analytics/trending subsystems of the forum platform. Sourced from the discussionboard_trending_topics table, this field provides a single, atomic PK for each daily or periodic trending score. Never null or re-used.\n\n@see discussionboard_trending_topics.id"},"discussionboard_thread_id":{"type":"string","format":"uuid","description":"Foreign key reference to the thread judged trending (discussionboard_threads.id). This attribute fulfills the connection between analytics and user discussion content, supporting UI panels, notification engines, and audit trails.\n\n@see discussionboard_trending_topics.discussionboard_thread_id"},"discussionboard_board_id":{"type":"string","format":"uuid","description":"Foreign key reference to the board (discussionboard_boards.id) under which the trending topic is computed and visualized. Enables board-level trending panels and analytics breakdowns for navigation purposes.\n\n@see discussionboard_trending_topics.discussionboard_board_id"},"ranking_period_date":{"type":"string","format":"date-time","description":"Date/time value representing the period for which the topic is trending (e.g., daily partition). Supports analytics roll-ups and enables accurate visualizations across dashboards.\n\n@see discussionboard_trending_topics.ranking_period_date"},"trending_score":{"type":"number","format":"double","description":"Quantitative value reflecting engagement weight, as calculated by analytics engine or background jobs, relative to a forum thread within the period. Used for ordering trending results and alerting moderation.\n\n@see discussionboard_trending_topics.trending_score"}},"required":["id","discussionboard_thread_id","discussionboard_board_id","ranking_period_date","trending_score"],"description":"Represents a single trending topic as calculated for analytics and trending panels. Sourced from the discussionboard_trending_topics Prisma table and referenced in the analytics and moderation dashboards. Contains quantitative and relational fields crucial for surfacing active forum subjects."},"IDiscussionboardNotificationTemplate.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique, short programmatic reference code for the notification template. This is used in notification jobs and must be globally unique and immutable.\n\n@see discussionboard_notification_templates.code"},"name":{"type":"string","description":"Human-readable title for the notification template, used for administrative panel labeling, review, and template configuration workflows.\n\n@see discussionboard_notification_templates.name"},"description":{"oneOf":[{"type":"string","description":"Long-form description for admins/moderators clarifying the purpose of the template, its context, and operational constraints. Optional.\n\n@see discussionboard_notification_templates.description"},{"type":"null"}],"description":"Long-form description for admins/moderators clarifying the purpose of the template, its context, and operational constraints. Optional.\n\n@see discussionboard_notification_templates.description"},"subject":{"type":"string","description":"Subject line for notification messages using this template. Required for all standard notification template creation.\n\n@see discussionboard_notification_templates.subject"},"body":{"type":"string","description":"The template body in full, including parameter placeholders. Not nullable.\n\n@see discussionboard_notification_templates.body"},"is_active":{"type":"boolean","description":"Determines template availability for notification triggering (enabled/disabled for API use; required as a direct field @see discussionboard_notification_templates.is_active)."}},"required":["code","name","subject","body","is_active"],"description":"Request body for creating a new notification message template. All major business and audit fields for template creation are present and values must conform to discussionboard_notification_templates Prisma schema."},"IDiscussionboardNotificationTemplate":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for this notification template record, serving as the primary key for template versioning, auditing, and referencing from delivery jobs and logs.\n\n@see discussionboard_notification_templates.id"},"code":{"type":"string","description":"Short, unique code for the template used for backend lookups, mapping downstream logic to the correct template record for rendering and notification dispatching.\n\n@see discussionboard_notification_templates.code"},"name":{"type":"string","description":"Human-friendly title for displaying notification templates in admin tools and analytics dashboards. Not nullable.\n\n@see discussionboard_notification_templates.name"},"description":{"oneOf":[{"type":"string","description":"Long-form (optional) explanation for admin reference, describing template's intent, scope, and usage notes for future support.\n\n@see discussionboard_notification_templates.description"},{"type":"null"}],"description":"Long-form (optional) explanation for admin reference, describing template's intent, scope, and usage notes for future support.\n\n@see discussionboard_notification_templates.description"},"subject":{"type":"string","description":"Actual subject line as rendered to users in emails or push notifications. Supports personalization markup as necessary.\n\n@see discussionboard_notification_templates.subject"},"body":{"type":"string","description":"Text or markup field containing the message body, possibly with template placeholders for personalization. Required as non-null.\n\n@see discussionboard_notification_templates.body"},"is_active":{"type":"boolean","description":"Flag determining whether this template is currently available for use in notifications. Admin/moderator toggles are provided via this field.\n\n@see discussionboard_notification_templates.is_active"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this notification template was created, for audit, timeline review, and compliance tracking.\n\n@see discussionboard_notification_templates.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the most recent modification to this template; supports support tooling and compliance review.\n\n@see discussionboard_notification_templates.updated_at"}},"required":["id","code","name","subject","body","is_active","created_at","updated_at"],"description":"Notification template entity containing all schema-compliant fields as stored in the discussionboard_notification_templates table. Used for display, auditing, and notification rendering workflows."},"IDiscussionboardNotificationTemplate.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Optional filter for searching by primary key. Narrows query to specific template record if provided."},"code":{"type":"string","description":"Optional. Allows filtering by unique template code for advanced/targeted queries."},"name":{"type":"string","description":"Allows searching or filtering results by human-friendly template name string."},"subject":{"type":"string","description":"Optionally filter or search for templates based on subject line substrings or fuzzy match."},"is_active":{"type":"boolean","description":"Enables filtering templates by their active state (true for currently enabled, false for disabled/inactive)."},"created_at_from":{"type":"string","format":"date-time","description":"Returns templates created after this timestamp for time-range queries."},"created_at_to":{"type":"string","format":"date-time","description":"Returns templates created before this timestamp for bounded-date queries."},"updated_at_from":{"type":"string","format":"date-time","description":"Filters templates updated after this time for change/recent edit review."},"updated_at_to":{"type":"string","format":"date-time","description":"Filters templates updated before this value for change window search."},"page":{"type":"integer","description":"Page number for paginated query (starting from 1)."},"limit":{"type":"integer","description":"Number of results per page for pagination."}},"required":[],"description":"Request type for paged or filtered notification template search, matching all key columns in the template schema. Used for admin/moderator dashboard and support tooling."},"IPageDiscussionboardNotificationTemplate":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the page response, including current page, per-page record count, total records, and pages."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotificationTemplate"},"description":"Array of notification template records for the page, each an atomic entity matching the notification template table schema."}},"required":["pagination","data"],"description":"Paginated wrapper object for notification template search/list responses as returned to admin/moderator dashboards for browsing."},"IDiscussionboardNotificationTemplate.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Updated unique code for the template. Optional, but if present must not violate code uniqueness constraint in the table."},"name":{"type":"string","description":"Updated human-friendly title for the template."},"description":{"oneOf":[{"type":"string","description":"Modified or replacement long-form template description text. Optional."},{"type":"null"}],"description":"Modified or replacement long-form template description text. Optional."},"subject":{"type":"string","description":"Updated subject line string for notification messages sent from this template."},"body":{"type":"string","description":"Updated template message body for notifications."},"is_active":{"type":"boolean","description":"Flag to set template visibility/enabled status in notification jobs."}},"required":[],"description":"Request type for updating attributes of a notification template in the admin panel. Only schema-allowed columns are present."},"IBoolResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the operation was successful (true) or not (false). Used for confirming deletion or other boolean-result actions."},"message":{"type":"string","description":"Optional, human-readable explanation for the result of an operation. Allows conveying status or error explanation as needed."}},"required":["success"],"description":"Simple result format for confirming/denying boolean actions (such as deletion of records)."},"IDiscussionboardNotificationPreference.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID reference to the member to which this notification preference record belongs. Must match an active user in the discussionboard_members table. Required for all creations."},"code":{"type":"string","description":"Notification template code identifying the type of notification this preference controls. Used for mapping multiple preferences per template/channel."},"email_enabled":{"type":"boolean","description":"Boolean for enabling/disabling email channel notifications for this template code and user."},"inapp_enabled":{"type":"boolean","description":"Boolean for enabling/disabling in-app (bell) notifications for this preference."},"browser_enabled":{"type":"boolean","description":"Boolean to enable/disable browser push for this template preference."}},"required":["discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled"],"description":"Notification preference creation request. Used for inserting a new row to discussionboard_notification_preferences for per-member/template/channel configuration."},"IDiscussionboardNotificationPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for the notification preference row. Serves as primary key for per-member/template/channel configuration and supports update/deletion and audit workflows."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"UUID referencing the member this preference belongs to. Foreign key to discussionboard_members.id."},"code":{"type":"string","description":"Code for the notification template this preference applies to."},"email_enabled":{"type":"boolean","description":"Specifies whether email channel notifications should be sent using this template to the user."},"inapp_enabled":{"type":"boolean","description":"Specifies whether in-app/bell notifications are enabled for this template and user."},"browser_enabled":{"type":"boolean","description":"Specifies whether browser push notifications are enabled for this template and user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this notification preference record was created, for audit/compliance support."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last change of this notification preference record."}},"required":["id","discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled","created_at","updated_at"],"description":"Atomic entity describing a notification channel/template preference entry, as persisted in the notification preference table."},"IDiscussionboardNotificationPreference.IRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Optional: filter for searching by primary key if known."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter/search on the member id owning this preference (UUID of user)."},"code":{"type":"string","description":"Filter by template code for targeted search."},"email_enabled":{"type":"boolean","description":"Optionally filter by email enabled state."},"inapp_enabled":{"type":"boolean","description":"Optionally filter by in-app enabled state."},"browser_enabled":{"type":"boolean","description":"Optional filter to match records with this browser push state."},"created_at_from":{"type":"string","format":"date-time","description":"Returns rows with created_at >= this value for time-range search."},"created_at_to":{"type":"string","format":"date-time","description":"Returns rows with created_at <= this value for bounded queries."},"updated_at_from":{"type":"string","format":"date-time","description":"Filter for last update time greater than or equal to this timestamp."},"updated_at_to":{"type":"string","format":"date-time","description":"Filter for last update time less than or equal to this timestamp."},"page":{"type":"integer","description":"Requested page for pagination controls."},"limit":{"type":"integer","description":"Results per page for paging applications."}},"required":[],"description":"Notification preference search/filter request structure using all relevant fields from the table."},"IPageDiscussionboardNotificationPreference":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Metadata and controls for the page—current/total page, record count, etc."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardNotificationPreference"},"description":"Atomic notification preference records for the page. Each entry matches the persisted row structure and schema of notification preference."}},"required":["pagination","data"],"description":"Paginated response envelope for notification preference browse/search APIs."},"IDiscussionboardNotificationPreference.IUpdate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"The unique identifier for the member (user) whose notification/channel preference is being updated. This field links the notification preference record to the appropriate user entity (see Actors component). Set automatically when members update their own preferences; may be required/admin-editable for administrative updates.\n\nReferences the member's id in the 'discussionboard_members' table as a foreign key. Used for scoping this preference to a particular user. Always a UUID value."},"code":{"type":"string","description":"Notification Template Code. Specifies for which template or notification topic this preference applies (e.g., 'thread_reply', 'mention_alert'). Must correspond to a valid notification template code in the system.\n\nEnsures preferences are associated with specific system messages and supports granular per-template and per-channel controls. Follows normalized notification management as described in the main requirements and schema docs. Typically unique per (member_id, code) pair."},"email_enabled":{"type":"boolean","description":"True if email notifications for this template/code are enabled for this member; false if email should not be sent for this topic. Implements member-level custom delivery control: users may opt in or out of email for each notification scenario. Used to comply with privacy and anti-spam regulations."},"inapp_enabled":{"type":"boolean","description":"True if in-app/bell notifications are enabled for this code for this member; false otherwise. Allows members to suppress or enable UI notification pop-ups or notification center entries for specific templates. Implements fine-grained control and aligns with system notification behaviour."},"browser_enabled":{"type":"boolean","description":"True if browser push notifications should be used for this template/code. Gives the user full choice over using browser-based push notifications for the associated topic. Integral part of user experience customization."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this notification preference was created. Required for compliance and audit. Follows standard ISO 8601 date-time format as described in the schema."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the latest modification to this preference record. Updated automatically when member or admin changes preferences. Enforces audit/compliance as required by system policies.\n\nISO 8601 format."}},"required":["discussionboard_member_id","code","email_enabled","inapp_enabled","browser_enabled","created_at","updated_at"],"description":"Request body or update object schema for updating a discussion board notification preference. This type describes the fields a member or admin is allowed to update on a notification preference record, supporting granular per-template/per-channel opt-in/opt-out of notification delivery channels (email, in-app, browser push).\n\nEach field is explained in context of notification routing as outlined in the requirements and schema documentation. All references are to system-internal ids and codes, following normalized notification and preference models. The business rules require that any updates to notification preferences pass the full set of schema validations (UUIDs, code structure, booleans). This component is integral to notification settings panels, privacy controls, and compliance dashboards for the discussion board platform."},"IDiscussionboardPrivacyPolicy.ICreate":{"type":"object","properties":{"version":{"type":"string","description":"Policy version identifier.\n\nA unique, structured identifier describing the version of the privacy policy (e.g., 'v2024.06'). Must be unique and is referenced in logs, consent, and audit trails. Required by the business for regulatory compliance and historical review."},"effective_date":{"type":"string","format":"date-time","description":"Effective start date for this policy version.\n\nMust be in ISO 8601 date-time format and represents the timestamp when this policy becomes active. Required for regulatory time-based traceability and determines which version is active when a user joins."},"title":{"type":"string","description":"Policy title/heading.\n\nA short, descriptive title for this version of the privacy policy (e.g., \"Discussion Board Privacy Statement - 2025 Update\"). Used to identify the policy in UI listings and legal documents."},"content":{"type":"string","description":"Full legal/privacy policy text.\n\nThe full authoritative text of the privacy and data protection policy as required by law and business rules. Displayed to users in legal/compliance interfaces, never truncated or summarized."}},"required":["version","effective_date","title","content"],"description":"Creation object for a new privacy policy version.\n\nAll fields are required to establish a legally binding and traceable policy entry. Each record is immutable and a new version is inserted when updating. This structure is compliant with business/legal audits."},"IDiscussionboardPrivacyPolicy":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key: Unique identifier for this privacy policy version.\n\nAuto-generated and used for system/DB reference."},"version":{"type":"string","description":"Policy version string (e.g., 'v2024.06').\n\nUniquely identifies each version for historical lookup, database audit, and user consent verification."},"effective_date":{"type":"string","format":"date-time","description":"Datetime this policy became effective (ISO 8601).\n\nUsed for time-based compliance, determining which policy covers a user at the time of their consent/account creation."},"title":{"type":"string","description":"Short heading/title for the privacy policy.\n\nDisplayable in UI and referenced in logs, user audit/history workflows."},"content":{"type":"string","description":"Full policy text.\n\nAuthoritative and complete legal description for data use, rights, retention, and other privacy matters."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this policy version (ISO 8601).\n\nDatabase/audit field for record keeping."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this record.\n\nAudit field for history/compliance; updates only on changes to this row."}},"required":["id","version","effective_date","title","content","created_at","updated_at"],"description":"Atomically represents a single privacy policy version.\n\nFields are referenced directly in privacy/legal screens, consent UIs, admin dashboards, and compliance data exports. Immutable except for admin updates."},"IDiscussionboardPrivacyPolicy.IRequest":{"type":"object","properties":{"version":{"type":"string","description":"Search or filter for a given policy version.\n\nFilters for exact matches to a version code/identifier (e.g., 'v2024.06')."},"effective_date":{"type":"string","format":"date-time","description":"Filter by effective date (e.g., show only policies effective after this date).\n\nISO 8601 format, supports range/bounds queries in admin UI."},"title":{"type":"string","description":"Filter by title substring, optionally with full-text or trigram search.\n\nUsed to narrow policy listings by semantic context or keywords."},"created_at":{"type":"string","format":"date-time","description":"Created at (for filtering or range search)\n\nISO 8601 date-time. Used in audit dashboards or when listing only recent policy updates."},"updated_at":{"type":"string","format":"date-time","description":"Updated at timestamp (range query/search)\n\nISO 8601 date-time, range/bound filter."}},"description":"Search/filter/pagination object for privacy policy admin pages and compliance exports.\n\nAll fields are optional and exactly match those present in the table for safe, compliant querying.","required":[]},"IPageDiscussionboardPrivacyPolicy":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionboardPrivacyPolicy"},"description":"Page-wise array of privacy policy records."}},"required":["pagination","data"],"description":"Paginated response/result object for privacy policy records.\n\nUsed for admin dashboards, audit search, compliance/reporting. Follows system standard for paged collections."},"Idiscussionboard_privacy_policies.IUpdate":{"type":"object","properties":{"version":{"type":"string","description":"New version identifier, if updating.\n\nSupports correcting a version typo, or retroactively version-bumping for regulatory update (rare / admin-only field)."},"effective_date":{"type":"string","format":"date-time","description":"Update to the effective date (ISO 8601), typically for retroactive compliance or error correction."},"title":{"type":"string","description":"Optional update of policy title. Used only for minor corrections or rebranding."},"content":{"type":"string","description":"Replacement policy text (full). Use only when legally updating the text, not for minor clarifications."},"created_at":{"type":"string","format":"date-time","description":"Backdated creation timestamp, if correcting for compliance/history (rare; admin-only)."},"updated_at":{"type":"string","format":"date-time","description":"Sets the updated timestamp explicitly (normally system-managed; only for audit fix-ups)."}},"description":"Update information for privacy policy record.\n\nAll fields are optional and may be provided individually for patch/update scenarios. Intended for admin-level use with extreme care and full audit logging.","required":[]},"Idiscussionboard_privacy_policies":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key: Unique identifier for this privacy policy version.\n\nAuto-generated and used for system/DB reference."},"version":{"type":"string","description":"Policy version string (e.g., 'v2024.06').\n\nUniquely identifies each version for historical lookup, database audit, and user consent verification."},"effective_date":{"type":"string","format":"date-time","description":"Datetime this policy became effective (ISO 8601).\n\nUsed for time-based compliance, determining which policy covers a user at the time of their consent/account creation."},"title":{"type":"string","description":"Short heading/title for the privacy policy.\n\nDisplayable in UI and referenced in logs, user audit/history workflows."},"content":{"type":"string","description":"Full policy text.\n\nAuthoritative and complete legal description for data use, rights, retention, and other privacy matters."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this policy version (ISO 8601).\n\nDatabase/audit field for record keeping."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this record.\n\nAudit field for history/compliance; updates only on changes to this row."}},"required":["id","version","effective_date","title","content","created_at","updated_at"],"description":"Fully represents a privacy policy record with all required fields and descriptive details for audit, compliance, and UI/legal display."},"Idiscussionboard_data_erasure_requests.ICreate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"ID of the member submitting the erasure request.\n\nForeign key to members table – ensures request links to identity for audit/compliance."},"status":{"type":"string","description":"Initial status string for the erasure request.\n\nExamples: 'pending', 'approved', 'denied', 'completed'\n\nMay be set by the initial submitter (typically 'pending') or by an admin if bootstrapping a migrated request."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when the erasure was requested.\n\nISO 8601, set to now unless re-importing or correcting audit history."},"admin_remark":{"oneOf":[{"type":"string","description":"Optional admin comment/remark.\n\nMay be set at creation (for admin-initiated requests) or null if not supplied by a member."},{"type":"null","description":"Optional admin comment/remark.\n\nMay be set at creation (for admin-initiated requests) or null if not supplied by a member."}],"description":"Optional admin comment/remark.\n\nMay be set at creation (for admin-initiated requests) or null if not supplied by a member."}},"required":["discussionboard_member_id","status","requested_at"],"description":"Input object for creating a data erasure request.\n\nCompliant with GDPR/CCPA and internal compliance: member, status, and timestamp required. Admin remark is optional."},"Idiscussionboard_data_erasure_requests":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key: unique identifier for this erasure request.\n\nUsed for tracking, audit, and compliance reporting."},"discussionboard_member_id":{"type":"string","format":"uuid","description":"FK to discussionboard_members, identifying request owner.\n\nRequired for all audit, compliance, and data processing workflows."},"status":{"type":"string","description":"Current status string for the erasure request.\n\nAllowed values include: 'pending', 'approved', 'denied', 'completed', etc. State machine is enforced elsewhere; this field is atomic and always up-to-date for recordkeeping."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when request was submitted."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"When request was reviewed by admin/mod (nullable).\n\nRemains null if never reviewed; audit-compliant."},{"type":"null","format":"date-time","description":"When request was reviewed by admin/mod (nullable).\n\nRemains null if never reviewed; audit-compliant."}],"description":"When request was reviewed by admin/mod (nullable).\n\nRemains null if never reviewed; audit-compliant."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"When request processing was completed (approved/denied/fulfilled).\n\nNullable for incomplete/pending requests."},{"type":"null","format":"date-time","description":"When request processing was completed (approved/denied/fulfilled).\n\nNullable for incomplete/pending requests."}],"description":"When request processing was completed (approved/denied/fulfilled).\n\nNullable for incomplete/pending requests."},"admin_remark":{"oneOf":[{"type":"string","description":"Admin-provided note for audit trail, compliance explanation, or legal record. Nullable."},{"type":"null","description":"Admin-provided note for audit trail, compliance explanation, or legal record. Nullable."}],"description":"Admin-provided note for audit trail, compliance explanation, or legal record. Nullable."}},"required":["id","discussionboard_member_id","status","requested_at"],"description":"Atomic data record representing a single data erasure request.\n\nAll fields captured directly from DB, providing a full history for audit, compliance, dashboard/review, and deletion workflow progress tracking."},"Idiscussionboard_data_erasure_requests.IRequest":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Filter to show only requests from a specific member.\n\nUse in member self-service dashboards/audits, or for admin querying of an individual user."},"status":{"type":"string","description":"Filter requests by status value (e.g., 'pending', 'approved', 'completed', etc.).\n\nValue must match those stored in the schema ("},"requested_at":{"type":"string","format":"date-time","description":"Optional filter by requested_at timestamp. Supports range filtering for audit export."},"reviewed_at":{"type":"string","format":"date-time","description":"Optional filter by review timestamp. Use in admin audit queries or workflow analysis."},"completed_at":{"type":"string","format":"date-time","description":"Optional filter for completed_at – show all completed within a range."}},"description":"Search/filter object for erasure requests table.\n\nAllows admin, mod, or analytics queries for dashboard, compliance, export, audit. All fields are optional and correspond directly to schema fields.","required":[]},"IPageIdiscussionboard_data_erasure_requests":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Idiscussionboard_data_erasure_requests"},"description":"Paginated erasure request records, matching query/filter."}},"required":["pagination","data"],"description":"Paginated page envelope for data erasure request result sets.\n\nStandard envelope includes page info, array of data records. Used for admin dashboard and regulatory export/audit."},"Idiscussionboard_data_erasure_requests.IUpdate":{"type":"object","properties":{"discussionboard_member_id":{"type":"string","format":"uuid","description":"Update the associated member for the request (UUID).\n\nNot to be performed except on migration/errors; changing member identity has audit implications."},"status":{"type":"string","description":"New status value. Used when marking as approved, denied, completed, etc. Only settable to values allowed in backend transitions/state machine."},"requested_at":{"type":"string","format":"date-time","description":"Optional update to request timestamp. Only by admin for correction/fixup."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set/clear the reviewed timestamp for this request."},{"type":"null","format":"date-time","description":"Set/clear the reviewed timestamp for this request."}],"description":"Set/clear the reviewed timestamp for this request."},"completed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set/clear the completion timestamp, indicating processing is finished."},{"type":"null","format":"date-time","description":"Set/clear the completion timestamp, indicating processing is finished."}],"description":"Set/clear the completion timestamp, indicating processing is finished."},"admin_remark":{"oneOf":[{"type":"string","description":"Update the admin remark for this request."},{"type":"null","description":"Update the admin remark for this request."}],"description":"Update the admin remark for this request."}},"description":"Update/patch object for erasure request row.\n\nEnables admin dashboards or system processes to update workflow state, audit fields, remarks. All fields are optional, matching DB schema exactly.","required":[]}},"authorization":[{"name":"member","description":"Can register, log in, view discussion boards, post new topics, comment, and interact with posts (like/upvote/downvote)."},{"name":"moderator","description":"Can do everything a member can, plus has the ability to edit/delete posts, manage reported content, and temporarily ban members for violations."},{"name":"admin","description":"Full platform control: includes all moderator functions, user management, board configuration, role assignment, and system settings."}]}},"created_at":"2025-07-25T05:13:01.287Z","reason":"Step to the interface designing after DB schema generation","step":0},"tokenUsage":{"facade":{"aggregate":{"total":3038268,"input":{"total":2892314,"cached":0},"output":{"total":145954,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":3038268,"input":{"total":2892314,"cached":0},"output":{"total":145954,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"analyze":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"prisma":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"interface":{"aggregate":{"total":3038268,"input":{"total":2892314,"cached":0},"output":{"total":145954,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":3038268,"input":{"total":2892314,"cached":0},"output":{"total":145954,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"test":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}},"realize":{"aggregate":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"initialize":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"select":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"cancel":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"call":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}},"describe":{"total":0,"input":{"total":0,"cached":0},"output":{"total":0,"reasoning":0,"accepted_prediction":0,"rejected_prediction":0}}}}}]